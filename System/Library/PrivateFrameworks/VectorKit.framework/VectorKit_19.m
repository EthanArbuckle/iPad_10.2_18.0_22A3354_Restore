void sub_19F76B174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteCollisionObject<md::GeocentricPointSource>::partitionSegments(std::__wrap_iter<md::PointSource::SegmentIndex *>,std::__wrap_iter<md::PointSource::SegmentIndex *>,gm::Box<double,3> &)::{lambda(md::PointSource::SegmentIndex const&,md::PointSource::SegmentIndex const&)#1} &,std::__wrap_iter<md::PointSource::SegmentIndex *>>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  double v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;

  v8 = *(_QWORD *)a4;
  v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a2, 0);
  v77 = v9;
  v78 = v10;
  v11 = *(&v76 + a4[2]);
  v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v8 + 128), *a2, 1);
  v74 = v12;
  v75 = v13;
  v14 = (*(&v73 + a4[2]) + v11) * 0.5;
  v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v8 + 128), *a1, 0);
  v77 = v15;
  v78 = v16;
  v17 = *(&v76 + a4[2]);
  v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v8 + 128), *a1, 1);
  v74 = v18;
  v75 = v19;
  v20 = *(_QWORD *)a4;
  if (v14 < (*(&v73 + a4[2]) + v17) * 0.5)
  {
    v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a3, 0);
    v77 = v21;
    v78 = v22;
    v23 = *(&v76 + a4[2]);
    v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a3, 1);
    v74 = v24;
    v75 = v25;
    v26 = (*(&v73 + a4[2]) + v23) * 0.5;
    v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a2, 0);
    v77 = v27;
    v78 = v28;
    v29 = *(&v76 + a4[2]);
    v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a2, 1);
    v74 = v30;
    v75 = v31;
    v32 = *a1;
    if (v26 < (*(&v73 + a4[2]) + v29) * 0.5)
    {
      *a1 = *a3;
      *a3 = v32;
      return 1;
    }
    *a1 = *a2;
    *a2 = v32;
    v59 = *(_QWORD *)a4;
    v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a3, 0);
    v77 = v60;
    v78 = v61;
    v62 = *(&v76 + a4[2]);
    v33 = 1;
    v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v59 + 128), *a3, 1);
    v74 = v63;
    v75 = v64;
    v65 = (*(&v73 + a4[2]) + v62) * 0.5;
    v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v59 + 128), *a2, 0);
    v77 = v66;
    v78 = v67;
    v68 = *(&v76 + a4[2]);
    v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v59 + 128), *a2, 1);
    v74 = v69;
    v75 = v70;
    if (v65 >= (*(&v73 + a4[2]) + v68) * 0.5)
      return v33;
    v71 = *a2;
    *a2 = *a3;
    *a3 = v71;
    return 2;
  }
  v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a3, 0);
  v77 = v34;
  v78 = v35;
  v36 = *(&v76 + a4[2]);
  v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a3, 1);
  v74 = v37;
  v75 = v38;
  v39 = (*(&v73 + a4[2]) + v36) * 0.5;
  v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a2, 0);
  v77 = v40;
  v78 = v41;
  v42 = *(&v76 + a4[2]);
  v33 = 0;
  v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v20 + 128), *a2, 1);
  v74 = v43;
  v75 = v44;
  if (v39 < (*(&v73 + a4[2]) + v42) * 0.5)
  {
    v45 = *a2;
    *a2 = *a3;
    *a3 = v45;
    v46 = *(_QWORD *)a4;
    v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(*(_QWORD *)a4 + 128), *a2, 0);
    v77 = v47;
    v78 = v48;
    v49 = *(&v76 + a4[2]);
    v33 = 1;
    v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v46 + 128), *a2, 1);
    v74 = v50;
    v75 = v51;
    v52 = (*(&v73 + a4[2]) + v49) * 0.5;
    v76 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v46 + 128), *a1, 0);
    v77 = v53;
    v78 = v54;
    v55 = *(&v76 + a4[2]);
    v73 = md::GeocentricPointSource::segmentWorldPoint(*(_QWORD *)(v46 + 128), *a1, 1);
    v74 = v56;
    v75 = v57;
    if (v52 < (*(&v73 + a4[2]) + v55) * 0.5)
    {
      v58 = *a1;
      *a1 = *a2;
      *a2 = v58;
      return 2;
    }
  }
  return v33;
}

void std::__shared_ptr_emplace<md::RouteCollisionObject<md::GeocentricPointSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteCollisionObject<md::GeocentricPointSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RouteCollisionObject<md::GeocentricPointSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 160);
    v4 = *(void **)(a1 + 152);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v4);
  }
  geo::Pool<md::RouteCollisionObject<md::GeocentricPointSource>::Node>::disposeElements(a1 + 104);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 112));
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(void **)(a1 + 72);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 8);
        v7 -= 8;

      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v8);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(_QWORD *)(a1 + 56) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 24) = &off_1E42B4C30;

}

void sub_19F76B6EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 112));
  _Unwind_Resume(a1);
}

void md::DaVinciGroundLayerDataSource::~DaVinciGroundLayerDataSource(md::DaVinciGroundLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A5878;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A5878;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::MuninLabelLayerData::MuninLabelLayerData(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];

  v8 = *(_QWORD **)(*a3 + 24);
  v9 = (std::__shared_weak_count *)v8[1];
  v21[0] = *v8;
  v21[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  md::MapTileData::MapTileData((uint64_t)a1, a2, a5, (uint64_t)v21, 1);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_1E42978D8;
  a1[79] = &unk_1E4297918;
  a1[90] = *a3;
  v14 = a3[1];
  a1[91] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  a1[92] = *a4;
  v17 = a4[1];
  a1[93] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void sub_19F76B99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MuninLabelLayerData::~MuninLabelLayerData(md::MuninLabelLayerData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42978D8;
  *((_QWORD *)this + 79) = &unk_1E4297918;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42978D8;
  *((_QWORD *)this + 79) = &unk_1E4297918;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::MuninLabelLayerData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninLabelLayerData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninLabelLayerData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::ARWalkingCustomSceneMapEngineMode::~ARWalkingCustomSceneMapEngineMode(md::ARWalkingCustomSceneMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E42A92A8;
  v2 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v3 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  md::MapEngineMode::~MapEngineMode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E42A92A8;
  v2 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v3 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::ARWalkingCustomSceneMapEngineMode::buildLocationProvider@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  result = 0.0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)v4 = &off_1E429A7D0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *a1 = v4;
  return result;
}

uint64_t md::ARWalkingCustomSceneMapEngineMode::buildScene(uint64_t a1, int a2, void *a3)
{
  id v3;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  id v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  int v22;
  char *v23;
  double v25;
  double v27;
  double v33;
  double v34;
  double v35;
  id v36;
  VKARWalkingArrivalFeature *v37;
  char *v38;
  __double2 v39;
  double v40;
  double v41;
  void *v42;
  const char *v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  double v50;
  double v52;
  double v54;
  double v55;
  double v56;
  _QWORD *v57;
  void *v58;
  VKARWalkingManeuverFeature *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  int8x16_t v79;
  float64x2_t v80;
  VKARWalkingManeuverFeature *v83;
  id v84;
  id v85;
  _QWORD *v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  double v94;
  double v95;
  double v96;
  double v97;
  id v98;
  double v99;
  int8x16_t v100;
  _QWORD __dst[2];
  int64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  _QWORD v109[3];
  float64x2_t v110;
  double v111;
  double v112;
  uint64_t v113;
  double v114;
  double v115;

  v6 = a3;
  v7 = v6;
  if (a2 != 2)
    goto LABEL_26;
  v8 = *(_QWORD **)(a1 + 576);
  v9 = v6;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  v104 = 0.0;
  v105 = 0.0;
  *(double *)&v103 = 6378137.0;
  gdc::CameraFrame<geo::Degrees,double>::createLocalEcefFrame((uint64_t)v109, (uint64_t)&v103);
  v12 = *(double *)v109;
  v11 = *(double *)&v109[1];
  v13 = *(double *)&v109[2];
  _D13 = v112;
  v99 = v111;
  v100 = (int8x16_t)v110;
  v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v10, "arDebugSceneFeatureDistance");
  v17 = v16;
  objc_msgSend(v10, "arDebugSceneFeatureHeading");
  v19 = v18;
  v20 = v17;
  v21 = -v17;
  if (objc_msgSend(v10, "arDebugSceneFeatureType"))
  {
    v22 = objc_msgSend(v10, "arDebugScenePoiType");
    v23 = (char *)operator new(0x40uLL);
    *(_OWORD *)v23 = xmmword_19FFB4720;
    *((_DWORD *)v23 + 4) = 6;
    *((_DWORD *)v23 + 5) = v22;
    *(_OWORD *)(v23 + 24) = xmmword_19FFB4730;
    *(_OWORD *)(v23 + 40) = xmmword_19FFB4740;
    *((_QWORD *)v23 + 7) = 0x1000000A4;
    _V4.D[1] = *(double *)&v100.i64[1];
    v25 = vmuld_lane_f64(v21, (float64x2_t)v100, 1);
    _D2 = v25 + v25;
    v27 = v20 * *(double *)v100.i64 + v20 * *(double *)v100.i64;
    __asm { FMLA            D14, D2, V4.D[1] }
    md::ARDebugCustomSceneBuilder::convertPointToCoordinate((double *)&v103, 1u, v12 + (v25 + v25) * _D13 - v27 * v99, v11 + (v25 + v25) * v99 + v27 * _D13, vmlad_n_f64(v13 - _D14, v27, *(double *)v100.i64));
    v33 = *(double *)&v103;
    v34 = v104;
    v35 = v105;
    v36 = objc_alloc_init(MEMORY[0x1E0D270A8]);
    objc_msgSend(v36, "replaceAttributes:count:", v23, 8);
    v37 = -[VKARWalkingArrivalFeature initWithPosition:iconStyleAttributes:]([VKARWalkingArrivalFeature alloc], "initWithPosition:iconStyleAttributes:", v36, v33, v34, v35);
    objc_msgSend(v15, "addObject:", v37);

    v38 = v23;
    goto LABEL_4;
  }
  v114 = 0.0;
  v115 = 0.0;
  *(double *)&v113 = 6378137.0;
  gdc::CameraFrame<geo::Degrees,double>::createLocalEcefBasis((double *)&v103, (double *)&v113);
  v95 = v107;
  v96 = v106;
  v94 = v108;
  v39 = __sincos_stret(v19 * 0.00872664626);
  v40 = v104;
  v97 = v105;
  v41 = *(double *)&v103;
  v98 = v9;
  objc_msgSend(v10, "arDebugSceneFeatureText");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (v42)
  {
    objc_msgSend(v10, "arDebugSceneFeatureText");
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v43 = (const char *)objc_msgSend(v3, "UTF8String");
  }
  else
  {
    v43 = "";
  }
  v44 = strlen(v43);
  if (v44 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    __dst[1] = v45;
    v102 = v48 | 0x8000000000000000;
    __dst[0] = v46;
  }
  else
  {
    HIBYTE(v102) = v44;
    v46 = __dst;
    if (!v44)
      goto LABEL_16;
  }
  memmove(v46, v43, v45);
LABEL_16:
  *((_BYTE *)v46 + v45) = 0;
  if (v42)

  _V4.D[1] = *(double *)&v100.i64[1];
  v50 = vmuld_lane_f64(v21, (float64x2_t)v100, 1);
  _D2 = v50 + v50;
  v52 = v20 * *(double *)v100.i64 + v20 * *(double *)v100.i64;
  __asm { FMLA            D14, D2, V4.D[1] }
  md::ARDebugCustomSceneBuilder::convertPointToCoordinate((double *)&v113, 1u, v12 + (v50 + v50) * _D13 - v52 * v99, v11 + (v50 + v50) * v99 + v52 * _D13, vmlad_n_f64(v13 - _D14, v52, *(double *)v100.i64));
  v54 = *(double *)&v113;
  v55 = v114;
  v56 = v115;
  if (v102 >= 0)
    v57 = __dst;
  else
    v57 = (_QWORD *)__dst[0];
  v9 = v98;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v57);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = [VKARWalkingManeuverFeature alloc];
  v60 = v39.__sinval / sqrt(v96 * v96 + v95 * v95 + v94 * v94);
  v61 = v60 * v94;
  v62 = v60 * v95;
  v63 = v60 * v94 * v40;
  v64 = v60 * v96;
  v65 = -(v63 - v62 * v97) - (v63 - v62 * v97);
  v66 = -(v62 * v41 - v64 * v40) - (v62 * v41 - v64 * v40);
  v67 = -(v64 * v97 - v61 * v41) - (v64 * v97 - v61 * v41);
  v68 = v40 + v65 * v61;
  v69 = v41 + v65 * v39.__cosval + v66 * v62 - v67 * v61;
  v70 = v68 + v67 * v39.__cosval;
  v71 = v97 + v67 * v64;
  v72 = v70 - v66 * v64;
  v73 = v71 + v66 * v39.__cosval - v65 * v62;
  v74 = 1.0 / sqrt(v69 * v69 + v72 * v72 + v73 * v73);
  v75.f64[0] = v74 * v69;
  v76 = v74 * v73;
  v75.f64[1] = v74 * v72;
  v77 = (float64x2_t)vextq_s8(v100, v100, 8uLL);
  v78.f64[1] = v77.f64[1];
  v78.f64[0] = v99;
  v79 = (int8x16_t)vmulq_f64(v75, v78);
  v75.f64[1] = v76;
  v80 = vmlsq_f64((float64x2_t)vextq_s8(v79, v79, 8uLL), v75, v77);
  _Q2 = vaddq_f64(v80, v80);
  __asm { FMLA            D0, D13, V2.D[1] }
  v83 = -[VKARWalkingManeuverFeature initWithDisplayLocation:routeCoordinate:maneuverHeading:displayText:](v59, "initWithDisplayLocation:routeCoordinate:maneuverHeading:displayText:", 0, v58, v54, v55, v56, (double)(acos(_D0 - vmulq_f64(_Q2, (float64x2_t)v100).f64[0]) * 57.2957795));
  objc_msgSend(v15, "addObject:", v83);

  if ((SHIBYTE(v102) & 0x80000000) == 0)
    goto LABEL_22;
  v38 = (char *)__dst[0];
LABEL_4:
  operator delete(v38);
LABEL_22:
  v84 = v9;
  v85 = v15;
  v86 = (_QWORD *)operator new();
  v87 = v85;
  v86[1] = &off_1E42B5370;
  v86[2] = 0;
  *v86 = &off_1E4293F38;
  v86[4] = &off_1E42B53F0;
  v86[5] = 0;
  v88 = v87;
  v89 = v88;
  if (v88)
    v90 = v88;
  v86[5] = v89;

  md::ARDebugScene::setFeatures((uint64_t)v86, v89);
  v91 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = v86;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
LABEL_26:
  v92 = *(_QWORD *)(a1 + 616);

  return v92;
}

void sub_19F76C384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

id md::ARWalkingCustomSceneMapEngineMode::getSession(md::ARWalkingCustomSceneMapEngineMode *this)
{
  return +[MDARSession newPositionalTrackingSession](MDARSession, "newPositionalTrackingSession");
}

void gdc::CameraFrame<geo::Degrees,double>::createLocalEcefFrame(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  gdc::CameraFrame<geo::Degrees,double>::createLocalEcefBasis(&v22, (double *)a2);
  v4 = v30 + v26 + v22;
  if (v4 <= 0.0)
  {
    if (v22 <= v26 || v22 <= v30)
    {
      v11 = sqrt(1.0 - (v26 + v22) + v30);
      v12 = 1.0 / (v11 + v11);
      v13 = (v28 + v24) * v12;
      v14 = (v29 + v27) * v12;
      v15 = v11 * 0.5;
      v16 = (v23 - v25) * v12;
      v17 = sqrt(v26 + 1.0 - (v22 + v30));
      v18 = 1.0 / (v17 + v17);
      v7 = v17 * 0.5;
      v9 = (v28 - v24) * v18;
      if (v26 > v30)
        v6 = (v25 + v23) * v18;
      else
        v6 = v13;
      if (v26 > v30)
      {
        v8 = (v29 + v27) * v18;
      }
      else
      {
        v7 = v14;
        v8 = v15;
      }
      if (v26 <= v30)
        v9 = v16;
    }
    else
    {
      v19 = sqrt(v22 + 1.0 - (v26 + v30));
      v20 = v19 + v19;
      v6 = v19 * 0.5;
      v21 = 1.0 / v20;
      v7 = (v25 + v23) * (1.0 / v20);
      v8 = (v28 + v24) * v21;
      v9 = (v27 - v29) * v21;
    }
  }
  else
  {
    v5 = 0.5 / sqrt(v4 + 1.0);
    v6 = v5 * (v27 - v29);
    v7 = v5 * (v28 - v24);
    v8 = v5 * (v23 - v25);
    v9 = 0.25 / v5;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(double *)(a1 + 24) = v6;
  *(double *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = v8;
  *(double *)(a1 + 48) = v9;
}

long double gdc::CameraFrame<geo::Degrees,double>::createLocalEcefBasis(double *a1, double *a2)
{
  long double v3;
  long double v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  __double2 v11;
  double v12;
  __double2 v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  long double result;
  double v29;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v29 = v3 * v3 + v4 * v4;
  v6 = sqrt(v29);
  v7 = atan2(v5, v6 * 0.996647189);
  v8 = atan2(v4, v3);
  v9 = __sincos_stret(v7);
  v10 = atan2(v5 + v9.__sinval * v9.__sinval * 42841.3115 * v9.__sinval, v6 + v9.__cosval * v9.__cosval * -42697.6727 * v9.__cosval);
  v11 = __sincos_stret(v10);
  v12 = v6 / v11.__cosval;
  v13 = __sincos_stret(v8 + 0.000000174532925);
  v14 = 1.0 / sqrt(v29 + v5 * v5);
  v15 = v14 * v3;
  v16 = v14 * v4;
  v17 = v14 * v5;
  a1[4] = v16;
  a1[5] = v17;
  v18 = -(v3 - v12 * v11.__cosval * v13.__cosval);
  v19 = -(v4 - v12 * v11.__cosval * v13.__sinval);
  v20 = -(v5 - (-42697.6727 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0) + v12) * v11.__sinval);
  v21 = 1.0 / sqrt(v20 * v20 + v18 * v18 + v19 * v19);
  v22 = v21 * v18;
  v23 = v21 * v19;
  v24 = v21 * v20;
  v25 = -(v24 * v16 - v23 * v17);
  v26 = -(v22 * v17 - v24 * v15);
  v27 = -(v23 * v15 - v22 * v16);
  a1[6] = v25;
  a1[7] = v26;
  a1[8] = v27;
  *a1 = -(v26 * v17 - v27 * v16);
  a1[1] = -(v27 * v15 - v25 * v17);
  result = -(v25 * v16 - v26 * v15);
  a1[2] = result;
  a1[3] = v15;
  return result;
}

uint64_t geo::_retain_ptr<ARSession * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B54D0;

  return a1;
}

void geo::_retain_ptr<ARSession * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B54D0;

  JUMPOUT(0x1A1AF4E00);
}

double GEOPDCameraPathFrameFromVKCameraFrame@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double result;

  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(double *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(float64x2_t *)(a2 + 24) = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v3 = *(double *)(a1 + 32);
  *(double *)(a2 + 40) = *(double *)(a1 + 40) * 0.0174532925;
  *(double *)(a2 + 48) = v2 * 0.0174532925;
  *(_QWORD *)(a2 + 80) = 0;
  result = v3 * 0.0174532925;
  *(_WORD *)(a2 + 80) = 760;
  *(double *)(a2 + 64) = v3 * 0.0174532925;
  return result;
}

double VKCameraFrameFromGEOPDCameraPathFrame@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double result;

  *(float64x2_t *)a2 = vmulq_f64(*(float64x2_t *)(a1 + 24), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  v2 = *(double *)(a1 + 40);
  v3 = *(double *)(a1 + 48) * 57.2957795;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(double *)(a2 + 24) = v3;
  result = *(double *)(a1 + 64) * 57.2957795;
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 40) = v2 * 57.2957795;
  return result;
}

void VKCameraPropertiesForStoreFrontView(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  float64x2_t v4;
  int8x16_t v5;
  id v6;
  float64x2_t v7;
  uint64_t v8;
  float64x2_t v9;

  v3 = a1;
  if (v3)
  {
    v6 = v3;
    md::mun::cameraFrameFromStorefront((uint64_t)&v7, v3);
    v4 = vmulq_f64(v7, (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
    *(_QWORD *)(a2 + 32) = v8;
    v5 = (int8x16_t)vmulq_f64(v9, (float64x2_t)xmmword_19FFB4750);
    *(float64x2_t *)a2 = v4;
    *(int8x16_t *)(a2 + 16) = vextq_s8(v5, v5, 8uLL);
    v3 = v6;
  }

}

void sub_19F76C928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::mun::MuninLabelLayerDataSource::~MuninLabelLayerDataSource(md::mun::MuninLabelLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  md::mun::MuninLabelLayerDataSource *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42ABF18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (md::mun::MuninLabelLayerDataSource *)*((_QWORD *)this + 80);
  if (v3 == (md::mun::MuninLabelLayerDataSource *)((char *)this + 616))
  {
    v4 = 4;
    v3 = (md::mun::MuninLabelLayerDataSource *)((char *)this + 616);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *((_QWORD *)this + 74) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  md::mun::MuninLabelLayerDataSource *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42ABF18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (md::mun::MuninLabelLayerDataSource *)*((_QWORD *)this + 80);
  if (v3 == (md::mun::MuninLabelLayerDataSource *)((char *)this + 616))
  {
    v4 = 4;
    v3 = (md::mun::MuninLabelLayerDataSource *)((char *)this + 616);
  }
  else
  {
    if (!v3)
    {
LABEL_8:
      *((_QWORD *)this + 74) = &off_1E42B4D50;

      gdc::LayerDataSource::~LayerDataSource(this);
      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_8;
}

void md::mun::MuninLabelLayerDataSource::didActivate(md::mun::MuninLabelLayerDataSource *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  md::mun::MuninLabelLayerDataSource *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *((_QWORD *)this + 80);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v11);
    v3 = v11;
    v4 = v12;
    if (v12)
    {
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    *((_QWORD *)this + 81) = v3;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = v4;
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      v4 = v12;
    }
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::mun::MuninLabelLayerDataSource::didDeactivate(v10);
  }
}

void md::mun::MuninLabelLayerDataSource::didDeactivate(md::mun::MuninLabelLayerDataSource *this)
{
  _OWORD *v1;
  std::__shared_weak_count *v2;

  v1 = (_OWORD *)((char *)this + 648);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
  *v1 = 0u;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void md::mun::MuninLabelLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  void *v49;
  void *v50;
  unint64_t v51;
  int v52;
  int v53;
  _BOOL4 v54;
  void *v55;
  unint64_t i;
  unsigned int v58;
  unsigned int v59;
  char v60;
  unint64_t j;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  _BOOL4 v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  void *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char v84[32];
  unint64_t v85;
  uint64_t v86;
  char v87[2];
  __int16 v88;
  int v89;
  void *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char v94[32];
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  int *v99;
  int *v100;
  char v101;
  int v102;
  uint64_t v103;
  int v104;
  char v105[8];

  if (a2 != a3)
  {
    v3 = a2;
    do
    {
      v4 = (_BYTE *)*v3;
      v97 = *(_BYTE *)*v3;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v98, (uint64_t)(v4 + 8));
      v101 = 0;
      if (v4[96])
      {
        v102 = *((_DWORD *)v4 + 25);
        v101 = 1;
      }
      v103 = *((_QWORD *)v4 + 13);
      v5 = *(_QWORD *)(*v3 + 16);
      v6 = *(unsigned __int8 *)(v5 + 8);
      v8 = *(_DWORD *)v5;
      v7 = *(_DWORD *)(v5 + 4);
      v9 = *v99;
      v10 = v99[1];
      v12 = v99[2];
      v11 = v99[3];
      v73 = *(_QWORD *)(*v3 + 112);
      v87[0] = 0;
      v88 = 24;
      v89 = 2147483646;
      v90 = v94;
      v91 = v94;
      v92 = v94;
      v93 = 32;
      v95 = 0;
      v78 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v90, v94, (char *)&v78, (char *)&v79);
      v78 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v90, v91, (char *)&v78, (char *)&v79);
      v78 = v12;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v90, v91, (char *)&v78, (char *)&v79);
      v78 = v11;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v90, v91, (char *)&v78, (char *)&v79);
      v13 = (unsigned __int8 *)v90;
      v14 = v91 - (_BYTE *)v90;
      if (v91 == v90)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        if (v14 <= 1)
          v14 = 1;
        do
        {
          v16 = *v13++;
          v15 ^= (v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + v16;
          --v14;
        }
        while (v14);
      }
      v95 = v15;
      v96 = v73;
      v74 = v3;
      gdc::LayerDataRequest::request(*v3, (uint64_t)v87, 0);
      v17 = -1;
      v72 = v7;
      do
      {
        v18 = *v99;
        v19 = v99[1];
        v20 = v99[2];
        v21 = v99[3];
        v22 = *(_QWORD *)(*v3 + 112);
        LOBYTE(v78) = 0;
        HIWORD(v78) = 22;
        v79 = 2147483646;
        v80 = v84;
        v81 = v84;
        v82 = v84;
        v83 = 32;
        v85 = 0;
        v23 = v19 + v17;
        LODWORD(v75) = v18 - 1;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v84, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v23;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v20;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v21;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        v24 = (unsigned __int8 *)v80;
        v25 = v81 - (_BYTE *)v80;
        if (v81 == v80)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 1)
            v25 = 1;
          do
          {
            v27 = *v24++;
            v26 ^= (v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v27;
            --v25;
          }
          while (v25);
        }
        v85 = v26;
        v86 = v22;
        gdc::LayerDataRequest::request(*v3, (uint64_t)&v78, 0);
        if (v80 != v82)
          free(v80);
        v28 = *v99;
        v29 = v99[1];
        v30 = v99[2];
        v31 = v99[3];
        v32 = *(_QWORD *)(*v3 + 112);
        LOBYTE(v78) = 0;
        HIWORD(v78) = 22;
        v79 = 2147483646;
        v80 = v84;
        v81 = v84;
        v82 = v84;
        v83 = 32;
        v85 = 0;
        v33 = v29 + v17;
        LODWORD(v75) = v28;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v84, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v33;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v30;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v31;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        v34 = (unsigned __int8 *)v80;
        v35 = v81 - (_BYTE *)v80;
        if (v81 == v80)
        {
          v36 = 0;
        }
        else
        {
          v36 = 0;
          if (v35 <= 1)
            v35 = 1;
          do
          {
            v37 = *v34++;
            v36 ^= (v36 << 6) - 0x61C8864680B583EBLL + (v36 >> 2) + v37;
            --v35;
          }
          while (v35);
        }
        v85 = v36;
        v86 = v32;
        gdc::LayerDataRequest::request(*v3, (uint64_t)&v78, 0);
        if (v80 != v82)
          free(v80);
        v38 = *v99;
        v39 = v99[1];
        v40 = v99[2];
        v41 = v99[3];
        v42 = *(_QWORD *)(*v3 + 112);
        LOBYTE(v78) = 0;
        HIWORD(v78) = 22;
        v79 = 2147483646;
        v80 = v84;
        v81 = v84;
        v82 = v84;
        v83 = 32;
        v85 = 0;
        v43 = v39 + v17;
        LODWORD(v75) = v38 + 1;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v84, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v43;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v40;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        LODWORD(v75) = v41;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v75, (char *)&v75 + 4);
        v44 = (unsigned __int8 *)v80;
        v45 = v81 - (_BYTE *)v80;
        if (v81 == v80)
        {
          v46 = 0;
          v47 = v72;
        }
        else
        {
          v46 = 0;
          if (v45 <= 1)
            v45 = 1;
          v47 = v72;
          do
          {
            v48 = *v44++;
            v46 ^= (v46 << 6) - 0x61C8864680B583EBLL + (v46 >> 2) + v48;
            --v45;
          }
          while (v45);
        }
        v85 = v46;
        v86 = v42;
        gdc::LayerDataRequest::request(*v3, (uint64_t)&v78, 0);
        if (v80 != v82)
          free(v80);
        ++v17;
      }
      while (v17 != 2);
      objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "activeTileGroup");
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      v51 = 0;
      v52 = v47 >> v6;
      v53 = v8 >> v6;
      if (!v6)
      {
        v52 = v47;
        v53 = v8;
      }
      v54 = (v53 | v52) == 0;
      v71 = v50;
      v70 = v54;
      while (v51 < objc_msgSend(v50, "regionalResourcesCount"))
      {
        objc_msgSend(v50, "regionalResourceAtIndex:", v51);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        if (v55)
        {
          for (i = 0; i < objc_msgSend(v55, "regionsCount"); ++i)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            objc_msgSend(v55, "regionAtIndex:", i);
            if (HIDWORD(v77) <= v6 && v76 >= v6)
            {
              v58 = v47;
              v59 = v8;
              if (v6)
              {
                if (v6 >= (v6 - BYTE4(v77)))
                  v60 = v6 - BYTE4(v77);
                else
                  v60 = v6;
                v58 = v47 >> v60;
                v59 = v8 >> v60;
              }
              if (v59 >= HIDWORD(v76) && v59 <= v75 && v58 >= v77 && v58 <= HIDWORD(v75))
                goto LABEL_72;
            }
          }
        }
        else if (objc_msgSend(0, "regionsCount"))
        {
          v75 = 0;
          v76 = 0;
          v77 = 0;
          if (v6 || !v54)
          {
            for (j = 1; j < objc_msgSend(0, "regionsCount"); ++j)
            {
              v75 = 0;
              v76 = 0;
              v77 = 0;
              if (!v6 && v54)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            v62 = *(_QWORD *)(a1 + 584);
            v63 = *(_QWORD *)(*v3 + 112);
            LOBYTE(v78) = 0;
            HIWORD(v78) = 18;
            v79 = -1073741827;
            v80 = v84;
            v81 = v84;
            v82 = v84;
            v83 = 32;
            v85 = 0;
            v104 = v51;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v84, (char *)&v104, v105);
            v104 = v62;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v80, v81, (char *)&v104, v105);
            v64 = (unsigned __int8 *)v80;
            v65 = v81 - (_BYTE *)v80;
            if (v81 == v80)
            {
              v66 = 0;
            }
            else
            {
              v66 = 0;
              if (v65 <= 1)
                v65 = 1;
              do
              {
                v67 = *v64++;
                v66 ^= (v66 << 6) - 0x61C8864680B583EBLL + (v66 >> 2) + v67;
                --v65;
              }
              while (v65);
            }
            v85 = v66;
            v86 = v63;
            gdc::LayerDataRequest::request(*v3, (uint64_t)&v78, 0);
            v47 = v72;
            v50 = v71;
            if (v80 != v82)
              free(v80);
            v54 = v70;
          }
        }

        ++v51;
      }

      if (v90 != v92)
        free(v90);
      if (v101)
        v101 = 0;
      if (v99 != v100)
        free(v99);
      v3 += 2;
    }
    while (v74 + 2 != a3);
  }
}

void sub_19F76D308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,void *a42)
{
  void *v42;
  uint64_t v43;
  void *v45;

  if (a40 != a42)
    free(a40);
  if (*(_BYTE *)(v43 - 112))
    *(_BYTE *)(v43 - 112) = 0;
  v45 = *(void **)(v43 - 192);
  if (v45 != *(void **)(v43 - 176))
    free(v45);
  _Unwind_Resume(a1);
}

void md::mun::MuninLabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  md::ResourceInfo *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  _QWORD *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t p_shared_weak_owners;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  __int128 v82;
  std::__shared_count v83;
  uint64_t shared_weak_owners;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t v115;
  std::__shared_count v116;
  std::__shared_weak_count_vtbl *v117;
  char *v118;
  std::__shared_weak_count_vtbl *v119;
  __int128 v120;
  void *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t v128;
  std::__shared_count v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_count v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  __int128 v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  void **v141;
  _QWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  _QWORD *v178;
  _QWORD *v179;
  void *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  void *v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count *v202;
  void *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v205;
  char v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  __int128 v214;
  int32x2_t v215;
  char *v216;
  char *v217;
  char *v218;
  double v219;
  double v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  _QWORD *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  md::ResourceInfo *v231;
  NSArray *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  __int128 v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  int v247;
  int v248;
  uint64_t *v249;
  _QWORD *v250;
  int v251;
  std::__shared_weak_count *v254;
  _QWORD *v255;
  md::ResourceInfo *v256;
  uint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  _BYTE v260[4];
  uint64_t v261;
  void *v262;
  void *v263;
  char v264;
  int v265;
  uint64_t v266;
  md::ResourceInfo *v267;
  std::__shared_weak_count *v268;
  char *v269;
  char *v270;
  char *v271;
  std::__shared_weak_count *v272;
  std::__shared_weak_count *v273;
  char *v274;
  __int128 v275;
  uint64_t v276;
  char *v277;
  char **v278;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(v6 + 8);
  v8 = *(_DWORD *)v6;
  v9 = *(_DWORD *)(v6 + 4);
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    while (*(_WORD *)v10 != 24)
    {
      v10 += 48;
      if (v10 == v11)
        goto LABEL_17;
    }
  }
  if (v10 == v11 || *(_QWORD *)(v10 + 32) != 1)
  {
LABEL_17:
    v259 = 0;
    goto LABEL_277;
  }
  v12 = v9;
  v13 = v8;
  v14 = *(_QWORD *)(v10 + 24);
  v15 = *(_QWORD *)(v14 + 112);
  v16 = *(std::__shared_weak_count **)(v14 + 120);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v258 = v15;
    v259 = v16;
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v8 = v13;
    v9 = v12;
    if (!v258)
      goto LABEL_277;
  }
  else
  {
    v258 = *(_QWORD *)(v14 + 112);
    v259 = 0;
    if (!v15)
      goto LABEL_277;
  }
  v251 = v7;
  v23 = *a3;
  v22 = a3[1];
  if (*a3 != v22)
  {
    while (*(_WORD *)v23 != 22)
    {
      v23 += 48;
      if (v23 == v22)
        goto LABEL_277;
    }
  }
  if (v23 != v22)
  {
    v247 = v9;
    v248 = v8;
    v249 = a3;
    v250 = a4;
    v24 = *(_QWORD **)(v23 + 24);
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = v24[14];
        v28 = (std::__shared_weak_count *)v24[15];
        if (v27)
          v29 = (_QWORD *)(v27 - 8);
        else
          v29 = 0;
        if (v28)
        {
          v30 = (unint64_t *)&v28->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = v29[27];
        v33 = v29[28];
        v35 = v29[19];
        v34 = v29[20];
        if (v28)
        {
          v36 = (unint64_t *)&v28->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v25 -= 0x30C30C30C30C30C3 * ((v33 - v32) >> 3);
        v26 += 0x63FB9AEB1FDCD759 * ((v34 - v35) >> 3);
        v24 = (_QWORD *)*v24;
      }
      while (v24);
      v272 = 0;
      v273 = 0;
      v274 = 0;
      v269 = 0;
      v270 = 0;
      v271 = 0;
      if (v25)
      {
        if (v25 > 0x186186186186186)
          abort();
        v272 = (std::__shared_weak_count *)operator new(168 * v25);
        v273 = v272;
        v274 = (char *)(v272 + 7 * v25);
      }
    }
    else
    {
      v26 = 0;
      v272 = 0;
      v273 = 0;
      v274 = 0;
      v269 = 0;
      v270 = 0;
      v271 = 0;
    }
    std::vector<md::mun::CollectionPoint>::reserve(&v269, v26);
    v38 = *(_QWORD **)(v23 + 24);
    if (v38)
    {
      while (1)
      {
        v39 = v38[14];
        v40 = (std::__shared_weak_count *)v38[15];
        v255 = v38;
        if (v39)
          v41 = (md::ResourceInfo *)(v39 - 8);
        else
          v41 = 0;
        v267 = v41;
        v268 = v40;
        if (v40)
        {
          v42 = (unint64_t *)&v40->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v254 = v40;
        v45 = *((_QWORD *)v41 + 27);
        v44 = *((_QWORD *)v41 + 28);
        v256 = v41;
        if (v44 - v45 < 1)
          goto LABEL_179;
        v46 = (v44 - v45) / 168;
        v47 = v273;
        if ((uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((v274 - (char *)v273) >> 3)) < v46)
        {
          v48 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v273 - (char *)v272) >> 3);
          v49 = v48 + v46;
          if (v48 + v46 > 0x186186186186186)
            abort();
          if (0x9E79E79E79E79E7ALL * ((v274 - (char *)v272) >> 3) > v49)
            v49 = 0x9E79E79E79E79E7ALL * ((v274 - (char *)v272) >> 3);
          if (0xCF3CF3CF3CF3CF3DLL * ((v274 - (char *)v272) >> 3) >= 0xC30C30C30C30C3)
            v50 = 0x186186186186186;
          else
            v50 = v49;
          v278 = &v274;
          if (v50)
          {
            if (v50 > 0x186186186186186)
              goto LABEL_315;
            v51 = (char *)operator new(168 * v50);
          }
          else
          {
            v51 = 0;
          }
          v64 = 0;
          v65 = &v51[168 * v48];
          *(_QWORD *)&v275 = v51;
          *((_QWORD *)&v275 + 1) = v65;
          v276 = (uint64_t)v65;
          v277 = &v51[168 * v50];
          v66 = 168 * v46;
          v67 = &v65[168 * v46];
          do
          {
            v68 = &v65[v64];
            v69 = v45 + v64;
            *(_QWORD *)v68 = *(_QWORD *)(v45 + v64);
            v68[8] = 0;
            if (*(_BYTE *)(v45 + v64 + 8))
            {
              v70 = *(_OWORD *)(v69 + 32);
              *((_OWORD *)v68 + 1) = *(_OWORD *)(v69 + 16);
              *((_OWORD *)v68 + 2) = v70;
              v68[8] = 1;
            }
            v68[48] = 0;
            if (*(_BYTE *)(v69 + 48))
            {
              v71 = &v65[v64];
              v72 = *(_OWORD *)(v45 + v64 + 56);
              *(_OWORD *)(v71 + 72) = *(_OWORD *)(v45 + v64 + 72);
              *(_OWORD *)(v71 + 56) = v72;
              v68[48] = 1;
            }
            v73 = &v65[v64];
            v74 = (uint64_t)&v65[v64 + 120];
            *((_QWORD *)v73 + 11) = v74;
            *((_QWORD *)v73 + 12) = v74;
            v75 = (uint64_t)&v65[v64 + 88];
            *(_QWORD *)(v75 + 16) = v74;
            *(_QWORD *)(v75 + 24) = 1;
            geo::small_vector_base<md::mun::OrientedPlane>::append<md::mun::OrientedPlane const*>(v75, *(__int128 **)(v69 + 88), *(__int128 **)(v69 + 96));
            v64 += 168;
          }
          while (v66 != v64);
          v76 = *((_QWORD *)&v275 + 1);
          v77 = v272;
          if (v272 == v47)
          {
            v80 = *((_QWORD *)&v275 + 1);
          }
          else
          {
            v78 = v47;
            v79 = v47;
            v80 = *((_QWORD *)&v275 + 1);
            do
            {
              v81 = v79[-7].__vftable;
              v79 -= 7;
              *(_QWORD *)(v80 - 168) = v81;
              v80 -= 168;
              *(_BYTE *)(v80 + 8) = 0;
              if (LOBYTE(v79->__shared_owners_))
              {
                v82 = *(_OWORD *)&v78[-7].__shared_weak_owners_;
                *(_OWORD *)(v76 - 136) = *(_OWORD *)&v78[-6].__shared_owners_;
                *(_OWORD *)(v76 - 152) = v82;
                *(_BYTE *)(v76 - 160) = 1;
              }
              *(_BYTE *)(v76 - 120) = 0;
              if (LOBYTE(v78[-5].__vftable))
              {
                v83 = v78[-4].std::__shared_count;
                *(_OWORD *)(v76 - 112) = *(_OWORD *)&v78[-5].__shared_owners_;
                *(std::__shared_count *)(v76 - 96) = v83;
                *(_BYTE *)(v76 - 120) = 1;
              }
              *(_QWORD *)(v76 - 80) = v76 - 48;
              shared_weak_owners = v78[-4].__shared_weak_owners_;
              *(_QWORD *)(v76 - 72) = v76 - 48;
              *(_QWORD *)(v76 - 64) = v76 - 48;
              *(_QWORD *)(v76 - 56) = v78[-3].__shared_weak_owners_;
              if (shared_weak_owners == v78[-3].__shared_owners_)
              {
                *(_QWORD *)(v76 - 72) = (char *)v78[-3].__vftable + v76 - shared_weak_owners - 48;
                v85 = v78[-3].__vftable;
                if ((std::__shared_weak_count_vtbl *)shared_weak_owners != v85)
                {
                  v86 = 0;
                  do
                  {
                    v87 = v76 + v86;
                    v88 = shared_weak_owners + v86;
                    v89 = *(_OWORD *)(shared_weak_owners + v86);
                    *(_QWORD *)(v87 - 32) = *(_QWORD *)(shared_weak_owners + v86 + 16);
                    *(_OWORD *)(v87 - 48) = v89;
                    v90 = *(_QWORD *)(shared_weak_owners + v86 + 24);
                    *(_DWORD *)(v87 - 16) = *(_DWORD *)(shared_weak_owners + v86 + 32);
                    *(_QWORD *)(v87 - 24) = v90;
                    *(_DWORD *)(v87 - 12) = *(_DWORD *)(shared_weak_owners + v86 + 36);
                    *(_QWORD *)(v87 - 8) = *(_QWORD *)(shared_weak_owners + v86 + 40);
                    v86 += 48;
                  }
                  while ((std::__shared_weak_count_vtbl *)(v88 + 48) != v85);
                }
              }
              else
              {
                *(_QWORD *)(v76 - 80) = shared_weak_owners;
                *(_QWORD *)(v76 - 72) = v78[-3].__vftable;
                *(_OWORD *)&v78[-4].__shared_weak_owners_ = 0u;
                *(_OWORD *)&v78[-3].__shared_owners_ = 0u;
              }
              v78 = v79;
              v76 = v80;
            }
            while (v79 != v77);
          }
          *((_QWORD *)&v275 + 1) = v80;
          v91 = v273;
          if (v273 != v47)
          {
            do
            {
              *(_QWORD *)v67 = v47->__vftable;
              v67[8] = 0;
              if (LOBYTE(v47->__shared_owners_))
              {
                v92 = *(_OWORD *)&v47[1].__shared_owners_;
                *((_OWORD *)v67 + 1) = *(_OWORD *)&v47->__shared_weak_owners_;
                *((_OWORD *)v67 + 2) = v92;
                v67[8] = 1;
              }
              v67[48] = 0;
              if (LOBYTE(v47[2].__vftable))
              {
                v93 = *(_OWORD *)&v47[2].__shared_owners_;
                *(std::__shared_count *)(v67 + 72) = v47[3].std::__shared_count;
                *(_OWORD *)(v67 + 56) = v93;
                v67[48] = 1;
              }
              *((_QWORD *)v67 + 11) = v67 + 120;
              v94 = v47[3].__shared_weak_owners_;
              *((_QWORD *)v67 + 12) = v67 + 120;
              *((_QWORD *)v67 + 13) = v67 + 120;
              *((_QWORD *)v67 + 14) = v47[4].__shared_weak_owners_;
              if (v94 == v47[4].__shared_owners_)
              {
                *((_QWORD *)v67 + 12) = &v67[(unint64_t)v47[4].__vftable - v94 + 120];
                v95 = v47[4].__vftable;
                if ((std::__shared_weak_count_vtbl *)v94 != v95)
                {
                  v96 = 0;
                  do
                  {
                    v97 = &v67[v96];
                    v98 = v94 + v96;
                    v99 = *(_OWORD *)(v94 + v96);
                    *((_QWORD *)v97 + 17) = *(_QWORD *)(v94 + v96 + 16);
                    *(_OWORD *)(v97 + 120) = v99;
                    v100 = *(_QWORD *)(v94 + v96 + 24);
                    *((_DWORD *)v97 + 38) = *(_DWORD *)(v94 + v96 + 32);
                    *((_QWORD *)v97 + 18) = v100;
                    *((_DWORD *)v97 + 39) = *(_DWORD *)(v94 + v96 + 36);
                    *((_QWORD *)v97 + 20) = *(_QWORD *)(v94 + v96 + 40);
                    v96 += 48;
                  }
                  while ((std::__shared_weak_count_vtbl *)(v98 + 48) != v95);
                }
              }
              else
              {
                *((_QWORD *)v67 + 11) = v94;
                *((_QWORD *)v67 + 12) = v47[4].__vftable;
                *(_OWORD *)&v47[3].__shared_weak_owners_ = 0u;
                *(_OWORD *)&v47[4].__shared_owners_ = 0u;
              }
              v47 += 7;
              v67 += 168;
            }
            while (v47 != v91);
            v80 = *((_QWORD *)&v275 + 1);
            v47 = v273;
          }
          v276 = (uint64_t)v67;
          v101 = v272;
          v272 = (std::__shared_weak_count *)v80;
          v273 = (std::__shared_weak_count *)v67;
          v274 = v277;
          while (v47 != v101)
          {
            v102 = (void *)v47[-4].__shared_weak_owners_;
            if (v102 != (void *)v47[-3].__shared_owners_)
              free(v102);
            if (LOBYTE(v47[-5].__vftable))
              LOBYTE(v47[-5].__vftable) = 0;
            if (LOBYTE(v47[-7].__shared_owners_))
              LOBYTE(v47[-7].__shared_owners_) = 0;
            v47 -= 7;
          }
          if (v101)
            operator delete(v101);
          goto LABEL_179;
        }
        if (v46 > 0)
        {
          if (v45 == v44)
          {
            v61 = v273;
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = v45 + v52 * 24;
              v54 = &v47[v52].__vftable;
              *v54 = *(_QWORD *)(v45 + v52 * 24);
              *((_BYTE *)v54 + 8) = 0;
              if (*(_BYTE *)(v45 + v52 * 24 + 8))
              {
                v55 = *(_OWORD *)(v53 + 32);
                *((_OWORD *)v54 + 1) = *(_OWORD *)(v53 + 16);
                *((_OWORD *)v54 + 2) = v55;
                *((_BYTE *)v54 + 8) = 1;
              }
              *((_BYTE *)v54 + 48) = 0;
              if (*(_BYTE *)(v53 + 48))
              {
                v56 = &v47[v52].__vftable;
                v57 = *(_OWORD *)(v45 + v52 * 24 + 56);
                *(_OWORD *)(v56 + 9) = *(_OWORD *)(v45 + v52 * 24 + 72);
                *(_OWORD *)(v56 + 7) = v57;
                *((_BYTE *)v54 + 48) = 1;
              }
              v58 = &v47[v52].__vftable;
              v59 = (uint64_t)&v47[v52 + 5];
              v58[11] = v59;
              v58[12] = v59;
              p_shared_weak_owners = (uint64_t)&v47[v52 + 3].__shared_weak_owners_;
              *(_QWORD *)(p_shared_weak_owners + 16) = v59;
              *(_QWORD *)(p_shared_weak_owners + 24) = 1;
              geo::small_vector_base<md::mun::OrientedPlane>::append<md::mun::OrientedPlane const*>(p_shared_weak_owners, *(__int128 **)(v53 + 88), *(__int128 **)(v53 + 96));
              v52 += 7;
            }
            while (v53 + 168 != v44);
            v61 = &v47[v52];
          }
          v273 = v61;
          goto LABEL_179;
        }
        v62 = v45 + 168 * v46;
        v63 = v273;
        v103 = 7 * v46;
        v104 = &v273[-7 * v46];
        v105 = v273;
        v106 = v104;
        if (v104 < v273)
        {
          do
          {
            v105->__vftable = v106->__vftable;
            LOBYTE(v105->__shared_owners_) = 0;
            if (LOBYTE(v106->__shared_owners_))
            {
              v109 = *(_OWORD *)&v106[1].__shared_owners_;
              *(_OWORD *)&v105->__shared_weak_owners_ = *(_OWORD *)&v106->__shared_weak_owners_;
              *(_OWORD *)&v105[1].__shared_owners_ = v109;
              LOBYTE(v105->__shared_owners_) = 1;
            }
            LOBYTE(v105[2].__vftable) = 0;
            if (LOBYTE(v106[2].__vftable))
            {
              v110 = *(_OWORD *)&v106[2].__shared_owners_;
              v105[3].std::__shared_count = v106[3].std::__shared_count;
              *(_OWORD *)&v105[2].__shared_owners_ = v110;
              LOBYTE(v105[2].__vftable) = 1;
            }
            v105[3].__shared_weak_owners_ = (uint64_t)&v105[5];
            v111 = v106[3].__shared_weak_owners_;
            v105[4].__vftable = (std::__shared_weak_count_vtbl *)&v105[5];
            v105[4].__shared_owners_ = (uint64_t)&v105[5];
            v105[4].__shared_weak_owners_ = v106[4].__shared_weak_owners_;
            if (v111 == v106[4].__shared_owners_)
            {
              v105[4].__vftable = (std::__shared_weak_count_vtbl *)((char *)&v105[5]
                                                                  + (unint64_t)v106[4].__vftable
                                                                  - v111);
              v112 = v106[4].__vftable;
              if ((std::__shared_weak_count_vtbl *)v111 != v112)
              {
                v113 = 0;
                do
                {
                  v114 = &v105[v113 / 0x18];
                  v115 = v111 + v113;
                  v116 = *(std::__shared_count *)(v111 + v113);
                  v114[5].__shared_weak_owners_ = *(_QWORD *)(v111 + v113 + 16);
                  v114[5].std::__shared_count = v116;
                  v117 = *(std::__shared_weak_count_vtbl **)(v111 + v113 + 24);
                  LODWORD(v114[6].__shared_owners_) = *(_DWORD *)(v111 + v113 + 32);
                  v114[6].__vftable = v117;
                  HIDWORD(v114[6].__shared_owners_) = *(_DWORD *)(v111 + v113 + 36);
                  v114[6].__shared_weak_owners_ = *(_QWORD *)(v111 + v113 + 40);
                  v113 += 48;
                }
                while ((std::__shared_weak_count_vtbl *)(v115 + 48) != v112);
              }
            }
            else
            {
              v105[3].__shared_weak_owners_ = v111;
              v105[4].__vftable = v106[4].__vftable;
              *(_OWORD *)&v106[3].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v106[4].__shared_owners_ = 0u;
            }
            v106 += 7;
            v105 += 7;
          }
          while (v106 < v47);
        }
        v273 = v105;
        if (v63 != &v47[v103])
        {
          v107 = v104;
          v108 = v63;
          while (1)
          {
            v119 = v107[-7].__vftable;
            v107 -= 7;
            v108[-7].__vftable = v119;
            v108 -= 7;
            if (LOBYTE(v107->__shared_owners_))
            {
              if (LOBYTE(v108->__shared_owners_))
              {
                v63[-7].__shared_weak_owners_ = v104[-7].__shared_weak_owners_;
                v63[-6].__vftable = v104[-6].__vftable;
                v63[-6].__shared_owners_ = v104[-6].__shared_owners_;
                v63[-6].__shared_weak_owners_ = v104[-6].__shared_weak_owners_;
              }
              else
              {
                v120 = *(_OWORD *)&v104[-7].__shared_weak_owners_;
                *(_OWORD *)&v63[-6].__shared_owners_ = *(_OWORD *)&v104[-6].__shared_owners_;
                *(_OWORD *)&v63[-7].__shared_weak_owners_ = v120;
                LOBYTE(v63[-7].__shared_owners_) = 1;
              }
            }
            else if (LOBYTE(v108->__shared_owners_))
            {
              LOBYTE(v63[-7].__shared_owners_) = 0;
            }
            if (!LOBYTE(v104[-5].__vftable))
              break;
            if (LOBYTE(v63[-5].__vftable))
            {
              v63[-5].__shared_owners_ = v104[-5].__shared_owners_;
              v63[-5].__shared_weak_owners_ = v104[-5].__shared_weak_owners_;
              v63[-4].__vftable = v104[-4].__vftable;
              v63[-4].__shared_owners_ = v104[-4].__shared_owners_;
              if (v63 != v104)
                goto LABEL_149;
            }
            else
            {
              v131 = v104[-4].std::__shared_count;
              *(_OWORD *)&v63[-5].__shared_owners_ = *(_OWORD *)&v104[-5].__shared_owners_;
              v63[-4].std::__shared_count = v131;
              LOBYTE(v63[-5].__vftable) = 1;
              if (v63 != v104)
                goto LABEL_149;
            }
LABEL_135:
            v63 = v108;
            v104 = v107;
            if (v107 == v47)
              goto LABEL_158;
          }
          if (LOBYTE(v63[-5].__vftable))
            LOBYTE(v63[-5].__vftable) = 0;
          if (v63 == v104)
            goto LABEL_135;
LABEL_149:
          v121 = (void *)v63[-4].__shared_weak_owners_;
          if (v121 != (void *)v63[-3].__shared_owners_)
            free(v121);
          v122 = v63 - 2;
          v63[-3].__shared_owners_ = (uint64_t)&v63[-2];
          v123 = v104[-4].__shared_weak_owners_;
          if (v123 == v104[-3].__shared_owners_)
          {
            v63[-4].__shared_weak_owners_ = (uint64_t)v122;
            v124 = v104[-4].__shared_weak_owners_;
            v63[-3].__vftable = (std::__shared_weak_count_vtbl *)((char *)v122
                                                                + (unint64_t)v104[-3].__vftable
                                                                - v124);
            v125 = v104[-3].__vftable;
            if ((std::__shared_weak_count_vtbl *)v124 != v125)
            {
              v126 = 0;
              do
              {
                v127 = &v63[v126 / 0x18];
                v128 = v124 + v126;
                v129 = *(std::__shared_count *)(v124 + v126);
                v127[-2].__shared_weak_owners_ = *(_QWORD *)(v124 + v126 + 16);
                v127[-2].std::__shared_count = v129;
                v130 = *(std::__shared_weak_count_vtbl **)(v124 + v126 + 24);
                LODWORD(v127[-1].__shared_owners_) = *(_DWORD *)(v124 + v126 + 32);
                v127[-1].__vftable = v130;
                HIDWORD(v127[-1].__shared_owners_) = *(_DWORD *)(v124 + v126 + 36);
                v127[-1].__shared_weak_owners_ = *(_QWORD *)(v124 + v126 + 40);
                v126 += 48;
              }
              while ((std::__shared_weak_count_vtbl *)(v128 + 48) != v125);
            }
          }
          else
          {
            v118 = (char *)&v104[-4].__shared_weak_owners_;
            v63[-4].__shared_weak_owners_ = v123;
            v63[-3].__vftable = v104[-3].__vftable;
            *(_OWORD *)v118 = 0u;
            *((_OWORD *)v118 + 1) = 0u;
          }
          v63[-3].__shared_weak_owners_ = v104[-3].__shared_weak_owners_;
          goto LABEL_135;
        }
LABEL_158:
        if (v45 != v62)
          break;
LABEL_179:
        v145 = *((_QWORD *)v256 + 19);
        v144 = *((_QWORD *)v256 + 20);
        v146 = v144 - v145;
        if (v144 - v145 >= 1)
        {
          v147 = v146 / 1864;
          v148 = v270;
          if (0x63FB9AEB1FDCD759 * ((v271 - v270) >> 3) >= v146 / 1864)
          {
            if (v147 <= 0)
            {
              v257 = v145 + 1864 * v147;
              v181 = 1864 * v147;
              v182 = &v270[-1864 * v147];
              v183 = (uint64_t)v270;
              v184 = (unint64_t)v182;
              if (v182 < v270)
              {
                do
                {
                  v185 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(v183, v184);
                  v184 += 1864;
                  v183 = v185 + 1864;
                }
                while (v184 < (unint64_t)v148);
              }
              v270 = (char *)v183;
              if (v148 != &v148[v181])
              {
                v186 = 0;
                do
                {
                  v188 = &v148[v186];
                  v189 = &v182[v186];
                  *(_QWORD *)&v148[v186 - 1864] = *(_QWORD *)&v182[v186 - 1864];
                  *(_DWORD *)&v148[v186 - 1832] = *(_DWORD *)&v182[v186 - 1832];
                  *(_DWORD *)&v148[v186 - 1828] = *(_DWORD *)&v182[v186 - 1828];
                  *(_DWORD *)&v148[v186 - 1824] = *(_DWORD *)&v182[v186 - 1824];
                  *(_DWORD *)&v148[v186 - 1820] = *(_DWORD *)&v182[v186 - 1820];
                  *(_QWORD *)&v148[v186 - 1856] = *(_QWORD *)&v182[v186 - 1856];
                  *(_QWORD *)&v148[v186 - 1848] = *(_QWORD *)&v182[v186 - 1848];
                  *(_QWORD *)&v148[v186 - 1840] = *(_QWORD *)&v182[v186 - 1840];
                  *(_DWORD *)&v148[v186 - 1816] = *(_DWORD *)&v182[v186 - 1816];
                  *(_QWORD *)&v148[v186 - 1808] = *(_QWORD *)&v182[v186 - 1808];
                  *(_QWORD *)&v148[v186 - 1800] = *(_QWORD *)&v182[v186 - 1800];
                  *(_QWORD *)&v148[v186 - 1792] = *(_QWORD *)&v182[v186 - 1792];
                  *(_QWORD *)&v148[v186 - 1784] = *(_QWORD *)&v182[v186 - 1784];
                  if (v182 != v148)
                    geo::small_vector_base<md::mun::PhotoInfo>::move((uint64_t)(v188 - 1776), (uint64_t *)v189 - 222, (uint64_t)(v188 - 1744));
                  v187 = *((_QWORD *)v189 - 2);
                  *(_QWORD *)(v188 - 11) = *(_QWORD *)(v189 - 11);
                  *((_QWORD *)v188 - 2) = v187;
                  v186 -= 1864;
                }
                while (-8 * (-v181 >> 3) != v186);
              }
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*,md::mun::CollectionPoint*>(v145, v257, (uint64_t)v148);
            }
            else
            {
              v153 = *((_QWORD *)v256 + 19);
              if (v153 == v144)
              {
                v161 = v270;
              }
              else
              {
                v154 = v270;
                do
                {
                  v155 = v154;
                  *(_QWORD *)v154 = *(_QWORD *)v153;
                  v156 = *(_OWORD *)(v153 + 8);
                  *((_QWORD *)v154 + 3) = *(_QWORD *)(v153 + 24);
                  *(_OWORD *)(v154 + 8) = v156;
                  v157 = *(_QWORD *)(v153 + 32);
                  *((_DWORD *)v155 + 10) = *(_DWORD *)(v153 + 40);
                  *((_QWORD *)v155 + 4) = v157;
                  *(_QWORD *)(v155 + 44) = *(_QWORD *)(v153 + 44);
                  v158 = *(_OWORD *)(v153 + 56);
                  v159 = *(_OWORD *)(v153 + 72);
                  *((_QWORD *)v155 + 11) = v155 + 120;
                  *(_OWORD *)(v155 + 56) = v158;
                  *(_OWORD *)(v155 + 72) = v159;
                  *((_QWORD *)v155 + 12) = v155 + 120;
                  *((_QWORD *)v155 + 13) = v155 + 120;
                  *((_QWORD *)v155 + 14) = 6;
                  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v155 + 88), *(__int128 **)(v153 + 88), *(__int128 **)(v153 + 96));
                  v160 = *(_QWORD *)(v153 + 1848);
                  *(_QWORD *)(v155 + 1853) = *(_QWORD *)(v153 + 1853);
                  *((_QWORD *)v155 + 231) = v160;
                  v153 += 1864;
                  v154 = v155 + 1864;
                }
                while (v153 != v144);
                v161 = v155 + 1864;
              }
              v270 = v161;
            }
          }
          else
          {
            v149 = 0x63FB9AEB1FDCD759 * ((v270 - v269) >> 3);
            v150 = v149 + v147;
            if ((unint64_t)(v149 + v147) > 0x2328A701194538)
              abort();
            if (0xC7F735D63FB9AEB2 * ((v271 - v269) >> 3) > v150)
              v150 = 0xC7F735D63FB9AEB2 * ((v271 - v269) >> 3);
            if ((unint64_t)(0x63FB9AEB1FDCD759 * ((v271 - v269) >> 3)) >= 0x119453808CA29CLL)
              v151 = 0x2328A701194538;
            else
              v151 = v150;
            v278 = &v271;
            if (v151)
            {
              if (v151 > 0x2328A701194538)
LABEL_315:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v152 = (char *)operator new(1864 * v151);
            }
            else
            {
              v152 = 0;
            }
            v162 = 0;
            v163 = &v152[1864 * v149];
            *(_QWORD *)&v275 = v152;
            *((_QWORD *)&v275 + 1) = v163;
            v276 = (uint64_t)v163;
            v277 = &v152[1864 * v151];
            v164 = 1864 * v147;
            v165 = (uint64_t)&v163[v164];
            do
            {
              v166 = &v163[v162];
              *(_QWORD *)v166 = *(_QWORD *)(v145 + v162);
              v167 = *(_OWORD *)(v145 + v162 + 8);
              *((_QWORD *)v166 + 3) = *(_QWORD *)(v145 + v162 + 24);
              *(_OWORD *)(v166 + 8) = v167;
              v168 = *(_QWORD *)(v145 + v162 + 32);
              *((_DWORD *)v166 + 10) = *(_DWORD *)(v145 + v162 + 40);
              *((_QWORD *)v166 + 4) = v168;
              *(_QWORD *)(v166 + 44) = *(_QWORD *)(v145 + v162 + 44);
              v169 = *(_OWORD *)(v145 + v162 + 56);
              *(_OWORD *)(v166 + 72) = *(_OWORD *)(v145 + v162 + 72);
              v170 = (uint64_t)&v163[v162 + 120];
              *(_QWORD *)&v163[v162 + 88] = v170;
              *(_OWORD *)(v166 + 56) = v169;
              *((_QWORD *)v166 + 12) = v170;
              *((_QWORD *)v166 + 13) = v170;
              *((_QWORD *)v166 + 14) = 6;
              geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v163[v162 + 88], *(__int128 **)(v145 + v162 + 88), *(__int128 **)(v145 + v162 + 96));
              v171 = *(_QWORD *)(v145 + v162 + 1848);
              *(_QWORD *)(v166 + 1853) = *(_QWORD *)(v145 + v162 + 1853);
              *((_QWORD *)v166 + 231) = v171;
              v162 += 1864;
            }
            while (v164 != v162);
            v276 = (uint64_t)&v163[v164];
            v172 = (char *)*((_QWORD *)&v275 + 1);
            v173 = v269;
            if (v269 != v148)
            {
              v174 = (uint64_t)v148;
              do
              {
                v174 -= 1864;
                v172 = (char *)std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)(v172 - 1864), v174);
              }
              while ((char *)v174 != v173);
              v165 = v276;
            }
            *((_QWORD *)&v275 + 1) = v172;
            v175 = v270;
            if (v270 != v148)
            {
              do
              {
                std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(v165, (uint64_t)v148);
                v148 += 1864;
                v165 += 1864;
              }
              while (v148 != v175);
              v172 = (char *)*((_QWORD *)&v275 + 1);
              v148 = v270;
            }
            v176 = v269;
            v269 = v172;
            v270 = (char *)v165;
            v271 = v277;
            if (v148 != v176)
            {
              do
              {
                v177 = v148 - 1864;
                v178 = (_QWORD *)*((_QWORD *)v148 - 222);
                v179 = (_QWORD *)*((_QWORD *)v148 - 221);
                if (v178 != v179)
                {
                  do
                  {
                    v180 = (void *)v178[31];
                    if (v180 != (void *)v178[33])
                      free(v180);
                    v178 += 36;
                  }
                  while (v178 != v179);
                  v178 = (_QWORD *)*((_QWORD *)v148 - 222);
                }
                if (v178 != *((_QWORD **)v148 - 220))
                  free(v178);
                v148 -= 1864;
              }
              while (v177 != v176);
            }
            if (v176)
              operator delete(v176);
          }
        }
        if (v254)
        {
          v190 = (unint64_t *)&v254->__shared_owners_;
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        v38 = (_QWORD *)*v255;
        if (!*v255)
          goto LABEL_233;
      }
      v132 = 0;
      while (1)
      {
        v133 = v45 + v132 * 24;
        v134 = &v47[v132].__vftable;
        v47[v132].__vftable = *(std::__shared_weak_count_vtbl **)(v45 + v132 * 24);
        if (*(_BYTE *)(v45 + v132 * 24 + 8))
        {
          if (LOBYTE(v47[v132].__shared_owners_))
          {
            v135 = &v47[v132].__vftable;
            v135[2] = *(_QWORD *)(v45 + v132 * 24 + 16);
            v135[3] = *(_QWORD *)(v45 + v132 * 24 + 24);
            v135[4] = *(_QWORD *)(v45 + v132 * 24 + 32);
            v135[5] = *(_QWORD *)(v45 + v132 * 24 + 40);
          }
          else
          {
            v136 = &v47[v132].__vftable;
            v137 = *(_OWORD *)(v45 + v132 * 24 + 32);
            *((_OWORD *)v136 + 1) = *(_OWORD *)(v45 + v132 * 24 + 16);
            *((_OWORD *)v136 + 2) = v137;
            *((_BYTE *)v134 + 8) = 1;
          }
        }
        else if (LOBYTE(v47[v132].__shared_owners_))
        {
          *((_BYTE *)v134 + 8) = 0;
        }
        v138 = &v47[v132].__vftable;
        if (!*(_BYTE *)(v133 + 48))
          break;
        if (LOBYTE(v47[v132 + 2].__vftable))
        {
          v139 = &v47[v132].__vftable;
          v139[7] = *(_QWORD *)(v45 + v132 * 24 + 56);
          v139[8] = *(_QWORD *)(v45 + v132 * 24 + 64);
          v139[9] = *(_QWORD *)(v45 + v132 * 24 + 72);
          v139[10] = *(_QWORD *)(v45 + v132 * 24 + 80);
          if (v134 != (_QWORD *)v133)
            goto LABEL_175;
        }
        else
        {
          v142 = &v47[v132].__vftable;
          v143 = *(_OWORD *)(v45 + v132 * 24 + 56);
          *(_OWORD *)(v142 + 9) = *(_OWORD *)(v45 + v132 * 24 + 72);
          *(_OWORD *)(v142 + 7) = v143;
          *((_BYTE *)v138 + 48) = 1;
          if (v134 != (_QWORD *)v133)
            goto LABEL_175;
        }
LABEL_161:
        v132 += 7;
        if (v133 + 168 == v62)
          goto LABEL_179;
      }
      if (LOBYTE(v47[v132 + 2].__vftable))
        *((_BYTE *)v138 + 48) = 0;
      if (v134 == (_QWORD *)v133)
        goto LABEL_161;
LABEL_175:
      v140 = &v47[v132].__vftable;
      v141 = (void **)&v47[v132 + 3].__shared_weak_owners_;
      if (*v141 != (void *)v47[v132 + 4].__shared_owners_)
        free(*v141);
      *v141 = v140 + 15;
      v140[12] = v140 + 15;
      v140[13] = v140 + 15;
      v47[v132 + 4].__shared_weak_owners_ = 1;
      geo::small_vector_base<md::mun::OrientedPlane>::append<md::mun::OrientedPlane const*>((uint64_t)&v47[v132 + 3].__shared_weak_owners_, *(__int128 **)(v45 + v132 * 24 + 88), *(__int128 **)(v45 + v132 * 24 + 96));
      goto LABEL_161;
    }
LABEL_233:
    v192 = (_QWORD *)operator new();
    v260[0] = *(_BYTE *)a2;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v261 + 4, a2 + 8);
    v264 = 0;
    if (*(_BYTE *)(a2 + 96))
    {
      v265 = *(_DWORD *)(a2 + 100);
      v264 = 1;
    }
    v266 = *(_QWORD *)(a2 + 104);
    md::mun::MuninMetadata::MuninMetadata((uint64_t)v192, (uint64_t)v260, (uint64_t *)&v269, (uint64_t *)&v272);
    if (v264)
      v264 = 0;
    if (v262 != v263)
      free(v262);
    v193 = v269;
    if (v269)
    {
      v194 = v270;
      v195 = v269;
      if (v270 != v269)
      {
        do
        {
          v196 = v194 - 1864;
          v197 = (_QWORD *)*((_QWORD *)v194 - 222);
          v198 = (_QWORD *)*((_QWORD *)v194 - 221);
          if (v197 != v198)
          {
            do
            {
              v199 = (void *)v197[31];
              if (v199 != (void *)v197[33])
                free(v199);
              v197 += 36;
            }
            while (v197 != v198);
            v197 = (_QWORD *)*((_QWORD *)v194 - 222);
          }
          if (v197 != *((_QWORD **)v194 - 220))
            free(v197);
          v194 -= 1864;
        }
        while (v196 != v193);
        v195 = v269;
      }
      v270 = v193;
      operator delete(v195);
    }
    v200 = v272;
    if (v272)
    {
      v201 = v273;
      v202 = v272;
      if (v273 != v272)
      {
        do
        {
          v203 = (void *)v201[-4].__shared_weak_owners_;
          if (v203 != (void *)v201[-3].__shared_owners_)
            free(v203);
          if (LOBYTE(v201[-5].__vftable))
            LOBYTE(v201[-5].__vftable) = 0;
          if (LOBYTE(v201[-7].__shared_owners_))
            LOBYTE(v201[-7].__shared_owners_) = 0;
          v201 -= 7;
        }
        while (v201 != v200);
        v202 = v272;
      }
      v273 = v200;
      operator delete(v202);
    }
    v272 = 0;
    v273 = 0;
    v204 = *(std::__shared_weak_count **)(a1 + 656);
    if (v204)
    {
      v205 = std::__shared_weak_count::lock(v204);
      v273 = v205;
      if (v205)
      {
        v272 = *(std::__shared_weak_count **)(a1 + 648);
        if (v272)
        {
          v206 = *(_BYTE *)(geo::codec::VectorTile::key(*(geo::codec::VectorTile **)(v258 + 144)) + 1);
          v207 = geo::codec::VectorTile::key(*(geo::codec::VectorTile **)(v258 + 144));
          v208 = *(unsigned __int8 *)(v207 + 10);
          v209 = *(unsigned __int16 *)(v207 + 8);
          v210 = *(_QWORD *)v207;
          v211 = geo::codec::VectorTile::key(*(geo::codec::VectorTile **)(v258 + 144));
          v212 = *(unsigned __int16 *)(v211 + 8) | ((unint64_t)*(unsigned __int8 *)(v211 + 10) << 16);
          v213 = *(_QWORD *)v211;
          v260[0] = -1;
          v260[1] = v206 & 0x3F;
          *((_QWORD *)&v214 + 1) = (v209 | (v208 << 16)) & 0xFFFFFF;
          *(_QWORD *)&v214 = v210;
          v215 = (int32x2_t)(v214 >> 40);
          *((_QWORD *)&v214 + 1) = v212;
          *(_QWORD *)&v214 = v213;
          v261 = *(_QWORD *)&vzip1_s32(v215, (int32x2_t)(v214 >> 14)) & 0x3FFFFFF03FFFFFFLL;
          v216 = (char *)operator new(0x170uLL);
          *(_OWORD *)(v216 + 8) = 0u;
          *(_QWORD *)v216 = &off_1E42DDF88;
          v275 = 0u;
          md::LabelTile::LabelTile((unsigned __int8 *)v216 + 24, (uint64_t)v260, v258 + 144, 7u, &v272, 0, &v275, v192);
          v269 = v217;
          v270 = v216;
          v218 = (char *)operator new(0x70uLL);
          v219 = 1.0 / (double)(1 << v251);
          v220 = v219 * (double)((1 << v251) + ~v247);
          *((_QWORD *)v218 + 1) = 0;
          *((_QWORD *)v218 + 2) = 0;
          *(_QWORD *)v218 = &off_1E42DAE88;
          v221 = v219 * (double)v248;
          *(_OWORD *)(v218 + 40) = 0u;
          *(_OWORD *)(v218 + 24) = 0u;
          *(_OWORD *)(v218 + 56) = 0u;
          *((_DWORD *)v218 + 18) = v251;
          *((double *)v218 + 10) = v221;
          *((double *)v218 + 11) = v220;
          *((double *)v218 + 12) = v221 + v219;
          *((double *)v218 + 13) = v220 + v219;
          v267 = (md::ResourceInfo *)(v218 + 24);
          v268 = (std::__shared_weak_count *)v218;
          v222 = *v249;
          v223 = v249[1];
          v224 = *v249;
          if (*v249 != v223)
          {
            v224 = *v249;
            while (*(_WORD *)v224 != 18)
            {
              v224 += 48;
              if (v224 == v223)
                goto LABEL_292;
            }
          }
          if (v224 != v223)
          {
            v226 = *(_QWORD **)(v224 + 24);
            if (v226)
            {
              do
              {
                v227 = v226[14];
                v228 = (std::__shared_weak_count *)v226[15];
                *(_QWORD *)&v275 = v227;
                *((_QWORD *)&v275 + 1) = v228;
                if (v228)
                {
                  v229 = (unint64_t *)&v228->__shared_owners_;
                  do
                    v230 = __ldxr(v229);
                  while (__stxr(v230 + 1, v229));
                }
                v231 = v267;
                v232 = (NSArray *)*(id *)(v227 + 144);
                md::ResourceInfo::setResourceNames(v231, v232);

                if (v228)
                {
                  v233 = (unint64_t *)&v228->__shared_owners_;
                  do
                    v234 = __ldaxr(v233);
                  while (__stlxr(v234 - 1, v233));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                    std::__shared_weak_count::__release_weak(v228);
                  }
                }
                v226 = (_QWORD *)*v226;
              }
              while (v226);
              v222 = *v249;
              v223 = v249[1];
            }
          }
LABEL_292:
          v275 = 0uLL;
          v276 = 0;
          gdc::LayerDataSource::populateLoadMetadataListFromMap(v222, v223, (void **)&v275);
          v235 = operator new(0x308uLL);
          v235[1] = 0;
          v235[2] = 0;
          *v235 = &off_1E42DC200;
          *(_QWORD *)&v236 = md::MuninLabelLayerData::MuninLabelLayerData(v235 + 3, a2, &v269, &v267, (uint64_t)&v275);
          *((_QWORD *)&v236 + 1) = v235;
          *(_OWORD *)v250 = v236;
          if ((_QWORD)v275)
            operator delete((void *)v275);
          v237 = v268;
          if (v268)
          {
            v238 = (unint64_t *)&v268->__shared_owners_;
            do
              v239 = __ldaxr(v238);
            while (__stlxr(v239 - 1, v238));
            if (!v239)
            {
              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
              std::__shared_weak_count::__release_weak(v237);
            }
          }
          v240 = (std::__shared_weak_count *)v270;
          if (v270)
          {
            v241 = (unint64_t *)(v270 + 8);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
              std::__shared_weak_count::__release_weak(v240);
            }
          }
          v205 = v273;
          if (!v273)
          {
LABEL_309:
            (*(void (**)(_QWORD *))(*v192 + 8))(v192);
            v225 = v259;
            if (!v259)
              return;
            goto LABEL_310;
          }
LABEL_305:
          v243 = (unint64_t *)&v205->__shared_owners_;
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
          goto LABEL_309;
        }
      }
    }
    else
    {
      v205 = 0;
    }
    *v250 = 0;
    v250[1] = 0;
    if (!v205)
      goto LABEL_309;
    goto LABEL_305;
  }
LABEL_277:
  *a4 = 0;
  a4[1] = 0;
  v225 = v259;
  if (!v259)
    return;
LABEL_310:
  v245 = (unint64_t *)&v225->__shared_owners_;
  do
    v246 = __ldaxr(v245);
  while (__stlxr(v246 - 1, v245));
  if (!v246)
  {
    ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
    std::__shared_weak_count::__release_weak(v225);
  }
}

void sub_19F76EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  void *v26;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v25);
  v26 = *(void **)(v23 - 128);
  if (v26)
    operator delete(v26);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v23 - 192);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v23 - 176);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v23 - 152);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::vector<md::mun::CollectionPoint>::reserve(char **a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v2 = *a1;
  if (0x63FB9AEB1FDCD759 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2328A701194539)
      abort();
    v4 = (uint64_t)a1[1];
    v5 = 1864 * a2;
    v6 = (char *)operator new(1864 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - (_QWORD)v2];
    if ((char *)v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_8:
        operator delete(v2);
    }
    else
    {
      v9 = (uint64_t)&v6[v4 - (_QWORD)v2];
      do
      {
        v4 -= 1864;
        v9 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(v9 - 1864, v4);
      }
      while ((char *)v4 != v2);
      v2 = *a1;
      v10 = a1[1];
      *a1 = (char *)v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v10 != v2)
      {
        do
        {
          v11 = v10 - 1864;
          v12 = (_QWORD *)*((_QWORD *)v10 - 222);
          v13 = (_QWORD *)*((_QWORD *)v10 - 221);
          if (v12 != v13)
          {
            do
            {
              v14 = (void *)v12[31];
              if (v14 != (void *)v12[33])
                free(v14);
              v12 += 36;
            }
            while (v12 != v13);
            v12 = (_QWORD *)*((_QWORD *)v10 - 222);
          }
          if (v12 != *((_QWORD **)v10 - 220))
            free(v12);
          v10 -= 1864;
        }
        while (v11 != v2);
      }
      if (v2)
        goto LABEL_8;
    }
  }
}

void **std::vector<md::mun::CollectionPoint>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 1864;
        v6 = (_QWORD *)*((_QWORD *)v3 - 222);
        v7 = (_QWORD *)*((_QWORD *)v3 - 221);
        if (v6 != v7)
        {
          do
          {
            v8 = (void *)v6[31];
            if (v8 != (void *)v6[33])
              free(v8);
            v6 += 36;
          }
          while (v6 != v7);
          v6 = (_QWORD *)*((_QWORD *)v3 - 222);
        }
        if (v6 != *((_QWORD **)v3 - 220))
          free(v6);
        v3 -= 1864;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<md::mun::StorefrontBundle>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 10);
        if (v5 != *((void **)v3 - 8))
          free(v5);
        if (*(v3 - 120))
          *(v3 - 120) = 0;
        if (*(v3 - 160))
          *(v3 - 160) = 0;
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char *v41;
  __int128 *v42;
  _OWORD *v43;
  unint64_t v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  char v51;
  unint64_t v52;

  v4 = a2;
  v6 = 0x8E38E38E38E38E39 * (((char *)a3 - (char *)a2) >> 5);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0x8E38E38E38E38E39 * ((v7 - *(_QWORD *)a1) >> 5);
  if (v6 > *(_QWORD *)(a1 + 24) - v8)
  {
    geo::small_vector_base<md::mun::PhotoInfo>::grow((void **)a1, v8 - 0x71C71C71C71C71C7 * (((char *)a3 - (char *)a2) >> 5));
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v52 = v6;
    while (1)
    {
      v10 = *v4;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)v7 = v10;
      v11 = *((_QWORD *)v4 + 3);
      *(_DWORD *)(v7 + 32) = *((_DWORD *)v4 + 8);
      *(_QWORD *)(v7 + 24) = v11;
      *(_QWORD *)(v7 + 36) = *(_QWORD *)((char *)v4 + 36);
      v12 = *(__int128 *)((char *)v4 + 44);
      v13 = *(__int128 *)((char *)v4 + 60);
      v14 = *(__int128 *)((char *)v4 + 76);
      *(_OWORD *)(v7 + 92) = *(__int128 *)((char *)v4 + 92);
      *(_OWORD *)(v7 + 76) = v14;
      *(_OWORD *)(v7 + 60) = v13;
      *(_OWORD *)(v7 + 44) = v12;
      v15 = *(__int128 *)((char *)v4 + 108);
      v16 = *(__int128 *)((char *)v4 + 124);
      v17 = *(__int128 *)((char *)v4 + 140);
      *(_OWORD *)(v7 + 156) = *(__int128 *)((char *)v4 + 156);
      *(_OWORD *)(v7 + 140) = v17;
      *(_OWORD *)(v7 + 124) = v16;
      *(_OWORD *)(v7 + 108) = v15;
      v18 = *(__int128 *)((char *)v4 + 172);
      v19 = *(__int128 *)((char *)v4 + 188);
      v20 = *(__int128 *)((char *)v4 + 204);
      *(_OWORD *)(v7 + 220) = *(__int128 *)((char *)v4 + 220);
      *(_OWORD *)(v7 + 204) = v20;
      *(_OWORD *)(v7 + 188) = v19;
      *(_OWORD *)(v7 + 172) = v18;
      *(_DWORD *)(v7 + 236) = *((_DWORD *)v4 + 59);
      *(_BYTE *)(v7 + 240) = *((_BYTE *)v4 + 240);
      v9 = (char *)(v7 + 280);
      *(_QWORD *)(v7 + 248) = v7 + 280;
      *(_QWORD *)(v7 + 256) = v7 + 280;
      *(_QWORD *)(v7 + 264) = v7 + 280;
      *(_QWORD *)(v7 + 272) = 2;
      v22 = (char *)*((_QWORD *)v4 + 31);
      v21 = (char *)*((_QWORD *)v4 + 32);
      v23 = v21 - v22;
      if ((unint64_t)(v21 - v22) < 3)
        goto LABEL_28;
      v24 = v23 <= 4 ? 4 : v21 - v22;
      v9 = (char *)malloc_type_malloc(v24, 0x100004077774924uLL);
      v25 = *(char **)(v7 + 248);
      v26 = *(char **)(v7 + 256);
      if (v25 != v26)
        break;
LABEL_27:
      *(_QWORD *)(v7 + 248) = v9;
      *(_QWORD *)(v7 + 256) = v9;
      *(_QWORD *)(v7 + 272) = v24;
LABEL_28:
      if (v22 == v21)
        goto LABEL_6;
      if (v23 < 8)
      {
        v41 = v9;
        goto LABEL_44;
      }
      if ((unint64_t)(v9 - v22) < 0x20)
      {
        v41 = v9;
        goto LABEL_44;
      }
      if (v23 >= 0x20)
      {
        v40 = v23 & 0xFFFFFFFFFFFFFFE0;
        v42 = (__int128 *)(v22 + 16);
        v43 = v9 + 16;
        v44 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *v43 = v45;
          v42 += 2;
          v43 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v23 == v40)
          goto LABEL_5;
        if ((v23 & 0x18) == 0)
        {
          v22 += v40;
          v41 = &v9[v40];
          goto LABEL_44;
        }
      }
      else
      {
        v40 = 0;
      }
      v46 = v23 & 0xFFFFFFFFFFFFFFF8;
      v41 = &v9[v23 & 0xFFFFFFFFFFFFFFF8];
      v47 = v40 - (v23 & 0xFFFFFFFFFFFFFFF8);
      v48 = (uint64_t *)&v22[v40];
      v49 = &v9[v40];
      do
      {
        v50 = *v48++;
        *(_QWORD *)v49 = v50;
        v49 += 8;
        v47 += 8;
      }
      while (v47);
      if (v23 == v46)
        goto LABEL_5;
      v22 += v46;
      do
      {
LABEL_44:
        v51 = *v22++;
        *v41++ = v51;
      }
      while (v22 != v21);
LABEL_5:
      v9 = *(char **)(v7 + 256);
LABEL_6:
      *(_QWORD *)(v7 + 256) = &v9[v23];
      v4 += 18;
      v7 += 288;
      if (v4 == a3)
      {
        v7 = *(_QWORD *)(a1 + 8);
        v6 = v52;
        goto LABEL_47;
      }
    }
    v27 = v26 - v25;
    if ((unint64_t)(v26 - v25) < 8)
    {
      v28 = v9;
    }
    else
    {
      v28 = v9;
      if ((unint64_t)(v9 - v25) >= 0x20)
      {
        if (v27 < 0x20)
        {
          v29 = 0;
LABEL_21:
          v34 = v27 & 0xFFFFFFFFFFFFFFF8;
          v28 = &v9[v27 & 0xFFFFFFFFFFFFFFF8];
          v35 = v29 - (v27 & 0xFFFFFFFFFFFFFFF8);
          v36 = (uint64_t *)&v25[v29];
          v37 = &v9[v29];
          do
          {
            v38 = *v36++;
            *(_QWORD *)v37 = v38;
            v37 += 8;
            v35 += 8;
          }
          while (v35);
          if (v27 == v34)
            goto LABEL_27;
          v25 += v34;
          goto LABEL_26;
        }
        v29 = v27 & 0xFFFFFFFFFFFFFFE0;
        v30 = (__int128 *)(v25 + 16);
        v31 = v9 + 16;
        v32 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 32;
        }
        while (v32);
        if (v27 == v29)
          goto LABEL_27;
        if ((v27 & 0x18) != 0)
          goto LABEL_21;
        v25 += v29;
        v28 = &v9[v29];
      }
    }
    do
    {
LABEL_26:
      v39 = *v25++;
      *v28++ = v39;
    }
    while (v25 != v26);
    goto LABEL_27;
  }
LABEL_47:
  *(_QWORD *)(a1 + 8) = v7 + 288 * v6;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*,md::mun::CollectionPoint*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(v5 + 32);
      *(_DWORD *)(a3 + 36) = *(_DWORD *)(v5 + 36);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(v5 + 40);
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(v5 + 44);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(v5 + 48);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(v5 + 80);
      if (a3 != v5)
      {
        v7 = *(_QWORD **)(a3 + 88);
        v8 = *(_QWORD **)(a3 + 96);
        if (v7 != v8)
        {
          do
          {
            v9 = (void *)v7[31];
            if (v9 != (void *)v7[33])
              free(v9);
            v7 += 36;
          }
          while (v7 != v8);
          v7 = *(_QWORD **)(a3 + 88);
        }
        if (v7 != *(_QWORD **)(a3 + 104))
          free(v7);
        *(_QWORD *)(a3 + 88) = a3 + 120;
        *(_QWORD *)(a3 + 96) = a3 + 120;
        *(_QWORD *)(a3 + 104) = a3 + 120;
        *(_QWORD *)(a3 + 112) = 6;
        geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a3 + 88, *(__int128 **)(v5 + 88), *(__int128 **)(v5 + 96));
      }
      v6 = *(_QWORD *)(v5 + 1848);
      *(_QWORD *)(a3 + 1853) = *(_QWORD *)(v5 + 1853);
      *(_QWORD *)(a3 + 1848) = v6;
      v5 += 1864;
      a3 += 1864;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;

  *(_QWORD *)result = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 44) = *(_QWORD *)(a2 + 44);
  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 56) = v4;
  v5 = result + 120;
  *(_QWORD *)(result + 88) = result + 120;
  v6 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(result + 104) = result + 120;
  v7 = *(__int128 **)(a2 + 104);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 96) = result + 120;
  if (v6 == v7)
  {
    *(_QWORD *)(result + 96) = v5 + *(_QWORD *)(a2 + 96) - (_QWORD)v6;
    v10 = *(__int128 **)(a2 + 96);
    if (v6 == v10)
      goto LABEL_3;
    v11 = 0;
    v12 = (_OWORD *)(result + 416);
    v13 = result + 400;
    while (1)
    {
      v15 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v15;
      v16 = *((_QWORD *)v6 + 3);
      *(_DWORD *)(v5 + 32) = *((_DWORD *)v6 + 8);
      *(_QWORD *)(v5 + 24) = v16;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)((char *)v6 + 36);
      v17 = *(__int128 *)((char *)v6 + 44);
      v18 = *(__int128 *)((char *)v6 + 60);
      v19 = *(__int128 *)((char *)v6 + 76);
      *(_OWORD *)(v5 + 92) = *(__int128 *)((char *)v6 + 92);
      *(_OWORD *)(v5 + 76) = v19;
      *(_OWORD *)(v5 + 60) = v18;
      *(_OWORD *)(v5 + 44) = v17;
      v20 = *(__int128 *)((char *)v6 + 108);
      v21 = *(__int128 *)((char *)v6 + 124);
      v22 = *(__int128 *)((char *)v6 + 140);
      *(_OWORD *)(v5 + 156) = *(__int128 *)((char *)v6 + 156);
      *(_OWORD *)(v5 + 140) = v22;
      *(_OWORD *)(v5 + 124) = v21;
      *(_OWORD *)(v5 + 108) = v20;
      v23 = *(__int128 *)((char *)v6 + 172);
      v24 = *(__int128 *)((char *)v6 + 188);
      v25 = *(__int128 *)((char *)v6 + 204);
      *(_OWORD *)(v5 + 220) = *(__int128 *)((char *)v6 + 220);
      *(_OWORD *)(v5 + 204) = v25;
      *(_OWORD *)(v5 + 188) = v24;
      *(_OWORD *)(v5 + 172) = v23;
      v26 = (_BYTE *)(v5 + 280);
      *(_QWORD *)(v5 + 248) = v5 + 280;
      v27 = (char *)*((_QWORD *)v6 + 31);
      *(_BYTE *)(v5 + 240) = *((_BYTE *)v6 + 240);
      *(_QWORD *)(v5 + 264) = v5 + 280;
      v28 = (char *)*((_QWORD *)v6 + 33);
      *(_QWORD *)(v5 + 272) = *((_QWORD *)v6 + 34);
      *(_DWORD *)(v5 + 236) = *((_DWORD *)v6 + 59);
      *(_QWORD *)(v5 + 256) = v5 + 280;
      if (v27 == v28)
      {
        *(_QWORD *)(v5 + 256) = &v26[*((_QWORD *)v6 + 32) - (_QWORD)v27];
        v29 = (char *)*((_QWORD *)v6 + 32);
        if (v27 != v29)
        {
          v30 = v29 - v27;
          if ((unint64_t)(v29 - v27) >= 8 && (unint64_t)(result + 400 + 288 * v11 - (_QWORD)v27) >= 0x20)
          {
            if (v30 < 0x20)
            {
              v31 = 0;
              goto LABEL_18;
            }
            v31 = v30 & 0xFFFFFFFFFFFFFFE0;
            v32 = (__int128 *)(v27 + 16);
            v33 = v12;
            v34 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v35 = *v32;
              *(v33 - 1) = *(v32 - 1);
              *v33 = v35;
              v32 += 2;
              v33 += 2;
              v34 -= 32;
            }
            while (v34);
            if (v30 == v31)
              goto LABEL_7;
            if ((v30 & 0x18) != 0)
            {
LABEL_18:
              v36 = v30 & 0xFFFFFFFFFFFFFFF8;
              v26 += v30 & 0xFFFFFFFFFFFFFFF8;
              v37 = v31 - (v30 & 0xFFFFFFFFFFFFFFF8);
              v38 = (uint64_t *)&v27[v31];
              v39 = (_QWORD *)(v13 + v31);
              do
              {
                v40 = *v38++;
                *v39++ = v40;
                v37 += 8;
              }
              while (v37);
              if (v30 == v36)
                goto LABEL_7;
              v27 += v36;
            }
            else
            {
              v27 += v31;
              v26 += v31;
            }
          }
          do
          {
            v41 = *v27++;
            *v26++ = v41;
          }
          while (v27 != v29);
        }
      }
      else
      {
        v14 = *((_QWORD *)v6 + 32);
        *(_QWORD *)(v5 + 248) = v27;
        *(_QWORD *)(v5 + 256) = v14;
        *(__int128 *)((char *)v6 + 248) = 0uLL;
        *(__int128 *)((char *)v6 + 264) = 0uLL;
      }
LABEL_7:
      v5 += 288;
      v6 += 18;
      ++v11;
      v12 += 18;
      v13 += 288;
      if (v6 == v10)
        goto LABEL_3;
    }
  }
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = v6;
  *(_QWORD *)(result + 96) = v8;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
LABEL_3:
  v9 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(result + 1853) = *(_QWORD *)(a2 + 1853);
  *(_QWORD *)(result + 1848) = v9;
  return result;
}

uint64_t std::__split_buffer<md::mun::CollectionPoint>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1864;
    v4 = *(_QWORD **)(i - 1768);
    v5 = *(_QWORD **)(i - 1776);
    if (v5 != v4)
    {
      do
      {
        v6 = (void *)v5[31];
        if (v6 != (void *)v5[33])
          free(v6);
        v5 += 36;
      }
      while (v5 != v4);
      v5 = *(_QWORD **)(i - 1776);
    }
    if (v5 != *(_QWORD **)(i - 1760))
      free(v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void geo::small_vector_base<md::mun::PhotoInfo>::move(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  char v35;

  if ((uint64_t *)a1 != a2)
  {
    v6 = *(_QWORD **)a1;
    v7 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 != v7)
    {
      do
      {
        v8 = (void *)v6[31];
        if (v8 != (void *)v6[33])
          free(v8);
        v6 += 36;
      }
      while (v6 != v7);
      v6 = *(_QWORD **)a1;
    }
    if (v6 != *(_QWORD **)(a1 + 16))
      free(v6);
    *(_QWORD *)(a1 + 16) = a3;
    if (*a2 != a2[2])
    {
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v9;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
LABEL_12:
      *(_QWORD *)(a1 + 24) = a2[3];
      return;
    }
    *(_QWORD *)a1 = a3;
    v10 = (__int128 *)*a2;
    *(_QWORD *)(a1 + 8) = a3 + a2[1] - *a2;
    v11 = (__int128 *)a2[1];
    if (v10 == v11)
      goto LABEL_12;
    v12 = 0;
    v13 = a3 + 280;
    while (1)
    {
      v15 = *v10;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)a3 = v15;
      v16 = *((_QWORD *)v10 + 3);
      *(_DWORD *)(a3 + 32) = *((_DWORD *)v10 + 8);
      *(_QWORD *)(a3 + 24) = v16;
      *(_QWORD *)(a3 + 36) = *(_QWORD *)((char *)v10 + 36);
      v17 = *(__int128 *)((char *)v10 + 44);
      v18 = *(__int128 *)((char *)v10 + 60);
      v19 = *(__int128 *)((char *)v10 + 76);
      *(_OWORD *)(a3 + 92) = *(__int128 *)((char *)v10 + 92);
      *(_OWORD *)(a3 + 76) = v19;
      *(_OWORD *)(a3 + 60) = v18;
      *(_OWORD *)(a3 + 44) = v17;
      v20 = *(__int128 *)((char *)v10 + 108);
      v21 = *(__int128 *)((char *)v10 + 124);
      v22 = *(__int128 *)((char *)v10 + 140);
      *(_OWORD *)(a3 + 156) = *(__int128 *)((char *)v10 + 156);
      *(_OWORD *)(a3 + 140) = v22;
      *(_OWORD *)(a3 + 124) = v21;
      *(_OWORD *)(a3 + 108) = v20;
      v23 = *(__int128 *)((char *)v10 + 172);
      v24 = *(__int128 *)((char *)v10 + 188);
      v25 = *(__int128 *)((char *)v10 + 204);
      *(_OWORD *)(a3 + 220) = *(__int128 *)((char *)v10 + 220);
      *(_OWORD *)(a3 + 204) = v25;
      *(_OWORD *)(a3 + 188) = v24;
      *(_OWORD *)(a3 + 172) = v23;
      v26 = (_BYTE *)(a3 + 280);
      *(_QWORD *)(a3 + 248) = a3 + 280;
      v27 = (char *)*((_QWORD *)v10 + 31);
      *(_BYTE *)(a3 + 240) = *((_BYTE *)v10 + 240);
      *(_QWORD *)(a3 + 264) = a3 + 280;
      v28 = (char *)*((_QWORD *)v10 + 33);
      *(_QWORD *)(a3 + 272) = *((_QWORD *)v10 + 34);
      *(_DWORD *)(a3 + 236) = *((_DWORD *)v10 + 59);
      *(_QWORD *)(a3 + 256) = a3 + 280;
      if (v27 == v28)
      {
        *(_QWORD *)(a3 + 256) = &v26[*((_QWORD *)v10 + 32) - (_QWORD)v27];
        v29 = (char *)*((_QWORD *)v10 + 32);
        if (v27 != v29)
        {
          v30 = v29 - v27;
          if ((unint64_t)(v29 - v27) >= 8 && (unint64_t)(v13 + 288 * v12 - (_QWORD)v27) >= 0x20)
          {
            if (v30 < 0x20)
            {
              v31 = 0;
              goto LABEL_28;
            }
            v32 = 0;
            v31 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v33 = *(_OWORD *)&v27[v32 + 16];
              *(_OWORD *)(a3 + v32 + 280) = *(_OWORD *)&v27[v32];
              *(_OWORD *)(a3 + v32 + 296) = v33;
              v32 += 32;
            }
            while (v31 != v32);
            if (v30 == v31)
              goto LABEL_17;
            if ((v30 & 0x18) != 0)
            {
LABEL_28:
              v34 = v30 & 0xFFFFFFFFFFFFFFF8;
              v26 += v30 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                *(_QWORD *)(a3 + v31 + 280) = *(_QWORD *)&v27[v31];
                v31 += 8;
              }
              while (v34 != v31);
              if (v30 == v34)
                goto LABEL_17;
              v27 += v34;
            }
            else
            {
              v27 += v31;
              v26 += v31;
            }
          }
          do
          {
            v35 = *v27++;
            *v26++ = v35;
          }
          while (v27 != v29);
        }
      }
      else
      {
        v14 = *((_QWORD *)v10 + 32);
        *(_QWORD *)(a3 + 248) = v27;
        *(_QWORD *)(a3 + 256) = v14;
        *(__int128 *)((char *)v10 + 248) = 0uLL;
        *(__int128 *)((char *)v10 + 264) = 0uLL;
      }
LABEL_17:
      a3 += 288;
      v10 += 18;
      ++v12;
      if (v10 == v11)
        goto LABEL_12;
    }
  }
}

void geo::small_vector_base<md::mun::PhotoInfo>::grow(void **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  char v37;
  char *v38;
  char *v39;
  void *v40;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = (char *)a1[2];
  v5 = (unint64_t)a1[3];
  v7 = (1 << -(char)__clz(v5 + 1));
  if (v5 >= 0xFFFFFFFFFFFFFFFELL)
    v8 = 1;
  else
    v8 = v7;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  v10 = malloc_type_malloc(288 * v9, 0x1010040C6D9B592uLL);
  v11 = v10;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (*a1 == v13)
    goto LABEL_33;
  v14 = 0;
  v15 = v10;
  do
  {
    v17 = *(_OWORD *)v12;
    *((_QWORD *)v15 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v15 = v17;
    v18 = *((_QWORD *)v12 + 3);
    *((_DWORD *)v15 + 8) = *((_DWORD *)v12 + 8);
    *((_QWORD *)v15 + 3) = v18;
    *(_QWORD *)(v15 + 36) = *(_QWORD *)(v12 + 36);
    v19 = *(_OWORD *)(v12 + 44);
    v20 = *(_OWORD *)(v12 + 60);
    v21 = *(_OWORD *)(v12 + 76);
    *(_OWORD *)(v15 + 92) = *(_OWORD *)(v12 + 92);
    *(_OWORD *)(v15 + 76) = v21;
    *(_OWORD *)(v15 + 60) = v20;
    *(_OWORD *)(v15 + 44) = v19;
    v22 = *(_OWORD *)(v12 + 108);
    v23 = *(_OWORD *)(v12 + 124);
    v24 = *(_OWORD *)(v12 + 140);
    *(_OWORD *)(v15 + 156) = *(_OWORD *)(v12 + 156);
    *(_OWORD *)(v15 + 140) = v24;
    *(_OWORD *)(v15 + 124) = v23;
    *(_OWORD *)(v15 + 108) = v22;
    v25 = *(_OWORD *)(v12 + 172);
    v26 = *(_OWORD *)(v12 + 188);
    v27 = *(_OWORD *)(v12 + 204);
    *(_OWORD *)(v15 + 220) = *(_OWORD *)(v12 + 220);
    *(_OWORD *)(v15 + 204) = v27;
    *(_OWORD *)(v15 + 188) = v26;
    *(_OWORD *)(v15 + 172) = v25;
    v28 = v15 + 280;
    *((_QWORD *)v15 + 31) = v15 + 280;
    v29 = (char *)*((_QWORD *)v12 + 31);
    v15[240] = v12[240];
    *((_QWORD *)v15 + 33) = v15 + 280;
    v30 = (char *)*((_QWORD *)v12 + 33);
    *((_QWORD *)v15 + 34) = *((_QWORD *)v12 + 34);
    *((_DWORD *)v15 + 59) = *((_DWORD *)v12 + 59);
    *((_QWORD *)v15 + 32) = v15 + 280;
    if (v29 != v30)
    {
      v16 = *((_QWORD *)v12 + 32);
      *((_QWORD *)v15 + 31) = v29;
      *((_QWORD *)v15 + 32) = v16;
      *(_OWORD *)(v12 + 248) = 0uLL;
      *(_OWORD *)(v12 + 264) = 0uLL;
      goto LABEL_10;
    }
    *((_QWORD *)v15 + 32) = &v28[*((_QWORD *)v12 + 32) - (_QWORD)v29];
    v31 = (char *)*((_QWORD *)v12 + 32);
    if (v29 != v31)
    {
      v32 = v31 - v29;
      if ((unint64_t)(v31 - v29) < 8 || (unint64_t)(&v11[288 * v14 + 280] - v29) < 0x20)
        goto LABEL_26;
      if (v32 >= 0x20)
      {
        v34 = 0;
        v33 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *(_OWORD *)&v29[v34 + 16];
          *(_OWORD *)&v15[v34 + 280] = *(_OWORD *)&v29[v34];
          *(_OWORD *)&v15[v34 + 296] = v35;
          v34 += 32;
        }
        while (v33 != v34);
        if (v32 == v33)
          goto LABEL_10;
        if ((v32 & 0x18) == 0)
        {
          v29 += v33;
          v28 += v33;
          do
          {
LABEL_26:
            v37 = *v29++;
            *v28++ = v37;
          }
          while (v29 != v31);
          goto LABEL_10;
        }
      }
      else
      {
        v33 = 0;
      }
      v36 = v32 & 0xFFFFFFFFFFFFFFF8;
      v28 += v32 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(_QWORD *)&v15[v33 + 280] = *(_QWORD *)&v29[v33];
        v33 += 8;
      }
      while (v36 != v33);
      if (v32 != v36)
      {
        v29 += v36;
        goto LABEL_26;
      }
    }
LABEL_10:
    v15 += 288;
    v12 += 288;
    ++v14;
  }
  while (v12 != v13);
  v38 = (char *)*a1;
  v39 = (char *)a1[1];
  while (v38 != v39)
  {
    v40 = (void *)*((_QWORD *)v38 + 31);
    if (v40 != *((void **)v38 + 33))
      free(v40);
    v38 += 288;
  }
LABEL_33:
  if (v3 != v6)
    free(*a1);
  *a1 = v11;
  a1[1] = &v11[v4 - v3];
  a1[3] = (void *)v9;
}

void geo::small_vector_base<md::mun::OrientedPlane>::append<md::mun::OrientedPlane const*>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD **)a1;
  v8 = *(char **)(a1 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(_QWORD *)a1] >> 4);
  if (v6 > v7 - v10)
  {
    v11 = *(_QWORD **)(a1 + 16);
    v12 = (1 << -(char)__clz(v7 + 1));
    if (v7 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = 1;
    else
      v13 = v12;
    if (v13 <= v10 - 0x5555555555555555 * (a3 - a2))
      v14 = v10 - 0x5555555555555555 * (a3 - a2);
    else
      v14 = v13;
    v15 = (char *)malloc_type_malloc(48 * v14, 0x1000040EED21634uLL);
    v16 = v15;
    v17 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 != v18)
    {
      v19 = v15;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = v17[2];
        *(_OWORD *)v19 = v20;
        v21 = v17[3];
        *((_DWORD *)v19 + 8) = *((_DWORD *)v17 + 8);
        *((_QWORD *)v19 + 3) = v21;
        *((_DWORD *)v19 + 9) = *((_DWORD *)v17 + 9);
        *((_QWORD *)v19 + 5) = v17[5];
        v17 += 6;
        v19 += 48;
      }
      while (v17 != v18);
    }
    if (v9 != v11)
      free(*(void **)a1);
    v8 = &v16[48 * v10];
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 24) = v14;
  }
  if (v4 != a3)
  {
    do
    {
      v22 = *v4;
      *((_QWORD *)v8 + 2) = *((_QWORD *)v4 + 2);
      *(_OWORD *)v8 = v22;
      v23 = *((_QWORD *)v4 + 3);
      *((_DWORD *)v8 + 8) = *((_DWORD *)v4 + 8);
      *((_QWORD *)v8 + 3) = v23;
      *((_DWORD *)v8 + 9) = *((_DWORD *)v4 + 9);
      *((_QWORD *)v8 + 5) = *((_QWORD *)v4 + 5);
      v4 += 3;
      v8 += 48;
    }
    while (v4 != a3);
    v8 = *(char **)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = &v8[48 * v6];
}

uint64_t std::__split_buffer<md::mun::StorefrontBundle>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    v4 = *(void **)(i - 80);
    if (v4 != *(void **)(i - 64))
      free(v4);
    if (*(_BYTE *)(i - 120))
      *(_BYTE *)(i - 120) = 0;
    if (*(_BYTE *)(i - 160))
      *(_BYTE *)(i - 160) = 0;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void altitude::GlobeView::~GlobeView(altitude::GlobeView *this)
{
  altitude::GlobeView::~GlobeView(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  karo::JobManager **v3;
  karo::JobManager *v4;
  karo::JobManager *v5;
  karo::JobManager *v6;
  karo::JobManager *v7;
  uint64_t v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  altitude::TileManager *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  altitude::GlobeView *v41;
  uint64_t v42;
  unint64_t v43;
  altitude::GlobeView *v44;
  uint64_t v45;
  unint64_t v46;
  altitude::GlobeView *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;

  *(_QWORD *)this = &off_1E42C6A98;
  v2 = *((_QWORD *)this + 78);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(karo::JobManager ***)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 72);
  v4 = *v3;
  v5 = v3[1];
  *((_BYTE *)*v3 + 64) = 1;
  *((_BYTE *)v3[2] + 64) = 1;
  if (v5)
    *((_BYTE *)v5 + 64) = 1;
  karo::JobManager::cancelAll(v4);
  karo::JobManager::cancelAll(v3[2]);
  v6 = v3[1];
  if (!v6)
  {
    *((_BYTE *)*v3 + 64) = 0;
    v7 = v3[2];
    goto LABEL_9;
  }
  karo::JobManager::cancelAll(v6);
  v7 = v3[1];
  *((_BYTE *)*v3 + 64) = 0;
  *((_BYTE *)v3[2] + 64) = 0;
  if (v7)
LABEL_9:
    *((_BYTE *)v7 + 64) = 0;
  *((_OWORD *)this + 48) = 0u;
  v8 = *((_QWORD *)this + 105);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_QWORD *)this + 105) = 0;
  }
  v9 = (char **)*((_QWORD *)this + 106);
  if (v9)
  {
    std::mutex::~mutex((std::mutex *)(v9 + 3));
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      v12 = *v9;
      if (v11 != v10)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 16;
        }
        while (v11 != v10);
        v12 = *v9;
      }
      v9[1] = v10;
      operator delete(v12);
    }
    MEMORY[0x1A1AF4E00](v9, 0x1020C40A0054943);
    *((_QWORD *)this + 106) = 0;
  }
  v16 = (altitude::TileManager *)*((_QWORD *)this + 86);
  if (v16)
    altitude::TileManager::clear(v16);
  v17 = *((_QWORD *)this + 89);
  if (v17)
  {
    std::mutex::~mutex((std::mutex *)(v17 + 32));
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v17 + 16);
      v20 = *(void **)(v17 + 8);
      if (v19 != v18)
      {
        do
        {
          v21 = *(std::__shared_weak_count **)(v19 - 8);
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v19 -= 16;
        }
        while (v19 != v18);
        v20 = *(void **)(v17 + 8);
      }
      *(_QWORD *)(v17 + 16) = v18;
      operator delete(v20);
    }
    MEMORY[0x1A1AF4E00](v17, 0x1060C40A814CE04);
    *((_QWORD *)this + 89) = 0;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25);
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  *((_OWORD *)this + 45) = 0u;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *((_QWORD *)this + 86);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  *((_QWORD *)this + 86) = 0;
  v30 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80) = 0;
  }
  v31 = *((_QWORD *)this + 103);
  if (v31)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    *((_QWORD *)this + 103) = 0;
  }
  v32 = *((_QWORD *)this + 3);
  if (v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    *((_QWORD *)this + 3) = 0;
  }
  v33 = *((_QWORD *)this + 2);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    *((_QWORD *)this + 2) = 0;
  }
  std::mutex::lock((std::mutex *)((char *)this + 864));
  v34 = atomic_load((unint64_t *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v34)
    (*(void (**)(unint64_t))(*(_QWORD *)v34 + 8))(v34);
  std::mutex::unlock((std::mutex *)((char *)this + 864));
  std::mutex::lock((std::mutex *)((char *)this + 968));
  v35 = atomic_load((unint64_t *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v35)
    (*(void (**)(unint64_t))(*(_QWORD *)v35 + 8))(v35);
  std::mutex::unlock((std::mutex *)((char *)this + 968));
  std::mutex::lock((std::mutex *)((char *)this + 1072));
  v36 = atomic_load((unint64_t *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v36)
    (*(void (**)(unint64_t))(*(_QWORD *)v36 + 8))(v36);
  std::mutex::unlock((std::mutex *)((char *)this + 1072));
  v37 = *((_QWORD *)this + 53);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 4);
  *(_QWORD *)(v38 + 48) = 0;
  *(_QWORD *)(v38 + 56) = 0;
  v39 = *((_QWORD *)this + 46);
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    *((_QWORD *)this + 46) = 0;
  }
  **((_BYTE **)this + 69) = 1;
  std::mutex::lock((std::mutex *)((char *)this + 1072));
  v40 = atomic_load((unint64_t *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v40)
    (*(void (**)(unint64_t))(*(_QWORD *)v40 + 8))(v40);
  std::mutex::unlock((std::mutex *)((char *)this + 1072));
  v41 = (altitude::GlobeView *)*((_QWORD *)this + 146);
  if (v41 == (altitude::GlobeView *)((char *)this + 1144))
  {
    v42 = 4;
    v41 = (altitude::GlobeView *)((char *)this + 1144);
  }
  else
  {
    if (!v41)
      goto LABEL_74;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_74:
  std::mutex::~mutex((std::mutex *)((char *)this + 1072));
  std::mutex::lock((std::mutex *)((char *)this + 968));
  v43 = atomic_load((unint64_t *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v43)
    (*(void (**)(unint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::mutex::unlock((std::mutex *)((char *)this + 968));
  v44 = (altitude::GlobeView *)*((_QWORD *)this + 133);
  if (v44 == (altitude::GlobeView *)((char *)this + 1040))
  {
    v45 = 4;
    v44 = (altitude::GlobeView *)((char *)this + 1040);
  }
  else
  {
    if (!v44)
      goto LABEL_81;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_81:
  std::mutex::~mutex((std::mutex *)((char *)this + 968));
  std::mutex::lock((std::mutex *)((char *)this + 864));
  v46 = atomic_load((unint64_t *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v46)
    (*(void (**)(unint64_t))(*(_QWORD *)v46 + 8))(v46);
  std::mutex::unlock((std::mutex *)((char *)this + 864));
  v47 = (altitude::GlobeView *)*((_QWORD *)this + 120);
  if (v47 == (altitude::GlobeView *)((char *)this + 936))
  {
    v48 = 4;
    v47 = (altitude::GlobeView *)((char *)this + 936);
    goto LABEL_87;
  }
  if (v47)
  {
    v48 = 5;
LABEL_87:
    (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 864));
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 101);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v55)
  {
    objc_msgSend(*(id *)(v55 + 8), "clearListener");
    v56 = *(void **)(v55 + 8);
    if (v56)
    {
      *(_QWORD *)(v55 + 8) = 0;

      v56 = *(void **)(v55 + 8);
    }
    *(_QWORD *)v55 = &off_1E42B4FB0;

    MEMORY[0x1A1AF4E00](v55, 0x80C40B49F1EBBLL);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 83));
  v57 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 75));
  v60 = *((_QWORD *)this + 75);
  if (v60)
    MEMORY[0x1A1AF4E00](v60, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 75) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 73));
  v61 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  altitude::AnimationManager::~AnimationManager((altitude::GlobeView *)((char *)this + 192));

  v64 = (void *)*((_QWORD *)this + 17);
  if (v64)
  {
    *((_QWORD *)this + 18) = v64;
    operator delete(v64);
  }
  if (*((char *)this + 135) < 0)
  {
    operator delete(*((void **)this + 14));
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_118:
      v65 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v65)
        goto LABEL_126;
      goto LABEL_122;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_118;
  }
  operator delete(*((void **)this + 11));
  v65 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v65)
    goto LABEL_126;
LABEL_122:
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
LABEL_126:
  v68 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

uint64_t altitude::GlobeView::getLabelDataManager(altitude::GlobeView *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 53);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)(v1 + 8) = &unk_1E42C61F0;
    *(_QWORD *)v1 = &off_1E42C61B0;
    *(_QWORD *)(v1 + 16) = this;
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 80) = 0;
    *(_BYTE *)(v1 + 88) = 0;
    altitude::TileManager::registerTileListener(*((_QWORD **)this + 86), v1 + 8);
    *((_QWORD *)this + 53) = v1;
  }
  return v1;
}

void altitude::GlobeView::setLoadingPaused(altitude::GlobeView *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t DebugFrustumElement;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;

  v4 = *((_QWORD *)this + 86);
  *(_BYTE *)(v4 + 204) = a2;
  v5 = *(_QWORD *)(v4 + 120);
  v6 = *(_QWORD *)(v4 + 128);
  v7 = a2 ^ 1;
  v8 = v6 - v5;
  if (v8)
  {
    v9 = v8 >> 3;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    if (v10 < 2 || ((_DWORD)v10 ? (v11 = (v10 - 1) >> 32 == 0) : (v11 = 0), !v11))
    {
      v12 = 0;
      v13 = 0;
LABEL_11:
      v14 = v13 + 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(v5 + 8 * v12) + 80) = v7;
        v12 = v14++;
      }
      while (v9 > v12);
      goto LABEL_13;
    }
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    v36 = (uint64_t *)(v5 + 8);
    v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v38 = *v36;
      *(_BYTE *)(*(v36 - 1) + 80) = v7;
      *(_BYTE *)(v38 + 80) = v7;
      v36 += 2;
      v37 -= 2;
    }
    while (v37);
    v13 = v10 & 0xFFFFFFFE;
    if (v10 != v12)
      goto LABEL_11;
  }
LABEL_13:
  *(_BYTE *)(*((_QWORD *)this + 60) + 520) = v7;
  v15 = (_QWORD *)*((_QWORD *)this + 46);
  if (v15)
  {
    v16 = (_QWORD *)v15[6];
    v17 = (_QWORD *)v15[7];
    if (v16 != v17)
    {
      v18 = *(_QWORD *)(*((_QWORD *)this + 107) + 40);
      do
      {
        v22 = *(_QWORD *)(v18 + 8);
        v23 = *(_QWORD *)(v22 + 224);
        v24 = *(_QWORD *)(v22 + 232);
        v25 = v24 - v23;
        if (v24 != v23)
        {
          v26 = 0;
          v27 = v25 >> 4;
          if (v27 <= 1)
            v28 = 1;
          else
            v28 = v27;
          v29 = *(_QWORD **)(v22 + 224);
          while (*v29 != *v16)
          {
            ++v26;
            v29 += 2;
            if (v28 == v26)
              goto LABEL_17;
          }
          v19 = v23 + 16 * v26;
          v20 = v23 + 16 * v27;
          v21 = *(_QWORD *)(v20 - 16);
          v20 -= 16;
          *(_QWORD *)v19 = v21;
          *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
          *(_QWORD *)(v22 + 232) = v20;
        }
LABEL_17:
        ++v16;
      }
      while (v16 != v17);
    }
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  *((_QWORD *)this + 46) = 0;
  if (a2)
  {
    v30 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), 0, 0xFFFFFFFFLL);
    v31 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
    v39 = xmmword_19FFB2D90;
    DebugFrustumElement = altitude::createDebugFrustumElement(v31, v30, (void (__cdecl **)(std::__shared_weak_count *__hidden))&v39);
    *((_QWORD *)this + 46) = DebugFrustumElement;
    v33 = *(uint64_t **)(DebugFrustumElement + 48);
    v34 = *(uint64_t **)(DebugFrustumElement + 56);
    while (v33 != v34)
    {
      v35 = *v33++;
      md::realistic::GlobeRenderLayer::registerNoCullingRenderable(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 107) + 40) + 8), v35, 4);
    }
  }
}

double altitude::GlobeView::getOriginalFovY@<D0>(altitude::GlobeView *this@<X0>, double *a2@<X8>)
{
  double result;

  result = *((double *)this + 35);
  *a2 = result;
  return result;
}

double altitude::GlobeView::getTanHalfFovY(altitude::GlobeView *this)
{
  return *((double *)this + 36);
}

double altitude::GlobeView::getDefaultFovY@<D0>(altitude::GlobeView *this@<X0>, double *a2@<X8>)
{
  double result;

  result = *((double *)this + 37);
  *a2 = result;
  return result;
}

uint64_t altitude::GlobeView::setDefaultFovY(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 296) = *a2;
  return result;
}

double altitude::GlobeView::getNearFar(altitude::GlobeView *this, double *a2, double *a3)
{
  uint64_t v5;
  double result;

  v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 96) + 24))(*((_QWORD *)this + 96), 0, 0xFFFFFFFFLL);
  *a3 = *(double *)(v5 + 944);
  result = *(double *)(v5 + 952);
  *a2 = result;
  return result;
}

uint64_t altitude::createDebugFrustumElement(uint64_t a1, uint64_t a2, void (__cdecl **a3)(std::__shared_weak_count *__hidden this))
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  long double v9;
  long double v10;
  long double v11;
  double v12;
  double v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _WORD *v26;
  _DWORD *v27;
  _WORD *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t i;
  __int128 v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 v52;
  __int16 v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  unint64_t v71;
  __int128 v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  unint64_t v85;
  __int128 v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  _OWORD *v97;
  char *v98;
  unint64_t v99;
  __int128 v100;
  __int16 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  char *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  _OWORD *v111;
  char *v112;
  unint64_t v113;
  __int128 v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  char *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  _OWORD *v125;
  char *v126;
  unint64_t v127;
  __int128 v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  char *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  _OWORD *v138;
  char *v139;
  unint64_t v140;
  __int128 v141;
  __int16 v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  unsigned __int8 v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t SolidLineElement;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  int v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v188;
  uint64_t v189;
  uint64_t v190;
  void (__cdecl **v191)(std::__shared_weak_count *__hidden);
  uint64_t v192[3];
  std::__shared_weak_count *v193;
  _BYTE v194[48];
  char __p[21];
  char v196;
  __int128 v197;
  unint64_t v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  char *v202;
  std::__shared_weak_count *v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;

  v5 = a2 + 40;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 24))(a2 + 40);
  v7 = *(_OWORD *)v6;
  v205 = *(_QWORD *)(v6 + 16);
  v204 = v7;
  v8 = *(_OWORD *)(v6 + 24);
  v207 = *(_QWORD *)(v6 + 40);
  v206 = v8;
  v208 = *(_QWORD *)(v6 + 48);
  v9 = *(double *)(v5 + 944);
  v10 = *(double *)(v5 + 928);
  v11 = *(double *)(v5 + 920);
  v12 = *(double *)(v5 + 912);
  v13 = *(double *)(v5 + 904);
  v14 = tan(*(long double *)(v5 + 936));
  *(float *)&v9 = tan(v9);
  *(float *)&v10 = tan(v10);
  *(float *)&v11 = tan(v11);
  v15 = (float *)operator new(0x60uLL);
  v16 = v12;
  v17 = v16 * v14;
  *v15 = v16 * v14;
  v15[1] = v16 * *(float *)&v10;
  v18 = -v16;
  v19 = v16 * *(float *)&v9;
  v15[2] = -v16;
  v15[3] = v16 * *(float *)&v9;
  v15[4] = v16 * *(float *)&v10;
  v15[5] = -v16;
  v20 = v16 * *(float *)&v11;
  v15[6] = v19;
  v15[7] = v20;
  v15[8] = v18;
  v15[9] = v17;
  v15[10] = v20;
  v15[11] = v18;
  v21 = v13;
  v22 = v21 * v14;
  v23 = -v21;
  v15[12] = v21 * v14;
  v15[13] = v21 * *(float *)&v10;
  v24 = v21 * *(float *)&v9;
  v15[14] = -v21;
  v15[15] = v21 * *(float *)&v9;
  v15[16] = v21 * *(float *)&v10;
  v15[17] = -v21;
  v25 = v21 * *(float *)&v11;
  v15[18] = v24;
  v15[19] = v25;
  v15[20] = v23;
  v15[21] = v22;
  v15[22] = v25;
  v15[23] = v23;
  v26 = operator new(2uLL);
  *v26 = 0;
  v27 = operator new(4uLL);
  *v27 = 0x10000;
  operator delete(v26);
  v28 = operator new(8uLL);
  v28[2] = 1;
  *(_DWORD *)v28 = *v27;
  operator delete(v27);
  v28[3] = 2;
  v29 = (char *)operator new(0x10uLL);
  *((_WORD *)v29 + 4) = 2;
  *(_QWORD *)v29 = *(_QWORD *)v28;
  operator delete(v28);
  *(_DWORD *)(v29 + 10) = 196611;
  *((_WORD *)v29 + 7) = 0;
  v30 = (char *)operator new(0x20uLL);
  *(_QWORD *)(v30 + 10) = 0x4000000030003;
  *((_WORD *)v30 + 4) = *((_WORD *)v29 + 4);
  *(_QWORD *)v30 = *(_QWORD *)v29;
  operator delete(v29);
  *(_QWORD *)(v30 + 18) = 0x6000600050005;
  *(_DWORD *)(v30 + 26) = 458759;
  *((_WORD *)v30 + 15) = 4;
  if (__OFADD__(32, 3))
    abort();
  v31 = v30 + 32;
  v190 = a1;
  v191 = a3;
  v32 = (char *)operator new(0x40uLL);
  v33 = v32 + 32;
  v34 = (unint64_t)(v32 + 64);
  *((_WORD *)v32 + 16) = 0;
  v35 = v32 + 34;
  if (v30 + 32 != v30)
  {
    if ((unint64_t)(v30 - v32) < 0x20)
    {
      do
      {
        v39 = *((_WORD *)v31 - 1);
        v31 -= 2;
        *((_WORD *)v33 - 1) = v39;
        v33 -= 2;
      }
      while (v31 != v30);
    }
    else
    {
      for (i = 0; i != -32; i -= 32)
      {
        v37 = *(_OWORD *)&v30[i + 16];
        v38 = &v32[i + 16];
        *((_OWORD *)v38 - 1) = *(_OWORD *)&v30[i];
        *(_OWORD *)v38 = v37;
      }
      v33 = v32;
    }
  }
  operator delete(v30);
  if ((unint64_t)v35 >= v34)
  {
    v42 = v35 - v33;
    if (v35 - v33 <= -3)
      abort();
    v43 = v42 >> 1;
    if (v34 - (unint64_t)v33 <= (v42 >> 1) + 1)
      v44 = v43 + 1;
    else
      v44 = v34 - (_QWORD)v33;
    if (v34 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFELL)
      v45 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    if (v45)
    {
      if (v45 < 0)
        goto LABEL_230;
      v46 = operator new(2 * v45);
    }
    else
    {
      v46 = 0;
    }
    v40 = &v46[2 * v43];
    v34 = (unint64_t)&v46[2 * v45];
    *(_WORD *)v40 = 4;
    v41 = v40 + 2;
    if (v35 == v33)
      goto LABEL_29;
    v47 = v35 - v33 - 2;
    if (v47 < 0x1E)
      goto LABEL_243;
    if (v35 - v46 - (v42 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_243;
    v48 = (v47 >> 1) + 1;
    v35 -= 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v49 = (__int128 *)(v32 + 18);
    v50 = &v46[2 * v43 - 16];
    v51 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 -= 2;
      v50 -= 2;
      v51 -= 16;
    }
    while (v51);
    v40 -= 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_243:
      do
      {
        v53 = *((_WORD *)v35 - 1);
        v35 -= 2;
        *((_WORD *)v40 - 1) = v53;
        v40 -= 2;
      }
      while (v35 != v33);
    }
    if (v33)
LABEL_29:
      operator delete(v33);
  }
  else
  {
    *(_WORD *)v35 = 4;
    v40 = v33;
    v41 = v32 + 36;
  }
  if ((unint64_t)v41 < v34)
  {
    *(_WORD *)v41 = 1;
    v54 = v41 + 2;
    if ((unint64_t)(v41 + 2) < v34)
      goto LABEL_32;
    goto LABEL_60;
  }
  v60 = v41 - v40;
  if (v41 - v40 <= -3)
    abort();
  v61 = v60 >> 1;
  if (v34 - (unint64_t)v40 <= (v60 >> 1) + 1)
    v62 = v61 + 1;
  else
    v62 = v34 - (_QWORD)v40;
  if (v34 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFELL)
    v63 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v63 = v62;
  if (v63)
  {
    if (v63 < 0)
      goto LABEL_230;
    v64 = operator new(2 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[2 * v61];
  v34 = (unint64_t)&v64[2 * v63];
  *(_WORD *)v65 = 1;
  v54 = v65 + 2;
  if (v41 != v40)
  {
    v66 = v41 - v40 - 2;
    if (v66 >= 0x1E)
    {
      if (v41 - v64 - (v60 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v68 = (v66 >> 1) + 1;
        v67 = &v41[-2 * (v68 & 0xFFFFFFFFFFFFFFF0)];
        v69 = &v64[2 * v61 - 16];
        v70 = v41 - 16;
        v71 = v68 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *v69 = v72;
          v69 -= 2;
          v70 -= 32;
          v71 -= 16;
        }
        while (v71);
        v65 -= 2 * (v68 & 0xFFFFFFFFFFFFFFF0);
        if (v68 == (v68 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_57:
          if (!v40)
            goto LABEL_59;
          goto LABEL_58;
        }
      }
      else
      {
        v67 = v41;
      }
    }
    else
    {
      v67 = v41;
    }
    do
    {
      v73 = *((_WORD *)v67 - 1);
      v67 -= 2;
      *((_WORD *)v65 - 1) = v73;
      v65 -= 2;
    }
    while (v67 != v40);
    goto LABEL_57;
  }
LABEL_58:
  operator delete(v40);
LABEL_59:
  v40 = v65;
  if ((unint64_t)v54 < v34)
  {
LABEL_32:
    *(_WORD *)v54 = 5;
    v55 = v54 + 2;
    if ((unint64_t)(v54 + 2) < v34)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_60:
  v74 = v54 - v40;
  if (v54 - v40 <= -3)
    abort();
  v75 = v74 >> 1;
  if (v34 - (unint64_t)v40 <= (v74 >> 1) + 1)
    v76 = v75 + 1;
  else
    v76 = v34 - (_QWORD)v40;
  if (v34 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFELL)
    v77 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v77 = v76;
  if (v77)
  {
    if (v77 < 0)
      goto LABEL_230;
    v78 = operator new(2 * v77);
  }
  else
  {
    v78 = 0;
  }
  v79 = &v78[2 * v75];
  v34 = (unint64_t)&v78[2 * v77];
  *(_WORD *)v79 = 5;
  v55 = v79 + 2;
  if (v54 != v40)
  {
    v80 = v54 - v40 - 2;
    if (v80 >= 0x1E)
    {
      if (v54 - v78 - (v74 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v82 = (v80 >> 1) + 1;
        v81 = &v54[-2 * (v82 & 0xFFFFFFFFFFFFFFF0)];
        v83 = &v78[2 * v75 - 16];
        v84 = v54 - 16;
        v85 = v82 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v86 = *(_OWORD *)v84;
          *(v83 - 1) = *((_OWORD *)v84 - 1);
          *v83 = v86;
          v83 -= 2;
          v84 -= 32;
          v85 -= 16;
        }
        while (v85);
        v79 -= 2 * (v82 & 0xFFFFFFFFFFFFFFF0);
        if (v82 == (v82 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_80:
          if (!v40)
            goto LABEL_82;
          goto LABEL_81;
        }
      }
      else
      {
        v81 = v54;
      }
    }
    else
    {
      v81 = v54;
    }
    do
    {
      v87 = *((_WORD *)v81 - 1);
      v81 -= 2;
      *((_WORD *)v79 - 1) = v87;
      v79 -= 2;
    }
    while (v81 != v40);
    goto LABEL_80;
  }
LABEL_81:
  operator delete(v40);
LABEL_82:
  v40 = v79;
  if ((unint64_t)v55 < v34)
  {
LABEL_33:
    *(_WORD *)v55 = 2;
    v56 = v55 + 2;
    if ((unint64_t)(v55 + 2) < v34)
      goto LABEL_34;
    goto LABEL_106;
  }
LABEL_83:
  v88 = v55 - v40;
  if (v55 - v40 <= -3)
    abort();
  v89 = v88 >> 1;
  if (v34 - (unint64_t)v40 <= (v88 >> 1) + 1)
    v90 = v89 + 1;
  else
    v90 = v34 - (_QWORD)v40;
  if (v34 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFELL)
    v91 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v91 = v90;
  if (v91)
  {
    if (v91 < 0)
      goto LABEL_230;
    v92 = operator new(2 * v91);
  }
  else
  {
    v92 = 0;
  }
  v93 = &v92[2 * v89];
  v34 = (unint64_t)&v92[2 * v91];
  *(_WORD *)v93 = 2;
  v56 = v93 + 2;
  if (v55 != v40)
  {
    v94 = v55 - v40 - 2;
    if (v94 >= 0x1E)
    {
      if (v55 - v92 - (v88 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v96 = (v94 >> 1) + 1;
        v95 = &v55[-2 * (v96 & 0xFFFFFFFFFFFFFFF0)];
        v97 = &v92[2 * v89 - 16];
        v98 = v55 - 16;
        v99 = v96 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v100 = *(_OWORD *)v98;
          *(v97 - 1) = *((_OWORD *)v98 - 1);
          *v97 = v100;
          v97 -= 2;
          v98 -= 32;
          v99 -= 16;
        }
        while (v99);
        v93 -= 2 * (v96 & 0xFFFFFFFFFFFFFFF0);
        if (v96 == (v96 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_103:
          if (!v40)
            goto LABEL_105;
          goto LABEL_104;
        }
      }
      else
      {
        v95 = v55;
      }
    }
    else
    {
      v95 = v55;
    }
    do
    {
      v101 = *((_WORD *)v95 - 1);
      v95 -= 2;
      *((_WORD *)v93 - 1) = v101;
      v93 -= 2;
    }
    while (v95 != v40);
    goto LABEL_103;
  }
LABEL_104:
  operator delete(v40);
LABEL_105:
  v40 = v93;
  if ((unint64_t)v56 < v34)
  {
LABEL_34:
    *(_WORD *)v56 = 6;
    v57 = v56 + 2;
    if ((unint64_t)(v56 + 2) < v34)
      goto LABEL_35;
LABEL_129:
    v116 = v57 - v40;
    if (v57 - v40 <= -3)
      abort();
    v117 = v116 >> 1;
    if (v34 - (unint64_t)v40 <= (v116 >> 1) + 1)
      v118 = v117 + 1;
    else
      v118 = v34 - (_QWORD)v40;
    if (v34 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFELL)
      v119 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v119 = v118;
    if (v119)
    {
      if (v119 < 0)
        goto LABEL_230;
      v120 = operator new(2 * v119);
    }
    else
    {
      v120 = 0;
    }
    v121 = &v120[2 * v117];
    v34 = (unint64_t)&v120[2 * v119];
    *(_WORD *)v121 = 3;
    v58 = v121 + 2;
    if (v57 == v40)
    {
LABEL_150:
      operator delete(v40);
LABEL_151:
      v40 = v121;
      if ((unint64_t)v58 < v34)
        goto LABEL_36;
      goto LABEL_152;
    }
    v122 = v57 - v40 - 2;
    if (v122 >= 0x1E)
    {
      if (v57 - v120 - (v116 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v124 = (v122 >> 1) + 1;
        v123 = &v57[-2 * (v124 & 0xFFFFFFFFFFFFFFF0)];
        v125 = &v120[2 * v117 - 16];
        v126 = v57 - 16;
        v127 = v124 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v128 = *(_OWORD *)v126;
          *(v125 - 1) = *((_OWORD *)v126 - 1);
          *v125 = v128;
          v125 -= 2;
          v126 -= 32;
          v127 -= 16;
        }
        while (v127);
        v121 -= 2 * (v124 & 0xFFFFFFFFFFFFFFF0);
        if (v124 == (v124 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_149:
          if (!v40)
            goto LABEL_151;
          goto LABEL_150;
        }
      }
      else
      {
        v123 = v57;
      }
    }
    else
    {
      v123 = v57;
    }
    do
    {
      v129 = *((_WORD *)v123 - 1);
      v123 -= 2;
      *((_WORD *)v121 - 1) = v129;
      v121 -= 2;
    }
    while (v123 != v40);
    goto LABEL_149;
  }
LABEL_106:
  v102 = v56 - v40;
  if (v56 - v40 <= -3)
    abort();
  v103 = v102 >> 1;
  if (v34 - (unint64_t)v40 <= (v102 >> 1) + 1)
    v104 = v103 + 1;
  else
    v104 = v34 - (_QWORD)v40;
  if (v34 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFELL)
    v105 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v105 = v104;
  if (v105)
  {
    if (v105 < 0)
      goto LABEL_230;
    v106 = operator new(2 * v105);
  }
  else
  {
    v106 = 0;
  }
  v107 = &v106[2 * v103];
  v34 = (unint64_t)&v106[2 * v105];
  *(_WORD *)v107 = 6;
  v57 = v107 + 2;
  if (v56 != v40)
  {
    v108 = v56 - v40 - 2;
    if (v108 >= 0x1E)
    {
      if (v56 - v106 - (v102 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v110 = (v108 >> 1) + 1;
        v109 = &v56[-2 * (v110 & 0xFFFFFFFFFFFFFFF0)];
        v111 = &v106[2 * v103 - 16];
        v112 = v56 - 16;
        v113 = v110 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 16;
        }
        while (v113);
        v107 -= 2 * (v110 & 0xFFFFFFFFFFFFFFF0);
        if (v110 == (v110 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_126:
          if (!v40)
            goto LABEL_128;
          goto LABEL_127;
        }
      }
      else
      {
        v109 = v56;
      }
    }
    else
    {
      v109 = v56;
    }
    do
    {
      v115 = *((_WORD *)v109 - 1);
      v109 -= 2;
      *((_WORD *)v107 - 1) = v115;
      v107 -= 2;
    }
    while (v109 != v40);
    goto LABEL_126;
  }
LABEL_127:
  operator delete(v40);
LABEL_128:
  v40 = v107;
  if ((unint64_t)v57 >= v34)
    goto LABEL_129;
LABEL_35:
  *(_WORD *)v57 = 3;
  v58 = v57 + 2;
  if ((unint64_t)(v57 + 2) >= v34)
  {
LABEL_152:
    v130 = v58 - v40;
    if (v58 - v40 <= -3)
      abort();
    v131 = v130 >> 1;
    if (v34 - (unint64_t)v40 <= (v130 >> 1) + 1)
      v132 = v131 + 1;
    else
      v132 = v34 - (_QWORD)v40;
    if (v34 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFELL)
      v132 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v132)
    {
      v133 = 0;
LABEL_162:
      v134 = &v133[2 * v131];
      *(_WORD *)v134 = 7;
      v59 = v134 + 2;
      if (v58 == v40)
        goto LABEL_172;
      v135 = v58 - v40 - 2;
      if (v135 >= 0x1E)
      {
        if ((unint64_t)(v58 - &v133[v130 & 0xFFFFFFFFFFFFFFFELL]) >= 0x20)
        {
          v137 = (v135 >> 1) + 1;
          v136 = &v58[-2 * (v137 & 0xFFFFFFFFFFFFFFF0)];
          v138 = &v133[2 * v131 - 16];
          v139 = v58 - 16;
          v140 = v137 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v141 = *(_OWORD *)v139;
            *(v138 - 1) = *((_OWORD *)v139 - 1);
            *v138 = v141;
            v138 -= 2;
            v139 -= 32;
            v140 -= 16;
          }
          while (v140);
          v134 -= 2 * (v137 & 0xFFFFFFFFFFFFFFF0);
          if (v137 == (v137 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_171:
            if (!v40)
            {
LABEL_173:
              v40 = v134;
              goto LABEL_174;
            }
LABEL_172:
            operator delete(v40);
            goto LABEL_173;
          }
        }
        else
        {
          v136 = v58;
        }
      }
      else
      {
        v136 = v58;
      }
      do
      {
        v142 = *((_WORD *)v136 - 1);
        v136 -= 2;
        *((_WORD *)v134 - 1) = v142;
        v134 -= 2;
      }
      while (v136 != v40);
      goto LABEL_171;
    }
    if ((v132 & 0x8000000000000000) == 0)
    {
      v133 = operator new(2 * v132);
      goto LABEL_162;
    }
LABEL_230:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_36:
  *(_WORD *)v58 = 7;
  v59 = v58 + 2;
LABEL_174:
  v143 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v143 + 1) = 0;
  *((_QWORD *)v143 + 2) = 0;
  *(_QWORD *)v143 = &off_1E42DF8B0;
  *((_QWORD *)v143 + 3) = &off_1E42B5748;
  v144 = (uint64_t)(v143 + 24);
  *((_QWORD *)v143 + 4) = 16;
  *((_DWORD *)v143 + 10) = 6;
  v145 = 0uLL;
  *((_OWORD *)v143 + 3) = 0u;
  *((_OWORD *)v143 + 4) = 0u;
  *((_OWORD *)v143 + 5) = 0u;
  *((_OWORD *)v143 + 6) = 0u;
  *((_QWORD *)v143 + 14) = 0;
  if ((v146 & 1) == 0)
  {
    v145 = 0uLL;
    if (v188)
    {
      v189 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v189, "GeoGL", 0xA3D02C1100000005);
      v145 = 0uLL;
    }
  }
  *((_QWORD *)v143 + 15) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)v143 + 16) = 0;
  *((_OWORD *)v143 + 11) = v145;
  *((_OWORD *)v143 + 12) = v145;
  *((_QWORD *)v143 + 26) = 0;
  *((_QWORD *)v143 + 27) = -1;
  *((_OWORD *)v143 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v143 + 10) = v145;
  *((_DWORD *)v143 + 34) = 0;
  *((_QWORD *)v143 + 29) = "/DebugFrustumElement/VertexData";
  *((_QWORD *)v143 + 30) = &ggl::CommonMesh::bufferPos4Reflection;
  *((_QWORD *)v143 + 3) = &off_1E42B7520;
  *((_QWORD *)v143 + 28) = &unk_1E42B7540;
  v147 = *((_QWORD *)v143 + 12);
  v148 = 8 * *((_QWORD *)v143 + 4);
  v149 = *((_QWORD *)v143 + 13) - v147;
  v202 = v143 + 24;
  v203 = (std::__shared_weak_count *)v143;
  if (v148 != v149)
  {
    if (v148 <= v149)
    {
      if (v148 < v149)
        *((_QWORD *)v143 + 13) = v147 + v148;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)(v143 + 96), v148 - v149);
    }
    v150 = (std::__shared_weak_count *)*((_QWORD *)v143 + 7);
    *((_QWORD *)v143 + 6) = 0;
    *((_QWORD *)v143 + 7) = 0;
    if (v150)
    {
      p_shared_owners = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldaxr(p_shared_owners);
      while (__stlxr(v152 - 1, p_shared_owners));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    *((_QWORD *)v143 + 18) = 0;
    *((_DWORD *)v143 + 34) = 0;
    v153 = *((_QWORD *)v143 + 13) - *((_QWORD *)v143 + 12);
    *((_QWORD *)v143 + 8) = 0;
    *((_QWORD *)v143 + 9) = v153;
    *((_QWORD *)v143 + 10) = 0;
    *((_QWORD *)v143 + 11) = v153;
    v144 = (uint64_t)v202;
  }
  v197 = 0uLL;
  v154 = 8 * *(_QWORD *)(v144 + 8);
  *(_QWORD *)&v155 = 0;
  *((_QWORD *)&v155 + 1) = v144;
  v156 = *(_QWORD *)(v144 + 72);
  v197 = v155;
  v198 = 0;
  v199 = v154;
  v201 = v156;
  v200 = 1;
  *(_QWORD *)&v155 = *((unsigned int *)v15 + 2);
  *(_QWORD *)v156 = *(_QWORD *)v15;
  *(_DWORD *)(v156 + 8) = v155;
  *(_DWORD *)(v156 + 12) = 1065353216;
  v157 = *(_QWORD *)(v15 + 3);
  *(float *)(v156 + 24) = v15[5];
  *(_QWORD *)(v156 + 16) = v157;
  *(_DWORD *)(v156 + 28) = 1065353216;
  v158 = *((_QWORD *)v15 + 3);
  *(float *)(v156 + 40) = v15[8];
  *(_QWORD *)(v156 + 32) = v158;
  *(_DWORD *)(v156 + 44) = 1065353216;
  v159 = *(_QWORD *)(v15 + 9);
  *(float *)(v156 + 56) = v15[11];
  *(_QWORD *)(v156 + 48) = v159;
  *(_DWORD *)(v156 + 60) = 1065353216;
  v160 = *((_QWORD *)v15 + 6);
  *(float *)(v156 + 72) = v15[14];
  *(_QWORD *)(v156 + 64) = v160;
  *(_DWORD *)(v156 + 76) = 1065353216;
  v161 = *(_QWORD *)(v15 + 15);
  *(float *)(v156 + 88) = v15[17];
  *(_QWORD *)(v156 + 80) = v161;
  *(_DWORD *)(v156 + 92) = 1065353216;
  v162 = *((_QWORD *)v15 + 9);
  *(float *)(v156 + 104) = v15[20];
  *(_QWORD *)(v156 + 96) = v162;
  *(_DWORD *)(v156 + 108) = 1065353216;
  v163 = *(_QWORD *)(v15 + 21);
  *(float *)(v156 + 120) = v15[23];
  *(_QWORD *)(v156 + 112) = v163;
  *(_DWORD *)(v156 + 124) = 1065353216;
  v164 = operator new();
  v165 = (char *)operator new(0x28uLL);
  strcpy(v165, "/DebugFrustumElement/RenderableGroup");
  *(_QWORD *)v164 = off_1E42BE278;
  std::string::__init_copy_ctor_external((std::string *)(v164 + 8), v165, 0x24uLL);
  *(_QWORD *)v164 = &off_1E42C4580;
  *(_QWORD *)(v164 + 32) = 0;
  *(_BYTE *)(v164 + 40) = 1;
  *(_OWORD *)(v164 + 48) = 0u;
  *(_OWORD *)(v164 + 64) = 0u;
  *(_OWORD *)(v164 + 80) = 0u;
  *(_OWORD *)(v164 + 96) = 0u;
  *(_QWORD *)(v164 + 112) = 0;
  *(_BYTE *)(v164 + 120) = 1;
  *(_QWORD *)(v164 + 128) = 0;
  *(_QWORD *)(v164 + 136) = 0;
  operator delete(v165);
  v196 = 20;
  strcpy(__p, "/DebugFrustumElement");
  v166 = v203;
  v192[2] = v144;
  v193 = v203;
  if (v203)
  {
    v167 = (unint64_t *)&v203->__shared_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  altitude::util::computeBounds((uint64_t)v194, v144, (uint64_t)v40, (v59 - v40) >> 1);
  v192[0] = v144;
  v192[1] = (uint64_t)v166;
  if (v166)
  {
    v169 = (unint64_t *)&v166->__shared_owners_;
    do
      v170 = __ldxr(v169);
    while (__stxr(v170 + 1, v169));
  }
  SolidLineElement = altitude::Renderable::createSolidLineElement(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 8) + 40) + 8), (const void **)__p, (uint64_t)&v204, (uint64_t)v194, v192, v40, (unint64_t)(v59 - v40) >> 1, v191);
  if (!v166)
    goto LABEL_196;
  v172 = (unint64_t *)&v166->__shared_owners_;
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (!v173)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    v174 = v193;
    if (!v193)
      goto LABEL_200;
  }
  else
  {
LABEL_196:
    v174 = v193;
    if (!v193)
      goto LABEL_200;
  }
  v175 = (unint64_t *)&v174->__shared_owners_;
  do
    v176 = __ldaxr(v175);
  while (__stlxr(v176 - 1, v175));
  if (!v176)
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
    if ((v196 & 0x80000000) == 0)
      goto LABEL_202;
    goto LABEL_201;
  }
LABEL_200:
  if (v196 < 0)
LABEL_201:
    operator delete(*(void **)__p);
LABEL_202:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, SolidLineElement);
  if (v201)
  {
    v178 = v198;
    v177 = v199;
    if (v199 != v198)
    {
      v179 = (_QWORD *)*((_QWORD *)&v197 + 1);
      v180 = v200;
      v181 = HIBYTE(v200);
      if ((_QWORD)v197 && *(_BYTE *)(*((_QWORD *)&v197 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v197 + 64))();
      if (v180 && !v181)
      {
        v183 = v179[7];
        v182 = v179[8];
        if (v182 == v183)
          v183 = v179[10] - v179[9];
        if (v178 < v183)
          v183 = v178;
        if (v182 <= v177)
          v182 = v177;
        if (v182 == v183)
          v182 = v183 + v179[10] - v179[9];
        v179[7] = v183;
        v179[8] = v182;
      }
    }
  }
  v184 = v203;
  if (v203)
  {
    v185 = (unint64_t *)&v203->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  if (v40)
    operator delete(v40);
  operator delete(v15);
  return v164;
}

void sub_19F771054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;

  operator delete(v32);
  operator delete(v31);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19F771890(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &off_1E42B4FB0;

  _Unwind_Resume(a1);
}

void sub_19F7718B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 960);
  if (v4 == (_QWORD *)(v1 + 936))
  {
    v5 = 4;
    v4 = (_QWORD *)(v1 + 936);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

void sub_19F77196C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  altitude::util::DclpUnique<altitude::TextureMap,altitude::util::DclpDefaultDelete<altitude::TextureMap>>::~DclpUnique(v1 + 1072);
  altitude::util::DclpUnique<altitude::TextureMap,altitude::util::DclpDefaultDelete<altitude::TextureMap>>::~DclpUnique(v1 + 968);
  altitude::util::DclpUnique<ggl::Texture2D,altitude::util::DclpDefaultDelete<ggl::Texture2D>>::~DclpUnique(v1 + 864);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 800);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 720);
  std::unique_ptr<ReachabilityChangedObserver>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 680));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 664));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 608);
  karo::Mutex::~Mutex((pthread_mutex_t **)(v1 + 600));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 584));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 552);
  altitude::AnimationManager::~AnimationManager((altitude::AnimationManager *)(v1 + 192));

  v3 = *(void **)(v1 + 136);
  if (v3)
  {
    *(_QWORD *)(v1 + 144) = v3;
    operator delete(v3);
    if (*(char *)(v1 + 135) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v1 + 112));
      if ((*(char *)(v1 + 111) & 0x80000000) == 0)
      {
LABEL_8:
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 72);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 32);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*(void **)(v1 + 88));
      goto LABEL_8;
    }
  }
  else if (*(char *)(v1 + 135) < 0)
  {
    goto LABEL_3;
  }
  if ((*(char *)(v1 + 111) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void altitude::util::DclpUnique<altitude::TextureMap,altitude::util::DclpDefaultDelete<altitude::TextureMap>>::~DclpUnique(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  std::mutex::lock((std::mutex *)a1);
  v2 = atomic_load((unint64_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::unlock((std::mutex *)a1);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == (_QWORD *)(a1 + 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 72);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_19F771AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 96);
  if (v3 == (_QWORD *)(v1 + 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 72);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void altitude::util::DclpUnique<ggl::Texture2D,altitude::util::DclpDefaultDelete<ggl::Texture2D>>::~DclpUnique(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  std::mutex::lock((std::mutex *)a1);
  v2 = atomic_load((unint64_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::unlock((std::mutex *)a1);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == (_QWORD *)(a1 + 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 72);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_19F771B68(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 96);
  if (v3 == (_QWORD *)(v1 + 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 72);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::GlobeView::GlobeView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  pthread_mutex_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  pthread_mutex_t *v21;
  uint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _BYTE *v27;
  uint64_t **v28;
  int v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const void *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  _BYTE *v42;
  BOOL v43;
  uint64_t v44;
  pthread_mutex_t *v45;
  unint64_t v46;
  uint64_t *v47;
  void **v48;
  pthread_mutex_t *v49;
  void **v50;
  char *v51;
  char *v52;
  void *v53;
  char *v54;
  char *v55;
  void (**v56)(char *);
  char *v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  void (**v62)(char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  id v73;
  const char *v74;
  int v75;
  xmlDocPtr v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  karo::RequestPruner *v103;
  uint64_t v104;
  id *v105;
  void **v106;
  id *v107;
  AltTileFetcher *v108;
  void *v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  karo::AsyncRequestManager *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  karo::AsyncRequestManager *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  float v133;
  NSObject *v134;
  double v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  NSObject *v153;
  dispatch_queue_t v154;
  void *v155;
  unint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  id v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  char **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  void *__p;
  size_t v199;
  unint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  _QWORD v203[4];
  _QWORD v204[4];
  _QWORD v205[4];
  _BYTE v206[24];
  char **v207;
  char *v208[6];

  v208[3] = *(char **)MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E42C6A98;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = *a3;
  v196 = a1 + 72;
  v6 = a3[1];
  *(_QWORD *)(a1 + 80) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 88) = 0uLL;
  *(_DWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 104) = 0uLL;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 145) = 0uLL;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 257;
  gettimeofday((timeval *)v206, 0);
  *(double *)(a1 + 192) = (double)*(uint64_t *)v206 + (double)*(int *)&v206[8] * 0.000001;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v9 = operator new();
  *(_QWORD *)v9 = a1 + 192;
  *(_OWORD *)(v9 + 8) = xmmword_19FFB4760;
  *(_QWORD *)(v9 + 24) = 0x3FF0000000000000;
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v9;
  if (v10)
    MEMORY[0x1A1AF4E00](v10, 0x1060C4029F9A71ELL);
  *(_QWORD *)(a1 + 256) = 0;
  *(std::chrono::steady_clock::time_point *)(a1 + 256) = std::chrono::steady_clock::now();
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x3FE0C152382D7365;
  *(_OWORD *)(a1 + 288) = xmmword_19FFB4770;
  *(int64x2_t *)(a1 + 304) = vdupq_n_s64(0xC00921FB54442D18);
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_19FFB32C0;
  *(_QWORD *)(a1 + 400) = 0x418CE4856C000000;
  *(_BYTE *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 256;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  v195 = a1 + 88;
  v11 = (_BYTE *)operator new();
  *v11 = 0;
  *(_QWORD *)(a1 + 552) = v11;
  v12 = operator new();
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)v12 = &off_1E42E8E50;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(a1 + 560) = v12;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 576) = a1 + 584;
  pthread_mutexattr_init((pthread_mutexattr_t *)v206);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v206, 2);
  v13 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v13, (const pthread_mutexattr_t *)v206);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v206);
  *(_QWORD *)(a1 + 600) = v13;
  *(_BYTE *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 636) = xmmword_19FFB4780;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 856) = a2;
  v205[0] = &off_1E42D8948;
  v205[1] = a1;
  v205[3] = v205;
  *(_QWORD *)(a1 + 864) = 850045863;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_QWORD *)(a1 + 960) = a1 + 936;
  *(_QWORD *)(a1 + 936) = &off_1E42D8948;
  *(_QWORD *)(a1 + 944) = a1;
  v204[0] = &off_1E42D8990;
  v204[1] = a1;
  v204[3] = v204;
  *(_QWORD *)(a1 + 968) = 850045863;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_QWORD *)(a1 + 1064) = a1 + 1040;
  *(_QWORD *)(a1 + 1040) = &off_1E42D8990;
  *(_QWORD *)(a1 + 1048) = a1;
  v203[0] = &off_1E42D89D8;
  v203[1] = a1;
  v203[3] = v203;
  *(_QWORD *)(a1 + 1072) = 850045863;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_QWORD *)(a1 + 1168) = a1 + 1144;
  *(_QWORD *)(a1 + 1144) = &off_1E42D89D8;
  *(_QWORD *)(a1 + 1152) = a1;
  v14 = (_QWORD *)operator new();
  v201[0] = &off_1E42D8A20;
  v201[1] = a1;
  v202 = v201;
  v15 = **(id **)(*(_QWORD *)(a1 + 856) + 8);
  ReachabilityChangedObserver::ReachabilityChangedObserver(v14, v201, v15);
  v16 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v14;
  if (v16)
  {
    objc_msgSend(*(id *)(v16 + 8), "clearListener", v195, v196, a1 + 1072, a1 + 864, a1 + 664, a1 + 584, a1 + 552, a1 + 192);
    v17 = *(void **)(v16 + 8);
    if (v17)
    {
      *(_QWORD *)(v16 + 8) = 0;

      v17 = *(void **)(v16 + 8);
    }
    *(_QWORD *)v16 = &off_1E42B4FB0;

    MEMORY[0x1A1AF4E00](v16, 0x80C40B49F1EBBLL);
  }

  v18 = v202;
  if (v202 == v201)
  {
    v19 = 4;
    v18 = v201;
    goto LABEL_14;
  }
  if (v202)
  {
    v19 = 5;
LABEL_14:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 44) = 14;
  v20 = operator new();
  *(_QWORD *)v20 = &off_1E42C3588;
  *(_QWORD *)(v20 + 64) = 0;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_QWORD *)(v20 + 56) = v20 + 64;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *(_QWORD *)(v20 + 72) = 0;
  pthread_mutexattr_init((pthread_mutexattr_t *)v206);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v206, 2);
  v21 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v21, (const pthread_mutexattr_t *)v206);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v206);
  *(_QWORD *)(v20 + 88) = v21;
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136);
  *(_QWORD *)(v22 + 80) = v20;
  *(_QWORD *)(v20 + 80) = v22;
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
  v23 = (char *)operator new(0x78uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E42E5D18;
  *((_QWORD *)v23 + 3) = &off_1E42C2CE8;
  *((_QWORD *)v23 + 4) = 850045863;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *((_QWORD *)v23 + 13) = 0;
  *((_QWORD *)v23 + 14) = 0;
  *((_QWORD *)v23 + 11) = 0;
  *((_QWORD *)v23 + 12) = v23 + 104;
  *(_QWORD *)(a1 + 720) = v23 + 24;
  v24 = *(std::__shared_weak_count **)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v23;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v197 = v5;
  *(_QWORD *)v206 = &v206[8];
  *(_QWORD *)&v206[8] = 0;
  v208[0] = 0;
  v208[1] = 0;
  *(_QWORD *)&v206[16] = 0;
  v207 = v208;
  HIBYTE(v200) = 3;
  LODWORD(__p) = 7367034;
  if (karo::media::ZipLoader::loadFromChunk((uint64_t)v23, (uint64_t)&bundleDataBuffer, 0x60AE6uLL, (uint64_t)v206))
  {
    v27 = *(_BYTE **)v206;
    if (*(_BYTE **)v206 != &v206[8])
    {
      v28 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80) + 56);
      do
      {
        v29 = (char)v27[55];
        if (v29 >= 0)
          v30 = v27[55];
        else
          v30 = *((_QWORD *)v27 + 5);
        v31 = v30 + 1;
        if (v30 + 1 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v31 >= 0x17)
        {
          v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v33 = v31 | 7;
          v34 = v33 + 1;
          v35 = (char *)operator new(v33 + 1);
          v199 = v30 + 1;
          v200 = v34 | 0x8000000000000000;
          __p = v35;
          *v35 = 47;
          v32 = v35 + 1;
        }
        else
        {
          v199 = 0;
          v200 = 0;
          HIBYTE(v200) = v30 + 1;
          v32 = (char *)&__p + 1;
          __p = (void *)47;
          if (!v30)
            goto LABEL_38;
        }
        if (v29 >= 0)
          v36 = v27 + 32;
        else
          v36 = (const void *)*((_QWORD *)v27 + 4);
        memmove(v32, v36, v30);
LABEL_38:
        v32[v30] = 0;
        v37 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (const void **)&__p, (uint64_t)&__p);
        v38 = v37[7];
        v37[7] = (uint64_t *)*((_QWORD *)v27 + 7);
        *((_QWORD *)v27 + 7) = v38;
        v39 = v37[8];
        v37[8] = (uint64_t *)*((_QWORD *)v27 + 8);
        *((_QWORD *)v27 + 8) = v39;
        v40 = v37[9];
        v37[9] = (uint64_t *)*((_QWORD *)v27 + 9);
        *((_QWORD *)v27 + 9) = v40;
        if (SHIBYTE(v200) < 0)
        {
          operator delete(__p);
          v41 = (_QWORD *)*((_QWORD *)v27 + 1);
          if (v41)
          {
            do
            {
LABEL_42:
              v42 = v41;
              v41 = (_QWORD *)*v41;
            }
            while (v41);
            goto LABEL_23;
          }
        }
        else
        {
          v41 = (_QWORD *)*((_QWORD *)v27 + 1);
          if (v41)
            goto LABEL_42;
        }
        do
        {
          v42 = (_BYTE *)*((_QWORD *)v27 + 2);
          v43 = *(_QWORD *)v42 == (_QWORD)v27;
          v27 = v42;
        }
        while (!v43);
LABEL_23:
        v27 = v42;
      }
      while (v42 != &v206[8]);
    }
  }
  std::__tree<std::string>::destroy(v208[0]);
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(char **)&v206[8]);
  v44 = operator new();
  *(_QWORD *)v44 = &off_1E42C4558;
  *(_OWORD *)(v44 + 8) = 0u;
  *(_OWORD *)(v44 + 24) = 0u;
  *(_OWORD *)(v44 + 40) = 0u;
  *(_QWORD *)(v44 + 72) = 0;
  *(_QWORD *)(v44 + 80) = 0;
  *(_QWORD *)(v44 + 64) = 0;
  *(_QWORD *)(v44 + 56) = v44 + 64;
  pthread_mutexattr_init((pthread_mutexattr_t *)v206);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v206, 2);
  v45 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v45, (const pthread_mutexattr_t *)v206);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v206);
  *(_QWORD *)(v44 + 80) = v45;
  *(_OWORD *)(v44 + 104) = 0u;
  *(_OWORD *)(v44 + 88) = 0u;
  *(_QWORD *)(v44 + 144) = 0;
  *(_DWORD *)(v44 + 151) = 0;
  *v197 = v44;
  v46 = operator new();
  *(_QWORD *)v46 = &off_1E42C4448;
  *(_OWORD *)(v46 + 8) = 0u;
  v47 = (uint64_t *)(v46 + 8);
  *(_QWORD *)(v46 + 72) = 0;
  *(_OWORD *)(v46 + 24) = 0u;
  *(_OWORD *)(v46 + 40) = 0u;
  v48 = (void **)(v46 + 40);
  *(_QWORD *)(v46 + 56) = 0;
  *(_QWORD *)(v46 + 64) = v46 + 72;
  *(_QWORD *)(v46 + 104) = 0;
  *(_QWORD *)(v46 + 112) = 0;
  *(_QWORD *)(v46 + 96) = 0;
  *(_QWORD *)(v46 + 80) = 0;
  *(_QWORD *)(v46 + 88) = v46 + 96;
  pthread_mutexattr_init((pthread_mutexattr_t *)v206);
  pthread_mutexattr_settype((pthread_mutexattr_t *)v206, 2);
  v49 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v49, (const pthread_mutexattr_t *)v206);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v206);
  *(_QWORD *)(v46 + 112) = v49;
  v50 = (void **)(v46 + 16);
  v51 = *(char **)(v46 + 16);
  *(_DWORD *)(v46 + 120) = 0;
  if (v51)
  {
    v52 = *(char **)(v46 + 24);
    v53 = v51;
    if (v52 != v51)
    {
      v54 = v52 - 240;
      v55 = v52 - 240;
      do
      {
        v56 = *(void (***)(char *))v55;
        v55 -= 240;
        (*v56)(v54);
        v43 = v54 == v51;
        v54 = v55;
      }
      while (!v43);
      v53 = *v50;
    }
    *(_QWORD *)(v46 + 24) = v51;
    operator delete(v53);
  }
  *v50 = 0;
  *(_QWORD *)(v46 + 24) = 0;
  *(_QWORD *)(v46 + 32) = 0;
  v57 = (char *)*v48;
  if (*v48)
  {
    v58 = *(char **)(v46 + 48);
    v59 = *v48;
    if (v58 != v57)
    {
      v60 = v58 - 240;
      v61 = v58 - 240;
      do
      {
        v62 = *(void (***)(char *))v61;
        v61 -= 240;
        (*v62)(v60);
        v43 = v60 == v57;
        v60 = v61;
      }
      while (!v43);
      v59 = *v48;
    }
    *(_QWORD *)(v46 + 48) = v57;
    operator delete(v59);
  }
  *v48 = 0;
  *(_QWORD *)(v46 + 48) = 0;
  *(_QWORD *)(v46 + 56) = 0;
  v63 = *v47;
  v64 = v44;
  *v47 = v44;
  if (!v63
    || (v206[23] = 8,
        strcpy(v206, "triggers"),
        altitude::ManifestManager::unregisterListener(v63, (const void **)v206, v46),
        (v64 = *(_QWORD *)(v46 + 8)) != 0))
  {
    v206[23] = 8;
    strcpy(v206, "triggers");
    altitude::ManifestManager::registerListener(v64, (const void **)v206, v46);
  }
  *(_QWORD *)(a1 + 24) = v46;
  v65 = operator new();
  v66 = *(_QWORD *)(a1 + 856);
  v67 = *(_QWORD *)(v66 + 136);
  strcpy((char *)(v65 + 8), "/georesourcemanager");
  *(_BYTE *)(v65 + 31) = 19;
  *(_QWORD *)v65 = off_1E42C5438;
  *(_QWORD *)(v65 + 32) = v67;
  *(_QWORD *)(v65 + 40) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v66 + 136) + 80) + 40))(*(_QWORD *)(*(_QWORD *)(v66 + 136) + 80), v65);
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 24))(v68, v65);
  *(_QWORD *)(v65 + 40) = v44;
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if (v69)
  {
    objc_msgSend(MEMORY[0x1E0D27410], "sharedManager");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "dataForResourceWithName:fallbackBundle:", CFSTR("altitude.xml"), 0);
    v71 = (void *)objc_claimAutoreleasedReturnValue();

    if (v71)
    {
      v72 = *(_QWORD *)(v65 + 40);
      if (v72)
      {
        v73 = objc_retainAutorelease(v71);
        v74 = (const char *)objc_msgSend(v73, "bytes");
        v75 = objc_msgSend(v73, "length");
        pthread_mutex_lock(*(pthread_mutex_t **)(v72 + 80));
        v76 = xmlParseMemory(v74, v75);
        v77 = (std::__shared_weak_count *)operator new();
        v78 = v77;
        v77->__shared_owners_ = 0;
        v79 = (unint64_t *)&v77->__shared_owners_;
        v77->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6AA8;
        v77->__shared_weak_owners_ = 0;
        v77[1].__vftable = (std::__shared_weak_count_vtbl *)v76;
        v77[1].__shared_owners_ = (uint64_t)deleteDoc;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        v81 = *(std::__shared_weak_count **)(v72 + 24);
        *(_QWORD *)(v72 + 16) = v76;
        *(_QWORD *)(v72 + 24) = v77;
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        *(_QWORD *)(v72 + 8) = xmlDocGetRootElement(*(const xmlDoc **)(v72 + 16));
        do
          v84 = __ldaxr(v79);
        while (__stlxr(v84 - 1, v79));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
        altitude::ManifestManager::parseManifest((altitude::ManifestManager *)v72);
        *(_BYTE *)(v72 + 154) = 1;
        v85 = *(_QWORD *)(v72 + 144);
        if (v85)
          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 48))(v85);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v72 + 80));
      }
    }

  }
  *(_QWORD *)(a1 + 752) = v65;
  v86 = operator new();
  v206[23] = 16;
  strcpy(v206, "/render/mainview");
  altitude::View::View(v86, (__int128 *)v206, *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136));
  v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 40))(v87, v86);
  v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 24))(v88, v86);
  *(_BYTE *)(v86 + 1290) = 1;
  *(_BYTE *)(v86 + 1292) = 1;
  *(_QWORD *)(a1 + 784) = v86;
  v89 = operator new();
  *(_QWORD *)v89 = &off_1E42B06B8;
  *(_QWORD *)(v89 + 8) = 850045863;
  *(_OWORD *)(v89 + 16) = 0u;
  *(_OWORD *)(v89 + 32) = 0u;
  *(_OWORD *)(v89 + 48) = 0u;
  *(_OWORD *)(v89 + 64) = 0u;
  *(_OWORD *)(v89 + 80) = 0u;
  *(_QWORD *)(v89 + 96) = 0;
  *(_DWORD *)(v89 + 104) = 1065353216;
  *(_OWORD *)(v89 + 112) = 0u;
  *(_OWORD *)(v89 + 128) = 0u;
  *(_DWORD *)(v89 + 144) = 1065353216;
  *(_WORD *)(v89 + 152) = 0;
  *(_QWORD *)(a1 + 824) = v89;
  v90 = operator new();
  v91 = *(_QWORD *)(a1 + 856);
  v92 = *(_QWORD *)(v91 + 136);
  strcpy((char *)(v90 + 8), "/render/mainviewnode");
  *(_BYTE *)(v90 + 31) = 20;
  *(_QWORD *)(v90 + 32) = v92;
  *(_QWORD *)v90 = off_1E42C3750;
  *(_OWORD *)(v90 + 40) = 0u;
  *(_OWORD *)(v90 + 56) = 0u;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v91 + 136) + 80) + 40))(*(_QWORD *)(*(_QWORD *)(v91 + 136) + 80), v90);
  v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 24))(v93, v90);
  *(_QWORD *)(a1 + 768) = v90;
  v94 = operator new();
  v95 = *(_QWORD *)(a1 + 856);
  v96 = *(_QWORD *)(v95 + 136);
  strcpy((char *)(v94 + 8), "/render/mainviewport/");
  *(_BYTE *)(v94 + 31) = 21;
  *(_QWORD *)(v94 + 32) = v96;
  *(_QWORD *)v94 = off_1E42C3808;
  *(_OWORD *)(v94 + 40) = xmmword_19FFB4780;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v95 + 136) + 80) + 40))(*(_QWORD *)(*(_QWORD *)(v95 + 136) + 80), v94);
  v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 24))(v97, v94);
  v98 = operator new();
  v99 = (char *)operator new(0x20uLL);
  strcpy(v99, "/render/mainviewportnode");
  v100 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136);
  *(_QWORD *)v98 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v98 + 8), v99, 0x18uLL);
  *(_QWORD *)v98 = off_1E42C3790;
  *(_QWORD *)(v98 + 32) = v100;
  *(_QWORD *)(v98 + 40) = 0;
  operator delete(v99);
  v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 40))(v101, v98);
  v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 24))(v102, v98);
  *(_QWORD *)(v98 + 40) = v94;
  *(_QWORD *)(a1 + 792) = v94;
  *(_QWORD *)(a1 + 776) = v98;
  v103 = *(karo::RequestPruner **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 72) + 24);
  v104 = operator new();
  *(_QWORD *)v206 = operator new(0x28uLL);
  *(_OWORD *)&v206[8] = xmmword_19FFB3D80;
  strcpy(*(char **)v206, "/loading/network/geoservicesloader");
  v105 = *(id **)(*(_QWORD *)(a1 + 856) + 136);
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v104, (__int128 *)v206, (uint64_t)v105);
  *(_QWORD *)(v104 + 80) = 0;
  *(_QWORD *)(v104 + 72) = 0;
  *(_QWORD *)(v104 + 64) = v104 + 72;
  *(_DWORD *)(v104 + 88) = 0;
  *(_QWORD *)v104 = &off_1E42C4F60;
  *(_QWORD *)(v104 + 104) = 0;
  *(_QWORD *)(v104 + 112) = 0;
  *(_QWORD *)(v104 + 96) = 0;
  if (v105)
    v105 = (id *)v105[23];
  v106 = (void **)operator new();
  v107 = v105;
  *v106 = 0;
  v108 = -[AltTileFetcher initWithToken:]([AltTileFetcher alloc], "initWithToken:", v107);
  v109 = *v106;
  *v106 = v108;

  v110 = (_QWORD *)operator new();
  *v110 = &off_1E42E8BE8;
  v110[1] = 0;
  v110[2] = 0;
  v110[3] = v106;
  v111 = *(std::__shared_weak_count **)(v104 + 104);
  *(_QWORD *)(v104 + 96) = v106;
  *(_QWORD *)(v104 + 104) = v110;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader", v195);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v114, "registerTileLoader:", objc_opt_class());

  if ((v206[23] & 0x80000000) != 0)
    operator delete(*(void **)v206);
  v115 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 40))(v115, v104);
  v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 24))(v116, v104);
  *(_QWORD *)(v104 + 112) = *(_QWORD *)(a1 + 824);
  karo::RequestPruner::addRequestManager(v103, (karo::AsyncRequestManager *)v104);
  *(_QWORD *)(a1 + 8) = v104;
  v117 = (karo::AsyncRequestManager *)operator new();
  v206[23] = 21;
  strcpy(v206, "/loading/bundleloader");
  v118 = karo::AsyncRequestManager::AsyncRequestManager(v117, (__int128 *)v206, *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136));
  v118[10] = 0;
  v118[9] = 0;
  v118[8] = v118 + 9;
  *((_DWORD *)v118 + 22) = 0;
  *v118 = &off_1E42C3DB8;
  v119 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, karo::AsyncRequestManager *))(*(_QWORD *)v119 + 40))(v119, v117);
  v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, karo::AsyncRequestManager *))(*(_QWORD *)v120 + 24))(v120, v117);
  karo::RequestPruner::addRequestManager(v103, v117);
  *(_QWORD *)(a1 + 736) = v117;
  v121 = (karo::AsyncRequestManager *)operator new();
  v206[23] = 17;
  strcpy(v206, "/loading/protocol");
  v122 = karo::AsyncRequestManager::AsyncRequestManager(v121, (__int128 *)v206, *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136));
  v122[10] = 0;
  v122[9] = 0;
  v122[8] = v122 + 9;
  *((_DWORD *)v122 + 22) = 0;
  *v122 = &off_1E42C4338;
  v122[14] = 0;
  v122[15] = 0;
  v122[13] = 0;
  v122[12] = v122 + 13;
  v122[16] = 0;
  v122[17] = 0;
  v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, karo::AsyncRequestManager *))(*(_QWORD *)v123 + 40))(v123, v121);
  v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, karo::AsyncRequestManager *))(*(_QWORD *)v124 + 24))(v124, v121);
  altitude::ProtocolLoader::addLoader(v121, (uint64_t)v117);
  karo::RequestPruner::addRequestManager(v103, v121);
  *(_QWORD *)(a1 + 744) = v121;
  v125 = operator new();
  v126 = (char *)operator new(0x20uLL);
  *(_QWORD *)v206 = v126;
  *(_OWORD *)&v206[8] = xmmword_19FFB3620;
  strcpy(v126, "/loading/georesourceloader");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v125, (__int128 *)v206, *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136));
  *(_QWORD *)(v125 + 72) = 0;
  *(_QWORD *)(v125 + 80) = 0;
  *(_QWORD *)(v125 + 64) = v125 + 72;
  *(_DWORD *)(v125 + 88) = 0;
  *(_QWORD *)v125 = &off_1E42C4EB8;
  operator delete(v126);
  v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 40))(v127, v125);
  v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 24))(v128, v125);
  *(_QWORD *)(v125 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 72) + 16);
  karo::RequestPruner::addRequestManager(v103, (karo::AsyncRequestManager *)v125);
  altitude::ProtocolLoader::addLoader(v121, v125);
  *(_QWORD *)(a1 + 760) = v125;
  v129 = operator new();
  v130 = (char *)operator new(0x20uLL);
  strcpy(v130, "/loading/globe/tilemanager");
  v131 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136);
  *(_QWORD *)v129 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v129 + 8), v130, 0x1AuLL);
  *(_QWORD *)v129 = &off_1E42C3CF8;
  *(_QWORD *)(v129 + 32) = v131;
  *(_QWORD *)(v129 + 40) = &unk_1E42C3D50;
  *(_QWORD *)(v129 + 56) = 0;
  *(_QWORD *)(v129 + 64) = 0;
  *(_QWORD *)(v129 + 48) = v129 + 56;
  *(_QWORD *)(v129 + 184) = 0;
  *(_QWORD *)(v129 + 192) = 0;
  *(_QWORD *)(v129 + 176) = 0;
  *(_OWORD *)(v129 + 72) = 0u;
  *(_OWORD *)(v129 + 88) = 0u;
  *(_OWORD *)(v129 + 104) = 0u;
  *(_OWORD *)(v129 + 120) = 0u;
  *(_OWORD *)(v129 + 136) = 0u;
  *(_OWORD *)(v129 + 152) = 0u;
  *(_QWORD *)(v129 + 168) = v129 + 176;
  *(_DWORD *)(v129 + 200) = 1065353216;
  *(_WORD *)(v129 + 204) = 0;
  *(_DWORD *)(v129 + 208) = 3;
  *(_QWORD *)(v129 + 216) = 0;
  *(_QWORD *)(v129 + 224) = 0;
  *(_QWORD *)(v129 + 232) = 0;
  v132 = getenv("C3_LOD_SCALE");
  if (v132)
  {
    v133 = atof(v132);
    *(float *)(v129 + 200) = v133;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v134 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_DEBUG))
    {
      v135 = *(float *)(v129 + 200);
      *(_DWORD *)v206 = 134217984;
      *(double *)&v206[4] = v135;
      _os_log_impl(&dword_19F029000, v134, OS_LOG_TYPE_DEBUG, "Setting lod scale to: %f", v206, 0xCu);
    }
  }
  *(_QWORD *)(a1 + 688) = v129;
  operator delete(v130);
  v136 = operator new();
  v137 = (char *)operator new(0x20uLL);
  strcpy(v137, "/loading/objecttreeloader");
  v138 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136);
  *(_QWORD *)v136 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v136 + 8), v137, 0x19uLL);
  *(_QWORD *)v136 = off_1E42C4AF8;
  *(_QWORD *)(v136 + 32) = v138;
  *(_QWORD *)(v136 + 40) = &unk_1E42C4B30;
  *(_QWORD *)(v136 + 88) = 0;
  *(_OWORD *)(v136 + 48) = 0u;
  *(_OWORD *)(v136 + 64) = 0u;
  *(_QWORD *)(v136 + 80) = v136 + 88;
  *(_QWORD *)(v136 + 96) = 0;
  *(_QWORD *)(v136 + 104) = 850045863;
  *(_QWORD *)(v136 + 200) = 0;
  *(_OWORD *)(v136 + 112) = 0u;
  *(_OWORD *)(v136 + 128) = 0u;
  *(_OWORD *)(v136 + 144) = 0u;
  *(_OWORD *)(v136 + 160) = 0u;
  *(_OWORD *)(v136 + 176) = 0u;
  *(_QWORD *)(v136 + 192) = v136 + 200;
  *(_QWORD *)(v136 + 208) = 0;
  *(_QWORD *)(v136 + 216) = 0x143F800000;
  *(_QWORD *)(a1 + 696) = v136;
  operator delete(v137);
  v139 = *(_QWORD *)(a1 + 696);
  v140 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 40))(v140, v139);
  v141 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 24))(v141, v139);
  v142 = operator new();
  v143 = (char *)operator new(0x20uLL);
  strcpy(v143, "/loading/quicksurfacemanager");
  v144 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136);
  *(_QWORD *)v142 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v142 + 8), v143, 0x1CuLL);
  *(_QWORD *)v142 = &off_1E42C57A8;
  *(_QWORD *)(v142 + 32) = v144;
  *(_QWORD *)(v142 + 40) = 0;
  *(_QWORD *)(v142 + 48) = 0;
  *(_QWORD *)(v142 + 56) = 0;
  *(_BYTE *)(v142 + 64) = 0;
  *(_OWORD *)(v142 + 72) = 0u;
  *(_OWORD *)(v142 + 88) = 0u;
  *(_OWORD *)(v142 + 104) = 0u;
  *(_OWORD *)(v142 + 116) = 0u;
  *(_QWORD *)(a1 + 704) = v142;
  operator delete(v143);
  v145 = *(_QWORD *)(a1 + 704);
  v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 40))(v146, v145);
  v147 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 24))(v147, v145);
  v148 = operator new();
  *(_QWORD *)v148 = 0;
  *(_QWORD *)(v148 + 8) = 0;
  *(_QWORD *)(v148 + 16) = 0;
  *(_QWORD *)(v148 + 24) = 850045863;
  *(_OWORD *)(v148 + 32) = 0u;
  *(_OWORD *)(v148 + 48) = 0u;
  *(_OWORD *)(v148 + 64) = 0u;
  *(_QWORD *)(v148 + 80) = 0;
  *(_QWORD *)(a1 + 848) = v148;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 136) + 68))
  {
    v149 = operator new();
    v150 = *(_QWORD *)(a1 + 688);
    v151 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)v149 = &off_1E42C3F80;
    *(_QWORD *)(v149 + 8) = 0;
    *(_QWORD *)(v149 + 16) = v150;
    *(_OWORD *)(v149 + 32) = 0u;
    *(_OWORD *)(v149 + 64) = 0u;
    *(_QWORD *)(v149 + 24) = v151;
    *(_DWORD *)(v149 + 112) = 10;
    *(_OWORD *)(v149 + 48) = 0u;
    *(_OWORD *)(v149 + 80) = 0u;
    *(_OWORD *)(v149 + 96) = 0u;
    *(_OWORD *)(v149 + 120) = 0u;
    *(_QWORD *)(v149 + 168) = 850045863;
    *(_OWORD *)(v149 + 136) = 0u;
    *(_OWORD *)(v149 + 152) = 0u;
    *(_OWORD *)(v149 + 176) = 0u;
    *(_OWORD *)(v149 + 192) = 0u;
    *(_OWORD *)(v149 + 208) = 0u;
    *(_OWORD *)(v149 + 224) = 0u;
    *(_OWORD *)(v149 + 240) = 0u;
    *(_QWORD *)(v149 + 256) = 850045863;
    *(_OWORD *)(v149 + 308) = 0u;
    *(_OWORD *)(v149 + 296) = 0u;
    *(_OWORD *)(v149 + 280) = 0u;
    *(_OWORD *)(v149 + 264) = 0u;
    *(_QWORD *)(v149 + 328) = 1018212795;
    *(_OWORD *)(v149 + 361) = 0u;
    *(_OWORD *)(v149 + 336) = 0u;
    *(_OWORD *)(v149 + 352) = 0u;
    *(_QWORD *)(v149 + 416) = 0;
    *(_OWORD *)(v149 + 384) = 0u;
    *(_OWORD *)(v149 + 400) = 0u;
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v152 = objc_claimAutoreleasedReturnValue();
    dispatch_queue_attr_make_with_qos_class(v152, QOS_CLASS_USER_INITIATED, 0);
    v153 = objc_claimAutoreleasedReturnValue();

    v154 = dispatch_queue_create("com.apple.Maps.MapDisplay.MipmapQueue", v153);
    v155 = *(void **)(v149 + 32);
    *(_QWORD *)(v149 + 32) = v154;

    altitude::TileManager::registerTileListener(*(_QWORD **)(v149 + 16), v149);
    v156 = *(unsigned int *)(v149 + 112);
    v157 = *(_BYTE **)(v149 + 120);
    if (v156 > (uint64_t)(*(_QWORD *)(v149 + 136) - (_QWORD)v157) >> 4)
    {
      v158 = *(_BYTE **)(v149 + 128);
      v159 = (char *)operator new(16 * v156);
      v160 = &v159[(v158 - v157) & 0xFFFFFFFFFFFFFFF0];
      v161 = v160;
      if (v158 != v157)
      {
        v162 = &v159[(v158 - v157) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v161 = v162 - 16;
          *((_OWORD *)v162 - 1) = *((_OWORD *)v158 - 1);
          v158 -= 16;
          v162 -= 16;
        }
        while (v158 != v157);
      }
      *(_QWORD *)(v149 + 120) = v161;
      *(_QWORD *)(v149 + 128) = v160;
      *(_QWORD *)(v149 + 136) = &v159[16 * v156];
      if (v157)
        operator delete(v157);
    }
    v163 = (char *)operator new(0x58uLL);
    *((_QWORD *)v163 + 1) = 0;
    *((_QWORD *)v163 + 2) = 0;
    *(_QWORD *)v163 = &off_1E42DED18;
    *((_QWORD *)v163 + 5) = 0;
    *((_QWORD *)v163 + 6) = 0;
    *((_QWORD *)v163 + 4) = 0;
    *((_DWORD *)v163 + 14) = 0;
    *((_QWORD *)v163 + 3) = &off_1E42B63B0;
    *(_QWORD *)&v164 = 0x100000001;
    *((_QWORD *)&v164 + 1) = 0x100000001;
    *(_OWORD *)(v163 + 60) = v164;
    *(_QWORD *)(v163 + 76) = 0x100000001;
    *((_DWORD *)v163 + 21) = 0;
    v165 = *(std::__shared_weak_count **)(v149 + 392);
    *(_QWORD *)(v149 + 384) = v163 + 24;
    *(_QWORD *)(v149 + 392) = v163;
    if (v165)
    {
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v168 = operator new();
    *(_QWORD *)v168 = 850045863;
    *(_OWORD *)(v168 + 8) = 0u;
    *(_OWORD *)(v168 + 24) = 0u;
    *(_OWORD *)(v168 + 40) = 0u;
    *(_OWORD *)(v168 + 56) = 0u;
    *(_OWORD *)(v168 + 72) = 0u;
    *(_QWORD *)(v168 + 88) = 0;
    *(_DWORD *)(v168 + 96) = 1065353216;
    if (LoadVideoToolbox(void)::loadPredicate != -1)
      dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
    if (LoadCoreMedia(void)::loadPredicate != -1)
      dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
    v169 = (_QWORD *)operator new();
    *v169 = &off_1E42E7218;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v168;
    v170 = *(std::__shared_weak_count **)(v149 + 408);
    *(_QWORD *)(v149 + 400) = v168;
    *(_QWORD *)(v149 + 408) = v169;
    if (v170)
    {
      v171 = (unint64_t *)&v170->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    v173 = (_QWORD *)operator new();
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v174 = (id)objc_claimAutoreleasedReturnValue();
    *v173 = &off_1E429DEB8;
    v173[1] = &off_1E42B4D50;
    v173[2] = v174;
    v175 = *(_QWORD *)(v149 + 416);
    *(_QWORD *)(v149 + 416) = v173;
    if (v175)
      (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);

    *(_QWORD *)(a1 + 840) = v149;
  }
  altitude::GlobeView::load((altitude::GlobeView *)a1);
  v176 = *(_QWORD **)(a1 + 424);
  if (v176)
  {
    v177 = (_QWORD *)v176[6];
    if (v177)
    {
      if (v177 == v176 + 3)
      {
        v207 = (char **)v206;
        (*(void (**)(_QWORD *, _BYTE *))(*v177 + 24))(v177, v206);
      }
      else
      {
        v207 = (char **)(*(uint64_t (**)(_QWORD *))(*v177 + 16))(v177);
      }
      (*(void (**)(_QWORD *, _BYTE *))(*v176 + 16))(v176, v206);
      v178 = v207;
      if (v207 == (char **)v206)
      {
        v179 = 4;
        v178 = (char **)v206;
        goto LABEL_129;
      }
      if (v207)
      {
        v179 = 5;
LABEL_129:
        (*(void (**)(void))&(*v178)[8 * v179])();
      }
    }
    altitude::TileManager::registerTileListener(*(_QWORD **)(v176[2] + 688), (uint64_t)(v176 + 1));
  }
  v180 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 136);
  if (*(_BYTE *)(v180 + 48))
  {
    *(_BYTE *)(v180 + 48) = 1;
    altitude::GlobeView::updateNightLightRedrawRequest((altitude::GlobeView *)a1);
  }
  altitude::GlobeView::updateLodScale((altitude::GlobeView *)a1);
  altitude::GlobeView::initializeScene((altitude::GlobeView *)a1);
  v181 = operator new();
  v182 = *(_QWORD *)(a1 + 472);
  v183 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)v181 = 0;
  *(_QWORD *)(v181 + 24) = 0;
  *(_QWORD *)(v181 + 32) = 0;
  *(_QWORD *)(v181 + 40) = 0;
  *(_QWORD *)(v181 + 8) = 0;
  *(_QWORD *)(v181 + 16) = v181 + 24;
  *(_QWORD *)(v181 + 48) = v182;
  *(_QWORD *)(v181 + 56) = v183;
  *(_WORD *)(v181 + 64) = 0;
  v184 = (_QWORD *)operator new();
  v184[2] = 0;
  v184[1] = 0;
  *v184 = v184 + 1;
  v184[3] = 0x19640000003E8;
  v184[4] = 0;
  v185 = *(_QWORD *)(v181 + 40);
  *(_QWORD *)(v181 + 40) = v184;
  if (v185)
  {
    karo::Pool<altitude::Anchor>::disposeElements(v185);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v185 + 8));
    MEMORY[0x1A1AF4E00](v185, 0x1020C40D4280EFALL);
  }
  v186 = (_QWORD *)operator new();
  *v186 = &off_1E42E8600;
  v186[1] = 0;
  v186[2] = 0;
  v186[3] = v181;
  v187 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v181;
  *(_QWORD *)(a1 + 40) = v186;
  if (v187)
  {
    v188 = (unint64_t *)&v187->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = *(_QWORD *)(a1 + 72);
  v191 = *(_OWORD *)(v190 + 8);
  v192 = *(_OWORD *)(v190 + 24);
  v193 = *(_OWORD *)(v190 + 40);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(v190 + 56);
  *(_OWORD *)(a1 + 320) = v192;
  *(_OWORD *)(a1 + 336) = v193;
  *(_OWORD *)(a1 + 304) = v191;
  ++*(_DWORD *)(a1 + 376);
  return a1;
}

void sub_19F77391C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, _QWORD **a14, uint64_t a15, altitude::AnimationManager *a16, uint64_t a17, _Unwind_Exception *exception_object, std::condition_variable *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;

  altitude::util::DclpUnique<altitude::TextureMap,altitude::util::DclpDefaultDelete<altitude::TextureMap>>::~DclpUnique(a11);
  altitude::util::DclpUnique<altitude::TextureMap,altitude::util::DclpDefaultDelete<altitude::TextureMap>>::~DclpUnique(v30 + 968);
  altitude::util::DclpUnique<ggl::Texture2D,altitude::util::DclpDefaultDelete<ggl::Texture2D>>::~DclpUnique(a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 + 800);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 + 720);
  std::unique_ptr<ReachabilityChangedObserver>::~unique_ptr[abi:nn180100](a23);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 + 608);
  karo::Mutex::~Mutex((pthread_mutex_t **)(v30 + 600));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  altitude::AnimationManager::~AnimationManager(a16);

  v33 = *(void **)(v30 + 136);
  if (v33)
  {
    *(_QWORD *)(v30 + 144) = v33;
    operator delete(v33);
    if (*(char *)(v30 + 135) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v30 + 112));
      if ((*(char *)(v30 + 111) & 0x80000000) == 0)
      {
LABEL_8:
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 + 32);

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*a9);
      goto LABEL_8;
    }
  }
  else if (*(char *)(v30 + 135) < 0)
  {
    goto LABEL_3;
  }
  if ((*(char *)(v30 + 111) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void altitude::GlobeView::load(altitude::GlobeView *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  __int128 *v12;
  size_t v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 __dst;
  int64_t v21;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 63) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 111) = 0;
  *(_QWORD *)(v2 + 112) = 0x6D6D33632ELL;
  *(_BYTE *)(v2 + 135) = 5;
  *(_QWORD *)(v2 + 136) = 1832084270;
  *(_QWORD *)(v2 + 159) = 0x100010100000004;
  *(_OWORD *)(v2 + 168) = xmmword_19FFB4790;
  *(_DWORD *)(v2 + 184) = 0;
  altitude::TileManager::addRootTileData(*((_QWORD *)this + 86), v2);
  if (*((char *)this + 135) < 0)
  {
    if (!*((_QWORD *)this + 15))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 135))
  {
    goto LABEL_31;
  }
  v3 = *(uint64_t **)(*((_QWORD *)this + 86) + 96);
  if (*(uint64_t **)(*((_QWORD *)this + 86) + 104) != v3)
  {
    v4 = *v3;
    v5 = (char *)this + 112;
    if ((*((_BYTE *)this + 135) & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = 0;
  v5 = (char *)this + 112;
  if ((*((_BYTE *)this + 135) & 0x80) != 0)
LABEL_7:
    v5 = *(const char **)v5;
LABEL_8:
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v21 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_15;
  }
  HIBYTE(v21) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_15:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = (void **)(v4 + 64);
  if ((*(char *)(v4 + 87) & 0x80000000) == 0)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      *(_OWORD *)v11 = __dst;
      *(_QWORD *)(v4 + 80) = v21;
      goto LABEL_31;
    }
    std::string::__assign_no_alias<true>(v11, (void *)__dst, *((size_t *)&__dst + 1));
    goto LABEL_30;
  }
  if (v21 >= 0)
    v12 = &__dst;
  else
    v12 = (__int128 *)__dst;
  if (v21 >= 0)
    v13 = HIBYTE(v21);
  else
    v13 = *((_QWORD *)&__dst + 1);
  std::string::__assign_no_alias<false>(v11, v12, v13);
  if (SHIBYTE(v21) < 0)
LABEL_30:
    operator delete((void *)__dst);
LABEL_31:
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "activeTileGroup");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "activeTileSetForStyle:size:scale:", 7, 2, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16 != 0;

  v18 = *((_QWORD *)this + 107);
  *(_BYTE *)(*(_QWORD *)(v18 + 136) + 65) = v17;
  v19 = **(_QWORD **)(v18 + 88);
  if (v19)
  {
    LOBYTE(__dst) = 7;
    md::MapEngine::setNeedsTick(v19, &__dst);
  }
}

void sub_19F77400C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void altitude::GlobeView::updateNightLightRedrawRequest(altitude::GlobeView *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  dispatch_time_t v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;

  v1 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  if (*(_BYTE *)(v1 + 48))
  {
    v3 = *(_QWORD *)(v1 + 160);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v4 = *((_QWORD *)this + 69);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = dispatch_time(0, 60000000000);
    v9 = **(NSObject ***)(*((_QWORD *)this + 107) + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN8altitude9GlobeView29updateNightLightRedrawRequestEv_block_invoke;
    block[3] = &__block_descriptor_56_ea8_40c27_ZTSNSt3__110shared_ptrIbEE_e5_v8__0l;
    block[4] = this;
    block[5] = v4;
    v18 = v5;
    if (v5)
    {
      v10 = (unint64_t *)&v5->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    dispatch_after(v8, v9, block);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v5)
    {
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void altitude::GlobeView::updateLodScale(altitude::GlobeView *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BOOL4 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;

  v2 = *((_QWORD *)this + 76);
  if (!v2)
    goto LABEL_28;
  v3 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v2 + 16) + 2784));
  if ((v3 & 1) == 0)
    goto LABEL_28;
  v4 = *(_QWORD *)(*((_QWORD *)this + 76) + 16);
  if (!v4)
    goto LABEL_28;
  v5 = atomic_load((unsigned __int8 *)(v4 + 2784));
  if ((v5 & 1) == 0)
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v4 + 2808));
  v6 = *(_QWORD *)(v4 + 120);
  v7 = *(std::__shared_weak_count **)(v4 + 128);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    v10 = *(unsigned __int8 *)(v6 + 15) != 0;
    if (!v7)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    if (!v7)
      goto LABEL_16;
  }
  v11 = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_16:
    if (v10)
      goto LABEL_17;
LABEL_28:
    v22 = *((_QWORD *)this + 107);
    if (*(double *)(*(_QWORD *)(v22 + 136) + 32) <= 1.0)
      v23 = 1061158912;
    else
      v23 = 1057384038;
    *(_DWORD *)(*((_QWORD *)this + 86) + 200) = v23;
    *(_DWORD *)(*((_QWORD *)this + 87) + 216) = v23;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v10)
    goto LABEL_28;
LABEL_17:
  v13 = *((_QWORD *)this + 76);
  v14 = 0;
  if (v13)
  {
    v15 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v13 + 16) + 2784));
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 76) + 16);
      if (v16)
      {
        v17 = atomic_load((unsigned __int8 *)(v16 + 2784));
        if ((v17 & 1) == 0)
          std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v16 + 2808));
        v18 = *(_QWORD *)(v16 + 120);
        v19 = *(std::__shared_weak_count **)(v16 + 128);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        if (v18)
          v14 = *(_DWORD *)(v18 + 204);
        else
          v14 = 0;
        if (v19)
        {
          v25 = (unint64_t *)&v19->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
    }
  }
  *(_DWORD *)(*((_QWORD *)this + 86) + 200) = v14;
  *(_DWORD *)(*((_QWORD *)this + 87) + 216) = v14;
  v22 = *((_QWORD *)this + 107);
LABEL_32:
  v24 = **(_QWORD **)(v22 + 88);
  if (v24)
  {
    v27 = 7;
    md::MapEngine::setNeedsTick(v24, &v27);
  }
}

void altitude::GlobeView::initializeScene(altitude::GlobeView *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  karo::RequestPruner *v10;
  uint64_t v11;
  char *v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  karo::AsyncRequestManager *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  pthread_mutex_t *v25;
  uint64_t v26;
  uint64_t v27;
  karo::AsyncRequestManager *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  pthread_mutex_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _QWORD *v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  std::chrono::steady_clock::time_point *v196;
  uint64_t v197;
  std::chrono::steady_clock::time_point *v198;
  uint64_t v199;
  std::chrono::steady_clock::time_point *v200;
  uint64_t v201;
  uint64_t v202;
  NSObject *v203;
  dispatch_source_t v204;
  NSObject *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  pthread_mutexattr_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  uint64_t *v237;
  _QWORD *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  uint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  char *v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  unint64_t v271;
  uint64_t v272;
  char *v273;
  __int128 *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  char *v291;
  _QWORD *v292;
  _QWORD *v293;
  char *v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  char *v300;
  char *v301;
  unint64_t v302;
  uint64_t v303;
  char *v304;
  __int128 *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  pthread_mutexattr_t v350;
  pthread_mutexattr_t *v351;
  _BYTE handler[24];
  void *v353;
  uint64_t v354;
  _BYTE v355[24];
  _BYTE *v356;
  uint64_t v357;

  v357 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 98);
  v3 = (_QWORD *)*((_QWORD *)this + 96);
  v345 = *((_QWORD *)this + 97);
  v4 = *(uint64_t **)(*((_QWORD *)this + 107) + 152);
  v5 = *v4;
  v6 = *((_QWORD *)this + 90);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  v348 = v6;
  v349 = v7;
  v343 = *((_QWORD *)this + 93);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v4 = *(uint64_t **)(*((_QWORD *)this + 107) + 152);
  }
  v10 = (karo::RequestPruner *)v4[3];
  v347 = *((_QWORD *)this + 1);
  v11 = operator new();
  v12 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v12;
  *(_OWORD *)&handler[8] = xmmword_19FFB3DA0;
  strcpy(v12, "/loading/c3mmrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v11, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 64) = v11 + 72;
  *(_DWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_1E42C5300;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 96) = v11 + 104;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_QWORD *)(v11 + 152) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 160) = 1;
  *(_DWORD *)(v11 + 164) = 100;
  *(_QWORD *)(v11 + 168) = 0;
  pthread_mutexattr_init(&v350);
  pthread_mutexattr_settype(&v350, 2);
  v13 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v13, &v350);
  pthread_mutexattr_destroy(&v350);
  *(_QWORD *)(v11 + 168) = v13;
  *((_QWORD *)this + 45) = v11;
  operator delete(v12);
  v14 = *((_QWORD *)this + 45);
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v14);
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14);
  v17 = (karo::AsyncRequestManager *)*((_QWORD *)this + 45);
  *((_QWORD *)v17 + 6) = v5;
  *((_QWORD *)v17 + 15) = *((_QWORD *)this + 3);
  *((_QWORD *)v17 + 18) = *((_QWORD *)this + 86);
  *((_QWORD *)v17 + 16) = *((_QWORD *)this + 87);
  *((_QWORD *)v17 + 17) = v347;
  karo::RequestPruner::addRequestManager(v10, v17);
  v18 = operator new();
  v19 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v19;
  *(_OWORD *)&handler[8] = xmmword_19FFB3620;
  strcpy(v19, "/loading/dtmrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v18, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 64) = v18 + 72;
  *(_DWORD *)(v18 + 88) = 0;
  *(_QWORD *)v18 = &off_1E42C4DD8;
  *(_QWORD *)(v18 + 104) = 0;
  *(_QWORD *)(v18 + 112) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  operator delete(v19);
  v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, v18);
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, v18);
  *(_QWORD *)(v18 + 48) = v5;
  v22 = *((_QWORD *)this + 3);
  *(_QWORD *)(v18 + 104) = *((_QWORD *)this + 45);
  *(_QWORD *)(v18 + 112) = v22;
  *(_QWORD *)(v18 + 96) = v347;
  karo::RequestPruner::addRequestManager(v10, (karo::AsyncRequestManager *)v18);
  *((_QWORD *)this + 7) = v18;
  v23 = operator new();
  handler[23] = 21;
  strcpy(handler, "/loading/dtmcachenode");
  v24 = karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v23, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  v24[9] = 0;
  v24[10] = 0;
  v24[8] = v24 + 9;
  *((_DWORD *)v24 + 22) = 0;
  *v24 = off_1E42C4818;
  *((_OWORD *)v24 + 6) = 0u;
  *((_OWORD *)v24 + 7) = 0u;
  *((_DWORD *)v24 + 32) = 1065353216;
  v24[17] = 0;
  pthread_mutexattr_init(&v350);
  pthread_mutexattr_settype(&v350, 2);
  v25 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v25, &v350);
  pthread_mutexattr_destroy(&v350);
  *(_QWORD *)(v23 + 136) = v25;
  *(_DWORD *)(v23 + 144) = 0;
  *(_QWORD *)v23 = &off_1E42C3E60;
  *(_QWORD *)(v23 + 152) = 0;
  *(_QWORD *)(v23 + 160) = 0;
  *((_QWORD *)this + 6) = v23;
  v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(v26, v23);
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 24))(v27, v23);
  v340 = v2;
  v342 = v3;
  v28 = (karo::AsyncRequestManager *)*((_QWORD *)this + 6);
  *((_QWORD *)v28 + 6) = v5;
  *((_QWORD *)v28 + 19) = v18;
  v29 = *((_QWORD *)this + 94);
  *((_QWORD *)v28 + 20) = v29;
  karo::RequestPruner::addRequestManager(v10, v28);
  v30 = operator new();
  *(_QWORD *)v30 = this;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 850045863;
  *(_OWORD *)(v30 + 40) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_WORD *)(v30 + 104) = 255;
  *(_DWORD *)(v30 + 108) = 0;
  *(_DWORD *)(v30 + 112) = 0;
  v31 = *((_QWORD *)this + 6);
  *(_QWORD *)(v30 + 88) = 0;
  *(_QWORD *)(v30 + 96) = v31;
  *((_QWORD *)this + 89) = v30;
  v32 = operator new();
  v33 = (char *)operator new(0x20uLL);
  strcpy(v33, "/loading/mapavailabilitycache");
  v34 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v32 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v32 + 8), v33, 0x1DuLL);
  *(_QWORD *)v32 = off_1E42C5928;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 48) = 0;
  *(_QWORD *)(v32 + 32) = v34;
  *(_QWORD *)(v32 + 40) = v32 + 48;
  pthread_mutexattr_init((pthread_mutexattr_t *)handler);
  pthread_mutexattr_settype((pthread_mutexattr_t *)handler, 2);
  v35 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v35, (const pthread_mutexattr_t *)handler);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)handler);
  *(_QWORD *)(v32 + 64) = v35;
  operator delete(v33);
  v36 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v32);
  v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 24))(v37, v32);
  v38 = operator new();
  v39 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v39;
  *(_OWORD *)&handler[8] = xmmword_19FFB3620;
  strcpy(v39, "/loading/maprequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v38, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v38 + 80) = 0;
  *(_QWORD *)(v38 + 72) = 0;
  *(_QWORD *)(v38 + 64) = v38 + 72;
  *(_DWORD *)(v38 + 88) = 0;
  *(_QWORD *)v38 = &off_1E42C5070;
  *(_QWORD *)(v38 + 104) = 0;
  *(_QWORD *)(v38 + 112) = 0;
  operator delete(v39);
  v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 40))(v40, v38);
  v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v38);
  *(_QWORD *)(v38 + 48) = v5;
  if (v7)
  {
    v42 = (unint64_t *)&v7->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldxr(v42);
    while (__stxr(v44 + 1, v42));
  }
  v45 = *(std::__shared_weak_count **)(v38 + 112);
  *(_QWORD *)(v38 + 104) = v6;
  *(_QWORD *)(v38 + 112) = v7;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v7)
  {
    v48 = (unint64_t *)&v7->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(v38 + 96) = v347;
  karo::RequestPruner::addRequestManager(v10, (karo::AsyncRequestManager *)v38);
  v50 = operator new();
  v51 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v51;
  *(_OWORD *)&handler[8] = xmmword_19FFB3620;
  strcpy(v51, "/loading/c3brequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v50, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v50 + 80) = 0;
  *(_QWORD *)(v50 + 72) = 0;
  *(_QWORD *)(v50 + 64) = v50 + 72;
  *(_DWORD *)(v50 + 88) = 0;
  *(_QWORD *)v50 = &off_1E42C4D58;
  *(_OWORD *)(v50 + 96) = 0u;
  *(_OWORD *)(v50 + 112) = 0u;
  *(_OWORD *)(v50 + 128) = 0u;
  *(_OWORD *)(v50 + 144) = 0u;
  *(_OWORD *)(v50 + 160) = 0u;
  *(_QWORD *)(v50 + 176) = 0;
  operator delete(v51);
  v52 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 40))(v52, v50);
  v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 24))(v53, v50);
  *(_QWORD *)(v50 + 48) = v5;
  *(_QWORD *)(v50 + 96) = v343;
  if (v349)
  {
    v54 = (unint64_t *)&v349->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = *(std::__shared_weak_count **)(v50 + 128);
  *(_QWORD *)(v50 + 120) = v6;
  *(_QWORD *)(v50 + 128) = v349;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  *(_QWORD *)(v50 + 136) = *((_QWORD *)this + 103);
  *(_QWORD *)(v50 + 144) = v32;
  *(_QWORD *)(v50 + 168) = *((_QWORD *)this + 6);
  *(_QWORD *)(v50 + 176) = v29;
  *(_QWORD *)(v50 + 104) = v347;
  *(_QWORD *)(v50 + 112) = v38;
  karo::RequestPruner::addRequestManager(v10, (karo::AsyncRequestManager *)v50);
  *((_QWORD *)this + 67) = v50;
  v346 = operator new();
  v59 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v59;
  *(_OWORD *)&handler[8] = xmmword_19FFB34A0;
  strcpy(v59, "/loading/heightrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v346, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v346 + 80) = 0;
  *(_QWORD *)(v346 + 72) = 0;
  *(_QWORD *)(v346 + 64) = v346 + 72;
  *(_DWORD *)(v346 + 88) = 0;
  *(_QWORD *)v346 = &off_1E42C5868;
  *(_OWORD *)(v346 + 96) = 0u;
  *(_OWORD *)(v346 + 112) = 0u;
  *(_OWORD *)(v346 + 128) = 0u;
  *(_QWORD *)(v346 + 144) = 0;
  operator delete(v59);
  *((_QWORD *)this + 71) = v346;
  v60 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 40))(v60, v346);
  v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 24))(v61, v346);
  *(_QWORD *)(v346 + 48) = v5;
  *(_QWORD *)(v346 + 120) = *((_QWORD *)this + 6);
  if (v349)
  {
    v62 = (unint64_t *)&v349->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = *(std::__shared_weak_count **)(v346 + 112);
  *(_QWORD *)(v346 + 104) = v6;
  *(_QWORD *)(v346 + 112) = v349;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  *(_QWORD *)(v346 + 96) = v38;
  *(_QWORD *)(v346 + 128) = *((_QWORD *)this + 103);
  *(_QWORD *)(v346 + 136) = v32;
  *(_QWORD *)(v346 + 144) = v29;
  karo::RequestPruner::addRequestManager(v10, (karo::AsyncRequestManager *)v346);
  v67 = operator new();
  v68 = (char *)operator new(0x28uLL);
  *(_QWORD *)handler = v68;
  *(_OWORD *)&handler[8] = xmmword_19FFB3DF0;
  strcpy(v68, "/loading/heightfallbackrequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v67, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v67 + 80) = 0;
  *(_QWORD *)(v67 + 72) = 0;
  *(_QWORD *)(v67 + 64) = v67 + 72;
  *(_DWORD *)(v67 + 88) = 0;
  *(_QWORD *)v67 = &off_1E42C6590;
  *(_QWORD *)(v67 + 96) = 0;
  operator delete(v68);
  v69 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 40))(v69, v67);
  v70 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 24))(v70, v67);
  *(_QWORD *)(v67 + 48) = v5;
  *(_QWORD *)(v67 + 96) = *((_QWORD *)this + 103);
  v339 = v67;
  karo::RequestPruner::addRequestManager(v10, (karo::AsyncRequestManager *)v67);
  v71 = operator new();
  v72 = (char *)operator new(0x28uLL);
  *(_QWORD *)handler = v72;
  *(_OWORD *)&handler[8] = xmmword_19FFB3DF0;
  strcpy(v72, "/loading/transitiontilerequestmanager");
  karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)v71, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *(_QWORD *)(v71 + 80) = 0;
  *(_QWORD *)(v71 + 72) = 0;
  *(_QWORD *)(v71 + 64) = v71 + 72;
  *(_DWORD *)(v71 + 88) = 0;
  *(_QWORD *)v71 = &off_1E42C6640;
  *(_QWORD *)(v71 + 96) = 0;
  operator delete(v72);
  v73 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 40))(v73, v71);
  v74 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 24))(v74, v71);
  *(_QWORD *)(v71 + 48) = v5;
  *(_QWORD *)(v71 + 96) = *((_QWORD *)this + 103);
  karo::RequestPruner::addRequestManager(v10, (karo::AsyncRequestManager *)v71);
  v75 = operator new();
  v76 = (char *)operator new(0x20uLL);
  strcpy(v76, "/render/globe/globeviewnode");
  v77 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v75 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v75 + 8), v76, 0x1BuLL);
  *(_QWORD *)(v75 + 32) = v77;
  *(_QWORD *)(v75 + 40) = 0;
  *(_QWORD *)v75 = off_1E42C4FF8;
  *(_QWORD *)(v75 + 48) = &unk_1E42C5030;
  *(_QWORD *)(v75 + 56) = 0;
  *(_DWORD *)(v75 + 64) = 0;
  *(_QWORD *)(v75 + 72) = 0;
  *(_QWORD *)(v75 + 80) = 0;
  *((_QWORD *)this + 66) = v75;
  operator delete(v76);
  v78 = *((_QWORD *)this + 66);
  v79 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 40))(v79, v78);
  v80 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 24))(v80, v78);
  v81 = *((_QWORD *)this + 66);
  *(_QWORD *)(v81 + 40) = v340;
  v82 = (_QWORD *)*((_QWORD *)this + 86);
  v83 = *(_QWORD *)(v81 + 80);
  *(_QWORD *)(v81 + 80) = v82;
  if (v83)
  {
    altitude::TileManager::unregisterTileListener(v83, v81 + 48);
    v82 = *(_QWORD **)(v81 + 80);
  }
  if (v82)
    altitude::TileManager::registerTileListener(v82, v81 + 48);
  v84 = operator new();
  v85 = (char *)operator new(0x20uLL);
  strcpy(v85, "/render/globe/mainviewnode");
  v86 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v84 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v84 + 8), v85, 0x1AuLL);
  *(_QWORD *)(v84 + 32) = v86;
  *(_QWORD *)v84 = off_1E42C5B28;
  *(_QWORD *)(v84 + 48) = 0x3ED0C6F7A0B5ED8DLL;
  *(_QWORD *)(v84 + 56) = 0;
  *(_DWORD *)(v84 + 64) = 0;
  *(_QWORD *)(v84 + 72) = 0;
  *((_QWORD *)this + 62) = v84;
  operator delete(v85);
  v87 = *((_QWORD *)this + 62);
  v88 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 40))(v88, v87);
  v89 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v87);
  v90 = *((_QWORD *)this + 62);
  *(_DWORD *)(v90 + 64) = 1;
  *(_QWORD *)(v90 + 40) = *((_QWORD *)this + 66);
  *(_QWORD *)(v90 + 72) = *((_QWORD *)this + 3);
  v92 = (char *)v342[6];
  v91 = v342[7];
  if ((unint64_t)v92 >= v91)
  {
    v94 = (char *)v342[5];
    v95 = (v92 - v94) >> 3;
    v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 61)
      abort();
    v97 = v91 - (_QWORD)v94;
    if (v97 >> 2 > v96)
      v96 = v97 >> 2;
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
      v98 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v98 = v96;
    if (v98)
    {
      if (v98 >> 61)
        goto LABEL_258;
      v99 = operator new(8 * v98);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v99[8 * v95];
    v101 = &v99[8 * v98];
    *v100 = v90;
    v93 = v100 + 1;
    if (v92 == v94)
    {
      v94 = v92;
    }
    else
    {
      v102 = v92 - v94 - 8;
      if (v102 < 0x58)
        goto LABEL_265;
      if ((unint64_t)(v94 - v99) < 0x20)
        goto LABEL_265;
      v103 = (v102 >> 3) + 1;
      v104 = &v99[8 * v95 - 16];
      v105 = v92 - 16;
      v106 = v103 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v107 = *(_OWORD *)v105;
        *(v104 - 1) = *((_OWORD *)v105 - 1);
        *v104 = v107;
        v104 -= 2;
        v105 -= 32;
        v106 -= 4;
      }
      while (v106);
      v100 -= v103 & 0x3FFFFFFFFFFFFFFCLL;
      v92 -= 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
      if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_265:
        do
        {
          v108 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *--v100 = v108;
        }
        while (v92 != v94);
        v94 = (char *)v342[5];
      }
    }
    v342[5] = v100;
    v342[6] = v93;
    v342[7] = v101;
    if (v94)
      operator delete(v94);
  }
  else
  {
    *(_QWORD *)v92 = v90;
    v93 = v92 + 8;
  }
  v342[6] = v93;
  v109 = (_QWORD *)v342[5];
  if (v93 == v109)
  {
    v112 = 0;
LABEL_69:
    v342[8] = v112;
  }
  else
  {
    v110 = 0;
    v111 = 1;
    while (v109[v110] != v342[8])
    {
      v110 = v111++;
      if (v93 - v109 <= v110)
      {
        v112 = *(v93 - 1);
        goto LABEL_69;
      }
    }
  }
  (*(void (**)(_QWORD *, _QWORD))(*v342 + 32))(v342, *((_QWORD *)this + 62));
  v113 = operator new();
  v114 = (char *)operator new(0x28uLL);
  strcpy(v114, "/render/globe/nocullcullinggraph");
  v115 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v113 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v113 + 8), v114, 0x20uLL);
  *(_QWORD *)v113 = off_1E42C37C0;
  *(_QWORD *)(v113 + 56) = 0;
  *(_QWORD *)(v113 + 48) = 0;
  *(_QWORD *)(v113 + 32) = v115;
  *(_QWORD *)(v113 + 40) = v113 + 48;
  operator delete(v114);
  v116 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 40))(v116, v113);
  v117 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 24))(v117, v113);
  v118 = operator new();
  v119 = (char *)operator new(0x28uLL);
  *(_QWORD *)handler = v119;
  *(_OWORD *)&handler[8] = xmmword_19FFB3C00;
  strcpy(v119, "/render/globe/freezedcullingview");
  altitude::View::View(v118, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  operator delete(v119);
  v120 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 40))(v120, v118);
  v121 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 24))(v121, v118);
  v122 = operator new();
  v123 = (char *)operator new(0x28uLL);
  strcpy(v123, "/render/globe/freezecullingviewnode");
  v124 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v122 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v122 + 8), v123, 0x23uLL);
  *(_QWORD *)v122 = off_1E42C3720;
  *(_QWORD *)(v122 + 40) = 0;
  *(_QWORD *)(v122 + 48) = 0;
  *(_QWORD *)(v122 + 32) = v124;
  *(_WORD *)(v122 + 56) = 0;
  operator delete(v123);
  v125 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 40))(v125, v122);
  v126 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v126 + 24))(v126, v122);
  *(_QWORD *)(v122 + 40) = *((_QWORD *)this + 62);
  *(_QWORD *)(v122 + 48) = v118;
  *((_QWORD *)this + 8) = v122;
  v127 = operator new();
  v128 = (char *)operator new(0x28uLL);
  strcpy(v128, "/loading/globe/load/completetileset");
  v129 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v127 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v127 + 8), v128, 0x23uLL);
  *(_QWORD *)(v127 + 32) = v129;
  *(_QWORD *)v127 = off_1E42C3D90;
  *(_OWORD *)(v127 + 40) = 0u;
  *(_OWORD *)(v127 + 56) = 0u;
  *(_OWORD *)(v127 + 72) = 0u;
  *(_OWORD *)(v127 + 88) = 0u;
  *(_QWORD *)(v127 + 104) = 0;
  *((_QWORD *)this + 59) = v127;
  operator delete(v128);
  v130 = *((_QWORD *)this + 59);
  v131 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 40))(v131, v130);
  v132 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 24))(v132, v130);
  v133 = operator new();
  v134 = (char *)operator new(0x20uLL);
  strcpy(v134, "/render/globe/tilecullinggraph");
  v135 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v133 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v133 + 8), v134, 0x1EuLL);
  *(_OWORD *)(v133 + 48) = 0u;
  *(_OWORD *)(v133 + 64) = 0u;
  *(_QWORD *)v133 = off_1E42C66D0;
  *(_QWORD *)(v133 + 32) = v135;
  *(_QWORD *)(v133 + 40) = &unk_1E42C6728;
  *(_QWORD *)(v133 + 128) = 0;
  *(_DWORD *)(v133 + 136) = 0;
  *(_OWORD *)(v133 + 80) = 0u;
  *(_OWORD *)(v133 + 96) = 0u;
  *(_OWORD *)(v133 + 108) = 0u;
  *((_QWORD *)this + 57) = v133;
  operator delete(v134);
  v136 = *((_QWORD *)this + 57);
  v137 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 40))(v137, v136);
  v138 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 24))(v138, v136);
  v139 = *((_QWORD *)this + 57);
  v140 = (_QWORD *)*((_QWORD *)this + 86);
  v141 = *(_QWORD *)(v139 + 48);
  *(_QWORD *)(v139 + 48) = v140;
  if (v141)
  {
    altitude::TileManager::unregisterTileListener(v141, v139 + 40);
    v140 = *(_QWORD **)(v139 + 48);
  }
  if (v140)
    altitude::TileManager::registerTileListener(v140, v139 + 40);
  v142 = *((_QWORD *)this + 57);
  *(_QWORD *)(v142 + 104) = *((_QWORD *)this + 59);
  *(_QWORD *)(v142 + 112) = *((_QWORD *)this + 103);
  *(_DWORD *)(v142 + 136) = 1045220557;
  v143 = operator new();
  v144 = (char *)operator new(0x20uLL);
  strcpy(v144, "/render/globe/tilecullingnode");
  v145 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v143 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v143 + 8), v144, 0x1DuLL);
  *(_QWORD *)(v143 + 32) = v145;
  *(_QWORD *)v143 = off_1E42C36B8;
  *(_OWORD *)(v143 + 40) = 0u;
  *(_OWORD *)(v143 + 56) = 0u;
  *(_QWORD *)(v143 + 72) = 0;
  *(_BYTE *)(v143 + 80) = 1;
  *((_QWORD *)this + 61) = v143;
  operator delete(v144);
  v146 = *((_QWORD *)this + 61);
  v147 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 40))(v147, v146);
  v148 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 24))(v148, v146);
  karo::graphics::CullingNode::addCullingGraph(*((_QWORD **)this + 61), *((_QWORD *)this + 57));
  karo::graphics::CullingNode::addCullingGraph(*((_QWORD **)this + 61), v113);
  v341 = v71;
  v149 = *((_QWORD *)this + 61);
  v344 = v122;
  *(_QWORD *)(v149 + 64) = v122;
  *(_QWORD *)(v149 + 72) = v345;
  v150 = operator new();
  v151 = (char *)operator new(0x20uLL);
  strcpy(v151, "/loading/globe/cleanuploader");
  v152 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v150 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v150 + 8), v151, 0x1CuLL);
  *(_QWORD *)(v150 + 32) = v152;
  *(_QWORD *)(v150 + 40) = &unk_1E42C5540;
  *(_OWORD *)(v150 + 48) = 0u;
  *(_OWORD *)(v150 + 64) = 0u;
  *(_BYTE *)(v150 + 80) = 1;
  *(_QWORD *)(v150 + 104) = 0;
  *(_QWORD *)(v150 + 96) = 0;
  *(_QWORD *)(v150 + 88) = v150 + 96;
  *(_QWORD *)v150 = &off_1E42C54B0;
  *(_OWORD *)(v150 + 112) = xmmword_19FFB47A0;
  *(_QWORD *)(v150 + 128) = 0x500000005;
  *(_DWORD *)(v150 + 136) = 5;
  *(_QWORD *)(v150 + 152) = 0;
  *(_QWORD *)(v150 + 176) = 0;
  *(_QWORD *)(v150 + 144) = v150 + 152;
  *(_QWORD *)(v150 + 160) = 0;
  *(_QWORD *)(v150 + 168) = v150 + 176;
  *(_QWORD *)(v150 + 200) = 0;
  *(_QWORD *)(v150 + 184) = 0;
  *(_QWORD *)(v150 + 192) = v150 + 200;
  *(_QWORD *)(v150 + 224) = 0;
  *(_QWORD *)(v150 + 208) = 0;
  *(_QWORD *)(v150 + 216) = v150 + 224;
  *(_QWORD *)(v150 + 248) = 0;
  *(_QWORD *)(v150 + 232) = 0;
  *(_QWORD *)(v150 + 240) = v150 + 248;
  *(_QWORD *)(v150 + 272) = 0;
  *(_QWORD *)(v150 + 280) = 0;
  *(_QWORD *)(v150 + 256) = 0;
  *(_QWORD *)(v150 + 264) = v150 + 272;
  *(_QWORD *)(v150 + 288) = v150 + 296;
  *(_QWORD *)(v150 + 296) = 0;
  *(_QWORD *)(v150 + 320) = 0;
  *(_QWORD *)(v150 + 328) = 0;
  *(_QWORD *)(v150 + 304) = 0;
  *(_QWORD *)(v150 + 312) = v150 + 320;
  *(_QWORD *)(v150 + 344) = 0;
  *(_QWORD *)(v150 + 352) = 0;
  *(_QWORD *)(v150 + 336) = v150 + 344;
  *(_DWORD *)(v150 + 388) = 0;
  *(_QWORD *)(v150 + 380) = 0;
  *(_BYTE *)(v150 + 408) = 1;
  *(_WORD *)(v150 + 420) = 0;
  *(_BYTE *)(v150 + 422) = 0;
  *(_QWORD *)(v150 + 424) = 0;
  *(_QWORD *)(v150 + 432) = 0;
  *(_QWORD *)(v150 + 440) = 0;
  *(_QWORD *)(v150 + 412) = 0x3F8000003F800000;
  *(_QWORD *)&v153 = 0x9600000096;
  *((_QWORD *)&v153 + 1) = 0x9600000096;
  *(_OWORD *)(v150 + 360) = v153;
  *(_DWORD *)(v150 + 376) = 2000;
  *(_OWORD *)(v150 + 392) = xmmword_19FFB47B0;
  operator delete(v151);
  v154 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v154 + 40))(v154, v150);
  v155 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 24))(v155, v150);
  v156 = (_QWORD *)*((_QWORD *)this + 86);
  v157 = *(_QWORD *)(v150 + 48);
  *(_QWORD *)(v150 + 48) = v156;
  if (v157)
  {
    altitude::TileManager::unregisterTileListener(v157, v150 + 40);
    v156 = *(_QWORD **)(v150 + 48);
  }
  if (v156)
    altitude::TileManager::registerTileListener(v156, v150 + 40);
  v158 = (_QWORD *)*((_QWORD *)this + 86);
  v160 = (uint64_t *)v158[16];
  v159 = v158[17];
  if ((unint64_t)v160 >= v159)
  {
    v162 = (char *)v158[15];
    v163 = ((char *)v160 - v162) >> 3;
    v164 = v163 + 1;
    if ((unint64_t)(v163 + 1) >> 61)
      abort();
    v165 = v159 - (_QWORD)v162;
    if (v165 >> 2 > v164)
      v164 = v165 >> 2;
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
      v166 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v166 = v164;
    if (v166)
    {
      if (v166 >> 61)
        goto LABEL_258;
      v167 = (char *)operator new(8 * v166);
    }
    else
    {
      v167 = 0;
    }
    v168 = (uint64_t *)&v167[8 * v163];
    *v168 = v150;
    v161 = v168 + 1;
    if (v160 != (uint64_t *)v162)
    {
      v169 = (char *)v160 - v162 - 8;
      if (v169 < 0x58)
        goto LABEL_266;
      if ((unint64_t)(v162 - v167) < 0x20)
        goto LABEL_266;
      v170 = (v169 >> 3) + 1;
      v171 = &v167[8 * v163 - 16];
      v172 = v160 - 2;
      v173 = v170 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v174 = *(_OWORD *)v172;
        *((_OWORD *)v171 - 1) = *((_OWORD *)v172 - 1);
        *(_OWORD *)v171 = v174;
        v171 -= 32;
        v172 -= 4;
        v173 -= 4;
      }
      while (v173);
      v168 -= v170 & 0x3FFFFFFFFFFFFFFCLL;
      v160 -= v170 & 0x3FFFFFFFFFFFFFFCLL;
      if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_266:
        do
        {
          v175 = *--v160;
          *--v168 = v175;
        }
        while (v160 != (uint64_t *)v162);
      }
      v160 = (uint64_t *)v158[15];
    }
    v158[15] = v168;
    v158[16] = v161;
    v158[17] = &v167[8 * v166];
    if (v160)
      operator delete(v160);
  }
  else
  {
    *v160 = v150;
    v161 = v160 + 1;
  }
  v158[16] = v161;
  *((_QWORD *)this + 56) = v150;
  v176 = operator new();
  v177 = (char *)operator new(0x28uLL);
  strcpy(v177, "/loading/globe/preload/adjustedviewnode");
  v178 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v176 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v176 + 8), v177, 0x27uLL);
  *(_QWORD *)(v176 + 32) = v178;
  *(_QWORD *)v176 = off_1E42C5B28;
  *(_QWORD *)(v176 + 48) = 0x3ED0C6F7A0B5ED8DLL;
  *(_QWORD *)(v176 + 56) = 0;
  *(_DWORD *)(v176 + 64) = 0;
  *(_QWORD *)(v176 + 72) = 0;
  operator delete(v177);
  v179 = operator new();
  v180 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v180;
  *(_OWORD *)&handler[8] = xmmword_19FFB3DA0;
  strcpy(v180, "/loading/globe/preload/view");
  altitude::View::View(v179, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  *((_QWORD *)this + 64) = v179;
  operator delete(v180);
  v181 = *((_QWORD *)this + 64);
  v182 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 40))(v182, v181);
  v183 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v183 + 24))(v183, v181);
  v184 = *((_QWORD *)this + 64);
  *(_QWORD *)(v184 + 1296) = 0xF424000000000;
  *(_BYTE *)(v184 + 1292) = 1;
  v185 = operator new();
  v186 = (char *)operator new(0x20uLL);
  strcpy(v186, "/loading/globe/preload/viewnode");
  v187 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v185 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v185 + 8), v186, 0x1FuLL);
  *(_QWORD *)(v185 + 32) = v187;
  *(_QWORD *)(v185 + 40) = 0;
  *(_QWORD *)v185 = off_1E42C3FC0;
  *(int64x2_t *)(v185 + 48) = vdupq_n_s64(0xC00921FB54442D18);
  *(_OWORD *)(v185 + 64) = 0u;
  *(_OWORD *)(v185 + 80) = 0u;
  *(_OWORD *)(v185 + 96) = 0u;
  *(_QWORD *)(v185 + 72) = 0x3FF0000000000000;
  *((_QWORD *)this + 63) = v185;
  operator delete(v186);
  v188 = *((_QWORD *)this + 63);
  v189 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v189 + 40))(v189, v188);
  v190 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v190 + 24))(v190, v188);
  *(_QWORD *)(*((_QWORD *)this + 63) + 40) = *((_QWORD *)this + 64);
  v191 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v191 + 40))(v191, v176);
  v192 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v192 + 24))(v192, v176);
  *(_DWORD *)(v176 + 64) = 1;
  *(_QWORD *)(v176 + 40) = *((_QWORD *)this + 63);
  *(_DWORD *)(*((_QWORD *)this + 98) + 1300) = 1000000;
  v193 = operator new();
  v194 = (char *)operator new(0x20uLL);
  strcpy(v194, "/loading/globe/load/tileloader");
  v195 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v193 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v193 + 8), v194, 0x1EuLL);
  *(_OWORD *)(v193 + 48) = 0u;
  *(_OWORD *)(v193 + 64) = 0u;
  *(_BYTE *)(v193 + 80) = 1;
  *(_QWORD *)(v193 + 104) = 0;
  *(_QWORD *)(v193 + 96) = 0;
  *(_QWORD *)(v193 + 88) = v193 + 96;
  *(_QWORD *)v193 = &off_1E42C6380;
  *(_QWORD *)(v193 + 32) = v195;
  *(_QWORD *)(v193 + 40) = &unk_1E42C6408;
  *(_OWORD *)(v193 + 112) = 0u;
  *(_OWORD *)(v193 + 128) = 0u;
  *(_OWORD *)(v193 + 144) = 0u;
  *(_OWORD *)(v193 + 184) = 0u;
  *(_OWORD *)(v193 + 200) = 0u;
  *(_OWORD *)(v193 + 216) = 0u;
  *(_OWORD *)(v193 + 232) = 0u;
  *(_OWORD *)(v193 + 248) = 0u;
  *(_QWORD *)(v193 + 280) = 0;
  *(_OWORD *)(v193 + 168) = 0u;
  *(_OWORD *)(v193 + 264) = 0u;
  *(_DWORD *)(v193 + 288) = 1065353216;
  *(_OWORD *)(v193 + 296) = 0u;
  *(_OWORD *)(v193 + 312) = 0u;
  *(_DWORD *)(v193 + 328) = 1065353216;
  *(_OWORD *)(v193 + 336) = 0u;
  *(_OWORD *)(v193 + 352) = 0u;
  *(_DWORD *)(v193 + 368) = 1065353216;
  *(_OWORD *)(v193 + 376) = 0u;
  *(_OWORD *)(v193 + 392) = 0u;
  *(_DWORD *)(v193 + 408) = 1065353216;
  *(_OWORD *)(v193 + 416) = 0u;
  *(_OWORD *)(v193 + 432) = 0u;
  *(_DWORD *)(v193 + 448) = 1065353216;
  *(_OWORD *)(v193 + 456) = 0u;
  *(_OWORD *)(v193 + 472) = 0u;
  *(_DWORD *)(v193 + 488) = 1065353216;
  *(_OWORD *)(v193 + 496) = 0u;
  *(_OWORD *)(v193 + 512) = 0u;
  *(_DWORD *)(v193 + 528) = 1065353216;
  *(_QWORD *)(v193 + 552) = 0;
  *(_QWORD *)(v193 + 544) = 0;
  *(_QWORD *)(v193 + 536) = v193 + 544;
  *(_DWORD *)(v193 + 608) = 0;
  *(_OWORD *)(v193 + 576) = 0u;
  *(_OWORD *)(v193 + 592) = 0u;
  *(_OWORD *)(v193 + 560) = 0u;
  *(_WORD *)(v193 + 612) = 1;
  *(_DWORD *)(v193 + 616) = 0x7FFFFFFF;
  *(_BYTE *)(v193 + 620) = 0;
  *(_DWORD *)(v193 + 624) = 1000000;
  *(_OWORD *)(v193 + 688) = 0u;
  *(_OWORD *)(v193 + 660) = 0u;
  *(_OWORD *)(v193 + 676) = 0u;
  *(_OWORD *)(v193 + 628) = 0u;
  *(_OWORD *)(v193 + 644) = 0u;
  *(_QWORD *)(v193 + 712) = &off_1E42B4748;
  *(_QWORD *)(v193 + 720) = 0x3FD0000000000000;
  *(_OWORD *)(v193 + 728) = 0u;
  *(_OWORD *)(v193 + 744) = 0u;
  *(_DWORD *)(v193 + 760) = 1065353216;
  *(_BYTE *)(v193 + 768) = 0;
  *(_QWORD *)(v193 + 784) = 0;
  v196 = (std::chrono::steady_clock::time_point *)operator new();
  v196->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v197 = *(_QWORD *)(v193 + 784);
  *(_QWORD *)(v193 + 784) = v196;
  if (v197)
    MEMORY[0x1A1AF4E00](v197, 0x1000C4000313F17);
  *(_QWORD *)(v193 + 792) = &off_1E42B4748;
  *(_QWORD *)(v193 + 800) = 0x3FD0000000000000;
  *(_OWORD *)(v193 + 808) = 0u;
  *(_OWORD *)(v193 + 824) = 0u;
  *(_DWORD *)(v193 + 840) = 1065353216;
  *(_BYTE *)(v193 + 848) = 0;
  *(_QWORD *)(v193 + 864) = 0;
  v198 = (std::chrono::steady_clock::time_point *)operator new();
  v198->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v199 = *(_QWORD *)(v193 + 864);
  *(_QWORD *)(v193 + 864) = v198;
  if (v199)
    MEMORY[0x1A1AF4E00](v199, 0x1000C4000313F17);
  *(_QWORD *)(v193 + 872) = &off_1E42B4748;
  *(_QWORD *)(v193 + 880) = 0x3FB999999999999ALL;
  *(_OWORD *)(v193 + 888) = 0u;
  *(_OWORD *)(v193 + 904) = 0u;
  *(_DWORD *)(v193 + 920) = 1065353216;
  *(_BYTE *)(v193 + 928) = 0;
  *(_QWORD *)(v193 + 944) = 0;
  v200 = (std::chrono::steady_clock::time_point *)operator new();
  v200->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v201 = *(_QWORD *)(v193 + 944);
  *(_QWORD *)(v193 + 944) = v200;
  if (v201)
    MEMORY[0x1A1AF4E00](v201, 0x1000C4000313F17);
  *(_QWORD *)(v193 + 976) = 0;
  *(_QWORD *)(v193 + 1016) = 0;
  *(_QWORD *)(v193 + 1008) = 0;
  v202 = operator new();
  v203 = **(NSObject ***)(*(_QWORD *)(v195 + 8) + 8);
  v350.__sig = (uint64_t)&off_1E42D8900;
  *(_QWORD *)v350.__opaque = v193;
  v351 = &v350;
  *(_QWORD *)v202 = &off_1E42B46F8;
  *(_QWORD *)(v202 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v202 + 16) = 850045863;
  *(_OWORD *)(v202 + 24) = 0u;
  *(_OWORD *)(v202 + 40) = 0u;
  *(_OWORD *)(v202 + 56) = 0u;
  *(_OWORD *)(v202 + 72) = 0u;
  *(_OWORD *)(v202 + 81) = 0u;
  v204 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v203);
  *(_QWORD *)(v202 + 80) = v204;
  if (v204)
  {
    v205 = v204;
    *(_QWORD *)handler = MEMORY[0x1E0C809B0];
    *(_QWORD *)&handler[8] = 1174405120;
    *(_QWORD *)&handler[16] = ___ZN3gdc5TimerC2EP16dispatch_queue_sNSt3__18functionIFvvEEE_block_invoke;
    v353 = &__block_descriptor_tmp_42282;
    v354 = v202;
    v206 = v355;
    if (v351)
    {
      if (v351 == &v350)
      {
        v356 = v355;
        (*(void (**)(pthread_mutexattr_t *, _BYTE *))(v350.__sig + 24))(&v350, v355);
      }
      else
      {
        v356 = (_BYTE *)(*(uint64_t (**)(void))(v351->__sig + 16))();
      }
    }
    else
    {
      v356 = 0;
    }
    dispatch_source_set_event_handler(v205, handler);
    dispatch_resume(*(dispatch_object_t *)(v202 + 80));
    if (v356 == v355)
    {
      v207 = 4;
    }
    else
    {
      if (!v356)
        goto LABEL_117;
      v207 = 5;
      v206 = v356;
    }
    (*(void (**)(_QWORD *))(*v206 + 8 * v207))(v206);
  }
LABEL_117:
  v208 = *(_QWORD *)(v193 + 1016);
  *(_QWORD *)(v193 + 1016) = v202;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = v351;
  if (v351 == &v350)
  {
    v210 = 4;
    v209 = &v350;
  }
  else
  {
    if (!v351)
      goto LABEL_124;
    v210 = 5;
  }
  (*(void (**)(void))(v209->__sig + 8 * v210))();
LABEL_124:
  *((_QWORD *)this + 58) = v193;
  operator delete(v194);
  v211 = *((_QWORD *)this + 58);
  v212 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v212 + 40))(v212, v211);
  v213 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v213 + 24))(v213, v211);
  v214 = *((_QWORD *)this + 58);
  v215 = (_QWORD *)*((_QWORD *)this + 86);
  v216 = *(_QWORD *)(v214 + 48);
  *(_QWORD *)(v214 + 48) = v215;
  if (v216)
  {
    altitude::TileManager::unregisterTileListener(v216, v214 + 40);
    v215 = *(_QWORD **)(v214 + 48);
  }
  if (v215)
    altitude::TileManager::registerTileListener(v215, v214 + 40);
  v217 = (_QWORD *)*((_QWORD *)this + 58);
  v217[88] = *((_QWORD *)this + 103);
  v217[14] = v345;
  v219 = (uint64_t *)v217[16];
  v218 = v217[17];
  if ((unint64_t)v219 >= v218)
  {
    v221 = (char *)v217[15];
    v222 = ((char *)v219 - v221) >> 3;
    v223 = v222 + 1;
    if ((unint64_t)(v222 + 1) >> 61)
      goto LABEL_259;
    v224 = v218 - (_QWORD)v221;
    if (v224 >> 2 > v223)
      v223 = v224 >> 2;
    if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8)
      v225 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v225 = v223;
    if (v225)
    {
      if (v225 >> 61)
        goto LABEL_258;
      v226 = (char *)operator new(8 * v225);
    }
    else
    {
      v226 = 0;
    }
    v227 = (uint64_t *)&v226[8 * v222];
    *v227 = v344;
    v220 = v227 + 1;
    if (v219 != (uint64_t *)v221)
    {
      v228 = (char *)v219 - v221 - 8;
      if (v228 < 0x58)
        goto LABEL_267;
      if ((unint64_t)(v221 - v226) < 0x20)
        goto LABEL_267;
      v229 = (v228 >> 3) + 1;
      v230 = &v226[8 * v222 - 16];
      v231 = v219 - 2;
      v232 = v229 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v233 = *(_OWORD *)v231;
        *((_OWORD *)v230 - 1) = *((_OWORD *)v231 - 1);
        *(_OWORD *)v230 = v233;
        v230 -= 32;
        v231 -= 4;
        v232 -= 4;
      }
      while (v232);
      v227 -= v229 & 0x3FFFFFFFFFFFFFFCLL;
      v219 -= v229 & 0x3FFFFFFFFFFFFFFCLL;
      if (v229 != (v229 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_267:
        do
        {
          v234 = *--v219;
          *--v227 = v234;
        }
        while (v219 != (uint64_t *)v221);
      }
      v219 = (uint64_t *)v217[15];
    }
    v217[15] = v227;
    v217[16] = v220;
    v217[17] = &v226[8 * v225];
    if (v219)
      operator delete(v219);
  }
  else
  {
    *v219 = v344;
    v220 = v219 + 1;
  }
  v217[16] = v220;
  v235 = (_QWORD *)*((_QWORD *)this + 58);
  v237 = (uint64_t *)v235[16];
  v236 = v235[17];
  if ((unint64_t)v237 >= v236)
  {
    v239 = (char *)v235[15];
    v240 = ((char *)v237 - v239) >> 3;
    v241 = v240 + 1;
    if ((unint64_t)(v240 + 1) >> 61)
      goto LABEL_259;
    v242 = v236 - (_QWORD)v239;
    if (v242 >> 2 > v241)
      v241 = v242 >> 2;
    if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8)
      v243 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v243 = v241;
    if (v243)
    {
      if (v243 >> 61)
        goto LABEL_258;
      v244 = (char *)operator new(8 * v243);
    }
    else
    {
      v244 = 0;
    }
    v245 = (uint64_t *)&v244[8 * v240];
    *v245 = v176;
    v238 = v245 + 1;
    if (v237 != (uint64_t *)v239)
    {
      v246 = (char *)v237 - v239 - 8;
      if (v246 < 0x58)
        goto LABEL_268;
      if ((unint64_t)(v239 - v244) < 0x20)
        goto LABEL_268;
      v247 = (v246 >> 3) + 1;
      v248 = &v244[8 * v240 - 16];
      v249 = v237 - 2;
      v250 = v247 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v251 = *(_OWORD *)v249;
        *((_OWORD *)v248 - 1) = *((_OWORD *)v249 - 1);
        *(_OWORD *)v248 = v251;
        v248 -= 32;
        v249 -= 4;
        v250 -= 4;
      }
      while (v250);
      v245 -= v247 & 0x3FFFFFFFFFFFFFFCLL;
      v237 -= v247 & 0x3FFFFFFFFFFFFFFCLL;
      if (v247 != (v247 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_268:
        do
        {
          v252 = *--v237;
          *--v245 = v252;
        }
        while (v237 != (uint64_t *)v239);
      }
      v237 = (uint64_t *)v235[15];
    }
    v235[15] = v245;
    v235[16] = v238;
    v235[17] = &v244[8 * v243];
    if (v237)
      operator delete(v237);
  }
  else
  {
    *v237 = v176;
    v238 = v237 + 1;
  }
  v235[16] = v238;
  v253 = (_QWORD *)*((_QWORD *)this + 58);
  v253[22] = v339;
  v253[18] = v50;
  v253[19] = v346;
  v253[21] = *((_QWORD *)this + 45);
  v253[31] = *((_QWORD *)this + 59);
  if (v349)
  {
    v254 = (unint64_t *)&v349->__shared_owners_;
    do
      v255 = __ldxr(v254);
    while (__stxr(v255 + 1, v254));
  }
  v256 = (std::__shared_weak_count *)v253[30];
  v253[29] = v348;
  v253[30] = v349;
  if (v256)
  {
    v257 = (unint64_t *)&v256->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = *((_QWORD *)this + 58);
  *(_QWORD *)(v259 + 224) = *((_QWORD *)this + 3);
  *(_QWORD *)(v259 + 160) = *((_QWORD *)this + 6);
  v260 = (_QWORD *)*((_QWORD *)this + 86);
  v262 = (char *)v260[16];
  v261 = v260[17];
  if ((unint64_t)v262 >= v261)
  {
    v264 = (char *)v260[15];
    v265 = (v262 - v264) >> 3;
    v266 = v265 + 1;
    if (!((unint64_t)(v265 + 1) >> 61))
    {
      v267 = v261 - (_QWORD)v264;
      if (v267 >> 2 > v266)
        v266 = v267 >> 2;
      if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8)
        v268 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v268 = v266;
      if (v268)
      {
        if (v268 >> 61)
          goto LABEL_258;
        v269 = (char *)operator new(8 * v268);
      }
      else
      {
        v269 = 0;
      }
      v270 = &v269[8 * v265];
      *(_QWORD *)v270 = v259;
      v263 = v270 + 8;
      if (v262 != v264)
      {
        v271 = v262 - v264 - 8;
        if (v271 < 0x58)
          goto LABEL_269;
        if ((unint64_t)(v264 - v269) < 0x20)
          goto LABEL_269;
        v272 = (v271 >> 3) + 1;
        v273 = &v269[8 * v265 - 16];
        v274 = (__int128 *)(v262 - 16);
        v275 = v272 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v276 = *v274;
          *((_OWORD *)v273 - 1) = *(v274 - 1);
          *(_OWORD *)v273 = v276;
          v273 -= 32;
          v274 -= 2;
          v275 -= 4;
        }
        while (v275);
        v270 -= 8 * (v272 & 0x3FFFFFFFFFFFFFFCLL);
        v262 -= 8 * (v272 & 0x3FFFFFFFFFFFFFFCLL);
        if (v272 != (v272 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_269:
          do
          {
            v277 = *((_QWORD *)v262 - 1);
            v262 -= 8;
            *((_QWORD *)v270 - 1) = v277;
            v270 -= 8;
          }
          while (v262 != v264);
        }
        v262 = (char *)v260[15];
      }
      v260[15] = v270;
      v260[16] = v263;
      v260[17] = &v269[8 * v268];
      if (v262)
        operator delete(v262);
      goto LABEL_202;
    }
LABEL_259:
    abort();
  }
  *(_QWORD *)v262 = v259;
  v263 = v262 + 8;
LABEL_202:
  v260[16] = v263;
  v278 = operator new();
  v279 = (char *)operator new(0x20uLL);
  *(_QWORD *)handler = v279;
  *(_OWORD *)&handler[8] = xmmword_19FFB3880;
  strcpy(v279, "/loading/globe/load/omniview");
  altitude::View::View(v278, (__int128 *)handler, *(_QWORD *)(*((_QWORD *)this + 107) + 136));
  operator delete(v279);
  v280 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v280 + 40))(v280, v278);
  v281 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v281 + 24))(v281, v278);
  *(_QWORD *)(v278 + 1296) = 0;
  *(_DWORD *)(v278 + 1316) = 1106247680;
  v282 = operator new();
  v283 = (char *)operator new(0x28uLL);
  strcpy(v283, "/loading/globe/load/omniviewnode");
  v284 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v282 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v282 + 8), v283, 0x20uLL);
  *(_QWORD *)v282 = off_1E42C36F0;
  *(_QWORD *)(v282 + 32) = v284;
  *(_QWORD *)(v282 + 40) = 0;
  *((_QWORD *)this + 65) = v282;
  operator delete(v283);
  v285 = *((_QWORD *)this + 65);
  v286 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v286 + 40))(v286, v285);
  v287 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v287 + 24))(v287, v285);
  v288 = *((_QWORD *)this + 65);
  *(_QWORD *)(v288 + 40) = v278;
  v289 = (_QWORD *)*((_QWORD *)this + 58);
  v291 = (char *)v289[16];
  v290 = v289[17];
  if ((unint64_t)v291 < v290)
  {
    *(_QWORD *)v291 = v288;
    v292 = v291 + 8;
    v293 = v342;
    goto LABEL_226;
  }
  v294 = (char *)v289[15];
  v295 = (v291 - v294) >> 3;
  v296 = v295 + 1;
  if ((unint64_t)(v295 + 1) >> 61)
    abort();
  v297 = v290 - (_QWORD)v294;
  if (v297 >> 2 > v296)
    v296 = v297 >> 2;
  if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF8)
    v298 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v298 = v296;
  if (v298)
  {
    if (!(v298 >> 61))
    {
      v299 = (char *)operator new(8 * v298);
      goto LABEL_214;
    }
LABEL_258:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v299 = 0;
LABEL_214:
  v300 = &v299[8 * v295];
  v301 = &v299[8 * v298];
  *(_QWORD *)v300 = v288;
  v292 = v300 + 8;
  if (v291 == v294)
  {
    v293 = v342;
    goto LABEL_224;
  }
  v302 = v291 - v294 - 8;
  if (v302 >= 0x58)
  {
    v293 = v342;
    if ((unint64_t)(v294 - v299) >= 0x20)
    {
      v303 = (v302 >> 3) + 1;
      v304 = &v299[8 * v295 - 16];
      v305 = (__int128 *)(v291 - 16);
      v306 = v303 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v307 = *v305;
        *((_OWORD *)v304 - 1) = *(v305 - 1);
        *(_OWORD *)v304 = v307;
        v304 -= 32;
        v305 -= 2;
        v306 -= 4;
      }
      while (v306);
      v300 -= 8 * (v303 & 0x3FFFFFFFFFFFFFFCLL);
      v291 -= 8 * (v303 & 0x3FFFFFFFFFFFFFFCLL);
      if (v303 == (v303 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_223;
    }
  }
  else
  {
    v293 = v342;
  }
  do
  {
    v308 = *((_QWORD *)v291 - 1);
    v291 -= 8;
    *((_QWORD *)v300 - 1) = v308;
    v300 -= 8;
  }
  while (v291 != v294);
LABEL_223:
  v291 = (char *)v289[15];
LABEL_224:
  v289[15] = v300;
  v289[16] = v292;
  v289[17] = v301;
  if (v291)
    operator delete(v291);
LABEL_226:
  v289[16] = v292;
  v309 = (_QWORD *)*((_QWORD *)this + 87);
  v309[6] = v293;
  v309[7] = v345;
  v309[8] = v50;
  v310 = (_QWORD *)*((_QWORD *)this + 86);
  v311 = v309[9];
  v309[9] = v310;
  if (v311)
  {
    altitude::TileManager::unregisterTileListener(v311, (uint64_t)(v309 + 5));
    v310 = (_QWORD *)v309[9];
  }
  if (v310)
    altitude::TileManager::registerTileListener(v310, (uint64_t)(v309 + 5));
  *(_QWORD *)(*((_QWORD *)this + 88) + 72) = v346;
  v312 = operator new();
  v313 = (char *)operator new(0x28uLL);
  strcpy(v313, "/render/globe/globetilerendermanager");
  v314 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
  *(_QWORD *)v312 = off_1E42C34D0;
  std::string::__init_copy_ctor_external((std::string *)(v312 + 8), v313, 0x24uLL);
  *(_QWORD *)v312 = &off_1E42C5F30;
  *(_QWORD *)(v312 + 32) = v314;
  *(_QWORD *)(v312 + 40) = &unk_1E42C5F88;
  *(_OWORD *)(v312 + 48) = 0u;
  *(_OWORD *)(v312 + 64) = 0u;
  v315 = operator new();
  v316 = operator new(0x30uLL);
  *(_QWORD *)handler = v316;
  *(_OWORD *)&handler[8] = xmmword_19FFB3BF0;
  v317 = *((_OWORD *)v313 + 1);
  *(_OWORD *)v316 = *(_OWORD *)v313;
  *((_OWORD *)v316 + 1) = v317;
  *((_DWORD *)v316 + 8) = *((_DWORD *)v313 + 8);
  strcpy((char *)v316 + 36, "/View");
  altitude::View::View(v315, (__int128 *)handler, v314);
  operator delete(v316);
  *(_QWORD *)(v312 + 80) = v315;
  *(_QWORD *)(v312 + 272) = 0;
  *(_QWORD *)(v312 + 280) = 0;
  *(_OWORD *)(v312 + 88) = 0u;
  *(_OWORD *)(v312 + 104) = 0u;
  *(_OWORD *)(v312 + 120) = 0u;
  *(_OWORD *)(v312 + 136) = 0u;
  *(_OWORD *)(v312 + 152) = 0u;
  *(_OWORD *)(v312 + 168) = 0u;
  *(_OWORD *)(v312 + 184) = 0u;
  *(_OWORD *)(v312 + 200) = 0u;
  *(_OWORD *)(v312 + 216) = 0u;
  *(_OWORD *)(v312 + 232) = 0u;
  *(_OWORD *)(v312 + 248) = 0u;
  *(_QWORD *)(v312 + 264) = v312 + 272;
  *(_QWORD *)(v312 + 288) = 0x230000000020;
  *(_QWORD *)(v312 + 312) = 0;
  *(_QWORD *)(v312 + 320) = 0;
  *(_QWORD *)(v312 + 296) = 0;
  *(_QWORD *)(v312 + 304) = v312 + 312;
  *(_QWORD *)(v312 + 328) = 0xA0000000020;
  *(_QWORD *)(v312 + 352) = 0;
  *(_QWORD *)(v312 + 360) = 0;
  *(_QWORD *)(v312 + 336) = 0;
  *(_QWORD *)(v312 + 344) = v312 + 352;
  *(_QWORD *)(v312 + 368) = 0x110000000020;
  *(_QWORD *)(v312 + 392) = 0;
  *(_QWORD *)(v312 + 400) = 0;
  *(_QWORD *)(v312 + 376) = 0;
  *(_QWORD *)(v312 + 384) = v312 + 392;
  *(_QWORD *)(v312 + 408) = 0xE0000000020;
  *(_QWORD *)(v312 + 432) = 0;
  *(_QWORD *)(v312 + 440) = 0;
  *(_QWORD *)(v312 + 416) = 0;
  *(_QWORD *)(v312 + 424) = v312 + 432;
  *(_QWORD *)(v312 + 448) = 0xA0000000020;
  *(_QWORD *)(v312 + 472) = 0;
  *(_QWORD *)(v312 + 480) = 0;
  *(_QWORD *)(v312 + 456) = 0;
  *(_QWORD *)(v312 + 464) = v312 + 472;
  *(_QWORD *)(v312 + 488) = 0x80000000020;
  *(_QWORD *)(v312 + 496) = 0;
  *(_DWORD *)(v312 + 504) = 0;
  *(_QWORD *)(v312 + 512) = 0xBFF0000000000000;
  *(_WORD *)(v312 + 520) = 1;
  *(_BYTE *)(v312 + 522) = 0;
  *((_QWORD *)this + 60) = v312;
  operator delete(v313);
  v318 = *((_QWORD *)this + 60);
  v319 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v319 + 40))(v319, v318);
  v320 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v320 + 24))(v320, v318);
  v321 = *((_QWORD *)this + 60);
  v322 = (_QWORD *)*((_QWORD *)this + 86);
  v323 = *(_QWORD *)(v321 + 112);
  *(_QWORD *)(v321 + 112) = v322;
  if (v323)
  {
    altitude::TileManager::unregisterTileListener(v323, v321 + 40);
    v322 = *(_QWORD **)(v321 + 112);
  }
  if (v322)
    altitude::TileManager::registerTileListener(v322, v321 + 40);
  v324 = (_QWORD *)*((_QWORD *)this + 60);
  v324[8] = v345;
  v324[9] = v344;
  v324[6] = *((_QWORD *)this + 59);
  if (v349)
  {
    v325 = (unint64_t *)&v349->__shared_owners_;
    do
      v326 = __ldxr(v325);
    while (__stxr(v326 + 1, v325));
  }
  v327 = (std::__shared_weak_count *)v324[12];
  v324[11] = v348;
  v324[12] = v349;
  if (v327)
  {
    v328 = (unint64_t *)&v327->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  v330 = *((_QWORD *)this + 60);
  *(_QWORD *)(v330 + 56) = *((_QWORD *)this + 57);
  *(_QWORD *)(v330 + 104) = v341;
  v331 = *((_QWORD *)this + 78);
  if (!v331)
  {
    v331 = operator new();
    v332 = *(_QWORD *)(*((_QWORD *)this + 107) + 136);
    strcpy((char *)(v331 + 8), "/flyovertour");
    *(_BYTE *)(v331 + 21) = 0;
    *(_WORD *)(v331 + 22) = 0;
    *(_BYTE *)(v331 + 31) = 12;
    *(_QWORD *)v331 = &off_1E42C3AE0;
    *(_QWORD *)(v331 + 48) = 0;
    *(_QWORD *)(v331 + 32) = v332;
    *(_QWORD *)(v331 + 40) = &unk_1E42C3B20;
    *(_QWORD *)(v331 + 56) = 0;
    *(_QWORD *)(v331 + 64) = 0;
    *(_DWORD *)(v331 + 72) = -1;
    *(_QWORD *)(v331 + 80) = 0;
    *(_QWORD *)(v331 + 88) = 0;
    *(_DWORD *)(v331 + 96) = -1;
    *(_QWORD *)(v331 + 104) = 0x3FF0000000000000;
    *(_QWORD *)(v331 + 112) = 0x23F800000;
    *(_QWORD *)(v331 + 144) = 0;
    *(_QWORD *)(v331 + 176) = 0;
    *(_QWORD *)(v331 + 184) = this;
    *(_OWORD *)(v331 + 237) = 0u;
    *(_OWORD *)(v331 + 208) = 0u;
    *(_OWORD *)(v331 + 224) = 0u;
    *(int64x2_t *)(v331 + 192) = vdupq_n_s64(0xC00921FB54442D18);
    v333 = (_QWORD *)operator new();
    v333[2] = 0;
    v333[1] = 0;
    *v333 = v333 + 1;
    v334 = *(_QWORD *)(v331 + 48);
    *(_QWORD *)(v331 + 48) = v333;
    if (v334)
    {
      std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v334 + 8));
      MEMORY[0x1A1AF4E00](v334, 0x1020C4062D53EE8);
    }
    *((_QWORD *)this + 78) = v331;
  }
  v335 = *((_QWORD *)this + 2);
  v336 = *(_QWORD *)(v331 + 56);
  if (v336 != v335)
  {
    if (v336)
    {
      handler[23] = 8;
      strcpy(handler, "triggers");
      altitude::ManifestManager::unregisterListener(v336, (const void **)handler, v331 + 40);
    }
    *(_QWORD *)(v331 + 56) = v335;
    if (v335)
    {
      handler[23] = 8;
      strcpy(handler, "triggers");
      altitude::ManifestManager::registerListener(v335, (const void **)handler, v331 + 40);
      if ((handler[23] & 0x80000000) != 0)
        operator delete(*(void **)handler);
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 78) + 64) = v347;
  if (v349)
  {
    v337 = (unint64_t *)&v349->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
}

void sub_19F776E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  va_list va;

  va_start(va, a15);
  v19 = *(_QWORD **)(v15 + 176);
  if (v19 == (_QWORD *)(v15 + 152))
  {
    v20 = 4;
    v19 = (_QWORD *)(v15 + 152);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = *(_QWORD **)(v15 + 144);
  if (v21 == v16)
  {
    v22 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
    v16 = *(_QWORD **)(v15 + 144);
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v22))(v16);
LABEL_11:
  v23 = *v17;
  *v17 = 0;
  if (v23)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v23 + 8));
    MEMORY[0x1A1AF4E00](v23, 0x1020C4062D53EE8);
  }
  *(_QWORD *)v15 = off_1E42C34D0;
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  MEMORY[0x1A1AF4E00](v15, 0x10B3C4019913E46);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::AnchorManager *,std::shared_ptr<altitude::AnchorManager>::__shared_ptr_default_delete<altitude::AnchorManager,altitude::AnchorManager>,std::allocator<altitude::AnchorManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::AnchorManager *,std::shared_ptr<altitude::AnchorManager>::__shared_ptr_default_delete<altitude::AnchorManager,altitude::AnchorManager>,std::allocator<altitude::AnchorManager>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v2)
    {
      karo::Pool<altitude::Anchor>::disposeElements(v2);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v2 + 8));
      MEMORY[0x1A1AF4E00](v2, 0x1020C40D4280EFALL);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 24));
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void karo::graphics::CullingNode::addCullingGraph(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v5 = (char *)a1[6];
  v4 = a1[7];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)a1[5];
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_29;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)a1[5];
      }
    }
    a1[5] = v14;
    a1[6] = v7;
    a1[7] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  a1[6] = v7;
}

void altitude::MapAvailabilityCache::~MapAvailabilityCache(altitude::MapAvailabilityCache *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E42C5928;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 8));
  v2 = *((_QWORD *)this + 8);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 8) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 6));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E42C5928;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 8));
  v2 = *((_QWORD *)this + 8);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 8) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 6));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ___ZN8altitude9GlobeView29updateNightLightRedrawRequestEv_block_invoke(uint64_t result)
{
  if (!**(_BYTE **)(result + 40))
    return altitude::GlobeView::updateNightLightRedrawRequest(*(altitude::GlobeView **)(result + 32));
  return result;
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__110shared_ptrIbEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c27_ZTSNSt3__110shared_ptrIbEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(char *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 7);
    if (v2)
    {
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::~SharedItemManager(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C2CE8;
  std::__tree<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>>>::destroy(*(_QWORD **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::~SharedItemManager(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C2CE8;
  std::__tree<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>>>::destroy(*(_QWORD **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  JUMPOUT(0x1A1AF4E00);
}

void std::__tree<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void *v3;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::weak_ptr<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[13];
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)a1[8];
    if (v3)
    {
      a1[9] = v3;
      operator delete(v3);
    }
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8A20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8A20;
  a2[1] = v2;
  return result;
}

void std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 464);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 != *(_QWORD *)(v2 + 48))
  {
    v4 = *(_QWORD *)(v2 + 48);
    do
    {
      if (*(_QWORD *)v3)
      {
        v5 = *(_QWORD *)(*(_QWORD *)v3 + 328);
        if (v5)
          *(_BYTE *)(v5 + 282) = 0;
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  v6 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 88);
  if (v6)
  {
    v7 = 7;
    md::MapEngine::setNeedsTick(v6, &v7);
  }
}

void std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2>,altitude::TextureMap * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2>,altitude::TextureMap * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D89D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2>,altitude::TextureMap * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D89D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_2>,altitude::TextureMap * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  ggl::Data *v4;
  _OWORD *shared_owners;
  ggl::Data **v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  void (**v19)(karo::media::Image *__hidden);
  uint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 856) + 136);
  v19 = &off_1E42C3568;
  v20 = 0;
  v21 = 29;
  v22 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  karo::media::Image::setFormat((uint64_t)&v19, 1);
  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
  v4 = ggl::Data::Data((ggl::Data *)&v2[1], 256);
  shared_owners = (_OWORD *)v2[1].__shared_owners_;
  *shared_owners = xmmword_19FFB47C0;
  shared_owners[1] = xmmword_19FFB47C0;
  shared_owners[2] = xmmword_19FFB47D0;
  shared_owners[3] = xmmword_19FFB47D0;
  shared_owners[4] = xmmword_19FFB47C0;
  shared_owners[5] = xmmword_19FFB47C0;
  shared_owners[6] = xmmword_19FFB47D0;
  shared_owners[7] = xmmword_19FFB47D0;
  shared_owners[8] = xmmword_19FFB47C0;
  shared_owners[9] = xmmword_19FFB47C0;
  shared_owners[10] = xmmword_19FFB47D0;
  shared_owners[11] = xmmword_19FFB47D0;
  shared_owners[12] = xmmword_19FFB47C0;
  shared_owners[13] = xmmword_19FFB47C0;
  shared_owners[14] = xmmword_19FFB47D0;
  shared_owners[15] = xmmword_19FFB47D0;
  if (v20)
  {
    v6 = *(ggl::Data ***)(v20 + 16);
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (std::__shared_weak_count *)v6[1];
    *v6 = v4;
    v6[1] = (ggl::Data *)v2;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  karo::media::Image::convertToFormat((uint64_t)&v19, *(_DWORD *)(v1 + 44));
  if (*(_BYTE *)(v1 + 40) || *(_BYTE *)(v1 + 41))
    karo::media::Image::mipmapAndCompress((uint64_t)&v19, *(_DWORD *)(v1 + 44));
  v11 = operator new();
  *(_QWORD *)v11 = &off_1E42C39D0;
  *(_DWORD *)(v11 + 8) = 29;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 81) = 0u;
  v12 = (std::__shared_weak_count *)operator new(0x58uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = 0;
  v12[1].__shared_owners_ = 0;
  LODWORD(v12[2].__shared_owners_) = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  *(_QWORD *)&v14 = 0x100000001;
  *((_QWORD *)&v14 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v12[2].__shared_owners_ + 4) = v14;
  *(std::__shared_weak_count_vtbl **)((char *)&v12[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v12[3].__shared_owners_) = 0;
  v18[0] = v12 + 1;
  v18[1] = v12;
  altitude::TextureMap::loadImage(v11, (uint64_t)&v19, v18, 0);
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::media::Image::~Image((karo::media::Image *)&v19);
  return v11;
}

void sub_19F777A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v6;
  va_list va;

  va_start(va, a3);
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  karo::media::Image::~Image((karo::media::Image *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1>,altitude::TextureMap * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1>,altitude::TextureMap * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8990;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1>,altitude::TextureMap * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8990;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_1>,altitude::TextureMap * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  ggl::Data *v4;
  _OWORD *shared_owners;
  __int128 v6;
  __int128 v7;
  ggl::Data **v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  void (**v21)(karo::media::Image *__hidden);
  _QWORD *v22;
  unsigned int v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 856) + 136);
  v21 = &off_1E42C3568;
  v22 = 0;
  v23 = 29;
  v24 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  karo::media::Image::setFormat((uint64_t)&v21, 1);
  if (v22)
    *v22 = 0x800000008;
  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
  v4 = ggl::Data::Data((ggl::Data *)&v2[1], 256);
  shared_owners = (_OWORD *)v2[1].__shared_owners_;
  *(_QWORD *)&v6 = 0xFFFFFFFFLL;
  *((_QWORD *)&v6 + 1) = 0xFFFFFFFFLL;
  *shared_owners = v6;
  shared_owners[1] = v6;
  *(_QWORD *)&v7 = 0xFFFFFFFF00000000;
  *((_QWORD *)&v7 + 1) = 0xFFFFFFFF00000000;
  shared_owners[2] = v7;
  shared_owners[3] = v7;
  shared_owners[4] = v6;
  shared_owners[5] = v6;
  shared_owners[6] = v7;
  shared_owners[7] = v7;
  shared_owners[8] = v6;
  shared_owners[9] = v6;
  shared_owners[10] = v7;
  shared_owners[11] = v7;
  shared_owners[12] = v6;
  shared_owners[13] = v6;
  shared_owners[14] = v7;
  shared_owners[15] = v7;
  if (v22)
  {
    v8 = (ggl::Data **)v22[2];
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (std::__shared_weak_count *)v8[1];
    *v8 = v4;
    v8[1] = (ggl::Data *)v2;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  karo::media::Image::convertToFormat((uint64_t)&v21, *(_DWORD *)(v1 + 44));
  if (*(_BYTE *)(v1 + 40) || *(_BYTE *)(v1 + 41))
    karo::media::Image::mipmapAndCompress((uint64_t)&v21, v23);
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E42C39D0;
  *(_DWORD *)(v13 + 8) = 29;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 81) = 0u;
  v14 = (std::__shared_weak_count *)operator new(0x58uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v14[1].__shared_weak_owners_ = 0;
  v14[2].__vftable = 0;
  v14[1].__shared_owners_ = 0;
  LODWORD(v14[2].__shared_owners_) = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  *(_QWORD *)&v16 = 0x100000001;
  *((_QWORD *)&v16 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v14[2].__shared_owners_ + 4) = v16;
  *(std::__shared_weak_count_vtbl **)((char *)&v14[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v14[3].__shared_owners_) = 0;
  v20[0] = v14 + 1;
  v20[1] = v14;
  altitude::TextureMap::loadImage(v13, (uint64_t)&v21, v20, 0);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::media::Image::~Image((karo::media::Image *)&v21);
  return v13;
}

void sub_19F777D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v6;
  va_list va;

  va_start(va, a3);
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  karo::media::Image::~Image((karo::media::Image *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_0,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_0>,ggl::Texture2D * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_0,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_0>,ggl::Texture2D * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_0,std::allocator<altitude::GlobeView::GlobeView(VKClassicGlobeCanvas *,md::realistic::RealisticRenderer *,std::shared_ptr<gdc::Camera> const&)::$_0>,ggl::Texture2D * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8948;
  a2[1] = v2;
  return result;
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

_DWORD *altitude::GlobeView::setCoarseLoading(altitude::GlobeView *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  _DWORD *result;

  if (*((_BYTE *)this + 272))
  {
    *((_BYTE *)this + 272) = 0;
    v2 = *((_QWORD *)this + 58);
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 66) + 24))(*((_QWORD *)this + 66), 0, 0xFFFFFFFFLL);
    v4 = v3;
    v6 = (uint64_t **)(v2 + 96);
    v5 = *(char **)(v2 + 96);
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v7 = v5;
          v8 = *((_QWORD *)v5 + 4);
          if (v8 <= v3)
            break;
          v5 = *(char **)v7;
          v6 = (uint64_t **)v7;
          if (!*(_QWORD *)v7)
            goto LABEL_9;
        }
        if (v8 >= v3)
          break;
        v5 = (char *)*((_QWORD *)v7 + 1);
        if (!v5)
        {
          v6 = (uint64_t **)(v7 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v7 = (char *)(v2 + 96);
LABEL_9:
      v9 = v7;
      v7 = (char *)operator new(0x60uLL);
      *((_QWORD *)v7 + 4) = v4;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      *((_QWORD *)v7 + 9) = 0;
      *((_OWORD *)v7 + 5) = xmmword_19FFB37D0;
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = v9;
      *v6 = (uint64_t *)v7;
      v10 = **(_QWORD **)(v2 + 88);
      v11 = (uint64_t *)v7;
      if (v10)
      {
        *(_QWORD *)(v2 + 88) = v10;
        v11 = *v6;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 96), v11);
      ++*(_QWORD *)(v2 + 104);
    }
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_QWORD *)v7 + 9) = 0;
    *((_OWORD *)v7 + 5) = xmmword_19FFB37D0;
    *(_BYTE *)(*((_QWORD *)this + 58) + 612) = 1;
  }
  *(_DWORD *)(*((_QWORD *)this + 98) + 1304) = 0;
  result = (_DWORD *)*((_QWORD *)this + 65);
  if (result)
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)result + 24))(result, 0, 0xFFFFFFFFLL);
    if (result)
    {
      result = (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 65) + 24))(*((_QWORD *)this + 65), 0, 0xFFFFFFFFLL);
      result[326] = 0;
    }
  }
  return result;
}

void altitude::GlobeView::setPerspective(uint64_t a1, double *a2)
{
  double v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  long double v12;
  double v13;
  uint64_t v14;
  char v15;

  v4 = *a2;
  *(double *)(a1 + 280) = *a2;
  *(long double *)(a1 + 288) = tan(v4 * 0.5);
  v5 = *(double **)(a1 + 72);
  v7 = v5[46];
  v6 = v5[47];
  if (v6 >= v7)
  {
    v13 = *a2;
  }
  else
  {
    v8 = v6 * v7;
    v9 = v7 / v6;
    if (v8 <= 0.0)
      v10 = 1.0;
    else
      v10 = v9;
    v11 = tan(*a2 * 0.5);
    v12 = atan(v10 * v11);
    v13 = v12 + v12;
  }
  v5[57] = v13;
  v14 = **(_QWORD **)(*(_QWORD *)(a1 + 856) + 88);
  if (v14)
  {
    v15 = 7;
    md::MapEngine::setNeedsTick(v14, &v15);
  }
}

double altitude::GlobeView::calculateMinZoomDistance(altitude::GlobeView *this)
{
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;

  objc_msgSend(MEMORY[0x1E0D27008], "sharedConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "countryCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("KR"));

  if (v4)
  {
    v5 = *((_QWORD *)this + 9);
    v6 = *(double *)(v5 + 8);
    if (v6 >= 0.593400002 && v6 <= 0.676299989)
    {
      v7 = *(double *)(v5 + 16);
      if (v7 >= 2.18169999 && v7 <= 2.26889992)
        return fmax(*((double *)this + 48) * 10000.0, *((double *)this + 49));
    }
  }
  v10 = *((_QWORD *)this + 98);
  if (*(float *)(v10 + 1388) == 0.0)
    return fmax(*((double *)this + 49), 625.0);
  v11 = *((_DWORD *)this + 42);
  if (v11 <= 0x12)
    v11 = 18;
  if (v11 >= 0x14)
    LOBYTE(v11) = 20;
  v12 = 0.4 / (double)(1 << (v11 - 18));
  v13 = 1.0 / *(double *)(v10 + 376);
  v14 = (double)(*(_DWORD *)(*((_QWORD *)this + 99) + 48) - *(_DWORD *)(*((_QWORD *)this + 99) + 40)) * 0.5;
  return fmax(*((double *)this + 49), (float)((float)((float)(*(float *)(*((_QWORD *)this + 86) + 200) * v14) * v12) / v13));
}

void sub_19F778228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL altitude::GlobeView::getSpherePointIntersection(uint64_t a1, int a2, int a3, double *a4, uint64_t a5, double a6)
{
  double v8;
  double v9;
  double v10;
  _BOOL8 result;
  double v12;
  float64_t v13;
  double v14;
  double v15;
  double v16;
  __int128 v17;
  double v18;
  float64x2_t v19;
  double v20;

  v8 = *a4;
  v9 = a4[1];
  v10 = a4[2];
  result = altitude::GlobeView::getDirFromScreenPosition(a1, &v19, a4, (float)a2, (float)a3);
  if (result)
  {
    v12 = v19.f64[0] * v19.f64[0] + v19.f64[1] * v19.f64[1] + v20 * v20;
    v13 = v19.f64[0] * v8 + v19.f64[1] * v9 + v20 * v10;
    v14 = v13 + v13;
    v15 = (v9 * v9 - (a6 * a6 - v8 * v8) + v10 * v10) * (-4.0 * v12) + v14 * v14;
    if (v15 >= 0.0 && (v16 = (sqrt(v15) + v14) * -0.5 / v12, v16 >= 0.0))
    {
      *(double *)&v17 = v8 + v16 * v19.f64[0];
      *((double *)&v17 + 1) = v9 + v16 * v19.f64[1];
      v18 = v10 + v16 * v20;
      *(_OWORD *)a5 = v17;
      *(double *)(a5 + 16) = v18;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL altitude::GlobeView::getDirFromScreenPosition(uint64_t a1, float64x2_t *a2, double *a3, float a4, float a5)
{
  uint64_t v5;
  __n128 v11;
  unsigned __int8 v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v53[16];
  double v54[16];
  double v55[16];
  double v56[16];
  float64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  double v61;
  double v62;
  float64x2_t v63;
  double v64;
  double v65;
  float64x2_t v66;
  double v67;
  double v68;

  v5 = *(_QWORD *)(a1 + 792);
  if (v5)
  {
    v11.n128_f64[0] = karo::graphics::Viewport::computeWindowMatrix((karo::graphics::Viewport *)v54, v5);
    {
      *(_OWORD *)&qword_1EE587A68 = 0u;
      unk_1EE587A88 = 0u;
      unk_1EE587AA8 = 0u;
      unk_1EE587A98 = 0u;
      unk_1EE587A78 = 0u;
      unk_1EE587A58 = 0u;
      unk_1EE587A48 = 0u;
      altitude::GlobeView::getProjectionMatrix(void)const::m = 0x3FF0000000000000;
      qword_1EE587A68 = 0x3FF0000000000000;
      qword_1EE587A90 = 0x3FF0000000000000;
      qword_1EE587AB8 = 0x3FF0000000000000;
    }
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 528) + 24))(*(_QWORD *)(a1 + 528), 0, 0xFFFFFFFFLL, v11);
    if (v13)
      v14 = (double *)(v13 + 376);
    else
      v14 = (double *)&altitude::GlobeView::getProjectionMatrix(void)const::m;
    gm::operator*<double,4,4,4>(v55, v54, v14);
    v15 = a3[4];
    v16 = a3[5];
    v17 = a3[6];
    v19 = a3[2];
    v18 = a3[3];
    v20 = a3[1];
    v21 = -(*a3 * v16 - v19 * v18);
    v22 = -(v20 * v18 - *a3 * v15);
    v23 = -(v19 * v15 - v20 * v16) - (v19 * v15 - v20 * v16);
    v24 = v21 + v21;
    v25 = v22 + v22;
    v26 = -(v25 * v18 - (-(v20 - v23 * v16) - v24 * v17));
    v27 = -(*a3 + v23 * v17 + v24 * v16 - v25 * v15);
    v28 = v19 + v23 * v15 + v25 * v17;
    v29 = v15 * -2.0;
    v30 = -(v15 * (v15 * -2.0));
    v31 = -(v16 * (v16 * -2.0));
    v32 = 1.0 - (v30 - v16 * (v16 * -2.0));
    v33 = -(v15 * (v18 * -2.0));
    v34 = v16 * -2.0 * v17;
    v35 = v33 - v34;
    v36 = -(v16 * (v18 * -2.0));
    v37 = v17 * v29;
    v38 = v34 + v33;
    v39 = v17 * v29 - v16 * (v18 * -2.0);
    v40 = -(v16 * v29);
    v41 = v18 * -2.0 * v18 + 1.0;
    v42 = v17 * (v18 * -2.0);
    v53[0] = v32;
    v53[1] = v38;
    v53[4] = v35;
    v53[5] = v41 - v31;
    v53[8] = v39;
    v53[9] = v40 - v42;
    v53[2] = v36 - v37;
    v53[6] = v42 + v40;
    v53[10] = v41 - v30;
    v53[3] = 0.0;
    v53[7] = 0.0;
    v53[11] = 0.0;
    v53[12] = v27;
    v53[13] = v26;
    v53[14] = -(v28 - v24 * v18);
    v53[15] = 1.0;
    gm::operator*<double,4,4,4>(v56, v55, v53);
    gm::Matrix<double,4,4>::inverted<int,void>(v57.f64, v56);
    v43 = v67 + v58 * a4 + v61 * a5;
    v44 = v68 + v59 * a4 + v62 * a5;
    v45 = 1.0 / v44;
    v46 = 1.0 / v44 * v43;
    v47 = 1.0 / (v44 + v65);
    v48 = -(v46 - v47 * (v43 + v64));
    v49 = vmlaq_n_f64(vmlaq_n_f64(v66, v57, a4), v60, a5);
    v50 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v49, v45)), vaddq_f64(v49, v63), v47);
    v51 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v50, v50)) + v48 * v48);
    *a2 = vmulq_n_f64(v50, v51);
    a2[1].f64[0] = v51 * v48;
  }
  return v5 != 0;
}

BOOL altitude::GlobeView::getSpherePointIntersection(uint64_t a1, int a2, int a3, char a4, double *a5, double *a6, double *a7, int a8)
{
  double v16;
  double v17;
  double v18;
  _BOOL8 result;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __double2 v39;
  double v40;
  __double2 v41;
  double v42;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v50;
  double v57;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  long double v66;
  long double v67;
  long double v68;
  double v69;
  double v70;
  double v71;
  __double2 v72;
  double v73;
  __double2 v74;
  double v75;
  double v76;
  double v77;
  __double2 v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92[7];
  float64x2_t v93;
  double v94;

  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v92, a6);
  v16 = v92[0];
  v17 = v92[1];
  v18 = v92[2];
  result = altitude::GlobeView::getDirFromScreenPosition(a1, &v93, v92, (float)a2, (float)a3);
  if (result)
  {
    v20 = v93.f64[0];
    v90 = v16;
    v91 = v18;
    v88 = v17;
    if ((a4 & 1) != 0)
    {
      v21 = 1.0 / sqrt(v17 * v17 + v16 * v16 + v18 * v18);
      v22 = v21 * v16;
      v23 = v21 * v17;
      v24 = v21 * v18;
      v25 = 1.0 / sqrt(v22 * v22 + v23 * v23 + v24 * v24);
      v26 = v25 * v22;
      v27 = v25 * v23;
      v28 = v25 * v24;
      v30 = v93.f64[1];
      v29 = v94;
      v31 = v26 * v93.f64[0] + 0.1 + v27 * v93.f64[1] + v28 * v94;
      if (v31 > 0.0)
      {
        v32 = v31 * 0.8;
        v20 = v93.f64[0] - v32 * v26;
        v30 = v93.f64[1] - v32 * v27;
        v29 = v94 - v32 * v28;
      }
      v85 = v18 * v18;
      v86 = v17 * v17;
      v89 = v16 * v16;
      v33 = 1.0 / sqrt(v20 * v20 + v30 * v30 + v29 * v29);
      v20 = v33 * v20;
      v34 = v33 * v30;
      v93.f64[0] = v20;
      v93.f64[1] = v33 * v30;
      v35 = v33 * v29;
    }
    else
    {
      v34 = v93.f64[1];
      v35 = v94;
      v89 = v16 * v16;
      v85 = v18 * v18;
      v86 = v17 * v17;
    }
    v36 = v20;
    v37 = a5[1];
    v38 = a5[2];
    v39 = __sincos_stret(*a5);
    v40 = 6378137.0 / sqrt(v39.__sinval * v39.__sinval * -0.00669437999 + 1.0);
    v41 = __sincos_stret(v37);
    v42 = v35 * v35 + v36 * v36 + v34 * v34;
    _D15 = v88;
    v44 = v35 * v91 + v36 * v16 + v34 * v88;
    v45 = v44 + v44;
    v46 = (v89
         - ((v40 + v38) * v39.__cosval * v41.__cosval * ((v40 + v38) * v39.__cosval * v41.__cosval)
          + (v40 + v38) * v39.__cosval * v41.__sinval * ((v40 + v38) * v39.__cosval * v41.__sinval)
          + (v38 + v40 * 0.99330562) * v39.__sinval * ((v38 + v40 * 0.99330562) * v39.__sinval))
         + v86
         + v85)
        * 4.0;
    v47 = -(v46 * v42 - v45 * v45);
    if (v47 >= 0.0 && (v48 = (sqrt(v47) + v45) * -0.5 / v42, v48 >= 0.0))
    {
      v82 = v48 * v36;
      v83 = v48 * v34;
      v84 = v48 * v35;
    }
    else
    {
      _V16.D[1] = v93.f64[1];
      v50 = vnegq_f64(v93);
      _D1 = v50.f64[1];
      __asm { FMLS            D5, D1, V16.D[1] }
      v57 = _D5 + v35 * v35;
      __asm { FMLS            D5, D15, V16.D[1] }
      v59 = _D5 - v35 * v91 + _D5 - v35 * v91;
      v60 = -(v46 * v57 - v59 * v59);
      if (v60 < 0.0
        || (v61 = sqrt(v60), v62 = (v61 + v59) * -0.5 / v57, v62 < 0.0) && (v62 = (v61 - v59) * 0.5 / v57, v62 < 0.0))
      {
        v63 = v93.f64[1];
        v87 = v93.f64[0];
        v64 = sqrt((a6[3] + cos(3.14159265 - a6[4]) * -12756274.0) * a6[3] + 4.06806316e13);
        v65 = sqrt((v64 + 6378137.0) * (v64 + -6378137.0));
        v66 = v90 + v87 * v65;
        v67 = v88 + v63 * v65;
        v68 = v91 + v35 * v65;
        v69 = sqrt(v66 * v66 + v67 * v67);
        v70 = atan2(v68, v69 * 0.996647189);
        v71 = atan2(v67, v66);
        v72 = __sincos_stret(v70);
        v73 = atan2(v68 + v72.__sinval * v72.__sinval * 42841.3115 * v72.__sinval, v69 + v72.__cosval * v72.__cosval * -42697.6727 * v72.__cosval);
        v74 = __sincos_stret(v73);
        v75 = 6378137.0 / sqrt(v74.__sinval * v74.__sinval * -0.00669437999 + 1.0);
        if (a8)
          v76 = v38;
        else
          v76 = 0.0;
        v77 = (v75 + v76) * v74.__cosval;
        v78 = __sincos_stret(v71);
        result = 0;
        v79 = v77 * v78.__cosval;
        v80 = v77 * v78.__sinval;
        v81 = (v76 + v75 * 0.99330562) * v74.__sinval;
        goto LABEL_19;
      }
      v82 = v62 * v50.f64[0];
      v83 = v62 * v50.f64[1];
      v84 = v62 * -v35;
    }
    v81 = v84 + v91;
    v80 = v83 + v88;
    v79 = v82 + v16;
    result = 1;
LABEL_19:
    *a7 = v79;
    a7[1] = v80;
    a7[2] = v81;
  }
  return result;
}

BOOL altitude::GlobeView::getCoordAtScreenPosition(uint64_t a1, int *a2, double *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  double *v10;
  _BOOL8 result;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL SpherePointIntersection;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  __double2 v31;
  double v32;
  __double2 v33;
  __int128 v34;
  long double v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  double v41;
  __int128 v42;
  double v43;

  v9 = *(_QWORD *)(a1 + 72);
  v10 = (double *)(v9 + 8);
  if (!a3)
  {
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v38.f64, (double *)(v9 + 8));
    v36 = v38;
    v37 = v39;
    if (!altitude::GlobeView::getDirFromScreenPosition(a1, &v40, v38.f64, (float)*a2, (float)a2[1]))
      return 0;
    if (a5)
    {
      v12 = 1.0 / sqrt(v36.f64[0] * v36.f64[0] + v36.f64[1] * v36.f64[1] + v37 * v37);
      v13 = v12 * v36.f64[1];
      v14 = v12 * v37;
      v15 = 1.0 / sqrt(v12 * v36.f64[0] * (v12 * v36.f64[0]) + v13 * v13 + v14 * v14);
      v16 = v15 * (v12 * v36.f64[0]);
      v17 = v15 * v13;
      v18 = v15 * v14;
      v19 = v40.f64[1];
      v20 = v40.f64[0];
      v21 = v41;
      v22 = v16 * v40.f64[0] + 0.1 + v17 * v40.f64[1] + v18 * v41;
      if (v22 > 0.0)
      {
        v23 = v22 * 0.8;
        v20 = v40.f64[0] - v23 * v16;
        v19 = v40.f64[1] - v23 * v17;
        v21 = v41 - v23 * v18;
      }
      v24 = 1.0 / sqrt(v20 * v20 + v19 * v19 + v21 * v21);
      v40.f64[0] = v24 * v20;
      v40.f64[1] = v24 * v19;
      v41 = v24 * v21;
    }
    if (altitude::Intersector::intersectRayWithVisibleSet(*(_QWORD *)(a1 + 456), &v36, &v40, (uint64_t)&v42))
    {
      v34 = v42;
      v35 = v43;
    }
    else
    {
      SpherePointIntersection = altitude::GlobeView::getSpherePointIntersection(a1, *a2, a2[1], a5, v10, v10, (double *)&v34, 0);
      result = 0;
      if (!SpherePointIntersection)
        return result;
    }
    goto LABEL_13;
  }
  result = altitude::GlobeView::getSpherePointIntersection(a1, *a2, a2[1], a5, a3, (double *)(v9 + 8), (double *)&v34, 1);
  if (result)
  {
LABEL_13:
    v26 = v34;
    v27 = v35;
    v28 = sqrt(*(double *)&v34 * *(double *)&v34 + *((double *)&v34 + 1) * *((double *)&v34 + 1));
    v29 = atan2(v35, v28 * 0.996647189);
    v30 = atan2(*((long double *)&v26 + 1), *(long double *)&v26);
    v31 = __sincos_stret(v29);
    v32 = atan2(v27 + v31.__sinval * v31.__sinval * 42841.3115 * v31.__sinval, v28 + v31.__cosval * v31.__cosval * -42697.6727 * v31.__cosval);
    v33 = __sincos_stret(v32);
    *(double *)a4 = v32;
    *(long double *)(a4 + 8) = v30;
    *(double *)(a4 + 16) = v28 / v33.__cosval + -6378137.0 / sqrt(v33.__sinval * v33.__sinval * -0.00669437999 + 1.0);
    return 1;
  }
  return result;
}

BOOL altitude::GlobeView::getLatLongAtViewPosition(uint64_t a1, int *a2, __int128 *a3)
{
  uint64_t **v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  long double v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  __double2 v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  long double v29;
  long double v30;
  double v31;
  double v32;
  __double2 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  __int128 v44;
  __int128 v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  double v50;
  _QWORD v51[2];
  long double v52;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 600));
  v6 = (uint64_t **)(a1 + 584);
  v7 = *(_QWORD *)(a1 + 584);
  if (v7)
  {
    v9 = *a2;
    v8 = a2[1];
    v10 = a1 + 584;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      if (v11 < v9)
      {
        v7 += 8;
      }
      else if (v9 >= v11)
      {
        if (*(_DWORD *)(v7 + 36) < v8)
          v7 += 8;
        else
          v10 = v7;
      }
      else
      {
        v10 = v7;
      }
      v7 = *(_QWORD *)v7;
    }
    while (v7);
    if ((uint64_t **)v10 != v6)
    {
      v12 = *(_DWORD *)(v10 + 32);
      if (v9 >= v12 && (v12 < v9 || v8 >= *(_DWORD *)(v10 + 36)))
      {
        v44 = *(_OWORD *)(v10 + 48);
        *((_QWORD *)a3 + 2) = *(_QWORD *)(v10 + 64);
        *a3 = v44;
        v15 = *(unsigned __int8 *)(v10 + 40) != 0;
LABEL_34:
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 600));
        return v15;
      }
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 600));
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v49.f64, (double *)(*(_QWORD *)(a1 + 72) + 8));
  if (altitude::GlobeView::getDirFromScreenPosition(a1, &v47, (float)*a2, (float)a2[1]))
  {
    v13 = altitude::Intersector::intersectRayWithVisibleSet(*(_QWORD *)(a1 + 456), &v49, &v47, (uint64_t)v51);
    v15 = v13 != 0;
    if (v13)
    {
      v16 = *(double *)v51;
      v17 = *(double *)&v51[1];
      v18 = v52;
      v19 = sqrt(v16 * v16 + v17 * v17);
      v20 = atan2(v52, v19 * 0.996647189);
      v21 = atan2(v17, v16);
      v22 = __sincos_stret(v20);
      v23 = atan2(v18 + v22.__sinval * v22.__sinval * 42841.3115 * v22.__sinval, v19 + v22.__cosval * v22.__cosval * -42697.6727 * v22.__cosval);
      v24 = __sincos_stret(v23);
      v25 = v19 / v24.__cosval + -6378137.0 / sqrt(v24.__sinval * v24.__sinval * -0.00669437999 + 1.0);
    }
    else
    {
      v26 = sqrt((*(double *)(*(_QWORD *)(a1 + 72) + 32)+ cos(3.14159265 - *(double *)(*(_QWORD *)(a1 + 72) + 40)) * -12756274.0)* *(double *)(v14 + 32)+ 4.06806316e13);
      v27 = sqrt((v26 + 6378137.0) * (v26 + -6378137.0));
      v28 = v49.f64[0] + v47.f64[0] * v27;
      v29 = v49.f64[1] + v47.f64[1] * v27;
      v30 = v50 + v48 * v27;
      v31 = sqrt(v28 * v28 + v29 * v29);
      v32 = atan2(v30, v31 * 0.996647189);
      v21 = atan2(v29, v28);
      v33 = __sincos_stret(v32);
      v23 = atan2(v30 + v33.__sinval * v33.__sinval * 42841.3115 * v33.__sinval, v31 + v33.__cosval * v33.__cosval * -42697.6727 * v33.__cosval);
      v25 = 0.0;
    }
    *(double *)a3 = v23;
    *((long double *)a3 + 1) = v21;
    *((double *)a3 + 2) = v25;
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 600));
    v46 = *a3;
    v34 = *((_QWORD *)a3 + 2);
    v35 = a1 + 584;
    v36 = *(_QWORD *)(a1 + 584);
    if (v36)
    {
      v37 = *a2;
      v38 = a2[1];
      while (1)
      {
        v35 = v36;
        v39 = *(_DWORD *)(v36 + 32);
        if (v37 < v39)
          goto LABEL_22;
        if (v39 < v37)
          goto LABEL_27;
        v40 = *(_DWORD *)(v35 + 36);
        if (v38 < v40)
        {
LABEL_22:
          v36 = *(_QWORD *)v35;
          v6 = (uint64_t **)v35;
          if (!*(_QWORD *)v35)
            break;
        }
        else
        {
          if (v40 >= v38)
          {
            v41 = (_QWORD *)v35;
            goto LABEL_32;
          }
LABEL_27:
          v36 = *(_QWORD *)(v35 + 8);
          if (!v36)
          {
            v6 = (uint64_t **)(v35 + 8);
            break;
          }
        }
      }
    }
    v41 = operator new(0x48uLL);
    v41[4] = *(_QWORD *)a2;
    *((_BYTE *)v41 + 40) = 0;
    v41[7] = 0;
    v41[8] = 0;
    v41[6] = 0;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = v35;
    *v6 = v41;
    v42 = **(_QWORD **)(a1 + 576);
    v43 = v41;
    if (v42)
    {
      *(_QWORD *)(a1 + 576) = v42;
      v43 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 584), v43);
    ++*(_QWORD *)(a1 + 592);
LABEL_32:
    *((_BYTE *)v41 + 40) = v15;
    *((_OWORD *)v41 + 3) = v46;
    v41[8] = v34;
    goto LABEL_34;
  }
  return 0;
}

void sub_19F779068(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 600));
  _Unwind_Resume(a1);
}

uint64_t altitude::GlobeView::getDirFromScreenPosition(uint64_t a1, float64x2_t *a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19[16];
  double v20[16];
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  double v31;
  double v32;

  v4 = *(_QWORD *)(a1 + 792);
  if (!v4)
    return 0;
  result = *(_QWORD *)(a1 + 768);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 24))(result, 0, 0xFFFFFFFFLL);
    if (result)
    {
      v9 = result;
      karo::graphics::Viewport::computeWindowMatrix((karo::graphics::Viewport *)v19, v4);
      gm::operator*<double,4,4,4>(v20, v19, (double *)(v9 + 120));
      gm::Matrix<double,4,4>::inverted<int,void>(v21.f64, v20);
      v10 = v31 + v22 * a3 + v25 * a4;
      v11 = v32 + v23 * a3 + v26 * a4;
      v12 = 1.0 / v11;
      v13 = 1.0 / v11 * v10;
      v14 = 1.0 / (v11 + v29);
      v15 = -(v13 - v14 * (v10 + v28));
      v16 = vmlaq_n_f64(vmlaq_n_f64(v30, v21, a3), v24, a4);
      v17 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v16, v12)), vaddq_f64(v16, v27), v14);
      v18 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v17, v17)) + v15 * v15);
      *a2 = vmulq_n_f64(v17, v18);
      a2[1].f64[0] = v18 * v15;
      return 1;
    }
  }
  return result;
}

uint64_t altitude::GlobeView::getViewPositionAtLatLongHeight(_QWORD *a1, double *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __double2 v14;
  double v15;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39[7];

  result = a1[66];
  if (result)
  {
    v7 = (_DWORD *)a1[99];
    v8 = (double *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 24))(result, 0, 0);
    v36 = v8[15];
    v37 = v8[16];
    v38 = v8[18];
    v33 = v8[19];
    v34 = v8[20];
    v35 = v8[22];
    v30 = v8[23];
    v31 = v8[24];
    v32 = v8[26];
    v28 = v8[27];
    v29 = v8[28];
    v27 = v8[30];
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v39, (double *)(a1[9] + 8));
    v9 = v39[0];
    v10 = v39[1];
    v11 = v39[2];
    v12 = a2[1];
    v13 = a2[2];
    v14 = __sincos_stret(*a2);
    v15 = 6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
    v16 = (v15 + v13) * v14.__cosval;
    v17 = __sincos_stret(v12);
    v18 = v16 * v17.__cosval;
    v19 = v16 * v17.__sinval;
    v20 = (v13 + v15 * 0.99330562) * v14.__sinval;
    v21 = (v16 * v17.__sinval * v10 + v20 * v11 + v16 * v17.__cosval * v9) / sqrt(v9 * v9 + v10 * v10 + v11 * v11);
    result = v21 >= 0.0;
    if (v21 >= 0.0)
    {
      v22 = v28 + v18 * v36 + v19 * v33 + v20 * v30;
      v23 = v29 + v18 * v37 + v19 * v34 + v20 * v31;
      v24 = 1.0 / (v27 + v18 * v38 + v19 * v35 + v20 * v32);
      v25 = (v22 * 0.5 * v24 + 0.5) * (double)(v7[12] - v7[10]);
      v26 = (0.5 - v23 * 0.5 * v24) * (double)(v7[13] - v7[11]);
      *a3 = (int)v25;
      a3[1] = (int)v26;
    }
  }
  return result;
}

uint64_t *altitude::GlobeView::createAnchor(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  double v19;
  double v20;
  __double2 v22;
  double v23;
  __double2 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(uint64_t ***)(v4 + 40);
  v6 = v5[4];
  if (v6)
  {
    v7 = (uint64_t *)*v6;
  }
  else
  {
    v8 = (char *)malloc_type_malloc(*((unsigned int *)v5 + 7), 0xF0B72BE0uLL);
    v9 = v8;
    v11 = v5 + 1;
    v10 = v5[1];
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v10;
          v13 = v10[4];
          if ((unint64_t)v8 >= v13)
            break;
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_10;
        }
        if (v13 >= (unint64_t)v8)
          break;
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_10;
        }
      }
    }
    else
    {
      v12 = v5 + 1;
LABEL_10:
      v14 = (uint64_t *)operator new(0x28uLL);
      v14[4] = (uint64_t)v9;
      *v14 = 0;
      v14[1] = 0;
      v14[2] = (uint64_t)v12;
      *v11 = v14;
      v15 = (uint64_t *)**v5;
      if (v15)
      {
        *v5 = v15;
        v16 = *v11;
      }
      else
      {
        v16 = v14;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v5[1], v16);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
    }
    v17 = &v9[104 * *((_DWORD *)v5 + 6) - 104];
    v18 = (char *)v5[4];
    do
    {
      v7 = (uint64_t *)v18;
      v18 = v17;
      *(_QWORD *)v17 = v7;
      v17 -= 104;
    }
    while (v17 >= v9);
    v6 = (uint64_t *)(v17 + 104);
  }
  v5[4] = v7;
  *(_DWORD *)v6 = 0;
  *(_OWORD *)(v6 + 1) = 0u;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 5) = 0u;
  v6[7] = 0;
  *((_WORD *)v6 + 32) = 255;
  *((_DWORD *)v6 + 17) = 0;
  *((_DWORD *)v6 + 18) = 0;
  v6[11] = v4;
  *((_BYTE *)v6 + 96) = 1;
  v19 = *a2;
  v20 = a2[1];
  if (v20 != 0.0 || v19 != 0.0)
  {
    *((double *)v6 + 1) = v19;
    *((double *)v6 + 2) = v20;
    v6[3] = 0;
    *((_BYTE *)v6 + 65) = 0;
    v22 = __sincos_stret(v19);
    v23 = 6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
    v24 = __sincos_stret(v20);
    *((double *)v6 + 4) = v23 * v22.__cosval * v24.__cosval;
    *((double *)v6 + 5) = v23 * v22.__cosval * v24.__sinval;
    *((double *)v6 + 6) = v22.__sinval * 0.99330562 * v23;
  }
  v25 = *(_QWORD *)(a1 + 32);
  v27 = (uint64_t **)(v25 + 24);
  v26 = *(uint64_t **)(v25 + 24);
  if (v26)
  {
    while (1)
    {
      while (1)
      {
        v28 = (uint64_t **)v26;
        v29 = v26[4];
        if (v29 <= (unint64_t)v6)
          break;
        v26 = *v28;
        v27 = v28;
        if (!*v28)
          goto LABEL_29;
      }
      if (v29 >= (unint64_t)v6)
        break;
      v26 = v28[1];
      if (!v26)
      {
        v27 = v28 + 1;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v28 = (uint64_t **)(v25 + 24);
LABEL_29:
    v30 = (uint64_t *)operator new(0x28uLL);
    v30[4] = (uint64_t)v6;
    *v30 = 0;
    v30[1] = 0;
    v30[2] = (uint64_t)v28;
    *v27 = v30;
    v31 = **(_QWORD **)(v25 + 16);
    if (v31)
    {
      *(_QWORD *)(v25 + 16) = v31;
      v32 = *v27;
    }
    else
    {
      v32 = v30;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 24), v32);
    ++*(_QWORD *)(v25 + 32);
  }
  *(_BYTE *)(v25 + 64) = 1;
  LODWORD(v33) = *(_DWORD *)v25 - 1;
  if (*(_DWORD *)v25)
    v33 = v33;
  else
    v33 = 0;
  *(_QWORD *)(v25 + 8) = v33;
  return v6;
}

void std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<altitude::SimpleTileKey>>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t altitude::GlobeView::getVisibleArea(uint64_t a1, long double **a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  int v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  __int128 *v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  _OWORD *v71;
  unint64_t *v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  double *v83;
  double v84;
  double v85;
  uint64_t v86;
  unsigned int v87;
  double v88;
  double v89;
  double v90;
  double v91;
  unint64_t v92;
  double v93;
  long double *v94;
  float64x2_t v95;
  double v96;
  double v97;
  float64_t v98;
  double v99;
  double v100;
  long double v101;
  long double v102;
  double v103;
  double v104;
  long double v105;
  long double v106;
  long double v107;
  double v108;
  long double v109;
  double v110;
  __double2 v111;
  long double v112;
  long double v113;
  unint64_t v114;
  long double *v115;
  long double v116;
  long double v117;
  long double v118;
  double v119;
  double v120;
  long double v121;
  __double2 v122;
  double v123;
  double v124;
  unint64_t v125;
  unint64_t v126;
  long double *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  long double *v133;
  unint64_t v134;
  unint64_t v135;
  long double *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  const double *v144;
  double *v145;
  uint64_t v146;
  const double *v147;
  double *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  const double *v152;
  double *v153;
  uint64_t v154;
  const double *v155;
  double *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v160;
  _OWORD *v161;
  unint64_t *v162;
  uint64_t v163;
  __int128 v164;
  double v165;
  double v166;
  double v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  double v176;
  uint64_t v177;
  double v178;
  float64x2_t v179;
  double v180;
  __int128 v181;
  double v182;
  float64x2x2_t v183;
  float64x2x2_t v184;
  float64x2x2_t v185;
  float64x2x2_t v186;

  if (*(_BYTE *)(a1 + 160))
  {
    v179.f64[0] = 0.0;
    v4 = *(_QWORD *)(a1 + 712);
    v181 = *(_OWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (altitude::IntersectorHeight::heightAtLatLon(v4, (double *)&v181, v179.f64, 0xEu) == 2)
    {
      v5 = **(_QWORD **)(*(_QWORD *)(a1 + 856) + 88);
      if (v5)
      {
        LOBYTE(v181) = 7;
        md::MapEngine::setNeedsTick(v5, &v181);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 160) = 0;
      *(double *)(*(_QWORD *)(a1 + 72) + 24) = v179.f64[0] + *(double *)(*(_QWORD *)(a1 + 72) + 24);
    }
  }
  a2[1] = *a2;
  v168 = a1;
  v6 = *(_DWORD **)(a1 + 792);
  v8 = v6[10];
  v7 = v6[11];
  v10 = v6[12];
  v9 = v6[13];
  v11 = operator new(8uLL);
  v177 = v9;
  v12 = v8 | ((unint64_t)v9 << 32);
  *v11 = v12;
  v13 = operator new(0x10uLL);
  v14 = (v7 + 1);
  v15 = v177 + ~v7;
  v16 = (v14 + 3 * v15 / 4);
  *v13 = v12;
  v13[1] = v8 | ((unint64_t)v16 << 32);
  operator delete(v11);
  v17 = operator new(0x20uLL);
  v18 = v17;
  if (v15 >= 0)
    v19 = v15;
  else
    v19 = v15 + 1;
  v20 = (v14 + (v19 >> 1));
  *((_QWORD *)v17 + 2) = v8 | ((unint64_t)v20 << 32);
  *v17 = *(_OWORD *)v13;
  operator delete(v13);
  v21 = (v14 + v15 / 4);
  v18[3] = v8 | ((unint64_t)v21 << 32);
  v22 = operator new(0x40uLL);
  v22[4] = v8 | ((unint64_t)v14 << 32);
  v23 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v18;
  *((_OWORD *)v22 + 1) = v23;
  operator delete(v18);
  v24 = v10 + ~v8;
  v25 = v24 + 3;
  v26 = v10 - v8;
  if (v24 >= 0)
    v25 = v10 + ~v8;
  v172 = v8 + (v25 >> 2);
  if (v24 >= 0)
    v26 = v10 + ~v8;
  v173 = v8 + (v26 >> 1);
  v22[5] = v172 | ((unint64_t)v14 << 32);
  v22[6] = v173 | ((unint64_t)v14 << 32);
  v175 = v8 + 3 * v24 / 4;
  v22[7] = v175 | ((unint64_t)v14 << 32);
  v27 = (uint64_t *)operator new(0x80uLL);
  v28 = v10;
  v29 = v177 << 32;
  v30 = v16 << 32;
  v31 = (v28 - 1);
  v27[8] = (v14 << 32) | v31;
  v32 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v27 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v27 + 3) = v32;
  v33 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v22;
  *((_OWORD *)v27 + 1) = v33;
  operator delete(v22);
  v27[9] = (v21 << 32) | v31;
  v27[10] = (v20 << 32) | v31;
  v34 = (unint64_t)(v27 + 16);
  v27[11] = v30 | v31;
  v35 = v27 + 12;
  if (v27 + 12 < v27 + 16)
  {
    *v35 = v29 | v31;
    v36 = (unint64_t)(v177 - 1) << 32;
    v37 = (unint64_t *)(v27 + 13);
    v38 = (unint64_t *)v27;
    goto LABEL_24;
  }
  v39 = (unint64_t *)operator new(0x100uLL);
  v38 = v39 + 12;
  v34 = (unint64_t)(v39 + 32);
  v39[12] = v29 | v31;
  v37 = v39 + 13;
  if (v35 == v27)
  {
    v40 = v177;
  }
  else
  {
    v40 = v177;
    if ((unint64_t)((char *)v27 - (char *)v39) < 0x20)
    {
      do
      {
        v45 = *--v35;
        *--v38 = v45;
      }
      while (v35 != v27);
    }
    else
    {
      v41 = 0;
      v42 = (char *)(v27 + 8);
      do
      {
        v43 = *(_OWORD *)&v42[v41 * 8 + 16];
        v44 = &v39[v41 + 10];
        *((_OWORD *)v44 - 1) = *(_OWORD *)&v42[v41 * 8];
        *(_OWORD *)v44 = v43;
        v41 -= 4;
      }
      while (v41 != -12);
      v38 = v39;
    }
  }
  v46 = v39;
  operator delete(v27);
  v36 = (unint64_t)(v40 - 1) << 32;
  if ((unint64_t)v37 < v34)
  {
LABEL_24:
    *v37 = v36 | v175;
    v47 = v37 + 1;
    if ((unint64_t)(v37 + 1) < v34)
      goto LABEL_25;
LABEL_47:
    v63 = v47 - v38;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 61)
      goto LABEL_149;
    if ((uint64_t)(v34 - (_QWORD)v38) >> 2 > v64)
      v64 = (uint64_t)(v34 - (_QWORD)v38) >> 2;
    if (v34 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v64;
    if (v65)
    {
      if (v65 >> 61)
        goto LABEL_146;
      v66 = operator new(8 * v65);
    }
    else
    {
      v66 = 0;
    }
    v67 = (unint64_t *)&v66[8 * v63];
    v34 = (unint64_t)&v66[8 * v65];
    *v67 = v36 | v173;
    v48 = v67 + 1;
    if (v47 == v38)
    {
LABEL_67:
      operator delete(v38);
LABEL_68:
      v38 = v67;
      if ((unint64_t)v48 < v34)
        goto LABEL_26;
LABEL_69:
      v76 = v48 - v38;
      v77 = v76 + 1;
      if (!((unint64_t)(v76 + 1) >> 61))
      {
        if ((uint64_t)(v34 - (_QWORD)v38) >> 2 > v77)
          v77 = (uint64_t)(v34 - (_QWORD)v38) >> 2;
        if (v34 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v77)
        {
          v78 = 0;
LABEL_78:
          v79 = (unint64_t *)&v78[8 * v76];
          *v79 = v36 | v172;
          v49 = v79 + 1;
          if (v48 == v38)
          {
            v50 = v168;
LABEL_86:
            operator delete(v38);
LABEL_87:
            v38 = v79;
            goto LABEL_88;
          }
          v80 = (char *)v48 - (char *)v38 - 8;
          if (v80 >= 0x58 && (unint64_t)((char *)v38 - v78) >= 0x20)
          {
            v160 = (v80 >> 3) + 1;
            v81 = &v48[-(v160 & 0x3FFFFFFFFFFFFFFCLL)];
            v161 = &v78[8 * v76 - 16];
            v162 = v48 - 2;
            v163 = v160 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v164 = *(_OWORD *)v162;
              *(v161 - 1) = *((_OWORD *)v162 - 1);
              *v161 = v164;
              v161 -= 2;
              v162 -= 4;
              v163 -= 4;
            }
            while (v163);
            v79 -= v160 & 0x3FFFFFFFFFFFFFFCLL;
            v50 = v168;
            if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_83:
              if (!v38)
                goto LABEL_87;
              goto LABEL_86;
            }
          }
          else
          {
            v81 = v48;
            v50 = v168;
          }
          do
          {
            v82 = *--v81;
            *--v79 = v82;
          }
          while (v81 != v38);
          goto LABEL_83;
        }
        if (!(v77 >> 61))
        {
          v78 = operator new(8 * v77);
          goto LABEL_78;
        }
LABEL_146:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
LABEL_149:
      abort();
    }
    v68 = (char *)v47 - (char *)v38 - 8;
    if (v68 >= 0x58)
    {
      if ((unint64_t)((char *)v38 - v66) >= 0x20)
      {
        v70 = (v68 >> 3) + 1;
        v69 = &v47[-(v70 & 0x3FFFFFFFFFFFFFFCLL)];
        v71 = &v66[8 * v63 - 16];
        v72 = v47 - 2;
        v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = *(_OWORD *)v72;
          *(v71 - 1) = *((_OWORD *)v72 - 1);
          *v71 = v74;
          v71 -= 2;
          v72 -= 4;
          v73 -= 4;
        }
        while (v73);
        v67 -= v70 & 0x3FFFFFFFFFFFFFFCLL;
        if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_66:
          if (!v38)
            goto LABEL_68;
          goto LABEL_67;
        }
      }
      else
      {
        v69 = v47;
      }
    }
    else
    {
      v69 = v47;
    }
    do
    {
      v75 = *--v69;
      *--v67 = v75;
    }
    while (v69 != v38);
    goto LABEL_66;
  }
  v51 = v37 - v38;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_149;
  if ((uint64_t)(v34 - (_QWORD)v38) >> 2 > v52)
    v52 = (uint64_t)(v34 - (_QWORD)v38) >> 2;
  if (v34 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
    v53 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v53 = v52;
  if (v53)
  {
    if (v53 >> 61)
      goto LABEL_146;
    v54 = operator new(8 * v53);
  }
  else
  {
    v54 = 0;
  }
  v55 = (unint64_t *)&v54[8 * v51];
  v34 = (unint64_t)&v54[8 * v53];
  *v55 = v36 | v175;
  v47 = v55 + 1;
  if (v37 == v38)
    goto LABEL_45;
  v56 = (char *)v37 - (char *)v38 - 8;
  if (v56 < 0x58)
    goto LABEL_152;
  if ((unint64_t)((char *)v38 - v54) < 0x20)
    goto LABEL_152;
  v57 = (v56 >> 3) + 1;
  v37 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
  v58 = (__int128 *)(v46 + 11);
  v59 = &v54[8 * v51 - 16];
  v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v61 = *v58;
    *(v59 - 1) = *(v58 - 1);
    *v59 = v61;
    v58 -= 2;
    v59 -= 2;
    v60 -= 4;
  }
  while (v60);
  v55 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
  if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_152:
    do
    {
      v62 = *--v37;
      *--v55 = v62;
    }
    while (v37 != v38);
  }
  if (v38)
LABEL_45:
    operator delete(v38);
  v38 = v55;
  if ((unint64_t)v47 >= v34)
    goto LABEL_47;
LABEL_25:
  *v47 = v36 | v173;
  v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >= v34)
    goto LABEL_69;
LABEL_26:
  *v48 = v36 | v172;
  v49 = v48 + 1;
  v50 = v168;
LABEL_88:
  v83 = *(double **)(v50 + 72);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)&v181, v83 + 1);
  v84 = v83[4];
  v85 = cos(3.14159265 - v83[5]);
  if (v49 == v38)
  {
    v158 = 1;
    goto LABEL_140;
  }
  v86 = 0;
  v87 = 0;
  v88 = sqrt((v84 + v85 * -12756274.0) * v84 + 4.06806316e13);
  v89 = sqrt((v88 + 6378137.0) * (v88 + -6378137.0));
  v91 = *((double *)&v181 + 1);
  v90 = *(double *)&v181;
  v92 = v49 - v38;
  v178 = v182;
  v93 = sqrt(*((double *)&v181 + 1) * *((double *)&v181 + 1) + *(double *)&v181 * *(double *)&v181 + v178 * v178)
      - (v88
       + -6378137.0);
  v174 = (*(double *)&v181 * *(double *)&v181 - v93 * v93 + *((double *)&v181 + 1) * *((double *)&v181 + 1)
                                                          + v178 * v178)
       * 4.0;
  v176 = v89 + v89;
  v171 = v89;
  v169 = *((double *)&v181 + 1);
  v170 = *(double *)&v181;
  do
  {
    if ((altitude::GlobeView::getDirFromScreenPosition(v50, &v179, (float)SLODWORD(v38[v86]), (float)SHIDWORD(v38[v86])) & 1) == 0)
    {
      v158 = 0;
      goto LABEL_140;
    }
    v95 = v179;
    v96 = v180;
    v97 = v179.f64[0] * v179.f64[0] + v179.f64[1] * v179.f64[1] + v96 * v96;
    v98 = v179.f64[0] * v90 + v179.f64[1] * v91 + v180 * v178;
    v99 = v98 + v98;
    v100 = -(v174 * v97 - v99 * v99);
    v101 = 0.0;
    if (v100 >= 0.0)
    {
      v104 = (sqrt(v100) + v99) * -0.5 / v97;
      v102 = 0.0;
      v103 = v176;
      if (v104 >= 0.0)
      {
        v166 = v104 * v179.f64[1];
        v167 = v104 * v179.f64[0];
        v165 = v104 * v180;
        v105 = v104 * v179.f64[0] + v90;
        v106 = v104 * v179.f64[1] + v91;
        v107 = v104 * v180 + v178;
        v108 = sqrt(v105 * v105 + v106 * v106);
        v109 = atan2(v107, v108 * 0.996647189);
        v101 = atan2(v106, v105);
        v110 = v109;
        v90 = v170;
        v111 = __sincos_stret(v110);
        v112 = v107 + v111.__sinval * v111.__sinval * 42841.3115 * v111.__sinval;
        v89 = v171;
        v113 = v108 + v111.__cosval * v111.__cosval * -42697.6727 * v111.__cosval;
        v91 = v169;
        v102 = atan2(v112, v113);
        v103 = sqrt(v167 * v167 + v166 * v166 + v165 * v165);
      }
    }
    else
    {
      v102 = 0.0;
      v103 = v176;
    }
    if (v103 >= v89)
    {
      v116 = v90 + v89 * v95.f64[0];
      v117 = v91 + v89 * v95.f64[1];
      v118 = v178 + v89 * v96;
      v119 = sqrt(v116 * v116 + v117 * v117);
      v120 = atan2(v118, v119 * 0.996647189);
      v121 = atan2(v117, v116);
      v122 = __sincos_stret(v120);
      v123 = atan2(v118 + v122.__sinval * v122.__sinval * 42841.3115 * v122.__sinval, v119 + v122.__cosval * v122.__cosval * -42697.6727 * v122.__cosval);
      v124 = v123;
      v126 = (unint64_t)a2[1];
      v125 = (unint64_t)a2[2];
      if (v126 < v125)
      {
        *(double *)v126 = v123;
        *(long double *)(v126 + 8) = v121;
        v94 = (long double *)(v126 + 16);
        v90 = v170;
        v89 = v171;
        v91 = v169;
        goto LABEL_91;
      }
      v127 = *a2;
      v128 = v126 - (_QWORD)*a2;
      v129 = (v128 >> 4) + 1;
      if (v129 >> 60)
        abort();
      v130 = v125 - (_QWORD)v127;
      if (v130 >> 3 > v129)
        v129 = v130 >> 3;
      if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
        v131 = 0xFFFFFFFFFFFFFFFLL;
      else
        v131 = v129;
      v90 = v170;
      v89 = v171;
      v91 = v169;
      if (v131 >> 60)
        goto LABEL_146;
      v132 = (char *)operator new(16 * v131);
      v133 = (long double *)&v132[16 * (v128 >> 4)];
      *v133 = v124;
      v133[1] = v121;
      v134 = v126 - (_QWORD)v127;
      if ((long double *)v126 == v127)
        goto LABEL_121;
      v135 = v134 - 16;
      v50 = v168;
      if (v134 - 16 >= 0xB0)
      {
        v142 = v135 >> 4;
        if ((unint64_t)&v132[v128 - (v135 & 0xFFFFFFFFFFFFFFF0) - 16] >= v126
          || (v136 = (long double *)&v132[16 * (v128 >> 4)], v126 - 16 * v142 - 16 >= (unint64_t)v133))
        {
          v143 = v142 + 1;
          v144 = (const double *)(v126 - 32);
          v145 = v133 - 4;
          v146 = v143 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v183 = vld2q_f64(v144);
            v147 = v144 - 4;
            v185 = vld2q_f64(v147);
            vst2q_f64(v145, v183);
            v148 = v145 - 4;
            vst2q_f64(v148, v185);
            v145 -= 8;
            v144 -= 8;
            v146 -= 4;
          }
          while (v146);
          v136 = &v133[-2 * (v143 & 0x1FFFFFFFFFFFFFFCLL)];
          v126 -= 16 * (v143 & 0x1FFFFFFFFFFFFFFCLL);
          if (v143 == (v143 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_135;
        }
      }
      else
      {
        v136 = (long double *)&v132[16 * (v128 >> 4)];
      }
      do
      {
        v149 = *(_QWORD *)(v126 - 16);
        v126 -= 16;
        *((_QWORD *)v136 - 2) = v149;
        v136 -= 2;
        v136[1] = *(long double *)(v126 + 8);
      }
      while ((long double *)v126 != v127);
    }
    else
    {
      v115 = a2[1];
      v114 = (unint64_t)a2[2];
      if ((unint64_t)v115 < v114)
      {
        *v115 = v102;
        v115[1] = v101;
        v94 = v115 + 2;
        goto LABEL_91;
      }
      v127 = *a2;
      v137 = (char *)v115 - (char *)*a2;
      v138 = (v137 >> 4) + 1;
      if (v138 >> 60)
        abort();
      v139 = v114 - (_QWORD)v127;
      if (v139 >> 3 > v138)
        v138 = v139 >> 3;
      if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0)
        v131 = 0xFFFFFFFFFFFFFFFLL;
      else
        v131 = v138;
      if (v131 >> 60)
        goto LABEL_146;
      v132 = (char *)operator new(16 * v131);
      v133 = (long double *)&v132[16 * (v137 >> 4)];
      *v133 = v102;
      v133[1] = v101;
      v140 = (char *)v115 - (char *)v127;
      if (v115 == v127)
      {
LABEL_121:
        v136 = v133;
        v50 = v168;
        goto LABEL_135;
      }
      v141 = v140 - 16;
      v50 = v168;
      if ((unint64_t)(v140 - 16) >= 0xB0)
      {
        v150 = v141 >> 4;
        if (&v132[v137 - (v141 & 0xFFFFFFFFFFFFFFF0) - 16] >= (char *)v115
          || (v136 = (long double *)&v132[16 * (v137 >> 4)], &v115[-2 * v150 - 2] >= v133))
        {
          v151 = v150 + 1;
          v152 = v115 - 4;
          v153 = v133 - 4;
          v154 = v151 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v184 = vld2q_f64(v152);
            v155 = v152 - 4;
            v186 = vld2q_f64(v155);
            vst2q_f64(v153, v184);
            v156 = v153 - 4;
            vst2q_f64(v156, v186);
            v153 -= 8;
            v152 -= 8;
            v154 -= 4;
          }
          while (v154);
          v136 = &v133[-2 * (v151 & 0x1FFFFFFFFFFFFFFCLL)];
          v115 -= 2 * (v151 & 0x1FFFFFFFFFFFFFFCLL);
          if (v151 == (v151 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_135;
        }
      }
      else
      {
        v136 = (long double *)&v132[16 * (v137 >> 4)];
      }
      do
      {
        v157 = *((_QWORD *)v115 - 2);
        v115 -= 2;
        *((_QWORD *)v136 - 2) = v157;
        v136 -= 2;
        v136[1] = v115[1];
      }
      while (v115 != v127);
    }
LABEL_135:
    v94 = v133 + 2;
    *a2 = v136;
    a2[1] = v133 + 2;
    a2[2] = (long double *)&v132[16 * v131];
    if (v127)
      operator delete(v127);
LABEL_91:
    a2[1] = v94;
    v86 = ++v87;
  }
  while (v92 > v87);
  v158 = 1;
  if (v38)
LABEL_140:
    operator delete(v38);
  return v158;
}

void sub_19F77A364(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void altitude::GlobeView::updateCameraFrame(altitude::GlobeView *this)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  void **v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t DebugRenderUtil;
  uint64_t v30;
  int *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  std::__shared_weak_count_vtbl *v49;
  unint64_t v50;
  uint64_t v51;
  void (__cdecl **p_on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  float v53;
  __float2 v54;
  float v55;
  __float2 v56;
  unint64_t v57;
  float *v58;
  float v59;
  __float2 v60;
  std::__shared_weak_count_vtbl *v61;
  __int16 *v62;
  uint64_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int16x8_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  char *v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t shared_weak_owners;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  __n128 *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __n128 *v119;
  float v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  float32x4_t v125;
  float32x4_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  int v130;
  unsigned __int8 v131;
  int v132;
  uint64_t v133;
  geo::read_write_lock *v134;
  const char *v135;
  malloc_zone_t *zone;
  int v137;
  uint64_t v138;
  geo::read_write_lock *v139;
  const char *v140;
  malloc_zone_t *v141;
  uint64_t v142;
  uint64_t v143;
  int64x2_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  unint64_t v149;
  uint64_t *v150;
  char *v151;
  __n128 v152;
  unint64_t v153;
  float64x2_t v154[8];
  _BYTE v155[40];
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 416) = 0;
  if (*((_QWORD *)this + 29) != *((_QWORD *)this + 30))
  {
    v2 = *((_QWORD *)this + 27);
    v3 = *(double **)v2;
    if (*(_QWORD *)v2)
    {
      if (v3[2] <= 0.0)
      {
        gettimeofday((timeval *)v155, 0);
        v4 = (double)*(uint64_t *)v155 + (double)*(int *)&v155[8] * 0.000001 - *v3;
      }
      else
      {
        v4 = v3[1] * 0.000001;
      }
    }
    else
    {
      v4 = 0.0;
    }
    v5 = *(double *)(v2 + 24);
    if (v5 == 1.0)
    {
      v7 = *(double *)(v2 + 8);
      v6 = *(double *)(v2 + 16);
    }
    else
    {
      v6 = *(double *)(v2 + 16) + (v4 - *(double *)(v2 + 8)) * v5;
      *(double *)(v2 + 8) = v4;
      *(double *)(v2 + 16) = v6;
      *(_QWORD *)(v2 + 24) = 0x3FF0000000000000;
      v7 = v4;
    }
    v8 = v4 - v7 + v6;
    v9 = *((double *)this + 28);
    *((double *)this + 28) = v8;
    v10 = (double *)*((_QWORD *)this + 29);
    if (v10 != *((double **)this + 30))
    {
      v11 = v8 - v9;
      do
      {
        while (1)
        {
          v12 = v10[1];
          if (v12 < 0.0)
          {
            v10[1] = v8;
            v12 = v8;
          }
          (***(void (****)(_QWORD, double, double))v10)(*(_QWORD *)v10, v8 - v12, v11);
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v10 + 8))(*(_QWORD *)v10))
            break;
          v10 += 5;
          if (v10 == *((double **)this + 30))
            goto LABEL_30;
        }
        if (*(_QWORD *)v10)
          (*(void (**)(_QWORD))(**(_QWORD **)v10 + 24))(*(_QWORD *)v10);
        v13 = v10 + 5;
        v14 = (double *)*((_QWORD *)this + 30);
        if (v10 + 5 == v14)
        {
          v16 = v10;
        }
        else
        {
          v15 = v10;
          do
          {
            *(_OWORD *)v15 = *(_OWORD *)(v15 + 5);
            v18 = (void **)(v15 + 2);
            if (*((char *)v15 + 39) < 0)
              operator delete(*v18);
            *(_OWORD *)v18 = *(_OWORD *)(v15 + 7);
            v15[4] = v15[9];
            *((_BYTE *)v15 + 79) = 0;
            *((_BYTE *)v15 + 56) = 0;
            v16 = v15 + 5;
            v17 = v15 + 10;
            v15 += 5;
          }
          while (v17 != v14);
          v13 = (double *)*((_QWORD *)this + 30);
        }
        while (v13 != v16)
        {
          if (*((char *)v13 - 1) < 0)
            operator delete(*((void **)v13 - 3));
          v13 -= 5;
        }
        *((_QWORD *)this + 30) = v16;
      }
      while (v10 != v16);
    }
  }
LABEL_30:
  v19 = (double *)*((_QWORD *)this + 9);
  if (v19[5] != *((double *)this + 42)
    || v19[6] != *((double *)this + 43)
    || v19[7] != *((double *)this + 44)
    || v19[4] != *((double *)this + 41)
    || v19[1] != *((double *)this + 38)
    || v19[2] != *((double *)this + 39)
    || v19[3] != *((double *)this + 40))
  {
    *((_BYTE *)this + 416) = 1;
    v20 = **(_QWORD **)(*((_QWORD *)this + 107) + 88);
    if (v20)
    {
      v155[0] = 7;
      md::MapEngine::setNeedsTick(v20, v155);
    }
  }
  if (*((_BYTE *)this + 632))
  {
    v147 = *((_QWORD *)this + 58);
    v21 = *(_QWORD *)(v147 + 224);
    pthread_mutex_lock(*(pthread_mutex_t **)(v21 + 112));
    v22 = *(_QWORD *)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 24);
    v24 = v23 - v22;
    if (v23 == v22)
    {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v21 + 112));
    }
    else
    {
      if (0xEEEEEEEEEEEEEEEFLL * (v24 >> 4) >= 0x111111111111112)
        abort();
      v25 = (char *)operator new(v24);
      v26 = 0;
      do
      {
        altitude::TriggerManager::Trigger::Trigger((altitude::TriggerManager::Trigger *)&v25[v26], (const altitude::TriggerManager::Trigger *)(v22 + v26));
        v26 += 240;
      }
      while (v22 + v26 != v23);
      v27 = 240 * (v26 / 240);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v21 + 112));
      if (v27)
      {
        v143 = 240 * (v26 / 240);
        v146 = &v25[v27];
        v28 = v25;
        v145 = v25;
        v144 = vdupq_n_s64(8uLL);
        while (1)
        {
          DebugRenderUtil = altitude::Context::getDebugRenderUtil(*(altitude::Context **)(v147 + 32));
          v30 = DebugRenderUtil;
          v32 = (uint64_t **)(DebugRenderUtil + 32);
          v31 = *(int **)(DebugRenderUtil + 32);
          if (!v31)
            break;
          v33 = DebugRenderUtil + 32;
          v34 = *(_QWORD *)(DebugRenderUtil + 32);
          do
          {
            v35 = *(_DWORD *)(v34 + 32);
            v36 = v35 < 0;
            if (v35 >= 0)
              v37 = (uint64_t *)v34;
            else
              v37 = (uint64_t *)(v34 + 8);
            if (!v36)
              v33 = v34;
            v34 = *v37;
          }
          while (*v37);
          if ((uint64_t **)v33 == v32 || *(int *)(v33 + 32) > 0)
          {
            while (1)
            {
              while (1)
              {
                v39 = v31;
                v40 = v31[8];
                if (v40 < 1)
                  break;
                v31 = (int *)*v39;
                v32 = (uint64_t **)v39;
                if (!*v39)
                  goto LABEL_64;
              }
              if ((v40 & 0x80000000) == 0)
                break;
              v31 = (int *)v39[1];
              if (!v31)
              {
                v32 = (uint64_t **)(v39 + 1);
                goto LABEL_64;
              }
            }
            v151 = v28;
            goto LABEL_67;
          }
          v38 = (uint64_t *)(v33 + 40);
LABEL_130:
          v104 = (_QWORD *)*v38;
          v105 = *((double *)v28 + 8);
          v106 = *(_QWORD *)(*v38 + 16);
          v107 = *(_QWORD *)(*v38 + 24);
          if (v106 == v107)
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v104 + 32))(v155, v104);
            v108 = *(__n128 *)v155;
          }
          else
          {
            v108 = *(__n128 *)(v107 - 16);
            v109 = *(_QWORD *)(v107 - 8);
            if (v109)
            {
              v110 = (unint64_t *)(v109 + 8);
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
              v107 = v104[3];
              v112 = *(std::__shared_weak_count **)(v107 - 8);
              if (v112)
              {
                p_shared_owners = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldaxr(p_shared_owners);
                while (__stlxr(v114 - 1, p_shared_owners));
                if (!v114)
                {
                  v152 = v108;
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                  v108 = v152;
                }
              }
            }
            v104[3] = v107 - 16;
          }
          v115 = (__n128 *)v104[6];
          v116 = (std::__shared_weak_count *)v108.n128_u64[1];
          if ((unint64_t)v115 >= v104[7])
          {
            v153 = v108.n128_u64[0];
            v119 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)(v104 + 5), v108);
            v108.n128_u64[0] = v153;
          }
          else
          {
            *v115 = v108;
            if (v108.n128_u64[1])
            {
              v117 = (unint64_t *)(v108.n128_u64[1] + 8);
              do
                v118 = __ldxr(v117);
              while (__stxr(v118 + 1, v117));
            }
            v119 = v115 + 1;
          }
          v120 = v105;
          v104[6] = v119;
          v121 = *(_QWORD *)(v108.n128_u64[0] + 8);
          v160 = 0;
          v157 = 0u;
          v158 = 0;
          v156 = 0u;
          memset(&v155[8], 0, 32);
          *(_QWORD *)v155 = 0x3FF0000000000000;
          *(_QWORD *)&v156 = 0x3FF0000000000000;
          v159 = 0x3FF0000000000000;
          v163 = 0x3FF0000000000000;
          v161 = *(_OWORD *)(v28 + 40);
          v162 = *((_QWORD *)v28 + 7);
          v122 = *(_QWORD **)(*(_QWORD *)(v121 + 64) + 16);
          v123 = v122[1];
          v124 = v122[9];
          *(_OWORD *)v124 = xmmword_19FFB4810;
          *(float *)(v124 + 32) = v120;
          *(float *)(v124 + 36) = v120;
          *(float *)(v124 + 40) = v120;
          gm::operator*<double,4,4,4>(v154[0].f64, (double *)(v104[1] + 192), (double *)v155);
          v125 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v154[2]), v154[3]);
          *(float32x4_t *)(v124 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v154[0]), v154[1]);
          *(float32x4_t *)(v124 + 64) = v125;
          v126 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v154[6]), v154[7]);
          *(float32x4_t *)(v124 + 80) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v154[4]), v154[5]);
          *(float32x4_t *)(v124 + 96) = v126;
          v127 = v122[8];
          if (v127 <= v123)
            v127 = v123;
          v122[7] = 0;
          v122[8] = v127;
          if (v116)
          {
            v128 = (unint64_t *)&v116->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v28 += 240;
          if (v28 == v146)
          {
            v142 = v143;
            if (v25 != v146)
            {
              do
              {
                (**(void (***)(uint64_t))&v25[v142 - 240])((uint64_t)&v25[v142 - 240]);
                v142 -= 240;
              }
              while (v142);
            }
            goto LABEL_170;
          }
        }
        v39 = (_QWORD *)(DebugRenderUtil + 32);
LABEL_64:
        v41 = v39;
        v39 = operator new(0x30uLL);
        *((_DWORD *)v39 + 8) = 0;
        v39[5] = 0;
        *v39 = 0;
        v39[1] = 0;
        v39[2] = v41;
        *v32 = v39;
        v42 = **(_QWORD **)(v30 + 24);
        v43 = v39;
        if (v42)
        {
          *(_QWORD *)(v30 + 24) = v42;
          v43 = *v32;
        }
        v151 = v28;
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v30 + 32), v43);
        ++*(_QWORD *)(v30 + 40);
LABEL_67:
        v44 = operator new();
        *(_OWORD *)(v44 + 16) = 0u;
        *(_OWORD *)(v44 + 32) = 0u;
        *(_OWORD *)(v44 + 48) = 0u;
        *(_OWORD *)(v44 + 64) = 0u;
        *(_QWORD *)(v44 + 80) = 0;
        *(_QWORD *)v44 = &off_1E42C5688;
        *(_QWORD *)(v44 + 8) = v30;
        *(_OWORD *)(v44 + 88) = 0u;
        *(_OWORD *)(v44 + 104) = 0u;
        v45 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v45->__shared_owners_ = 0;
        v46 = (unint64_t *)&v45->__shared_owners_;
        v45->__shared_weak_owners_ = 0;
        v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFE60;
        ggl::BufferData::BufferData((uint64_t)&v45[1], 32, 0, 0, 6, 10000);
        v45[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7AE0;
        v45[9].__shared_weak_owners_ = (uint64_t)"/renderutil/spherecolor/vertexdata";
        v45[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DebugRenderUtil::p3NVboReflection;
        v45[9].__shared_owners_ = (uint64_t)&unk_1E42B7B00;
        v47 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v47->__shared_owners_ = 0;
        v48 = (unint64_t *)&v47->__shared_owners_;
        v47->__shared_weak_owners_ = 0;
        v47->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        ggl::BufferData::BufferData((uint64_t)&v47[1], 2, 1, 0, 6, 29994);
        LODWORD(v47[10].__vftable) = 0;
        v47[1].__shared_owners_ = 2;
        v47[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v47[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v47[9].__shared_weak_owners_ = (uint64_t)"/renderutil/spherecolor/indexdata";
        v149 = 10000 * v45[1].__shared_owners_;
        if (v149)
          v49 = v45[4].__vftable;
        else
          v49 = 0;
        v50 = 0;
        v51 = 0;
        v150 = v39 + 5;
        v148 = v49;
        p_on_zero_shared_weak = &v49->__on_zero_shared_weak;
        do
        {
          v53 = (double)v50 * 0.0628;
          v54 = __sincosf_stret(v53);
          v55 = (double)++v50 * 0.0628;
          v56 = __sincosf_stret(v55);
          v57 = 0;
          v58 = (float *)&p_on_zero_shared_weak[4 * v51];
          v51 += 200;
          do
          {
            v59 = (double)v57 * 0.0628;
            v60 = __sincosf_stret(v59);
            *(v58 - 8) = v60.__cosval * v54.__sinval;
            *(v58 - 7) = v60.__sinval * v54.__sinval;
            *(v58 - 6) = v54.__cosval;
            *(v58 - 4) = v60.__cosval * v54.__sinval;
            *(v58 - 3) = v60.__sinval * v54.__sinval;
            *(v58 - 2) = v54.__cosval;
            *v58 = v60.__cosval * v56.__sinval;
            v58[1] = v60.__sinval * v56.__sinval;
            v58[2] = v56.__cosval;
            v58[4] = v60.__cosval * v56.__sinval;
            v58[5] = v60.__sinval * v56.__sinval;
            v58[6] = v56.__cosval;
            ++v57;
            v58 += 16;
          }
          while (v57 != 100);
        }
        while (v50 != 50);
        v61 = v47[4].__vftable;
        v62 = (__int16 *)v61;
        v63 = 9992;
        v64 = (int64x2_t)xmmword_19FFB3000;
        v65 = (int64x2_t)xmmword_19FFB2FF0;
        v66 = (int64x2_t)xmmword_19FFB2FE0;
        v67 = (int64x2_t)xmmword_19FFB2FD0;
        v68 = (int16x8_t)xmmword_19FFB47E0;
        v69.i64[0] = 0x1000100010001;
        v69.i64[1] = 0x1000100010001;
        v70.i64[0] = 0x8000800080008;
        v70.i64[1] = 0x8000800080008;
        do
        {
          v71 = (int8x16_t)vdupq_n_s64(1uLL);
          v72 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v64, v71)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v65, v71))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v66, v71)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v67, v71))));
          v73 = vaddq_s16((int16x8_t)vornq_s8((int8x16_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFEFFFEFFFEFFFELL, 0xFFFEFFFEFFFEFFFELL)), v72), v68);
          v74 = vaddq_s16((int16x8_t)vorrq_s8(v72, v69), v68);
          vst3q_s16(v62, *(int16x8x3_t *)(&v68 - 2));
          v62 += 24;
          v66 = vaddq_s64(v66, v144);
          v65 = vaddq_s64(v65, v144);
          v64 = vaddq_s64(v64, v144);
          v67 = vaddq_s64(v67, v144);
          v68 = vaddq_s16(v68, v70);
          v63 -= 8;
        }
        while (v63);
        *(_OWORD *)&v61[1498].__on_zero_shared_weak = xmmword_19FFB47F0;
        *(_OWORD *)&v61[1499].~__shared_weak_count_0 = xmmword_19FFB4800;
        LODWORD(v61[1499].__get_deleter) = 655304461;
        v75 = (char *)operator new(0xA8uLL);
        *((_QWORD *)v75 + 1) = 0;
        *((_QWORD *)v75 + 2) = 0;
        *(_QWORD *)v75 = &off_1E42DF3A8;
        do
          v76 = __ldxr(v46);
        while (__stxr(v76 + 1, v46));
        v77 = &unk_1ECE44000;
        do
          v78 = __ldxr(v48);
        while (__stxr(v78 + 1, v48));
        if ((v79 & 1) == 0)
        {
          v77 = (_QWORD *)&unk_1ECE44000;
          if (v130)
          {
            if ((v131 & 1) == 0
            {
              ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DebugRenderUtil::p3NVboReflection;
            }
            ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::attributesReflection(void)::r;
            unk_1EE576240 = 1;
            v77 = (_QWORD *)&unk_1ECE44000;
          }
        }
        *((_QWORD *)v75 + 11) = 0;
        *((_QWORD *)v75 + 7) = 0;
        *((_QWORD *)v75 + 8) = 0;
        *((_DWORD *)v75 + 18) = 0;
        *((_QWORD *)v75 + 3) = &off_1E42BBC08;
        *((_QWORD *)v75 + 4) = "/renderutil/spherecolor/mesh";
        *((_QWORD *)v75 + 5) = &unk_1E42BBC28;
        *((_QWORD *)v75 + 6) = 0;
        *((_QWORD *)v75 + 10) = &ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::typedReflection(void)::r;
        *((_QWORD *)v75 + 12) = 0;
        *((_QWORD *)v75 + 13) = 0;
        if ((v80 & 1) == 0)
        {
          v77 = (_QWORD *)&unk_1ECE44000;
          if (v132)
          {
            v133 = operator new();
            *(_QWORD *)(v133 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v133 + 24) = "GeoGL";
            *(_OWORD *)(v133 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v133 = &off_1E42B5668;
            *(_QWORD *)(v133 + 8) = "GeoGL";
            *(_OWORD *)(v133 + 72) = 0u;
            *(_OWORD *)(v133 + 88) = 0u;
            *(_OWORD *)(v133 + 104) = 0u;
            *(_OWORD *)(v133 + 120) = 0u;
            *(_OWORD *)(v133 + 136) = 0u;
            *(_OWORD *)(v133 + 152) = 0u;
            *(_OWORD *)(v133 + 168) = 0u;
            *(_OWORD *)(v133 + 184) = 0u;
            *(_OWORD *)(v133 + 200) = 0u;
            *(_OWORD *)(v133 + 216) = 0u;
            *(_OWORD *)(v133 + 232) = 0u;
            *(_QWORD *)(v133 + 248) = 0;
            *(_OWORD *)(v133 + 56) = 0u;
            v134 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v133 + 56), 0);
            if ((_DWORD)v134)
              geo::read_write_lock::logFailure(v134, (uint64_t)"initialization", v135);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v133 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v133 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v133;
            v77 = &unk_1ECE44000;
          }
        }
        v81 = v77[495];
        *((_QWORD *)v75 + 18) = 0;
        *((_QWORD *)v75 + 15) = 0;
        *((_QWORD *)v75 + 16) = 0;
        *((_QWORD *)v75 + 14) = v81;
        if ((v81 & 1) == 0)
        {
          v77 = (_QWORD *)&unk_1ECE44000;
          if (v137)
          {
            v138 = operator new();
            *(_QWORD *)(v138 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v138 + 24) = "GeoGL";
            *(_OWORD *)(v138 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v138 = &off_1E42B5668;
            *(_QWORD *)(v138 + 8) = "GeoGL";
            *(_OWORD *)(v138 + 72) = 0u;
            *(_OWORD *)(v138 + 88) = 0u;
            *(_OWORD *)(v138 + 104) = 0u;
            *(_OWORD *)(v138 + 120) = 0u;
            *(_OWORD *)(v138 + 136) = 0u;
            *(_OWORD *)(v138 + 152) = 0u;
            *(_OWORD *)(v138 + 168) = 0u;
            *(_OWORD *)(v138 + 184) = 0u;
            *(_OWORD *)(v138 + 200) = 0u;
            *(_OWORD *)(v138 + 216) = 0u;
            *(_OWORD *)(v138 + 232) = 0u;
            *(_QWORD *)(v138 + 248) = 0;
            *(_OWORD *)(v138 + 56) = 0u;
            v139 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v138 + 56), 0);
            if ((_DWORD)v139)
              geo::read_write_lock::logFailure(v139, (uint64_t)"initialization", v140);
            v141 = malloc_create_zone(0, 0);
            *(_QWORD *)(v138 + 48) = v141;
            malloc_set_zone_name(v141, "GeoGL");
            *(_QWORD *)(v138 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v138;
            v77 = &unk_1ECE44000;
          }
        }
        *((_QWORD *)v75 + 19) = v77[495];
        *((_QWORD *)v75 + 20) = 0;
        *((_QWORD *)v75 + 17) = v75 + 144;
        *((_QWORD *)v75 + 3) = &off_1E42BD778;
        *((_QWORD *)v75 + 5) = &unk_1E42BD798;
        *(_QWORD *)v155 = v45 + 1;
        *(_QWORD *)&v155[8] = v45;
        do
          v82 = __ldxr(v46);
        while (__stxr(v82 + 1, v46));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)(v75 + 88), (uint64_t *)v155, (uint64_t *)&v155[16], 1uLL);
        v83 = *(std::__shared_weak_count **)&v155[8];
        if (*(_QWORD *)&v155[8])
        {
          v84 = (unint64_t *)(*(_QWORD *)&v155[8] + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        do
          v86 = __ldxr(v48);
        while (__stxr(v86 + 1, v48));
        v87 = (std::__shared_weak_count *)*((_QWORD *)v75 + 16);
        *((_QWORD *)v75 + 15) = v47 + 1;
        *((_QWORD *)v75 + 16) = v47;
        if (v87)
        {
          v88 = (unint64_t *)&v87->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        *((_QWORD *)v75 + 3) = &off_1E42B6E88;
        *((_QWORD *)v75 + 5) = &unk_1E42B6EA8;
        do
          v90 = __ldaxr(v48);
        while (__stlxr(v90 - 1, v48));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        do
          v91 = __ldaxr(v46);
        while (__stlxr(v91 - 1, v46));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        v92 = *(std::__shared_weak_count **)(v44 + 96);
        *(_QWORD *)(v44 + 88) = v75 + 24;
        *(_QWORD *)(v44 + 96) = v75;
        v38 = v150;
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v95 = operator new(0xF0uLL);
        v95[1] = 0;
        v95[2] = 0;
        *v95 = &off_1E42DEA08;
        v95[5] = 0;
        v95[6] = 0;
        v95[4] = 0;
        *((_DWORD *)v95 + 14) = 0;
        *(_QWORD *)((char *)v95 + 60) = 65537;
        *((_DWORD *)v95 + 17) = 0;
        v95[9] = 1;
        *((_WORD *)v95 + 40) = 0;
        *((_BYTE *)v95 + 82) = 3;
        *(_QWORD *)((char *)v95 + 91) = 0;
        *(_QWORD *)((char *)v95 + 83) = 0;
        *((_BYTE *)v95 + 99) = 0;
        *(_QWORD *)((char *)v95 + 148) = 0;
        *(_QWORD *)((char *)v95 + 156) = 0;
        *((_WORD *)v95 + 106) = 257;
        v95[27] = 0;
        v95[28] = 0;
        *((_BYTE *)v95 + 232) = 0;
        v96 = *(std::__shared_weak_count **)(v44 + 112);
        *(_QWORD *)(v44 + 112) = v95;
        v95[3] = &off_1E42B5DE8;
        *(_QWORD *)(v44 + 104) = v95 + 3;
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        shared_weak_owners = v47[3].__shared_weak_owners_;
        if (shared_weak_owners <= 0xEA54)
          shared_weak_owners = 59988;
        v47[3].__shared_owners_ = 0;
        v47[3].__shared_weak_owners_ = shared_weak_owners;
        if (v148 && v149)
        {
          v100 = v45[3].__shared_weak_owners_;
          if (v100 <= v149)
            v100 = v149;
          v45[3].__shared_owners_ = 0;
          v45[3].__shared_weak_owners_ = v100;
        }
        do
          v101 = __ldaxr(v48);
        while (__stlxr(v101 - 1, v48));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        v25 = v145;
        do
          v102 = __ldaxr(v46);
        while (__stlxr(v102 - 1, v46));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        v103 = *v150;
        *v150 = v44;
        if (v103)
          (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
        v28 = v151;
        goto LABEL_130;
      }
LABEL_170:
      operator delete(v25);
    }
  }
}

void altitude::GlobeView::update(altitude::GlobeView *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  altitude::QuickSurfaceManager *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  altitude::GlobeCleanupLoader *v20;
  unsigned int v21;
  _QWORD **v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v29;
  unsigned int *v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t **v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  float v53;
  float v54;
  unsigned int v55;
  float v56;
  char *MainTileLoaderStatistics;
  unint64_t v58;
  double v59;
  unsigned int v60;
  float v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unint64_t v69;
  double v70;
  char v71;
  float v72;
  float v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int64x2_t v90;
  double v91;
  float v92;
  long double v93;
  long double v94;
  long double v95;
  long double v96;
  double v97;
  long double v98;
  long double v99;
  long double v100;
  long double v101;
  double v102;
  long double v103;
  long double v104;
  long double v105;
  long double v106;
  double v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  const void *v142;
  int64_t v143;
  char *v144;
  char *v145;
  uint64_t *v146;
  int v147;
  uint64_t **v148;
  uint64_t **v149;
  uint64_t **v150;
  int v151;
  uint64_t *v152;
  _DWORD *v153;
  char *v154;
  uint64_t v155;
  int v156;
  uint64_t *v157;
  uint64_t **v158;
  uint64_t **v159;
  int v160;
  uint64_t *v161;
  _DWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *p_shared_owners;
  unint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  int v170;
  uint64_t **v171;
  uint64_t *v172;
  int v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  _DWORD *v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t *v189;
  uint64_t **v190;
  uint64_t **v191;
  uint64_t *v192;
  int v193;
  uint64_t *v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t **v198;
  uint64_t **v199;
  int v200;
  uint64_t *v201;
  _DWORD *v202;
  int v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  int *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  unint64_t *v214;
  unint64_t *v215;
  char *__p;
  double v217;
  __int128 v218;
  _OWORD v219[3];
  uint64_t v220;
  int64x2_t v221;
  float64x2_t v222;
  __int128 v223;
  double v224;
  int v225[3];

  v2 = *((_QWORD *)this + 58);
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 66) + 24))(*((_QWORD *)this + 66), 0, 0xFFFFFFFFLL);
  v5 = v3;
  v7 = (uint64_t **)(v2 + 96);
  v6 = *(char **)(v2 + 96);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_QWORD *)v6 + 4);
        if (v9 <= v3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= v3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(v2 + 96);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x60uLL);
    *((_QWORD *)v8 + 4) = v5;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((_QWORD *)v8 + 9) = 0;
    *((_OWORD *)v8 + 5) = xmmword_19FFB37D0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(v2 + 88);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(v2 + 88) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 96), v12);
    ++*(_QWORD *)(v2 + 104);
  }
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 69)
    || (v13 = *((_DWORD *)v8 + 11), v13 >= 2) && (LODWORD(v4) = *((_DWORD *)v8 + 13), (double)v4 / (double)v13 >= 1.0))
  {
    v14 = (altitude::QuickSurfaceManager *)*((_QWORD *)this + 88);
    altitude::QuickSurfaceManager::clear(v14);
    *((_BYTE *)v14 + 64) = 0;
  }
  v15 = *((_QWORD *)this + 58);
  if (v15)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15))
    {
      v16 = *((_DWORD *)v8 + 11);
      if (v16)
        v17 = *((_DWORD *)v8 + 15) < v16;
      else
        v17 = 1;
    }
    else
    {
      v17 = 0;
    }
    atomic_store(v17, (unsigned __int8 *)this + 832);
  }
  else
  {
    atomic_store(0, (unsigned __int8 *)this + 832);
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 75));
  if (*((_BYTE *)this + 416) || *((_QWORD *)this + 74) >= 0x21uLL)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 73));
    *((_QWORD *)this + 72) = (char *)this + 584;
    *((_QWORD *)this + 74) = 0;
    *((_QWORD *)this + 73) = 0;
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 75));
  v18 = *((_QWORD *)this + 53);
  if (v18 && *(_BYTE *)(v18 + 88))
  {
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(altitude::GlobeCleanupLoader **)(v19 + 448);
    if (v20)
    {
      v21 = *(_DWORD *)(*((_QWORD *)v20 + 4) + 88) + 1;
      altitude::GlobeCleanupLoader::pruneLabelDataComponents(v20, v21, v21);
      v19 = *(_QWORD *)(v18 + 16);
    }
    v22 = *(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 856) + 136) + 8) + 40)
                                  + 40)
                      + 56);
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22[13] + 120))(v22[13]);
      (*(void (**)(_QWORD *))(*v22[14] + 120))(v22[14]);
      (*(void (**)(_QWORD *))(*v22[15] + 120))(v22[15]);
      (*(void (**)(_QWORD *))(*v22[16] + 120))(v22[16]);
    }
    *(_BYTE *)(v18 + 88) = 0;
  }
  v23 = (unsigned int *)*((_QWORD *)this + 4);
  if (v23)
  {
    *((_BYTE *)v23 + 65) = 0;
    v24 = *((_QWORD *)v23 + 4);
    if (!v24)
    {
      *((_BYTE *)v23 + 64) = 0;
      goto LABEL_66;
    }
    v25 = (unsigned int *)*((_QWORD *)v23 + 2);
    v26 = *v23;
    v27 = v24 - 1;
    if (v27 <= v26)
    {
      *v23 = 0;
    }
    else if ((_DWORD)v26)
    {
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v25 + 1);
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(unsigned int **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (unsigned int *)*((_QWORD *)v25 + 2);
            v31 = *(_QWORD *)v30 == (_QWORD)v25;
            v25 = v30;
          }
          while (!v31);
        }
        v25 = v30;
      }
      while (v26-- > 1);
      goto LABEL_48;
    }
    v30 = v25;
LABEL_48:
    if (v27 >= *((_QWORD *)v23 + 1))
      v27 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v23 + 1) = v27;
    if (v30 != v23 + 6)
    {
      v32 = 10;
      v33 = 100;
      do
      {
        if (altitude::Anchor::update(*((altitude::Anchor **)v30 + 4)))
        {
          --v32;
          *((_BYTE *)v23 + 65) = 1;
        }
        if (*(_BYTE *)(*((_QWORD *)v30 + 4) + 96))
        {
          *((_BYTE *)v23 + 64) = 1;
          v34 = *v23;
          *((_QWORD *)v23 + 1) = v34;
        }
        else
        {
          v34 = *v23;
          if (*((_QWORD *)v23 + 1) == v34)
            *((_BYTE *)v23 + 64) = 0;
        }
        *v23 = v34 + 1;
        v35 = (unsigned int *)*((_QWORD *)v30 + 1);
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = *(unsigned int **)v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (unsigned int *)*((_QWORD *)v30 + 2);
            v31 = *(_QWORD *)v36 == (_QWORD)v30;
            v30 = v36;
          }
          while (!v31);
        }
        if (v32 < 1)
          break;
        if (v33 < 2)
          break;
        --v33;
        v30 = v36;
      }
      while (v36 != v23 + 6);
    }
  }
LABEL_66:
  v37 = *((_QWORD *)this + 78);
  if (!v37)
    goto LABEL_183;
  v38 = *(_QWORD *)(v37 + 80);
  if (!v38 || *(_DWORD *)(v37 + 116) != 1)
    goto LABEL_183;
  v39 = *(_QWORD **)(v37 + 184);
  v40 = *(_QWORD *)(*(_QWORD *)(v38 + 8) + 120) + 32 * *(unsigned int *)(v38 + 24);
  if (*(char *)(v40 + 31) < 0)
    v41 = *(_QWORD *)(v40 + 16);
  else
    v41 = *(unsigned __int8 *)(v40 + 31);
  v42 = fmin(*(double *)(*(_QWORD *)(v37 + 32) + 96), 0.0666666667);
  v43 = *(double *)(v39[9] + 32);
  v44 = v39[58];
  v45 = v39[64];
  v47 = (uint64_t **)(v44 + 96);
  v46 = *(char **)(v44 + 96);
  if (v46)
  {
    while (1)
    {
      while (1)
      {
        v48 = v46;
        v49 = *((_QWORD *)v46 + 4);
        if (v49 <= v45)
          break;
        v46 = *(char **)v48;
        v47 = (uint64_t **)v48;
        if (!*(_QWORD *)v48)
          goto LABEL_79;
      }
      if (v49 >= v45)
        break;
      v46 = (char *)*((_QWORD *)v48 + 1);
      if (!v46)
      {
        v47 = (uint64_t **)(v48 + 8);
        goto LABEL_79;
      }
    }
  }
  else
  {
    v48 = (char *)(v44 + 96);
LABEL_79:
    v50 = v48;
    v48 = (char *)operator new(0x60uLL);
    *((_QWORD *)v48 + 4) = v45;
    *(_OWORD *)(v48 + 40) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *((_QWORD *)v48 + 9) = 0;
    *((_OWORD *)v48 + 5) = xmmword_19FFB37D0;
    *(_QWORD *)v48 = 0;
    *((_QWORD *)v48 + 1) = 0;
    *((_QWORD *)v48 + 2) = v50;
    *v47 = (uint64_t *)v48;
    v51 = **(_QWORD **)(v44 + 88);
    v52 = (uint64_t *)v48;
    if (v51)
    {
      *(_QWORD *)(v44 + 88) = v51;
      v52 = *v47;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v44 + 96), v52);
    ++*(_QWORD *)(v44 + 104);
  }
  v53 = v42;
  v54 = fminf(fmaxf(*(float *)(v37 + 92), *(float *)(v37 + 88)), *(float *)(v37 + 88) + 30.0);
  *(float *)(v37 + 92) = v54;
  v55 = *((_DWORD *)v48 + 11);
  if (!v55 || (float)((float)*((unsigned int *)v48 + 15) / (float)v55) > 0.6)
  {
    v56 = v54 + v53 * 3.0;
    *(float *)(v37 + 92) = v56;
  }
  MainTileLoaderStatistics = altitude::GlobeView::getMainTileLoaderStatistics(*(altitude::GlobeView **)(*(_QWORD *)(v37 + 184) + 464), *(_QWORD *)(*(_QWORD *)(v37 + 184) + 528));
  v59 = *(double *)(v37 + 104);
  v60 = *((_DWORD *)MainTileLoaderStatistics + 1);
  if (v60)
  {
    v61 = *(float *)(v37 + 112);
    if (fabsf(v61 + -1.0) <= 0.001)
    {
      LODWORD(v58) = *((_DWORD *)MainTileLoaderStatistics + 2);
      v63 = (double)v58 / (double)v60;
      v64 = v63;
      LODWORD(v63) = *((_DWORD *)MainTileLoaderStatistics + 4);
      *(float *)&v63 = 1.0 - (double)*(unint64_t *)&v63 / (double)v60;
      v65 = fminf(cbrtf(*(float *)&v63), v64);
      if (v43 < 5000000.0)
      {
        v66 = 1.0;
        v67 = fminf(fmaxf((float)(*(float *)(v37 + 92) - *(float *)(v37 + 88)) * 0.04, 0.0), 1.0);
        if (v41)
          v66 = v67;
        v65 = fminf(fmaxf(v66 * v67, 0.2), v65);
      }
      v68 = v65 - v59;
      v62 = v59 + (float)((float)(v53 * 0.1) * v68);
    }
    else
    {
      v62 = v61;
    }
  }
  else
  {
    v62 = 0.0;
  }
  *(double *)(v37 + 104) = v62;
  v69 = (unint64_t)(100.0 - v62 * 100.0);
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  atomic_store(v69, (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 168));
  v70 = *(double *)(v37 + 104);
  if (v70 < 0.800000012 && v59 > 0.800000012)
  {
    v71 = 1;
LABEL_102:
    *(_BYTE *)(v37 + 252) = v71;
    goto LABEL_103;
  }
  if (v70 > 0.800000012 && v59 < 0.800000012)
  {
    v71 = 0;
    goto LABEL_102;
  }
LABEL_103:
  v72 = v70 * v53;
  v73 = fmaxf(*(float *)(v37 + 88) + v72, 0.0);
  *(float *)(v37 + 88) = v73;
  v74 = *(_QWORD *)(v37 + 80);
  v75 = v73;
  *(double *)(v74 + 32) = v75;
  v76 = *(_QWORD *)(v74 + 8);
  if (!v76)
    goto LABEL_131;
  v77 = *(unsigned int *)(v74 + 16);
  v78 = *(unsigned int *)(v74 + 24);
  v79 = v75 / *(double *)(v76 + 144);
  v80 = *(_QWORD *)(v76 + 120);
  if (v79 >= *(float *)(v80 + 32 * v78 + 4))
  {
    v84 = ((*(_QWORD *)(v76 + 128) - v80) >> 5) - 1;
    if (v84 > v78)
    {
      v81 = *(unsigned int *)(v74 + 24);
      v85 = *(_DWORD *)(v74 + 24);
      while (v79 >= *(float *)(v80 + 32 * v81 + 4))
      {
        v81 = ++v85;
        if (v84 <= v85)
          goto LABEL_119;
      }
      LODWORD(v81) = v85;
      goto LABEL_119;
    }
  }
  else if ((_DWORD)v78)
  {
    LODWORD(v81) = *(_DWORD *)(v74 + 24);
    if (v79 < *(float *)(v80 + 32 * v78))
    {
      v82 = (float *)(v80 + 32 * v78);
      v83 = *(_DWORD *)(v74 + 24);
      while (v79 < *v82)
      {
        v82 -= 8;
        if (!--v83)
        {
          LODWORD(v81) = 0;
          goto LABEL_119;
        }
      }
      LODWORD(v81) = v83;
    }
    goto LABEL_119;
  }
  LODWORD(v81) = *(_DWORD *)(v74 + 24);
LABEL_119:
  *(_DWORD *)(v74 + 24) = v81;
  v86 = *(_QWORD *)(v76 + 72);
  if (v79 >= *(double *)(v86 + 8 * v77))
  {
    v88 = v77;
    do
    {
      LODWORD(v87) = v88;
      if (((*(_QWORD *)(v76 + 80) - v86) >> 3) - 1 <= (unint64_t)v88)
        break;
      ++v88;
    }
    while (v79 > *(double *)(v86 + 8 * v88));
  }
  else if ((_DWORD)v77)
  {
    v87 = v77;
    do
    {
      if (v79 >= *(double *)(v86 + 8 * v87))
        break;
      --v87;
    }
    while ((_DWORD)v87);
  }
  else
  {
    LODWORD(v87) = 0;
  }
  *(_DWORD *)(v74 + 16) = v87;
  *(_BYTE *)(v74 + 42) = (_DWORD)v78 != (_DWORD)v81;
  *(_BYTE *)(v74 + 40) = (v87 - v77) > 1;
LABEL_131:
  v89 = *(_QWORD *)(v37 + 176);
  if (v89 && *(_BYTE *)(v74 + 42))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 48))(v89, *(_QWORD *)(v76 + 120) + 32 * *(unsigned int *)(v74 + 24) + 8);
    v74 = *(_QWORD *)(v37 + 80);
    v76 = *(_QWORD *)(v74 + 8);
  }
  if (v76)
  {
    *(double *)v90.i64 = altitude::AnimationData::interpolateFrames((altitude::AnimationData *)&v221, *(double *)(v74 + 32), v76, *(_DWORD *)(v74 + 16));
  }
  else
  {
    v90 = vdupq_n_s64(0xC00921FB54442D18);
    v221 = v90;
    v222 = 0u;
    v223 = 0u;
    v224 = 0.0;
  }
  v90.i32[0] = *(_DWORD *)(v37 + 248);
  if (*(float *)v90.i32 > 0.0)
  {
    *(float *)v90.i32 = 1.0 - *(float *)v90.i32;
    (*((void (**)(double))VKAnimationCurveEaseOut + 2))(*(double *)v90.i64);
    v91 = *(double *)(v37 + 192);
    v217 = v92;
    v93 = fmod(3.14159265 - v91 + *(double *)v221.i64, 6.28318531);
    v94 = fmod(v93 + 6.28318531, 6.28318531);
    v95 = fmod(v91 + 3.14159265 + (v94 + -3.14159265) * v217, 6.28318531);
    v96 = fmod(v95 + 6.28318531, 6.28318531) + -3.14159265;
    v97 = *(double *)(v37 + 200);
    v98 = fmod(3.14159265 - v97 + *(double *)&v221.i64[1], 6.28318531);
    v99 = fmod(v98 + 6.28318531, 6.28318531);
    v100 = fmod(v97 + 3.14159265 + (v99 + -3.14159265) * v217, 6.28318531);
    v101 = fmod(v100 + 6.28318531, 6.28318531) + -3.14159265;
    v102 = *(double *)(v37 + 232);
    v103 = fmod(3.14159265 - v102 + *((double *)&v223 + 1), 6.28318531);
    v104 = fmod(v103 + 6.28318531, 6.28318531);
    v105 = fmod(v102 + 3.14159265 + (v104 + -3.14159265) * v217, 6.28318531);
    v106 = fmod(v105 + 6.28318531, 6.28318531);
    v107 = *(double *)(v37 + 224) + (*(double *)&v223 - *(double *)(v37 + 224)) * v217;
    v108 = *(double *)(v37 + 240) + (v224 - *(double *)(v37 + 240)) * v217;
    *(long double *)v221.i64 = v96;
    *(long double *)&v221.i64[1] = v101;
    v222 = vmlaq_n_f64(*(float64x2_t *)(v37 + 208), vsubq_f64(v222, *(float64x2_t *)(v37 + 208)), v217);
    *(double *)&v223 = v107;
    *((double *)&v223 + 1) = v106 + -3.14159265;
    v224 = v108;
    *(float *)(v37 + 248) = *(float *)(v37 + 248) + (float)(v53 * -0.66667);
  }
  v109 = *(_QWORD *)(v37 + 184);
  v110 = *(_QWORD *)(v109 + 72);
  *(int64x2_t *)(v110 + 8) = v221;
  *(float64x2_t *)(v110 + 24) = v222;
  *(_OWORD *)(v110 + 40) = v223;
  *(double *)(v110 + 56) = v224;
  ++*(_DWORD *)(v109 + 376);
  if (v43 >= 5000000.0)
  {
    v111 = *(float *)(v37 + 88);
    *(float *)(v37 + 92) = v111;
  }
  else
  {
    v111 = *(float *)(v37 + 92);
  }
  v112 = *(_QWORD *)(v37 + 80);
  v113 = *(_QWORD *)(v112 + 8);
  if (!v113)
  {
    v219[0] = vdupq_n_s64(0xC00921FB54442D18);
    memset(&v219[1], 0, 32);
    v218 = 0u;
    v220 = 0;
    v119 = *(_QWORD *)(v37 + 184);
    v120 = 0;
LABEL_155:
    v122 = 0.0;
    goto LABEL_156;
  }
  v114 = v111;
  v115 = v114 / *(double *)(v113 + 144);
  v116 = *(unsigned int *)(v112 + 20);
  v117 = *(_QWORD *)(v113 + 72);
  if (v115 >= *(double *)(v117 + 8 * v116))
  {
    do
    {
      v118 = v116;
      if (((*(_QWORD *)(v113 + 80) - v117) >> 3) - 1 <= (unint64_t)v116)
        break;
      LODWORD(v116) = v116 + 1;
    }
    while (v115 > *(double *)(v117 + 8 * v116));
  }
  else if ((_DWORD)v116)
  {
    while (v115 < *(double *)(v117 + 8 * v116))
    {
      if (!(_DWORD)--v116)
        goto LABEL_147;
    }
    v118 = v116;
  }
  else
  {
LABEL_147:
    v118 = 0;
  }
  *(_DWORD *)(v112 + 20) = v118;
  altitude::AnimationData::interpolateFrames((altitude::AnimationData *)v219, v114, v113, v118);
  v120 = *((_QWORD *)&v219[2] + 1);
  v121 = *(_QWORD *)(*(_QWORD *)(v37 + 80) + 8);
  v119 = *(_QWORD *)(v37 + 184);
  v218 = *(_OWORD *)((char *)&v219[1] + 8);
  if (!v121)
    goto LABEL_155;
  v122 = *(double *)(v121 + 144);
LABEL_156:
  *(double *)(v119 + 264) = v122 - *(float *)(v37 + 88);
  *(std::chrono::steady_clock::time_point *)(v119 + 256) = std::chrono::steady_clock::now();
  v123 = *(_QWORD *)(v119 + 504);
  if (v123)
  {
    *(_QWORD *)(v123 + 64) = *(_QWORD *)&v219[1];
    *(_OWORD *)(v123 + 48) = v219[0];
    *(_OWORD *)(v123 + 72) = v218;
    *(_QWORD *)(v123 + 88) = v120;
    if (*(_QWORD *)(v119 + 504))
      *(_QWORD *)(*(_QWORD *)(v119 + 512) + 1296) = 0xF424000000002;
  }
  v124 = *(float *)(v37 + 88);
  v125 = *(_QWORD *)(*(_QWORD *)(v37 + 80) + 8);
  if (v125)
  {
    if (*(double *)(v125 + 144) > v124)
      goto LABEL_183;
  }
  else if (v124 < 0.0)
  {
    goto LABEL_183;
  }
  if (*(_DWORD *)(v37 + 116) != 2)
  {
    *(_DWORD *)(v37 + 116) = 2;
    v126 = *(_QWORD *)(v37 + 184);
    if (v126)
      *(_QWORD *)(v126 + 264) = 0;
    v127 = *(_QWORD *)(v37 + 144);
    if (v127)
    {
      if (v125)
        v128 = *(double *)(v125 + 144);
      else
        v128 = 0.0;
      if (v128 > v124)
        v129 = 3;
      else
        v129 = 5;
      v225[0] = v129;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v127 + 48))(v127, v225);
      v130 = *(_QWORD **)(v37 + 144);
      *(_QWORD *)(v37 + 144) = 0;
      if (v130 == (_QWORD *)(v37 + 120))
      {
        v131 = 4;
        v130 = (_QWORD *)(v37 + 120);
      }
      else
      {
        if (!v130)
        {
LABEL_178:
          v132 = *(_QWORD **)(v37 + 176);
          *(_QWORD *)(v37 + 176) = 0;
          if (v132 == (_QWORD *)(v37 + 152))
          {
            v133 = 4;
            v132 = (_QWORD *)(v37 + 152);
            goto LABEL_182;
          }
          if (v132)
          {
            v133 = 5;
LABEL_182:
            (*(void (**)(void))(*v132 + 8 * v133))();
            goto LABEL_183;
          }
          goto LABEL_183;
        }
        v131 = 5;
      }
      (*(void (**)(void))(*v130 + 8 * v131))();
      goto LABEL_178;
    }
  }
LABEL_183:
  if ((double)(std::chrono::steady_clock::now().__d_.__rep_ - *((_QWORD *)this + 32)) * 0.000000001 >= *((double *)this + 33))
  {
    v134 = *((_QWORD *)this + 64);
    if (v134)
    {
      if (*(_DWORD *)(v134 + 1296))
      {
        *(_DWORD *)(v134 + 1296) = 0;
        *(_DWORD *)(*((_QWORD *)this + 98) + 1296) = 2;
      }
    }
  }
  v135 = *((_QWORD *)this + 65);
  if (v135)
  {
    v136 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v135 + 24))(v135, 0, 0xFFFFFFFFLL);
    v137 = *((_QWORD *)this + 98);
    karo::graphics::View::copyView(v136, v137);
    *(_BYTE *)(v136 + 1291) = *(_BYTE *)(v137 + 1291);
    *(_DWORD *)(v136 + 1320) = *(_DWORD *)(v137 + 1320);
    *(_QWORD *)(v136 + 1328) = *(_QWORD *)(v137 + 1328);
    *(_QWORD *)(v136 + 1336) = *(_QWORD *)(v137 + 1336);
    *(_DWORD *)(v136 + 1344) = *(_DWORD *)(v137 + 1344);
    v138 = *(_OWORD *)(v137 + 1352);
    v139 = *(_OWORD *)(v137 + 1368);
    *(_QWORD *)(v136 + 1384) = *(_QWORD *)(v137 + 1384);
    *(_OWORD *)(v136 + 1352) = v138;
    *(_OWORD *)(v136 + 1368) = v139;
    *(_DWORD *)(v136 + 1392) = *(_DWORD *)(v137 + 1392);
    *(_QWORD *)(v136 + 1400) = *(_QWORD *)(v137 + 1400);
    *(_QWORD *)(v136 + 1408) = *(_QWORD *)(v137 + 1408);
    *(_QWORD *)(v136 + 1416) = *(_QWORD *)(v137 + 1416);
    *(_QWORD *)(v136 + 1424) = *(_QWORD *)(v137 + 1424);
    *(_QWORD *)(v136 + 1432) = *(_QWORD *)(v137 + 1432);
    *(_QWORD *)(v136 + 1440) = *(_QWORD *)(v137 + 1440);
    *(_QWORD *)(v136 + 1448) = *(_QWORD *)(v137 + 1448);
    *(_QWORD *)(v136 + 1456) = *(_QWORD *)(v137 + 1456);
  }
  if (*((_BYTE *)this + 544))
  {
    v140 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 57) + 56))(*((_QWORD *)this + 57));
    v142 = *(const void **)v140;
    v141 = *(_QWORD *)(v140 + 8);
    v143 = v141 - *(_QWORD *)v140;
    if (v141 == *(_QWORD *)v140)
    {
      v145 = 0;
      __p = 0;
    }
    else
    {
      if (v143 < 0)
        abort();
      v144 = (char *)operator new(v141 - *(_QWORD *)v140);
      v145 = &v144[8 * (v143 >> 3)];
      __p = v144;
      memcpy(v144, v142, v143);
    }
    v146 = 0;
    v147 = 0;
    v221.i64[1] = 0;
    v222.f64[0] = 0.0;
    v148 = (uint64_t **)&v221.i64[1];
    v221.i64[0] = (uint64_t)&v221.i64[1];
    while (1)
    {
      v149 = (uint64_t **)&v221.i64[1];
      v150 = (uint64_t **)&v221.i64[1];
      if (v146)
      {
        do
        {
          while (1)
          {
            v150 = (uint64_t **)v146;
            v151 = *((_DWORD *)v146 + 8);
            if (v151 <= v147)
              break;
            v146 = *v150;
            v149 = v150;
            if (!*v150)
              goto LABEL_203;
          }
          if (v151 >= v147)
          {
            v153 = v150;
            goto LABEL_206;
          }
          v146 = v150[1];
        }
        while (v146);
        v149 = v150 + 1;
      }
LABEL_203:
      v153 = operator new(0x40uLL);
      v153[8] = v147;
      *((_QWORD *)v153 + 6) = 0;
      *((_QWORD *)v153 + 7) = 0;
      *((_QWORD *)v153 + 5) = 0;
      *(_QWORD *)v153 = 0;
      *((_QWORD *)v153 + 1) = 0;
      *((_QWORD *)v153 + 2) = v150;
      *v149 = (uint64_t *)v153;
      v152 = (uint64_t *)v153;
      if (*(_QWORD *)v221.i64[0])
      {
        v221.i64[0] = *(_QWORD *)v221.i64[0];
        v152 = *v149;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v221.i64[1], v152);
      ++*(_QWORD *)&v222.f64[0];
LABEL_206:
      ++v147;
      *((_QWORD *)v153 + 5) = 0;
      *((_QWORD *)v153 + 6) = 0;
      *((_QWORD *)v153 + 7) = 0;
      if (v147 == 24)
        break;
      v146 = (uint64_t *)v221.i64[1];
    }
    if (__p != v145)
    {
      v154 = __p;
      do
      {
        v155 = *(_QWORD *)v154;
        v156 = *(_DWORD *)(*(_QWORD *)v154 + 392);
        v157 = (uint64_t *)v221.i64[1];
        v158 = (uint64_t **)&v221.i64[1];
        v159 = (uint64_t **)&v221.i64[1];
        if (v221.i64[1])
        {
          do
          {
            while (1)
            {
              v159 = (uint64_t **)v157;
              v160 = *((_DWORD *)v157 + 8);
              if (v160 <= v156)
                break;
              v157 = *v159;
              v158 = v159;
              if (!*v159)
                goto LABEL_219;
            }
            if (v160 >= v156)
            {
              v162 = v159;
              goto LABEL_222;
            }
            v157 = v159[1];
          }
          while (v157);
          v158 = v159 + 1;
        }
LABEL_219:
        v162 = operator new(0x40uLL);
        v162[8] = v156;
        *((_QWORD *)v162 + 6) = 0;
        *((_QWORD *)v162 + 7) = 0;
        *((_QWORD *)v162 + 5) = 0;
        *(_QWORD *)v162 = 0;
        *((_QWORD *)v162 + 1) = 0;
        *((_QWORD *)v162 + 2) = v159;
        *v158 = (uint64_t *)v162;
        v161 = (uint64_t *)v162;
        if (*(_QWORD *)v221.i64[0])
        {
          v221.i64[0] = *(_QWORD *)v221.i64[0];
          v161 = *v158;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v221.i64[1], v161);
        ++*(_QWORD *)&v222.f64[0];
LABEL_222:
        ++v162[10];
        v163 = *(_QWORD **)(v155 + 328);
        if (v163)
        {
          v164 = v163[15];
          v165 = (std::__shared_weak_count *)v163[16];
          *(_QWORD *)&v219[0] = v164;
          *((_QWORD *)&v219[0] + 1) = v165;
          if (v165)
          {
            p_shared_owners = (unint64_t *)&v165->__shared_owners_;
            do
              v167 = __ldxr(p_shared_owners);
            while (__stxr(v167 + 1, p_shared_owners));
          }
          if (v164)
          {
            v169 = *(uint64_t **)(v164 + 48);
            v168 = *(uint64_t **)(v164 + 56);
            v170 = *(_DWORD *)(v155 + 392);
            v171 = (uint64_t **)&v221.i64[1];
            v172 = (uint64_t *)v221.i64[1];
            if (v221.i64[1])
            {
              do
              {
                while (1)
                {
                  v171 = (uint64_t **)v172;
                  v173 = *((_DWORD *)v172 + 8);
                  if (v173 <= v170)
                    break;
                  v172 = *v171;
                  v148 = v171;
                  if (!*v171)
                    goto LABEL_235;
                }
                if (v173 >= v170)
                {
                  v175 = v168;
                  v176 = v169;
                  v177 = v171;
                  goto LABEL_238;
                }
                v172 = v171[1];
              }
              while (v172);
              v148 = v171 + 1;
            }
LABEL_235:
            v177 = operator new(0x40uLL);
            v177[8] = v170;
            *((_QWORD *)v177 + 6) = 0;
            *((_QWORD *)v177 + 7) = 0;
            *((_QWORD *)v177 + 5) = 0;
            *(_QWORD *)v177 = 0;
            *((_QWORD *)v177 + 1) = 0;
            *((_QWORD *)v177 + 2) = v171;
            *v148 = (uint64_t *)v177;
            v174 = (uint64_t *)v177;
            if (*(_QWORD *)v221.i64[0])
            {
              v221.i64[0] = *(_QWORD *)v221.i64[0];
              v174 = *v148;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v221.i64[1], v174);
            ++*(_QWORD *)&v222.f64[0];
            v176 = *(uint64_t **)(*(_QWORD *)&v219[0] + 48);
            v175 = *(uint64_t **)(*(_QWORD *)&v219[0] + 56);
LABEL_238:
            v177[11] += (unint64_t)((char *)v168 - (char *)v169) >> 3;
            if (v176 == v175)
            {
              v178 = 0;
            }
            else
            {
              v178 = 0;
              do
              {
                v184 = *v176;
                v185 = *(_QWORD *)(*v176 + 256);
                v186 = *(_QWORD *)(*v176 + 264);
                while (v185 != v186)
                {
                  v187 = *(_QWORD *)(*(_QWORD *)v185 + 16);
                  if (v187)
                    v178 += ggl::pixelFormatPixelsSize(*(_DWORD *)(v187 + 68), *(unsigned int *)(v187 + 80), *(unsigned int *)(v187 + 84));
                  v185 += 8;
                }
                v179 = *(_QWORD *)(v184 + 216);
                v180 = **(_QWORD ***)(v179 + 64);
                v181 = v180[6] - v180[5];
                v182 = *(_QWORD **)(v179 + 96);
                v183 = v182[6] - v182[5];
                v178 = v178 + v181 - v183 % v182[1] - v181 % v180[1] + v183;
                ++v176;
              }
              while (v176 != v175);
            }
            v188 = *(_DWORD *)(v155 + 392);
            v189 = (uint64_t *)v221.i64[1];
            v190 = (uint64_t **)&v221.i64[1];
            v191 = (uint64_t **)&v221.i64[1];
            if (v221.i64[1])
            {
              v192 = (uint64_t *)v221.i64[1];
              do
              {
                while (1)
                {
                  v190 = (uint64_t **)v192;
                  v193 = *((_DWORD *)v192 + 8);
                  if (v193 <= v188)
                    break;
                  v192 = *v190;
                  v191 = v190;
                  if (!*v190)
                    goto LABEL_255;
                }
                if (v193 >= v188)
                {
                  v195 = v190;
                  goto LABEL_258;
                }
                v192 = v190[1];
              }
              while (v192);
              v191 = v190 + 1;
            }
LABEL_255:
            v195 = operator new(0x40uLL);
            v195[8] = v188;
            *((_QWORD *)v195 + 6) = 0;
            *((_QWORD *)v195 + 7) = 0;
            *((_QWORD *)v195 + 5) = 0;
            *(_QWORD *)v195 = 0;
            *((_QWORD *)v195 + 1) = 0;
            *((_QWORD *)v195 + 2) = v190;
            *v191 = (uint64_t *)v195;
            v194 = (uint64_t *)v195;
            if (*(_QWORD *)v221.i64[0])
            {
              v221.i64[0] = *(_QWORD *)v221.i64[0];
              v194 = *v191;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v221.i64[1], v194);
            v189 = (uint64_t *)v221.i64[1];
            ++*(_QWORD *)&v222.f64[0];
            v188 = *(_DWORD *)(v155 + 392);
LABEL_258:
            *((_QWORD *)v195 + 7) += v178;
            v196 = v163[19];
            v197 = v163[20];
            v148 = (uint64_t **)&v221.i64[1];
            v198 = (uint64_t **)&v221.i64[1];
            v199 = (uint64_t **)&v221.i64[1];
            if (v189)
            {
              do
              {
                while (1)
                {
                  v199 = (uint64_t **)v189;
                  v200 = *((_DWORD *)v189 + 8);
                  if (v200 <= v188)
                    break;
                  v189 = *v199;
                  v198 = v199;
                  if (!*v199)
                    goto LABEL_266;
                }
                if (v200 >= v188)
                {
                  v202 = v199;
                  goto LABEL_269;
                }
                v189 = v199[1];
              }
              while (v189);
              v198 = v199 + 1;
            }
LABEL_266:
            v202 = operator new(0x40uLL);
            v202[8] = v188;
            *((_QWORD *)v202 + 6) = 0;
            *((_QWORD *)v202 + 7) = 0;
            *((_QWORD *)v202 + 5) = 0;
            *(_QWORD *)v202 = 0;
            *((_QWORD *)v202 + 1) = 0;
            *((_QWORD *)v202 + 2) = v199;
            *v198 = (uint64_t *)v202;
            v201 = (uint64_t *)v202;
            if (*(_QWORD *)v221.i64[0])
            {
              v221.i64[0] = *(_QWORD *)v221.i64[0];
              v201 = *v198;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v221.i64[1], v201);
            ++*(_QWORD *)&v222.f64[0];
LABEL_269:
            v203 = v202[12];
            if (v196 != v197)
              ++v203;
            v202[12] = v203;
            v165 = (std::__shared_weak_count *)*((_QWORD *)&v219[0] + 1);
          }
          if (v165)
          {
            v204 = (unint64_t *)&v165->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
        }
        v154 += 8;
      }
      while (v154 != v145);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Tiles: ", 7);
    v206 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v206, (uint64_t)"\n", 1);
    v207 = (int *)v221.i64[0];
    if ((unint64_t *)v221.i64[0] != &v221.u64[1])
    {
      do
      {
        if (v207[10] >= 1)
        {
          v208 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v208, (uint64_t)":\t", 2);
          v209 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v209, (uint64_t)" (", 2);
          v210 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v210, (uint64_t)"%, ", 3);
          v211 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v211, (uint64_t)" re, ", 5);
          v212 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v212, (uint64_t)" hires, ", 8);
          v213 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v213, (uint64_t)" kB)\n", 5);
        }
        v214 = (unint64_t *)*((_QWORD *)v207 + 1);
        if (v214)
        {
          do
          {
            v215 = v214;
            v214 = (unint64_t *)*v214;
          }
          while (v214);
        }
        else
        {
          do
          {
            v215 = (unint64_t *)*((_QWORD *)v207 + 2);
            v31 = *v215 == (_QWORD)v207;
            v207 = (int *)v215;
          }
          while (!v31);
        }
        v207 = (int *)v215;
      }
      while (v215 != &v221.u64[1]);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)v221.i64[1]);
    if (__p)
      operator delete(__p);
  }
}

void sub_19F77C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a22);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *altitude::GlobeView::getMainTileLoaderStatistics(altitude::GlobeView *this, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, 0xFFFFFFFFLL);
  v4 = v3;
  v6 = (uint64_t **)((char *)this + 96);
  v5 = (char *)*((_QWORD *)this + 12);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= v3)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_8;
      }
      if (v8 >= v3)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = (char *)this + 96;
LABEL_8:
    v9 = v7;
    v7 = (char *)operator new(0x60uLL);
    *((_QWORD *)v7 + 4) = v4;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_QWORD *)v7 + 9) = 0;
    *((_OWORD *)v7 + 5) = xmmword_19FFB37D0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = **((_QWORD **)this + 11);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *((_QWORD *)this + 11) = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v11);
    ++*((_QWORD *)this + 13);
  }
  return v7 + 40;
}

void altitude::GlobeView::reload(altitude::GlobeView *this)
{
  altitude::GlobeCleanupLoader *v2;
  altitude::ObjectTreeLoader *v3;
  uint64_t v4;
  karo::JobManager **v5;
  karo::JobManager *v6;
  karo::JobManager *v7;
  karo::JobManager *v8;
  karo::JobManager *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char v16;

  v2 = (altitude::GlobeCleanupLoader *)*((_QWORD *)this + 56);
  if (v2)
    altitude::GlobeCleanupLoader::pruneNodesAndGeometry(v2);
  v3 = (altitude::ObjectTreeLoader *)*((_QWORD *)this + 87);
  if (v3)
    altitude::ObjectTreeLoader::pruneModels(v3);
  v4 = *((_QWORD *)this + 105);
  if (v4)
    *(_BYTE *)(v4 + 376) = 1;
  if (md::HardwareFigDecoder::instance(void)::once != -1)
    dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
  md::HardwareFigDecoder::discardCaches(*(std::mutex **)md::HardwareFigDecoder::instance(void)::_singleton);
  v5 = *(karo::JobManager ***)(*((_QWORD *)this + 107) + 152);
  v6 = *v5;
  v7 = v5[1];
  *((_BYTE *)*v5 + 64) = 1;
  *((_BYTE *)v5[2] + 64) = 1;
  if (v7)
    *((_BYTE *)v7 + 64) = 1;
  karo::JobManager::cancelAll(v6);
  karo::JobManager::cancelAll(v5[2]);
  v8 = v5[1];
  if (!v8)
  {
    *((_BYTE *)*v5 + 64) = 0;
    v9 = v5[2];
    goto LABEL_15;
  }
  karo::JobManager::cancelAll(v8);
  v9 = v5[1];
  *((_BYTE *)*v5 + 64) = 0;
  *((_BYTE *)v5[2] + 64) = 0;
  if (v9)
LABEL_15:
    *((_BYTE *)v9 + 64) = 0;
  altitude::TileManager::clear(*((altitude::TileManager **)this + 86));
  v10 = (_QWORD *)*((_QWORD *)this + 45);
  v11 = (_QWORD *)v10[13];
  v10 += 13;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v11);
  *(v10 - 1) = v10;
  *v10 = 0;
  v10[1] = 0;
  v12 = *((_QWORD *)this + 46);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *((_QWORD *)this + 46) = 0;
  }
  *((_BYTE *)this + 417) = 1;
  altitude::GlobeView::load(this);
  v13 = *(_OWORD *)((char *)this + 636);
  v14 = **(_QWORD **)(*((_QWORD *)this + 107) + 88);
  if (v14)
  {
    v16 = 7;
    v15 = v13;
    md::MapEngine::setNeedsTick(v14, &v16);
    v13 = v15;
  }
  *(_OWORD *)(*((_QWORD *)this + 99) + 40) = v13;
  altitude::GlobeView::updateLodScale(this);
}

BOOL altitude::GlobeView::needsUpdate(altitude::GlobeView *this)
{
  _BOOL8 result;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 1;
  if (*((_QWORD *)this + 29) == *((_QWORD *)this + 30))
  {
    v3 = (double *)*((_QWORD *)this + 9);
    if (v3[5] == *((double *)this + 42)
      && v3[6] == *((double *)this + 43)
      && v3[7] == *((double *)this + 44)
      && v3[4] == *((double *)this + 41)
      && v3[1] == *((double *)this + 38)
      && v3[2] == *((double *)this + 39)
      && v3[3] == *((double *)this + 40)
      && (altitude::TileManager::needsUpdate(*((altitude::TileManager **)this + 86)) & 1) == 0
      && *(_DWORD *)(*((_QWORD *)this + 86) + 196) == *((_DWORD *)this + 41))
    {
      v4 = *((_QWORD *)this + 60);
      if (!v4 || !*(_BYTE *)(v4 + 522) || !*(_BYTE *)(v4 + 520))
      {
        v5 = *((_QWORD *)this + 4);
        if (!v5 || !*(_BYTE *)(v5 + 65))
        {
          v6 = *((_QWORD *)this + 105);
          if (!v6 || !*(_QWORD *)(v6 + 104))
          {
            v7 = *((_QWORD *)this + 78);
            if ((!v7 || *(_DWORD *)(v7 + 116) != 1) && (!v5 || !*(_BYTE *)(v5 + 64)))
            {
              v8 = *((_QWORD *)this + 53);
              if (!v8 || !*(_BYTE *)(v8 + 88))
                return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void altitude::GlobeView::disableLabelData(altitude::GlobeView *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  *((_BYTE *)this + 433) = 0;
  v1 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 107) + 40) + 40);
  v2 = v1[12];
  if (v2)
    atomic_store(0, (unsigned __int8 *)(v2 + 224));
  v3 = v1[10];
  if (v3)
    atomic_store(0, (unsigned __int8 *)(v3 + 224));
  v4 = v1[11];
  if (v4)
    atomic_store(0, (unsigned __int8 *)(v4 + 224));
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 40) + 40) + 56);
  if (v5)
  {
    v24 = 0;
    v25 = 0;
    v23 = &v24;
    pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 40));
    v6 = *(_QWORD **)(v5 + 64);
    if (v6 == (_QWORD *)(v5 + 72))
    {
LABEL_9:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 40));
      v7 = v23;
      if (v23 != &v24)
      {
        do
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, (uint64_t)v7 + 28);
          v21 = v7[1];
          if (v21)
          {
            do
            {
              v22 = (uint64_t **)v21;
              v21 = (uint64_t *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (uint64_t **)v7[2];
              v20 = *v22 == (uint64_t *)v7;
              v7 = v22;
            }
            while (!v20);
          }
          v7 = v22;
        }
        while (v22 != &v24);
      }
      *(_BYTE *)(v5 + 136) = 0;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v24);
      return;
    }
    while (1)
    {
      v9 = v6[8];
      v8 = (std::__shared_weak_count *)v6[9];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      v12 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)&v23, &v26, (unsigned int *)(v9 + 192));
      if (*v12)
      {
        if (!v8)
          goto LABEL_25;
      }
      else
      {
        v13 = v12;
        v14 = (char *)operator new(0x40uLL);
        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v9 + 192);
        *(_OWORD *)(v14 + 44) = *(_OWORD *)(v9 + 208);
        v15 = v26;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v15;
        *v13 = (uint64_t)v14;
        if (*v23)
        {
          v23 = (uint64_t **)*v23;
          v14 = (char *)*v13;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v24, (uint64_t *)v14);
        ++v25;
        if (!v8)
        {
LABEL_25:
          v18 = (_QWORD *)v6[1];
          if (!v18)
            goto LABEL_29;
          goto LABEL_26;
        }
      }
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (v17)
        goto LABEL_25;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v18 = (_QWORD *)v6[1];
      if (!v18)
      {
        do
        {
LABEL_29:
          v19 = (_QWORD *)v6[2];
          v20 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v20);
        goto LABEL_12;
      }
      do
      {
LABEL_26:
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
LABEL_12:
      v6 = v19;
      if (v19 == (_QWORD *)(v5 + 72))
        goto LABEL_9;
    }
  }
}

void sub_19F77CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a10);
  _Unwind_Resume(a1);
}

uint64_t altitude::GlobeView::isFlyoverTileAtTarget(altitude::GlobeView *this)
{
  uint64_t v2;
  char **v3;
  uint64_t *v4;
  uint64_t *v5;
  double *v6;
  double v7;
  double v8;
  long double v9;
  double v10;
  signed int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  __double2 v28;
  double v29;
  __double2 v30;
  double v31;
  double v32;
  uint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  void (***v37)(char *);
  void (**v38)(char *);
  void *v39;
  void *v40;
  uint64_t *v41;
  uint64_t v43;
  _DWORD *v44;
  const altitude::View *v45;
  uint64_t v46;
  int v47;
  float v48;
  unsigned int v49;
  char *TileView;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  char *v55;
  void *v56;
  char *v57;
  void (***v58)(char *);
  void (**v59)(char *);
  void *v60;
  void *v61;
  unsigned int v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _DWORD *v69;
  void *v70[2];
  void *v71[2];
  __int128 v72;
  void *v73[2];
  void *v74[2];
  __int128 v75;
  void *v76[2];
  uint64_t v77;
  uint64_t v78;
  int v79;
  void (**v80)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _DWORD *v85;
  void *v86[2];
  void *v87[2];
  __int128 v88;
  void *v89[2];
  void *v90[2];
  __int128 v91;
  void *v92[2];
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *__p;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;

  v102 = 0;
  v103 = 0;
  v104 = 0;
  v2 = *((_QWORD *)this + 57);
  if (v2)
  {
    v3 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(&v102, *v3, v3[1], (v3[1] - *v3) >> 3);
    v4 = v102;
    v5 = v103;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = (double *)*((_QWORD *)this + 9);
  v7 = v6[1];
  v8 = v6[2];
  v9 = tan(v7 * 0.5 + 0.785398163);
  v10 = log(v9);
  if (v4 == v5)
  {
LABEL_23:
    v33 = *((_QWORD *)this + 3);
    if (!v33)
      goto LABEL_59;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)&v64, v6 + 1);
    v99 = v64;
    v100 = v65;
    v101 = 0x4059000000000000;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = &off_1E42C4428;
    v69 = 0;
    *(_OWORD *)v70 = 0u;
    *(_OWORD *)v71 = 0u;
    v72 = 0u;
    *(_OWORD *)v73 = 0u;
    *(_OWORD *)v74 = 0u;
    v75 = 0u;
    *(_OWORD *)v76 = 0u;
    v79 = 0;
    v77 = 0;
    v78 = 0xFFFFFFFFLL;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v80 = &off_1E42C4428;
    v85 = 0;
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    *(_OWORD *)v89 = 0u;
    *(_OWORD *)v90 = 0u;
    v91 = 0u;
    *(_OWORD *)v92 = 0u;
    v93 = 0;
    v94 = 0xFFFFFFFFLL;
    v95 = 0;
    v98 = 0;
    __p = 0;
    v97 = 0;
    altitude::TriggerManager::cullTriggers(v33, (altitude::TriggerManager::Trigger **)&v64, &v99, 0xDu);
    if ((_QWORD)v64)
      *((_BYTE *)this + 417) = 1;
    v34 = (char *)__p;
    if (__p)
    {
      v35 = __p;
      if (v97 != __p)
      {
        v36 = v97 - 240;
        v37 = (void (***)(char *))(v97 - 240);
        do
        {
          v38 = *v37;
          v37 -= 30;
          (*v38)(v36);
          v17 = v36 == v34;
          v36 = (char *)v37;
        }
        while (!v17);
        v35 = __p;
      }
      v97 = v34;
      operator delete(v35);
    }
    v80 = &off_1E42C4428;
    if (v85)
      (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
    if (SHIBYTE(v93) < 0)
    {
      operator delete(v92[0]);
      if ((SHIBYTE(v91) & 0x80000000) == 0)
      {
LABEL_37:
        if ((SHIBYTE(v90[0]) & 0x80000000) == 0)
          goto LABEL_38;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(v91) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v90[1]);
    if ((SHIBYTE(v90[0]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v88) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v89[0]);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_39:
      v39 = v86[0];
      if (!v86[0])
        goto LABEL_41;
      goto LABEL_40;
    }
LABEL_52:
    operator delete(v87[1]);
    v39 = v86[0];
    if (!v86[0])
    {
LABEL_41:
      *((_QWORD *)&v64 + 1) = &off_1E42C4428;
      if (v69)
        (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
      if (SHIBYTE(v77) < 0)
      {
        operator delete(v76[0]);
        if ((SHIBYTE(v75) & 0x80000000) == 0)
        {
LABEL_45:
          if ((SHIBYTE(v74[0]) & 0x80000000) == 0)
            goto LABEL_46;
          goto LABEL_56;
        }
      }
      else if ((SHIBYTE(v75) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(v74[1]);
      if ((SHIBYTE(v74[0]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v72) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_57;
      }
LABEL_56:
      operator delete(v73[0]);
      if ((SHIBYTE(v72) & 0x80000000) == 0)
      {
LABEL_47:
        v40 = v70[0];
        if (!v70[0])
        {
LABEL_59:
          v41 = v102;
          if (!v102)
            return *((unsigned __int8 *)this + 417);
LABEL_60:
          operator delete(v41);
          return *((unsigned __int8 *)this + 417);
        }
LABEL_58:
        v70[1] = v40;
        operator delete(v40);
        goto LABEL_59;
      }
LABEL_57:
      operator delete(v71[1]);
      v40 = v70[0];
      if (!v70[0])
        goto LABEL_59;
      goto LABEL_58;
    }
LABEL_40:
    v86[1] = v39;
    operator delete(v39);
    goto LABEL_41;
  }
  v11 = 0x1FFFFFF - vcvtmd_s64_f64(v10 * 5340353.72 + 16777216.0);
  v12 = vcvtmd_s64_f64(v8 * 5340353.72 + 16777216.0);
  v13 = v4;
  while (1)
  {
    v14 = *v13;
    if (*(_BYTE *)(*(_QWORD *)(*v13 + 288) + 164))
    {
      v15 = *(_DWORD *)(v14 + 392);
      v16 = v15 >= 0x1F ? 31 : *(_DWORD *)(v14 + 392);
      v17 = v11 >> (25 - v15) == ~(-1 << v16) - *(_DWORD *)(v14 + 396) && v12 >> (25 - v15) == *(_DWORD *)(v14 + 400);
      if (v17)
        break;
    }
    if (++v13 == v5)
      goto LABEL_23;
  }
  v18 = *(_QWORD *)(v14 + 328);
  *((_DWORD *)this + 42) = 0;
  if (*(_QWORD *)(v14 + 312) == *(_QWORD *)(v14 + 304))
    v19 = v15;
  else
    v19 = v15 + 1;
  if (!*(_BYTE *)(v18 + 296))
  {
    *((_BYTE *)this + 417) = 1;
    goto LABEL_113;
  }
  v20 = (_DWORD *)(v14 + 392);
  v21 = v6[3];
  v22 = __sincos_stret(v7);
  v23 = 6378137.0 / sqrt(1.0 - v22.__sinval * v22.__sinval * 0.00669437999);
  v24 = (v23 + v21) * v22.__cosval;
  v25 = __sincos_stret(v8);
  v63 = v21 + v23 * 0.99330562;
  v26 = *((double *)this + 39);
  v27 = *((double *)this + 40);
  v28 = __sincos_stret(*((double *)this + 38));
  v29 = 6378137.0 / sqrt(1.0 - v28.__sinval * v28.__sinval * 0.00669437999);
  v30 = __sincos_stret(v26);
  v31 = -((v27 + v29 * 0.99330562) * v28.__sinval - v63 * v22.__sinval);
  v32 = *((double *)this + 41);
  if (sqrt(-((v29 + v27) * v28.__cosval * v30.__cosval - v24 * v25.__cosval)* -((v29 + v27) * v28.__cosval * v30.__cosval - v24 * v25.__cosval)+ -((v29 + v27) * v28.__cosval * v30.__sinval - v24 * v25.__sinval)* -((v29 + v27) * v28.__cosval * v30.__sinval - v24 * v25.__sinval)+ v31 * v31) <= v32 * 5.0)
  {
    v43 = *((_QWORD *)this + 66);
    if (!v43)
      goto LABEL_68;
    v44 = (_DWORD *)*((_QWORD *)this + 99);
    v45 = (const altitude::View *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v43 + 24))(v43, 0, 0);
    if (!v45
      || (LODWORD(v64) = -1082130432,
          v46 = *((_QWORD *)this + 86),
          v47 = *(_DWORD *)(v46 + 208),
          v48 = *(float *)(v46 + 200),
          v49 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 136) + 88),
          TileView = altitude::Tile::getOrCreateTileView((altitude::Tile *)v14, v45),
          altitude::TileView::isCulled((altitude::TileView *)TileView, v49))
      || (altitude::Tile::computeTileResolution((char *)v14, (uint64_t)v45, v44, v47, (float *)&v64, v49, v48),
          *(float *)&v64 <= 0.5))
    {
LABEL_68:
      v51 = *((_QWORD *)this + 3);
      if (!v51)
        goto LABEL_110;
      gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)&v64, (double *)(*((_QWORD *)this + 9) + 8));
      v99 = v64;
      v100 = v65;
      v101 = 0x4059000000000000;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_QWORD *)&v64 = 0;
      *((_QWORD *)&v64 + 1) = &off_1E42C4428;
      v69 = 0;
      *(_OWORD *)v70 = 0u;
      *(_OWORD *)v71 = 0u;
      v72 = 0u;
      *(_OWORD *)v73 = 0u;
      *(_OWORD *)v74 = 0u;
      v75 = 0u;
      *(_OWORD *)v76 = 0u;
      v79 = 0;
      v77 = 0;
      v78 = 0xFFFFFFFFLL;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v80 = &off_1E42C4428;
      v85 = 0;
      *(_OWORD *)v86 = 0u;
      *(_OWORD *)v87 = 0u;
      v88 = 0u;
      *(_OWORD *)v89 = 0u;
      *(_OWORD *)v90 = 0u;
      v91 = 0u;
      *(_OWORD *)v92 = 0u;
      v93 = 0;
      v94 = 0xFFFFFFFFLL;
      v95 = 0;
      v98 = 0;
      __p = 0;
      v97 = 0;
      altitude::TriggerManager::cullTriggers(v51, (altitude::TriggerManager::Trigger **)&v64, &v99, 0xDu);
      v52 = v64;
      if ((_QWORD)v64)
      {
        if ((unint64_t)v64 < 3)
        {
          if (v69 && *v20 < v69[2])
            v54 = 1;
          else
            v54 = *(_BYTE *)(v18 + 296) ^ 1;
          if ((_QWORD)v64 != 1)
          {
            if (v85 && *v20 < v85[2])
              v54 = 1;
            else
              v54 = *(_BYTE *)(v18 + 296) ^ 1;
          }
        }
        else
        {
          v53 = (char *)__p + 72;
          do
          {
            if (*(_QWORD *)v53 && *v20 < *(_DWORD *)(*(_QWORD *)v53 + 8))
              v54 = 1;
            else
              v54 = *(_BYTE *)(v18 + 296) ^ 1;
            v53 += 240;
            --v52;
          }
          while (v52);
        }
        *((_BYTE *)this + 417) = v54;
      }
      v55 = (char *)__p;
      if (__p)
      {
        v56 = __p;
        if (v97 != __p)
        {
          v57 = v97 - 240;
          v58 = (void (***)(char *))(v97 - 240);
          do
          {
            v59 = *v58;
            v58 -= 30;
            (*v59)(v57);
            v17 = v57 == v55;
            v57 = (char *)v58;
          }
          while (!v17);
          v56 = __p;
        }
        v97 = v55;
        operator delete(v56);
      }
      v80 = &off_1E42C4428;
      if (v85)
        (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
      if (SHIBYTE(v93) < 0)
      {
        operator delete(v92[0]);
        if ((SHIBYTE(v91) & 0x80000000) == 0)
        {
LABEL_98:
          if ((SHIBYTE(v90[0]) & 0x80000000) == 0)
            goto LABEL_99;
          goto LABEL_119;
        }
      }
      else if ((SHIBYTE(v91) & 0x80000000) == 0)
      {
        goto LABEL_98;
      }
      operator delete(v90[1]);
      if ((SHIBYTE(v90[0]) & 0x80000000) == 0)
      {
LABEL_99:
        if ((SHIBYTE(v88) & 0x80000000) == 0)
          goto LABEL_100;
        goto LABEL_120;
      }
LABEL_119:
      operator delete(v89[0]);
      if ((SHIBYTE(v88) & 0x80000000) == 0)
      {
LABEL_100:
        v60 = v86[0];
        if (!v86[0])
          goto LABEL_102;
        goto LABEL_101;
      }
LABEL_120:
      operator delete(v87[1]);
      v60 = v86[0];
      if (!v86[0])
      {
LABEL_102:
        *((_QWORD *)&v64 + 1) = &off_1E42C4428;
        if (v69)
          (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
        if (SHIBYTE(v77) < 0)
        {
          operator delete(v76[0]);
          if ((SHIBYTE(v75) & 0x80000000) == 0)
          {
LABEL_106:
            if ((SHIBYTE(v74[0]) & 0x80000000) == 0)
              goto LABEL_107;
            goto LABEL_124;
          }
        }
        else if ((SHIBYTE(v75) & 0x80000000) == 0)
        {
          goto LABEL_106;
        }
        operator delete(v74[1]);
        if ((SHIBYTE(v74[0]) & 0x80000000) == 0)
        {
LABEL_107:
          if ((SHIBYTE(v72) & 0x80000000) == 0)
            goto LABEL_108;
          goto LABEL_125;
        }
LABEL_124:
        operator delete(v73[0]);
        if ((SHIBYTE(v72) & 0x80000000) == 0)
        {
LABEL_108:
          v61 = v70[0];
          if (!v70[0])
            goto LABEL_110;
LABEL_109:
          v70[1] = v61;
          operator delete(v61);
          goto LABEL_110;
        }
LABEL_125:
        operator delete(v71[1]);
        v61 = v70[0];
        if (!v70[0])
          goto LABEL_110;
        goto LABEL_109;
      }
LABEL_101:
      v86[1] = v60;
      operator delete(v60);
      goto LABEL_102;
    }
    v6 = (double *)*((_QWORD *)this + 9);
    v32 = *((double *)this + 41);
  }
  if (v6[4] / v32 <= 0.5)
    goto LABEL_68;
  *((_BYTE *)this + 417) = 0;
LABEL_110:
  if (*(_QWORD *)(v14 + 312) != *(_QWORD *)(v14 + 304) && *v20 >= 0xEu)
  {
    v64 = 7uLL;
    v65 = *(_OWORD *)v20;
    v19 = altitude::HeightRequestManager::maxHeightMeshLevelForTileKey(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 71) + 144) + 32), (unsigned int *)&v64);
  }
LABEL_113:
  v62 = *((_DWORD *)this + 42);
  if (v19 > v62)
    v62 = v19;
  *((_DWORD *)this + 42) = v62;
  v41 = v102;
  if (v102)
    goto LABEL_60;
  return *((unsigned __int8 *)this + 417);
}

void sub_19F77D744(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void altitude::GlobeView::setStyleManager(altitude::GlobeView *this, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  altitude::GlobeCleanupLoader *v25;
  unsigned int v26;
  altitude::GlobeCleanupLoader *v27;
  unsigned int v28;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 76) = a2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 40) + 16) + 240);
  if (v9)
  {
    v10 = *((_QWORD *)this + 76);
    v11 = *((_QWORD *)this + 77);
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (std::__shared_weak_count *)v9[15];
    v9[14] = v10;
    v9[15] = v11;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v11 = v9[15];
    }
    v17 = v9[13];
    v18 = v9[14];
    if (v11)
    {
      v19 = (unint64_t *)(v11 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(std::__shared_weak_count **)(v17 + 176);
    *(_QWORD *)(v17 + 168) = v18;
    *(_QWORD *)(v17 + 176) = v11;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 40) + 24) + 152);
  if (v24)
    altitude::SkeletonRequestManager::setStyleManager(v24, *((_QWORD *)this + 76), *((_QWORD *)this + 77));
  altitude::GlobeView::updateLodScale(this);
  v25 = (altitude::GlobeCleanupLoader *)*((_QWORD *)this + 56);
  if (v25)
  {
    v26 = *(_DWORD *)(*((_QWORD *)v25 + 4) + 88) + 1;
    altitude::GlobeCleanupLoader::pruneTrafficComponents(v25, v26, v26);
    v27 = (altitude::GlobeCleanupLoader *)*((_QWORD *)this + 56);
    v28 = *(_DWORD *)(*((_QWORD *)v27 + 4) + 88) + 1;
    altitude::GlobeCleanupLoader::pruneRoadComponents(v27, v28, v28);
  }
}

_QWORD *altitude::GlobeView::setTileSetGridFractionChangedCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v11 = 0;
    v5 = (_QWORD *)(a1 + 952);
    v13 = 0;
    goto LABEL_10;
  }
  if (v3 != a2)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    v11 = v4;
    v5 = (_QWORD *)(a1 + 952);
    if (v4)
      goto LABEL_4;
LABEL_8:
    v13 = 0;
    goto LABEL_10;
  }
  v11 = v10;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v10);
  v4 = v11;
  v5 = (_QWORD *)(a1 + 952);
  if (!v11)
    goto LABEL_8;
LABEL_4:
  if (v4 == v10)
  {
    v13 = v12;
    (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v12);
  }
  else
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  }
LABEL_10:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v12, v5);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

_QWORD *altitude::GlobeView::setTileSetLoadedFractionChangedCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v11 = 0;
    v5 = (_QWORD *)(a1 + 984);
    v13 = 0;
    goto LABEL_10;
  }
  if (v3 != a2)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    v11 = v4;
    v5 = (_QWORD *)(a1 + 984);
    if (v4)
      goto LABEL_4;
LABEL_8:
    v13 = 0;
    goto LABEL_10;
  }
  v11 = v10;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v10);
  v4 = v11;
  v5 = (_QWORD *)(a1 + 984);
  if (!v11)
    goto LABEL_8;
LABEL_4:
  if (v4 == v10)
  {
    v13 = v12;
    (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v12);
  }
  else
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  }
LABEL_10:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v12, v5);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

uint64_t ___ZN2md3mun20MuninRenderResourcesC2EPKNS_6DeviceE_block_invoke(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v1 = *(_QWORD **)(result + 32);
  v2 = v1[6] - v1[5];
  v3 = v1[1];
  v4 = v1[9];
  __asm { FMOV            V0.4S, #-1.0 }
  *(_QWORD *)v4 = _Q0;
  *(_QWORD *)(v4 + 16) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 32) = 0xBF8000003F800000;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v4 + 48) = _Q0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)(v4 + 64) = _Q0;
  *(_DWORD *)(v4 + 8) = 1065353216;
  *(_DWORD *)(v4 + 40) = 1065353216;
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(_QWORD *)(v4 + 80) = 1065353216;
  *(_DWORD *)(v4 + 104) = 1065353216;
  *(_QWORD *)(v4 + 96) = 0x3F800000BF800000;
  *(_QWORD *)(v4 + 112) = 0;
  v11 = v2 - v2 % v3;
  if (v11)
  {
    if (v1[8] > v11)
      v11 = v1[8];
    v1[7] = 0;
    v1[8] = v11;
  }
  v12 = *(_QWORD **)(result + 48);
  v13 = v12[6] - v12[5];
  v14 = v13 % v12[1];
  v15 = v12[9];
  *(_QWORD *)v15 = 0x2000200010000;
  *(_DWORD *)(v15 + 8) = 3;
  v16 = v13 - v14;
  if (v16)
  {
    if (v12[8] > v16)
      v16 = v12[8];
    v12[7] = 0;
    v12[8] = v16;
  }
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::VSTextured::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VSTextured::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSTextured::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSTextured::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSTextured::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_6VSView13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_6VSView13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7700;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_6VSView13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7700;
}

void std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1>,ggl::VSView::PipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1>,ggl::VSView::PipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4060;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1>,ggl::VSView::PipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4060;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_1>,ggl::VSView::PipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count **v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2748;
  v5 = v3 + 1;
  ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE566458, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::VSView::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9A70;
  v6 = v1[30];
  v7 = (std::__shared_weak_count *)v1[31];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v2, v6, (uint64_t)v7);
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v2, v6, 0);
  }
  *(_QWORD *)v2 = &off_1E42BC270;
  v12 = *(std::__shared_weak_count ***)(v2 + 64);
  *v12 = v5;
  v12[1] = 0;
  v13 = *(std::__shared_weak_count ***)(v2 + 160);
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = v13[1];
  *v13 = v5;
  v13[1] = v3;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_QWORD *)(v2 + 64);
  v19 = v1[21];
  v20 = v1[22];
  *(_QWORD *)(v18 + 16) = v19;
  *(_QWORD *)(v18 + 24) = 0;
  v21 = *(_QWORD *)(v2 + 160);
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v21 + 24);
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = v20;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  **(_QWORD **)(v2 + 96) = 0;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_19F77E108(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::VSView::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VSView::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSView::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSView::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSView::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_6VSView25StretchAlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_6VSView25StretchAlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7748;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_6VSView25StretchAlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7748;
}

void std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0>,ggl::VSView::StretchAlphaPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0>,ggl::VSView::StretchAlphaPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0>,ggl::VSView::StretchAlphaPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4018;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0,std::allocator<md::mun::MuninRenderResources::MuninRenderResources(md::Device const*)::$_0>,ggl::VSView::StretchAlphaPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count **v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2748;
  v5 = v3 + 1;
  ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE566458, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::VSView::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9A70;
  v6 = v1[27];
  v7 = (std::__shared_weak_count *)v1[28];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v2, v6, (uint64_t)v7);
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v2, v6, 0);
  }
  *(_QWORD *)v2 = &off_1E42BC2C0;
  v12 = *(std::__shared_weak_count ***)(v2 + 64);
  *v12 = v5;
  v12[1] = 0;
  v13 = *(std::__shared_weak_count ***)(v2 + 160);
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = v13[1];
  *v13 = v5;
  v13[1] = v3;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_QWORD *)(v2 + 64);
  v19 = v1[21];
  v20 = v1[22];
  *(_QWORD *)(v18 + 16) = v19;
  *(_QWORD *)(v18 + 24) = 0;
  v21 = *(_QWORD *)(v2 + 160);
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v21 + 24);
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = v20;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  **(_QWORD **)(v2 + 96) = 0;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_19F77E564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::VSView::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VSView::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSView::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSView::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VSView::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::VSCommon::Mesh *,std::shared_ptr<ggl::VSCommon::Mesh>::__shared_ptr_default_delete<ggl::VSCommon::Mesh,ggl::VSCommon::Mesh>,std::allocator<ggl::VSCommon::Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::VSCommon::Mesh *,std::shared_ptr<ggl::VSCommon::Mesh>::__shared_ptr_default_delete<ggl::VSCommon::Mesh,ggl::VSCommon::Mesh>,std::allocator<ggl::VSCommon::Mesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *__copy_helper_block_ea8_32c72_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_8VSCommon6VertexEEEEE48c51_ZTSNSt3__110shared_ptrIN3ggl14IndexDataTypedItEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_32c72_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_8VSCommon6VertexEEEEE48c51_ZTSNSt3__110shared_ptrIN3ggl14IndexDataTypedItEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<ggl::VSTextured::CompositingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSTextured::CompositingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSTextured::CompositingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VSView::StretchAlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSView::StretchAlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSView::StretchAlphaPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Clear::ClearMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Clear::ClearMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Clear::ClearMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D3FD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D3FD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = result;
  v3 = *a2;
  v4 = **(_QWORD **)(result + 8);
  v5 = 4 * *(_QWORD *)(v4 + 8);
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(*a2, v4, 0, 4 * *(_QWORD *)(v4 + 8), 1, 0);
      v6 = (_OWORD *)result;
    }
    else
    {
      v6 = *(_OWORD **)(v4 + 72);
    }
  }
  else
  {
    v6 = 0;
  }
  *v6 = xmmword_19FFB33E0;
  v6[1] = xmmword_19FFB33F0;
  v7 = **(_QWORD **)(v2 + 16);
  v8 = 6 * *(_QWORD *)(v7 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v7 + 17) == 2)
    {
      v9 = *(_QWORD *)(v7 + 72);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(v3, v7, 0, 6 * *(_QWORD *)(v7 + 8), 1, 0);
      v9 = result;
    }
    *(_QWORD *)v9 = 0x2000200010000;
    *(_DWORD *)(v9 + 8) = 3;
    if (*(_BYTE *)(v7 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)v10 = 0x2000200010000;
    *(_DWORD *)(v10 + 8) = 3;
  }
  v11 = *(_QWORD *)(v7 + 64);
  if (v11 <= v8)
    v11 = v8;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = v11;
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, v6, v4, 0, v5, 1, 0);
    v12 = *(_QWORD *)(v4 + 64);
    if (v12 <= v5)
      v12 = v5;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = v12;
  }
  return result;
}

uint64_t ggl::VertexDataTyped<ggl::Clear::ClearData>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Clear::ClearData>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Clear::ClearData>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Clear::ClearData>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E02F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Clear::ClearData>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E02F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Clear::ClearData>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3F88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3F88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::mun::MuninRenderResources::updatePipelineStates(ggl::RenderTargetFormat const&,ggl::RenderTargetFormat const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 112);
  v4 = *(_QWORD *)(v3 + 8);
  if (*a2)
  {
    if (*(_BYTE *)(v3 + 17) == 2)
    {
      v5 = *(_QWORD *)(v3 + 72);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 56))(*a2, v3, 0, *(_QWORD *)(v3 + 8), 1, 0);
      v5 = result;
    }
    *(_OWORD *)v5 = xmmword_19FFB4820;
    *(_DWORD *)(v5 + 16) = 1065353216;
    if (*(_BYTE *)(v3 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 72);
    *(_OWORD *)v6 = xmmword_19FFB4820;
    *(_DWORD *)(v6 + 16) = 1065353216;
  }
  v7 = *(_QWORD *)(v3 + 64);
  if (v7 <= v4)
    v7 = v4;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v7;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::Clear::ClearConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Clear::ClearConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Clear::ClearConstants>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Clear::ClearConstants>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Clear::ClearConstants>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Clear::ClearPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Clear::ClearPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Clear::ClearPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VSTextured::PassthroughPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSTextured::PassthroughPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSTextured::PassthroughPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VSView::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSView::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSView::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::MaskedIconLabelPart::~MaskedIconLabelPart(md::MaskedIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::IconLabelPart::~IconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::MaskedIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, this, 784);
}

float md::MaskedIconLabelPart::prepareForDisplay(md::MaskedIconLabelPart *this, md::LabelManager *a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float result;

  v3 = *((float *)this + 153);
  if (v3 != *((float *)this + 188)
    || *((float *)this + 80) < *((float *)this + 78)
    || *((float *)this + 81) < *((float *)this + 79))
  {
    *((float *)this + 188) = v3;
    (*(void (**)(md::MaskedIconLabelPart *, uint64_t, char *, char *))(*(_QWORD *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  if (*((_BYTE *)this + 565))
  {
    v4 = operator new();
    v5 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v4;
    if (v5)
      MEMORY[0x1A1AF4E00](v5, 0x1000C40AE2C30F4);
    *((_BYTE *)this + 665) = 0;
  }
  v6 = (*(float (**)(md::MaskedIconLabelPart *))(*(_QWORD *)this + 920))(this);
  v10 = *((float *)this + 153);
  v11 = v10 == 1.0;
  v12 = v6 * v10;
  v13 = v7 * v10;
  v14 = v8 * v10;
  v15 = v9 * v10;
  if (!v11)
  {
    v6 = v12;
    v7 = v13;
    v8 = v14;
    v9 = v15;
  }
  v16 = fminf(v9 - v7, v8 - v6);
  *((float *)this + 193) = v16;
  result = (float)(v16 * 0.5) + -1.0;
  *((float *)this + 192) = result;
  return result;
}

uint64_t md::MaskedIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8)
{
  char *v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 780) = 1086918619;
  LODWORD(a6) = *(_DWORD *)(a1 + 772);
  *(_DWORD *)(a1 + 776) = LODWORD(a6);
  if (!a3)
    goto LABEL_19;
  v8 = *(char **)(a3 + 24);
  v9 = *(char **)(a3 + 32);
  if (0x8E38E38E38E38E39 * ((v9 - v8) >> 4) <= *(unsigned __int8 *)(a1 + 563))
  {
    if (v8 == v9 || *(_BYTE *)(a3 + 89) == 0)
      goto LABEL_19;
  }
  else
  {
    v8 += 144 * *(unsigned __int8 *)(a1 + 563);
  }
  if (v8)
  {
    v11 = *(_QWORD *)v8;
    v12 = *((_QWORD *)v8 + 1);
    if (v11 != v12)
    {
      v13 = v11;
      while (*(_BYTE *)(v13 + 16) != 3)
      {
        v13 += 24;
        if (v13 == v12)
          goto LABEL_19;
      }
      do
      {
        if (*(_BYTE *)(v11 + 16) == 3)
        {
          LODWORD(a8) = *(_DWORD *)(**(_QWORD **)v11 + 32 * *(unsigned int *)(*(_QWORD *)v11 + 32) + 8);
          a7 = 6.28318531;
          a6 = (float)(*(float *)(v11 + 8) + (float)(*(float *)&a8 * (float)(*(float *)(v11 + 12) - *(float *)(v11 + 8))))
             * 6.28318531;
          *(float *)&a6 = a6;
          goto LABEL_18;
        }
        v11 += 24;
      }
      while (v11 != v12);
      LODWORD(a6) = 1086918619;
LABEL_18:
      *(_DWORD *)(a1 + 780) = LODWORD(a6);
    }
  }
LABEL_19:
  md::IconLabelPart::layoutForDisplay(a1, a2, a3, a4, a5, a6, a7, a8);
  return 37;
}

uint64_t md::MaskedIconLabelPart::styleLayer(md::MaskedIconLabelPart *this, const md::LabelStyle *a2)
{
  return *(char *)(*((_QWORD *)this + 2) + 753);
}

_QWORD *md::MaskedIconLabelPart::populateMeshDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a2 + 3) = 1;
  v4[0] = &off_1E42CFE48;
  v4[1] = a1;
  v5 = v4;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v4, (_QWORD *)(a2 + 8));
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFE48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFE48;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::MaskedIconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 *v4;
  float v5;
  _DWORD *v6;
  __n128 result;

  v4 = *(__n128 **)(a1 + 8);
  if (v4[35].n128_u8[5])
    *(_QWORD *)(a3 + 64) = (*(uint64_t (**)(_QWORD))(v4->n128_u64[0] + 144))(*(_QWORD *)(a1 + 8));
  v5 = v4[38].n128_f32[0] * v4[37].n128_f32[1];
  *(_DWORD *)(a3 + 48) = v4[34].n128_u32[2];
  *(float *)(a3 + 52) = v5;
  *(_DWORD *)(a3 + 56) = v4[37].n128_u32[3];
  *(_DWORD *)a3 = v4[43].n128_u32[2];
  *(_DWORD *)(a3 + 4) = v4[43].n128_u32[3];
  *(_DWORD *)(a3 + 8) = v4[44].n128_u32[0];
  *(_DWORD *)(a3 + 12) = v4[44].n128_u32[1];
  *(_DWORD *)(a3 + 16) = v4[44].n128_u32[2];
  *(_DWORD *)(a3 + 20) = v4[44].n128_u32[3];
  *(_DWORD *)(a3 + 24) = v4[45].n128_u32[0];
  *(_DWORD *)(a3 + 28) = v4[45].n128_u32[1];
  v6 = (_DWORD *)(*(uint64_t (**)(__n128 *))(v4->n128_u64[0] + 928))(v4);
  *(_DWORD *)(a3 + 32) = *v6;
  *(_DWORD *)(a3 + 36) = v6[1];
  *(_DWORD *)(a3 + 40) = v6[2];
  *(_DWORD *)(a3 + 44) = v6[3];
  result = v4[48];
  *(__n128 *)(a3 + 116) = result;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

_QWORD *md::GraphTraversalPath::GraphTraversalPath(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  char *v17;
  char *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      abort();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((v16 & 0x8000000000000000) != 0)
      abort();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[v16];
    a1[8] = &v17[v16];
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  return a1;
}

void sub_19F77F7B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void md::GraphTraversalPath::visit(md::GraphTraversalPath *this, const MuninJunction *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  char v45;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(_BYTE **)this;
    v9 = (uint64_t)v5 - *(_QWORD *)this;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      goto LABEL_55;
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 == (_QWORD *)v8)
    {
      v8 = v5;
    }
    else
    {
      v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58)
        goto LABEL_59;
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20)
        goto LABEL_59;
      v18 = (v17 >> 3) + 1;
      v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v23 = *--v6;
          *--v15 = v23;
        }
        while (v6 != (_QWORD *)v8);
        v8 = *(_BYTE **)this;
      }
    }
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *((_QWORD *)this + 1) = v7;
  v25 = (_BYTE *)*((_QWORD *)this + 7);
  v24 = *((_QWORD *)this + 8);
  if ((unint64_t)v25 < v24)
  {
    *v25 = 0;
    v26 = (uint64_t)(v25 + 1);
    goto LABEL_54;
  }
  v27 = (_BYTE *)*((_QWORD *)this + 6);
  v28 = v25 - v27;
  v29 = v25 - v27 + 1;
  if (v29 < 0)
LABEL_55:
    abort();
  v30 = v24 - (_QWORD)v27;
  if (2 * v30 > v29)
    v29 = 2 * v30;
  if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
    v31 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
    v32 = (char *)operator new(v31);
  else
    v32 = 0;
  v33 = &v32[v28];
  v34 = &v32[v31];
  v32[v28] = 0;
  v26 = (uint64_t)&v32[v28 + 1];
  if (v25 == v27)
    goto LABEL_52;
  if (v28 < 8 || (unint64_t)(v27 - v32) < 0x20)
    goto LABEL_49;
  if (v28 >= 0x20)
  {
    v35 = v28 & 0xFFFFFFFFFFFFFFE0;
    v36 = (__int128 *)(v25 - 16);
    v37 = &v32[v25 - 16 - v27];
    v38 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v39 = *v36;
      *((_OWORD *)v37 - 1) = *(v36 - 1);
      *(_OWORD *)v37 = v39;
      v37 -= 32;
      v36 -= 2;
      v38 -= 32;
    }
    while (v38);
    if (v28 == v35)
      goto LABEL_51;
    if ((v28 & 0x18) == 0)
    {
      v33 -= v35;
      v25 -= v35;
      goto LABEL_49;
    }
  }
  else
  {
    v35 = 0;
  }
  v40 = v35 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v41 = &v25[-v35 - 8];
  v42 = v41 - v27;
  do
  {
    v43 = *(_QWORD *)v41;
    v41 -= 8;
    *(_QWORD *)&v32[v42] = v43;
    v42 -= 8;
    v40 += 8;
  }
  while (v40);
  if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_51;
  v33 -= v28 & 0xFFFFFFFFFFFFFFF8;
  v25 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_49:
  v44 = v33 - 1;
  do
  {
    v45 = *--v25;
    *v44-- = v45;
  }
  while (v25 != v27);
LABEL_51:
  v33 = v32;
LABEL_52:
  *((_QWORD *)this + 6) = v33;
  *((_QWORD *)this + 7) = v26;
  *((_QWORD *)this + 8) = v34;
  if (v27)
    operator delete(v27);
LABEL_54:
  *((_QWORD *)this + 7) = v26;
}

void md::GraphTraversalPath::visit(md::GraphTraversalPath *this, const MuninRoadEdge *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  __int128 *v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  char *v43;
  char v44;

  v5 = (char *)*((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*((_QWORD *)this + 3);
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_55;
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_59;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_59;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)*((_QWORD *)this + 3);
      }
    }
    *((_QWORD *)this + 3) = v14;
    *((_QWORD *)this + 4) = v7;
    *((_QWORD *)this + 5) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  *((_QWORD *)this + 4) = v7;
  v24 = (_BYTE *)*((_QWORD *)this + 7);
  v23 = *((_QWORD *)this + 8);
  if ((unint64_t)v24 < v23)
  {
    *v24 = 1;
    v25 = (uint64_t)(v24 + 1);
    goto LABEL_54;
  }
  v26 = (_BYTE *)*((_QWORD *)this + 6);
  v27 = v24 - v26;
  v28 = v24 - v26 + 1;
  if (v28 < 0)
LABEL_55:
    abort();
  v29 = v23 - (_QWORD)v26;
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
    v30 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
    v31 = (char *)operator new(v30);
  else
    v31 = 0;
  v32 = &v31[v27];
  v33 = &v31[v30];
  v31[v27] = 1;
  v25 = (uint64_t)&v31[v27 + 1];
  if (v24 == v26)
    goto LABEL_52;
  if (v27 < 8 || (unint64_t)(v26 - v31) < 0x20)
    goto LABEL_49;
  if (v27 >= 0x20)
  {
    v34 = v27 & 0xFFFFFFFFFFFFFFE0;
    v35 = (__int128 *)(v24 - 16);
    v36 = &v31[v24 - 16 - v26];
    v37 = v27 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v38 = *v35;
      *((_OWORD *)v36 - 1) = *(v35 - 1);
      *(_OWORD *)v36 = v38;
      v36 -= 32;
      v35 -= 2;
      v37 -= 32;
    }
    while (v37);
    if (v27 == v34)
      goto LABEL_51;
    if ((v27 & 0x18) == 0)
    {
      v32 -= v34;
      v24 -= v34;
      goto LABEL_49;
    }
  }
  else
  {
    v34 = 0;
  }
  v39 = v34 - (v27 & 0xFFFFFFFFFFFFFFF8);
  v40 = &v24[-v34 - 8];
  v41 = v40 - v26;
  do
  {
    v42 = *(_QWORD *)v40;
    v40 -= 8;
    *(_QWORD *)&v31[v41] = v42;
    v41 -= 8;
    v39 += 8;
  }
  while (v39);
  if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_51;
  v32 -= v27 & 0xFFFFFFFFFFFFFFF8;
  v24 -= v27 & 0xFFFFFFFFFFFFFFF8;
LABEL_49:
  v43 = v32 - 1;
  do
  {
    v44 = *--v24;
    *v43-- = v44;
  }
  while (v24 != v26);
LABEL_51:
  v32 = v31;
LABEL_52:
  *((_QWORD *)this + 6) = v32;
  *((_QWORD *)this + 7) = v25;
  *((_QWORD *)this + 8) = v33;
  if (v26)
    operator delete(v26);
LABEL_54:
  *((_QWORD *)this + 7) = v25;
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v21 = (std::string *)(v20 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void md::FlyoverDsmLayerDataSource::~FlyoverDsmLayerDataSource(md::FlyoverDsmLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A1E40;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A1E40;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverDsmLayerDataSource::didProcessNewLayerData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = *(_QWORD *)(a1 + 768);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (v3)
    {
      v4 = *(_QWORD **)(v3 + 24);
      if (v4)
      {
        v5 = *a2;
        v6 = a2[1];
        if (*a2 != v6)
        {
          do
          {
            v7 = *(int **)(v5 + 24);
            v8 = v7[1];
            v9 = *v7;
            LODWORD(v7) = 1 << *((_BYTE *)v7 + 8);
            v10 = 1.0 / (double)(int)v7;
            v11 = v10 * (double)v9;
            v12 = v10 * (double)((int)v7 + ~v8);
            v13 = v11 + v10;
            v14 = v12 + v10;
            md::MercatorTerrainHeightCache::invalidateRect(v4, &v11);
            v5 += 120;
          }
          while (v5 != v6);
        }
      }
    }
  }
}

void md::FlyoverDsmLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *i;
  int32x2_t *v6;
  __int32 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int32 v17;
  __int32 v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  void *v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  __int32 v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  _DWORD v60[6];
  __int16 v61[2];
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _BYTE v65[2];
  __int16 v66;
  int v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char v72[32];
  unint64_t v73;
  uint64_t v74;
  __int32 v75;
  char v76[4];
  std::__shared_weak_count *v77;
  char v78;
  char v79;
  uint64_t v80;
  unsigned __int8 v81[4];
  uint64_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  int32x2_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unsigned int v88;
  char v89;

  if (a2 != a3)
  {
    v3 = a3;
    for (i = a2; i != v3; i += 2)
    {
      v6 = *(int32x2_t **)(*i + 16);
      v7 = v6[1].i32[0];
      v83 = v6[1].i32[1];
      v84 = v7;
      v85 = vrev64_s32(*v6);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 24) + 16))(&v80, *(_QWORD *)(a1 + 24), 20, &v83);
      if ((_BYTE)v80)
      {
        md::FlyoverMetaData::adjustedTile((md::FlyoverMetaData *)&v75, *(const QuadTile **)(a1 + 752), (uint64_t)v81, 1);
        if (!v79 || v78 == 1)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(&v59, *(_QWORD *)(a1 + 24), 20);
          if ((_BYTE)v59)
          {
            if (HIDWORD(v59) <= v81[1] && v60[0] >= v81[1])
            {
              v8 = *i;
              if (*(_BYTE *)(*i + 96))
                v9 = *(_DWORD *)(v8 + 100);
              else
                v9 = 2147483646;
              v24 = *(_BYTE *)v8;
              v25 = *(_QWORD *)(v8 + 112);
              md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v86, ***(QuadTile ****)(a1 + 752), (uint64_t)v81);
              v56 = v25;
              if (v89)
              {
                v26 = v88 | 0x100000000;
                v27 = v26 >> 8;
                v28 = v87;
                if (v87)
                {
                  p_shared_owners = (unint64_t *)&v87->__shared_owners_;
                  do
                    v30 = __ldaxr(p_shared_owners);
                  while (__stlxr(v30 - 1, p_shared_owners));
                  if (!v30)
                  {
                    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                    std::__shared_weak_count::__release_weak(v28);
                  }
                }
                v31 = 0x100000000;
              }
              else
              {
                LOBYTE(v26) = 0;
                v31 = 0;
                LODWORD(v27) = 0;
              }
              v54 = v82;
              v32 = v81[1];
              v33 = v81[0];
              v65[0] = v24;
              v66 = 20;
              v67 = v9;
              v68 = v72;
              v69 = v72;
              v70 = v72;
              v71 = 32;
              v73 = 0;
              v34 = v26 | (unint64_t)v31 | ((_DWORD)v27 << 8);
              if (v34 <= 0x100000000)
                v35 = 0;
              else
                v35 = v34;
              LODWORD(v86) = HIDWORD(v82);
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v72, (char *)&v86, (char *)&v86 + 4);
              LODWORD(v86) = v54;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
              LODWORD(v86) = v32;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
              LODWORD(v86) = v33;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
              LODWORD(v86) = 0;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
              LODWORD(v86) = v35;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
              v36 = (unsigned __int8 *)v68;
              v37 = v69 - (_BYTE *)v68;
              if (v69 == v68)
              {
                v38 = 0;
                v3 = a3;
                v39 = v56;
              }
              else
              {
                v38 = 0;
                if (v37 <= 1)
                  v37 = 1;
                v3 = a3;
                v39 = v56;
                do
                {
                  v40 = *v36++;
                  v38 ^= (v38 << 6) - 0x61C8864680B583EBLL + (v38 >> 2) + v40;
                  --v37;
                }
                while (v37);
              }
              v73 = v38;
              v74 = v39;
              gdc::LayerDataRequest::request(*i, (uint64_t)v65, 0);
              if (v68 != v70)
                free(v68);
            }
          }
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(&v63, *(_QWORD *)(a1 + 24), 50);
        v61[0] = *(_WORD *)v81;
        v62 = v82;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __int16 *))(**(_QWORD **)(a1 + 24) + 16))(&v59, *(_QWORD *)(a1 + 24), 50, v61);
        if (!(_BYTE)v59 || !(_BYTE)v63 || HIDWORD(v63) > BYTE1(v60[0]) || v64 < BYTE1(v60[0]))
          continue;
        v41 = *i;
        if (*(_BYTE *)(*i + 96))
          v42 = *(_DWORD *)(v41 + 100);
        else
          v42 = 2147483646;
        v43 = *(_BYTE *)v41;
        v44 = *(_QWORD *)(v41 + 112);
        md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v86, ***(QuadTile ****)(a1 + 752), (uint64_t)v60);
        if (v89)
        {
          v45 = v87;
          if (v87)
          {
            v46 = (unint64_t *)&v87->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
        v57 = v60[1];
        v48 = BYTE1(v60[0]);
        v49 = LOBYTE(v60[0]);
        v65[0] = v43;
        v66 = 50;
        v67 = v42;
        v68 = v72;
        v69 = v72;
        v70 = v72;
        v71 = 32;
        v73 = 0;
        LODWORD(v86) = v60[2];
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v72, (char *)&v86, (char *)&v86 + 4);
        LODWORD(v86) = v57;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
        LODWORD(v86) = v48;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
        LODWORD(v86) = v49;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
        LODWORD(v86) = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
        LODWORD(v86) = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v86, (char *)&v86 + 4);
        v50 = (unsigned __int8 *)v68;
        v51 = v69 - (_BYTE *)v68;
        if (v69 == v68)
        {
          v52 = 0;
          v3 = a3;
        }
        else
        {
          v52 = 0;
          if (v51 <= 1)
            v51 = 1;
          v3 = a3;
          do
          {
            v53 = *v50++;
            v52 ^= (v52 << 6) - 0x61C8864680B583EBLL + (v52 >> 2) + v53;
            --v51;
          }
          while (v51);
        }
        v73 = v52;
        v74 = v44;
        gdc::LayerDataRequest::request(*i, (uint64_t)v65, 0);
        v23 = v68;
        if (v68 == v70)
          continue;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(&v86, *(_QWORD *)(a1 + 24), 50);
        if (!(_BYTE)v86 || HIDWORD(v86) > v84 || v87 < v84)
          continue;
        v10 = *i;
        if (*(_BYTE *)(*i + 96))
          v11 = *(_DWORD *)(v10 + 100);
        else
          v11 = 2147483646;
        v12 = *(_BYTE *)v10;
        v13 = *(_QWORD *)(v10 + 112);
        md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v75, ***(QuadTile ****)(a1 + 752), (uint64_t)&v83);
        if (v78)
        {
          v14 = v77;
          if (v77)
          {
            v15 = (unint64_t *)&v77->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        v55 = v85.i32[0];
        v17 = v84;
        v18 = v83;
        v65[0] = v12;
        v66 = 50;
        v67 = v11;
        v68 = v72;
        v69 = v72;
        v70 = v72;
        v71 = 32;
        v73 = 0;
        v75 = v85.i32[1];
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v72, (char *)&v75, v76);
        v75 = v55;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v75, v76);
        v75 = v17;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v75, v76);
        v75 = v18;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v75, v76);
        v75 = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v75, v76);
        v75 = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v75, v76);
        v19 = (unsigned __int8 *)v68;
        v20 = v69 - (_BYTE *)v68;
        if (v69 == v68)
        {
          v21 = 0;
          v3 = a3;
        }
        else
        {
          v21 = 0;
          if (v20 <= 1)
            v20 = 1;
          v3 = a3;
          do
          {
            v22 = *v19++;
            v21 ^= (v21 << 6) - 0x61C8864680B583EBLL + (v21 >> 2) + v22;
            --v20;
          }
          while (v20);
        }
        v73 = v21;
        v74 = v13;
        gdc::LayerDataRequest::request(*i, (uint64_t)v65, 0);
        v23 = v68;
        if (v68 == v70)
          continue;
      }
      free(v23);
    }
  }
}

void md::FlyoverDsmLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *v74[3];
  _QWORD v75[2];

  memset(v74, 0, sizeof(v74));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a2, a2[1], v74);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    while (*(_WORD *)v6 != 50)
    {
      v6 += 48;
      if (v6 == v7)
        goto LABEL_15;
    }
  }
  if (v6 == v7 || *(_QWORD *)(v6 + 32) != 1)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v8 + 112);
  v10 = *(std::__shared_weak_count **)(v8 + 120);
  if (!v10)
  {
LABEL_16:
    v72 = v9;
    v73 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v72 = v9;
  v73 = v10;
  v13 = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_17:
  v16 = *a2;
  v17 = a2[1];
  if (*a2 != v17)
  {
    while (*(_WORD *)v16 != 20)
    {
      v16 += 48;
      if (v16 == v17)
        goto LABEL_32;
    }
  }
  if (v16 == v17 || *(_QWORD *)(v16 + 32) != 1)
  {
LABEL_32:
    v19 = 0;
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(v16 + 24);
  v19 = *(_QWORD *)(v18 + 112);
  v20 = *(std::__shared_weak_count **)(v18 + 120);
  if (!v20)
  {
LABEL_33:
    v71 = 0;
    goto LABEL_34;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v70 = v19;
  v71 = v20;
  v23 = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  v19 = v70;
LABEL_34:
  v66 = 0;
  v67 = 0;
  if (v19 && (v26 = *(_QWORD **)(v19 + 144)) != 0 && *v26 != v26[1])
  {
    if (v71)
    {
      v27 = (unint64_t *)&v71->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v68 = v19;
    v69 = v71;
    if (v73)
    {
      v29 = (unint64_t *)&v73->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v66 = v72;
      v67 = v73;
    }
    else
    {
      v66 = v72;
      v67 = 0;
    }
  }
  else
  {
    if (v73)
    {
      v31 = (unint64_t *)&v73->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v68 = v72;
    v69 = v73;
  }
  v33 = (char *)operator new(0x308uLL);
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *(_QWORD *)v33 = &off_1E42DBC50;
  v75[0] = 0;
  v75[1] = 0;
  md::MapTileData::MapTileData((uint64_t)(v33 + 24), a1, (uint64_t)v74, (uint64_t)v75, 1);
  *((_QWORD *)v33 + 3) = off_1E4292470;
  *((_QWORD *)v33 + 82) = &unk_1E42924D8;
  *((_QWORD *)v33 + 3) = &off_1E4294758;
  *((_QWORD *)v33 + 82) = &unk_1E42947C0;
  *(_OWORD *)(v33 + 744) = 0u;
  *(_OWORD *)(v33 + 760) = 0u;
  if (v68)
  {
    v34 = v33 + 744;
    v35 = *(_OWORD *)(v68 + 144);
    v36 = *(_QWORD *)(v68 + 152);
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v39 = (std::__shared_weak_count *)*((_QWORD *)v33 + 94);
      *v34 = v35;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    else
    {
      *v34 = v35;
    }
  }
  *(_QWORD *)&v42 = v33 + 24;
  *((_QWORD *)&v42 + 1) = v33;
  if (v66)
  {
    v43 = *(_QWORD *)(v66 + 144);
    v44 = *(std::__shared_weak_count **)(v66 + 152);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    *((_QWORD *)v33 + 95) = v43;
    v49 = (std::__shared_weak_count *)*((_QWORD *)v33 + 96);
    *((_QWORD *)v33 + 96) = v44;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        v64 = v42;
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        v42 = v64;
      }
    }
    if (v44)
    {
      v52 = (unint64_t *)&v44->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        v65 = v42;
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v42 = v65;
      }
    }
  }
  *a3 = v42;
  if (v67)
  {
    v54 = (unint64_t *)&v67->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v69)
  {
    v56 = (unint64_t *)&v69->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (!v71)
    goto LABEL_88;
  v58 = (unint64_t *)&v71->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    v60 = v73;
    if (!v73)
      goto LABEL_92;
  }
  else
  {
LABEL_88:
    v60 = v73;
    if (!v73)
      goto LABEL_92;
  }
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v63 = v74[0];
    if (v74[0])
      goto LABEL_93;
    return;
  }
LABEL_92:
  v63 = v74[0];
  if (v74[0])
LABEL_93:
    operator delete(v63);
}

void sub_19F780D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  v6 = *(void **)(v4 - 72);
  if (v6)
    operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverDsmLayerDataSource::updateRequest()
{
  return 1;
}

void md::FlyoverDsmLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  char v24[4];
  std::__shared_weak_count *v25;
  char v26;

  if (*(_BYTE *)a5)
    v10 = *(_DWORD *)(a5 + 4);
  else
    v10 = 2147483646;
  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v23, ***(QuadTile ****)(a1 + 752), (uint64_t)a3);
  if (v26)
  {
    v11 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = *(_QWORD *)(a3 + 4);
  v22 = v14;
  v15 = a3[1];
  v16 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = 50;
  *(_DWORD *)(a6 + 4) = v10;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v23 = HIDWORD(v14);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v23, v24);
  v23 = v22;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v23, v24);
  v23 = v15;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v23, v24);
  v23 = v16;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v23, v24);
  v23 = 0;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v23, v24);
  v23 = 0;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v23, v24);
  v17 = *(unsigned __int8 **)(a6 + 16);
  v18 = *(unsigned __int8 **)(a6 + 8);
  v19 = v17 - v18;
  if (v17 == v18)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    if (v19 <= 1)
      v19 = 1;
    do
    {
      v21 = *v18++;
      v20 ^= (v20 << 6) + (v20 >> 2) - 0x61C8864680B583EBLL + v21;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a6 + 72) = v20;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::FlyoverDsmTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FlyoverDsmTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::FlyoverDsmTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::mun::MuninLayer::~MuninLayer(md::mun::MuninLayer *this)
{
  md::mun::MuninLayer::~MuninLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  md::mun::MuninRenderResources *v8;
  void *v9;

  *(_QWORD *)this = &off_1E42AB990;
  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          std::array<std::unique_ptr<ggl::Drawable>,3ul>::~array((uint64_t **)(v5 + 24));
          v7 = *(void **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)(v5 + 8) = v7;
            operator delete(v7);
          }
          MEMORY[0x1A1AF4E00](v5, 0x20C40A759441BLL);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  v8 = (md::mun::MuninRenderResources *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    md::mun::MuninRenderResources::~MuninRenderResources(v8);
    MEMORY[0x1A1AF4E00]();
  }

  *(_QWORD *)this = off_1E428C468;
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
}

void md::mun::MuninLayer::prepare(md::mun::MuninLayer *this, md::LayoutContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *j;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  unsigned __int8 v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  void *v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  unsigned __int8 v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  int64x2_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  _OWORD *v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  int v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  unsigned __int8 v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  char *v198;
  unsigned __int8 v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  __int128 v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  int64x2_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  ggl::ViewShader *v238;
  unsigned __int8 v239;
  unsigned __int8 v240;
  unsigned __int8 v241;
  ggl::VSPassthroughShader *v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  ggl::ViewStretchAlphaShader *v245;
  unsigned __int8 v246;
  unsigned __int8 v247;
  unsigned __int8 v248;
  ggl::VSCompositingShader *v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  unsigned __int8 v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  unsigned __int8 v255;
  unsigned __int8 v256;
  unsigned __int8 v257;
  unsigned __int8 v258;
  unsigned __int8 v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  unsigned __int8 v262;
  unsigned __int8 v263;
  id v264;
  std::__shared_weak_count *v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  __int128 v271;
  _BYTE v272[36];
  uint64_t v273;
  char v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;

  v279 = *MEMORY[0x1E0C80C00];
  md::LayoutContext::frameState(a2);
  if (*(_BYTE *)(v4 + 117))
    return;
  v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v7 <= 0xC83717EF586624DCLL)
      v9 = 0xC83717EF586624DCLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0xC83717EF586624DCLL;
  }
  v10 = *(_QWORD **)(*v6 + 8 * v9);
  if (!v10)
    goto LABEL_25;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_25;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == 0xC83717EF586624DCLL)
      {
        if (v11[2] == 0xC83717EF586624DCLL)
          goto LABEL_23;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_25;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == 0xC83717EF586624DCLL)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_25;
LABEL_12:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_25;
  }
  if (v11[2] != 0xC83717EF586624DCLL)
    goto LABEL_12;
LABEL_23:
  v15 = v11[5];
  if (*(_QWORD *)(v15 + 8) == 0xC83717EF586624DCLL)
  {
    v16 = *(_QWORD *)(v15 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v16 = 0;
LABEL_26:
  v17 = *(_QWORD **)(v16 + 24);
  v18 = v17 + 1;
  if (v17[4])
  {
    v19 = (_BYTE *)v17[3];
    if (v19)
    {
      do
      {
        if (v19[112])
          v19[112] = 0;
        v56 = *(_BYTE **)v19;
        v57 = (void *)*((_QWORD *)v19 + 4);
        if (v57 != *((void **)v19 + 6))
          free(v57);
        operator delete(v19);
        v19 = v56;
      }
      while (v56);
    }
    v17[3] = 0;
    v20 = v17[2];
    if (v20)
    {
      for (i = 0; i != v20; ++i)
        *(_QWORD *)(*v18 + 8 * i) = 0;
    }
    v17[4] = 0;
  }
  for (j = *(_QWORD **)(v16 + 168); j; j = (_QWORD *)*j)
  {
    v23 = (uint64_t *)j[3];
    v24 = (uint64_t *)j[4];
    while (v23 != v24)
    {
      v25 = *v23;
      v23 += 2;
      std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v18, (unsigned __int8 *)(v25 + 16), v25 + 16);
    }
  }
  v26 = *((_QWORD *)this + 8);
  v27 = *(id *)a2;
  v264 = v27;
  v28 = objc_msgSend(v27, "format");
  v29 = (_OWORD *)v28;
  v30 = *(_OWORD *)(v5 + 192);
  v266 = *(_OWORD *)(v5 + 176);
  v267 = v30;
  v31 = *(uint64_t **)(*(_QWORD *)(v26 + 64) + 24);
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  v265 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    v31 = *(uint64_t **)(*(_QWORD *)(v26 + 64) + 24);
  }
  v37 = v31[6];
  v36 = (std::__shared_weak_count *)v31[7];
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(_QWORD *)(v26 + 16);
  if (v40 != *(_QWORD *)(v28 + 16)
    || *(_DWORD *)(v26 + 24) != *(_DWORD *)(v28 + 24)
    || *(_DWORD *)(v26 + 28) != *(_DWORD *)(v28 + 28))
  {
    goto LABEL_53;
  }
  if (!v40)
    goto LABEL_214;
  if (*(_DWORD *)v26 != *(_DWORD *)v28)
  {
LABEL_53:
    v44 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v28;
    *(_OWORD *)(v26 + 16) = v44;
    v45 = *(_QWORD *)(v37 + 80);
    v47 = *(_QWORD *)(v45 + 8);
    v46 = *(std::__shared_weak_count **)(v45 + 16);
    if (v46)
    {
      v48 = (unint64_t *)&v46->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    *(_QWORD *)&v277 = 0;
    v50 = (char *)operator new(0x198uLL);
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = 0;
    *(_QWORD *)v50 = &off_1E42E4850;
    v51 = v29[1];
    *(_OWORD *)v272 = *v29;
    *(_OWORD *)&v272[16] = v51;
    if ((v52 & 1) == 0)
    {
      if ((_DWORD)v238)
      {
        if ((v239 & 1) == 0)
        {
          if ((_DWORD)v238)
          {
            if ((v253 & 1) == 0
            {
              if ((v260 & 1) == 0
              {
                ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
              }
              ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
              *(_QWORD *)algn_1EE577990 = 1;
            }
            ggl::VSView::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
            *(_QWORD *)algn_1EE576AA8 = &ggl::VSView::pipelineDataPipelineDeviceStructs(void)::ref;
            qword_1EE576AB0 = 0;
            if ((v254 & 1) == 0
            {
              ggl::VSView::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::VSView::View::reflection(void)::reflection;
              unk_1EE576B10 = ggl::VSView::Shared::reflection(void)::reflection;
            }
            qword_1EE576AB8 = (uint64_t)&ggl::VSView::pipelineDataPipelineConstantStructs(void)::ref;
            unk_1EE576AC0 = xmmword_19FFB35A0;
          }
        }
        ggl::VSView::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VSView::PipelineSetup::typedReflection(void)::ref;
        ggl::ViewShader::typedReflection(v238);
        qword_1EE577880 = (uint64_t)&ggl::ViewShader::typedReflection(void)::ref;
        if ((v240 & 1) == 0
        {
          ggl::VSView::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE576B80 = 0;
          qword_1EE576B88 = (uint64_t)"";
          dword_1EE576B90 = 0;
          qword_1EE576B98 = (uint64_t)&ggl::VSView::pipelineStatePipelineAttributeBinding_0(void)::attr;
          unk_1EE576BA0 = 2;
        }
        qword_1EE577888 = (uint64_t)&ggl::VSView::pipelineStatePipelineAttributeStructBinding(void)::attr;
        unk_1EE577890 = 1;
        qword_1EE577898 = 0;
        unk_1EE5778A0 = 1;
        qword_1EE5778A8 = (uint64_t)&ggl::VSView::pipelineStatePipelineDeviceStructBinding(void)::ref;
        unk_1EE5778B0 = 0;
        if ((v241 & 1) == 0
        {
          ggl::VSView::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
          unk_1EE576B20 = 0;
          qword_1EE576B28 = (uint64_t)"view";
          dword_1EE576B30 = 3;
          qword_1EE576B38 = (uint64_t)&ggl::VSView::pipelineStatePipelineConstantViewBinding(void)::reflection;
          unk_1EE576B40 = vdupq_n_s64(1uLL);
          qword_1EE576B50 = 1;
          unk_1EE576B58 = "sharedConstants";
          dword_1EE576B60 = 3;
          qword_1EE576B68 = (uint64_t)&ggl::VSView::pipelineStatePipelineConstantSharedConstantsBinding(void)::reflection;
          unk_1EE576B70 = 2;
        }
        qword_1EE5778B8 = (uint64_t)&ggl::VSView::pipelineStatePipelineConstantStructBinding(void)::ref;
        unk_1EE5778C0 = 2;
      }
    }
    if (v46)
    {
      v53 = (unint64_t *)&v46->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      *((_DWORD *)v50 + 14) = 0;
      *((_QWORD *)v50 + 5) = 0;
      *((_QWORD *)v50 + 6) = 0;
      *((_QWORD *)v50 + 3) = &off_1E42B6760;
      *((_QWORD *)v50 + 4) = 0;
      *((_QWORD *)v50 + 8) = &ggl::VSView::PipelineState::typedReflection(void)::ref;
      *((_QWORD *)v50 + 9) = v47;
      *((_QWORD *)v50 + 10) = v46;
      do
        v55 = __ldxr(v53);
      while (__stxr(v55 + 1, v53));
    }
    else
    {
      *((_DWORD *)v50 + 14) = 0;
      *((_QWORD *)v50 + 5) = 0;
      *((_QWORD *)v50 + 6) = 0;
      *((_QWORD *)v50 + 3) = &off_1E42B6760;
      *((_QWORD *)v50 + 4) = 0;
      *((_QWORD *)v50 + 8) = &ggl::VSView::PipelineState::typedReflection(void)::ref;
      *((_QWORD *)v50 + 9) = v47;
      *((_QWORD *)v50 + 10) = 0;
    }
    v50[136] = 0;
    *(_OWORD *)(v50 + 140) = xmmword_19FFB3060;
    *(_QWORD *)(v50 + 156) = 0;
    *(_QWORD *)(v50 + 172) = 0;
    *(_QWORD *)(v50 + 164) = 0;
    v50[184] = 0;
    *(_OWORD *)(v50 + 188) = xmmword_19FFB3060;
    *(_QWORD *)(v50 + 204) = 0;
    *(_QWORD *)(v50 + 220) = 0;
    *(_QWORD *)(v50 + 212) = 0;
    v50[232] = 0;
    *(_OWORD *)(v50 + 236) = xmmword_19FFB3060;
    *(_QWORD *)(v50 + 252) = 0;
    *(_QWORD *)(v50 + 268) = 0;
    *(_QWORD *)(v50 + 260) = 0;
    v58 = *(_OWORD *)&v272[16];
    *(_OWORD *)(v50 + 280) = *(_OWORD *)v272;
    *(_OWORD *)(v50 + 296) = v58;
    v50[312] = 0;
    *((_QWORD *)v50 + 48) = 0;
    *((_OWORD *)v50 + 22) = 0u;
    *((_OWORD *)v50 + 23) = 0u;
    *((_OWORD *)v50 + 20) = 0u;
    *((_OWORD *)v50 + 21) = 0u;
    *((_QWORD *)v50 + 49) = 0x100000001;
    v50[400] = 0;
    v50[88] = 0;
    *(_WORD *)(v50 + 89) = v275;
    v50[91] = BYTE2(v275);
    *(_OWORD *)(v50 + 92) = xmmword_19FFB3060;
    *(_QWORD *)(v50 + 108) = v277;
    *((_DWORD *)v50 + 29) = 0;
    *((_QWORD *)v50 + 15) = 0;
    *((_DWORD *)v50 + 32) = 0;
    v50[132] = 15;
    if (v46)
    {
      v59 = (unint64_t *)&v46->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    *((_QWORD *)v50 + 3) = &off_1E42BC2A0;
    v61 = *(std::__shared_weak_count **)(v26 + 248);
    *(_QWORD *)(v26 + 240) = v50 + 24;
    *(_QWORD *)(v26 + 248) = v50;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v46)
    {
      v64 = (unint64_t *)&v46->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v66 = *(_QWORD *)(v37 + 80);
    v68 = *(_QWORD *)(v66 + 152);
    v67 = *(std::__shared_weak_count **)(v66 + 160);
    if (v67)
    {
      v69 = (unint64_t *)&v67->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    *(_QWORD *)&v277 = 0;
    v71 = (char *)operator new(0x198uLL);
    *((_QWORD *)v71 + 1) = 0;
    *((_QWORD *)v71 + 2) = 0;
    *(_QWORD *)v71 = &off_1E42DE768;
    v72 = v29[1];
    *(_OWORD *)v272 = *v29;
    *(_OWORD *)&v272[16] = v72;
    if ((v73 & 1) == 0)
    {
      if ((_DWORD)v242)
      {
        if ((v243 & 1) == 0)
        {
          if ((_DWORD)v242)
          {
            if ((v255 & 1) == 0
            {
              if ((v261 & 1) == 0
              {
                ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
              }
              ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
              *(_QWORD *)algn_1EE577990 = 1;
            }
            ggl::VSTextured::PassthroughPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
            unk_1EE5777C0 = &ggl::VSTextured::pipelineDataPassthroughPipelineDeviceStructs(void)::ref;
            qword_1EE5777C8 = 0;
            unk_1EE5777D0 = &ggl::VSTextured::pipelineDataPassthroughPipelineConstantStructs(void)::ref;
            xmmword_1EE5777D8 = xmmword_19FFB4830;
          }
        }
        ggl::VSTextured::PassthroughPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VSTextured::PassthroughPipelineSetup::typedReflection(void)::ref;
        ggl::VSPassthroughShader::typedReflection(v242);
        qword_1EE5777F8 = (uint64_t)&ggl::VSPassthroughShader::typedReflection(void)::ref;
        if ((v244 & 1) == 0
        {
          ggl::VSTextured::pipelineStatePassthroughPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE577848 = 0;
          qword_1EE577850 = (uint64_t)"";
          dword_1EE577858 = 0;
          qword_1EE577860 = (uint64_t)&ggl::VSTextured::pipelineStatePassthroughPipelineAttributeBinding_0(void)::attr;
          unk_1EE577868 = 2;
        }
        qword_1EE577800 = (uint64_t)&ggl::VSTextured::pipelineStatePassthroughPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE577808 = 1;
        qword_1EE577810 = 0;
        unk_1EE577818 = 2;
        qword_1EE577820 = (uint64_t)&ggl::VSTextured::pipelineStatePassthroughPipelineDeviceStructBinding(void)::ref;
        unk_1EE577828 = 0;
        qword_1EE577830 = (uint64_t)&ggl::VSTextured::pipelineStatePassthroughPipelineConstantStructBinding(void)::ref;
        unk_1EE577838 = 0;
      }
    }
    if (v67)
    {
      v74 = (unint64_t *)&v67->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      *((_DWORD *)v71 + 14) = 0;
      *((_QWORD *)v71 + 5) = 0;
      *((_QWORD *)v71 + 6) = 0;
      *((_QWORD *)v71 + 3) = &off_1E42B6760;
      *((_QWORD *)v71 + 4) = 0;
      *((_QWORD *)v71 + 8) = &ggl::VSTextured::PassthroughPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v71 + 9) = v68;
      *((_QWORD *)v71 + 10) = v67;
      do
        v76 = __ldxr(v74);
      while (__stxr(v76 + 1, v74));
    }
    else
    {
      *((_DWORD *)v71 + 14) = 0;
      *((_QWORD *)v71 + 5) = 0;
      *((_QWORD *)v71 + 6) = 0;
      *((_QWORD *)v71 + 3) = &off_1E42B6760;
      *((_QWORD *)v71 + 4) = 0;
      *((_QWORD *)v71 + 8) = &ggl::VSTextured::PassthroughPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v71 + 9) = v68;
      *((_QWORD *)v71 + 10) = 0;
    }
    v71[136] = 0;
    *(_OWORD *)(v71 + 140) = xmmword_19FFB3060;
    *(_QWORD *)(v71 + 156) = 0;
    *(_QWORD *)(v71 + 172) = 0;
    *(_QWORD *)(v71 + 164) = 0;
    v71[184] = 0;
    *(_OWORD *)(v71 + 188) = xmmword_19FFB3060;
    *(_QWORD *)(v71 + 204) = 0;
    *(_QWORD *)(v71 + 220) = 0;
    *(_QWORD *)(v71 + 212) = 0;
    v71[232] = 0;
    *(_OWORD *)(v71 + 236) = xmmword_19FFB3060;
    *(_QWORD *)(v71 + 252) = 0;
    *(_QWORD *)(v71 + 268) = 0;
    *(_QWORD *)(v71 + 260) = 0;
    v77 = *(_OWORD *)&v272[16];
    *(_OWORD *)(v71 + 280) = *(_OWORD *)v272;
    *(_OWORD *)(v71 + 296) = v77;
    v71[312] = 0;
    *((_QWORD *)v71 + 48) = 0;
    *((_OWORD *)v71 + 22) = 0u;
    *((_OWORD *)v71 + 23) = 0u;
    *((_OWORD *)v71 + 20) = 0u;
    *((_OWORD *)v71 + 21) = 0u;
    *((_QWORD *)v71 + 49) = 0x100000001;
    v71[400] = 0;
    v71[88] = 0;
    *(_WORD *)(v71 + 89) = v275;
    v71[91] = BYTE2(v275);
    *(_OWORD *)(v71 + 92) = xmmword_19FFB3060;
    *(_QWORD *)(v71 + 108) = v277;
    *((_DWORD *)v71 + 29) = 0;
    *((_QWORD *)v71 + 15) = 0;
    *((_DWORD *)v71 + 32) = 0;
    v71[132] = 15;
    if (v67)
    {
      v78 = (unint64_t *)&v67->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    *((_QWORD *)v71 + 3) = &off_1E42B5A50;
    v80 = *(std::__shared_weak_count **)(v26 + 328);
    *(_QWORD *)(v26 + 320) = v71 + 24;
    *(_QWORD *)(v26 + 328) = v71;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (v67)
    {
      v83 = (unint64_t *)&v67->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v85 = (_QWORD *)operator new();
    v86 = v85;
    v87 = *(_QWORD *)(v26 + 320);
    v88 = *(std::__shared_weak_count **)(v26 + 328);
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
      ggl::PipelineSetup::PipelineSetup(v85, v87, (uint64_t)v88);
      v91 = (unint64_t *)&v88->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v85, v87, 0);
    }
    *v86 = &off_1E42B5A20;
    *(_QWORD *)v86[12] = 0;
    *(_QWORD *)(v86[12] + 8) = 0;
    v93 = *(_QWORD *)(v26 + 336);
    *(_QWORD *)(v26 + 336) = v86;
    if (v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
    v94 = (int64x2_t *)operator new();
    v95 = *(_QWORD *)(v26 + 336);
    v96 = *(_QWORD *)(v26 + 80);
    v97 = *(_QWORD *)(v26 + 88);
    v94->i64[0] = (uint64_t)&off_1E42B59B0;
    v94[1].i64[0] = (uint64_t)"Munin resize";
    v94[1].i64[1] = v96;
    v94[2].i64[0] = v95;
    v94[2].i32[2] = 0;
    v94[3].i64[0] = 0;
    v94[3].i32[2] = 1065353216;
    v94[4].i64[0] = v97;
    v94[4].i64[1] = 0;
    v94[5].i64[0] = 0;
    v94[5].i64[1] = 0;
    v94[6] = vdupq_n_s64(1uLL);
    v94[7].i64[0] = 0;
    v98 = *(_QWORD *)(v26 + 344);
    *(_QWORD *)(v26 + 344) = v94;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
    *(_OWORD *)&v272[20] = 0uLL;
    v273 = 0;
    v272[0] = 0;
    *(_OWORD *)&v272[4] = xmmword_19FFB3060;
    v274 = 8;
    v99 = *(_QWORD *)(v33 + 80);
    v100 = *(std::__shared_weak_count **)(v99 + 40);
    v275 = *(_QWORD *)(v99 + 32);
    v276 = v100;
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    v103 = (std::__shared_weak_count *)operator new(0x198uLL);
    v103->__shared_owners_ = 0;
    v104 = (unint64_t *)&v103->__shared_owners_;
    v103->__shared_weak_owners_ = 0;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4460;
    v277 = *v29;
    v278 = v29[1];
    ggl::Clear::ClearPipelineState::ClearPipelineState((uint64_t)&v103[1], &v275, (uint64_t)v272, &v277, 1);
    if (v100)
    {
      v105 = (unint64_t *)&v100->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v107 = operator new(0xE8uLL);
    v107[1] = 0;
    v107[2] = 0;
    *v107 = &off_1E42E2320;
    v108 = ggl::BufferData::BufferData((uint64_t)(v107 + 3), qword_1EE5754B0, 2, 1, 6, 1);
    v107[28] = ggl::Clear::ClearConstants::reflection(void)::reflection;
    v107[3] = &off_1E42B9810;
    v109 = *(std::__shared_weak_count **)(v26 + 120);
    *(_QWORD *)(v26 + 112) = v108;
    *(_QWORD *)(v26 + 120) = v107;
    if (v109)
    {
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v26 + 64) + 8) + 24))(&v271);
    *(_QWORD *)&v277 = &off_1E42D3F88;
    *((_QWORD *)&v277 + 1) = v26;
    *((_QWORD *)&v278 + 1) = &v277;
    v275 = 0;
    v276 = 0;
    (*(void (**)(_QWORD, __int128 *, uint64_t *))(*(_QWORD *)v271 + 16))(v271, &v277, &v275);
    v112 = v276;
    if (v276)
    {
      v113 = (unint64_t *)&v276->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = (__int128 *)*((_QWORD *)&v278 + 1);
    if (*((__int128 **)&v278 + 1) == &v277)
    {
      v116 = 4;
      v115 = &v277;
    }
    else
    {
      if (!*((_QWORD *)&v278 + 1))
        goto LABEL_145;
      v116 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
LABEL_145:
    if ((_QWORD)v271)
    {
      v117 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v271 + 24))(v271);
      v118 = v271;
      *(_QWORD *)&v271 = 0;
      *(_QWORD *)&v277 = v118;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v117 + 48))(v117, &v277);
      v119 = v277;
      *(_QWORD *)&v277 = 0;
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
      v120 = v271;
      *(_QWORD *)&v271 = 0;
      if (v120)
        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
    }
    v121 = (_QWORD *)operator new();
    v122 = v121;
    do
      v123 = __ldxr(v104);
    while (__stxr(v123 + 1, v104));
    ggl::PipelineSetup::PipelineSetup(v121, (uint64_t)&v103[1], (uint64_t)v103);
    do
      v124 = __ldaxr(v104);
    while (__stlxr(v124 - 1, v104));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
    *v122 = &off_1E42BBC48;
    v125 = (_QWORD *)v122[8];
    v125[1] = 0;
    v126 = *(_QWORD *)(v26 + 112);
    *v125 = v126;
    v127 = (_QWORD *)v122[20];
    v128 = *(_QWORD *)(v26 + 120);
    if (v128)
    {
      v129 = (unint64_t *)(v128 + 8);
      do
        v130 = __ldxr(v129);
      while (__stxr(v130 + 1, v129));
    }
    v131 = (std::__shared_weak_count *)v127[1];
    *v127 = v126;
    v127[1] = v128;
    if (v131)
    {
      v132 = (unint64_t *)&v131->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v134 = operator new(0xF8uLL);
    v134[1] = 0;
    v134[2] = 0;
    *v134 = &off_1E42E02F8;
    v135 = ggl::BufferData::BufferData((uint64_t)(v134 + 3), 8, 0, 0, 6, 4);
    v134[29] = "DepthClearQuadVerts";
    v134[30] = &ggl::Clear::clearDataReflection;
    v134[3] = &off_1E42B8020;
    v134[28] = &unk_1E42B8040;
    *(_QWORD *)&v271 = v135;
    *((_QWORD *)&v271 + 1) = v134;
    v136 = operator new(0xF8uLL);
    v136[1] = 0;
    v136[2] = 0;
    *v136 = &off_1E42E5228;
    v137 = ggl::BufferData::BufferData((uint64_t)(v136 + 3), 2, 1, 0, 6, 6);
    v136[28] = &unk_1E42BD118;
    v136[29] = "DepthClearQuadIdx";
    *((_DWORD *)v136 + 60) = 0;
    v136[3] = &off_1E42BD0F8;
    v136[4] = 2;
    v269 = v137;
    v270 = (std::__shared_weak_count *)v136;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v26 + 64) + 8) + 24))(&v268);
    *(_QWORD *)&v277 = &off_1E42D3FD0;
    *((_QWORD *)&v277 + 1) = &v271;
    *(_QWORD *)&v278 = &v269;
    *((_QWORD *)&v278 + 1) = &v277;
    v275 = 0;
    v276 = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v268 + 16))(v268, &v277, &v275);
    v138 = v276;
    if (v276)
    {
      v139 = (unint64_t *)&v276->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    v141 = (__int128 *)*((_QWORD *)&v278 + 1);
    if (*((__int128 **)&v278 + 1) == &v277)
    {
      v142 = 4;
      v141 = &v277;
    }
    else
    {
      if (!*((_QWORD *)&v278 + 1))
      {
LABEL_174:
        if (v268)
        {
          v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v268 + 24))(v268);
          v144 = v268;
          v268 = 0;
          *(_QWORD *)&v277 = v144;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v143 + 48))(v143, &v277);
          v145 = v277;
          *(_QWORD *)&v277 = 0;
          if (v145)
            (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
          v146 = v268;
          v268 = 0;
          if (v146)
            (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
        }
        v147 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v147->__shared_owners_ = 0;
        v148 = (unint64_t *)&v147->__shared_owners_;
        v147->__shared_weak_owners_ = 0;
        v147->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4498;
        v149 = (uint64_t)&v147[1];
        v277 = v271;
        if (*((_QWORD *)&v271 + 1))
        {
          v150 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        v152 = v270;
        v275 = v269;
        v276 = v270;
        if (v270)
        {
          v153 = (unint64_t *)&v270->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
          ggl::Clear::ClearMesh::ClearMesh(v149, (uint64_t)"DepthClearMesh", (uint64_t *)&v277, &v275);
          do
            v155 = __ldaxr(v153);
          while (__stlxr(v155 - 1, v153));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        else
        {
          ggl::Clear::ClearMesh::ClearMesh(v149, (uint64_t)"DepthClearMesh", (uint64_t *)&v277, &v275);
        }
        v156 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        if (*((_QWORD *)&v277 + 1))
        {
          v157 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v159 = operator new();
        *(_DWORD *)(v159 + 32) = 0;
        *(_QWORD *)(v159 + 16) = 0;
        *(_QWORD *)(v159 + 24) = 0;
        *(_QWORD *)v159 = &off_1E42B5DE8;
        *(_QWORD *)(v159 + 8) = 0;
        *(_QWORD *)(v159 + 36) = 1793;
        *(_DWORD *)(v159 + 44) = 0;
        *(_QWORD *)(v159 + 48) = 1;
        *(_WORD *)(v159 + 56) = 0;
        *(_BYTE *)(v159 + 58) = 3;
        *(_QWORD *)(v159 + 67) = 0;
        *(_QWORD *)(v159 + 59) = 0;
        *(_BYTE *)(v159 + 75) = 0;
        *(_QWORD *)(v159 + 132) = 0;
        *(_QWORD *)(v159 + 124) = 0;
        *(_WORD *)(v159 + 188) = 257;
        *(_QWORD *)(v159 + 192) = 0;
        *(_QWORD *)(v159 + 200) = 0;
        *(_BYTE *)(v159 + 208) = 0;
        v160 = *(_QWORD *)(v26 + 128);
        *(_QWORD *)(v26 + 128) = v159;
        if (v160)
          (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
        do
          v161 = __ldaxr(v148);
        while (__stlxr(v161 - 1, v148));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
        v162 = v270;
        v27 = v264;
        if (v270)
        {
          v163 = (unint64_t *)&v270->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v166 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        (*(void (**)(_QWORD *))(*v122 + 8))(v122);
        do
          v168 = __ldaxr(v104);
        while (__stlxr(v168 - 1, v104));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
        goto LABEL_214;
      }
      v142 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v141 + 8 * v142))();
    goto LABEL_174;
  }
  v41 = 0;
  while (v40 - 1 != v41)
  {
    v42 = *(_DWORD *)(v26 + 4 + 4 * v41);
    v43 = *(_DWORD *)(v28 + 4 + 4 * v41++);
    if (v42 != v43)
    {
      if (v41 >= v40)
        break;
      goto LABEL_53;
    }
  }
LABEL_214:
  v169 = (_OWORD *)(v26 + 32);
  v170 = *(_QWORD *)(v26 + 48);
  if (*(_OWORD *)(v26 + 48) != v267)
    goto LABEL_221;
  if (!v170)
    goto LABEL_293;
  if (*(_DWORD *)v169 == (_DWORD)v266)
  {
    v171 = 0;
    while (v170 - 1 != v171)
    {
      v172 = *(_DWORD *)(v26 + 36 + 4 * v171);
      v173 = *((_DWORD *)&v266 + ++v171);
      if (v172 != v173)
      {
        if (v171 >= v170)
          break;
        goto LABEL_221;
      }
    }
  }
  else
  {
LABEL_221:
    v174 = v267;
    *v169 = v266;
    *(_OWORD *)(v26 + 48) = v174;
    v175 = *(_QWORD *)(v37 + 80);
    v176 = *(_QWORD *)(v175 + 32);
    v177 = *(std::__shared_weak_count **)(v175 + 40);
    if (v177)
    {
      v178 = (unint64_t *)&v177->__shared_owners_;
      do
        v179 = __ldxr(v178);
      while (__stxr(v179 + 1, v178));
    }
    *(_QWORD *)&v277 = 0;
    v180 = (char *)operator new(0x198uLL);
    *((_QWORD *)v180 + 1) = 0;
    *((_QWORD *)v180 + 2) = 0;
    *(_QWORD *)v180 = &off_1E42E4888;
    *(_OWORD *)v272 = v266;
    *(_OWORD *)&v272[16] = v267;
    if ((v181 & 1) == 0)
    {
      if ((_DWORD)v245)
      {
        if ((v246 & 1) == 0)
        {
          if ((_DWORD)v245)
          {
            if ((v256 & 1) == 0
            {
              if ((v262 & 1) == 0
              {
                ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
              }
              ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
              *(_QWORD *)algn_1EE577990 = 1;
            }
            ggl::VSView::StretchAlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
            *(_QWORD *)algn_1EE576AD8 = &ggl::VSView::pipelineDataStretchAlphaPipelineDeviceStructs(void)::ref;
            qword_1EE576AE0 = 0;
            if ((v257 & 1) == 0
            {
              ggl::VSView::pipelineDataStretchAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::VSView::View::reflection(void)::reflection;
              *(_QWORD *)algn_1EE576BB8 = ggl::VSView::Shared::reflection(void)::reflection;
            }
            qword_1EE576AE8 = (uint64_t)&ggl::VSView::pipelineDataStretchAlphaPipelineConstantStructs(void)::ref;
            unk_1EE576AF0 = xmmword_19FFB35A0;
          }
        }
        ggl::VSView::StretchAlphaPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VSView::StretchAlphaPipelineSetup::typedReflection(void)::ref;
        ggl::ViewStretchAlphaShader::typedReflection(v245);
        qword_1EE5778D0 = (uint64_t)&ggl::ViewStretchAlphaShader::typedReflection(void)::ref;
        if ((v247 & 1) == 0
        {
          ggl::VSView::pipelineStateStretchAlphaPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE576C28 = 0;
          qword_1EE576C30 = (uint64_t)"";
          dword_1EE576C38 = 0;
          qword_1EE576C40 = (uint64_t)&ggl::VSView::pipelineStateStretchAlphaPipelineAttributeBinding_0(void)::attr;
          unk_1EE576C48 = 2;
        }
        qword_1EE5778D8 = (uint64_t)&ggl::VSView::pipelineStateStretchAlphaPipelineAttributeStructBinding(void)::attr;
        unk_1EE5778E0 = 1;
        qword_1EE5778E8 = 0;
        unk_1EE5778F0 = 1;
        qword_1EE5778F8 = (uint64_t)&ggl::VSView::pipelineStateStretchAlphaPipelineDeviceStructBinding(void)::ref;
        unk_1EE577900 = 0;
        if ((v248 & 1) == 0
        {
          ggl::VSView::pipelineStateStretchAlphaPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE576BC8 = 0;
          qword_1EE576BD0 = (uint64_t)"view";
          dword_1EE576BD8 = 3;
          qword_1EE576BE0 = (uint64_t)&ggl::VSView::pipelineStateStretchAlphaPipelineConstantViewBinding(void)::reflection;
          unk_1EE576BE8 = vdupq_n_s64(1uLL);
          qword_1EE576BF8 = 1;
          unk_1EE576C00 = "sharedConstants";
          dword_1EE576C08 = 3;
          qword_1EE576C10 = (uint64_t)&ggl::VSView::pipelineStateStretchAlphaPipelineConstantSharedConstantsBinding(void)::reflection;
          unk_1EE576C18 = 2;
        }
        qword_1EE577908 = (uint64_t)&ggl::VSView::pipelineStateStretchAlphaPipelineConstantStructBinding(void)::ref;
        unk_1EE577910 = 2;
      }
    }
    if (v177)
    {
      v182 = (unint64_t *)&v177->__shared_owners_;
      do
        v183 = __ldxr(v182);
      while (__stxr(v183 + 1, v182));
      *((_DWORD *)v180 + 14) = 0;
      *((_QWORD *)v180 + 5) = 0;
      *((_QWORD *)v180 + 6) = 0;
      *((_QWORD *)v180 + 3) = &off_1E42B6760;
      *((_QWORD *)v180 + 4) = 0;
      *((_QWORD *)v180 + 8) = &ggl::VSView::StretchAlphaPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v180 + 9) = v176;
      *((_QWORD *)v180 + 10) = v177;
      do
        v184 = __ldxr(v182);
      while (__stxr(v184 + 1, v182));
    }
    else
    {
      *((_DWORD *)v180 + 14) = 0;
      *((_QWORD *)v180 + 5) = 0;
      *((_QWORD *)v180 + 6) = 0;
      *((_QWORD *)v180 + 3) = &off_1E42B6760;
      *((_QWORD *)v180 + 4) = 0;
      *((_QWORD *)v180 + 8) = &ggl::VSView::StretchAlphaPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v180 + 9) = v176;
      *((_QWORD *)v180 + 10) = 0;
    }
    v180[136] = 0;
    *(_OWORD *)(v180 + 140) = xmmword_19FFB3060;
    *(_QWORD *)(v180 + 156) = 0;
    *(_QWORD *)(v180 + 172) = 0;
    *(_QWORD *)(v180 + 164) = 0;
    v180[184] = 0;
    *(_OWORD *)(v180 + 188) = xmmword_19FFB3060;
    *(_QWORD *)(v180 + 204) = 0;
    *(_QWORD *)(v180 + 220) = 0;
    *(_QWORD *)(v180 + 212) = 0;
    v180[232] = 0;
    *(_OWORD *)(v180 + 236) = xmmword_19FFB3060;
    *(_QWORD *)(v180 + 252) = 0;
    *(_QWORD *)(v180 + 268) = 0;
    *(_QWORD *)(v180 + 260) = 0;
    v185 = *(_OWORD *)&v272[16];
    *(_OWORD *)(v180 + 280) = *(_OWORD *)v272;
    *(_OWORD *)(v180 + 296) = v185;
    v180[312] = 0;
    *((_QWORD *)v180 + 48) = 0;
    *((_OWORD *)v180 + 22) = 0u;
    *((_OWORD *)v180 + 23) = 0u;
    *((_OWORD *)v180 + 20) = 0u;
    *((_OWORD *)v180 + 21) = 0u;
    *((_QWORD *)v180 + 49) = 0x100000001;
    v180[400] = 0;
    v180[88] = 1;
    *(_WORD *)(v180 + 89) = v275;
    v180[91] = BYTE2(v275);
    *(_OWORD *)(v180 + 92) = xmmword_19FFB3060;
    *(_QWORD *)(v180 + 108) = v277;
    *((_DWORD *)v180 + 29) = 0;
    *((_QWORD *)v180 + 15) = 0;
    *((_DWORD *)v180 + 32) = 0;
    v180[132] = 15;
    if (v177)
    {
      v186 = (unint64_t *)&v177->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    *((_QWORD *)v180 + 3) = &off_1E42BC2F0;
    v188 = *(std::__shared_weak_count **)(v26 + 224);
    *(_QWORD *)(v26 + 216) = v180 + 24;
    *(_QWORD *)(v26 + 224) = v180;
    if (v188)
    {
      v189 = (unint64_t *)&v188->__shared_owners_;
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    if (v177)
    {
      v191 = (unint64_t *)&v177->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    v193 = *(_QWORD *)(v37 + 80);
    v194 = *(_QWORD *)(v193 + 128);
    v195 = *(std::__shared_weak_count **)(v193 + 136);
    if (v195)
    {
      v196 = (unint64_t *)&v195->__shared_owners_;
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 1, v196));
    }
    *(_QWORD *)&v277 = 0;
    v198 = (char *)operator new(0x198uLL);
    *((_QWORD *)v198 + 1) = 0;
    *((_QWORD *)v198 + 2) = 0;
    *(_QWORD *)v198 = &off_1E42DE730;
    *(_OWORD *)v272 = v266;
    *(_OWORD *)&v272[16] = v267;
    if ((v199 & 1) == 0)
    {
      if ((_DWORD)v249)
      {
        if ((v250 & 1) == 0)
        {
          if ((_DWORD)v249)
          {
            if ((v258 & 1) == 0
            {
              if ((v263 & 1) == 0
              {
                ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
              }
              ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
              *(_QWORD *)algn_1EE577990 = 1;
            }
            ggl::VSTextured::CompositingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
            unk_1EE5768C0 = &ggl::VSTextured::pipelineDataCompositingPipelineDeviceStructs(void)::ref;
            qword_1EE5768C8 = 0;
            if ((v259 & 1) == 0
            {
              ggl::VSTextured::pipelineDataCompositingPipelineConstantStructs(void)::ref = (uint64_t)ggl::VSTextured::Style::reflection(void)::reflection;
            }
            qword_1EE5768D0 = (uint64_t)&ggl::VSTextured::pipelineDataCompositingPipelineConstantStructs(void)::ref;
            unk_1EE5768D8 = xmmword_19FFB4840;
          }
        }
        ggl::VSTextured::CompositingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VSTextured::CompositingPipelineSetup::typedReflection(void)::ref;
        ggl::VSCompositingShader::typedReflection(v249);
        qword_1EE577768 = (uint64_t)&ggl::VSCompositingShader::typedReflection(void)::ref;
        if ((v251 & 1) == 0
        {
          ggl::VSTextured::pipelineStateCompositingPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE576938 = 0;
          qword_1EE576940 = (uint64_t)"";
          dword_1EE576948 = 0;
          qword_1EE576950 = (uint64_t)&ggl::VSTextured::pipelineStateCompositingPipelineAttributeBinding_0(void)::attr;
          unk_1EE576958 = 2;
        }
        qword_1EE577770 = (uint64_t)&ggl::VSTextured::pipelineStateCompositingPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE577778 = 1;
        qword_1EE577780 = 0;
        unk_1EE577788 = 7;
        qword_1EE577790 = (uint64_t)&ggl::VSTextured::pipelineStateCompositingPipelineDeviceStructBinding(void)::ref;
        unk_1EE577798 = 0;
        if ((v252 & 1) == 0
        {
          ggl::VSTextured::pipelineStateCompositingPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE576908 = 0;
          qword_1EE576910 = (uint64_t)"style";
          dword_1EE576918 = 3;
          qword_1EE576920 = (uint64_t)&ggl::VSTextured::pipelineStateCompositingPipelineConstantStyleBinding(void)::reflection;
          unk_1EE576928 = 6;
        }
        qword_1EE5777A0 = (uint64_t)&ggl::VSTextured::pipelineStateCompositingPipelineConstantStructBinding(void)::ref;
        unk_1EE5777A8 = 1;
      }
    }
    if (v195)
    {
      v200 = (unint64_t *)&v195->__shared_owners_;
      do
        v201 = __ldxr(v200);
      while (__stxr(v201 + 1, v200));
      *((_DWORD *)v198 + 14) = 0;
      *((_QWORD *)v198 + 5) = 0;
      *((_QWORD *)v198 + 6) = 0;
      *((_QWORD *)v198 + 3) = &off_1E42B6760;
      *((_QWORD *)v198 + 4) = 0;
      *((_QWORD *)v198 + 8) = &ggl::VSTextured::CompositingPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v198 + 9) = v194;
      *((_QWORD *)v198 + 10) = v195;
      do
        v202 = __ldxr(v200);
      while (__stxr(v202 + 1, v200));
    }
    else
    {
      *((_DWORD *)v198 + 14) = 0;
      *((_QWORD *)v198 + 5) = 0;
      *((_QWORD *)v198 + 6) = 0;
      *((_QWORD *)v198 + 3) = &off_1E42B6760;
      *((_QWORD *)v198 + 4) = 0;
      *((_QWORD *)v198 + 8) = &ggl::VSTextured::CompositingPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v198 + 9) = v194;
      *((_QWORD *)v198 + 10) = 0;
    }
    v198[136] = 0;
    *(_OWORD *)(v198 + 140) = xmmword_19FFB3060;
    *(_QWORD *)(v198 + 156) = 0;
    *(_QWORD *)(v198 + 172) = 0;
    *(_QWORD *)(v198 + 164) = 0;
    v198[184] = 0;
    *(_OWORD *)(v198 + 188) = xmmword_19FFB3060;
    *(_QWORD *)(v198 + 204) = 0;
    *(_QWORD *)(v198 + 220) = 0;
    *(_QWORD *)(v198 + 212) = 0;
    v198[232] = 0;
    *(_OWORD *)(v198 + 236) = xmmword_19FFB3060;
    *(_QWORD *)(v198 + 252) = 0;
    *(_QWORD *)(v198 + 268) = 0;
    *(_QWORD *)(v198 + 260) = 0;
    v203 = *(_OWORD *)&v272[16];
    *(_OWORD *)(v198 + 280) = *(_OWORD *)v272;
    *(_OWORD *)(v198 + 296) = v203;
    v198[312] = 0;
    *((_QWORD *)v198 + 48) = 0;
    *((_OWORD *)v198 + 22) = 0u;
    *((_OWORD *)v198 + 23) = 0u;
    *((_OWORD *)v198 + 20) = 0u;
    *((_OWORD *)v198 + 21) = 0u;
    *((_QWORD *)v198 + 49) = 0x100000001;
    v198[400] = 0;
    v198[88] = 0;
    *(_WORD *)(v198 + 89) = v275;
    v198[91] = BYTE2(v275);
    *(_OWORD *)(v198 + 92) = xmmword_19FFB3060;
    *(_QWORD *)(v198 + 108) = v277;
    *((_DWORD *)v198 + 29) = 0;
    *((_QWORD *)v198 + 15) = 0;
    *((_DWORD *)v198 + 32) = 0;
    v198[132] = 15;
    if (v195)
    {
      v204 = (unint64_t *)&v195->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    *((_QWORD *)v198 + 3) = &off_1E42B5A00;
    v206 = *(std::__shared_weak_count **)(v26 + 288);
    *(_QWORD *)(v26 + 280) = v198 + 24;
    *(_QWORD *)(v26 + 288) = v198;
    if (v206)
    {
      v207 = (unint64_t *)&v206->__shared_owners_;
      do
        v208 = __ldaxr(v207);
      while (__stlxr(v208 - 1, v207));
      if (!v208)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    if (v195)
    {
      v209 = (unint64_t *)&v195->__shared_owners_;
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    v211 = (_QWORD *)operator new();
    v212 = v211;
    v213 = *(_QWORD *)(v26 + 280);
    v214 = *(std::__shared_weak_count **)(v26 + 288);
    if (v214)
    {
      v215 = (unint64_t *)&v214->__shared_owners_;
      do
        v216 = __ldxr(v215);
      while (__stxr(v216 + 1, v215));
      ggl::PipelineSetup::PipelineSetup(v211, v213, (uint64_t)v214);
      v217 = (unint64_t *)&v214->__shared_owners_;
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v211, v213, 0);
    }
    *v212 = &off_1E42B59D0;
    v219 = (_QWORD *)v212[8];
    v219[1] = 0;
    v220 = *(_QWORD *)(v26 + 264);
    *v219 = v220;
    v221 = (_QWORD *)v212[20];
    v222 = *(_QWORD *)(v26 + 272);
    if (v222)
    {
      v223 = (unint64_t *)(v222 + 8);
      do
        v224 = __ldxr(v223);
      while (__stxr(v224 + 1, v223));
    }
    v225 = (std::__shared_weak_count *)v221[1];
    *v221 = v220;
    v221[1] = v222;
    if (v225)
    {
      v226 = (unint64_t *)&v225->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    *(_QWORD *)v212[12] = 0;
    *(_QWORD *)(v212[12] + 8) = 0;
    *(_QWORD *)(v212[12] + 16) = 0;
    *(_QWORD *)(v212[12] + 24) = 0;
    *(_QWORD *)(v212[12] + 32) = 0;
    *(_QWORD *)(v212[12] + 40) = 0;
    *(_QWORD *)(v212[12] + 48) = 0;
    v228 = *(_QWORD *)(v26 + 296);
    *(_QWORD *)(v26 + 296) = v212;
    if (v228)
      (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
    v229 = (int64x2_t *)operator new();
    v230 = *(_QWORD *)(v26 + 296);
    v231 = *(_QWORD *)(v26 + 80);
    v232 = *(_QWORD *)(v26 + 88);
    v229->i64[0] = (uint64_t)&off_1E42B59B0;
    v229[1].i64[0] = (uint64_t)"Munin compositing";
    v229[1].i64[1] = v231;
    v229[2].i64[0] = v230;
    v229[2].i32[2] = 0;
    v229[3].i64[0] = 0;
    v229[3].i32[2] = 1065353216;
    v229[4].i64[0] = v232;
    v229[4].i64[1] = 0;
    v229[5].i64[0] = 0;
    v229[5].i64[1] = 0;
    v229[6] = vdupq_n_s64(1uLL);
    v229[7].i64[0] = 0;
    v233 = *(_QWORD *)(v26 + 304);
    *(_QWORD *)(v26 + 304) = v229;
    if (v233)
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  }
LABEL_293:
  if (v36)
  {
    v234 = (unint64_t *)&v36->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v265)
  {
    v236 = (unint64_t *)&v265->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }

}

void sub_19F783008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a10)
  {
    v17 = (unint64_t *)&a10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  _Unwind_Resume(a1);
}

void md::mun::MuninLayer::render(md::mun::MuninLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v2;
  int8x8_t v3;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  double v19;
  id v20;
  double v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];
  _OWORD *v28;
  uint64_t v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;

  v2 = (_QWORD *)*((_QWORD *)a2 + 1);
  v3 = (int8x8_t)v2[1];
  if (v3)
  {
    v6 = (uint8x8_t)vcnt_s8(v3);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0xC83717EF586624DCLL;
      if (*(_QWORD *)&v3 <= 0xC83717EF586624DCLL)
        v7 = 0xC83717EF586624DCLL % *(_QWORD *)&v3;
    }
    else
    {
      v7 = (*(_QWORD *)&v3 - 1) & 0xC83717EF586624DCLL;
    }
    v8 = *(_QWORD **)(*v2 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0xC83717EF586624DCLL)
            {
              if (v9[2] == 0xC83717EF586624DCLL)
                goto LABEL_22;
            }
            else if ((v12 & v10) != v7)
            {
              return;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              return;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0xC83717EF586624DCLL)
          {
            if (v9[2] == 0xC83717EF586624DCLL)
            {
LABEL_22:
              v13 = v9[5];
              if (*(_QWORD *)(v13 + 8) == 0xC83717EF586624DCLL)
              {
                v14 = *(_QWORD *)(v13 + 32);
                if (v14)
                {
                  md::RenderItemPool::reset((void (***)(void))(*((_QWORD *)this + 8) + 192));
                  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((_QWORD *)this + 8) + 232));
                  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((_QWORD *)this + 8) + 256));
                  v15 = *(_QWORD *)(*((_QWORD *)this + 8) + 168);
                  v30 = 0;
                  v29[0] = 0;
                  v29[1] = 0;
                  v16 = *(_QWORD *)(v15 + 8);
                  v31 = 0;
                  v32 = v15;
                  v33 = 0;
                  v34 = v16;
                  v35 = 1;
                  if (v16)
                    v17 = *(_QWORD *)(v15 + 72);
                  else
                    v17 = 0;
                  v36 = v17;
                  ggl::BufferMemory::operator=(v29, (uint64_t)&v31);
                  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v31);
                  v18 = *(id *)a2;
                  objc_msgSend(v18, "sizeInPixels");
                  *(float *)&v19 = v19;
                  *(_DWORD *)v30 = LODWORD(v19);

                  v20 = *(id *)a2;
                  objc_msgSend(v20, "sizeInPixels");
                  v22 = v21;
                  *(float *)(v30 + 4) = v22;

                  *(_QWORD *)(v30 + 8) = 0x4228000040800000;
                  v23 = *(_QWORD *)(*((_QWORD *)this + 8) + 112);
                  v28 = 0;
                  v27[0] = 0;
                  v27[1] = 0;
                  v24 = *(_QWORD *)(v23 + 8);
                  v31 = 0;
                  v32 = v23;
                  v33 = 0;
                  v34 = v24;
                  v35 = 1;
                  if (v24)
                    v25 = *(_QWORD *)(v23 + 72);
                  else
                    v25 = 0;
                  v36 = v25;
                  ggl::BufferMemory::operator=(v27, (uint64_t)&v31);
                  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v31);
                  *v28 = xmmword_19FFB4820;
                  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v27);
                  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v29);
                  v26 = *(_QWORD *)(v14 + 200) - *(_QWORD *)(v14 + 192);
                  if (v26)
                  {
                    if (v26 == 8)
                      md::mun::MuninLayer::renderPanorama(this, a2);
                    else
                      md::mun::MuninLayer::renderTransition(this, a2);
                  }
                  else
                  {
                    md::mun::MuninLayer::renderNothing(this, *((int8x8_t **)a2 + 1));
                  }
                }
              }
              return;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v3)
              v11 %= *(_QWORD *)&v3;
            if (v11 != v7)
              return;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
}

void sub_19F783534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

_QWORD *md::mun::MuninLayer::renderNothing(_QWORD *this, int8x8_t *a2)
{
  int8x8_t v2;
  _QWORD *v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v2 = a2[1];
  if (v2)
  {
    v3 = this;
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC83717EF586624DCLL;
      if (*(_QWORD *)&v2 <= 0xC83717EF586624DCLL)
        v5 = 0xC83717EF586624DCLL % *(_QWORD *)&v2;
    }
    else
    {
      v5 = (*(_QWORD *)&v2 - 1) & 0xC83717EF586624DCLL;
    }
    v6 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC83717EF586624DCLL)
            {
              if (v7[2] == 0xC83717EF586624DCLL)
                goto LABEL_22;
            }
            else if ((v10 & v8) != v5)
            {
              return this;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              return this;
          }
        }
        while (1)
        {
          v9 = v7[1];
          if (v9 == 0xC83717EF586624DCLL)
            break;
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
          if (v9 != v5)
            return this;
LABEL_11:
          v7 = (_QWORD *)*v7;
          if (!v7)
            return this;
        }
        if (v7[2] != 0xC83717EF586624DCLL)
          goto LABEL_11;
LABEL_22:
        v11 = v7[5];
        if (*(_QWORD *)(v11 + 8) == 0xC83717EF586624DCLL)
        {
          if (*(_QWORD *)(v11 + 32))
          {
            v12 = *(_QWORD **)(*(_QWORD *)(this[5] + 24) + 8);
            v13 = v12[3];
            v14 = v12[4];
            v15 = v14 - v13;
            if (v14 == v13)
              goto LABEL_31;
            v16 = 0;
            v17 = v15 >> 3;
            while (1)
            {
              v18 = *(_QWORD *)(v13 + 8 * v16);
              if (!*(_BYTE *)v18)
              {
                v19 = *(_QWORD *)(v18 + 8);
                v20 = v12[15];
                if (v19 < (v12[16] - v20) >> 3)
                  break;
              }
              if (++v16 >= v17)
                goto LABEL_31;
            }
            v21 = *(_QWORD *)(v20 + 8 * v19);
            if (!v21)
LABEL_31:
              v22 = 0;
            else
              v22 = **(_QWORD ***)(v21 + 24);
            v23 = v22[9];
            if (v22[10] != v23)
              v22[10] = v23;
            v24 = v22[29];
            v25 = v22[30];
            while (2)
            {
              if (v25 != v24)
              {
                this = *(_QWORD **)(v25 - 8);
                if ((_QWORD *)(v25 - 32) != this)
                {
                  if (this)
                  {
                    v26 = 5;
LABEL_36:
                    this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v26))();
                  }
                  v25 -= 64;
                  continue;
                }
                this = (_QWORD *)(v25 - 32);
                v26 = 4;
                goto LABEL_36;
              }
              break;
            }
            v22[30] = v24;
            v28 = (_QWORD *)v22[25];
            v27 = (_QWORD *)v22[26];
            if (v27 != v28)
            {
              v29 = v27 - 4;
              while (1)
              {
                this = (_QWORD *)v29[3];
                if (v29 == this)
                  break;
                if (this)
                {
                  v31 = 5;
LABEL_49:
                  this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v31))();
                }
                if (*((_BYTE *)v29 - 28))
                  *((_BYTE *)v29 - 28) = 0;
                if (*((_BYTE *)v29 - 32))
                  *((_BYTE *)v29 - 32) = 0;
                v30 = v29 - 6;
                v29 -= 10;
                if (v30 == v28)
                  goto LABEL_54;
              }
              this = v29;
              v31 = 4;
              goto LABEL_49;
            }
LABEL_54:
            v22[26] = v28;
            v22[4] = *(_QWORD *)(v3[8] + 104);
          }
        }
      }
    }
  }
  return this;
}

void md::mun::MuninLayer::renderPanorama(md::mun::MuninLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v2;
  int8x8_t v3;
  md::mun::MuninLayer *v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  _QWORD *v182;
  unint64_t v183;
  float32x2_t *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _OWORD *v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  md::mun::MuninLayer *v206;
  char *v207;
  uint64_t v208;
  __int128 v209;
  char *v210;
  _QWORD *v211;
  float64x2_t *v212;
  uint64_t v213;
  unint64_t v214;
  size_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;

  v2 = (_QWORD *)*((_QWORD *)a2 + 1);
  v3 = (int8x8_t)v2[1];
  if (!*(_QWORD *)&v3)
    return;
  v5 = this;
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v3 <= 0xC83717EF586624DCLL)
      v7 = 0xC83717EF586624DCLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0xC83717EF586624DCLL;
  }
  v8 = *(_QWORD **)(*v2 + 8 * v7);
  if (!v8)
    return;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0xC83717EF586624DCLL)
      {
        if (v9[2] == 0xC83717EF586624DCLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        return;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0xC83717EF586624DCLL)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v7)
      return;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return;
  }
  if (v9[2] != 0xC83717EF586624DCLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0xC83717EF586624DCLL)
    return;
  v14 = *(_QWORD **)(v13 + 32);
  if (!v14)
    return;
  v15 = (_QWORD *)md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), 0, 0);
  v16 = v15;
  v17 = v15[9];
  if (v15[10] != v17)
    v15[10] = v17;
  ggl::CommandBuffer::clearBufferLoadItems(v15);
  ggl::CommandBuffer::clearTextureLoadItems(v16);
  v16[4] = *(_QWORD *)(*((_QWORD *)v5 + 8) + 104);
  v18 = (unint64_t *)v14[24];
  if ((unint64_t *)v14[25] == v18)
    return;
  v19 = (_QWORD *)*((_QWORD *)a2 + 1);
  v20 = (int8x8_t)v19[1];
  if (!*(_QWORD *)&v20)
    goto LABEL_50;
  v21 = (uint8x8_t)vcnt_s8(v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v22 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v20 <= 0x1AF456233693CD46uLL)
      v22 = 0x1AF456233693CD46uLL % *(_QWORD *)&v20;
  }
  else
  {
    v22 = (*(_QWORD *)&v20 - 1) & 0x1AF456233693CD46;
  }
  v23 = *(_QWORD **)(*v19 + 8 * v22);
  if (!v23)
    goto LABEL_50;
  v24 = (_QWORD *)*v23;
  if (!v24)
    goto LABEL_50;
  if (v21.u32[0] < 2uLL)
  {
    v25 = *(_QWORD *)&v20 - 1;
    while (1)
    {
      v27 = v24[1];
      if (v27 == 0x1AF456233693CD46)
      {
        if (v24[2] == 0x1AF456233693CD46)
          goto LABEL_48;
      }
      else if ((v27 & v25) != v22)
      {
        goto LABEL_50;
      }
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_50;
    }
  }
  while (2)
  {
    v26 = v24[1];
    if (v26 != 0x1AF456233693CD46)
    {
      if (v26 >= *(_QWORD *)&v20)
        v26 %= *(_QWORD *)&v20;
      if (v26 != v22)
        goto LABEL_50;
      goto LABEL_37;
    }
    if (v24[2] != 0x1AF456233693CD46)
    {
LABEL_37:
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_50;
      continue;
    }
    break;
  }
LABEL_48:
  v28 = v24[5];
  if (*(_QWORD *)(v28 + 8) == 0x1AF456233693CD46)
  {
    v29 = *(_QWORD *)(v28 + 32);
    goto LABEL_51;
  }
LABEL_50:
  v29 = 0;
LABEL_51:
  v30 = *v18;
  v31 = v14[20];
  if ((v31 & (v31 - 1)) != 0)
  {
    v33 = v30;
    if (v30 >= v31)
      v33 = v30 % v31;
    v32 = *(_QWORD **)(v14[19] + 8 * v33);
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v30 != v32[1]);
    }
    while (v32[2] != v30);
  }
  else
  {
    v32 = *(_QWORD **)(v14[19] + 8 * ((v31 - 1) & v30));
    do
    {
      do
        v32 = (_QWORD *)*v32;
      while (v30 != v32[1]);
    }
    while (v32[2] != v30);
  }
  v35 = v32[3];
  v34 = v32[4];
  if (v34 != v35)
  {
    v36 = 0;
    v211 = v32;
    v212 = (float64x2_t *)(v29 + 808);
    v206 = v5;
    while (1)
    {
      v37 = v35 + 16 * v36;
      v218 = *(_QWORD *)(*(_QWORD *)v37 + 176);
      if (*(_QWORD *)(*(_QWORD *)v37 + 184) != v218)
        break;
LABEL_64:
      if (++v36 >= (v34 - v35) >> 4)
        return;
    }
    v38 = 0;
    if (v36 <= 6)
      v39 = 6;
    else
      v39 = v36;
    v208 = (v36 << 56) | 0xFFFF0200000300;
    v213 = v35 + 16 * v36;
    v214 = v36;
    v215 = v39;
    while (2)
    {
      v42 = *(_QWORD *)(*((_QWORD *)v5 + 8) + 256);
      v43 = *(_QWORD *)(v42 + 8);
      if (v43 != *(_QWORD *)v42)
      {
        v44 = *(_QWORD *)(v43 - 8);
        *(_QWORD *)(v42 + 8) = v43 - 8;
        v45 = *(uint64_t **)(v42 + 40);
        v46 = *(_QWORD *)(v42 + 48);
        if ((unint64_t)v45 >= v46)
        {
          v47 = *(_QWORD *)(v42 + 32);
          v48 = ((uint64_t)v45 - v47) >> 3;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 61)
            goto LABEL_188;
          v50 = v46 - v47;
          if (v50 >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          if (v49)
          {
            v51 = v38;
            v52 = 8 * v49;
            v53 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v42 + 56) + 16))(*(_QWORD *)(v42 + 56), 8 * v49, 8);
            v54 = (uint64_t *)(v53 + 8 * v48);
            v49 = v53 + v52;
            if (v53)
              *v54 = v44;
            v38 = v51;
          }
          else
          {
            v54 = (uint64_t *)(8 * v48);
          }
          v65 = *(_QWORD *)(v42 + 32);
          v64 = *(_QWORD *)(v42 + 40);
          v66 = v64 - v65;
          if (v64 != v65)
          {
            v67 = v66 - 8;
            if ((unint64_t)(v66 - 8) < 0x38)
            {
              v68 = v54;
            }
            else
            {
              v68 = v54;
              if ((unint64_t)(v64 - (_QWORD)v54) >= 0x20)
              {
                v69 = (v67 >> 3) + 1;
                v70 = v54 - 2;
                v71 = (__int128 *)(v64 - 16);
                v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v73 = *v71;
                  *((_OWORD *)v70 - 1) = *(v71 - 1);
                  *(_OWORD *)v70 = v73;
                  v70 -= 4;
                  v71 -= 2;
                  v72 -= 4;
                }
                while (v72);
                v68 = &v54[-(v69 & 0x3FFFFFFFFFFFFFFCLL)];
                v64 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
                if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_119;
              }
            }
            do
            {
              v82 = *(_QWORD *)(v64 - 8);
              v64 -= 8;
              *--v68 = v82;
            }
            while (v64 != v65);
            goto LABEL_119;
          }
LABEL_113:
          v68 = v54;
LABEL_120:
          v57 = v54 + 1;
          *(_QWORD *)(v42 + 32) = v68;
          *(_QWORD *)(v42 + 40) = v54 + 1;
          v84 = *(_QWORD *)(v42 + 48);
          *(_QWORD *)(v42 + 48) = v49;
          if (v64)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v42 + 56) + 40))(*(_QWORD *)(v42 + 56), v64, v84 - v64);
LABEL_122:
          *(_QWORD *)(v42 + 40) = v57;
          *(_QWORD *)&v219 = v44;
          v85 = *(_QWORD *)(v42 + 120);
          if (!v85)
          {
LABEL_187:
            std::__throw_bad_function_call[abi:nn180100]();
LABEL_188:
            abort();
          }
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v85 + 48))(v85, &v219);
          v217 = v38;
          **(_QWORD **)(v44 + 96) = *(_QWORD *)(v218 + 88 * v38 + 16);
          v86 = (_QWORD *)*((_QWORD *)v5 + 8);
          v87 = v86[23];
          v88 = *(_QWORD *)(*(_QWORD *)v37 + 176) + 88 * v38;
          v89 = *(_QWORD *)v88;
          v90 = *(_OWORD *)(v88 + 32);
          v91 = *(_QWORD *)(v87 + 8);
          v92 = *(_QWORD *)(v87 + 16);
          v93 = *(_OWORD *)(v87 + 72);
          v221 = *(_OWORD *)(v87 + 56);
          v222 = v93;
          v94 = *(_OWORD *)(v87 + 104);
          v223 = *(_OWORD *)(v87 + 88);
          v224 = v94;
          v95 = *(_OWORD *)(v87 + 40);
          v219 = *(_OWORD *)(v87 + 24);
          v220 = v95;
          v96 = (_QWORD *)v86[25];
          v97 = v96[1];
          v216 = v44;
          if (v97 == v86[26])
          {
            v96 = (_QWORD *)*v96;
            if (!v96)
            {
              v209 = v90;
              v96 = malloc_type_malloc(120 * v97 + 16, 0xB644C221uLL);
              v90 = v209;
              *v96 = 0;
              v96[1] = 0;
              *(_QWORD *)v86[25] = v96;
            }
            v86[25] = v96;
            v97 = v96[1];
          }
          v98 = &v96[15 * v97];
          v98[2] = &off_1E42B59B0;
          v99 = v98 + 2;
          v96[1] = v97 + 1;
          v99[1] = v91;
          v99[2] = v92;
          v101 = v223;
          v100 = v224;
          v102 = v222;
          *(_OWORD *)(v99 + 7) = v221;
          *(_OWORD *)(v99 + 9) = v102;
          *(_OWORD *)(v99 + 11) = v101;
          v103 = v219;
          *(_OWORD *)(v99 + 5) = v220;
          *(_OWORD *)(v99 + 3) = v103;
          *(_OWORD *)(v99 + 13) = v100;
          v99[8] = v89;
          *(_OWORD *)(v99 + 9) = v90;
          v99[11] = 0;
          v99[12] = 1;
          v104 = *((_QWORD *)v5 + 8);
          v105 = *(char **)(v104 + 144);
          v106 = *(char **)(v104 + 152);
          v107 = (v106 - v105) >> 3;
          if (v107 <= v36)
          {
            v108 = v215 - v107;
            if (v215 > v107)
            {
              v109 = *(_QWORD *)(v104 + 160);
              if (v108 <= (v109 - (uint64_t)v106) >> 3)
              {
                bzero(*(void **)(v104 + 152), 8 * v108);
                *(_QWORD *)(v104 + 152) = &v106[8 * v108];
              }
              else
              {
                if (v215 >> 61)
                  goto LABEL_188;
                v110 = v109 - (_QWORD)v105;
                v111 = v110 >> 2;
                if (v110 >> 2 <= v215)
                  v111 = v215;
                v112 = (unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8;
                v113 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v112)
                  v113 = v111;
                if (v113 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v114 = v16;
                v115 = 8 * v113;
                v116 = (char *)operator new(8 * v113);
                v117 = &v116[8 * v107];
                v207 = v116;
                v210 = &v116[v115];
                bzero(v117, 8 * v108);
                v118 = &v117[8 * v108];
                if (v106 == v105)
                {
                  *(_QWORD *)(v104 + 144) = v117;
                  *(_QWORD *)(v104 + 152) = v118;
                  *(_QWORD *)(v104 + 160) = v210;
                  v16 = v114;
                  v5 = v206;
                  goto LABEL_151;
                }
                v119 = v106 - v105 - 8;
                v16 = v114;
                if (v119 <= 0x77
                  || &v106[-(v119 & 0xFFFFFFFFFFFFFFF8) - 8] < v117
                  && &v207[v106 - v105 - (v119 & 0xFFFFFFFFFFFFFFF8) - 8] < v106)
                {
                  goto LABEL_192;
                }
                v120 = (v119 >> 3) + 1;
                v121 = &v207[8 * v107 - 16];
                v122 = v106 - 32;
                v123 = v120 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v125 = *(_OWORD *)v122;
                  v124 = *((_OWORD *)v122 + 1);
                  *(_OWORD *)v122 = 0uLL;
                  *((_OWORD *)v122 + 1) = 0uLL;
                  v122 -= 32;
                  *((_OWORD *)v121 - 1) = v125;
                  *(_OWORD *)v121 = v124;
                  v121 -= 32;
                  v123 -= 4;
                }
                while (v123);
                v117 -= 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
                v106 -= 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
                if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_192:
                  do
                  {
                    v126 = *((_QWORD *)v106 - 1);
                    v106 -= 8;
                    *(_QWORD *)v106 = 0;
                    *((_QWORD *)v117 - 1) = v126;
                    v117 -= 8;
                  }
                  while (v106 != v105);
                }
                v106 = *(char **)(v104 + 144);
                v127 = *(char **)(v104 + 152);
                *(_QWORD *)(v104 + 144) = v117;
                *(_QWORD *)(v104 + 152) = v118;
                *(_QWORD *)(v104 + 160) = v210;
                if (v127 == v106)
                {
                  v5 = v206;
                  if (v106)
                    goto LABEL_152;
                }
                else
                {
                  v5 = v206;
                  do
                  {
                    v129 = *((_QWORD *)v127 - 1);
                    v127 -= 8;
                    v128 = v129;
                    *(_QWORD *)v127 = 0;
                    if (v129)
                      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
                  }
                  while (v127 != v106);
LABEL_151:
                  if (v106)
LABEL_152:
                    operator delete(v106);
                }
              }
              v105 = *(char **)(v104 + 144);
            }
          }
          v36 = v214;
          if (!*(_QWORD *)&v105[8 * v214])
          {
            v130 = operator new();
            *(_QWORD *)(v130 + 16) = 0;
            *(_QWORD *)(v130 + 24) = 0;
            *(_DWORD *)(v130 + 32) = 0;
            *(_QWORD *)v130 = &off_1E42B5DE8;
            *(_QWORD *)(v130 + 8) = 0;
            *(_QWORD *)(v130 + 36) = 768;
            *(_DWORD *)(v130 + 44) = 0;
            *(_QWORD *)(v130 + 48) = v208;
            *(_WORD *)(v130 + 56) = 0;
            *(_BYTE *)(v130 + 58) = 3;
            *(_QWORD *)(v130 + 67) = 0;
            *(_QWORD *)(v130 + 59) = 0;
            *(_BYTE *)(v130 + 75) = 0;
            *(_QWORD *)(v130 + 132) = 0;
            *(_QWORD *)(v130 + 124) = 0;
            *(_WORD *)(v130 + 188) = 257;
            *(_BYTE *)(v130 + 208) = 0;
            *(_QWORD *)(v130 + 192) = 0;
            *(_QWORD *)(v130 + 200) = 0;
            v131 = *(_QWORD *)&v105[8 * v214];
            *(_QWORD *)&v105[8 * v214] = v130;
            if (v131)
              (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
          }
          v99[3] = *(_QWORD *)(*(_QWORD *)(v104 + 144) + 8 * v214);
          v99[4] = v216;
          v132 = v218 + 88 * v217;
          v133 = *(float *)(v132 + 72);
          v134 = *(float *)(v132 + 76);
          v135 = *(float *)(v132 + 80);
          v136 = *(float *)(v132 + 84);
          v137 = v134 + v134;
          v138 = (float)(v134 + v134) * v134;
          v139 = (float)(v135 + v135) * v135;
          v140 = 1.0 - (float)(v138 + v139);
          v141 = v133 + v133;
          v142 = (float)(v133 + v133) * v134;
          v143 = (float)(v135 + v135) * v136;
          v144 = v142 - v143;
          v145 = v135 * (float)(v133 + v133);
          v146 = v136 * v137;
          v147 = (float)(v136 * v137) + v145;
          v148 = v143 + v142;
          v149 = 1.0 - (float)((float)(v133 + v133) * v133);
          v150 = v149 - v139;
          v151 = v137 * v135;
          v152 = v136 * v141;
          v153 = v151 - v152;
          v154 = v145 - v146;
          v155 = v152 + v151;
          v156 = v149 - v138;
          v157 = v140;
          v158 = v148;
          v159 = v154;
          v160 = v144;
          v161 = v150;
          v162 = v155;
          v163 = v147;
          v164 = v153;
          v165 = v156;
          v167 = *(double *)(v132 + 48);
          v166 = *(double *)(v132 + 56);
          v168 = *(double *)(v132 + 64);
          v169 = v212[1];
          v170 = v212[2];
          v171 = v212[3];
          v172 = vmlaq_n_f64(vmulq_n_f64(*v212, v157), v170, v158);
          v173 = vmlaq_n_f64(vmulq_n_f64(*v212, v160), v170, v161);
          v174 = vmlaq_n_f64(vmulq_n_f64(*v212, v163), v170, v164);
          v175 = vmlaq_n_f64(vmlaq_n_f64(v212[6], *v212, v167), v170, v166);
          v176 = v212[4];
          v177 = v212[5];
          v178 = vmlaq_n_f64(v172, v176, v159);
          v179 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169, v157), v171, v158), v177, v159));
          v180 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169, v163), v171, v164), v177, v165));
          v181 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v212[7], v169, v167), v171, v166), v177, v168));
          v182 = **(_QWORD ***)(v216 + 64);
          v183 = v182[1];
          v184 = (float32x2_t *)v182[9];
          *v184 = vcvt_f32_f64(v178);
          v184[1] = v179;
          v184[2] = vcvt_f32_f64(vmlaq_n_f64(v173, v176, v162));
          v184[3] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169, v160), v171, v161), v177, v162));
          v184[4] = vcvt_f32_f64(vmlaq_n_f64(v174, v176, v165));
          v184[5] = v180;
          v184[6] = vcvt_f32_f64(vmlaq_n_f64(v175, v176, v168));
          v184[7] = v181;
          if (v182[8] > v183)
            v183 = v182[8];
          v182[7] = 0;
          v182[8] = v183;
          v185 = (_QWORD *)v16[10];
          v186 = v16[11];
          if ((unint64_t)v185 < v186)
          {
            if (v185)
              *v185 = v99;
            v40 = v185 + 1;
            v41 = v211;
            v37 = v213;
            goto LABEL_71;
          }
          v187 = v16[9];
          v188 = ((uint64_t)v185 - v187) >> 3;
          v189 = v188 + 1;
          if ((unint64_t)(v188 + 1) >> 61)
            goto LABEL_188;
          v190 = v186 - v187;
          if (v190 >> 2 > v189)
            v189 = v190 >> 2;
          if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
            v189 = 0x1FFFFFFFFFFFFFFFLL;
          if (v189)
          {
            v191 = 8 * v189;
            v192 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v16[12] + 16))(v16[12], 8 * v189, 8);
            v193 = (_QWORD *)(v192 + 8 * v188);
            v189 = v192 + v191;
            if (v192)
              *v193 = v99;
          }
          else
          {
            v193 = (_QWORD *)(8 * v188);
          }
          v195 = v16[9];
          v194 = v16[10];
          v196 = v194 - v195;
          v41 = v211;
          v37 = v213;
          if (v194 != v195)
          {
            v197 = v196 - 8;
            if ((unint64_t)(v196 - 8) < 0x38)
            {
              v198 = v193;
            }
            else
            {
              v198 = v193;
              if ((unint64_t)(v194 - (_QWORD)v193) >= 0x20)
              {
                v199 = (v197 >> 3) + 1;
                v200 = v193 - 2;
                v201 = (__int128 *)(v194 - 16);
                v202 = v199 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v203 = *v201;
                  *(v200 - 1) = *(v201 - 1);
                  *v200 = v203;
                  v200 -= 2;
                  v201 -= 2;
                  v202 -= 4;
                }
                while (v202);
                v198 = &v193[-(v199 & 0x3FFFFFFFFFFFFFFCLL)];
                v194 -= 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
                if (v199 == (v199 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  v194 = v16[9];
LABEL_182:
                  v40 = v193 + 1;
                  v16[9] = v198;
                  v16[10] = v193 + 1;
                  v205 = v16[11];
                  v16[11] = v189;
                  if (v194)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v16[12] + 40))(v16[12], v194, v205 - v194);
LABEL_71:
                  v16[10] = v40;
                  v38 = v217 + 1;
                  v218 = *(_QWORD *)(*(_QWORD *)v37 + 176);
                  if (v217 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3
                                                    * ((*(_QWORD *)(*(_QWORD *)v37 + 184) - v218) >> 3)))
                  {
                    v35 = v41[3];
                    v34 = v41[4];
                    goto LABEL_64;
                  }
                  continue;
                }
              }
            }
            do
            {
              v204 = *(_QWORD *)(v194 - 8);
              v194 -= 8;
              *--v198 = v204;
            }
            while (v194 != v195);
            goto LABEL_181;
          }
          v198 = v193;
          goto LABEL_182;
        }
LABEL_85:
        if (v45)
          *v45 = v44;
        v57 = v45 + 1;
        goto LABEL_122;
      }
      break;
    }
    v55 = *(_QWORD *)(v42 + 88);
    if (!v55)
      goto LABEL_187;
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55);
    v45 = *(uint64_t **)(v42 + 40);
    v56 = *(_QWORD *)(v42 + 48);
    if ((unint64_t)v45 < v56)
      goto LABEL_85;
    v58 = *(_QWORD *)(v42 + 32);
    v59 = ((uint64_t)v45 - v58) >> 3;
    v49 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 61)
      goto LABEL_188;
    v60 = v56 - v58;
    if (v60 >> 2 > v49)
      v49 = v60 >> 2;
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    if (v49)
    {
      v61 = v38;
      v62 = 8 * v49;
      v63 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v42 + 56) + 16))(*(_QWORD *)(v42 + 56), 8 * v49, 8);
      v54 = (uint64_t *)(v63 + 8 * v59);
      v49 = v63 + v62;
      if (v63)
        *v54 = v44;
      v38 = v61;
    }
    else
    {
      v54 = (uint64_t *)(8 * v59);
    }
    v74 = *(_QWORD *)(v42 + 32);
    v64 = *(_QWORD *)(v42 + 40);
    v75 = v64 - v74;
    if (v64 == v74)
      goto LABEL_113;
    v76 = v75 - 8;
    if ((unint64_t)(v75 - 8) < 0x38)
    {
      v68 = v54;
    }
    else
    {
      v68 = v54;
      if ((unint64_t)(v64 - (_QWORD)v54) >= 0x20)
      {
        v77 = (v76 >> 3) + 1;
        v78 = v54 - 2;
        v79 = (__int128 *)(v64 - 16);
        v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v81 = *v79;
          *((_OWORD *)v78 - 1) = *(v79 - 1);
          *(_OWORD *)v78 = v81;
          v78 -= 4;
          v79 -= 2;
          v80 -= 4;
        }
        while (v80);
        v68 = &v54[-(v77 & 0x3FFFFFFFFFFFFFFCLL)];
        v64 -= 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_119;
      }
    }
    do
    {
      v83 = *(_QWORD *)(v64 - 8);
      v64 -= 8;
      *--v68 = v83;
    }
    while (v64 != v74);
LABEL_119:
    v64 = *(_QWORD *)(v42 + 32);
    goto LABEL_120;
  }
}

void md::mun::MuninLayer::renderTransition(md::mun::MuninLayer *this, const md::LayoutContext *a2)
{
  md::mun::MuninLayer *v2;
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  float64x2_t *v91;
  int8x8_t v92;
  unint64_t v93;
  uint8x8_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  _OWORD *v113;
  _OWORD *v114;
  unint64_t v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  unsigned __int8 v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  int64x2_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  __int128 *v187;
  __int128 v188;
  __int128 v189;
  char *v190;
  unsigned __int8 v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  __int128 v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  int64x2_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  char *v233;
  unsigned __int8 v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  __int128 v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  int64x2_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t **v275;
  _QWORD *v276;
  unsigned __int8 *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  unint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t *v313;
  __int128 *v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  __int128 *v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float32x2_t v384;
  _QWORD *v385;
  unint64_t v386;
  float32x2_t *v387;
  unint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t *v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  char *v396;
  uint64_t *v397;
  uint64_t *v398;
  uint64_t v399;
  _QWORD *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  _OWORD *v415;
  __int128 *v416;
  uint64_t v417;
  __int128 v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unsigned __int8 *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  unint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  _OWORD *v455;
  __int128 *v456;
  uint64_t v457;
  __int128 v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  ggl::ShrinkBlur4XShader *v463;
  unsigned __int8 v464;
  unsigned __int8 v465;
  ggl::BlurXShader *v466;
  unsigned __int8 v467;
  unsigned __int8 v468;
  ggl::BlurYShader *v469;
  unsigned __int8 v470;
  unsigned __int8 v471;
  unsigned __int8 v472;
  unsigned __int8 v473;
  unsigned __int8 v474;
  unsigned __int8 v475;
  unsigned __int8 v476;
  unsigned __int8 v477;
  uint64_t v479;
  _QWORD *v480;
  unint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  __int128 v484;
  md::mun::MuninLayer *v485;
  uint64_t v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int16 v493;
  char v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  std::__shared_weak_count *v499;
  std::__shared_weak_count *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  std::__shared_weak_count *v505;
  std::__shared_weak_count *v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;

  v2 = this;
  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xC83717EF586624DCLL % *(_QWORD *)&v4;
    if (*(_QWORD *)&v4 > 0xC83717EF586624DCLL)
      v6 = 0xC83717EF586624DCLL;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0xC83717EF586624DCLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0xC83717EF586624DCLL)
      {
        if (v8[2] == 0xC83717EF586624DCLL)
          goto LABEL_22;
      }
      else if ((v10 & (*(_QWORD *)&v4 - 1)) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0xC83717EF586624DCLL)
      break;
    if (v9 >= *(_QWORD *)&v4)
      v9 %= *(_QWORD *)&v4;
    if (v9 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0xC83717EF586624DCLL)
    goto LABEL_11;
LABEL_22:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0xC83717EF586624DCLL)
  {
    v12 = *(_QWORD *)(v11 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v12 = 0;
LABEL_25:
  v13 = 0;
  v14 = *(_QWORD **)(*((_QWORD *)this + 5) + 24);
  v15 = (_QWORD *)v14[1];
  while (1)
  {
    v16 = *(_QWORD *)(v15[3] + 8 * v13);
    if (!*(_BYTE *)v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      v18 = v15[15];
      if (v17 < (v15[16] - v18) >> 3)
        break;
    }
    ++v13;
  }
  v19 = **(_QWORD **)(*(_QWORD *)(v18 + 8 * v17) + 24);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(*((_QWORD *)this + 8) + 104);
  if (!*(_QWORD *)&v4)
    goto LABEL_52;
  v20 = (uint8x8_t)vcnt_s8(v4);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    v21 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v21 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v21 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v22 = *(_QWORD **)(*v3 + 8 * v21);
  if (!v22)
    goto LABEL_52;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_52;
  if (v20.u32[0] < 2uLL)
  {
    v24 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v26 = v23[1];
      if (v26 == 0x1AF456233693CD46)
      {
        if (v23[2] == 0x1AF456233693CD46)
          goto LABEL_50;
      }
      else if ((v26 & v24) != v21)
      {
        goto LABEL_52;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_52;
    }
  }
  while (2)
  {
    v25 = v23[1];
    if (v25 != 0x1AF456233693CD46)
    {
      if (v25 >= *(_QWORD *)&v4)
        v25 %= *(_QWORD *)&v4;
      if (v25 != v21)
        goto LABEL_52;
      goto LABEL_39;
    }
    if (v23[2] != 0x1AF456233693CD46)
    {
LABEL_39:
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_52;
      continue;
    }
    break;
  }
LABEL_50:
  v27 = v23[5];
  if (*(_QWORD *)(v27 + 8) == 0x1AF456233693CD46)
  {
    v28 = *(_QWORD *)(v27 + 32);
    goto LABEL_53;
  }
LABEL_52:
  v28 = 0;
LABEL_53:
  v29 = *((_QWORD *)this + 8);
  v30 = *(_QWORD **)(v29 + 264);
  v31 = v30[1];
  if (v31)
    v32 = v30[9];
  else
    v32 = 0;
  v34 = *(_QWORD *)(v12 + 192);
  v33 = *(_QWORD *)(v12 + 200);
  v35 = v33 - v34;
  if (v33 == v34)
  {
    *(_DWORD *)(v32 + 8) = 0;
    *(_QWORD *)v32 = 1065353216;
    *(_QWORD *)(v32 + 12) = 0x100000001;
    *(_DWORD *)(v32 + 20) = 1;
    if (v32)
      goto LABEL_104;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = v35 >> 3;
    if (v40)
    {
      do
      {
        v41 = *(_QWORD *)(v34 + 8 * v38);
        if (v41 == *(_QWORD *)(v12 + 80))
          v39 = v38;
        if (v41 == *(_QWORD *)(v12 + 96))
          v37 = v38;
        if (v41 == *(_QWORD *)(v12 + 112))
          v36 = v38;
        ++v38;
      }
      while (v40 != v38);
    }
    v42 = *(_QWORD *)(v14[5] + 8 * v39);
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 32);
      v44 = *(_QWORD *)(v14[1] + 96);
      if (v43 >= (*(_QWORD *)(v14[1] + 104) - v44) >> 3)
        v42 = 0;
      else
        v42 = *(_QWORD *)(*(_QWORD *)(v44 + 8 * v43) + 16);
    }
    **(_QWORD **)(*(_QWORD *)(v29 + 296) + 96) = v42;
    v45 = *(_QWORD *)(v14[11] + 24 * v39 + 16);
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 32);
      v47 = *(_QWORD *)(v14[1] + 96);
      if (v46 >= (*(_QWORD *)(v14[1] + 104) - v47) >> 3)
        v45 = 0;
      else
        v45 = *(_QWORD *)(*(_QWORD *)(v47 + 8 * v46) + 16);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 296) + 96) + 8) = v45;
    v48 = *(_QWORD *)(v14[5] + 8 * v36);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 32);
      v50 = *(_QWORD *)(v14[1] + 96);
      if (v49 >= (*(_QWORD *)(v14[1] + 104) - v50) >> 3)
        v48 = 0;
      else
        v48 = *(_QWORD *)(*(_QWORD *)(v50 + 8 * v49) + 16);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 296) + 96) + 16) = v48;
    v51 = *(_QWORD *)(v14[11] + 24 * v36 + 16);
    if (v51)
    {
      v52 = *(_QWORD *)(v51 + 32);
      v53 = *(_QWORD *)(v14[1] + 96);
      if (v52 >= (*(_QWORD *)(v14[1] + 104) - v53) >> 3)
        v51 = 0;
      else
        v51 = *(_QWORD *)(*(_QWORD *)(v53 + 8 * v52) + 16);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 296) + 96) + 24) = v51;
    v54 = *(_QWORD *)(v14[5] + 8 * v37);
    if (v54)
    {
      v55 = *(_QWORD *)(v54 + 32);
      v56 = *(_QWORD *)(v14[1] + 96);
      if (v55 >= (*(_QWORD *)(v14[1] + 104) - v56) >> 3)
        v54 = 0;
      else
        v54 = *(_QWORD *)(*(_QWORD *)(v56 + 8 * v55) + 16);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 296) + 96) + 32) = v54;
    v57 = *(_QWORD *)(v14[11] + 24 * v37 + 16);
    if (v57)
    {
      v58 = *(_QWORD *)(v57 + 32);
      v59 = *(_QWORD *)(v14[1] + 96);
      if (v58 >= (*(_QWORD *)(v14[1] + 104) - v59) >> 3)
        v57 = 0;
      else
        v57 = *(_QWORD *)(*(_QWORD *)(v59 + 8 * v58) + 16);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 296) + 96) + 40) = v57;
    v60 = *(float *)(v12 + 120);
    if (v60 < 0.5)
      v37 = v39;
    v61 = *(_QWORD *)(v14[8] + 8 * v37);
    if (v61)
    {
      v62 = *(_QWORD *)(v61 + 32);
      v63 = *(_QWORD *)(v14[1] + 96);
      if (v62 >= (*(_QWORD *)(v14[1] + 104) - v63) >> 3)
        v61 = 0;
      else
        v61 = *(_QWORD *)(*(_QWORD *)(v63 + 8 * v62) + 16);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 296) + 96) + 48) = v61;
    *(float *)v32 = v60;
    *(_QWORD *)(v32 + 4) = *(_QWORD *)(v12 + 124);
    v64 = *(_QWORD *)(v12 + 72);
    v65 = *(_QWORD *)(v12 + 104);
    v66 = v65 - v64;
    if (v64 > v65)
      v66 = v64 - v65;
    *(_DWORD *)(v32 + 12) = v66 < 0xEA61;
    v67 = *(_QWORD *)(v12 + 88);
    v68 = v67 - v64;
    v69 = v64 > v67;
    v70 = v64 - v67;
    if (!v69)
      v70 = v68;
    *(_DWORD *)(v32 + 16) = v70 < 0xEA61;
    v71 = v67 - v65;
    v69 = v65 > v67;
    v72 = v65 - v67;
    if (v69)
      v71 = v72;
    *(_DWORD *)(v32 + 20) = v71 < 0xEA61;
    if (v32)
    {
LABEL_104:
      if (v31)
      {
        if (v30[8] > v31)
          v31 = v30[8];
        v30[7] = 0;
        v30[8] = v31;
      }
    }
  }
  v73 = (_QWORD *)v14[1];
  v74 = v73[3];
  v75 = v73[4];
  v76 = v75 - v74;
  if (v75 == v74)
    goto LABEL_115;
  v77 = 0;
  v78 = v76 >> 3;
  while (1)
  {
    v79 = *(_QWORD *)(v74 + 8 * v77);
    if (*(_BYTE *)v79 == 3)
    {
      v80 = *(_QWORD *)(v79 + 8);
      v81 = v73[15];
      if (v80 < (v73[16] - v81) >> 3)
        break;
    }
    if (++v77 >= v78)
      goto LABEL_115;
  }
  v82 = *(_QWORD *)(v81 + 8 * v80);
  if (!v82)
LABEL_115:
    v83 = 0;
  else
    v83 = **(_QWORD **)(v82 + 24);
  ggl::CommandBuffer::pushRenderItem(v83, *(ggl::RenderItem **)(*((_QWORD *)v2 + 8) + 304));
  v84 = v14[14];
  if (v84)
  {
    v85 = *(_QWORD *)(v84 + 32);
    v86 = *(_QWORD *)(v14[1] + 96);
    if (v85 >= (*(_QWORD *)(v14[1] + 104) - v86) >> 3)
      v84 = 0;
    else
      v84 = *(_QWORD *)(*(_QWORD *)(v86 + 8 * v85) + 16);
  }
  **(_QWORD **)(*(_QWORD *)(*((_QWORD *)v2 + 8) + 336) + 96) = v84;
  v87 = v14[15];
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 32);
    v89 = *(_QWORD *)(v14[1] + 96);
    if (v88 >= (*(_QWORD *)(v14[1] + 104) - v89) >> 3)
      v87 = 0;
    else
      v87 = *(_QWORD *)(*(_QWORD *)(v89 + 8 * v88) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 8) + 336) + 96) + 8) = v87;
  if (*(_QWORD *)(v12 + 200) != *(_QWORD *)(v12 + 192))
    ggl::CommandBuffer::pushRenderItem(v19, *(ggl::RenderItem **)(*((_QWORD *)v2 + 8) + 344));
  v90 = 0;
  v91 = (float64x2_t *)(v28 + 808);
  v485 = v2;
  v479 = v12;
  v480 = v14;
LABEL_128:
  if (v90 < v14[4])
  {
    v92 = *(int8x8_t *)(v12 + 160);
    if (!*(_QWORD *)&v92)
      goto LABEL_149;
    v93 = *(_QWORD *)(*(_QWORD *)(v12 + 192) + 8 * v90);
    v94 = (uint8x8_t)vcnt_s8(v92);
    v94.i16[0] = vaddlv_u8(v94);
    if (v94.u32[0] > 1uLL)
    {
      v95 = *(_QWORD *)(*(_QWORD *)(v12 + 192) + 8 * v90);
      if (v93 >= *(_QWORD *)&v92)
        v95 = v93 % *(_QWORD *)&v92;
    }
    else
    {
      v95 = (*(_QWORD *)&v92 - 1) & v93;
    }
    v96 = *(_QWORD **)(*(_QWORD *)(v12 + 152) + 8 * v95);
    if (v96)
    {
      v97 = (_QWORD *)*v96;
      if (*v96)
      {
        if (v94.u32[0] < 2uLL)
        {
          v98 = *(_QWORD *)&v92 - 1;
          while (1)
          {
            v100 = v97[1];
            if (v93 == v100)
            {
              if (v97[2] == v93)
                goto LABEL_150;
            }
            else if ((v100 & v98) != v95)
            {
              goto LABEL_149;
            }
            v97 = (_QWORD *)*v97;
            if (!v97)
              goto LABEL_150;
          }
        }
        do
        {
          v99 = v97[1];
          if (v93 == v99)
          {
            if (v97[2] == v93)
              break;
          }
          else
          {
            if (v99 >= *(_QWORD *)&v92)
              v99 %= *(_QWORD *)&v92;
            if (v99 != v95)
              goto LABEL_149;
          }
          v97 = (_QWORD *)*v97;
        }
        while (v97);
      }
    }
    else
    {
LABEL_149:
      v97 = 0;
    }
LABEL_150:
    v101 = *((_QWORD *)v2 + 9);
    v481 = v90;
    v482 = v97;
    if (v90 >= (*((_QWORD *)v2 + 10) - v101) >> 3)
    {
      v102 = (_QWORD *)*((_QWORD *)a2 + 1);
      v103 = v102[1];
      if ((v103 & (v103 - 1)) != 0)
      {
        v105 = 0xA60DDA5A69582425;
        if (v103 <= 0xA60DDA5A69582425)
          v105 = 0xA60DDA5A69582425 % v103;
        v104 = *(_QWORD **)(*v102 + 8 * v105);
        do
        {
          do
            v104 = (_QWORD *)*v104;
          while (v104[1] != 0xA60DDA5A69582425);
        }
        while (v104[2] != 0xA60DDA5A69582425);
      }
      else
      {
        v104 = *(_QWORD **)(*v102 + 8 * ((v103 - 1) & 0xA60DDA5A69582425));
        do
        {
          do
            v104 = (_QWORD *)*v104;
          while (v104[1] != 0xA60DDA5A69582425);
        }
        while (v104[2] != 0xA60DDA5A69582425);
      }
      v106 = *(_QWORD *)(*((_QWORD *)v2 + 5) + 24);
      v107 = **(id **)(v104[5] + 32);
      v108 = *(_QWORD *)(objc_msgSend(v107, "device") + 24);
      v110 = *(_QWORD *)(v108 + 48);
      v109 = *(std::__shared_weak_count **)(v108 + 56);
      v507 = v110;
      v508 = v109;
      if (v109)
      {
        p_shared_owners = (unint64_t *)&v109->__shared_owners_;
        do
          v112 = __ldxr(p_shared_owners);
        while (__stxr(v112 + 1, p_shared_owners));
      }

      v113 = (_OWORD *)operator new();
      v114 = v113;
      v113[1] = 0u;
      v113[2] = 0u;
      *v113 = 0u;
      v2 = v485;
      v116 = (char *)*((_QWORD *)v485 + 10);
      v115 = *((_QWORD *)v485 + 11);
      if ((unint64_t)v116 >= v115)
      {
        v118 = (char *)*((_QWORD *)v485 + 9);
        v119 = (v116 - v118) >> 3;
        v120 = v119 + 1;
        if ((unint64_t)(v119 + 1) >> 61)
          abort();
        v121 = v115 - (_QWORD)v118;
        if (v121 >> 2 > v120)
          v120 = v121 >> 2;
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
          v122 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
        {
          if (v122 >> 61)
            goto LABEL_571;
          v123 = (char *)operator new(8 * v122);
        }
        else
        {
          v123 = 0;
        }
        v124 = &v123[8 * v119];
        v125 = &v123[8 * v122];
        *(_QWORD *)v124 = v114;
        v117 = v124 + 8;
        if (v116 == v118)
        {
          v2 = v485;
          *((_QWORD *)v485 + 9) = v124;
          *((_QWORD *)v485 + 10) = v117;
          *((_QWORD *)v485 + 11) = v125;
        }
        else
        {
          v126 = v116 - v118 - 8;
          if (v126 <= 0x77
            || &v116[-(v126 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
            && &v123[v116 - v118 - (v126 & 0xFFFFFFFFFFFFFFF8) - 8] < v116)
          {
            goto LABEL_575;
          }
          v127 = (v126 >> 3) + 1;
          v128 = &v123[8 * v119 - 16];
          v129 = v116 - 32;
          v130 = v127 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v132 = *(_OWORD *)v129;
            v131 = *((_OWORD *)v129 + 1);
            *(_OWORD *)v129 = 0uLL;
            *((_OWORD *)v129 + 1) = 0uLL;
            v129 -= 32;
            *((_OWORD *)v128 - 1) = v132;
            *(_OWORD *)v128 = v131;
            v128 -= 32;
            v130 -= 4;
          }
          while (v130);
          v124 -= 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
          v116 -= 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
          if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_575:
            do
            {
              v133 = *((_QWORD *)v116 - 1);
              v116 -= 8;
              *(_QWORD *)v116 = 0;
              *((_QWORD *)v124 - 1) = v133;
              v124 -= 8;
            }
            while (v116 != v118);
          }
          v2 = v485;
          v116 = (char *)*((_QWORD *)v485 + 9);
          v134 = (char *)*((_QWORD *)v485 + 10);
          *((_QWORD *)v485 + 9) = v124;
          *((_QWORD *)v485 + 10) = v117;
          *((_QWORD *)v485 + 11) = v125;
          while (v134 != v116)
          {
            v136 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            v135 = v136;
            *(_QWORD *)v134 = 0;
            if (v136)
            {
              std::array<std::unique_ptr<ggl::Drawable>,3ul>::~array((uint64_t **)(v135 + 24));
              v137 = *(void **)v135;
              if (*(_QWORD *)v135)
              {
                *(_QWORD *)(v135 + 8) = v137;
                operator delete(v137);
              }
              MEMORY[0x1A1AF4E00](v135, 0x20C40A759441BLL);
            }
          }
        }
        if (v116)
          operator delete(v116);
      }
      else
      {
        *(_QWORD *)v116 = v113;
        v117 = v116 + 8;
      }
      *((_QWORD *)v2 + 10) = v117;
      v138 = (_QWORD *)*(v117 - 1);
      v139 = *(_QWORD *)(v110 + 80);
      v141 = *(_QWORD *)(v139 + 104);
      v140 = *(std::__shared_weak_count **)(v139 + 112);
      v495 = v141;
      v498 = v140;
      if (v140)
      {
        v142 = (unint64_t *)&v140->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      v487 = *(_OWORD *)(v106 + 208);
      v490 = *(_OWORD *)(v106 + 224);
      v90 = v481;
      v97 = v482;
      v144 = (char *)operator new(0x198uLL);
      *((_QWORD *)v144 + 1) = 0;
      *((_QWORD *)v144 + 2) = 0;
      *(_QWORD *)v144 = &off_1E42E4268;
      v509 = v487;
      v510 = v490;
      if ((v145 & 1) == 0)
      {
        if ((_DWORD)v463)
        {
          if ((v464 & 1) == 0)
          {
            if ((_DWORD)v463)
            {
              if ((v472 & 1) == 0
              {
                if ((v475 & 1) == 0
                {
                  ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
                }
                ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
                *(_QWORD *)algn_1EE577990 = 1;
              }
              ggl::Blur::Downsample4XPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
              unk_1EE577240 = &ggl::Blur::pipelineDataDownsample4XPipelineDeviceStructs(void)::ref;
              qword_1EE577248 = 0;
              unk_1EE577250 = &ggl::Blur::pipelineDataDownsample4XPipelineConstantStructs(void)::ref;
              xmmword_1EE577258 = xmmword_19FFB2E40;
            }
          }
          ggl::Blur::Downsample4XPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Blur::Downsample4XPipelineSetup::typedReflection(void)::ref;
          ggl::ShrinkBlur4XShader::typedReflection(v463);
          qword_1EE577278 = (uint64_t)&ggl::ShrinkBlur4XShader::typedReflection(void)::ref;
          if ((v465 & 1) == 0
          {
            ggl::Blur::pipelineStateDownsample4XPipelineAttributeStructBinding(void)::attr = 0;
            *(_QWORD *)algn_1EE577338 = 0;
            qword_1EE577340 = (uint64_t)"";
            dword_1EE577348 = 0;
            qword_1EE577350 = (uint64_t)&ggl::Blur::pipelineStateDownsample4XPipelineAttributeBinding_0(void)::attr;
            unk_1EE577358 = 2;
          }
          qword_1EE577280 = (uint64_t)&ggl::Blur::pipelineStateDownsample4XPipelineAttributeStructBinding(void)::attr;
          *(_QWORD *)algn_1EE577288 = 1;
          qword_1EE577290 = 0;
          unk_1EE577298 = 1;
          qword_1EE5772A0 = (uint64_t)&ggl::Blur::pipelineStateDownsample4XPipelineDeviceStructBinding(void)::ref;
          unk_1EE5772A8 = 0;
          qword_1EE5772B0 = (uint64_t)&ggl::Blur::pipelineStateDownsample4XPipelineConstantStructBinding(void)::ref;
          unk_1EE5772B8 = 0;
          v2 = v485;
          v90 = v481;
          v97 = v482;
        }
      }
      if (v498)
      {
        v146 = (unint64_t *)&v498->__shared_owners_;
        do
          v147 = __ldxr(v146);
        while (__stxr(v147 + 1, v146));
        *((_DWORD *)v144 + 14) = 0;
        *((_QWORD *)v144 + 5) = 0;
        *((_QWORD *)v144 + 6) = 0;
        *((_QWORD *)v144 + 3) = &off_1E42B6760;
        *((_QWORD *)v144 + 4) = 0;
        *((_QWORD *)v144 + 8) = &ggl::Blur::Downsample4XPipelineState::typedReflection(void)::ref;
        *((_QWORD *)v144 + 9) = v495;
        *((_QWORD *)v144 + 10) = v498;
        do
          v148 = __ldxr(v146);
        while (__stxr(v148 + 1, v146));
      }
      else
      {
        *((_DWORD *)v144 + 14) = 0;
        *((_QWORD *)v144 + 5) = 0;
        *((_QWORD *)v144 + 6) = 0;
        *((_QWORD *)v144 + 3) = &off_1E42B6760;
        *((_QWORD *)v144 + 4) = 0;
        *((_QWORD *)v144 + 8) = &ggl::Blur::Downsample4XPipelineState::typedReflection(void)::ref;
        *((_QWORD *)v144 + 9) = v495;
        *((_QWORD *)v144 + 10) = 0;
      }
      v144[136] = 0;
      *(_OWORD *)(v144 + 140) = xmmword_19FFB3060;
      *(_QWORD *)(v144 + 156) = 0;
      *(_QWORD *)(v144 + 172) = 0;
      *(_QWORD *)(v144 + 164) = 0;
      v144[184] = 0;
      *(_OWORD *)(v144 + 188) = xmmword_19FFB3060;
      *(_QWORD *)(v144 + 204) = 0;
      *(_QWORD *)(v144 + 220) = 0;
      *(_QWORD *)(v144 + 212) = 0;
      v144[232] = 0;
      *(_OWORD *)(v144 + 236) = xmmword_19FFB3060;
      *(_QWORD *)(v144 + 252) = 0;
      *(_QWORD *)(v144 + 268) = 0;
      *(_QWORD *)(v144 + 260) = 0;
      v149 = v510;
      *(_OWORD *)(v144 + 280) = v509;
      *(_OWORD *)(v144 + 296) = v149;
      v144[312] = 0;
      *((_QWORD *)v144 + 48) = 0;
      *((_OWORD *)v144 + 22) = 0u;
      *((_OWORD *)v144 + 23) = 0u;
      *((_OWORD *)v144 + 20) = 0u;
      *((_OWORD *)v144 + 21) = 0u;
      *((_QWORD *)v144 + 49) = 0x100000001;
      v144[400] = 0;
      v144[88] = 0;
      *(_WORD *)(v144 + 89) = v493;
      v144[91] = v494;
      *(_OWORD *)(v144 + 92) = xmmword_19FFB3060;
      *(_QWORD *)(v144 + 108) = 0;
      *((_DWORD *)v144 + 29) = 0;
      *((_QWORD *)v144 + 15) = 0;
      *((_DWORD *)v144 + 32) = 0;
      v144[132] = 15;
      if (v498)
      {
        v150 = (unint64_t *)&v498->__shared_owners_;
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
          std::__shared_weak_count::__release_weak(v498);
        }
      }
      *((_QWORD *)v144 + 3) = &off_1E42BB910;
      v501 = (uint64_t)(v144 + 24);
      v504 = (std::__shared_weak_count *)v144;
      if (v498)
      {
        v152 = (unint64_t *)&v498->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
          std::__shared_weak_count::__release_weak(v498);
        }
      }
      v154 = (_QWORD *)operator new();
      v155 = v154;
      if (v504)
      {
        v156 = (unint64_t *)&v504->__shared_owners_;
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
        ggl::PipelineSetup::PipelineSetup(v154, v501, (uint64_t)v504);
        v158 = (unint64_t *)&v504->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
          std::__shared_weak_count::__release_weak(v504);
        }
      }
      else
      {
        ggl::PipelineSetup::PipelineSetup(v154, v501, 0);
      }
      *v155 = &off_1E42BB8E0;
      *(_QWORD *)v155[12] = 0;
      v160 = (int64x2_t *)operator new();
      v161 = *((_QWORD *)v2 + 8);
      v162 = *(_QWORD *)(v161 + 72);
      v163 = *(_QWORD *)(v161 + 88);
      v160->i64[0] = (uint64_t)&off_1E42B59B0;
      v160[1].i64[0] = (uint64_t)"";
      v160[1].i64[1] = v162;
      v160[2].i64[0] = (uint64_t)v155;
      v160[2].i32[2] = 0;
      v160[3].i64[0] = 0;
      v160[3].i32[2] = 1065353216;
      v160[4].i64[0] = v163;
      v160[4].i64[1] = 0;
      v160[5].i64[0] = 0;
      v160[5].i64[1] = 0;
      v160[6] = vdupq_n_s64(1uLL);
      v160[7].i64[0] = 0;
      v164 = (_QWORD *)operator new();
      v165 = *((_QWORD *)v2 + 8);
      v166 = *(_QWORD *)(v165 + 88);
      v167 = *(std::__shared_weak_count **)(v165 + 96);
      if (v167)
      {
        v168 = (unint64_t *)&v167->__shared_owners_;
        do
          v169 = __ldxr(v168);
        while (__stxr(v169 + 1, v168));
        *v164 = v160;
        v164[1] = v155;
        v164[2] = v166;
        v164[3] = v167;
        do
          v170 = __ldxr(v168);
        while (__stxr(v170 + 1, v168));
      }
      else
      {
        *v164 = v160;
        v164[1] = v155;
        v164[2] = v166;
        v164[3] = 0;
      }
      v171 = (uint64_t *)v138[3];
      v138[3] = v164;
      if (v171)
      {
        v172 = (std::__shared_weak_count *)v171[3];
        if (v172)
        {
          v173 = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        v175 = v171[1];
        v171[1] = 0;
        if (v175)
          (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
        v176 = *v171;
        *v171 = 0;
        if (v176)
          (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
        MEMORY[0x1A1AF4E00](v171, 0x20C40DC1BFBCFLL);
      }
      if (!v167)
        goto LABEL_244;
      v177 = (unint64_t *)&v167->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
        v179 = v504;
        if (v504)
        {
LABEL_245:
          v180 = (unint64_t *)&v179->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
      }
      else
      {
LABEL_244:
        v179 = v504;
        if (v504)
          goto LABEL_245;
      }
      v182 = *(_QWORD *)(v507 + 80);
      v184 = *(_QWORD *)(v182 + 56);
      v183 = *(std::__shared_weak_count **)(v182 + 64);
      v496 = v184;
      v499 = v183;
      if (v183)
      {
        v185 = (unint64_t *)&v183->__shared_owners_;
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
      }
      v188 = *(_OWORD *)(v106 + 208);
      v189 = *(_OWORD *)(v106 + 224);
      v187 = (__int128 *)(v106 + 208);
      v488 = v188;
      v491 = v189;
      v190 = (char *)operator new(0x198uLL);
      *((_QWORD *)v190 + 1) = 0;
      *((_QWORD *)v190 + 2) = 0;
      *(_QWORD *)v190 = &off_1E42E41F8;
      v509 = v488;
      v510 = v491;
      if ((v191 & 1) == 0)
      {
        if ((_DWORD)v466)
        {
          if ((v467 & 1) == 0)
          {
            if ((_DWORD)v466)
            {
              if ((v473 & 1) == 0
              {
                if ((v476 & 1) == 0
                {
                  ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
                }
                ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
                *(_QWORD *)algn_1EE577990 = 1;
              }
              ggl::Blur::XPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
              unk_1EE577120 = &ggl::Blur::pipelineDataXPipelineDeviceStructs(void)::ref;
              qword_1EE577128 = 0;
              unk_1EE577130 = &ggl::Blur::pipelineDataXPipelineConstantStructs(void)::ref;
              xmmword_1EE577138 = xmmword_19FFB2E40;
            }
          }
          ggl::Blur::XPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Blur::XPipelineSetup::typedReflection(void)::ref;
          ggl::BlurXShader::typedReflection(v466);
          qword_1EE577158 = (uint64_t)&ggl::BlurXShader::typedReflection(void)::ref;
          if ((v468 & 1) == 0
          {
            ggl::Blur::pipelineStateXPipelineAttributeStructBinding(void)::attr = 0;
            *(_QWORD *)algn_1EE5772C8 = 0;
            qword_1EE5772D0 = (uint64_t)"";
            dword_1EE5772D8 = 0;
            qword_1EE5772E0 = (uint64_t)&ggl::Blur::pipelineStateXPipelineAttributeBinding_0(void)::attr;
            unk_1EE5772E8 = 2;
          }
          qword_1EE577160 = (uint64_t)&ggl::Blur::pipelineStateXPipelineAttributeStructBinding(void)::attr;
          *(_QWORD *)algn_1EE577168 = 1;
          qword_1EE577170 = 0;
          unk_1EE577178 = 1;
          qword_1EE577180 = (uint64_t)&ggl::Blur::pipelineStateXPipelineDeviceStructBinding(void)::ref;
          unk_1EE577188 = 0;
          qword_1EE577190 = (uint64_t)&ggl::Blur::pipelineStateXPipelineConstantStructBinding(void)::ref;
          unk_1EE577198 = 0;
          v2 = v485;
          v90 = v481;
          v97 = v482;
        }
      }
      if (v499)
      {
        v192 = (unint64_t *)&v499->__shared_owners_;
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
        *((_DWORD *)v190 + 14) = 0;
        *((_QWORD *)v190 + 5) = 0;
        *((_QWORD *)v190 + 6) = 0;
        *((_QWORD *)v190 + 3) = &off_1E42B6760;
        *((_QWORD *)v190 + 4) = 0;
        *((_QWORD *)v190 + 8) = &ggl::Blur::XPipelineState::typedReflection(void)::ref;
        *((_QWORD *)v190 + 9) = v496;
        *((_QWORD *)v190 + 10) = v499;
        do
          v194 = __ldxr(v192);
        while (__stxr(v194 + 1, v192));
      }
      else
      {
        *((_DWORD *)v190 + 14) = 0;
        *((_QWORD *)v190 + 5) = 0;
        *((_QWORD *)v190 + 6) = 0;
        *((_QWORD *)v190 + 3) = &off_1E42B6760;
        *((_QWORD *)v190 + 4) = 0;
        *((_QWORD *)v190 + 8) = &ggl::Blur::XPipelineState::typedReflection(void)::ref;
        *((_QWORD *)v190 + 9) = v496;
        *((_QWORD *)v190 + 10) = 0;
      }
      v190[136] = 0;
      *(_OWORD *)(v190 + 140) = xmmword_19FFB3060;
      *(_QWORD *)(v190 + 156) = 0;
      *(_QWORD *)(v190 + 172) = 0;
      *(_QWORD *)(v190 + 164) = 0;
      v190[184] = 0;
      *(_OWORD *)(v190 + 188) = xmmword_19FFB3060;
      *(_QWORD *)(v190 + 204) = 0;
      *(_QWORD *)(v190 + 220) = 0;
      *(_QWORD *)(v190 + 212) = 0;
      v190[232] = 0;
      *(_OWORD *)(v190 + 236) = xmmword_19FFB3060;
      *(_QWORD *)(v190 + 252) = 0;
      *(_QWORD *)(v190 + 268) = 0;
      *(_QWORD *)(v190 + 260) = 0;
      v195 = v510;
      *(_OWORD *)(v190 + 280) = v509;
      *(_OWORD *)(v190 + 296) = v195;
      v190[312] = 0;
      *((_QWORD *)v190 + 48) = 0;
      *((_OWORD *)v190 + 22) = 0u;
      *((_OWORD *)v190 + 23) = 0u;
      *((_OWORD *)v190 + 20) = 0u;
      *((_OWORD *)v190 + 21) = 0u;
      *((_QWORD *)v190 + 49) = 0x100000001;
      v190[400] = 0;
      v190[88] = 0;
      *(_WORD *)(v190 + 89) = v493;
      v190[91] = v494;
      *(_OWORD *)(v190 + 92) = xmmword_19FFB3060;
      *(_QWORD *)(v190 + 108) = 0;
      *((_DWORD *)v190 + 29) = 0;
      *((_QWORD *)v190 + 15) = 0;
      *((_DWORD *)v190 + 32) = 0;
      v190[132] = 15;
      if (v499)
      {
        v196 = (unint64_t *)&v499->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
          std::__shared_weak_count::__release_weak(v499);
        }
      }
      *((_QWORD *)v190 + 3) = &off_1E42BB870;
      v502 = (uint64_t)(v190 + 24);
      v505 = (std::__shared_weak_count *)v190;
      if (v499)
      {
        v198 = (unint64_t *)&v499->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
          std::__shared_weak_count::__release_weak(v499);
        }
      }
      v200 = (_QWORD *)operator new();
      v201 = v200;
      if (v505)
      {
        v202 = (unint64_t *)&v505->__shared_owners_;
        do
          v203 = __ldxr(v202);
        while (__stxr(v203 + 1, v202));
        ggl::PipelineSetup::PipelineSetup(v200, v502, (uint64_t)v505);
        v204 = (unint64_t *)&v505->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
          std::__shared_weak_count::__release_weak(v505);
        }
      }
      else
      {
        ggl::PipelineSetup::PipelineSetup(v200, v502, 0);
      }
      *v201 = &off_1E42BB840;
      *(_QWORD *)v201[12] = 0;
      v206 = (int64x2_t *)operator new();
      v207 = *((_QWORD *)v2 + 8);
      v208 = *(_QWORD *)(v207 + 72);
      v209 = *(_QWORD *)(v207 + 88);
      v206->i64[0] = (uint64_t)&off_1E42B59B0;
      v206[1].i64[0] = (uint64_t)"";
      v206[1].i64[1] = v208;
      v206[2].i64[0] = (uint64_t)v201;
      v206[2].i32[2] = 0;
      v206[3].i64[0] = 0;
      v206[3].i32[2] = 1065353216;
      v206[4].i64[0] = v209;
      v206[4].i64[1] = 0;
      v206[5].i64[0] = 0;
      v206[5].i64[1] = 0;
      v206[6] = vdupq_n_s64(1uLL);
      v206[7].i64[0] = 0;
      v210 = (_QWORD *)operator new();
      v211 = *((_QWORD *)v2 + 8);
      v212 = *(_QWORD *)(v211 + 88);
      v213 = *(std::__shared_weak_count **)(v211 + 96);
      if (v213)
      {
        v214 = (unint64_t *)&v213->__shared_owners_;
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
        *v210 = v206;
        v210[1] = v201;
        v210[2] = v212;
        v210[3] = v213;
        do
          v216 = __ldxr(v214);
        while (__stxr(v216 + 1, v214));
      }
      else
      {
        *v210 = v206;
        v210[1] = v201;
        v210[2] = v212;
        v210[3] = 0;
      }
      v217 = (uint64_t *)v138[4];
      v138[4] = v210;
      if (v217)
      {
        v218 = (std::__shared_weak_count *)v217[3];
        if (v218)
        {
          v219 = (unint64_t *)&v218->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        v221 = v217[1];
        v217[1] = 0;
        if (v221)
          (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
        v222 = *v217;
        *v217 = 0;
        if (v222)
          (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
        MEMORY[0x1A1AF4E00](v217, 0x20C40DC1BFBCFLL);
      }
      if (!v213)
        goto LABEL_301;
      v223 = (unint64_t *)&v213->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
        v225 = v505;
        if (v505)
        {
LABEL_302:
          v226 = (unint64_t *)&v225->__shared_owners_;
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
      }
      else
      {
LABEL_301:
        v225 = v505;
        if (v505)
          goto LABEL_302;
      }
      v228 = *(_QWORD *)(v507 + 80);
      v230 = *(_QWORD *)(v228 + 80);
      v229 = *(std::__shared_weak_count **)(v228 + 88);
      v497 = v230;
      v500 = v229;
      if (v229)
      {
        v231 = (unint64_t *)&v229->__shared_owners_;
        do
          v232 = __ldxr(v231);
        while (__stxr(v232 + 1, v231));
      }
      v489 = *v187;
      v492 = v187[1];
      v233 = (char *)operator new(0x198uLL);
      *((_QWORD *)v233 + 1) = 0;
      *((_QWORD *)v233 + 2) = 0;
      *(_QWORD *)v233 = &off_1E42E4230;
      v509 = v489;
      v510 = v492;
      if ((v234 & 1) == 0)
      {
        if ((_DWORD)v469)
        {
          if ((v470 & 1) == 0)
          {
            if ((_DWORD)v469)
            {
              if ((v474 & 1) == 0
              {
                if ((v477 & 1) == 0
                {
                  ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
                }
                ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
                *(_QWORD *)algn_1EE577990 = 1;
              }
              ggl::Blur::YPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
              unk_1EE5771B0 = &ggl::Blur::pipelineDataYPipelineDeviceStructs(void)::ref;
              qword_1EE5771B8 = 0;
              unk_1EE5771C0 = &ggl::Blur::pipelineDataYPipelineConstantStructs(void)::ref;
              xmmword_1EE5771C8 = xmmword_19FFB2E40;
            }
          }
          ggl::Blur::YPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Blur::YPipelineSetup::typedReflection(void)::ref;
          ggl::BlurYShader::typedReflection(v469);
          qword_1EE5771E8 = (uint64_t)&ggl::BlurYShader::typedReflection(void)::ref;
          if ((v471 & 1) == 0
          {
            ggl::Blur::pipelineStateYPipelineAttributeStructBinding(void)::attr = 0;
            unk_1EE577300 = 0;
            qword_1EE577308 = (uint64_t)"";
            dword_1EE577310 = 0;
            qword_1EE577318 = (uint64_t)&ggl::Blur::pipelineStateYPipelineAttributeBinding_0(void)::attr;
            unk_1EE577320 = 2;
          }
          qword_1EE5771F0 = (uint64_t)&ggl::Blur::pipelineStateYPipelineAttributeStructBinding(void)::attr;
          *(_QWORD *)algn_1EE5771F8 = 1;
          qword_1EE577200 = 0;
          unk_1EE577208 = 1;
          qword_1EE577210 = (uint64_t)&ggl::Blur::pipelineStateYPipelineDeviceStructBinding(void)::ref;
          unk_1EE577218 = 0;
          qword_1EE577220 = (uint64_t)&ggl::Blur::pipelineStateYPipelineConstantStructBinding(void)::ref;
          unk_1EE577228 = 0;
          v2 = v485;
          v90 = v481;
          v97 = v482;
        }
      }
      if (v500)
      {
        v235 = (unint64_t *)&v500->__shared_owners_;
        do
          v236 = __ldxr(v235);
        while (__stxr(v236 + 1, v235));
        *((_DWORD *)v233 + 14) = 0;
        *((_QWORD *)v233 + 5) = 0;
        *((_QWORD *)v233 + 6) = 0;
        *((_QWORD *)v233 + 3) = &off_1E42B6760;
        *((_QWORD *)v233 + 4) = 0;
        *((_QWORD *)v233 + 8) = &ggl::Blur::YPipelineState::typedReflection(void)::ref;
        *((_QWORD *)v233 + 9) = v497;
        *((_QWORD *)v233 + 10) = v500;
        do
          v237 = __ldxr(v235);
        while (__stxr(v237 + 1, v235));
      }
      else
      {
        *((_DWORD *)v233 + 14) = 0;
        *((_QWORD *)v233 + 5) = 0;
        *((_QWORD *)v233 + 6) = 0;
        *((_QWORD *)v233 + 3) = &off_1E42B6760;
        *((_QWORD *)v233 + 4) = 0;
        *((_QWORD *)v233 + 8) = &ggl::Blur::YPipelineState::typedReflection(void)::ref;
        *((_QWORD *)v233 + 9) = v497;
        *((_QWORD *)v233 + 10) = 0;
      }
      v233[136] = 0;
      *(_OWORD *)(v233 + 140) = xmmword_19FFB3060;
      *(_QWORD *)(v233 + 156) = 0;
      *(_QWORD *)(v233 + 172) = 0;
      *(_QWORD *)(v233 + 164) = 0;
      v233[184] = 0;
      *(_OWORD *)(v233 + 188) = xmmword_19FFB3060;
      *(_QWORD *)(v233 + 204) = 0;
      *(_QWORD *)(v233 + 220) = 0;
      *(_QWORD *)(v233 + 212) = 0;
      v233[232] = 0;
      *(_OWORD *)(v233 + 236) = xmmword_19FFB3060;
      *(_QWORD *)(v233 + 252) = 0;
      *(_QWORD *)(v233 + 268) = 0;
      *(_QWORD *)(v233 + 260) = 0;
      v238 = v510;
      *(_OWORD *)(v233 + 280) = v509;
      *(_OWORD *)(v233 + 296) = v238;
      v233[312] = 0;
      *((_QWORD *)v233 + 48) = 0;
      *((_OWORD *)v233 + 22) = 0u;
      *((_OWORD *)v233 + 23) = 0u;
      *((_OWORD *)v233 + 20) = 0u;
      *((_OWORD *)v233 + 21) = 0u;
      *((_QWORD *)v233 + 49) = 0x100000001;
      v233[400] = 0;
      v233[88] = 0;
      *(_WORD *)(v233 + 89) = v493;
      v233[91] = v494;
      *(_OWORD *)(v233 + 92) = xmmword_19FFB3060;
      *(_QWORD *)(v233 + 108) = 0;
      *((_DWORD *)v233 + 29) = 0;
      *((_QWORD *)v233 + 15) = 0;
      *((_DWORD *)v233 + 32) = 0;
      v233[132] = 15;
      if (v500)
      {
        v239 = (unint64_t *)&v500->__shared_owners_;
        do
          v240 = __ldaxr(v239);
        while (__stlxr(v240 - 1, v239));
        if (!v240)
        {
          ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
          std::__shared_weak_count::__release_weak(v500);
        }
      }
      *((_QWORD *)v233 + 3) = &off_1E42BB8C0;
      v503 = (uint64_t)(v233 + 24);
      v506 = (std::__shared_weak_count *)v233;
      if (v500)
      {
        v241 = (unint64_t *)&v500->__shared_owners_;
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
          std::__shared_weak_count::__release_weak(v500);
        }
      }
      v243 = (_QWORD *)operator new();
      v244 = v243;
      if (v506)
      {
        v245 = (unint64_t *)&v506->__shared_owners_;
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
        ggl::PipelineSetup::PipelineSetup(v243, v503, (uint64_t)v506);
        v247 = (unint64_t *)&v506->__shared_owners_;
        do
          v248 = __ldaxr(v247);
        while (__stlxr(v248 - 1, v247));
        if (!v248)
        {
          ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
          std::__shared_weak_count::__release_weak(v506);
        }
      }
      else
      {
        ggl::PipelineSetup::PipelineSetup(v243, v503, 0);
      }
      *v244 = &off_1E42BB890;
      *(_QWORD *)v244[12] = 0;
      v249 = (int64x2_t *)operator new();
      v250 = *((_QWORD *)v2 + 8);
      v251 = *(_QWORD *)(v250 + 72);
      v252 = *(_QWORD *)(v250 + 88);
      v249->i64[0] = (uint64_t)&off_1E42B59B0;
      v249[1].i64[0] = (uint64_t)"";
      v249[1].i64[1] = v251;
      v249[2].i64[0] = (uint64_t)v244;
      v249[2].i32[2] = 0;
      v249[3].i64[0] = 0;
      v249[3].i32[2] = 1065353216;
      v249[4].i64[0] = v252;
      v249[4].i64[1] = 0;
      v249[5].i64[0] = 0;
      v249[5].i64[1] = 0;
      v249[6] = vdupq_n_s64(1uLL);
      v249[7].i64[0] = 0;
      v253 = (_QWORD *)operator new();
      v254 = *((_QWORD *)v2 + 8);
      v255 = *(_QWORD *)(v254 + 88);
      v256 = *(std::__shared_weak_count **)(v254 + 96);
      if (v256)
      {
        v257 = (unint64_t *)&v256->__shared_owners_;
        do
          v258 = __ldxr(v257);
        while (__stxr(v258 + 1, v257));
        *v253 = v249;
        v253[1] = v244;
        v253[2] = v255;
        v253[3] = v256;
        do
          v259 = __ldxr(v257);
        while (__stxr(v259 + 1, v257));
      }
      else
      {
        *v253 = v249;
        v253[1] = v244;
        v253[2] = v255;
        v253[3] = 0;
      }
      v260 = (uint64_t *)v138[5];
      v138[5] = v253;
      v14 = v480;
      if (v260)
      {
        v261 = (std::__shared_weak_count *)v260[3];
        if (v261)
        {
          v262 = (unint64_t *)&v261->__shared_owners_;
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
            std::__shared_weak_count::__release_weak(v261);
          }
        }
        v264 = v260[1];
        v260[1] = 0;
        if (v264)
          (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
        v265 = *v260;
        *v260 = 0;
        v14 = v480;
        if (v265)
          (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
        MEMORY[0x1A1AF4E00](v260, 0x20C40DC1BFBCFLL);
      }
      if (!v256)
        goto LABEL_358;
      v266 = (unint64_t *)&v256->__shared_owners_;
      do
        v267 = __ldaxr(v266);
      while (__stlxr(v267 - 1, v266));
      if (!v267)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
        v268 = v506;
        if (v506)
        {
LABEL_359:
          v269 = (unint64_t *)&v268->__shared_owners_;
          do
            v270 = __ldaxr(v269);
          while (__stlxr(v270 - 1, v269));
          if (!v270)
          {
            ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
            std::__shared_weak_count::__release_weak(v268);
          }
        }
      }
      else
      {
LABEL_358:
        v268 = v506;
        if (v506)
          goto LABEL_359;
      }
      if (v508)
      {
        v271 = (unint64_t *)&v508->__shared_owners_;
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 - 1, v271));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
          std::__shared_weak_count::__release_weak(v508);
        }
      }
      v101 = *((_QWORD *)v2 + 9);
    }
    v273 = 0;
    v274 = v14;
    v275 = *(uint64_t ***)(v101 + 8 * v90);
    v275[1] = *v275;
    v276 = (_QWORD *)v274[1];
    while (1)
    {
      v277 = *(unsigned __int8 **)(v276[3] + 8 * v273);
      if (*v277 == ((16 * v90) | 1))
      {
        v278 = *((_QWORD *)v277 + 1);
        v279 = v276[15];
        if (v278 < (v276[16] - v279) >> 3)
          break;
      }
      ++v273;
    }
    v280 = **(_QWORD **)(*(_QWORD *)(v279 + 8 * v278) + 24);
    *(_QWORD *)(v280 + 32) = *(_QWORD *)(*((_QWORD *)v2 + 8) + 104);
    v282 = v97[3];
    v281 = v97[4];
    if (v281 != v282)
    {
      v283 = 0;
      while (1)
      {
        v486 = v282 + 16 * v283;
        v284 = *(_QWORD *)(*(_QWORD *)v486 + 176);
        if (*(_QWORD *)(*(_QWORD *)v486 + 184) != v284)
          break;
LABEL_377:
        if (++v283 >= (unint64_t)((v281 - v282) >> 4))
          goto LABEL_481;
      }
      v483 = v283;
      v285 = 0;
      while (2)
      {
        v287 = *(_QWORD *)(*((_QWORD *)v2 + 8) + 232);
        v288 = *(_QWORD *)(v287 + 8);
        if (v288 != *(_QWORD *)v287)
        {
          v289 = *(_QWORD *)(v288 - 8);
          *(_QWORD *)(v287 + 8) = v288 - 8;
          v290 = *(uint64_t **)(v287 + 40);
          v291 = *(_QWORD *)(v287 + 48);
          if ((unint64_t)v290 >= v291)
          {
            v292 = *(_QWORD *)(v287 + 32);
            v293 = ((uint64_t)v290 - v292) >> 3;
            v294 = v293 + 1;
            if ((unint64_t)(v293 + 1) >> 61)
              goto LABEL_569;
            v295 = v291 - v292;
            if (v295 >> 2 > v294)
              v294 = v295 >> 2;
            if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
              v294 = 0x1FFFFFFFFFFFFFFFLL;
            if (v294)
            {
              v296 = 8 * v294;
              v297 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v287 + 56) + 16))(*(_QWORD *)(v287 + 56), 8 * v294, 8);
              v298 = (uint64_t *)(v297 + 8 * v293);
              v294 = v297 + v296;
              if (v297)
                *v298 = v289;
            }
            else
            {
              v298 = (uint64_t *)(8 * v293);
            }
            v308 = *(_QWORD *)(v287 + 32);
            v307 = *(_QWORD *)(v287 + 40);
            v309 = v307 - v308;
            if (v307 != v308)
            {
              v310 = v309 - 8;
              if ((unint64_t)(v309 - 8) < 0x38)
              {
                v311 = v298;
              }
              else
              {
                v311 = v298;
                if ((unint64_t)(v307 - (_QWORD)v298) >= 0x20)
                {
                  v312 = (v310 >> 3) + 1;
                  v313 = v298 - 2;
                  v314 = (__int128 *)(v307 - 16);
                  v315 = v312 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v316 = *v314;
                    *((_OWORD *)v313 - 1) = *(v314 - 1);
                    *(_OWORD *)v313 = v316;
                    v313 -= 4;
                    v314 -= 2;
                    v315 -= 4;
                  }
                  while (v315);
                  v311 = &v298[-(v312 & 0x3FFFFFFFFFFFFFFCLL)];
                  v307 -= 8 * (v312 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v312 == (v312 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_427;
                }
              }
              do
              {
                v325 = *(_QWORD *)(v307 - 8);
                v307 -= 8;
                *--v311 = v325;
              }
              while (v307 != v308);
              goto LABEL_427;
            }
LABEL_421:
            v311 = v298;
LABEL_428:
            v301 = v298 + 1;
            *(_QWORD *)(v287 + 32) = v311;
            *(_QWORD *)(v287 + 40) = v298 + 1;
            v327 = *(_QWORD *)(v287 + 48);
            *(_QWORD *)(v287 + 48) = v294;
            if (v307)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v287 + 56) + 40))(*(_QWORD *)(v287 + 56), v307, v327 - v307);
LABEL_430:
            *(_QWORD *)(v287 + 40) = v301;
            *(_QWORD *)&v509 = v289;
            v328 = *(_QWORD *)(v287 + 120);
            if (!v328)
            {
LABEL_570:
              std::__throw_bad_function_call[abi:nn180100]();
LABEL_571:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v328 + 48))(v328, &v509);
            **(_QWORD **)(v289 + 96) = *(_QWORD *)(v284 + 88 * v285 + 16);
            v329 = (_QWORD *)*((_QWORD *)v2 + 8);
            v330 = v329[23];
            v331 = *(_QWORD *)(*(_QWORD *)v486 + 176) + 88 * v285;
            v332 = *(_QWORD *)v331;
            v333 = *(_OWORD *)(v331 + 32);
            v334 = *(_QWORD *)(v330 + 8);
            v335 = *(_QWORD *)(v330 + 16);
            v336 = *(_OWORD *)(v330 + 72);
            v511 = *(_OWORD *)(v330 + 56);
            v512 = v336;
            v337 = *(_OWORD *)(v330 + 104);
            v513 = *(_OWORD *)(v330 + 88);
            v514 = v337;
            v338 = *(_OWORD *)(v330 + 40);
            v509 = *(_OWORD *)(v330 + 24);
            v510 = v338;
            v339 = (_QWORD *)v329[25];
            v340 = v339[1];
            if (v340 == v329[26])
            {
              v339 = (_QWORD *)*v339;
              if (!v339)
              {
                v484 = v333;
                v339 = malloc_type_malloc(120 * v340 + 16, 0xB644C221uLL);
                v333 = v484;
                *v339 = 0;
                v339[1] = 0;
                *(_QWORD *)v329[25] = v339;
              }
              v329[25] = v339;
              v340 = v339[1];
            }
            v341 = &v339[15 * v340];
            v341[2] = &off_1E42B59B0;
            v342 = v341 + 2;
            v339[1] = v340 + 1;
            v342[1] = v334;
            v342[2] = v335;
            v344 = v513;
            v343 = v514;
            v345 = v512;
            *(_OWORD *)(v342 + 7) = v511;
            *(_OWORD *)(v342 + 9) = v345;
            *(_OWORD *)(v342 + 11) = v344;
            v346 = v509;
            *(_OWORD *)(v342 + 5) = v510;
            *(_OWORD *)(v342 + 3) = v346;
            *(_OWORD *)(v342 + 13) = v343;
            v342[8] = v332;
            *(_OWORD *)(v342 + 9) = v333;
            v342[11] = 0;
            v342[12] = 1;
            v2 = v485;
            v342[3] = *(_QWORD *)(*((_QWORD *)v485 + 8) + 136);
            v342[4] = v289;
            v347 = v284 + 88 * v285;
            LODWORD(v343) = *(_DWORD *)(v347 + 72);
            LODWORD(v346) = *(_DWORD *)(v347 + 76);
            LODWORD(v345) = *(_DWORD *)(v347 + 80);
            v348 = *(float *)(v347 + 84);
            v349 = *(float *)&v346 + *(float *)&v346;
            v350 = (float)(*(float *)&v346 + *(float *)&v346) * *(float *)&v346;
            v351 = (float)(*(float *)&v345 + *(float *)&v345) * *(float *)&v345;
            v352 = 1.0 - (float)(v350 + v351);
            v353 = *(float *)&v343 + *(float *)&v343;
            *(float *)&v346 = (float)(*(float *)&v343 + *(float *)&v343) * *(float *)&v346;
            v354 = (float)(*(float *)&v345 + *(float *)&v345) * v348;
            v355 = *(float *)&v346 - v354;
            v356 = *(float *)&v345 * (float)(*(float *)&v343 + *(float *)&v343);
            v357 = v348 * v349;
            v358 = (float)(v348 * v349) + v356;
            *(float *)&v346 = v354 + *(float *)&v346;
            *(float *)&v343 = 1.0 - (float)((float)(*(float *)&v343 + *(float *)&v343) * *(float *)&v343);
            v359 = *(float *)&v343 - v351;
            *(float *)&v345 = v349 * *(float *)&v345;
            v360 = v348 * v353;
            v361 = *(float *)&v345 - v360;
            v362 = v356 - v357;
            v363 = v360 + *(float *)&v345;
            v364 = *(float *)&v343 - v350;
            *(double *)&v343 = v352;
            *(double *)&v346 = *(float *)&v346;
            *(double *)&v345 = v362;
            v365 = v355;
            v366 = v359;
            v367 = v363;
            v368 = v358;
            v369 = v361;
            v370 = v364;
            v372 = *(double *)(v347 + 48);
            v371 = *(double *)(v347 + 56);
            v373 = *(double *)(v347 + 64);
            v374 = v91[1];
            v375 = v91[2];
            v376 = v91[3];
            v377 = vmlaq_n_f64(vmulq_n_f64(*v91, *(double *)&v343), v375, *(double *)&v346);
            v378 = vmlaq_n_f64(vmulq_n_f64(*v91, v365), v375, v366);
            v379 = vmlaq_n_f64(vmulq_n_f64(*v91, v368), v375, v369);
            v380 = vmlaq_n_f64(vmlaq_n_f64(v91[6], *v91, v372), v375, v371);
            v381 = v91[4];
            v382 = v91[5];
            v383 = vmlaq_n_f64(v377, v381, *(double *)&v345);
            *(float32x2_t *)&v343 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v374, *(double *)&v343), v376, *(double *)&v346), v382, *(double *)&v345));
            *(float32x2_t *)&v345 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v374, v368), v376, v369), v382, v370));
            v384 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v91[7], v374, v372), v376, v371), v382, v373));
            v385 = **(_QWORD ***)(v289 + 64);
            v386 = v385[1];
            v387 = (float32x2_t *)v385[9];
            *v387 = vcvt_f32_f64(v383);
            v387[1] = (float32x2_t)v343;
            v387[2] = vcvt_f32_f64(vmlaq_n_f64(v378, v381, v367));
            v387[3] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v374, v365), v376, v366), v382, v367));
            v387[4] = vcvt_f32_f64(vmlaq_n_f64(v379, v381, v370));
            v387[5] = (float32x2_t)v345;
            v387[6] = vcvt_f32_f64(vmlaq_n_f64(v380, v381, v373));
            v387[7] = v384;
            if (v385[8] > v386)
              v386 = v385[8];
            v385[7] = 0;
            v385[8] = v386;
            v389 = v275[1];
            v388 = (unint64_t)v275[2];
            if ((unint64_t)v389 >= v388)
            {
              v391 = *v275;
              v392 = ((char *)v389 - (char *)*v275) >> 4;
              v393 = v392 + 1;
              if ((unint64_t)(v392 + 1) >> 60)
                goto LABEL_569;
              v394 = v388 - (_QWORD)v391;
              if (v394 >> 3 > v393)
                v393 = v394 >> 3;
              if ((unint64_t)v394 >= 0x7FFFFFFFFFFFFFF0)
                v395 = 0xFFFFFFFFFFFFFFFLL;
              else
                v395 = v393;
              if (v395)
              {
                if (v395 >> 60)
                  goto LABEL_571;
                v396 = (char *)operator new(16 * v395);
              }
              else
              {
                v396 = 0;
              }
              v397 = (uint64_t *)&v396[16 * v392];
              *v397 = v289;
              v397[1] = (uint64_t)v342;
              v398 = v397;
              if (v389 == v391)
              {
                v2 = v485;
              }
              else
              {
                v2 = v485;
                do
                {
                  *((_OWORD *)v398 - 1) = *((_OWORD *)v389 - 1);
                  v398 -= 2;
                  v389 -= 2;
                }
                while (v389 != v391);
                v389 = *v275;
              }
              v390 = v397 + 2;
              *v275 = v398;
              v275[1] = v397 + 2;
              v275[2] = (uint64_t *)&v396[16 * v395];
              if (v389)
                operator delete(v389);
            }
            else
            {
              *v389 = v289;
              v389[1] = (uint64_t)v342;
              v390 = v389 + 2;
            }
            v275[1] = v390;
            v399 = *(v390 - 1);
            v400 = *(_QWORD **)(v280 + 80);
            v401 = *(_QWORD *)(v280 + 88);
            if ((unint64_t)v400 < v401)
            {
              if (v400)
                *v400 = v399;
              v286 = v400 + 1;
              goto LABEL_381;
            }
            v402 = *(_QWORD *)(v280 + 72);
            v403 = ((uint64_t)v400 - v402) >> 3;
            v404 = v403 + 1;
            if ((unint64_t)(v403 + 1) >> 61)
LABEL_569:
              abort();
            v405 = v401 - v402;
            if (v405 >> 2 > v404)
              v404 = v405 >> 2;
            if ((unint64_t)v405 >= 0x7FFFFFFFFFFFFFF8)
              v404 = 0x1FFFFFFFFFFFFFFFLL;
            if (v404)
            {
              v406 = 8 * v404;
              v407 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v280 + 96) + 16))(*(_QWORD *)(v280 + 96), 8 * v404, 8);
              v408 = (_QWORD *)(v407 + 8 * v403);
              v404 = v407 + v406;
              if (v407)
                *v408 = v399;
            }
            else
            {
              v408 = (_QWORD *)(8 * v403);
            }
            v410 = *(_QWORD *)(v280 + 72);
            v409 = *(_QWORD *)(v280 + 80);
            v411 = v409 - v410;
            if (v409 != v410)
            {
              v412 = v411 - 8;
              if ((unint64_t)(v411 - 8) < 0x38)
              {
                v413 = v408;
              }
              else
              {
                v413 = v408;
                if ((unint64_t)(v409 - (_QWORD)v408) >= 0x20)
                {
                  v414 = (v412 >> 3) + 1;
                  v415 = v408 - 2;
                  v416 = (__int128 *)(v409 - 16);
                  v417 = v414 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v418 = *v416;
                    *(v415 - 1) = *(v416 - 1);
                    *v415 = v418;
                    v415 -= 2;
                    v416 -= 2;
                    v417 -= 4;
                  }
                  while (v417);
                  v413 = &v408[-(v414 & 0x3FFFFFFFFFFFFFFCLL)];
                  v409 -= 8 * (v414 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v414 == (v414 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_478:
                    v409 = *(_QWORD *)(v280 + 72);
LABEL_479:
                    v286 = v408 + 1;
                    *(_QWORD *)(v280 + 72) = v413;
                    *(_QWORD *)(v280 + 80) = v408 + 1;
                    v420 = *(_QWORD *)(v280 + 88);
                    *(_QWORD *)(v280 + 88) = v404;
                    if (v409)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v280 + 96) + 40))(*(_QWORD *)(v280 + 96), v409, v420 - v409);
LABEL_381:
                    *(_QWORD *)(v280 + 80) = v286;
                    ++v285;
                    v284 = *(_QWORD *)(*(_QWORD *)v486 + 176);
                    if (v285 >= 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(*(_QWORD *)v486 + 184) - v284) >> 3))
                    {
                      v283 = v483;
                      v282 = v482[3];
                      v281 = v482[4];
                      goto LABEL_377;
                    }
                    continue;
                  }
                }
              }
              do
              {
                v419 = *(_QWORD *)(v409 - 8);
                v409 -= 8;
                *--v413 = v419;
              }
              while (v409 != v410);
              goto LABEL_478;
            }
            v413 = v408;
            goto LABEL_479;
          }
LABEL_394:
          if (v290)
            *v290 = v289;
          v301 = v290 + 1;
          goto LABEL_430;
        }
        break;
      }
      v299 = *(_QWORD *)(v287 + 88);
      if (!v299)
        goto LABEL_570;
      v289 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v299 + 48))(v299);
      v290 = *(uint64_t **)(v287 + 40);
      v300 = *(_QWORD *)(v287 + 48);
      if ((unint64_t)v290 < v300)
        goto LABEL_394;
      v302 = *(_QWORD *)(v287 + 32);
      v303 = ((uint64_t)v290 - v302) >> 3;
      v294 = v303 + 1;
      if ((unint64_t)(v303 + 1) >> 61)
        goto LABEL_569;
      v304 = v300 - v302;
      if (v304 >> 2 > v294)
        v294 = v304 >> 2;
      if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFF8)
        v294 = 0x1FFFFFFFFFFFFFFFLL;
      if (v294)
      {
        v305 = 8 * v294;
        v306 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v287 + 56) + 16))(*(_QWORD *)(v287 + 56), 8 * v294, 8);
        v298 = (uint64_t *)(v306 + 8 * v303);
        v294 = v306 + v305;
        if (v306)
          *v298 = v289;
      }
      else
      {
        v298 = (uint64_t *)(8 * v303);
      }
      v317 = *(_QWORD *)(v287 + 32);
      v307 = *(_QWORD *)(v287 + 40);
      v318 = v307 - v317;
      if (v307 == v317)
        goto LABEL_421;
      v319 = v318 - 8;
      if ((unint64_t)(v318 - 8) < 0x38)
      {
        v311 = v298;
      }
      else
      {
        v311 = v298;
        if ((unint64_t)(v307 - (_QWORD)v298) >= 0x20)
        {
          v320 = (v319 >> 3) + 1;
          v321 = v298 - 2;
          v322 = (__int128 *)(v307 - 16);
          v323 = v320 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v324 = *v322;
            *((_OWORD *)v321 - 1) = *(v322 - 1);
            *(_OWORD *)v321 = v324;
            v321 -= 4;
            v322 -= 2;
            v323 -= 4;
          }
          while (v323);
          v311 = &v298[-(v320 & 0x3FFFFFFFFFFFFFFCLL)];
          v307 -= 8 * (v320 & 0x3FFFFFFFFFFFFFFCLL);
          if (v320 == (v320 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_427;
        }
      }
      do
      {
        v326 = *(_QWORD *)(v307 - 8);
        v307 -= 8;
        *--v311 = v326;
      }
      while (v307 != v317);
LABEL_427:
      v307 = *(_QWORD *)(v287 + 32);
      goto LABEL_428;
    }
LABEL_481:
    v421 = *(_QWORD *)(v480[5] + 8 * v481);
    if (v421)
    {
      v422 = *(_QWORD *)(v421 + 32);
      v423 = *(_QWORD *)(v480[1] + 96);
      if (v422 >= (*(_QWORD *)(v480[1] + 104) - v423) >> 3)
        v421 = 0;
      else
        v421 = *(_QWORD *)(*(_QWORD *)(v423 + 8 * v422) + 16);
    }
    v424 = 0;
    v425 = v275 + 3;
    v14 = v480;
    while (1)
    {
      **(_QWORD **)(*(_QWORD *)(v425[v424] + 8) + 96) = v421;
      v426 = 3 * v481 + v424;
      v427 = (_QWORD *)v480[1];
      v428 = v427[3];
      v429 = v427[4];
      v430 = v429 - v428;
      if (v429 == v428)
        goto LABEL_495;
      v431 = 0;
      v432 = v430 >> 3;
      while (1)
      {
        v433 = *(unsigned __int8 **)(v428 + 8 * v431);
        if (*v433 == ((16 * v426) | 2))
        {
          v434 = *((_QWORD *)v433 + 1);
          v435 = v427[15];
          if (v434 < (v427[16] - v435) >> 3)
            break;
        }
        if (++v431 >= v432)
          goto LABEL_495;
      }
      v436 = *(_QWORD *)(v435 + 8 * v434);
      if (!v436)
LABEL_495:
        v437 = 0;
      else
        v437 = **(_QWORD **)(v436 + 24);
      v438 = *(_QWORD *)v425[v424];
      v439 = *(_QWORD **)(v437 + 80);
      v440 = *(_QWORD *)(v437 + 88);
      if ((unint64_t)v439 < v440)
      {
        if (v439)
          *v439 = v438;
        v441 = v439 + 1;
        goto LABEL_522;
      }
      v442 = *(_QWORD *)(v437 + 72);
      v443 = ((uint64_t)v439 - v442) >> 3;
      v444 = v443 + 1;
      if ((unint64_t)(v443 + 1) >> 61)
        goto LABEL_569;
      v445 = v440 - v442;
      if (v445 >> 2 > v444)
        v444 = v445 >> 2;
      if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
        v444 = 0x1FFFFFFFFFFFFFFFLL;
      if (v444)
      {
        v446 = 8 * v444;
        v447 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v437 + 96) + 16))(*(_QWORD *)(v437 + 96), 8 * v444, 8);
        v448 = (_QWORD *)(v447 + 8 * v443);
        v444 = v447 + v446;
        if (v447)
          *v448 = v438;
      }
      else
      {
        v448 = (_QWORD *)(8 * v443);
      }
      v450 = *(_QWORD *)(v437 + 72);
      v449 = *(_QWORD *)(v437 + 80);
      v451 = v449 - v450;
      if (v449 == v450)
      {
        v453 = v448;
        goto LABEL_520;
      }
      v452 = v451 - 8;
      if ((unint64_t)(v451 - 8) < 0x38)
      {
        v453 = v448;
      }
      else
      {
        v453 = v448;
        if ((unint64_t)(v449 - (_QWORD)v448) >= 0x20)
        {
          v454 = (v452 >> 3) + 1;
          v455 = v448 - 2;
          v456 = (__int128 *)(v449 - 16);
          v457 = v454 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v458 = *v456;
            *(v455 - 1) = *(v456 - 1);
            *v455 = v458;
            v455 -= 2;
            v456 -= 2;
            v457 -= 4;
          }
          while (v457);
          v453 = &v448[-(v454 & 0x3FFFFFFFFFFFFFFCLL)];
          v449 -= 8 * (v454 & 0x3FFFFFFFFFFFFFFCLL);
          if (v454 == (v454 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_519;
        }
      }
      do
      {
        v459 = *(_QWORD *)(v449 - 8);
        v449 -= 8;
        *--v453 = v459;
      }
      while (v449 != v450);
LABEL_519:
      v449 = *(_QWORD *)(v437 + 72);
LABEL_520:
      v441 = v448 + 1;
      *(_QWORD *)(v437 + 72) = v453;
      *(_QWORD *)(v437 + 80) = v448 + 1;
      v460 = *(_QWORD *)(v437 + 88);
      *(_QWORD *)(v437 + 88) = v444;
      if (v449)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v437 + 96) + 40))(*(_QWORD *)(v437 + 96), v449, v460 - v449);
LABEL_522:
      *(_QWORD *)(v437 + 80) = v441;
      v421 = *(_QWORD *)(v480[11] + 8 * v426);
      if (!v421)
        goto LABEL_487;
      v461 = *(_QWORD *)(v421 + 32);
      v462 = *(_QWORD *)(v480[1] + 96);
      if (v461 < (*(_QWORD *)(v480[1] + 104) - v462) >> 3)
      {
        v421 = *(_QWORD *)(*(_QWORD *)(v462 + 8 * v461) + 16);
LABEL_487:
        if (++v424 == 3)
          goto LABEL_127;
        continue;
      }
      v421 = 0;
      if (++v424 == 3)
      {
LABEL_127:
        v90 = v481 + 1;
        v2 = v485;
        v12 = v479;
        goto LABEL_128;
      }
    }
  }
}

void sub_19F786CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::Blur::YPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Blur::YPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Blur::YPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Blur::XPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E41F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Blur::XPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E41F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Blur::XPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Blur::Downsample4XPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Blur::Downsample4XPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Blur::Downsample4XPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **std::array<std::unique_ptr<ggl::Drawable>,3ul>::~array(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = v2[1];
    v2[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *v2;
    *v2 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
  }
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
  {
    v9 = (std::__shared_weak_count *)v8[3];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v8[1];
    v8[1] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *v8;
    *v8 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    MEMORY[0x1A1AF4E00](v8, 0x20C40DC1BFBCFLL);
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
  {
    v15 = (std::__shared_weak_count *)v14[3];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v14[1];
    v14[1] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *v14;
    *v14 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    MEMORY[0x1A1AF4E00](v14, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

void md::mun::MuninRenderResources::~MuninRenderResources(md::mun::MuninRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  void (***v28)(void);
  void (**v29)(void);
  _QWORD **v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v10)
    goto LABEL_20;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v13)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v13)
      goto LABEL_26;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_26:
  v16 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v16)
  {
    v17 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v16);
    MEMORY[0x1A1AF4E00](v17, 0x10A0C40D234DDC7);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v21)
  {
    v22 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v21);
    MEMORY[0x1A1AF4E00](v22, 0x10A0C40D234DDC7);
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (_QWORD *)*((_QWORD *)this + 24);
  do
  {
    if (v26[1])
    {
      v27 = 0;
      v28 = (void (***)(void))(v26 + 2);
      do
      {
        v29 = *v28;
        v28 += 15;
        (*v29)();
        ++v27;
      }
      while (v27 < v26[1]);
    }
    v26[1] = 0;
    v26 = (_QWORD *)*v26;
  }
  while (v26);
  v30 = (_QWORD **)*((_QWORD *)this + 24);
  *((_QWORD *)this + 25) = v30;
  v31 = *v30;
  *v30 = 0;
  if (v31)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      free(v31);
      v31 = v32;
    }
    while (v32);
    v30 = (_QWORD **)*((_QWORD *)this + 24);
  }
  free(v30);
  v33 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v34)
    goto LABEL_55;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v37)
      goto LABEL_63;
  }
  else
  {
LABEL_55:
    v37 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v37)
      goto LABEL_63;
  }
  v38 = (_QWORD *)*((_QWORD *)this + 19);
  v39 = v37;
  if (v38 != v37)
  {
    do
    {
      v41 = *--v38;
      v40 = v41;
      *v38 = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    while (v38 != v37);
    v39 = (void *)*((_QWORD *)this + 18);
  }
  *((_QWORD *)this + 19) = v37;
  operator delete(v39);
LABEL_63:
  v42 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v47)
    MEMORY[0x1A1AF4E00](v47, 0x1000C4049ECCB0CLL);
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
}

void altitude::ProtocolLoader::~ProtocolLoader(altitude::ProtocolLoader *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42C4338;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  std::__tree<std::string>::destroy(*((char **)this + 13));
  *(_QWORD *)this = off_1E42C3330;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::ProtocolLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42C4338;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  std::__tree<std::string>::destroy(*((char **)this + 13));
  *(_QWORD *)this = off_1E42C3330;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::ProtocolLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::ProtocolLoader::clearRequest(uint64_t a1, char **a2)
{
  uint64_t result;

  result = altitude::ProtocolLoader::getLoaderForFile(a1, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

void altitude::ProtocolLoader::createRequest(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t altitude::ProtocolLoader::requestFile@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t result;

  result = altitude::ProtocolLoader::getLoaderForFile(a1, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, char **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, a2, a3, a4, a5, a6);
  *a7 = &off_1E42C2C18;
  a7[1] = 0;
  a7[3] = 0;
  a7[4] = 0;
  a7[2] = 0;
  return result;
}

uint64_t altitude::ProtocolLoader::requestStore@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t result;

  result = altitude::ProtocolLoader::getLoaderForFile(a1, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, char **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 112))(result, a2, a3, a4, a5, a6, a7);
  a8[1] = 0;
  a8[2] = 0;
  *a8 = &off_1E42C2D08;
  return result;
}

uint64_t altitude::ProtocolLoader::waitOnFile(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t result;

  result = altitude::ProtocolLoader::getLoaderForFile(a1, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, char **, uint64_t))(*(_QWORD *)result + 128))(result, a2, a3);
  return result;
}

void altitude::ProtocolLoader::getProtocol(altitude::ProtocolLoader *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  char *v8;
  char *v9;
  BOOL v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  v3 = (char *)this + 104;
  if (v2 != (_QWORD *)((char *)this + 104))
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(v2 + 4);
      if ((unint64_t)v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)a2, (uint64_t)v6);
      }
      else
      {
        if (*((char *)v2 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v2[4], v2[5]);
        }
        else
        {
          v7 = *v6;
          v5->__r_.__value_.__r.__words[2] = v2[6];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        ++v5;
      }
      a2[1] = v5;
      v8 = (char *)v2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)v2[2];
          v10 = *(_QWORD *)v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  void **v14;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[24 * v8];
  v12 = v10 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v13;
      --v10;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t altitude::ProtocolLoader::getLoaderForFile(uint64_t a1, char **a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  void **v15;
  size_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  int v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  uint64_t v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v32;
  uint64_t v33;
  __int128 __dst;
  unint64_t v35;
  void *__p[2];
  unint64_t v37;

  LODWORD(v3) = 4;
  HIBYTE(v37) = 4;
  strcpy((char *)__p, "file");
  v4 = *((_BYTE *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (uint64_t)a2[1];
  if (v4 >= 0)
    v6 = (char *)a2;
  else
    v6 = *a2;
  if (v5 < 3)
    goto LABEL_16;
  v7 = &v6[v5];
  v8 = v5;
  v9 = v6;
  while (1)
  {
    v10 = (char *)memchr(v9, 58, v8 - 2);
    if (!v10)
    {
LABEL_15:
      LODWORD(v3) = 4;
      goto LABEL_16;
    }
    if (*(_WORD *)v10 == 12090 && v10[2] == 47)
      break;
    v9 = v10 + 1;
    v8 = v7 - (_BYTE *)v9;
    if (v7 - (_BYTE *)v9 < 3)
      goto LABEL_15;
  }
  LODWORD(v3) = 4;
  if (v10 == v7 || v10 - v6 == -1)
    goto LABEL_16;
  if (v5 >= (unint64_t)(v10 - v6))
    v29 = v10 - v6;
  else
    v29 = v5;
  if (v29 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    p_dst = (__int128 *)operator new(v32 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v35 = v33 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v29;
    p_dst = &__dst;
    if (!v29)
      goto LABEL_70;
  }
  memmove(p_dst, v6, v29);
LABEL_70:
  *((_BYTE *)p_dst + v29) = 0;
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  v37 = v35;
  *(_OWORD *)__p = __dst;
  v3 = HIBYTE(v35);
LABEL_16:
  v14 = *(uint64_t **)(a1 + 104);
  v12 = (uint64_t *)(a1 + 104);
  v13 = v14;
  if (!v14)
    goto LABEL_63;
  if ((v3 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v3 & 0x80u) == 0)
    v16 = v3;
  else
    v16 = (size_t)__p[1];
  v17 = v12;
  do
  {
    while (1)
    {
      v18 = *((char *)v13 + 55);
      v19 = v18 >= 0 ? v13 + 4 : (uint64_t *)v13[4];
      v20 = v18 >= 0 ? *((unsigned __int8 *)v13 + 55) : v13[5];
      v21 = v16 >= v20 ? v20 : v16;
      v22 = memcmp(v19, v15, v21);
      if (v22)
        break;
      if (v20 >= v16)
        goto LABEL_38;
LABEL_24:
      v13 = (uint64_t *)v13[1];
      if (!v13)
        goto LABEL_39;
    }
    if (v22 < 0)
      goto LABEL_24;
LABEL_38:
    v17 = v13;
    v13 = (uint64_t *)*v13;
  }
  while (v13);
LABEL_39:
  if (v17 == v12)
    goto LABEL_63;
  v23 = *((char *)v17 + 55);
  if (v23 >= 0)
    v24 = v17 + 4;
  else
    v24 = (const void *)v17[4];
  if (v23 >= 0)
    v25 = *((unsigned __int8 *)v17 + 55);
  else
    v25 = v17[5];
  if (v25 >= v16)
    v26 = v16;
  else
    v26 = v25;
  v27 = memcmp(v15, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      goto LABEL_51;
LABEL_63:
    v28 = 0;
    if ((v3 & 0x80) != 0)
      goto LABEL_64;
  }
  else
  {
    if (v16 < v25)
      goto LABEL_63;
LABEL_51:
    v28 = v17[7];
    if ((v3 & 0x80) != 0)
LABEL_64:
      operator delete(__p[0]);
  }
  return v28;
}

void altitude::ProtocolLoader::addLoader(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  void **v27;
  void **v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  int v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t **v36;
  const std::string::value_type *v37;
  _QWORD *v38;
  const void *v39;
  const void *v40;
  int v41;
  const void *v42;
  size_t v43;
  size_t v44;
  int v45;
  int v46;
  _QWORD *v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void *__p;
  void **v73;

  v3 = a1;
  v5 = (char *)a1[16];
  v4 = a1[17];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)a1[15];
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_108;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_108;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_108:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)v3[15];
      }
    }
    v3[15] = v14;
    v3[16] = v7;
    v3[17] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  v23 = (char *)v3[13];
  v3[16] = v7;
  std::__tree<std::string>::destroy(v23);
  v3[12] = v3 + 13;
  v3[13] = 0;
  v3[14] = 0;
  v24 = v3[15];
  v70 = v3 + 13;
  if (v3[16] != v24)
  {
    v25 = 0;
    v26 = 0;
    v68 = v3;
    while (1)
    {
      v67 = v26;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v24 + 8 * v25) + 136))(&__p);
      v28 = (void **)__p;
      v27 = v73;
      if (v73 != __p)
        break;
      v28 = v73;
LABEL_97:
      if (v28)
      {
        if (v27 != v28)
        {
          do
          {
            if (*((char *)v27 - 1) < 0)
              operator delete(*(v27 - 3));
            v27 -= 3;
          }
          while (v27 != v28);
          v27 = (void **)__p;
        }
        v73 = v28;
        operator delete(v27);
      }
      v25 = (v67 + 1);
      v24 = v3[15];
      v26 = v67 + 1;
      if (v25 >= (v3[16] - v24) >> 3)
        return;
    }
    v29 = 0;
    v30 = 0;
    v69 = v25;
    while (1)
    {
      v31 = (char *)&v28[3 * v29];
      v32 = v31[23];
      if (v32 >= 0)
        v33 = v31[23];
      else
        v33 = *((_QWORD *)v31 + 1);
      if (v33)
      {
        v71 = *(_QWORD *)(v3[15] + 8 * v25);
        v34 = (_QWORD *)v3[13];
        v35 = v70;
        v36 = (uint64_t **)v70;
        if (v34)
        {
          if (v32 >= 0)
            v37 = v31;
          else
            v37 = *(const std::string::value_type **)v31;
          while (1)
          {
            v35 = v34;
            v40 = (const void *)v34[4];
            v38 = v34 + 4;
            v39 = v40;
            v41 = *((char *)v38 + 23);
            if (v41 >= 0)
              v42 = v38;
            else
              v42 = v39;
            if (v41 >= 0)
              v43 = *((unsigned __int8 *)v38 + 23);
            else
              v43 = v38[1];
            if (v43 >= v33)
              v44 = v33;
            else
              v44 = v43;
            v45 = memcmp(v37, v42, v44);
            if (v45)
            {
              if (v45 < 0)
                goto LABEL_44;
LABEL_58:
              v46 = memcmp(v42, v37, v44);
              if (v46)
              {
                if ((v46 & 0x80000000) == 0)
                  goto LABEL_84;
              }
              else if (v43 >= v33)
              {
LABEL_84:
                v47 = v35;
                v3 = v68;
                v25 = v69;
                v50 = v71;
                goto LABEL_34;
              }
              v34 = (_QWORD *)v35[1];
              if (!v34)
              {
                v36 = (uint64_t **)(v35 + 1);
                break;
              }
            }
            else
            {
              if (v33 >= v43)
                goto LABEL_58;
LABEL_44:
              v34 = (_QWORD *)*v35;
              v36 = (uint64_t **)v35;
              if (!*v35)
                break;
            }
          }
        }
        v47 = operator new(0x40uLL);
        v48 = (std::string *)(v47 + 4);
        if (v31[23] < 0)
        {
          std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
        }
        else
        {
          v49 = *(_OWORD *)v31;
          v47[6] = *((_QWORD *)v31 + 2);
          *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
        }
        v3 = v68;
        v25 = v69;
        v50 = v71;
        v47[7] = 0;
        *v47 = 0;
        v47[1] = 0;
        v47[2] = v35;
        *v36 = v47;
        v51 = *(_QWORD *)v68[12];
        v52 = v47;
        if (v51)
        {
          v68[12] = v51;
          v52 = *v36;
        }
        v53 = (uint64_t *)*v70;
        v54 = v52 == (uint64_t *)*v70;
        *((_BYTE *)v52 + 24) = v54;
        if (!v54)
        {
          do
          {
            v55 = v52[2];
            if (*(_BYTE *)(v55 + 24))
              break;
            v56 = *(uint64_t **)(v55 + 16);
            v57 = *v56;
            if (*v56 == v55)
            {
              v60 = v56[1];
              if (!v60 || (v61 = *(unsigned __int8 *)(v60 + 24), v58 = (_BYTE *)(v60 + 24), v61))
              {
                if (*(uint64_t **)v55 == v52)
                {
                  v62 = (uint64_t *)v52[2];
                }
                else
                {
                  v62 = *(uint64_t **)(v55 + 8);
                  v63 = *v62;
                  *(_QWORD *)(v55 + 8) = *v62;
                  if (v63)
                  {
                    *(_QWORD *)(v63 + 16) = v55;
                    v56 = *(uint64_t **)(v55 + 16);
                  }
                  v62[2] = (uint64_t)v56;
                  *(_QWORD *)(*(_QWORD *)(v55 + 16) + 8 * (**(_QWORD **)(v55 + 16) != v55)) = v62;
                  *v62 = v55;
                  *(_QWORD *)(v55 + 16) = v62;
                  v56 = (uint64_t *)v62[2];
                  v55 = *v56;
                }
                *((_BYTE *)v62 + 24) = 1;
                *((_BYTE *)v56 + 24) = 0;
                v66 = *(_QWORD *)(v55 + 8);
                *v56 = v66;
                if (v66)
                  *(_QWORD *)(v66 + 16) = v56;
                *(_QWORD *)(v55 + 16) = v56[2];
                *(_QWORD *)(v56[2] + 8 * (*(_QWORD *)v56[2] != (_QWORD)v56)) = v55;
                *(_QWORD *)(v55 + 8) = v56;
                goto LABEL_32;
              }
            }
            else if (!v57 || (v59 = *(unsigned __int8 *)(v57 + 24), v58 = (_BYTE *)(v57 + 24), v59))
            {
              if (*(uint64_t **)v55 == v52)
              {
                v64 = v52[1];
                *(_QWORD *)v55 = v64;
                if (v64)
                {
                  *(_QWORD *)(v64 + 16) = v55;
                  v56 = *(uint64_t **)(v55 + 16);
                }
                v52[2] = (uint64_t)v56;
                *(_QWORD *)(*(_QWORD *)(v55 + 16) + 8 * (**(_QWORD **)(v55 + 16) != v55)) = v52;
                v52[1] = v55;
                *(_QWORD *)(v55 + 16) = v52;
                v56 = (uint64_t *)v52[2];
              }
              else
              {
                v52 = (uint64_t *)v52[2];
              }
              *((_BYTE *)v52 + 24) = 1;
              *((_BYTE *)v56 + 24) = 0;
              v55 = v56[1];
              v65 = *(uint64_t **)v55;
              v56[1] = *(_QWORD *)v55;
              if (v65)
                v65[2] = (uint64_t)v56;
              *(_QWORD *)(v55 + 16) = v56[2];
              *(_QWORD *)(v56[2] + 8 * (*(_QWORD *)v56[2] != (_QWORD)v56)) = v55;
              *(_QWORD *)v55 = v56;
LABEL_32:
              v56[2] = v55;
              break;
            }
            *(_BYTE *)(v55 + 24) = 1;
            v52 = v56;
            *((_BYTE *)v56 + 24) = v56 == v53;
            *v58 = 1;
          }
          while (v56 != v53);
        }
        ++v68[14];
        v28 = (void **)__p;
        v27 = v73;
LABEL_34:
        v47[7] = v50;
      }
      v29 = ++v30;
      if (0xAAAAAAAAAAAAAAABLL * (v27 - v28) <= v30)
        goto LABEL_97;
    }
  }
}

void altitude::Route::append(altitude::Route *this, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const double *v18;
  float64x2_t v19;
  unint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  const double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  const double *v42;
  float32x4_t v43;
  unint64_t v44;
  float32x4_t v45;
  const double *v46;
  const double *v47;
  const double *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  double v77;
  float *v78;
  _OWORD *v79;
  float v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  float64x2x3_t v103;
  float64x2x3_t v104;
  float64x2x3_t v105;
  float64x2x3_t v106;
  float64x2x3_t v107;
  float64x2x3_t v108;

  v7 = (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3;
  v8 = a4;
  v9 = operator new();
  v10 = v9;
  *(_QWORD *)v9 = &off_1E42C3C10;
  *(_DWORD *)(v9 + 8) = 255;
  v11 = (uint64_t *)((char *)this + 80);
  *(_QWORD *)(v9 + 16) = this;
  *(_QWORD *)(v9 + 24) = (char *)this + 80;
  *(_QWORD *)(v9 + 32) = (char *)this + 56;
  *(_QWORD *)(v9 + 40) = a2;
  *(_QWORD *)(v9 + 48) = a3;
  *(_QWORD *)(v9 + 56) = v7;
  *(double *)(v9 + 64) = v8;
  *(_WORD *)(v9 + 72) = 1;
  *(_BYTE *)(v9 + 74) = 0;
  *(_QWORD *)(v9 + 84) = 0;
  v12 = 0.0;
  *(_QWORD *)(v9 + 76) = 0;
  v13 = 0.0;
  v14 = 0.0;
  v15 = a3 - a2;
  *(_QWORD *)(v9 + 80) = a3 - a2;
  if (a3 != a2)
  {
    v16 = *v11;
    if (v15 < 4)
    {
      v17 = 0;
LABEL_7:
      v27 = v17 + a2;
      v28 = v17 + a2 - a3;
      v29 = (double *)(v16 + 24 * v27 + 16);
      do
      {
        v14 = *(v29 - 2) + v14;
        v13 = *(v29 - 1) + v13;
        v30 = *v29;
        v29 += 3;
        v12 = v30 + v12;
        v31 = __CFADD__(v28++, 1);
      }
      while (!v31);
      goto LABEL_10;
    }
    v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    v18 = (const double *)(v16 + 24 * a2);
    v19 = 0uLL;
    v20 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    do
    {
      v26 = v18;
      v18 += 12;
      v103 = vld3q_f64(v26);
      v26 += 6;
      v24 = vaddq_f64(v103.val[0], v24);
      v105 = vld3q_f64(v26);
      v25 = vaddq_f64(v105.val[0], v25);
      v22 = vaddq_f64(v103.val[1], v22);
      v23 = vaddq_f64(v105.val[1], v23);
      v19 = vaddq_f64(v103.val[2], v19);
      v21 = vaddq_f64(v105.val[2], v21);
      v20 -= 4;
    }
    while (v20);
    v14 = vaddvq_f64(vaddq_f64(v25, v24));
    v13 = vaddvq_f64(vaddq_f64(v23, v22));
    v12 = vaddvq_f64(vaddq_f64(v21, v19));
    if (v15 != v17)
      goto LABEL_7;
  }
LABEL_10:
  v32 = 1.0 / (double)v15;
  v33 = v14 * v32;
  v34 = v13 * v32;
  v35 = v12 * v32;
  *(double *)(v9 + 96) = v33;
  *(double *)(v9 + 104) = v34;
  *(double *)(v9 + 112) = v35;
  v36 = 0.0;
  if (a3 == a2)
    goto LABEL_19;
  v37 = *v11;
  if (v15 <= 7)
  {
    v38 = 0;
LABEL_16:
    v57 = v38 + a2;
    v58 = v38 + a2 - a3;
    v59 = (double *)(v37 + 24 * v57 + 16);
    do
    {
      v60 = *(v59 - 2) - v33;
      v61 = *(v59 - 1) - v34;
      v62 = *v59;
      v59 += 3;
      *(float *)&v60 = v60 * v60 + v61 * v61 + (v62 - v35) * (v62 - v35);
      v36 = fmaxf(v36, *(float *)&v60);
      v31 = __CFADD__(v58++, 1);
    }
    while (!v31);
    goto LABEL_19;
  }
  v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
  v40 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0);
  v41 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
  v38 = v15 & 0xFFFFFFFFFFFFFFF8;
  v42 = (const double *)(v37 + 24 * a2);
  v43 = 0uLL;
  v44 = v15 & 0xFFFFFFFFFFFFFFF8;
  v45 = 0uLL;
  do
  {
    v46 = v42;
    v104 = vld3q_f64(v46);
    v46 += 6;
    v47 = v42 + 12;
    v106 = vld3q_f64(v47);
    v48 = v42 + 18;
    v107 = vld3q_f64(v48);
    v108 = vld3q_f64(v46);
    v49 = vsubq_f64(v104.val[0], v39);
    v50 = vsubq_f64(v108.val[0], v39);
    v51 = vsubq_f64(v106.val[0], v39);
    v52 = vsubq_f64(v107.val[0], v39);
    v53 = vsubq_f64(v104.val[1], v40);
    v54 = vsubq_f64(v107.val[1], v40);
    v55 = vsubq_f64(v106.val[1], v40);
    v56 = vsubq_f64(v108.val[1], v40);
    v104.val[0] = vsubq_f64(v104.val[2], v41);
    v104.val[1] = vsubq_f64(v108.val[2], v41);
    v104.val[2] = vsubq_f64(v106.val[2], v41);
    v106.val[0] = vsubq_f64(v107.val[2], v41);
    v43 = vmaxnmq_f32(v43, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49, v49), v53, v53), v104.val[0], v104.val[0])), vmlaq_f64(vmlaq_f64(vmulq_f64(v50, v50), v56, v56), v104.val[1], v104.val[1])));
    v45 = vmaxnmq_f32(v45, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51, v51), v55, v55), v104.val[2], v104.val[2])), vmlaq_f64(vmlaq_f64(vmulq_f64(v52, v52), v54, v54), v106.val[0], v106.val[0])));
    v42 += 24;
    v44 -= 8;
  }
  while (v44);
  v36 = vmaxnmvq_f32(vmaxnmq_f32(v43, v45));
  if (v15 != v38)
    goto LABEL_16;
LABEL_19:
  *(float *)(v9 + 120) = sqrtf(v36) + 1000.0;
  if (v15 < 2)
  {
    LODWORD(v68) = a2;
    v66 = a2;
  }
  else
  {
    v63 = v15 - 1;
    v64 = *v11;
    v65 = 1;
    v66 = a2;
    v67 = a2;
    do
    {
      v68 = v65 * (~a2 + a3) / v63 + a2;
      if (v66 < v68)
      {
        v69 = v64 + 24 * v67;
        v70 = *(double *)v69;
        v71 = v64 + 24 * v68;
        v72 = *(double *)v71 - *(double *)v69;
        v73 = *(float64x2_t *)(v69 + 8);
        v74 = vsubq_f64(*(float64x2_t *)(v71 + 8), v73);
        v75 = vmulq_f64(v74, v74);
        *(float *)v75.f64 = v75.f64[0] + v72 * v72 + v75.f64[1];
        v76 = v66;
        v77 = 1.0 / *(float *)v75.f64;
        v78 = (float *)(*((_QWORD *)this + 7) + 48 * v66 + 44);
        v79 = (_OWORD *)(v64 + 8 + 24 * v66);
        v80 = 0.0;
        do
        {
          v81 = *((double *)v79 - 1) - v70;
          v82 = *(float64x2_t *)v79;
          v79 = (_OWORD *)((char *)v79 + 24);
          v83 = vmulq_f64(vsubq_f64(v82, v73), v74);
          *(float *)&v81 = (v83.f64[0] + v81 * v72 + v83.f64[1]) * v77;
          v80 = fmaxf(fminf(fmaxf(v80, *(float *)&v81), 1.0), 0.0);
          *((_DWORD *)v78 - 2) = v67;
          *((_DWORD *)v78 - 1) = v68;
          *v78 = v80;
          v78 += 12;
          ++v76;
        }
        while ((v63 * v65 / v63) + (_DWORD)a2 != v76);
        v66 = v76;
      }
      v65 = (v65 + 1);
      v67 = v68;
    }
    while (v15 > v65);
  }
  v84 = *((_QWORD *)this + 7) + 48 * v66;
  *(int32x2_t *)(v84 + 36) = vdup_n_s32(v68);
  *(_DWORD *)(v84 + 44) = 0;
  v86 = (char *)*((_QWORD *)this + 14);
  v85 = *((_QWORD *)this + 15);
  if ((unint64_t)v86 >= v85)
  {
    v88 = (char *)*((_QWORD *)this + 13);
    v89 = (v86 - v88) >> 3;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61)
      abort();
    v91 = v85 - (_QWORD)v88;
    if (v91 >> 2 > v90)
      v90 = v91 >> 2;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (v92)
    {
      if (v92 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v93 = operator new(8 * v92);
    }
    else
    {
      v93 = 0;
    }
    v94 = (uint64_t *)&v93[8 * v89];
    v95 = &v93[8 * v92];
    *v94 = v10;
    v87 = v94 + 1;
    if (v86 == v88)
    {
      v88 = v86;
    }
    else
    {
      v96 = v86 - v88 - 8;
      if (v96 < 0x58)
        goto LABEL_55;
      if ((unint64_t)(v88 - v93) < 0x20)
        goto LABEL_55;
      v97 = (v96 >> 3) + 1;
      v98 = &v93[8 * v89 - 16];
      v99 = v86 - 16;
      v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *(_OWORD *)v99;
        *(v98 - 1) = *((_OWORD *)v99 - 1);
        *v98 = v101;
        v98 -= 2;
        v99 -= 32;
        v100 -= 4;
      }
      while (v100);
      v94 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
      v86 -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_55:
        do
        {
          v102 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *--v94 = v102;
        }
        while (v86 != v88);
        v88 = (char *)*((_QWORD *)this + 13);
      }
    }
    *((_QWORD *)this + 13) = v94;
    *((_QWORD *)this + 14) = v87;
    *((_QWORD *)this + 15) = v95;
    if (v88)
      operator delete(v88);
  }
  else
  {
    *(_QWORD *)v86 = v10;
    v87 = v86 + 8;
  }
  *((_QWORD *)this + 14) = v87;
}

float altitude::Route::widthForZoom(altitude::Route *this, float a2)
{
  md::realistic::RouteRenderLayer *v4;
  md::realistic::RouteRenderLayer *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  float *v22;
  float v23;
  BOOL v24;
  unsigned int v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float *v31;
  float v32;
  BOOL v33;
  unsigned int v34;
  float *v35;
  float v36;
  float v37;
  uint64_t v38;
  float *v39;
  float v40;
  BOOL v41;
  unsigned int v42;
  float *v43;
  float v44;
  float v45;
  uint64_t v46;
  unsigned int v47;
  float *v48;
  float v49;
  BOOL v50;
  unsigned int v51;
  float v52;
  float v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unsigned __int8 v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;
  char v77;
  char v78;

  v4 = (md::realistic::RouteRenderLayer *)*((_QWORD *)this + 4);
  md::realistic::RouteRenderLayer::loadStylesheet(v4);
  v5 = (md::realistic::RouteRenderLayer *)*((_QWORD *)this + 4);
  md::realistic::RouteRenderLayer::loadStylesheet(v5);
  v6 = *((_QWORD *)v4 + 29);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 30);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v73 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v73 = 0;
  }
  v74 = 0;
  v75 = 0;
  v72 = v6;
  v76 = 0;
  if (v6)
    LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v74);
  v76 = v6;
  if (!v7)
    goto LABEL_14;
  v11 = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_14:
    v13 = *((_QWORD *)v5 + 31);
    v14 = (std::__shared_weak_count *)*((_QWORD *)v5 + 32);
    if (v14)
      goto LABEL_15;
LABEL_21:
    v68 = 0;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  v13 = *((_QWORD *)v5 + 31);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v5 + 32);
  if (!v14)
    goto LABEL_21;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v68 = v14;
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
LABEL_22:
  v69 = 0;
  v70 = 0;
  v67 = v13;
  v71 = 0;
  if (v13)
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v69);
  v71 = v13;
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    LODWORD(v13) = v71;
  }
  if (!v76)
  {
    v28 = 0.0;
    if (!(_DWORD)v13)
      goto LABEL_83;
    goto LABEL_82;
  }
  if ((_DWORD)v13)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 5) + 64))
      v20 = &v72;
    else
      v20 = &v67;
    v21 = *(_QWORD *)(*v20 + 24);
    v22 = *(float **)v21;
    if (*(_QWORD *)v21
      && (v23 = *v22, LODWORD(v22) = *v22 == 1.0, *(_BYTE *)(v21 + 10))
      && (v23 != 0.0 ? (v24 = v23 == 1.0) : (v24 = 1), !v24)
      || (v25 = *(unsigned __int8 *)(v21 + v22 + 11), v23 = 0.0, v25 == 2))
    {
      v78 = 1;
      v77 = 1;
      v26 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0xF3u, 0, &v78);
      v27 = *v26
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0xF3u, 1u, &v77)
                          - *v26)
                  * v23);
    }
    else
    {
      v27 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*v20 + 24), 0xF3u, v25, 0);
    }
    v29 = a2 - v27;
    v30 = *(_QWORD *)(*v20 + 24);
    v31 = *(float **)v30;
    if (*(_QWORD *)v30
      && (v32 = *v31, LODWORD(v31) = *v31 == 1.0, *(_BYTE *)(v30 + 10))
      && (v32 != 0.0 ? (v33 = v32 == 1.0) : (v33 = 1), !v33)
      || (v34 = *(unsigned __int8 *)(v30 + v31 + 11), v32 = 0.0, v34 == 2))
    {
      v78 = 1;
      v77 = 1;
      v35 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v30, 0xF4u, 0, &v78);
      v36 = *v35
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v30, 0xF4u, 1u, &v77)
                          - *v35)
                  * v32);
    }
    else
    {
      v36 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*v20 + 24), 0xF4u, v34, 0);
    }
    v37 = v36 * v29;
    v38 = *(_QWORD *)(*v20 + 24);
    v39 = *(float **)v38;
    if (*(_QWORD *)v38
      && (v40 = *v39, LODWORD(v39) = *v39 == 1.0, *(_BYTE *)(v38 + 10))
      && (v40 != 0.0 ? (v41 = v40 == 1.0) : (v41 = 1), !v41)
      || (v42 = *(unsigned __int8 *)(v38 + v39 + 11), v40 = 0.0, v42 == 2))
    {
      v78 = 1;
      v77 = 1;
      v43 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0xF5u, 0, &v78);
      v44 = *v43
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0xF5u, 1u, &v77)
                          - *v43)
                  * v40);
    }
    else
    {
      v44 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*v20 + 24), 0xF5u, v42, 0);
    }
    v45 = fminf(fmaxf(v37, 0.0), v44) + 1.0;
    v46 = *(_QWORD *)(*v20 + 24);
    if ((int)a2 >= 0x17)
      v47 = 23;
    else
      v47 = (int)a2;
    v48 = *(float **)v46;
    if (*(_QWORD *)v46
      && (v49 = *v48, LODWORD(v48) = *v48 == 1.0, *(_BYTE *)(v46 + 10))
      && (v49 != 0.0 ? (v50 = v49 == 1.0) : (v50 = 1), !v50)
      || (v51 = *(unsigned __int8 *)(v46 + v48 + 11), v49 = 0.0, v51 == 2))
    {
      v78 = 1;
      v77 = 1;
      v52 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v46, 0x5Eu, v47, 0, &v78);
      v53 = v52
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v46, 0x5Eu, v47, 1u, &v77)- v52)* v49);
    }
    else
    {
      v53 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*v20 + 24), 0x5Eu, v47, v51, 0);
    }
    v28 = v53 * v45;
    if (v71)
LABEL_82:
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 56))(v67);
  }
  else
  {
    v28 = 0.0;
  }
LABEL_83:
  v54 = v70;
  if (!v70)
    goto LABEL_87;
  v55 = (unint64_t *)&v70->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v57 = v68;
    if (!v68)
      goto LABEL_93;
  }
  else
  {
LABEL_87:
    v57 = v68;
    if (!v68)
      goto LABEL_93;
  }
  v58 = (unint64_t *)&v57->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
LABEL_93:
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 56))(v72);
  v60 = v75;
  if (!v75)
    goto LABEL_99;
  v61 = (unint64_t *)&v75->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v63 = v73;
    if (!v73)
      return v28;
  }
  else
  {
LABEL_99:
    v63 = v73;
    if (!v73)
      return v28;
  }
  v64 = (unint64_t *)&v63->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  return v28;
}

void altitude::Route::cull(md::realistic::RouteRenderLayer **this, altitude::View *a2, karo::graphics::Viewport *a3, ResourceAccessor *i)
{
  altitude::Route *v6;
  md::realistic::RouteRenderLayer *v7;
  md::realistic::RouteRenderLayer *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  __double2 v47;
  double v48;
  __double2 v49;
  unsigned int v50;
  BOOL v51;
  void *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  __double2 v57;
  double v58;
  __double2 v59;
  void *v60;
  __double2 v61;
  double v62;
  __double2 v63;
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  float v68;
  __int128 v69;
  double **v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  double v74;
  float v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  float64_t v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  float v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  float v95;
  double v96;
  double v97;
  unint64_t v98;
  uint64_t v99;
  double v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  double v107;
  __double2 v108;
  double v109;
  double v110;
  __double2 v111;
  double v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  unsigned int v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  uint64_t *v139;
  double *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  int v145;
  int v146;
  BOOL v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  int *v158;
  unint64_t v159;
  double v160;
  double v161;
  double v162;
  char v163;
  char v164;
  double v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  long double v172;
  long double v173;
  double v174;
  uint64_t v175;
  double *v176;
  int v177;
  double v178;
  int v179;
  uint64_t v180;
  double v181;
  double v183;
  double v184;
  __double2 v185;
  double v186;
  __double2 v187;
  double v188;
  double v189;
  double v190;
  __double2 v191;
  double v192;
  __double2 v193;
  double v194;
  double v195;
  double v196;
  __double2 v197;
  long double v198;
  double v199;
  double cosval;
  __double2 v201;
  double sinval;
  double v203;
  __double2 v204;
  unint64_t v205;
  char *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  double v211;
  double v212;
  unint64_t v213;
  double *v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  float v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _BYTE *v229;
  _QWORD *v230;
  unint64_t v231;
  uint64_t v232;
  _OWORD *v233;
  char *v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  const double *v241;
  float32x4_t v242;
  unint64_t v243;
  float32x4_t v244;
  const double *v245;
  const double *v246;
  const double *v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  uint64_t v256;
  uint64_t v257;
  double *v258;
  double v259;
  double v260;
  double v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  uint64_t v267;
  double v268;
  uint64_t v269;
  double v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  uint64_t v274;
  double v275;
  float *v276;
  _OWORD *v277;
  float v278;
  double v279;
  float64x2_t v280;
  float64x2_t v281;
  double **v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  double v288;
  double v289;
  double v290;
  double *v291;
  double v292;
  float **v293;
  float *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  md::realistic::RouteRenderLayer *v300;
  md::realistic::RouteRenderLayer *v301;
  void *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  void *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  BOOL v316;
  double *v317;
  float v318;
  float *v319;
  unint64_t v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  std::__shared_weak_count *v349;
  __n128 v350;
  double v351;
  unsigned int v352;
  uint16x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  _QWORD *v357;
  unint64_t v358;
  uint64_t v359;
  float *v360;
  uint64_t v361;
  __n128 v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  ResourceAccessor *v365;
  double **v366;
  double *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int *v373;
  int *v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  int8x16_t v379;
  unint64_t v380;
  uint64x2_t v381;
  uint64x2_t v382;
  uint64_t *v383;
  uint64_t v384;
  int8x16_t v385;
  uint64_t v386;
  uint64_t v387;
  int8x16_t v388;
  int8x16_t v389;
  unint64_t v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  double v394;
  uint64_t *v395;
  uint64_t v396;
  double v397;
  double v398;
  int v399;
  double v400;
  uint64_t v401;
  int *v402;
  int *v403;
  __int128 v404;
  int *v405;
  int *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  char *v410;
  __int128 v411;
  char *v412;
  int *v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  int *v420;
  int *v421;
  uint64_t v422;
  unsigned __int8 v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t *v427;
  uint64_t *v428;
  uint64_t v429;
  md::realistic::RouteRenderLayer *v430;
  void *v431;
  int64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  _BYTE *v436;
  uint64_t *v437;
  unint64_t v438;
  _OWORD *v439;
  uint64_t *v440;
  uint64_t v441;
  __int128 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  _QWORD *v446;
  unsigned __int8 v447;
  uint64_t v448;
  geo::read_write_lock *v449;
  const char *v450;
  malloc_zone_t *zone;
  uint64_t v452;
  geo::read_write_lock *v453;
  const char *v454;
  malloc_zone_t *v455;
  uint64_t v456;
  _QWORD *v457;
  unint64_t v458;
  float32x4_t *v459;
  _QWORD *v460;
  unint64_t v461;
  float32x4_t *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  int v467;
  char *v468;
  char *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t *v472;
  uint64_t *v473;
  int *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int *v478;
  uint64_t v479;
  double *v480;
  uint64_t *v481;
  uint64_t *v482;
  uint64_t v483;
  int *v484;
  std::__shared_weak_count *v485;
  uint64_t v486;
  unint64_t *v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  _QWORD *v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  _QWORD **v520;
  _QWORD **v521;
  _QWORD *v522;
  char *v523;
  char *v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  int *v531;
  char *v532;
  char *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  karo::graphics::Viewport *v541;
  altitude::Route *v542;
  ResourceAccessor *v543;
  _QWORD *v544;
  _QWORD *v545;
  uint64_t v546;
  unint64_t v547;
  _QWORD *v548;
  double v549;
  double v550;
  char v551;
  int v552;
  unint64_t v553;
  int v554;
  unsigned int v555;
  double *v556;
  uint64_t v557;
  double *v558;
  unsigned int v559;
  double v560;
  uint64_t v561;
  float32x4_t v562;
  int8x16_t v563;
  float v564;
  float32x4_t v565;
  uint64_t v566;
  double v567;
  unsigned int v568;
  float32x4_t v569;
  uint64_t v570;
  double v571;
  int v572;
  float32x4_t v573;
  void *v574;
  double v576;
  unint64_t v577;
  __n128 v578;
  int8x16_t v579;
  uint64_t v580;
  unint64_t v581;
  __n128 v582;
  double v583;
  std::__shared_weak_count *v584;
  double v585;
  double v586;
  double v587;
  uint64_t v588;
  double v589;
  double v590;
  double v591;
  uint64_t v592;
  double v593;
  double v594;
  double v595;
  uint64_t v596;
  void *__p[2];
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  uint64_t v605;
  std::__shared_weak_count *v606;
  _QWORD v607[2];
  char v608;
  double v609;
  std::__shared_weak_count *v610;
  _QWORD v611[2];
  char v612;
  uint64_t v613[2];
  uint64_t v614;
  std::__shared_weak_count *v615;
  float64x2x3_t v616;
  float64x2x3_t v617;
  float64x2x3_t v618;
  float64x2x3_t v619;

  v6 = (altitude::Route *)this;
  v7 = this[4];
  md::realistic::RouteRenderLayer::loadStylesheet(v7);
  v8 = (md::realistic::RouteRenderLayer *)*((_QWORD *)v6 + 4);
  md::realistic::RouteRenderLayer::loadStylesheet(v8);
  v9 = (void *)*((_QWORD *)v7 + 29);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 30);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    __p[1] = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    __p[1] = 0;
  }
  v598 = 0uLL;
  __p[0] = v9;
  LOBYTE(v599.f64[0]) = 0;
  if (v9)
    LOBYTE(v9) = (*(uint64_t (**)(void *, float64x2_t *))(*(_QWORD *)v9 + 48))(v9, &v598);
  LOBYTE(v599.f64[0]) = (_BYTE)v9;
  if (!v10)
    goto LABEL_14;
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_14:
    v16 = *((_QWORD *)v8 + 31);
    v17 = (std::__shared_weak_count *)*((_QWORD *)v8 + 32);
    if (v17)
      goto LABEL_15;
LABEL_21:
    v582.n128_u64[1] = 0;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v16 = *((_QWORD *)v8 + 31);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v8 + 32);
  if (!v17)
    goto LABEL_21;
LABEL_15:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v582.n128_u64[1] = (unint64_t)v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
LABEL_22:
  v583 = 0.0;
  v584 = 0;
  v582.n128_u64[0] = v16;
  LOBYTE(v585) = 0;
  if (v16)
  {
    v21 = (*(uint64_t (**)(unint64_t, double *))(*(_QWORD *)v16 + 48))(v16, &v583);
    LOBYTE(v585) = v21;
    if (!v17)
      goto LABEL_31;
  }
  else
  {
    v21 = 0;
    LOBYTE(v585) = 0;
    if (!v17)
      goto LABEL_31;
  }
  v22 = (unint64_t *)&v17->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v21 = LOBYTE(v585);
LABEL_31:
  v24 = LOBYTE(v599.f64[0]);
  if (v21)
    (*(void (**)(unint64_t))(*(_QWORD *)v582.n128_u64[0] + 56))(v582.n128_u64[0]);
  v25 = v584;
  if (v584)
  {
    v26 = (unint64_t *)&v584->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v582.n128_u64[1])
  {
    v28 = (unint64_t *)(v582.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v582.n128_u64[1] + 16))(v582.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v582.n128_u64[1]);
    }
  }
  if (LOBYTE(v599.f64[0]))
    (*(void (**)(void *))(*(_QWORD *)__p[0] + 56))(__p[0]);
  v30 = v598.f64[1];
  if (!*(_QWORD *)&v598.f64[1])
    goto LABEL_49;
  v31 = (unint64_t *)(*(_QWORD *)&v598.f64[1] + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    (*(void (**)(float64_t))(**(_QWORD **)&v30 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v30));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v30);
    v33 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_53;
  }
  else
  {
LABEL_49:
    v33 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_53;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_53:
    if (!v24)
      return;
    goto LABEL_54;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!v24)
    return;
LABEL_54:
  if (!v21)
    return;
  v36 = *((_QWORD *)v6 + 5);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 72);
    if (v37)
    {
      *((_QWORD *)v6 + 6) = v37;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37))
      {
        v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 6) + 16))(*((_QWORD *)v6 + 6));
        (*(void (**)(void **__return_ptr))(**((_QWORD **)v6 + 6) + 32))(__p);
        v39 = v38;
        LODWORD(v40) = 0;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 11) - *((_QWORD *)v6 + 10)) >> 3) - 1 > v38)
        {
          v41 = *((_QWORD *)v6 + 5);
          if (objc_msgSend(*(id *)(v41 + 40), "pointCount", v40))
            v42 = *(void **)(v41 + 40);
          else
            v42 = 0;
          if (v39 < objc_msgSend(v42, "pointCount"))
          {
            v43 = v39;
          }
          else
          {
            v42 = 0;
            v43 = 0;
          }
          objc_msgSend(v42, "pointAt:", v43);
          v46 = v45 * 0.0174532925;
          v47 = __sincos_stret(v44 * 0.0174532925);
          v48 = 6378137.0 / sqrt(1.0 - v47.__sinval * v47.__sinval * 0.00669437999);
          v49 = __sincos_stret(v46);
          v576 = v48 * v47.__cosval * v49.__cosval;
          v571 = v48 * v47.__cosval * v49.__sinval;
          v50 = objc_msgSend(v42, "pointCount");
          v51 = v43 + 1 >= (unint64_t)v50;
          if (v43 + 1 >= (unint64_t)v50)
            v52 = 0;
          else
            v52 = v42;
          if (v51)
            v53 = 0;
          else
            v53 = (v43 + 1);
          objc_msgSend(v52, "pointAt:", v53);
          v56 = v55 * 0.0174532925;
          v57 = __sincos_stret(v54 * 0.0174532925);
          v58 = 6378137.0 / sqrt(1.0 - v57.__sinval * v57.__sinval * 0.00669437999);
          v59 = __sincos_stret(v56);
          v560 = v57.__sinval * 0.99330562;
          v60 = __p[1];
          v61 = __sincos_stret(*(double *)__p);
          v62 = 6378137.0 / sqrt(1.0 - v61.__sinval * v61.__sinval * 0.00669437999);
          v63 = __sincos_stret(*(double *)&v60);
          v64 = -(v576 - v58 * v57.__cosval * v59.__cosval);
          v65 = -(v571 - v58 * v57.__cosval * v59.__sinval);
          v66 = *((_QWORD *)v6 + 7);
          v67 = *(double *)(v66 + 48 * v39 + 16);
          v567 = v47.__sinval * 0.99330562 * v48;
          *(float *)&v40 = (v64 * -(v576 - v62 * v61.__cosval * v63.__cosval)
                          + v65 * -(v571 - v62 * v61.__cosval * v63.__sinval)
                          + -(v567 - v560 * v58) * -(v567 - v61.__sinval * 0.99330562 * v62))
                         * (*(double *)(v66 + 48 * (v39 + 1) + 16) - v67)
                         / (v64 * v64 + v65 * v65 + -(v567 - v560 * v58) * -(v567 - v560 * v58))
                         + v67;
        }
        *((_DWORD *)v6 + 1) = LODWORD(v40);
      }
    }
  }
  v68 = altitude::Route::widthForZoom(v6, *((float *)a2 + 338));
  if (v68 == 0.0)
    v68 = *((float *)v6 + 6);
  *((float *)v6 + 6) = v68;
  v69 = *(_OWORD *)((char *)v6 + 152);
  v71 = *((_QWORD *)v6 + 21);
  v70 = (double **)*((_QWORD *)v6 + 22);
  *((_OWORD *)v6 + 11) = v69;
  v72 = *((_QWORD *)v6 + 24);
  *((_QWORD *)v6 + 24) = v71;
  *((_QWORD *)v6 + 20) = v70;
  *((_QWORD *)v6 + 21) = v72;
  *((_QWORD *)v6 + 19) = v70;
  v73 = (_QWORD *)*((_QWORD *)v6 + 13);
  v545 = (_QWORD *)*((_QWORD *)v6 + 14);
  v543 = i;
  if (v73 == v545)
  {
    v285 = 0;
    v283 = *((_QWORD *)&v69 + 1);
    v284 = v69;
    v282 = v70;
    goto LABEL_234;
  }
  v74 = 2.0;
  v75 = 1.0;
  v541 = a3;
  v542 = v6;
  do
  {
    v548 = v73;
    v79 = *v73;
    *(_WORD *)(v79 + 73) = 1;
    v80 = *(float *)(v79 + 120);
    *(_OWORD *)__p = *(_OWORD *)(v79 + 96);
    v598.f64[0] = *(float64_t *)(v79 + 112);
    v598.f64[1] = v80;
    v81 = (double *)(*(uint64_t (**)(char *))(*((_QWORD *)a2 + 5) + 24))((char *)a2 + 40);
    if (karo::graphics::View::relates((uint64_t)a2, (uint64_t)__p))
    {
      *(_BYTE *)(v79 + 73) = 0;
      v82 = v81[1];
      v83 = v81[2];
      v84 = (*v81 - *(double *)(v79 + 96)) * (*v81 - *(double *)(v79 + 96))
          + (v82 - *(double *)(v79 + 104)) * (v82 - *(double *)(v79 + 104))
          + (v83 - *(double *)(v79 + 112)) * (v83 - *(double *)(v79 + 112));
      v85 = *(float *)(v79 + 120);
      if (v84 < (float)(v85 * v85) * 4.0)
      {
        v86 = *(_QWORD *)(v79 + 80);
        if (v86)
        {
          v87 = 0;
          v88 = *(_QWORD *)(v79 + 40);
          v89 = v86 - 1;
          do
          {
            v90 = (double *)(**(_QWORD **)(v79 + 24) + 24 * ((v87 / v89) + v88));
            v84 = fmin((*v81 - *v90) * (*v81 - *v90) + (v82 - v90[1]) * (v82 - v90[1]) + (v83 - v90[2]) * (v83 - v90[2]), v84);
            v87 += *(_QWORD *)(v79 + 48) + ~v88;
            --v86;
          }
          while (v86);
        }
      }
      v544 = (_QWORD *)(v79 + 96);
      v91 = *((_DWORD *)a3 + 12);
      v92 = *((_DWORD *)a3 + 13);
      v94 = *((_DWORD *)a3 + 10);
      v93 = *((_DWORD *)a3 + 11);
      v95 = *((float *)a2 + 346);
      v96 = v85;
      v97 = *(double *)(v79 + 64) * v85;
      v98 = *(_QWORD *)(v79 + 48) - *(_QWORD *)(v79 + 40);
      do
      {
        LODWORD(v99) = v98;
        if (v98 < 3)
          break;
        v100 = v97 / (v95 * (v96 + v96) * (double)v98);
        v98 >>= 1;
      }
      while (v100 < v74);
      v99 = (int)v99 <= 2 ? 2 : v99;
      v546 = *(_QWORD *)(v79 + 80);
      v547 = v99;
      *(_QWORD *)(v79 + 80) = v99;
      v101 = *((_DWORD *)a2 + 339);
      v102 = v101 <= 0xD ? v101 > 0xB : 2;
      v103 = *(_DWORD *)(v79 + 76);
      *(_DWORD *)(v79 + 76) = v102;
      if (*(_BYTE *)(v79 + 72) || v546 != v547 || v102 != v103)
      {
        LOBYTE(v104) = 0;
        *(_BYTE *)(v79 + 72) = 0;
        v105 = v547;
        if (sqrt(v84) < 1000000.0)
        {
          v106 = 0;
          v104 = 0;
          v564 = (float)((float)((float)(v95 * 0.5) * (float)v91) / *((float *)a2 + 336))
               * (float)((float)((float)(v95 * 0.5) * (float)v91) / *((float *)a2 + 336));
          v554 = v91 - v94;
          v550 = (double)(v91 - v94);
          v552 = v92 - v93;
          v549 = (double)(v92 - v93);
          v105 = v547;
          v561 = v79;
          while (1)
          {
            v114 = *(_QWORD *)(v79 + 40);
            v115 = *(_QWORD *)(v79 + 48) + ~v114;
            v116 = v105 - 1;
            if (v106)
              v117 = v115 * (v106 - 1) / v116 + v114;
            else
              LODWORD(v117) = 0;
            v572 = v104;
            v118 = (v115 * v106 / v116) + v114;
            v119 = v118;
            if (v106 != v116)
              v119 = ((v115 + v115 * v106) / v116) + v114;
            v120 = *(_QWORD *)(*(_QWORD *)(v79 + 16) + 40);
            if (objc_msgSend(*(id *)(v120 + 40), "pointCount"))
              v121 = *(void **)(v120 + 40);
            else
              v121 = 0;
            if (v118 < objc_msgSend(v121, "pointCount"))
            {
              v122 = v118;
            }
            else
            {
              v121 = 0;
              v122 = 0;
            }
            v123 = *(_QWORD *)(*(_QWORD *)(v79 + 16) + 40);
            if (objc_msgSend(*(id *)(v123 + 40), "pointCount"))
              v124 = *(void **)(v123 + 40);
            else
              v124 = 0;
            v125 = objc_msgSend(v124, "pointCount");
            if (v119 >= v125)
              v124 = 0;
            v577 = v119;
            if (v119 >= v125)
              v119 = 0;
            objc_msgSend(v121, "pointAt:", v122);
            v127 = v126 * 0.0174532925;
            v129 = v128 * 0.0174532925;
            objc_msgSend(v124, "pointAt:", v119);
            v132 = -(v127 - v130 * 0.0174532925);
            v133 = -(v129 - v131 * 0.0174532925);
            v134 = *((double *)a2 + 166) - v127;
            v135 = *((double *)a2 + 167) - v129;
            v136 = (float)(v132 * v132) + (float)(v133 * v133);
            v137 = 0.0;
            if (v136 >= 1.0e-10)
            {
              v138 = (float)((float)(v132 * v134) + (float)(v135 * v133)) / v136;
              if (v138 >= 0.0)
              {
                v137 = v138;
                if (v138 > v75)
                  v137 = 1.0;
              }
            }
            if ((float)((float)((float)-(float)(v134 - (float)(v137 * v132))
                               * (float)-(float)(v134 - (float)(v137 * v132)))
                       + (float)((float)-(float)(v135 - (float)(v137 * v133))
                               * (float)-(float)(v135 - (float)(v137 * v133)))) >= v564)
            {
              v139 = *(uint64_t **)(v79 + 32);
              v140 = (double *)(**(_QWORD **)(v79 + 24) + 24 * v118);
              v141 = v140[1];
              v142 = v140[2];
              v143 = *((double *)a2 + 28)
                   + *((double *)a2 + 16) * *v140
                   + *((double *)a2 + 20) * v141
                   + *((double *)a2 + 24) * v142;
              v144 = 0.5
                   / (*((double *)a2 + 30)
                    + *((double *)a2 + 18) * *v140
                    + *((double *)a2 + 22) * v141
                    + *((double *)a2 + 26) * v142);
              v145 = (int)((v144
                          * (*((double *)a2 + 27)
                           + *v140 * *((double *)a2 + 15)
                           + v141 * *((double *)a2 + 19)
                           + v142 * *((double *)a2 + 23))
                          + 0.5)
                         * v550);
              v146 = (int)((0.5 - v144 * v143) * v549);
              v149 = v145 <= 0 || v554 <= v145 || v146 <= 0 || v552 <= v146;
              v150 = !v149;
              v151 = *v139;
              *(_BYTE *)(*v139 + 48 * v118 + 32) = v150;
              if (v149
                && !*(_BYTE *)(v151 + 48 * v117 + 32)
                && !*(_BYTE *)(v151 + 48 * v577 + 32))
              {
                *(_BYTE *)(v79 + 72) = 1;
                v104 = v572;
                goto LABEL_108;
              }
            }
            else
            {
              *(_BYTE *)(**(_QWORD **)(v79 + 32) + 48 * v118 + 32) = 1;
            }
            v568 = v117;
            v152 = *(_QWORD *)(v79 + 16);
            v153 = *(int *)(v79 + 76);
            v154 = *(_QWORD *)(v152 + 80);
            v155 = *(_QWORD *)(v152 + 56);
            v156 = *(_QWORD *)(v152 + 40);
            if (objc_msgSend(*(id *)(v156 + 40), "pointCount"))
              v157 = *(void **)(v156 + 40);
            else
              v157 = 0;
            v158 = (int *)(v155 + 48 * v118);
            if (v118 < objc_msgSend(v157, "pointCount"))
            {
              v159 = v118;
            }
            else
            {
              v157 = 0;
              v159 = 0;
            }
            objc_msgSend(v157, "pointAt:", v159);
            v161 = v160;
            objc_msgSend(v157, "pointAt:", v159);
            v609 = 0.0;
            if (*v158 < (int)v153)
            {
              v163 = 0;
              v164 = 0;
              v165 = v161 * 0.0174532925;
              v166 = v162 * 0.0174532925;
              v556 = (double *)(v155 + 48 * v118 + 24);
              v558 = (double *)(v154 + 24 * v118);
              v167 = v153;
              v79 = v561;
              while (1)
              {
                v168 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 32) + 40) + 128) + 712);
                v582.n128_f64[0] = v165;
                v582.n128_f64[1] = v166;
                v169 = altitude::IntersectorHeight::heightAtLatLon(v168, v582.n128_f64, &v609, heightLevels[v167]);
                if (v169 == 1)
                {
                  v164 = 1;
                }
                else
                {
                  if (!v169)
                  {
                    v107 = *(double *)(v152 + 8) + v609;
                    *v556 = v107;
                    v108 = __sincos_stret(v165);
                    v109 = 6378137.0 / sqrt(v108.__sinval * v108.__sinval * -0.00669437999 + 1.0);
                    v110 = (v107 + v109) * v108.__cosval;
                    v111 = __sincos_stret(v166);
                    v112 = v107 + v109 * 0.99330562;
                    v75 = 1.0;
                    *v558 = v110 * v111.__cosval;
                    v558[1] = v110 * v111.__sinval;
                    v558[2] = v112 * v108.__sinval;
                    *v158 = v167;
                    if (((_DWORD)v153 == (_DWORD)v167) | v164 & 1)
                      v113 = v163;
                    else
                      v113 = 1;
                    *(_BYTE *)(v561 + 72) |= v113;
                    v104 = 1;
                    goto LABEL_108;
                  }
                  v163 = 1;
                }
                if (--v167 <= *v158)
                  goto LABEL_163;
              }
            }
            v163 = 0;
            v79 = v561;
LABEL_163:
            *(_BYTE *)(v79 + 72) |= v163;
            v104 = v572 & 1;
            if (v106)
              break;
LABEL_108:
            ++v106;
            v105 = *(_QWORD *)(v79 + 80);
            if (v106 >= v105)
              goto LABEL_181;
          }
          v170 = *(_QWORD *)(v79 + 16);
          v171 = *(_QWORD *)(v170 + 80) + 24 * v118;
          v172 = *(double *)v171;
          v173 = *(double *)(v171 + 8);
          v174 = *(double *)(v171 + 16);
          v175 = *(_QWORD *)(v170 + 56);
          v176 = (double *)(v175 + 48 * v568);
          v177 = *(_DWORD *)v176;
          v178 = v176[3];
          v179 = *(_DWORD *)(v175 + 48 * v118);
          if (v118 == v577)
          {
            if (v177 <= v179)
              goto LABEL_108;
          }
          else
          {
            v180 = v175 + 48 * v577;
            v181 = *(double *)(v180 + 24);
            if (*(_DWORD *)v180 > v179 && v177 > v179)
            {
              v194 = sqrt(v172 * v172 + v173 * v173);
              v195 = atan2(*(long double *)(v171 + 16), v194 * 0.996647189);
              v196 = atan2(v173, v172);
              v197 = __sincos_stret(v195);
              v198 = v194 + v197.__cosval * v197.__cosval * -42697.6727 * v197.__cosval;
              v74 = 2.0;
              v199 = atan2(v174 + v197.__sinval * v197.__sinval * 42841.3115 * v197.__sinval, v198);
              v201 = __sincos_stret(v199);
              cosval = v201.__cosval;
              sinval = v201.__sinval;
              v203 = 6378137.0 / sqrt(sinval * sinval * -0.00669437999 + 1.0);
              v178 = (v181 + v178) * 0.5;
LABEL_176:
              v188 = (v203 + v178) * cosval;
              goto LABEL_177;
            }
            if (v177 <= v179)
            {
              if (*(_DWORD *)v180 <= v179)
                goto LABEL_108;
              v183 = sqrt(v172 * v172 + v173 * v173);
              v184 = atan2(*(long double *)(v171 + 16), v183 * 0.996647189);
              v196 = atan2(v173, v172);
              v185 = __sincos_stret(v184);
              v186 = atan2(v174 + v185.__sinval * v185.__sinval * 42841.3115 * v185.__sinval, v183 + v185.__cosval * v185.__cosval * -42697.6727 * v185.__cosval);
              v187 = __sincos_stret(v186);
              sinval = v187.__sinval;
              v203 = 6378137.0 / sqrt(v187.__sinval * v187.__sinval * -0.00669437999 + 1.0);
              v188 = (v203 + v181) * v187.__cosval;
              v178 = v181;
LABEL_177:
              v204 = __sincos_stret(v196);
              *(double *)v171 = v188 * v204.__cosval;
              *(double *)(v171 + 8) = v188 * v204.__sinval;
              *(double *)(v171 + 16) = (v178 + v203 * 0.99330562) * sinval;
              v75 = 1.0;
              goto LABEL_108;
            }
          }
          v189 = sqrt(v172 * v172 + v173 * v173);
          v190 = atan2(*(long double *)(v171 + 16), v189 * 0.996647189);
          v196 = atan2(v173, v172);
          v191 = __sincos_stret(v190);
          v192 = atan2(v174 + v191.__sinval * v191.__sinval * 42841.3115 * v191.__sinval, v189 + v191.__cosval * v191.__cosval * -42697.6727 * v191.__cosval);
          v193 = __sincos_stret(v192);
          cosval = v193.__cosval;
          sinval = v193.__sinval;
          v203 = 6378137.0 / sqrt(sinval * sinval * -0.00669437999 + 1.0);
          goto LABEL_176;
        }
LABEL_181:
        v6 = v542;
        i = v543;
        a3 = v541;
        if ((v104 & 1) != 0 || v546 != v547)
        {
          *(_BYTE *)(v79 + 74) = 1;
          v544[1] = 0;
          v544[2] = 0;
          *v544 = 0;
          v208 = *(_QWORD *)(v79 + 40);
          v209 = *(_QWORD *)(v79 + 48);
          v210 = 0.0;
          v211 = 0.0;
          v212 = 0.0;
          v213 = v209 - v208;
          if (v209 != v208)
          {
            v214 = (double *)(**(_QWORD **)(v79 + 24) + 24 * v208 + 16);
            v215 = v209 - v208;
            do
            {
              v212 = *(v214 - 2) + v212;
              *(double *)(v79 + 96) = v212;
              v211 = *(v214 - 1) + v211;
              *(double *)(v79 + 104) = v211;
              v216 = *v214;
              v214 += 3;
              v210 = v216 + v210;
              *(double *)(v79 + 112) = v210;
              --v215;
            }
            while (v215);
          }
          v217 = 1.0 / (double)v213;
          v218 = v212 * v217;
          v219 = v211 * v217;
          v220 = v210 * v217;
          *(double *)(v79 + 96) = v218;
          *(double *)(v79 + 104) = v219;
          *(double *)(v79 + 112) = v220;
          v221 = 0.0;
          if (v209 == v208)
            goto LABEL_218;
          v222 = **(_QWORD **)(v79 + 24);
          if (v213 > 7)
          {
            v223 = v213 & 0xFFFFFFFFFFFFFFF8;
            v238 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v218, 0);
            v239 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v219, 0);
            v240 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v220, 0);
            v241 = (const double *)(v222 + 24 * v208);
            v242 = 0uLL;
            v243 = v213 & 0xFFFFFFFFFFFFFFF8;
            v244 = 0uLL;
            do
            {
              v245 = v241;
              v616 = vld3q_f64(v245);
              v245 += 6;
              v246 = v241 + 12;
              v617 = vld3q_f64(v246);
              v247 = v241 + 18;
              v618 = vld3q_f64(v247);
              v619 = vld3q_f64(v245);
              v248 = vsubq_f64(v616.val[0], v238);
              v249 = vsubq_f64(v619.val[0], v238);
              v250 = vsubq_f64(v617.val[0], v238);
              v251 = vsubq_f64(v618.val[0], v238);
              v252 = vsubq_f64(v616.val[1], v239);
              v253 = vsubq_f64(v618.val[1], v239);
              v254 = vsubq_f64(v617.val[1], v239);
              v255 = vsubq_f64(v619.val[1], v239);
              v616.val[0] = vsubq_f64(v616.val[2], v240);
              v616.val[1] = vsubq_f64(v619.val[2], v240);
              v616.val[2] = vsubq_f64(v617.val[2], v240);
              v617.val[0] = vsubq_f64(v618.val[2], v240);
              v242 = vmaxnmq_f32(v242, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v248, v248), v252, v252), v616.val[0], v616.val[0])), vmlaq_f64(vmlaq_f64(vmulq_f64(v249, v249), v255, v255), v616.val[1], v616.val[1])));
              v244 = vmaxnmq_f32(v244, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v250, v250), v254, v254), v616.val[2], v616.val[2])), vmlaq_f64(vmlaq_f64(vmulq_f64(v251, v251), v253, v253), v617.val[0], v617.val[0])));
              v241 += 24;
              v243 -= 8;
            }
            while (v243);
            v221 = vmaxnmvq_f32(vmaxnmq_f32(v242, v244));
            v75 = 1.0;
            if (v213 == v223)
              goto LABEL_218;
          }
          else
          {
            v223 = 0;
          }
          v256 = v223 + v208;
          v257 = v256 - v209;
          v258 = (double *)(v222 + 24 * v256 + 16);
          do
          {
            v259 = *(v258 - 2) - v218;
            v260 = *(v258 - 1) - v219;
            v261 = *v258;
            v258 += 3;
            *(float *)&v259 = v259 * v259 + v260 * v260 + (v261 - v220) * (v261 - v220);
            v221 = fmaxf(v221, *(float *)&v259);
            v51 = __CFADD__(v257++, 1);
          }
          while (!v51);
LABEL_218:
          *(float *)(v79 + 120) = sqrtf(v221);
          if (v105 < 2)
          {
            LODWORD(v76) = v208;
            v77 = v208;
          }
          else
          {
            v262 = v209 + ~v208;
            v263 = v105 - 1;
            v264 = **(_QWORD **)(v79 + 24);
            v265 = 1;
            v77 = v208;
            v266 = v208;
            do
            {
              v76 = v265 * v262 / v263 + v208;
              if (v77 < v76)
              {
                v267 = v264 + 24 * v266;
                v268 = *(double *)v267;
                v269 = v264 + 24 * v76;
                v270 = *(double *)v269 - *(double *)v267;
                v271 = *(float64x2_t *)(v267 + 8);
                v272 = vsubq_f64(*(float64x2_t *)(v269 + 8), v271);
                v273 = vmulq_f64(v272, v272);
                *(float *)v273.f64 = v273.f64[0] + v270 * v270 + v273.f64[1];
                v274 = v77;
                v275 = 1.0 / *(float *)v273.f64;
                v276 = (float *)(**(_QWORD **)(v79 + 32) + 48 * v77 + 44);
                v277 = (_OWORD *)(v264 + 8 + 24 * v77);
                v278 = 0.0;
                do
                {
                  v279 = *((double *)v277 - 1) - v268;
                  v280 = *(float64x2_t *)v277;
                  v277 = (_OWORD *)((char *)v277 + 24);
                  v281 = vmulq_f64(vsubq_f64(v280, v271), v272);
                  *(float *)&v279 = (v281.f64[0] + v279 * v270 + v281.f64[1]) * v275;
                  v278 = fmaxf(fminf(fmaxf(v278, *(float *)&v279), v75), 0.0);
                  *((_DWORD *)v276 - 2) = v266;
                  *((_DWORD *)v276 - 1) = v76;
                  *v276 = v278;
                  v276 += 12;
                  ++v274;
                }
                while ((_DWORD)v208 + (v262 * (unint64_t)v265 / v263) != v274);
                v77 = v274;
              }
              v265 = (v265 + 1);
              v266 = v76;
            }
            while (v105 > v265);
          }
          v78 = **(_QWORD **)(v79 + 32) + 48 * v77;
          *(int32x2_t *)(v78 + 36) = vdup_n_s32(v76);
          *(_DWORD *)(v78 + 44) = 0;
        }
      }
    }
    if (!*(_BYTE *)(v79 + 73))
    {
      v206 = (char *)*((_QWORD *)v6 + 20);
      v205 = *((_QWORD *)v6 + 21);
      if ((unint64_t)v206 >= v205)
      {
        v224 = (char *)*((_QWORD *)v6 + 19);
        v225 = (v206 - v224) >> 3;
        v226 = v225 + 1;
        if ((unint64_t)(v225 + 1) >> 61)
          goto LABEL_509;
        v227 = v205 - (_QWORD)v224;
        if (v227 >> 2 > v226)
          v226 = v227 >> 2;
        if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8)
          v228 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v228 = v226;
        if (v228)
        {
          if (v228 >> 61)
            goto LABEL_510;
          v229 = operator new(8 * v228);
        }
        else
        {
          v229 = 0;
        }
        v230 = &v229[8 * v225];
        *v230 = v79;
        v207 = v230 + 1;
        if (v206 == v224)
        {
          v224 = v206;
        }
        else
        {
          v231 = v206 - 8 - v224;
          if (v231 < 0x58)
            goto LABEL_513;
          if ((unint64_t)(v224 - v229) < 0x20)
            goto LABEL_513;
          v232 = (v231 >> 3) + 1;
          v233 = &v229[8 * v225 - 16];
          v234 = v206 - 16;
          v235 = v232 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v236 = *(_OWORD *)v234;
            *(v233 - 1) = *((_OWORD *)v234 - 1);
            *v233 = v236;
            v233 -= 2;
            v234 -= 32;
            v235 -= 4;
          }
          while (v235);
          v230 -= v232 & 0x3FFFFFFFFFFFFFFCLL;
          v206 -= 8 * (v232 & 0x3FFFFFFFFFFFFFFCLL);
          if (v232 != (v232 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_513:
            do
            {
              v237 = *((_QWORD *)v206 - 1);
              v206 -= 8;
              *--v230 = v237;
            }
            while (v206 != v224);
            v224 = (char *)*((_QWORD *)v6 + 19);
          }
        }
        *((_QWORD *)v6 + 19) = v230;
        *((_QWORD *)v6 + 20) = v207;
        *((_QWORD *)v6 + 21) = &v229[8 * v228];
        if (v224)
          operator delete(v224);
      }
      else
      {
        *(_QWORD *)v206 = v79;
        v207 = v206 + 8;
      }
      *((_QWORD *)v6 + 20) = v207;
    }
    v73 = v548 + 1;
  }
  while (v548 + 1 != v545);
  v282 = (double **)*((_QWORD *)v6 + 19);
  v70 = (double **)*((_QWORD *)v6 + 20);
  v284 = *((_QWORD *)v6 + 22);
  v283 = *((_QWORD *)v6 + 23);
  if (v282 == v70)
  {
    v285 = 0;
    v70 = (double **)*((_QWORD *)v6 + 19);
LABEL_234:
    if (v285 != (v283 - v284) >> 3)
      goto LABEL_235;
    goto LABEL_239;
  }
  v285 = 0;
  v286 = (_QWORD *)*((_QWORD *)v6 + 19);
  while ((v283 - v284) >> 3 != v285 && *v286 == *(_QWORD *)(v284 + 8 * v285) && !*(_BYTE *)(*v286 + 74))
  {
    ++v285;
    if (++v286 == v70)
    {
      v285 = v285;
      goto LABEL_234;
    }
  }
LABEL_235:
  *((_QWORD *)v6 + 16) = 0;
  *((_QWORD *)v6 + 17) = 0;
  *((_QWORD *)v6 + 18) = 0;
  if (v282 != v70)
  {
    v287 = 0;
    v288 = 0.0;
    v289 = 0.0;
    v290 = 0.0;
    do
    {
      v291 = *v282++;
      v290 = v290 + v291[12];
      *((double *)v6 + 16) = v290;
      v289 = v289 + v291[13];
      *((double *)v6 + 17) = v289;
      v288 = v288 + v291[14];
      *((double *)v6 + 18) = v288;
      ++v287;
    }
    while (v282 != v70);
    v292 = 1.0 / (double)v287;
    *((double *)v6 + 16) = v290 * v292;
    *((double *)v6 + 17) = v289 * v292;
    *((double *)v6 + 18) = v288 * v292;
  }
LABEL_239:
  v293 = (float **)*((_QWORD *)v6 + 26);
  v294 = *v293;
  v295 = *((_QWORD *)*v293 + 19);
  v296 = *((_QWORD *)*v293 + 20);
  if (v295 != v296)
  {
    v297 = 0;
    v298 = *((_QWORD *)v294 + 22);
    v299 = (*((_QWORD *)v294 + 23) - v298) >> 3;
    while (v299 != v297 && *(_QWORD *)v295 == *(_QWORD *)(v298 + 8 * v297) && !*(_BYTE *)(*(_QWORD *)v295 + 74))
    {
      ++v297;
      v295 += 8;
      if (v295 == v296)
      {
        if (v299 == v297)
          goto LABEL_248;
        goto LABEL_249;
      }
    }
    goto LABEL_249;
  }
  if ((uint64_t)(*((_QWORD *)v294 + 23) - *((_QWORD *)v294 + 22)) >> 3)
    goto LABEL_249;
LABEL_248:
  if (!v293[8])
LABEL_249:
    altitude::RouteDrawRegion::update(*((altitude::RouteDrawRegion **)v6 + 26), i);
  v300 = (md::realistic::RouteRenderLayer *)v293[1];
  md::realistic::RouteRenderLayer::loadStylesheet(v300);
  v301 = (md::realistic::RouteRenderLayer *)v293[1];
  md::realistic::RouteRenderLayer::loadStylesheet(v301);
  v302 = *((void **)v300 + 29);
  v303 = (std::__shared_weak_count *)*((_QWORD *)v300 + 30);
  __p[0] = v302;
  __p[1] = v303;
  if (v303)
  {
    v304 = (unint64_t *)&v303->__shared_owners_;
    do
      v305 = __ldxr(v304);
    while (__stxr(v305 + 1, v304));
    v610 = v303;
    do
      v306 = __ldxr(v304);
    while (__stxr(v306 + 1, v304));
  }
  else
  {
    v610 = 0;
  }
  v611[0] = 0;
  v611[1] = 0;
  v609 = *(double *)&v302;
  v612 = 0;
  if (*(double *)&v302 != 0.0)
    LOBYTE(v302) = (*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)v302 + 48))(v302, v611);
  v612 = (char)v302;
  if (v303)
  {
    v307 = (unint64_t *)&v303->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v309 = (void *)*((_QWORD *)v301 + 31);
  v310 = (std::__shared_weak_count *)*((_QWORD *)v301 + 32);
  __p[0] = v309;
  __p[1] = v310;
  if (v310)
  {
    v311 = (unint64_t *)&v310->__shared_owners_;
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
    v606 = v310;
    do
      v313 = __ldxr(v311);
    while (__stxr(v313 + 1, v311));
  }
  else
  {
    v606 = 0;
  }
  v607[1] = 0;
  v605 = (uint64_t)v309;
  v607[0] = 0;
  v608 = 0;
  if (v309)
    LOBYTE(v309) = (*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)v309 + 48))(v309, v607);
  v608 = (char)v309;
  if (v310)
  {
    v314 = (unint64_t *)&v310->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  if (v612)
    v316 = v608 == 0;
  else
    v316 = 1;
  if (!v316)
  {
    if (*(_BYTE *)(*((_QWORD *)*v293 + 5) + 64))
      v317 = &v609;
    else
      v317 = (double *)&v605;
    v318 = *((float *)a2 + 338);
    v319 = v293[9];
    v320 = *(_QWORD *)(*((_QWORD *)v319 + 8) + 16);
    v321 = *((double *)a2 + 10);
    v322 = *((double *)a2 + 11);
    v323 = *((double *)a2 + 12);
    v325 = *((double *)a2 + 8);
    v324 = *((double *)a2 + 9);
    v327 = *((double *)a2 + 6);
    v326 = *((double *)a2 + 7);
    v328 = -(v325 * v321 - v326 * v322) - (v325 * v321 - v326 * v322);
    v329 = -(v327 * v322 - v325 * v324) - (v327 * v322 - v325 * v324);
    v330 = -(v326 * v324 - v327 * v321) - (v326 * v324 - v327 * v321);
    v331 = -(v330 * v324 - (-(v326 - v328 * v322) - v329 * v323));
    v332 = -(v327 + v328 * v323 + v329 * v322 - v330 * v321);
    v333 = -(v325 + v328 * v321 + v330 * v323 - v329 * v324);
    v334 = v321 * -2.0;
    v335 = -(v321 * (v321 * -2.0));
    v336 = 1.0 - (v335 - v322 * (v322 * -2.0));
    v337 = v324 * -2.0;
    v338 = -(v321 * (v324 * -2.0));
    v339 = v322 * -2.0 * v323;
    v340 = v338 - v339;
    v341 = -(v322 * (v324 * -2.0));
    v342 = v323 * v334;
    v343 = v323 * v334 - v322 * (v324 * -2.0);
    v344 = v339 + v338;
    v345 = v324 * -2.0 * v324 + 1.0;
    v346 = v345 - -(v322 * (v322 * -2.0));
    v347 = -(v322 * v334);
    v348 = v323 * v337;
    v582.n128_f64[0] = v336;
    v582.n128_f64[1] = v344;
    v585 = v340;
    v586 = v346;
    v589 = v343;
    v590 = v347 - v348;
    v583 = v341 - v342;
    v587 = v348 + v347;
    v591 = v345 - v335;
    v584 = 0;
    v588 = 0;
    v592 = 0;
    v593 = v332;
    v594 = v331;
    v595 = v333;
    v596 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)__p, v582.n128_f64, (double *)v293[8] + 15);
    v582 = 0uLL;
    v349 = *(std::__shared_weak_count **)(v320 + 8);
    v350.n128_u64[0] = 0;
    v350.n128_u64[1] = v320;
    if (v349)
      v351 = *(double *)(v320 + 72);
    else
      v351 = 0.0;
    v578 = v350;
    v582 = v350;
    v583 = 0.0;
    v584 = v349;
    v586 = v351;
    LOWORD(v585) = 1;
    v573 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), v598);
    **(_OWORD **)&v351 = v573;
    v569 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v599), v600);
    *(float32x4_t *)(*(_QWORD *)&v351 + 16) = v569;
    v565 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v601), v602);
    *(float32x4_t *)(*(_QWORD *)&v351 + 32) = v565;
    v562 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v603), v604);
    *(float32x4_t *)(*(_QWORD *)&v351 + 48) = v562;
    *(float *)(*(_QWORD *)&v351 + 64) = *((float *)a2 + 345) * (*v293)[6];
    if ((int)v318 >= 0x17)
      v352 = 23;
    else
      v352 = (int)v318;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v614, *(_QWORD *)(*(_QWORD *)v317 + 24), 0x5Cu, v352, 2u, 0);
    v353 = (uint16x4_t)v614;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v614, *(_QWORD *)(*(_QWORD *)v317 + 24), 0xF0u, v352, 2u, 0);
    v354 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v355 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v353)), v354);
    v356 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v614)), v354);
    v357 = *(_QWORD **)(*((_QWORD *)v319 + 8) + 32);
    v358 = v357[1];
    if (v358)
      v359 = v357[9];
    else
      v359 = 0;
    *(float32x4_t *)v359 = v355;
    *(float32x4_t *)(v359 + 16) = v356;
    v360 = *v293;
    *(float *)(v359 + 32) = (*v293)[1];
    if (*((_BYTE *)v293 + 104))
    {
      v361 = **((_QWORD **)v293[8] + 1);
      *(_QWORD *)(v361 + 64) = (2 * *(int *)v360) | 1;
      *(_BYTE *)(v361 + 264) = 0;
      v362 = v578;
      if (v358)
        goto LABEL_296;
    }
    else
    {
      *(_QWORD *)(v359 + 36) = 0x3F66666600000001;
      v456 = *((_QWORD *)v293[10] + 8);
      v457 = *(_QWORD **)(v456 + 16);
      v458 = v457[1];
      v459 = (float32x4_t *)v457[9];
      *v459 = v573;
      v459[1] = v569;
      v459[2] = v565;
      v459[3] = v562;
      v459[4].f32[0] = *((float *)a2 + 345) * v360[6];
      v460 = *(_QWORD **)(v456 + 32);
      v461 = v460[1];
      v462 = (float32x4_t *)v460[9];
      *v462 = v355;
      v462[1] = v356;
      v462[2].f32[0] = v360[1];
      v462[2].i32[1] = 0;
      v462[2].i32[2] = 1063675494;
      if (v460[8] > v461)
        v461 = v460[8];
      v460[7] = 0;
      v460[8] = v461;
      v463 = v457[8];
      if (v463 <= v458)
        v463 = v458;
      v457[7] = 0;
      v457[8] = v463;
      v464 = **((_QWORD **)v293[8] + 1);
      v465 = *(int *)v360;
      *(_QWORD *)(v464 + 64) = v465;
      v466 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v293[1] + 38) - *((_QWORD *)v293[1] + 37)) >> 3);
      v467 = *((unsigned __int8 *)a2 + 1288) + 2 * (v466 - v465);
      *(_DWORD *)(v464 + 56) = v467 + 1;
      *(_QWORD *)(v464 + 192) = v466 + v465;
      *(_DWORD *)(v464 + 184) = v467;
      v362 = v578;
      if (v358)
      {
LABEL_296:
        if (v357[8] > v358)
          v358 = v357[8];
        v357[7] = 0;
        v357[8] = v358;
      }
    }
    if (v349)
    {
      v363 = v362.n128_u64[1];
      if (v362.n128_u64[0] && *(_BYTE *)(v362.n128_u64[1] + 17) != 2)
        (*(void (**)(__n128))(*(_QWORD *)v362.n128_u64[0] + 64))(v362);
      v364 = *(std::__shared_weak_count **)(v363 + 64);
      if (v364 <= v349)
        v364 = v349;
      *(_QWORD *)(v363 + 56) = 0;
      *(_QWORD *)(v363 + 64) = v364;
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v605);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v609);
  altitude::ManeuverDrawRegion::cull(*((float64_t ***)v6 + 25), a2, (karo::graphics::Viewport *)i, v365);
  if (!*((_BYTE *)v6 + 28))
    return;
  v366 = (double **)*((_QWORD *)v6 + 27);
  v367 = *v366;
  v368 = *((_QWORD *)*v366 + 19);
  v369 = *((_QWORD *)*v366 + 20);
  if (v368 == v369)
  {
    if (!((uint64_t)(*((_QWORD *)v367 + 23) - *((_QWORD *)v367 + 22)) >> 3))
    {
LABEL_316:
      v373 = (int *)v366[5];
      if (v373)
        goto LABEL_501;
    }
  }
  else
  {
    v370 = 0;
    v371 = *((_QWORD *)v367 + 22);
    v372 = (*((_QWORD *)v367 + 23) - v371) >> 3;
    while (v372 != v370 && *(_QWORD *)v368 == *(_QWORD *)(v371 + 8 * v370) && !*(_BYTE *)(*(_QWORD *)v368 + 74))
    {
      ++v370;
      v368 += 8;
      if (v368 == v369)
      {
        if (v372 == v370)
          goto LABEL_316;
        break;
      }
    }
  }
  v366[3] = v366[2];
  v374 = (int *)v366[5];
  v366[5] = 0;
  if (v374)
  {
    (*(void (**)(int *))(*(_QWORD *)v374 + 8))(v374);
    v367 = *v366;
  }
  __p[0] = 0;
  __p[1] = 0;
  v598.f64[0] = 0.0;
  v375 = *((_QWORD *)v367 + 5);
  if (!objc_msgSend(*(id *)(v375 + 32), "trafficColorsCount"))
    goto LABEL_439;
  v376 = *(void **)(v375 + 32);
  v377 = objc_msgSend(v376, "trafficColorOffsets");
  v378 = objc_msgSend(*(id *)(v375 + 32), "trafficColors");
  if (!v376)
    goto LABEL_439;
  v379.i64[0] = (uint64_t)v376;
  v379.i64[1] = v378;
  v579 = v379;
  v380 = objc_msgSend(v376, "trafficColorsCount");
  v383 = (uint64_t *)*((_QWORD *)v367 + 19);
  if (v383 == *((uint64_t **)v367 + 20))
    goto LABEL_439;
  v384 = 0;
  v381.i64[0] = v380;
  v382.i64[0] = 1;
  v385 = (int8x16_t)vdupq_lane_s64(vcgtq_u64(v381, v382).i64[0], 0);
  v386 = v380 > 1;
  if (v380 <= 1)
    v387 = 0;
  else
    v387 = v377;
  v570 = v387;
  v388 = vandq_s8(v579, v385);
  v389 = v579;
  while (2)
  {
    v574 = (void *)v388.i64[0];
    v580 = v384;
    v563 = v388;
LABEL_328:
    v384 = v386;
    if (!v389.i64[0] && !v580)
      goto LABEL_429;
    if (*(_DWORD *)(v389.i64[1] + 4 * v580) > 2u)
      goto LABEL_411;
    v557 = v389.i64[1];
    if (v574 || v386)
      v391 = *(_DWORD *)(v570 + 4 * v386);
    else
      v391 = -1;
    v392 = *v383;
    v393 = *((_QWORD *)v367 + 7);
    v559 = *(_DWORD *)(v377 + 4 * v580);
    v394 = (double)v559;
    if (*(double *)(v393 + 48 * (*(_DWORD *)(*v383 + 48) - 1) + 8) < (double)v559)
    {
      v395 = v383 + 1;
      do
      {
        if (v395 == *((uint64_t **)v367 + 20))
          goto LABEL_429;
        v396 = *v395++;
        v392 = v396;
      }
      while (*(double *)(v393 + 48 * (*(_DWORD *)(v396 + 48) - 1) + 8) < v394);
      v383 = v395 - 1;
    }
    v397 = *(double *)(v393 + 48 * *(unsigned int *)(v392 + 40) + 8);
    v398 = (double)v391;
    if (v397 >= (double)v391)
      goto LABEL_411;
    v555 = v391;
    v399 = 0;
    v553 = 0xAAAAAAAAAAAAAAABLL * (v366[3] - v366[2]);
    v566 = v386;
LABEL_343:
    v400 = v397;
    if (v397 >= v394)
    {
      v401 = *((_QWORD *)v367 + 10)
           + 24
           * (((*(_QWORD *)(v392 + 48) + ~*(_QWORD *)(v392 + 40))
                           * v399
                           / (unint64_t)(*(_QWORD *)(v392 + 80) - 1))
            + *(_QWORD *)(v392 + 40));
      v403 = (int *)v366[3];
      v402 = (int *)v366[4];
      if (v403 >= v402)
      {
        v406 = (int *)v366[2];
        v407 = 0xAAAAAAAAAAAAAAABLL * (((char *)v403 - (char *)v406) >> 3) + 1;
        if (v407 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_509;
        v408 = 0xAAAAAAAAAAAAAAABLL * (((char *)v402 - (char *)v406) >> 3);
        if (2 * v408 > v407)
          v407 = 2 * v408;
        if (v408 >= 0x555555555555555)
          v409 = 0xAAAAAAAAAAAAAAALL;
        else
          v409 = v407;
        if (v409)
        {
          if (v409 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_510;
          v410 = (char *)operator new(24 * v409);
        }
        else
        {
          v410 = 0;
        }
        v411 = *(_OWORD *)v401;
        v412 = &v410[8 * (((char *)v403 - (char *)v406) >> 3)];
        *((_QWORD *)v412 + 2) = *(_QWORD *)(v401 + 16);
        *(_OWORD *)v412 = v411;
        v413 = (int *)v412;
        if (v403 != v406)
        {
          do
          {
            v414 = *(_OWORD *)(v403 - 6);
            *((_QWORD *)v413 - 1) = *((_QWORD *)v403 - 1);
            *(_OWORD *)(v413 - 6) = v414;
            v413 -= 6;
            v403 -= 6;
          }
          while (v403 != v406);
          v403 = (int *)v366[2];
        }
        v405 = (int *)(v412 + 24);
        v366[2] = (double *)v413;
        v366[3] = (double *)(v412 + 24);
        v366[4] = (double *)&v410[24 * v409];
        v384 = v566;
        if (v403)
          operator delete(v403);
      }
      else
      {
        v404 = *(_OWORD *)v401;
        *((_QWORD *)v403 + 2) = *(_QWORD *)(v401 + 16);
        *(_OWORD *)v403 = v404;
        v405 = v403 + 6;
      }
      v366[3] = (double *)v405;
    }
    ++v399;
    v415 = *(_QWORD *)(v392 + 80);
    if (v415 != v399)
    {
LABEL_365:
      v416 = *(_QWORD *)(v392 + 40);
      v417 = *(_QWORD *)(v392 + 48) + ~v416;
      v418 = v415 - 1;
      v397 = *(double *)(*((_QWORD *)v367 + 7) + 48 * ((v417 * v399 / v418) + v416) + 8);
      if (v400 < v394 && v397 >= v394)
        altitude::RouteTrafficDrawRegion::point(v366, v417 * v399 / v418 + v416, v417 * (v399 - 1) / v418 + v416, v394);
      if (v397 >= v398)
      {
        if (!v399)
        {
          v388 = v563;
          goto LABEL_411;
        }
        v419 = *(_QWORD *)(v392 + 40);
        altitude::RouteTrafficDrawRegion::point(v366, (*(_QWORD *)(v392 + 48) + ~v419) * v399 / (unint64_t)(*(_QWORD *)(v392 + 80) - 1) + v419, (*(_QWORD *)(v392 + 48) + ~v419) * (v399 - 1) / (unint64_t)(*(_QWORD *)(v392 + 80) - 1) + v419, v398);
        v551 = 0;
LABEL_372:
        v421 = (int *)v366[2];
        v420 = (int *)v366[3];
        v422 = *(unsigned int *)(v557 + 4 * v580);
        {
          v448 = operator new();
          *(_QWORD *)(v448 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v448 + 24) = "VectorKitLabels";
          *(_OWORD *)(v448 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v448 = &off_1E42B5668;
          *(_QWORD *)(v448 + 8) = "VectorKitLabels";
          *(_OWORD *)(v448 + 72) = 0u;
          *(_OWORD *)(v448 + 88) = 0u;
          *(_OWORD *)(v448 + 104) = 0u;
          *(_OWORD *)(v448 + 120) = 0u;
          *(_OWORD *)(v448 + 136) = 0u;
          *(_OWORD *)(v448 + 152) = 0u;
          *(_OWORD *)(v448 + 168) = 0u;
          *(_OWORD *)(v448 + 184) = 0u;
          *(_OWORD *)(v448 + 200) = 0u;
          *(_OWORD *)(v448 + 216) = 0u;
          *(_OWORD *)(v448 + 232) = 0u;
          *(_QWORD *)(v448 + 248) = 0;
          *(_OWORD *)(v448 + 56) = 0u;
          v449 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v448 + 56), 0);
          if ((_DWORD)v449)
            geo::read_write_lock::logFailure(v449, (uint64_t)"initialization", v450);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v448 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v448 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v448;
          v384 = v566;
        }
        v424 = 0xAAAAAAAAAAAAAAABLL * (((char *)v420 - (char *)v421) >> 3);
        v425 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 136, 8);
        *(_OWORD *)v425 = 0u;
        *(_OWORD *)(v425 + 16) = 0u;
        *(_OWORD *)(v425 + 32) = 0u;
        *(_OWORD *)(v425 + 48) = 0u;
        *(_OWORD *)(v425 + 64) = 0u;
        *(_OWORD *)(v425 + 80) = 0u;
        *(_DWORD *)(v425 + 88) = -1;
        *(_QWORD *)(v425 + 96) = 0x7FEFFFFFFFFFFFFFLL;
        *(_OWORD *)(v425 + 120) = 0u;
        *(_OWORD *)(v425 + 104) = 0u;
        *(_QWORD *)(v425 + 48) = v424 - v553;
        *(_QWORD *)(v425 + 56) = v553;
        *(float *)(v425 + 132) = (float)(v555 - v559);
        v427 = (uint64_t *)__p[0];
        v426 = (uint64_t *)__p[1];
        v428 = (uint64_t *)__p[0];
        *(_DWORD *)(v425 + 80) = 6;
        if (v428 != v426)
        {
          while (1)
          {
            v429 = *v428;
            if (*(_QWORD *)(*v428 + 280) == v422)
              break;
            if (++v428 == v426)
              goto LABEL_376;
          }
LABEL_402:
          v444 = **(_QWORD **)(v429 + 248);
          v582.n128_u64[0] = v425;
          v445 = *(uint64_t **)(v444 + 184);
          if ((unint64_t)v445 >= *(_QWORD *)(v444 + 192))
          {
            v446 = std::vector<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,geo::StdAllocator<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>>(v444 + 176, (uint64_t *)&v582);
            v425 = v582.n128_u64[0];
            v388 = v563;
          }
          else
          {
            if (v445)
            {
              *v445 = v425;
              v425 = 0;
            }
            v388 = v563;
            v446 = v445 + 1;
          }
          *(_QWORD *)(v444 + 184) = v446;
          v582.n128_u64[0] = 0;
          if (v425)
          {
            {
              v452 = operator new();
              *(_QWORD *)(v452 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v452 + 24) = "VectorKitLabels";
              *(_OWORD *)(v452 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v452 = &off_1E42B5668;
              *(_QWORD *)(v452 + 8) = "VectorKitLabels";
              *(_OWORD *)(v452 + 72) = 0u;
              *(_OWORD *)(v452 + 88) = 0u;
              *(_OWORD *)(v452 + 104) = 0u;
              *(_OWORD *)(v452 + 120) = 0u;
              *(_OWORD *)(v452 + 136) = 0u;
              *(_OWORD *)(v452 + 152) = 0u;
              *(_OWORD *)(v452 + 168) = 0u;
              *(_OWORD *)(v452 + 184) = 0u;
              *(_OWORD *)(v452 + 200) = 0u;
              *(_OWORD *)(v452 + 216) = 0u;
              *(_OWORD *)(v452 + 232) = 0u;
              *(_QWORD *)(v452 + 248) = 0;
              *(_OWORD *)(v452 + 56) = 0u;
              v453 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v452 + 56), 0);
              if ((_DWORD)v453)
                geo::read_write_lock::logFailure(v453, (uint64_t)"initialization", v454);
              v455 = malloc_create_zone(0, 0);
              *(_QWORD *)(v452 + 48) = v455;
              malloc_set_zone_name(v455, "VectorKitLabels");
              *(_QWORD *)(v452 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v452;
              v384 = v566;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v425, 136);
            v388 = v563;
          }
          if ((v551 & 1) != 0)
            goto LABEL_429;
LABEL_411:
          if (v574 || (v386 = 0, v389 = v388, v580 = v384, v377 = v570, v384))
          {
            v386 = v384 + 1;
            v390 = objc_msgSend(v574, "trafficColorsCount");
            v388 = v563;
            v389 = v563;
            v580 = v384;
            v377 = v570;
            if (v384 + 1 >= v390)
            {
              v386 = 0;
              v389 = v563;
              v377 = v570;
              v388 = 0uLL;
              v570 = 0;
              continue;
            }
          }
          goto LABEL_328;
        }
LABEL_376:
        v429 = operator new();
        v430 = (md::realistic::RouteRenderLayer *)v366[1];
        md::realistic::RouteRenderLayer::loadStylesheet(v430);
        v582 = 0uLL;
        md::FlyoverTrafficBatch::FlyoverTrafficBatch(v429, (_QWORD *)v430 + 27, &v582, v422, v422, 1);
        if ((unint64_t)v426 < *(_QWORD *)&v598.f64[0])
        {
          *v426 = v429;
          v431 = v426 + 1;
LABEL_401:
          __p[1] = v431;
          v384 = v566;
          goto LABEL_402;
        }
        v432 = (char *)v426 - (char *)v427;
        v433 = v426 - v427;
        v434 = v433 + 1;
        if (!((unint64_t)(v433 + 1) >> 61))
        {
          v435 = *(_QWORD *)&v598.f64[0] - (_QWORD)v427;
          if ((uint64_t)(*(_QWORD *)&v598.f64[0] - (_QWORD)v427) >> 2 > v434)
            v434 = v435 >> 2;
          if ((unint64_t)v435 >= 0x7FFFFFFFFFFFFFF8)
            v434 = 0x1FFFFFFFFFFFFFFFLL;
          v581 = v434;
          if (!v434)
          {
            v436 = 0;
LABEL_389:
            v437 = (uint64_t *)&v436[8 * v433];
            *v437 = v429;
            v431 = v437 + 1;
            if (v427 != v426)
            {
              if ((unint64_t)(v432 - 8) < 0x58)
                goto LABEL_514;
              if ((unint64_t)((char *)v427 - v436) < 0x20)
                goto LABEL_514;
              v438 = ((unint64_t)(v432 - 8) >> 3) + 1;
              v439 = &v436[8 * v433 - 16];
              v440 = v426 - 2;
              v441 = v438 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v442 = *(_OWORD *)v440;
                *(v439 - 1) = *((_OWORD *)v440 - 1);
                *v439 = v442;
                v439 -= 2;
                v440 -= 4;
                v441 -= 4;
              }
              while (v441);
              v437 -= v438 & 0x3FFFFFFFFFFFFFFCLL;
              v426 -= v438 & 0x3FFFFFFFFFFFFFFCLL;
              if (v438 != (v438 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_514:
                do
                {
                  v443 = *--v426;
                  *--v437 = v443;
                }
                while (v426 != v427);
                v427 = (uint64_t *)__p[0];
              }
            }
            __p[0] = v437;
            __p[1] = v431;
            *(_QWORD *)&v598.f64[0] = &v436[8 * v581];
            if (v427)
              operator delete(v427);
            goto LABEL_401;
          }
          if (!(v434 >> 61))
          {
            v436 = operator new(8 * v434);
            goto LABEL_389;
          }
LABEL_510:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
LABEL_509:
        abort();
      }
      goto LABEL_343;
    }
    break;
  }
  if (++v383 != *((uint64_t **)v367 + 20))
  {
    v399 = 0;
    v392 = *v383;
    v415 = *(_QWORD *)(*v383 + 80);
    goto LABEL_365;
  }
  if (v399)
  {
    v551 = 1;
    goto LABEL_372;
  }
LABEL_429:
  v468 = (char *)__p[0];
  v469 = (char *)__p[1];
  for (i = v543; v468 != v469; v468 += 8)
  {
    v470 = *(_QWORD *)(*(_QWORD *)v468 + 248);
    v471 = *(_QWORD *)(*(_QWORD *)v468 + 256);
    while (v470 != v471)
    {
      v472 = *(uint64_t **)(*(_QWORD *)v470 + 176);
      v473 = *(uint64_t **)(*(_QWORD *)v470 + 184);
      if (v472 != v473)
      {
        v474 = (int *)v366[2];
        do
        {
          v475 = *v472++;
          *(_QWORD *)(v475 + 56) = &v474[6 * *(_QWORD *)(v475 + 56)];
        }
        while (v472 != v473);
      }
      v470 += 8;
    }
  }
LABEL_439:
  v476 = operator new();
  v477 = md::FlyoverTrafficLayer::FlyoverTrafficLayer(v476, (uint64_t)__p);
  v478 = (int *)v366[5];
  v366[5] = (double *)v477;
  if (v478)
  {
    (*(void (**)(int *))(*(_QWORD *)v478 + 8))(v478);
    v477 = (uint64_t)v366[5];
  }
  *(double *)(v477 + 56) = v366[1][17];
  v479 = (uint64_t)v366[5];
  v480 = *v366;
  *(double *)(v479 + 208) = (*v366)[16];
  *(double *)(v479 + 216) = v480[17];
  *(double *)(v479 + 224) = v480[18];
  v481 = *(uint64_t **)(v479 + 8);
  v482 = *(uint64_t **)(v479 + 16);
  if (v481 != v482)
  {
    do
    {
      v483 = *v481;
      if (!*(_QWORD *)(*v481 + 48))
      {
        v484 = (int *)v366[1];
        v486 = *((_QWORD *)v484 + 9);
        v485 = (std::__shared_weak_count *)*((_QWORD *)v484 + 10);
        if (v485)
        {
          v487 = (unint64_t *)&v485->__shared_owners_;
          do
            v488 = __ldxr(v487);
          while (__stxr(v488 + 1, v487));
        }
        v489 = *((_QWORD *)v484 + 24);
        v582.n128_u64[0] = *((_QWORD *)v484 + 23);
        v582.n128_u64[1] = v489;
        if (v489)
        {
          v490 = (unint64_t *)(v489 + 8);
          do
            v491 = __ldxr(v490);
          while (__stxr(v491 + 1, v490));
        }
        v492 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v492->__shared_owners_ = 0;
        v492->__shared_weak_owners_ = 0;
        v492->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1558;
        *(double *)&v493 = COERCE_DOUBLE(ggl::BufferData::BufferData((uint64_t)&v492[1], qword_1EE560AC0, 2, 1, 6, 1));
        v492[9].__shared_owners_ = (uint64_t)ggl::FlyoverTraffic::Displacement::reflection(void)::reflection;
        v492[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8FD0;
        v609 = *(double *)&v493;
        v610 = v492;
        v494 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v494->__shared_owners_ = 0;
        v494->__shared_weak_owners_ = 0;
        v494->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E15C8;
        v495 = ggl::BufferData::BufferData((uint64_t)&v494[1], qword_1EE560B00, 2, 1, 6, 1);
        v494[9].__shared_owners_ = (uint64_t)ggl::FlyoverTraffic::Pattern::reflection(void)::reflection;
        v494[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9030;
        v605 = v495;
        v606 = v494;
        v496 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v496->__shared_owners_ = 0;
        v496->__shared_weak_owners_ = 0;
        v496->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1590;
        v497 = ggl::BufferData::BufferData((uint64_t)&v496[1], qword_1EE560B80, 2, 1, 6, 1);
        v496[9].__shared_owners_ = (uint64_t)ggl::FlyoverTraffic::Style::reflection(void)::reflection;
        v496[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8FF0;
        v614 = v497;
        v615 = v496;
        v498 = (std::__shared_weak_count *)*((_QWORD *)v484 + 26);
        v613[0] = *((_QWORD *)v484 + 25);
        v613[1] = (uint64_t)v498;
        if (v498)
        {
          v499 = (unint64_t *)&v498->__shared_owners_;
          do
            v500 = __ldxr(v499);
          while (__stxr(v500 + 1, v499));
        }
        v501 = (_QWORD *)operator new();
        *(_QWORD *)(v483 + 48) = ggl::FlyoverTraffic::DefaultPipelineSetup::DefaultPipelineSetup(v501, v486, v485, (uint64_t *)&v582, (uint64_t *)&v609, &v605, &v614, v613);
        if (v498)
        {
          v502 = (unint64_t *)&v498->__shared_owners_;
          do
            v503 = __ldaxr(v502);
          while (__stlxr(v503 - 1, v502));
          if (!v503)
          {
            ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
            std::__shared_weak_count::__release_weak(v498);
          }
        }
        v504 = v615;
        if (v615)
        {
          v505 = (unint64_t *)&v615->__shared_owners_;
          do
            v506 = __ldaxr(v505);
          while (__stlxr(v506 - 1, v505));
          if (!v506)
          {
            ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
            std::__shared_weak_count::__release_weak(v504);
          }
        }
        v507 = v606;
        if (v606)
        {
          v508 = (unint64_t *)&v606->__shared_owners_;
          do
            v509 = __ldaxr(v508);
          while (__stlxr(v509 - 1, v508));
          if (!v509)
          {
            ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
            std::__shared_weak_count::__release_weak(v507);
          }
        }
        v510 = v610;
        if (v610)
        {
          v511 = (unint64_t *)&v610->__shared_owners_;
          do
            v512 = __ldaxr(v511);
          while (__stlxr(v512 - 1, v511));
          if (!v512)
          {
            ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
            std::__shared_weak_count::__release_weak(v510);
          }
        }
        v513 = (std::__shared_weak_count *)v582.n128_u64[1];
        if (v582.n128_u64[1])
        {
          v514 = (unint64_t *)(v582.n128_u64[1] + 8);
          do
            v515 = __ldaxr(v514);
          while (__stlxr(v515 - 1, v514));
          if (!v515)
          {
            ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
            std::__shared_weak_count::__release_weak(v513);
          }
        }
        if (v485)
        {
          v516 = (unint64_t *)&v485->__shared_owners_;
          do
            v517 = __ldaxr(v516);
          while (__stlxr(v517 - 1, v516));
          if (!v517)
          {
            ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
            std::__shared_weak_count::__release_weak(v485);
          }
        }
      }
      ++v481;
    }
    while (v481 != v482);
    v479 = (uint64_t)v366[5];
    v518 = *(_QWORD *)(v479 + 8);
    v519 = *(_QWORD *)(v479 + 16);
    if (v518 == v519)
    {
      i = v543;
    }
    else
    {
      i = v543;
      do
      {
        v520 = *(_QWORD ***)(*(_QWORD *)v518 + 248);
        v521 = *(_QWORD ***)(*(_QWORD *)v518 + 256);
        while (v520 != v521)
        {
          v522 = *v520++;
          md::Ribbons::RibbonSection<md::FlyoverTrafficDrawables>::computeMesh(v522, (float64x2_t *)v479, (uint64_t)v543);
        }
        v518 += 8;
      }
      while (v518 != v519);
      v479 = (uint64_t)v366[5];
    }
  }
  md::FlyoverTrafficLayer::rewriteBoundsAttributes(v479, i);
  v373 = (int *)v366[5];
  v523 = (char *)*((_QWORD *)v373 + 1);
  v524 = (char *)*((_QWORD *)v373 + 2);
  if (v523 != v524)
  {
    v525 = v524 - v523 - 8;
    if (v525 <= 7)
    {
      do
      {
LABEL_497:
        v530 = *(_QWORD *)v523;
        v523 += 8;
        *(_QWORD *)(v530 + 64) = 6;
      }
      while (v523 != v524);
    }
    else
    {
      v526 = (v525 >> 3) + 1;
      v527 = (uint64_t *)(v523 + 8);
      v528 = v526 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v529 = *v527;
        *(_QWORD *)(*(v527 - 1) + 64) = 6;
        *(_QWORD *)(v529 + 64) = 6;
        v527 += 2;
        v528 -= 2;
      }
      while (v528);
      if (v526 != (v526 & 0x3FFFFFFFFFFFFFFELL))
      {
        v523 += 8 * (v526 & 0x3FFFFFFFFFFFFFFELL);
        goto LABEL_497;
      }
    }
  }
  if (__p[0])
  {
    operator delete(__p[0]);
    v373 = (int *)v366[5];
  }
  v367 = *v366;
LABEL_501:
  __p[0] = (void *)1;
  HIDWORD(__p[0]) = *((_DWORD *)v367 + 6);
  md::FlyoverTrafficLayer::willBeDrawn(*((uint64_t **)v373 + 1), *((uint64_t **)v373 + 2), (uint64_t)a2, (uint64_t)__p);
  v531 = (int *)v366[5];
  v532 = (char *)*((_QWORD *)v531 + 1);
  v533 = (char *)*((_QWORD *)v531 + 2);
  if (v532 != v533)
  {
    v534 = 2 * *(int *)*v366;
    v535 = v533 - v532 - 8;
    if (v535 < 8)
    {
      do
      {
LABEL_507:
        v540 = *(_QWORD *)v532;
        v532 += 8;
        *(_QWORD *)(v540 + 64) = v534;
      }
      while (v532 != v533);
    }
    else
    {
      v536 = (v535 >> 3) + 1;
      v537 = (uint64_t *)(v532 + 8);
      v538 = v536 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v539 = *v537;
        *(_QWORD *)(*(v537 - 1) + 64) = v534;
        *(_QWORD *)(v539 + 64) = v534;
        v537 += 2;
        v538 -= 2;
      }
      while (v538);
      if (v536 != (v536 & 0x3FFFFFFFFFFFFFFELL))
      {
        v532 += 8 * (v536 & 0x3FFFFFFFFFFFFFFELL);
        goto LABEL_507;
      }
    }
  }
}

void sub_19F78B6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a72);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v72 - 224);
  _Unwind_Resume(a1);
}

void sub_19F78B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;

  v57 = *(std::__shared_weak_count **)(v55 - 200);
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *(std::__shared_weak_count **)(v55 - 216);
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_19F78B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;

  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = *(std::__shared_weak_count **)(v42 - 160);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(std::__shared_weak_count **)(v42 - 216);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (a40)
  {
    v55 = (unint64_t *)&a40->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
      std::__shared_weak_count::__release_weak(a40);
    }
  }
  if (v40)
  {
    v57 = (unint64_t *)&v40->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverMorph::MorphMesh::~MorphMesh(ggl::FlyoverMorph::MorphMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverMorph::MorphMesh::~MorphMesh(ggl::FlyoverMorph::MorphMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverMorph::MorphMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverMorph::MorphMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverMorph::MorphPipelineState::~MorphPipelineState(ggl::FlyoverMorph::MorphPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverMorph::MorphPipelineState::MorphPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::FlyoverMorphShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
            unk_1EE5761A8 = 1;
          }
          ggl::FlyoverMorph::MorphPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE575E48 = &ggl::FlyoverMorph::pipelineDataMorphPipelineDeviceStructs(void)::ref;
          qword_1EE575E50 = 0;
          if ((v23 & 1) == 0
          {
            ggl::FlyoverMorph::pipelineDataMorphPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE575E80 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE575E88 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE575E90 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE575E98 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1EE575EA0 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
          }
          qword_1EE575E58 = (uint64_t)&ggl::FlyoverMorph::pipelineDataMorphPipelineConstantStructs(void)::ref;
          unk_1EE575E60 = xmmword_19FFB4850;
        }
      }
      ggl::FlyoverMorph::MorphPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMorph::MorphPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMorphShader::typedReflection(v18);
      qword_1EE587AD0 = (uint64_t)&ggl::FlyoverMorphShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::FlyoverMorph::pipelineStateMorphPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE587B30 = 0;
        qword_1EE587B38 = (uint64_t)"";
        dword_1EE587B40 = 0;
        qword_1EE587B48 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineAttributeBinding_0(void)::attr;
        unk_1EE587B50 = 4;
      }
      qword_1EE587AD8 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineAttributeStructBinding(void)::attr;
      unk_1EE587AE0 = 1;
      qword_1EE587AE8 = 0;
      unk_1EE587AF0 = 3;
      qword_1EE587AF8 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineDeviceStructBinding(void)::ref;
      unk_1EE587B00 = 0;
      if ((v21 & 1) == 0
      {
        ggl::FlyoverMorph::pipelineStateMorphPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE587B70 = 0;
        qword_1EE587B78 = (uint64_t)"sharedConstants";
        dword_1EE587B80 = 3;
        qword_1EE587B88 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE587B90 = xmmword_19FFB3030;
        qword_1EE587BA0 = 1;
        unk_1EE587BA8 = "transform";
        dword_1EE587BB0 = 3;
        qword_1EE587BB8 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantTransformBinding(void)::reflection;
        unk_1EE587BC0 = vdupq_n_s64(2uLL);
        qword_1EE587BD0 = 2;
        unk_1EE587BD8 = "clip";
        dword_1EE587BE0 = 3;
        qword_1EE587BE8 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE587BF0 = xmmword_19FFB3040;
        qword_1EE587C00 = 3;
        unk_1EE587C08 = "material";
        dword_1EE587C10 = 3;
        qword_1EE587C18 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE587C20 = xmmword_19FFB3050;
        qword_1EE587C30 = 4;
        unk_1EE587C38 = "texcoords";
        dword_1EE587C40 = 3;
        qword_1EE587C48 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantTexcoordsBinding(void)::reflection;
        *(_OWORD *)algn_1EE587C50 = xmmword_19FFB4860;
        qword_1EE587C60 = 5;
        unk_1EE587C68 = "morph";
        dword_1EE587C70 = 3;
        qword_1EE587C78 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantMorphBinding(void)::reflection;
        unk_1EE587C80 = 3;
      }
      qword_1EE587B08 = (uint64_t)&ggl::FlyoverMorph::pipelineStateMorphPipelineConstantStructBinding(void)::ref;
      unk_1EE587B10 = 6;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverMorph::MorphPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42B6110;
  return a1;
}

void ggl::FlyoverMorph::MorphPipelineSetup::~MorphPipelineSetup(ggl::FlyoverMorph::MorphPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverMorph::MorphPipelineSetup::constantDataIsEnabled(ggl::FlyoverMorph::MorphPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::FlyoverMorph::MorphPipelineSetup::textureIsEnabled(ggl::FlyoverMorph::MorphPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void sub_19F78C634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  operator delete(v12);

  _Unwind_Resume(a1);
}

void sub_19F78CBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a30);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)&a24);

  _Unwind_Resume(a1);
}

void sub_19F78D7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;

  if (a24 < 0)
    operator delete(__p);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a30);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v35 - 168);
  v37 = *(_QWORD *)(v35 - 152);
  if (v37)
  {
    *(_QWORD *)(v35 - 144) = v37;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v35 - 128) + 40))(*(_QWORD *)(v35 - 128), v37, *(_QWORD *)(v35 - 136) - v37);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v35 - 120));

  _Unwind_Resume(a1);
}

void sub_19F78E00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,pthread_rwlock_t *a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  MEMORY[0x1A1AF4E00](v34, 0x1030C406D3438E8);
  geo::write_lock_guard::~write_lock_guard(&a25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_19F78E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;

  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a28);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)&a20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_19F78EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)va2);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_19F78F00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;

  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a28);
  if (a16 < 0)
    operator delete(__p);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)&a20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_19F78F3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;
  uint64_t v21;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)va, v7);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)va3);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_19F78F4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKInternalIconManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,std::__map_value_compare<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,NSStringMapComparison,true>,geo::StdAllocator<std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,std::__map_value_compare<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,NSStringMapComparison,true>,geo::StdAllocator<std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,std::__map_value_compare<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,NSStringMapComparison,true>,geo::StdAllocator<std::__value_type<geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(_QWORD *)(a2 + 32) = &off_1E42B5490;

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 72);
  }
  return result;
}

void grl::IconRequestOptions::~IconRequestOptions(grl::IconRequestOptions *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v4, *((_QWORD *)this + 4) - v4);
  }
}

BOOL NSStringMapComparison::operator()(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;
  _BOOL8 v7;

  if (!*(_QWORD *)(a2 + 8))
    return 0;
  v4 = *(id *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(id *)(a1 + 8);
    v7 = objc_msgSend(v6, "compare:", v5) == -1;

  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_19F78F870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::shared_ptr[abi:nn180100]<gss::ClientStyleState<gss::PropertyID>,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8018;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (a2)
  {
    v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_19F78F988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::default_delete<gss::ClientStyleState<gss::PropertyID>>::operator()[abi:nn180100](v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<gss::ClientStyleState<gss::PropertyID>>::operator()[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  std::__shared_weak_count *v6;

  if (result)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 246) && *(_QWORD *)(result + 232))
    {
      v2 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(v1 + 232), *(unsigned __int16 *)(v1 + 244));
      *(_QWORD *)(v1 + 232) = 0;
    }
    if (!*(_BYTE *)(v1 + 230) && *(_QWORD *)(v1 + 216))
    {
      v3 = gss::Allocator::instance((gss::Allocator *)result);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v1 + 216), *(unsigned __int16 *)(v1 + 228));
      *(_QWORD *)(v1 + 216) = 0;
    }
    v4 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(v1 + 16));
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"destruction", v5);
    v6 = *(std::__shared_weak_count **)(v1 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<gss::ClientStyleState<gss::PropertyID> *,std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::__shared_ptr_default_delete<gss::ClientStyleState<gss::PropertyID>,gss::ClientStyleState<gss::PropertyID>>,std::allocator<gss::ClientStyleState<gss::PropertyID>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_10PropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  geo::read_write_lock *v4;
  const char *v5;
  gss::Allocator *v6;
  std::__assoc_sub_state *state;
  std::__assoc_sub_state *v8;
  std::__assoc_sub_state *v9;
  std::__assoc_sub_state *shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::future<void> v19;
  std::future<void> v20;

  v2 = (std::__shared_weak_count *)operator new(0xBD0uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E59D0;
  v2[1].std::__shared_count = 0u;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  HIBYTE(v2[3].__vftable) = 0;
  LODWORD(v2[3].__shared_owners_) = 0;
  BYTE4(v2[3].__shared_owners_) = 0;
  v2[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v2[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[6].std::__shared_count = 0u;
  v2[7].__vftable = 0;
  LOWORD(v2[4].__shared_owners_) = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v2[7].__vftable + 5) = 0;
  v2[7].__shared_weak_owners_ = 0;
  LOBYTE(v2[2].__shared_owners_) = 0;
  *(_DWORD *)((char *)&v2[6].__shared_owners_ + 7) = 0;
  v2[8].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[8].__shared_owners_ = 0u;
  v2[9].std::__shared_count = 0u;
  *(_OWORD *)&v2[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[10].__shared_owners_ = 0u;
  v2[11].std::__shared_count = 0u;
  *(_OWORD *)((char *)&v2[11].__shared_owners_ + 4) = 0u;
  HIDWORD(v2[12].__vftable) = 0x4000;
  *(_OWORD *)&v2[12].__shared_owners_ = 0u;
  v2[13].std::__shared_count = 0u;
  v2[13].__shared_weak_owners_ = 0x400000000000;
  v2[14].std::__shared_count = 0u;
  *(_OWORD *)&v2[14].__shared_weak_owners_ = 0u;
  v2[15].__shared_owners_ = 0x400000000000;
  v2[15].__shared_weak_owners_ = 0;
  v2[16].__vftable = 0;
  v2[16].__shared_owners_ = 0;
  LODWORD(v2[16].__shared_weak_owners_) = 100;
  v2[17].__vftable = 0;
  v2[17].__shared_owners_ = 0;
  v2[17].__shared_weak_owners_ = 0;
  LODWORD(v2[18].__vftable) = 100;
  v2[18].__shared_owners_ = 0;
  v2[18].__shared_weak_owners_ = 0;
  v2[19].__vftable = 0;
  LODWORD(v2[19].__shared_owners_) = 1024;
  v2[19].__shared_weak_owners_ = 0;
  v2[20].__vftable = 0;
  v2[20].__shared_owners_ = 0;
  LODWORD(v2[20].__shared_weak_owners_) = 1024;
  v2[21].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[21].__shared_owners_ = 0u;
  v2[22].std::__shared_count = 0u;
  *(_OWORD *)&v2[22].__shared_weak_owners_ = 0u;
  v2[23].__shared_owners_ = 0;
  v2[23].__shared_weak_owners_ = 850045863;
  v2[26].__vftable = 0;
  *(_OWORD *)&v2[24].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[25].__shared_owners_ = 0u;
  v2[24].std::__shared_count = 0u;
  v2[26].__shared_owners_ = 850045863;
  v2[28].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[27].__shared_owners_ = 0u;
  v2[28].std::__shared_count = 0u;
  *(_OWORD *)&v2[26].__shared_weak_owners_ = 0u;
  v2[29].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[31].__shared_owners_ = 0;
  v2[30].std::__shared_count = 0u;
  *(_OWORD *)&v2[30].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[29].__shared_owners_ = 0u;
  v2[31].__shared_weak_owners_ = 850045863;
  v2[34].__vftable = 0;
  *(_OWORD *)&v2[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[33].__shared_owners_ = 0u;
  v2[32].std::__shared_count = 0u;
  v2[34].__shared_owners_ = 850045863;
  v2[36].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[35].__shared_owners_ = 0u;
  v2[36].std::__shared_count = 0u;
  *(_OWORD *)&v2[34].__shared_weak_owners_ = 0u;
  v2[37].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[39].__shared_owners_ = 0;
  v2[38].std::__shared_count = 0u;
  *(_OWORD *)&v2[38].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[37].__shared_owners_ = 0u;
  v2[39].__shared_weak_owners_ = 850045863;
  v2[42].__vftable = 0;
  *(_OWORD *)&v2[40].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[41].__shared_owners_ = 0u;
  v2[40].std::__shared_count = 0u;
  v2[42].__shared_owners_ = 850045863;
  v2[44].__shared_weak_owners_ = 0;
  v2[44].std::__shared_count = 0u;
  *(_OWORD *)&v2[43].__shared_owners_ = 0u;
  *(_OWORD *)&v2[42].__shared_weak_owners_ = 0u;
  v2[45].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[47].__shared_owners_ = 0;
  *(_OWORD *)&v2[46].__shared_weak_owners_ = 0u;
  v2[46].std::__shared_count = 0u;
  *(_OWORD *)&v2[45].__shared_owners_ = 0u;
  v2[47].__shared_weak_owners_ = 850045863;
  v2[50].__vftable = 0;
  *(_OWORD *)&v2[49].__shared_owners_ = 0u;
  *(_OWORD *)&v2[48].__shared_weak_owners_ = 0u;
  v2[48].std::__shared_count = 0u;
  v2[50].__shared_owners_ = 850045863;
  v2[52].__shared_weak_owners_ = 0;
  v2[52].std::__shared_count = 0u;
  *(_OWORD *)&v2[51].__shared_owners_ = 0u;
  *(_OWORD *)&v2[50].__shared_weak_owners_ = 0u;
  v2[53].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[55].__shared_owners_ = 0;
  *(_OWORD *)&v2[54].__shared_weak_owners_ = 0u;
  v2[54].std::__shared_count = 0u;
  *(_OWORD *)&v2[53].__shared_owners_ = 0u;
  v2[55].__shared_weak_owners_ = 850045863;
  v2[58].__vftable = 0;
  *(_OWORD *)&v2[57].__shared_owners_ = 0u;
  *(_OWORD *)&v2[56].__shared_weak_owners_ = 0u;
  v2[56].std::__shared_count = 0u;
  v2[58].__shared_owners_ = 850045863;
  v2[60].__shared_weak_owners_ = 0;
  v2[60].std::__shared_count = 0u;
  *(_OWORD *)&v2[59].__shared_owners_ = 0u;
  *(_OWORD *)&v2[58].__shared_weak_owners_ = 0u;
  v2[61].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[63].__shared_owners_ = 0;
  *(_OWORD *)&v2[62].__shared_weak_owners_ = 0u;
  v2[62].std::__shared_count = 0u;
  *(_OWORD *)&v2[61].__shared_owners_ = 0u;
  v2[63].__shared_weak_owners_ = 850045863;
  v2[66].__vftable = 0;
  *(_OWORD *)&v2[65].__shared_owners_ = 0u;
  *(_OWORD *)&v2[64].__shared_weak_owners_ = 0u;
  v2[64].std::__shared_count = 0u;
  v2[66].__shared_owners_ = 850045863;
  v2[68].__shared_weak_owners_ = 0;
  v2[68].std::__shared_count = 0u;
  *(_OWORD *)&v2[67].__shared_owners_ = 0u;
  *(_OWORD *)&v2[66].__shared_weak_owners_ = 0u;
  v2[69].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[71].__shared_owners_ = 0;
  *(_OWORD *)&v2[70].__shared_weak_owners_ = 0u;
  v2[70].std::__shared_count = 0u;
  *(_OWORD *)&v2[69].__shared_owners_ = 0u;
  v2[71].__shared_weak_owners_ = 850045863;
  v2[74].__vftable = 0;
  *(_OWORD *)&v2[73].__shared_owners_ = 0u;
  *(_OWORD *)&v2[72].__shared_weak_owners_ = 0u;
  v2[72].std::__shared_count = 0u;
  v2[74].__shared_owners_ = 850045863;
  v2[76].__shared_weak_owners_ = 0;
  v2[76].std::__shared_count = 0u;
  *(_OWORD *)&v2[75].__shared_owners_ = 0u;
  *(_OWORD *)&v2[74].__shared_weak_owners_ = 0u;
  v2[77].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[79].__shared_owners_ = 0;
  *(_OWORD *)&v2[78].__shared_weak_owners_ = 0u;
  v2[78].std::__shared_count = 0u;
  *(_OWORD *)&v2[77].__shared_owners_ = 0u;
  v2[79].__shared_weak_owners_ = 850045863;
  v2[82].__vftable = 0;
  *(_OWORD *)&v2[81].__shared_owners_ = 0u;
  *(_OWORD *)&v2[80].__shared_weak_owners_ = 0u;
  v2[80].std::__shared_count = 0u;
  v2[82].__shared_owners_ = 850045863;
  v2[84].__shared_weak_owners_ = 0;
  v2[84].std::__shared_count = 0u;
  *(_OWORD *)&v2[83].__shared_owners_ = 0u;
  *(_OWORD *)&v2[82].__shared_weak_owners_ = 0u;
  v2[85].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[87].__shared_owners_ = 0;
  *(_OWORD *)&v2[86].__shared_weak_owners_ = 0u;
  v2[86].std::__shared_count = 0u;
  *(_OWORD *)&v2[85].__shared_owners_ = 0u;
  v2[87].__shared_weak_owners_ = 850045863;
  v2[90].__vftable = 0;
  *(_OWORD *)&v2[89].__shared_owners_ = 0u;
  *(_OWORD *)&v2[88].__shared_weak_owners_ = 0u;
  v2[88].std::__shared_count = 0u;
  v2[90].__shared_owners_ = 850045863;
  v2[92].__shared_weak_owners_ = 0;
  v2[92].std::__shared_count = 0u;
  *(_OWORD *)&v2[91].__shared_owners_ = 0u;
  *(_OWORD *)&v2[90].__shared_weak_owners_ = 0u;
  v2[93].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[95].__shared_owners_ = 0;
  *(_OWORD *)&v2[94].__shared_weak_owners_ = 0u;
  v2[94].std::__shared_count = 0u;
  *(_OWORD *)&v2[93].__shared_owners_ = 0u;
  v2[95].__shared_weak_owners_ = 850045863;
  v2[98].__vftable = 0;
  *(_OWORD *)&v2[97].__shared_owners_ = 0u;
  *(_OWORD *)&v2[96].__shared_weak_owners_ = 0u;
  v2[96].std::__shared_count = 0u;
  v2[98].__shared_owners_ = 850045863;
  v2[100].__shared_weak_owners_ = 0;
  v2[100].std::__shared_count = 0u;
  *(_OWORD *)&v2[99].__shared_owners_ = 0u;
  *(_OWORD *)&v2[98].__shared_weak_owners_ = 0u;
  v2[101].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[103].__shared_owners_ = 0;
  *(_OWORD *)&v2[102].__shared_weak_owners_ = 0u;
  v2[102].std::__shared_count = 0u;
  *(_OWORD *)&v2[101].__shared_owners_ = 0u;
  v2[103].__shared_weak_owners_ = 850045863;
  v2[114].std::__shared_count = 0u;
  *(_OWORD *)&v2[113].__shared_owners_ = 0u;
  *(_OWORD *)&v2[112].__shared_weak_owners_ = 0u;
  v2[112].std::__shared_count = 0u;
  *(_OWORD *)&v2[111].__shared_owners_ = 0u;
  *(_OWORD *)&v2[110].__shared_weak_owners_ = 0u;
  v2[110].std::__shared_count = 0u;
  *(_OWORD *)&v2[109].__shared_owners_ = 0u;
  *(_OWORD *)&v2[108].__shared_weak_owners_ = 0u;
  v2[108].std::__shared_count = 0u;
  *(_OWORD *)&v2[107].__shared_owners_ = 0u;
  *(_OWORD *)&v2[106].__shared_weak_owners_ = 0u;
  v2[106].std::__shared_count = 0u;
  *(_OWORD *)&v2[105].__shared_owners_ = 0u;
  *(_OWORD *)&v2[104].__shared_weak_owners_ = 0u;
  v2[104].std::__shared_count = 0u;
  v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)&v2[106].__shared_owners_, 0);
  if ((_DWORD)v4)
    geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
  *(_OWORD *)&v2[114].__shared_weak_owners_ = 0u;
  v6 = (gss::Allocator *)gss::Allocator::instance(v4);
  v2[115].__shared_owners_ = (uint64_t)v6;
  v2[115].__shared_weak_owners_ = 0;
  v2[116].__vftable = (std::__shared_weak_count_vtbl *)gss::Allocator::instance(v6);
  v2[116].__shared_owners_ = 0;
  LODWORD(v2[116].__shared_weak_owners_) = 1065353216;
  LODWORD(v2[117].__vftable) = 0;
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_owners_);
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_weak_owners_);
  v2[118].std::__shared_count = 0u;
  v2[118].__shared_weak_owners_ = 850045863;
  v2[121].__vftable = 0;
  v2[119].std::__shared_count = 0u;
  *(_OWORD *)&v2[119].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[120].__shared_owners_ = 0u;
  v2[121].__shared_owners_ = 850045863;
  HIBYTE(v2[125].__shared_weak_owners_) = 0;
  LOBYTE(v2[125].__vftable) = 0;
  *(_OWORD *)&v2[121].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[122].__shared_owners_ = 0u;
  v2[123].std::__shared_count = 0u;
  *(_OWORD *)&v2[123].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v2[124].std::__shared_count + 4) = 0u;
  atomic_store(0, (unsigned __int8 *)&v2[117]);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 1);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 2);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 3);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_owners_);
  state = v19.__state_;
  v8 = (std::__assoc_sub_state *)v2[118].__vftable;
  v19.__state_ = 0;
  v20.__state_ = v8;
  v2[118].__vftable = (std::__shared_weak_count_vtbl *)state;
  std::future<void>::~future(&v20);
  std::future<void>::~future(&v19);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_weak_owners_);
  v9 = v19.__state_;
  shared_owners = (std::__assoc_sub_state *)v2[118].__shared_owners_;
  v19.__state_ = 0;
  v20.__state_ = shared_owners;
  v2[118].__shared_owners_ = (uint64_t)v9;
  std::future<void>::~future(&v20);
  std::future<void>::~future(&v19);
  HIDWORD(v2[12].__vftable) = 1024;
  HIDWORD(v2[13].__shared_weak_owners_) = 1024;
  HIDWORD(v2[15].__shared_owners_) = 1024;
  LODWORD(v2[18].__vftable) = 20;
  LODWORD(v2[16].__shared_weak_owners_) = 20;
  *a1 = v2 + 1;
  a1[1] = v2;
  v11 = (std::__shared_weak_count *)v2[1].__shared_owners_;
  if (v11)
  {
    if (v11->__shared_owners_ != -1)
      return;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_19F79006C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::mutex *a15, std::mutex *a16, std::mutex *a17, std::mutex *a18, std::mutex *a19, std::mutex *a20,std::mutex *a21,std::mutex *a22,std::mutex *a23,std::mutex *a24,std::mutex *a25,std::mutex *a26,std::mutex *a27,std::mutex *a28,std::mutex *a29,std::mutex *a30,std::mutex *a31,std::mutex *a32)
{
  uint64_t v32;
  pthread_rwlock_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::future<void> *v36;
  std::mutex *v37;
  uint64_t v38;
  std::__shared_weak_count *v40;
  void *v41;

  *(_QWORD *)(v38 - 176) = v32 + 2976;
  *(_QWORD *)(v38 - 168) = v32 + 2912;
  if (*(char *)(v32 + 3023) < 0)
    operator delete(*(void **)(v32 + 3000));
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t **)(v32 + 2984));
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100](*(uint64_t ***)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 2848));
  std::future<void>::~future((std::future<void> *)(v32 + 2840));
  std::future<void>::~future(v36);
  MEMORY[0x1A1AF4CB0](v35);
  MEMORY[0x1A1AF4CB0](v34);
  std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~__hash_table((gss::Allocator *)(v32 + 2752));
  geo::read_write_lock::~read_write_lock(v33);
  *(_QWORD *)(v38 - 176) = v32 + 632;
  *(_QWORD *)(v38 - 168) = v32 + 568;
  std::mutex::~mutex((std::mutex *)(v32 + 2488));
  std::mutex::~mutex((std::mutex *)(v32 + 2424));
  std::mutex::~mutex((std::mutex *)(v32 + 2360));
  std::mutex::~mutex((std::mutex *)(v32 + 2296));
  std::mutex::~mutex((std::mutex *)(v32 + 2232));
  std::mutex::~mutex((std::mutex *)(v32 + 2168));
  std::mutex::~mutex((std::mutex *)(v32 + 2104));
  std::mutex::~mutex((std::mutex *)(v32 + 2040));
  std::mutex::~mutex((std::mutex *)(v32 + 1976));
  std::mutex::~mutex((std::mutex *)(v32 + 1912));
  std::mutex::~mutex((std::mutex *)(v32 + 1848));
  std::mutex::~mutex((std::mutex *)(v32 + 1784));
  std::mutex::~mutex((std::mutex *)(v32 + 1720));
  std::mutex::~mutex((std::mutex *)(v32 + 1656));
  std::mutex::~mutex((std::mutex *)(v32 + 1592));
  std::mutex::~mutex((std::mutex *)(v32 + 1528));
  std::mutex::~mutex((std::mutex *)(v32 + 1464));
  std::mutex::~mutex((std::mutex *)(v32 + 1400));
  std::mutex::~mutex((std::mutex *)(v32 + 1336));
  std::mutex::~mutex((std::mutex *)(v32 + 1272));
  std::mutex::~mutex((std::mutex *)(v32 + 1208));
  std::mutex::~mutex((std::mutex *)(v32 + 1144));
  std::mutex::~mutex((std::mutex *)(v32 + 1080));
  std::mutex::~mutex((std::mutex *)(v32 + 1016));
  std::mutex::~mutex((std::mutex *)(v32 + 952));
  std::mutex::~mutex((std::mutex *)(v32 + 888));
  std::mutex::~mutex((std::mutex *)(v32 + 824));
  std::mutex::~mutex((std::mutex *)(v32 + 760));
  std::mutex::~mutex((std::mutex *)(v32 + 696));
  std::mutex::~mutex(*(std::mutex **)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators((_QWORD *)(v32 + 256));
  std::mutex::~mutex(v37);
  std::unique_ptr<gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>>::~unique_ptr[abi:nn180100](*(uint64_t **)(v38 - 160));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(_QWORD **)(v38 - 152));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 144));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 136));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 128));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(_QWORD **)(v38 - 120));
  if (*(char *)(v32 + 79) < 0)
    operator delete(*(void **)(v32 + 56));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 112));
  v40 = *(std::__shared_weak_count **)(v32 + 32);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v41);
  _Unwind_Resume(a1);
}

uint64_t gss::StylesheetManager<gss::PropertyID>::~StylesheetManager(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  geo::read_write_lock *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v2 = *(std::__shared_weak_count **)(a1 + 528);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 320));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"destruction", v6);
  v7 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 120));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"destruction", v8);
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 96);
    v11 = *(_QWORD *)(a1 + 88);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
          std::__shared_weak_count::__release_weak(v12);
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *(_QWORD *)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112), v11, *(_QWORD *)(a1 + 104) - v11);
  }
  std::__hash_table<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleKey,std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<gss::StyleKey>,std::equal_to<gss::StyleKey>,true>,std::__unordered_map_equal<gss::StyleKey,std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<gss::StyleKey>,std::hash<gss::StyleKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,gss::Allocator>>::~__hash_table((uint64_t *)(a1 + 32));
  v13 = *(std::__shared_weak_count **)(a1 + 24);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v16)
        return a1;
      goto LABEL_23;
    }
  }
  v16 = *(std::__shared_weak_count **)(a1 + 8);
  if (v16)
LABEL_23:
    std::__shared_weak_count::__release_weak(v16);
  return a1;
}

uint64_t *std::unique_ptr<gss::StylesheetManager<gss::PropertyID>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = gss::StylesheetManager<gss::PropertyID>::~StylesheetManager(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40DB985E3BLL);
  }
  return a1;
}

void std::__shared_ptr_pointer<gss::StylesheetManager<gss::PropertyID> *,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>::__shared_ptr_default_delete<gss::StylesheetManager<gss::PropertyID>,gss::StylesheetManager<gss::PropertyID>>,std::allocator<gss::StylesheetManager<gss::PropertyID>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::vector<std::weak_ptr<gss::FeatureQueryImpl<gss::PropertyID>>,geo::StdAllocator<std::weak_ptr<gss::FeatureQueryImpl<gss::PropertyID>>,gss::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2_5918()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;

}

_QWORD *std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42D81F8;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42D81F8;
  v1 = a1 + 5;
  v2 = (_QWORD *)a1[8];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E42D81F8;
  v3 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(result + 17);
  *(_OWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(result + 64);
  if (v4)
  {
    if (v4 == result + 40)
    {
      *(_QWORD *)(a2 + 64) = a2 + 40;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 64) + 24))(*(_QWORD *)(result + 64));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 64));
      *(_QWORD *)(a2 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void gss::DecodingContext::~DecodingContext(gss::DecodingContext *this)
{
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

void gss::StylFile::~StylFile(gss::StylFile *this)
{
  std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy((uint64_t)this + 32, *((_QWORD *)this + 5));
  std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

uint64_t gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  gss::Allocator *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  gss::Allocator *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 48);
    v4 = *(gss::Allocator **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        v6 = (_QWORD *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = gss::Allocator::instance(v4);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *v5, 4 * v5[2]);
          v4 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v5, 0x1020C4024DAA5DELL);
        }
      }
      while (v3 != v2);
      v4 = *(gss::Allocator **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v4);
  }
  v8 = (gss::Allocator *)geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::deallocateStorage(a1 + 24);
  v9 = (_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 20) && *v9)
  {
    if (*(_WORD *)(a1 + 16))
    {
      v10 = 24 * *(unsigned __int16 *)(a1 + 16);
      v11 = (_BYTE *)(*v9 + 20);
      do
      {
        v12 = v11 - 12;
        if (!*v11 && *v12)
        {
          v13 = gss::Allocator::instance(v8);
          v8 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v11 - 12), 4 * *((unsigned __int16 *)v11 - 1));
        }
        *(_QWORD *)(v11 - 7) = 0;
        *v12 = 0;
        v11 += 24;
        v10 -= 24;
      }
      while (v10);
    }
    v14 = gss::Allocator::instance(v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(a1 + 8), 24 * *(unsigned __int16 *)(a1 + 18));
  }
  *(_QWORD *)(a1 + 13) = 0;
  *v9 = 0;
  return a1;
}

uint64_t std::sort[abi:nn180100]<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode *,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1}>(uint64_t a1, int32x2_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2);
  if (a2 == (int32x2_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*,false>(a1, a2, v3, 1);
}

unsigned __int16 *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>(unsigned __int16 *result, unsigned __int16 *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = *a2;
  v6 = *(unsigned __int16 *)a3;
  if (v5 >= *result)
  {
    if (v6 < v5)
    {
      v6 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *a3;
      *a3 = v6;
      if (*a2 >= *result)
      {
        v6 = (unsigned __int16)v6;
      }
      else
      {
        v8 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v8;
        v6 = *(unsigned __int16 *)a3;
      }
    }
  }
  else
  {
    v7 = *(_DWORD *)result;
    if (v6 >= v5)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v7;
      v6 = *(unsigned __int16 *)a3;
      if (v6 < (unsigned __int16)v7)
      {
        *(_DWORD *)a2 = *a3;
        *a3 = v7;
        v6 = (unsigned __int16)v7;
      }
    }
    else
    {
      *(_DWORD *)result = *a3;
      *a3 = v7;
      v6 = (unsigned __int16)v7;
    }
  }
  if (*(unsigned __int16 *)a4 < v6)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    if (*(unsigned __int16 *)a3 < *a2)
    {
      v10 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *a3;
      *a3 = v10;
      if (*a2 < *result)
      {
        v11 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v11;
      }
    }
  }
  if (*(unsigned __int16 *)a5 < *(unsigned __int16 *)a4)
  {
    v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    if (*(unsigned __int16 *)a4 < *(unsigned __int16 *)a3)
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      if (*(unsigned __int16 *)a3 < *a2)
      {
        v14 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *a3;
        *a3 = v14;
        if (*a2 < *result)
        {
          v15 = *(_DWORD *)result;
          *(_DWORD *)result = *(_DWORD *)a2;
          *(_DWORD *)a2 = v15;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>(int32x2_t *a1, int32x2_t *a2)
{
  uint64_t v2;
  __int32 v3;
  int32x2_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int32 v14;
  unsigned int v15;
  __int32 v16;
  __int32 v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  int32x2_t *v25;
  __int32 v26;
  uint64_t v27;
  unsigned int v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 2)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      if (a2[-1].u16[2] >= a1->u16[0])
        return 1;
      v3 = a1->i32[0];
      goto LABEL_9;
    case 3:
      v9 = a1->u16[2];
      v10 = a2[-1].u16[2];
      if (v9 >= a1->u16[0])
      {
        if (v10 < v9)
        {
          v19 = a1->i32[1];
          a1->i32[1] = a2[-1].i32[1];
          a2[-1].i32[1] = v19;
          if (a1->u16[2] < a1->u16[0])
            *a1 = vrev64_s32(*a1);
        }
      }
      else
      {
        v3 = a1->i32[0];
        if (v10 >= v9)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v3;
          if (a2[-1].u16[2] < (unsigned __int16)v3)
          {
            a1->i32[1] = a2[-1].i32[1];
            a2[-1].i32[1] = v3;
          }
        }
        else
        {
LABEL_9:
          a1->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v3;
        }
      }
      return 1;
    case 4:
      v11 = a1->u16[2];
      v12 = a1->u16[0];
      v13 = a1[1].u16[0];
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          v13 = a1->u32[1];
          v20 = a1[1].i32[0];
          a1->i32[1] = v20;
          a1[1].i32[0] = v13;
          v13 = (unsigned __int16)v13;
          if (v12 > (unsigned __int16)v20)
          {
            v21 = a1->i32[0];
            a1->i32[0] = v20;
            a1->i32[1] = v21;
          }
        }
      }
      else
      {
        v14 = a1->i32[0];
        v15 = (unsigned __int16)a1->i32[0];
        if (v13 >= v11)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v14;
          if (v13 >= v15)
            goto LABEL_41;
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v14;
        v13 = v15;
      }
LABEL_41:
      if (a2[-1].u16[2] < v13)
      {
        v29 = a1[1].i32[0];
        a1[1].i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v29;
        if (a1[1].u16[0] < a1->u16[2])
        {
          v31 = a1->i32[1];
          v30 = a1[1].i32[0];
          a1->i32[1] = v30;
          a1[1].i32[0] = v31;
          if (a1->u16[0] > (unsigned __int16)v30)
          {
            v32 = a1->i32[0];
            a1->i32[0] = v30;
            a1->i32[1] = v32;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((unsigned __int16 *)a1, (unsigned __int16 *)a1 + 2, (unsigned int *)&a1[1], (unsigned int *)&a1[1] + 1, (unsigned int *)&a2[-1] + 1);
      return 1;
    default:
      v4 = a1 + 1;
      v5 = a1[1].u16[0];
      v6 = a1->u16[2];
      v7 = a1->u16[0];
      if (v6 >= v7)
      {
        if (v5 < v6)
        {
          v17 = a1->i32[1];
          v16 = a1[1].i32[0];
          a1->i32[1] = v16;
          a1[1].i32[0] = v17;
          if (v7 > (unsigned __int16)v16)
          {
            v18 = a1->i32[0];
            a1->i32[0] = v16;
            a1->i32[1] = v18;
          }
        }
      }
      else
      {
        v8 = a1->i32[0];
        if (v5 >= v6)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v8;
          if (v5 >= (unsigned __int16)v8)
            goto LABEL_26;
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v8;
      }
LABEL_26:
      v22 = (unsigned __int16 *)&a1[1] + 2;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2)
        return 1;
      v23 = 0;
      v24 = 0;
      break;
  }
  while (1)
  {
    if (*v22 < v4->u16[0])
    {
      v26 = *(_DWORD *)v22;
      v27 = v23;
      do
      {
        *(__int32 *)((char *)&a1[1].i32[1] + v27) = *(__int32 *)((char *)a1[1].i32 + v27);
        if (v27 == -8)
        {
          v25 = a1;
          goto LABEL_29;
        }
        v28 = *(unsigned __int16 *)((char *)&a1->u16[2] + v27);
        v27 -= 4;
      }
      while (v28 > (unsigned __int16)v26);
      v25 = (int32x2_t *)((char *)a1 + v27 + 12);
LABEL_29:
      v25->i32[0] = v26;
      if (++v24 == 8)
        return v22 + 2 == (unsigned __int16 *)a2;
    }
    v4 = (int32x2_t *)v22;
    v23 += 4;
    v22 += 2;
    if (v22 == (unsigned __int16 *)a2)
      return 1;
  }
}

gss::Allocator *std::unique_ptr<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo>>::~unique_ptr[abi:nn180100](gss::Allocator *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    v3 = gss::Allocator::instance(a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 40))(v3, *v2, 4 * v2[2]);
    MEMORY[0x1A1AF4E00](v2, 0x1020C4024DAA5DELL);
  }
  return a1;
}

uint64_t geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::deallocateStorage(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  if (!*(_BYTE *)(result + 12))
  {
    v2 = *(_QWORD **)result;
    if (*(_QWORD *)result)
    {
      if (*(_WORD *)(result + 8))
      {
        v3 = &v2[2 * *(unsigned __int16 *)(result + 8)];
        do
        {
          if (!*((_BYTE *)v2 + 12) && *v2)
          {
            if (*((_WORD *)v2 + 4))
            {
              v5 = 24 * *((unsigned __int16 *)v2 + 4);
              v6 = (_BYTE *)(*v2 + 20);
              do
              {
                v7 = v6 - 12;
                if (!*v6 && *v7)
                {
                  v8 = gss::Allocator::instance((gss::Allocator *)result);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
                }
                *(_QWORD *)(v6 - 7) = 0;
                *v7 = 0;
                v6 += 24;
                v5 -= 24;
              }
              while (v5);
            }
            v4 = gss::Allocator::instance((gss::Allocator *)result);
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 40))(v4, *v2, 24 * *((unsigned __int16 *)v2 + 5));
          }
          *(_QWORD *)((char *)v2 + 5) = 0;
          *v2 = 0;
          v2 += 2;
        }
        while (v2 != v3);
      }
      v9 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)v1, 16 * *(unsigned __int16 *)(v1 + 10));
    }
  }
  *(_QWORD *)(v1 + 5) = 0;
  *(_QWORD *)v1 = 0;
  return result;
}

void gss::CartoStyle<gss::PropertyID>::setPropertySet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a3)
  {
    v3 = (unint64_t *)(a3 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t gss::ZoomStyle<gss::PropertyID>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::map<unsigned int,unsigned char,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,unsigned char>,gss::Allocator>>::operator[](uint64_t **a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = a1 + 1;
  v4 = (uint64_t)a1[1];
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *(_DWORD *)(v4 + 28);
        if (v6 >= v8)
          break;
        v4 = *(_QWORD *)v7;
        v5 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        break;
      v4 = *(_QWORD *)(v7 + 8);
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_DWORD *)(v7 + 28) = *a2;
    *(_BYTE *)(v7 + 32) = 0;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = v9;
    *v5 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v5;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
  }
  return v7 + 32;
}

_QWORD *geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(_QWORD *a1)
{
  uint64_t v2;

  if (!*((_BYTE *)a1 + 12) && *a1)
  {
    v2 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 40))(v2, *a1, 4 * *((unsigned __int16 *)a1 + 5));
  }
  *(_QWORD *)((char *)a1 + 5) = 0;
  *a1 = 0;
  return a1;
}

uint64_t gss::StyleCondition::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = (_QWORD *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (_QWORD *)(a1 + 8);
  if (a1 != a2)
  {
    if (!*(_BYTE *)(a1 + 20) && *v4)
    {
      v6 = gss::Allocator::instance((gss::Allocator *)a1);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 8), 4 * *(unsigned __int16 *)(a1 + 18));
    }
    *(_QWORD *)((char *)v4 + 5) = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
    *(_QWORD *)((char *)v3 + 5) = 0;
    *v3 = 0;
  }
  return a1;
}

void gss::StyleCondition::~StyleCondition(gss::StyleCondition *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)((char *)this + 8);
  if (!*((_BYTE *)this + 20) && *v2)
  {
    v3 = gss::Allocator::instance(this);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 1), 4 * *((unsigned __int16 *)this + 9));
  }
  *(_QWORD *)((char *)v2 + 5) = 0;
  *v2 = 0;
}

uint64_t geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1;
  if (!*(_BYTE *)(a1 + 12) && *(_QWORD *)a1)
  {
    if (*(_WORD *)(a1 + 8))
    {
      v2 = 24 * *(unsigned __int16 *)(a1 + 8);
      v3 = (_BYTE *)(*(_QWORD *)a1 + 20);
      do
      {
        v4 = v3 - 12;
        if (!*v3 && *v4)
        {
          v5 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v3 - 12), 4 * *((unsigned __int16 *)v3 - 1));
        }
        *(_QWORD *)(v3 - 7) = 0;
        *v4 = 0;
        v3 += 24;
        v2 -= 24;
      }
      while (v2);
    }
    v6 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)v1, 24 * *(unsigned __int16 *)(v1 + 10));
  }
  *(_QWORD *)(v1 + 5) = 0;
  *(_QWORD *)v1 = 0;
  return v1;
}

gss::Allocator *std::unique_ptr<geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::PageInfo>>::~unique_ptr[abi:nn180100](gss::Allocator *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    v3 = gss::Allocator::instance(a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 40))(v3, *v2, 4 * v2[2]);
    MEMORY[0x1A1AF4E00](v2, 0x1010C40113C0ABBLL);
  }
  return a1;
}

_QWORD *geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;

  if (!*((_BYTE *)a1 + 12))
  {
    v2 = *a1;
    if (*a1)
    {
      if (*((_WORD *)a1 + 4))
      {
        v3 = v2 + 16 * *((unsigned __int16 *)a1 + 4);
        do
        {
          v4 = *(std::__shared_weak_count **)(v2 + 8);
          if (v4)
          {
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v6 = __ldaxr(p_shared_owners);
            while (__stlxr(v6 - 1, p_shared_owners));
            if (!v6)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
          v2 += 16;
        }
        while (v2 != v3);
      }
      v7 = gss::Allocator::instance((gss::Allocator *)a1);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *a1, 16 * *((unsigned __int16 *)a1 + 5));
    }
  }
  *(_QWORD *)((char *)a1 + 5) = 0;
  *a1 = 0;
  return a1;
}

uint64_t gss::CartoStyle<gss::PropertyID>::~CartoStyle(uint64_t a1)
{
  gss::Allocator *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a1 = &off_1E42C2880;
  v2 = *(gss::Allocator **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    v2 = (gss::Allocator *)MEMORY[0x1A1AF4DE8](v2, 0x1000C8077774924);
  v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (uint64_t *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 68))
  {
    v10 = *v9;
    if (*v9)
    {
      if (*(_WORD *)(a1 + 64))
      {
        v11 = v10 + 16 * *(unsigned __int16 *)(a1 + 64);
        do
        {
          v12 = *(std::__shared_weak_count **)(v10 + 8);
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v15 = gss::Allocator::instance(v2);
      v2 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(a1 + 56), 16 * *(unsigned __int16 *)(a1 + 66));
    }
  }
  *(_QWORD *)(a1 + 61) = 0;
  *v9 = 0;
  v16 = (uint64_t *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 52))
  {
    v17 = *v16;
    if (*v16)
    {
      if (*(_WORD *)(a1 + 48))
      {
        v18 = v17 + 24 * *(unsigned __int16 *)(a1 + 48);
        do
        {
          v19 = *(std::__shared_weak_count **)(v17 + 16);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 += 24;
        }
        while (v17 != v18);
      }
      v22 = gss::Allocator::instance(v2);
      v2 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 40))(v22, *(_QWORD *)(a1 + 40), 24 * *(unsigned __int16 *)(a1 + 50));
    }
  }
  *(_QWORD *)(a1 + 45) = 0;
  *v16 = 0;
  v23 = (_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a1 + 36) && *v23)
  {
    v24 = gss::Allocator::instance(v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 40))(v24, *(_QWORD *)(a1 + 24), 4 * *(unsigned __int16 *)(a1 + 34));
  }
  *(_QWORD *)(a1 + 29) = 0;
  *v23 = 0;
  v25 = *(std::__shared_weak_count **)(a1 + 16);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  return a1;
}

uint64_t gss::ConditionalStyle<gss::PropertyID>::~ConditionalStyle(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  *(_QWORD *)a1 = &off_1E42C2980;
  v2 = (_QWORD *)(a1 + 128);
  if (!*(_BYTE *)(a1 + 140) && *v2)
  {
    if (*(_WORD *)(a1 + 136))
    {
      v3 = 24 * *(unsigned __int16 *)(a1 + 136);
      v4 = (_BYTE *)(*v2 + 20);
      do
      {
        v5 = v4 - 12;
        if (!*v4 && *v5)
        {
          v6 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v4 - 12), 4 * *((unsigned __int16 *)v4 - 1));
        }
        *(_QWORD *)(v4 - 7) = 0;
        *v5 = 0;
        v4 += 24;
        v3 -= 24;
      }
      while (v3);
    }
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v1 + 128), 24 * *(unsigned __int16 *)(v1 + 138));
  }
  *(_QWORD *)((char *)v2 + 5) = 0;
  *v2 = 0;
  return gss::CartoStyle<gss::PropertyID>::~CartoStyle(v1);
}

void gss::ConditionalStyle<gss::PropertyID>::~ConditionalStyle(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  *(_QWORD *)a1 = &off_1E42C2980;
  v2 = (_QWORD *)(a1 + 128);
  if (!*(_BYTE *)(a1 + 140) && *v2)
  {
    if (*(_WORD *)(a1 + 136))
    {
      v3 = 24 * *(unsigned __int16 *)(a1 + 136);
      v4 = (_BYTE *)(*v2 + 20);
      do
      {
        v5 = v4 - 12;
        if (!*v4 && *v5)
        {
          v6 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v4 - 12), 4 * *((unsigned __int16 *)v4 - 1));
        }
        *(_QWORD *)(v4 - 7) = 0;
        *v5 = 0;
        v4 += 24;
        v3 -= 24;
      }
      while (v3);
    }
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v1 + 128), 24 * *(unsigned __int16 *)(v1 + 138));
  }
  *(_QWORD *)((char *)v2 + 5) = 0;
  *v2 = 0;
  gss::CartoStyle<gss::PropertyID>::~CartoStyle(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gss::ConditionalStyle<gss::PropertyID>::to_string@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::ios_base *v14;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  int v17;
  const std::locale::facet *v18;
  char *v19;
  uint64_t width;
  BOOL v21;
  uint64_t v22;
  size_t v23;
  std::locale::__imp *p_b;
  uint64_t v25;
  uint64_t v26;
  void *locale;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  unint64_t v32;
  const void **v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *__dst;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[3];
  _QWORD v45[3];
  uint64_t v46;
  unint64_t v47;
  void *__p;
  char v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  char v53;
  _BYTE v54[16];
  std::locale __b;
  size_t v56;
  int64_t v57;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v43);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 104))
    v4 = *(const char **)(*(_QWORD *)(a1 + 144) + 104);
  else
    v4 = "";
  v5 = strlen(v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"-condStyle-", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__b.__locale_) = 45;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)&__b, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"-{", 2);
  __dst = a2;
  if (*(_WORD *)(a1 + 136))
  {
    v8 = *(_QWORD *)(a1 + 128);
    v41 = v8 + 24 * *(unsigned __int16 *)(a1 + 136);
    while (1)
    {
      LOBYTE(__b.__locale_) = 64;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__b, 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__b.__locale_) = 61;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__b, 1);
      v42 = v8;
      v10 = *(unsigned __int16 *)(v8 + 16);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v42 + 8);
        std::ostream::operator<<();
        if ((_DWORD)v10 != 1)
          break;
      }
LABEL_40:
      LOBYTE(__b.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__b, 1);
      v8 = v42 + 24;
      if (v42 + 24 == v41)
        goto LABEL_41;
    }
    v12 = v11 + 4;
    v13 = 4 * v10 - 4;
    while (1)
    {
      v53 = 44;
      MEMORY[0x1A1AF49E0](v54, v44);
      if (v54[0])
      {
        v14 = (const std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24));
        rdbuf = v14->__rdbuf_;
        fmtflags = v14->__fmtflags_;
        v17 = v14[1].__fmtflags_;
        if (v17 == -1)
        {
          std::ios_base::getloc(v14);
          v18 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
          std::locale::~locale(&__b);
          v14[1].__fmtflags_ = v17;
        }
        if ((fmtflags & 0xB0) == 0x20)
          v19 = v54;
        else
          v19 = &v53;
        if (!rdbuf)
          goto LABEL_38;
        width = v14->__width_;
        v21 = width <= 1;
        v22 = width - 1;
        v23 = v21 ? 0 : v22;
        if (v19 - &v53 >= 1
          && (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, &v53, v19 - &v53) != v19 - &v53)
        {
          goto LABEL_38;
        }
        if ((uint64_t)v23 >= 1)
        {
          if (v23 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v23 >= 0x17)
          {
            v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v25 = v23 | 7;
            v26 = v25 + 1;
            p_b = (std::locale::__imp *)operator new(v25 + 1);
            v56 = v23;
            v57 = v26 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v57) = v23;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v17, v23);
          *((_BYTE *)p_b + v23) = 0;
          if (v57 >= 0)
            locale = &__b;
          else
            locale = __b.__locale_;
          v28 = (*(uint64_t (**)(void *, void *, size_t))(*(_QWORD *)rdbuf + 96))(rdbuf, locale, v23);
          v29 = v28;
          if (SHIBYTE(v57) < 0)
          {
            operator delete(__b.__locale_);
            if (v29 != v23)
              goto LABEL_38;
          }
          else if (v28 != v23)
          {
            goto LABEL_38;
          }
        }
        if (v54 - v19 >= 1
          && (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v19, v54 - v19) != v54 - v19)
        {
LABEL_38:
          std::ios_base::clear((std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24)), *(_DWORD *)((char *)&v45[1] + *(_QWORD *)(v44[0] - 24)) | 5);
          goto LABEL_39;
        }
        v14->__width_ = 0;
      }
LABEL_39:
      MEMORY[0x1A1AF49EC](v54);
      std::ostream::operator<<();
      v12 += 4;
      v13 -= 4;
      if (!v13)
        goto LABEL_40;
    }
  }
LABEL_41:
  LOBYTE(__b.__locale_) = 125;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__b, 1);
  v30 = __dst;
  if ((v51 & 0x10) != 0)
  {
    v32 = v50;
    if (v50 < v47)
    {
      v50 = v47;
      v32 = v47;
    }
    v33 = (const void **)&v46;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v31 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_56;
    }
    v33 = (const void **)v45;
    v32 = v45[2];
  }
  v34 = *v33;
  v31 = v32 - (_QWORD)*v33;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    __dst[1] = v31;
    __dst[2] = v36 | 0x8000000000000000;
    *__dst = v37;
    v30 = v37;
    goto LABEL_55;
  }
  *((_BYTE *)__dst + 23) = v31;
  if (v31)
LABEL_55:
    memmove(v30, v34, v31);
LABEL_56:
  *((_BYTE *)v30 + v31) = 0;
  v43[0] = *MEMORY[0x1E0DE4F50];
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44[0] = v38;
  v44[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v49 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v52);
}

void sub_19F791CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void gss::CartoStyle<gss::PropertyID>::~CartoStyle(uint64_t a1)
{
  gss::CartoStyle<gss::PropertyID>::~CartoStyle(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gss::CartoStyle<gss::PropertyID>::to_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string __dst;
  std::string v13;

  if (*(_QWORD *)(a1 + 104))
    v3 = *(const char **)(a1 + 104);
  else
    v3 = "";
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_11:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::insert(&__dst, 0, "[", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v13, "]", 1uLL);
  *a2 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
}

void sub_19F791E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<gss::ConditionalStyle<gss::PropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::ConditionalStyle<gss::PropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::ConditionalStyle<gss::PropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::PropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<gss::ConditionalStyle<gss::PropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::PropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 192);
}

gss::Allocator *std::unique_ptr<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo>>::reset[abi:nn180100](gss::Allocator *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD **)result;
  *(_QWORD *)result = 0;
  if (v1)
  {
    if (v1[1])
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = *v1;
        v5 = *v1 + v2;
        v6 = (_QWORD *)(v5 + 8);
        if (!*(_BYTE *)(v5 + 20) && *v6)
        {
          v7 = gss::Allocator::instance(result);
          result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *v6, 4 * *(unsigned __int16 *)(v4 + v2 + 18));
        }
        *(_QWORD *)((char *)v6 + 5) = 0;
        *v6 = 0;
        ++v3;
        v2 += 24;
      }
      while (v3 < v1[1]);
    }
    v8 = gss::Allocator::instance(result);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, *v1, 24 * v1[2]);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 160);
}

void std::__shared_ptr_emplace<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return gss::StylePropertySet<gss::PropertyID>::~StylePropertySet(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 112);
}

void std::__shared_ptr_emplace<gss::GlobalProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::GlobalProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42DA3B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42DA3B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA400;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA400;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> gss::StyleManagerExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> gss::StyleManagerExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> gss::StyleManagerExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> gss::StyleManagerExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D8318;
  return result;
}

void std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> gss::StyleManagerExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> gss::StyleManagerExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D8318;
}

uint64_t **std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    if (!*v2)
    {
LABEL_13:
      MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
      return a1;
    }
    v4 = v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_12:
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v5, v2[2] - v5);
      goto LABEL_13;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_7;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *v2;
        goto LABEL_12;
      }
    }
  }
  return a1;
}

gss::Allocator *std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~__hash_table(gss::Allocator *a1)
{
  gss::Allocator *v1;
  _QWORD *i;
  uint64_t v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;

  v1 = a1;
  for (i = (_QWORD *)*((_QWORD *)a1 + 3);
        i;
        a1 = (gss::Allocator *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v1 + 4) + 40))(*((_QWORD *)v1 + 4), v5, 48))
  {
    v5 = i;
    i = (_QWORD *)*i;
    v6 = (std::__shared_weak_count *)v5[5];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (!*((_BYTE *)v5 + 30) && v5[2])
    {
      v9 = gss::Allocator::instance(a1);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, v5[2], *((unsigned __int16 *)v5 + 14));
      v5[2] = 0;
    }
  }
  v3 = *(_QWORD *)v1;
  *(_QWORD *)v1 = 0;
  if (v3)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1 + 2) + 40))(*((_QWORD *)v1 + 2), v3, 8 * *((_QWORD *)v1 + 1));
  return v1;
}

uint64_t gss::InternAllocators<gss::PropertyID>::~InternAllocators(_QWORD *a1)
{
  gss::Allocator *v2;
  gss::Allocator *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  gss::Allocator *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;

  v2 = (gss::Allocator *)a1[27];
  if (v2)
  {
    v3 = (gss::Allocator *)a1[28];
    v4 = (void *)a1[27];
    if (v3 != v2)
    {
      do
      {
        v3 = (gss::Allocator *)((char *)v3 - 8);
        std::unique_ptr<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo>>::reset[abi:nn180100](v3);
      }
      while (v3 != v2);
      v4 = (void *)a1[27];
    }
    a1[28] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[23];
  if (v5)
  {
    v6 = (_QWORD *)a1[24];
    v7 = (gss::Allocator *)a1[23];
    if (v6 != v5)
    {
      do
      {
        v9 = (_QWORD *)*--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
        {
          v10 = gss::Allocator::instance(v7);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 40))(v10, *v8, 4 * v8[2]);
          v7 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v8, 0x1010C40113C0ABBLL);
        }
      }
      while (v6 != v5);
      v7 = (gss::Allocator *)a1[23];
    }
    a1[24] = v5;
    operator delete(v7);
  }
  v11 = a1[19];
  if (v11)
  {
    v12 = a1[20];
    v13 = (void *)a1[19];
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)a1[19];
    }
    a1[20] = v11;
    operator delete(v13);
  }
  v17 = a1[15];
  if (v17)
  {
    v18 = a1[16];
    v19 = (void *)a1[15];
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = (void *)a1[15];
    }
    a1[16] = v17;
    operator delete(v19);
  }
  v23 = (_QWORD *)a1[10];
  if (!v23)
    goto LABEL_50;
  v24 = (_QWORD *)a1[11];
  v25 = (void *)a1[10];
  if (v24 == v23)
    goto LABEL_49;
  v26 = (_QWORD *)a1[11];
  do
  {
    v30 = *(v26 - 5);
    v26 -= 5;
    v29 = v30;
    *v26 = 0;
    if (v30)
    {
      v51 = v29;
      v31 = *(v24 - 1);
      if (!v31)
      {
LABEL_79:
        std::__throw_bad_function_call[abi:nn180100]();
        return std::unique_ptr<gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>>::~unique_ptr[abi:nn180100]();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 48))(v31, &v51);
    }
    v27 = (_QWORD *)*(v24 - 1);
    if (v24 - 4 == v27)
    {
      v27 = v24 - 4;
      v28 = 4;
LABEL_40:
      (*(void (**)(void))(*v27 + 8 * v28))();
      goto LABEL_41;
    }
    if (v27)
    {
      v28 = 5;
      goto LABEL_40;
    }
LABEL_41:
    v24 = v26;
  }
  while (v26 != v23);
  v25 = (void *)a1[10];
LABEL_49:
  a1[11] = v23;
  operator delete(v25);
LABEL_50:
  v32 = (_QWORD *)a1[5];
  if (!v32)
    goto LABEL_64;
  v33 = (_QWORD *)a1[6];
  v34 = (void *)a1[5];
  if (v33 == v32)
    goto LABEL_63;
  v35 = (_QWORD *)a1[6];
  while (2)
  {
    v39 = *(v35 - 5);
    v35 -= 5;
    v38 = v39;
    *v35 = 0;
    if (v39)
    {
      v51 = v38;
      v40 = *(v33 - 1);
      if (!v40)
        goto LABEL_79;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v51);
    }
    v36 = (_QWORD *)*(v33 - 1);
    if (v33 - 4 == v36)
    {
      v36 = v33 - 4;
      v37 = 4;
      goto LABEL_54;
    }
    if (v36)
    {
      v37 = 5;
LABEL_54:
      (*(void (**)(void))(*v36 + 8 * v37))();
    }
    v33 = v35;
    if (v35 != v32)
      continue;
    break;
  }
  v34 = (void *)a1[5];
LABEL_63:
  a1[6] = v32;
  operator delete(v34);
LABEL_64:
  v41 = (_QWORD *)*a1;
  if (!*a1)
    return (uint64_t)a1;
  v42 = (_QWORD *)a1[1];
  v43 = (_QWORD *)*a1;
  if (v42 == v41)
    goto LABEL_77;
  v44 = (_QWORD *)a1[1];
  while (2)
  {
    v48 = *(v44 - 5);
    v44 -= 5;
    v47 = v48;
    *v44 = 0;
    if (v48)
    {
      v51 = v47;
      v49 = *(v42 - 1);
      if (!v49)
        goto LABEL_79;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 48))(v49, &v51);
    }
    v45 = (_QWORD *)*(v42 - 1);
    if (v42 - 4 == v45)
    {
      v45 = v42 - 4;
      v46 = 4;
      goto LABEL_68;
    }
    if (v45)
    {
      v46 = 5;
LABEL_68:
      (*(void (**)(void))(*v45 + 8 * v46))();
    }
    v42 = v44;
    if (v44 != v41)
      continue;
    break;
  }
  v43 = (_QWORD *)*a1;
LABEL_77:
  a1[1] = v41;
  operator delete(v43);
  return (uint64_t)a1;
}

uint64_t *std::unique_ptr<gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(v2);
    MEMORY[0x1A1AF4E00](v3, 0x1020C40FE16DC66);
  }
  return a1;
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::PropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E59D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::PropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E59D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::PropertyID>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  gss::Allocator *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;

  if (*(char *)(a1 + 3023) < 0)
    operator delete(*(void **)(a1 + 3000));
  v2 = *(uint64_t **)(a1 + 2984);
  *(_QWORD *)(a1 + 2984) = 0;
  if (v2)
  {
    v3 = *v2;
    if (!*v2)
    {
LABEL_15:
      MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
      goto LABEL_16;
    }
    v4 = v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_14:
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v5, v2[2] - v5);
      goto LABEL_15;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_9;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *v2;
        goto LABEL_14;
      }
    }
  }
LABEL_16:
  v9 = *(uint64_t **)(a1 + 2976);
  *(_QWORD *)(a1 + 2976) = 0;
  if (!v9)
    goto LABEL_29;
  v10 = *v9;
  if (*v9)
  {
    v11 = v9[1];
    v12 = *v9;
    if (v11 == v10)
    {
LABEL_27:
      v9[1] = v10;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[3] + 40))(v9[3], v12, v9[2] - v12);
      goto LABEL_28;
    }
    while (1)
    {
      v15 = v11 - 32;
      v13 = *(_QWORD **)(v11 - 8);
      if ((_QWORD *)(v11 - 32) == v13)
      {
        v13 = (_QWORD *)(v11 - 32);
        v14 = 4;
      }
      else
      {
        if (!v13)
          goto LABEL_22;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_22:
      v11 = v15;
      if (v15 == v10)
      {
        v12 = *v9;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  MEMORY[0x1A1AF4E00](v9, 0x20C40DC1BFBCFLL);
LABEL_29:
  std::mutex::~mutex((std::mutex *)(a1 + 2912));
  std::mutex::~mutex((std::mutex *)(a1 + 2848));
  std::future<void>::~future((std::future<void> *)(a1 + 2840));
  std::future<void>::~future((std::future<void> *)(a1 + 2832));
  MEMORY[0x1A1AF4CB0](a1 + 2824);
  MEMORY[0x1A1AF4CB0](a1 + 2816);
  std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~__hash_table((gss::Allocator *)(a1 + 2752));
  v16 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 2552));
  if ((_DWORD)v16)
    geo::read_write_lock::logFailure(v16, (uint64_t)"destruction", v17);
  std::mutex::~mutex((std::mutex *)(a1 + 2488));
  std::mutex::~mutex((std::mutex *)(a1 + 2424));
  std::mutex::~mutex((std::mutex *)(a1 + 2360));
  std::mutex::~mutex((std::mutex *)(a1 + 2296));
  std::mutex::~mutex((std::mutex *)(a1 + 2232));
  std::mutex::~mutex((std::mutex *)(a1 + 2168));
  std::mutex::~mutex((std::mutex *)(a1 + 2104));
  std::mutex::~mutex((std::mutex *)(a1 + 2040));
  std::mutex::~mutex((std::mutex *)(a1 + 1976));
  std::mutex::~mutex((std::mutex *)(a1 + 1912));
  std::mutex::~mutex((std::mutex *)(a1 + 1848));
  std::mutex::~mutex((std::mutex *)(a1 + 1784));
  std::mutex::~mutex((std::mutex *)(a1 + 1720));
  std::mutex::~mutex((std::mutex *)(a1 + 1656));
  std::mutex::~mutex((std::mutex *)(a1 + 1592));
  std::mutex::~mutex((std::mutex *)(a1 + 1528));
  std::mutex::~mutex((std::mutex *)(a1 + 1464));
  std::mutex::~mutex((std::mutex *)(a1 + 1400));
  std::mutex::~mutex((std::mutex *)(a1 + 1336));
  std::mutex::~mutex((std::mutex *)(a1 + 1272));
  std::mutex::~mutex((std::mutex *)(a1 + 1208));
  std::mutex::~mutex((std::mutex *)(a1 + 1144));
  std::mutex::~mutex((std::mutex *)(a1 + 1080));
  std::mutex::~mutex((std::mutex *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::mutex::~mutex((std::mutex *)(a1 + 824));
  std::mutex::~mutex((std::mutex *)(a1 + 760));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  std::mutex::~mutex((std::mutex *)(a1 + 632));
  std::mutex::~mutex((std::mutex *)(a1 + 568));
  std::mutex::~mutex((std::mutex *)(a1 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators((_QWORD *)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  v18 = *(gss::Allocator **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v18)
  {
    v19 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree((uint64_t)v18);
    v18 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v19, 0x1020C40FE16DC66);
  }
  v20 = (uint64_t *)(a1 + 168);
  if (!*(_BYTE *)(a1 + 180))
  {
    v21 = *v20;
    if (*v20)
    {
      if (*(_WORD *)(a1 + 176))
      {
        v22 = v21 + 16 * *(unsigned __int16 *)(a1 + 176);
        do
        {
          v23 = *(std::__shared_weak_count **)(v21 + 8);
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v26 = gss::Allocator::instance(v18);
      v18 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 40))(v26, *(_QWORD *)(a1 + 168), 16 * *(unsigned __int16 *)(a1 + 178));
    }
  }
  *(_QWORD *)(a1 + 173) = 0;
  *v20 = 0;
  v27 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v27)
    goto LABEL_48;
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v30)
      goto LABEL_54;
  }
  else
  {
LABEL_48:
    v30 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v30)
      goto LABEL_54;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_54:
  v33 = *(std::__shared_weak_count **)(a1 + 120);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (uint64_t *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 100))
  {
    v37 = *v36;
    if (*v36)
    {
      if (*(_WORD *)(a1 + 96))
      {
        v38 = v37 + 16 * *(unsigned __int16 *)(a1 + 96);
        do
        {
          v39 = *(std::__shared_weak_count **)(v37 + 8);
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v37 += 16;
        }
        while (v37 != v38);
      }
      v42 = gss::Allocator::instance(v18);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(a1 + 88), 16 * *(unsigned __int16 *)(a1 + 98));
    }
  }
  *(_QWORD *)(a1 + 93) = 0;
  *v36 = 0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v43 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v43)
    goto LABEL_76;
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (v45)
  {
LABEL_76:
    v46 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v46)
      return;
    goto LABEL_77;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  v46 = *(std::__shared_weak_count **)(a1 + 32);
  if (v46)
LABEL_77:
    std::__shared_weak_count::__release_weak(v46);
}

unsigned __int8 *geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_QWORD *)a3 + 1);
    if ((a3[23] & 0x80u) == 0)
      v6 = a3[23];
    else
      v6 = *((_QWORD *)a3 + 1);
    v7 = a3[24];
    if ((a3[23] & 0x80) != 0)
    {
      v14 = *(const void **)a3;
      while (1)
      {
        v15 = v3[23];
        v16 = (char)v15;
        if ((v15 & 0x80u) != 0)
          v15 = *((_QWORD *)v3 + 1);
        if (v6 == v15)
        {
          v17 = v16 >= 0 ? v3 : *(unsigned __int8 **)v3;
          if (!memcmp(v14, v17, v5) && v7 == v3[24])
            break;
        }
        v3 += 48;
        if (v3 == a2)
          return a2;
      }
    }
    else if (a3[23])
    {
      do
      {
        v8 = v3[23];
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *((_QWORD *)v3 + 1);
        if (v6 == v8)
        {
          if (v9 >= 0)
            v10 = v3;
          else
            v10 = *(unsigned __int8 **)v3;
          v11 = a3;
          v12 = a3[23];
          while (*v11 == *v10)
          {
            ++v11;
            ++v10;
            if (!--v12)
            {
              if (v7 != v3[24])
                break;
              return v3;
            }
          }
        }
        v3 += 48;
      }
      while (v3 != a2);
      return a2;
    }
    else
    {
      while (1)
      {
        v13 = v3[23];
        if ((v13 & 0x80u) != 0)
          v13 = *((_QWORD *)v3 + 1);
        if (v6 == v13 && v7 == v3[24])
          break;
        v3 += 48;
        if (v3 == a2)
          return a2;
      }
    }
  }
  return v3;
}

uint64_t std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_6;
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_6:
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t __Block_byref_object_copy__6039(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6040(uint64_t a1)
{

}

uint64_t md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}::~VKResourceManager(uint64_t a1)
{

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  *(_QWORD *)a1 = &off_1E42B5310;

  return a1;
}

uint64_t std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42D0310;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

  return a1;
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42D0310;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

  JUMPOUT(0x1A1AF4E00);
}

std::string *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E42D0310;
  return std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(a2 + 8), a1 + 8);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

}

std::string *std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>(std::string *a1, uint64_t a2)
{
  id v4;
  void *size;
  std::string *v6;
  __int128 v7;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42B5310;
  a1->__r_.__value_.__l.__size_ = 0;
  v4 = *(id *)(a2 + 8);
  size = (void *)a1->__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)v4;

  v6 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 48);
  return a1;
}

void sub_19F793190(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<NSData * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5310;

  return a1;
}

void geo::_retain_ptr<NSData * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5310;

  JUMPOUT(0x1A1AF4E00);
}

void sub_19F793324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<grl::FontManager  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<grl::FontManager  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::GEODataCacheNode::~GEODataCacheNode(altitude::GEODataCacheNode *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E42C4620;
  v2 = (char *)this + 192;
  v3 = (char *)*((_QWORD *)this + 27);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::~GenericCacheNode(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E42C4620;
  v2 = (char *)this + 192;
  v3 = (char *)*((_QWORD *)this + 27);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::~GenericCacheNode(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[12];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[13];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F793608(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[12] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[13];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, _DWORD *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = (uint64_t **)(a1 + 64);
  v5 = (uint64_t *)std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::TileKey>>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    v6 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5[12] + 16))(v5[12]);
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v6;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    v12 = (std::__shared_weak_count *)v6[13];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v6);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F793834(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::GEODataCacheNode::createRequest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  std::string *v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _QWORD *result;
  void *v18;
  void *__p;
  char v20;
  uint64_t v21[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  pthread_mutexattr_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = a1[4];
  v8 = a1[19];
  v22 = 15;
  strcpy((char *)v21, "/geo/cache/job/");
  v20 = 0;
  LOBYTE(__p) = 0;
  altitude::Tile::createTileName(&v23, (unsigned int *)(a2 + 48), v21, (uint64_t *)&__p);
  karo::Job::Job(v6, v7);
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v6 = off_1E42C5768;
  *(_QWORD *)(v6 + 192) = 0;
  pthread_mutexattr_init(&v25);
  pthread_mutexattr_settype(&v25, 2);
  v9 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v9, &v25);
  pthread_mutexattr_destroy(&v25);
  *(_QWORD *)(v6 + 192) = v9;
  v10 = (std::string *)(v6 + 200);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v23;
    *(_QWORD *)(v6 + 216) = v24;
    *(_BYTE *)(v6 + 224) = 0;
    if ((v20 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v18 = (void *)v23;
  std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
  *(_BYTE *)(v6 + 224) = 0;
  operator delete(v18);
  if (v20 < 0)
LABEL_3:
    operator delete(__p);
LABEL_4:
  if (v22 < 0)
    operator delete((void *)v21[0]);
  *(_QWORD *)v6 = off_1E42C5728;
  *(_BYTE *)(v6 + 225) = 0;
  *(_QWORD *)(v6 + 232) = v8;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 240) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 256) = v11;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_QWORD *)(v6 + 304) = 0;
  v13 = (_BYTE *)a1[21];
  v12 = (_BYTE *)a1[22];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(v6 + 288) = v15;
    *(_QWORD *)(v6 + 296) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(v6 + 304) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(v6 + 296) = v16;
  }
  *(_QWORD *)(v6 + 312) = a1;
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8B08;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void sub_19F793B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  karo::Job *v20;
  pthread_mutex_t **v21;
  void *v22;

  karo::Mutex::~Mutex(v21);
  karo::Job::~Job(v20);
  operator delete(v22);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1A1AF4E00](v20, 0x10B3C407B33DE98);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 64);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 68);
      v12 = *(_DWORD *)(v8 + 72);
      v13 = *(_BYTE *)(v8 + 76);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 80;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F793D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F793EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::TileKey>>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 12);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 13);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void sub_19F793FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::TileKey>,karo::AsyncRequestManagerNoArgs>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t **v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = (uint64_t **)std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::TileKey>>((uint64_t)(a1 + 8), (_DWORD *)a2);
  v10 = v9;
  if (a1 + 9 != v9)
  {
    v12 = v9[12];
    v11 = v9[13];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
    return;
  }
  (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v54, a1, a2, a3);
  v16 = v54;
  v15 = v55;
  *a4 = v54;
  a4[1] = (uint64_t *)v15;
  v17 = *v10;
  if (!*v10)
  {
    v26 = (char *)v10;
    v25 = v10;
LABEL_49:
    v38 = operator new(0x70uLL);
    v39 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v38 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v38 + 3) = v39;
    v40 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v38 + 4) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v38 + 5) = v40;
    *((_QWORD *)v38 + 12) = 0;
    *((_QWORD *)v38 + 13) = 0;
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0;
    *((_QWORD *)v38 + 2) = v26;
    *v25 = (uint64_t *)v38;
    v41 = (_QWORD *)**v8;
    v42 = (uint64_t *)v38;
    if (v41)
    {
      *v8 = v41;
      v42 = *v25;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v42);
    ++a1[10];
    if (v15)
      goto LABEL_52;
    goto LABEL_54;
  }
  v18 = *(_DWORD *)(a2 + 48);
  v19 = *(_DWORD *)(a2 + 52);
  v20 = *(_DWORD *)(a2 + 56);
  v21 = *(_DWORD *)(a2 + 60);
  v22 = *(_DWORD *)(a2 + 32);
  v23 = *(_DWORD *)(a2 + 36);
  v24 = *(_DWORD *)(a2 + 40);
  while (1)
  {
    while (1)
    {
      v26 = (char *)v17;
      v27 = *((_DWORD *)v17 + 20);
      if (v18 != v27 || v19 != *((_DWORD *)v26 + 21) || v20 != *((_DWORD *)v26 + 22) || *((_DWORD *)v26 + 23) != v21)
        break;
      v28 = *((_DWORD *)v26 + 16);
      v29 = v22 >= v28;
      if (v22 == v28 && (v30 = *((_DWORD *)v26 + 17), v29 = v23 >= v30, v23 == v30))
      {
        if (v24 >= *((_DWORD *)v26 + 18))
          goto LABEL_32;
      }
      else if (v29)
      {
        goto LABEL_32;
      }
LABEL_9:
      v17 = *(uint64_t **)v26;
      v25 = (uint64_t **)v26;
      if (!*(_QWORD *)v26)
        goto LABEL_49;
    }
    if (v18 < v27)
      goto LABEL_9;
    if (v18 <= v27)
    {
      v31 = *((_DWORD *)v26 + 21);
      if (v19 < v31)
        goto LABEL_9;
      if (v19 <= v31)
      {
        v32 = *((_DWORD *)v26 + 22);
        if (v20 < v32 || v20 <= v32 && v21 < *((_DWORD *)v26 + 23))
          goto LABEL_9;
      }
    }
    if (v18 == v27 && *((_DWORD *)v26 + 21) == v19 && *((_DWORD *)v26 + 22) == v20)
      break;
LABEL_39:
    if (v27 >= v18)
    {
      if (v27 > v18)
        goto LABEL_68;
      v36 = *((_DWORD *)v26 + 21);
      if (v36 >= v19)
      {
        if (v36 > v19)
          goto LABEL_68;
        v37 = *((_DWORD *)v26 + 22);
        if (v37 >= v20 && (v37 > v20 || *((_DWORD *)v26 + 23) >= v21))
          goto LABEL_68;
      }
    }
LABEL_46:
    v25 = (uint64_t **)(v26 + 8);
    v17 = (uint64_t *)*((_QWORD *)v26 + 1);
    if (!v17)
      goto LABEL_49;
  }
LABEL_32:
  if (v21 != *((_DWORD *)v26 + 23))
    goto LABEL_39;
  v33 = *((_DWORD *)v26 + 16);
  v34 = v33 >= v22;
  if (v33 == v22)
  {
    v35 = *((_DWORD *)v26 + 17);
    v34 = v35 >= v23;
    if (v35 == v23)
      v34 = *((_DWORD *)v26 + 18) >= v24;
  }
  if (!v34)
    goto LABEL_46;
LABEL_68:
  v38 = v26;
  if (!v15)
    goto LABEL_54;
LABEL_52:
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v44 = __ldxr(p_shared_owners);
  while (__stxr(v44 + 1, p_shared_owners));
LABEL_54:
  v45 = (std::__shared_weak_count *)*((_QWORD *)v38 + 13);
  *((_QWORD *)v38 + 12) = v16;
  *((_QWORD *)v38 + 13) = v15;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = a1[6];
  if (v48)
  {
    v49 = *a4;
    v50 = (std::__shared_weak_count *)a4[1];
    v54 = v49;
    v55 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      karo::JobManager::queueJob(v48, &v54);
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    else
    {
      karo::JobManager::queueJob(v48, &v54);
    }
  }
}

void sub_19F794328(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::requestCached(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  int *i;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80;
  int *v81;
  uint64_t v82;
  void (**v83)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *__p[2];
  __int128 v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = &off_1E42C2D08;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 144))(__p, a1, a2);
  v10 = a2[1];
  v90[0] = *a2;
  v90[1] = v10;
  v91 = *(_OWORD *)__p;
  v92 = v89;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v11 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v11)
    goto LABEL_42;
  v12 = ((unint64_t)v92 << 58) | ((unint64_t)(DWORD1(v92) & 0x1FFFFFFF) << 29) | DWORD2(v92) & 0x1FFFFFFF;
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = ((unint64_t)v92 << 58) | ((unint64_t)(DWORD1(v92) & 0x1FFFFFFF) << 29) | DWORD2(v92) & 0x1FFFFFFF;
    if (v12 >= *(_QWORD *)&v11)
      v14 = v12 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = v12 & (*(_QWORD *)&v11 - 1);
  }
  v15 = *(uint64_t ***)(*(_QWORD *)(a1 + 96) + 8 * v14);
  if (!v15)
    goto LABEL_42;
  v16 = *v15;
  if (!*v15)
    goto LABEL_42;
  if (v13.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      v19 = v16[1];
      if (v19 == v12)
      {
        if (*((_DWORD *)v16 + 8) == (_DWORD)v92
          && *(uint64_t *)((char *)v16 + 36) == *(_QWORD *)((char *)&v92 + 4)
          && HIDWORD(v92) == *((_DWORD *)v16 + 11)
          && *((_DWORD *)v16 + 4) == (_DWORD)v91
          && *(uint64_t *)((char *)v16 + 20) == *(_QWORD *)((char *)&v91 + 4))
        {
          goto LABEL_31;
        }
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_42;
      }
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v18 = v16[1];
    if (v18 == v12)
      break;
    if (v18 >= *(_QWORD *)&v11)
      v18 %= *(_QWORD *)&v11;
    if (v18 != v14)
      goto LABEL_42;
LABEL_13:
    v16 = (uint64_t *)*v16;
    if (!v16)
      goto LABEL_42;
  }
  if (*((_DWORD *)v16 + 8) != (_DWORD)v92
    || *(uint64_t *)((char *)v16 + 36) != *(_QWORD *)((char *)&v92 + 4)
    || HIDWORD(v92) != *((_DWORD *)v16 + 11)
    || *((_DWORD *)v16 + 4) != (_DWORD)v91
    || *(uint64_t *)((char *)v16 + 20) != *(_QWORD *)((char *)&v91 + 4))
  {
    goto LABEL_13;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v91, v16 + 2) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), v16);
    v25 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v89)
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 7);
        if (v26)
          std::__shared_weak_count::__release_weak(v26);
      }
      operator delete(v25);
    }
    goto LABEL_42;
  }
  v20 = (std::__shared_weak_count *)v16[7];
  if (!v20)
  {
LABEL_42:
    v86 = 0;
    v87 = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    goto LABEL_43;
  }
  v21 = v16[6];
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v86 = 0;
  v24 = std::__shared_weak_count::lock(v20);
  v87 = v24;
  if (v24)
    v86 = v21;
  else
    v21 = 0;
  std::__shared_weak_count::__release_weak(v20);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  if (v21)
  {
    *a5 = v21;
    a5[1] = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v77 = __ldxr(p_shared_owners);
      while (__stxr(v77 + 1, p_shared_owners));
    }
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = &off_1E42C2D08;
    if (!v24)
      return;
LABEL_91:
    v65 = (unint64_t *)&v24->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    return;
  }
LABEL_43:
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(&v83, a1, v90, a3, a4, 300, 1, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v83) == 4)
  {
    v80 = 0;
    v81 = 0;
    v82 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _OWORD *, void **))(*(_QWORD *)a1 + 136))(&v78, a1, &v84, v90, &v80);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
    v27 = std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>((uint64_t *)(a1 + 96), (int *)&v91, &v91);
    v29 = v78;
    v28 = v79;
    if (v79)
    {
      v30 = (unint64_t *)&v79->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = (std::__shared_weak_count *)v27[7];
    v27[6] = v29;
    v27[7] = v28;
    if (v32)
      std::__shared_weak_count::__release_weak(v32);
    for (i = (int *)v80; i != v81; i += 8)
    {
      v34 = std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>((uint64_t *)(a1 + 96), i, i);
      v36 = v78;
      v35 = v79;
      if (v79)
      {
        v37 = (unint64_t *)&v79->__shared_weak_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = (std::__shared_weak_count *)v34[7];
      v34[6] = v36;
      v34[7] = v35;
      if (v39)
        std::__shared_weak_count::__release_weak(v39);
    }
    v46 = *(_DWORD *)(a1 + 144) + 1;
    *(_DWORD *)(a1 + 144) = v46;
    if (v46 <= 0x14 || (*(_DWORD *)(a1 + 144) = 0, (v47 = *(_QWORD **)(a1 + 112)) == 0))
    {
LABEL_66:
      v48 = v79;
      *a5 = v78;
      a5[1] = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v51 = v84;
      v52 = v85;
      a5[2] = &off_1E42C2D08;
      a5[3] = v51;
      a5[4] = v52;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      if (v51)
      {
        v55 = (unsigned int *)(v51 + 128);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 + 1, v55));
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
      v57 = v79;
      if (v79)
      {
        v58 = (unint64_t *)&v79->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if (v80)
      {
        v81 = (int *)v80;
        operator delete(v80);
      }
      goto LABEL_82;
    }
    while (1)
    {
      v67 = (std::__shared_weak_count *)v47[7];
      if (v67)
      {
        v68 = std::__shared_weak_count::lock(v67);
        if (v68)
        {
          v69 = v68;
          v70 = v47[6];
          v71 = (unint64_t *)&v68->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (v72)
          {
            if (v70)
              goto LABEL_104;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v69);
            if (v70)
            {
LABEL_104:
              v47 = (_QWORD *)*v47;
              if (!v47)
                goto LABEL_66;
              continue;
            }
          }
        }
      }
      v73 = (_QWORD *)*v47;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), v47);
      v74 = __p[0];
      if (__p[0])
      {
        if ((_BYTE)v89)
        {
          v75 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 7);
          if (v75)
            std::__shared_weak_count::__release_weak(v75);
        }
        operator delete(v74);
      }
      v47 = v73;
      if (!v73)
        goto LABEL_66;
    }
  }
  *a5 = 0;
  a5[1] = 0;
  v40 = v84;
  v41 = v85;
  a5[2] = &off_1E42C2D08;
  a5[3] = v40;
  a5[4] = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  if (v40)
  {
    v44 = (unsigned int *)(v40 + 128);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
  }
LABEL_82:
  v83 = &off_1E42C2D08;
  if (v84)
  {
    v60 = (unsigned int *)(v84 + 128);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
  }
  v62 = v85;
  if (v85)
  {
    v63 = (unint64_t *)&v85->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v24 = v87;
  if (v87)
    goto LABEL_91;
}

void sub_19F7949C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 136));
  _Unwind_Resume(a1);
}

void sub_19F7949D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v17 + 136));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL altitude::GEODataCacheNode::hasDataAvailable(uint64_t a1, __int128 *a2)
{
  return altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32), a2 + 1, *(unsigned int *)a2) != 0;
}

uint64_t altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::clear(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v6;
  std::__shared_weak_count *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v2 = *(_QWORD **)(a1 + 112);
    if (v2)
    {
      do
      {
        v6 = (_QWORD *)*v2;
        v7 = (std::__shared_weak_count *)v2[7];
        if (v7)
          std::__shared_weak_count::__release_weak(v7);
        operator delete(v2);
        v2 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
}

uint64_t altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::hasValidKey()
{
  return 1;
}

void altitude::GEODataCacheNode::fetchData(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD **)a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3)
      return;
    goto LABEL_11;
  }
  v7 = v4[35];
  *a2 = v4[34];
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v3)
  {
LABEL_11:
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19F794BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t altitude::GEODataCacheNode::getCacheKeyForKey@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v5;
  result = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32), a2 + 1, v4);
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v7;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>(uint64_t *a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  void *v48;

  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  v9 = (v6 << 58) | ((unint64_t)(v7 & 0x1FFFFFFF) << 29) | v8 & 0x1FFFFFFF;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (v6 << 58) | ((unint64_t)(v7 & 0x1FFFFFFF) << 29) | v8 & 0x1FFFFFFF;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = a2[7];
        v15 = *a2;
        v16 = a2[1];
        v17 = a2[2];
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v13[1];
            if (v19 == v9)
            {
              if (v13[4] == __PAIR64__(v7, v6)
                && *((_DWORD *)v13 + 10) == v8
                && v14 == *((_DWORD *)v13 + 11)
                && *((_DWORD *)v13 + 4) == v15
                && *((_DWORD *)v13 + 5) == v16
                && *((_DWORD *)v13 + 6) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v18 = v13[1];
          if (v18 == v9)
          {
            if (v13[4] == __PAIR64__(v7, v6)
              && *((_DWORD *)v13 + 10) == v8
              && v14 == *((_DWORD *)v13 + 11)
              && *((_DWORD *)v13 + 4) == v15
              && *((_DWORD *)v13 + 5) == v16
              && *((_DWORD *)v13 + 6) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v10)
              v18 %= v10;
            if (v18 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v20 = a1 + 2;
  v13 = operator new(0x40uLL);
  *v13 = 0;
  v13[1] = v9;
  v21 = a3[1];
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v21;
  v13[6] = 0;
  v13[7] = 0;
  v22 = (float)(unint64_t)(a1[3] + 1);
  v23 = *((float *)a1 + 8);
  if (!v10 || (float)(v23 * (float)v10) < v22)
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = a1[1];
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_70;
      v38 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v10)
      {
        v10 = a1[1];
LABEL_70:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v48 = (void *)*a1;
        *a1 = 0;
        if (v48)
          operator delete(v48);
        v10 = 0;
        a1[1] = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = (void *)*a1;
    *a1 = (uint64_t)v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v30++) = 0;
    while (prime != v30);
    v31 = (_QWORD *)*v20;
    if (!*v20)
    {
LABEL_69:
      v10 = prime;
      goto LABEL_70;
    }
    v32 = v31[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*a1 + 8 * v34) = v20;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v31 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v36))
        {
          *v31 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*a1 + v37);
          **(_QWORD **)(*a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v36) = v31;
          v31 = i;
          v34 = v36;
        }
      }
      goto LABEL_69;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*a1 + 8 * v32) = v20;
    v41 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_69;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*a1 + 8 * v43))
        {
          *(_QWORD *)(*a1 + 8 * v43) = v31;
          goto LABEL_74;
        }
        *v31 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*a1 + v42);
        **(_QWORD **)(*a1 + v42) = v41;
        v41 = v31;
      }
      v43 = v32;
LABEL_74:
      v31 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_69;
    }
  }
LABEL_83:
  v44 = *a1;
  v45 = *(_QWORD **)(*a1 + 8 * v3);
  if (v45)
  {
    *v13 = *v45;
LABEL_91:
    *v45 = v13;
    goto LABEL_92;
  }
  *v13 = *v20;
  *v20 = v13;
  *(_QWORD *)(v44 + 8 * v3) = v20;
  if (*v13)
  {
    v46 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v46 >= v10)
        v46 %= v10;
    }
    else
    {
      v46 &= v10 - 1;
    }
    v45 = (_QWORD *)(*a1 + 8 * v46);
    goto LABEL_91;
  }
LABEL_92:
  ++a1[3];
  return v13;
}

void sub_19F795120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<altitude::TileKey,std::weak_ptr<altitude::GEOTileDataPrivate>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[7];
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }
  return a1;
}

_DWORD *std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::TileKey>>(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_DWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = a2[12];
  v5 = a2[13];
  v8 = a2[14];
  v7 = a2[15];
  v10 = a2[8];
  v9 = a2[9];
  v11 = v2;
  v12 = a2[10];
  do
  {
    while (1)
    {
      v13 = *((_DWORD *)v3 + 20);
      if (v13 == v6 && *((_DWORD *)v3 + 21) == v5 && *((_DWORD *)v3 + 22) == v8 && v7 == *((_DWORD *)v3 + 23))
        break;
      if (v13 < v6)
        goto LABEL_3;
      if (v13 > v6)
        goto LABEL_21;
      v17 = *((_DWORD *)v3 + 21);
      if (v17 < v5)
        goto LABEL_3;
      if (v17 > v5)
        goto LABEL_21;
      v18 = *((_DWORD *)v3 + 22);
      if (v18 < v8)
        goto LABEL_3;
      if (v18 > v8)
        goto LABEL_21;
      v15 = *((_DWORD *)v3 + 23) >= v7;
LABEL_19:
      if (v15)
        goto LABEL_21;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_22;
    }
    v14 = *((_DWORD *)v3 + 16);
    v15 = v14 >= v10;
    if (v14 != v10)
      goto LABEL_19;
    v16 = *((_DWORD *)v3 + 17);
    v15 = v16 >= v9;
    if (v16 != v9)
      goto LABEL_19;
    if (*((_DWORD *)v3 + 18) < v12)
      goto LABEL_3;
LABEL_21:
    v11 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_22:
  if (v11 == v2)
    return v2;
  v19 = v11[20];
  if (v6 != v19 || v5 != v11[21] || v8 != v11[22] || v11[23] != v7)
  {
    if (v6 < v19)
      return v2;
    if (v6 > v19)
      return v11;
    v23 = v11[21];
    if (v5 < v23)
      return v2;
    if (v5 > v23)
      return v11;
    v24 = v11[22];
    if (v8 < v24)
      return v2;
    if (v8 > v24)
      return v11;
    v21 = v7 >= v11[23];
    goto LABEL_38;
  }
  v20 = v11[16];
  v21 = v10 >= v20;
  if (v10 != v20 || (v22 = v11[17], v21 = v9 >= v22, v9 != v22))
  {
LABEL_38:
    if (!v21)
      return v2;
    return v11;
  }
  if (v12 >= v11[18])
    return v11;
  return v2;
}

void std::__shared_ptr_pointer<altitude::GEODataCacheNodeJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::GEODataCacheNodeJob>,std::allocator<altitude::GEODataCacheNodeJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::GEODataCacheNodeJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::GEODataCacheNodeJob>,std::allocator<altitude::GEODataCacheNodeJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::GenericCacheNodeJob::~GenericCacheNodeJob(altitude::GenericCacheNodeJob *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v2 = *((_QWORD *)this + 24);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
}

void altitude::GEODataCacheNodeJob::~GEODataCacheNodeJob(altitude::GEODataCacheNodeJob *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42C5728;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v6 = *((_QWORD *)this + 24);
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42C5728;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v6 = *((_QWORD *)this + 24);
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::GEODataCacheNodeJob::jobStep(altitude::GEODataCacheNodeJob *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t **v5;
  int v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int *i;
  uint64_t v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  std::__shared_weak_count *v53;
  void (**v54)(karo::AsyncFileLoader::FileObject *__hidden);
  uint64_t v55;
  std::__shared_weak_count *v56;
  pthread_mutex_t **v57;
  std::__shared_weak_count *v58;
  int v59;
  id v60;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 29);
  v3 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v4 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(void (***__return_ptr)(karo::AsyncFileLoader::FileObject *__hidden), uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(&v54, v2, (char *)this + 240, v3, v4, 0xFFFFFFFFLL, 1);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v54) != 4)
  {
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v54))
    {
      v8 = v56;
      v51[0] = v55;
      v51[1] = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        karo::Job::addBlockingSubJob((uint64_t *)this, v51, 1, 0);
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v51, 1, 0);
      }
    }
    else
    {
      (*(void (**)(altitude::GEODataCacheNodeJob *))(*(_QWORD *)this + 16))(this);
    }
    goto LABEL_32;
  }
  v5 = v57;
  pthread_mutex_lock(v57[19]);
  v6 = *((_DWORD *)v5 + 40);
  pthread_mutex_unlock(v5[19]);
  if ((v6 & 1) != 0)
    v7 = (void *)(*(uint64_t (**)(pthread_mutex_t **))&(*v57)->__opaque[48])(v57);
  else
    v7 = 0;
  v12 = v7;
  v13 = operator new();
  *(_QWORD *)v13 = off_1E42C53B0;
  v14 = *((_OWORD *)this + 16);
  *(_OWORD *)(v13 + 8) = *((_OWORD *)this + 15);
  *(_OWORD *)(v13 + 24) = v14;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_QWORD *)(v13 + 104) = 0;
  v15 = (_QWORD *)operator new();
  *v15 = &off_1E42E89F0;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v13;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 34) = v13;
  *((_QWORD *)this + 35) = v15;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *((_QWORD *)this + 34);
  v20 = *(void **)(v19 + 40);
  if (v20)
  {
    *(_QWORD *)(v19 + 40) = 0;

  }
  v21 = v12;
  *(_QWORD *)(v19 + 40) = v21;
  v22 = *((_QWORD *)this + 39);
  v23 = *(_QWORD *)(v22 + 216);
  if (v23)
  {
    if (v23 != v22 + 192)
    {
      v62 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      if (!v62)
        goto LABEL_26;
      goto LABEL_47;
    }
    v62 = v61;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v23 + 24))(v23, v61);
    if (v62)
    {
LABEL_47:
      for (i = (int *)*((_QWORD *)this + 36); ; ++i)
      {
        if (i == *((int **)this + 37))
          goto LABEL_26;
        v36 = *((_QWORD *)this + 34);
        v37 = *i;
        v60 = v21;
        v59 = v37;
        if (!v62)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        (*(void (**)(uint64_t *__return_ptr, _BYTE *, id *, int *))(*(_QWORD *)v62 + 48))(&v52, v62, &v60, &v59);
        if (v37 < 2)
          break;
        v38 = 0;
        do
        {
          ++v38;
          v39 = v37 > 3;
          v37 = v37 >> 1;
        }
        while (v39);
        v41 = v52;
        v40 = v53;
        if (v53)
          goto LABEL_57;
LABEL_59:
        v44 = v36 + 16 * v38;
        *(_QWORD *)(v44 + 48) = v41;
        v45 = *(std::__shared_weak_count **)(v44 + 56);
        *(_QWORD *)(v44 + 56) = v40;
        if (!v45)
          goto LABEL_63;
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
          v48 = v53;
          if (!v53)
            continue;
        }
        else
        {
LABEL_63:
          v48 = v53;
          if (!v53)
            continue;
        }
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v38 = 0;
      v41 = v52;
      v40 = v53;
      if (!v53)
        goto LABEL_59;
LABEL_57:
      v42 = (unint64_t *)&v40->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      goto LABEL_59;
    }
  }
  else
  {
    v62 = 0;
  }
LABEL_26:

  karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v24 = (*((_DWORD *)this + 40) & 2) == 0;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  *((_BYTE *)this + 225) = v24;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  v25 = v62;
  if (v62 == v61)
  {
    v26 = 4;
    v25 = v61;
    goto LABEL_30;
  }
  if (v62)
  {
    v26 = 5;
LABEL_30:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
LABEL_32:
  v54 = &off_1E42C2C18;
  v27 = v58;
  if (v58)
  {
    v28 = (unint64_t *)&v58->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v54 = &off_1E42C2D08;
  if (v55)
  {
    v30 = (unsigned int *)(v55 + 128);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
  }
  v32 = v56;
  if (v56)
  {
    v33 = (unint64_t *)&v56->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_19F7959FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  karo::AsyncFileLoader::FileObject::~FileObject((karo::AsyncFileLoader::FileObject *)va);
  _Unwind_Resume(a1);
}

uint64_t altitude::GEODataCacheNodeJob::succeeded(altitude::GEODataCacheNodeJob *this)
{
  return *((unsigned __int8 *)this + 225);
}

void std::__shared_ptr_pointer<altitude::GEOTileDataPrivate *,std::shared_ptr<altitude::GEOTileDataPrivate>::__shared_ptr_default_delete<altitude::GEOTileDataPrivate,altitude::GEOTileDataPrivate>,std::allocator<altitude::GEOTileDataPrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::GEOTileDataPrivate *,std::shared_ptr<altitude::GEOTileDataPrivate>::__shared_ptr_default_delete<altitude::GEOTileDataPrivate,altitude::GEOTileDataPrivate>,std::allocator<altitude::GEOTileDataPrivate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::~GenericCacheNode(karo::AsyncRequestManager *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = off_1E42C48C0;
  pthread_mutex_destroy(*((pthread_mutex_t **)a1 + 17));
  v2 = *((_QWORD *)a1 + 17);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)a1 + 17) = 0;
  v3 = (_QWORD *)*((_QWORD *)a1 + 14);
  if (v3)
  {
    do
    {
      v5 = (_QWORD *)*v3;
      v6 = (std::__shared_weak_count *)v3[7];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)*((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E42C30D8;
  while (*((_QWORD *)a1 + 10))
    (*(void (**)(karo::AsyncRequestManager *, uint64_t))(*(_QWORD *)a1 + 48))(a1, *((_QWORD *)a1 + 8) + 32);
  std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)a1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(a1);
}

void sub_19F795B9C(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[13];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

__n128 altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::getCacheKeyForKey@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t altitude::GEODataCacheNode::GEODataCacheNode(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  pthread_mutex_t *v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = karo::AsyncRequestManager::AsyncRequestManager((_QWORD *)a1, a2, a3);
  v6[9] = 0;
  v6[10] = 0;
  v6[8] = v6 + 9;
  *((_DWORD *)v6 + 22) = 0;
  *v6 = off_1E42C48C0;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_DWORD *)v6 + 32) = 1065353216;
  v6[17] = 0;
  pthread_mutexattr_init(&v13);
  pthread_mutexattr_settype(&v13, 2);
  v7 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v7, &v13);
  pthread_mutexattr_destroy(&v13);
  *(_QWORD *)(a1 + 136) = v7;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &off_1E42C4620;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  v8 = *(const void **)a4;
  v9 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v9)
  {
    if (v9 < 0)
      abort();
    v10 = (char *)operator new(v9);
    *(_QWORD *)(a1 + 168) = v10;
    *(_QWORD *)(a1 + 176) = v10;
    v11 = &v10[4 * (v9 >> 2)];
    *(_QWORD *)(a1 + 184) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 176) = v11;
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 1;
  return a1;
}

void sub_19F795D8C(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  altitude::GenericCacheNode<altitude::TileKey,altitude::GEOTileDataPrivate>::~GenericCacheNode(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::DaVinciGroundShadowMapShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  char v183;
  int64x2_t v184;
  int64x2_t v185;
  __int128 v187;
  __int128 v188;
  _BYTE v189[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v183 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v184 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B98;
    v187 = *(_OWORD *)(a2 + 16);
    v188 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v179 & 1) == 0
            {
              if ((v182 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1ECE30C98 = 1;
            }
            ggl::DaVinci::GroundShadowMapPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            if ((v180 & 1) == 0
            {
              ggl::DaVinci::pipelineDataGroundShadowMapPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              *(_QWORD *)algn_1EE582038 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1EE581C18 = (uint64_t)&ggl::DaVinci::pipelineDataGroundShadowMapPipelineDeviceStructs(void)::ref;
            unk_1EE581C20 = 2;
            if ((v181 & 1) == 0
            {
              ggl::DaVinci::pipelineDataGroundShadowMapPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE582620 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE582628 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1EE582630 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1EE582638 = (uint64_t)ggl::Tile::LinearDepth::reflection(void)::reflection;
              unk_1EE582640 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1EE581C28 = (uint64_t)&ggl::DaVinci::pipelineDataGroundShadowMapPipelineConstantStructs(void)::ref;
            unk_1EE581C30 = xmmword_19FFB48B0;
          }
        }
        ggl::DaVinci::GroundShadowMapPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundShadowMapPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciGroundShadowMapShader::typedReflection(v174);
        qword_1EE581C50 = (uint64_t)&ggl::DaVinciGroundShadowMapShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundShadowMapPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE582CE0 = 0;
          qword_1EE582CE8 = (uint64_t)"";
          dword_1EE582CF0 = 0;
          qword_1EE582CF8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineAttributeBinding_0(void)::attr;
          unk_1EE582D00 = 2;
        }
        qword_1EE581C58 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineAttributeStructBinding(void)::attr;
        unk_1EE581C60 = 1;
        qword_1EE581C68 = 0;
        unk_1EE581C70 = 0;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE582B28 = 0;
          qword_1EE582B30 = (uint64_t)"instanceTransform";
          dword_1EE582B38 = 2;
          qword_1EE582B40 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1EE582B48 = xmmword_19FFB2E40;
          qword_1EE582B58 = 1;
          unk_1EE582B60 = "elevations";
          dword_1EE582B68 = 2;
          qword_1EE582B70 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceElevationsBinding(void)::reflection;
          unk_1EE582B78 = 0;
        }
        qword_1EE581C78 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineDeviceStructBinding(void)::ref;
        unk_1EE581C80 = 2;
        if ((v178 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE582BC0 = 0;
          qword_1EE582BC8 = (uint64_t)"view";
          dword_1EE582BD0 = 3;
          qword_1EE582BD8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantViewBinding(void)::reflection;
          unk_1EE582BE0 = xmmword_19FFB35A0;
          qword_1EE582BF0 = 1;
          unk_1EE582BF8 = "transform";
          dword_1EE582C00 = 3;
          qword_1EE582C08 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantTransformBinding(void)::reflection;
          *(_OWORD *)algn_1EE582C10 = xmmword_19FFB3660;
          qword_1EE582C20 = 2;
          unk_1EE582C28 = "shadow";
          dword_1EE582C30 = 3;
          qword_1EE582C38 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantShadowBinding(void)::reflection;
          unk_1EE582C40 = xmmword_19FFB3040;
          qword_1EE582C50 = 3;
          unk_1EE582C58 = "positionScaleInfo";
          dword_1EE582C60 = 3;
          qword_1EE582C68 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantPositionScaleInfoBinding(void)::reflection;
          *(_OWORD *)algn_1EE582C70 = xmmword_19FFB3050;
          qword_1EE582C80 = 4;
          unk_1EE582C88 = "linearDepth";
          dword_1EE582C90 = 3;
          qword_1EE582C98 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantLinearDepthBinding(void)::reflection;
          unk_1EE582CA0 = xmmword_19FFB4860;
          qword_1EE582CB0 = 5;
          unk_1EE582CB8 = "tileClipping";
          dword_1EE582CC0 = 3;
          qword_1EE582CC8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantTileClippingBinding(void)::reflection;
          unk_1EE582CD0 = 2;
        }
        qword_1EE581C88 = (uint64_t)&ggl::DaVinci::pipelineStateGroundShadowMapPipelineConstantStructBinding(void)::ref;
        unk_1EE581C90 = 6;
      }
    }
    v81 = v184;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v189 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v189[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundShadowMapPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v187;
    *(_OWORD *)&v78[12].__shared_owners_ = v188;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v189[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v189;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v185 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v185;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v183;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC760;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F796CC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 104));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile17PositionScaleInfoEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile17PositionScaleInfoEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D67D0;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundShadowMapPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundShadowMapPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::media::JpegLoaderFig::loadFromChunk(int *a1, pwin_jpg *this, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  uint64_t v9;
  int ImageForIndex;
  NSObject *v11;
  NSObject *v12;
  void (__cdecl *v14)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  IOSurfaceRef IOSurface;
  int v19;
  int v20;
  void *BaseAddress;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  CFTypeRef cf;
  std::__shared_weak_count *v46;
  int v47[2];
  uint8_t buf[16];
  void (__cdecl *v49)(std::__shared_weak_count *__hidden);
  uint32_t seed[2];

  if (*a1 == 6)
    return 0;
  *(_QWORD *)v47 = 0;
  pwin_jpg::p_info_mem_jpg(this, a3, &v47[1], v47, a5);
  if (md::HardwareFigDecoder::instance(void)::once != -1)
    dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
  v9 = *(_QWORD *)md::HardwareFigDecoder::instance(void)::_singleton;
  cf = 0;
  *(_QWORD *)seed = 0;
  if ((md::HardwareFigDecoderInternal::createContainer(v9, (uint64_t)this, (uint64_t)a3, &cf, seed) & 1) == 0)
    goto LABEL_11;
  md::HardwareFigDecoderInternal::getOrCreateSession(v9);
  v49 = 0;
  ImageForIndex = CMPhotoDecompressionContainerCreateImageForIndex();
  CFRelease(cf);
  if (ImageForIndex)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v11 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - failed to decode image", buf, 2u);
    }

    goto LABEL_11;
  }
  v14 = v49;
  if (!v49)
  {
LABEL_11:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v12 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf) = 0;
      _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_ERROR, "Failed to decode JPEG image with hardware decoder.", (uint8_t *)&cf, 2u);
    }

    return 0;
  }
  v15 = (std::__shared_weak_count_vtbl *)operator new();
  v15->~__shared_weak_count = v14;
  CFRetain(v14);
  cf = v15;
  v16 = (std::__shared_weak_count *)operator new();
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8788;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = v15;
  v46 = v16;
  seed[0] = 0;
  IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)v14);
  CFRetain(IOSurface);
  IOSurfaceIncrementUseCount(IOSurface);
  IOSurfaceLock(IOSurface, 0, seed);
  v20 = v47[0];
  v19 = v47[1];
  BaseAddress = IOSurfaceGetBaseAddress(IOSurface);
  karo::media::Image::setFormat(a4, *a1);
  v22 = *(int **)(a4 + 8);
  v44 = (uint64_t)BaseAddress;
  if (v22)
  {
    *v22 = v19;
    v22[1] = v20;
    v23 = v22[2];
    if (v23 > 0x3A)
      v24 = 1;
    else
      v24 = qword_1A00836F8[v23];
  }
  else
  {
    v24 = 0;
  }
  v25 = (std::__shared_weak_count *)operator new(0x40uLL);
  v26 = v25;
  v27 = v20 * v19;
  v25->__shared_owners_ = 0;
  v28 = (unint64_t *)&v25->__shared_owners_;
  v29 = v24 * v27;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6028;
  v30 = &v25[1].__vftable;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4128;
  v25[1].__shared_owners_ = 0;
  v25[1].__shared_weak_owners_ = 0;
  v25[2].__vftable = v15;
  v25[2].__shared_owners_ = (uint64_t)v16;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  v25[1].__shared_owners_ = v44;
  v25[1].__shared_weak_owners_ = v29;
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v34 = *(_QWORD *)(a4 + 8);
  if (v34)
  {
    v35 = *(_QWORD **)(v34 + 16);
    do
      v36 = __ldxr(v28);
    while (__stxr(v36 + 1, v28));
    v37 = (std::__shared_weak_count *)v35[1];
    *v35 = v30;
    v35[1] = v26;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  do
    v40 = __ldaxr(v28);
  while (__stlxr(v40 - 1, v28));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  IOSurfaceUnlock(IOSurface, 0, seed);
  IOSurfaceDecrementUseCount(IOSurface);
  CFRelease(IOSurface);
  CVPixelBufferRelease((CVPixelBufferRef)v14);
  v41 = v46;
  if (v46)
  {
    v42 = (unint64_t *)&v46->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return 1;
}

void sub_19F7972A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<altitude::IOSurfaceData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::IOSurfaceData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::IOSurfaceData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<altitude::IOSurfaceHandle *,std::shared_ptr<altitude::IOSurfaceHandle>::__shared_ptr_default_delete<altitude::IOSurfaceHandle,altitude::IOSurfaceHandle>,std::allocator<altitude::IOSurfaceHandle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::IOSurfaceHandle *,std::shared_ptr<altitude::IOSurfaceHandle>::__shared_ptr_default_delete<altitude::IOSurfaceHandle,altitude::IOSurfaceHandle>,std::allocator<altitude::IOSurfaceHandle>>::__on_zero_shared(uint64_t result)
{
  CFTypeRef *v1;

  v1 = *(CFTypeRef **)(result + 24);
  if (v1)
  {
    if (*v1)
      CFRelease(*v1);
    *v1 = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void sub_19F79759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F7976C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F797814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F797AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (a16 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((void ***)&a10, a9);
  _Unwind_Resume(a1);
}

void sub_19F797DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_19F798058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F7983B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F7985EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F798CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  void *v58;

  gdc::DebugTreeProperty::~DebugTreeProperty((gdc::DebugTreeProperty *)&a41);
  if (a57 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F798FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F7998CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char v69;

  v69 = a68;
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a51);
  if (v69 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F799A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F799D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F799EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F79A08C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::allocator_traits<std::allocator<gdc::DebugTreeNode>>::destroy[abi:nn180100]<gdc::DebugTreeNode,void,void>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 48);
    if (v6 != v5)
    {
      do
      {
        v6 -= 96;
        std::allocator_traits<std::allocator<gdc::DebugTreeNode>>::destroy[abi:nn180100]<gdc::DebugTreeNode,void,void>(v6);
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v7);
  }
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*(void **)a1);
    return;
  }
  operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_15;
}

uint64_t gdc::DebugTreeNode::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(void **)(a1 + 48);
    if (v9 != v8)
    {
      do
      {
        v9 -= 96;
        std::allocator_traits<std::allocator<gdc::DebugTreeNode>>::destroy[abi:nn180100]<gdc::DebugTreeNode,void,void>(v9);
      }
      while (v9 != v8);
      v10 = *v7;
    }
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v10);
    *v7 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v11 = (void **)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(void **)(a1 + 72);
    if (v13 != v12)
    {
      do
      {
        v13 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v13);
      }
      while (v13 != v12);
      v14 = *v11;
    }
    *(_QWORD *)(a1 + 80) = v12;
    operator delete(v14);
    *v11 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  return a1;
}

uint64_t geo::optional<gdc::DebugTreeNode>::~optional(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 88);
      v4 = *(void **)(a1 + 80);
      if (v3 != v2)
      {
        do
        {
          v3 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v3);
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 80);
      }
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v4);
    }
    v5 = *(_QWORD *)(a1 + 56);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
        {
          v6 -= 96;
          std::allocator_traits<std::allocator<gdc::DebugTreeNode>>::destroy[abi:nn180100]<gdc::DebugTreeNode,void,void>(v6);
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v7);
    }
    if (*(char *)(a1 + 55) < 0)
    {
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_14;
    }
    else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    {
LABEL_14:
      *(_BYTE *)a1 = 0;
      return a1;
    }
    operator delete(*(void **)(a1 + 8));
    goto LABEL_14;
  }
  return a1;
}

uint64_t geo::optional<gdc::DebugTreeProperty>::~optional(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 72);
      v4 = *(void **)(a1 + 64);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v2;
      operator delete(v4);
    }
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 48);
      v7 = *(void **)(a1 + 40);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 9) < 0)
            operator delete(*(void **)(v6 - 32));
          v6 -= 64;
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 48) = v5;
      operator delete(v7);
    }
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void gdc::DebugTreeProperty::~DebugTreeProperty(gdc::DebugTreeProperty *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *((_QWORD *)this + 5);
    v7 = (void *)*((_QWORD *)this + 4);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 64;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void gdc::tag_invoke(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64x2_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  void ***v18;
  uint64_t *v19;
  uint64_t *v20;
  void **v21;
  uint64_t *v22;
  uint64_t *v23;
  char v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char v47;
  char *v48;
  void ***v49;
  void ***v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char v59;
  char *v60;
  void ***v61;
  void ***v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char v69;
  char *v70;
  void ***v71;
  void ***v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char v79;
  char *v80;
  void ***v81;
  void ***v82;
  char *v83;
  char *v84;
  std::string *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  std::string *v94;
  void ***v95;
  void ***v96;
  char v97;
  void ***v98;
  __int128 v99;
  void ***v100;
  void ***v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  int v108;
  void **v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void **v116;
  char *v117;
  int v118;
  void **v119;
  unint64_t v120;
  int64x2_t v121;
  int64x2_t *v122;
  int64x2_t v123;
  int64x2_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  size_t v130;
  int64x2_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  const char *v135;
  size_t v136;
  size_t v137;
  size_t v138;
  int v139;
  const char *v140;
  size_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  const char *v145;
  size_t v146;
  size_t v147;
  size_t v148;
  int v149;
  const char *v150;
  int64x2_t *v151;
  uint64_t *v152;
  __int128 *v153;
  __int128 v154;
  std::string::size_type v155;
  void **v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  void ***v168;
  char v169;
  void ***v170;
  void ***v171;
  void ***v172;
  uint64_t v173;
  char *v174;
  int v175;
  void **v176;
  void *v177;
  char *v178;
  void *v179;
  char *v180;
  void *v181;
  char *v182;
  void *exception;
  char *v184;
  void *v185;
  char *v186;
  int64x2_t *__p;
  int64x2_t *v188;
  uint64_t v189;
  _QWORD *v190;
  void **v192;
  std::string v193;
  unsigned __int8 v194;
  void **v195;
  char v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  char v204;
  void **v205;
  char v206;
  uint64_t v207;
  char v208[8];
  void **v209;
  std::string::value_type v210[8];
  void **v211;
  char v212;
  void **v213;
  _BYTE v214[32];
  void **v215;
  std::string v216;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_BYTE *)a1 = 1;
  v4 = operator new(0x18uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = v4 + 1;
  *v3 = v4;
  v5 = a2[7] - a2[6];
  if (v5)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 5);
    if (v6 >> 61)
      abort();
    v7 = 0x5555555555555558 * (v5 >> 5);
    v8 = (int64x2_t *)operator new(v7);
    bzero(v8, 8 * v6);
    v9 = &v8->i64[v6];
    if (8 * v6 - 8 >= 0x18)
    {
      v120 = ((v7 - 8) >> 3) + 1;
      v10 = v120 & 0x3FFFFFFFFFFFFFFCLL;
      v121 = (int64x2_t)xmmword_19FFB2E40;
      v122 = v8 + 1;
      v123 = vdupq_n_s64(2uLL);
      v124 = vdupq_n_s64(4uLL);
      v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v122[-1] = v121;
        *v122 = vaddq_s64(v121, v123);
        v121 = vaddq_s64(v121, v124);
        v122 += 2;
        v125 -= 4;
      }
      while (v125);
      if (v120 == v10)
        goto LABEL_148;
      v11 = &v8->i64[v120 & 0x3FFFFFFFFFFFFFFCLL];
    }
    else
    {
      v10 = 0;
      v11 = (uint64_t *)v8;
    }
    do
      *v11++ = v10++;
    while (v11 != v9);
LABEL_148:
    *(_QWORD *)v214 = a2;
    std::__introsort<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,false>((uint64_t)v8, &v8->i64[v7 / 8], (uint64_t)v214, 126 - 2 * __clz(v6), 1);
    v188 = (int64x2_t *)((char *)v8 + v7);
    __p = v8;
    v190 = a2;
    while (1)
    {
      v126 = ((char *)v9 - (char *)v8) >> 3;
      v127 = a2[6];
      v128 = v127 + 96 * v8->i64[0];
      if (*(_BYTE *)(v128 + 23))
        v129 = (const char *)(v127 + 96 * v8->i64[0]);
      else
        v129 = "";
      if ((*(_BYTE *)(v128 + 23) & 0x80) == 0)
      {
        v130 = strlen(v129);
        v131 = v8;
        while (1)
        {
          v132 = v126 >> 1;
          v133 = &v131->i64[v126 >> 1];
          v134 = v127 + 96 * *v133;
          if (*(char *)(v134 + 23) < 0)
          {
            if (*(_QWORD *)(v134 + 8))
              v135 = *(const char **)v134;
            else
              v135 = "";
          }
          else if (*(_BYTE *)(v134 + 23))
          {
            v135 = (const char *)(v127 + 96 * *v133);
          }
          else
          {
            v135 = "";
          }
          v136 = strlen(v135);
          v137 = v136;
          if (v136 >= v130)
            v138 = v130;
          else
            v138 = v136;
          v139 = memcmp(v129, v135, v138);
          if (v139)
          {
            if (v139 < 0)
              goto LABEL_156;
          }
          else if (v130 < v137)
          {
            goto LABEL_156;
          }
          v131 = (int64x2_t *)(v133 + 1);
          v132 = v126 + ~v132;
LABEL_156:
          v126 = v132;
          if (!v132)
            goto LABEL_202;
        }
      }
      if (*(_QWORD *)(v128 + 8))
      {
        v140 = *(const char **)v128;
        v141 = strlen(*(const char **)v128);
        v131 = v8;
        while (1)
        {
          v142 = v126 >> 1;
          v143 = &v131->i64[v126 >> 1];
          v144 = v127 + 96 * *v143;
          if (*(char *)(v144 + 23) < 0)
          {
            if (*(_QWORD *)(v144 + 8))
              v145 = *(const char **)v144;
            else
              v145 = "";
          }
          else if (*(_BYTE *)(v144 + 23))
          {
            v145 = (const char *)(v127 + 96 * *v143);
          }
          else
          {
            v145 = "";
          }
          v146 = strlen(v145);
          v147 = v146;
          if (v146 >= v141)
            v148 = v141;
          else
            v148 = v146;
          v149 = memcmp(v140, v145, v148);
          if (v149)
          {
            if (v149 < 0)
              goto LABEL_175;
          }
          else if (v141 < v147)
          {
            goto LABEL_175;
          }
          v131 = (int64x2_t *)(v143 + 1);
          v142 = v126 + ~v142;
LABEL_175:
          v126 = v142;
          if (!v142)
            goto LABEL_202;
        }
      }
      v131 = v8;
      do
      {
        v152 = &v131->i64[v126 >> 1];
        v150 = (const char *)(v127 + 96 * *v152);
        if (v150[23] < 0)
        {
          if (*((_QWORD *)v150 + 1))
            v150 = *(const char **)v150;
          else
            v150 = "";
        }
        else if (!v150[23])
        {
          v150 = "";
        }
        v151 = (int64x2_t *)(v152 + 1);
        if (*v150)
        {
          v126 >>= 1;
        }
        else
        {
          v131 = v151;
          v126 += ~(v126 >> 1);
        }
      }
      while (v126);
LABEL_202:
      v216.__r_.__value_.__s.__data_[0] = 0;
      v216.__r_.__value_.__l.__size_ = 0;
      v153 = (__int128 *)(v127 + 96 * v8->i64[0]);
      if (*((char *)v153 + 23) < 0)
      {
        v155 = *((_QWORD *)v153 + 1);
        a2 = v190;
        if (v155)
        {
          std::string::__init_copy_ctor_external((std::string *)v214, *(const std::string::value_type **)v153, v155);
          goto LABEL_208;
        }
      }
      else
      {
        a2 = v190;
        if (*((_BYTE *)v153 + 23))
        {
          v154 = *v153;
          *(_QWORD *)&v214[16] = *((_QWORD *)v153 + 2);
          *(_OWORD *)v214 = v154;
          goto LABEL_208;
        }
      }
      v214[23] = 8;
      strcpy(v214, "<NO KEY>");
LABEL_208:
      if ((char *)v131 - (char *)v8 >= 9)
      {
        v213 = 0;
        v212 = 2;
        v156 = (void **)operator new(0x18uLL);
        *v156 = 0;
        v156[1] = 0;
        v156[2] = 0;
        v216.__r_.__value_.__s.__data_[0] = 2;
        v212 = 0;
        v216.__r_.__value_.__l.__size_ = (std::string::size_type)v156;
        v213 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v213, 0);
        while (1)
        {
          gdc::tag_invoke(&v193, v153);
          v157 = (char *)v156[1];
          v158 = (char *)v156[2];
          if (v157 < v158)
          {
            *v157 = v193.__r_.__value_.__s.__data_[0];
            *((_QWORD *)v157 + 1) = v193.__r_.__value_.__l.__size_;
            v193.__r_.__value_.__s.__data_[0] = 0;
            v193.__r_.__value_.__l.__size_ = 0;
            v159 = v157 + 16;
            goto LABEL_226;
          }
          v160 = (v157 - (_BYTE *)*v156) >> 4;
          v161 = v160 + 1;
          if ((unint64_t)(v160 + 1) >> 60)
            abort();
          v162 = v158 - (_BYTE *)*v156;
          if (v162 >> 3 > v161)
            v161 = v162 >> 3;
          if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0)
            v163 = 0xFFFFFFFFFFFFFFFLL;
          else
            v163 = v161;
          if (v163 >> 60)
LABEL_254:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v164 = (char *)operator new(16 * v163);
          v165 = &v164[16 * v160];
          v166 = &v164[16 * v163];
          *v165 = v193.__r_.__value_.__s.__data_[0];
          *((_QWORD *)v165 + 1) = v193.__r_.__value_.__l.__size_;
          v193.__r_.__value_.__s.__data_[0] = 0;
          v193.__r_.__value_.__l.__size_ = 0;
          v159 = v165 + 16;
          v167 = (char *)*v156;
          v168 = (void ***)v156[1];
          if (v168 != *v156)
            break;
          *v156 = v165;
          v156[1] = v159;
          v156[2] = v166;
          if (v168)
            goto LABEL_225;
LABEL_226:
          v156[1] = v159;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((void ***)&v193.__r_.__value_.__l.__size_, v193.__r_.__value_.__s.__data_[0]);
          v8 = (int64x2_t *)((char *)v8 + 8);
          if (v8 != v131)
          {
            v173 = a2[6];
            v153 = (__int128 *)(v173 + 96 * v8->i64[0]);
            if (v173)
              continue;
          }
          goto LABEL_232;
        }
        do
        {
          v169 = *((_BYTE *)v168 - 16);
          v168 -= 2;
          *(v165 - 16) = v169;
          v165 -= 16;
          *((_QWORD *)v165 + 1) = v168[1];
          *(_BYTE *)v168 = 0;
          v168[1] = 0;
        }
        while (v168 != (void ***)v167);
        v168 = (void ***)*v156;
        v170 = (void ***)v156[1];
        *v156 = v165;
        v156[1] = v159;
        v156[2] = v166;
        if (v170 != v168)
        {
          v171 = v170 - 1;
          do
          {
            v172 = v171 - 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v171, *((unsigned __int8 *)v171 - 8));
            v171 -= 2;
          }
          while (v172 != v168);
        }
        if (!v168)
          goto LABEL_226;
LABEL_225:
        operator delete(v168);
        goto LABEL_226;
      }
      gdc::tag_invoke(v210, v153);
      v216.__r_.__value_.__s.__data_[0] = v210[0];
      v210[0] = 0;
      v216.__r_.__value_.__l.__size_ = (std::string::size_type)v211;
      v211 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v211, 0);
LABEL_232:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v208, (unsigned __int8 *)&v216);
      v174 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, (uint64_t)v214);
      v175 = *v174;
      *v174 = v208[0];
      v208[0] = v175;
      v176 = (void **)*((_QWORD *)v174 + 1);
      *((_QWORD *)v174 + 1) = v209;
      v209 = v176;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v209, v175);
      if ((v214[23] & 0x80000000) != 0)
        operator delete(*(void **)v214);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((void ***)&v216.__r_.__value_.__l.__size_, v216.__r_.__value_.__s.__data_[0]);
      v8 = v131;
      v9 = (uint64_t *)v188;
      if (v131 == v188)
        goto LABEL_6;
    }
  }
  *(_QWORD *)v214 = a2;
  std::__introsort<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,false>(0, 0, (uint64_t)v214, 0, 1);
  __p = 0;
LABEL_6:
  v13 = a2[9];
  v12 = a2[10];
  if (v13 != v12)
  {
    v189 = a2[10];
    do
    {
      v19 = *(uint64_t **)(v13 + 32);
      v20 = *(uint64_t **)(v13 + 40);
      if (v19 == v20)
      {
        v206 = 0;
        v207 = 0;
        v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
        v16 = *v102;
        *v102 = 0;
        v206 = v16;
        v103 = *((_QWORD *)v102 + 1);
        *((_QWORD *)v102 + 1) = 0;
        v207 = v103;
        v18 = (void ***)&v207;
LABEL_9:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v18, v16);
      }
      else if ((unint64_t)((char *)v20 - (char *)v19) <= 0x40)
      {
        switch(*((_DWORD *)v19 + 14))
        {
          case 0:
            v104 = *v19;
            v202 = 5;
            v203 = v104;
            v105 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
            v16 = *v105;
            *v105 = 5;
            v202 = v16;
            v106 = *((_QWORD *)v105 + 1);
            *((_QWORD *)v105 + 1) = v104;
            v203 = v106;
            v18 = (void ***)&v203;
            goto LABEL_9;
          case 1:
            v113 = v19[1];
            v200 = 6;
            v201 = v113;
            v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
            v16 = *v114;
            *v114 = 6;
            v200 = v16;
            v115 = *((_QWORD *)v114 + 1);
            *((_QWORD *)v114 + 1) = v113;
            v201 = v115;
            v18 = (void ***)&v201;
            goto LABEL_9;
          case 2:
            v110 = v19[2];
            v198 = 7;
            v199 = v110;
            v111 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
            v16 = *v111;
            *v111 = 7;
            v198 = v16;
            v112 = *((_QWORD *)v111 + 1);
            *((_QWORD *)v111 + 1) = v110;
            v199 = v112;
            v18 = (void ***)&v199;
            goto LABEL_9;
          case 3:
            v14 = *((unsigned __int8 *)v19 + 24);
            v196 = 4;
            v197 = v14;
            v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
            v16 = *v15;
            *v15 = 4;
            v196 = v16;
            v17 = *((_QWORD *)v15 + 1);
            *((_QWORD *)v15 + 1) = v14;
            v197 = v17;
            v18 = (void ***)&v197;
            goto LABEL_9;
          case 4:
            if (*((char *)v19 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v214, (const std::string::value_type *)v19[4], v19[5]);
            }
            else
            {
              *(_OWORD *)v214 = *((_OWORD *)v19 + 2);
              *(_QWORD *)&v214[16] = v19[6];
            }
            v205 = 0;
            v204 = 3;
            v116 = (void **)operator new(0x18uLL);
            *(_OWORD *)v116 = *(_OWORD *)v214;
            v116[2] = *(void **)&v214[16];
            memset(v214, 0, 24);
            v205 = v116;
            v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
            v118 = *v117;
            *v117 = 3;
            v204 = v118;
            v119 = (void **)*((_QWORD *)v117 + 1);
            *((_QWORD *)v117 + 1) = v116;
            v205 = v119;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v205, v118);
            if ((v214[23] & 0x80000000) != 0)
              operator delete(*(void **)v214);
            break;
          default:
            break;
        }
      }
      else
      {
        v194 = 2;
        v21 = (void **)operator new(0x18uLL);
        *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        v195 = v21;
        v22 = *(uint64_t **)(v13 + 32);
        v23 = *(uint64_t **)(v13 + 40);
        if (v22 == v23)
        {
          v24 = 2;
        }
        else
        {
          while (2)
          {
            switch(*((_DWORD *)v22 + 14))
            {
              case 0:
                v27 = *v22;
                v28 = v194;
                if (v194)
                {
                  if (v194 != 2)
                  {
                    exception = __cxa_allocate_exception(0x20uLL);
                    if (v28 > 9)
                      v184 = "number";
                    else
                      v184 = off_1E42EE7A0[v28];
                    std::string::basic_string[abi:nn180100]<0>(&v216, v184);
                    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((std::string *)v214, "cannot use emplace_back() with ", &v216);
                    nlohmann::detail::type_error::create((uint64_t)exception, 311, (uint64_t)v214);
                  }
                  v29 = v195;
                }
                else
                {
                  v194 = 2;
                  v29 = (void **)operator new(0x18uLL);
                  *v29 = 0;
                  v29[1] = 0;
                  v29[2] = 0;
                  v195 = v29;
                }
                v37 = (char *)v29[1];
                v51 = (char *)v29[2];
                if (v37 < v51)
                {
                  v25 = 5;
                  goto LABEL_16;
                }
                v63 = (char *)*v29;
                v64 = (v37 - (_BYTE *)*v29) >> 4;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 60)
                  abort();
                v66 = v51 - v63;
                if (v66 >> 3 > v65)
                  v65 = v66 >> 3;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
                  v67 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67 >> 60)
                  goto LABEL_254;
                v68 = (char *)operator new(16 * v67);
                v45 = &v68[16 * v64];
                v46 = &v68[16 * v67];
                *v45 = 5;
                *((_QWORD *)v45 + 1) = v27;
                v26 = v45 + 16;
                if (v37 == v63)
                  goto LABEL_100;
                do
                {
                  v69 = *(v37 - 16);
                  v37 -= 16;
                  *(v45 - 16) = v69;
                  v45 -= 16;
                  *((_QWORD *)v45 + 1) = *((_QWORD *)v37 + 1);
                  *v37 = 0;
                  *((_QWORD *)v37 + 1) = 0;
                }
                while (v37 != v63);
                v37 = (char *)*v29;
                v70 = (char *)v29[1];
                *v29 = v45;
                v29[1] = v26;
                v29[2] = v46;
                if (v70 != v37)
                {
                  v71 = (void ***)(v70 - 8);
                  do
                  {
                    v72 = v71 - 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v71, *((unsigned __int8 *)v71 - 8));
                    v71 -= 2;
                  }
                  while (v72 != (void ***)v37);
                }
                goto LABEL_98;
              case 1:
                v27 = v22[1];
                v35 = v194;
                if (v194)
                {
                  if (v194 != 2)
                  {
                    v181 = __cxa_allocate_exception(0x20uLL);
                    if (v35 > 9)
                      v182 = "number";
                    else
                      v182 = off_1E42EE7A0[v35];
                    std::string::basic_string[abi:nn180100]<0>(&v216, v182);
                    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((std::string *)v214, "cannot use emplace_back() with ", &v216);
                    nlohmann::detail::type_error::create((uint64_t)v181, 311, (uint64_t)v214);
                  }
                  v29 = v195;
                }
                else
                {
                  v194 = 2;
                  v29 = (void **)operator new(0x18uLL);
                  *v29 = 0;
                  v29[1] = 0;
                  v29[2] = 0;
                  v195 = v29;
                }
                v37 = (char *)v29[1];
                v52 = (char *)v29[2];
                if (v37 < v52)
                {
                  v25 = 6;
                  goto LABEL_16;
                }
                v73 = (char *)*v29;
                v74 = (v37 - (_BYTE *)*v29) >> 4;
                v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 60)
                  abort();
                v76 = v52 - v73;
                if (v76 >> 3 > v75)
                  v75 = v76 >> 3;
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
                  v77 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v77 = v75;
                if (v77 >> 60)
                  goto LABEL_254;
                v78 = (char *)operator new(16 * v77);
                v45 = &v78[16 * v74];
                v46 = &v78[16 * v77];
                *v45 = 6;
                *((_QWORD *)v45 + 1) = v27;
                v26 = v45 + 16;
                if (v37 == v73)
                  goto LABEL_100;
                do
                {
                  v79 = *(v37 - 16);
                  v37 -= 16;
                  *(v45 - 16) = v79;
                  v45 -= 16;
                  *((_QWORD *)v45 + 1) = *((_QWORD *)v37 + 1);
                  *v37 = 0;
                  *((_QWORD *)v37 + 1) = 0;
                }
                while (v37 != v73);
                v37 = (char *)*v29;
                v80 = (char *)v29[1];
                *v29 = v45;
                v29[1] = v26;
                v29[2] = v46;
                if (v80 != v37)
                {
                  v81 = (void ***)(v80 - 8);
                  do
                  {
                    v82 = v81 - 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v81, *((unsigned __int8 *)v81 - 8));
                    v81 -= 2;
                  }
                  while (v82 != (void ***)v37);
                }
                goto LABEL_98;
              case 2:
                v32 = v22[2];
                v33 = v194;
                if (v194)
                {
                  if (v194 != 2)
                  {
                    v185 = __cxa_allocate_exception(0x20uLL);
                    if (v33 > 9)
                      v186 = "number";
                    else
                      v186 = off_1E42EE7A0[v33];
                    std::string::basic_string[abi:nn180100]<0>(&v216, v186);
                    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((std::string *)v214, "cannot use emplace_back() with ", &v216);
                    nlohmann::detail::type_error::create((uint64_t)v185, 311, (uint64_t)v214);
                  }
                  v29 = v195;
                }
                else
                {
                  v194 = 2;
                  v29 = (void **)operator new(0x18uLL);
                  *v29 = 0;
                  v29[1] = 0;
                  v29[2] = 0;
                  v195 = v29;
                }
                v37 = (char *)v29[1];
                v36 = (char *)v29[2];
                if (v37 < v36)
                {
                  *v37 = 7;
                  *((_QWORD *)v37 + 1) = v32;
                  goto LABEL_17;
                }
                v53 = (char *)*v29;
                v54 = (v37 - (_BYTE *)*v29) >> 4;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 60)
                  abort();
                v56 = v36 - v53;
                if (v56 >> 3 > v55)
                  v55 = v56 >> 3;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                  v57 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57 >> 60)
                  goto LABEL_254;
                v58 = (char *)operator new(16 * v57);
                v45 = &v58[16 * v54];
                v46 = &v58[16 * v57];
                *v45 = 7;
                *((_QWORD *)v45 + 1) = v32;
                v26 = v45 + 16;
                if (v37 == v53)
                  goto LABEL_100;
                do
                {
                  v59 = *(v37 - 16);
                  v37 -= 16;
                  *(v45 - 16) = v59;
                  v45 -= 16;
                  *((_QWORD *)v45 + 1) = *((_QWORD *)v37 + 1);
                  *v37 = 0;
                  *((_QWORD *)v37 + 1) = 0;
                }
                while (v37 != v53);
                v37 = (char *)*v29;
                v60 = (char *)v29[1];
                *v29 = v45;
                v29[1] = v26;
                v29[2] = v46;
                if (v60 != v37)
                {
                  v61 = (void ***)(v60 - 8);
                  do
                  {
                    v62 = v61 - 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v61, *((unsigned __int8 *)v61 - 8));
                    v61 -= 2;
                  }
                  while (v62 != (void ***)v37);
                }
                goto LABEL_98;
              case 3:
                v27 = *((unsigned __int8 *)v22 + 24);
                v34 = v194;
                if (v194)
                {
                  if (v194 != 2)
                  {
                    v179 = __cxa_allocate_exception(0x20uLL);
                    if (v34 > 9)
                      v180 = "number";
                    else
                      v180 = off_1E42EE7A0[v34];
                    std::string::basic_string[abi:nn180100]<0>(&v216, v180);
                    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((std::string *)v214, "cannot use emplace_back() with ", &v216);
                    nlohmann::detail::type_error::create((uint64_t)v179, 311, (uint64_t)v214);
                  }
                  v29 = v195;
                }
                else
                {
                  v194 = 2;
                  v29 = (void **)operator new(0x18uLL);
                  *v29 = 0;
                  v29[1] = 0;
                  v29[2] = 0;
                  v195 = v29;
                }
                v37 = (char *)v29[1];
                v38 = (char *)v29[2];
                if (v37 < v38)
                {
                  v25 = 4;
LABEL_16:
                  *v37 = v25;
                  *((_QWORD *)v37 + 1) = v27;
LABEL_17:
                  v26 = v37 + 16;
                }
                else
                {
                  v39 = (char *)*v29;
                  v40 = (v37 - (_BYTE *)*v29) >> 4;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 60)
                    abort();
                  v42 = v38 - v39;
                  if (v42 >> 3 > v41)
                    v41 = v42 >> 3;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
                    v43 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43 >> 60)
                    goto LABEL_254;
                  v44 = (char *)operator new(16 * v43);
                  v45 = &v44[16 * v40];
                  v46 = &v44[16 * v43];
                  *v45 = 4;
                  *((_QWORD *)v45 + 1) = v27;
                  v26 = v45 + 16;
                  if (v37 == v39)
                  {
LABEL_100:
                    *v29 = v45;
                    v29[1] = v26;
                    v29[2] = v46;
                    if (!v37)
                      goto LABEL_18;
LABEL_101:
                    operator delete(v37);
                    goto LABEL_18;
                  }
                  do
                  {
                    v47 = *(v37 - 16);
                    v37 -= 16;
                    *(v45 - 16) = v47;
                    v45 -= 16;
                    *((_QWORD *)v45 + 1) = *((_QWORD *)v37 + 1);
                    *v37 = 0;
                    *((_QWORD *)v37 + 1) = 0;
                  }
                  while (v37 != v39);
                  v37 = (char *)*v29;
                  v48 = (char *)v29[1];
                  *v29 = v45;
                  v29[1] = v26;
                  v29[2] = v46;
                  if (v48 != v37)
                  {
                    v49 = (void ***)(v48 - 8);
                    do
                    {
                      v50 = v49 - 1;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v49, *((unsigned __int8 *)v49 - 8));
                      v49 -= 2;
                    }
                    while (v50 != (void ***)v37);
                  }
LABEL_98:
                  if (v37)
                    goto LABEL_101;
                }
LABEL_18:
                v29[1] = v26;
LABEL_19:
                v22 += 8;
                if (v22 != v23)
                  continue;
                v21 = v195;
                v24 = v194;
                break;
              case 4:
                if (*((char *)v22 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(&v193, (const std::string::value_type *)v22[4], v22[5]);
                  v30 = v194;
                  if (!v194)
                  {
LABEL_25:
                    v194 = 2;
                    v31 = (void **)operator new(0x18uLL);
                    *v31 = 0;
                    v31[1] = 0;
                    v31[2] = 0;
                    v195 = v31;
                    goto LABEL_105;
                  }
                }
                else
                {
                  v193 = *(std::string *)(v22 + 4);
                  v30 = v194;
                  if (!v194)
                    goto LABEL_25;
                }
                if ((_DWORD)v30 != 2)
                {
                  v177 = __cxa_allocate_exception(0x20uLL);
                  if (v30 > 9)
                    v178 = "number";
                  else
                    v178 = off_1E42EE7A0[v30];
                  std::string::basic_string[abi:nn180100]<0>(&v216, v178);
                  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((std::string *)v214, "cannot use emplace_back() with ", &v216);
                  nlohmann::detail::type_error::create((uint64_t)v177, 311, (uint64_t)v214);
                }
                v31 = v195;
LABEL_105:
                v83 = (char *)v31[2];
                v84 = (char *)v31[1];
                if (v84 < v83)
                {
                  *((_QWORD *)v84 + 1) = 0;
                  *v84 = 3;
                  v85 = (std::string *)operator new(0x18uLL);
                  *v85 = v193;
                  memset(&v193, 0, sizeof(v193));
                  *((_QWORD *)v84 + 1) = v85;
                  v86 = v84 + 16;
                  v31[1] = v84 + 16;
                  goto LABEL_124;
                }
                v87 = (v84 - (_BYTE *)*v31) >> 4;
                if ((unint64_t)(v87 + 1) >> 60)
                  abort();
                v88 = v83 - (_BYTE *)*v31;
                v89 = v88 >> 3;
                if (v88 >> 3 <= (unint64_t)(v87 + 1))
                  v89 = v87 + 1;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
                  v90 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v90 = v89;
                v215 = v31 + 2;
                if (v90)
                {
                  if (v90 >> 60)
                    goto LABEL_254;
                  v91 = (char *)operator new(16 * v90);
                }
                else
                {
                  v91 = 0;
                }
                v92 = &v91[16 * v87];
                *(_QWORD *)v214 = v91;
                *(_QWORD *)&v214[8] = v92;
                v93 = &v91[16 * v90];
                *(_QWORD *)&v214[16] = v92;
                *(_QWORD *)&v214[24] = v93;
                *((_QWORD *)v92 + 1) = 0;
                *v92 = 3;
                v94 = (std::string *)operator new(0x18uLL);
                *v94 = v193;
                memset(&v193, 0, sizeof(v193));
                *((_QWORD *)v92 + 1) = v94;
                v86 = v92 + 16;
                *(_QWORD *)&v214[16] = v92 + 16;
                v95 = (void ***)*v31;
                v96 = (void ***)v31[1];
                if (v96 == *v31)
                {
                  *v31 = v92;
                  v31[1] = v86;
                  v31[2] = v93;
                  if (v96)
                    goto LABEL_123;
                }
                else
                {
                  do
                  {
                    v97 = *((_BYTE *)v96 - 16);
                    v96 -= 2;
                    *(v92 - 16) = v97;
                    v92 -= 16;
                    *((_QWORD *)v92 + 1) = v96[1];
                    *(_BYTE *)v96 = 0;
                    v96[1] = 0;
                  }
                  while (v96 != v95);
                  v96 = (void ***)*v31;
                  v98 = (void ***)v31[1];
                  v99 = *(_OWORD *)&v214[16];
                  *v31 = v92;
                  *(_OWORD *)(v31 + 1) = v99;
                  v86 = (void *)v99;
                  if (v98 != v96)
                  {
                    v100 = v98 - 1;
                    do
                    {
                      v101 = v100 - 1;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v100, *((unsigned __int8 *)v100 - 8));
                      v100 -= 2;
                    }
                    while (v101 != v96);
                  }
                  if (v96)
LABEL_123:
                    operator delete(v96);
                }
LABEL_124:
                v31[1] = v86;
                if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v193.__r_.__value_.__l.__data_);
                goto LABEL_19;
              default:
                goto LABEL_19;
            }
            break;
          }
        }
        v192 = v21;
        v194 = 0;
        v195 = 0;
        v107 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a1, v13);
        v108 = *v107;
        *v107 = v24;
        v109 = (void **)*((_QWORD *)v107 + 1);
        *((_QWORD *)v107 + 1) = v21;
        v192 = v109;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v192, v108);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v195, 0);
        v12 = v189;
      }
      v13 += 80;
    }
    while (v13 != v12);
  }
  if (__p)
    operator delete(__p);
}

void sub_19F79B914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void ***a9, uint64_t a10, void ***a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, 5);
  if (__p)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a9, *a20);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(void ***a1, int a2)
{
  int v2;
  unint64_t v3;
  void **v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char v19;
  char *v20;
  char *v21;
  void **v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void ***v74;
  void **v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  unsigned __int8 v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  char *v86;

  v84 = 0;
  v85 = 0;
  v86 = 0;
  v2 = a2 - 1;
  if (a2 == 1)
  {
    v22 = *a1;
    v23 = (unint64_t)(*a1)[2];
    if (v23)
    {
      if (v23 >> 60)
        goto LABEL_148;
      v8 = (char *)operator new(16 * v23);
      v84 = v8;
      v85 = v8;
      v86 = &v8[16 * v23];
    }
    else
    {
      v8 = 0;
    }
    v26 = *v22;
    v24 = v22 + 1;
    v25 = v26;
    if (v26 == v24)
    {
LABEL_61:
      v3 = (unint64_t)v8;
      goto LABEL_62;
    }
    v3 = (unint64_t)v8;
    while (v3 < (unint64_t)v86)
    {
      *(_BYTE *)v3 = *((_BYTE *)v25 + 56);
      *(_QWORD *)(v3 + 8) = v25[8];
      *((_BYTE *)v25 + 56) = 0;
      v25[8] = 0;
      v3 += 16;
LABEL_53:
      v85 = (char *)v3;
      v38 = (_QWORD *)v25[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v25[2];
          v40 = *v39 == (_QWORD)v25;
          v25 = v39;
        }
        while (!v40);
      }
      v25 = v39;
      if (v39 == v24)
        goto LABEL_62;
    }
    v27 = (uint64_t)(v3 - (_QWORD)v8) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      abort();
    v29 = v86 - v8;
    if ((v86 - v8) >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30 >> 60)
LABEL_143:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v31 = (char *)operator new(16 * v30);
    v32 = &v31[16 * v27];
    *v32 = *((_BYTE *)v25 + 56);
    *((_QWORD *)v32 + 1) = v25[8];
    v33 = &v31[16 * v30];
    *((_BYTE *)v25 + 56) = 0;
    v25[8] = 0;
    if ((char *)v3 == v8)
    {
      v84 = v32;
      v86 = &v31[16 * v30];
      v34 = v32;
      v3 = (unint64_t)(v32 + 16);
      if (!v8)
        goto LABEL_52;
    }
    else
    {
      v34 = v32;
      do
      {
        v35 = *(_BYTE *)(v3 - 16);
        v3 -= 16;
        *(v34 - 16) = v35;
        v34 -= 16;
        *((_QWORD *)v34 + 1) = *(_QWORD *)(v3 + 8);
        *(_BYTE *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      while ((char *)v3 != v8);
      v8 = v84;
      v84 = v34;
      v86 = v33;
      if (v85 != v8)
      {
        v36 = v85 - 8;
        do
        {
          v37 = v36 - 8;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v36, *(v36 - 8));
          v36 -= 16;
        }
        while (v37 != v8);
      }
      v3 = (unint64_t)(v32 + 16);
      if (!v8)
        goto LABEL_52;
    }
    operator delete(v8);
LABEL_52:
    v8 = v34;
    goto LABEL_53;
  }
  v3 = 0;
  if (a2 == 2)
  {
    v4 = *a1;
    v6 = **a1;
    v5 = (*a1)[1];
    v3 = v5 - v6;
    if (v5 != v6)
    {
      if ((v3 & 0x8000000000000000) == 0)
      {
        v7 = (char *)operator new(v5 - v6);
        v8 = v7;
        v84 = v7;
        v85 = v7;
        v86 = &v7[16 * ((uint64_t)v3 >> 4)];
        v9 = (char *)*v4;
        v10 = (char *)v4[1];
        if (v9 != v10)
        {
          v3 = (unint64_t)v7;
          while (v3 < (unint64_t)v86)
          {
            *(_BYTE *)v3 = *v9;
            *(_QWORD *)(v3 + 8) = *((_QWORD *)v9 + 1);
            *v9 = 0;
            *((_QWORD *)v9 + 1) = 0;
            v3 += 16;
LABEL_8:
            v85 = (char *)v3;
            v9 += 16;
            if (v9 == v10)
              goto LABEL_62;
          }
          v11 = (uint64_t)(v3 - (_QWORD)v8) >> 4;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60)
            abort();
          v13 = v86 - v8;
          if ((v86 - v8) >> 3 > v12)
            v12 = v13 >> 3;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
            v14 = 0xFFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14 >> 60)
            goto LABEL_143;
          v15 = (char *)operator new(16 * v14);
          v16 = &v15[16 * v11];
          *v16 = *v9;
          *((_QWORD *)v16 + 1) = *((_QWORD *)v9 + 1);
          v17 = &v15[16 * v14];
          *v9 = 0;
          *((_QWORD *)v9 + 1) = 0;
          if ((char *)v3 == v8)
          {
            v84 = v16;
            v86 = &v15[16 * v14];
            v18 = v16;
            v3 = (unint64_t)(v16 + 16);
            if (!v8)
              goto LABEL_25;
          }
          else
          {
            v18 = v16;
            do
            {
              v19 = *(_BYTE *)(v3 - 16);
              v3 -= 16;
              *(v18 - 16) = v19;
              v18 -= 16;
              *((_QWORD *)v18 + 1) = *(_QWORD *)(v3 + 8);
              *(_BYTE *)v3 = 0;
              *(_QWORD *)(v3 + 8) = 0;
            }
            while ((char *)v3 != v8);
            v8 = v84;
            v84 = v18;
            v86 = v17;
            if (v85 != v8)
            {
              v20 = v85 - 8;
              do
              {
                v21 = v20 - 8;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v20, *(v20 - 8));
                v20 -= 16;
              }
              while (v21 != v8);
            }
            v3 = (unint64_t)(v16 + 16);
            if (!v8)
              goto LABEL_25;
          }
          operator delete(v8);
LABEL_25:
          v8 = v18;
          goto LABEL_8;
        }
        goto LABEL_61;
      }
LABEL_148:
      abort();
    }
  }
LABEL_62:
  if (v84 != (char *)v3)
  {
    while (1)
    {
      v82 = *(_BYTE *)(v3 - 16);
      v83 = *(_QWORD **)(v3 - 8);
      *(_BYTE *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 = (unint64_t)(v85 - 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v85 - 8, *(v85 - 16));
      v85 = (char *)v3;
      if (v82 == 1)
        break;
      if (v82 != 2)
        goto LABEL_65;
      v41 = (_QWORD *)*v83;
      v43 = v83 + 1;
      v42 = (_QWORD *)v83[1];
      if ((_QWORD *)*v83 == v42)
        goto LABEL_64;
      do
      {
        if (v3 < (unint64_t)v86)
        {
          *(_BYTE *)v3 = *(_BYTE *)v41;
          *(_QWORD *)(v3 + 8) = v41[1];
          *(_BYTE *)v41 = 0;
          v41[1] = 0;
          v3 += 16;
          goto LABEL_71;
        }
        v44 = v84;
        v45 = (uint64_t)(v3 - (_QWORD)v84) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          abort();
        v47 = v86 - v84;
        if ((v86 - v84) >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48 >> 60)
          goto LABEL_143;
        v49 = (char *)operator new(16 * v48);
        v50 = &v49[16 * v45];
        *v50 = *(_BYTE *)v41;
        *((_QWORD *)v50 + 1) = v41[1];
        *(_BYTE *)v41 = 0;
        v41[1] = 0;
        v51 = (unint64_t)(v50 + 16);
        if ((char *)v3 == v44)
        {
          v84 = v50;
          v86 = &v49[16 * v48];
        }
        else
        {
          do
          {
            v52 = *(_BYTE *)(v3 - 16);
            v3 -= 16;
            *(v50 - 16) = v52;
            v50 -= 16;
            *((_QWORD *)v50 + 1) = *(_QWORD *)(v3 + 8);
            *(_BYTE *)v3 = 0;
            *(_QWORD *)(v3 + 8) = 0;
          }
          while ((char *)v3 != v44);
          v3 = (unint64_t)v84;
          v84 = v50;
          v86 = &v49[16 * v48];
          if (v85 != (char *)v3)
          {
            v53 = v85 - 8;
            do
            {
              v54 = v53 - 8;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v53, *(v53 - 8));
              v53 -= 16;
            }
            while (v54 != (char *)v3);
          }
          if (!v3)
            goto LABEL_89;
        }
        operator delete((void *)v3);
LABEL_89:
        v3 = v51;
LABEL_71:
        v85 = (char *)v3;
        v41 += 2;
      }
      while (v41 != v42);
      v41 = (_QWORD *)*v83;
      v43 = v83 + 1;
      v71 = v83[1];
      if (v71 == *v83)
      {
        *v43 = v71;
      }
      else
      {
        v72 = v71 - 8;
        do
        {
          v73 = (_QWORD *)(v72 - 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v72, *(unsigned __int8 *)(v72 - 8));
          v72 -= 16;
        }
        while (v73 != v41);
LABEL_64:
        *v43 = v41;
      }
LABEL_65:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v83, v82);
      if (v84 == (char *)v3)
        goto LABEL_125;
    }
    v55 = v83;
    v56 = v83 + 1;
    v57 = (_QWORD *)*v83;
    if ((_QWORD *)*v83 == v83 + 1)
      goto LABEL_123;
    while (v3 < (unint64_t)v86)
    {
      *(_BYTE *)v3 = *((_BYTE *)v57 + 56);
      *(_QWORD *)(v3 + 8) = v57[8];
      *((_BYTE *)v57 + 56) = 0;
      v57[8] = 0;
      v3 += 16;
LABEL_112:
      v85 = (char *)v3;
      v69 = (_QWORD *)v57[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v57[2];
          v40 = *v70 == (_QWORD)v57;
          v57 = v70;
        }
        while (!v40);
      }
      v57 = v70;
      if (v70 == v56)
      {
        v55 = v83;
LABEL_123:
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)v55[1]);
        *v55 = v55 + 1;
        v55[2] = 0;
        v55[1] = 0;
        goto LABEL_65;
      }
    }
    v58 = v84;
    v59 = (uint64_t)(v3 - (_QWORD)v84) >> 4;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 60)
      abort();
    v61 = v86 - v84;
    if ((v86 - v84) >> 3 > v60)
      v60 = v61 >> 3;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62 >> 60)
      goto LABEL_143;
    v63 = (char *)operator new(16 * v62);
    v64 = &v63[16 * v59];
    *v64 = *((_BYTE *)v57 + 56);
    *((_QWORD *)v64 + 1) = v57[8];
    *((_BYTE *)v57 + 56) = 0;
    v57[8] = 0;
    v65 = (unint64_t)(v64 + 16);
    if ((char *)v3 == v58)
    {
      v84 = v64;
      v86 = &v63[16 * v62];
    }
    else
    {
      do
      {
        v66 = *(_BYTE *)(v3 - 16);
        v3 -= 16;
        *(v64 - 16) = v66;
        v64 -= 16;
        *((_QWORD *)v64 + 1) = *(_QWORD *)(v3 + 8);
        *(_BYTE *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      while ((char *)v3 != v58);
      v3 = (unint64_t)v84;
      v84 = v64;
      v86 = &v63[16 * v62];
      if (v85 != (char *)v3)
      {
        v67 = v85 - 8;
        do
        {
          v68 = v67 - 8;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v67, *(v67 - 8));
          v67 -= 16;
        }
        while (v68 != (char *)v3);
      }
      if (!v3)
        goto LABEL_111;
    }
    operator delete((void *)v3);
LABEL_111:
    v3 = v65;
    goto LABEL_112;
  }
LABEL_125:
  switch(v2)
  {
    case 0:
      v74 = a1;
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)(*a1)[1]);
      goto LABEL_138;
    case 1:
      v74 = a1;
      v75 = *a1;
      v77 = **a1;
      if (!v77)
        goto LABEL_139;
      v78 = v75[1];
      v76 = **a1;
      if (v78 != v77)
      {
        v79 = (uint64_t)v78 - 8;
        do
        {
          v80 = (void *)(v79 - 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v79, *(unsigned __int8 *)(v79 - 8));
          v79 -= 16;
        }
        while (v80 != v77);
        v76 = *v75;
      }
      v75[1] = v77;
      break;
    case 2:
      v74 = a1;
      v75 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_139;
      v76 = *v75;
      break;
    case 7:
      v74 = a1;
      v75 = *a1;
      v76 = **a1;
      if (!v76)
        goto LABEL_139;
      v75[1] = v76;
      break;
    default:
      goto LABEL_140;
  }
  operator delete(v76);
LABEL_138:
  v75 = *v74;
LABEL_139:
  operator delete(v75);
LABEL_140:
  if (v3)
    operator delete((void *)v3);
}

void sub_19F79C3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~vector[abi:nn180100]((void ****)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*((_QWORD *)a1 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 64, a1[56]);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ****std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~vector[abi:nn180100](void ****a1)
{
  void ***v2;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 1;
      do
      {
        v6 = v5 - 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5, *((unsigned __int8 *)v5 - 8));
        v5 -= 2;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(uint64_t result, uint64_t a2, unsigned int a3)
{
  char *v5;
  uint64_t (*v6)(void);
  unint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  unint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t (***v28)(void);
  char *v29;
  char *v30;
  uint64_t (***v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 v40;
  uint64_t v41;
  char *v42;
  char v43;
  unsigned __int8 v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  BOOL v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned __int8 v59;
  void (*v60)(void);
  char *v61;
  char v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  char *v70;
  char *v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t (***v111)(void);
  unsigned int v112;
  int v113;
  int v114;
  BOOL v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  BOOL v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  unsigned int v150;
  char v151;
  char v152;
  unsigned __int8 v153;
  unsigned int v154;

  v5 = (char *)result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      v6 = *(uint64_t (**)(void))(**(_QWORD **)result + 8);
      return v6();
    case 1:
      v6 = *(uint64_t (**)(void))(**(_QWORD **)result + 8);
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
        return v6();
      v6();
      v7 = a3 + 4;
      v8 = v5 + 608;
      if (v5[631] < 0)
      {
        v9 = *((_QWORD *)v5 + 77);
        if (v9 >= v7)
          goto LABEL_6;
      }
      else
      {
        v9 = v5[631];
        if (v7 <= v9)
          goto LABEL_6;
      }
      std::string::resize((std::string *)(v5 + 608), 2 * v9, 32);
LABEL_6:
      v10 = *(_QWORD **)(a2 + 8);
      v11 = (_QWORD *)*v10;
      if (v10[2] == 1)
      {
        v12 = (_QWORD *)*v10;
      }
      else
      {
        v46 = 0;
        do
        {
          v47 = v5 + 608;
          if (v5[631] < 0)
            v47 = *(char **)v8;
          (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, v47, a3 + 4);
          (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)v5, v11 + 4);
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, "\": ", 3);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v5, v11 + 7, a3 + 4);
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, ",\n", 2);
          v48 = (_QWORD *)v11[1];
          if (v48)
          {
            do
            {
              v12 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v11[2];
              v49 = *v12 == (_QWORD)v11;
              v11 = v12;
            }
            while (!v49);
          }
          ++v46;
          v11 = v12;
        }
        while (v46 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
      }
      v13 = v5 + 608;
      if (v5[631] < 0)
        v13 = *(char **)v8;
      (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, v13, a3 + 4);
      (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)v5, v12 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, "\": ", 3);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v5, v12 + 7, a3 + 4);
      goto LABEL_118;
    case 2:
      v6 = *(uint64_t (**)(void))(**(_QWORD **)result + 8);
      if (**(_QWORD **)(a2 + 8) == *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8))
        return v6();
      v6();
      v14 = a3 + 4;
      v8 = v5 + 608;
      if (v5[631] < 0)
      {
        v15 = *((_QWORD *)v5 + 77);
        if (v15 >= v14)
          goto LABEL_14;
      }
      else
      {
        v15 = v5[631];
        if (v14 <= v15)
          goto LABEL_14;
      }
      std::string::resize((std::string *)(v5 + 608), 2 * v15, 32);
LABEL_14:
      v16 = *(uint64_t **)(a2 + 8);
      v17 = *v16;
      if (*v16 != v16[1] - 16)
      {
        do
        {
          (*(void (**)(_QWORD))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v5, v17, a3 + 4);
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, ",\n", 2);
          v17 += 16;
        }
        while (v17 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      v30 = v5 + 608;
      if (v5[631] < 0)
        v30 = *(char **)v8;
      (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, v30, a3 + 4);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v5, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, a3 + 4);
      (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 10);
      v31 = *(uint64_t (****)(void))v5;
      if (v5[631] < 0)
        v8 = *(char **)v8;
      goto LABEL_120;
    case 3:
      (***(void (****)(void))result)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)v5, *(uint64_t **)(a2 + 8));
      v18 = ***(uint64_t (****)(void))v5;
      return v18();
    case 4:
      v6 = *(uint64_t (**)(void))(**(_QWORD **)result + 8);
      return v6();
    case 5:
      v19 = *(_QWORD *)(a2 + 8);
      if (!v19)
        goto LABEL_38;
      v20 = (_BYTE *)(result + 16);
      if ((v19 & 0x8000000000000000) != 0)
      {
        *v20 = 45;
        v19 = -(uint64_t)v19;
        v21 = 1;
        if (v19 < 0xA)
          goto LABEL_152;
        v52 = v19;
        while (1)
        {
          if (v52 <= 0x63)
          {
            ++v21;
            goto LABEL_152;
          }
          if (v52 <= 0x3E7)
          {
            v21 += 2;
            goto LABEL_152;
          }
          if (v52 >> 4 <= 0x270)
            break;
          v21 += 4;
          v128 = v52 >= 0x186A0;
          v52 /= 0x2710uLL;
          if (!v128)
            goto LABEL_152;
        }
        v21 += 3;
      }
      else
      {
        if (v19 < 0xA)
          goto LABEL_30;
        v21 = 1;
        v22 = *(_QWORD *)(a2 + 8);
        while (v22 > 0x63)
        {
          if (v22 <= 0x3E7)
          {
            v21 += 2;
            goto LABEL_153;
          }
          if (v22 >> 4 <= 0x270)
          {
            v21 += 3;
            goto LABEL_153;
          }
          v21 += 4;
          v128 = v22 >= 0x186A0;
          v22 /= 0x2710uLL;
          if (!v128)
            goto LABEL_153;
        }
      }
LABEL_152:
      ++v21;
LABEL_153:
      v23 = (uint64_t)&v20[v21];
      if (v19 < 0x64)
      {
        v108 = v19;
      }
      else
      {
        do
        {
          v108 = v19 / 0x64;
          *(_WORD *)(v23 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v19 % 0x64];
          v23 -= 2;
          v110 = v19 >> 4;
          v19 /= 0x64uLL;
        }
        while (v110 > 0x270);
      }
      if (v108 >= 0xA)
        goto LABEL_158;
      goto LABEL_143;
    case 6:
      v19 = *(_QWORD *)(a2 + 8);
      if (!v19)
      {
LABEL_38:
        v18 = ***(uint64_t (****)(void))result;
        return v18();
      }
      if (v19 < 0xA)
      {
LABEL_30:
        v23 = result + 17;
LABEL_144:
        *(_BYTE *)(v23 - 1) = v19 + 48;
        goto LABEL_159;
      }
      v50 = 1;
      v51 = *(_QWORD *)(a2 + 8);
      while (1)
      {
        if (v51 <= 0x63)
        {
          ++v50;
          goto LABEL_138;
        }
        if (v51 <= 0x3E7)
        {
          v50 += 2;
          goto LABEL_138;
        }
        if (v51 >> 4 <= 0x270)
          break;
        v50 += 4;
        v128 = v51 >= 0x186A0;
        v51 /= 0x2710uLL;
        if (!v128)
          goto LABEL_138;
      }
      v50 += 3;
LABEL_138:
      v23 = result + 16 + v50;
      if (v19 < 0x64)
      {
        v108 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v108 = v19 / 0x64;
          *(_WORD *)(v23 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v19 % 0x64];
          v23 -= 2;
          v109 = v19 >> 4;
          v19 /= 0x64uLL;
        }
        while (v109 > 0x270);
      }
      if (v108 < 0xA)
      {
LABEL_143:
        LOBYTE(v19) = v108;
        goto LABEL_144;
      }
LABEL_158:
      *(_WORD *)(v23 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v108];
LABEL_159:
      v111 = *(uint64_t (****)(void))result;
      goto LABEL_228;
    case 7:
      v24 = *(double *)(a2 + 8);
      if ((*(_QWORD *)&v24 & 0x8000000000000000) != 0)
      {
        v24 = -v24;
        v25 = result + 17;
        *(_BYTE *)(result + 16) = 45;
        if (v24 == 0.0)
          goto LABEL_33;
      }
      else
      {
        v25 = result + 16;
        if (v24 == 0.0)
        {
LABEL_33:
          *(_WORD *)v25 = 11824;
          *(_BYTE *)(v25 + 2) = 48;
          goto LABEL_227;
        }
      }
      v32 = *(_QWORD *)&v24 & 0xFFFFFFFFFFFFFLL;
      v33 = *(_QWORD *)&v24 >> 52;
      if (*(_QWORD *)&v24 >> 52)
      {
        v34 = 2 * (v32 | 0x10000000000000);
        v35 = (2 * (*(_QWORD *)&v24 & 0xFFFFFFFFFFFFFLL | 0x10000000000000)) | 1;
        v36 = v33 - 1076;
        if (*(_QWORD *)&v24 >> 53 && !v32)
        {
          v55 = v33 - 53;
          v56 = 0x3FFFFFFFFFFFFFLL;
          v32 = 0x10000000000000;
          goto LABEL_124;
        }
        v32 |= 0x10000000000000uLL;
      }
      else
      {
        v34 = 2 * v32;
        v35 = (2 * (*(_QWORD *)&v24 & 0xFFFFFFFFFFFFFLL)) | 1;
        v36 = -1075;
      }
      v56 = v34 - 1;
      v55 = v36;
      do
      {
LABEL_124:
        v63 = v36;
        v64 = v35;
        v35 *= 2;
        --v36;
      }
      while ((v35 & 0x8000000000000000) == 0);
      do
      {
        v65 = v32;
        v32 *= 2;
      }
      while ((v32 & 0x8000000000000000) == 0);
      v66 = v56 << (v55 - v36);
      v67 = -60 - v63;
      v68 = 78913 * (-60 - v63) / 0x40000;
      if (v67 <= 0)
        v69 = v68;
      else
        v69 = v68 + 1;
      v70 = (char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
          + 16 * ((int)((v69 + 307 + (((v69 + 307) >> 28) & 7)) << 16) >> 19);
      v71 = v70 + 8;
      v72 = v32 & 0xFFFFFFFE;
      v73 = v65 >> 31;
      v74 = *(_QWORD *)v70;
      v75 = HIDWORD(*(_QWORD *)v70);
      v76 = v74 * v72;
      v77 = HIDWORD(*(_QWORD *)v70) * (unint64_t)v72;
      v78 = HIDWORD(v77);
      v79 = (v74 * v73) >> 32;
      v80 = ((v77 & 0xFFFFFFFE)
           + HIDWORD(v76)
           + *(_QWORD *)v70 * v73
           + 0x80000000) >> 32;
      v81 = v79 + v75 * v73 + HIDWORD(v77) + v80;
      v82 = HIDWORD(v66);
      v83 = HIDWORD(*(_QWORD *)v70) * (unint64_t)v66;
      v84 = v74 * HIDWORD(v66);
      v85 = HIDWORD(v83);
      v86 = HIDWORD(v84);
      v87 = (((v74 * (unint64_t)v66) >> 32) + v83 + v84 + 0x80000000) >> 32;
      v88 = v36 + *((_DWORD *)v70 + 2);
      v89 = -64 - v88;
      v90 = v35 & 0xFFFFFFFE;
      v91 = v64 >> 31;
      v92 = v74 * (unint64_t)v90;
      v93 = v75 * (unint64_t)v90;
      v94 = v74 * (v64 >> 31);
      v95 = HIDWORD(v93);
      v96 = HIDWORD(v94);
      v97 = ((v93 & 0xFFFFFFFE) + HIDWORD(v92) + v94 + 0x80000000) >> 32;
      v98 = v75 * v91 + HIDWORD(v93) + HIDWORD(v94) + v97 - 1;
      v99 = -*((_DWORD *)v71 + 1);
      v100 = ~(HIDWORD(v84) + v75 * (unint64_t)v82 + v85 + v87) + v98;
      v101 = v98 - v81;
      v102 = -v88;
      v103 = 1 << -(char)v88;
      v104 = v98 >> v102;
      v105 = (v103 - 1) & v98;
      if (v104 <= 0x3B9AC9FF)
      {
        if (v104 <= 0x5F5E0FF)
        {
          if (v104 <= 0x98967F)
          {
            if (v104 <= 0xF423F)
            {
              v154 = v104 >> 5;
              v112 = v104 >> 4;
              if (v104 <= 9)
                v113 = 1;
              else
                v113 = 10;
              if (v104 <= 9)
                v114 = 1;
              else
                v114 = 2;
              if (v104 > 0x63)
              {
                v113 = 100;
                v114 = 3;
              }
              if (v104 > 0x3E7)
              {
                v113 = 1000;
                v114 = 4;
              }
              v115 = v112 > 0x270;
              if (v112 <= 0x270)
                v116 = v113;
              else
                v116 = 10000;
              if (v115)
                v107 = 5;
              else
                v107 = v114;
              if (v154 > 0xC34)
                v106 = 100000;
              else
                v106 = v116;
              if (v154 > 0xC34)
                v107 = 6;
            }
            else
            {
              v106 = 1000000;
              v107 = 7;
            }
          }
          else
          {
            v106 = 10000000;
            v107 = 8;
          }
        }
        else
        {
          v106 = 100000000;
          v107 = 9;
        }
      }
      else
      {
        v106 = 1000000000;
        v107 = 10;
      }
      v117 = 0;
      v118 = v107;
      v119 = ~v81 + v95 + v96 + v75 * v91 + v97;
      v120 = v95 - (v85 + v86) - v87 + v96 + v97 + v75 * (v91 - v82) - 2;
      v121 = v105 - v95 - v96 - v97 + v78 + v79 + v80 + v75 * (v73 - v91) + 1;
      while (1)
      {
        v122 = v117;
        if (v117 == v118)
          break;
        v123 = v104 / v106;
        v104 = v104 % v106;
        v124 = v123 + 48;
        v117 = v122 + 1;
        *(_BYTE *)(v25 + v122) = v124;
        --v107;
        v125 = v104 << v89;
        v126 = (v104 << v89) + v105;
        if (v100 < v126)
        {
          v106 /= 0xAu;
        }
        else
        {
          v99 += v107;
          v127 = (unint64_t)v106 << v89;
          v128 = v126 < v101 && v100 - v126 >= v127;
          if (!v128)
            goto LABEL_206;
          v129 = 0;
          v130 = v105 + v125 + v127;
          v131 = v120 - v130;
          v132 = v121 + v125 + v127;
          do
          {
            if (v130 >= v101 && v119 - v126 + v129 <= v132)
              break;
            *(_BYTE *)(v25 + v122) = --v124;
            if (v130 >= v101)
              break;
            v133 = v131 + v129;
            v129 -= v127;
            v130 += v127;
            v132 += v127;
          }
          while (v133 >= v127);
        }
        if (v100 >= v126)
          goto LABEL_206;
      }
      v134 = 0;
      do
      {
        v135 = v101;
        v136 = (10 * v105) >> v89;
        v105 = (10 * v105) & (v103 - 1);
        v137 = v136 + 48;
        *(_BYTE *)(v25 + v117 + v134) = v137;
        v100 *= 10;
        v101 *= 10;
        ++v134;
      }
      while (v100 < v105);
      v117 += v134;
      v99 -= v134;
      if (v105 < v101 && v100 - v105 >= v103)
      {
        v138 = -(uint64_t)v105;
        v139 = v100 - v103;
        v140 = v103 + v105;
        v141 = -10 * v135;
        do
        {
          if (v140 >= v101 && v101 + v138 <= v141 + v140)
            break;
          *(_BYTE *)(v25 + v117 - 1) = --v137;
          if (v140 >= v101)
            break;
          v142 = v139 + v138;
          v138 -= v103;
          v140 += v103;
        }
        while (v142 >= v103);
      }
LABEL_206:
      v143 = v99 + (uint64_t)(int)v117;
      if ((v99 & 0x80000000) == 0 && (int)v143 <= 15)
      {
        memset((void *)(v25 + (int)v117), 48, v99);
        *(_WORD *)(v25 + v143) = 12334;
        goto LABEL_227;
      }
      if ((v143 - 16) >= 0xFFFFFFF1)
      {
        v145 = v143;
        v146 = (_BYTE *)(v25 + v143);
        memmove(v146 + 1, v146, (int)v117 - v145);
        *v146 = 46;
        goto LABEL_227;
      }
      if ((_DWORD)v143 == 0 || v143 >= 0xFFFFFFFD)
      {
        v144 = -(int)v143;
        memmove((void *)(v25 + v144 + 2), (const void *)v25, (int)v117);
        *(_WORD *)v25 = 11824;
        memset((void *)(v25 + 2), 48, v144);
        goto LABEL_227;
      }
      if ((_DWORD)v117 == 1)
      {
        v147 = 1;
      }
      else
      {
        v148 = (int)v117;
        memmove((void *)(v25 + 2), (const void *)(v25 + 1), (int)v117 - 1);
        *(_BYTE *)(v25 + 1) = 46;
        v147 = v148 + 1;
      }
      v149 = (_BYTE *)(v25 + v147);
      *v149 = 101;
      v150 = v143 - 1;
      if ((int)v143 >= 1)
        v151 = 43;
      else
        v151 = 45;
      if ((int)v143 - 1 < 0)
        v150 = 1 - v143;
      v149[1] = v151;
      if (v150 <= 9)
      {
        v149[2] = 48;
        v152 = v150 + 48;
LABEL_225:
        v149[3] = v152;
        goto LABEL_227;
      }
      if (v150 <= 0x63)
      {
        v149[2] = v150 / 0xAu + 48;
        v152 = (v150 % 0xAu) | 0x30;
        goto LABEL_225;
      }
      v149[2] = v150 / 0x64 + 48;
      v153 = v150 % 0x64;
      v149[3] = (v153 / 0xAu) | 0x30;
      v149[4] = (v153 % 0xAu) | 0x30;
LABEL_227:
      v111 = *(uint64_t (****)(void))v5;
LABEL_228:
      v6 = (*v111)[1];
      return v6();
    case 8:
      (*(void (**)(void))(**(_QWORD **)result + 8))();
      v26 = a3 + 4;
      v8 = v5 + 608;
      if (v5[631] < 0)
      {
        v27 = *((_QWORD *)v5 + 77);
        if (v27 >= v26)
        {
          v28 = *(uint64_t (****)(void))v5;
LABEL_51:
          v29 = *(char **)v8;
          goto LABEL_52;
        }
      }
      else
      {
        v27 = v5[631];
        if (v26 <= v27)
        {
          v28 = *(uint64_t (****)(void))v5;
          v29 = v5 + 608;
          goto LABEL_52;
        }
      }
      std::string::resize((std::string *)(v5 + 608), 2 * v27, 32);
      v28 = *(uint64_t (****)(void))v5;
      v29 = v5 + 608;
      if (v5[631] < 0)
        goto LABEL_51;
LABEL_52:
      ((void (*)(uint64_t (***)(void), char *, _QWORD))(*v28)[1])(v28, v29, a3 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, "\"bytes\": [", 10);
      v37 = *(unsigned __int8 ***)(a2 + 8);
      v39 = *v37;
      v38 = v37[1];
      if (v39 == v38)
        goto LABEL_104;
      if (v39 != v38 - 1)
      {
        while (1)
        {
          v40 = *v39;
          if (*v39)
            break;
          (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 48);
LABEL_56:
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, ", ", 2);
          if (++v39 == (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_65;
        }
        if (*v39 >= 0xAu)
        {
          if (*v39 < 0x64u)
          {
            v42 = (char *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[*v39];
            v5[17] = v42[1];
            v43 = *v42;
            v41 = 2;
LABEL_64:
            v5[16] = v43;
            (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, v5 + 16, v41);
            goto LABEL_56;
          }
          *(_WORD *)(v5 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[*v39 % 0x64u];
          v40 /= 0x64u;
          v41 = 3;
        }
        else
        {
          v41 = 1;
        }
        v43 = v40 | 0x30;
        goto LABEL_64;
      }
LABEL_65:
      v44 = *v39;
      if (!*v39)
      {
        (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 48);
        goto LABEL_104;
      }
      if (*v39 >= 0xAu)
      {
        if (*v39 < 0x64u)
        {
          v53 = (char *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[*v39];
          v5[17] = v53[1];
          v54 = *v53;
          v45 = 2;
          goto LABEL_103;
        }
        *(_WORD *)(v5 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[*v39 % 0x64u];
        v45 = 3;
        v44 /= 0x64u;
      }
      else
      {
        v45 = 1;
      }
      v54 = v44 | 0x30;
LABEL_103:
      v5[16] = v54;
      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, v5 + 16, v45);
LABEL_104:
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, "],\n", 3);
      v57 = v5 + 608;
      if (v5[631] < 0)
        v57 = *(char **)v8;
      (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, v57, a3 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, "\"subtype\": ", 11);
      v58 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v58 + 25))
      {
        v60 = *(void (**)(void))(**(_QWORD **)v5 + 8);
        goto LABEL_117;
      }
      v59 = *(_BYTE *)(v58 + 24);
      if (!v59)
      {
        (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 48);
        goto LABEL_118;
      }
      if (v59 < 0xAu)
        goto LABEL_115;
      if (v59 >= 0x64u)
      {
        *(_WORD *)(v5 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v59 % 0x64u];
        v59 /= 0x64u;
LABEL_115:
        v62 = v59 | 0x30;
      }
      else
      {
        v61 = (char *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v59];
        v5[17] = v61[1];
        v62 = *v61;
      }
      v5[16] = v62;
      v60 = *(void (**)(void))(**(_QWORD **)v5 + 8);
LABEL_117:
      v60();
LABEL_118:
      (***(void (****)(_QWORD, uint64_t))v5)(*(_QWORD *)v5, 10);
      v31 = *(uint64_t (****)(void))v5;
      if (v5[631] < 0)
        v8 = *(char **)v8;
LABEL_120:
      ((void (*)(uint64_t (***)(void), char *, _QWORD))(*v31)[1])(v31, v8, a3);
      v18 = ***(uint64_t (****)(void))v5;
      return v18();
    case 9:
      v6 = *(uint64_t (**)(void))(**(_QWORD **)result + 8);
      return v6();
    default:
      return result;
  }
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  int v21;
  void *exception;
  char *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t *v27;
  void *v28;
  std::string v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  std::string::size_type v33;
  char __str[8];
  std::string::size_type v35;
  char v36;

  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (v3)
  {
    v5 = (_QWORD *)result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = result + 90;
    do
    {
      if ((v2 & 1) != 0)
        v15 = (uint64_t *)*a2;
      else
        v15 = a2;
      v16 = *((unsigned __int8 *)v15 + v6);
      if (v10)
        v11 = v16 & 0x3F | (v11 << 6);
      else
        v11 = (0xFFu >> nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v16]) & v16;
      v10 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[16 * v10 + 256 + nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v16]];
      if (v10 == 1)
      {
        v18 = *((_DWORD *)v5 + 158);
        if ((v18 - 1) >= 2)
        {
          if (!v18)
          {
            v36 = 3;
            *(_DWORD *)__str = 0;
            snprintf(__str, 3uLL, "%.2X", v16);
            exception = __cxa_allocate_exception(0x20uLL);
            std::to_string(&v29, v6);
            std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, "invalid UTF-8 byte at index ", &v29);
            std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v31, &v30, ": 0x");
            if (v36 >= 0)
              v23 = __str;
            else
              v23 = *(char **)__str;
            if (v36 >= 0)
              v24 = v36;
            else
              v24 = v35;
            v25 = std::string::append(&v31, v23, v24);
            v26 = v25->__r_.__value_.__r.__words[2];
            v32 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v33 = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            nlohmann::detail::type_error::create((uint64_t)exception, 316, (uint64_t)&v32);
          }
          v10 = 1;
        }
        else
        {
          v6 -= v7 != 0;
          if (v18 == 1)
          {
            v19 = v12 + v8;
            v9 = v8 + 3;
            *(_WORD *)v19 = -16401;
            *(_BYTE *)(v19 + 2) = -67;
            if ((unint64_t)(v8 - 497) > 0xC)
            {
LABEL_37:
              v10 = 0;
              v7 = 0;
              v8 = v9;
            }
            else
            {
LABEL_22:
              result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v9);
              v10 = 0;
              v9 = 0;
              v8 = 0;
              v7 = 0;
            }
          }
          else
          {
            v10 = 0;
            v7 = 0;
            v9 = v8;
          }
        }
      }
      else
      {
        if (!v10)
        {
          switch(v11)
          {
            case 8u:
              v17 = 25180;
              goto LABEL_35;
            case 9u:
              v17 = 29788;
              goto LABEL_35;
            case 0xAu:
              v17 = 28252;
              goto LABEL_35;
            case 0xBu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
              goto LABEL_28;
            case 0xCu:
              v17 = 26204;
              goto LABEL_35;
            case 0xDu:
              v17 = 29276;
              goto LABEL_35;
            case 0x22u:
              v17 = 8796;
              goto LABEL_35;
            default:
              if (v11 == 92)
              {
                v17 = 23644;
LABEL_35:
                *(_WORD *)(v12 + v9) = v17;
                v9 += 2;
              }
              else
              {
LABEL_28:
                if (v11 > 0x1F)
                {
                  *(_BYTE *)(v12 + v9++) = v16;
                }
                else
                {
                  result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
                  v9 += 6;
                }
              }
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_37;
              goto LABEL_22;
          }
        }
        *(_BYTE *)(v12 + v9++) = v16;
        ++v7;
      }
      ++v6;
      v13 = *((char *)a2 + 23);
      v2 = v13 >> 31;
      v14 = a2[1];
      if (v13 >= 0)
        v14 = *((unsigned __int8 *)a2 + 23);
    }
    while (v6 < v14);
    if (v10)
    {
      v21 = *((_DWORD *)v5 + 158);
      switch(v21)
      {
        case 1:
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v8);
          v20 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
          return v20();
        case 2:
          v20 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
          return v20();
        case 0:
          v36 = 3;
          *(_DWORD *)__str = 0;
          v27 = (uint64_t *)*a2;
          if (v13 >= 0)
            v27 = a2;
          snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v27 + v14 - 1));
          v28 = __cxa_allocate_exception(0x20uLL);
          std::operator+<char>();
          nlohmann::detail::type_error::create((uint64_t)v28, 316, (uint64_t)&v32);
      }
    }
    else if (v9)
    {
      v20 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
      return v20();
    }
  }
  return result;
}

void sub_19F79DB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0)
      operator delete(a34);
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void nlohmann::detail::type_error::create(uint64_t a1, int a2, uint64_t a3)
{
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  void **v19;
  std::string __p;
  void *v21[2];
  uint64_t v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;

  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_19FFB3620;
  strcpy(v24.__r_.__value_.__l.__data_, "[json.exception.type_error");
  v6 = std::string::append(&v24, ".", 1uLL);
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v23, a2);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v23;
  else
    v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v25, (const std::string::value_type *)v8, size);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v26, "] ", 2uLL);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_27:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
LABEL_10:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_28:
  operator delete(v24.__r_.__value_.__l.__data_);
LABEL_11:
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  v17 = std::string::append(&__p, v15, v16);
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v21 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v22 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 >= 0)
    v19 = v21;
  else
    v19 = (void **)v21[0];
  *(_QWORD *)a1 = &off_1E42C6B48;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x1A1AF4860](a1 + 16, v19);
  *(_QWORD *)a1 = &off_1E42C6AF0;
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_19F79DF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::exception *v28;

  std::exception::~exception(v28);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::~type_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E42C6B48;
  MEMORY[0x1A1AF486C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E42C6B48;
  MEMORY[0x1A1AF486C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AF4E00);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E42C6B48;
  MEMORY[0x1A1AF486C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E42C6B48;
  MEMORY[0x1A1AF486C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AF4E00);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  size_t v20;
  const char *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  const char *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  int v35;
  uint64_t *j;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  const char *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  const char *v54;
  size_t v55;
  size_t v56;
  size_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  const char *v63;
  size_t v64;
  size_t v65;
  size_t v66;
  int v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  const char *v71;
  size_t v72;
  size_t v73;
  size_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  const char *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  int v84;
  uint64_t v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  size_t v89;
  const char *v90;
  size_t v91;
  size_t v92;
  size_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  size_t v97;
  const char *v98;
  size_t v99;
  size_t v100;
  size_t v101;
  uint64_t *v102;
  const char *v103;
  uint64_t *v104;
  uint64_t i;
  uint64_t v106;
  const char *v107;
  const char *v108;
  size_t v109;
  const char *v110;
  size_t v111;
  size_t v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  int v117;
  const char *v118;
  const char *v119;
  uint64_t v120;
  size_t v121;
  uint64_t *v122;
  const char *v123;
  size_t v124;
  size_t v125;
  size_t v126;
  int v127;
  uint64_t v128;
  const char *v129;
  char *v130;
  size_t v131;
  size_t v132;
  size_t v133;
  size_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  int64_t v146;
  uint64_t *v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  char *v156;
  size_t v157;
  size_t v158;
  size_t v159;
  size_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  size_t v166;
  const char *v167;
  size_t v168;
  size_t v169;
  size_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  const char *v175;
  const char *v176;
  size_t v177;
  size_t v178;
  size_t v179;
  size_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  size_t v185;
  const char *v186;
  size_t v187;
  size_t v188;
  size_t v189;
  uint64_t *v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  size_t v195;
  const char *v196;
  uint64_t *v197;
  size_t v198;
  size_t v199;
  size_t v200;
  uint64_t v201;
  const char *v202;
  _QWORD *v203;
  uint64_t v204;
  const char *v205;
  size_t v206;
  size_t v207;
  size_t v208;
  size_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  int64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  const char *v220;
  size_t v221;
  size_t v222;
  size_t v223;
  size_t v224;
  uint64_t *v225;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  size_t v235;
  const char *v236;
  size_t v237;
  size_t v238;
  size_t v239;
  unint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  const char *v244;
  size_t v245;
  const char *v246;
  size_t v247;
  size_t v248;
  size_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  const char *v254;
  const char *v255;
  uint64_t v256;
  const char *v257;
  size_t v258;
  size_t v259;
  size_t v260;
  size_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  const char *v265;
  char *v266;
  size_t v267;
  size_t v268;
  size_t v269;
  size_t v270;
  size_t v271;
  const char *v272;
  size_t v273;
  size_t v274;
  size_t v275;
  uint64_t *v276;
  uint64_t v278;
  uint64_t *v279;
  unint64_t v280;
  int64_t v282;
  uint64_t *v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;

  v287 = (uint64_t *)result;
LABEL_2:
  v5 = a2 - 1;
  v6 = v287;
  while (2)
  {
    v7 = (char *)a2 - (char *)v6;
    v8 = a2 - v6;
    v287 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v136 = *v5;
        v137 = *v6;
        v138 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        v139 = v138 + 96 * *v5;
        v140 = v138 + 96 * *v6;
        if (*(char *)(v139 + 23) < 0)
        {
          if (*(_QWORD *)(v139 + 8))
            v141 = *(const char **)v139;
          else
            v141 = "";
        }
        else if (*(_BYTE *)(v139 + 23))
        {
          v141 = (const char *)(v138 + 96 * *v5);
        }
        else
        {
          v141 = "";
        }
        v271 = strlen(v141);
        if (*(char *)(v140 + 23) < 0)
        {
          if (*(_QWORD *)(v140 + 8))
            v272 = *(const char **)v140;
          else
            v272 = "";
        }
        else if (*(_BYTE *)(v140 + 23))
        {
          v272 = (const char *)v140;
        }
        else
        {
          v272 = "";
        }
        v273 = strlen(v272);
        v274 = v273;
        if (v273 >= v271)
          v275 = v271;
        else
          v275 = v273;
        result = memcmp(v141, v272, v275);
        if ((_DWORD)result)
        {
          v276 = a2 - 1;
          if ((result & 0x80000000) == 0)
            return result;
        }
        else
        {
          v276 = a2 - 1;
          if (v271 >= v274)
            return result;
        }
        *v287 = v136;
        *v276 = v137;
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v6, v6 + 1, v5, *(_QWORD *)(*(_QWORD *)a3 + 48));
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v6, v6 + 1, v6 + 2, v5, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,0>(v6, v6 + 1, v6 + 2, v6 + 3, v5, a3);
      default:
        v9 = v6;
        if (v7 > 191)
        {
          if (!a4)
          {
            if (v6 != a2)
            {
              v280 = (char *)a2 - (char *)v6;
              v146 = (v8 - 2) >> 1;
              v289 = a2 - v6;
              v295 = v146;
              while (1)
              {
                v148 = v146;
                if (v295 < v146)
                  goto LABEL_298;
                v149 = *(_QWORD *)a3;
                v150 = (2 * v148) | 1;
                v151 = &v287[v150];
                if (2 * v148 + 2 >= (uint64_t)v8)
                {
                  v155 = *(_QWORD *)(v149 + 48);
                  goto LABEL_323;
                }
                v152 = *(_QWORD *)(v149 + 48);
                v153 = v152 + 96 * *v151;
                if (*(char *)(v153 + 23) < 0)
                  v154 = *(_QWORD *)(v153 + 8) ? *(const char **)v153 : "";
                else
                  v154 = *(_BYTE *)(v153 + 23) ? (const char *)(v152 + 96 * *v151) : "";
                v303 = v152;
                v156 = (char *)(v152 + 96 * v151[1]);
                v157 = strlen(v154);
                if (v156[23] < 0)
                {
                  v156 = *((_QWORD *)v156 + 1) ? *(char **)v156 : "";
                }
                else if (!v156[23])
                {
                  v156 = "";
                }
                v158 = strlen(v156);
                v159 = v158;
                v160 = v158 >= v157 ? v157 : v158;
                v161 = memcmp(v154, v156, v160);
                if (!v161)
                  break;
                if (v161 < 0)
                  goto LABEL_321;
LABEL_322:
                v155 = v303;
LABEL_323:
                v162 = *v151;
                v286 = v287[v148];
                v163 = v155 + 96 * *v151;
                if (*(char *)(v163 + 23) < 0)
                {
                  if (*(_QWORD *)(v163 + 8))
                    v164 = *(const char **)v163;
                  else
                    v164 = "";
                }
                else if (*(_BYTE *)(v163 + 23))
                {
                  v164 = (const char *)(v155 + 96 * v162);
                }
                else
                {
                  v164 = "";
                }
                v304 = v155;
                v165 = v155 + 96 * v286;
                v166 = strlen(v164);
                if (*(char *)(v165 + 23) < 0)
                {
                  if (*(_QWORD *)(v165 + 8))
                    v167 = *(const char **)v165;
                  else
                    v167 = "";
                }
                else if (*(_BYTE *)(v165 + 23))
                {
                  v167 = (const char *)v165;
                }
                else
                {
                  v167 = "";
                }
                v168 = strlen(v167);
                v169 = v168;
                if (v168 >= v166)
                  v170 = v166;
                else
                  v170 = v168;
                result = memcmp(v164, v167, v170);
                if ((_DWORD)result)
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_346;
                }
                else if (v166 >= v169)
                {
LABEL_346:
                  v282 = v148;
                  v287[v148] = v162;
                  if (v295 < v150)
                  {
LABEL_296:
                    v147 = v151;
LABEL_297:
                    *v147 = v286;
                    v148 = v282;
                    v8 = v289;
                    goto LABEL_298;
                  }
                  while (2)
                  {
                    v171 = v165;
                    v172 = (2 * v150) | 1;
                    v173 = &v287[v172];
                    v150 = 2 * v150 + 2;
                    if (v150 < v289)
                    {
                      v174 = v304 + 96 * *v173;
                      if (*(char *)(v174 + 23) < 0)
                      {
                        if (*(_QWORD *)(v174 + 8))
                          v175 = *(const char **)v174;
                        else
                          v175 = "";
                      }
                      else if (*(_BYTE *)(v174 + 23))
                      {
                        v175 = (const char *)(v304 + 96 * *v173);
                      }
                      else
                      {
                        v175 = "";
                      }
                      v147 = v173 + 1;
                      v176 = (const char *)(v304 + 96 * v173[1]);
                      v177 = strlen(v175);
                      if (v176[23] < 0)
                      {
                        if (*((_QWORD *)v176 + 1))
                          v176 = *(const char **)v176;
                        else
                          v176 = "";
                      }
                      else if (!v176[23])
                      {
                        v176 = "";
                      }
                      v178 = strlen(v176);
                      v179 = v178;
                      if (v178 >= v177)
                        v180 = v177;
                      else
                        v180 = v178;
                      v181 = memcmp(v175, v176, v180);
                      if (v181)
                      {
                        if ((v181 & 0x80000000) == 0)
                          break;
LABEL_371:
                        v182 = *v147;
                        v183 = v304 + 96 * *v147;
                        if (*(char *)(v183 + 23) < 0)
                        {
                          v165 = v171;
                          if (*(_QWORD *)(v183 + 8))
                            v184 = *(const char **)v183;
                          else
                            v184 = "";
                        }
                        else
                        {
                          if (*(_BYTE *)(v183 + 23))
                            v184 = (const char *)(v304 + 96 * *v147);
                          else
                            v184 = "";
                          v165 = v171;
                        }
                        v185 = strlen(v184);
                        if (*(char *)(v165 + 23) < 0)
                        {
                          if (*(_QWORD *)(v165 + 8))
                            v186 = *(const char **)v165;
                          else
                            v186 = "";
                        }
                        else if (*(_BYTE *)(v165 + 23))
                        {
                          v186 = (const char *)v165;
                        }
                        else
                        {
                          v186 = "";
                        }
                        v187 = strlen(v186);
                        v188 = v187;
                        if (v187 >= v185)
                          v189 = v185;
                        else
                          v189 = v187;
                        result = memcmp(v184, v186, v189);
                        if ((_DWORD)result)
                        {
                          if ((result & 0x80000000) != 0)
                            goto LABEL_296;
                        }
                        else if (v185 < v188)
                        {
                          goto LABEL_296;
                        }
                        *v151 = v182;
                        v151 = v147;
                        if (v295 < v150)
                          goto LABEL_297;
                        continue;
                      }
                      if (v177 < v179)
                        goto LABEL_371;
                    }
                    break;
                  }
                  v147 = &v287[v172];
                  v150 = v172;
                  goto LABEL_371;
                }
LABEL_298:
                v146 = v148 - 1;
                if (!v148)
                {
                  v210 = v280 >> 3;
                  while (1)
                  {
                    v211 = 0;
                    v212 = v287;
                    v291 = *v287;
                    v297 = *(_QWORD *)a3;
                    v213 = (unint64_t)(v210 - 2) >> 1;
                    v305 = v210;
                    do
                    {
                      v214 = v212;
                      v215 = &v212[v211 + 1];
                      v216 = (2 * v211) | 1;
                      v211 = 2 * v211 + 2;
                      if (v211 >= v210)
                      {
LABEL_447:
                        v212 = v215;
                        v211 = v216;
                        goto LABEL_448;
                      }
                      v217 = *(_QWORD *)(v297 + 48);
                      v218 = v217 + 96 * *v215;
                      if (*(char *)(v218 + 23) < 0)
                      {
                        if (*(_QWORD *)(v218 + 8))
                          v219 = *(const char **)v218;
                        else
                          v219 = "";
                      }
                      else if (*(_BYTE *)(v218 + 23))
                      {
                        v219 = (const char *)(v217 + 96 * *v215);
                      }
                      else
                      {
                        v219 = "";
                      }
                      v212 = v215 + 1;
                      v220 = (const char *)(v217 + 96 * v215[1]);
                      v221 = strlen(v219);
                      if (v220[23] < 0)
                      {
                        if (*((_QWORD *)v220 + 1))
                          v220 = *(const char **)v220;
                        else
                          v220 = "";
                      }
                      else if (!v220[23])
                      {
                        v220 = "";
                      }
                      v222 = strlen(v220);
                      v223 = v222;
                      if (v222 >= v221)
                        v224 = v221;
                      else
                        v224 = v222;
                      result = memcmp(v219, v220, v224);
                      if ((_DWORD)result)
                      {
                        v210 = v305;
                        if ((result & 0x80000000) == 0)
                          goto LABEL_447;
                      }
                      else
                      {
                        v210 = v305;
                        if (v221 >= v223)
                          goto LABEL_447;
                      }
LABEL_448:
                      *v214 = *v212;
                    }
                    while (v211 <= v213);
                    v225 = a2 - 1;
                    if (v212 == --a2)
                    {
                      *v212 = v291;
                    }
                    else
                    {
                      *v212 = *v225;
                      *v225 = v291;
                      v227 = (char *)v212 - (char *)v287 + 8;
                      if (v227 >= 9)
                      {
                        v228 = ((unint64_t)v227 >> 3) - 2;
                        v229 = v228 >> 1;
                        v230 = &v287[v228 >> 1];
                        v231 = *v230;
                        v298 = *(_QWORD *)(*(_QWORD *)a3 + 48);
                        v232 = v298 + 96 * *v230;
                        if (*(char *)(v232 + 23) < 0)
                        {
                          if (*(_QWORD *)(v232 + 8))
                            v233 = *(const char **)v232;
                          else
                            v233 = "";
                        }
                        else if (*(_BYTE *)(v232 + 23))
                        {
                          v233 = (const char *)(v298 + 96 * v231);
                        }
                        else
                        {
                          v233 = "";
                        }
                        v292 = *v212;
                        v234 = v298 + 96 * *v212;
                        v235 = strlen(v233);
                        if (*(char *)(v234 + 23) < 0)
                        {
                          if (*(_QWORD *)(v234 + 8))
                            v236 = *(const char **)v234;
                          else
                            v236 = "";
                        }
                        else if (*(_BYTE *)(v234 + 23))
                        {
                          v236 = (const char *)(v298 + 96 * *v212);
                        }
                        else
                        {
                          v236 = "";
                        }
                        v237 = strlen(v236);
                        v238 = v237;
                        if (v237 >= v235)
                          v239 = v235;
                        else
                          v239 = v237;
                        result = memcmp(v233, v236, v239);
                        if ((_DWORD)result)
                        {
                          if ((result & 0x80000000) != 0)
                          {
LABEL_495:
                            *v212 = v231;
                            if (v228 >= 2)
                            {
                              while (1)
                              {
                                v240 = v229 - 1;
                                v229 = (v229 - 1) >> 1;
                                v241 = &v287[v229];
                                v242 = *v241;
                                v243 = v298 + 96 * *v241;
                                if (*(char *)(v243 + 23) < 0)
                                {
                                  if (*(_QWORD *)(v243 + 8))
                                    v244 = *(const char **)v243;
                                  else
                                    v244 = "";
                                }
                                else if (*(_BYTE *)(v243 + 23))
                                {
                                  v244 = (const char *)(v298 + 96 * *v241);
                                }
                                else
                                {
                                  v244 = "";
                                }
                                v245 = strlen(v244);
                                if (*(char *)(v234 + 23) < 0)
                                {
                                  if (*(_QWORD *)(v234 + 8))
                                    v246 = *(const char **)v234;
                                  else
                                    v246 = "";
                                }
                                else if (*(_BYTE *)(v234 + 23))
                                {
                                  v246 = (const char *)v234;
                                }
                                else
                                {
                                  v246 = "";
                                }
                                v247 = strlen(v246);
                                v248 = v247;
                                if (v247 >= v245)
                                  v249 = v245;
                                else
                                  v249 = v247;
                                result = memcmp(v244, v246, v249);
                                if ((_DWORD)result)
                                {
                                  if ((result & 0x80000000) == 0)
                                    break;
                                }
                                else if (v245 >= v248)
                                {
                                  break;
                                }
                                *v230 = v242;
                                v230 = &v287[v229];
                                if (v240 <= 1)
                                  goto LABEL_519;
                              }
                            }
                            v241 = v230;
LABEL_519:
                            *v241 = v292;
                          }
                        }
                        else if (v235 < v238)
                        {
                          goto LABEL_495;
                        }
                      }
                    }
                    v210 = v305 - 1;
                    if (v305 <= 2)
                      return result;
                  }
                }
              }
              if (v157 >= v159)
                goto LABEL_322;
LABEL_321:
              ++v151;
              v150 = 2 * v148 + 2;
              goto LABEL_322;
            }
            return result;
          }
          v10 = *(_QWORD *)(*(_QWORD *)a3 + 48);
          if ((unint64_t)v7 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(&v6[v8 >> 1], v6, v5, v10);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v6, &v6[v8 >> 1], v5, v10);
            v11 = v8 >> 1;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v6 + 1, &v6[v11 - 1], a2 - 2, *(_QWORD *)(*(_QWORD *)a3 + 48));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v6 + 2, &v6[v11 + 1], a2 - 3, *(_QWORD *)(*(_QWORD *)a3 + 48));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(&v6[v11 - 1], &v6[v11], &v6[v11 + 1], *(_QWORD *)(*(_QWORD *)a3 + 48));
            v12 = *v6;
            *v6 = v6[v11];
            v6[v11] = v12;
          }
          --a4;
          v13 = *(_QWORD *)a3;
          v14 = *v6;
          v278 = *v6;
          if ((a5 & 1) == 0)
          {
            v15 = *(_QWORD *)(v13 + 48);
            v17 = v15 + 96 * *(v6 - 1);
            if (*(char *)(v17 + 23) < 0)
            {
              if (*(_QWORD *)(v17 + 8))
                v18 = *(const char **)v17;
              else
                v18 = "";
            }
            else if (*(_BYTE *)(v17 + 23))
            {
              v18 = (const char *)(v15 + 96 * *(v6 - 1));
            }
            else
            {
              v18 = "";
            }
            v19 = (const char *)(v15 + 96 * v14);
            v20 = strlen(v18);
            v16 = *((unsigned __int8 *)v19 + 23);
            if ((v16 & 0x80) != 0)
            {
              if (*((_QWORD *)v19 + 1))
                v21 = *(const char **)v19;
              else
                v21 = "";
            }
            else if (v19[23])
            {
              v21 = (const char *)(v15 + 96 * v14);
            }
            else
            {
              v21 = "";
            }
            v22 = strlen(v21);
            v23 = v22;
            if (v22 >= v20)
              v24 = v20;
            else
              v24 = v22;
            v25 = memcmp(v18, v21, v24);
            if (v25)
            {
              if (v25 < 0)
                goto LABEL_30;
            }
            else if (v20 < v23)
            {
              goto LABEL_30;
            }
            v294 = v15 + 96 * v14;
            if ((v16 & 0x80) != 0)
            {
              if (*((_QWORD *)v19 + 1))
                v19 = *(const char **)v19;
              else
                v19 = "";
            }
            else if (!v16)
            {
              v19 = "";
            }
            v77 = *v5;
            v78 = v15 + 96 * v77;
            v79 = strlen(v19);
            v300 = v77;
            if (*(char *)(v78 + 23) < 0)
            {
              if (*(_QWORD *)(v78 + 8))
                v80 = *(const char **)v78;
              else
                v80 = "";
            }
            else if (*(_BYTE *)(v78 + 23))
            {
              v80 = (const char *)(v15 + 96 * v77);
            }
            else
            {
              v80 = "";
            }
            v81 = strlen(v80);
            v82 = v81;
            if (v81 >= v79)
              v83 = v79;
            else
              v83 = v81;
            result = memcmp(v19, v80, v83);
            v84 = v16;
            if ((_DWORD)result)
            {
              v85 = v294;
              if ((result & 0x80000000) != 0)
                goto LABEL_187;
            }
            else
            {
              v85 = v294;
              if (v79 < v82)
              {
LABEL_187:
                if (v16)
                  v94 = (const char *)v85;
                else
                  v94 = "";
                do
                {
                  while (1)
                  {
                    ++v9;
                    v95 = v94;
                    if ((v16 & 0x80) != 0)
                    {
                      if (*(_QWORD *)(v294 + 8))
                        v95 = *(const char **)v294;
                      else
                        v95 = "";
                    }
                    v96 = v15 + 96 * *v9;
                    v97 = strlen(v95);
                    if (*(char *)(v96 + 23) < 0)
                      v98 = *(_QWORD *)(v96 + 8) ? *(const char **)v96 : "";
                    else
                      v98 = *(_BYTE *)(v96 + 23) ? (const char *)(v15 + 96 * *v9) : "";
                    v16 = v84;
                    v99 = strlen(v98);
                    v100 = v99;
                    v101 = v99 >= v97 ? v97 : v99;
                    result = memcmp(v95, v98, v101);
                    if ((_DWORD)result)
                      break;
                    if (v97 < v100)
                      goto LABEL_207;
                  }
                }
                while ((result & 0x80000000) == 0);
LABEL_207:
                v85 = v294;
LABEL_208:
                v6 = v9;
                goto LABEL_209;
              }
            }
            v6 = v9 + 1;
            if (v9 + 1 < a2)
            {
              if (v16)
                v86 = (const char *)v85;
              else
                v86 = "";
              do
              {
                v87 = v86;
                if ((v16 & 0x80) != 0)
                {
                  if (*(_QWORD *)(v294 + 8))
                    v87 = *(const char **)v294;
                  else
                    v87 = "";
                }
                v88 = v15 + 96 * *v6;
                v89 = strlen(v87);
                if (*(char *)(v88 + 23) < 0)
                {
                  v9 = v6;
                  if (*(_QWORD *)(v88 + 8))
                    v90 = *(const char **)v88;
                  else
                    v90 = "";
                }
                else
                {
                  v9 = v6;
                  if (*(_BYTE *)(v88 + 23))
                    v90 = (const char *)(v15 + 96 * *v6);
                  else
                    v90 = "";
                }
                v91 = strlen(v90);
                v92 = v91;
                if (v91 >= v89)
                  v93 = v89;
                else
                  v93 = v91;
                result = memcmp(v87, v90, v93);
                v16 = v84;
                if ((_DWORD)result)
                {
                  v85 = v294;
                  if ((result & 0x80000000) != 0)
                    goto LABEL_208;
                }
                else
                {
                  v85 = v294;
                  if (v89 < v92)
                    goto LABEL_208;
                }
                v6 = v9 + 1;
              }
              while (v9 + 1 < a2);
            }
LABEL_209:
            v102 = a2;
            if (v6 >= a2)
              goto LABEL_233;
            if (v16)
              v103 = (const char *)v85;
            else
              v103 = "";
            v102 = a2 - 1;
            v104 = v6;
            for (i = v300; ; i = v106)
            {
              v107 = v103;
              if ((v16 & 0x80) != 0)
              {
                if (*(_QWORD *)(v294 + 8))
                  v107 = *(const char **)v294;
                else
                  v107 = "";
              }
              v108 = (const char *)(v15 + 96 * i);
              v109 = strlen(v107);
              if (v108[23] < 0)
                v110 = *((_QWORD *)v108 + 1) ? *(const char **)v108 : "";
              else
                v110 = v108[23] ? v108 : "";
              LOBYTE(v16) = v84;
              v111 = strlen(v110);
              v112 = v111;
              v113 = v111 >= v109 ? v109 : v111;
              result = memcmp(v107, v110, v113);
              if ((_DWORD)result)
                break;
              if (v109 >= v112)
                goto LABEL_232;
LABEL_215:
              v106 = *--v102;
            }
            if ((result & 0x80000000) != 0)
              goto LABEL_215;
LABEL_232:
            v6 = v104;
            v85 = v294;
LABEL_233:
            if (v6 < v102)
            {
              v301 = v15;
              v114 = *v6;
              v115 = *v102;
              do
              {
                *v6 = v115;
                v116 = v6 + 1;
                *v102 = v114;
                v117 = *(char *)(v85 + 23);
                if (*(_BYTE *)(v85 + 23))
                  v118 = (const char *)v85;
                else
                  v118 = "";
                while (1)
                {
                  v114 = *v116;
                  v119 = v118;
                  if (v117 < 0)
                  {
                    if (*(_QWORD *)(v294 + 8))
                      v119 = *(const char **)v294;
                    else
                      v119 = "";
                  }
                  v120 = v301 + 96 * v114;
                  v121 = strlen(v119);
                  if (*(char *)(v120 + 23) < 0)
                  {
                    v122 = v116;
                    v123 = *(_QWORD *)(v120 + 8) ? *(const char **)v120 : "";
                  }
                  else
                  {
                    v122 = v116;
                    v123 = *(_BYTE *)(v120 + 23) ? (const char *)(v301 + 96 * v114) : "";
                  }
                  v124 = strlen(v123);
                  v125 = v124;
                  v126 = v124 >= v121 ? v121 : v124;
                  v127 = memcmp(v119, v123, v126);
                  if (v127)
                    break;
                  if (v121 < v125)
                    goto LABEL_259;
LABEL_240:
                  v116 = v122 + 1;
                }
                if ((v127 & 0x80000000) == 0)
                  goto LABEL_240;
                do
                {
                  while (1)
                  {
LABEL_259:
                    v128 = *--v102;
                    v115 = v128;
                    v129 = v118;
                    if (v117 < 0)
                    {
                      if (*(_QWORD *)(v294 + 8))
                        v129 = *(const char **)v294;
                      else
                        v129 = "";
                    }
                    v130 = (char *)(v301 + 96 * v115);
                    v131 = strlen(v129);
                    if (v130[23] < 0)
                    {
                      v130 = *((_QWORD *)v130 + 1) ? *(char **)v130 : "";
                    }
                    else if (!v130[23])
                    {
                      v130 = "";
                    }
                    v132 = strlen(v130);
                    v133 = v132;
                    v134 = v132 >= v131 ? v131 : v132;
                    result = memcmp(v129, v130, v134);
                    if ((_DWORD)result)
                      break;
                    if (v131 >= v133)
                      goto LABEL_235;
                  }
                }
                while ((result & 0x80000000) != 0);
LABEL_235:
                v6 = v122;
                v85 = v294;
              }
              while (v122 < v102);
            }
            v135 = v6 - 1;
            if (v6 - 1 != v287)
              *v287 = *v135;
            a5 = 0;
            *v135 = v278;
            v5 = a2 - 1;
            continue;
          }
          v15 = *(_QWORD *)(v13 + 48);
          v16 = *(unsigned __int8 *)(v15 + 96 * v14 + 23);
LABEL_30:
          v293 = v15 + 96 * v14;
          if (v16)
            v26 = (const char *)(v15 + 96 * v14);
          else
            v26 = "";
          do
          {
            while (1)
            {
              v27 = v9[1];
              ++v9;
              v28 = v15 + 96 * v27;
              v299 = v27;
              if (*(char *)(v28 + 23) < 0)
              {
                if (*(_QWORD *)(v28 + 8))
                  v29 = *(const char **)v28;
                else
                  v29 = "";
              }
              else if (*(_BYTE *)(v28 + 23))
              {
                v29 = (const char *)v28;
              }
              else
              {
                v29 = "";
              }
              v30 = strlen(v29);
              v31 = v26;
              if ((v16 & 0x80) != 0)
              {
                if (*(_QWORD *)(v293 + 8))
                  v31 = *(const char **)v293;
                else
                  v31 = "";
              }
              v32 = strlen(v31);
              v33 = v32;
              v34 = v32 >= v30 ? v30 : v32;
              v35 = memcmp(v29, v31, v34);
              if (v35)
                break;
              if (v30 >= v33)
                goto LABEL_50;
            }
          }
          while (v35 < 0);
LABEL_50:
          j = v5;
          v288 = v9 - 1;
          v285 = v9;
          if (v9 - 1 != v287)
          {
            while (1)
            {
              v38 = v15 + 96 * *j;
              if (*(char *)(v38 + 23) < 0)
              {
                if (*(_QWORD *)(v38 + 8))
                  v39 = *(const char **)v38;
                else
                  v39 = "";
              }
              else if (*(_BYTE *)(v38 + 23))
              {
                v39 = (const char *)(v15 + 96 * *j);
              }
              else
              {
                v39 = "";
              }
              v40 = strlen(v39);
              v41 = v26;
              if ((v16 & 0x80) != 0)
              {
                if (*(_QWORD *)(v293 + 8))
                  v41 = *(const char **)v293;
                else
                  v41 = "";
              }
              v42 = strlen(v41);
              v43 = v42;
              if (v42 >= v40)
                v44 = v40;
              else
                v44 = v42;
              v45 = memcmp(v39, v41, v44);
              if (v45)
              {
                if (v45 < 0)
                {
LABEL_71:
                  v37 = v293;
                  goto LABEL_72;
                }
              }
              else if (v40 < v43)
              {
                goto LABEL_71;
              }
              --j;
            }
          }
          j = a2;
          v37 = v293;
          if (v9 < a2)
          {
            for (j = v5; ; --j)
            {
              v68 = v15 + 96 * *j;
              if (*(char *)(v68 + 23) < 0)
              {
                if (*(_QWORD *)(v68 + 8))
                  v69 = *(const char **)v68;
                else
                  v69 = "";
              }
              else if (*(_BYTE *)(v68 + 23))
              {
                v69 = (const char *)(v15 + 96 * *j);
              }
              else
              {
                v69 = "";
              }
              v70 = strlen(v69);
              v71 = v26;
              if ((v16 & 0x80) != 0)
              {
                if (*(_QWORD *)(v293 + 8))
                  v71 = *(const char **)v293;
                else
                  v71 = "";
              }
              v72 = strlen(v71);
              v73 = v72;
              if (v72 >= v70)
                v74 = v70;
              else
                v74 = v72;
              v75 = memcmp(v69, v71, v74);
              if (v75)
              {
                if (v9 >= j)
                  goto LABEL_71;
                v37 = v293;
                if (v75 < 0)
                  break;
              }
              else
              {
                if (v9 >= j)
                  goto LABEL_71;
                v37 = v293;
                if (v70 < v73)
                  break;
              }
            }
          }
LABEL_72:
          v279 = j;
          if (v9 < j)
          {
            v46 = v15;
            v47 = *j;
            v48 = v285;
            do
            {
              *v48++ = v47;
              *j = v299;
              v49 = *(char *)(v37 + 23);
              if (*(_BYTE *)(v37 + 23))
                v50 = (const char *)v37;
              else
                v50 = "";
              while (1)
              {
                v299 = *v48;
                v51 = v46 + 96 * *v48;
                if (*(char *)(v51 + 23) < 0)
                {
                  if (*(_QWORD *)(v51 + 8))
                    v52 = *(const char **)v51;
                  else
                    v52 = "";
                }
                else if (*(_BYTE *)(v51 + 23))
                {
                  v52 = (const char *)(v46 + 96 * v299);
                }
                else
                {
                  v52 = "";
                }
                v53 = strlen(v52);
                v54 = v50;
                if (v49 < 0)
                {
                  if (*(_QWORD *)(v293 + 8))
                    v54 = *(const char **)v293;
                  else
                    v54 = "";
                }
                v55 = strlen(v54);
                v56 = v55;
                v57 = v55 >= v53 ? v53 : v55;
                v58 = memcmp(v52, v54, v57);
                if (v58)
                  break;
                if (v53 >= v56)
                  goto LABEL_96;
LABEL_79:
                ++v48;
              }
              if (v58 < 0)
                goto LABEL_79;
LABEL_96:
              v288 = v48 - 1;
              do
              {
                while (1)
                {
                  v59 = *--j;
                  v47 = v59;
                  v60 = v46 + 96 * v59;
                  if (*(char *)(v60 + 23) < 0)
                  {
                    if (*(_QWORD *)(v60 + 8))
                      v61 = *(const char **)v60;
                    else
                      v61 = "";
                  }
                  else if (*(_BYTE *)(v60 + 23))
                  {
                    v61 = (const char *)v60;
                  }
                  else
                  {
                    v61 = "";
                  }
                  v62 = strlen(v61);
                  v63 = v50;
                  if (v49 < 0)
                  {
                    if (*(_QWORD *)(v293 + 8))
                      v63 = *(const char **)v293;
                    else
                      v63 = "";
                  }
                  v64 = strlen(v63);
                  v65 = v64;
                  v66 = v64 >= v62 ? v62 : v64;
                  v67 = memcmp(v61, v63, v66);
                  if (v67)
                    break;
                  if (v62 < v65)
                    goto LABEL_74;
                }
              }
              while ((v67 & 0x80000000) == 0);
LABEL_74:
              v37 = v293;
            }
            while (v48 < j);
          }
          if (v288 != v287)
            *v287 = *v288;
          *v288 = v278;
          v5 = a2 - 1;
          if (v285 < v279)
            goto LABEL_142;
          v76 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v287, v288, a3);
          v6 = v288 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(v288 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v76)
              continue;
LABEL_142:
            result = std::__introsort<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,false>(v287, v288, a3, a4, a5 & 1);
            a5 = 0;
            v6 = v288 + 1;
            continue;
          }
          a2 = v288;
          if (v76)
            return result;
          goto LABEL_2;
        }
        v142 = *(_QWORD *)a3;
        if ((a5 & 1) != 0)
        {
          if (v6 == a2)
            return result;
          v143 = v6 + 1;
          if (v6 + 1 == a2)
            return result;
          v144 = 0;
          v302 = *(_QWORD *)(v142 + 48);
          v145 = v6;
LABEL_397:
          v191 = v302 + 96 * v145[1];
          v290 = v145[1];
          v296 = v143;
          if (*(char *)(v191 + 23) < 0)
          {
            if (*(_QWORD *)(v191 + 8))
              v192 = *(const char **)v191;
            else
              v192 = "";
          }
          else if (*(_BYTE *)(v191 + 23))
          {
            v192 = (const char *)(v302 + 96 * v145[1]);
          }
          else
          {
            v192 = "";
          }
          v193 = *v145;
          v194 = v302 + 96 * *v145;
          v195 = strlen(v192);
          if (*(char *)(v194 + 23) < 0)
          {
            if (*(_QWORD *)(v194 + 8))
              v196 = *(const char **)v194;
            else
              v196 = "";
          }
          else if (*(_BYTE *)(v194 + 23))
          {
            v196 = (const char *)(v302 + 96 * *v145);
          }
          else
          {
            v196 = "";
          }
          v197 = v287;
          v198 = strlen(v196);
          v199 = v198;
          if (v198 >= v195)
            v200 = v195;
          else
            v200 = v198;
          result = memcmp(v192, v196, v200);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_396;
          }
          else if (v195 >= v199)
          {
            goto LABEL_396;
          }
          v145[1] = v193;
          v190 = v287;
          if (v145 == v287)
            goto LABEL_395;
          v201 = v144;
          while (1)
          {
            if (*(char *)(v191 + 23) < 0)
            {
              if (*(_QWORD *)(v191 + 8))
                v202 = *(const char **)v191;
              else
                v202 = "";
            }
            else if (*(_BYTE *)(v191 + 23))
            {
              v202 = (const char *)v191;
            }
            else
            {
              v202 = "";
            }
            v203 = (uint64_t *)((char *)v197 + v201);
            v204 = *(uint64_t *)((char *)v197 + v201 - 8);
            v205 = (const char *)(v302 + 96 * v204);
            v206 = strlen(v202);
            if (v205[23] < 0)
            {
              if (*((_QWORD *)v205 + 1))
                v205 = *(const char **)v205;
              else
                v205 = "";
            }
            else if (!v205[23])
            {
              v205 = "";
            }
            v207 = strlen(v205);
            v208 = v207;
            if (v207 >= v206)
              v209 = v206;
            else
              v209 = v207;
            result = memcmp(v202, v205, v209);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
              {
                v190 = (uint64_t *)((char *)v287 + v201);
                goto LABEL_395;
              }
            }
            else if (v206 >= v208)
            {
              v190 = v145;
LABEL_395:
              *v190 = v290;
LABEL_396:
              v145 = v296;
              v143 = v296 + 1;
              v144 += 8;
              if (v296 + 1 == a2)
                return result;
              goto LABEL_397;
            }
            --v145;
            *v203 = v204;
            v201 -= 8;
            v197 = v287;
            if (!v201)
            {
              v190 = v287;
              goto LABEL_395;
            }
          }
        }
        if (v6 != a2)
        {
          v250 = v6 + 1;
          if (v6 + 1 != a2)
          {
            v251 = *(_QWORD *)(v142 + 48);
            do
            {
              v252 = v287;
              v287 = v250;
              v253 = v252[1];
              v254 = (const char *)(v251 + 96 * v253);
              if (v254[23] < 0)
              {
                if (*((_QWORD *)v254 + 1))
                  v255 = *(const char **)v254;
                else
                  v255 = "";
              }
              else if (v254[23])
              {
                v255 = (const char *)(v251 + 96 * v253);
              }
              else
              {
                v255 = "";
              }
              v256 = *v252;
              v257 = (const char *)(v251 + 96 * *v252);
              v258 = strlen(v255);
              if (v257[23] < 0)
              {
                if (*((_QWORD *)v257 + 1))
                  v257 = *(const char **)v257;
                else
                  v257 = "";
              }
              else if (!v257[23])
              {
                v257 = "";
              }
              v259 = strlen(v257);
              v260 = v259;
              if (v259 >= v258)
                v261 = v258;
              else
                v261 = v259;
              result = memcmp(v255, v257, v261);
              if ((_DWORD)result)
              {
                if ((result & 0x80000000) != 0)
                  goto LABEL_546;
              }
              else if (v258 < v260)
              {
LABEL_546:
                v306 = v253;
                do
                {
                  while (1)
                  {
                    v262 = v252;
                    v263 = v256;
                    v264 = *--v252;
                    v256 = v264;
                    v252[2] = v263;
                    if (v254[23] < 0)
                      v265 = *((_QWORD *)v254 + 1) ? *(const char **)v254 : "";
                    else
                      v265 = v254[23] ? v254 : "";
                    v266 = (char *)(v251 + 96 * v256);
                    v267 = strlen(v265);
                    if (v266[23] < 0)
                    {
                      v266 = *((_QWORD *)v266 + 1) ? *(char **)v266 : "";
                    }
                    else if (!v266[23])
                    {
                      v266 = "";
                    }
                    v268 = strlen(v266);
                    v269 = v268;
                    v270 = v268 >= v267 ? v267 : v268;
                    result = memcmp(v265, v266, v270);
                    if ((_DWORD)result)
                      break;
                    if (v267 >= v269)
                      goto LABEL_523;
                  }
                }
                while ((result & 0x80000000) != 0);
LABEL_523:
                *v262 = v306;
              }
              v250 = v287 + 1;
            }
            while (v287 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  _QWORD **v4;
  __int128 *v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  const void *v33;
  const void *v34;
  int v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  char *v42;
  uint64_t *v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v55;

  v2 = a1;
  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (_QWORD *)*((_QWORD *)a2 + 1);
      v4 = (_QWORD **)operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v15 = (_QWORD *)*v14;
      v55 = v14 + 1;
      if ((_QWORD *)*v14 == v14 + 1)
        goto LABEL_11;
      break;
    case 2:
      v47 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = (_QWORD **)operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v48 = *v47;
      v49 = v47[1];
      v50 = v49 - v48;
      if (v49 != v48)
      {
        if (v50 < 0)
          abort();
        v51 = (char *)operator new(v49 - v48);
        v52 = 0;
        *v4 = v51;
        v4[1] = v51;
        v4[2] = &v51[16 * (v50 >> 4)];
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&v51[v52], v48 + v52);
          v52 += 16;
        }
        while (v48 + v52 != v49);
        v4[1] = &v51[v52];
      }
      goto LABEL_80;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = (std::string *)operator new(0x18uLL);
      v4 = (_QWORD **)v6;
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      goto LABEL_80;
    case 4:
      v4 = (_QWORD **)a2[8];
      goto LABEL_80;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD **)*((_QWORD *)a2 + 1);
      goto LABEL_80;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = (_QWORD **)operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          abort();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_80:
      *(_QWORD *)(v2 + 8) = v4;
      return v2;
    default:
      return v2;
  }
  while (1)
  {
    v16 = v4[1];
    v17 = (char *)(v4 + 1);
    if (*v4 != v4 + 1)
    {
      v18 = (char *)v4[1];
      v19 = (char *)(v4 + 1);
      if (v16)
      {
        do
        {
          v17 = v18;
          v18 = (char *)*((_QWORD *)v18 + 1);
        }
        while (v18);
      }
      else
      {
        do
        {
          v17 = (char *)*((_QWORD *)v19 + 2);
          v20 = *(_QWORD *)v17 == (_QWORD)v19;
          v19 = v17;
        }
        while (v20);
      }
      v21 = v17[55];
      if (v21 >= 0)
        v22 = v17 + 32;
      else
        v22 = (const void *)*((_QWORD *)v17 + 4);
      if (v21 >= 0)
        v23 = v17[55];
      else
        v23 = *((_QWORD *)v17 + 5);
      v24 = *((char *)v15 + 55);
      if (v24 >= 0)
        v25 = v15 + 4;
      else
        v25 = (const void *)v15[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v15 + 55);
      else
        v26 = v15[5];
      if (v26 >= v23)
        v27 = v23;
      else
        v27 = v26;
      v28 = memcmp(v22, v25, v27);
      if (v28)
      {
        if ((v28 & 0x80000000) == 0)
          goto LABEL_35;
      }
      else if (v23 >= v26)
      {
LABEL_35:
        v29 = v4 + 1;
        v30 = v4 + 1;
        if (v16)
        {
          v31 = v16;
          while (1)
          {
            v30 = (uint64_t **)v31;
            v34 = (const void *)v31[4];
            v32 = v31 + 4;
            v33 = v34;
            v35 = *((char *)v32 + 23);
            if (v35 >= 0)
              v36 = v32;
            else
              v36 = v33;
            if (v35 >= 0)
              v37 = *((unsigned __int8 *)v32 + 23);
            else
              v37 = v32[1];
            if (v37 >= v26)
              v38 = v26;
            else
              v38 = v37;
            v39 = memcmp(v25, v36, v38);
            if (v39)
            {
              if (v39 < 0)
                goto LABEL_37;
LABEL_51:
              v40 = memcmp(v36, v25, v38);
              if (v40)
              {
                if ((v40 & 0x80000000) == 0)
                  goto LABEL_60;
              }
              else if (v37 >= v26)
              {
                goto LABEL_60;
              }
              v29 = v30 + 1;
              v31 = v30[1];
              if (!v31)
                goto LABEL_63;
            }
            else
            {
              if (v26 >= v37)
                goto LABEL_51;
LABEL_37:
              v31 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_63;
            }
          }
        }
        goto LABEL_63;
      }
    }
    v29 = v4 + 1;
    v30 = v4 + 1;
    if (v16)
    {
      v29 = (uint64_t **)(v17 + 8);
      if (*((_QWORD *)v17 + 1))
      {
LABEL_60:
        v41 = (_QWORD *)v15[1];
        if (!v41)
          goto LABEL_71;
        goto LABEL_69;
      }
      v30 = (uint64_t **)v17;
    }
LABEL_63:
    v42 = (char *)operator new(0x48uLL);
    v43 = (uint64_t *)v42;
    if (*((char *)v15 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v42 + 32), (const std::string::value_type *)v15[4], v15[5]);
    }
    else
    {
      v44 = *((_OWORD *)v15 + 2);
      *((_QWORD *)v42 + 6) = v15[6];
      *((_OWORD *)v42 + 2) = v44;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v43 + 7, v15 + 7);
    *v43 = 0;
    v43[1] = 0;
    v43[2] = (uint64_t)v30;
    *v29 = v43;
    v45 = (_QWORD *)**v4;
    if (v45)
    {
      *v4 = v45;
      v43 = *v29;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v4[1], v43);
    v4[2] = (_QWORD *)((char *)v4[2] + 1);
    v41 = (_QWORD *)v15[1];
    if (!v41)
    {
      do
      {
LABEL_71:
        v46 = (_QWORD *)v15[2];
        v20 = *v46 == (_QWORD)v15;
        v15 = v46;
      }
      while (!v20);
      goto LABEL_12;
    }
    do
    {
LABEL_69:
      v46 = v41;
      v41 = (_QWORD *)*v41;
    }
    while (v41);
LABEL_12:
    v15 = v46;
    if (v46 == v55)
    {
LABEL_11:
      v2 = a1;
      goto LABEL_80;
    }
  }
}

void sub_19F79FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  operator delete(v12);
  _Unwind_Resume(a1);
}

char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, uint64_t a2)
{
  char *v4;
  uint64_t **v5;
  int v6;
  uint64_t *v7;
  const std::string::value_type *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t **v20;
  char *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t *v24;
  void *exception;
  unint64_t v27;
  char *v28;
  std::string v29;
  std::string v30;

  if (*a1)
  {
    if (*a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v27 = *a1;
      if (v27 > 9)
        v28 = "number";
      else
        v28 = off_1E42EE7A0[v27];
      std::string::basic_string[abi:nn180100]<0>(&v29, v28);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, "cannot use operator[] with a string argument with ", &v29);
      nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&v30);
    }
    v4 = (char *)*((_QWORD *)a1 + 1);
    v5 = (uint64_t **)(v4 + 8);
    v7 = (uint64_t *)*((_QWORD *)v4 + 1);
    v6 = *(char *)(a2 + 23);
    if (!v7)
      goto LABEL_31;
    if (v6 >= 0)
      v8 = (const std::string::value_type *)a2;
    else
      v8 = *(const std::string::value_type **)a2;
    if (v6 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v10 = (uint64_t **)v7;
      v13 = (const void *)v7[4];
      v11 = v7 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_11;
LABEL_25:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            goto LABEL_39;
        }
        else if (v16 >= v9)
        {
LABEL_39:
          v21 = (char *)v10;
          return v21 + 56;
        }
        v7 = v10[1];
        if (!v7)
        {
          v20 = v10 + 1;
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_25;
LABEL_11:
        v7 = *v10;
        if (!*v10)
        {
          v20 = v10;
          goto LABEL_32;
        }
      }
    }
  }
  *a1 = 1;
  v4 = (char *)operator new(0x18uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (uint64_t **)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = v4 + 8;
  *((_QWORD *)a1 + 1) = v4;
  LOBYTE(v6) = *(_BYTE *)(a2 + 23);
LABEL_31:
  v20 = v5;
  v10 = v5;
LABEL_32:
  v21 = (char *)operator new(0x48uLL);
  v22 = (std::string *)(v21 + 32);
  if ((v6 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v21 + 6) = *(_QWORD *)(a2 + 16);
  }
  v21[56] = 0;
  *((_QWORD *)v21 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v10;
  *v20 = (uint64_t *)v21;
  v23 = **(_QWORD **)v4;
  v24 = (uint64_t *)v21;
  if (v23)
  {
    *(_QWORD *)v4 = v23;
    v24 = *v20;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v5, v24);
  ++*((_QWORD *)v4 + 2);
  return v21 + 56;
}

void sub_19F7A00A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F7A00B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((void ***)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((void ***)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  _QWORD *v51;
  uint64_t v52;

  v6 = *a1;
  v7 = a4 + 96 * *a2;
  v8 = a4 + 96 * *a1;
  v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = "";
  v52 = *a2;
  if (*(char *)(v7 + 23) < 0)
  {
    if (*(_QWORD *)(v7 + 8))
      v11 = *(const char **)v7;
    else
      v11 = "";
  }
  else if (*(_BYTE *)(v7 + 23))
  {
    v11 = (const char *)(a4 + 96 * *a2);
  }
  else
  {
    v11 = "";
  }
  v12 = strlen(v11);
  if (*(char *)(v8 + 23) < 0)
  {
    if (*(_QWORD *)(v8 + 8))
      v10 = *(const char **)v8;
  }
  else if (*(_BYTE *)(v8 + 23))
  {
    v10 = (const char *)v8;
  }
  v13 = strlen(v10);
  v14 = v13;
  if (v13 >= v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = memcmp(v11, v10, v15);
  if (v16)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_24:
    v51 = a2;
    v21 = *a3;
    v22 = a4 + 96 * *a3;
    v23 = "";
    if (*(char *)(v22 + 23) < 0)
    {
      if (*(_QWORD *)(v22 + 8))
        v24 = *(const char **)v22;
      else
        v24 = "";
    }
    else if (*(_BYTE *)(v22 + 23))
    {
      v24 = (const char *)(a4 + 96 * *a3);
    }
    else
    {
      v24 = "";
    }
    v35 = strlen(v24);
    if ((v9 & 0x80) != 0)
    {
      if (*(_QWORD *)(v7 + 8))
        v23 = *(const char **)v7;
    }
    else if (v9)
    {
      v23 = (const char *)v7;
    }
    v36 = strlen(v23);
    v37 = v36;
    if (v36 >= v35)
      v38 = v35;
    else
      v38 = v36;
    result = memcmp(v24, v23, v38);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
LABEL_64:
        *a1 = v52;
        *v51 = v6;
        v39 = *a3;
        v40 = a4 + 96 * *a3;
        if (*(char *)(v40 + 23) < 0)
        {
          v41 = "";
          if (*(_QWORD *)(v40 + 8))
            v42 = *(const char **)v40;
          else
            v42 = "";
        }
        else
        {
          v41 = "";
          if (*(_BYTE *)(v40 + 23))
            v42 = (const char *)(a4 + 96 * *a3);
          else
            v42 = "";
        }
        v44 = strlen(v42);
        if (*(char *)(v8 + 23) < 0)
        {
          if (*(_QWORD *)(v8 + 8))
            v41 = *(const char **)v8;
        }
        else if (*(_BYTE *)(v8 + 23))
        {
          v41 = (const char *)v8;
        }
        v45 = strlen(v41);
        v46 = v45;
        if (v45 >= v44)
          v47 = v44;
        else
          v47 = v45;
        result = memcmp(v42, v41, v47);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v44 >= v46)
        {
          return result;
        }
        *v51 = v39;
LABEL_94:
        *a3 = v6;
        return result;
      }
    }
    else if (v35 >= v37)
    {
      goto LABEL_64;
    }
    *a1 = v21;
    goto LABEL_94;
  }
  if (v12 < v14)
    goto LABEL_24;
LABEL_19:
  v17 = *a3;
  v18 = a4 + 96 * *a3;
  v19 = "";
  if (*(char *)(v18 + 23) < 0)
  {
    if (*(_QWORD *)(v18 + 8))
      v20 = *(const char **)v18;
    else
      v20 = "";
  }
  else if (*(_BYTE *)(v18 + 23))
  {
    v20 = (const char *)(a4 + 96 * *a3);
  }
  else
  {
    v20 = "";
  }
  v25 = strlen(v20);
  if ((v9 & 0x80) != 0)
  {
    if (*(_QWORD *)(v7 + 8))
      v19 = *(const char **)v7;
  }
  else if (v9)
  {
    v19 = (const char *)v7;
  }
  v26 = strlen(v19);
  v27 = v26;
  if (v26 >= v25)
    v28 = v25;
  else
    v28 = v26;
  result = memcmp(v20, v19, v28);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v25 >= v27)
  {
    return result;
  }
  *a2 = v17;
  *a3 = v52;
  v30 = *a2;
  v31 = *a1;
  v32 = a4 + 96 * *a2;
  v33 = (const char *)(a4 + 96 * *a1);
  if (*(char *)(v32 + 23) < 0)
  {
    if (*(_QWORD *)(v32 + 8))
      v34 = *(const char **)v32;
    else
      v34 = "";
  }
  else if (*(_BYTE *)(v32 + 23))
  {
    v34 = (const char *)(a4 + 96 * *a2);
  }
  else
  {
    v34 = "";
  }
  v43 = strlen(v34);
  if (v33[23] < 0)
  {
    if (*((_QWORD *)v33 + 1))
      v33 = *(const char **)v33;
    else
      v33 = "";
  }
  else if (!v33[23])
  {
    v33 = "";
  }
  v48 = strlen(v33);
  v49 = v48;
  if (v48 >= v43)
    v50 = v43;
  else
    v50 = v48;
  result = memcmp(v34, v33, v50);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v43 >= v49)
  {
    return result;
  }
  *a1 = v30;
  *a2 = v31;
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 48));
  v8 = *a4;
  v9 = *a3;
  v10 = *(_QWORD *)(*(_QWORD *)a5 + 48);
  v11 = v10 + 96 * *a4;
  v12 = (const char *)(v10 + 96 * *a3);
  if (*(char *)(v11 + 23) < 0)
  {
    if (*(_QWORD *)(v11 + 8))
      v13 = *(const char **)v11;
    else
      v13 = "";
  }
  else if (*(_BYTE *)(v11 + 23))
  {
    v13 = (const char *)(v10 + 96 * *a4);
  }
  else
  {
    v13 = "";
  }
  v14 = strlen(v13);
  if (v12[23] < 0)
  {
    if (*((_QWORD *)v12 + 1))
      v12 = *(const char **)v12;
    else
      v12 = "";
  }
  else if (!v12[23])
  {
    v12 = "";
  }
  v15 = strlen(v12);
  v16 = v15;
  if (v15 >= v14)
    v17 = v14;
  else
    v17 = v15;
  result = memcmp(v13, v12, v17);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v16)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v9;
  v19 = *a3;
  v20 = *a2;
  v21 = v10 + 96 * *a3;
  v22 = (const char *)(v10 + 96 * *a2);
  if (*(char *)(v21 + 23) < 0)
  {
    if (*(_QWORD *)(v21 + 8))
      v23 = *(const char **)v21;
    else
      v23 = "";
  }
  else if (*(_BYTE *)(v21 + 23))
  {
    v23 = (const char *)(v10 + 96 * *a3);
  }
  else
  {
    v23 = "";
  }
  v24 = strlen(v23);
  if (v22[23] < 0)
  {
    if (*((_QWORD *)v22 + 1))
      v22 = *(const char **)v22;
    else
      v22 = "";
  }
  else if (!v22[23])
  {
    v22 = "";
  }
  v25 = strlen(v22);
  v26 = v25;
  if (v25 >= v24)
    v27 = v24;
  else
    v27 = v25;
  result = memcmp(v23, v22, v27);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v24 >= v26)
  {
    return result;
  }
  *a2 = v19;
  *a3 = v20;
  v28 = *a2;
  v29 = *a1;
  v30 = v10 + 96 * *a2;
  v31 = (const char *)(v10 + 96 * *a1);
  if (*(char *)(v30 + 23) < 0)
  {
    if (*(_QWORD *)(v30 + 8))
      v32 = *(const char **)v30;
    else
      v32 = "";
  }
  else if (*(_BYTE *)(v30 + 23))
  {
    v32 = (const char *)(v10 + 96 * *a2);
  }
  else
  {
    v32 = "";
  }
  v33 = strlen(v32);
  if (v31[23] < 0)
  {
    if (*((_QWORD *)v31 + 1))
      v31 = *(const char **)v31;
    else
      v31 = "";
  }
  else if (!v31[23])
  {
    v31 = "";
  }
  v34 = strlen(v31);
  v35 = v34;
  if (v34 >= v33)
    v36 = v33;
  else
    v36 = v34;
  result = memcmp(v32, v31, v36);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v33 >= v35)
  {
    return result;
  }
  *a1 = v28;
  *a2 = v29;
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(a1, a2, a3, a4, a6);
  v9 = *a5;
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)a6 + 48);
  v12 = v11 + 96 * *a5;
  v13 = (const char *)(v11 + 96 * *a4);
  if (*(char *)(v12 + 23) < 0)
  {
    if (*(_QWORD *)(v12 + 8))
      v14 = *(const char **)v12;
    else
      v14 = "";
  }
  else if (*(_BYTE *)(v12 + 23))
  {
    v14 = (const char *)(v11 + 96 * *a5);
  }
  else
  {
    v14 = "";
  }
  v15 = strlen(v14);
  if (v13[23] < 0)
  {
    if (*((_QWORD *)v13 + 1))
      v13 = *(const char **)v13;
    else
      v13 = "";
  }
  else if (!v13[23])
  {
    v13 = "";
  }
  v16 = strlen(v13);
  v17 = v16;
  if (v16 >= v15)
    v18 = v15;
  else
    v18 = v16;
  result = memcmp(v14, v13, v18);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v15 >= v17)
  {
    return result;
  }
  *a4 = v9;
  *a5 = v10;
  v20 = *a4;
  v21 = *a3;
  v22 = v11 + 96 * *a4;
  v23 = (const char *)(v11 + 96 * *a3);
  if (*(char *)(v22 + 23) < 0)
  {
    if (*(_QWORD *)(v22 + 8))
      v24 = *(const char **)v22;
    else
      v24 = "";
  }
  else if (*(_BYTE *)(v22 + 23))
  {
    v24 = (const char *)(v11 + 96 * *a4);
  }
  else
  {
    v24 = "";
  }
  v25 = strlen(v24);
  if (v23[23] < 0)
  {
    if (*((_QWORD *)v23 + 1))
      v23 = *(const char **)v23;
    else
      v23 = "";
  }
  else if (!v23[23])
  {
    v23 = "";
  }
  v26 = strlen(v23);
  v27 = v26;
  if (v26 >= v25)
    v28 = v25;
  else
    v28 = v26;
  result = memcmp(v24, v23, v28);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v25 >= v27)
  {
    return result;
  }
  *a3 = v20;
  *a4 = v21;
  v29 = *a3;
  v30 = *a2;
  v31 = v11 + 96 * *a3;
  v32 = (const char *)(v11 + 96 * *a2);
  if (*(char *)(v31 + 23) < 0)
  {
    if (*(_QWORD *)(v31 + 8))
      v33 = *(const char **)v31;
    else
      v33 = "";
  }
  else if (*(_BYTE *)(v31 + 23))
  {
    v33 = (const char *)(v11 + 96 * *a3);
  }
  else
  {
    v33 = "";
  }
  v34 = strlen(v33);
  if (v32[23] < 0)
  {
    if (*((_QWORD *)v32 + 1))
      v32 = *(const char **)v32;
    else
      v32 = "";
  }
  else if (!v32[23])
  {
    v32 = "";
  }
  v35 = strlen(v32);
  v36 = v35;
  if (v35 >= v34)
    v37 = v34;
  else
    v37 = v35;
  result = memcmp(v33, v32, v37);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v34 >= v36)
  {
    return result;
  }
  *a2 = v29;
  *a3 = v30;
  v38 = *a2;
  v39 = *a1;
  v40 = v11 + 96 * *a2;
  v41 = (const char *)(v11 + 96 * *a1);
  if (*(char *)(v40 + 23) < 0)
  {
    if (*(_QWORD *)(v40 + 8))
      v42 = *(const char **)v40;
    else
      v42 = "";
  }
  else if (*(_BYTE *)(v40 + 23))
  {
    v42 = (const char *)(v11 + 96 * *a2);
  }
  else
  {
    v42 = "";
  }
  v43 = strlen(v42);
  if (v41[23] < 0)
  {
    if (*((_QWORD *)v41 + 1))
      v41 = *(const char **)v41;
    else
      v41 = "";
  }
  else if (!v41[23])
  {
    v41 = "";
  }
  v44 = strlen(v41);
  v45 = v44;
  if (v44 >= v43)
    v46 = v43;
  else
    v46 = v44;
  result = memcmp(v42, v41, v46);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v43 >= v45)
  {
    return result;
  }
  *a1 = v38;
  *a2 = v39;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  int v34;
  size_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  int v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  v4 = a2;
  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *(a2 - 1);
      v8 = *a1;
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48);
      v10 = v9 + 96 * v7;
      v11 = (const char *)(v9 + 96 * *a1);
      if (*(char *)(v10 + 23) < 0)
      {
        if (*(_QWORD *)(v10 + 8))
          v12 = *(const char **)v10;
        else
          v12 = "";
      }
      else if (*(_BYTE *)(v10 + 23))
      {
        v12 = (const char *)(v9 + 96 * v7);
      }
      else
      {
        v12 = "";
      }
      v35 = strlen(v12);
      if (v11[23] < 0)
      {
        if (*((_QWORD *)v11 + 1))
          v11 = *(const char **)v11;
        else
          v11 = "";
      }
      else if (!v11[23])
      {
        v11 = "";
      }
      v36 = strlen(v11);
      v37 = v36;
      if (v36 >= v35)
        v38 = v35;
      else
        v38 = v36;
      v39 = memcmp(v12, v11, v38);
      if (v39)
      {
        if ((v39 & 0x80000000) == 0)
          return 1;
        goto LABEL_77;
      }
      if (v35 < v37)
      {
LABEL_77:
        *a1 = v7;
        *(v4 - 1) = v8;
        return 1;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 48));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::tag_invoke(debugTree::dumpJson_t,gdc::DebugTreeNode const&)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 48));
      v14 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v43 = 0;
      v41 = 0;
      v45 = *(_QWORD *)(*(_QWORD *)a3 + 48);
      v40 = v4;
      while (2)
      {
        v42 = *v14;
        v16 = v45 + 96 * *v14;
        if (*(char *)(v16 + 23) < 0)
        {
          if (*(_QWORD *)(v16 + 8))
            v17 = *(const char **)v16;
          else
            v17 = "";
        }
        else if (*(_BYTE *)(v16 + 23))
        {
          v17 = (const char *)(v45 + 96 * *v14);
        }
        else
        {
          v17 = "";
        }
        v18 = *v13;
        v19 = v45 + 96 * *v13;
        v20 = strlen(v17);
        if (*(char *)(v19 + 23) < 0)
        {
          if (*(_QWORD *)(v19 + 8))
            v21 = *(const char **)v19;
          else
            v21 = "";
        }
        else if (*(_BYTE *)(v19 + 23))
        {
          v21 = (const char *)(v45 + 96 * *v13);
        }
        else
        {
          v21 = "";
        }
        v22 = strlen(v21);
        v23 = v22;
        if (v22 >= v20)
          v24 = v20;
        else
          v24 = v22;
        v25 = memcmp(v17, v21, v24);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_11;
        }
        else if (v20 >= v23)
        {
          goto LABEL_11;
        }
        *v14 = v18;
        v15 = a1;
        if (v13 == a1)
          goto LABEL_10;
        v26 = v43;
        while (2)
        {
          if (*(char *)(v16 + 23) < 0)
          {
            if (*(_QWORD *)(v16 + 8))
              v27 = *(const char **)v16;
            else
              v27 = "";
          }
          else if (*(_BYTE *)(v16 + 23))
          {
            v27 = (const char *)v16;
          }
          else
          {
            v27 = "";
          }
          v28 = *(uint64_t *)((char *)a1 + v26 + 8);
          v29 = (const char *)(v45 + 96 * v28);
          v30 = strlen(v27);
          if (v29[23] < 0)
          {
            if (*((_QWORD *)v29 + 1))
              v29 = *(const char **)v29;
            else
              v29 = "";
          }
          else if (!v29[23])
          {
            v29 = "";
          }
          v31 = strlen(v29);
          v32 = v31;
          if (v31 >= v30)
            v33 = v30;
          else
            v33 = v31;
          v34 = memcmp(v27, v29, v33);
          if (v34)
          {
            if ((v34 & 0x80000000) == 0)
            {
              v15 = v13;
              goto LABEL_9;
            }
            goto LABEL_36;
          }
          if (v30 < v32)
          {
LABEL_36:
            --v13;
            *(uint64_t *)((char *)a1 + v26 + 16) = v28;
            v26 -= 8;
            if (v26 == -16)
            {
              v15 = a1;
              goto LABEL_9;
            }
            continue;
          }
          break;
        }
        v15 = (uint64_t *)((char *)a1 + v26 + 16);
LABEL_9:
        v4 = v40;
LABEL_10:
        *v15 = v42;
        if (++v41 == 8)
          return v14 + 1 == v4;
LABEL_11:
        v13 = v14;
        v43 += 8;
        if (++v14 != v4)
          continue;
        return 1;
      }
  }
}

size_t *gdc::DebugTreeNode::operator=(size_t *a1, size_t *a2)
{
  size_t *v3;
  __int128 v4;
  size_t v5;
  void **v6;
  char v7;
  __int128 v8;
  void *v9;
  size_t v10;
  char *v11;
  void **v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  void **v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void **v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;

  if (a1 == a2)
    return a1;
  v3 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      v5 = v3[1];
    }
    std::string::__assign_no_alias<false>((void **)a1, a2, v5);
  }
  else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(a1, (void *)*a2, a2[1]);
  }
  else
  {
    v4 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v4;
  }
  v6 = (void **)(a1 + 3);
  v7 = *((_BYTE *)v3 + 47);
  if (*((char *)a1 + 47) < 0)
  {
    if (v7 >= 0)
      v9 = v3 + 3;
    else
      v9 = (void *)v3[3];
    if (v7 >= 0)
      v10 = *((unsigned __int8 *)v3 + 47);
    else
      v10 = v3[4];
    std::string::__assign_no_alias<false>(v6, v9, v10);
  }
  else if ((*((_BYTE *)v3 + 47) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v6, (void *)v3[3], v3[4]);
  }
  else
  {
    v8 = *(_OWORD *)(v3 + 3);
    a1[5] = v3[5];
    *(_OWORD *)v6 = v8;
  }
  v12 = (void **)(a1 + 6);
  v11 = (char *)a1[6];
  v13 = v3[6];
  v14 = v3[7];
  v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v13) >> 5);
  v16 = a1[8];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v11) >> 5) < v15)
  {
    if (v11)
    {
      v17 = a1[7];
      v18 = (void *)a1[6];
      if ((char *)v17 != v11)
      {
        do
        {
          v17 -= 96;
          std::allocator_traits<std::allocator<gdc::DebugTreeNode>>::destroy[abi:nn180100]<gdc::DebugTreeNode,void,void>(v17);
        }
        while ((char *)v17 != v11);
        v18 = *v12;
      }
      a1[7] = (size_t)v11;
      operator delete(v18);
      v16 = 0;
      *v12 = 0;
      a1[7] = 0;
      a1[8] = 0;
    }
    if (v15 > 0x2AAAAAAAAAAAAAALL)
      goto LABEL_82;
    v19 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 5);
    v20 = 2 * v19;
    if (2 * v19 <= v15)
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v13) >> 5);
    v21 = v19 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v20;
    if (v21 > 0x2AAAAAAAAAAAAAALL)
      goto LABEL_82;
    v22 = 96 * v21;
    v11 = (char *)operator new(96 * v21);
    a1[6] = (size_t)v11;
    a1[7] = (size_t)v11;
    a1[8] = (size_t)&v11[v22];
    if (v13 != v14)
    {
      v23 = 0;
      do
      {
        gdc::DebugTreeNode::DebugTreeNode((std::string *)&v11[v23], (const gdc::DebugTreeNode *)(v13 + v23));
        v23 += 96;
      }
      while (v13 + v23 != v14);
      v11 += v23;
    }
    goto LABEL_53;
  }
  v24 = a1[7];
  if (0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v11) >> 5) >= v15)
  {
    if (v13 != v14)
    {
      do
      {
        gdc::DebugTreeNode::operator=(v11, v13);
        v13 += 96;
        v11 += 96;
      }
      while (v13 != v14);
      v24 = a1[7];
    }
    while ((char *)v24 != v11)
    {
      v24 -= 96;
      std::allocator_traits<std::allocator<gdc::DebugTreeNode>>::destroy[abi:nn180100]<gdc::DebugTreeNode,void,void>(v24);
    }
LABEL_53:
    a1[7] = (size_t)v11;
    goto LABEL_54;
  }
  v25 = v13 + 32 * ((v24 - (uint64_t)v11) >> 5);
  if ((char *)v24 != v11)
  {
    v26 = 32 * ((v24 - (uint64_t)v11) >> 5);
    do
    {
      gdc::DebugTreeNode::operator=(v11, v13);
      v13 += 96;
      v11 += 96;
      v26 -= 96;
    }
    while (v26);
    v11 = (char *)a1[7];
  }
  v27 = v11;
  if (v25 != v14)
  {
    v28 = 0;
    do
    {
      gdc::DebugTreeNode::DebugTreeNode((std::string *)&v11[v28], (const gdc::DebugTreeNode *)(v25 + v28));
      v28 += 96;
    }
    while (v25 + v28 != v14);
    v27 = &v11[v28];
  }
  a1[7] = (size_t)v27;
LABEL_54:
  v30 = (void **)(a1 + 9);
  v29 = a1[9];
  v32 = (void **)v3[9];
  v31 = (void **)v3[10];
  v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v31 - (char *)v32) >> 4);
  v34 = a1[11];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - v29) >> 4) < v33)
  {
    if (v29)
    {
      v35 = a1[10];
      v36 = (void *)a1[9];
      if (v35 != v29)
      {
        do
        {
          v35 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v35);
        }
        while (v35 != v29);
        v36 = *v30;
      }
      a1[10] = v29;
      operator delete(v36);
      v34 = 0;
      *v30 = 0;
      a1[10] = 0;
      a1[11] = 0;
    }
    if (v33 <= 0x333333333333333)
    {
      v37 = 0xCCCCCCCCCCCCCCCDLL * (v34 >> 4);
      v38 = 2 * v37;
      if (2 * v37 <= v33)
        v38 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v31 - (char *)v32) >> 4);
      v39 = v37 >= 0x199999999999999 ? 0x333333333333333 : v38;
      if (v39 <= 0x333333333333333)
      {
        v40 = 80 * v39;
        v41 = (char *)operator new(80 * v39);
        a1[9] = (size_t)v41;
        a1[10] = (size_t)v41;
        a1[11] = (size_t)&v41[v40];
        if (v32 != v31)
        {
          v42 = 0;
          do
          {
            gdc::DebugTreeProperty::DebugTreeProperty((std::string *)&v41[v42 * 8], (const gdc::DebugTreeProperty *)&v32[v42]);
            v42 += 10;
          }
          while (&v32[v42] != v31);
          v41 += v42 * 8;
        }
        a1[10] = (size_t)v41;
        return a1;
      }
    }
LABEL_82:
    abort();
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[10] - v29) >> 4) >= v33)
  {
    v46 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<gdc::DebugTreeProperty *,gdc::DebugTreeProperty *,gdc::DebugTreeProperty *>(v32, v31, a1[9]);
    for (i = a1[10]; i != v46; std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(i))
      i -= 80;
    a1[10] = v46;
  }
  else
  {
    v43 = &v32[2 * ((uint64_t)(a1[10] - v29) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<gdc::DebugTreeProperty *,gdc::DebugTreeProperty *,gdc::DebugTreeProperty *>(v32, v43, a1[9]);
    v44 = a1[10];
    if (v43 != v31)
    {
      v45 = 0;
      do
      {
        gdc::DebugTreeProperty::DebugTreeProperty((std::string *)(v44 + v45 * 8), (const gdc::DebugTreeProperty *)&v43[v45]);
        v45 += 10;
      }
      while (&v43[v45] != v31);
      v44 += v45 * 8;
    }
    a1[10] = v44;
  }
  return a1;
}

void sub_19F7A14F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_19F7A1500(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void sub_19F7A1508(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_19F7A1510(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<gdc::DebugTreeProperty *,gdc::DebugTreeProperty *,gdc::DebugTreeProperty *>(void **a1, void **a2, uint64_t a3)
{
  void **v4;
  void **i;
  std::string *v6;
  char v7;
  __int128 v8;
  void *v9;
  size_t v10;
  void **v11;
  char *v12;
  __int128 *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  void **v28;
  void **v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  void **v38;
  void **v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 *v48;
  char *v49;
  __int128 v50;
  __int128 *v51;
  __int128 v52;
  std::string::value_type *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  uint64_t v60;
  void **v61;
  std::string::value_type **v62;
  std::string::value_type **v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void **v71;
  void *v72;
  size_t v73;
  char v74;
  __int128 v75;
  std::string::value_type *v76;
  size_t v77;
  char v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  std::string *v84;
  __int128 v85;
  std::string::value_type **v86;
  std::string *v87;
  __int128 v88;

  if (a1 != a2)
  {
    v4 = a2;
    for (i = a1; i != v4; i += 10)
    {
      if ((void **)a3 != i)
      {
        v7 = *((_BYTE *)i + 23);
        if (*(char *)(a3 + 23) < 0)
        {
          if (v7 >= 0)
            v9 = i;
          else
            v9 = *i;
          if (v7 >= 0)
            v10 = *((unsigned __int8 *)i + 23);
          else
            v10 = (size_t)i[1];
          std::string::__assign_no_alias<false>((void **)a3, v9, v10);
        }
        else if ((*((_BYTE *)i + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)a3, *i, (size_t)i[1]);
        }
        else
        {
          v8 = *(_OWORD *)i;
          *(_QWORD *)(a3 + 16) = i[2];
          *(_OWORD *)a3 = v8;
        }
        v11 = (void **)(a3 + 32);
        v12 = *(char **)(a3 + 32);
        *(_DWORD *)(a3 + 24) = *((_DWORD *)i + 6);
        v14 = (char *)i[4];
        v13 = (__int128 *)i[5];
        v15 = ((char *)v13 - v14) >> 6;
        v16 = *(_QWORD *)(a3 + 48);
        if (v15 <= (v16 - (uint64_t)v12) >> 6)
        {
          v19 = *(char **)(a3 + 40);
          v20 = (v19 - v12) >> 6;
          if (v20 >= v15)
          {
            if (v14 != (char *)v13)
            {
              v32 = 0;
              do
              {
                v35 = &v14[v32];
                v36 = &v12[v32];
                v37 = *(_OWORD *)&v14[v32];
                *(_OWORD *)(v36 + 9) = *(_OWORD *)&v14[v32 + 9];
                *(_OWORD *)v36 = v37;
                if (v12 != v14)
                {
                  v38 = (void **)(v36 + 32);
                  v39 = (void **)(v35 + 32);
                  v40 = v35[55];
                  if (v36[55] < 0)
                  {
                    if (v40 >= 0)
                      v33 = v35 + 32;
                    else
                      v33 = *v39;
                    if (v40 >= 0)
                      v34 = v35[55];
                    else
                      v34 = *(_QWORD *)&v14[v32 + 40];
                    std::string::__assign_no_alias<false>(v38, v33, v34);
                  }
                  else if (v35[55] < 0)
                  {
                    std::string::__assign_no_alias<true>(v38, *v39, *(_QWORD *)&v14[v32 + 40]);
                  }
                  else
                  {
                    v41 = *(_OWORD *)v39;
                    *((_QWORD *)v36 + 6) = *((_QWORD *)v35 + 6);
                    *(_OWORD *)v38 = v41;
                  }
                }
                *((_DWORD *)v36 + 14) = *((_DWORD *)v35 + 14);
                v32 += 64;
              }
              while (v35 + 64 != (char *)v13);
              v12 += v32;
              v19 = *(char **)(a3 + 40);
            }
            while (v19 != v12)
            {
              if (*(v19 - 9) < 0)
                operator delete(*((void **)v19 - 4));
              v19 -= 64;
            }
            *(_QWORD *)(a3 + 40) = v12;
          }
          else
          {
            v21 = (__int128 *)&v14[64 * v20];
            if (v19 != v12)
            {
              v22 = 0;
              do
              {
                v25 = &v14[v22];
                v26 = &v12[v22];
                v27 = *(_OWORD *)&v14[v22];
                *(_OWORD *)(v26 + 9) = *(_OWORD *)&v14[v22 + 9];
                *(_OWORD *)v26 = v27;
                if (v12 != v14)
                {
                  v28 = (void **)(v26 + 32);
                  v29 = (void **)(v25 + 32);
                  v30 = v25[55];
                  if (v26[55] < 0)
                  {
                    if (v30 >= 0)
                      v23 = v25 + 32;
                    else
                      v23 = *v29;
                    if (v30 >= 0)
                      v24 = v25[55];
                    else
                      v24 = *(_QWORD *)&v14[v22 + 40];
                    std::string::__assign_no_alias<false>(v28, v23, v24);
                  }
                  else if (v25[55] < 0)
                  {
                    std::string::__assign_no_alias<true>(v28, *v29, *(_QWORD *)&v14[v22 + 40]);
                  }
                  else
                  {
                    v31 = *(_OWORD *)v29;
                    *((_QWORD *)v26 + 6) = *((_QWORD *)v25 + 6);
                    *(_OWORD *)v28 = v31;
                  }
                }
                *((_DWORD *)v26 + 14) = *((_DWORD *)v25 + 14);
                v22 += 64;
              }
              while (v25 + 64 != (char *)v21);
              v12 = *(char **)(a3 + 40);
              v4 = a2;
            }
            v53 = v12;
            if (v21 != v13)
            {
              v54 = (uint64_t)&v14[64 * v20 + 32];
              v55 = (std::string *)(v12 + 32);
              do
              {
                v58 = v55;
                v59 = *(_OWORD *)(v54 - 32);
                *(_OWORD *)((char *)&v55[-1].__r_.__value_.__l.__data_ + 1) = *(_OWORD *)(v54 - 23);
                *(_OWORD *)&v55[-2].__r_.__value_.__r.__words[2] = v59;
                if (*(char *)(v54 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)v54, *(_QWORD *)(v54 + 8));
                }
                else
                {
                  v56 = *(_OWORD *)v54;
                  v55->__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 16);
                  *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
                }
                v57 = v54 - 32;
                LODWORD(v58[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v54 + 24);
                v54 += 64;
                v55 = (std::string *)((char *)v58 + 64);
              }
              while ((__int128 *)(v57 + 64) != v13);
              v53 = &v58[1].__r_.__value_.__s.__data_[8];
            }
            *(_QWORD *)(a3 + 40) = v53;
          }
        }
        else
        {
          if (v12)
          {
            v17 = *(char **)(a3 + 40);
            v18 = v12;
            if (v17 != v12)
            {
              do
              {
                if (*(v17 - 9) < 0)
                  operator delete(*((void **)v17 - 4));
                v17 -= 64;
              }
              while (v17 != v12);
              v18 = *v11;
            }
            *(_QWORD *)(a3 + 40) = v12;
            operator delete(v18);
            v16 = 0;
            *v11 = 0;
            *(_QWORD *)(a3 + 40) = 0;
            *(_QWORD *)(a3 + 48) = 0;
          }
          if ((char *)v13 - v14 < 0)
            goto LABEL_155;
          v42 = v16 >> 5;
          if (v16 >> 5 <= v15)
            v42 = ((char *)v13 - v14) >> 6;
          v43 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0;
          v44 = 0x3FFFFFFFFFFFFFFLL;
          if (!v43)
            v44 = v42;
          if (v44 >> 58)
LABEL_155:
            abort();
          v45 = v44 << 6;
          v46 = (char *)operator new(v44 << 6);
          v47 = v46;
          *(_QWORD *)(a3 + 32) = v46;
          *(_QWORD *)(a3 + 40) = v46;
          *(_QWORD *)(a3 + 48) = &v46[v45];
          if (v14 != (char *)v13)
          {
            v48 = (__int128 *)(v14 + 32);
            v49 = v46 + 32;
            do
            {
              v52 = *(v48 - 2);
              *(_OWORD *)(v49 - 23) = *(__int128 *)((char *)v48 - 23);
              *((_OWORD *)v49 - 2) = v52;
              if (*((char *)v48 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v49, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
              }
              else
              {
                v50 = *v48;
                *((_QWORD *)v49 + 2) = *((_QWORD *)v48 + 2);
                *(_OWORD *)v49 = v50;
              }
              v51 = v48 - 2;
              *((_DWORD *)v49 + 6) = *((_DWORD *)v48 + 6);
              v48 += 4;
              v49 += 64;
            }
            while (v51 + 4 != v13);
            v47 = v49 - 32;
          }
          *(_QWORD *)(a3 + 40) = v47;
        }
        v61 = (void **)(a3 + 56);
        v60 = *(_QWORD *)(a3 + 56);
        v63 = (std::string::value_type **)i[7];
        v62 = (std::string::value_type **)i[8];
        v64 = 0xAAAAAAAAAAAAAAABLL * (v62 - v63);
        v65 = *(_QWORD *)(a3 + 72);
        if (0xAAAAAAAAAAAAAAABLL * ((v65 - v60) >> 3) >= v64)
        {
          v68 = *(_QWORD *)(a3 + 64);
          v69 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v60) >> 3);
          if (v69 >= v64)
          {
            if (v63 != v62)
            {
              do
              {
                if (v63 != (std::string::value_type **)v60)
                {
                  v78 = *((_BYTE *)v63 + 23);
                  if (*(char *)(v60 + 23) < 0)
                  {
                    if (v78 >= 0)
                      v76 = (std::string::value_type *)v63;
                    else
                      v76 = *v63;
                    if (v78 >= 0)
                      v77 = *((unsigned __int8 *)v63 + 23);
                    else
                      v77 = (size_t)v63[1];
                    std::string::__assign_no_alias<false>((void **)v60, v76, v77);
                  }
                  else if ((*((_BYTE *)v63 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>((_QWORD *)v60, *v63, (size_t)v63[1]);
                  }
                  else
                  {
                    v79 = *(_OWORD *)v63;
                    *(_QWORD *)(v60 + 16) = v63[2];
                    *(_OWORD *)v60 = v79;
                  }
                }
                v63 += 3;
                v60 += 24;
              }
              while (v63 != v62);
              v68 = *(_QWORD *)(a3 + 64);
            }
            while (v68 != v60)
            {
              if (*(char *)(v68 - 1) < 0)
                operator delete(*(void **)(v68 - 24));
              v68 -= 24;
            }
            *(_QWORD *)(a3 + 64) = v60;
          }
          else
          {
            if (v68 != v60)
            {
              v70 = 8 * ((v68 - v60) >> 3);
              v71 = (void **)i[7];
              do
              {
                if (v71 != (void **)v60)
                {
                  v74 = *((_BYTE *)v71 + 23);
                  if (*(char *)(v60 + 23) < 0)
                  {
                    if (v74 >= 0)
                      v72 = v71;
                    else
                      v72 = *v71;
                    if (v74 >= 0)
                      v73 = *((unsigned __int8 *)v71 + 23);
                    else
                      v73 = (size_t)v71[1];
                    std::string::__assign_no_alias<false>((void **)v60, v72, v73);
                  }
                  else if ((*((_BYTE *)v71 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>((_QWORD *)v60, *v71, (size_t)v71[1]);
                  }
                  else
                  {
                    v75 = *(_OWORD *)v71;
                    *(_QWORD *)(v60 + 16) = v71[2];
                    *(_OWORD *)v60 = v75;
                  }
                }
                v71 += 3;
                v60 += 24;
                v70 -= 24;
              }
              while (v70);
              v60 = *(_QWORD *)(a3 + 64);
              v4 = a2;
            }
            v86 = &v63[3 * v69];
            v87 = (std::string *)v60;
            if (v86 != v62)
            {
              v87 = (std::string *)v60;
              do
              {
                if (*((char *)v86 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v87, *v86, (std::string::size_type)v86[1]);
                }
                else
                {
                  v88 = *(_OWORD *)v86;
                  v87->__r_.__value_.__r.__words[2] = (std::string::size_type)v86[2];
                  *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
                }
                v86 += 3;
                ++v87;
              }
              while (v86 != v62);
            }
            *(_QWORD *)(a3 + 64) = v87;
          }
        }
        else
        {
          if (v60)
          {
            v66 = *(_QWORD *)(a3 + 64);
            v67 = *(void **)(a3 + 56);
            if (v66 != v60)
            {
              do
              {
                if (*(char *)(v66 - 1) < 0)
                  operator delete(*(void **)(v66 - 24));
                v66 -= 24;
              }
              while (v66 != v60);
              v67 = *v61;
            }
            *(_QWORD *)(a3 + 64) = v60;
            operator delete(v67);
            v65 = 0;
            *v61 = 0;
            *(_QWORD *)(a3 + 64) = 0;
            *(_QWORD *)(a3 + 72) = 0;
          }
          if (v64 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_155;
          v80 = 0xAAAAAAAAAAAAAAABLL * (v65 >> 3);
          v81 = 2 * v80;
          if (2 * v80 <= v64)
            v81 = 0xAAAAAAAAAAAAAAABLL * (v62 - v63);
          v82 = v80 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v81;
          if (v82 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_155;
          v83 = v82;
          v84 = (std::string *)operator new(24 * v82);
          *(_QWORD *)(a3 + 56) = v84;
          *(_QWORD *)(a3 + 64) = v84;
          *(_QWORD *)(a3 + 72) = &v84[v83];
          if (v63 == v62)
          {
            v6 = v84;
          }
          else
          {
            v6 = v84;
            do
            {
              if (*((char *)v63 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v6, *v63, (std::string::size_type)v63[1]);
              }
              else
              {
                v85 = *(_OWORD *)v63;
                v6->__r_.__value_.__r.__words[2] = (std::string::size_type)v63[2];
                *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v85;
              }
              v63 += 3;
              ++v6;
            }
            while (v63 != v62);
          }
          *(_QWORD *)(a3 + 64) = v6;
        }
      }
      a3 += 80;
    }
  }
  return a3;
}

void sub_19F7A1C64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_19F7A1C6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

void sub_19F7A1C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_19F7A1C7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

std::string *gdc::DebugTreeProperty::DebugTreeProperty(std::string *this, const gdc::DebugTreeProperty *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  std::string *v15;
  const std::string::value_type **v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  std::string *v25;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v7 - v6);
    v10 = 0;
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v9[64 * (v8 >> 6)];
    do
    {
      v12 = v6 + v10;
      v13 = &v9[v10];
      v14 = *(_OWORD *)(v6 + v10);
      *(_OWORD *)(v13 + 9) = *(_OWORD *)(v6 + v10 + 9);
      *(_OWORD *)v13 = v14;
      v15 = (std::string *)&v9[v10 + 32];
      v16 = (const std::string::value_type **)(v6 + v10 + 32);
      if (*(char *)(v6 + v10 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *v16, *(_QWORD *)(v12 + 40));
      }
      else
      {
        v11 = *(_OWORD *)v16;
        *(_QWORD *)&v9[v10 + 48] = *(_QWORD *)(v6 + v10 + 48);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v11;
      }
      *((_DWORD *)v13 + 14) = *(_DWORD *)(v12 + 56);
      v10 += 64;
    }
    while (v12 + 64 != v7);
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v9[v10];
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  v17 = *((_QWORD *)a2 + 7);
  v18 = *((_QWORD *)a2 + 8);
  v19 = v18 - v17;
  if (v18 != v17)
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
    if (v20 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v21 = (char *)operator new(v19);
    v22 = 0;
    this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v21;
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v21;
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v21[24 * v20];
    do
    {
      v24 = (__int128 *)(v17 + v22);
      v25 = (std::string *)&v21[v22];
      if (*(char *)(v17 + v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
      }
      else
      {
        v23 = *v24;
        v25->__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v23;
      }
      v22 += 24;
    }
    while (v17 + v22 != v18);
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v21[v22];
  }
  return this;
}

void sub_19F7A1E4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

std::string *gdc::DebugTreeNode::DebugTreeNode(std::string *this, const gdc::DebugTreeNode *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v6 = *((_QWORD *)a2 + 6);
  v7 = *((_QWORD *)a2 + 7);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    if (v9 >= 0x2AAAAAAAAAAAAABLL)
      abort();
    v10 = (char *)operator new(v8);
    v11 = 0;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v10[96 * v9];
    do
    {
      gdc::DebugTreeNode::DebugTreeNode((gdc::DebugTreeNode *)&v10[v11], (const gdc::DebugTreeNode *)(v6 + v11));
      v11 += 96;
    }
    while (v6 + v11 != v7);
    this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v10[v11];
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  v13 = *((_QWORD *)a2 + 9);
  v12 = *((_QWORD *)a2 + 10);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 4);
    if (v15 >= 0x333333333333334)
      abort();
    v16 = (char *)operator new(v14);
    v17 = 0;
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    this[3].__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)&v16[80 * v15];
    do
    {
      gdc::DebugTreeProperty::DebugTreeProperty((std::string *)&v16[v17], (const gdc::DebugTreeProperty *)(v13 + v17));
      v17 += 80;
    }
    while (v13 + v17 != v12);
    this[3].__r_.__value_.__l.__size_ = (std::string::size_type)&v16[v17];
  }
  return this;
}

void sub_19F7A2030(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::BuildingPointyRoofDepth::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::constantDataIsEnabled(ggl::BuildingPointyRoofDepth::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::textureIsEnabled(ggl::BuildingPointyRoofDepth::BuildingPipelineSetup *this)
{
  return 0;
}

uint64_t md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, _QWORD *a6)
{
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;

  *(_QWORD *)a1 = &off_1E426F838;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  if (a3)
  {
    v9 = (unint64_t *)(a3 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_WORD *)(a1 + 24) = 255;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = a4;
  v11 = operator new(0xE8uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42E2278;
  v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
  v11[28] = ggl::Tile::View::reflection(void)::reflection;
  v11[3] = &off_1E42B97B0;
  v13 = a6[1];
  *(_QWORD *)(a1 + 232) = *a6;
  *(_QWORD *)(a1 + 216) = v12;
  *(_QWORD *)(a1 + 224) = v11;
  *(_QWORD *)(a1 + 240) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 312) = 0x3FF0000000000000;
  *(int64x2_t *)(a1 + 320) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 336) = xmmword_19FFB2E00;
  *(int64x2_t *)(a1 + 352) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 368) = 0;
  v16 = *(unsigned __int8 **)(a1 + 8);
  v17 = (a5 & 1) != 0 || v16[168] != 255;
  *(_BYTE *)(a1 + 376) = v17;
  md::BaseMapTileDataRenderable::_setupLocalBasisForTiled(a1, (const md::MapTileData *)v16);
  return a1;
}

void sub_19F7A231C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::BaseMapTileDataRenderable::_setupLocalBasisForTiled(uint64_t this, const md::MapTileData *a2)
{
  uint64_t v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v21;
  double v22;
  double v23;

  v2 = this;
  v3 = 1 << *((_BYTE *)a2 + 169);
  v4 = 1.0 / (double)v3;
  v5 = v4 * (double)*((int *)a2 + 44);
  v6 = v4 * (double)(v3 + ~*((_DWORD *)a2 + 43));
  v7 = v5 + v4;
  *(double *)(this + 56) = v5;
  *(double *)(this + 64) = v6;
  *(double *)(this + 72) = v5 + v4;
  *(double *)(this + 80) = v6 + v4;
  v8 = *(_OWORD *)((char *)a2 + 168);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(this + 24) = v8;
  if (*(_BYTE *)(this + 48))
  {
    v9 = (double)*(char *)(this + 48);
    *(double *)(this + 56) = v5 + v9;
    *(double *)(this + 72) = v7 + v9;
  }
  if (*(_BYTE *)(this + 376))
  {
    *(_QWORD *)(this + 288) = *((_QWORD *)a2 + 27);
    *(_QWORD *)(this + 296) = *((_QWORD *)a2 + 28);
    *(_QWORD *)(this + 304) = *((_QWORD *)a2 + 29);
    *(_QWORD *)(this + 312) = *((_QWORD *)a2 + 30);
    *(_QWORD *)(this + 264) = *((_QWORD *)a2 + 24);
    *(_QWORD *)(this + 272) = *((_QWORD *)a2 + 25);
    *(_QWORD *)(this + 280) = *((_QWORD *)a2 + 26);
    *(_QWORD *)(this + 320) = *((_QWORD *)a2 + 31);
    *(_QWORD *)(this + 328) = *((_QWORD *)a2 + 32);
    *(_QWORD *)(this + 336) = *((_QWORD *)a2 + 33);
    *(_QWORD *)(this + 344) = *((_QWORD *)a2 + 34);
    *(_QWORD *)(this + 352) = *((_QWORD *)a2 + 35);
    *(_QWORD *)(this + 360) = *((_QWORD *)a2 + 36);
    *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 43);
    *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 44);
    *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 45);
    *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 46);
    *(_QWORD *)(this + 120) = *((_QWORD *)a2 + 47);
    *(_QWORD *)(this + 128) = *((_QWORD *)a2 + 48);
    *(_QWORD *)(this + 136) = *((_QWORD *)a2 + 49);
    *(_QWORD *)(this + 144) = *((_QWORD *)a2 + 50);
    *(_QWORD *)(this + 152) = *((_QWORD *)a2 + 51);
    *(_QWORD *)(this + 160) = *((_QWORD *)a2 + 52);
    *(_QWORD *)(this + 168) = *((_QWORD *)a2 + 53);
    *(_QWORD *)(this + 176) = *((_QWORD *)a2 + 54);
    *(_QWORD *)(this + 184) = *((_QWORD *)a2 + 55);
    *(_QWORD *)(this + 192) = *((_QWORD *)a2 + 56);
    *(_QWORD *)(this + 200) = *((_QWORD *)a2 + 57);
    v10 = *((double *)a2 + 58);
  }
  else
  {
    this = (*(uint64_t (**)(const md::MapTileData *))(*(_QWORD *)a2 + 40))(a2);
    v11 = *(double *)(v2 + 80);
    if ((_DWORD)this)
    {
      v12.f64[0] = *(float64_t *)(v2 + 72);
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 136) = 0u;
      *(_OWORD *)(v2 + 152) = 0u;
      *(_QWORD *)(v2 + 176) = 0;
      v12.f64[1] = v11;
      v13 = *(float64x2_t *)(v2 + 56);
      v14 = vsubq_f64(v12, v13);
      v15 = (float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v14, (float64x2_t)vdupq_n_s64(0x3FF00029F16B11C7uLL)), (int8x16_t)vcltzq_f64(v14));
      __asm { FMOV            V3.2D, #0.5 }
      *(float64_t *)(v2 + 88) = v15.f64[0];
      *(float64_t *)(v2 + 128) = v15.f64[1];
      *(float64_t *)(v2 + 168) = v15.f64[0];
      *(float64x2_t *)(v2 + 184) = vmlaq_f64(v13, _Q3, vsubq_f64(v14, v15));
    }
    else
    {
      v21 = *(double *)(v2 + 56);
      v22 = *(double *)(v2 + 64);
      v23 = *(double *)(v2 + 72) - v21;
      *(double *)(v2 + 88) = v23;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(double *)(v2 + 128) = v11 - v22;
      *(_OWORD *)(v2 + 136) = 0u;
      *(_OWORD *)(v2 + 152) = 0u;
      *(double *)(v2 + 168) = v23;
      *(_QWORD *)(v2 + 176) = 0;
      *(double *)(v2 + 184) = v21;
      *(double *)(v2 + 192) = v22;
    }
    *(_QWORD *)(v2 + 200) = 0;
    v10 = 1.0;
  }
  *(double *)(v2 + 208) = v10;
  return this;
}

void md::BaseMapTileDataRenderable::setSubtileClipMask(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;

  if (a2)
  {
    if (!*(_QWORD *)(a1 + 248))
    {
      v11 = operator new(0xE8uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_1E42E22B0;
      v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), qword_1EE54AE40, 2, 1, 6, 1);
      v11[28] = ggl::Tile::Clipping::reflection(void)::reflection;
      v11[3] = &off_1E42B97D0;
      v13 = *(std::__shared_weak_count **)(a1 + 256);
      *(_QWORD *)(a1 + 248) = v12;
      *(_QWORD *)(a1 + 256) = v11;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    v4 = *(_QWORD **)(a1 + 248);
    v5 = v4[1];
    if (v5)
    {
      v6 = (_DWORD *)v4[9];
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        goto LABEL_38;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        goto LABEL_38;
    }
    v16 = *(_DWORD **)a2;
    if (v7 == 1)
    {
      v6[1] = *v16 & 1;
    }
    else if (!(_DWORD)v7 || (v7 - 1) >> 32)
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v25 |= ((*(_QWORD *)((char *)v16 + (((unint64_t)(v22 + v24) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v22 + v24)) & 1) << v24;
          ++v24;
        }
        while (v7 > v24);
        v6[++v23] = v25;
        v22 += v7;
      }
      while (v7 > v23);
    }
    else if (v7 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        do
        {
          v20 |= ((*(_QWORD *)((char *)v16 + (((unint64_t)(v17 + v19) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + v19)) & 1) << v19;
          v21 |= ((*(_QWORD *)((char *)v16 + (((unint64_t)(v17 + v19 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + v19 + 1)) & 1) << (v19 + 1);
          v19 += 2;
        }
        while (v7 != v19);
        v6[++v18] = v21 | v20;
        v17 += v7;
      }
      while (v7 > v18);
    }
    else
    {
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v29 |= ((*(_QWORD *)((char *)v16 + (((unint64_t)(v26 + v28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v26 + v28)) & 1) << v28;
          v30 |= ((*(_QWORD *)((char *)v16 + (((unint64_t)(v26 + v28 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v26 + v28 + 1)) & 1) << (v28 + 1);
          v28 += 2;
        }
        while ((v7 & 0xFFFFFFFFFFFFFFFELL) != v28);
        v31 = v30 | v29;
        v32 = v7 & 0xFFFFFFFFFFFFFFFELL;
        v33 = v7 & 0xFFFFFFFE;
        do
        {
          v31 |= ((*(_QWORD *)((char *)v16 + (((v32 + v7 * v27) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v32
                                                                                                 + v7
                                                                                                 * v27)) & 1) << v33++;
          v32 = v33;
        }
        while (v7 > v33);
        v6[++v27] = v31;
        v26 += v7;
      }
      while (v7 > v27);
    }
LABEL_38:
    *v6 = v7;
    if (v5)
    {
      if (v4[8] > v5)
        v5 = v4[8];
      v4[7] = 0;
      v4[8] = v5;
    }
    return;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t ggl::ConstantDataTyped<ggl::Tile::Clipping>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Tile::Clipping>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Clipping>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Clipping>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Clipping>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::BaseMapTileDataRenderable::adjustZScale(uint64_t this, float a2, float a3)
{
  float v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!*(_BYTE *)(this + 376))
  {
    v3 = *(double *)(this + 72) - *(double *)(this + 56);
    *(double *)(this + 168) = v3;
    *(_QWORD *)(this + 200) = 0;
  }
  v4 = *(_QWORD **)(this + 232);
  v5 = v4[1];
  v7 = v4[8];
  v6 = v4[9];
  *(float *)(v6 + 348) = a2;
  *(float *)(v6 + 344) = a3;
  if (v7 > v5)
    v5 = v7;
  v4[7] = 0;
  v4[8] = v5;
  return this;
}

_QWORD *md::BaseMapTileDataRenderable::adjustZOffset(_QWORD *this, float a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = this[1];
  v3 = this[8];
  *(float *)(this[9] + 336) = a2;
  if (v3 > v2)
    v2 = v3;
  this[7] = 0;
  this[8] = v2;
  return this;
}

void md::NavLabelPart::~NavLabelPart(md::NavLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v5 = operator new();
    *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v5 + 24) = "VectorKitLabels";
    *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v5 = &off_1E42B5668;
    *(_QWORD *)(v5 + 8) = "VectorKitLabels";
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_QWORD *)(v5 + 248) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v5 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v5;
  }
  (*(void (**)(uint64_t, md::NavLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, this, 848);
}

uint64_t md::NavLabelPart::updateWithNavLabelStyle(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a2 + 8);
  if (v2 != *(unsigned __int8 *)(result + 768))
  {
    v3 = result;
    *(_BYTE *)(result + 768) = v2;
    *(_BYTE *)(result + 565) = v2 != 0;
    if (v2)
    {
      v4 = operator new();
      result = *(_QWORD *)(v3 + 776);
      *(_QWORD *)(v3 + 776) = v4;
      if (!result)
        return result;
    }
    else
    {
      result = *(_QWORD *)(result + 776);
      *(_QWORD *)(v3 + 776) = 0;
      if (!result)
        return result;
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::NavLabelPart::layoutForStagingWithNavContext(md::CollisionObject *this, uint64_t a2, _DWORD *a3, __n128 a4, int8x16_t a5, float32x4_t a6)
{
  uint64_t v6;
  char *v10;
  unsigned __int8 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int8x16_t v26;
  uint64_t v27;
  int v28;
  char v29;
  _OWORD v30[8];
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  double v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;

  v6 = *((_QWORD *)this + 80);
  if (v6)
  {
    v10 = (char *)this + 72;
    if (*((float *)this + 20) < *((float *)this + 18)
      || (a5.i32[0] = *((_DWORD *)this + 19), *((float *)this + 21) < *(float *)a5.i32))
    {
      v11 = atomic_load((unsigned __int8 *)(v6 + 144));
      if ((v11 & 1) != 0)
        v12 = *(_OWORD *)(v6 + 64);
      else
        v12 = xmmword_19FFB2E30;
      v26 = (int8x16_t)v12;
      md::CollisionObject::resetWithRects((void **)this + 9, 1u);
      v13 = *((_QWORD *)this + 29);
      v14 = *((unsigned int *)this + 62);
      *((_DWORD *)this + 62) = v14 + 1;
      *(int8x16_t *)(v13 + 16 * v14) = v26;
      v15.i64[0] = v26.i64[0];
      v15.i64[1] = *((_QWORD *)this + 10);
      a6.i64[0] = *((_QWORD *)this + 9);
      a6.i64[1] = v26.i64[1];
      a5 = (int8x16_t)vcgtq_f32(a6, v15);
      a4 = (__n128)vbslq_s8(a5, v26, *(int8x16_t *)((char *)this + 72));
      *(__n128 *)((char *)this + 72) = a4;
    }
    *((_DWORD *)this + 70) = *a3;
    *((_DWORD *)this + 71) = a3[1];
    *((_DWORD *)this + 26) = *a3;
    a4.n128_u32[0] = a3[1];
    *((_DWORD *)this + 27) = a4.n128_u32[0];
    md::CollisionObject::setupShapeData((uint64_t)v10, a4.n128_f64[0], *(double *)a5.i64, *(double *)a6.i64);
    if (*((_BYTE *)this + 565))
    {
      v28 = 0;
      v27 = 0;
      v29 = 1;
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *((_QWORD *)this + 4);
      v18 = *(float *)(v17 + 24);
      v19 = *(float *)(v17 + 20);
      generateRotationMatrixMeshPositioningMode((double *)&v53, (uint64_t)&v27, v16, (double *)this + 98, *((unsigned __int8 *)this + 766), 1, *((unsigned __int8 *)this + 768));
      v20 = v19 * v18 * *(double *)(v16 + 320);
      v41 = v53;
      v44 = v55;
      v47 = v57;
      v42 = v54;
      v45 = v56;
      v48 = v58;
      v43 = 0;
      v46 = 0;
      v49 = 0;
      v50 = *((_OWORD *)this + 49);
      v51 = *((_QWORD *)this + 100);
      v52 = 0x3FF0000000000000;
      v34 = 0u;
      v36 = 0;
      v39 = 0u;
      v38 = 0u;
      v35 = 0u;
      v33 = 0u;
      v32 = 0u;
      v40 = 0x3FF0000000000000;
      v31 = v20;
      *(double *)&v34 = v20;
      v37 = v20;
      gm::operator*<double,4,4,4>((double *)v30, (double *)&v41, &v31);
      v21 = (_OWORD *)*((_QWORD *)this + 97);
      v22 = v30[1];
      *v21 = v30[0];
      v21[1] = v22;
      v23 = v30[3];
      v21[2] = v30[2];
      v21[3] = v23;
      v24 = v30[5];
      v21[4] = v30[4];
      v21[5] = v24;
      v25 = v30[7];
      v21[6] = v30[6];
      v21[7] = v25;
    }
  }
}

uint64_t md::NavLabelPart::updateNavForDisplay(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v1 = *(unsigned __int8 *)(this + 768);
  if (*(unsigned __int8 *)(this + 808) != v1)
  {
    v2 = this;
    *(_BYTE *)(this + 808) = v1;
    *(_BYTE *)(this + 565) = v1 != 0;
    if (v1)
    {
      v3 = operator new();
      v4 = 0;
      v5 = 0;
      this = *(_QWORD *)(v2 + 816);
      *(_QWORD *)(v2 + 816) = v3;
      if (!this)
      {
LABEL_5:
        *(_BYTE *)(v2 + 665) = v5;
        return this;
      }
    }
    else
    {
      this = *(_QWORD *)(this + 816);
      *(_QWORD *)(v2 + 816) = 0;
      v4 = 1;
      v5 = 1;
      if (!this)
        goto LABEL_5;
    }
    this = MEMORY[0x1A1AF4E00](this, 0x1000C40AE2C30F4);
    v5 = v4;
    goto LABEL_5;
  }
  return this;
}

void md::NavLabelPart::layoutForDisplayWithNavContext(uint64_t a1, uint64_t a2, _DWORD *a3, float *a4, int8x16_t a5, int8x16_t a6, float32x4_t a7)
{
  uint64_t v7;
  int8x16_t *v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  BOOL v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int8x16_t v39;
  uint64_t v40;
  int v41;
  char v42;
  _OWORD v43[8];
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  double v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;

  v7 = *(_QWORD *)(a1 + 640);
  if (v7)
  {
    *(_BYTE *)(a1 + 658) = *(_BYTE *)(a1 + 556);
    v12 = (int8x16_t *)(a1 + 312);
    if (*(float *)(a1 + 320) < *(float *)(a1 + 312)
      || (a6.i32[0] = *(_DWORD *)(a1 + 316), *(float *)(a1 + 324) < *(float *)a6.i32))
    {
      v13 = atomic_load((unsigned __int8 *)(v7 + 144));
      if ((v13 & 1) != 0)
        v14 = *(_OWORD *)(v7 + 64);
      else
        v14 = xmmword_19FFB2E30;
      v39 = (int8x16_t)v14;
      md::CollisionObject::resetWithRects((void **)(a1 + 312), 1u);
      v15 = *(_QWORD *)(a1 + 472);
      v16 = *(unsigned int *)(a1 + 488);
      *(_DWORD *)(a1 + 488) = v16 + 1;
      *(int8x16_t *)(v15 + 16 * v16) = v39;
      v17.i64[0] = v39.i64[0];
      v17.i64[1] = v12->i64[1];
      a7.i64[0] = v12->i64[0];
      a7.i64[1] = v39.i64[1];
      a6 = (int8x16_t)vcgtq_f32(a7, v17);
      a5 = vbslq_s8(a6, v39, *v12);
      *v12 = a5;
    }
    *(_DWORD *)(a1 + 520) = *a3;
    *(_DWORD *)(a1 + 524) = a3[1];
    *(_DWORD *)(a1 + 344) = *a3;
    a5.i32[0] = a3[1];
    *(_DWORD *)(a1 + 348) = a5.i32[0];
    md::CollisionObject::setupShapeData((uint64_t)v12, *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64);
    v18 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 640) + 143));
    if ((v18 & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 565))
        return;
LABEL_23:
      v41 = 0;
      v40 = 0;
      v42 = 1;
      v29 = *(_QWORD *)(a2 + 24);
      v30 = *(_QWORD *)(a1 + 32);
      v31 = *(float *)(v30 + 72);
      v32 = *(float *)(v30 + 68);
      generateRotationMatrixMeshPositioningMode((double *)&v66, (uint64_t)&v40, v29, (double *)(v30 + 32), *(unsigned __int8 *)(a1 + 766), 1, *(unsigned __int8 *)(a1 + 808));
      v33 = v32 * v31 * *(double *)(v29 + 320);
      v54 = v66;
      v57 = v68;
      v60 = v70;
      v55 = v67;
      v58 = v69;
      v61 = v71;
      v56 = 0;
      v59 = 0;
      v62 = 0;
      v63 = *(_OWORD *)(v30 + 32);
      v64 = *(_QWORD *)(v30 + 48);
      v65 = 0x3FF0000000000000;
      v47 = 0u;
      v49 = 0;
      v52 = 0u;
      v51 = 0u;
      v48 = 0u;
      v46 = 0u;
      v45 = 0u;
      v53 = 0x3FF0000000000000;
      v44 = v33;
      *(double *)&v47 = v33;
      v50 = v33;
      gm::operator*<double,4,4,4>((double *)v43, (double *)&v54, &v44);
      v34 = *(_OWORD **)(a1 + 816);
      v35 = v43[1];
      *v34 = v43[0];
      v34[1] = v35;
      v36 = v43[3];
      v34[2] = v43[2];
      v34[3] = v36;
      v37 = v43[5];
      v34[4] = v43[4];
      v34[5] = v37;
      v38 = v43[7];
      v34[6] = v43[6];
      v34[7] = v38;
      return;
    }
    v19 = *(_QWORD *)(a1 + 640);
    v20 = atomic_load((unsigned __int8 *)(v19 + 144));
    if ((v20 & 1) != 0)
    {
      v23 = *(float *)(v19 + 48);
      v21 = *(float *)(v19 + 52);
      v22 = *(float *)(v19 + 56);
      v24 = *(float *)(v19 + 60);
    }
    else
    {
      v21 = 3.4028e38;
      v22 = -3.4028e38;
      v23 = 3.4028e38;
      v24 = -3.4028e38;
    }
    v25 = *(unsigned __int8 *)(a1 + 565);
    v26 = v22 < v23;
    if (v24 < v21)
      v26 = 1;
    if (*(_BYTE *)(a1 + 565))
    {
      if (v26)
        goto LABEL_22;
      v27 = *a4;
      v28 = a4[1];
      v23 = *a4 + v23;
    }
    else
    {
      if (v26)
        goto LABEL_22;
      v27 = *(float *)(a1 + 520);
      v23 = v27 + v23;
      v28 = *(float *)(a1 + 524);
    }
    v21 = v28 + v21;
    v22 = v27 + v22;
    v24 = v28 + v24;
LABEL_22:
    *(float *)(a1 + 696) = v23;
    *(float *)(a1 + 700) = v21;
    *(float *)(a1 + 704) = v22;
    *(float *)(a1 + 708) = v21;
    *(float *)(a1 + 712) = v22;
    *(float *)(a1 + 716) = v24;
    *(float *)(a1 + 720) = v23;
    *(float *)(a1 + 724) = v24;
    if (!v25)
      return;
    goto LABEL_23;
  }
}

void md::ARLabelsLogic::~ARLabelsLogic(md::ARLabelsLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_BYTE *)operator new();
  *result = a1;
  v4[2] = "md::ARLabelsContext]";
  v4[3] = 19;
  v4[4] = result;
  *v4 = &off_1E42B0CA8;
  v4[1] = 0x8741E659406FCBBLL;
  *a2 = v4;
  return result;
}

void sub_19F7A33C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x8741E659406FCBBLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x8741E659406FCBBLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x8741E659406FCBBLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x8741E659406FCBBLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x8741E659406FCBBLL && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARLabelsLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  void *v10;

  v5 = (_QWORD *)gdc::Registry::storage<arComponents::Configuration>(*(_QWORD *)(a1 + 120));
  v6 = v5[7];
  v7 = v5[8];
  if (v6 != v7)
  {
    v8 = (unsigned __int8 *)(v5[10] + 1);
    do
    {
      v9 = *v8;
      v8 += 2;
      if (v9)
      {
        *a4 = 1;
      }
      else
      {
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *a4 = objc_msgSend(v10, "arShowAllLabels");

      }
      v6 += 8;
    }
    while (v6 != v7);
  }
}

void sub_19F7A3620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::Logic<md::ARLabelsLogic,md::ARLabelsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::Configuration>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAD7BA5E63AF64920;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAD7BA5E63AF64920;
      if (*(_QWORD *)&v3 <= 0xAD7BA5E63AF64920)
        v5 = 0xAD7BA5E63AF64920 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAD7BA5E63AF64920;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAD7BA5E63AF64920)
            {
              if (v7[2] == 0xAD7BA5E63AF64920)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAD7BA5E63AF64920)
          {
            if (v7[2] == 0xAD7BA5E63AF64920)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Configuration]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B18D8;
  *(_QWORD *)(v11 + 8) = 0xAD7BA5E63AF64920;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAD7BA5E63AF64920, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAD7BA5E63AF64920;
  v15[1] = "arComponents::Configuration]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAD7BA5E63AF64920, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7A3900(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::Configuration>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Configuration>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(a1[11] - 2);
  a1[11] -= 2;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Configuration>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Configuration>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::ARLabelsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0CA8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4077774924);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARLabelsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0CA8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C4077774924);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARLabelsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::NavLabelMarker::~NavLabelMarker(id *this)
{
  id *v2;

  *this = &off_1E428F8E0;
  v2 = this + 36;
  objc_storeWeak(this + 36, 0);
  objc_destroyWeak(v2);
  md::LabelMarker::~LabelMarker((md::LabelMarker *)this);
}

{
  id *v2;

  *this = &off_1E428F8E0;
  v2 = this + 36;
  objc_storeWeak(this + 36, 0);
  objc_destroyWeak(v2);
  md::LabelMarker::~LabelMarker((md::LabelMarker *)this);
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelMarker::name(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

void md::Marker::shortName(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
}

uint64_t md::LabelMarker::featureId(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::venueId(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::venueBuildingId(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::venueLevelId(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::venueComponentId(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::venueFloorOrdinal(md::LabelMarker *this)
{
  return 0;
}

void md::Marker::venueLookInsideFloorOrdinal(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::LabelMarker::venueComponentType(md::LabelMarker *this)
{
  return 0;
}

void md::LabelMarker::styleAttributes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

float md::LabelMarker::minZoomRank(md::LabelMarker *this)
{
  return 0.0;
}

float md::LabelMarker::maxZoomRank(md::LabelMarker *this)
{
  return 0.0;
}

void md::LabelMarker::debugString(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 11;
  strcpy((char *)a1, "LabelMarker");
}

void md::LabelMarker::text(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

void md::LabelMarker::subtext(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

void md::LabelMarker::locale(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

uint64_t md::LabelMarker::isOneWayArrow(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isTrafficIncident(md::LabelMarker *this)
{
  return 0;
}

BOOL md::NavLabelMarker::isRouteEta(md::NavLabelMarker *this)
{
  return *((_BYTE *)this + 225) == 16;
}

uint64_t md::LabelMarker::isMuninRoadLabel(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isRouteWaypoint(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isRouteAnnotation(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isARWalkingFeature(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::featureLabelIdentifier(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isFlyoverTour(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::animationID(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::sortKey(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isTransit(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isTransitLine(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isTransitAccessPoint(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isOnRoute(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isTransitNode(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isPoint(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isTrail(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::businessID(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::featureID(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::clientFeatureID(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isCluster(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isLeafCluster(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::clusterContentBounds(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isClusterChild(md::LabelMarker *this)
{
  return 0;
}

void md::LabelMarker::parentClusterLabelMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t md::LabelMarker::isVenueButton(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::incident(md::LabelMarker *this)
{
  return 0;
}

id md::NavLabelMarker::routeInfo(id *this)
{
  id WeakRetained;
  void *v3;

  if ((*((unsigned int (**)(id *))*this + 21))(this))
    WeakRetained = objc_loadWeakRetained(this + 36);
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "routeInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_19F7A4564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::LabelMarker::waypointInfo(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::arWalkingFeature(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::routeAnnotations(md::LabelMarker *this)
{
  return (uint64_t)this + 256;
}

uint64_t md::LabelMarker::externalFeatureAnnotation(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::NavLabelMarker::isSelectable(md::NavLabelMarker *this)
{
  return 1;
}

uint64_t md::NavLabelMarker::isSelected(id *this)
{
  id WeakRetained;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::recursive_mutex *v10;
  char v11;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v8, (uint64_t)this);
  WeakRetained = objc_loadWeakRetained(this + 36);
  v3 = objc_msgSend(WeakRetained, "isPicked");

  if (v11)
    std::recursive_mutex::unlock(v10);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19F7A4630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LabelMarker::isInPickedState(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::hasLaidOutForDisplay(md::LabelMarker *this)
{
  return 0;
}

BOOL md::NavLabelMarker::isVisible(id *this)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::recursive_mutex *v18;
  char v19;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v16, (uint64_t)this);
  md::NavLabelMarker::navRoadLabel(this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2 || !*(_QWORD *)objc_msgSend(v2, "label"))
  {

    v9 = 0;
    goto LABEL_18;
  }
  v4 = (uint64_t *)objc_msgSend(v3, "label");
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  if (v6 && *(_BYTE *)(v6 + 325) && *(_BYTE *)(v6 + 326) && *(float *)(v6 + 268) > 0.0)
  {
    v9 = *(_BYTE *)(v6 + 327) != 0;
    if (!v5)
      goto LABEL_18;
  }
  else
  {
    v9 = 0;
    if (!v5)
      goto LABEL_18;
  }
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_18:
  if (v19)
    std::recursive_mutex::unlock(v18);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v9;
}

void sub_19F7A47A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LabelMarker::isTextVisible(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isAlongSelectedTransitLine(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isOccluded(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isDragged(md::LabelMarker *this)
{
  return 0;
}

void md::LabelMarker::featureTile(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t md::LabelMarker::useVKSelectionBalloon(md::LabelMarker *this)
{
  return 1;
}

void md::LabelMarker::transitSystems(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

void md::LabelMarker::featureHandles(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

float md::NavLabelMarker::calloutAnchorRect(id *this)
{
  float v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::recursive_mutex *v18;
  char v19;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v16, (uint64_t)this);
  v2 = 0.0;
  if (((*((uint64_t (**)(id *))*this + 58))(this) & 1) != 0)
  {
    md::NavLabelMarker::navRoadLabel(this);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (!v3 || !*(_QWORD *)objc_msgSend(v3, "label"))
    {

      goto LABEL_11;
    }
    v5 = (uint64_t *)objc_msgSend(v4, "label");
    v7 = *v5;
    v6 = (std::__shared_weak_count *)v5[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    if (v7)
    {
      v2 = *(float *)(v7 + 336);
      if (!v6)
        goto LABEL_11;
    }
    else
    {
      v2 = 0.0;
      if (!v6)
        goto LABEL_11;
    }
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_11:
  if (v19)
    std::recursive_mutex::unlock(v18);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v2;
}

void sub_19F7A4C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float md::NavLabelMarker::screenCollisionBounds(id *this)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  float v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::recursive_mutex *v18;
  char v19;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v16, (uint64_t)this);
  if (!v16)
    goto LABEL_11;
  md::NavLabelMarker::navRoadLabel(this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2 || !*(_QWORD *)objc_msgSend(v2, "label"))
  {

LABEL_11:
    v9 = 3.4028e38;
    goto LABEL_12;
  }
  v4 = (uint64_t *)objc_msgSend(v3, "label");
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  if (v6)
  {
    v9 = *(float *)(v6 + 336);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v9 = 3.4028e38;
    if (!v5)
      goto LABEL_12;
  }
  v14 = (unint64_t *)&v5->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  if (v19)
    std::recursive_mutex::unlock(v18);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_19F7A4DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::NavLabelMarker::screenPixelBounds(md::NavLabelMarker *this)
{
  return (*(uint64_t (**)(md::NavLabelMarker *))(*(_QWORD *)this + 568))(this);
}

void md::NavLabelMarker::coordinate(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  float64x2_t v20;
  unint64_t *v21;
  unint64_t v22;
  long double v23;

  md::NavLabelMarker::navRoadLabel(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && *(_QWORD *)objc_msgSend(v3, "label"))
  {
    v5 = (uint64_t *)objc_msgSend(v4, "label");
    v7 = *v5;
    v6 = (std::__shared_weak_count *)v5[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    if (v7)
    {
      v10 = *(_QWORD *)(v7 + 160);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
        v14 = v13;
      }
      else
      {
        v11 = *(double *)(v7 + 112);
        v12 = *(double *)(v7 + 120);
        v14 = *(_QWORD *)(v7 + 128);
      }
      v16 = v11 * 6.28318531;
      v17 = exp(v12 * 6.28318531 + -3.14159265);
      v23 = atan(v17);
      v18 = fmod(v16, 6.28318531);
      v19 = fmod(v18 + 6.28318531, 6.28318531);
      v20.f64[0] = v23;
      v20.f64[1] = v19;
      v15 = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v20);
    }
    else
    {
      v15 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      v14 = 0x7FEFFFFFFFFFFFFFLL;
    }
    *(float64x2_t *)a2 = v15;
    *(_QWORD *)(a2 + 16) = v14;
    if (v6)
    {
      v21 = (unint64_t *)&v6->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {

    *(int64x2_t *)a2 = vdupq_n_s64(0xC066800000000000);
    *(_QWORD *)(a2 + 16) = 0x7FEFFFFFFFFFFFFFLL;
  }
}

void sub_19F7A4F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F7A4F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::LabelMarker::coordinateNoFallbackElevation(md::LabelMarker *this)
{
  return (*(uint64_t (**)(md::LabelMarker *))(*(_QWORD *)this + 584))(this);
}

float md::LabelMarker::buildingHeight(md::LabelMarker *this)
{
  return 0.0;
}

uint64_t md::LabelMarker::buildingFaceAzimuth(md::LabelMarker *this)
{
  return 0;
}

float md::LabelMarker::elevationOffset(md::LabelMarker *this)
{
  return 0.0;
}

uint64_t md::LabelMarker::facingDirection(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::positionOfInterest()
{
  return 0;
}

uint64_t md::LabelMarker::selectionBehavior(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::pickedLabelBalloonBehavior(md::LabelMarker *this)
{
  return 0;
}

double md::NavLabelMarker::calloutAnchorPoint(md::NavLabelMarker *this)
{
  return *MEMORY[0x1E0C9D538];
}

uint64_t md::LabelMarker::externalFeatureCategory(md::LabelMarker *this)
{
  return 0;
}

void md::LabelMarker::dataIconImageKeys(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

void md::LabelMarker::iconImageInfosForLabel(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

uint64_t md::LabelMarker::elementCount(md::LabelMarker *this)
{
  return 0;
}

id md::NavLabelMarker::navRoadLabel(id *this)
{
  id WeakRetained;
  void *v3;

  if ((*((unsigned int (**)(id *))*this + 21))(this))
  {
    if ((*((unsigned int (**)(id *))*this + 21))(this))
      WeakRetained = objc_loadWeakRetained(this + 36);
    else
      WeakRetained = 0;
    objc_msgSend(WeakRetained, "label");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_19F7A5300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 24))
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void md::LabelMarker::~LabelMarker(md::LabelMarker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(_QWORD, _QWORD);
  void (***v14)(_QWORD, _QWORD);
  uint64_t v15;
  void (***v16)(_QWORD, _QWORD);
  void (***v17)(_QWORD, _QWORD);
  void (**v18)(_QWORD, uint64_t);
  BOOL v19;
  void (***v20)(_QWORD, _QWORD);
  void (***v21)(_QWORD, _QWORD);
  uint64_t v22;
  void (***v23)(_QWORD, _QWORD);
  void (***v24)(_QWORD, _QWORD);
  void (**v25)(_QWORD, uint64_t);
  void (***v26)(_QWORD, _QWORD);
  void (***v27)(_QWORD, _QWORD);
  uint64_t v28;
  void (***v29)(_QWORD, _QWORD);
  void (***v30)(_QWORD, _QWORD);
  void (**v31)(_QWORD, uint64_t);
  uint64_t v32;
  std::__shared_weak_count *v33;

  *(_QWORD *)this = off_1E428C038;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    v3 = *((_QWORD *)this + 33);
    v4 = *((_QWORD *)this + 32);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 35) + 40))(*((_QWORD *)this + 35), v4, *((_QWORD *)this + 34) - v4);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  v7 = *((_QWORD *)this + 24);
  if (v7)
  {
    v8 = *((_QWORD *)this + 25);
    v9 = *((_QWORD *)this + 24);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 - 8) + 40))(*(_QWORD *)(v8 - 8), *(_QWORD *)(v8 - 32), *(_QWORD *)(v8 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = *((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 25) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 27) + 40))(*((_QWORD *)this + 27), v9, *((_QWORD *)this + 26) - v9);
  }
  v10 = *((_QWORD *)this + 20);
  if (v10)
  {
    v11 = *((_QWORD *)this + 21);
    v12 = *((_QWORD *)this + 20);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 9) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v11 - 8) + 40))(*(_QWORD *)(v11 - 8), *(_QWORD *)(v11 - 32), *(_QWORD *)(v11 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        v11 -= 32;
      }
      while (v11 != v10);
      v12 = *((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v12, *((_QWORD *)this + 22) - v12);
  }
  v13 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 16);
  if (v13)
  {
    v14 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 17);
    v15 = *((_QWORD *)this + 16);
    if (v14 != v13)
    {
      v16 = v14 - 3;
      v17 = v14 - 3;
      do
      {
        v18 = *v17;
        v17 -= 3;
        (*v18)(v16, v15);
        v19 = v16 == v13;
        v16 = v17;
      }
      while (!v19);
      v15 = *((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v15, *((_QWORD *)this + 18) - v15);
  }
  v20 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 12);
  if (v20)
  {
    v21 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 13);
    v22 = *((_QWORD *)this + 12);
    if (v21 != v20)
    {
      v23 = v21 - 3;
      v24 = v21 - 3;
      do
      {
        v25 = *v24;
        v24 -= 3;
        (*v25)(v23, v22);
        v19 = v23 == v20;
        v23 = v24;
      }
      while (!v19);
      v22 = *((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v22, *((_QWORD *)this + 14) - v22);
  }
  v26 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 8);
  if (v26)
  {
    v27 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 9);
    v28 = *((_QWORD *)this + 8);
    if (v27 != v26)
    {
      v29 = v27 - 3;
      v30 = v27 - 3;
      do
      {
        v31 = *v30;
        v30 -= 3;
        (*v31)(v29, v28);
        v19 = v29 == v26;
        v29 = v30;
      }
      while (!v19);
      v28 = *((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v26;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v28, *((_QWORD *)this + 10) - v28);
  }
  v32 = *((_QWORD *)this + 4);
  if (v32)
  {
    *((_QWORD *)this + 5) = v32;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v32, *((_QWORD *)this + 6) - v32);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
}

uint64_t md::LabelMarker::LabelMarker(uint64_t result, char a2, char a3, _QWORD *a4, float a5)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  uint64_t v17;
  geo::read_write_lock *v18;
  const char *v19;
  malloc_zone_t *zone;
  int v21;
  int v22;
  uint64_t v23;
  geo::read_write_lock *v24;
  const char *v25;
  malloc_zone_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  geo::read_write_lock *v30;
  const char *v31;
  malloc_zone_t *v32;
  int v33;
  int v34;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  geo::read_write_lock *v42;
  const char *v43;
  malloc_zone_t *v44;
  int v45;
  int v46;
  uint64_t v47;
  geo::read_write_lock *v48;
  const char *v49;
  malloc_zone_t *v50;
  int v51;
  uint64_t v52;
  geo::read_write_lock *v53;
  const char *v54;
  malloc_zone_t *v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E428C038;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  if ((v5 & 1) == 0)
  {
    v74 = a4;
    v80 = result;
    v62 = a5;
    v56 = a3;
    v68 = a2;
    a2 = v68;
    a3 = v56;
    a5 = v62;
    v16 = v15;
    a4 = v74;
    result = v80;
    if (v16)
    {
      v17 = operator new();
      *(_QWORD *)(v17 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v17 + 24) = "VectorKitLabels";
      *(_OWORD *)(v17 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v17 = &off_1E42B5668;
      *(_QWORD *)(v17 + 8) = "VectorKitLabels";
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *(_OWORD *)(v17 + 104) = 0u;
      *(_OWORD *)(v17 + 120) = 0u;
      *(_OWORD *)(v17 + 136) = 0u;
      *(_OWORD *)(v17 + 152) = 0u;
      *(_OWORD *)(v17 + 168) = 0u;
      *(_OWORD *)(v17 + 184) = 0u;
      *(_OWORD *)(v17 + 200) = 0u;
      *(_OWORD *)(v17 + 216) = 0u;
      *(_OWORD *)(v17 + 232) = 0u;
      *(_QWORD *)(v17 + 248) = 0;
      *(_OWORD *)(v17 + 56) = 0u;
      v18 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v17 + 56), 0);
      if ((_DWORD)v18)
        geo::read_write_lock::logFailure(v18, (uint64_t)"initialization", v19);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v17 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v17 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v17;
      a4 = v74;
      result = v80;
      a5 = v62;
      a3 = v56;
      a2 = v68;
    }
  }
  *(_QWORD *)(result + 56) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  if ((v6 & 1) == 0)
  {
    v75 = a4;
    v81 = result;
    v63 = a5;
    v57 = a3;
    v69 = a2;
    a2 = v69;
    a3 = v57;
    a5 = v63;
    v22 = v21;
    a4 = v75;
    result = v81;
    if (v22)
    {
      v23 = operator new();
      *(_QWORD *)(v23 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v23 + 24) = "VectorKitLabels";
      *(_OWORD *)(v23 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v23 = &off_1E42B5668;
      *(_QWORD *)(v23 + 8) = "VectorKitLabels";
      *(_OWORD *)(v23 + 72) = 0u;
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      *(_OWORD *)(v23 + 152) = 0u;
      *(_OWORD *)(v23 + 168) = 0u;
      *(_OWORD *)(v23 + 184) = 0u;
      *(_OWORD *)(v23 + 200) = 0u;
      *(_OWORD *)(v23 + 216) = 0u;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_QWORD *)(v23 + 248) = 0;
      *(_OWORD *)(v23 + 56) = 0u;
      v24 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v23 + 56), 0);
      if ((_DWORD)v24)
        geo::read_write_lock::logFailure(v24, (uint64_t)"initialization", v25);
      v26 = malloc_create_zone(0, 0);
      *(_QWORD *)(v23 + 48) = v26;
      malloc_set_zone_name(v26, "VectorKitLabels");
      *(_QWORD *)(v23 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v23;
      a4 = v75;
      result = v81;
      a5 = v63;
      a3 = v57;
      a2 = v69;
    }
  }
  *(_QWORD *)(result + 88) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  if ((v7 & 1) == 0)
  {
    v76 = a4;
    v82 = result;
    v64 = a5;
    v58 = a3;
    v70 = a2;
    a2 = v70;
    a3 = v58;
    a5 = v64;
    v28 = v27;
    a4 = v76;
    result = v82;
    if (v28)
    {
      v29 = operator new();
      *(_QWORD *)(v29 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v29 + 24) = "VectorKitLabels";
      *(_OWORD *)(v29 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v29 = &off_1E42B5668;
      *(_QWORD *)(v29 + 8) = "VectorKitLabels";
      *(_OWORD *)(v29 + 72) = 0u;
      *(_OWORD *)(v29 + 88) = 0u;
      *(_OWORD *)(v29 + 104) = 0u;
      *(_OWORD *)(v29 + 120) = 0u;
      *(_OWORD *)(v29 + 136) = 0u;
      *(_OWORD *)(v29 + 152) = 0u;
      *(_OWORD *)(v29 + 168) = 0u;
      *(_OWORD *)(v29 + 184) = 0u;
      *(_OWORD *)(v29 + 200) = 0u;
      *(_OWORD *)(v29 + 216) = 0u;
      *(_OWORD *)(v29 + 232) = 0u;
      *(_QWORD *)(v29 + 248) = 0;
      *(_OWORD *)(v29 + 56) = 0u;
      v30 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v29 + 56), 0);
      if ((_DWORD)v30)
        geo::read_write_lock::logFailure(v30, (uint64_t)"initialization", v31);
      v32 = malloc_create_zone(0, 0);
      *(_QWORD *)(v29 + 48) = v32;
      malloc_set_zone_name(v32, "VectorKitLabels");
      *(_QWORD *)(v29 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v29;
      a4 = v76;
      result = v82;
      a5 = v64;
      a3 = v58;
      a2 = v70;
    }
  }
  *(_QWORD *)(result + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  if ((v8 & 1) == 0)
  {
    v77 = a4;
    v83 = result;
    v65 = a5;
    v59 = a3;
    v71 = a2;
    a2 = v71;
    a3 = v59;
    a5 = v65;
    v34 = v33;
    a4 = v77;
    result = v83;
    if (v34)
    {
      v35 = operator new();
      *(_QWORD *)(v35 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v35 + 24) = "VectorKitLabels";
      *(_OWORD *)(v35 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v35 = &off_1E42B5668;
      *(_QWORD *)(v35 + 8) = "VectorKitLabels";
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *(_OWORD *)(v35 + 184) = 0u;
      *(_OWORD *)(v35 + 200) = 0u;
      *(_OWORD *)(v35 + 216) = 0u;
      *(_OWORD *)(v35 + 232) = 0u;
      *(_QWORD *)(v35 + 248) = 0;
      *(_OWORD *)(v35 + 56) = 0u;
      v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
      if ((_DWORD)v36)
        geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
      v38 = malloc_create_zone(0, 0);
      *(_QWORD *)(v35 + 48) = v38;
      malloc_set_zone_name(v38, "VectorKitLabels");
      *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v35;
      a4 = v77;
      result = v83;
      a5 = v65;
      a3 = v59;
      a2 = v71;
    }
  }
  *(_QWORD *)(result + 152) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  if ((v9 & 1) == 0)
  {
    v78 = a4;
    v84 = result;
    v66 = a5;
    v60 = a3;
    v72 = a2;
    a2 = v72;
    a3 = v60;
    a5 = v66;
    v40 = v39;
    a4 = v78;
    result = v84;
    if (v40)
    {
      v41 = operator new();
      *(_QWORD *)(v41 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v41 + 24) = "VectorKitLabels";
      *(_OWORD *)(v41 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v41 = &off_1E42B5668;
      *(_QWORD *)(v41 + 8) = "VectorKitLabels";
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *(_OWORD *)(v41 + 120) = 0u;
      *(_OWORD *)(v41 + 136) = 0u;
      *(_OWORD *)(v41 + 152) = 0u;
      *(_OWORD *)(v41 + 168) = 0u;
      *(_OWORD *)(v41 + 184) = 0u;
      *(_OWORD *)(v41 + 200) = 0u;
      *(_OWORD *)(v41 + 216) = 0u;
      *(_OWORD *)(v41 + 232) = 0u;
      *(_QWORD *)(v41 + 248) = 0;
      *(_OWORD *)(v41 + 56) = 0u;
      v42 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v41 + 56), 0);
      if ((_DWORD)v42)
        geo::read_write_lock::logFailure(v42, (uint64_t)"initialization", v43);
      v44 = malloc_create_zone(0, 0);
      *(_QWORD *)(v41 + 48) = v44;
      malloc_set_zone_name(v44, "VectorKitLabels");
      *(_QWORD *)(v41 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v41;
      a4 = v78;
      result = v84;
      a5 = v66;
      a3 = v60;
      a2 = v72;
    }
  }
  *(_QWORD *)(result + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  if ((v10 & 1) == 0)
  {
    v79 = a4;
    v85 = result;
    v67 = a5;
    v61 = a3;
    v73 = a2;
    a2 = v73;
    a3 = v61;
    a5 = v67;
    v46 = v45;
    a4 = v79;
    result = v85;
    if (v46)
    {
      v47 = operator new();
      *(_QWORD *)(v47 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v47 + 24) = "VectorKitLabels";
      *(_OWORD *)(v47 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v47 = &off_1E42B5668;
      *(_QWORD *)(v47 + 8) = "VectorKitLabels";
      *(_OWORD *)(v47 + 72) = 0u;
      *(_OWORD *)(v47 + 88) = 0u;
      *(_OWORD *)(v47 + 104) = 0u;
      *(_OWORD *)(v47 + 120) = 0u;
      *(_OWORD *)(v47 + 136) = 0u;
      *(_OWORD *)(v47 + 152) = 0u;
      *(_OWORD *)(v47 + 168) = 0u;
      *(_OWORD *)(v47 + 184) = 0u;
      *(_OWORD *)(v47 + 200) = 0u;
      *(_OWORD *)(v47 + 216) = 0u;
      *(_OWORD *)(v47 + 232) = 0u;
      *(_QWORD *)(v47 + 248) = 0;
      *(_OWORD *)(v47 + 56) = 0u;
      v48 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v47 + 56), 0);
      if ((_DWORD)v48)
        geo::read_write_lock::logFailure(v48, (uint64_t)"initialization", v49);
      v50 = malloc_create_zone(0, 0);
      *(_QWORD *)(v47 + 48) = v50;
      malloc_set_zone_name(v50, "VectorKitLabels");
      *(_QWORD *)(v47 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v47;
      a4 = v79;
      result = v85;
      a5 = v67;
      a3 = v61;
      a2 = v73;
    }
  }
  *(_QWORD *)(result + 216) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(result + 224) = a2;
  *(_BYTE *)(result + 225) = a3;
  v11 = a4[1];
  *(_QWORD *)(result + 232) = *a4;
  *(_QWORD *)(result + 240) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(float *)(result + 248) = a5;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 256) = 0;
  if ((v14 & 1) == 0)
  {
    v86 = result;
    result = v86;
    if (v51)
    {
      v52 = operator new();
      *(_QWORD *)(v52 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v52 + 24) = "VectorKitLabels";
      *(_OWORD *)(v52 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v52 = &off_1E42B5668;
      *(_QWORD *)(v52 + 8) = "VectorKitLabels";
      *(_OWORD *)(v52 + 72) = 0u;
      *(_OWORD *)(v52 + 88) = 0u;
      *(_OWORD *)(v52 + 104) = 0u;
      *(_OWORD *)(v52 + 120) = 0u;
      *(_OWORD *)(v52 + 136) = 0u;
      *(_OWORD *)(v52 + 152) = 0u;
      *(_OWORD *)(v52 + 168) = 0u;
      *(_OWORD *)(v52 + 184) = 0u;
      *(_OWORD *)(v52 + 200) = 0u;
      *(_OWORD *)(v52 + 216) = 0u;
      *(_OWORD *)(v52 + 232) = 0u;
      *(_QWORD *)(v52 + 248) = 0;
      *(_OWORD *)(v52 + 56) = 0u;
      v53 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v52 + 56), 0);
      if ((_DWORD)v53)
        geo::read_write_lock::logFailure(v53, (uint64_t)"initialization", v54);
      v55 = malloc_create_zone(0, 0);
      *(_QWORD *)(v52 + 48) = v55;
      malloc_set_zone_name(v55, "VectorKitLabels");
      *(_QWORD *)(v52 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v52;
      result = v86;
    }
  }
  *(_QWORD *)(result + 280) = mdm::Allocator::instance(void)::alloc;
  return result;
}

uint64_t md::NavLabelMarker::NavLabelMarker(uint64_t a1, uint64_t *a2, id *location, float a4)
{
  id v8;
  void *v9;
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];

  v8 = objc_loadWeakRetained(location);
  v9 = v8;
  if (v8)
  {
    if (objc_msgSend(v8, "isEtaFeature"))
      v10 = 16;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }

  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    md::LabelMarker::LabelMarker(a1, 1, v10, v17, a4);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    md::LabelMarker::LabelMarker(a1, 1, v10, v17, a4);
  }

  *(_QWORD *)a1 = &off_1E428F8E0;
  objc_copyWeak((id *)(a1 + 288), location);
  return a1;
}

void sub_19F7A60C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::ShadowShader::typedReflection(ggl::ShadowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ShadowShader::typedReflection(void)::ref = (uint64_t)"ShadowShader";
      ggl::shadowShaderVertexFunctionDescriptor(v2);
      qword_1EE577DE0 = (uint64_t)&ggl::shadowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<19ul>("ShadowShaderVertex");
      dword_1EE577DE8 = (int)v3;
      ggl::shadowShaderFragmentFunctionDescriptor(v3);
      qword_1EE577DF0 = (uint64_t)&ggl::shadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE577DF8 = ggl::crc32::compute<21ul>("ShadowShaderFragment");
      qword_1EE577E00 = (uint64_t)ggl::shadowShaderShaderConstants(void)::ref;
      unk_1EE577E08 = 4;
      qword_1EE577E10 = (uint64_t)ggl::shadowShaderShaderTextures(void)::ref;
      unk_1EE577E18 = 2;
      qword_1EE577E20 = (uint64_t)ggl::shadowShaderShaderSamplers(void)::ref;
      unk_1EE577E28 = 2;
    }
  }
}

void ggl::shadowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::shadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ShadowShaderVertex");
      *(_DWORD *)algn_1EE5780DC = 0;
      qword_1EE5780E0 = (uint64_t)"ShadowShader";
      unk_1EE5780E8 = ggl::shadowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE5780F0 = 1;
      unk_1EE5780F8 = &ggl::shadowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE578100 = 3;
      unk_1EE578108 = &ggl::shadowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE578110 = 0;
      unk_1EE578118 = &ggl::shadowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE578120 = 2;
      unk_1EE578128 = &ggl::shadowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578138 = 0;
      unk_1EE578140 = 0;
      qword_1EE578130 = 2;
    }
  }
}

void ggl::shadowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::shadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("ShadowShaderFragment");
      *(_DWORD *)algn_1EE5781C4 = 1;
      qword_1EE5781C8 = (uint64_t)"ShadowShader";
      unk_1EE5781D0 = 0;
      qword_1EE5781D8 = 0;
      unk_1EE5781E0 = &ggl::shadowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE5781E8 = 1;
      unk_1EE5781F0 = &ggl::shadowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE5781F8 = 0;
      unk_1EE578200 = &ggl::shadowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE578208 = 0;
      unk_1EE578210 = &ggl::shadowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578220 = 0;
      unk_1EE578228 = 0;
      qword_1EE578218 = 0;
    }
  }
}

void ggl::VertexDataTyped<ggl::Icon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Icon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Icon::IconMesh::~IconMesh(ggl::Icon::IconMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Icon::IconMesh::~IconMesh(ggl::Icon::IconMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Icon::IconMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Icon::IconMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Icon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Icon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Icon::IconPipelineState::~IconPipelineState(ggl::Icon::IconPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Icon::IconPipelineState::IconPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  _OWORD *v98;
  ggl::IconShader *v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[28];

  if ((v15 & 1) == 0)
  {
    v98 = a4;
    v106 = a2;
    v107 = a3;
    a2 = v106;
    a3 = v107;
    a4 = v98;
    if ((_DWORD)v99)
    {
      if ((v100 & 1) == 0)
      {
        if ((_DWORD)v99)
        {
          if ((v103 & 1) == 0
          {
            if ((v105 & 1) == 0
            {
              ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D68 = 1;
          }
          ggl::Icon::IconPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE580CF8 = &ggl::Icon::pipelineDataIconPipelineDeviceStructs(void)::ref;
          qword_1EE580D00 = 0;
          if ((v104 & 1) == 0
          {
            ggl::Icon::pipelineDataIconPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
            unk_1EE580ED0 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE580ED8 = (uint64_t)ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE580D08 = (uint64_t)&ggl::Icon::pipelineDataIconPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE580D10 = xmmword_19FFB3C60;
        }
      }
      ggl::Icon::IconPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Icon::IconPipelineSetup::typedReflection(void)::ref;
      ggl::IconShader::typedReflection(v99);
      qword_1ECE32090 = (uint64_t)&ggl::IconShader::typedReflection(void)::ref;
      if ((v101 & 1) == 0
      {
        ggl::Icon::pipelineStateIconPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE581000 = 0;
        qword_1EE581008 = (uint64_t)"";
        dword_1EE581010 = 0;
        qword_1EE581018 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineAttributeBinding_0(void)::attr;
        unk_1EE581020 = 4;
      }
      qword_1ECE32098 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineAttributeStructBinding(void)::attr;
      unk_1ECE320A0 = 1;
      qword_1ECE320A8 = 0;
      unk_1ECE320B0 = 2;
      qword_1ECE320B8 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineDeviceStructBinding(void)::ref;
      unk_1ECE320C0 = 0;
      if ((v102 & 1) == 0
      {
        ggl::Icon::pipelineStateIconPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580F70 = 0;
        qword_1EE580F78 = (uint64_t)"viewInScreenSpace";
        dword_1EE580F80 = 3;
        qword_1EE580F88 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantViewInScreenSpaceBinding(void)::reflection;
        *(int64x2_t *)algn_1EE580F90 = vdupq_n_s64(1uLL);
        qword_1EE580FA0 = 1;
        unk_1EE580FA8 = "floatBufferTextureSize";
        dword_1EE580FB0 = 3;
        qword_1EE580FB8 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE580FC0 = xmmword_19FFB3C60;
        qword_1EE580FD0 = 2;
        unk_1EE580FD8 = "viewCommon";
        dword_1EE580FE0 = 3;
        qword_1EE580FE8 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE580FF0 = 1;
      }
      qword_1ECE320C8 = (uint64_t)&ggl::Icon::pipelineStateIconPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE320D0 = 3;
      a4 = v98;
      a2 = v106;
      a3 = v107;
    }
  }
  v16 = *a2;
  v17 = (std::__shared_weak_count *)a2[1];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  *(_OWORD *)v110 = *(_OWORD *)a3;
  *(_OWORD *)&v110[12] = *(_OWORD *)(a3 + 12);
  v20 = *(_OWORD *)(a3 + 28);
  v21 = *(_BYTE *)(a3 + 44);
  v108 = *a4;
  v109 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Icon::IconPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v108;
  *(_OWORD *)(a1 + 272) = v109;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v110;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v110[12];
  *(_OWORD *)(a1 + 92) = v20;
  *(_BYTE *)(a1 + 108) = v21;
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 306) = a6;
  *(_BYTE *)(a1 + 307) = a7;
  *(_BYTE *)(a1 + 308) = a8;
  *(_BYTE *)(a1 + 309) = a9;
  *(_BYTE *)(a1 + 310) = a10;
  v26 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v27 = vmovl_high_s8(v26);
  v28 = vmovl_s16(*(int16x4_t *)v27.i8);
  v29.i64[0] = v28.u32[0];
  v29.i64[1] = v28.u32[1];
  v30 = v29;
  v31 = vmovl_s8(*(int8x8_t *)v26.i8);
  v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v29.i64[0] = v32.u32[0];
  v29.i64[1] = v32.u32[1];
  v33 = v29;
  v34 = vmovl_high_s16(v27);
  v29.i64[0] = v34.u32[0];
  v29.i64[1] = v34.u32[1];
  v35 = v29;
  v36 = vmovl_high_s16(v31);
  v29.i64[0] = v36.u32[0];
  v29.i64[1] = v36.u32[1];
  v37 = v29;
  v29.i64[0] = v28.u32[2];
  v29.i64[1] = v28.u32[3];
  v38 = v29;
  v29.i64[0] = v32.u32[2];
  v29.i64[1] = v32.u32[3];
  v39 = v29;
  v29.i64[0] = v34.u32[2];
  v29.i64[1] = v34.u32[3];
  v40 = v29;
  v29.i64[0] = v36.u32[2];
  v29.i64[1] = v36.u32[3];
  v41 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v29);
  v42 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v40);
  v43 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v39);
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v35);
  v45 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v29.i64[0] = v47.u32[0];
  v29.i64[1] = v47.u32[1];
  v48 = v29;
  v49 = vmovl_s8(*(int8x8_t *)v45.i8);
  *(_QWORD *)a1 = &off_1E42BBAB8;
  v50 = vmovl_s16(*(int16x4_t *)v49.i8);
  v29.i64[0] = v50.u32[0];
  v29.i64[1] = v50.u32[1];
  v51 = v29;
  v52 = vmovl_high_s16(v46);
  v29.i64[0] = v52.u32[0];
  v29.i64[1] = v52.u32[1];
  v53 = v29;
  v54 = vmovl_high_s16(v49);
  v29.i64[0] = v54.u32[0];
  v29.i64[1] = v54.u32[1];
  v55 = v29;
  v29.i64[0] = v47.u32[2];
  v29.i64[1] = v47.u32[3];
  v56 = v29;
  v29.i64[0] = v50.u32[2];
  v29.i64[1] = v50.u32[3];
  v57 = v29;
  v29.i64[0] = v52.u32[2];
  v29.i64[1] = v52.u32[3];
  v58 = v29;
  v29.i64[0] = v54.u32[2];
  v29.i64[1] = v54.u32[3];
  v59 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v58);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v48), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v30));
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v51), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v33));
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v53), v44);
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v55), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v37));
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v56), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v38));
  v65 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v57), v43);
  v66 = vorrq_s8(v59, v42);
  v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v29), v41);
  v68 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v69 = vmovl_s8(*(int8x8_t *)v68.i8);
  v70 = vmovl_high_s16(v69);
  v29.i64[0] = v70.i32[2];
  v29.i64[1] = v70.i32[3];
  v71 = v29;
  v72 = vmovl_high_s8(v68);
  v73 = vmovl_high_s16(v72);
  v29.i64[0] = v73.i32[2];
  v29.i64[1] = v73.i32[3];
  v74 = v29;
  v75 = vmovl_s16(*(int16x4_t *)v69.i8);
  v29.i64[0] = v75.i32[2];
  v29.i64[1] = v75.i32[3];
  v76 = v29;
  v77 = vmovl_s16(*(int16x4_t *)v72.i8);
  v29.i64[0] = v77.i32[2];
  v29.i64[1] = v77.i32[3];
  v78 = v29;
  v29.i64[0] = v70.i32[0];
  v29.i64[1] = v70.i32[1];
  v79 = v29;
  v29.i64[0] = v73.i32[0];
  v29.i64[1] = v73.i32[1];
  v80 = v29;
  v29.i64[0] = v75.i32[0];
  v29.i64[1] = v75.i32[1];
  v81 = v29;
  v29.i64[0] = v77.i32[0];
  v29.i64[1] = v77.i32[1];
  v82 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v29);
  v83 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v84 = vmovl_high_s8(v83);
  v85 = vmovl_s16(*(int16x4_t *)v84.i8);
  v29.i64[0] = v85.i32[0];
  v29.i64[1] = v85.i32[1];
  v86 = v29;
  v87 = vmovl_s8(*(int8x8_t *)v83.i8);
  v88 = vmovl_s16(*(int16x4_t *)v87.i8);
  v29.i64[0] = v88.i32[0];
  v29.i64[1] = v88.i32[1];
  v89 = v29;
  v90 = vmovl_high_s16(v84);
  v29.i64[0] = v90.i32[0];
  v29.i64[1] = v90.i32[1];
  v91 = v29;
  v92 = vmovl_high_s16(v87);
  v29.i64[0] = v92.i32[0];
  v29.i64[1] = v92.i32[1];
  v93 = v29;
  v29.i64[0] = v85.i32[2];
  v29.i64[1] = v85.i32[3];
  v94 = v29;
  v29.i64[0] = v88.i32[2];
  v29.i64[1] = v88.i32[3];
  v95 = v29;
  v29.i64[0] = v90.i32[2];
  v29.i64[1] = v90.i32[3];
  v96 = v29;
  v29.i64[0] = v92.i32[2];
  v29.i64[1] = v92.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v89), vbicq_s8((int8x16_t)xmmword_19FFB3170, v81)), v61), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v86), v82), v60)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v93), vbicq_s8((int8x16_t)xmmword_19FFB3190, v79)), v63), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v91), vbicq_s8((int8x16_t)xmmword_19FFB3180, v80)),
                                               v62))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v95), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v76)), v65), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v94), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v78)), v64)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v29), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v71)), v67), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v96),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v74)),
                                               v66)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Icon::IconPipelineSetup::~IconPipelineSetup(ggl::Icon::IconPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Icon::MaskedIconPipelineState::~MaskedIconPipelineState(ggl::Icon::MaskedIconPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Icon::MaskedIconPipelineSetup::~MaskedIconPipelineSetup(ggl::Icon::MaskedIconPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Icon::MaskedIconPipelineSetup::constantDataIsEnabled(ggl::Icon::MaskedIconPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::Icon::MaskedIconPipelineSetup::textureIsEnabled(ggl::Icon::MaskedIconPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Icon::WaypointPipelineState::~WaypointPipelineState(ggl::Icon::WaypointPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Icon::WaypointPipelineSetup::~WaypointPipelineSetup(ggl::Icon::WaypointPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Icon::WaypointPipelineSetup::constantDataIsEnabled(ggl::Icon::WaypointPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::Icon::WaypointPipelineSetup::textureIsEnabled(ggl::Icon::WaypointPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::Icon::ShadowPipelineState::~ShadowPipelineState(ggl::Icon::ShadowPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Icon::ShadowPipelineState::ShadowPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  _OWORD *v98;
  ggl::ShadowShader *v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[28];

  if ((v15 & 1) == 0)
  {
    v98 = a4;
    v106 = a2;
    v107 = a3;
    a2 = v106;
    a3 = v107;
    a4 = v98;
    if ((_DWORD)v99)
    {
      if ((v100 & 1) == 0)
      {
        if ((_DWORD)v99)
        {
          if ((v103 & 1) == 0
          {
            if ((v105 & 1) == 0
            {
              ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D68 = 1;
          }
          ggl::Icon::ShadowPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE580D28 = &ggl::Icon::pipelineDataShadowPipelineDeviceStructs(void)::ref;
          qword_1EE580D30 = 0;
          if ((v104 & 1) == 0
          {
            ggl::Icon::pipelineDataShadowPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
            unk_1EE580EF0 = ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            qword_1EE580EF8 = (uint64_t)ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            unk_1EE580F00 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE580D38 = (uint64_t)&ggl::Icon::pipelineDataShadowPipelineConstantStructs(void)::ref;
          unk_1EE580D40 = xmmword_19FFB2F50;
        }
      }
      ggl::Icon::ShadowPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Icon::ShadowPipelineSetup::typedReflection(void)::ref;
      ggl::ShadowShader::typedReflection(v99);
      qword_1EE580D60 = (uint64_t)&ggl::ShadowShader::typedReflection(void)::ref;
      if ((v101 & 1) == 0
      {
        ggl::Icon::pipelineStateShadowPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5810F0 = 0;
        qword_1EE5810F8 = (uint64_t)"";
        dword_1EE581100 = 0;
        qword_1EE581108 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineAttributeBinding_0(void)::attr;
        unk_1EE581110 = 4;
      }
      qword_1EE580D68 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineAttributeStructBinding(void)::attr;
      unk_1EE580D70 = 1;
      qword_1EE580D78 = 0;
      unk_1EE580D80 = 2;
      qword_1EE580D88 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineDeviceStructBinding(void)::ref;
      unk_1EE580D90 = 0;
      if ((v102 & 1) == 0
      {
        ggl::Icon::pipelineStateShadowPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE581030 = 0;
        qword_1EE581038 = (uint64_t)"viewInScreenSpace";
        dword_1EE581040 = 3;
        qword_1EE581048 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantViewInScreenSpaceBinding(void)::reflection;
        *(int64x2_t *)algn_1EE581050 = vdupq_n_s64(1uLL);
        qword_1EE581060 = 1;
        unk_1EE581068 = "byteBufferTextureSize";
        dword_1EE581070 = 3;
        qword_1EE581078 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE581080 = xmmword_19FFB3C60;
        qword_1EE581090 = 2;
        unk_1EE581098 = "floatBufferTextureSize";
        dword_1EE5810A0 = 3;
        qword_1EE5810A8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        *(int64x2_t *)algn_1EE5810B0 = vdupq_n_s64(3uLL);
        qword_1EE5810C0 = 3;
        unk_1EE5810C8 = "viewCommon";
        dword_1EE5810D0 = 3;
        qword_1EE5810D8 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE5810E0 = 1;
      }
      qword_1EE580D98 = (uint64_t)&ggl::Icon::pipelineStateShadowPipelineConstantStructBinding(void)::ref;
      unk_1EE580DA0 = 4;
      a4 = v98;
      a2 = v106;
      a3 = v107;
    }
  }
  v16 = *a2;
  v17 = (std::__shared_weak_count *)a2[1];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  *(_OWORD *)v110 = *(_OWORD *)a3;
  *(_OWORD *)&v110[12] = *(_OWORD *)(a3 + 12);
  v20 = *(_OWORD *)(a3 + 28);
  v21 = *(_BYTE *)(a3 + 44);
  v108 = *a4;
  v109 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Icon::ShadowPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v108;
  *(_OWORD *)(a1 + 272) = v109;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v110;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v110[12];
  *(_OWORD *)(a1 + 92) = v20;
  *(_BYTE *)(a1 + 108) = v21;
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 306) = a6;
  *(_BYTE *)(a1 + 307) = a7;
  *(_BYTE *)(a1 + 308) = a8;
  *(_BYTE *)(a1 + 309) = a9;
  *(_BYTE *)(a1 + 310) = a10;
  v26 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v27 = vmovl_high_s8(v26);
  v28 = vmovl_s16(*(int16x4_t *)v27.i8);
  v29.i64[0] = v28.u32[0];
  v29.i64[1] = v28.u32[1];
  v30 = v29;
  v31 = vmovl_s8(*(int8x8_t *)v26.i8);
  v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v29.i64[0] = v32.u32[0];
  v29.i64[1] = v32.u32[1];
  v33 = v29;
  v34 = vmovl_high_s16(v27);
  v29.i64[0] = v34.u32[0];
  v29.i64[1] = v34.u32[1];
  v35 = v29;
  v36 = vmovl_high_s16(v31);
  v29.i64[0] = v36.u32[0];
  v29.i64[1] = v36.u32[1];
  v37 = v29;
  v29.i64[0] = v28.u32[2];
  v29.i64[1] = v28.u32[3];
  v38 = v29;
  v29.i64[0] = v32.u32[2];
  v29.i64[1] = v32.u32[3];
  v39 = v29;
  v29.i64[0] = v34.u32[2];
  v29.i64[1] = v34.u32[3];
  v40 = v29;
  v29.i64[0] = v36.u32[2];
  v29.i64[1] = v36.u32[3];
  v41 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v29);
  v42 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v40);
  v43 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v39);
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v35);
  v45 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v29.i64[0] = v47.u32[0];
  v29.i64[1] = v47.u32[1];
  v48 = v29;
  v49 = vmovl_s8(*(int8x8_t *)v45.i8);
  *(_QWORD *)a1 = &off_1E4274828;
  v50 = vmovl_s16(*(int16x4_t *)v49.i8);
  v29.i64[0] = v50.u32[0];
  v29.i64[1] = v50.u32[1];
  v51 = v29;
  v52 = vmovl_high_s16(v46);
  v29.i64[0] = v52.u32[0];
  v29.i64[1] = v52.u32[1];
  v53 = v29;
  v54 = vmovl_high_s16(v49);
  v29.i64[0] = v54.u32[0];
  v29.i64[1] = v54.u32[1];
  v55 = v29;
  v29.i64[0] = v47.u32[2];
  v29.i64[1] = v47.u32[3];
  v56 = v29;
  v29.i64[0] = v50.u32[2];
  v29.i64[1] = v50.u32[3];
  v57 = v29;
  v29.i64[0] = v52.u32[2];
  v29.i64[1] = v52.u32[3];
  v58 = v29;
  v29.i64[0] = v54.u32[2];
  v29.i64[1] = v54.u32[3];
  v59 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v58);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v48), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v30));
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v51), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v33));
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v53), v44);
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v55), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v37));
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v56), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v38));
  v65 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v57), v43);
  v66 = vorrq_s8(v59, v42);
  v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v29), v41);
  v68 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v69 = vmovl_s8(*(int8x8_t *)v68.i8);
  v70 = vmovl_high_s16(v69);
  v29.i64[0] = v70.i32[2];
  v29.i64[1] = v70.i32[3];
  v71 = v29;
  v72 = vmovl_high_s8(v68);
  v73 = vmovl_high_s16(v72);
  v29.i64[0] = v73.i32[2];
  v29.i64[1] = v73.i32[3];
  v74 = v29;
  v75 = vmovl_s16(*(int16x4_t *)v69.i8);
  v29.i64[0] = v75.i32[2];
  v29.i64[1] = v75.i32[3];
  v76 = v29;
  v77 = vmovl_s16(*(int16x4_t *)v72.i8);
  v29.i64[0] = v77.i32[2];
  v29.i64[1] = v77.i32[3];
  v78 = v29;
  v29.i64[0] = v70.i32[0];
  v29.i64[1] = v70.i32[1];
  v79 = v29;
  v29.i64[0] = v73.i32[0];
  v29.i64[1] = v73.i32[1];
  v80 = v29;
  v29.i64[0] = v75.i32[0];
  v29.i64[1] = v75.i32[1];
  v81 = v29;
  v29.i64[0] = v77.i32[0];
  v29.i64[1] = v77.i32[1];
  v82 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v29);
  v83 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v84 = vmovl_high_s8(v83);
  v85 = vmovl_s16(*(int16x4_t *)v84.i8);
  v29.i64[0] = v85.i32[0];
  v29.i64[1] = v85.i32[1];
  v86 = v29;
  v87 = vmovl_s8(*(int8x8_t *)v83.i8);
  v88 = vmovl_s16(*(int16x4_t *)v87.i8);
  v29.i64[0] = v88.i32[0];
  v29.i64[1] = v88.i32[1];
  v89 = v29;
  v90 = vmovl_high_s16(v84);
  v29.i64[0] = v90.i32[0];
  v29.i64[1] = v90.i32[1];
  v91 = v29;
  v92 = vmovl_high_s16(v87);
  v29.i64[0] = v92.i32[0];
  v29.i64[1] = v92.i32[1];
  v93 = v29;
  v29.i64[0] = v85.i32[2];
  v29.i64[1] = v85.i32[3];
  v94 = v29;
  v29.i64[0] = v88.i32[2];
  v29.i64[1] = v88.i32[3];
  v95 = v29;
  v29.i64[0] = v90.i32[2];
  v29.i64[1] = v90.i32[3];
  v96 = v29;
  v29.i64[0] = v92.i32[2];
  v29.i64[1] = v92.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v89), vbicq_s8((int8x16_t)xmmword_19FFB3170, v81)), v61), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v86), v82), v60)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v93), vbicq_s8((int8x16_t)xmmword_19FFB3190, v79)), v63), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v91), vbicq_s8((int8x16_t)xmmword_19FFB3180, v80)),
                                               v62))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v95), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v76)), v65), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v94), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v78)), v64)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v29), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v71)), v67), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v96),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v74)),
                                               v66)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Icon::ShadowPipelineSetup::~ShadowPipelineSetup(ggl::Icon::ShadowPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Icon::ShadowPipelineSetup::constantDataIsEnabled(ggl::Icon::ShadowPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 308);
      goto LABEL_5;
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::Icon::ShadowPipelineSetup::textureIsEnabled(ggl::Icon::ShadowPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void altitude::DtmRequest::~DtmRequest(altitude::DtmRequest *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C3878;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C3878;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::DtmRequest::jobStep(altitude::DtmRequest *this)
{
  char *v2;
  BOOL MetaData;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  double v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  __double2 v18;
  double v19;
  __double2 v20;
  float64x2_t v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  void (***v28)(karo::AsyncFileLoader::FileObject *__hidden);
  char *v29;
  float64x2_t v30;
  float64x2_t v31;
  double *v32;
  double *v33;
  char *v34;
  char *v35;
  void (***v36)(karo::AsyncFileLoader::FileObject *__hidden);
  _DWORD *v37;
  char *v38;
  char *v39;
  char v40;
  unsigned int *v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  void (**v49)(char *);
  void *v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  NSObject *v76;
  int v77;
  int v78;
  int v79;
  size_t v80;
  uint64_t v81;
  float v82;
  float v83;
  BOOL v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unint64_t v92;
  size_t v93;
  size_t v94;
  unint64_t v95;
  NSObject *v97;
  uint64_t *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  __int16 *v103;
  unint64_t v104;
  NSObject *v105;
  size_t v106;
  size_t v107;
  size_t v108;
  int *v109;
  int v110;
  int *v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  BOOL v118;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  BOOL v133;
  size_t v134;
  int v135;
  int v136;
  float v137;
  uint64_t v138;
  int v139;
  NSObject *v140;
  float64x2_t v141;
  void (**v142)(karo::AsyncFileLoader::FileObject *__hidden);
  void (**v143)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _QWORD v148[4];
  void *v149[2];
  void *v150[2];
  __int128 v151;
  void *v152[2];
  void *v153[2];
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  uint64_t v157;
  int v158;
  void (**v159)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  void *v165[2];
  void *v166[2];
  __int128 v167;
  void *v168[2];
  void *v169[2];
  __int128 v170;
  void *v171[2];
  uint64_t v172;
  uint64_t v173;
  int v174;
  void *__p;
  char *v176;
  uint64_t v177;
  _QWORD v178[2];
  uint8_t v179[8];
  uint64_t v180;
  int v181;
  __int16 v182;
  void (**v183)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint8_t buf[8];
  float64x2_t v187;
  uint64_t v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 232;
  if (*((_DWORD *)this + 58) != 16)
    goto LABEL_83;
  if (*((_DWORD *)this + 62) < 0xDu)
    goto LABEL_82;
  v184 = 0;
  v185 = 0;
  v183 = &off_1E42C2D08;
  *(_QWORD *)v179 = 0;
  v180 = 0;
  v181 = 1;
  v182 = 0;
  MetaData = altitude::C3mmRequestManager::loadMetaData(*((_QWORD *)this + 25), (unsigned int *)this + 62, (uint64_t)v179, 1, (uint64_t)&v183);
  v4 = v184;
  if (!MetaData && v184)
  {
    karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
    v5 = v185;
    v178[0] = v184;
    v178[1] = v185;
    if (v185)
    {
      p_shared_owners = (unint64_t *)&v185->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      karo::Job::addBlockingSubJob((uint64_t *)this, v178, 0, 0);
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v178, 0, 0);
    }
    v183 = &off_1E42C2D08;
    if (v184)
    {
      v41 = (unsigned int *)(v184 + 128);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
    }
    v43 = v185;
    if (v185)
    {
      v44 = (unint64_t *)&v185->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    return;
  }
  if (v181)
    goto LABEL_74;
  v9 = *((_DWORD *)this + 62);
  if (v9 >= 0x1F)
    v10 = 31;
  else
    v10 = *((_DWORD *)this + 62);
  v11 = 1 << v9;
  v12 = 6.28318531 / (double)v11;
  v13 = v12 * ((double)*((int *)this + 64) + 0.5);
  v14 = exp(v12 * ((double)((-1 << v10) + *((_DWORD *)this + 63) + v11) + 0.5) + -3.14159265);
  v15 = atan(v14) * 2.0 + -1.57079633;
  v16 = fmod(v13, 6.28318531);
  v17 = fmod(v16 + 6.28318531, 6.28318531) + -3.14159265;
  v18 = __sincos_stret(v15);
  v19 = 6378137.0 / sqrt(v18.__sinval * v18.__sinval * -0.00669437999 + 1.0);
  v20 = __sincos_stret(v17);
  v21.f64[0] = v19 * v18.__cosval * v20.__sinval;
  v21.f64[1] = v18.__sinval * 0.99330562 * v19;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v142 = 0;
  v143 = &off_1E42C4428;
  v148[0] = 0;
  *(_OWORD *)v149 = 0u;
  *(_OWORD *)v150 = 0u;
  v151 = 0u;
  *(_OWORD *)v152 = 0u;
  *(_OWORD *)v153 = 0u;
  v154 = 0u;
  *(_OWORD *)v155 = 0u;
  v158 = 0;
  v156 = 0;
  v157 = 0xFFFFFFFFLL;
  v160 = 0u;
  v161 = 0u;
  v162 = 0u;
  v163 = 0u;
  v159 = &off_1E42C4428;
  v164 = 0;
  *(_OWORD *)v165 = 0u;
  *(_OWORD *)v166 = 0u;
  v167 = 0u;
  *(_OWORD *)v168 = 0u;
  *(_OWORD *)v169 = 0u;
  v170 = 0u;
  *(_OWORD *)v171 = 0u;
  v172 = 0;
  v173 = 0xFFFFFFFFLL;
  v174 = 0;
  v177 = 0;
  __p = 0;
  v176 = 0;
  *(double *)buf = v19 * v18.__cosval * v20.__cosval;
  v141 = v21;
  v187 = v21;
  v188 = 0x3FF0000000000000;
  altitude::TriggerManager::cullTriggers(*((_QWORD *)this + 26), (altitude::TriggerManager::Trigger **)&v142, buf, 0xFFFFFFFF);
  v22 = (char *)__p;
  if (v142)
  {
    v23 = 0;
    v24 = 1;
    while (1)
    {
      v25 = 240 * v23;
      v26 = (char *)__p + v25;
      v27 = (char *)__p + v25 + 72;
      v28 = &(&v142)[v25 / 8];
      if ((unint64_t)v142 <= 2)
        v27 = &v148[v25 / 8];
      if (*v27)
      {
        v29 = v26 + 40;
        if ((unint64_t)v142 <= 2)
          v29 = (char *)(v28 + 6);
        v30 = vsubq_f64(*(float64x2_t *)(v29 + 8), v141);
        v31 = vmulq_f64(v30, v30);
        v32 = (double *)(v26 + 64);
        v33 = (double *)(v28 + 9);
        if ((unint64_t)v142 <= 2)
          v32 = v33;
        if (v31.f64[0]
           + (*(double *)v29 - v19 * v18.__cosval * v20.__cosval) * (*(double *)v29 - v19 * v18.__cosval * v20.__cosval)
           + v31.f64[1] < *v32 * *v32)
          break;
      }
      v23 = v24++;
      if ((unint64_t)v142 <= v23)
        goto LABEL_42;
    }
    v34 = (char *)__p + v25;
    v35 = (char *)__p + v25 + 232;
    v36 = &(&v142)[v25 / 8];
    if ((unint64_t)v142 <= 2)
      v37 = v36 + 30;
    else
      v37 = v35;
    v38 = v34 + 228;
    v39 = (char *)v36 + 236;
    if ((unint64_t)v142 <= 2)
      v38 = v39;
    *((_DWORD *)this + 58) = 16;
    *((_DWORD *)this + 59) = *(_DWORD *)v38;
    *((_DWORD *)this + 61) = *v37;
    v40 = 1;
  }
  else
  {
LABEL_42:
    v40 = 0;
  }
  if (v22)
  {
    v46 = v22;
    if (v176 != v22)
    {
      v47 = v176 - 240;
      v48 = v176 - 240;
      do
      {
        v49 = *(void (***)(char *))v48;
        v48 -= 240;
        (*v49)(v47);
        v84 = v47 == v22;
        v47 = v48;
      }
      while (!v84);
      v46 = __p;
    }
    v176 = v22;
    operator delete(v46);
  }
  v159 = &off_1E42C4428;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  if (SHIBYTE(v172) < 0)
  {
    operator delete(v171[0]);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v169[0]) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_127;
    }
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v169[1]);
  if ((SHIBYTE(v169[0]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v167) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_128;
  }
LABEL_127:
  operator delete(v168[0]);
  if ((SHIBYTE(v167) & 0x80000000) == 0)
  {
LABEL_56:
    v50 = v165[0];
    if (!v165[0])
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_128:
  operator delete(v166[1]);
  v50 = v165[0];
  if (v165[0])
  {
LABEL_57:
    v165[1] = v50;
    operator delete(v50);
  }
LABEL_58:
  v143 = &off_1E42C4428;
  if (v148[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v148[0] + 8))(v148[0]);
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v155[0]);
    if ((SHIBYTE(v154) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v153[0]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_132;
    }
  }
  else if ((SHIBYTE(v154) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v153[1]);
  if ((SHIBYTE(v153[0]) & 0x80000000) == 0)
  {
LABEL_63:
    if ((SHIBYTE(v151) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v152[0]);
  if ((SHIBYTE(v151) & 0x80000000) == 0)
  {
LABEL_64:
    v51 = v149[0];
    if (!v149[0])
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_133:
  operator delete(v150[1]);
  v51 = v149[0];
  if (v149[0])
  {
LABEL_65:
    v149[1] = v51;
    operator delete(v51);
  }
LABEL_66:
  v4 = v184;
  if ((v40 & 1) != 0)
  {
    v183 = &off_1E42C2D08;
    if (v184)
    {
      v52 = (unsigned int *)(v184 + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
    }
    v54 = v185;
    if (v185)
    {
      v55 = (unint64_t *)&v185->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      goto LABEL_80;
    }
    goto LABEL_82;
  }
LABEL_74:
  v183 = &off_1E42C2D08;
  if (v4)
  {
    v57 = (unsigned int *)(v4 + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
  }
  v54 = v185;
  if (v185)
  {
    v59 = (unint64_t *)&v185->__shared_owners_;
    do
      v56 = __ldaxr(v59);
    while (__stlxr(v56 - 1, v59));
LABEL_80:
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_82:
  if (!*((_DWORD *)this + 59))
  {
    *((_BYTE *)this + 188) = 0;
LABEL_226:
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    return;
  }
LABEL_83:
  if (*((_QWORD *)this + 27))
  {
LABEL_222:
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v132 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    v133 = (v132 & 2) == 0 && *((_QWORD *)this + 27) != 0;
    *((_BYTE *)this + 188) = v133;
    goto LABEL_226;
  }
  v60 = *((_QWORD *)this + 24);
  v61 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(void (***__return_ptr)(karo::AsyncFileLoader::FileObject *__hidden), uint64_t, char *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v60 + 104))(&v142, v60, v2, 0, v61, 0xFFFFFFFFLL, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v142) == 4)
  {
    if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)&v144 + 1) + 48))(*((_QWORD *)&v144 + 1)))
    {
      v62 = operator new();
      v63 = *((_DWORD *)this + 59);
      *(_QWORD *)v62 = &off_1E42C3548;
      *(_QWORD *)(v62 + 8) = &off_1E42C3568;
      *(_QWORD *)(v62 + 16) = 0;
      *(_DWORD *)(v62 + 24) = 29;
      *(_BYTE *)(v62 + 28) = 0;
      *(_OWORD *)(v62 + 32) = 0u;
      *(_OWORD *)(v62 + 48) = 0u;
      *(_OWORD *)(v62 + 64) = 0u;
      *(_OWORD *)(v62 + 80) = 0u;
      *(_OWORD *)(v62 + 96) = 0u;
      *(_BYTE *)(v62 + 112) = 0;
      *(_QWORD *)(v62 + 120) = 0x3E800000C47A0000;
      *(_QWORD *)(v62 + 128) = 0x1000000000;
      *(_OWORD *)(v62 + 136) = *(_OWORD *)((char *)this + 248);
      *(_DWORD *)(v62 + 152) = v63;
      *(_BYTE *)(v62 + 156) = 0;
      *(_QWORD *)(v62 + 160) = 0;
      *(_QWORD *)(v62 + 168) = 0;
      v64 = (_QWORD *)operator new();
      *v64 = &off_1E42E8210;
      v64[1] = 0;
      v64[2] = 0;
      v64[3] = v62;
      v65 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
      *((_QWORD *)this + 27) = v62;
      *((_QWORD *)this + 28) = v64;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = *((_QWORD *)&v144 + 1);
      pthread_mutex_lock(*(pthread_mutex_t **)(*((_QWORD *)&v144 + 1) + 152));
      v69 = *(_DWORD *)(v68 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v68 + 152));
      if ((v69 & 1) != 0)
        v70 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v144 + 1) + 56))(*((_QWORD *)&v144 + 1));
      else
        v70 = 0;
      v80 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v144 + 1) + 48))(*((_QWORD *)&v144 + 1));
      HIBYTE(v187.f64[1]) = 3;
      strcpy((char *)buf, "dtm");
      v81 = *((_QWORD *)this + 27);
      *(_DWORD *)v179 = 29;
      if (karo::media::PngLoader::loadFromChunk((int *)v179, v70, v80, v81 + 8))
      {
        v84 = *(unsigned __int16 *)buf == 29796 && buf[2] == 109;
        if (!v84)
          goto LABEL_114;
        v93 = v80 - 2;
        if (v80 < v80 - 2)
          v93 = v80;
        v94 = v93 + 2;
        if (v94 <= v80)
        {
          v95 = *(unsigned __int16 *)&v70[v94 - 2];
          if (v95 >= 0xC && v80 >= v95)
          {
            v106 = v80 - v95;
            if (v80 < v106)
              v106 = v80;
            v107 = v106 + 4;
            if (v106 + 4 > v80)
            {
              v108 = v106 + 4;
            }
            else
            {
              v82 = *(float *)&v70[v106];
              v108 = v106 + 8;
              v106 += 4;
            }
            if (v108 <= v80)
            {
              v83 = *(float *)&v70[v106];
              v106 = v108;
            }
            if (v106 < v80)
            {
              v118 = v108 > v80 || v106 + 2 > v80;
              if (!v118 && v107 <= v80)
              {
                v134 = v106 + 1;
                v135 = v70[v106];
                v136 = v70[v134];
                v137 = v83 * 0.5;
                if (v136 != 1)
                  v137 = -0.0;
                *(float *)(v81 + 120) = v137 + v82;
                *(float *)(v81 + 124) = v83;
                *(_DWORD *)(v81 + 128) = v136;
                v138 = *(_QWORD *)(v81 + 16);
                if (v138)
                {
                  v138 = *(unsigned int *)(v138 + 8);
                  if (v138 > 0x3A)
                    LOBYTE(v138) = 1;
                  else
                    LODWORD(v138) = dword_1A007E7DC[v138];
                }
                v139 = 8 * (v138 & 0x1F);
                if (v139 != v135)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v140 = GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)v179 = 0;
                    _os_log_impl(&dword_19F029000, v140, OS_LOG_TYPE_DEBUG, "DTM header bits per pixel mismatch with PNG Data", v179, 2u);
                  }
                }
                *(_DWORD *)(v81 + 132) = v139;
LABEL_114:
                v85 = *(_DWORD *)(v81 + 132);
                if (v85 == 16)
                {
                  v98 = *(uint64_t **)(*(_QWORD *)(v81 + 16) + 16);
                  v99 = *v98;
                  v100 = (std::__shared_weak_count *)v98[1];
                  if (v100)
                  {
                    v101 = (unint64_t *)&v100->__shared_owners_;
                    do
                      v102 = __ldxr(v101);
                    while (__stxr(v102 + 1, v101));
                    v103 = *(__int16 **)(v99 + 8);
                    do
                      v104 = __ldaxr(v101);
                    while (__stlxr(v104 - 1, v101));
                    if (!v104)
                    {
                      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                      std::__shared_weak_count::__release_weak(v100);
                    }
                  }
                  else
                  {
                    v103 = *(__int16 **)(v99 + 8);
                  }
                  v111 = *(int **)(v81 + 16);
                  if (v111)
                  {
                    v112 = *v111;
                    v113 = v111[1];
                  }
                  else
                  {
                    v112 = 0;
                    v113 = 0;
                  }
                  *(_BYTE *)(v81 + 156) = 0;
                  if (*v103 == -1
                    || (v116 = (v113 * v112), v103[(int)v116 - 1] == -1)
                    || v103[v112 - 1] == -1
                    || v103[(v113 - 1) * v112 + 1] == -1)
                  {
LABEL_186:
                    *(_BYTE *)(v81 + 156) = 1;
                    goto LABEL_207;
                  }
                  if ((int)v116 >= 1)
                  {
                    do
                    {
                      v117 = *v103++;
                      if (v117 == -1)
                        goto LABEL_186;
                    }
                    while (--v116);
                  }
                }
                else
                {
                  if (v85 != 8)
                  {
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                    v105 = GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)v179 = 0;
                      _os_log_impl(&dword_19F029000, v105, OS_LOG_TYPE_ERROR, "Unknown DTM format", v179, 2u);
                    }
                    goto LABEL_207;
                  }
                  v86 = *(uint64_t **)(*(_QWORD *)(v81 + 16) + 16);
                  v87 = *v86;
                  v88 = (std::__shared_weak_count *)v86[1];
                  if (v88)
                  {
                    v89 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v90 = __ldxr(v89);
                    while (__stxr(v90 + 1, v89));
                    v91 = *(unsigned __int8 **)(v87 + 8);
                    do
                      v92 = __ldaxr(v89);
                    while (__stlxr(v92 - 1, v89));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                  else
                  {
                    v91 = *(unsigned __int8 **)(v87 + 8);
                  }
                  v109 = *(int **)(v81 + 16);
                  if (v109)
                  {
                    v110 = *v109;
                    LODWORD(v109) = v109[1];
                  }
                  else
                  {
                    v110 = 0;
                  }
                  *(_BYTE *)(v81 + 156) = 0;
                  if (*v91 == 255
                    || v91[(int)v109 * (uint64_t)v110 - 1] == 255
                    || v91[v110 - 1] == 255
                    || v91[((int)v109 - 1) * v110 + 1] == 255)
                  {
                    goto LABEL_186;
                  }
                  LODWORD(v114) = (_DWORD)v109 * v110;
                  if ((int)v114 >= 1)
                  {
                    v114 = v114;
                    do
                    {
                      v115 = *v91++;
                      if (v115 == 255)
                        goto LABEL_186;
                    }
                    while (--v114);
                  }
                }
LABEL_207:
                v75 = 1;
                karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
                goto LABEL_208;
              }
            }
          }
          else
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v97 = GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v179 = 0;
              _os_log_impl(&dword_19F029000, v97, OS_LOG_TYPE_ERROR, "DTM header verification failed.", v179, 2u);
            }
          }
        }
      }
      v120 = *((_QWORD *)this + 24);
      if (v120)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v120 + 120))(v120, v2);
      v121 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
      if (v121)
      {
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      (*(void (**)(altitude::DtmRequest *))(*(_QWORD *)this + 16))(this);
      goto LABEL_207;
    }
    v75 = 1;
  }
  else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v142))
  {
    v71 = (std::__shared_weak_count *)v144;
    v183 = v143;
    v184 = v144;
    if ((_QWORD)v144)
    {
      v72 = (unint64_t *)(v144 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      karo::Job::addBlockingSubJob((uint64_t *)this, &v183, 1, 0);
      do
        v74 = __ldaxr(v72);
      while (__stlxr(v74 - 1, v72));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, &v183, 1, 0);
    }
    v75 = 0;
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v76 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      v78 = *((_DWORD *)this + 63);
      v77 = *((_DWORD *)this + 64);
      v79 = *((_DWORD *)this + 62);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v78;
      LOWORD(v187.f64[0]) = 1024;
      *(_DWORD *)((char *)v187.f64 + 2) = v77;
      HIWORD(v187.f64[0]) = 1024;
      LODWORD(v187.f64[1]) = v79;
      _os_log_impl(&dword_19F029000, v76, OS_LOG_TYPE_ERROR, "Failed to load DTM: %u %u %u", buf, 0x14u);
    }
    (*(void (**)(altitude::DtmRequest *))(*(_QWORD *)this + 16))(this);
    v75 = 1;
  }
LABEL_208:
  v142 = &off_1E42C2C18;
  v124 = (std::__shared_weak_count *)v145;
  if ((_QWORD)v145)
  {
    v125 = (unint64_t *)(v145 + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v142 = &off_1E42C2D08;
  if (v143)
  {
    v127 = (unsigned int *)(v143 + 16);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
  }
  v129 = (std::__shared_weak_count *)v144;
  if ((_QWORD)v144)
  {
    v130 = (unint64_t *)(v144 + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v75)
    goto LABEL_222;
}

uint64_t altitude::DtmRequest::succeeded(altitude::DtmRequest *this)
{
  return *((unsigned __int8 *)this + 188);
}

uint64_t altitude::DtmRequest::getDtmModel@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 224);
  *a2 = *(_QWORD *)(this + 216);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void std::__shared_ptr_pointer<karo::media::DigitalTerrainModel *,std::shared_ptr<karo::media::DigitalTerrainModel>::__shared_ptr_default_delete<karo::media::DigitalTerrainModel,karo::media::DigitalTerrainModel>,std::allocator<karo::media::DigitalTerrainModel>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::DigitalTerrainModel *,std::shared_ptr<karo::media::DigitalTerrainModel>::__shared_ptr_default_delete<karo::media::DigitalTerrainModel,karo::media::DigitalTerrainModel>,std::allocator<karo::media::DigitalTerrainModel>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void karo::Oriented::~Oriented(karo::Oriented *this)
{
  *(_QWORD *)this = &off_1E42C3688;
}

{
  *(_QWORD *)this = &off_1E42C3688;
  JUMPOUT(0x1A1AF4E00);
}

double karo::Oriented::setFrame(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 24) = result;
  return result;
}

void std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0700;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D06B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D06B8;
  a2[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOUpsamplePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E33C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOUpsamplePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E33C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOUpsamplePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E33F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOUpsamplePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E33F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoUpsampleParam>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoUpsampleParam>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E18D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoUpsampleParam>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E18D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoBlurParam>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoBlurParam>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoBlurParam>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleDepthPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E34A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleDepthPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E34A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E34D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E34D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E30B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E30B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E30E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E30E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,geo::StdAllocator<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,geo::StdAllocator<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::TentBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::TentBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::TentBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E32A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::TentBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E32A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::BGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::BGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::FGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::FGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::BGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::BGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::FGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E31C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::FGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E31C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleCoCPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleCoCPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleCoCPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleCoCPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DepthSplitPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DepthSplitPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DepthSplitPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::DepthSplitPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::CompositePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E32E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::CompositePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E32E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::CompositePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardPostchain::CompositePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::PostchainCommon::CameraProperties>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::CameraProperties>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E18A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::CameraProperties>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E18A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::Glow::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Glow::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Glow::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glow::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::Glow::MeshMesh::~MeshMesh(ggl::Glow::MeshMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Glow::MeshMesh::~MeshMesh(ggl::Glow::MeshMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Glow::MeshMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Glow::MeshMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Glow::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Glow::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glow::MeshPipelineSetup::~MeshPipelineSetup(ggl::Glow::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Glow::MeshPipelineSetup::constantDataIsEnabled(ggl::Glow::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::Glow::MeshPipelineSetup::textureIsEnabled(ggl::Glow::MeshPipelineSetup *this)
{
  return 0;
}

void md::OverlayLineLabelFeature::~OverlayLineLabelFeature(md::OverlayLineLabelFeature *this)
{
  md::LineLabelFeature::~LineLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::OverlayLineLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  int v43;
  float v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v5 = *((_QWORD *)a1 + 29);
  if (!v5)
    goto LABEL_12;
  v11 = *(_DWORD *)(a3 + 48);
  v12 = (_QWORD *)((char *)a1 + 232);
  do
  {
    v13 = *(_DWORD *)(v5 + 32);
    v14 = v13 >= v11;
    if (v13 >= v11)
      v15 = (uint64_t *)v5;
    else
      v15 = (uint64_t *)(v5 + 8);
    if (v14)
      v12 = (_QWORD *)v5;
    v5 = *v15;
  }
  while (*v15);
  if (v12 == (_QWORD *)((char *)a1 + 232) || v11 < *((_DWORD *)v12 + 8))
  {
LABEL_12:
    v16 = 0;
    v62 = 0;
    v63 = 0;
    return v16;
  }
  v18 = v12[5];
  v19 = (std::__shared_weak_count *)v12[6];
  v62 = v18;
  v63 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (!v18 || *(float *)(a4 + 236) == 0.0 || *((_QWORD *)a1 + 48) == *((_QWORD *)a1 + 49))
  {
    v16 = 0;
    if (!v19)
      return v16;
    goto LABEL_75;
  }
  v22 = *(unsigned __int8 *)(a3 + 404);
  v23 = *((unsigned __int8 *)a1 + 434);
  v24 = *(_QWORD *)(a4 + 280);
  if (v24)
  {
    if (vabds_f32(*(float *)(v24 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a4, v24, 0);
      v24 = *(_QWORD *)(a4 + 280);
    }
  }
  else
  {
    v24 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(_QWORD *)(a4 + 280) = v24;
  }
  v25 = *(_QWORD *)v24;
  v26 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
  v27 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
  v28 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  if (v26 > 0x6DB6DB6DB6DB6DB7 * ((v28 - v27) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    v27 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
    v28 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v60, v27, v28, v23, v25 + 72);
  v29 = v60;
  if (v60)
  {
    v30 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v30->__shared_owners_ = 0;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v31 = md::LabelText::LabelText((uint64_t)&v30[1], v29, (uint64_t)v61, v22);
    v58 = v31;
    v59 = v30;
    v32 = *((_QWORD *)a1 + 24);
    if (v22 >= 0x17)
      v33 = 23;
    else
      v33 = v22;
    v34 = atomic_load((unsigned __int8 *)(v32 + 224 + v33));
    if (v34 == 254)
    {
      if (*(_BYTE *)(v32 + 289))
        v35 = 24;
      else
        v35 = 5;
      v36 = *(unsigned __int8 **)(v32 + 128);
      v37 = *(_QWORD *)(v32 + 136) - (_QWORD)v36;
      if (v37)
      {
        v38 = 0;
        v39 = v37 / 112;
        if (v39 <= 1)
          v40 = 1;
        else
          v40 = v39;
        v34 = -1;
        v41 = 1000.0;
        while (1)
        {
          v42 = *v36;
          v36 += 112;
          v43 = v33 - v42;
          if ((_DWORD)v33 == v42)
            break;
          if (v43 >= 0)
            v31 = v43;
          else
            v31 = -v43;
          if (v31 <= v35)
          {
            v44 = (float)v43;
            if (v43 < 0)
              v44 = (float)v43 * -0.8;
            if (v44 < v41)
              v34 = v38;
            v41 = fminf(v44, v41);
          }
          if (v40 == ++v38)
            goto LABEL_56;
        }
        v34 = v38;
      }
      else
      {
        v34 = -1;
      }
LABEL_56:
      atomic_store(v34, (unsigned __int8 *)(v32 + 224 + v33));
    }
    else
    {
      v34 = (char)v34;
    }
    if (v34 < 0 || ((v45 = *(_QWORD *)(v32 + 128), v58) ? (v46 = v45 == 0) : (v46 = 1), v46))
    {
      v16 = 0;
    }
    else
    {
      *(_WORD *)(a5 + 4) = 359;
      v47 = mdm::Allocator::instance((mdm::Allocator *)v31);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, 1488, 8);
      v48 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 264))(a1);
      md::CurvedTextLabelPart::CurvedTextLabelPart(v16, v48, &v58, a2, a3, a4, &v62, (uint64_t)&v57, 0.0, (_BYTE *)a5, 0);
    }
    v49 = v59;
    if (v59)
    {
      v50 = (unint64_t *)&v59->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v52 = v61;
  if (v61)
  {
    v53 = (unint64_t *)&v61->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v19 = v63;
  if (v63)
  {
LABEL_75:
    v55 = (unint64_t *)&v19->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v16;
}

void sub_19F7A9F4C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v5 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v3, 1488);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::OverlayLineLabelFeature::labelFeatureType(md::OverlayLineLabelFeature *this)
{
  return 5;
}

uint64_t md::OverlayLineLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **v17;
  uint64_t v18;
  char v19;
  size_t v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  v34 = v12;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v14, &v35);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v34 = v10 + 24;
  v42[0] = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  v35 = MEMORY[0x1E0DE4FB8] + 16;
  v39 = 0u;
  v40 = 0u;
  v41 = 16;
  {
    v28 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v28, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v31 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v30) = 11;
  strcpy((char *)v29, "OverlayLine");
  md::LineLabelFeature::debugRoadString(__p, a1, a2, a3, a4, (uint64_t)v29);
  if ((v33 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v33 & 0x80u) == 0)
    v18 = v33;
  else
    v18 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)v17, v18);
  if (((char)v33 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_14:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v29[0], v30 & 0x7FFFFFFFFFFFFFFFLL);
    v19 = v41;
    if ((v41 & 0x10) == 0)
      goto LABEL_11;
LABEL_15:
    v21 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1) < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v21 = v38;
    }
    v22 = (const void **)&v37;
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v30) < 0)
    goto LABEL_14;
LABEL_10:
  v19 = v41;
  if ((v41 & 0x10) != 0)
    goto LABEL_15;
LABEL_11:
  if ((v19 & 8) == 0)
  {
    v20 = 0;
    a5[23] = 0;
    goto LABEL_27;
  }
  v22 = (const void **)v36;
  v21 = v36[2];
LABEL_19:
  v23 = *v22;
  v20 = v21 - (_QWORD)*v22;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    *((_QWORD *)a5 + 1) = v20;
    *((_QWORD *)a5 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)a5 = v26;
    a5 = v26;
    goto LABEL_26;
  }
  a5[23] = v20;
  if (v20)
LABEL_26:
    memmove(a5, v23, v20);
LABEL_27:
  a5[v20] = 0;
  v34 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v35 = v15 + 16;
  if (SBYTE7(v40) < 0)
    operator delete((void *)v39);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v42);
}

void sub_19F7AA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  if (SHIBYTE(a12) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a13 + 40))(a13, a10, a12 & 0x7FFFFFFFFFFFFFFFLL);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void altitude::TileView::~TileView(altitude::TileView *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::TileView::isCulled(altitude::TileView *this, unsigned int a2)
{
  const double *v4;
  double *v5;
  double *v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  const double *v48;
  const double *v49;
  const double *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int8x16_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int8x16_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  uint64_t v98;
  float64x2_t v99;
  float64x2_t v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  uint64_t v112;
  float64x2x3_t v113;
  float64x2x3_t v114;
  float64x2x3_t v115;
  float64x2x3_t v116;

  if (*((_DWORD *)this + 9) >= a2)
  {
    LOBYTE(v8) = *((_BYTE *)this + 32) != 0;
  }
  else
  {
    v4 = (const double *)*((_QWORD *)this + 2);
    v5 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
    v6 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
    v7 = 0;
    v8 = 0;
    v9 = v5[4];
    v10 = v5[5];
    v11 = v5[6];
    v13 = v5[2];
    v12 = v5[3];
    v15 = *v5;
    v14 = v5[1];
    v17 = *v6;
    v16 = v6[1];
    v18 = v6[2];
    v19 = -(*v5 * v10 - v13 * v12);
    v20 = -(v14 * v12 - *v5 * v9);
    v21 = v19 + v19;
    v22 = v19 * -2.0;
    v23 = v20 * -2.0;
    v24 = v20 + v20;
    do
    {
      v25 = v4[v7 + 65];
      v27 = v4[v7 + 63];
      v26 = v4[v7 + 64];
      v28 = -(v25 * v9 - v26 * v10) - (v25 * v9 - v26 * v10);
      v29 = -(v27 * v10 - v25 * v12) - (v27 * v10 - v25 * v12);
      v30 = -(v26 * v12 - v27 * v9) - (v26 * v12 - v27 * v9);
      v31 = v27 + v28 * v11 + v29 * v10 - v30 * v9;
      v32 = v26 - v28 * v10 + v29 * v11 + v30 * v12;
      v33 = v25 + v28 * v9 + v30 * v11 - v29 * v12;
      if (v31 >= 0.0)
        v34 = v6[3];
      else
        v34 = *v6;
      if (v32 >= 0.0)
        v35 = v6[4];
      else
        v35 = v6[1];
      if (v33 >= 0.0)
        v36 = v6[5];
      else
        v36 = v6[2];
      v37 = -(v35 * v10 - v36 * v9) - (v35 * v10 - v36 * v9);
      v38 = -(v36 * v12 - v34 * v10) - (v36 * v12 - v34 * v10);
      v39 = -(v34 * v9 - v35 * v12) - (v34 * v9 - v35 * v12);
      v40 = v35 + v14 + v37 * v10 + v38 * v11 - v39 * v12;
      v41 = v4[v7 + 66];
      if (v41
         + (v34 + v15 + v37 * v11 + v39 * v9 - v38 * v10) * v27
         + v40 * v26
         + (v36 + v13 + v38 * v12 + v39 * v11 - v37 * v9) * v25 < 0.0)
        goto LABEL_52;
      if (v31 <= 0.0)
        v42 = v6[3];
      else
        v42 = *v6;
      if (v32 <= 0.0)
        v43 = v6[4];
      else
        v43 = v6[1];
      if (v33 <= 0.0)
        v44 = v6[5];
      else
        v44 = v6[2];
      v45 = -(v43 * v10 - v44 * v9) - (v43 * v10 - v44 * v9);
      v46 = -(v44 * v12 - v42 * v10) - (v44 * v12 - v42 * v10);
      v47 = -(v42 * v9 - v43 * v12) - (v42 * v9 - v43 * v12);
      if (v41
         + (v42 + v15 + v47 * v9 + v45 * v11 - v46 * v10) * v27
         + (v43 + v14 - v47 * v12 + v45 * v10 + v46 * v11) * v26
         + (v44 + v13 + v47 * v11 + v46 * v12 - v45 * v9) * v25 < 0.0)
        ++v8;
      v7 += 4;
    }
    while (v7 != 24);
    if (!v8)
      goto LABEL_53;
    v107 = -(v13 * v9 - v14 * v10) - (v13 * v9 - v14 * v10);
    v98 = *(_QWORD *)&v23;
    *(double *)&v112 = v21;
    v48 = v4 + 99;
    v49 = v4 + 87;
    v116 = vld3q_f64(v49);
    v49 += 6;
    v114 = vld3q_f64(v49);
    v50 = v4 + 105;
    v51 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v15 + v17), 0);
    v52 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0);
    v53 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-(v13 * v9 - v14 * v10) * -2.0), 0);
    v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0);
    v55 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v116.val[2], v9)), v116.val[1], v10);
    v56 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v116.val[0], v10)), v116.val[2], v12);
    v57 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v116.val[1], v12)), v116.val[0], v9);
    v106 = vaddq_f64(v56, v56);
    v100 = vaddq_f64(v55, v55);
    v101 = v24;
    v103 = vaddq_f64(v57, v57);
    v97 = vaddq_f64(v100, v53);
    v58 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v116.val[0], v51), v97, v11), vaddq_f64(v106, v54), v10), vsubq_f64(v52, v103), v9);
    v59 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v114.val[2], v9)), v114.val[1], v10);
    v60 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v114.val[0], v10)), v114.val[2], v12);
    v61 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v114.val[1], v12)), v114.val[0], v9);
    v105 = vaddq_f64(v60, v60);
    v99 = vaddq_f64(v59, v59);
    v109 = vaddq_f64(v61, v61);
    v110 = v114.val[1];
    v111 = v114.val[2];
    v96 = vaddq_f64(v99, v53);
    v62 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v114.val[0], v51), v96, v11), vaddq_f64(v105, v54), v10), vsubq_f64(v52, v109), v9);
    v113 = vld3q_f64(v48);
    v63 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v113.val[2], v9)), v113.val[1], v10);
    v114.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v113.val[0], v10)), v113.val[2], v12);
    v114.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v113.val[1], v12)), v113.val[0], v9);
    v104 = vaddq_f64(v114.val[1], v114.val[1]);
    v64 = vaddq_f64(v63, v63);
    v108 = vaddq_f64(v114.val[2], v114.val[2]);
    v95 = vaddq_f64(v64, v53);
    v115 = vld3q_f64(v50);
    v65 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v113.val[0], v51), v95, v11), vaddq_f64(v104, v54), v10), vsubq_f64(v52, v108), v9);
    v66 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v115.val[2], v9)), v115.val[1], v10);
    v67 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v115.val[0], v10)), v115.val[2], v12);
    v68 = vaddq_f64(v66, v66);
    v102 = vaddq_f64(v67, v67);
    v69 = vaddq_f64(v68, v53);
    v70 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v115.val[1], v12)), v115.val[0], v9);
    v71 = vaddq_f64(v70, v70);
    v72 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v115.val[0], v51), v69, v11), vaddq_f64(v102, v54), v10), vsubq_f64(v52, v71), v9);
    v73 = fmax(v6[3] - v17, 0.0);
    if (*(double *)v58.i64 >= v73
      && *(double *)&v58.i64[1] >= v73
      && v62.f64[0] >= v73
      && v62.f64[1] >= v73
      && v65.f64[0] >= v73
      && v65.f64[1] >= v73
      && v72.f64[0] >= v73
      && v72.f64[1] >= v73)
    {
      goto LABEL_52;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64((float64x2_t)vextq_s8(v58, v58, 8uLL)), (int32x4_t)vcgtzq_f64(v62)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v65), (int32x4_t)vcgtzq_f64(v72))))) & 1) == 0)goto LABEL_52;
    v74 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v101 * v12 + *(double *)&v112 * v11), 0);
    v75 = vmlaq_n_f64(v74, v100, v10);
    v76 = vmlaq_n_f64(v74, v99, v10);
    v77 = vmlaq_n_f64(v74, v64, v10);
    v78 = vmlaq_n_f64(v74, v68, v10);
    v79 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v14 + v16), 0);
    v80 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v107 * v10), 0);
    v81 = (int8x16_t)vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(vaddq_f64(v80, v116.val[1]), v79), v106, v11), v103, v12), v75);
    v82 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(vaddq_f64(v80, v110), v79), v105, v11), v109, v12), v76);
    v83 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(vaddq_f64(v80, v113.val[1]), v79), v104, v11), v108, v12), v77);
    v84 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(vaddq_f64(v80, v115.val[1]), v79), v102, v11), v71, v12), v78);
    v85 = fmax(v6[4] - v16, 0.0);
    if (*(double *)v81.i64 >= v85
      && *(double *)&v81.i64[1] >= v85
      && v82.f64[0] >= v85
      && v82.f64[1] >= v85
      && v83.f64[0] >= v85
      && v83.f64[1] >= v85
      && v84.f64[0] >= v85
      && v84.f64[1] >= v85)
    {
      goto LABEL_52;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64((float64x2_t)vextq_s8(v81, v81, 8uLL)), (int32x4_t)vcgtzq_f64(v82)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v83), (int32x4_t)vcgtzq_f64(v84))))) & 1) == 0)goto LABEL_52;
    v86 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13 + v18), 0);
    v87 = (float64x2_t)vdupq_lane_s64(v112, 0);
    v88 = (float64x2_t)vdupq_lane_s64(v98, 0);
    v89 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v116.val[2], v86), v97, v9), vaddq_f64(v103, v88), v11), vsubq_f64(v87, v106), v12);
    v90 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v111, v86), v96, v9), vaddq_f64(v109, v88), v11), vsubq_f64(v87, v105), v12);
    v91 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v113.val[2], v86), v95, v9), vaddq_f64(v108, v88), v11), vsubq_f64(v87, v104), v12);
    v92 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vsubq_f64(v115.val[2], v86), v69, v9), vaddq_f64(v71, v88), v11), vsubq_f64(v87, v102), v12);
    v93 = fmax(v6[5] - v18, 0.0);
    if (*(double *)v89.i64 >= v93
      && *(double *)&v89.i64[1] >= v93
      && v90.f64[0] >= v93
      && v90.f64[1] >= v93
      && v91.f64[0] >= v93
      && v91.f64[1] >= v93
      && v92.f64[0] >= v93
      && v92.f64[1] >= v93)
    {
LABEL_52:
      LOBYTE(v8) = 1;
      goto LABEL_53;
    }
    LOBYTE(v8) = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64((float64x2_t)vextq_s8(v89, v89, 8uLL)), (int32x4_t)vcgtzq_f64(v90)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v91), (int32x4_t)vcgtzq_f64(v92))))) ^ 1;
LABEL_53:
    *((_BYTE *)this + 32) = v8 & 1;
    *((_DWORD *)this + 9) = a2;
  }
  return v8 & 1;
}

void md::MuninStandardLabeler::~MuninStandardLabeler(md::MuninStandardLabeler *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4299528;
  *((_QWORD *)this + 1) = &unk_1E4299708;
  *((_QWORD *)this + 2) = &unk_1E4299750;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 49);
  if (v3)
  {
    *((_QWORD *)this + 50) = v3;
    operator delete(v3);
  }
  md::StandardLabeler::~StandardLabeler(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4299528;
  *((_QWORD *)this + 1) = &unk_1E4299708;
  *((_QWORD *)this + 2) = &unk_1E4299750;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 49);
  if (v3)
  {
    *((_QWORD *)this + 50) = v3;
    operator delete(v3);
  }
  md::StandardLabeler::~StandardLabeler(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninStandardLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  _QWORD *i;
  _BYTE *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  md::StandardLabeler::synchronizedUpdate((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 440))
  {
    v5 = *(_QWORD **)(a1 + 72);
    for (i = *(_QWORD **)(a1 + 80); v5 != i; v5 += 2)
    {
      v7 = (_BYTE *)*v5;
      v7[480] = 1;
      if (v7[820] != 2)
        v7[485] = 0;
    }
    *(_BYTE *)(a1 + 440) = 0;
  }
  if (*(_BYTE *)(a1 + 442))
  {
    *(_BYTE *)(a1 + 442) = 0;
    v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 3152);
    v10 = *(uint64_t **)(a1 + 72);
    v9 = *(uint64_t **)(a1 + 80);
    if (v8)
    {
      if (v10 == v9)
        return;
      while (1)
      {
        v12 = *v10;
        if ((*(_BYTE *)(*v10 + 1072) & 0xFD) != 1)
          goto LABEL_12;
        v13 = *(_QWORD *)(v12 + 272);
        if (!v13)
          goto LABEL_12;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 744))(v13) & 1) == 0)
          break;
LABEL_14:
        v10 += 2;
        if (v10 == v9)
          return;
      }
      v12 = *v10;
LABEL_12:
      v11 = *(_QWORD *)(v12 + 264);
      if (v11 || (v11 = *(_QWORD *)(v12 + 272)) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 512))(v11, 1);
      goto LABEL_14;
    }
    for (; v10 != v9; v10 += 2)
    {
      v14 = *(_QWORD *)(*v10 + 264);
      if (!v14)
      {
        v14 = *(_QWORD *)(*v10 + 272);
        if (!v14)
          continue;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 512))(v14, 0);
    }
  }
}

uint64_t md::MuninStandardLabeler::checkNeedsOcclusionTests(md::MuninStandardLabeler *this, const md::LayoutContext *a2)
{
  return 1;
}

void md::MuninStandardLabeler::updateOcclusionQueries(md::MuninStandardLabeler *this)
{
  uint64_t *v1;
  uint64_t *i;

  v1 = (uint64_t *)*((_QWORD *)this + 9);
  for (i = (uint64_t *)*((_QWORD *)this + 10); v1 != i; v1 += 2)
  {
    if (*(_BYTE *)(*v1 + 482))
      md::Label::submitOcclusionQuery(*v1, *(_QWORD *)(*((_QWORD *)this + 3) + 360), *(_QWORD *)(*((_QWORD *)this + 3) + 432), *(unsigned __int8 *)(*v1 + 1217));
  }
}

uint64_t md::StandardLabeler::transitSupport(md::StandardLabeler *this)
{
  return 0;
}

uint64_t md::StandardLabeler::externalObjectsModerator(md::StandardLabeler *this)
{
  return 0;
}

uint64_t md::StandardLabeler::externalMeshModerator(md::StandardLabeler *this)
{
  return 0;
}

uint64_t md::StandardLabeler::trafficTilePool(md::StandardLabeler *this)
{
  return 0;
}

uint64_t md::StandardLabeler::isTransitNodeAlongSelectedLine(md::StandardLabeler *this)
{
  return 0;
}

uint64_t md::StandardLabeler::addLinesToCollider(md::StandardLabeler *this)
{
  return 0;
}

uint64_t md::MuninStandardLabeler::layoutLabelsForStaging(uint64_t this)
{
  md::Label ***v1;
  void *v2;
  md::Label **v3;
  uint64_t *i;
  uint64_t *v5;
  uint64_t v6;
  md::Label **v7;
  md::Label **v8;
  unint64_t v9;
  unint64_t v10;
  md::Label **v11;
  md::Label **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  md::Label **v24;
  md::Label *v25;
  unint64_t v26;
  md::Label **v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  md::Label **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  md::Label **v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  md::Label *v50;
  md::Label **v51;
  md::Label **v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  md::Label **v56;
  uint64_t v57;
  __int128 v58;
  md::Label *v59;
  float32x2_t **v60;
  float32x2_t **v61;
  float32x2_t *v62;
  md::Label **v63;
  md::Label **v64;
  md::Label *j;
  md::Label *k;
  md::Label *m;
  md::Label *n;
  unsigned int *v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  md::Label ***v74;
  __int16 v75;
  char v76;

  v1 = (md::Label ***)this;
  v2 = *(void **)(this + 392);
  *(_QWORD *)(this + 400) = v2;
  v3 = *(md::Label ***)(this + 416);
  *(_QWORD *)(this + 424) = v3;
  if (*(_BYTE *)(this + 441))
  {
    v5 = *(uint64_t **)(this + 72);
    for (i = *(uint64_t **)(this + 80); v5 != i; this = md::Label::updateStateMachineForStaging(v6, 2, 29))
    {
      v6 = *v5;
      v5 += 2;
    }
    return this;
  }
  v8 = *(md::Label ***)(this + 72);
  v7 = *(md::Label ***)(this + 80);
  v9 = (char *)v7 - (char *)v8;
  v10 = ((char *)v7 - (char *)v8) >> 4;
  if (v10 > (uint64_t)(*(_QWORD *)(this + 408) - (_QWORD)v2) >> 3)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_90;
    v11 = (md::Label **)operator new(v9 >> 1);
    v1[49] = v11;
    v1[50] = v11;
    v1[51] = &v11[v10];
    if (v2)
    {
      operator delete(v2);
      v8 = v1[9];
      v7 = v1[10];
      v3 = v1[52];
      v9 = (char *)v7 - (char *)v8;
      v10 = ((char *)v7 - (char *)v8) >> 4;
    }
  }
  if (v10 > v1[54] - v3)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      v12 = v1[53];
      v13 = (char *)operator new(v9 >> 1);
      v14 = (char *)v12 - (char *)v3;
      v15 = &v13[((char *)v12 - (char *)v3) & 0xFFFFFFFFFFFFFFF8];
      v16 = v15;
      if (v12 == v3)
        goto LABEL_19;
      if ((unint64_t)(v14 - 8) >= 0x58)
      {
        v16 = &v13[((char *)v12 - (char *)v3) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)((char *)v12 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13) >= 0x20)
        {
          v17 = v14 >> 3;
          v18 = ((unint64_t)(v14 - 8) >> 3) + 1;
          v19 = &v13[8 * v17 - 16];
          v20 = (__int128 *)(v12 - 2);
          v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v22 = *v20;
            *((_OWORD *)v19 - 1) = *(v20 - 1);
            *(_OWORD *)v19 = v22;
            v19 -= 32;
            v20 -= 2;
            v21 -= 4;
          }
          while (v21);
          v16 = &v15[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
          v12 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
          if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_19:
            v1[52] = (md::Label **)v16;
            v1[53] = (md::Label **)v15;
            v1[54] = (md::Label **)&v13[8 * v10];
            if (v3)
            {
              operator delete(v3);
              v8 = v1[9];
              v7 = v1[10];
            }
            goto LABEL_21;
          }
        }
      }
      else
      {
        v16 = &v13[((char *)v12 - (char *)v3) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v23 = (uint64_t)*--v12;
        *((_QWORD *)v16 - 1) = v23;
        v16 -= 8;
      }
      while (v12 != v3);
      goto LABEL_19;
    }
LABEL_90:
    abort();
  }
LABEL_21:
  v74 = v1 + 49;
  v75 = 257;
  v76 = 1;
  while (v8 != v7)
  {
    md::Label::layoutForStaging(*v8, (uint64_t)v1[3], (md::LabelPool *)v1[6], &v75);
    v25 = *v8;
    if (!*((_BYTE *)*v8 + 1290))
      goto LABEL_24;
    if (*((_BYTE *)v25 + 1211) == 18)
    {
      v27 = v1[50];
      v26 = (unint64_t)v1[51];
      if ((unint64_t)v27 >= v26)
      {
        v36 = *v74;
        v37 = (char *)v27 - (char *)*v74;
        v38 = v37 >> 3;
        v39 = (v37 >> 3) + 1;
        if (v39 >> 61)
          goto LABEL_90;
        v40 = v26 - (_QWORD)v36;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 61)
LABEL_91:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v42 = operator new(8 * v41);
        }
        else
        {
          v42 = 0;
        }
        v51 = (md::Label **)&v42[8 * v38];
        *v51 = v25;
        v52 = v51 + 1;
        if (v27 == v36)
        {
          v36 = v27;
        }
        else
        {
          v53 = (char *)(v27 - 1) - (char *)v36;
          if (v53 < 0x58)
            goto LABEL_94;
          if ((unint64_t)((char *)v27 - &v42[v37]) < 0x20)
            goto LABEL_94;
          v54 = (v53 >> 3) + 1;
          v55 = &v42[8 * v38 - 16];
          v56 = v27 - 2;
          v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 4;
            v57 -= 4;
          }
          while (v57);
          v51 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
          v27 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_94:
            do
            {
              v59 = *--v27;
              *--v51 = v59;
            }
            while (v27 != v36);
            v36 = *v74;
          }
        }
        v1[49] = v51;
        v1[50] = v52;
        v1[51] = (md::Label **)&v42[8 * v41];
        if (v36)
          operator delete(v36);
        v1[50] = v52;
        v8 += 2;
      }
      else
      {
        *v27 = v25;
        v1[50] = v27 + 1;
        v8 += 2;
      }
    }
    else
    {
      v29 = (char *)v1[53];
      v28 = (unint64_t)v1[54];
      if ((unint64_t)v29 < v28)
      {
        *(_QWORD *)v29 = v25;
        v24 = (md::Label **)(v29 + 8);
      }
      else
      {
        v30 = (char *)v1[52];
        v31 = (v29 - v30) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          goto LABEL_90;
        v33 = v28 - (_QWORD)v30;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 61)
            goto LABEL_91;
          v35 = operator new(8 * v34);
        }
        else
        {
          v35 = 0;
        }
        v43 = (md::Label **)&v35[8 * v31];
        *v43 = v25;
        v24 = v43 + 1;
        if (v29 == v30)
        {
          v30 = v29;
        }
        else
        {
          v44 = v29 - 8 - v30;
          if (v44 < 0x58)
            goto LABEL_95;
          if ((unint64_t)(v30 - v35) < 0x20)
            goto LABEL_95;
          v45 = (v44 >> 3) + 1;
          v46 = &v35[8 * v31 - 16];
          v47 = v29 - 16;
          v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 4;
          }
          while (v48);
          v43 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
          v29 -= 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_95:
            do
            {
              v50 = (md::Label *)*((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v43 = v50;
            }
            while (v29 != v30);
            v30 = (char *)v1[52];
          }
        }
        v1[52] = v43;
        v1[53] = v24;
        v1[54] = (md::Label **)&v35[8 * v34];
        if (v30)
          operator delete(v30);
      }
      v1[53] = v24;
LABEL_24:
      v8 += 2;
    }
  }
  ((void (*)(md::Label ***))(*v1)[56])(v1);
  v60 = (float32x2_t **)v1[17];
  v61 = (float32x2_t **)v1[18];
  while (v60 != v61)
  {
    v62 = *v60++;
    md::LabelCollider::addCollidableItem((char *)v1[7], v62);
  }
  *((_DWORD *)v1 + 95) = ((uint64_t (*)(md::Label ***))(*v1)[55])(v1);
  v1[48] = 0;
  v63 = v1[3];
  if (*((_BYTE *)v63 + 3610))
  {
    v64 = v1[6];
    for (j = v64[35]; j; j = *(md::Label **)j)
      (*(void (**)(uint64_t, md::Label **))(**((_QWORD **)j + 6) + 16))(*((_QWORD *)j + 6), v63);
    for (k = v64[49]; k; k = *(md::Label **)k)
      (*(void (**)(uint64_t, md::Label **))(**((_QWORD **)k + 3) + 16))(*((_QWORD *)k + 3), v63);
    for (m = v64[56]; m; m = *(md::Label **)m)
      (*(void (**)(uint64_t, md::Label **))(**((_QWORD **)m + 3) + 16))(*((_QWORD *)m + 3), v63);
    for (n = v64[42]; n; n = *(md::Label **)n)
      (*(void (**)(uint64_t, md::Label **))(**((_QWORD **)n + 2) + 16))(*((_QWORD *)n + 2), v63);
  }
  v69 = (unsigned int *)md::LabelSettingsStyleCache::muninPointStyle(*((md::LabelSettingsStyleCache **)v1[3][42] + 25));
  v70 = (uint64_t *)v1[49];
  v71 = (uint64_t *)v1[50];
  v72 = 126 - 2 * __clz(v71 - v70);
  if (v71 == v70)
    v73 = 0;
  else
    v73 = v72;
  std::__introsort<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **,false>(v70, v71, v73, 1);
  return md::MuninStandardLabeler::placeLabels((uint64_t)v1, v74, *v69);
}

uint64_t `non-virtual thunk to'md::StandardLabeler::transitSupport(md::StandardLabeler *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'md::StandardLabeler::externalObjectsModerator(md::StandardLabeler *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'md::StandardLabeler::externalMeshModerator(md::StandardLabeler *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'md::StandardLabeler::trafficTilePool(md::StandardLabeler *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'md::StandardLabeler::isTransitNodeAlongSelectedLine(md::StandardLabeler *this)
{
  return 0;
}

float std::__introsort<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  float result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *k;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *j;
  unsigned __int8 v114;
  uint64_t v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  uint64_t *v147;
  BOOL v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 v165;
  uint64_t v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int64_t v173;
  int64_t v174;
  uint64_t *v175;
  int64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unsigned __int8 v187;
  unsigned __int8 v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 *v205;
  unsigned __int8 v206;
  unsigned __int8 v207;
  unsigned __int8 v208;
  uint64_t v209;
  unsigned __int8 *v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 v233;
  unsigned __int8 v234;
  unsigned __int8 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  unsigned __int8 v247;
  unsigned __int8 v248;
  unsigned __int8 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  unsigned __int8 v256;
  unint64_t v257;
  uint64_t v258;
  unsigned __int8 *v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned __int8 v274;
  unsigned __int8 v275;
  unsigned __int8 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  unsigned __int8 v286;
  unsigned __int8 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;

uint64_t md::MuninStandardLabeler::placeLabels(uint64_t result, _QWORD *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  md::LabelCollisionItemBase *v15;

  v13 = 0;
  v14 = 0;
  v4 = a2[1] - *a2;
  v5 = v4 >> 3;
  if (!v4)
  {
    v8 = 0;
    if (!v5)
      return result;
    goto LABEL_13;
  }
  v7 = result;
  v8 = 0;
  v9 = 0;
  if (v5 <= 1)
    v10 = 1;
  else
    v10 = v4 >> 3;
  while (1)
  {
    v11 = *(_QWORD *)(*a2 + 8 * v8);
    if (*(_BYTE *)(v11 + 1290))
    {
      if (*(_BYTE *)(*(_QWORD *)(v7 + 24) + 3610))
      {
        v12 = *(_QWORD *)(v7 + 56);
        v15 = *(md::LabelCollisionItemBase **)(v11 + 328);
        result = md::LabelCollider::collideItems(v12, &v15, 1);
      }
      else
      {
        result = md::Label::setCollisionResult(*(_QWORD *)(*a2 + 8 * v8), (uint64_t)&v13);
      }
    }
    if (*(_BYTE *)(v11 + 820) == 2 && ++v9 >= a3)
      break;
    if (v10 == ++v8)
      return result;
  }
  if (v8 < v5)
  {
    do
LABEL_13:
      result = md::Label::updateStateMachineForStaging(*(_QWORD *)(*a2 + 8 * v8++), 2, 36);
    while (v5 != v8);
  }
  return result;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *a2;
  v4 = *result;
  v5 = (unsigned __int8 *)(*a2 + 1240);
  v6 = atomic_load(v5);
  v7 = atomic_load((unsigned __int8 *)(v4 + 1240));
  if ((v6 & 1) != (v7 & 1))
  {
    v8 = atomic_load(v5);
    if ((v8 & 1) == 0)
      goto LABEL_3;
LABEL_14:
    v19 = *a3;
    v20 = *a2;
    v21 = (unsigned __int8 *)(*a3 + 1240);
    v22 = atomic_load(v21);
    v23 = atomic_load((unsigned __int8 *)(v20 + 1240));
    if ((v22 & 1) != (v23 & 1))
    {
      v24 = atomic_load(v21);
      if ((v24 & 1) == 0)
        goto LABEL_16;
LABEL_36:
      a2 = a3;
      goto LABEL_60;
    }
    v35 = *(_QWORD *)(v19 + 24);
    v36 = *(_QWORD *)(v20 + 24);
    if (v35)
    {
      if (v35 == v36)
      {
        if (*(_DWORD *)(v19 + 32) < *(_DWORD *)(v20 + 32))
          goto LABEL_36;
LABEL_16:
        v25 = *result;
        *result = *a2;
        *a2 = v25;
        v26 = *a3;
        v27 = (unsigned __int8 *)(*a3 + 1240);
        v28 = atomic_load(v27);
        v29 = atomic_load((unsigned __int8 *)(v25 + 1240));
        if ((v28 & 1) != (v29 & 1))
        {
          v30 = atomic_load(v27);
          result = a2;
          a2 = a3;
          if ((v30 & 1) == 0)
            return result;
          goto LABEL_60;
        }
        v39 = *(_QWORD *)(v26 + 24);
        v40 = *(_QWORD *)(v25 + 24);
        if (v39)
        {
          if (v39 == v40)
          {
            result = a2;
            a2 = a3;
            if (*(_DWORD *)(v26 + 32) < *(_DWORD *)(v25 + 32))
              goto LABEL_60;
            return result;
          }
          v41 = *(_QWORD *)(v39 + 72);
          if (v41)
            v26 = v41;
        }
        if (v40)
        {
          v42 = *(_QWORD *)(v40 + 72);
          if (v42)
            v25 = v42;
        }
        result = a2;
        a2 = a3;
        if (*(float *)(v26 + 780) < *(float *)(v25 + 780))
          goto LABEL_60;
        return result;
      }
      v37 = *(_QWORD *)(v35 + 72);
      if (v37)
        v19 = v37;
    }
    if (v36)
    {
      v38 = *(_QWORD *)(v36 + 72);
      if (v38)
        v20 = v38;
    }
    if (*(float *)(v19 + 780) < *(float *)(v20 + 780))
      goto LABEL_36;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)(v3 + 24);
  v16 = *(_QWORD *)(v4 + 24);
  if (v15)
  {
    if (v15 == v16)
    {
      if (*(_DWORD *)(v3 + 32) < *(_DWORD *)(v4 + 32))
        goto LABEL_14;
      goto LABEL_3;
    }
    v17 = *(_QWORD *)(v15 + 72);
    if (v17)
      v3 = v17;
  }
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 72);
    if (v18)
      v4 = v18;
  }
  if (*(float *)(v3 + 780) < *(float *)(v4 + 780))
    goto LABEL_14;
LABEL_3:
  v9 = *a3;
  v10 = *a2;
  v11 = (unsigned __int8 *)(*a3 + 1240);
  v12 = atomic_load(v11);
  v13 = atomic_load((unsigned __int8 *)(v10 + 1240));
  if ((v12 & 1) == (v13 & 1))
  {
    v31 = *(_QWORD *)(v9 + 24);
    v32 = *(_QWORD *)(v10 + 24);
    if (v31)
    {
      if (v31 == v32)
      {
        if (*(_DWORD *)(v9 + 32) >= *(_DWORD *)(v10 + 32))
          return result;
        goto LABEL_49;
      }
      v33 = *(_QWORD *)(v31 + 72);
      if (v33)
        v9 = v33;
    }
    if (v32)
    {
      v34 = *(_QWORD *)(v32 + 72);
      if (v34)
        v10 = v34;
    }
    if (*(float *)(v9 + 780) >= *(float *)(v10 + 780))
      return result;
    goto LABEL_49;
  }
  v14 = atomic_load(v11);
  if ((v14 & 1) == 0)
    return result;
LABEL_49:
  v43 = *a2;
  *a2 = *a3;
  *a3 = v43;
  v44 = *a2;
  v45 = *result;
  v46 = (unsigned __int8 *)(*a2 + 1240);
  v47 = atomic_load(v46);
  v48 = atomic_load((unsigned __int8 *)(v45 + 1240));
  if ((v47 & 1) != (v48 & 1))
  {
    v49 = atomic_load(v46);
    if ((v49 & 1) == 0)
      return result;
LABEL_60:
    v54 = *result;
    *result = *a2;
    *a2 = v54;
    return result;
  }
  v50 = *(_QWORD *)(v44 + 24);
  v51 = *(_QWORD *)(v45 + 24);
  if (!v50)
    goto LABEL_56;
  if (v50 != v51)
  {
    v52 = *(_QWORD *)(v50 + 72);
    if (v52)
      v44 = v52;
LABEL_56:
    if (v51)
    {
      v53 = *(_QWORD *)(v51 + 72);
      if (v53)
        v45 = v53;
    }
    if (*(float *)(v44 + 780) < *(float *)(v45 + 780))
      goto LABEL_60;
    return result;
  }
  if (*(_DWORD *)(v44 + 32) < *(_DWORD *)(v45 + 32))
    goto LABEL_60;
  return result;
}

float std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  float result;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = (unsigned __int8 *)(*a4 + 1240);
  v12 = atomic_load(v11);
  v13 = atomic_load((unsigned __int8 *)(v10 + 1240));
  if ((v12 & 1) == (v13 & 1))
  {
    v15 = *(_QWORD *)(v9 + 24);
    v16 = *(_QWORD *)(v10 + 24);
    if (v15)
    {
      if (v15 == v16)
      {
        if (*(_DWORD *)(v9 + 32) >= *(_DWORD *)(v10 + 32))
          return result;
        goto LABEL_14;
      }
      v17 = *(_QWORD *)(v15 + 72);
      if (v17)
        v9 = v17;
    }
    if (v16)
    {
      v18 = *(_QWORD *)(v16 + 72);
      if (v18)
        v10 = v18;
    }
    result = *(float *)(v9 + 780);
    if (result >= *(float *)(v10 + 780))
      return result;
    goto LABEL_14;
  }
  v14 = atomic_load(v11);
  if ((v14 & 1) == 0)
    return result;
LABEL_14:
  v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  v20 = *a3;
  v21 = *a2;
  v22 = (unsigned __int8 *)(*a3 + 1240);
  v23 = atomic_load(v22);
  v24 = atomic_load((unsigned __int8 *)(v21 + 1240));
  if ((v23 & 1) != (v24 & 1))
  {
    v25 = atomic_load(v22);
    if ((v25 & 1) == 0)
      return result;
    goto LABEL_27;
  }
  v26 = *(_QWORD *)(v20 + 24);
  v27 = *(_QWORD *)(v21 + 24);
  if (v26)
  {
    if (v26 == v27)
    {
      if (*(_DWORD *)(v20 + 32) >= *(_DWORD *)(v21 + 32))
        return result;
LABEL_27:
      v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      v31 = *a2;
      v32 = *a1;
      v33 = (unsigned __int8 *)(*a2 + 1240);
      v34 = atomic_load(v33);
      v35 = atomic_load((unsigned __int8 *)(v32 + 1240));
      if ((v34 & 1) != (v35 & 1))
      {
        v36 = atomic_load(v33);
        if ((v36 & 1) == 0)
          return result;
        goto LABEL_29;
      }
      v38 = *(_QWORD *)(v31 + 24);
      v39 = *(_QWORD *)(v32 + 24);
      if (v38)
      {
        if (v38 == v39)
        {
          if (*(_DWORD *)(v31 + 32) >= *(_DWORD *)(v32 + 32))
            return result;
          goto LABEL_29;
        }
        v40 = *(_QWORD *)(v38 + 72);
        if (v40)
          v31 = v40;
      }
      if (v39)
      {
        v41 = *(_QWORD *)(v39 + 72);
        if (v41)
          v32 = v41;
      }
      result = *(float *)(v31 + 780);
      if (result >= *(float *)(v32 + 780))
        return result;
LABEL_29:
      v37 = *a1;
      *a1 = *a2;
      *a2 = v37;
      return result;
    }
    v28 = *(_QWORD *)(v26 + 72);
    if (v28)
      v20 = v28;
  }
  if (v27)
  {
    v29 = *(_QWORD *)(v27 + 72);
    if (v29)
      v21 = v29;
  }
  result = *(float *)(v20 + 780);
  if (result < *(float *)(v21 + 780))
    goto LABEL_27;
  return result;
}

float std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  float result;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = (unsigned __int8 *)(*a5 + 1240);
  v14 = atomic_load(v13);
  v15 = atomic_load((unsigned __int8 *)(v12 + 1240));
  if ((v14 & 1) != (v15 & 1))
  {
    v16 = atomic_load(v13);
    if ((v16 & 1) == 0)
      return result;
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(v11 + 24);
  v18 = *(_QWORD *)(v12 + 24);
  if (v17)
  {
    if (v17 == v18)
    {
      if (*(_DWORD *)(v11 + 32) >= *(_DWORD *)(v12 + 32))
        return result;
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(v17 + 72);
    if (v19)
      v11 = v19;
  }
  if (v18)
  {
    v20 = *(_QWORD *)(v18 + 72);
    if (v20)
      v12 = v20;
  }
  result = *(float *)(v11 + 780);
  if (result >= *(float *)(v12 + 780))
    return result;
LABEL_14:
  v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  v22 = *a4;
  v23 = *a3;
  v24 = (unsigned __int8 *)(*a4 + 1240);
  v25 = atomic_load(v24);
  v26 = atomic_load((unsigned __int8 *)(v23 + 1240));
  if ((v25 & 1) == (v26 & 1))
  {
    v28 = *(_QWORD *)(v22 + 24);
    v29 = *(_QWORD *)(v23 + 24);
    if (v28)
    {
      if (v28 == v29)
      {
        if (*(_DWORD *)(v22 + 32) >= *(_DWORD *)(v23 + 32))
          return result;
        goto LABEL_27;
      }
      v30 = *(_QWORD *)(v28 + 72);
      if (v30)
        v22 = v30;
    }
    if (v29)
    {
      v31 = *(_QWORD *)(v29 + 72);
      if (v31)
        v23 = v31;
    }
    result = *(float *)(v22 + 780);
    if (result >= *(float *)(v23 + 780))
      return result;
    goto LABEL_27;
  }
  v27 = atomic_load(v24);
  if ((v27 & 1) == 0)
    return result;
LABEL_27:
  v32 = *a3;
  *a3 = *a4;
  *a4 = v32;
  v33 = *a3;
  v34 = *a2;
  v35 = (unsigned __int8 *)(*a3 + 1240);
  v36 = atomic_load(v35);
  v37 = atomic_load((unsigned __int8 *)(v34 + 1240));
  if ((v36 & 1) != (v37 & 1))
  {
    v38 = atomic_load(v35);
    if ((v38 & 1) == 0)
      return result;
    goto LABEL_40;
  }
  v39 = *(_QWORD *)(v33 + 24);
  v40 = *(_QWORD *)(v34 + 24);
  if (v39)
  {
    if (v39 == v40)
    {
      if (*(_DWORD *)(v33 + 32) >= *(_DWORD *)(v34 + 32))
        return result;
LABEL_40:
      v43 = *a2;
      *a2 = *a3;
      *a3 = v43;
      v44 = *a2;
      v45 = *a1;
      v46 = (unsigned __int8 *)(*a2 + 1240);
      v47 = atomic_load(v46);
      v48 = atomic_load((unsigned __int8 *)(v45 + 1240));
      if ((v47 & 1) != (v48 & 1))
      {
        v49 = atomic_load(v46);
        if ((v49 & 1) == 0)
          return result;
        goto LABEL_42;
      }
      v51 = *(_QWORD *)(v44 + 24);
      v52 = *(_QWORD *)(v45 + 24);
      if (v51)
      {
        if (v51 == v52)
        {
          if (*(_DWORD *)(v44 + 32) >= *(_DWORD *)(v45 + 32))
            return result;
          goto LABEL_42;
        }
        v53 = *(_QWORD *)(v51 + 72);
        if (v53)
          v44 = v53;
      }
      if (v52)
      {
        v54 = *(_QWORD *)(v52 + 72);
        if (v54)
          v45 = v54;
      }
      result = *(float *)(v44 + 780);
      if (result >= *(float *)(v45 + 780))
        return result;
LABEL_42:
      v50 = *a1;
      *a1 = *a2;
      *a2 = v50;
      return result;
    }
    v41 = *(_QWORD *)(v39 + 72);
    if (v41)
      v33 = v41;
  }
  if (v40)
  {
    v42 = *(_QWORD *)(v40 + 72);
    if (v42)
      v34 = v42;
  }
  result = *(float *)(v33 + 780);
  if (result < *(float *)(v34 + 780))
    goto LABEL_40;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = atomic_load((unsigned __int8 *)(v6 + 1240));
      v9 = atomic_load((unsigned __int8 *)(v7 + 1240));
      if ((v8 & 1) != (v9 & 1))
      {
        v10 = atomic_load((unsigned __int8 *)(v6 + 1240));
        if ((v10 & 1) == 0)
          return result;
        goto LABEL_54;
      }
      v36 = *(_QWORD *)(v6 + 24);
      v37 = *(_QWORD *)(v7 + 24);
      if (v36)
      {
        if (v36 == v37)
        {
          if (*(_DWORD *)(v6 + 32) >= *(_DWORD *)(v7 + 32))
            return result;
          goto LABEL_54;
        }
        v38 = *(_QWORD *)(v36 + 72);
        if (v38)
          v6 = v38;
      }
      if (v37)
      {
        v39 = *(_QWORD *)(v37 + 72);
        if (v39)
          v7 = v39;
      }
      if (*(float *)(v6 + 780) < *(float *)(v7 + 780))
      {
LABEL_54:
        v40 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v40;
        return result;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      while (2)
      {
        v16 = *v12;
        v17 = *v11;
        v18 = (unsigned __int8 *)(*v12 + 1240);
        v19 = atomic_load(v18);
        v20 = atomic_load((unsigned __int8 *)(v17 + 1240));
        if ((v19 & 1) != (v20 & 1))
        {
          v21 = atomic_load(v18);
          if ((v21 & 1) == 0)
            goto LABEL_9;
          goto LABEL_23;
        }
        v22 = *(_QWORD *)(v16 + 24);
        v23 = *(_QWORD *)(v17 + 24);
        if (!v22)
          goto LABEL_17;
        if (v22 == v23)
        {
          if (*(_DWORD *)(v16 + 32) >= *(_DWORD *)(v17 + 32))
            goto LABEL_9;
        }
        else
        {
          v24 = *(_QWORD *)(v22 + 72);
          if (v24)
            v16 = v24;
LABEL_17:
          if (v23)
          {
            v25 = *(_QWORD *)(v23 + 72);
            if (v25)
              v17 = v25;
          }
          if (*(float *)(v16 + 780) >= *(float *)(v17 + 780))
            goto LABEL_9;
        }
LABEL_23:
        v26 = *v12;
        *v12 = *v11;
        v15 = a1;
        if (v11 == a1)
          goto LABEL_8;
        v27 = v13;
        while (2)
        {
          v29 = *(uint64_t *)((char *)a1 + v27 + 8);
          v30 = atomic_load((unsigned __int8 *)(v26 + 1240));
          v31 = atomic_load((unsigned __int8 *)(v29 + 1240));
          if ((v30 & 1) != (v31 & 1))
          {
            v28 = atomic_load((unsigned __int8 *)(v26 + 1240));
            if ((v28 & 1) == 0)
              goto LABEL_38;
            goto LABEL_26;
          }
          v32 = *(_QWORD *)(v26 + 24);
          v33 = *(_QWORD *)(v29 + 24);
          v34 = v26;
          if (!v32)
            goto LABEL_32;
          if (v32 != v33)
          {
            v34 = *(_QWORD *)(v32 + 72);
            if (!v34)
              v34 = v26;
LABEL_32:
            if (v33)
            {
              v35 = *(_QWORD *)(v33 + 72);
              if (v35)
                v29 = v35;
            }
            if (*(float *)(v34 + 780) >= *(float *)(v29 + 780))
            {
              v15 = (uint64_t *)((char *)a1 + v27 + 16);
              goto LABEL_8;
            }
LABEL_26:
            --v11;
            *(uint64_t *)((char *)a1 + v27 + 16) = *(uint64_t *)((char *)a1 + v27 + 8);
            v27 -= 8;
            if (v27 == -16)
            {
              v15 = a1;
              goto LABEL_8;
            }
            continue;
          }
          break;
        }
        if (*(_DWORD *)(v26 + 32) < *(_DWORD *)(v29 + 32))
          goto LABEL_26;
LABEL_38:
        v15 = v11;
LABEL_8:
        *v15 = v26;
        if (++v14 == 8)
          return v12 + 1 == a2;
LABEL_9:
        v11 = v12;
        v13 += 8;
        if (++v12 != a2)
          continue;
        return 1;
      }
  }
}

float md::drape(__int128 *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, float a5, float a6, float a7, double a8, double a9, double a10, double a11)
{
  double v11;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  float v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  _BYTE v24[32];
  uint64_t v25;
  std::__shared_weak_count *v26;
  _OWORD v27[2];

  v11 = a8;
  LODWORD(a8) = 2139095039;
  if (a7 == 3.4028e38)
  {
    v24[0] = 0;
    v24[24] = 0;
    if (a3)
    {
      p_shared_owners = (unint64_t *)&a3->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v17 = md::ElevationUtils::drapeElevation((uint64_t)v24, a2, a3, a4, a5, a6, 0.0, a8, a9, a10, a11);
    if (a3)
    {
      v22 = (unint64_t *)&a3->__shared_owners_;
      do
        v19 = __ldaxr(v22);
      while (__stlxr(v19 - 1, v22));
LABEL_15:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
    }
  }
  else
  {
    v13 = *a1;
    v14 = a1[1];
    v27[0] = *a1;
    v27[1] = v14;
    v25 = a2;
    v26 = a3;
    if (a3)
    {
      v15 = (unint64_t *)&a3->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = md::ElevationUtils::drapeElevation((uint64_t)v27, a2, a3, a4, a5, a6, a7, *(double *)&v13, *(double *)&v14, a10, a11);
    if (a3)
    {
      v18 = (unint64_t *)&a3->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_15;
    }
  }
  return v17 * v11;
}

void sub_19F7AD3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float md::ElevationUtils::drapeElevation(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, float a5, float a6, float a7, double a8, double a9, double a10, double a11)
{
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  double v29;
  int v30;
  double v31;
  int64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float32x4_t v36;
  uint16x4_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  double v46;
  int64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t Undulation;
  float v55;
  float64x2_t v57;
  double v58;
  double v59;
  int v60;
  int v61;
  float v62;
  float v63;
  float v64;
  float v65;

  v13 = a2;
  *(float *)&a11 = a5;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!a2)
  {
LABEL_40:
    if (!a3)
      goto LABEL_44;
    goto LABEL_41;
  }
  v19 = *(_QWORD *)(a2 + 144);
  v18 = *(std::__shared_weak_count **)(a2 + 152);
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (v23)
    {
      if (!v19)
        goto LABEL_25;
    }
    else
    {
      v58 = a11;
      v62 = a6;
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      a11 = v58;
      a6 = v62;
      if (!v19)
        goto LABEL_25;
    }
    v24 = *(_QWORD *)(v13 + 144);
    v18 = *(std::__shared_weak_count **)(v13 + 152);
    v25 = v18 == 0;
    if (v18)
    {
      v26 = (unint64_t *)&v18->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    goto LABEL_19;
  }
  if (!v19)
  {
    LOBYTE(v13) = 0;
    goto LABEL_40;
  }
  v24 = *(_QWORD *)(a2 + 144);
  v25 = 1;
LABEL_19:
  v28 = 1 << *(_BYTE *)(a4 + 1);
  v29 = 1.0 / (double)v28;
  v30 = 1 << *(_BYTE *)(v24 + 57);
  v31 = (double)v30;
  v32.i64[0] = (int)*(_QWORD *)(a4 + 8);
  v32.i64[1] = v28 + ~*(_DWORD *)(a4 + 4);
  v33 = vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(a6), LODWORD(a11)));
  v34 = vaddq_f64(v33, vcvtq_f64_s64(v32));
  v32.i64[0] = *(int *)(v24 + 64);
  v32.i64[1] = v30 + ~*(_DWORD *)(v24 + 60);
  v35 = vmulq_n_f64(vmlaq_n_f64(vnegq_f64(vmulq_n_f64(vcvtq_f64_s64(v32), 1.0 / (double)v30)), v34, v29), (double)v30);
  v36 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v35), v35);
  v37.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_19FFB3850, v36)).u32[0];
  v37.i32[1] = vmovn_s32(vcgeq_f32(v36, (float32x4_t)xmmword_19FFB3850)).i32[1];
  v38 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v37), 0x1FuLL)), (int8x16_t)xmmword_19FFB48C0));
  if (!v25)
  {
    v39 = (unint64_t *)&v18->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      v59 = a11;
      v63 = a6;
      v57 = v33;
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v33 = v57;
      a11 = v59;
      a6 = v63;
    }
  }
  if ((~v38 & 0xF) != 0)
  {
LABEL_25:
    LOBYTE(v13) = 0;
    if (!a3)
      goto LABEL_44;
    goto LABEL_41;
  }
  v60 = LODWORD(a11);
  v64 = a6;
  v41 = *(_QWORD *)(v13 + 144);
  v42 = *(std::__shared_weak_count **)(v13 + 152);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = 1 << *(_BYTE *)(a4 + 1);
  v46 = *(double *)(a4 + 8);
  HIDWORD(v46) = v45 + ~*(_DWORD *)(a4 + 4);
  v47.i64[0] = SLODWORD(v46);
  v47.i64[1] = SHIDWORD(v46);
  v48 = vmulq_n_f64(vaddq_f64(v33, vcvtq_f64_s64(v47)), 1.0 / (double)v45);
  v49 = md::ElevationRaster::elevationInMetersAtWorldPoint(v41, 1, v48.f64[0], v48.f64[1], v46, *(double *)v36.i64, v31, v29, a11, *(float *)v33.f64);
  if (v42)
  {
    v50 = (unint64_t *)&v42->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  LOBYTE(v13) = (v49 & 0xFF00000000) != 0;
  if ((v49 & 0xFF00000000) != 0)
    a7 = *(float *)&v49;
  LODWORD(a11) = v60;
  a6 = v64;
  if (!a3)
  {
LABEL_44:
    if ((v13 & 1) != 0)
      return a7;
    goto LABEL_45;
  }
LABEL_41:
  v52 = (unint64_t *)&a3->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
    goto LABEL_44;
  v61 = LODWORD(a11);
  v65 = a6;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  LODWORD(a11) = v61;
  a6 = v65;
  if ((v13 & 1) != 0)
    return a7;
LABEL_45:
  if (*(_BYTE *)(a1 + 24))
  {
    Undulation = md::GeoidModel::getUndulation(*(md::GeoidModel **)a1, (float)(*(float *)(a1 + 16) + (float)((float)(*(float *)(a1 + 20) - *(float *)(a1 + 16)) * a6)), (float)(*(float *)(a1 + 8)+ (float)((float)(*(float *)(a1 + 12) - *(float *)(a1 + 8)) * *(float *)&a11)));
    v55 = *(float *)&Undulation;
    if (!HIDWORD(Undulation))
      v55 = 0.0;
    return v55 + a7;
  }
  return a7;
}

void md::ElevationRequestUpdater::getDsmResource(_QWORD *a1, unsigned __int8 *a2, uint64_t *a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v3 = atomic_load(a2);
  if ((v3 & 1) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    while (*(_WORD *)v4 != 20)
    {
      v4 += 48;
      if (v4 == v5)
        goto LABEL_15;
    }
  }
  if (v4 == v5)
  {
LABEL_15:
    v8 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v6 + 112);
    v8 = *(std::__shared_weak_count **)(v6 + 120);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7)
    {
      v11 = *(_QWORD **)(v7 + 144);
      if (v11)
      {
        if (*v11 != v11[1])
        {
          *a1 = v7;
          a1[1] = v8;
          return;
        }
      }
    }
  }
  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    while (*(_WORD *)v12 != 50)
    {
      v12 += 48;
      if (v12 == v13)
        goto LABEL_26;
    }
  }
  if (v12 == v13)
  {
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    if (!v8)
      return;
    goto LABEL_27;
  }
  v14 = *(_QWORD *)(v12 + 24);
  v16 = *(_QWORD *)(v14 + 112);
  v15 = *(_QWORD *)(v14 + 120);
  *a1 = v16;
  a1[1] = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v8)
  {
LABEL_27:
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void md::ElevationRequestUpdater::createResourceKey(uint64_t a1, QuadTile *a2, char a3, int a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char v33[4];
  std::__shared_weak_count *v34;
  unsigned int v35;
  char v36;

  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v32, a2, (uint64_t)a5);
  if (v36)
  {
    v13 = v35 | 0x100000000;
    v14 = v13 >> 8;
    v15 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = 0x100000000;
  }
  else
  {
    LOBYTE(v13) = 0;
    v18 = 0;
    LODWORD(v14) = 0;
  }
  v19 = v13 | v18 | ((_DWORD)v14 << 8);
  v20 = *(_QWORD *)(a5 + 4);
  v21 = a5[1];
  v22 = *a5;
  if (HIDWORD(v18))
    v23 = a4 == 50;
  else
    v23 = 1;
  if (v23)
    v24 = 0;
  else
    v24 = v19;
  if (*(_BYTE *)a7)
    v25 = *(_DWORD *)(a7 + 4);
  else
    v25 = 2147483646;
  *(_BYTE *)a1 = a3;
  *(_WORD *)(a1 + 2) = a4;
  *(_DWORD *)(a1 + 4) = v25;
  *(_QWORD *)(a1 + 8) = a1 + 40;
  *(_QWORD *)(a1 + 16) = a1 + 40;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 32;
  *(_QWORD *)(a1 + 72) = 0;
  v32 = HIDWORD(v20);
  v31 = v20;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a1 + 8), *(char **)(a1 + 16), (char *)&v32, v33);
  v32 = v31;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a1 + 8), *(char **)(a1 + 16), (char *)&v32, v33);
  v32 = v21;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a1 + 8), *(char **)(a1 + 16), (char *)&v32, v33);
  v32 = v22;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a1 + 8), *(char **)(a1 + 16), (char *)&v32, v33);
  v32 = 0;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a1 + 8), *(char **)(a1 + 16), (char *)&v32, v33);
  v32 = v24;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a1 + 8), *(char **)(a1 + 16), (char *)&v32, v33);
  v26 = *(unsigned __int8 **)(a1 + 16);
  v27 = *(unsigned __int8 **)(a1 + 8);
  v28 = v26 - v27;
  if (v26 == v27)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    if (v28 <= 1)
      v28 = 1;
    do
    {
      v30 = *v27++;
      v29 ^= (v29 << 6) + (v29 >> 2) - 0x61C8864680B583EBLL + v30;
      --v28;
    }
    while (v28);
  }
  *(_QWORD *)(a1 + 72) = v29;
  *(_QWORD *)(a1 + 88) = a6;
}

uint64_t md::ElevationRequestUpdater::updateRequest(uint64_t a1, char **a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t result;
  _WORD *v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  _WORD *v14;
  int32x2_t *v15;
  __int32 v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  unsigned __int16 v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[4];
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  char v35[4];
  int v36;
  _BYTE v37[8];
  void *v38;
  void *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  QuadTile v43;
  _BYTE v44[4];
  int32x2_t v45;

  v3 = atomic_load((unsigned __int8 *)a1);
  if ((v3 & 1) == 0)
    return 0;
  v8 = *(_WORD **)a3;
  v7 = *(_WORD **)(a3 + 8);
  v9 = *(_WORD **)a3;
  if (*(_WORD **)a3 != v7)
  {
    do
    {
      if (*v9 == 50)
        goto LABEL_8;
      v9 += 24;
    }
    while (v9 != v7);
    v9 = *(_WORD **)(a3 + 8);
LABEL_8:
    while (*v8 != 20)
    {
      v8 += 24;
      if (v8 == v7)
      {
        v8 = *(_WORD **)(a3 + 8);
        break;
      }
    }
  }
  result = 0;
  if (v9 == v7 && v8 == v7)
  {
    v10 = *((_QWORD *)*a2 + 15);
    v11 = (_WORD *)*((_QWORD *)*a2 + 16);
    if ((_WORD *)v10 != v11)
    {
      v12 = (_WORD *)*((_QWORD *)*a2 + 15);
      while (*v12 != 20)
      {
        v12 += 24;
        if (v12 == v11)
          goto LABEL_24;
      }
      if (v12 != v11)
      {
        v13 = *((_QWORD *)*a2 + 15);
        while (*(_WORD *)v13 != 20)
        {
          v13 += 48;
          if ((_WORD *)v13 == v11)
          {
            v13 = *((_QWORD *)*a2 + 16);
            break;
          }
        }
        if (*(_QWORD *)(v13 + 32))
          return 0;
      }
LABEL_24:
      v14 = (_WORD *)*((_QWORD *)*a2 + 15);
      while (*v14 != 50)
      {
        v14 += 24;
        if (v14 == v11)
          goto LABEL_33;
      }
      if (v14 != v11)
      {
        while (*(_WORD *)v10 != 50)
        {
          v10 += 48;
          if ((_WORD *)v10 == v11)
          {
            v10 = *((_QWORD *)*a2 + 16);
            break;
          }
        }
        if (*(_QWORD *)(v10 + 32))
          return 0;
      }
    }
LABEL_33:
    v15 = (int32x2_t *)*((_QWORD *)*a2 + 2);
    v16 = v15[1].i32[0];
    v44[0] = v15[1].i32[1];
    v44[1] = v16;
    v45 = vrev64_s32(*v15);
    v17 = *(_QWORD **)(a1 + 24);
    v18 = v17[1];
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _BYTE *))(*v17 + 16))(&v42, v17, 20, v44);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(&v40, v18, 20);
    if ((_BYTE)v42 && (_BYTE)v40 && HIDWORD(v40) <= v43._level && v41 >= v43._level)
    {
      v19 = *a2;
      v20 = **a2;
      v21 = *((_QWORD *)*a2 + 14);
      v35[0] = 0;
      if (v19[96])
      {
        v36 = *((_DWORD *)v19 + 25);
        v35[0] = 1;
      }
      md::ElevationRequestUpdater::createResourceKey((uint64_t)v37, ***(QuadTile ****)(a1 + 8), v20, 20, &v43._type, v21, (uint64_t)v35);
      v22 = md::FlyoverMetaData::tileType(*(md::FlyoverMetaData **)(a1 + 8), &v43, 0);
      v23 = v22 > 0xFFu && v22 == 1;
      v24 = v23;
      if (v23)
        gdc::LayerDataRequest::request((uint64_t)*a2, (uint64_t)v37, 0);
      if (v38 != v39)
        free(v38);
      if ((v24 & 1) != 0)
        return 1;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(&v32, v18, 50, v44);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(&v30, v18, 50);
    if (!(_BYTE)v32 || !(_BYTE)v30)
      return 0;
    result = 0;
    if (HIDWORD(v30) <= v34 && v31 >= v34)
    {
      v25 = (uint64_t)*a2;
      v26 = **a2;
      v27 = *((_QWORD *)*a2 + 14);
      v28[0] = 0;
      if (*(_BYTE *)(v25 + 96))
      {
        v29 = *(_DWORD *)(v25 + 100);
        v28[0] = 1;
      }
      md::ElevationRequestUpdater::createResourceKey((uint64_t)v37, ***(QuadTile ****)(a1 + 8), v26, 50, &v33, v27, (uint64_t)v28);
      gdc::LayerDataRequest::request((uint64_t)*a2, (uint64_t)v37, 0);
      if (v38 != v39)
        free(v38);
      return 1;
    }
  }
  return result;
}

void sub_19F7ADE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void md::ProgressiveLodRibbon::dpSimplifyProgressive(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v6;
  double *v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;

  v4 = a3 + 1;
  if ((int)a3 + 1 < a4)
  {
    v6 = a3;
    v9 = (double *)(a2 + 24 * a4);
    v10 = a2 + 16;
    do
    {
      v11 = (double *)(a2 + 24 * v6);
      v12 = *v11;
      v13 = v11[1];
      v14 = *v9 - *v11;
      v15 = v9[1] - v13;
      v16 = v11[2];
      v17 = v9[2] - v16;
      v18 = v14 * v14 + v15 * v15 + v17 * v17;
      LODWORD(v19) = 0;
      v20 = (double *)(v10 + 24 * v4);
      if (v18 <= 1.0e-15)
      {
        v29 = 0.0;
        do
        {
          v30 = *(v20 - 2);
          v31 = *(v20 - 1);
          v32 = *v20;
          v20 += 3;
          v33 = (v30 - v12) * (v30 - v12) + (v31 - v13) * (v31 - v13) + (v32 - v16) * (v32 - v16);
          v28 = fmax(v33, v29);
          if (v33 <= v29)
            v19 = v19;
          else
            v19 = v4;
          ++v4;
          v29 = v28;
        }
        while (a4 != v4);
      }
      else
      {
        v21 = 0.0;
        v22 = 1.0 / v18;
        do
        {
          v23 = *(v20 - 2);
          v24 = *(v20 - 1);
          v25 = *v20;
          v20 += 3;
          v26 = fmin(fmax(((v23 - v12) * v14 + (v24 - v13) * v15 + (v25 - v16) * v17) * v22, 0.0), 1.0);
          v27 = (v23 - (v12 + v26 * v14)) * (v23 - (v12 + v26 * v14))
              + (v24 - (v13 + v26 * v15)) * (v24 - (v13 + v26 * v15))
              + (v25 - (v16 + v26 * v17)) * (v25 - (v16 + v26 * v17));
          v28 = fmax(v27, v21);
          if (v27 <= v21)
            v19 = v19;
          else
            v19 = v4;
          ++v4;
          v21 = v28;
        }
        while (a4 != v4);
      }
      if (v28 == 0.0)
        break;
      v34 = (int)(0.5 - log2(*(double *)(a1 + 120) * (*(double *)(a1 + 120) * v28)) * 0.5);
      if (v34 > 64)
        break;
      md::ProgressiveLodRibbon::dpSimplifyProgressive(a1, a2, v6, v19);
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v34;
      v4 = v19 + 1;
      v6 = v19;
    }
    while ((int)v19 + 1 < a4);
  }
}

void std::__shared_ptr_emplace<md::ProgressiveLodRibbon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ProgressiveLodRibbon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ProgressiveLodRibbon>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  v4 = a1[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v18 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(v6 + 32) = a2[4];
      *(_OWORD *)(v6 + 16) = v18;
      v20 = a2[5];
      v19 = a2[6];
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(v6 + 48);
      *(_QWORD *)(v6 + 40) = v20;
      *(_QWORD *)(v6 + 48) = v19;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v17 = *(_QWORD *)v6;
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (uint64_t *)*a2;
      v6 = v17;
      if (!v17)
        goto LABEL_5;
    }
    do
    {
      v26 = (_QWORD *)v6;
      v6 = *(_QWORD *)v6;
      v27 = (std::__shared_weak_count *)v26[6];
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      operator delete(v26);
    }
    while (v6);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      v7 = operator new(0x38uLL);
      *v7 = 0;
      v7[1] = 0;
      v8 = *((unsigned __int8 *)a2 + 17);
      v10 = *((_DWORD *)a2 + 5);
      v9 = *((_DWORD *)a2 + 6);
      v11 = *((unsigned __int8 *)a2 + 16);
      *((_BYTE *)v7 + 16) = v11;
      *((_BYTE *)v7 + 17) = v8;
      *((_DWORD *)v7 + 5) = v10;
      *((_DWORD *)v7 + 6) = v9;
      v12 = a2[6];
      v7[5] = a2[5];
      v7[6] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v11 = *((unsigned __int8 *)v7 + 16);
        v8 = *((unsigned __int8 *)v7 + 17);
        v10 = *((_DWORD *)v7 + 5);
        v9 = *((_DWORD *)v7 + 6);
      }
      v15 = (v8
           - 0x61C8864680B583EBLL
           + ((v11 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v11 - 0x61C8864680B583EBLL) >> 2)) ^ (v11 - 0x61C8864680B583EBLL);
      v16 = (v10 - 0x61C8864680B583EBLL + (v15 << 6) + (v15 >> 2)) ^ v15;
      v7[1] = (v9 - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi((uint64_t)a1, (uint64_t)v7);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19F7AE2A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::__assign_multi<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (_QWORD *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        do
        {
          v9 = v10;
          v14 = *((unsigned __int8 *)v13 + 25);
          *((_BYTE *)v12 + 25) = v14;
          v15 = *v8;
          v16 = a1 + 1;
          v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v16 = v15;
                if (v14 <= *((unsigned __int8 *)v15 + 25))
                  break;
                v15 = (uint64_t *)*v15;
                v17 = (uint64_t **)v16;
                if (!*v16)
                  goto LABEL_20;
              }
              v15 = (uint64_t *)v15[1];
            }
            while (v15);
            v17 = (uint64_t **)(v16 + 1);
          }
LABEL_20:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = (uint64_t *)**a1;
          if (v18)
          {
            *a1 = v18;
            v12 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (_QWORD *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (_QWORD *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (_QWORD *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (_QWORD *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (!v9)
            break;
          v12 = v9;
          v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 1);
    do
    {
      v25 = (uint64_t *)operator new(0x20uLL);
      v26 = v25;
      v27 = *((unsigned __int8 *)v4 + 25);
      *((_BYTE *)v25 + 25) = v27;
      v28 = *v24;
      v29 = a1 + 1;
      v30 = a1 + 1;
      if (*v24)
      {
        do
        {
          while (1)
          {
            v29 = v28;
            if (v27 <= *((unsigned __int8 *)v28 + 25))
              break;
            v28 = (uint64_t **)*v28;
            v30 = v29;
            if (!*v29)
              goto LABEL_56;
          }
          v28 = (uint64_t **)v28[1];
        }
        while (v28);
        v30 = v29 + 1;
      }
LABEL_56:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = (uint64_t *)**a1;
      if (v31)
      {
        *a1 = v31;
        v26 = *v30;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
    }
    while (v33 != a3);
  }
}

void md::RouteSimplifier::simplifiedRibbonIndices(uint64_t a1, void *a2, int a3, int a4, _QWORD *a5, double a6)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  unint64_t v37;
  char *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  char *v49;
  unsigned int v50;
  char *v51;
  unint64_t v52;
  unsigned int *v53;
  char *v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  unsigned int *v67;
  unint64_t v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  unint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _DWORD *v104;
  char *v105;
  _DWORD *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  id v123;

  v123 = a2;
  if (!objc_msgSend(v123, "pointCount"))
    goto LABEL_13;
  v13 = *(_QWORD **)(a1 + 16);
  v12 = a1 + 16;
  v11 = v13;
  v14 = log2(*(double *)(v12 + 16) * a6);
  if (!v13)
    goto LABEL_13;
  v15 = (_QWORD *)v12;
  do
  {
    v16 = v11[4];
    v17 = v16 >= (unint64_t)v123;
    if (v16 >= (unint64_t)v123)
      v18 = v11;
    else
      v18 = v11 + 1;
    if (v17)
      v15 = v11;
    v11 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 == (_QWORD *)v12 || v15[4] > (unint64_t)v123)
  {
LABEL_13:
    a5[1] = *a5;
    v19 = v123;
    goto LABEL_14;
  }
  v20 = v15[5];
  v21 = (int)(0.5 - v14);
  v22 = (char *)*a5;
  a5[1] = *a5;
  v121 = a4;
  v23 = (*(_DWORD *)(v20 + 8) - *(_DWORD *)v20);
  v24 = (v23
       + *(unsigned int *)(*(_QWORD *)(v20 + 96) + 4 * (int)(0.5 - v14))
       * (unint64_t)(a4 - a3 + 1)
       - 1)
      / v23
      + 2;
  v25 = (char *)a5[2];
  if (v24 <= (v25 - v22) >> 2)
  {
    v26 = v22;
    if (v22 < v25)
    {
LABEL_20:
      *(_DWORD *)v26 = a3;
      v27 = v26 + 4;
      v28 = a4;
      goto LABEL_41;
    }
  }
  else
  {
    if (v24 >> 62)
      goto LABEL_150;
    v26 = (char *)operator new(4 * v24);
    v25 = &v26[4 * v24];
    *a5 = v26;
    a5[1] = v26;
    a5[2] = v25;
    if (v22)
    {
      operator delete(v22);
      v26 = (char *)a5[1];
      v25 = (char *)a5[2];
    }
    if (v26 < v25)
      goto LABEL_20;
  }
  v29 = (char *)*a5;
  v30 = (uint64_t)&v26[-*a5];
  v31 = v30 >> 2;
  v32 = (v30 >> 2) + 1;
  if (v32 >> 62)
    goto LABEL_150;
  v33 = v25 - v29;
  if (v33 >> 1 > v32)
    v32 = v33 >> 1;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
    v34 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
  {
    if (v34 >> 62)
      goto LABEL_151;
    v35 = operator new(4 * v34);
  }
  else
  {
    v35 = 0;
  }
  v36 = &v35[4 * v31];
  *v36 = a3;
  v27 = (char *)(v36 + 1);
  if (v26 == v29)
  {
    v28 = v121;
    goto LABEL_39;
  }
  v37 = v26 - v29 - 4;
  if (v37 < 0x2C || (unint64_t)(v26 - v35 - v30) < 0x20)
  {
    v38 = v26;
    v28 = v121;
    do
    {
LABEL_36:
      v39 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *--v36 = v39;
    }
    while (v38 != v29);
    goto LABEL_39;
  }
  v109 = (v37 >> 2) + 1;
  v38 = &v26[-4 * (v109 & 0x7FFFFFFFFFFFFFF8)];
  v110 = &v35[4 * v31 - 16];
  v111 = v26 - 16;
  v112 = v109 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v113 = *(_OWORD *)v111;
    *(v110 - 1) = *((_OWORD *)v111 - 1);
    *v110 = v113;
    v110 -= 2;
    v111 -= 32;
    v112 -= 8;
  }
  while (v112);
  v36 -= v109 & 0x7FFFFFFFFFFFFFF8;
  v28 = v121;
  if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_36;
LABEL_39:
  *a5 = v36;
  a5[1] = v27;
  a5[2] = &v35[4 * v34];
  if (v29)
    operator delete(v29);
LABEL_41:
  a5[1] = v27;
  v120 = a3;
  v40 = a3 + 1;
  v41 = v28 - 1;
  v122 = v21;
  if (*(unsigned __int8 *)(v20 + 24) < v21)
  {
    while (1)
    {
      if (v40 > v41)
        goto LABEL_121;
      if (*(unsigned __int8 *)(*(_QWORD *)v20 + v40) <= v21)
        break;
LABEL_57:
      ++v40;
    }
    v59 = a5[2];
    if ((unint64_t)v27 < v59)
    {
      *(_DWORD *)v27 = v40;
      v58 = v27 + 4;
LABEL_56:
      a5[1] = v58;
      v27 = v58;
      goto LABEL_57;
    }
    v60 = (char *)*a5;
    v61 = (uint64_t)&v27[-*a5];
    v62 = v61 >> 2;
    v63 = (v61 >> 2) + 1;
    if (v63 >> 62)
      goto LABEL_150;
    v64 = v59 - (_QWORD)v60;
    if (v64 >> 1 > v63)
      v63 = v64 >> 1;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
      v65 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 62)
        goto LABEL_151;
      v66 = operator new(4 * v65);
    }
    else
    {
      v66 = 0;
    }
    v67 = (unsigned int *)&v66[4 * v62];
    *v67 = v40;
    v58 = (char *)(v67 + 1);
    if (v27 != v60)
    {
      v68 = v27 - 4 - v60;
      if (v68 >= 0xBC)
      {
        if (&v66[v61 - 4 - (v68 & 0xFFFFFFFFFFFFFFFCLL)] > &v66[v61 - 4])
        {
          v69 = v27;
        }
        else if (&v27[-(v68 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v27 - 4)
        {
          v69 = v27;
        }
        else if ((unint64_t)(v27 - v66 - v61) >= 0x20)
        {
          v71 = (v68 >> 2) + 1;
          v69 = &v27[-4 * (v71 & 0x7FFFFFFFFFFFFFF8)];
          v72 = &v66[4 * v62 - 16];
          v73 = v27 - 16;
          v74 = v71 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v75 = *(_OWORD *)v73;
            *(v72 - 1) = *((_OWORD *)v73 - 1);
            *v72 = v75;
            v72 -= 2;
            v73 -= 32;
            v74 -= 8;
          }
          while (v74);
          v67 -= v71 & 0x7FFFFFFFFFFFFFF8;
          if (v71 == (v71 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_75;
        }
        else
        {
          v69 = v27;
        }
      }
      else
      {
        v69 = v27;
      }
      do
      {
        v70 = *((_DWORD *)v69 - 1);
        v69 -= 4;
        *--v67 = v70;
      }
      while (v69 != v60);
    }
LABEL_75:
    *a5 = v67;
    a5[1] = v58;
    a5[2] = &v66[4 * v65];
    if (v60)
      operator delete(v60);
    v21 = v122;
    goto LABEL_56;
  }
  v42 = *(char **)(v20 + 56);
  v43 = *(char **)(v20 + 64);
  if (v43 != v42)
  {
    v44 = (v43 - v42) >> 2;
    v45 = *(char **)(v20 + 56);
    v46 = v44;
    do
    {
      v47 = v46 >> 1;
      v48 = (unsigned int *)&v45[4 * (v46 >> 1)];
      v50 = *v48;
      v49 = (char *)(v48 + 1);
      v46 += ~(v46 >> 1);
      if (v50 < v40)
        v45 = v49;
      else
        v46 = v47;
    }
    while (v46);
    v51 = *(char **)(v20 + 56);
    do
    {
      v52 = v44 >> 1;
      v53 = (unsigned int *)&v51[4 * (v44 >> 1)];
      v55 = *v53;
      v54 = (char *)(v53 + 1);
      v44 += ~(v44 >> 1);
      if (v41 < v55)
        v44 = v52;
      else
        v51 = v54;
    }
    while (v44);
    if (v45 != v43)
    {
      v56 = (unint64_t)(v45 - v42) >> 2;
      v57 = (unint64_t)(v51 - v42 - 4) >> 2;
      while (1)
      {
        if (v56 > v57)
          goto LABEL_121;
        v77 = v56;
        if (*(unsigned __int8 *)(*(_QWORD *)(v20 + 32) + v56) <= v21)
          break;
LABEL_90:
        LODWORD(v56) = v77 + 1;
      }
      v78 = *(_QWORD *)(v20 + 56);
      v79 = a5[2];
      if ((unint64_t)v27 < v79)
      {
        *(_DWORD *)v27 = *(_DWORD *)(v78 + 4 * v56);
        v76 = v27 + 4;
LABEL_89:
        a5[1] = v76;
        v27 = v76;
        goto LABEL_90;
      }
      v80 = (char *)*a5;
      v81 = (uint64_t)&v27[-*a5];
      v82 = v81 >> 2;
      v83 = (v81 >> 2) + 1;
      if (v83 >> 62)
        goto LABEL_150;
      v84 = v79 - (_QWORD)v80;
      if (v84 >> 1 > v83)
        v83 = v84 >> 1;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
        v85 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v85 = v83;
      if (v85)
      {
        if (v85 >> 62)
          goto LABEL_151;
        v86 = operator new(4 * v85);
      }
      else
      {
        v86 = 0;
      }
      v87 = &v86[4 * v82];
      *v87 = *(_DWORD *)(v78 + 4 * v77);
      v76 = (char *)(v87 + 1);
      if (v27 != v80)
      {
        v88 = v27 - 4 - v80;
        if (v88 >= 0xBC)
        {
          if (&v86[v81 - 4 - (v88 & 0xFFFFFFFFFFFFFFFCLL)] > &v86[v81 - 4])
          {
            v89 = v27;
          }
          else if (&v27[-(v88 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v27 - 4)
          {
            v89 = v27;
          }
          else if ((unint64_t)(v27 - v86 - v81) >= 0x20)
          {
            v91 = (v88 >> 2) + 1;
            v89 = &v27[-4 * (v91 & 0x7FFFFFFFFFFFFFF8)];
            v92 = &v86[4 * v82 - 16];
            v93 = v27 - 16;
            v94 = v91 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v95 = *(_OWORD *)v93;
              *(v92 - 1) = *((_OWORD *)v93 - 1);
              *v92 = v95;
              v92 -= 2;
              v93 -= 32;
              v94 -= 8;
            }
            while (v94);
            v87 -= v91 & 0x7FFFFFFFFFFFFFF8;
            if (v91 == (v91 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_108;
          }
          else
          {
            v89 = v27;
          }
        }
        else
        {
          v89 = v27;
        }
        do
        {
          v90 = *((_DWORD *)v89 - 1);
          v89 -= 4;
          *--v87 = v90;
        }
        while (v89 != v80);
      }
LABEL_108:
      *a5 = v87;
      a5[1] = v76;
      a5[2] = &v86[4 * v85];
      if (v80)
        operator delete(v80);
      v21 = v122;
      goto LABEL_89;
    }
  }
LABEL_121:
  v19 = v123;
  if (v121 == v120)
    goto LABEL_14;
  v96 = a5[2];
  if ((unint64_t)v27 < v96)
  {
    *(_DWORD *)v27 = v121;
    a5[1] = v27 + 4;
    goto LABEL_14;
  }
  v97 = (char *)*a5;
  v98 = (uint64_t)&v27[-*a5];
  v99 = v98 >> 2;
  v100 = (v98 >> 2) + 1;
  if (v100 >> 62)
LABEL_150:
    abort();
  v101 = v96 - (_QWORD)v97;
  if (v101 >> 1 > v100)
    v100 = v101 >> 1;
  if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
    v102 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v102 = v100;
  if (v102)
  {
    if (!(v102 >> 62))
    {
      v103 = operator new(4 * v102);
      goto LABEL_134;
    }
LABEL_151:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v103 = 0;
LABEL_134:
  v104 = &v103[4 * v99];
  v105 = &v103[4 * v102];
  *v104 = v121;
  v106 = v104 + 1;
  if (v27 != v97)
  {
    v107 = v27 - v97 - 4;
    if (v107 >= 0x2C)
    {
      if ((unint64_t)(v27 - &v103[v98]) >= 0x20)
      {
        v114 = (v107 >> 2) + 1;
        v108 = &v27[-4 * (v114 & 0x7FFFFFFFFFFFFFF8)];
        v115 = &v103[4 * v99 - 16];
        v116 = v27 - 16;
        v117 = v114 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v118 = *(_OWORD *)v116;
          *(v115 - 1) = *((_OWORD *)v116 - 1);
          *v115 = v118;
          v115 -= 2;
          v116 -= 32;
          v117 -= 8;
        }
        while (v117);
        v104 -= v114 & 0x7FFFFFFFFFFFFFF8;
        if (v114 == (v114 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_147;
      }
      else
      {
        v108 = v27;
      }
    }
    else
    {
      v108 = v27;
    }
    do
    {
      v119 = *((_DWORD *)v108 - 1);
      v108 -= 4;
      *--v104 = v119;
    }
    while (v108 != v97);
  }
LABEL_147:
  *a5 = v104;
  a5[1] = v106;
  a5[2] = v105;
  if (v97)
    operator delete(v97);
  v19 = v123;
  a5[1] = v106;
LABEL_14:

}

void sub_19F7AED64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

double md::RouteSimplifier::worldPointForPolylineCoordinate(md::RouteSimplifier *this, const GEOComposedRoute *a2, const PolylineCoordinate *a3)
{
  const GEOComposedRoute *v5;
  double v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  double v30;
  __double2 v31;
  long double v33;
  _QWORD v34[3];

  v5 = a2;
  v6 = 0.0;
  if (-[GEOComposedRoute pointCount](v5, "pointCount"))
  {
    v7 = (_QWORD *)*((_QWORD *)this + 2);
    if (v7)
    {
      v8 = (_QWORD *)((char *)this + 16);
      do
      {
        v9 = v7[4];
        v10 = v9 >= (unint64_t)v5;
        if (v9 >= (unint64_t)v5)
          v11 = v7;
        else
          v11 = v7 + 1;
        if (v10)
          v8 = v7;
        v7 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != (_QWORD *)((char *)this + 16) && v8[4] <= (unint64_t)v5)
      {
        v12 = v8[5];
        objc_msgSend(*(id *)(v12 + 88), "pointAtRouteCoordinate:", *a3);
        v14 = v13;
        v16 = v15;
        v18 = v17;
        v19 = **(uint64_t ***)(v12 + 80);
        if (v19 != *(uint64_t **)(*(_QWORD *)(v12 + 80) + 8) && *v19 != 0xAB4154EC82453679)
        {
          v20 = v19 + 5;
          do
          {
            v21 = *v20;
            v20 += 5;
          }
          while (v21 != 0xAB4154EC82453679);
          v19 = v20 - 5;
        }
        v22 = v19[3];
        v23 = (std::__shared_weak_count *)v19[4];
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        *(double *)v34 = v14;
        *(double *)&v34[1] = v16;
        *(double *)&v34[2] = v18;
        v27 = (*(uint64_t (**)(uint64_t, _QWORD *, char *))(*(_QWORD *)v22 + 16))(v22, v34, (char *)this + 48);
        v28 = *(float *)&v27;
        if ((v27 & 0xFF00000000) == 0)
        {
          v29 = v18;
          v28 = v29;
        }
        v30 = *((float *)this + 11) + v28 * *((float *)this + 10);
        if (*(_BYTE *)(v12 + 128))
        {
          v31 = __sincos_stret(v14 * 0.0174532925);
          v6 = (v30 + 6378137.0 / sqrt(v31.__sinval * v31.__sinval * -0.00669437999 + 1.0))
             * v31.__cosval
             * __sincos_stret(v16 * 0.0174532925).__cosval;
        }
        else
        {
          v33 = tan(v14 * 0.00872664626 + 0.785398163);
          v6 = v16 * 0.00277777778 + 0.5;
          log(v33);
        }
      }
    }
  }

  return v6;
}

void sub_19F7AEFF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void altitude::GlobeTileComponentViewData::~GlobeTileComponentViewData(altitude::GlobeTileComponentViewData *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::PolarFlyoverLayerDataSource::~PolarFlyoverLayerDataSource(md::PolarFlyoverLayerDataSource *this)
{
  md::PolarFlyoverLayerDataSource::~PolarFlyoverLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E426F908;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 103);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)*((_QWORD *)this + 99);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)*((_QWORD *)this + 99);
  if (v5)
  {
LABEL_6:
    *((_QWORD *)this + 100) = v5;
    operator delete(v5);
  }
LABEL_7:
  *((_QWORD *)this + 96) = &off_1E42B4D50;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::PolarFlyoverLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  int *v22;
  int v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  float *v38;
  _QWORD *v39;
  int *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__sp_mut *sp_mut;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  gdc::Registry *v62;
  uint64_t v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  char *v83;
  size_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __n128 v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  void *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  gdc::Registry *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  gdc::Registry *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void *v138[3];
  void *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  char v148;
  char v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void *__p;
  char *v163;
  _QWORD *v164;
  __int128 v165;
  uint64_t v166;
  uint8_t buf[16];
  uint64_t v168;
  uint64_t v169;
  void *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  _QWORD v175[3];
  _QWORD *v176;
  uint64_t v177;

  v5 = (_QWORD *)a1;
  v177 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned __int16 *)*a3;
  v8 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*v7 != *(unsigned __int16 *)(a1 + 584))
    {
      v7 += 24;
      if (v7 == v8)
        goto LABEL_16;
    }
  }
  if (v7 == v8 || *((_QWORD *)v7 + 4) != 1)
  {
LABEL_16:
    v10 = 0;
LABEL_17:
    v144 = v10;
    v145 = 0;
    if (!v10)
      goto LABEL_15;
    goto LABEL_18;
  }
  v9 = *((_QWORD *)v7 + 3);
  v10 = *(_QWORD *)(v9 + 112);
  v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v144 = v10;
  v145 = v11;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (v16)
  {
    v10 = v144;
    if (!v144)
    {
LABEL_15:
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_189;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v10 = v144;
    if (!v144)
      goto LABEL_15;
  }
LABEL_18:
  v133 = a4;
  md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)const::$_0::operator()(&v142, (uint64_t)v5, v10);
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v17 = (unsigned __int16 *)v5[100];
  v18 = (unsigned __int16 *)v5[99];
  v19 = (char *)v17 - (char *)v18;
  if (v17 != v18)
  {
    if ((unint64_t)v19 >= 0x1FFFFFFFFFFFFFFFLL)
      abort();
    v139 = operator new(8 * v19);
    v140 = (char *)v139;
    v141 = (char *)v139 + 16 * (v19 >> 1);
    v20 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    v21 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    v22 = &dword_19F029000;
    while (1)
    {
      v23 = *v18;
      v24 = (unsigned __int16 *)*a3;
      v25 = (unsigned __int16 *)a3[1];
      if ((unsigned __int16 *)*a3 != v25)
      {
        while (*v24 != v23)
        {
          v24 += 24;
          if (v24 == v25)
            goto LABEL_37;
        }
      }
      if (v24 == v25 || *((_QWORD *)v24 + 4) != 1)
        break;
      v26 = *((_QWORD *)v24 + 3);
      v27 = *(_QWORD *)(v26 + 112);
      v28 = *(std::__shared_weak_count **)(v26 + 120);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v146 = v27;
        v147 = v28;
        do
          v31 = __ldxr(v29);
        while (__stxr(v31 + 1, v29));
        do
          v32 = __ldaxr(v29);
        while (__stlxr(v32 - 1, v29));
        if (v32)
        {
          v27 = v146;
          if (!v146)
            goto LABEL_38;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          v27 = v146;
          if (!v146)
            goto LABEL_38;
        }
      }
      else
      {
        v146 = *(_QWORD *)(v26 + 112);
        v147 = 0;
        if (!v27)
          goto LABEL_38;
      }
      md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)const::$_0::operator()(buf, (uint64_t)v5, v27);
      v37 = v140;
      if (v140 >= v141)
      {
        v38 = v20;
        v39 = v5;
        v40 = v22;
        v41 = (char *)v139;
        v42 = (v140 - (_BYTE *)v139) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          abort();
        v44 = v141 - (_BYTE *)v139;
        if ((v141 - (_BYTE *)v139) >> 3 > v43)
          v43 = v44 >> 3;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v46 = (char *)operator new(16 * v45);
        v47 = &v46[16 * v42];
        *(_OWORD *)v47 = *(_OWORD *)buf;
        v48 = v47 + 16;
        memset(buf, 0, sizeof(buf));
        if (v37 == v41)
        {
          v139 = v47;
          v141 = &v46[16 * v45];
          v22 = v40;
          if (v37)
            goto LABEL_71;
        }
        else
        {
          v49 = v37;
          do
          {
            v50 = *((_OWORD *)v49 - 1);
            v49 -= 16;
            *((_OWORD *)v47 - 1) = v50;
            v47 -= 16;
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
          }
          while (v49 != v41);
          v139 = v47;
          v140 = v48;
          v141 = &v46[16 * v45];
          do
          {
            v51 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v37 -= 16;
          }
          while (v37 != v41);
          v37 = v41;
          v22 = v40;
          if (v37)
LABEL_71:
            operator delete(v37);
        }
        v54 = *(std::__shared_weak_count **)&buf[8];
        v140 = v48;
        v5 = v39;
        v20 = v38;
        v21 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
        if (*(_QWORD *)&buf[8])
        {
          v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        goto LABEL_43;
      }
      *(_OWORD *)v140 = *(_OWORD *)buf;
      v140 = v37 + 16;
LABEL_43:
      v34 = v147;
      if (v147)
      {
        v35 = (unint64_t *)&v147->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (++v18 == v17)
        goto LABEL_79;
    }
LABEL_37:
    v146 = 0;
    v147 = 0;
LABEL_38:
    if (*((_QWORD *)v20 + 294) != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v33 = *((id *)v21 + 231);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v23;
      _os_log_impl(v22, v33, OS_LOG_TYPE_DEBUG, "Missing additional resource raster tile %d!", buf, 8u);
    }

    goto LABEL_43;
  }
LABEL_79:
  memset(v138, 0, sizeof(v138));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v138);
  sp_mut = std::__get_sp_mut(v5 + 94);
  std::__sp_mut::lock(sp_mut);
  v58 = v5[94];
  v59 = (std::__shared_weak_count *)v5[95];
  v136 = v58;
  v137 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  std::__sp_mut::unlock(sp_mut);
  md::RegistryManager::vendRegistry((md::RegistryManager *)&v135, v58);
  v62 = v135;
  v63 = v5[102];
  v64 = (char *)operator new(0x328uLL);
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  *(_QWORD *)v64 = &off_1E428A060;
  v146 = 0;
  v147 = 0;
  md::MapTileData::MapTileData((uint64_t)(v64 + 24), a2, (uint64_t)v138, (uint64_t)&v146, 1);
  v66 = v142;
  v65 = v143;
  *((_QWORD *)v64 + 3) = &off_1E426F188;
  *((_QWORD *)v64 + 82) = &unk_1E426F1D0;
  *((_QWORD *)v64 + 93) = v66;
  *((_QWORD *)v64 + 94) = v65;
  if (v65)
  {
    v67 = (unint64_t *)&v65->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  *((_QWORD *)v64 + 97) = 0;
  *(_OWORD *)(v64 + 760) = 0u;
  v69 = (char *)v139;
  v70 = v140;
  v71 = v140 - (_BYTE *)v139;
  if (v140 != v139)
  {
    if (v71 < 0)
      abort();
    v72 = operator new(v140 - (_BYTE *)v139);
    *((_QWORD *)v64 + 95) = v72;
    *((_QWORD *)v64 + 96) = v72;
    *((_QWORD *)v64 + 97) = &v72[2 * (v71 >> 4)];
    do
    {
      *v72 = *(_QWORD *)v69;
      v73 = *((_QWORD *)v69 + 1);
      v72[1] = v73;
      if (v73)
      {
        v74 = (unint64_t *)(v73 + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      v69 += 16;
      v72 += 2;
    }
    while (v69 != v70);
    *((_QWORD *)v64 + 96) = v72;
  }
  *((_QWORD *)v64 + 98) = v58;
  *((_QWORD *)v64 + 99) = v59;
  if (v59)
  {
    v76 = (unint64_t *)&v59->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  *((_QWORD *)v64 + 100) = v62;
  v78 = *((_QWORD *)v64 + 93);
  v79 = (std::__shared_weak_count *)*((_QWORD *)v64 + 94);
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = (char *)*((_QWORD *)v64 + 95);
  v83 = (char *)*((_QWORD *)v64 + 96);
  v84 = v83 - v82;
  if (v83 == v82)
  {
    v85 = 0;
    v86 = 0;
  }
  else
  {
    if ((v84 & 0x8000000000000000) != 0)
      abort();
    v85 = (char *)operator new(v84);
    v86 = v85;
    do
    {
      *(_QWORD *)v86 = *(_QWORD *)v82;
      v87 = *((_QWORD *)v82 + 1);
      *((_QWORD *)v86 + 1) = v87;
      if (v87)
      {
        v88 = (unint64_t *)(v87 + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v82 += 16;
      v86 += 16;
    }
    while (v82 != v83);
  }
  v146 = v63;
  LOBYTE(v147) = 0;
  v148 = 0;
  v149 = 0;
  v150 = xmmword_19FFB3470;
  v151 = 0x80000000800000;
  v153 = 0;
  v152 = 1065353216;
  v154 = 0x3F80000000000000;
  v155 = 0;
  v157 = 1065353216;
  v156 = 0;
  v159 = 0;
  v158 = 0;
  if (v63)
  {
    *(_QWORD *)buf = 1065353216;
    *(_QWORD *)&buf[8] = 0;
    v168 = 0x3F80000000000000;
    v169 = 0;
    v170 = 0;
    v173 = 0;
    v172 = 0;
    v171 = 1065353216;
    v174 = 1065353216;
    v165 = xmmword_19FFB3470;
    v166 = 0x80000000800000;
    v175[0] = &off_1E42D8AB0;
    v175[1] = &v165;
    v175[2] = buf;
    v176 = v175;
    v90.n128_u64[0] = (unint64_t)gm::Box<float,3>::forEachCorner((uint64_t *)(v63 + 36), (uint64_t)v175);
    v91 = v176;
    if (v176 == v175)
    {
      v92 = 4;
      v91 = v175;
    }
    else
    {
      if (!v176)
      {
LABEL_115:
        v150 = v165;
        v151 = v166;
        goto LABEL_116;
      }
      v92 = 5;
    }
    (*(void (**)(__n128))(*v91 + 8 * v92))(v90);
    goto LABEL_115;
  }
LABEL_116:
  v160 = v78;
  v161 = v79;
  if (v79)
  {
    v93 = (unint64_t *)&v79->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  __p = 0;
  v163 = 0;
  v164 = 0;
  v95 = v86 - v85;
  if (v86 != v85)
  {
    if (v95 < 0)
      abort();
    v96 = operator new(v86 - v85);
    __p = v96;
    v164 = &v96[2 * (v95 >> 4)];
    v97 = v85;
    do
    {
      v98 = *((_QWORD *)v97 + 1);
      *v96 = *(_QWORD *)v97;
      v96[1] = v98;
      if (v98)
      {
        v99 = (unint64_t *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v97 += 16;
      v96 += 2;
    }
    while (v97 != v86);
    v163 = (char *)v96;
  }
  v101 = gdc::Registry::create(v62);
  v102 = (uint64_t *)gdc::Registry::storage<md::components::TexturedMeshInstance>((uint64_t)v62);
  gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::emplace(v102, v101, (uint64_t)&v146);
  v103 = (char *)__p;
  if (__p)
  {
    v104 = v163;
    v105 = __p;
    if (v163 != __p)
    {
      do
      {
        v106 = (std::__shared_weak_count *)*((_QWORD *)v104 - 1);
        if (v106)
        {
          v107 = (unint64_t *)&v106->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        v104 -= 16;
      }
      while (v104 != v103);
      v105 = __p;
    }
    v163 = v103;
    operator delete(v105);
  }
  v109 = v161;
  if (!v161)
    goto LABEL_143;
  v110 = (unint64_t *)&v161->__shared_owners_;
  do
    v111 = __ldaxr(v110);
  while (__stlxr(v111 - 1, v110));
  if (v111)
  {
LABEL_143:
    if (!v85)
      goto LABEL_144;
LABEL_149:
    while (v86 != v85)
    {
      v112 = (std::__shared_weak_count *)*((_QWORD *)v86 - 1);
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v86 -= 16;
    }
    operator delete(v85);
    if (!v79)
      goto LABEL_160;
    goto LABEL_156;
  }
  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
  std::__shared_weak_count::__release_weak(v109);
  if (v85)
    goto LABEL_149;
LABEL_144:
  if (v79)
  {
LABEL_156:
    v115 = (unint64_t *)&v79->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_160:
  v117 = v136;
  *(_DWORD *)buf = *((_DWORD *)v64 + 8);
  gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], a2 + 8);
  LODWORD(v146) = *(_DWORD *)buf;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v147, (uint64_t)&buf[8]);
  LODWORD(v158) = 0;
  md::RegistryManager::addRegistry(v117, (uint64_t)&v146, (uint64_t *)&v135);
  if ((_DWORD)v158 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E42FA3C0[v158])(v175, &v146);
  LODWORD(v158) = -1;
  if ((void *)v168 != v170)
    free((void *)v168);
  *v133 = v64 + 24;
  v133[1] = v64;
  v118 = v135;
  v135 = 0;
  if (v118)
  {
    gdc::Registry::~Registry(v118);
    MEMORY[0x1A1AF4E00]();
  }
  v119 = v137;
  if (v137)
  {
    v120 = (unint64_t *)&v137->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v138[0])
    operator delete(v138[0]);
  v122 = (char *)v139;
  if (v139)
  {
    v123 = v140;
    if (v140 != v139)
    {
      do
      {
        v124 = (std::__shared_weak_count *)*((_QWORD *)v123 - 1);
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        v123 -= 16;
      }
      while (v123 != v122);
      v122 = (char *)v139;
    }
    operator delete(v122);
  }
  v127 = v143;
  if (v143)
  {
    v128 = (unint64_t *)&v143->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
LABEL_189:
  v130 = v145;
  if (v145)
  {
    v131 = (unint64_t *)&v145->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
}

void sub_19F7AFBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, gdc::Registry *a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  uint64_t v47;
  void *v49;

  if (a42 != -1)
    ((void (*)(uint64_t, char *))off_1E42FA3C0[a42])(v47 - 136, &a30);
  a42 = -1;
  v49 = *(void **)(v47 - 224);
  if (v49 != *(void **)(v47 - 208))
    free(v49);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t md::PolarFlyoverLayerDataSource::updateRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _BYTE *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  char v44;
  int v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  char v48;
  void *v49[9];
  char v50[8];
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[5];
  __int128 v59;

  v4 = *a2;
  v5 = *(unsigned __int16 **)(*a2 + 120);
  v6 = *(unsigned __int16 **)(*a2 + 128);
  if (v5 != v6)
  {
    while (*(unsigned __int16 *)(a1 + 584) != *v5)
    {
      v5 += 24;
      if (v5 == v6)
      {
        v5 = *(unsigned __int16 **)(*a2 + 128);
        break;
      }
    }
  }
  if (!*((_QWORD *)v5 + 4))
    return 0;
  v7 = *((_QWORD *)v5 + 3);
  v8 = v58;
  v53 = *(_QWORD *)(v7 + 16);
  v54 = v58;
  v55 = (char *)v58;
  v56 = v58;
  v57 = 32;
  v9 = *(char **)(v7 + 24);
  v10 = *(char **)(v7 + 32);
  v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) >= 0x21)
  {
    if (v11 <= 0x40)
      v12 = 64;
    else
      v12 = v10 - v9;
    v8 = malloc_type_malloc(v12, 0x100004077774924uLL);
    v13 = (char *)v54;
    v14 = v55;
    if (v54 == v55)
      goto LABEL_27;
    v15 = v55 - (_BYTE *)v54;
    if ((unint64_t)(v55 - (_BYTE *)v54) < 8)
    {
      v16 = v8;
      goto LABEL_26;
    }
    v16 = v8;
    if ((unint64_t)((char *)v8 - (_BYTE *)v54) < 0x20)
      goto LABEL_26;
    if (v15 >= 0x20)
    {
      v17 = v15 & 0xFFFFFFFFFFFFFFE0;
      v19 = (__int128 *)((char *)v54 + 16);
      v20 = v8 + 2;
      v21 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v15 == v17)
        goto LABEL_27;
      if ((v15 & 0x18) == 0)
      {
        v13 += v17;
        v16 = (char *)v8 + v17;
        goto LABEL_26;
      }
    }
    else
    {
      v17 = 0;
    }
    v23 = v15 & 0xFFFFFFFFFFFFFFF8;
    v16 = (char *)v8 + (v15 & 0xFFFFFFFFFFFFFFF8);
    v24 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
    v25 = &v13[v17];
    v26 = (_QWORD *)((char *)v8 + v17);
    do
    {
      v27 = *(_QWORD *)v25;
      v25 += 8;
      *v26++ = v27;
      v24 += 8;
    }
    while (v24);
    if (v15 == v23)
      goto LABEL_27;
    v13 += v23;
    do
    {
LABEL_26:
      v28 = *v13++;
      *v16++ = v28;
    }
    while (v13 != v14);
LABEL_27:
    v54 = v8;
    v55 = (char *)v8;
    v57 = v12;
  }
  if (v9 != v10)
  {
    if (v11 < 8)
    {
      v30 = v8;
      goto LABEL_44;
    }
    if ((unint64_t)((char *)v8 - v9) < 0x20)
    {
      v30 = v8;
      goto LABEL_44;
    }
    if (v11 >= 0x20)
    {
      v29 = v11 & 0xFFFFFFFFFFFFFFE0;
      v31 = (__int128 *)(v9 + 16);
      v32 = v8 + 2;
      v33 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v34 = *v31;
        *(v32 - 1) = *(v31 - 1);
        *v32 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 32;
      }
      while (v33);
      if (v11 == v29)
        goto LABEL_45;
      if ((v11 & 0x18) == 0)
      {
        v9 += v29;
        v30 = (char *)v8 + v29;
        goto LABEL_44;
      }
    }
    else
    {
      v29 = 0;
    }
    v35 = v11 & 0xFFFFFFFFFFFFFFF8;
    v30 = (char *)v8 + (v11 & 0xFFFFFFFFFFFFFFF8);
    v36 = v29 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v37 = (uint64_t *)&v9[v29];
    v38 = (_QWORD *)((char *)v8 + v29);
    do
    {
      v39 = *v37++;
      *v38++ = v39;
      v36 += 8;
    }
    while (v36);
    if (v11 == v35)
      goto LABEL_45;
    v9 += v35;
    do
    {
LABEL_44:
      v40 = *v9++;
      *v30++ = v40;
    }
    while (v9 != v10);
LABEL_45:
    v8 = v55;
  }
  v41 = *(_QWORD *)(v7 + 88);
  v55 = (char *)v8 + v11;
  v58[4] = v41;
  v59 = *(_OWORD *)(v7 + 96);
  v42 = *(unsigned __int16 **)(a1 + 792);
  v43 = *(unsigned __int16 **)(a1 + 800);
  if (v42 == v43)
  {
    v44 = 0;
  }
  else
  {
    v44 = 0;
    do
    {
      v45 = *v42;
      v46 = *(unsigned __int16 **)(v4 + 120);
      v47 = *(unsigned __int16 **)(v4 + 128);
      if (v46 != v47)
      {
        while (v45 != *v46)
        {
          v46 += 24;
          if (v46 == v47)
            goto LABEL_55;
        }
      }
      if (v46 == v47)
      {
LABEL_55:
        v48 = v53;
        gdc::ResourceKey::keyData((gdc::ResourceKey *)v49, &v53);
        gdc::ResourceKey::ResourceKey((uint64_t)v50, v48, v45, (uint64_t)v49, HIDWORD(v53), 2147483646);
        if (v49[0] != v49[2])
          free(v49[0]);
        gdc::LayerDataRequest::request(*a2, (uint64_t)v50, 0);
        if (v51 != v52)
          free(v51);
        v44 = 1;
      }
      ++v42;
    }
    while (v42 != v43);
  }
  if (v54 != v56)
    free(v54);
  return v44 & 1;
}

void md::PolarFlyoverLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)const::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v7;
  unint64_t *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  std::__shared_weak_count *v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 144);
  if (!v4)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v7 = (char *)operator new(0x58uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = &off_1E42B63B0;
  *(_QWORD *)v7 = &off_1E42DED18;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_DWORD *)v7 + 14) = 0;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *(_OWORD *)(v7 + 60) = v9;
  *(_QWORD *)(v7 + 76) = 0x100000001;
  *((_DWORD *)v7 + 21) = 0;
  v36[1] = v7 + 24;
  v37 = (std::__shared_weak_count *)v7;
  v10 = operator new(0xB0uLL);
  v11 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E42E53B0;
  v12 = *(std::__shared_weak_count **)(a3 + 152);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *(_DWORD *)(v4 + 12);
  v10[13] = 0;
  *((_DWORD *)v10 + 14) = 0;
  v10[5] = 0;
  v10[6] = 0;
  v10[10] = 0x100000001;
  *((_DWORD *)v10 + 22) = 0;
  *((_DWORD *)v10 + 23) = v15;
  v10[12] = 0x100000001;
  v10[14] = 0;
  v10[15] = 0;
  v10[3] = &off_1E42BE438;
  v10[4] = 0;
  v10[8] = &unk_1E42BE458;
  v10[9] = "";
  *((_DWORD *)v10 + 32) = *(_DWORD *)(v4 + 8);
  v10[17] = v4;
  v10[18] = v12;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_WORD *)v10 + 76) = 0;
  *((_BYTE *)v10 + 154) = 1;
  v10[20] = v7 + 24;
  v10[21] = v7;
  do
    v18 = __ldxr(v8);
  while (__stxr(v18 + 1, v8));
  v10[13] = *(_QWORD *)(v4 + 16);
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *a1 = v11 + 3;
  a1[1] = v11;
  v21 = *(id *)(a2 + 776);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)objc_msgSend(v21, "gglDevice") + 24))(v36);

  v38[0] = &off_1E4289F38;
  v38[1] = a1;
  v39 = v38;
  v34 = 0;
  v35 = 0;
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)v36[0] + 16))(v36[0], v38, &v34);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_25;
  }
  if (v39)
  {
    v26 = 5;
LABEL_25:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  if (v36[0])
  {
    v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v36[0] + 24))(v36[0]);
    v28 = v36[0];
    v36[0] = 0;
    v38[0] = v28;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v27 + 48))(v27, v38);
    v29 = v38[0];
    v38[0] = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v36[0];
    v36[0] = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_19F7B071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::PolarFlyoverTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PolarFlyoverTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PolarFlyoverTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289F38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289F38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<md::PolarFlyoverLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0::operator() const(md::RasterTileResource *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6DE0;
  v7[1] = ggl::Texture2D::onImplicitLoadComplete;
  v7[2] = 0;
  v7[3] = v4;
  v23 = v7;
  v15[0] = v5;
  v15[1] = v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = v20;
  v19 = v6;
  v9 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v7);
  v21 = v10;
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(__n128))(*v11 + 8 * v12))(v9);
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v15, v9);
  if (v21 == v20)
  {
    v14 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
    v8 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v14))(v8);
}

void sub_19F7B0924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ggl::FlyoverCommon::PolarMesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::FlyoverCommon::PolarMesh>,std::allocator<ggl::FlyoverCommon::PolarMesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverCommon::PolarMesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::FlyoverCommon::PolarMesh>,std::allocator<ggl::FlyoverCommon::PolarMesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::crc32::compute<33ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  return ggl::crc32::crc32Table[v29 ^ a1[31]] ^ ~(v29 >> 8);
}

uint64_t ggl::VertexDataTyped<ggl::PolygonOverlay::AntialiasVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolygonOverlay::AntialiasVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonOverlay::AntialiasVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonOverlay::AntialiasMesh::~AntialiasMesh(ggl::PolygonOverlay::AntialiasMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolygonOverlay::AntialiasMesh::~AntialiasMesh(ggl::PolygonOverlay::AntialiasMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolygonOverlay::AntialiasMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolygonOverlay::AntialiasMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::PolygonOverlay::FillPipelineState::FillPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::PolygonOverlayFillShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::PolygonOverlay::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57BF50 = &ggl::PolygonOverlay::pipelineDataFillPipelineDeviceStructs(void)::ref;
          qword_1EE57BF58 = 0;
          if ((v97 & 1) == 0
          {
            ggl::PolygonOverlay::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57BFB8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57BFC0 = (uint64_t)ggl::PolygonOverlay::Fill::reflection(void)::reflection;
            unk_1EE57BFC8 = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1EE57BF60 = (uint64_t)&ggl::PolygonOverlay::pipelineDataFillPipelineConstantStructs(void)::ref;
          unk_1EE57BF68 = xmmword_19FFB3690;
        }
      }
      ggl::PolygonOverlay::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonOverlay::FillPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonOverlayFillShader::typedReflection(v92);
      qword_1ECE2F7D8 = (uint64_t)&ggl::PolygonOverlayFillShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::PolygonOverlay::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57C0C8 = 0;
        qword_1EE57C0D0 = (uint64_t)"";
        dword_1EE57C0D8 = 0;
        qword_1EE57C0E0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1EE57C0E8 = 1;
      }
      qword_1ECE2F7E0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE2F7E8 = 1;
      qword_1ECE2F7F0 = 0;
      unk_1ECE2F7F8 = 0;
      qword_1ECE2F800 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F808 = 0;
      if ((v95 & 1) == 0
      {
        ggl::PolygonOverlay::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57C008 = 0;
        qword_1EE57C010 = (uint64_t)"view";
        dword_1EE57C018 = 3;
        qword_1EE57C020 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        unk_1EE57C028 = xmmword_19FFB35A0;
        qword_1EE57C038 = 1;
        unk_1EE57C040 = "transform";
        dword_1EE57C048 = 3;
        qword_1EE57C050 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57C058 = xmmword_19FFB3660;
        qword_1EE57C068 = 2;
        unk_1EE57C070 = "fill";
        dword_1EE57C078 = 3;
        qword_1EE57C080 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantFillBinding(void)::reflection;
        unk_1EE57C088 = xmmword_19FFB38C0;
        qword_1EE57C098 = 3;
        unk_1EE57C0A0 = "alphaTint";
        dword_1EE57C0A8 = 3;
        qword_1EE57C0B0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE57C0B8 = 1;
      }
      qword_1ECE2F810 = (uint64_t)&ggl::PolygonOverlay::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F818 = 4;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonOverlay::FillPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  *(_QWORD *)a1 = &off_1E42B6D18;
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonOverlay::FillPipelineSetup::~FillPipelineSetup(ggl::PolygonOverlay::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonOverlay::FillPipelineSetup::constantDataIsEnabled(ggl::PolygonOverlay::FillPipelineSetup *this, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (a2 == 3)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 304) != 0;
  return 0;
}

uint64_t ggl::PolygonOverlay::FillPipelineSetup::textureIsEnabled(ggl::PolygonOverlay::FillPipelineSetup *this)
{
  return 0;
}

uint64_t ggl::PolygonOverlay::AntialiasPipelineState::AntialiasPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::PolygonOverlayAntialiasShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonOverlay::antialiasVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::attributesReflection(void)::r;
            unk_1ECE43C18 = 1;
          }
          ggl::PolygonOverlay::AntialiasPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::typedReflection(void)::r;
          unk_1EE57BF80 = &ggl::PolygonOverlay::pipelineDataAntialiasPipelineDeviceStructs(void)::ref;
          qword_1EE57BF88 = 0;
          if ((v97 & 1) == 0
          {
            ggl::PolygonOverlay::pipelineDataAntialiasPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57BFE0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57BFE8 = (uint64_t)ggl::PolygonOverlay::AntialiasConstants::reflection(void)::reflection;
            unk_1EE57BFF0 = ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1EE57BF90 = (uint64_t)&ggl::PolygonOverlay::pipelineDataAntialiasPipelineConstantStructs(void)::ref;
          unk_1EE57BF98 = xmmword_19FFB48D0;
        }
      }
      ggl::PolygonOverlay::AntialiasPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonOverlay::AntialiasPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonOverlayAntialiasShader::typedReflection(v92);
      qword_1ECE2F8D8 = (uint64_t)&ggl::PolygonOverlayAntialiasShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::PolygonOverlay::pipelineStateAntialiasPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57C1C0 = 0;
        qword_1EE57C1C8 = (uint64_t)"";
        dword_1EE57C1D0 = 0;
        qword_1EE57C1D8 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineAttributeBinding_0(void)::attr;
        unk_1EE57C1E0 = 3;
      }
      qword_1ECE2F8E0 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE2F8E8 = 1;
      qword_1ECE2F8F0 = 0;
      unk_1ECE2F8F8 = 1;
      qword_1ECE2F900 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F908 = 0;
      if ((v95 & 1) == 0
      {
        ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57C100 = 0;
        qword_1EE57C108 = (uint64_t)"view";
        dword_1EE57C110 = 3;
        qword_1EE57C118 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantViewBinding(void)::reflection;
        unk_1EE57C120 = xmmword_19FFB35A0;
        qword_1EE57C130 = 1;
        unk_1EE57C138 = "transform";
        dword_1EE57C140 = 3;
        qword_1EE57C148 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE57C150 = xmmword_19FFB3660;
        qword_1EE57C160 = 2;
        unk_1EE57C168 = "antialias";
        dword_1EE57C170 = 3;
        qword_1EE57C178 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantAntialiasBinding(void)::reflection;
        unk_1EE57C180 = vdupq_n_s64(3uLL);
        qword_1EE57C190 = 3;
        unk_1EE57C198 = "alphaTint";
        dword_1EE57C1A0 = 3;
        qword_1EE57C1A8 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE57C1B0 = 1;
      }
      qword_1ECE2F910 = (uint64_t)&ggl::PolygonOverlay::pipelineStateAntialiasPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE2F918 = 4;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonOverlay::AntialiasPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  *(_QWORD *)a1 = &off_1E42B6D68;
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonOverlay::AntialiasPipelineSetup::~AntialiasPipelineSetup(ggl::PolygonOverlay::AntialiasPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonOverlay::AntialiasPipelineSetup::constantDataIsEnabled(ggl::PolygonOverlay::AntialiasPipelineSetup *this, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (a2 == 3)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 304) != 0;
  return 0;
}

BOOL ggl::PolygonOverlay::AntialiasPipelineSetup::textureIsEnabled(ggl::PolygonOverlay::AntialiasPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t md::RegistryManager::LayerDataSets::{unnamed type#1}::~LayerDataSets(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v2 = *(_QWORD **)(a1 + 96);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 56);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

void md::RegistryManager::onRegistryDestroyed(md::RegistryManager *this, gdc::Registry *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 376))
  {
    if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
      dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
    v3 = GEOGetVectorKitRegistryManagerLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v4 = *((unsigned __int16 *)a2 + 20);
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_DEBUG, "[RegistryDestroyed] Registry:%d", (uint8_t *)v5, 8u);
    }
  }
}

void md::RegistryManager::onEntityCreated(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v4;
  dispatch_once_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 376))
    v4 = a4 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = GEOGetVectorKitRegistryManagerLog(void)::onceToken[0];
    v8 = 8 * a4;
    do
    {
      v10 = *a3;
      if (v7 != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v11 = GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(unsigned __int16 *)(a2 + 40);
        *(_DWORD *)buf = 67109376;
        v13 = v9;
        v14 = 2048;
        v15 = v10;
        _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_DEBUG, "[EntityCreated] Registry:%d Entity:%llu", buf, 0x12u);
        v7 = GEOGetVectorKitRegistryManagerLog(void)::onceToken[0];
      }
      else
      {
        v7 = -1;
      }
      ++a3;
      v8 -= 8;
    }
    while (v8);
  }
}

_QWORD *gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x20uLL);
  *v8 = &off_1E427D278;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v17 = v8;
  v9 = *a1 + 1;
  *a1 = v9;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)a1 + 1, v9, a1);
  v11 = (uint64_t)v17;
  if (!v17)
    goto LABEL_4;
  if (v17 != v16)
  {
    v11 = (*(uint64_t (**)(void))(*v17 + 16))();
LABEL_4:
    v19 = (_QWORD *)v11;
    goto LABEL_6;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _QWORD *))(v16[0] + 24))(v16, v18);
LABEL_6:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v18, v10 + 3);
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  result = v17;
  if (v17 == v16)
  {
    v15 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_19F7B25BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::RegistryManager::onEntityDeleted(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v4;
  dispatch_once_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 376))
    v4 = a4 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = GEOGetVectorKitRegistryManagerLog(void)::onceToken[0];
    v8 = 8 * a4;
    do
    {
      v10 = *a3;
      if (v7 != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v11 = GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(unsigned __int16 *)(a2 + 40);
        *(_DWORD *)buf = 67109376;
        v13 = v9;
        v14 = 2048;
        v15 = v10;
        _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_DEBUG, "[EntityDeleted] Registry:%d Entity:%llu", buf, 0x12u);
        v7 = GEOGetVectorKitRegistryManagerLog(void)::onceToken[0];
      }
      else
      {
        v7 = -1;
      }
      ++a3;
      v8 -= 8;
    }
    while (v8);
  }
}

void md::RegistryManager::onComponentAdded(uint64_t a1, int8x8_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 376))
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3;
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v11 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = a2[5].u16[0];
        gdc::Registry::stringForComponentTypeId(&__p, a2, a5);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67109634;
        v16 = v12;
        v17 = 2048;
        v18 = v10;
        v19 = 2080;
        v20 = p_p;
        _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_DEBUG, "[ComponentAdded] Registry:%d Entity:%llu component:%s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      ++a3;
      v9 -= 8;
    }
    while (v9);
  }
}

_QWORD *gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *result;
  uint64_t v50;
  void *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[2];
  char v55;
  _QWORD *v56;
  _QWORD v57[4];

  v57[3] = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x20uLL);
  *v8 = &off_1E427D2C0;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v53 = v8;
  v9 = *(_QWORD *)a1 + 1;
  *(_QWORD *)a1 = v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_22;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    a3 = v9;
    if (v9 >= v10)
      a3 = v9 % v10;
  }
  else
  {
    a3 = (v10 - 1) & v9;
  }
  v12 = *(_QWORD ***)(*(_QWORD *)(a1 + 8) + 8 * a3);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_22:
    v13 = operator new(0x38uLL);
    v16 = (_QWORD *)(a1 + 24);
    v54[0] = v13;
    v54[1] = a1 + 24;
    *v13 = 0;
    v13[1] = v9;
    v13[2] = v9;
    v13[6] = 0;
    v55 = 1;
    v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
    v18 = *(float *)(a1 + 40);
    if (v10 && (float)(v18 * (float)v10) >= v17)
    {
LABEL_72:
      v41 = *(_QWORD *)(a1 + 8);
      v42 = *(_QWORD **)(v41 + 8 * a3);
      if (v42)
      {
        *v13 = *v42;
        *v42 = v13;
      }
      else
      {
        *v13 = *v16;
        *v16 = v13;
        *(_QWORD *)(v41 + 8 * a3) = v16;
        if (*v13)
        {
          v43 = *(_QWORD *)(*v13 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v43 >= v10)
              v43 %= v10;
          }
          else
          {
            v43 &= v10 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v43) = v13;
        }
      }
      ++*(_QWORD *)(a1 + 32);
      v8 = v53;
      v44 = v13 + 3;
      if (v53)
      {
        if (v53 != v52)
          goto LABEL_82;
        v56 = v54;
        (*(void (**)(_QWORD *, _QWORD *))(v52[0] + 24))(v52, v54);
      }
      else
      {
        v56 = 0;
      }
      goto LABEL_86;
    }
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 16);
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_59;
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v10 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 16);
LABEL_59:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            a3 = v9 % v10;
          else
            a3 = v9;
        }
        else
        {
          a3 = (v10 - 1) & v9;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v51 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        if (v51)
          operator delete(v51);
        v10 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *(_QWORD *)(a1 + 16) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v25++) = 0;
    while (prime != v25);
    v26 = (_QWORD *)*v16;
    if (!*v16)
    {
LABEL_58:
      v10 = prime;
      goto LABEL_59;
    }
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v29) = v16;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else
        {
          v32 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v32 + 8 * v31))
          {
            *v26 = *i;
            v33 = 8 * v31;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 8) + v33);
            **(_QWORD **)(*(_QWORD *)(a1 + 8) + v33) = i;
          }
          else
          {
            *(_QWORD *)(v32 + 8 * v31) = v26;
            v26 = i;
            v29 = v31;
          }
        }
      }
      goto LABEL_58;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27) = v16;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_58;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v27)
      {
        v40 = *(_QWORD *)(a1 + 8);
        if (!*(_QWORD *)(v40 + 8 * v39))
        {
          *(_QWORD *)(v40 + 8 * v39) = v26;
          goto LABEL_63;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + v38);
        **(_QWORD **)(*(_QWORD *)(a1 + 8) + v38) = v37;
        v37 = v26;
      }
      v39 = v27;
LABEL_63:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v27 = v39;
      if (!v37)
        goto LABEL_58;
    }
  }
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == v9)
      {
        if (v13[2] == v9)
          goto LABEL_105;
      }
      else if ((v15 & (v10 - 1)) != a3)
      {
        goto LABEL_22;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v14 = v13[1];
    if (v14 == v9)
      break;
    if (v14 >= v10)
      v14 %= v10;
    if (v14 != a3)
      goto LABEL_22;
LABEL_12:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_22;
  }
  if (v13[2] != v9)
    goto LABEL_12;
LABEL_105:
  v44 = v13 + 3;
LABEL_82:
  v56 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  if (v44 != v54)
  {
LABEL_86:
    v45 = v56;
    v46 = (_QWORD *)v13[6];
    if (v56 == v54)
    {
      if (v46 == v44)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v54[0] + 24))(v54, v57);
        (*(void (**)(_QWORD *))(*v56 + 32))(v56);
        v56 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v13[6] + 24))(v13[6], v54);
        (*(void (**)(_QWORD))(*(_QWORD *)v13[6] + 32))(v13[6]);
        v13[6] = 0;
        v56 = v54;
        (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v44);
        (*(void (**)(_QWORD *))(v57[0] + 32))(v57);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v54[0] + 24))(v54, v44);
        (*(void (**)(_QWORD *))(*v56 + 32))(v56);
        v56 = (_QWORD *)v13[6];
      }
      v13[6] = v44;
    }
    else if (v46 == v44)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v44 + 24))(v44, v54);
      (*(void (**)(_QWORD))(*(_QWORD *)v13[6] + 32))(v13[6]);
      v13[6] = v56;
      v56 = v54;
    }
    else
    {
      v56 = (_QWORD *)v13[6];
      v13[6] = v45;
    }
  }
  v47 = v56;
  if (v56 == v54)
  {
    v48 = 4;
    v47 = v54;
LABEL_98:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  else if (v56)
  {
    v48 = 5;
    goto LABEL_98;
  }
  result = v53;
  if (v53 == v52)
  {
    v50 = 4;
    result = v52;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v50))();
  }
  else if (v53)
  {
    v50 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v50))();
  }
  return result;
}

void sub_19F7B2F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void md::RegistryManager::onComponentRemoved(uint64_t a1, int8x8_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 376))
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3;
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v11 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = a2[5].u16[0];
        gdc::Registry::stringForComponentTypeId(&__p, a2, a5);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67109634;
        v16 = v12;
        v17 = 2048;
        v18 = v10;
        v19 = 2080;
        v20 = p_p;
        _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_DEBUG, "[ComponentRemoved] Registry:%d Entity:%llu component:%s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      ++a3;
      v9 -= 8;
    }
    while (v9);
  }
}

void std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427D2C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D2C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v10;
  _QWORD *v11;

  v6 = *a2;
  v7 = *a3;
  v8 = a3[1];
  v9 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))a1[2];
  v10 = a1[3];
  v11 = (_QWORD *)(a1[1] + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v11 + v9);
  return v9(v11, v6, v7, v8, *a4);
}

void std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427D278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D278;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>))::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;

  v4 = *a2;
  v5 = *a3;
  v6 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a1[1] + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v8 + v6);
  return v6(v8, v4, v5, a3[1]);
}

void std::__function::__func<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1}>,void ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1}>,void ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D5BA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1}>,void ()(gdc::Registry *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5BA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1},std::allocator<unsigned long gdc::Signal<gdc::Registry *>::connect<md::RegistryManager,md::RegistryManager>(md::RegistryManager *,void (md::RegistryManager::*)(gdc::Registry *))::{lambda(gdc::Registry *)#1}>,void ()(gdc::Registry *)>::operator()(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;

  v2 = *a2;
  v3 = (uint64_t (*)(_QWORD *, uint64_t))a1[2];
  v4 = a1[3];
  v5 = (_QWORD *)(a1[1] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  return v3(v5, v2);
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return gdc::LayerDataKey::LayerDataKey((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *(_DWORD *)a2 >= *(_DWORD *)a3;
  if (*(_DWORD *)a2 == *(_DWORD *)a3)
  {
    v4 = *(unsigned __int16 *)(a2 + 8);
    v5 = *(unsigned __int16 *)(a3 + 8);
    v3 = v4 >= v5;
    if (v4 == v5)
      return gdc::GenericKey::operator<(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  return !v3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 < *a3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<stringForKey(std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&)::$_0,stringForKey(std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&)::$_1,stringForKey(std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&>(std::string ***a1, uint64_t a2)
{
  std::string **v3;
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  int v10;
  void *v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  v3 = *a1;
  gdc::LayerDataKey::keysInt32Str(&v15, (unsigned __int16 *)(a2 + 8));
  v4 = std::string::append(&v15, " id:", 4uLL);
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v14, *(_DWORD *)a2);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v14;
  else
    v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v16, (const std::string::value_type *)v6, size);
  v13 = *v8;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_17:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_9:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_18:
  operator delete(v15.__r_.__value_.__l.__data_);
LABEL_10:
  v9 = *v3;
  v10 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  v11 = (void *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v13;
  else
    v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  std::string::__assign_external(v9, (const std::string::value_type *)v12);
  if (v10 < 0)
    operator delete(v11);
}

void sub_19F7B3498(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;
  int v3;

  v3 = v2;
  if (v3 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<stringForKey(std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&)::$_0,stringForKey(std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&)::$_1,stringForKey(std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&>(uint64_t a1, _BYTE *a2)
{
  const std::string::value_type *v2;

  if (*a2)
    v2 = "OverlayRegistry";
  else
    v2 = "PuckRegistry";
  return std::string::__assign_external(*(std::string **)(*(_QWORD *)a1 + 8), v2);
}

void md::RegistryManager::removeRegistry(md::RegistryManager *this, const gdc::LayerData *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;

  v6 = *((_DWORD *)a2 + 2);
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = v6;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v4, (uint64_t)&v7);
  v5 = 0;
  md::RegistryManager::removeRegistry((uint64_t)this, (uint64_t)&v3);
  if (v5 != -1)
    ((void (*)(char *, int *))off_1E42FA3C0[v5])(&v10, &v3);
  if (v8 != v9)
    free(v8);
}

void sub_19F7B357C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  uint64_t v26;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E42FA3C0[a21])(v26 - 17, &a9);
  if (a24 != a26)
    free(a24);
  _Unwind_Resume(exception_object);
}

void md::RegistryManager::removeRegistry(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;
  uint8_t buf[4];
  void **v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
    dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
  v4 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    v19[0] = __p;
    v19[1] = __p;
    v5 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v5 == -1)
    {
      std::__throw_bad_variant_access[abi:nn180100]();
      __break(1u);
      return;
    }
    v20 = v19;
    ((void (*)(_QWORD **, uint64_t))off_1E42EEDB0[v5])(&v20, a2);
    v6 = __p;
    if (v18 < 0)
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v22 = v6;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_DEBUG, "Queuing outgoing key:%s", buf, 0xCu);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }

  std::mutex::lock((std::mutex *)(a1 + 144));
  v7 = (_QWORD *)(a1 + 264);
  v8 = *(uint64_t **)(a1 + 264);
  if (!v8)
  {
    v9 = (uint64_t *)(a1 + 264);
    goto LABEL_31;
  }
  while (1)
  {
    while (1)
    {
      v9 = v8;
      v10 = v8 + 4;
      v11 = *((unsigned int *)v8 + 32);
      v12 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v11 == -1)
      {
        if (v12 == 0xFFFFFFFF)
          goto LABEL_28;
        goto LABEL_14;
      }
      if (v12 != 0xFFFFFFFF && v12 >= v11)
        break;
LABEL_23:
      v8 = (uint64_t *)*v9;
      v7 = v9;
      if (!*v9)
        goto LABEL_31;
    }
    if (v12 > v11)
      break;
    __p[0] = v19;
    if ((((uint64_t (*)(void **, uint64_t, uint64_t *))off_1E42EEDE0[v12])(__p, a2, v10) & 1) != 0)
      goto LABEL_23;
    v12 = *(unsigned int *)(a2 + 96);
    if (v12 == 0xFFFFFFFF)
      goto LABEL_28;
LABEL_14:
    v11 = *((unsigned int *)v9 + 32);
    if ((_DWORD)v11 != -1)
      break;
LABEL_11:
    v7 = v9 + 1;
    v8 = (uint64_t *)v9[1];
    if (!v8)
      goto LABEL_31;
  }
  if (v11 < v12)
    goto LABEL_11;
  if (v11 <= v12)
  {
    __p[0] = v19;
    if (((unsigned int (*)(void **, uint64_t *, uint64_t))off_1E42EEDE0[v11])(__p, v10, a2))
      goto LABEL_11;
  }
LABEL_28:
  if (!*v7)
  {
LABEL_31:
    v14 = operator new(0x88uLL);
    v14[32] = 0;
    *((_DWORD *)v14 + 32) = -1;
    v15 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E42EEDC0[v15])(v19, v14 + 32, a2);
      *((_DWORD *)v14 + 32) = v15;
    }
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v9;
    *v7 = v14;
    v16 = **(_QWORD **)(a1 + 256);
    if (v16)
    {
      *(_QWORD *)(a1 + 256) = v16;
      v14 = (_BYTE *)*v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 264), (uint64_t *)v14);
    ++*(_QWORD *)(a1 + 272);
  }
  std::mutex::unlock((std::mutex *)(a1 + 144));
}

void sub_19F7B388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v18;

  v18 = v15[32];
  if ((_DWORD)v18 != -1)
    ((void (*)(void **, uint64_t))off_1E42FA3C0[v18])(&__p, v16);
  operator delete(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  gdc::Registry *v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(gdc::Registry **)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  if (v8)
  {
    gdc::Registry::~Registry(v8);
    MEMORY[0x1A1AF4E00]();
  }
  v9 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E42FA3C0[v9])(&v10, a2 + 32);
  operator delete((void *)a2);
}

__n128 std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::insert_iterator<std::set<md::LayerDataIdentWithWorld>> &>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD **a6)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v12;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL4 v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  __n128 result;
  uint64_t *v54;
  uint64_t *v55;

  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
    goto LABEL_64;
  v12 = *(_QWORD **)a4;
  if (*(_QWORD *)a4 == *a5)
  {
LABEL_45:
    v43 = (_QWORD **)*a6;
    v42 = a6[1];
    if (v8 == v9)
      goto LABEL_66;
    while (1)
    {
      v44 = std::__tree<md::LayerDataIdentWithWorld>::__find_equal<md::LayerDataIdentWithWorld>(v43, v42, &v55, &v54, *((_DWORD *)v8 + 7), *((_BYTE *)v8 + 32));
      v45 = (uint64_t *)*v44;
      if (*v44)
      {
        v46 = (uint64_t *)v45[1];
        if (!v46)
          goto LABEL_56;
      }
      else
      {
        v47 = v44;
        v45 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v45 + 28) = *(_QWORD *)((char *)v8 + 28);
        v48 = v55;
        *v45 = 0;
        v45[1] = 0;
        v45[2] = (uint64_t)v48;
        *v47 = (uint64_t)v45;
        v49 = (_QWORD *)**v43;
        v50 = v45;
        if (v49)
        {
          *v43 = v49;
          v50 = (uint64_t *)*v47;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v43[1], v50);
        v43[2] = (_QWORD *)((char *)v43[2] + 1);
        v46 = (uint64_t *)v45[1];
        if (!v46)
        {
          do
          {
LABEL_56:
            v42 = (uint64_t *)v45[2];
            v30 = *v42 == (_QWORD)v45;
            v45 = v42;
          }
          while (!v30);
          goto LABEL_58;
        }
      }
      do
      {
        v42 = v46;
        v46 = (uint64_t *)*v46;
      }
      while (v46);
LABEL_58:
      v51 = (_QWORD *)v8[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v8[2];
          v30 = *v52 == (_QWORD)v8;
          v8 = v52;
        }
        while (!v30);
      }
      v8 = v52;
      if (v52 == v9)
      {
        v8 = v9;
        goto LABEL_66;
      }
    }
  }
  while (1)
  {
    v15 = *((unsigned __int8 *)v8 + 32);
    v16 = (char)v15;
    v17 = *((unsigned __int8 *)v12 + 32);
    v18 = *((_DWORD *)v8 + 7);
    v19 = *((_DWORD *)v12 + 7);
    if (v15 == v17 ? v18 < v19 : (char)v15 < (char)v17)
    {
      v21 = (_QWORD **)*a6;
      v22 = std::__tree<md::LayerDataIdentWithWorld>::__find_equal<md::LayerDataIdentWithWorld>(*a6, a6[1], &v55, &v54, v18, v16);
      v23 = (uint64_t *)*v22;
      if (!*v22)
      {
        v24 = v22;
        v23 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v23 + 28) = *(_QWORD *)((char *)v8 + 28);
        v25 = v55;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        *v24 = (uint64_t)v23;
        v26 = (_QWORD *)**v21;
        v27 = v23;
        if (v26)
        {
          *v21 = v26;
          v27 = (uint64_t *)*v24;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v21[1], v27);
        v21[2] = (_QWORD *)((char *)v21[2] + 1);
      }
      a6[1] = v23;
      v28 = (uint64_t *)v23[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v23[2];
          v30 = *v29 == (_QWORD)v23;
          v23 = v29;
        }
        while (!v30);
      }
      a6[1] = v29;
      v31 = *(_QWORD **)a2;
      v32 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v31[2];
          v30 = *v33 == (_QWORD)v31;
          v31 = v33;
        }
        while (!v30);
      }
      *(_QWORD *)a2 = v33;
    }
    else
    {
      v34 = v19 < v18;
      v35 = v16 == (char)v17 ? v34 : (char)v17 < v16;
      if (v35 == 1)
      {
        v36 = (_QWORD *)v12[1];
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v12[2];
            v30 = *v37 == (_QWORD)v12;
            v12 = v37;
          }
          while (!v30);
        }
      }
      else
      {
        v38 = (_QWORD *)v8[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (_QWORD *)v8[2];
            v30 = *v39 == (_QWORD)v8;
            v8 = v39;
          }
          while (!v30);
        }
        *(_QWORD *)a2 = v39;
        v40 = *(_QWORD **)a4;
        v41 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v41)
        {
          do
          {
            v37 = v41;
            v41 = (_QWORD *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v40[2];
            v30 = *v37 == (_QWORD)v40;
            v40 = v37;
          }
          while (!v30);
        }
      }
      *(_QWORD *)a4 = v37;
    }
    v8 = *(_QWORD **)a2;
    v9 = (_QWORD *)*a3;
    if (*(_QWORD *)a2 == *a3)
      break;
    v12 = *(_QWORD **)a4;
    if (*(_QWORD *)a4 == *a5)
      goto LABEL_45;
  }
LABEL_64:
  v43 = (_QWORD **)*a6;
  v42 = a6[1];
LABEL_66:
  result.n128_u64[0] = (unint64_t)v43;
  result.n128_u64[1] = (unint64_t)v42;
  *(_QWORD *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(unsigned __int16 *)(*v8 + 40) < *(unsigned __int16 *)(*v9 + 40))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(unsigned __int16 *)(v81 + 40);
        v83 = *(unsigned __int16 *)(*v9 + 40);
        v84 = *v8;
        v85 = *(unsigned __int16 *)(*v8 + 40);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(unsigned __int16 *)(v135 + 40) < *(unsigned __int16 *)(*v9 + 40))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(unsigned __int16 *)(*v8 + 40) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(unsigned __int16 *)(v87 + 40);
        v92 = *(unsigned __int16 *)(*v9 + 40);
        v93 = *(unsigned __int16 *)(v89 + 40);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(unsigned __int16 *)(*v8 + 40) < *(unsigned __int16 *)(v87 + 40))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(unsigned __int16 *)(v140 + 40);
                if (v142 < *(unsigned __int16 *)(v141 + 40))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(unsigned __int16 *)(*v9 + 40))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned __int16 *)(v112 + 40);
                    if (result < *(unsigned __int16 *)(v111[1] + 40))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(unsigned __int16 *)(*v113 + 40);
                  if (*(unsigned __int16 *)(v112 + 40) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11
                        && *(unsigned __int16 *)(v112 + 40) < *(unsigned __int16 *)(v111[1] + 40))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(unsigned __int16 *)(v112 + 40) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned __int16 *)(v124 + 40);
                    if (result < *(unsigned __int16 *)(v123[1] + 40))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(unsigned __int16 *)(*v123 + 40);
                    if (*(unsigned __int16 *)(*v130 + 40) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(unsigned __int16 *)(*v130 + 40) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(unsigned __int16 *)(*v8 + 40);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(unsigned __int16 *)(*v13 + 40);
            v19 = *(unsigned __int16 *)(*v9 + 40);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(unsigned __int16 *)(*v13 + 40) < *(unsigned __int16 *)(*v9 + 40))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(unsigned __int16 *)(*v8 + 40) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(unsigned __int16 *)(v29 + 40);
            v32 = *(unsigned __int16 *)(v30 + 40);
            v33 = *(a2 - 2);
            v34 = *(unsigned __int16 *)(v33 + 40);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(unsigned __int16 *)(*v27 + 40) < *(unsigned __int16 *)(v35 + 40))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(unsigned __int16 *)(v36 + 40) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(unsigned __int16 *)(v40 + 40);
            v43 = *(unsigned __int16 *)(v41 + 40);
            v44 = *(a2 - 3);
            v45 = *(unsigned __int16 *)(v44 + 40);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(unsigned __int16 *)(*v38 + 40) < *(unsigned __int16 *)(v46 + 40))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(unsigned __int16 *)(v47 + 40) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(unsigned __int16 *)(*v13 + 40);
            v51 = *(unsigned __int16 *)(*v27 + 40);
            v52 = *v38;
            v53 = *(unsigned __int16 *)(*v38 + 40);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(unsigned __int16 *)(*v9 + 40);
          v23 = *(unsigned __int16 *)(*v13 + 40);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(unsigned __int16 *)(*v9 + 40) < *(unsigned __int16 *)(*v13 + 40))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(unsigned __int16 *)(*v8 + 40) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(unsigned __int16 *)(v55 + 40);
            if (*(unsigned __int16 *)(*(v9 - 1) + 40) < v56)
              goto LABEL_54;
            if (v56 >= *(unsigned __int16 *)(*v8 + 40))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(unsigned __int16 *)(*v9 + 40));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(unsigned __int16 *)(v70 + 40));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(unsigned __int16 *)(v73 + 40));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(unsigned __int16 *)(v76 + 40));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(unsigned __int16 *)(v77 + 40));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(unsigned __int16 *)(v55 + 40);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(unsigned __int16 *)(v60 + 40) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(unsigned __int16 *)(v63 + 40) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(unsigned __int16 *)(v62 + 40) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(unsigned __int16 *)(v67 + 40) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(unsigned __int16 *)(v68 + 40) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(unsigned __int16 *)(v102 + 40);
              if (v104 < *(unsigned __int16 *)(v103 + 40))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(unsigned __int16 *)(v103 + 40));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(unsigned __int16 *)(v137 + 40);
            if (v139 < *(unsigned __int16 *)(v138 + 40))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(unsigned __int16 *)(v138 + 40));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(unsigned __int16 *)(*a2 + 40);
  v8 = *(unsigned __int16 *)(*result + 40);
  v9 = *a3;
  v10 = *(unsigned __int16 *)(*a3 + 40);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(unsigned __int16 *)(*a2 + 40) < *(unsigned __int16 *)(*result + 40))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(unsigned __int16 *)(*a3 + 40) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(unsigned __int16 *)(*a4 + 40) < *(unsigned __int16 *)(v5 + 40))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(unsigned __int16 *)(*a3 + 40) < *(unsigned __int16 *)(*a2 + 40))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(unsigned __int16 *)(*a2 + 40) < *(unsigned __int16 *)(*result + 40))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(unsigned __int16 *)(*a5 + 40) < *(unsigned __int16 *)(*a4 + 40))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(unsigned __int16 *)(*a4 + 40) < *(unsigned __int16 *)(*a3 + 40))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(unsigned __int16 *)(*a3 + 40) < *(unsigned __int16 *)(*a2 + 40))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(unsigned __int16 *)(*a2 + 40) < *(unsigned __int16 *)(*result + 40))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(unsigned __int16 *)(v3 + 40) < *(unsigned __int16 *)(*a1 + 40))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(unsigned __int16 *)(v15 + 40);
      v17 = *(unsigned __int16 *)(*a1 + 40);
      v18 = *(a2 - 1);
      v19 = *(unsigned __int16 *)(v18 + 40);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(unsigned __int16 *)(v40 + 40) < *(unsigned __int16 *)(*a1 + 40))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(unsigned __int16 *)(v47 + 40) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(unsigned __int16 *)(v21 + 40);
      v26 = *(unsigned __int16 *)(*a1 + 40);
      v27 = *(unsigned __int16 *)(v23 + 40);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(unsigned __int16 *)(v42 + 40) < *(unsigned __int16 *)(v21 + 40))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(unsigned __int16 *)(v43 + 40);
        if (v45 < *(unsigned __int16 *)(v44 + 40))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(unsigned __int16 *)(*a1 + 40))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(unsigned __int16 *)(v7 + 40);
      v10 = *(unsigned __int16 *)(*a1 + 40);
      v11 = *(unsigned __int16 *)(v5 + 40);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(unsigned __int16 *)(*v31 + 40);
        if (v37 < *(unsigned __int16 *)(v36 + 40))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(unsigned __int16 *)(v36 + 40));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[5];
      v2[5] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *gdc::ManagedObjectHolder<md::components::NonTiled>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0A50;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::components::NonTiled>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0A50;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::components::NonTiled>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v6 = *(_QWORD *)(v4 - 8);
            *(_QWORD *)(v4 - 8) = 0;
            if (v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *gdc::ManagedObjectHolder<md::MapDataType>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0AA0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40BDFB0063);
  return a1;
}

void gdc::ManagedObjectHolder<md::MapDataType>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0AA0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C40BDFB0063);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::MapDataType>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t *std::__tree<md::LayerDataIdentWithWorld>::__find_equal<md::LayerDataIdentWithWorld>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int a5, unsigned __int8 a6)
{
  uint64_t *v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  _BOOL4 v21;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  _BOOL4 v27;
  unsigned int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t *v31;
  int v32;
  uint64_t v34;
  int v35;
  int v36;
  _BOOL4 v37;
  unsigned int v38;
  _BOOL4 v39;
  _BOOL4 v40;

  v6 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_5;
  v7 = *((unsigned __int8 *)a2 + 32);
  v8 = *((char *)a2 + 32) > (char)a6;
  v9 = *((_DWORD *)a2 + 7);
  if (v7 == a6)
    v8 = v9 > a5;
  if (v8)
  {
LABEL_5:
    v10 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_25:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      v11 = (uint64_t *)*a2;
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v18 = a2;
      do
      {
        v12 = (uint64_t *)v18[2];
        v19 = *v12 == (_QWORD)v18;
        v18 = v12;
      }
      while (v19);
    }
    v20 = *((char *)v12 + 32);
    if (a6 == v20)
      v21 = *((_DWORD *)v12 + 7) < a5;
    else
      v21 = v20 < (char)a6;
    if (v21)
      goto LABEL_25;
    v23 = *v6;
    if (*v6)
    {
      do
      {
        while (1)
        {
          v24 = (_QWORD *)v23;
          v25 = *(char *)(v23 + 32);
          v26 = *(unsigned __int8 *)(v23 + 32);
          v27 = v25 > (char)a6;
          v28 = *((_DWORD *)v24 + 7);
          if (v26 == a6)
            v27 = v28 > a5;
          if (!v27)
            break;
          v23 = *v24;
          v6 = v24;
          if (!*v24)
            goto LABEL_62;
        }
        v29 = v28 < a5;
        if (v26 == a6)
          v30 = v29;
        else
          v30 = (char)v26 < (char)a6;
        if (!v30)
          break;
        v6 = v24 + 1;
        v23 = v24[1];
      }
      while (v23);
      goto LABEL_62;
    }
LABEL_28:
    v24 = a1 + 1;
LABEL_62:
    *a3 = v24;
    return v6;
  }
  v13 = v9 < a5;
  if (v7 == a6)
    v14 = v13;
  else
    v14 = (char)v7 < (char)a6;
  if (!v14)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v15 = a2[1];
  if (v15)
  {
    v16 = (uint64_t *)a2[1];
    do
    {
      v17 = v16;
      v16 = (uint64_t *)*v16;
    }
    while (v16);
  }
  else
  {
    v31 = a2;
    do
    {
      v17 = (uint64_t *)v31[2];
      v19 = *v17 == (_QWORD)v31;
      v31 = v17;
    }
    while (!v19);
  }
  if (v17 != v6)
  {
    v32 = *((char *)v17 + 32);
    if (!(a6 == v32 ? *((_DWORD *)v17 + 7) > a5 : v32 > (char)a6))
    {
      v34 = *v6;
      if (*v6)
      {
        do
        {
          while (1)
          {
            v24 = (_QWORD *)v34;
            v35 = *(char *)(v34 + 32);
            v36 = *(unsigned __int8 *)(v34 + 32);
            v37 = v35 > (char)a6;
            v38 = *((_DWORD *)v24 + 7);
            if (v36 == a6)
              v37 = v38 > a5;
            if (!v37)
              break;
            v34 = *v24;
            v6 = v24;
            if (!*v24)
              goto LABEL_62;
          }
          v39 = v38 < a5;
          if (v36 == a6)
            v40 = v39;
          else
            v40 = (char)v36 < (char)a6;
          if (!v40)
            break;
          v6 = v24 + 1;
          v34 = v24[1];
        }
        while (v34);
        goto LABEL_62;
      }
      goto LABEL_28;
    }
  }
  if (v15)
  {
    *a3 = v17;
    return v17;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC890;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC890;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ResolveRegistries", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC848;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1,std::allocator<md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ResolveRegistries", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__split_buffer<std::pair<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  gdc::Registry *v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    v4 = *(gdc::Registry **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
    {
      gdc::Registry::~Registry(v4);
      MEMORY[0x1A1AF4E00]();
    }
    v5 = *(unsigned int *)(i - 16);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E42FA3C0[v5])(&v7, i - 112);
    *(_DWORD *)(i - 16) = -1;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return gdc::LayerDataKey::LayerDataKey((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void md::RegistryManager::removeCollectorSubscription(int8x8_t *this, uint64_t a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::hash<std::pair<unsigned long,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::hash<std::pair<unsigned long,unsigned int>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>>>::find<std::pair<unsigned long,unsigned int>>(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    v8 = this[1];
    v9 = v6[1];
    v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v8)
        v9 %= *(_QWORD *)&v8;
    }
    else
    {
      v9 &= *(_QWORD *)&v8 - 1;
    }
    v11 = *(uint64_t **)(*(_QWORD *)this + 8 * v9);
    do
    {
      v12 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11 != v6);
    if (v12 == (uint64_t *)&this[2])
      goto LABEL_19;
    v13 = v12[1];
    if (v10.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v8)
        v13 %= *(_QWORD *)&v8;
    }
    else
    {
      v13 &= *(_QWORD *)&v8 - 1;
    }
    if (v13 != v9)
    {
LABEL_19:
      if (!*v6)
        goto LABEL_20;
      v14 = *(_QWORD *)(*v6 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v14 >= *(_QWORD *)&v8)
          v14 %= *(_QWORD *)&v8;
      }
      else
      {
        v14 &= *(_QWORD *)&v8 - 1;
      }
      if (v14 != v9)
LABEL_20:
        *(_QWORD *)(*(_QWORD *)this + 8 * v9) = 0;
    }
    v15 = *v6;
    if (*v6)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v16 >= *(_QWORD *)&v8)
          v16 %= *(_QWORD *)&v8;
      }
      else
      {
        v16 &= *(_QWORD *)&v8 - 1;
      }
      if (v16 != v9)
      {
        *(_QWORD *)(*(_QWORD *)this + 8 * v16) = v12;
        v15 = *v6;
      }
    }
    *v12 = v15;
    *v6 = 0;
    --*(_QWORD *)&this[3];
    v17 = (uint64_t *)v6[7];
    if (v17 == v7 + 4)
    {
      v18 = 4;
      v17 = v7 + 4;
    }
    else
    {
      if (!v17)
      {
LABEL_33:
        operator delete(v7);
        goto LABEL_34;
      }
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    goto LABEL_33;
  }
LABEL_34:
  for (i = (_QWORD *)this[7]; i; i = (_QWORD *)*i)
  {
    v21 = i[3];
    v20 = i[4];
    if (v21 != v20)
    {
      while (*(_QWORD *)v21 != a2 || *(_DWORD *)(v21 + 8) != a3)
      {
        v21 += 24;
        if (v21 == v20)
          goto LABEL_37;
      }
    }
    if (v21 != v20)
    {
      if (v21 + 24 != v20)
      {
        do
        {
          v25 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)v21 = *(_QWORD *)(v21 + 24);
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 32);
          v26 = *(_QWORD *)(v21 + 40);
          *(_QWORD *)(v21 + 40) = 0;
          *(_QWORD *)(v21 + 16) = v26;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v23 = v21 + 24;
          v24 = v21 + 48;
          v21 += 24;
        }
        while (v24 != v20);
        v20 = i[4];
        v21 = v23;
      }
      while (v20 != v21)
      {
        v27 = *(_QWORD *)(v20 - 8);
        *(_QWORD *)(v20 - 8) = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v20 -= 24;
      }
      i[4] = v21;
    }
LABEL_37:
    ;
  }
}

uint64_t md::RegistryManager::getRegistryForKey(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  char v12;
  char *v13;

  v2 = *(uint64_t **)(a1 + 312);
  if (!v2)
    return 0;
  v4 = (uint64_t *)(a1 + 312);
  v5 = *(_DWORD *)(a2 + 96);
  if (v5 == -1)
  {
    do
    {
      v6 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v6 = (uint64_t *)(a1 + 312);
LABEL_4:
    v7 = *((unsigned int *)v2 + 32);
    if ((_DWORD)v7 != -1 && v7 >= v5)
    {
      if (v7 > v5)
      {
        while (1)
        {
          v6 = v2;
          v2 = (uint64_t *)*v2;
          if (!v2)
            break;
LABEL_15:
          v5 = *(_DWORD *)(a2 + 96);
          if (v5 != -1)
            goto LABEL_4;
        }
      }
      else
      {
        v13 = &v12;
        if (((unsigned int (*)(char **, uint64_t *, uint64_t))off_1E42EEDE0[v7])(&v13, v2 + 4, a2))
          ++v2;
        else
          v6 = v2;
        v2 = (uint64_t *)*v2;
        if (v2)
          goto LABEL_15;
      }
    }
    else
    {
      v2 = (uint64_t *)v2[1];
      if (v2)
        goto LABEL_15;
    }
  }
  if (v6 == v4)
    return 0;
  v9 = *((_DWORD *)v6 + 32);
  if (v9 != -1
    && ((v10 = *(unsigned int *)(a2 + 96), (_DWORD)v10 == -1)
     || v10 < v9
     || v10 <= v9
     && (v13 = &v12,
         (((uint64_t (*)(char **, uint64_t, uint64_t *))off_1E42EEDE0[v10])(&v13, a2, v6 + 4) & 1) != 0)))
  {
    return 0;
  }
  else
  {
    return v6[17];
  }
}

uint64_t md::RegistryManager::getRegistryByIdentifier(md::RegistryManager *this, unsigned int a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  int64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;

  v5 = (_BYTE *)*((_QWORD *)this + 48);
  v4 = (_BYTE *)*((_QWORD *)this + 49);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v10 = (_BYTE *)*((_QWORD *)this + 51);
  v9 = (_BYTE *)*((_QWORD *)this + 52);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      abort();
    v12 = (char *)operator new(v9 - v10);
    v13 = &v12[8 * (v11 >> 3)];
    memcpy(v12, v10, v11);
  }
  v15 = (_BYTE *)*((_QWORD *)this + 60);
  v14 = (_BYTE *)*((_QWORD *)this + 61);
  v16 = v14 - v15;
  if (v14 == v15)
  {
    v18 = 0;
    v17 = 0;
    v19 = v8 - v7;
    if (v8 == v7)
      goto LABEL_22;
  }
  else
  {
    if (v16 < 0)
      abort();
    v17 = (char *)operator new(v14 - v15);
    v18 = &v17[8 * (v16 >> 3)];
    memcpy(v17, v15, v16);
    v19 = v8 - v7;
    if (v8 == v7)
      goto LABEL_22;
  }
  if (v19 < 0)
    goto LABEL_54;
  v20 = (char *)operator new(v19);
  memcpy(v20, v7, v19);
  v21 = v20;
  v22 = v19 >> 3;
  do
  {
    v23 = v22 >> 1;
    v24 = &v21[8 * (v22 >> 1)];
    v26 = *(_QWORD *)v24;
    v25 = v24 + 8;
    v22 += ~(v22 >> 1);
    if (*(unsigned __int16 *)(v26 + 40) < a2)
      v21 = v25;
    else
      v22 = v23;
  }
  while (v22);
  if (v21 == &v20[8 * (v19 >> 3)])
  {
    operator delete(v20);
    v29 = v13 - v12;
    if (v13 == v12)
      goto LABEL_33;
    goto LABEL_25;
  }
  v27 = *(_QWORD *)v21;
  v28 = *(unsigned __int16 *)(*(_QWORD *)v21 + 40);
  operator delete(v20);
  if (v28 == a2)
    goto LABEL_47;
LABEL_22:
  v29 = v13 - v12;
  if (v13 == v12)
    goto LABEL_33;
LABEL_25:
  if (v29 < 0)
    goto LABEL_54;
  v30 = (char *)operator new(v29);
  memcpy(v30, v12, v29);
  v31 = v30;
  v32 = v29 >> 3;
  do
  {
    v33 = v32 >> 1;
    v34 = &v31[8 * (v32 >> 1)];
    v36 = *(_QWORD *)v34;
    v35 = v34 + 8;
    v32 += ~(v32 >> 1);
    if (*(unsigned __int16 *)(v36 + 40) < a2)
      v31 = v35;
    else
      v32 = v33;
  }
  while (v32);
  if (v31 != &v30[8 * (v29 >> 3)])
  {
    v27 = *(_QWORD *)v31;
    v37 = *(unsigned __int16 *)(*(_QWORD *)v31 + 40);
    operator delete(v30);
    if (v37 == a2)
      goto LABEL_47;
LABEL_33:
    v38 = v18 - v17;
    if (v18 == v17)
      goto LABEL_46;
    goto LABEL_36;
  }
  operator delete(v30);
  v38 = v18 - v17;
  if (v18 == v17)
    goto LABEL_46;
LABEL_36:
  if (v38 < 0)
LABEL_54:
    abort();
  v39 = (char *)operator new(v38);
  memcpy(v39, v17, v38);
  v40 = v39;
  v41 = v38 >> 3;
  do
  {
    v42 = v41 >> 1;
    v43 = &v40[8 * (v41 >> 1)];
    v45 = *(_QWORD *)v43;
    v44 = v43 + 8;
    v41 += ~(v41 >> 1);
    if (*(unsigned __int16 *)(v45 + 40) < a2)
      v40 = v44;
    else
      v41 = v42;
  }
  while (v41);
  if (v40 == &v39[8 * (v38 >> 3)])
  {
    operator delete(v39);
    goto LABEL_46;
  }
  v27 = *(_QWORD *)v40;
  v46 = *(unsigned __int16 *)(*(_QWORD *)v40 + 40);
  operator delete(v39);
  if (v46 != a2)
LABEL_46:
    v27 = 0;
LABEL_47:
  if (v17)
    operator delete(v17);
  if (v12)
    operator delete(v12);
  if (v7)
    operator delete(v7);
  return v27;
}

void sub_19F7B5A38(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;
  void *v3;

  if (v3)
  {
    operator delete(v3);
    if (!v2)
    {
LABEL_3:
      if (v1)
      {
LABEL_8:
        operator delete(v1);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  operator delete(v2);
  if (v1)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_19F7B5A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  void *v12;

  v10 = v9;
  while (1)
  {
    v12 = (void *)*(v10 - 3);
    v10 -= 3;
    v11 = v12;
    if (v12)
    {
      *(v9 - 2) = (uint64_t)v11;
      operator delete(v11);
    }
    v9 = v10;
    if (v10 == &a9)
      JUMPOUT(0x19F7B5A68);
  }
}

void md::layoutElevatedPolygonMeshes<md::ElevatedPolygonRenderable>(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, _DWORD *a8, double a9, int8x16_t a10, __n128 a11)
{
  unsigned __int8 *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  float v30;
  int v31;
  float v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float *v38;
  float v39;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  float *v45;
  float v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  float *v52;
  float v53;
  BOOL v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  float v60;
  float *v61;
  float v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  float *v75;
  float v76;
  unsigned int v77;
  int v78;
  int v79;
  float v80;
  int v81;
  uint64_t v82;
  ggl::PipelineSetup *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  float32_t v92;
  float32x2_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  std::__shared_weak_count *v103;
  uint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  _QWORD *v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  char v138;
  float v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 v172;
  _QWORD *v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  float *v178;
  float *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  int v206;
  __int128 v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  int v218;
  float v219;
  int v220;
  float v221;
  int v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unsigned int v226;
  float *v227;
  float v228;
  BOOL v229;
  int v230;
  char v231;
  char v232;
  uint64_t v233;
  float *v234;
  float v235;
  BOOL v236;
  unsigned int v237;
  int v238;
  int v239;
  unint64_t v240;
  float *v241;
  float v242;
  BOOL v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  unint64_t v248;
  float v249;
  float *v250;
  float v251;
  unsigned int v252;
  float v253;
  float v254;
  float v255;
  float v256;
  uint64_t v257;
  float *v258;
  float v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  float *v264;
  float v265;
  unsigned int v266;
  int v267;
  int v268;
  float v269;
  int v270;
  uint64_t v271;
  ggl::PipelineSetup *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  float32_t v281;
  float32x2_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  std::__shared_weak_count *v293;
  uint64_t *v294;
  unint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  __int128 v322;
  _QWORD *v323;
  int v324;
  int v325;
  unint64_t v326;
  unint64_t v327;
  char v328;
  float v329;
  float32x2_t v330;
  float32x2_t v331;
  float32x2_t v332;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  __int128 v359;
  _QWORD *v360;
  int v361;
  int v362;
  unint64_t v363;
  unint64_t v364;
  float *v365;
  float *v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  BOOL v375;
  uint64_t *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  int v392;
  __int128 v393;
  _QWORD *v394;
  uint64_t v395;
  char v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  _QWORD *v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  int v406;
  int v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  float *v412;
  float v413;
  BOOL v414;
  int v415;
  char v416;
  char v417;
  uint64_t v418;
  float *v419;
  float v420;
  BOOL v421;
  unsigned int v422;
  int v423;
  int v424;
  unint64_t v425;
  float *v426;
  float v427;
  BOOL v428;
  unsigned int v429;
  unint64_t v430;
  unint64_t v431;
  _BYTE *v432;
  uint16x4_t v433;
  uint64_t v434;
  float *v435;
  float v436;
  unsigned int v437;
  int v438;
  int v439;
  int v440;
  uint64_t v441;
  ggl::PipelineSetup *v442;
  std::__shared_weak_count *v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t *v446;
  unint64_t v447;
  _QWORD *v448;
  _QWORD *v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  char v476;
  char v477;
  std::__shared_weak_count *v478;
  __int128 v479;
  unint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  unint64_t *v488;
  unint64_t v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t *v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  BOOL v515;
  uint64_t *v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unsigned __int8 *v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  _QWORD *v530;
  _QWORD *v531;
  uint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  _QWORD *v535;
  int v536;
  __int128 v537;
  unint64_t *v538;
  unint64_t v539;
  char v540;
  float v541;
  float v542;
  float v543;
  float v544;
  char v545;
  float v546;
  float v547;
  uint64_t v548;
  float v549;
  float v550;
  float v551;
  float v552;
  uint64_t v553;
  float v554;
  float v555;
  uint64_t v556;
  unsigned __int8 *v557;
  int8x16_t v558;
  __n128 v559;
  __n128 v560;
  uint64_t v563;
  __n128 v565;
  __n128 v566;
  uint64_t v568;
  std::__shared_weak_count *v569;
  std::__shared_weak_count *v570;
  std::__shared_weak_count *v571;
  __int128 v572;
  __int128 v573;
  int v574;
  uint64_t v575;
  _QWORD v576[2];
  float32x4_t v577;
  _BYTE v578[36];
  uint64_t v579;

  v13 = a3;
  v579 = *MEMORY[0x1E0C80C00];
  v14 = *((_DWORD *)a3 + 4);
  if (a3[3])
  {
    v15 = *(std::__shared_weak_count **)(a2 + 256);
    v568 = *(_QWORD *)(a2 + 248);
    v569 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  else
  {
    v568 = 0;
    v569 = 0;
  }
  v18 = *(_QWORD **)(a1 + 8);
  v19 = v18[1];
  if ((v19 & (v19 - 1)) != 0)
  {
    v21 = 0x1AF456233693CD46;
    if (v19 <= 0x1AF456233693CD46)
      v21 = 0x1AF456233693CD46 % v19;
    v20 = *(_QWORD **)(*v18 + 8 * v21);
    do
    {
      do
        v20 = (_QWORD *)*v20;
      while (v20[1] != 0x1AF456233693CD46);
    }
    while (v20[2] != 0x1AF456233693CD46);
  }
  else
  {
    v20 = *(_QWORD **)(*v18 + 8 * ((v19 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v20 = (_QWORD *)*v20;
      while (v20[1] != 0x1AF456233693CD46);
    }
    while (v20[2] != 0x1AF456233693CD46);
  }
  v22 = fmaxf(*(float *)(*(_QWORD *)(v20[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v20[5] + 32) + 3076), 1.0);
  v23 = *a7;
  v24 = (std::__shared_weak_count *)a7[1];
  v577 = 0uLL;
  if (v23)
  {
    *(_QWORD *)v578 = v23;
    *(_QWORD *)&v578[8] = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      *((_QWORD *)&v572 + 1) = v24;
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
    }
    else
    {
      *((_QWORD *)&v572 + 1) = 0;
    }
    v573 = 0uLL;
    *(_QWORD *)&v572 = v23;
    LOBYTE(v574) = 0;
    v33 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 48))(v23, &v573);
    LOBYTE(v574) = v33;
    if (v24)
    {
      v34 = (unint64_t *)&v24->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      v33 = v574;
    }
    if (!v33)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0.0;
      LOBYTE(v31) = 2;
      goto LABEL_104;
    }
    v36 = *(_QWORD *)(v572 + 24);
    if ((int)v22 >= 0x17)
      v37 = 23;
    else
      v37 = (int)v22;
    v38 = *(float **)v36;
    if (*(_QWORD *)v36
      && (v39 = *v38, LODWORD(v38) = *v38 == 1.0, *(_BYTE *)(v36 + 10))
      && (v39 != 0.0 ? (_ZF = v39 == 1.0) : (_ZF = 1), !_ZF)
      || (v41 = *(unsigned __int8 *)(v36 + v38 + 11), v39 = 0.0, v41 == 2))
    {
      v578[0] = 1;
      LOBYTE(v570) = 1;
      v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 0, v578);
      v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 1, &v570);
      if (v39 < 1.0)
        v43 = v42;
      if (v43)
      {
LABEL_48:
        v44 = *(_QWORD *)(v572 + 24);
        v45 = *(float **)v44;
        if (*(_QWORD *)v44
          && (v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(_BYTE *)(v44 + 10))
          && (v46 != 0.0 ? (v47 = v46 == 1.0) : (v47 = 1), !v47)
          || (v48 = *(unsigned __int8 *)(v44 + v45 + 11), v46 = 0.0, v48 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v49 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x68u, v37, 0, v578);
          v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x68u, v37, 1u, &v570);
          if (v46 >= 1.0)
            v29 = v50;
          else
            v29 = v49;
        }
        else
        {
          v29 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x68u, v37, v48, 0);
        }
        v51 = *(_QWORD *)(v572 + 24);
        v52 = *(float **)v51;
        if (*(_QWORD *)v51
          && (v53 = *v52, LODWORD(v52) = *v52 == 1.0, *(_BYTE *)(v51 + 10))
          && (v53 != 0.0 ? (v54 = v53 == 1.0) : (v54 = 1), !v54)
          || (v55 = *(unsigned __int8 *)(v51 + v52 + 11), v53 = 0.0, v55 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v56 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v51, 0x6Bu, 0, v578);
          v57 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v51, 0x6Bu, 1u, &v570);
          if (v53 >= 1.0)
            v58 = (_BYTE *)v57;
          else
            v58 = (_BYTE *)v56;
          if (*v58)
            goto LABEL_75;
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v572 + 24), 0x6Bu, v55, 0))
        {
LABEL_75:
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Du, 2u, fminf(fmaxf(v22, 0.0), 23.0));
LABEL_78:
          v577 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v578)), (float32x4_t)vdupq_n_s32(0x37800080u));
          v59 = *(_QWORD *)(v572 + 24);
          v60 = fminf(fmaxf(v22, 0.0), 23.0);
          v61 = *(float **)v59;
          if (*(_QWORD *)v59
            && (v62 = *v61, LODWORD(v61) = *v61 == 1.0, *(_BYTE *)(v59 + 10))
            && v62 != 0.0
            && v62 != 1.0
            || (v63 = *(unsigned __int8 *)(v59 + v61 + 11), v62 = 0.0, v63 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v59, 0x61u, 0, v578, v60);
            v65 = v64;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v59, 0x61u, 1u, (BOOL *)&v570, v60);
            v30 = v65 + (float)((float)(v66 - v65) * v62);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v572 + 24), 0x61u, v63, 0, v60);
            v30 = v67;
          }
          v68 = *(_QWORD *)(v572 + 24);
          v69 = *(float **)v68;
          if (*(_QWORD *)v68
            && (v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(_BYTE *)(v68 + 10))
            && v70 != 0.0
            && v70 != 1.0
            || (v71 = *(unsigned __int8 *)(v68 + v69 + 11), v70 = 0.0, v71 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v72 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x13Fu, v37, 0, v578);
            v73 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x13Fu, v37, 1u, &v570);
            if (v70 >= 1.0)
              LOBYTE(v31) = v73;
            else
              LOBYTE(v31) = v72;
          }
          else
          {
            v31 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x13Fu, v37, v71, 0);
          }
          v74 = *(_QWORD *)(v572 + 24);
          v75 = *(float **)v74;
          if (*(_QWORD *)v74
            && (v76 = *v75, LODWORD(v75) = *v75 == 1.0, *(_BYTE *)(v74 + 10))
            && v76 != 0.0
            && v76 != 1.0
            || (v77 = *(unsigned __int8 *)(v74 + v75 + 11), v76 = 0.0, v77 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v78 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v74, 0x8Au, v37, 0, v578);
            v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v74, 0x8Au, v37, 1u, &v570);
            if (v76 < 1.0)
              LOBYTE(v79) = v78;
          }
          else
          {
            v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x8Au, v37, v77, 0);
          }
          v28 = v79 - 1 < 2;
LABEL_104:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
          if (v13[1])
            goto LABEL_105;
          goto LABEL_25;
        }
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Du, v37, 2u, 0);
        goto LABEL_78;
      }
    }
    else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v572 + 24), 0x5Bu, v37, v41, 0))
    {
      goto LABEL_48;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
    goto LABEL_267;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0.0;
  LOBYTE(v31) = 2;
  if (a3[1])
  {
LABEL_105:
    v577 = (float32x4_t)xmmword_19FFB2D90;
    v32 = 1.0;
    goto LABEL_106;
  }
LABEL_25:
  v32 = v577.f32[3];
LABEL_106:
  if (v32 >= 0.0039062 && v30 >= 0.1)
  {
    v80 = *(float *)(a2 + 368) * v30;
    memset(&v578[4], 0, 32);
    v81 = *(_DWORD *)(a6 + 88);
    v553 = a6;
    if (v81)
    {
      if (v81 != 1)
        goto LABEL_693;
      if (!*(_BYTE *)(a6 + 32))
        goto LABEL_266;
      v554 = v80;
      v82 = *(_QWORD *)(a6 + 8);
      v83 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)a5);
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorPipelineState,std::shared_ptr<ggl::ElevatedStrokeColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 32, v568 != 0);
      ggl::Flyover::FlyoverPipelineSetup::setState(v83, v572, *((std::__shared_weak_count **)&v572 + 1));
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
      if (*((_QWORD *)&v572 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (_QWORD *)*((_QWORD *)v83 + 8);
      v88 = v87[6];
      v572 = 0uLL;
      v89 = *(_QWORD *)(v88 + 8);
      *(_QWORD *)&v90 = 0;
      *((_QWORD *)&v90 + 1) = v88;
      v91 = *(_QWORD *)(v88 + 72);
      v572 = v90;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v89;
      v575 = v91;
      LOWORD(v574) = 1;
      v92 = v577.f32[3];
      *(float32x4_t *)v91 = v577;
      *(_DWORD *)(v91 + 48) = v14;
      *(_DWORD *)(v91 + 32) = *a8;
      *(_DWORD *)(v91 + 36) = a8[1];
      *(_DWORD *)(v91 + 40) = a8[2];
      *(_DWORD *)(v91 + 44) = a8[3];
      if (!*(_BYTE *)(a6 + 32))
        goto LABEL_694;
      LODWORD(v90) = *(_DWORD *)(a6 + 24);
      if (v31 == 2)
      {
        v93 = (float32x2_t)0x3F0000003F000000;
      }
      else if (v31 == 1)
      {
        v93 = (float32x2_t)1065353216;
      }
      else
      {
        v93 = (float32x2_t)0x3F80000000000000;
      }
      v140 = vmul_n_f32(v93, v554);
      v141.i32[0] = vsub_f32(*(float32x2_t *)&v90, v140).u32[0];
      v141.i32[1] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v90, 0), v140).i32[1];
      *(float *)&v90 = *(float *)(a6 + 28) + *(float *)&v90;
      v142 = vmaxnm_f32(vdiv_f32(v141, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v90, 0)), 0);
      __asm
      {
        FMOV            V1.2S, #1.0
        FMOV            V4.2S, #-1.0
      }
      *(int8x8_t *)(v91 + 16) = vbsl_s8((int8x8_t)vcgt_f32(v142, _D1), (int8x8_t)_D1, (int8x8_t)vmla_f32(_D4, (float32x2_t)0x4000000040000000, v142));
      v87[1] = 0;
      v148 = *(_QWORD *)(a2 + 216);
      *v87 = v148;
      v149 = (_QWORD *)*((_QWORD *)v83 + 20);
      v150 = *(_QWORD *)(a2 + 224);
      if (v150)
      {
        v151 = (unint64_t *)(v150 + 8);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
      }
      v153 = (std::__shared_weak_count *)v149[1];
      *v149 = v148;
      v149[1] = v150;
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          v549 = v92;
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
          v92 = v549;
        }
      }
      v156 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v156 + 24) = 0;
      v157 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(v156 + 16) = v157;
      v158 = *((_QWORD *)v83 + 20);
      v159 = *(_QWORD *)(a2 + 240);
      if (v159)
      {
        v160 = (unint64_t *)(v159 + 8);
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
      }
      v162 = *(std::__shared_weak_count **)(v158 + 24);
      *(_QWORD *)(v158 + 16) = v157;
      *(_QWORD *)(v158 + 24) = v159;
      if (v162)
      {
        v163 = (unint64_t *)&v162->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          v550 = v92;
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
          v92 = v550;
        }
      }
      v124 = v29;
      v165 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v165 + 32) = v568;
      *(_QWORD *)(v165 + 40) = 0;
      v166 = *((_QWORD *)v83 + 20);
      if (v569)
      {
        v167 = (unint64_t *)&v569->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v169 = *(std::__shared_weak_count **)(v166 + 40);
      *(_QWORD *)(v166 + 32) = v568;
      *(_QWORD *)(v166 + 40) = v569;
      if (v169)
      {
        v170 = (unint64_t *)&v169->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          v551 = v92;
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          v92 = v551;
        }
      }
      v556 = v82;
      if (v575)
      {
        v172 = v573;
        if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
        {
          v173 = (_QWORD *)*((_QWORD *)&v572 + 1);
          v174 = v574;
          v175 = BYTE1(v574);
          if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
          {
            v552 = v92;
            (*(void (**)(void))(*(_QWORD *)v572 + 64))();
            v92 = v552;
          }
          if (v174 && !v175)
          {
            v177 = v173[7];
            v176 = v173[8];
            if (v176 == v177)
              v177 = v173[10] - v173[9];
            if ((unint64_t)v172 < v177)
              v177 = v172;
            if (v176 <= *((_QWORD *)&v172 + 1))
              v176 = *((_QWORD *)&v172 + 1);
            if (v176 == v177)
              v176 = v177 + v173[10] - v173[9];
            v173[7] = v177;
            v173[8] = v176;
          }
        }
      }
      v545 = 0;
      v139 = v92;
      v138 = 1;
    }
    else
    {
      v555 = v80;
      v94 = *(_QWORD *)(a6 + 8);
      v545 = *(_BYTE *)(a6 + 24);
      v576[0] = *(_QWORD *)(a6 + 25);
      *(_QWORD *)((char *)v576 + 7) = *(_QWORD *)(a6 + 32);
      v83 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 8));
      v95 = *(_QWORD *)(*((_QWORD *)v83 + 8) + 48);
      v572 = 0uLL;
      v96 = *(_QWORD *)(v95 + 8);
      *(_QWORD *)&v97 = 0;
      *((_QWORD *)&v97 + 1) = v95;
      v98 = *(_QWORD *)(v95 + 72);
      v572 = v97;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v96;
      v575 = v98;
      LOWORD(v574) = 1;
      *(_QWORD *)v98 = v577.i64[0];
      *(_DWORD *)(v98 + 8) = v577.i32[2];
      *(float *)(v98 + 12) = v32;
      *(_DWORD *)(v98 + 32) = *a8;
      *(_DWORD *)(v98 + 36) = a8[1];
      *(_DWORD *)(v98 + 40) = a8[2];
      *(_DWORD *)(v98 + 44) = a8[3];
      if (v31 == 2)
      {
        v100 = 0.5;
        v99 = 0.5;
      }
      else if (v31 == 1)
      {
        v99 = 1.0;
        v100 = 0.0;
      }
      else
      {
        v99 = 0.0;
        v100 = 1.0;
      }
      v101 = -(float)(v555 * v100);
      v102 = v99 * v555;
      if (v13[1])
      {
        v102 = 1.0;
        v101 = -1.0;
      }
      *(float *)(v98 + 16) = v101;
      *(float *)(v98 + 20) = v102;
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedStrokeColorWithDistanceShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v570, a5 + 152, v568 != 0, v13[2]);
      ggl::Flyover::FlyoverPipelineSetup::setState(v83, (uint64_t)v570, v571);
      v103 = v571;
      if (v571)
      {
        v104 = &v571->__shared_owners_;
        do
          v105 = __ldaxr((unint64_t *)v104);
        while (__stlxr(v105 - 1, (unint64_t *)v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (_QWORD *)*((_QWORD *)v83 + 8);
      v106[1] = 0;
      v107 = *(_QWORD *)(a2 + 216);
      *v106 = v107;
      v108 = (_QWORD *)*((_QWORD *)v83 + 20);
      v109 = *(_QWORD *)(a2 + 224);
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v112 = (std::__shared_weak_count *)v108[1];
      *v108 = v107;
      v108[1] = v109;
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v115 + 24) = 0;
      v116 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(v115 + 16) = v116;
      v117 = *((_QWORD *)v83 + 20);
      v118 = *(_QWORD *)(a2 + 240);
      if (v118)
      {
        v119 = (unint64_t *)(v118 + 8);
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      v121 = *(std::__shared_weak_count **)(v117 + 24);
      *(_QWORD *)(v117 + 16) = v116;
      *(_QWORD *)(v117 + 24) = v118;
      if (v121)
      {
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = v29;
      v125 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v125 + 32) = v568;
      *(_QWORD *)(v125 + 40) = 0;
      v126 = *((_QWORD *)v83 + 20);
      if (v569)
      {
        v127 = (unint64_t *)&v569->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
      }
      v129 = *(std::__shared_weak_count **)(v126 + 40);
      *(_QWORD *)(v126 + 32) = v568;
      *(_QWORD *)(v126 + 40) = v569;
      if (v129)
      {
        v130 = (unint64_t *)&v129->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v556 = v94;
      if (v575)
      {
        v132 = v573;
        if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
        {
          v133 = (_QWORD *)*((_QWORD *)&v572 + 1);
          v134 = v574;
          v135 = BYTE1(v574);
          if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v572 + 64))();
          if (v134 && !v135)
          {
            v137 = v133[7];
            v136 = v133[8];
            if (v136 == v137)
              v137 = v133[10] - v133[9];
            if ((unint64_t)v132 < v137)
              v137 = v132;
            if (v136 <= *((_QWORD *)&v132 + 1))
              v136 = *((_QWORD *)&v132 + 1);
            if (v136 == v137)
              v136 = v137 + v133[10] - v133[9];
            v133[7] = v137;
            v133[8] = v136;
          }
        }
      }
      v138 = 0;
      v139 = v577.f32[3];
    }
    if (v139 >= 1.0)
    {
      v182 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a5 + 752), 3, 0, (v13[1] | v13[2]) == 0, 0, 1, v13[1], 3);
      v183 = 0;
    }
    else
    {
      v178 = *(float **)(a5 + 792);
      if (!v178)
        goto LABEL_231;
      v179 = (float *)(a5 + 792);
      do
      {
        while (v178[7] < v577.f32[0] && v178[8] < v577.f32[1] && v178[9] < v577.f32[2] && v178[10] < v139)
        {
          v178 = (float *)*((_QWORD *)v178 + 1);
          if (!v178)
            goto LABEL_226;
        }
        v179 = v178;
        v178 = *(float **)v178;
      }
      while (v178);
LABEL_226:
      if (v179 != (float *)(a5 + 792)
        && (v577.f32[0] >= v179[7] || v577.f32[1] >= v179[8] || v577.f32[2] >= v179[9] || v139 >= v179[10]))
      {
        v181 = *((unsigned __int8 *)v179 + 44);
        v180 = a5;
      }
      else
      {
LABEL_231:
        v180 = a5;
        std::__tree<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::__map_value_compare<geo::Color<float,4,(geo::ColorSpace)0>,std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::less<geo::Color<float,4,(geo::ColorSpace)0>>,true>,std::allocator<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>>>::__emplace_unique_key_args<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0> const&,unsigned char &>((uint64_t *)(a5 + 784), v577.f32, &v577, *(_BYTE *)(a5 + 808));
        v181 = *(unsigned __int8 *)(a5 + 808);
        *(_BYTE *)(a5 + 808) = (v181 + 1) % *(unsigned __int8 *)(a5 + 809);
      }
      v183 = v13[4] + v181;
      v182 = v180 + 512;
    }
    v184 = *(_QWORD *)(a4 + 8);
    if (!v184)
      goto LABEL_266;
    v185 = (v124 << 10) | 1u;
    v186 = a4 + 8;
    do
    {
      v187 = *(_DWORD *)(v184 + 28);
      v188 = v187 < v28;
      if (v187 >= v28)
        v189 = (uint64_t *)v184;
      else
        v189 = (uint64_t *)(v184 + 8);
      if (!v188)
        v186 = v184;
      v184 = *v189;
    }
    while (*v189);
    if (v186 == a4 + 8 || v28 < *(_DWORD *)(v186 + 28))
    {
LABEL_266:
      a6 = v553;
      goto LABEL_267;
    }
    v190 = *(_QWORD **)(*((_QWORD *)v13 + 1) + 8);
    v191 = v190[3];
    v192 = v190[4];
    v193 = v192 - v191;
    if (v192 == v191)
    {
      v201 = 0;
      v196 = a5;
      if ((v138 & 1) == 0)
      {
LABEL_260:
        v572 = *(_OWORD *)v578;
        v573 = *(_OWORD *)&v578[16];
        v574 = *(_DWORD *)&v578[32];
        v208 = *(_QWORD **)(v196 + 736);
        v209 = v208[1];
        if (v209 == *(_QWORD *)(v196 + 744))
        {
          v208 = (_QWORD *)*v208;
          if (!v208)
          {
            v208 = malloc_type_malloc(120 * v209 + 16, 0xB644C221uLL);
            *v208 = 0;
            v208[1] = 0;
            **(_QWORD **)(v196 + 736) = v208;
          }
          *(_QWORD *)(v196 + 736) = v208;
          v209 = v208[1];
        }
        v210 = &v208[15 * v209];
        v210[2] = &off_1E42B59B0;
        v205 = v210 + 2;
        v208[1] = v209 + 1;
        v205[2] = "draped stroke";
        v205[3] = v182;
        v205[4] = v83;
        *((_DWORD *)v205 + 10) = v183;
        v205[6] = v185;
        *((_DWORD *)v205 + 14) = 1065353216;
        *((_DWORD *)v205 + 15) = v572;
        *((int64x2_t *)v205 + 6) = vdupq_n_s64(1uLL);
        v205[14] = 0;
        v205[8] = v556;
        *((_BYTE *)v205 + 72) = v545;
        v211 = v576[0];
        v205[10] = *(_QWORD *)((char *)v576 + 7);
        v205[11] = 0;
        *(_QWORD *)((char *)v205 + 73) = v211;
        v205[12] = 1;
LABEL_265:
        ggl::CommandBuffer::pushRenderItem(v201, (ggl::RenderItem *)v205);
        goto LABEL_266;
      }
    }
    else
    {
      v194 = 0;
      v195 = v193 >> 3;
      v196 = a5;
      while (1)
      {
        v197 = *(unsigned __int8 **)(v191 + 8 * v194);
        if (*v197 == *(unsigned __int8 *)(v186 + 32))
        {
          v198 = *((_QWORD *)v197 + 1);
          v199 = v190[15];
          if (v198 < (v190[16] - v199) >> 3)
            break;
        }
        if (++v194 >= v195)
          goto LABEL_253;
      }
      v200 = *(_QWORD *)(v199 + 8 * v198);
      if (v200)
      {
        v201 = *(_QWORD *)(*(_QWORD *)(v200 + 24) + 8 * *(unsigned __int8 *)(v186 + 33));
        if ((v138 & 1) != 0)
          goto LABEL_254;
        goto LABEL_260;
      }
LABEL_253:
      v201 = 0;
      if ((v138 & 1) == 0)
        goto LABEL_260;
    }
LABEL_254:
    v572 = *(_OWORD *)v578;
    v573 = *(_OWORD *)&v578[16];
    v574 = *(_DWORD *)&v578[32];
    v202 = *(_QWORD **)(v196 + 736);
    v203 = v202[1];
    if (v203 == *(_QWORD *)(v196 + 744))
    {
      v202 = (_QWORD *)*v202;
      if (!v202)
      {
        v202 = malloc_type_malloc(120 * v203 + 16, 0xB644C221uLL);
        *v202 = 0;
        v202[1] = 0;
        **(_QWORD **)(v196 + 736) = v202;
      }
      *(_QWORD *)(v196 + 736) = v202;
      v203 = v202[1];
    }
    v204 = &v202[15 * v203];
    v204[2] = &off_1E42B59B0;
    v205 = v204 + 2;
    v202[1] = v203 + 1;
    v205[2] = "draped stroke";
    v205[3] = v182;
    v205[4] = v83;
    *((_DWORD *)v205 + 10) = v183;
    v205[6] = v185;
    *((_DWORD *)v205 + 14) = 1065353216;
    v206 = v574;
    v207 = v573;
    *(_OWORD *)((char *)v205 + 60) = v572;
    *((_DWORD *)v205 + 23) = v206;
    *(_OWORD *)((char *)v205 + 76) = v207;
    *((int64x2_t *)v205 + 6) = vdupq_n_s64(1uLL);
    v205[14] = 0;
    v205[8] = v556;
    goto LABEL_265;
  }
LABEL_267:
  v212 = *a7;
  v213 = (std::__shared_weak_count *)a7[1];
  v577 = 0uLL;
  if (v212)
  {
    *(_QWORD *)v578 = v212;
    *(_QWORD *)&v578[8] = v213;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 1, v214));
      *((_QWORD *)&v572 + 1) = v213;
      do
        v216 = __ldxr(v214);
      while (__stxr(v216 + 1, v214));
    }
    else
    {
      *((_QWORD *)&v572 + 1) = 0;
    }
    v573 = 0uLL;
    *(_QWORD *)&v572 = v212;
    LOBYTE(v574) = 0;
    v222 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v212 + 48))(v212, &v573);
    LOBYTE(v574) = v222;
    if (v213)
    {
      v223 = (unint64_t *)&v213->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
      v222 = v574;
    }
    if (!v222)
    {
      v217 = 0;
      v218 = 0;
      v219 = 0.0;
      LOBYTE(v220) = 2;
      goto LABEL_354;
    }
    v225 = *(_QWORD *)(v572 + 24);
    if ((int)v22 >= 0x17)
      v226 = 23;
    else
      v226 = (int)v22;
    v227 = *(float **)v225;
    if (*(_QWORD *)v225
      && (v228 = *v227, LODWORD(v227) = *v227 == 1.0, *(_BYTE *)(v225 + 10))
      && (v228 != 0.0 ? (v229 = v228 == 1.0) : (v229 = 1), !v229)
      || (v230 = *(unsigned __int8 *)(v225 + v227 + 11), v228 = 0.0, v230 == 2))
    {
      v578[0] = 1;
      LOBYTE(v570) = 1;
      v231 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v225, 0x5Bu, v226, 0, v578);
      v232 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v225, 0x5Bu, v226, 1, &v570);
      if (v228 < 1.0)
        v232 = v231;
      if (v232)
      {
LABEL_298:
        v233 = *(_QWORD *)(v572 + 24);
        v234 = *(float **)v233;
        if (*(_QWORD *)v233
          && (v235 = *v234, LODWORD(v234) = *v234 == 1.0, *(_BYTE *)(v233 + 10))
          && (v235 != 0.0 ? (v236 = v235 == 1.0) : (v236 = 1), !v236)
          || (v237 = *(unsigned __int8 *)(v233 + v234 + 11), v235 = 0.0, v237 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v238 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v233, 0x68u, v226, 0, v578);
          v239 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v233, 0x68u, v226, 1u, &v570);
          if (v235 >= 1.0)
            v218 = v239;
          else
            v218 = v238;
        }
        else
        {
          v218 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x68u, v226, v237, 0);
        }
        v240 = *(_QWORD *)(v572 + 24);
        v241 = *(float **)v240;
        if (*(_QWORD *)v240
          && (v242 = *v241, LODWORD(v241) = *v241 == 1.0, *(_BYTE *)(v240 + 10))
          && (v242 != 0.0 ? (v243 = v242 == 1.0) : (v243 = 1), !v243)
          || (v244 = *(unsigned __int8 *)(v240 + v241 + 11), v242 = 0.0, v244 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v245 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v240, 0x197u, 0, v578);
          v246 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v240, 0x197u, 1u, &v570);
          if (v242 >= 1.0)
            v247 = (_BYTE *)v246;
          else
            v247 = (_BYTE *)v245;
          if (*v247)
            goto LABEL_325;
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v572 + 24), 0x197u, v244, 0))
        {
LABEL_325:
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x193u, 2u, fminf(fmaxf(v22, 0.0), 23.0));
LABEL_328:
          v577 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v578)), (float32x4_t)vdupq_n_s32(0x37800080u));
          v248 = *(_QWORD *)(v572 + 24);
          v249 = fminf(fmaxf(v22, 0.0), 23.0);
          v250 = *(float **)v248;
          if (*(_QWORD *)v248
            && (v251 = *v250, LODWORD(v250) = *v250 == 1.0, *(_BYTE *)(v248 + 10))
            && v251 != 0.0
            && v251 != 1.0
            || (v252 = *(unsigned __int8 *)(v248 + v250 + 11), v251 = 0.0, v252 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v248, 0x194u, 0, v578, v249);
            v254 = v253;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v248, 0x194u, 1u, (BOOL *)&v570, v249);
            v219 = v254 + (float)((float)(v255 - v254) * v251);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v572 + 24), 0x194u, v252, 0, v249);
            v219 = v256;
          }
          v257 = *(_QWORD *)(v572 + 24);
          v258 = *(float **)v257;
          if (*(_QWORD *)v257
            && (v259 = *v258, LODWORD(v258) = *v258 == 1.0, *(_BYTE *)(v257 + 10))
            && v259 != 0.0
            && v259 != 1.0
            || (v260 = *(unsigned __int8 *)(v257 + v258 + 11), v259 = 0.0, v260 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v261 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v257, 0x198u, v226, 0, v578);
            v262 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v257, 0x198u, v226, 1u, &v570);
            if (v259 >= 1.0)
              LOBYTE(v220) = v262;
            else
              LOBYTE(v220) = v261;
          }
          else
          {
            v220 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x198u, v226, v260, 0);
          }
          v263 = *(_QWORD *)(v572 + 24);
          v264 = *(float **)v263;
          if (*(_QWORD *)v263
            && (v265 = *v264, LODWORD(v264) = *v264 == 1.0, *(_BYTE *)(v263 + 10))
            && v265 != 0.0
            && v265 != 1.0
            || (v266 = *(unsigned __int8 *)(v263 + v264 + 11), v265 = 0.0, v266 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v267 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v263, 0x8Au, v226, 0, v578);
            v268 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v263, 0x8Au, v226, 1u, &v570);
            if (v265 < 1.0)
              LOBYTE(v268) = v267;
          }
          else
          {
            v268 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x8Au, v226, v266, 0);
          }
          v217 = v268 - 1 < 2;
LABEL_354:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
          if (v13[1])
            goto LABEL_355;
          goto LABEL_275;
        }
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x193u, v226, 2u, 0);
        goto LABEL_328;
      }
    }
    else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v572 + 24), 0x5Bu, v226, v230, 0))
    {
      goto LABEL_298;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
    goto LABEL_517;
  }
  v217 = 0;
  v218 = 0;
  v219 = 0.0;
  LOBYTE(v220) = 2;
  if (v13[1])
  {
LABEL_355:
    v577 = (float32x4_t)xmmword_19FFB2D90;
    v221 = 1.0;
    goto LABEL_356;
  }
LABEL_275:
  v221 = v577.f32[3];
LABEL_356:
  if (v221 >= 0.0039062 && v219 >= 0.1)
  {
    v269 = *(float *)(a2 + 368) * v219;
    memset(&v578[4], 0, 32);
    v270 = *(_DWORD *)(a6 + 88);
    v557 = v13;
    if (!v270)
    {
      v547 = v269;
      v283 = *(_QWORD *)(a6 + 8);
      v540 = *(_BYTE *)(a6 + 24);
      v576[0] = *(_QWORD *)(a6 + 25);
      *(_QWORD *)((char *)v576 + 7) = *(_QWORD *)(a6 + 32);
      v272 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 8));
      v284 = *(_QWORD *)(*((_QWORD *)v272 + 8) + 48);
      v572 = 0uLL;
      v285 = *(_QWORD *)(v284 + 8);
      *(_QWORD *)&v286 = 0;
      *((_QWORD *)&v286 + 1) = v284;
      v287 = *(_QWORD *)(v284 + 72);
      v572 = v286;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v285;
      v575 = v287;
      LOWORD(v574) = 1;
      *(_QWORD *)v287 = v577.i64[0];
      *(_DWORD *)(v287 + 8) = v577.i32[2];
      *(float *)(v287 + 12) = v221;
      *(_DWORD *)(v287 + 32) = *a8;
      *(_DWORD *)(v287 + 36) = a8[1];
      *(_DWORD *)(v287 + 40) = a8[2];
      *(_DWORD *)(v287 + 44) = a8[3];
      if (v220 == 2)
      {
        v290 = 0.5;
        v289 = 0.5;
        v288 = v547;
      }
      else
      {
        v288 = v547;
        if (v220 == 1)
        {
          v289 = 1.0;
          v290 = 0.0;
        }
        else
        {
          v289 = 0.0;
          v290 = 1.0;
        }
      }
      v291 = -(float)(v288 * v290);
      v292 = v289 * v288;
      if (v13[1])
      {
        v292 = 1.0;
        v291 = -1.0;
      }
      *(float *)(v287 + 16) = v291;
      *(float *)(v287 + 20) = v292;
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedStrokeColorWithDistanceShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v570, a5 + 152, v568 != 0, v13[2]);
      ggl::Flyover::FlyoverPipelineSetup::setState(v272, (uint64_t)v570, v571);
      v293 = v571;
      if (v571)
      {
        v294 = &v571->__shared_owners_;
        do
          v295 = __ldaxr((unint64_t *)v294);
        while (__stlxr(v295 - 1, (unint64_t *)v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
      v296 = (_QWORD *)*((_QWORD *)v272 + 8);
      v296[1] = 0;
      v297 = *(_QWORD *)(a2 + 216);
      *v296 = v297;
      v298 = (_QWORD *)*((_QWORD *)v272 + 20);
      v299 = *(_QWORD *)(a2 + 224);
      if (v299)
      {
        v300 = (unint64_t *)(v299 + 8);
        do
          v301 = __ldxr(v300);
        while (__stxr(v301 + 1, v300));
      }
      v302 = (std::__shared_weak_count *)v298[1];
      *v298 = v297;
      v298[1] = v299;
      if (v302)
      {
        v303 = (unint64_t *)&v302->__shared_owners_;
        do
          v304 = __ldaxr(v303);
        while (__stlxr(v304 - 1, v303));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
      }
      v305 = *((_QWORD *)v272 + 8);
      *(_QWORD *)(v305 + 24) = 0;
      v306 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(v305 + 16) = v306;
      v307 = *((_QWORD *)v272 + 20);
      v308 = *(_QWORD *)(a2 + 240);
      if (v308)
      {
        v309 = (unint64_t *)(v308 + 8);
        do
          v310 = __ldxr(v309);
        while (__stxr(v310 + 1, v309));
      }
      v311 = *(std::__shared_weak_count **)(v307 + 24);
      *(_QWORD *)(v307 + 16) = v306;
      *(_QWORD *)(v307 + 24) = v308;
      if (v311)
      {
        v312 = (unint64_t *)&v311->__shared_owners_;
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }
      v314 = v218;
      v315 = *((_QWORD *)v272 + 8);
      *(_QWORD *)(v315 + 32) = v568;
      *(_QWORD *)(v315 + 40) = 0;
      v316 = *((_QWORD *)v272 + 20);
      if (v569)
      {
        v317 = (unint64_t *)&v569->__shared_owners_;
        do
          v318 = __ldxr(v317);
        while (__stxr(v318 + 1, v317));
      }
      v319 = *(std::__shared_weak_count **)(v316 + 40);
      *(_QWORD *)(v316 + 32) = v568;
      *(_QWORD *)(v316 + 40) = v569;
      if (v319)
      {
        v320 = (unint64_t *)&v319->__shared_owners_;
        do
          v321 = __ldaxr(v320);
        while (__stlxr(v321 - 1, v320));
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
          std::__shared_weak_count::__release_weak(v319);
        }
      }
      v548 = v283;
      if (v575)
      {
        v322 = v573;
        if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
        {
          v323 = (_QWORD *)*((_QWORD *)&v572 + 1);
          v324 = v574;
          v325 = BYTE1(v574);
          if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v572 + 64))();
          if (v324 && !v325)
          {
            v327 = v323[7];
            v326 = v323[8];
            if (v326 == v327)
              v327 = v323[10] - v323[9];
            if ((unint64_t)v322 < v327)
              v327 = v322;
            if (v326 <= *((_QWORD *)&v322 + 1))
              v326 = *((_QWORD *)&v322 + 1);
            if (v326 == v327)
              v326 = v327 + v323[10] - v323[9];
            v323[7] = v327;
            v323[8] = v326;
          }
        }
      }
      v328 = 0;
      v329 = v577.f32[3];
      goto LABEL_466;
    }
    if (v270 == 1)
    {
      if (!*(_BYTE *)(a6 + 64))
      {
LABEL_516:
        v13 = v557;
        goto LABEL_517;
      }
      v546 = v269;
      v271 = *(_QWORD *)(a6 + 40);
      v272 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)a5);
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorPipelineState,std::shared_ptr<ggl::ElevatedStrokeColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 32, v568 != 0);
      ggl::Flyover::FlyoverPipelineSetup::setState(v272, v572, *((std::__shared_weak_count **)&v572 + 1));
      v273 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
      if (*((_QWORD *)&v572 + 1))
      {
        v274 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
      v276 = (_QWORD *)*((_QWORD *)v272 + 8);
      v277 = v276[6];
      v572 = 0uLL;
      v278 = *(_QWORD *)(v277 + 8);
      *(_QWORD *)&v279 = 0;
      *((_QWORD *)&v279 + 1) = v277;
      v280 = *(_QWORD *)(v277 + 72);
      v572 = v279;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v278;
      v575 = v280;
      LOWORD(v574) = 1;
      v281 = v577.f32[3];
      *(float32x4_t *)v280 = v577;
      *(_DWORD *)(v280 + 48) = v14;
      *(_DWORD *)(v280 + 32) = *a8;
      *(_DWORD *)(v280 + 36) = a8[1];
      *(_DWORD *)(v280 + 40) = a8[2];
      *(_DWORD *)(v280 + 44) = a8[3];
      if (*(_BYTE *)(a6 + 64))
      {
        LODWORD(v279) = *(_DWORD *)(a6 + 56);
        if (v220 == 2)
        {
          v282 = (float32x2_t)0x3F0000003F000000;
        }
        else if (v220 == 1)
        {
          v282 = (float32x2_t)1065353216;
        }
        else
        {
          v282 = (float32x2_t)0x3F80000000000000;
        }
        v330 = vmul_n_f32(v282, v546);
        v331.i32[0] = vsub_f32(*(float32x2_t *)&v279, v330).u32[0];
        v331.i32[1] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v279, 0), v330).i32[1];
        *(float *)&v279 = *(float *)(a6 + 60) + *(float *)&v279;
        v332 = vmaxnm_f32(vdiv_f32(v331, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v279, 0)), 0);
        __asm
        {
          FMOV            V1.2S, #1.0
          FMOV            V4.2S, #-1.0
        }
        *(int8x8_t *)(v280 + 16) = vbsl_s8((int8x8_t)vcgt_f32(v332, _D1), (int8x8_t)_D1, (int8x8_t)vmla_f32(_D4, (float32x2_t)0x4000000040000000, v332));
        v276[1] = 0;
        v335 = *(_QWORD *)(a2 + 216);
        *v276 = v335;
        v336 = (_QWORD *)*((_QWORD *)v272 + 20);
        v337 = *(_QWORD *)(a2 + 224);
        if (v337)
        {
          v338 = (unint64_t *)(v337 + 8);
          do
            v339 = __ldxr(v338);
          while (__stxr(v339 + 1, v338));
        }
        v340 = (std::__shared_weak_count *)v336[1];
        *v336 = v335;
        v336[1] = v337;
        if (v340)
        {
          v341 = (unint64_t *)&v340->__shared_owners_;
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            v541 = v281;
            ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
            std::__shared_weak_count::__release_weak(v340);
            v281 = v541;
          }
        }
        v343 = *((_QWORD *)v272 + 8);
        *(_QWORD *)(v343 + 24) = 0;
        v344 = *(_QWORD *)(a2 + 232);
        *(_QWORD *)(v343 + 16) = v344;
        v345 = *((_QWORD *)v272 + 20);
        v346 = *(_QWORD *)(a2 + 240);
        if (v346)
        {
          v347 = (unint64_t *)(v346 + 8);
          do
            v348 = __ldxr(v347);
          while (__stxr(v348 + 1, v347));
        }
        v349 = *(std::__shared_weak_count **)(v345 + 24);
        *(_QWORD *)(v345 + 16) = v344;
        *(_QWORD *)(v345 + 24) = v346;
        if (v349)
        {
          v350 = (unint64_t *)&v349->__shared_owners_;
          do
            v351 = __ldaxr(v350);
          while (__stlxr(v351 - 1, v350));
          if (!v351)
          {
            v542 = v281;
            ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
            std::__shared_weak_count::__release_weak(v349);
            v281 = v542;
          }
        }
        v314 = v218;
        v352 = *((_QWORD *)v272 + 8);
        *(_QWORD *)(v352 + 32) = v568;
        *(_QWORD *)(v352 + 40) = 0;
        v353 = *((_QWORD *)v272 + 20);
        if (v569)
        {
          v354 = (unint64_t *)&v569->__shared_owners_;
          do
            v355 = __ldxr(v354);
          while (__stxr(v355 + 1, v354));
        }
        v356 = *(std::__shared_weak_count **)(v353 + 40);
        *(_QWORD *)(v353 + 32) = v568;
        *(_QWORD *)(v353 + 40) = v569;
        if (v356)
        {
          v357 = (unint64_t *)&v356->__shared_owners_;
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            v543 = v281;
            ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
            std::__shared_weak_count::__release_weak(v356);
            v281 = v543;
          }
        }
        v548 = v271;
        if (v575)
        {
          v359 = v573;
          if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
          {
            v360 = (_QWORD *)*((_QWORD *)&v572 + 1);
            v361 = v574;
            v362 = BYTE1(v574);
            if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
            {
              v544 = v281;
              (*(void (**)(void))(*(_QWORD *)v572 + 64))();
              v281 = v544;
            }
            if (v361 && !v362)
            {
              v364 = v360[7];
              v363 = v360[8];
              if (v363 == v364)
                v364 = v360[10] - v360[9];
              if ((unint64_t)v359 < v364)
                v364 = v359;
              if (v363 <= *((_QWORD *)&v359 + 1))
                v363 = *((_QWORD *)&v359 + 1);
              if (v363 == v364)
                v363 = v364 + v360[10] - v360[9];
              v360[7] = v364;
              v360[8] = v363;
            }
          }
        }
        v540 = 0;
        v329 = v281;
        v328 = 1;
LABEL_466:
        if (v329 >= 1.0)
        {
          v369 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a5 + 752), 3, 0, (v557[1] | v557[2]) == 0, 0, 1, v557[1], 3);
          v370 = 0;
        }
        else
        {
          v365 = *(float **)(a5 + 792);
          if (!v365)
            goto LABEL_481;
          v366 = (float *)(a5 + 792);
          do
          {
            while (v365[7] < v577.f32[0] && v365[8] < v577.f32[1] && v365[9] < v577.f32[2] && v365[10] < v329)
            {
              v365 = (float *)*((_QWORD *)v365 + 1);
              if (!v365)
                goto LABEL_476;
            }
            v366 = v365;
            v365 = *(float **)v365;
          }
          while (v365);
LABEL_476:
          if (v366 != (float *)(a5 + 792)
            && (v577.f32[0] >= v366[7] || v577.f32[1] >= v366[8] || v577.f32[2] >= v366[9] || v329 >= v366[10]))
          {
            v368 = *((unsigned __int8 *)v366 + 44);
            v367 = a5;
          }
          else
          {
LABEL_481:
            v367 = a5;
            std::__tree<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::__map_value_compare<geo::Color<float,4,(geo::ColorSpace)0>,std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::less<geo::Color<float,4,(geo::ColorSpace)0>>,true>,std::allocator<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>>>::__emplace_unique_key_args<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0> const&,unsigned char &>((uint64_t *)(a5 + 784), v577.f32, &v577, *(_BYTE *)(a5 + 808));
            v368 = *(unsigned __int8 *)(a5 + 808);
            *(_BYTE *)(a5 + 808) = (v368 + 1) % *(unsigned __int8 *)(a5 + 809);
          }
          v370 = v557[4] + v368;
          v369 = v367 + 512;
        }
        v371 = *(_QWORD *)(a4 + 8);
        if (v371)
        {
          v372 = (v314 << 10) | 3u;
          v373 = a4 + 8;
          do
          {
            v374 = *(_DWORD *)(v371 + 28);
            v375 = v374 < v217;
            if (v374 >= v217)
              v376 = (uint64_t *)v371;
            else
              v376 = (uint64_t *)(v371 + 8);
            if (!v375)
              v373 = v371;
            v371 = *v376;
          }
          while (*v376);
          if (v373 != a4 + 8 && v217 >= *(_DWORD *)(v373 + 28))
          {
            v377 = *(_QWORD **)(*((_QWORD *)v557 + 1) + 8);
            v378 = v377[3];
            v379 = v377[4];
            v380 = v379 - v378;
            if (v379 == v378)
              goto LABEL_502;
            v381 = 0;
            v382 = v380 >> 3;
            while (1)
            {
              v383 = *(unsigned __int8 **)(v378 + 8 * v381);
              if (*v383 == *(unsigned __int8 *)(v373 + 32))
              {
                v384 = *((_QWORD *)v383 + 1);
                v385 = v377[15];
                if (v384 < (v377[16] - v385) >> 3)
                  break;
              }
              if (++v381 >= v382)
                goto LABEL_502;
            }
            v386 = *(_QWORD *)(v385 + 8 * v384);
            if (!v386)
LABEL_502:
              v387 = 0;
            else
              v387 = *(_QWORD *)(*(_QWORD *)(v386 + 24) + 8 * *(unsigned __int8 *)(v373 + 33));
            if ((v328 & 1) != 0)
            {
              v572 = *(_OWORD *)v578;
              v573 = *(_OWORD *)&v578[16];
              v574 = *(_DWORD *)&v578[32];
              v388 = *(_QWORD **)(a5 + 736);
              v389 = v388[1];
              if (v389 == *(_QWORD *)(a5 + 744))
              {
                v388 = (_QWORD *)*v388;
                if (!v388)
                {
                  v388 = malloc_type_malloc(120 * v389 + 16, 0xB644C221uLL);
                  *v388 = 0;
                  v388[1] = 0;
                  **(_QWORD **)(a5 + 736) = v388;
                }
                *(_QWORD *)(a5 + 736) = v388;
                v389 = v388[1];
              }
              v390 = &v388[15 * v389];
              v390[2] = &off_1E42B59B0;
              v391 = v390 + 2;
              v388[1] = v389 + 1;
              v391[2] = "draped stroke";
              v391[3] = v369;
              v391[4] = v272;
              *((_DWORD *)v391 + 10) = v370;
              v391[6] = v372;
              *((_DWORD *)v391 + 14) = 1065353216;
              v392 = v574;
              v393 = v573;
              *(_OWORD *)((char *)v391 + 60) = v572;
              *((_DWORD *)v391 + 23) = v392;
              *(_OWORD *)((char *)v391 + 76) = v393;
              *((int64x2_t *)v391 + 6) = vdupq_n_s64(1uLL);
              v391[14] = 0;
              v391[8] = v548;
            }
            else
            {
              v572 = *(_OWORD *)v578;
              v573 = *(_OWORD *)&v578[16];
              v574 = *(_DWORD *)&v578[32];
              v394 = *(_QWORD **)(a5 + 736);
              v395 = v394[1];
              if (v395 == *(_QWORD *)(a5 + 744))
              {
                v394 = (_QWORD *)*v394;
                v396 = v540;
                if (!v394)
                {
                  v394 = malloc_type_malloc(120 * v395 + 16, 0xB644C221uLL);
                  *v394 = 0;
                  v394[1] = 0;
                  **(_QWORD **)(a5 + 736) = v394;
                }
                *(_QWORD *)(a5 + 736) = v394;
                v395 = v394[1];
              }
              else
              {
                v396 = v540;
              }
              v397 = &v394[15 * v395];
              v397[2] = &off_1E42B59B0;
              v391 = v397 + 2;
              v394[1] = v395 + 1;
              v391[2] = "draped stroke";
              v391[3] = v369;
              v391[4] = v272;
              *((_DWORD *)v391 + 10) = v370;
              v391[6] = v372;
              *((_DWORD *)v391 + 14) = 1065353216;
              *((_DWORD *)v391 + 15) = v572;
              *((int64x2_t *)v391 + 6) = vdupq_n_s64(1uLL);
              v391[14] = 0;
              v391[8] = v548;
              *((_BYTE *)v391 + 72) = v396;
              v398 = v576[0];
              v391[10] = *(_QWORD *)((char *)v576 + 7);
              v391[11] = 0;
              *(_QWORD *)((char *)v391 + 73) = v398;
              v391[12] = 1;
            }
            ggl::CommandBuffer::pushRenderItem(v387, (ggl::RenderItem *)v391);
          }
        }
        goto LABEL_516;
      }
LABEL_694:
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_695;
    }
LABEL_693:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_695:
    __break(1u);
    return;
  }
LABEL_517:
  v399 = *a7;
  if (!*a7)
  {
    v401 = (_QWORD *)a2;
    if (!*v13)
      goto LABEL_687;
    v405 = 0;
    v406 = 0;
    goto LABEL_589;
  }
  v400 = (std::__shared_weak_count *)a7[1];
  *(_QWORD *)v578 = v399;
  *(_QWORD *)&v578[8] = v400;
  v401 = (_QWORD *)a2;
  if (v400)
  {
    v402 = (unint64_t *)&v400->__shared_owners_;
    do
      v403 = __ldxr(v402);
    while (__stxr(v403 + 1, v402));
    *((_QWORD *)&v572 + 1) = v400;
    do
      v404 = __ldxr(v402);
    while (__stxr(v404 + 1, v402));
  }
  else
  {
    *((_QWORD *)&v572 + 1) = 0;
  }
  v573 = 0uLL;
  *(_QWORD *)&v572 = v399;
  LOBYTE(v574) = 0;
  v407 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v399 + 48))(v399, &v573);
  LOBYTE(v574) = v407;
  if (v400)
  {
    v408 = (unint64_t *)&v400->__shared_owners_;
    do
      v409 = __ldaxr(v408);
    while (__stlxr(v409 - 1, v408));
    if (!v409)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
    v407 = v574;
  }
  if (!v407)
  {
    v406 = 0;
    v405 = 0;
    v558 = 0u;
    goto LABEL_588;
  }
  v410 = *(_QWORD *)(v572 + 24);
  if ((int)v22 >= 0x17)
    v411 = 23;
  else
    v411 = (int)v22;
  v412 = *(float **)v410;
  if (!*(_QWORD *)v410
    || (v413 = *v412, LODWORD(v412) = *v412 == 1.0, !*(_BYTE *)(v410 + 10))
    || (v413 != 0.0 ? (v414 = v413 == 1.0) : (v414 = 1), v414))
  {
    v415 = *(unsigned __int8 *)(v410 + v412 + 11);
    v413 = 0.0;
    if (v415 != 2)
    {
      if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v572 + 24), 0x5Bu, v411, v415, 0))goto LABEL_548;
LABEL_561:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
      goto LABEL_687;
    }
  }
  v578[0] = 1;
  v577.i8[0] = 1;
  v416 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v410, 0x5Bu, v411, 0, v578);
  v417 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v410, 0x5Bu, v411, 1, &v577);
  if (v413 < 1.0)
    v417 = v416;
  if (!v417)
    goto LABEL_561;
LABEL_548:
  v418 = *(_QWORD *)(v572 + 24);
  v419 = *(float **)v418;
  if (*(_QWORD *)v418
    && (v420 = *v419, LODWORD(v419) = *v419 == 1.0, *(_BYTE *)(v418 + 10))
    && (v420 != 0.0 ? (v421 = v420 == 1.0) : (v421 = 1), !v421)
    || (v422 = *(unsigned __int8 *)(v418 + v419 + 11), v420 = 0.0, v422 == 2))
  {
    v578[0] = 1;
    v577.i8[0] = 1;
    v423 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v418, 0x68u, v411, 0, v578);
    v424 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v418, 0x68u, v411, 1u, &v577);
    if (v420 >= 1.0)
      v405 = v424;
    else
      v405 = v423;
  }
  else
  {
    v405 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x68u, v411, v422, 0);
  }
  v425 = *(_QWORD *)(v572 + 24);
  v426 = *(float **)v425;
  if (*(_QWORD *)v425
    && (v427 = *v426, LODWORD(v426) = *v426 == 1.0, *(_BYTE *)(v425 + 10))
    && (v427 != 0.0 ? (v428 = v427 == 1.0) : (v428 = 1), !v428)
    || (v429 = *(unsigned __int8 *)(v425 + v426 + 11), v427 = 0.0, v429 == 2))
  {
    v578[0] = 1;
    v577.i8[0] = 1;
    v430 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v425, 0x6Cu, 0, v578);
    v431 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v425, 0x6Cu, 1u, &v577);
    if (v427 >= 1.0)
      v432 = (_BYTE *)v431;
    else
      v432 = (_BYTE *)v430;
    if (*v432)
      goto LABEL_575;
LABEL_577:
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Cu, v411, 2u, 0);
    goto LABEL_578;
  }
  if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v572 + 24), 0x6Cu, v429, 0))
    goto LABEL_577;
LABEL_575:
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Cu, 2u, fminf(fmaxf(v22, 0.0), 23.0));
LABEL_578:
  v433 = *(uint16x4_t *)v578;
  v434 = *(_QWORD *)(v572 + 24);
  v435 = *(float **)v434;
  if (*(_QWORD *)v434
    && (v436 = *v435, LODWORD(v435) = *v435 == 1.0, *(_BYTE *)(v434 + 10))
    && v436 != 0.0
    && v436 != 1.0
    || (v437 = *(unsigned __int8 *)(v434 + v435 + 11), v436 = 0.0, v437 == 2))
  {
    v578[0] = 1;
    v577.i8[0] = 1;
    v438 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v434, 0x8Au, v411, 0, v578);
    v439 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v434, 0x8Au, v411, 1u, &v577);
    if (v436 < 1.0)
      LOBYTE(v439) = v438;
  }
  else
  {
    v439 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x8Au, v411, v437, 0);
  }
  v558 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(v433)), (float32x4_t)vdupq_n_s32(0x37800080u));
  v406 = v439 - 1 < 2;
LABEL_588:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
  if (*v13)
  {
LABEL_589:
    a11.n128_u64[0] = 0x3F80000000000000;
    a10.i64[0] = 0x3F80000000000000;
    goto LABEL_590;
  }
  a11 = (__n128)v558;
  if (*(float *)&v558.i32[3] < 0.0039062)
    goto LABEL_687;
  a10 = vextq_s8(v558, v558, 8uLL);
LABEL_590:
  memset(&v578[4], 0, 32);
  v440 = *(_DWORD *)(a6 + 88);
  if (!v440)
  {
    if (!*(_BYTE *)(a6 + 40))
      goto LABEL_687;
    v566 = (__n128)a10;
    v560 = a11;
    v441 = *(_QWORD *)(a6 + 8);
    v476 = *(_BYTE *)(a6 + 24);
    v577.i64[0] = *(_QWORD *)(a6 + 25);
    *(uint64_t *)((char *)v577.i64 + 7) = *(_QWORD *)(a6 + 32);
    v442 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 24));
    md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedFillColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedFillColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 392, v568 != 0);
    ggl::Flyover::FlyoverPipelineSetup::setState(v442, v572, *((std::__shared_weak_count **)&v572 + 1));
    v478 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
    *(_QWORD *)&v479 = v560.n128_u64[0];
    v480 = v566.n128_u64[0];
    if (*((_QWORD *)&v572 + 1))
    {
      v481 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
      do
        v482 = __ldaxr(v481);
      while (__stlxr(v482 - 1, v481));
      if (!v482)
      {
        ((void (*)(std::__shared_weak_count *, __n128, __n128))v478->__on_zero_shared)(v478, v560, v566);
        std::__shared_weak_count::__release_weak(v478);
        v480 = v566.n128_u64[0];
        *(_QWORD *)&v479 = v560.n128_u64[0];
      }
    }
    v483 = (_QWORD *)*((_QWORD *)v442 + 8);
    v449 = (_QWORD *)v483[4];
    v450 = v449[1];
    v484 = v449[9];
    *((_QWORD *)&v479 + 1) = v480;
    *(_OWORD *)v484 = v479;
    *(_DWORD *)(v484 + 16) = *a8;
    *(_DWORD *)(v484 + 20) = a8[1];
    *(_DWORD *)(v484 + 24) = a8[2];
    *(_DWORD *)(v484 + 28) = a8[3];
    v483[1] = 0;
    v485 = v401[27];
    *v483 = v485;
    v486 = (_QWORD *)*((_QWORD *)v442 + 20);
    v487 = v401[28];
    if (v487)
    {
      v488 = (unint64_t *)(v487 + 8);
      do
        v489 = __ldxr(v488);
      while (__stxr(v489 + 1, v488));
    }
    v490 = (std::__shared_weak_count *)v486[1];
    *v486 = v485;
    v486[1] = v487;
    if (v490)
    {
      v491 = (unint64_t *)&v490->__shared_owners_;
      do
        v492 = __ldaxr(v491);
      while (__stlxr(v492 - 1, v491));
      if (!v492)
      {
        ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
        std::__shared_weak_count::__release_weak(v490);
      }
    }
    v493 = *((_QWORD *)v442 + 8);
    *(_QWORD *)(v493 + 24) = 0;
    v494 = v401[29];
    *(_QWORD *)(v493 + 16) = v494;
    v495 = *((_QWORD *)v442 + 20);
    v496 = v401[30];
    if (v496)
    {
      v497 = (unint64_t *)(v496 + 8);
      do
        v498 = __ldxr(v497);
      while (__stxr(v498 + 1, v497));
    }
    v499 = *(std::__shared_weak_count **)(v495 + 24);
    *(_QWORD *)(v495 + 16) = v494;
    *(_QWORD *)(v495 + 24) = v496;
    if (v499)
    {
      v500 = (unint64_t *)&v499->__shared_owners_;
      do
        v501 = __ldaxr(v500);
      while (__stlxr(v501 - 1, v500));
      if (!v501)
      {
        ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
        std::__shared_weak_count::__release_weak(v499);
      }
    }
    v502 = *((_QWORD *)v442 + 8);
    *(_QWORD *)(v502 + 48) = v568;
    *(_QWORD *)(v502 + 56) = 0;
    v503 = *((_QWORD *)v442 + 20);
    if (v569)
    {
      v504 = (unint64_t *)&v569->__shared_owners_;
      do
        v505 = __ldxr(v504);
      while (__stxr(v505 + 1, v504));
    }
    v473 = *(std::__shared_weak_count **)(v503 + 56);
    *(_QWORD *)(v503 + 48) = v568;
    *(_QWORD *)(v503 + 56) = v569;
    if (v473)
    {
      v506 = (unint64_t *)&v473->__shared_owners_;
      do
        v507 = __ldaxr(v506);
      while (__stlxr(v507 - 1, v506));
      v477 = 0;
      if (!v507)
        goto LABEL_651;
    }
    else
    {
      v477 = 0;
    }
    goto LABEL_656;
  }
  if (v440 != 1)
    goto LABEL_693;
  v441 = *(_QWORD *)(a6 + 72);
  if (!v441)
    goto LABEL_687;
  v565 = (__n128)a10;
  v559 = a11;
  v442 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 16));
  md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedFillColorPipelineState,std::shared_ptr<ggl::ElevatedFillNoWidthClipColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 272, v568 != 0);
  ggl::Flyover::FlyoverPipelineSetup::setState(v442, v572, *((std::__shared_weak_count **)&v572 + 1));
  v443 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
  v444 = v559.n128_u64[0];
  v445 = v565.n128_u64[0];
  if (*((_QWORD *)&v572 + 1))
  {
    v446 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
    do
      v447 = __ldaxr(v446);
    while (__stlxr(v447 - 1, v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v443->__on_zero_shared)(v443, v559, v565);
      std::__shared_weak_count::__release_weak(v443);
      v445 = v565.n128_u64[0];
      v444 = v559.n128_u64[0];
    }
  }
  v448 = (_QWORD *)*((_QWORD *)v442 + 8);
  v449 = (_QWORD *)v448[4];
  v450 = v449[1];
  v451 = v449[9];
  *(_QWORD *)v451 = v444;
  *(_QWORD *)(v451 + 8) = v445;
  *(_DWORD *)(v451 + 32) = v14;
  *(_DWORD *)(v451 + 16) = *a8;
  *(_DWORD *)(v451 + 20) = a8[1];
  *(_DWORD *)(v451 + 24) = a8[2];
  *(_DWORD *)(v451 + 28) = a8[3];
  v448[1] = 0;
  v452 = v401[27];
  *v448 = v452;
  v453 = (_QWORD *)*((_QWORD *)v442 + 20);
  v454 = v401[28];
  if (v454)
  {
    v455 = (unint64_t *)(v454 + 8);
    do
      v456 = __ldxr(v455);
    while (__stxr(v456 + 1, v455));
  }
  v457 = (std::__shared_weak_count *)v453[1];
  *v453 = v452;
  v453[1] = v454;
  if (v457)
  {
    v458 = (unint64_t *)&v457->__shared_owners_;
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
      std::__shared_weak_count::__release_weak(v457);
    }
  }
  v460 = *((_QWORD *)v442 + 8);
  *(_QWORD *)(v460 + 24) = 0;
  v461 = v401[29];
  *(_QWORD *)(v460 + 16) = v461;
  v462 = *((_QWORD *)v442 + 20);
  v463 = v401[30];
  if (v463)
  {
    v464 = (unint64_t *)(v463 + 8);
    do
      v465 = __ldxr(v464);
    while (__stxr(v465 + 1, v464));
  }
  v466 = *(std::__shared_weak_count **)(v462 + 24);
  *(_QWORD *)(v462 + 16) = v461;
  *(_QWORD *)(v462 + 24) = v463;
  if (v466)
  {
    v467 = (unint64_t *)&v466->__shared_owners_;
    do
      v468 = __ldaxr(v467);
    while (__stlxr(v468 - 1, v467));
    if (!v468)
    {
      ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
      std::__shared_weak_count::__release_weak(v466);
    }
  }
  v469 = *((_QWORD *)v442 + 8);
  *(_QWORD *)(v469 + 48) = v568;
  *(_QWORD *)(v469 + 56) = 0;
  v470 = *((_QWORD *)v442 + 20);
  if (v569)
  {
    v471 = (unint64_t *)&v569->__shared_owners_;
    do
      v472 = __ldxr(v471);
    while (__stxr(v472 + 1, v471));
  }
  v473 = *(std::__shared_weak_count **)(v470 + 56);
  *(_QWORD *)(v470 + 48) = v568;
  *(_QWORD *)(v470 + 56) = v569;
  if (v473)
  {
    v474 = (unint64_t *)&v473->__shared_owners_;
    do
      v475 = __ldaxr(v474);
    while (__stlxr(v475 - 1, v474));
    v476 = 0;
    v477 = 1;
    if (!v475)
    {
LABEL_651:
      ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
      std::__shared_weak_count::__release_weak(v473);
    }
  }
  else
  {
    v476 = 0;
    v477 = 1;
  }
LABEL_656:
  v508 = v449[8];
  if (v508 <= v450)
    v508 = v450;
  v449[7] = 0;
  v449[8] = v508;
  v509 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a5 + 752), 3, 0, *v13 == 0, 0, 1, *v13, 3);
  v510 = *(_QWORD *)(a4 + 8);
  v563 = a4 + 8;
  if (!v510)
    goto LABEL_687;
  v511 = v509;
  v512 = (v405 << 10);
  v513 = v563;
  do
  {
    v514 = *(_DWORD *)(v510 + 28);
    v515 = v514 < v406;
    if (v514 >= v406)
      v516 = (uint64_t *)v510;
    else
      v516 = (uint64_t *)(v510 + 8);
    if (!v515)
      v513 = v510;
    v510 = *v516;
  }
  while (*v516);
  if (v513 == v563 || v406 < *(_DWORD *)(v513 + 28))
    goto LABEL_687;
  v517 = *(_QWORD **)(*((_QWORD *)v13 + 1) + 8);
  v518 = v517[3];
  v519 = v517[4];
  v520 = v519 - v518;
  if (v519 == v518)
    goto LABEL_680;
  v521 = 0;
  v522 = v520 >> 3;
  while (1)
  {
    v523 = *(unsigned __int8 **)(v518 + 8 * v521);
    if (*v523 == *(unsigned __int8 *)(v513 + 32))
    {
      v524 = *((_QWORD *)v523 + 1);
      v525 = v517[15];
      if (v524 < (v517[16] - v525) >> 3)
        break;
    }
    if (++v521 >= v522)
      goto LABEL_680;
  }
  v526 = *(_QWORD *)(v525 + 8 * v524);
  if (!v526)
  {
LABEL_680:
    v527 = 0;
    if ((v477 & 1) == 0)
      goto LABEL_675;
LABEL_681:
    v572 = *(_OWORD *)v578;
    v573 = *(_OWORD *)&v578[16];
    v574 = *(_DWORD *)&v578[32];
    v533 = *(_QWORD **)(a5 + 736);
    v534 = v533[1];
    if (v534 == *(_QWORD *)(a5 + 744))
    {
      v533 = (_QWORD *)*v533;
      if (!v533)
      {
        v533 = malloc_type_malloc(120 * v534 + 16, 0xB644C221uLL);
        *v533 = 0;
        v533[1] = 0;
        **(_QWORD **)(a5 + 736) = v533;
      }
      *(_QWORD *)(a5 + 736) = v533;
      v534 = v533[1];
    }
    v535 = &v533[15 * v534];
    v535[2] = &off_1E42B59B0;
    v531 = v535 + 2;
    v533[1] = v534 + 1;
    v531[2] = "draped fill";
    v531[3] = v511;
    v531[4] = v442;
    v531[5] = 0;
    v531[6] = v512;
    *((_DWORD *)v531 + 14) = 1065353216;
    v536 = v574;
    v537 = v573;
    *(_OWORD *)((char *)v531 + 60) = v572;
    *((_DWORD *)v531 + 23) = v536;
    *(_OWORD *)((char *)v531 + 76) = v537;
    *((int64x2_t *)v531 + 6) = vdupq_n_s64(1uLL);
    v531[14] = 0;
    v531[8] = v441;
    goto LABEL_686;
  }
  v527 = *(_QWORD *)(*(_QWORD *)(v526 + 24) + 8 * *(unsigned __int8 *)(v513 + 33));
  if ((v477 & 1) != 0)
    goto LABEL_681;
LABEL_675:
  v572 = *(_OWORD *)v578;
  v573 = *(_OWORD *)&v578[16];
  v574 = *(_DWORD *)&v578[32];
  v528 = *(_QWORD **)(a5 + 736);
  v529 = v528[1];
  if (v529 == *(_QWORD *)(a5 + 744))
  {
    v528 = (_QWORD *)*v528;
    if (!v528)
    {
      v528 = malloc_type_malloc(120 * v529 + 16, 0xB644C221uLL);
      *v528 = 0;
      v528[1] = 0;
      **(_QWORD **)(a5 + 736) = v528;
    }
    *(_QWORD *)(a5 + 736) = v528;
    v529 = v528[1];
  }
  v530 = &v528[15 * v529];
  v530[2] = &off_1E42B59B0;
  v531 = v530 + 2;
  v528[1] = v529 + 1;
  v531[2] = "draped fill";
  v531[3] = v511;
  v531[4] = v442;
  v531[5] = 0;
  v531[6] = v512;
  *((_DWORD *)v531 + 14) = 1065353216;
  *((_DWORD *)v531 + 15) = v572;
  *((int64x2_t *)v531 + 6) = vdupq_n_s64(1uLL);
  v531[14] = 0;
  v531[8] = v441;
  *((_BYTE *)v531 + 72) = v476;
  v532 = v577.i64[0];
  v531[10] = *(uint64_t *)((char *)v577.i64 + 7);
  v531[11] = 0;
  *(_QWORD *)((char *)v531 + 73) = v532;
  v531[12] = 1;
LABEL_686:
  ggl::CommandBuffer::pushRenderItem(v527, (ggl::RenderItem *)v531);
LABEL_687:
  if (v569)
  {
    v538 = (unint64_t *)&v569->__shared_owners_;
    do
      v539 = __ldaxr(v538);
    while (__stlxr(v539 - 1, v538));
    if (!v539)
    {
      ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
      std::__shared_weak_count::__release_weak(v569);
    }
  }
}

void sub_19F7B8928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorPipelineState,std::shared_ptr<ggl::ElevatedStrokeColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, __int8 a3)
{
  int8x16_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t **v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unsigned __int8 v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t **v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  ggl::ElevatedStrokeColorShader *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[28];

  v6.i64[0] = 65792;
  v6.i32[2] = 65792;
  v6.i16[6] = 0;
  v6.i8[14] = 0;
  v6.i8[15] = a3;
  v7 = vceqzq_s8(v6);
  v8 = vmovl_s8(*(int8x8_t *)v7.i8);
  v9 = vmovl_high_s16(v8);
  v10.i64[0] = v9.u32[2];
  v10.i64[1] = v9.u32[3];
  v11 = v10;
  v12 = vmovl_high_s8(v7);
  v13 = vmovl_high_s16(v12);
  v10.i64[0] = v13.u32[2];
  v10.i64[1] = v13.u32[3];
  v14 = v10;
  v15 = vmovl_s16(*(int16x4_t *)v8.i8);
  v10.i64[0] = v15.u32[2];
  v10.i64[1] = v15.u32[3];
  v16 = v10;
  v17 = vmovl_s16(*(int16x4_t *)v12.i8);
  v10.i64[0] = v17.u32[2];
  v10.i64[1] = v17.u32[3];
  v18 = v10;
  v10.i64[0] = v9.u32[0];
  v10.i64[1] = v9.u32[1];
  v19 = v10;
  v10.i64[0] = v13.u32[0];
  v10.i64[1] = v13.u32[1];
  v20 = v10;
  v10.i64[0] = v15.u32[0];
  v10.i64[1] = v15.u32[1];
  v21 = v10;
  v10.i64[0] = v17.u32[0];
  v10.i64[1] = v17.u32[1];
  v22 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v21), vbicq_s8((int8x16_t)xmmword_19FFB3150, v10)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v19), vbicq_s8((int8x16_t)xmmword_19FFB3130, v20))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v16), vbicq_s8((int8x16_t)xmmword_19FFB3110, v18)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v11), vbicq_s8((int8x16_t)xmmword_19FFB30F0, v14)))));
  v23 = v22;
  v25 = (uint64_t **)(a2 + 104);
  v24 = *(_QWORD **)(a2 + 104);
  if (!v24)
    goto LABEL_12;
  v26 = (uint64_t **)(a2 + 104);
  do
  {
    v27 = v24[4];
    v28 = v27 >= v22;
    if (v27 >= v22)
      v29 = v24;
    else
      v29 = v24 + 1;
    if (v28)
      v26 = (uint64_t **)v24;
    v24 = (_QWORD *)*v29;
  }
  while (*v29);
  if (v26 != v25 && v22 >= (unint64_t)v26[4])
  {
    *a1 = (std::__shared_weak_count *)v26[5];
    v123 = v26[6];
    a1[1] = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v124 = (unint64_t *)(v123 + 1);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
  }
  else
  {
LABEL_12:
    v30 = (std::__shared_weak_count *)operator new(0x198uLL);
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4CB0;
    v133 = *(_OWORD *)(a2 + 16);
    v134 = *(_OWORD *)(a2 + 32);
    if ((v32 & 1) == 0)
    {
      if ((_DWORD)v126)
      {
        if ((v127 & 1) == 0)
        {
          if ((_DWORD)v126)
          {
            if ((v130 & 1) == 0
            {
              if ((v132 & 1) == 0
              {
                ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::elevatedVboReflection;
              }
              ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::attributesReflection(void)::r;
              unk_1EE5894A0 = 1;
            }
            ggl::DaVinci::ElevatedStrokeColorPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::typedReflection(void)::r;
            *(_QWORD *)algn_1EE5892D8 = &ggl::DaVinci::pipelineDataElevatedStrokeColorPipelineDeviceStructs(void)::ref;
            qword_1EE5892E0 = 0;
            if ((v131 & 1) == 0
            {
              ggl::DaVinci::pipelineDataElevatedStrokeColorPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE589450 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE589458 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
              unk_1EE589460 = ggl::DaVinci::ClippedStroke::reflection(void)::reflection;
              qword_1EE589468 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
            }
            qword_1EE5892E8 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedStrokeColorPipelineConstantStructs(void)::ref;
            *(_OWORD *)algn_1EE5892F0 = xmmword_19FFB3030;
          }
        }
        ggl::DaVinci::ElevatedStrokeColorPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::ElevatedStrokeColorPipelineSetup::typedReflection(void)::ref;
        ggl::ElevatedStrokeColorShader::typedReflection(v126);
        qword_1EE589280 = (uint64_t)&ggl::ElevatedStrokeColorShader::typedReflection(void)::ref;
        if ((v128 & 1) == 0
        {
          ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE589310 = 0;
          qword_1EE589318 = (uint64_t)"";
          dword_1EE589320 = 0;
          qword_1EE589328 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineAttributeBinding_0(void)::attr;
          unk_1EE589330 = 4;
        }
        qword_1EE589288 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineAttributeStructBinding(void)::attr;
        unk_1EE589290 = 1;
        qword_1EE589298 = 0;
        unk_1EE5892A0 = 1;
        qword_1EE5892A8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineDeviceStructBinding(void)::ref;
        unk_1EE5892B0 = 0;
        if ((v129 & 1) == 0
        {
          ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE589350 = 0;
          qword_1EE589358 = (uint64_t)"view";
          dword_1EE589360 = 3;
          qword_1EE589368 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1EE589370 = xmmword_19FFB35A0;
          qword_1EE589380 = 1;
          unk_1EE589388 = "transform";
          dword_1EE589390 = 3;
          qword_1EE589398 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantTransformBinding(void)::reflection;
          unk_1EE5893A0 = xmmword_19FFB3660;
          qword_1EE5893B0 = 2;
          unk_1EE5893B8 = "tileClipping";
          dword_1EE5893C0 = 3;
          qword_1EE5893C8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantTileClippingBinding(void)::reflection;
          *(_OWORD *)algn_1EE5893D0 = xmmword_19FFB3000;
          qword_1EE5893E0 = 3;
          unk_1EE5893E8 = "clippedStroke";
          dword_1EE5893F0 = 3;
          qword_1EE5893F8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantClippedStrokeBinding(void)::reflection;
          unk_1EE589400 = vdupq_n_s64(4uLL);
          qword_1EE589410 = 4;
          unk_1EE589418 = "style";
          dword_1EE589420 = 3;
          qword_1EE589428 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantStyleBinding(void)::reflection;
          unk_1EE589430 = 8;
        }
        qword_1EE5892B8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorPipelineConstantStructBinding(void)::ref;
        unk_1EE5892C0 = 5;
      }
    }
    v33 = *(std::__shared_weak_count_vtbl **)a2;
    v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = v30 + 1;
    *(_OWORD *)v135 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v135[12] = *(_OWORD *)(a2 + 60);
    v38 = *(_OWORD *)(a2 + 76);
    v39 = *(_BYTE *)(a2 + 92);
    v30[1].__shared_weak_owners_ = 0;
    v30[2].__vftable = 0;
    LODWORD(v30[2].__shared_owners_) = 0;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v30[1].__shared_owners_ = 0;
    v30[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::ElevatedStrokeColorPipelineState::typedReflection(void)::ref;
    v30[3].__vftable = v33;
    v30[3].__shared_owners_ = (uint64_t)v34;
    if (v34)
    {
      v40 = (unint64_t *)&v34->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    LOBYTE(v30[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v30[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v30[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v30[11].__shared_weak_owners_ = v133;
    *(_OWORD *)&v30[12].__shared_owners_ = v134;
    LOBYTE(v30[13].__vftable) = 0;
    v30[16].__vftable = 0;
    *(_OWORD *)&v30[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[15].__shared_owners_ = 0u;
    *(_OWORD *)&v30[13].__shared_owners_ = 0u;
    v30[14].std::__shared_count = 0u;
    v30[16].__shared_owners_ = 0x100000001;
    LOBYTE(v30[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v30[4].std::__shared_count + 4) = *(std::__shared_count *)&v135[12];
    *(_OWORD *)&v30[3].__shared_weak_owners_ = *(_OWORD *)v135;
    *(_OWORD *)((char *)&v30[4].__shared_weak_owners_ + 4) = v38;
    BYTE4(v30[5].__shared_owners_) = v39;
    if (v34)
    {
      v42 = (unint64_t *)&v34->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    BYTE1(v30[14].__shared_owners_) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[14].__vftable + 1) = 0;
    *(uint64_t *)((char *)&v30[13].__shared_weak_owners_ + 1) = 0;
    WORD1(v30[14].__shared_owners_) = 257;
    HIDWORD(v30[14].__shared_owners_) = 0;
    v30[14].__shared_weak_owners_ = 16842752;
    v44 = vceqzq_s8(*(int8x16_t *)&v30[13].__shared_weak_owners_);
    v45 = vmovl_high_s8(v44);
    v46 = vmovl_s16(*(int16x4_t *)v45.i8);
    v47.i64[0] = v46.u32[0];
    v47.i64[1] = v46.u32[1];
    v48 = v47;
    v49 = vmovl_s8(*(int8x8_t *)v44.i8);
    v50 = vmovl_s16(*(int16x4_t *)v49.i8);
    v47.i64[0] = v50.u32[0];
    v47.i64[1] = v50.u32[1];
    v51 = v47;
    v52 = vmovl_high_s16(v45);
    v47.i64[0] = v52.u32[0];
    v47.i64[1] = v52.u32[1];
    v53 = v47;
    v54 = vmovl_high_s16(v49);
    v47.i64[0] = v54.u32[0];
    v47.i64[1] = v54.u32[1];
    v55 = v47;
    v47.i64[0] = v46.u32[2];
    v47.i64[1] = v46.u32[3];
    v56 = v47;
    v47.i64[0] = v50.u32[2];
    v47.i64[1] = v50.u32[3];
    v57 = v47;
    v47.i64[0] = v52.u32[2];
    v47.i64[1] = v52.u32[3];
    v58 = v47;
    v47.i64[0] = v54.u32[2];
    v47.i64[1] = v54.u32[3];
    v59 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v47);
    v60 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v58);
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v57);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v53);
    v63 = vceqzq_s8(*(int8x16_t *)&v30[14].__shared_owners_);
    v64 = vmovl_high_s8(v63);
    v65 = vmovl_s16(*(int16x4_t *)v64.i8);
    v47.i64[0] = v65.u32[0];
    v47.i64[1] = v65.u32[1];
    v66 = v47;
    v67 = vmovl_s8(*(int8x8_t *)v63.i8);
    v68 = vmovl_s16(*(int16x4_t *)v67.i8);
    v47.i64[0] = v68.u32[0];
    v47.i64[1] = v68.u32[1];
    v69 = v47;
    v70 = vmovl_high_s16(v64);
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC8D0;
    v47.i64[0] = v70.u32[0];
    v47.i64[1] = v70.u32[1];
    v71 = v47;
    LOBYTE(v30[15].__vftable) = a3;
    v72 = vmovl_high_s16(v67);
    v47.i64[0] = v72.u32[0];
    v47.i64[1] = v72.u32[1];
    v73 = v47;
    HIDWORD(v30[15].__vftable) = 0;
    v47.i64[0] = v65.u32[2];
    v47.i64[1] = v65.u32[3];
    v74 = v47;
    *(_DWORD *)((char *)&v30[15].__vftable + 1) = 0;
    v47.i64[0] = v68.u32[2];
    v47.i64[1] = v68.u32[3];
    v75 = v47;
    v47.i64[0] = v70.u32[2];
    v47.i64[1] = v70.u32[3];
    v76 = v47;
    v47.i64[0] = v72.u32[2];
    v47.i64[1] = v72.u32[3];
    v77 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v76);
    v78 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v66), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v48));
    v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v69), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v51));
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v71), v62);
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v73), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v55));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v74), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v56));
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v75), v61);
    v84 = vorrq_s8(v77, v60);
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v47), v59);
    v86 = vceqzq_s8((int8x16_t)v30[15].std::__shared_count);
    v87 = vmovl_s8(*(int8x8_t *)v86.i8);
    v88 = vmovl_high_s16(v87);
    v47.i64[0] = v88.i32[2];
    v47.i64[1] = v88.i32[3];
    v89 = v47;
    v90 = vmovl_high_s8(v86);
    v91 = vmovl_high_s16(v90);
    v47.i64[0] = v91.i32[2];
    v47.i64[1] = v91.i32[3];
    v92 = v47;
    v93 = vmovl_s16(*(int16x4_t *)v87.i8);
    v47.i64[0] = v93.i32[2];
    v47.i64[1] = v93.i32[3];
    v94 = v47;
    v95 = vmovl_s16(*(int16x4_t *)v90.i8);
    v47.i64[0] = v95.i32[2];
    v47.i64[1] = v95.i32[3];
    v96 = v47;
    v47.i64[0] = v88.i32[0];
    v47.i64[1] = v88.i32[1];
    v97 = v47;
    v47.i64[0] = v91.i32[0];
    v47.i64[1] = v91.i32[1];
    v98 = v47;
    v47.i64[0] = v93.i32[0];
    v47.i64[1] = v93.i32[1];
    v99 = v47;
    v47.i64[0] = v95.i32[0];
    v47.i64[1] = v95.i32[1];
    v100 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v47);
    v101 = vceqzq_s8(*(int8x16_t *)&v30[15].__shared_weak_owners_);
    v102 = vmovl_high_s8(v101);
    v103 = vmovl_s16(*(int16x4_t *)v102.i8);
    v47.i64[0] = v103.i32[0];
    v47.i64[1] = v103.i32[1];
    v104 = v47;
    v105 = vmovl_s8(*(int8x8_t *)v101.i8);
    v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v47.i64[0] = v106.i32[0];
    v47.i64[1] = v106.i32[1];
    v107 = v47;
    v108 = vmovl_high_s16(v102);
    v47.i64[0] = v108.i32[0];
    v47.i64[1] = v108.i32[1];
    v109 = v47;
    v110 = vmovl_high_s16(v105);
    v47.i64[0] = v110.i32[0];
    v47.i64[1] = v110.i32[1];
    v111 = v47;
    v47.i64[0] = v103.i32[2];
    v47.i64[1] = v103.i32[3];
    v112 = v47;
    v47.i64[0] = v106.i32[2];
    v47.i64[1] = v106.i32[3];
    v113 = v47;
    v47.i64[0] = v108.i32[2];
    v47.i64[1] = v108.i32[3];
    v114 = v47;
    v47.i64[0] = v110.i32[2];
    v47.i64[1] = v110.i32[3];
    v30[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v107), vbicq_s8((int8x16_t)xmmword_19FFB3170, v99)), v79), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v104), v100), v78)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v111), vbicq_s8((int8x16_t)xmmword_19FFB3190, v97)), v81), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v109),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v98)),
                                                    v80))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v113), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v94)), v83), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v112), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v96)), v82)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v47), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v89)), v85), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v114),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v92)),
                                                    v84)))));
    LOBYTE(v30[13].__vftable) = 1;
    *a1 = v37;
    a1[1] = v30;
    do
      v115 = __ldxr(p_shared_owners);
    while (__stxr(v115 + 1, p_shared_owners));
    v116 = *v25;
    v117 = v25;
    if (*v25)
    {
      while (1)
      {
        while (1)
        {
          v117 = (uint64_t **)v116;
          v118 = v116[4];
          if (v23 >= v118)
            break;
          v116 = *v117;
          v25 = v117;
          if (!*v117)
            goto LABEL_33;
        }
        if (v118 >= v23)
          break;
        v116 = v117[1];
        if (!v116)
        {
          v25 = v117 + 1;
          goto LABEL_33;
        }
      }
      v121 = (unint64_t *)&v30->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
LABEL_33:
      v119 = (uint64_t *)operator new(0x38uLL);
      v119[4] = v23;
      v119[5] = (uint64_t)v37;
      v119[6] = (uint64_t)v30;
      *v119 = 0;
      v119[1] = 0;
      v119[2] = (uint64_t)v117;
      *v25 = v119;
      v120 = **(_QWORD **)(a2 + 96);
      if (v120)
      {
        *(_QWORD *)(a2 + 96) = v120;
        v119 = *v25;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v119);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F7B9578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedStrokeColorWithDistanceShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, __int8 a3, unsigned __int8 a4)
{
  int8x16_t v7;
  unint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t **v43;
  uint64_t **v44;
  unint64_t v45;
  BOOL v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unsigned __int8 v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  char v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int16x8_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t **v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t *v142;
  unint64_t v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  unsigned __int8 v147;
  unsigned __int8 v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  unsigned __int8 v152;
  __int128 v154;
  __int128 v155;
  _BYTE v156[28];

  v7.i64[0] = 65792;
  v7.i32[2] = 65792;
  v7.i16[6] = 0;
  v7.i8[14] = 0;
  v7.i8[15] = a3;
  LODWORD(v8) = 0;
  HIDWORD(v8) = a4;
  v9 = vceqzq_s8(v7);
  v10 = vmovl_high_s8(v9);
  v11 = vmovl_s16(*(int16x4_t *)v10.i8);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  v13 = v12;
  v14 = vmovl_s8(*(int8x8_t *)v9.i8);
  v15 = vmovl_s16(*(int16x4_t *)v14.i8);
  v12.i64[0] = v15.u32[0];
  v12.i64[1] = v15.u32[1];
  v16 = v12;
  v17 = vmovl_high_s16(v10);
  v12.i64[0] = v17.u32[0];
  v12.i64[1] = v17.u32[1];
  v18 = v12;
  v19 = vmovl_high_s16(v14);
  v12.i64[0] = v19.u32[0];
  v12.i64[1] = v19.u32[1];
  v20 = v12;
  v12.i64[0] = v11.u32[2];
  v12.i64[1] = v11.u32[3];
  v21 = v12;
  v12.i64[0] = v15.u32[2];
  v12.i64[1] = v15.u32[3];
  v22 = v12;
  v12.i64[0] = v17.u32[2];
  v12.i64[1] = v17.u32[3];
  v23 = v12;
  v12.i64[0] = v19.u32[2];
  v12.i64[1] = v19.u32[3];
  v24 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v12);
  v25 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v21);
  v26 = vceqzq_s8((int8x16_t)v8);
  v27 = vmovl_high_s8(v26);
  v28 = vmovl_s16(*(int16x4_t *)v27.i8);
  v12.i64[0] = v28.i32[0];
  v12.i64[1] = v28.i32[1];
  v29 = v12;
  v30 = vmovl_s8(*(int8x8_t *)v26.i8);
  v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v12.i64[0] = v31.i32[0];
  v12.i64[1] = v31.i32[1];
  v32 = v12;
  v33 = vmovl_high_s16(v27);
  v12.i64[0] = v33.i32[0];
  v12.i64[1] = v33.i32[1];
  v34 = v12;
  v35 = vmovl_high_s16(v30);
  v12.i64[0] = v35.i32[0];
  v12.i64[1] = v35.i32[1];
  v36 = v12;
  v12.i64[0] = v28.i32[2];
  v12.i64[1] = v28.i32[3];
  v37 = v12;
  v12.i64[0] = v31.i32[2];
  v12.i64[1] = v31.i32[3];
  v38 = v12;
  v12.i64[0] = v33.i32[2];
  v12.i64[1] = v33.i32[3];
  v39 = v12;
  v12.i64[0] = v35.i32[2];
  v12.i64[1] = v35.i32[3];
  v40 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, v32), vbicq_s8((int8x16_t)xmmword_19FFB3140, v16)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, v29), vbicq_s8((int8x16_t)xmmword_19FFB3150, v13))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, v36), vbicq_s8((int8x16_t)xmmword_19FFB3120, v20)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, v34), vbicq_s8((int8x16_t)xmmword_19FFB3130, v18)))), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, v38),
                                      vbicq_s8((int8x16_t)xmmword_19FFB3100, v22)),
                                    vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, v37), v25)),
                                  vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, v12), v24), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, v39), vbicq_s8((int8x16_t)xmmword_19FFB30F0, v23))))));
  v41 = v40;
  v43 = (uint64_t **)(a2 + 104);
  v42 = *(_QWORD **)(a2 + 104);
  if (!v42)
    goto LABEL_12;
  v44 = (uint64_t **)(a2 + 104);
  do
  {
    v45 = v42[4];
    v46 = v45 >= v40;
    if (v45 >= v40)
      v47 = v42;
    else
      v47 = v42 + 1;
    if (v46)
      v44 = (uint64_t **)v42;
    v42 = (_QWORD *)*v47;
  }
  while (*v47);
  if (v44 != v43 && v40 >= (unint64_t)v44[4])
  {
    *a1 = (std::__shared_weak_count *)v44[5];
    v141 = v44[6];
    a1[1] = (std::__shared_weak_count *)v141;
    if (v141)
    {
      v142 = (unint64_t *)(v141 + 1);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
  }
  else
  {
LABEL_12:
    v48 = (std::__shared_weak_count *)operator new(0x198uLL);
    v48->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    v48->__shared_weak_owners_ = 0;
    v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D58;
    v154 = *(_OWORD *)(a2 + 16);
    v155 = *(_OWORD *)(a2 + 32);
    if ((v50 & 1) == 0
    {
      if ((v144 & 1) == 0
      {
        if ((v148 & 1) == 0
        {
          if ((v152 & 1) == 0
          {
            ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::distanceCompressedVboReflection;
          }
          ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r;
          unk_1EE577C38 = 1;
        }
        ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1EE577A98 = &ggl::DaVinci::pipelineDataElevatedStrokeColorWithDistancePipelineDeviceStructs(void)::ref;
        qword_1EE577AA0 = 0;
        if ((v149 & 1) == 0
        {
          ggl::DaVinci::pipelineDataElevatedStrokeColorWithDistancePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1EE577AF0 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EE577AF8 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
          unk_1EE577B00 = ggl::DaVinci::ClippedStroke::reflection(void)::reflection;
          qword_1EE577B08 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
        }
        qword_1EE577AA8 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedStrokeColorWithDistancePipelineConstantStructs(void)::ref;
        unk_1EE577AB0 = xmmword_19FFB3030;
      }
      ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::typedReflection(void)::ref;
      if ((v145 & 1) == 0
      {
        ggl::ElevatedStrokeColorWithDistanceShader::typedReflection(void)::ref = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
        if ((v150 & 1) == 0
        {
          qword_1ECE35CE0 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
          unk_1ECE35CE8 = ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35CF0 = 1;
          unk_1ECE35CF8 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35D00 = 4;
          unk_1ECE35D08 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35D10 = 0;
          unk_1ECE35D18 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref = 1731713468;
          qword_1ECE35D20 = 0;
          unk_1ECE35D28 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35D38 = 0;
          unk_1ECE35D40 = 0;
          qword_1ECE35D30 = 0;
        }
        qword_1ECE34B60 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE34B68 = 1731713468;
        if ((v151 & 1) == 0
        {
          ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref = 0x1F73A1BC0;
          qword_1ECE35F18 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
          unk_1ECE35F20 = 0;
          qword_1ECE35F28 = 0;
          unk_1ECE35F30 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35F38 = 3;
          unk_1ECE35F40 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35F48 = 0;
          unk_1ECE35F50 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35F58 = 1;
          unk_1ECE35F60 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35F70 = 0;
          unk_1ECE35F78 = 0;
          qword_1ECE35F68 = 1;
        }
        qword_1ECE34B70 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE34B78 = -147186752;
        qword_1ECE34B80 = (uint64_t)ggl::elevatedStrokeColorWithDistanceShaderShaderConstants(void)::ref;
        unk_1ECE34B88 = 5;
        qword_1ECE34B90 = (uint64_t)ggl::elevatedStrokeColorWithDistanceShaderShaderTextures(void)::ref;
        unk_1ECE34B98 = 1;
        qword_1ECE34BA0 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderShaderSamplers(void)::ref;
        unk_1ECE34BA8 = 1;
      }
      qword_1EE581D80 = (uint64_t)&ggl::ElevatedStrokeColorWithDistanceShader::typedReflection(void)::ref;
      if ((v146 & 1) == 0
      {
        ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE582FF0 = 0;
        qword_1EE582FF8 = (uint64_t)"";
        dword_1EE583000 = 0;
        qword_1EE583008 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineAttributeBinding_0(void)::attr;
        unk_1EE583010 = 3;
      }
      qword_1EE581D88 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineAttributeStructBinding(void)::attr;
      unk_1EE581D90 = 1;
      qword_1EE581D98 = 0;
      unk_1EE581DA0 = 1;
      qword_1EE581DA8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineDeviceStructBinding(void)::ref;
      unk_1EE581DB0 = 0;
      if ((v147 & 1) == 0
      {
        ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE582F00 = 0;
        qword_1EE582F08 = (uint64_t)"view";
        dword_1EE582F10 = 3;
        qword_1EE582F18 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantViewBinding(void)::reflection;
        unk_1EE582F20 = xmmword_19FFB35A0;
        qword_1EE582F30 = 1;
        unk_1EE582F38 = "transform";
        dword_1EE582F40 = 3;
        qword_1EE582F48 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE582F50 = xmmword_19FFB3660;
        qword_1EE582F60 = 2;
        unk_1EE582F68 = "tileClipping";
        dword_1EE582F70 = 3;
        qword_1EE582F78 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantTileClippingBinding(void)::reflection;
        unk_1EE582F80 = xmmword_19FFB3000;
        qword_1EE582F90 = 3;
        unk_1EE582F98 = "clippedStroke";
        dword_1EE582FA0 = 3;
        qword_1EE582FA8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantClippedStrokeBinding(void)::reflection;
        *(int64x2_t *)algn_1EE582FB0 = vdupq_n_s64(4uLL);
        qword_1EE582FC0 = 4;
        unk_1EE582FC8 = "style";
        dword_1EE582FD0 = 3;
        qword_1EE582FD8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantStyleBinding(void)::reflection;
        unk_1EE582FE0 = 8;
      }
      qword_1EE581DB8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedStrokeColorWithDistancePipelineConstantStructBinding(void)::ref;
      unk_1EE581DC0 = 5;
    }
    v51 = *(std::__shared_weak_count_vtbl **)a2;
    v52 = *(std::__shared_weak_count **)(a2 + 8);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = v48 + 1;
    *(_OWORD *)v156 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v156[12] = *(_OWORD *)(a2 + 60);
    v56 = *(_OWORD *)(a2 + 76);
    v57 = *(_BYTE *)(a2 + 92);
    v48[1].__shared_weak_owners_ = 0;
    v48[2].__vftable = 0;
    LODWORD(v48[2].__shared_owners_) = 0;
    v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v48[1].__shared_owners_ = 0;
    v48[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState::typedReflection(void)::ref;
    v48[3].__vftable = v51;
    v48[3].__shared_owners_ = (uint64_t)v52;
    if (v52)
    {
      v58 = (unint64_t *)&v52->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    LOBYTE(v48[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v48[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v48[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v48[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v48[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v48[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v48[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v48[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v48[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v48[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v48[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v48[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v48[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v48[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v48[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v48[11].__shared_weak_owners_ = v154;
    *(_OWORD *)&v48[12].__shared_owners_ = v155;
    LOBYTE(v48[13].__vftable) = 0;
    v48[16].__vftable = 0;
    *(_OWORD *)&v48[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v48[15].__shared_owners_ = 0u;
    *(_OWORD *)&v48[13].__shared_owners_ = 0u;
    v48[14].std::__shared_count = 0u;
    v48[16].__shared_owners_ = 0x100000001;
    LOBYTE(v48[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v48[4].std::__shared_count + 4) = *(std::__shared_count *)&v156[12];
    *(_OWORD *)&v48[3].__shared_weak_owners_ = *(_OWORD *)v156;
    *(_OWORD *)((char *)&v48[4].__shared_weak_owners_ + 4) = v56;
    BYTE4(v48[5].__shared_owners_) = v57;
    if (v52)
    {
      v60 = (unint64_t *)&v52->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    BYTE1(v48[14].__shared_owners_) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v48[14].__vftable + 1) = 0;
    *(uint64_t *)((char *)&v48[13].__shared_weak_owners_ + 1) = 0;
    WORD1(v48[14].__shared_owners_) = 257;
    HIDWORD(v48[14].__shared_owners_) = 0;
    v48[14].__shared_weak_owners_ = 16842752;
    v62 = vceqzq_s8(*(int8x16_t *)&v48[13].__shared_weak_owners_);
    v63 = vmovl_high_s8(v62);
    v64 = vmovl_s16(*(int16x4_t *)v63.i8);
    v65.i64[0] = v64.u32[0];
    v65.i64[1] = v64.u32[1];
    v66 = v65;
    v67 = vmovl_s8(*(int8x8_t *)v62.i8);
    v68 = vmovl_s16(*(int16x4_t *)v67.i8);
    v65.i64[0] = v68.u32[0];
    v65.i64[1] = v68.u32[1];
    v69 = v65;
    v70 = vmovl_high_s16(v63);
    v65.i64[0] = v70.u32[0];
    v65.i64[1] = v70.u32[1];
    v71 = v65;
    v72 = vmovl_high_s16(v67);
    v65.i64[0] = v72.u32[0];
    v65.i64[1] = v72.u32[1];
    v73 = v65;
    v65.i64[0] = v64.u32[2];
    v65.i64[1] = v64.u32[3];
    v74 = v65;
    v65.i64[0] = v68.u32[2];
    v65.i64[1] = v68.u32[3];
    v75 = v65;
    v65.i64[0] = v70.u32[2];
    v65.i64[1] = v70.u32[3];
    v76 = v65;
    v65.i64[0] = v72.u32[2];
    v65.i64[1] = v72.u32[3];
    v77 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v65);
    v78 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v76);
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v75);
    v80 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v71);
    v81 = vceqzq_s8(*(int8x16_t *)&v48[14].__shared_owners_);
    v82 = vmovl_high_s8(v81);
    v83 = vmovl_s16(*(int16x4_t *)v82.i8);
    v65.i64[0] = v83.u32[0];
    v65.i64[1] = v83.u32[1];
    v84 = v65;
    v85 = vmovl_s8(*(int8x8_t *)v81.i8);
    v86 = vmovl_s16(*(int16x4_t *)v85.i8);
    v65.i64[0] = v86.u32[0];
    v65.i64[1] = v86.u32[1];
    v87 = v65;
    v88 = vmovl_high_s16(v82);
    v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC9C0;
    v65.i64[0] = v88.u32[0];
    v65.i64[1] = v88.u32[1];
    v89 = v65;
    LOBYTE(v48[15].__vftable) = a3;
    v90 = vmovl_high_s16(v85);
    v65.i64[0] = v90.u32[0];
    v65.i64[1] = v90.u32[1];
    v91 = v65;
    *(_WORD *)((char *)&v48[15].__vftable + 1) = 0;
    BYTE3(v48[15].__vftable) = 0;
    BYTE4(v48[15].__vftable) = a4;
    v65.i64[0] = v83.u32[2];
    v65.i64[1] = v83.u32[3];
    v92 = v65;
    v65.i64[0] = v86.u32[2];
    v65.i64[1] = v86.u32[3];
    v93 = v65;
    v65.i64[0] = v88.u32[2];
    v65.i64[1] = v88.u32[3];
    v94 = v65;
    *(_WORD *)((char *)&v48[15].__vftable + 5) = 0;
    v65.i64[0] = v90.u32[2];
    v65.i64[1] = v90.u32[3];
    HIBYTE(v48[15].__vftable) = 0;
    v95 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v94);
    v96 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v84), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v66));
    v97 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v87), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v69));
    v98 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v89), v80);
    v99 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v91), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v73));
    v100 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v92), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v74));
    v101 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v93), v79);
    v102 = vorrq_s8(v95, v78);
    v103 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v65), v77);
    v104 = vceqzq_s8((int8x16_t)v48[15].std::__shared_count);
    v105 = vmovl_s8(*(int8x8_t *)v104.i8);
    v106 = vmovl_high_s16(v105);
    v65.i64[0] = v106.i32[2];
    v65.i64[1] = v106.i32[3];
    v107 = v65;
    v108 = vmovl_high_s8(v104);
    v109 = vmovl_high_s16(v108);
    v65.i64[0] = v109.i32[2];
    v65.i64[1] = v109.i32[3];
    v110 = v65;
    v111 = vmovl_s16(*(int16x4_t *)v105.i8);
    v65.i64[0] = v111.i32[2];
    v65.i64[1] = v111.i32[3];
    v112 = v65;
    v113 = vmovl_s16(*(int16x4_t *)v108.i8);
    v65.i64[0] = v113.i32[2];
    v65.i64[1] = v113.i32[3];
    v114 = v65;
    v65.i64[0] = v106.i32[0];
    v65.i64[1] = v106.i32[1];
    v115 = v65;
    v65.i64[0] = v109.i32[0];
    v65.i64[1] = v109.i32[1];
    v116 = v65;
    v65.i64[0] = v111.i32[0];
    v65.i64[1] = v111.i32[1];
    v117 = v65;
    v65.i64[0] = v113.i32[0];
    v65.i64[1] = v113.i32[1];
    v118 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v65);
    v119 = vceqzq_s8(*(int8x16_t *)&v48[15].__shared_weak_owners_);
    v120 = vmovl_high_s8(v119);
    v121 = vmovl_s16(*(int16x4_t *)v120.i8);
    v65.i64[0] = v121.i32[0];
    v65.i64[1] = v121.i32[1];
    v122 = v65;
    v123 = vmovl_s8(*(int8x8_t *)v119.i8);
    v124 = vmovl_s16(*(int16x4_t *)v123.i8);
    v65.i64[0] = v124.i32[0];
    v65.i64[1] = v124.i32[1];
    v125 = v65;
    v126 = vmovl_high_s16(v120);
    v65.i64[0] = v126.i32[0];
    v65.i64[1] = v126.i32[1];
    v127 = v65;
    v128 = vmovl_high_s16(v123);
    v65.i64[0] = v128.i32[0];
    v65.i64[1] = v128.i32[1];
    v129 = v65;
    v65.i64[0] = v121.i32[2];
    v65.i64[1] = v121.i32[3];
    v130 = v65;
    v65.i64[0] = v124.i32[2];
    v65.i64[1] = v124.i32[3];
    v131 = v65;
    v65.i64[0] = v126.i32[2];
    v65.i64[1] = v126.i32[3];
    v132 = v65;
    v65.i64[0] = v128.i32[2];
    v65.i64[1] = v128.i32[3];
    v48[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v125), vbicq_s8((int8x16_t)xmmword_19FFB3170, v117)), v97), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v122), v118), v96)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v129), vbicq_s8((int8x16_t)xmmword_19FFB3190, v115)), v99), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v127),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v116)),
                                                    v98))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v131), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v112)), v101), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v130), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v114)), v100)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v65), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v107)), v103), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v132),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v110)),
                                                    v102)))));
    LOBYTE(v48[13].__vftable) = 1;
    *a1 = v55;
    a1[1] = v48;
    do
      v133 = __ldxr(p_shared_owners);
    while (__stxr(v133 + 1, p_shared_owners));
    v134 = *v43;
    v135 = v43;
    if (*v43)
    {
      while (1)
      {
        while (1)
        {
          v135 = (uint64_t **)v134;
          v136 = v134[4];
          if (v41 >= v136)
            break;
          v134 = *v135;
          v43 = v135;
          if (!*v135)
            goto LABEL_33;
        }
        if (v136 >= v41)
          break;
        v134 = v135[1];
        if (!v134)
        {
          v43 = v135 + 1;
          goto LABEL_33;
        }
      }
      v139 = (unint64_t *)&v48->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    else
    {
LABEL_33:
      v137 = (uint64_t *)operator new(0x38uLL);
      v137[4] = v41;
      v137[5] = (uint64_t)v55;
      v137[6] = (uint64_t)v48;
      *v137 = 0;
      v137[1] = 0;
      v137[2] = (uint64_t)v135;
      *v43 = v137;
      v138 = **(_QWORD **)(a2 + 96);
      if (v138)
      {
        *(_QWORD *)(a2 + 96) = v138;
        v137 = *v43;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v137);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F7BA2A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 176));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::__map_value_compare<geo::Color<float,4,(geo::ColorSpace)0>,std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::less<geo::Color<float,4,(geo::ColorSpace)0>>,true>,std::allocator<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>>>::__emplace_unique_key_args<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0> const&,unsigned char &>(uint64_t *result, float *a2, _OWORD *a3, char a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t **v13;
  float v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = result[1];
  if (v7)
  {
    v9 = *a2;
    v10 = a2[1];
    v11 = a2[2];
    v12 = a2[3];
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v7;
        v14 = *(float *)(v7 + 28);
        if (v9 >= v14 || v10 >= *(float *)(v7 + 32) || v11 >= *(float *)(v7 + 36) || v12 >= *(float *)(v7 + 40))
          break;
        v7 = *(_QWORD *)v7;
        v8 = v13;
        if (!*v13)
          goto LABEL_16;
      }
      if (v14 >= v9 || *(float *)(v7 + 32) >= v10 || *(float *)(v7 + 36) >= v11 || *(float *)(v7 + 40) >= v12)
        break;
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
      {
        v8 = v13 + 1;
        goto LABEL_16;
      }
    }
  }
  else
  {
    v13 = (uint64_t **)(result + 1);
LABEL_16:
    v15 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v15 + 28) = *a3;
    v15[44] = a4;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v8 = (uint64_t *)v15;
    v16 = *(_QWORD *)*v6;
    if (v16)
    {
      *v6 = v16;
      v17 = *v8;
    }
    else
    {
      v17 = (uint64_t *)v15;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v17);
    ++v6[2];
  }
  return result;
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedFillColorPipelineState,std::shared_ptr<ggl::ElevatedFillNoWidthClipColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, __int8 a3)
{
  int8x16_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t **v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unsigned __int8 v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t **v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[28];

  v6.i64[0] = 65792;
  v6.i32[2] = 65792;
  v6.i16[6] = 0;
  v6.i8[14] = 0;
  v6.i8[15] = a3;
  v7 = vceqzq_s8(v6);
  v8 = vmovl_s8(*(int8x8_t *)v7.i8);
  v9 = vmovl_high_s16(v8);
  v10.i64[0] = v9.u32[2];
  v10.i64[1] = v9.u32[3];
  v11 = v10;
  v12 = vmovl_high_s8(v7);
  v13 = vmovl_high_s16(v12);
  v10.i64[0] = v13.u32[2];
  v10.i64[1] = v13.u32[3];
  v14 = v10;
  v15 = vmovl_s16(*(int16x4_t *)v8.i8);
  v10.i64[0] = v15.u32[2];
  v10.i64[1] = v15.u32[3];
  v16 = v10;
  v17 = vmovl_s16(*(int16x4_t *)v12.i8);
  v10.i64[0] = v17.u32[2];
  v10.i64[1] = v17.u32[3];
  v18 = v10;
  v10.i64[0] = v9.u32[0];
  v10.i64[1] = v9.u32[1];
  v19 = v10;
  v10.i64[0] = v13.u32[0];
  v10.i64[1] = v13.u32[1];
  v20 = v10;
  v10.i64[0] = v15.u32[0];
  v10.i64[1] = v15.u32[1];
  v21 = v10;
  v10.i64[0] = v17.u32[0];
  v10.i64[1] = v17.u32[1];
  v22 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v21), vbicq_s8((int8x16_t)xmmword_19FFB3150, v10)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v19), vbicq_s8((int8x16_t)xmmword_19FFB3130, v20))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v16), vbicq_s8((int8x16_t)xmmword_19FFB3110, v18)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v11), vbicq_s8((int8x16_t)xmmword_19FFB30F0, v14)))));
  v23 = v22;
  v25 = (uint64_t **)(a2 + 104);
  v24 = *(_QWORD **)(a2 + 104);
  if (!v24)
    goto LABEL_12;
  v26 = (uint64_t **)(a2 + 104);
  do
  {
    v27 = v24[4];
    v28 = v27 >= v22;
    if (v27 >= v22)
      v29 = v24;
    else
      v29 = v24 + 1;
    if (v28)
      v26 = (uint64_t **)v24;
    v24 = (_QWORD *)*v29;
  }
  while (*v29);
  if (v26 != v25 && v22 >= (unint64_t)v26[4])
  {
    *a1 = (std::__shared_weak_count *)v26[5];
    v123 = v26[6];
    a1[1] = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v124 = (unint64_t *)(v123 + 1);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
  }
  else
  {
LABEL_12:
    v30 = (std::__shared_weak_count *)operator new(0x198uLL);
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C08;
    v135 = *(_OWORD *)(a2 + 16);
    v136 = *(_OWORD *)(a2 + 32);
    if ((v32 & 1) == 0
    {
      if ((v126 & 1) == 0
      {
        if ((v130 & 1) == 0
        {
          if ((v134 & 1) == 0
          {
            ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::elevatedFillVboReflection;
          }
          ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::attributesReflection(void)::r;
          *(_QWORD *)algn_1EE586C58 = 1;
        }
        ggl::DaVinci::ElevatedFillColorPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::typedReflection(void)::r;
        unk_1EE586AA0 = &ggl::DaVinci::pipelineDataElevatedFillColorPipelineDeviceStructs(void)::ref;
        qword_1EE586AA8 = 0;
        if ((v131 & 1) == 0
        {
          ggl::DaVinci::pipelineDataElevatedFillColorPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1EE586C08 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EE586C10 = (uint64_t)ggl::DaVinci::ElevatedFillStyle::reflection(void)::reflection;
          unk_1EE586C18 = ggl::Tile::Clipping::reflection(void)::reflection;
        }
        qword_1EE586AB0 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedFillColorPipelineConstantStructs(void)::ref;
        unk_1EE586AB8 = xmmword_19FFB3690;
      }
      ggl::DaVinci::ElevatedFillColorPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::ElevatedFillColorPipelineSetup::typedReflection(void)::ref;
      if ((v127 & 1) == 0
      {
        ggl::ElevatedFillNoWidthClipColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedFillNoWidthClipColorShader";
        if ((v132 & 1) == 0
        {
          qword_1ECE35938 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
          unk_1ECE35940 = ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35948 = 1;
          unk_1ECE35950 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35958 = 4;
          unk_1ECE35960 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35968 = 0;
          unk_1ECE35970 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref = 2431374733;
          qword_1ECE35978 = 0;
          unk_1ECE35980 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35990 = 0;
          unk_1ECE35998 = 0;
          qword_1ECE35988 = 0;
        }
        qword_1ECE349E8 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE349F0 = -1863592563;
        if ((v133 & 1) == 0
        {
          ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref = 0x138D1A785;
          qword_1ECE35BF0 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
          unk_1ECE35BF8 = 0;
          qword_1ECE35C00 = 0;
          unk_1ECE35C08 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35C10 = 2;
          unk_1ECE35C18 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35C20 = 0;
          unk_1ECE35C28 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35C30 = 0;
          unk_1ECE35C38 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35C48 = 0;
          unk_1ECE35C50 = 0;
          qword_1ECE35C40 = 0;
        }
        qword_1ECE349F8 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE34A00 = 953264005;
        qword_1ECE34A08 = (uint64_t)ggl::elevatedFillNoWidthClipColorShaderShaderConstants(void)::ref;
        unk_1ECE34A10 = 4;
        qword_1ECE34A18 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderShaderTextures(void)::ref;
        unk_1ECE34A20 = 0;
        qword_1ECE34A28 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderShaderSamplers(void)::ref;
        unk_1ECE34A30 = 0;
      }
      qword_1EE586A48 = (uint64_t)&ggl::ElevatedFillNoWidthClipColorShader::typedReflection(void)::ref;
      if ((v128 & 1) == 0
      {
        ggl::DaVinci::pipelineStateElevatedFillColorPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE586AF8 = 0;
        qword_1EE586B00 = (uint64_t)"";
        dword_1EE586B08 = 0;
        qword_1EE586B10 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineAttributeBinding_0(void)::attr;
        unk_1EE586B18 = 2;
      }
      qword_1EE586A50 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE586A58 = 1;
      qword_1EE586A60 = 0;
      unk_1EE586A68 = 0;
      qword_1EE586A70 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineDeviceStructBinding(void)::ref;
      unk_1EE586A78 = 0;
      if ((v129 & 1) == 0
      {
        ggl::DaVinci::pipelineStateElevatedFillColorPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE586B38 = 0;
        qword_1EE586B40 = (uint64_t)"view";
        dword_1EE586B48 = 3;
        qword_1EE586B50 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineConstantViewBinding(void)::reflection;
        unk_1EE586B58 = xmmword_19FFB35A0;
        qword_1EE586B68 = 1;
        unk_1EE586B70 = "transform";
        dword_1EE586B78 = 3;
        qword_1EE586B80 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineConstantTransformBinding(void)::reflection;
        unk_1EE586B88 = xmmword_19FFB3660;
        qword_1EE586B98 = 2;
        unk_1EE586BA0 = "style";
        dword_1EE586BA8 = 3;
        qword_1EE586BB0 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineConstantStyleBinding(void)::reflection;
        unk_1EE586BB8 = vdupq_n_s64(3uLL);
        qword_1EE586BC8 = 3;
        unk_1EE586BD0 = "tileClipping";
        dword_1EE586BD8 = 3;
        qword_1EE586BE0 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineConstantTileClippingBinding(void)::reflection;
        unk_1EE586BE8 = 2;
      }
      qword_1EE586A80 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE586A88 = 4;
    }
    v33 = *(std::__shared_weak_count_vtbl **)a2;
    v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = v30 + 1;
    *(_OWORD *)v137 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v137[12] = *(_OWORD *)(a2 + 60);
    v38 = *(_OWORD *)(a2 + 76);
    v39 = *(_BYTE *)(a2 + 92);
    v30[1].__shared_weak_owners_ = 0;
    v30[2].__vftable = 0;
    LODWORD(v30[2].__shared_owners_) = 0;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v30[1].__shared_owners_ = 0;
    v30[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::ElevatedFillColorPipelineState::typedReflection(void)::ref;
    v30[3].__vftable = v33;
    v30[3].__shared_owners_ = (uint64_t)v34;
    if (v34)
    {
      v40 = (unint64_t *)&v34->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    LOBYTE(v30[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v30[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v30[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v30[11].__shared_weak_owners_ = v135;
    *(_OWORD *)&v30[12].__shared_owners_ = v136;
    LOBYTE(v30[13].__vftable) = 0;
    v30[16].__vftable = 0;
    *(_OWORD *)&v30[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[15].__shared_owners_ = 0u;
    *(_OWORD *)&v30[13].__shared_owners_ = 0u;
    v30[14].std::__shared_count = 0u;
    v30[16].__shared_owners_ = 0x100000001;
    LOBYTE(v30[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v30[4].std::__shared_count + 4) = *(std::__shared_count *)&v137[12];
    *(_OWORD *)&v30[3].__shared_weak_owners_ = *(_OWORD *)v137;
    *(_OWORD *)((char *)&v30[4].__shared_weak_owners_ + 4) = v38;
    BYTE4(v30[5].__shared_owners_) = v39;
    if (v34)
    {
      v42 = (unint64_t *)&v34->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    BYTE1(v30[14].__shared_owners_) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[14].__vftable + 1) = 0;
    *(uint64_t *)((char *)&v30[13].__shared_weak_owners_ + 1) = 0;
    WORD1(v30[14].__shared_owners_) = 257;
    HIDWORD(v30[14].__shared_owners_) = 0;
    v30[14].__shared_weak_owners_ = 16842752;
    v44 = vceqzq_s8(*(int8x16_t *)&v30[13].__shared_weak_owners_);
    v45 = vmovl_high_s8(v44);
    v46 = vmovl_s16(*(int16x4_t *)v45.i8);
    v47.i64[0] = v46.u32[0];
    v47.i64[1] = v46.u32[1];
    v48 = v47;
    v49 = vmovl_s8(*(int8x8_t *)v44.i8);
    v50 = vmovl_s16(*(int16x4_t *)v49.i8);
    v47.i64[0] = v50.u32[0];
    v47.i64[1] = v50.u32[1];
    v51 = v47;
    v52 = vmovl_high_s16(v45);
    v47.i64[0] = v52.u32[0];
    v47.i64[1] = v52.u32[1];
    v53 = v47;
    v54 = vmovl_high_s16(v49);
    v47.i64[0] = v54.u32[0];
    v47.i64[1] = v54.u32[1];
    v55 = v47;
    v47.i64[0] = v46.u32[2];
    v47.i64[1] = v46.u32[3];
    v56 = v47;
    v47.i64[0] = v50.u32[2];
    v47.i64[1] = v50.u32[3];
    v57 = v47;
    v47.i64[0] = v52.u32[2];
    v47.i64[1] = v52.u32[3];
    v58 = v47;
    v47.i64[0] = v54.u32[2];
    v47.i64[1] = v54.u32[3];
    v59 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v47);
    v60 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v58);
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v57);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v53);
    v63 = vceqzq_s8(*(int8x16_t *)&v30[14].__shared_owners_);
    v64 = vmovl_high_s8(v63);
    v65 = vmovl_s16(*(int16x4_t *)v64.i8);
    v47.i64[0] = v65.u32[0];
    v47.i64[1] = v65.u32[1];
    v66 = v47;
    v67 = vmovl_s8(*(int8x8_t *)v63.i8);
    v68 = vmovl_s16(*(int16x4_t *)v67.i8);
    v47.i64[0] = v68.u32[0];
    v47.i64[1] = v68.u32[1];
    v69 = v47;
    v70 = vmovl_high_s16(v64);
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC7F0;
    v47.i64[0] = v70.u32[0];
    v47.i64[1] = v70.u32[1];
    v71 = v47;
    LOBYTE(v30[15].__vftable) = a3;
    v72 = vmovl_high_s16(v67);
    v47.i64[0] = v72.u32[0];
    v47.i64[1] = v72.u32[1];
    v73 = v47;
    HIDWORD(v30[15].__vftable) = 0;
    v47.i64[0] = v65.u32[2];
    v47.i64[1] = v65.u32[3];
    v74 = v47;
    *(_DWORD *)((char *)&v30[15].__vftable + 1) = 0;
    v47.i64[0] = v68.u32[2];
    v47.i64[1] = v68.u32[3];
    v75 = v47;
    v47.i64[0] = v70.u32[2];
    v47.i64[1] = v70.u32[3];
    v76 = v47;
    v47.i64[0] = v72.u32[2];
    v47.i64[1] = v72.u32[3];
    v77 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v76);
    v78 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v66), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v48));
    v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v69), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v51));
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v71), v62);
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v73), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v55));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v74), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v56));
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v75), v61);
    v84 = vorrq_s8(v77, v60);
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v47), v59);
    v86 = vceqzq_s8((int8x16_t)v30[15].std::__shared_count);
    v87 = vmovl_s8(*(int8x8_t *)v86.i8);
    v88 = vmovl_high_s16(v87);
    v47.i64[0] = v88.i32[2];
    v47.i64[1] = v88.i32[3];
    v89 = v47;
    v90 = vmovl_high_s8(v86);
    v91 = vmovl_high_s16(v90);
    v47.i64[0] = v91.i32[2];
    v47.i64[1] = v91.i32[3];
    v92 = v47;
    v93 = vmovl_s16(*(int16x4_t *)v87.i8);
    v47.i64[0] = v93.i32[2];
    v47.i64[1] = v93.i32[3];
    v94 = v47;
    v95 = vmovl_s16(*(int16x4_t *)v90.i8);
    v47.i64[0] = v95.i32[2];
    v47.i64[1] = v95.i32[3];
    v96 = v47;
    v47.i64[0] = v88.i32[0];
    v47.i64[1] = v88.i32[1];
    v97 = v47;
    v47.i64[0] = v91.i32[0];
    v47.i64[1] = v91.i32[1];
    v98 = v47;
    v47.i64[0] = v93.i32[0];
    v47.i64[1] = v93.i32[1];
    v99 = v47;
    v47.i64[0] = v95.i32[0];
    v47.i64[1] = v95.i32[1];
    v100 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v47);
    v101 = vceqzq_s8(*(int8x16_t *)&v30[15].__shared_weak_owners_);
    v102 = vmovl_high_s8(v101);
    v103 = vmovl_s16(*(int16x4_t *)v102.i8);
    v47.i64[0] = v103.i32[0];
    v47.i64[1] = v103.i32[1];
    v104 = v47;
    v105 = vmovl_s8(*(int8x8_t *)v101.i8);
    v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v47.i64[0] = v106.i32[0];
    v47.i64[1] = v106.i32[1];
    v107 = v47;
    v108 = vmovl_high_s16(v102);
    v47.i64[0] = v108.i32[0];
    v47.i64[1] = v108.i32[1];
    v109 = v47;
    v110 = vmovl_high_s16(v105);
    v47.i64[0] = v110.i32[0];
    v47.i64[1] = v110.i32[1];
    v111 = v47;
    v47.i64[0] = v103.i32[2];
    v47.i64[1] = v103.i32[3];
    v112 = v47;
    v47.i64[0] = v106.i32[2];
    v47.i64[1] = v106.i32[3];
    v113 = v47;
    v47.i64[0] = v108.i32[2];
    v47.i64[1] = v108.i32[3];
    v114 = v47;
    v47.i64[0] = v110.i32[2];
    v47.i64[1] = v110.i32[3];
    v30[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v107), vbicq_s8((int8x16_t)xmmword_19FFB3170, v99)), v79), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v104), v100), v78)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v111), vbicq_s8((int8x16_t)xmmword_19FFB3190, v97)), v81), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v109),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v98)),
                                                    v80))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v113), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v94)), v83), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v112), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v96)), v82)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v47), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v89)), v85), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v114),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v92)),
                                                    v84)))));
    LOBYTE(v30[13].__vftable) = 1;
    *a1 = v37;
    a1[1] = v30;
    do
      v115 = __ldxr(p_shared_owners);
    while (__stxr(v115 + 1, p_shared_owners));
    v116 = *v25;
    v117 = v25;
    if (*v25)
    {
      while (1)
      {
        while (1)
        {
          v117 = (uint64_t **)v116;
          v118 = v116[4];
          if (v23 >= v118)
            break;
          v116 = *v117;
          v25 = v117;
          if (!*v117)
            goto LABEL_33;
        }
        if (v118 >= v23)
          break;
        v116 = v117[1];
        if (!v116)
        {
          v25 = v117 + 1;
          goto LABEL_33;
        }
      }
      v121 = (unint64_t *)&v30->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
LABEL_33:
      v119 = (uint64_t *)operator new(0x38uLL);
      v119[4] = v23;
      v119[5] = (uint64_t)v37;
      v119[6] = (uint64_t)v30;
      *v119 = 0;
      v119[1] = 0;
      v119[2] = (uint64_t)v117;
      *v25 = v119;
      v120 = **(_QWORD **)(a2 + 96);
      if (v120)
      {
        *(_QWORD *)(a2 + 96) = v120;
        v119 = *v25;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v119);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F7BAFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedFillColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedFillColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, __int8 a3)
{
  int8x16_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t **v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unsigned __int8 v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t **v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  ggl::ElevatedFillColorShader *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[28];

  v6.i64[0] = 65792;
  v6.i32[2] = 65792;
  v6.i16[6] = 0;
  v6.i8[14] = 0;
  v6.i8[15] = a3;
  v7 = vceqzq_s8(v6);
  v8 = vmovl_s8(*(int8x8_t *)v7.i8);
  v9 = vmovl_high_s16(v8);
  v10.i64[0] = v9.u32[2];
  v10.i64[1] = v9.u32[3];
  v11 = v10;
  v12 = vmovl_high_s8(v7);
  v13 = vmovl_high_s16(v12);
  v10.i64[0] = v13.u32[2];
  v10.i64[1] = v13.u32[3];
  v14 = v10;
  v15 = vmovl_s16(*(int16x4_t *)v8.i8);
  v10.i64[0] = v15.u32[2];
  v10.i64[1] = v15.u32[3];
  v16 = v10;
  v17 = vmovl_s16(*(int16x4_t *)v12.i8);
  v10.i64[0] = v17.u32[2];
  v10.i64[1] = v17.u32[3];
  v18 = v10;
  v10.i64[0] = v9.u32[0];
  v10.i64[1] = v9.u32[1];
  v19 = v10;
  v10.i64[0] = v13.u32[0];
  v10.i64[1] = v13.u32[1];
  v20 = v10;
  v10.i64[0] = v15.u32[0];
  v10.i64[1] = v15.u32[1];
  v21 = v10;
  v10.i64[0] = v17.u32[0];
  v10.i64[1] = v17.u32[1];
  v22 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v21), vbicq_s8((int8x16_t)xmmword_19FFB3150, v10)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v19), vbicq_s8((int8x16_t)xmmword_19FFB3130, v20))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v16), vbicq_s8((int8x16_t)xmmword_19FFB3110, v18)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v11), vbicq_s8((int8x16_t)xmmword_19FFB30F0, v14)))));
  v23 = v22;
  v25 = (uint64_t **)(a2 + 104);
  v24 = *(_QWORD **)(a2 + 104);
  if (!v24)
    goto LABEL_12;
  v26 = (uint64_t **)(a2 + 104);
  do
  {
    v27 = v24[4];
    v28 = v27 >= v22;
    if (v27 >= v22)
      v29 = v24;
    else
      v29 = v24 + 1;
    if (v28)
      v26 = (uint64_t **)v24;
    v24 = (_QWORD *)*v29;
  }
  while (*v29);
  if (v26 != v25 && v22 >= (unint64_t)v26[4])
  {
    *a1 = (std::__shared_weak_count *)v26[5];
    v123 = v26[6];
    a1[1] = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v124 = (unint64_t *)(v123 + 1);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
  }
  else
  {
LABEL_12:
    v30 = (std::__shared_weak_count *)operator new(0x198uLL);
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D20;
    v133 = *(_OWORD *)(a2 + 16);
    v134 = *(_OWORD *)(a2 + 32);
    if ((v32 & 1) == 0)
    {
      if ((_DWORD)v126)
      {
        if ((v127 & 1) == 0)
        {
          if ((_DWORD)v126)
          {
            if ((v130 & 1) == 0
            {
              if ((v132 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::distanceCompressedVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r;
              unk_1EE577C38 = 1;
            }
            ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r;
            unk_1EE577A60 = &ggl::DaVinci::pipelineDataElevatedFillColorWithDistancePipelineDeviceStructs(void)::ref;
            qword_1EE577A68 = 0;
            if ((v131 & 1) == 0
            {
              ggl::DaVinci::pipelineDataElevatedFillColorWithDistancePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE577AD0 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE577AD8 = (uint64_t)ggl::DaVinci::ElevatedFillStyle::reflection(void)::reflection;
              unk_1EE577AE0 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1EE577A70 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedFillColorWithDistancePipelineConstantStructs(void)::ref;
            unk_1EE577A78 = xmmword_19FFB3690;
          }
        }
        ggl::DaVinci::ElevatedFillColorWithDistancePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::typedReflection(void)::ref;
        ggl::ElevatedFillColorShader::typedReflection(v126);
        qword_1EE581D28 = (uint64_t)&ggl::ElevatedFillColorShader::typedReflection(void)::ref;
        if ((v128 & 1) == 0
        {
          ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE582ED0 = 0;
          qword_1EE582ED8 = (uint64_t)"";
          dword_1EE582EE0 = 0;
          qword_1EE582EE8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineAttributeBinding_0(void)::attr;
          unk_1EE582EF0 = 3;
        }
        qword_1EE581D30 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE581D38 = 1;
        qword_1EE581D40 = 0;
        unk_1EE581D48 = 0;
        qword_1EE581D50 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineDeviceStructBinding(void)::ref;
        unk_1EE581D58 = 0;
        if ((v129 & 1) == 0
        {
          ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineConstantStructBinding(void)::ref = 0;
          unk_1EE582E10 = 0;
          qword_1EE582E18 = (uint64_t)"view";
          dword_1EE582E20 = 3;
          qword_1EE582E28 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1EE582E30 = xmmword_19FFB35A0;
          qword_1EE582E40 = 1;
          unk_1EE582E48 = "transform";
          dword_1EE582E50 = 3;
          qword_1EE582E58 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineConstantTransformBinding(void)::reflection;
          unk_1EE582E60 = xmmword_19FFB3660;
          qword_1EE582E70 = 2;
          unk_1EE582E78 = "style";
          dword_1EE582E80 = 3;
          qword_1EE582E88 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineConstantStyleBinding(void)::reflection;
          *(int64x2_t *)algn_1EE582E90 = vdupq_n_s64(3uLL);
          qword_1EE582EA0 = 3;
          unk_1EE582EA8 = "tileClipping";
          dword_1EE582EB0 = 3;
          qword_1EE582EB8 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineConstantTileClippingBinding(void)::reflection;
          unk_1EE582EC0 = 2;
        }
        qword_1EE581D60 = (uint64_t)&ggl::DaVinci::pipelineStateElevatedFillColorWithDistancePipelineConstantStructBinding(void)::ref;
        unk_1EE581D68 = 4;
      }
    }
    v33 = *(std::__shared_weak_count_vtbl **)a2;
    v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = v30 + 1;
    *(_OWORD *)v135 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v135[12] = *(_OWORD *)(a2 + 60);
    v38 = *(_OWORD *)(a2 + 76);
    v39 = *(_BYTE *)(a2 + 92);
    v30[1].__shared_weak_owners_ = 0;
    v30[2].__vftable = 0;
    LODWORD(v30[2].__shared_owners_) = 0;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v30[1].__shared_owners_ = 0;
    v30[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::ElevatedFillColorWithDistancePipelineState::typedReflection(void)::ref;
    v30[3].__vftable = v33;
    v30[3].__shared_owners_ = (uint64_t)v34;
    if (v34)
    {
      v40 = (unint64_t *)&v34->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    LOBYTE(v30[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v30[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v30[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v30[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v30[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v30[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v30[11].__shared_weak_owners_ = v133;
    *(_OWORD *)&v30[12].__shared_owners_ = v134;
    LOBYTE(v30[13].__vftable) = 0;
    v30[16].__vftable = 0;
    *(_OWORD *)&v30[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[15].__shared_owners_ = 0u;
    *(_OWORD *)&v30[13].__shared_owners_ = 0u;
    v30[14].std::__shared_count = 0u;
    v30[16].__shared_owners_ = 0x100000001;
    LOBYTE(v30[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v30[4].std::__shared_count + 4) = *(std::__shared_count *)&v135[12];
    *(_OWORD *)&v30[3].__shared_weak_owners_ = *(_OWORD *)v135;
    *(_OWORD *)((char *)&v30[4].__shared_weak_owners_ + 4) = v38;
    BYTE4(v30[5].__shared_owners_) = v39;
    if (v34)
    {
      v42 = (unint64_t *)&v34->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    BYTE1(v30[14].__shared_owners_) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v30[14].__vftable + 1) = 0;
    *(uint64_t *)((char *)&v30[13].__shared_weak_owners_ + 1) = 0;
    WORD1(v30[14].__shared_owners_) = 257;
    HIDWORD(v30[14].__shared_owners_) = 0;
    v30[14].__shared_weak_owners_ = 16842752;
    v44 = vceqzq_s8(*(int8x16_t *)&v30[13].__shared_weak_owners_);
    v45 = vmovl_high_s8(v44);
    v46 = vmovl_s16(*(int16x4_t *)v45.i8);
    v47.i64[0] = v46.u32[0];
    v47.i64[1] = v46.u32[1];
    v48 = v47;
    v49 = vmovl_s8(*(int8x8_t *)v44.i8);
    v50 = vmovl_s16(*(int16x4_t *)v49.i8);
    v47.i64[0] = v50.u32[0];
    v47.i64[1] = v50.u32[1];
    v51 = v47;
    v52 = vmovl_high_s16(v45);
    v47.i64[0] = v52.u32[0];
    v47.i64[1] = v52.u32[1];
    v53 = v47;
    v54 = vmovl_high_s16(v49);
    v47.i64[0] = v54.u32[0];
    v47.i64[1] = v54.u32[1];
    v55 = v47;
    v47.i64[0] = v46.u32[2];
    v47.i64[1] = v46.u32[3];
    v56 = v47;
    v47.i64[0] = v50.u32[2];
    v47.i64[1] = v50.u32[3];
    v57 = v47;
    v47.i64[0] = v52.u32[2];
    v47.i64[1] = v52.u32[3];
    v58 = v47;
    v47.i64[0] = v54.u32[2];
    v47.i64[1] = v54.u32[3];
    v59 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v47);
    v60 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v58);
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v57);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v53);
    v63 = vceqzq_s8(*(int8x16_t *)&v30[14].__shared_owners_);
    v64 = vmovl_high_s8(v63);
    v65 = vmovl_s16(*(int16x4_t *)v64.i8);
    v47.i64[0] = v65.u32[0];
    v47.i64[1] = v65.u32[1];
    v66 = v47;
    v67 = vmovl_s8(*(int8x8_t *)v63.i8);
    v68 = vmovl_s16(*(int16x4_t *)v67.i8);
    v47.i64[0] = v68.u32[0];
    v47.i64[1] = v68.u32[1];
    v69 = v47;
    v70 = vmovl_high_s16(v64);
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC970;
    v47.i64[0] = v70.u32[0];
    v47.i64[1] = v70.u32[1];
    v71 = v47;
    LOBYTE(v30[15].__vftable) = a3;
    v72 = vmovl_high_s16(v67);
    v47.i64[0] = v72.u32[0];
    v47.i64[1] = v72.u32[1];
    v73 = v47;
    HIDWORD(v30[15].__vftable) = 0;
    v47.i64[0] = v65.u32[2];
    v47.i64[1] = v65.u32[3];
    v74 = v47;
    *(_DWORD *)((char *)&v30[15].__vftable + 1) = 0;
    v47.i64[0] = v68.u32[2];
    v47.i64[1] = v68.u32[3];
    v75 = v47;
    v47.i64[0] = v70.u32[2];
    v47.i64[1] = v70.u32[3];
    v76 = v47;
    v47.i64[0] = v72.u32[2];
    v47.i64[1] = v72.u32[3];
    v77 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v76);
    v78 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v66), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v48));
    v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v69), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v51));
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v71), v62);
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v73), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v55));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v74), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v56));
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v75), v61);
    v84 = vorrq_s8(v77, v60);
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v47), v59);
    v86 = vceqzq_s8((int8x16_t)v30[15].std::__shared_count);
    v87 = vmovl_s8(*(int8x8_t *)v86.i8);
    v88 = vmovl_high_s16(v87);
    v47.i64[0] = v88.i32[2];
    v47.i64[1] = v88.i32[3];
    v89 = v47;
    v90 = vmovl_high_s8(v86);
    v91 = vmovl_high_s16(v90);
    v47.i64[0] = v91.i32[2];
    v47.i64[1] = v91.i32[3];
    v92 = v47;
    v93 = vmovl_s16(*(int16x4_t *)v87.i8);
    v47.i64[0] = v93.i32[2];
    v47.i64[1] = v93.i32[3];
    v94 = v47;
    v95 = vmovl_s16(*(int16x4_t *)v90.i8);
    v47.i64[0] = v95.i32[2];
    v47.i64[1] = v95.i32[3];
    v96 = v47;
    v47.i64[0] = v88.i32[0];
    v47.i64[1] = v88.i32[1];
    v97 = v47;
    v47.i64[0] = v91.i32[0];
    v47.i64[1] = v91.i32[1];
    v98 = v47;
    v47.i64[0] = v93.i32[0];
    v47.i64[1] = v93.i32[1];
    v99 = v47;
    v47.i64[0] = v95.i32[0];
    v47.i64[1] = v95.i32[1];
    v100 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v47);
    v101 = vceqzq_s8(*(int8x16_t *)&v30[15].__shared_weak_owners_);
    v102 = vmovl_high_s8(v101);
    v103 = vmovl_s16(*(int16x4_t *)v102.i8);
    v47.i64[0] = v103.i32[0];
    v47.i64[1] = v103.i32[1];
    v104 = v47;
    v105 = vmovl_s8(*(int8x8_t *)v101.i8);
    v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v47.i64[0] = v106.i32[0];
    v47.i64[1] = v106.i32[1];
    v107 = v47;
    v108 = vmovl_high_s16(v102);
    v47.i64[0] = v108.i32[0];
    v47.i64[1] = v108.i32[1];
    v109 = v47;
    v110 = vmovl_high_s16(v105);
    v47.i64[0] = v110.i32[0];
    v47.i64[1] = v110.i32[1];
    v111 = v47;
    v47.i64[0] = v103.i32[2];
    v47.i64[1] = v103.i32[3];
    v112 = v47;
    v47.i64[0] = v106.i32[2];
    v47.i64[1] = v106.i32[3];
    v113 = v47;
    v47.i64[0] = v108.i32[2];
    v47.i64[1] = v108.i32[3];
    v114 = v47;
    v47.i64[0] = v110.i32[2];
    v47.i64[1] = v110.i32[3];
    v30[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v107), vbicq_s8((int8x16_t)xmmword_19FFB3170, v99)), v79), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v104), v100), v78)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v111), vbicq_s8((int8x16_t)xmmword_19FFB3190, v97)), v81), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v109),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v98)),
                                                    v80))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v113), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v94)), v83), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v112), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v96)), v82)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v47), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v89)), v85), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v114),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v92)),
                                                    v84)))));
    LOBYTE(v30[13].__vftable) = 1;
    *a1 = v37;
    a1[1] = v30;
    do
      v115 = __ldxr(p_shared_owners);
    while (__stxr(v115 + 1, p_shared_owners));
    v116 = *v25;
    v117 = v25;
    if (*v25)
    {
      while (1)
      {
        while (1)
        {
          v117 = (uint64_t **)v116;
          v118 = v116[4];
          if (v23 >= v118)
            break;
          v116 = *v117;
          v25 = v117;
          if (!*v117)
            goto LABEL_33;
        }
        if (v118 >= v23)
          break;
        v116 = v117[1];
        if (!v116)
        {
          v25 = v117 + 1;
          goto LABEL_33;
        }
      }
      v121 = (unint64_t *)&v30->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
LABEL_33:
      v119 = (uint64_t *)operator new(0x38uLL);
      v119[4] = v23;
      v119[5] = (uint64_t)v37;
      v119[6] = (uint64_t)v30;
      *v119 = 0;
      v119[1] = 0;
      v119[2] = (uint64_t)v117;
      *v25 = v119;
      v120 = **(_QWORD **)(a2 + 96);
      if (v120)
      {
        *(_QWORD *)(a2 + 96) = v120;
        v119 = *v25;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v119);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F7BBA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillColorWithDistancePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillColorWithDistancePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillColorWithDistancePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillColorPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillColorPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillColorPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedStrokeColorPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedStrokeColorPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevatedStrokeColorPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::layoutElevatedPolygonMeshes<md::DaVinciGroundRenderable>(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, _DWORD *a8, double a9, int8x16_t a10, __n128 a11)
{
  unsigned __int8 *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  float v30;
  int v31;
  float v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float *v38;
  float v39;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  float *v45;
  float v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  float *v52;
  float v53;
  BOOL v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  float v60;
  float *v61;
  float v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  float *v75;
  float v76;
  unsigned int v77;
  int v78;
  int v79;
  float v80;
  int v81;
  uint64_t v82;
  ggl::PipelineSetup *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  float32_t v92;
  float32x2_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  std::__shared_weak_count *v103;
  uint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  _QWORD *v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  char v138;
  float v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 v172;
  _QWORD *v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  float *v178;
  float *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  int v206;
  __int128 v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  int v218;
  float v219;
  int v220;
  float v221;
  int v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unsigned int v226;
  float *v227;
  float v228;
  BOOL v229;
  int v230;
  char v231;
  char v232;
  uint64_t v233;
  float *v234;
  float v235;
  BOOL v236;
  unsigned int v237;
  int v238;
  int v239;
  unint64_t v240;
  float *v241;
  float v242;
  BOOL v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  unint64_t v248;
  float v249;
  float *v250;
  float v251;
  unsigned int v252;
  float v253;
  float v254;
  float v255;
  float v256;
  uint64_t v257;
  float *v258;
  float v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  float *v264;
  float v265;
  unsigned int v266;
  int v267;
  int v268;
  float v269;
  int v270;
  uint64_t v271;
  ggl::PipelineSetup *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  float32_t v281;
  float32x2_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  std::__shared_weak_count *v293;
  uint64_t *v294;
  unint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  __int128 v322;
  _QWORD *v323;
  int v324;
  int v325;
  unint64_t v326;
  unint64_t v327;
  char v328;
  float v329;
  float32x2_t v330;
  float32x2_t v331;
  float32x2_t v332;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  __int128 v359;
  _QWORD *v360;
  int v361;
  int v362;
  unint64_t v363;
  unint64_t v364;
  float *v365;
  float *v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  BOOL v375;
  uint64_t *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD *v390;
  _QWORD *v391;
  int v392;
  __int128 v393;
  _QWORD *v394;
  uint64_t v395;
  char v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  _QWORD *v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  int v406;
  int v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  float *v412;
  float v413;
  BOOL v414;
  int v415;
  char v416;
  char v417;
  uint64_t v418;
  float *v419;
  float v420;
  BOOL v421;
  unsigned int v422;
  int v423;
  int v424;
  unint64_t v425;
  float *v426;
  float v427;
  BOOL v428;
  unsigned int v429;
  unint64_t v430;
  unint64_t v431;
  _BYTE *v432;
  uint16x4_t v433;
  uint64_t v434;
  float *v435;
  float v436;
  unsigned int v437;
  int v438;
  int v439;
  int v440;
  uint64_t v441;
  ggl::PipelineSetup *v442;
  std::__shared_weak_count *v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t *v446;
  unint64_t v447;
  _QWORD *v448;
  _QWORD *v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  char v476;
  char v477;
  std::__shared_weak_count *v478;
  __int128 v479;
  unint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  unint64_t *v488;
  unint64_t v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t *v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  BOOL v515;
  uint64_t *v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unsigned __int8 *v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  _QWORD *v530;
  _QWORD *v531;
  uint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  _QWORD *v535;
  int v536;
  __int128 v537;
  unint64_t *v538;
  unint64_t v539;
  char v540;
  float v541;
  float v542;
  float v543;
  float v544;
  char v545;
  float v546;
  float v547;
  uint64_t v548;
  float v549;
  float v550;
  float v551;
  float v552;
  uint64_t v553;
  float v554;
  float v555;
  uint64_t v556;
  unsigned __int8 *v557;
  int8x16_t v558;
  __n128 v559;
  __n128 v560;
  uint64_t v563;
  __n128 v565;
  __n128 v566;
  uint64_t v568;
  std::__shared_weak_count *v569;
  std::__shared_weak_count *v570;
  std::__shared_weak_count *v571;
  __int128 v572;
  __int128 v573;
  int v574;
  uint64_t v575;
  _QWORD v576[2];
  float32x4_t v577;
  _BYTE v578[36];
  uint64_t v579;

  v13 = a3;
  v579 = *MEMORY[0x1E0C80C00];
  v14 = *((_DWORD *)a3 + 4);
  if (a3[3])
  {
    v15 = *(std::__shared_weak_count **)(a2 + 256);
    v568 = *(_QWORD *)(a2 + 248);
    v569 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  else
  {
    v568 = 0;
    v569 = 0;
  }
  v18 = *(_QWORD **)(a1 + 8);
  v19 = v18[1];
  if ((v19 & (v19 - 1)) != 0)
  {
    v21 = 0x1AF456233693CD46;
    if (v19 <= 0x1AF456233693CD46)
      v21 = 0x1AF456233693CD46 % v19;
    v20 = *(_QWORD **)(*v18 + 8 * v21);
    do
    {
      do
        v20 = (_QWORD *)*v20;
      while (v20[1] != 0x1AF456233693CD46);
    }
    while (v20[2] != 0x1AF456233693CD46);
  }
  else
  {
    v20 = *(_QWORD **)(*v18 + 8 * ((v19 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v20 = (_QWORD *)*v20;
      while (v20[1] != 0x1AF456233693CD46);
    }
    while (v20[2] != 0x1AF456233693CD46);
  }
  v22 = fmaxf(*(float *)(*(_QWORD *)(v20[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v20[5] + 32) + 3076), 1.0);
  v23 = *a7;
  v24 = (std::__shared_weak_count *)a7[1];
  v577 = 0uLL;
  if (v23)
  {
    *(_QWORD *)v578 = v23;
    *(_QWORD *)&v578[8] = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      *((_QWORD *)&v572 + 1) = v24;
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
    }
    else
    {
      *((_QWORD *)&v572 + 1) = 0;
    }
    v573 = 0uLL;
    *(_QWORD *)&v572 = v23;
    LOBYTE(v574) = 0;
    v33 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 48))(v23, &v573);
    LOBYTE(v574) = v33;
    if (v24)
    {
      v34 = (unint64_t *)&v24->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      v33 = v574;
    }
    if (!v33)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0.0;
      LOBYTE(v31) = 2;
      goto LABEL_104;
    }
    v36 = *(_QWORD *)(v572 + 24);
    if ((int)v22 >= 0x17)
      v37 = 23;
    else
      v37 = (int)v22;
    v38 = *(float **)v36;
    if (*(_QWORD *)v36
      && (v39 = *v38, LODWORD(v38) = *v38 == 1.0, *(_BYTE *)(v36 + 10))
      && (v39 != 0.0 ? (_ZF = v39 == 1.0) : (_ZF = 1), !_ZF)
      || (v41 = *(unsigned __int8 *)(v36 + v38 + 11), v39 = 0.0, v41 == 2))
    {
      v578[0] = 1;
      LOBYTE(v570) = 1;
      v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 0, v578);
      v43 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v36, 0x5Bu, v37, 1, &v570);
      if (v39 < 1.0)
        v43 = v42;
      if (v43)
      {
LABEL_48:
        v44 = *(_QWORD *)(v572 + 24);
        v45 = *(float **)v44;
        if (*(_QWORD *)v44
          && (v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(_BYTE *)(v44 + 10))
          && (v46 != 0.0 ? (v47 = v46 == 1.0) : (v47 = 1), !v47)
          || (v48 = *(unsigned __int8 *)(v44 + v45 + 11), v46 = 0.0, v48 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v49 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x68u, v37, 0, v578);
          v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x68u, v37, 1u, &v570);
          if (v46 >= 1.0)
            v29 = v50;
          else
            v29 = v49;
        }
        else
        {
          v29 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x68u, v37, v48, 0);
        }
        v51 = *(_QWORD *)(v572 + 24);
        v52 = *(float **)v51;
        if (*(_QWORD *)v51
          && (v53 = *v52, LODWORD(v52) = *v52 == 1.0, *(_BYTE *)(v51 + 10))
          && (v53 != 0.0 ? (v54 = v53 == 1.0) : (v54 = 1), !v54)
          || (v55 = *(unsigned __int8 *)(v51 + v52 + 11), v53 = 0.0, v55 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v56 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v51, 0x6Bu, 0, v578);
          v57 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v51, 0x6Bu, 1u, &v570);
          if (v53 >= 1.0)
            v58 = (_BYTE *)v57;
          else
            v58 = (_BYTE *)v56;
          if (*v58)
            goto LABEL_75;
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v572 + 24), 0x6Bu, v55, 0))
        {
LABEL_75:
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Du, 2u, fminf(fmaxf(v22, 0.0), 23.0));
LABEL_78:
          v577 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v578)), (float32x4_t)vdupq_n_s32(0x37800080u));
          v59 = *(_QWORD *)(v572 + 24);
          v60 = fminf(fmaxf(v22, 0.0), 23.0);
          v61 = *(float **)v59;
          if (*(_QWORD *)v59
            && (v62 = *v61, LODWORD(v61) = *v61 == 1.0, *(_BYTE *)(v59 + 10))
            && v62 != 0.0
            && v62 != 1.0
            || (v63 = *(unsigned __int8 *)(v59 + v61 + 11), v62 = 0.0, v63 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v59, 0x61u, 0, v578, v60);
            v65 = v64;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v59, 0x61u, 1u, (BOOL *)&v570, v60);
            v30 = v65 + (float)((float)(v66 - v65) * v62);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v572 + 24), 0x61u, v63, 0, v60);
            v30 = v67;
          }
          v68 = *(_QWORD *)(v572 + 24);
          v69 = *(float **)v68;
          if (*(_QWORD *)v68
            && (v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(_BYTE *)(v68 + 10))
            && v70 != 0.0
            && v70 != 1.0
            || (v71 = *(unsigned __int8 *)(v68 + v69 + 11), v70 = 0.0, v71 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v72 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x13Fu, v37, 0, v578);
            v73 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x13Fu, v37, 1u, &v570);
            if (v70 >= 1.0)
              LOBYTE(v31) = v73;
            else
              LOBYTE(v31) = v72;
          }
          else
          {
            v31 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x13Fu, v37, v71, 0);
          }
          v74 = *(_QWORD *)(v572 + 24);
          v75 = *(float **)v74;
          if (*(_QWORD *)v74
            && (v76 = *v75, LODWORD(v75) = *v75 == 1.0, *(_BYTE *)(v74 + 10))
            && v76 != 0.0
            && v76 != 1.0
            || (v77 = *(unsigned __int8 *)(v74 + v75 + 11), v76 = 0.0, v77 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v78 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v74, 0x8Au, v37, 0, v578);
            v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v74, 0x8Au, v37, 1u, &v570);
            if (v76 < 1.0)
              LOBYTE(v79) = v78;
          }
          else
          {
            v79 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x8Au, v37, v77, 0);
          }
          v28 = v79 - 1 < 2;
LABEL_104:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
          if (v13[1])
            goto LABEL_105;
          goto LABEL_25;
        }
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Du, v37, 2u, 0);
        goto LABEL_78;
      }
    }
    else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v572 + 24), 0x5Bu, v37, v41, 0))
    {
      goto LABEL_48;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
    goto LABEL_267;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0.0;
  LOBYTE(v31) = 2;
  if (a3[1])
  {
LABEL_105:
    v577 = (float32x4_t)xmmword_19FFB2D90;
    v32 = 1.0;
    goto LABEL_106;
  }
LABEL_25:
  v32 = v577.f32[3];
LABEL_106:
  if (v32 >= 0.0039062 && v30 >= 0.1)
  {
    v80 = *(float *)(a2 + 368) * v30;
    memset(&v578[4], 0, 32);
    v81 = *(_DWORD *)(a6 + 88);
    v553 = a6;
    if (v81)
    {
      if (v81 != 1)
        goto LABEL_693;
      if (!*(_BYTE *)(a6 + 32))
        goto LABEL_266;
      v554 = v80;
      v82 = *(_QWORD *)(a6 + 8);
      v83 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)a5);
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorPipelineState,std::shared_ptr<ggl::ElevatedStrokeColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 32, v568 != 0);
      ggl::Flyover::FlyoverPipelineSetup::setState(v83, v572, *((std::__shared_weak_count **)&v572 + 1));
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
      if (*((_QWORD *)&v572 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (_QWORD *)*((_QWORD *)v83 + 8);
      v88 = v87[6];
      v572 = 0uLL;
      v89 = *(_QWORD *)(v88 + 8);
      *(_QWORD *)&v90 = 0;
      *((_QWORD *)&v90 + 1) = v88;
      v91 = *(_QWORD *)(v88 + 72);
      v572 = v90;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v89;
      v575 = v91;
      LOWORD(v574) = 1;
      v92 = v577.f32[3];
      *(float32x4_t *)v91 = v577;
      *(_DWORD *)(v91 + 48) = v14;
      *(_DWORD *)(v91 + 32) = *a8;
      *(_DWORD *)(v91 + 36) = a8[1];
      *(_DWORD *)(v91 + 40) = a8[2];
      *(_DWORD *)(v91 + 44) = a8[3];
      if (!*(_BYTE *)(a6 + 32))
        goto LABEL_694;
      LODWORD(v90) = *(_DWORD *)(a6 + 24);
      if (v31 == 2)
      {
        v93 = (float32x2_t)0x3F0000003F000000;
      }
      else if (v31 == 1)
      {
        v93 = (float32x2_t)1065353216;
      }
      else
      {
        v93 = (float32x2_t)0x3F80000000000000;
      }
      v140 = vmul_n_f32(v93, v554);
      v141.i32[0] = vsub_f32(*(float32x2_t *)&v90, v140).u32[0];
      v141.i32[1] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v90, 0), v140).i32[1];
      *(float *)&v90 = *(float *)(a6 + 28) + *(float *)&v90;
      v142 = vmaxnm_f32(vdiv_f32(v141, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v90, 0)), 0);
      __asm
      {
        FMOV            V1.2S, #1.0
        FMOV            V4.2S, #-1.0
      }
      *(int8x8_t *)(v91 + 16) = vbsl_s8((int8x8_t)vcgt_f32(v142, _D1), (int8x8_t)_D1, (int8x8_t)vmla_f32(_D4, (float32x2_t)0x4000000040000000, v142));
      v87[1] = 0;
      v148 = *(_QWORD *)(a2 + 216);
      *v87 = v148;
      v149 = (_QWORD *)*((_QWORD *)v83 + 20);
      v150 = *(_QWORD *)(a2 + 224);
      if (v150)
      {
        v151 = (unint64_t *)(v150 + 8);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
      }
      v153 = (std::__shared_weak_count *)v149[1];
      *v149 = v148;
      v149[1] = v150;
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          v549 = v92;
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
          v92 = v549;
        }
      }
      v156 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v156 + 24) = 0;
      v157 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(v156 + 16) = v157;
      v158 = *((_QWORD *)v83 + 20);
      v159 = *(_QWORD *)(a2 + 240);
      if (v159)
      {
        v160 = (unint64_t *)(v159 + 8);
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
      }
      v162 = *(std::__shared_weak_count **)(v158 + 24);
      *(_QWORD *)(v158 + 16) = v157;
      *(_QWORD *)(v158 + 24) = v159;
      if (v162)
      {
        v163 = (unint64_t *)&v162->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          v550 = v92;
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
          v92 = v550;
        }
      }
      v124 = v29;
      v165 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v165 + 32) = v568;
      *(_QWORD *)(v165 + 40) = 0;
      v166 = *((_QWORD *)v83 + 20);
      if (v569)
      {
        v167 = (unint64_t *)&v569->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v169 = *(std::__shared_weak_count **)(v166 + 40);
      *(_QWORD *)(v166 + 32) = v568;
      *(_QWORD *)(v166 + 40) = v569;
      if (v169)
      {
        v170 = (unint64_t *)&v169->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          v551 = v92;
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          v92 = v551;
        }
      }
      v556 = v82;
      if (v575)
      {
        v172 = v573;
        if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
        {
          v173 = (_QWORD *)*((_QWORD *)&v572 + 1);
          v174 = v574;
          v175 = BYTE1(v574);
          if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
          {
            v552 = v92;
            (*(void (**)(void))(*(_QWORD *)v572 + 64))();
            v92 = v552;
          }
          if (v174 && !v175)
          {
            v177 = v173[7];
            v176 = v173[8];
            if (v176 == v177)
              v177 = v173[10] - v173[9];
            if ((unint64_t)v172 < v177)
              v177 = v172;
            if (v176 <= *((_QWORD *)&v172 + 1))
              v176 = *((_QWORD *)&v172 + 1);
            if (v176 == v177)
              v176 = v177 + v173[10] - v173[9];
            v173[7] = v177;
            v173[8] = v176;
          }
        }
      }
      v545 = 0;
      v139 = v92;
      v138 = 1;
    }
    else
    {
      v555 = v80;
      v94 = *(_QWORD *)(a6 + 8);
      v545 = *(_BYTE *)(a6 + 24);
      v576[0] = *(_QWORD *)(a6 + 25);
      *(_QWORD *)((char *)v576 + 7) = *(_QWORD *)(a6 + 32);
      v83 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 8));
      v95 = *(_QWORD *)(*((_QWORD *)v83 + 8) + 48);
      v572 = 0uLL;
      v96 = *(_QWORD *)(v95 + 8);
      *(_QWORD *)&v97 = 0;
      *((_QWORD *)&v97 + 1) = v95;
      v98 = *(_QWORD *)(v95 + 72);
      v572 = v97;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v96;
      v575 = v98;
      LOWORD(v574) = 1;
      *(_QWORD *)v98 = v577.i64[0];
      *(_DWORD *)(v98 + 8) = v577.i32[2];
      *(float *)(v98 + 12) = v32;
      *(_DWORD *)(v98 + 32) = *a8;
      *(_DWORD *)(v98 + 36) = a8[1];
      *(_DWORD *)(v98 + 40) = a8[2];
      *(_DWORD *)(v98 + 44) = a8[3];
      if (v31 == 2)
      {
        v100 = 0.5;
        v99 = 0.5;
      }
      else if (v31 == 1)
      {
        v99 = 1.0;
        v100 = 0.0;
      }
      else
      {
        v99 = 0.0;
        v100 = 1.0;
      }
      v101 = -(float)(v555 * v100);
      v102 = v99 * v555;
      if (v13[1])
      {
        v102 = 1.0;
        v101 = -1.0;
      }
      *(float *)(v98 + 16) = v101;
      *(float *)(v98 + 20) = v102;
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedStrokeColorWithDistanceShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v570, a5 + 152, v568 != 0, v13[2]);
      ggl::Flyover::FlyoverPipelineSetup::setState(v83, (uint64_t)v570, v571);
      v103 = v571;
      if (v571)
      {
        v104 = &v571->__shared_owners_;
        do
          v105 = __ldaxr((unint64_t *)v104);
        while (__stlxr(v105 - 1, (unint64_t *)v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (_QWORD *)*((_QWORD *)v83 + 8);
      v106[1] = 0;
      v107 = *(_QWORD *)(a2 + 216);
      *v106 = v107;
      v108 = (_QWORD *)*((_QWORD *)v83 + 20);
      v109 = *(_QWORD *)(a2 + 224);
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v112 = (std::__shared_weak_count *)v108[1];
      *v108 = v107;
      v108[1] = v109;
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v115 + 24) = 0;
      v116 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(v115 + 16) = v116;
      v117 = *((_QWORD *)v83 + 20);
      v118 = *(_QWORD *)(a2 + 240);
      if (v118)
      {
        v119 = (unint64_t *)(v118 + 8);
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      v121 = *(std::__shared_weak_count **)(v117 + 24);
      *(_QWORD *)(v117 + 16) = v116;
      *(_QWORD *)(v117 + 24) = v118;
      if (v121)
      {
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = v29;
      v125 = *((_QWORD *)v83 + 8);
      *(_QWORD *)(v125 + 32) = v568;
      *(_QWORD *)(v125 + 40) = 0;
      v126 = *((_QWORD *)v83 + 20);
      if (v569)
      {
        v127 = (unint64_t *)&v569->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
      }
      v129 = *(std::__shared_weak_count **)(v126 + 40);
      *(_QWORD *)(v126 + 32) = v568;
      *(_QWORD *)(v126 + 40) = v569;
      if (v129)
      {
        v130 = (unint64_t *)&v129->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v556 = v94;
      if (v575)
      {
        v132 = v573;
        if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
        {
          v133 = (_QWORD *)*((_QWORD *)&v572 + 1);
          v134 = v574;
          v135 = BYTE1(v574);
          if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v572 + 64))();
          if (v134 && !v135)
          {
            v137 = v133[7];
            v136 = v133[8];
            if (v136 == v137)
              v137 = v133[10] - v133[9];
            if ((unint64_t)v132 < v137)
              v137 = v132;
            if (v136 <= *((_QWORD *)&v132 + 1))
              v136 = *((_QWORD *)&v132 + 1);
            if (v136 == v137)
              v136 = v137 + v133[10] - v133[9];
            v133[7] = v137;
            v133[8] = v136;
          }
        }
      }
      v138 = 0;
      v139 = v577.f32[3];
    }
    if (v139 >= 1.0)
    {
      v182 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a5 + 752), 3, 0, (v13[1] | v13[2]) == 0, 0, 1, v13[1], 3);
      v183 = 0;
    }
    else
    {
      v178 = *(float **)(a5 + 792);
      if (!v178)
        goto LABEL_231;
      v179 = (float *)(a5 + 792);
      do
      {
        while (v178[7] < v577.f32[0] && v178[8] < v577.f32[1] && v178[9] < v577.f32[2] && v178[10] < v139)
        {
          v178 = (float *)*((_QWORD *)v178 + 1);
          if (!v178)
            goto LABEL_226;
        }
        v179 = v178;
        v178 = *(float **)v178;
      }
      while (v178);
LABEL_226:
      if (v179 != (float *)(a5 + 792)
        && (v577.f32[0] >= v179[7] || v577.f32[1] >= v179[8] || v577.f32[2] >= v179[9] || v139 >= v179[10]))
      {
        v181 = *((unsigned __int8 *)v179 + 44);
        v180 = a5;
      }
      else
      {
LABEL_231:
        v180 = a5;
        std::__tree<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::__map_value_compare<geo::Color<float,4,(geo::ColorSpace)0>,std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::less<geo::Color<float,4,(geo::ColorSpace)0>>,true>,std::allocator<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>>>::__emplace_unique_key_args<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0> const&,unsigned char &>((uint64_t *)(a5 + 784), v577.f32, &v577, *(_BYTE *)(a5 + 808));
        v181 = *(unsigned __int8 *)(a5 + 808);
        *(_BYTE *)(a5 + 808) = (v181 + 1) % *(unsigned __int8 *)(a5 + 809);
      }
      v183 = v13[4] + v181;
      v182 = v180 + 512;
    }
    v184 = *(_QWORD *)(a4 + 8);
    if (!v184)
      goto LABEL_266;
    v185 = (v124 << 10) | 1u;
    v186 = a4 + 8;
    do
    {
      v187 = *(_DWORD *)(v184 + 28);
      v188 = v187 < v28;
      if (v187 >= v28)
        v189 = (uint64_t *)v184;
      else
        v189 = (uint64_t *)(v184 + 8);
      if (!v188)
        v186 = v184;
      v184 = *v189;
    }
    while (*v189);
    if (v186 == a4 + 8 || v28 < *(_DWORD *)(v186 + 28))
    {
LABEL_266:
      a6 = v553;
      goto LABEL_267;
    }
    v190 = *(_QWORD **)(*((_QWORD *)v13 + 1) + 8);
    v191 = v190[3];
    v192 = v190[4];
    v193 = v192 - v191;
    if (v192 == v191)
    {
      v201 = 0;
      v196 = a5;
      if ((v138 & 1) == 0)
      {
LABEL_260:
        v572 = *(_OWORD *)v578;
        v573 = *(_OWORD *)&v578[16];
        v574 = *(_DWORD *)&v578[32];
        v208 = *(_QWORD **)(v196 + 736);
        v209 = v208[1];
        if (v209 == *(_QWORD *)(v196 + 744))
        {
          v208 = (_QWORD *)*v208;
          if (!v208)
          {
            v208 = malloc_type_malloc(120 * v209 + 16, 0xB644C221uLL);
            *v208 = 0;
            v208[1] = 0;
            **(_QWORD **)(v196 + 736) = v208;
          }
          *(_QWORD *)(v196 + 736) = v208;
          v209 = v208[1];
        }
        v210 = &v208[15 * v209];
        v210[2] = &off_1E42B59B0;
        v205 = v210 + 2;
        v208[1] = v209 + 1;
        v205[2] = "draped stroke";
        v205[3] = v182;
        v205[4] = v83;
        *((_DWORD *)v205 + 10) = v183;
        v205[6] = v185;
        *((_DWORD *)v205 + 14) = 1065353216;
        *((_DWORD *)v205 + 15) = v572;
        *((int64x2_t *)v205 + 6) = vdupq_n_s64(1uLL);
        v205[14] = 0;
        v205[8] = v556;
        *((_BYTE *)v205 + 72) = v545;
        v211 = v576[0];
        v205[10] = *(_QWORD *)((char *)v576 + 7);
        v205[11] = 0;
        *(_QWORD *)((char *)v205 + 73) = v211;
        v205[12] = 1;
LABEL_265:
        ggl::CommandBuffer::pushRenderItem(v201, (ggl::RenderItem *)v205);
        goto LABEL_266;
      }
    }
    else
    {
      v194 = 0;
      v195 = v193 >> 3;
      v196 = a5;
      while (1)
      {
        v197 = *(unsigned __int8 **)(v191 + 8 * v194);
        if (*v197 == *(unsigned __int8 *)(v186 + 32))
        {
          v198 = *((_QWORD *)v197 + 1);
          v199 = v190[15];
          if (v198 < (v190[16] - v199) >> 3)
            break;
        }
        if (++v194 >= v195)
          goto LABEL_253;
      }
      v200 = *(_QWORD *)(v199 + 8 * v198);
      if (v200)
      {
        v201 = *(_QWORD *)(*(_QWORD *)(v200 + 24) + 8 * *(unsigned __int8 *)(v186 + 33));
        if ((v138 & 1) != 0)
          goto LABEL_254;
        goto LABEL_260;
      }
LABEL_253:
      v201 = 0;
      if ((v138 & 1) == 0)
        goto LABEL_260;
    }
LABEL_254:
    v572 = *(_OWORD *)v578;
    v573 = *(_OWORD *)&v578[16];
    v574 = *(_DWORD *)&v578[32];
    v202 = *(_QWORD **)(v196 + 736);
    v203 = v202[1];
    if (v203 == *(_QWORD *)(v196 + 744))
    {
      v202 = (_QWORD *)*v202;
      if (!v202)
      {
        v202 = malloc_type_malloc(120 * v203 + 16, 0xB644C221uLL);
        *v202 = 0;
        v202[1] = 0;
        **(_QWORD **)(v196 + 736) = v202;
      }
      *(_QWORD *)(v196 + 736) = v202;
      v203 = v202[1];
    }
    v204 = &v202[15 * v203];
    v204[2] = &off_1E42B59B0;
    v205 = v204 + 2;
    v202[1] = v203 + 1;
    v205[2] = "draped stroke";
    v205[3] = v182;
    v205[4] = v83;
    *((_DWORD *)v205 + 10) = v183;
    v205[6] = v185;
    *((_DWORD *)v205 + 14) = 1065353216;
    v206 = v574;
    v207 = v573;
    *(_OWORD *)((char *)v205 + 60) = v572;
    *((_DWORD *)v205 + 23) = v206;
    *(_OWORD *)((char *)v205 + 76) = v207;
    *((int64x2_t *)v205 + 6) = vdupq_n_s64(1uLL);
    v205[14] = 0;
    v205[8] = v556;
    goto LABEL_265;
  }
LABEL_267:
  v212 = *a7;
  v213 = (std::__shared_weak_count *)a7[1];
  v577 = 0uLL;
  if (v212)
  {
    *(_QWORD *)v578 = v212;
    *(_QWORD *)&v578[8] = v213;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 1, v214));
      *((_QWORD *)&v572 + 1) = v213;
      do
        v216 = __ldxr(v214);
      while (__stxr(v216 + 1, v214));
    }
    else
    {
      *((_QWORD *)&v572 + 1) = 0;
    }
    v573 = 0uLL;
    *(_QWORD *)&v572 = v212;
    LOBYTE(v574) = 0;
    v222 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v212 + 48))(v212, &v573);
    LOBYTE(v574) = v222;
    if (v213)
    {
      v223 = (unint64_t *)&v213->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
      v222 = v574;
    }
    if (!v222)
    {
      v217 = 0;
      v218 = 0;
      v219 = 0.0;
      LOBYTE(v220) = 2;
      goto LABEL_354;
    }
    v225 = *(_QWORD *)(v572 + 24);
    if ((int)v22 >= 0x17)
      v226 = 23;
    else
      v226 = (int)v22;
    v227 = *(float **)v225;
    if (*(_QWORD *)v225
      && (v228 = *v227, LODWORD(v227) = *v227 == 1.0, *(_BYTE *)(v225 + 10))
      && (v228 != 0.0 ? (v229 = v228 == 1.0) : (v229 = 1), !v229)
      || (v230 = *(unsigned __int8 *)(v225 + v227 + 11), v228 = 0.0, v230 == 2))
    {
      v578[0] = 1;
      LOBYTE(v570) = 1;
      v231 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v225, 0x5Bu, v226, 0, v578);
      v232 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v225, 0x5Bu, v226, 1, &v570);
      if (v228 < 1.0)
        v232 = v231;
      if (v232)
      {
LABEL_298:
        v233 = *(_QWORD *)(v572 + 24);
        v234 = *(float **)v233;
        if (*(_QWORD *)v233
          && (v235 = *v234, LODWORD(v234) = *v234 == 1.0, *(_BYTE *)(v233 + 10))
          && (v235 != 0.0 ? (v236 = v235 == 1.0) : (v236 = 1), !v236)
          || (v237 = *(unsigned __int8 *)(v233 + v234 + 11), v235 = 0.0, v237 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v238 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v233, 0x68u, v226, 0, v578);
          v239 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v233, 0x68u, v226, 1u, &v570);
          if (v235 >= 1.0)
            v218 = v239;
          else
            v218 = v238;
        }
        else
        {
          v218 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x68u, v226, v237, 0);
        }
        v240 = *(_QWORD *)(v572 + 24);
        v241 = *(float **)v240;
        if (*(_QWORD *)v240
          && (v242 = *v241, LODWORD(v241) = *v241 == 1.0, *(_BYTE *)(v240 + 10))
          && (v242 != 0.0 ? (v243 = v242 == 1.0) : (v243 = 1), !v243)
          || (v244 = *(unsigned __int8 *)(v240 + v241 + 11), v242 = 0.0, v244 == 2))
        {
          v578[0] = 1;
          LOBYTE(v570) = 1;
          v245 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v240, 0x197u, 0, v578);
          v246 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v240, 0x197u, 1u, &v570);
          if (v242 >= 1.0)
            v247 = (_BYTE *)v246;
          else
            v247 = (_BYTE *)v245;
          if (*v247)
            goto LABEL_325;
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v572 + 24), 0x197u, v244, 0))
        {
LABEL_325:
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x193u, 2u, fminf(fmaxf(v22, 0.0), 23.0));
LABEL_328:
          v577 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v578)), (float32x4_t)vdupq_n_s32(0x37800080u));
          v248 = *(_QWORD *)(v572 + 24);
          v249 = fminf(fmaxf(v22, 0.0), 23.0);
          v250 = *(float **)v248;
          if (*(_QWORD *)v248
            && (v251 = *v250, LODWORD(v250) = *v250 == 1.0, *(_BYTE *)(v248 + 10))
            && v251 != 0.0
            && v251 != 1.0
            || (v252 = *(unsigned __int8 *)(v248 + v250 + 11), v251 = 0.0, v252 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v248, 0x194u, 0, v578, v249);
            v254 = v253;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v248, 0x194u, 1u, (BOOL *)&v570, v249);
            v219 = v254 + (float)((float)(v255 - v254) * v251);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v572 + 24), 0x194u, v252, 0, v249);
            v219 = v256;
          }
          v257 = *(_QWORD *)(v572 + 24);
          v258 = *(float **)v257;
          if (*(_QWORD *)v257
            && (v259 = *v258, LODWORD(v258) = *v258 == 1.0, *(_BYTE *)(v257 + 10))
            && v259 != 0.0
            && v259 != 1.0
            || (v260 = *(unsigned __int8 *)(v257 + v258 + 11), v259 = 0.0, v260 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v261 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v257, 0x198u, v226, 0, v578);
            v262 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v257, 0x198u, v226, 1u, &v570);
            if (v259 >= 1.0)
              LOBYTE(v220) = v262;
            else
              LOBYTE(v220) = v261;
          }
          else
          {
            v220 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x198u, v226, v260, 0);
          }
          v263 = *(_QWORD *)(v572 + 24);
          v264 = *(float **)v263;
          if (*(_QWORD *)v263
            && (v265 = *v264, LODWORD(v264) = *v264 == 1.0, *(_BYTE *)(v263 + 10))
            && v265 != 0.0
            && v265 != 1.0
            || (v266 = *(unsigned __int8 *)(v263 + v264 + 11), v265 = 0.0, v266 == 2))
          {
            v578[0] = 1;
            LOBYTE(v570) = 1;
            v267 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v263, 0x8Au, v226, 0, v578);
            v268 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v263, 0x8Au, v226, 1u, &v570);
            if (v265 < 1.0)
              LOBYTE(v268) = v267;
          }
          else
          {
            v268 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x8Au, v226, v266, 0);
          }
          v217 = v268 - 1 < 2;
LABEL_354:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
          if (v13[1])
            goto LABEL_355;
          goto LABEL_275;
        }
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x193u, v226, 2u, 0);
        goto LABEL_328;
      }
    }
    else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v572 + 24), 0x5Bu, v226, v230, 0))
    {
      goto LABEL_298;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
    goto LABEL_517;
  }
  v217 = 0;
  v218 = 0;
  v219 = 0.0;
  LOBYTE(v220) = 2;
  if (v13[1])
  {
LABEL_355:
    v577 = (float32x4_t)xmmword_19FFB2D90;
    v221 = 1.0;
    goto LABEL_356;
  }
LABEL_275:
  v221 = v577.f32[3];
LABEL_356:
  if (v221 >= 0.0039062 && v219 >= 0.1)
  {
    v269 = *(float *)(a2 + 368) * v219;
    memset(&v578[4], 0, 32);
    v270 = *(_DWORD *)(a6 + 88);
    v557 = v13;
    if (!v270)
    {
      v547 = v269;
      v283 = *(_QWORD *)(a6 + 8);
      v540 = *(_BYTE *)(a6 + 24);
      v576[0] = *(_QWORD *)(a6 + 25);
      *(_QWORD *)((char *)v576 + 7) = *(_QWORD *)(a6 + 32);
      v272 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 8));
      v284 = *(_QWORD *)(*((_QWORD *)v272 + 8) + 48);
      v572 = 0uLL;
      v285 = *(_QWORD *)(v284 + 8);
      *(_QWORD *)&v286 = 0;
      *((_QWORD *)&v286 + 1) = v284;
      v287 = *(_QWORD *)(v284 + 72);
      v572 = v286;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v285;
      v575 = v287;
      LOWORD(v574) = 1;
      *(_QWORD *)v287 = v577.i64[0];
      *(_DWORD *)(v287 + 8) = v577.i32[2];
      *(float *)(v287 + 12) = v221;
      *(_DWORD *)(v287 + 32) = *a8;
      *(_DWORD *)(v287 + 36) = a8[1];
      *(_DWORD *)(v287 + 40) = a8[2];
      *(_DWORD *)(v287 + 44) = a8[3];
      if (v220 == 2)
      {
        v290 = 0.5;
        v289 = 0.5;
        v288 = v547;
      }
      else
      {
        v288 = v547;
        if (v220 == 1)
        {
          v289 = 1.0;
          v290 = 0.0;
        }
        else
        {
          v289 = 0.0;
          v290 = 1.0;
        }
      }
      v291 = -(float)(v288 * v290);
      v292 = v289 * v288;
      if (v13[1])
      {
        v292 = 1.0;
        v291 = -1.0;
      }
      *(float *)(v287 + 16) = v291;
      *(float *)(v287 + 20) = v292;
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedStrokeColorWithDistanceShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v570, a5 + 152, v568 != 0, v13[2]);
      ggl::Flyover::FlyoverPipelineSetup::setState(v272, (uint64_t)v570, v571);
      v293 = v571;
      if (v571)
      {
        v294 = &v571->__shared_owners_;
        do
          v295 = __ldaxr((unint64_t *)v294);
        while (__stlxr(v295 - 1, (unint64_t *)v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
      v296 = (_QWORD *)*((_QWORD *)v272 + 8);
      v296[1] = 0;
      v297 = *(_QWORD *)(a2 + 216);
      *v296 = v297;
      v298 = (_QWORD *)*((_QWORD *)v272 + 20);
      v299 = *(_QWORD *)(a2 + 224);
      if (v299)
      {
        v300 = (unint64_t *)(v299 + 8);
        do
          v301 = __ldxr(v300);
        while (__stxr(v301 + 1, v300));
      }
      v302 = (std::__shared_weak_count *)v298[1];
      *v298 = v297;
      v298[1] = v299;
      if (v302)
      {
        v303 = (unint64_t *)&v302->__shared_owners_;
        do
          v304 = __ldaxr(v303);
        while (__stlxr(v304 - 1, v303));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
      }
      v305 = *((_QWORD *)v272 + 8);
      *(_QWORD *)(v305 + 24) = 0;
      v306 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(v305 + 16) = v306;
      v307 = *((_QWORD *)v272 + 20);
      v308 = *(_QWORD *)(a2 + 240);
      if (v308)
      {
        v309 = (unint64_t *)(v308 + 8);
        do
          v310 = __ldxr(v309);
        while (__stxr(v310 + 1, v309));
      }
      v311 = *(std::__shared_weak_count **)(v307 + 24);
      *(_QWORD *)(v307 + 16) = v306;
      *(_QWORD *)(v307 + 24) = v308;
      if (v311)
      {
        v312 = (unint64_t *)&v311->__shared_owners_;
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }
      v314 = v218;
      v315 = *((_QWORD *)v272 + 8);
      *(_QWORD *)(v315 + 32) = v568;
      *(_QWORD *)(v315 + 40) = 0;
      v316 = *((_QWORD *)v272 + 20);
      if (v569)
      {
        v317 = (unint64_t *)&v569->__shared_owners_;
        do
          v318 = __ldxr(v317);
        while (__stxr(v318 + 1, v317));
      }
      v319 = *(std::__shared_weak_count **)(v316 + 40);
      *(_QWORD *)(v316 + 32) = v568;
      *(_QWORD *)(v316 + 40) = v569;
      if (v319)
      {
        v320 = (unint64_t *)&v319->__shared_owners_;
        do
          v321 = __ldaxr(v320);
        while (__stlxr(v321 - 1, v320));
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
          std::__shared_weak_count::__release_weak(v319);
        }
      }
      v548 = v283;
      if (v575)
      {
        v322 = v573;
        if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
        {
          v323 = (_QWORD *)*((_QWORD *)&v572 + 1);
          v324 = v574;
          v325 = BYTE1(v574);
          if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v572 + 64))();
          if (v324 && !v325)
          {
            v327 = v323[7];
            v326 = v323[8];
            if (v326 == v327)
              v327 = v323[10] - v323[9];
            if ((unint64_t)v322 < v327)
              v327 = v322;
            if (v326 <= *((_QWORD *)&v322 + 1))
              v326 = *((_QWORD *)&v322 + 1);
            if (v326 == v327)
              v326 = v327 + v323[10] - v323[9];
            v323[7] = v327;
            v323[8] = v326;
          }
        }
      }
      v328 = 0;
      v329 = v577.f32[3];
      goto LABEL_466;
    }
    if (v270 == 1)
    {
      if (!*(_BYTE *)(a6 + 64))
      {
LABEL_516:
        v13 = v557;
        goto LABEL_517;
      }
      v546 = v269;
      v271 = *(_QWORD *)(a6 + 40);
      v272 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)a5);
      md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorPipelineState,std::shared_ptr<ggl::ElevatedStrokeColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 32, v568 != 0);
      ggl::Flyover::FlyoverPipelineSetup::setState(v272, v572, *((std::__shared_weak_count **)&v572 + 1));
      v273 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
      if (*((_QWORD *)&v572 + 1))
      {
        v274 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
      v276 = (_QWORD *)*((_QWORD *)v272 + 8);
      v277 = v276[6];
      v572 = 0uLL;
      v278 = *(_QWORD *)(v277 + 8);
      *(_QWORD *)&v279 = 0;
      *((_QWORD *)&v279 + 1) = v277;
      v280 = *(_QWORD *)(v277 + 72);
      v572 = v279;
      *(_QWORD *)&v573 = 0;
      *((_QWORD *)&v573 + 1) = v278;
      v575 = v280;
      LOWORD(v574) = 1;
      v281 = v577.f32[3];
      *(float32x4_t *)v280 = v577;
      *(_DWORD *)(v280 + 48) = v14;
      *(_DWORD *)(v280 + 32) = *a8;
      *(_DWORD *)(v280 + 36) = a8[1];
      *(_DWORD *)(v280 + 40) = a8[2];
      *(_DWORD *)(v280 + 44) = a8[3];
      if (*(_BYTE *)(a6 + 64))
      {
        LODWORD(v279) = *(_DWORD *)(a6 + 56);
        if (v220 == 2)
        {
          v282 = (float32x2_t)0x3F0000003F000000;
        }
        else if (v220 == 1)
        {
          v282 = (float32x2_t)1065353216;
        }
        else
        {
          v282 = (float32x2_t)0x3F80000000000000;
        }
        v330 = vmul_n_f32(v282, v546);
        v331.i32[0] = vsub_f32(*(float32x2_t *)&v279, v330).u32[0];
        v331.i32[1] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v279, 0), v330).i32[1];
        *(float *)&v279 = *(float *)(a6 + 60) + *(float *)&v279;
        v332 = vmaxnm_f32(vdiv_f32(v331, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v279, 0)), 0);
        __asm
        {
          FMOV            V1.2S, #1.0
          FMOV            V4.2S, #-1.0
        }
        *(int8x8_t *)(v280 + 16) = vbsl_s8((int8x8_t)vcgt_f32(v332, _D1), (int8x8_t)_D1, (int8x8_t)vmla_f32(_D4, (float32x2_t)0x4000000040000000, v332));
        v276[1] = 0;
        v335 = *(_QWORD *)(a2 + 216);
        *v276 = v335;
        v336 = (_QWORD *)*((_QWORD *)v272 + 20);
        v337 = *(_QWORD *)(a2 + 224);
        if (v337)
        {
          v338 = (unint64_t *)(v337 + 8);
          do
            v339 = __ldxr(v338);
          while (__stxr(v339 + 1, v338));
        }
        v340 = (std::__shared_weak_count *)v336[1];
        *v336 = v335;
        v336[1] = v337;
        if (v340)
        {
          v341 = (unint64_t *)&v340->__shared_owners_;
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            v541 = v281;
            ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
            std::__shared_weak_count::__release_weak(v340);
            v281 = v541;
          }
        }
        v343 = *((_QWORD *)v272 + 8);
        *(_QWORD *)(v343 + 24) = 0;
        v344 = *(_QWORD *)(a2 + 232);
        *(_QWORD *)(v343 + 16) = v344;
        v345 = *((_QWORD *)v272 + 20);
        v346 = *(_QWORD *)(a2 + 240);
        if (v346)
        {
          v347 = (unint64_t *)(v346 + 8);
          do
            v348 = __ldxr(v347);
          while (__stxr(v348 + 1, v347));
        }
        v349 = *(std::__shared_weak_count **)(v345 + 24);
        *(_QWORD *)(v345 + 16) = v344;
        *(_QWORD *)(v345 + 24) = v346;
        if (v349)
        {
          v350 = (unint64_t *)&v349->__shared_owners_;
          do
            v351 = __ldaxr(v350);
          while (__stlxr(v351 - 1, v350));
          if (!v351)
          {
            v542 = v281;
            ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
            std::__shared_weak_count::__release_weak(v349);
            v281 = v542;
          }
        }
        v314 = v218;
        v352 = *((_QWORD *)v272 + 8);
        *(_QWORD *)(v352 + 32) = v568;
        *(_QWORD *)(v352 + 40) = 0;
        v353 = *((_QWORD *)v272 + 20);
        if (v569)
        {
          v354 = (unint64_t *)&v569->__shared_owners_;
          do
            v355 = __ldxr(v354);
          while (__stxr(v355 + 1, v354));
        }
        v356 = *(std::__shared_weak_count **)(v353 + 40);
        *(_QWORD *)(v353 + 32) = v568;
        *(_QWORD *)(v353 + 40) = v569;
        if (v356)
        {
          v357 = (unint64_t *)&v356->__shared_owners_;
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            v543 = v281;
            ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
            std::__shared_weak_count::__release_weak(v356);
            v281 = v543;
          }
        }
        v548 = v271;
        if (v575)
        {
          v359 = v573;
          if (*((_QWORD *)&v573 + 1) != (_QWORD)v573)
          {
            v360 = (_QWORD *)*((_QWORD *)&v572 + 1);
            v361 = v574;
            v362 = BYTE1(v574);
            if ((_QWORD)v572 && *(_BYTE *)(*((_QWORD *)&v572 + 1) + 17) != 2)
            {
              v544 = v281;
              (*(void (**)(void))(*(_QWORD *)v572 + 64))();
              v281 = v544;
            }
            if (v361 && !v362)
            {
              v364 = v360[7];
              v363 = v360[8];
              if (v363 == v364)
                v364 = v360[10] - v360[9];
              if ((unint64_t)v359 < v364)
                v364 = v359;
              if (v363 <= *((_QWORD *)&v359 + 1))
                v363 = *((_QWORD *)&v359 + 1);
              if (v363 == v364)
                v363 = v364 + v360[10] - v360[9];
              v360[7] = v364;
              v360[8] = v363;
            }
          }
        }
        v540 = 0;
        v329 = v281;
        v328 = 1;
LABEL_466:
        if (v329 >= 1.0)
        {
          v369 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a5 + 752), 3, 0, (v557[1] | v557[2]) == 0, 0, 1, v557[1], 3);
          v370 = 0;
        }
        else
        {
          v365 = *(float **)(a5 + 792);
          if (!v365)
            goto LABEL_481;
          v366 = (float *)(a5 + 792);
          do
          {
            while (v365[7] < v577.f32[0] && v365[8] < v577.f32[1] && v365[9] < v577.f32[2] && v365[10] < v329)
            {
              v365 = (float *)*((_QWORD *)v365 + 1);
              if (!v365)
                goto LABEL_476;
            }
            v366 = v365;
            v365 = *(float **)v365;
          }
          while (v365);
LABEL_476:
          if (v366 != (float *)(a5 + 792)
            && (v577.f32[0] >= v366[7] || v577.f32[1] >= v366[8] || v577.f32[2] >= v366[9] || v329 >= v366[10]))
          {
            v368 = *((unsigned __int8 *)v366 + 44);
            v367 = a5;
          }
          else
          {
LABEL_481:
            v367 = a5;
            std::__tree<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::__map_value_compare<geo::Color<float,4,(geo::ColorSpace)0>,std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>,std::less<geo::Color<float,4,(geo::ColorSpace)0>>,true>,std::allocator<std::__value_type<geo::Color<float,4,(geo::ColorSpace)0>,unsigned char>>>::__emplace_unique_key_args<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0> const&,unsigned char &>((uint64_t *)(a5 + 784), v577.f32, &v577, *(_BYTE *)(a5 + 808));
            v368 = *(unsigned __int8 *)(a5 + 808);
            *(_BYTE *)(a5 + 808) = (v368 + 1) % *(unsigned __int8 *)(a5 + 809);
          }
          v370 = v557[4] + v368;
          v369 = v367 + 512;
        }
        v371 = *(_QWORD *)(a4 + 8);
        if (v371)
        {
          v372 = (v314 << 10) | 3u;
          v373 = a4 + 8;
          do
          {
            v374 = *(_DWORD *)(v371 + 28);
            v375 = v374 < v217;
            if (v374 >= v217)
              v376 = (uint64_t *)v371;
            else
              v376 = (uint64_t *)(v371 + 8);
            if (!v375)
              v373 = v371;
            v371 = *v376;
          }
          while (*v376);
          if (v373 != a4 + 8 && v217 >= *(_DWORD *)(v373 + 28))
          {
            v377 = *(_QWORD **)(*((_QWORD *)v557 + 1) + 8);
            v378 = v377[3];
            v379 = v377[4];
            v380 = v379 - v378;
            if (v379 == v378)
              goto LABEL_502;
            v381 = 0;
            v382 = v380 >> 3;
            while (1)
            {
              v383 = *(unsigned __int8 **)(v378 + 8 * v381);
              if (*v383 == *(unsigned __int8 *)(v373 + 32))
              {
                v384 = *((_QWORD *)v383 + 1);
                v385 = v377[15];
                if (v384 < (v377[16] - v385) >> 3)
                  break;
              }
              if (++v381 >= v382)
                goto LABEL_502;
            }
            v386 = *(_QWORD *)(v385 + 8 * v384);
            if (!v386)
LABEL_502:
              v387 = 0;
            else
              v387 = *(_QWORD *)(*(_QWORD *)(v386 + 24) + 8 * *(unsigned __int8 *)(v373 + 33));
            if ((v328 & 1) != 0)
            {
              v572 = *(_OWORD *)v578;
              v573 = *(_OWORD *)&v578[16];
              v574 = *(_DWORD *)&v578[32];
              v388 = *(_QWORD **)(a5 + 736);
              v389 = v388[1];
              if (v389 == *(_QWORD *)(a5 + 744))
              {
                v388 = (_QWORD *)*v388;
                if (!v388)
                {
                  v388 = malloc_type_malloc(120 * v389 + 16, 0xB644C221uLL);
                  *v388 = 0;
                  v388[1] = 0;
                  **(_QWORD **)(a5 + 736) = v388;
                }
                *(_QWORD *)(a5 + 736) = v388;
                v389 = v388[1];
              }
              v390 = &v388[15 * v389];
              v390[2] = &off_1E42B59B0;
              v391 = v390 + 2;
              v388[1] = v389 + 1;
              v391[2] = "draped stroke";
              v391[3] = v369;
              v391[4] = v272;
              *((_DWORD *)v391 + 10) = v370;
              v391[6] = v372;
              *((_DWORD *)v391 + 14) = 1065353216;
              v392 = v574;
              v393 = v573;
              *(_OWORD *)((char *)v391 + 60) = v572;
              *((_DWORD *)v391 + 23) = v392;
              *(_OWORD *)((char *)v391 + 76) = v393;
              *((int64x2_t *)v391 + 6) = vdupq_n_s64(1uLL);
              v391[14] = 0;
              v391[8] = v548;
            }
            else
            {
              v572 = *(_OWORD *)v578;
              v573 = *(_OWORD *)&v578[16];
              v574 = *(_DWORD *)&v578[32];
              v394 = *(_QWORD **)(a5 + 736);
              v395 = v394[1];
              if (v395 == *(_QWORD *)(a5 + 744))
              {
                v394 = (_QWORD *)*v394;
                v396 = v540;
                if (!v394)
                {
                  v394 = malloc_type_malloc(120 * v395 + 16, 0xB644C221uLL);
                  *v394 = 0;
                  v394[1] = 0;
                  **(_QWORD **)(a5 + 736) = v394;
                }
                *(_QWORD *)(a5 + 736) = v394;
                v395 = v394[1];
              }
              else
              {
                v396 = v540;
              }
              v397 = &v394[15 * v395];
              v397[2] = &off_1E42B59B0;
              v391 = v397 + 2;
              v394[1] = v395 + 1;
              v391[2] = "draped stroke";
              v391[3] = v369;
              v391[4] = v272;
              *((_DWORD *)v391 + 10) = v370;
              v391[6] = v372;
              *((_DWORD *)v391 + 14) = 1065353216;
              *((_DWORD *)v391 + 15) = v572;
              *((int64x2_t *)v391 + 6) = vdupq_n_s64(1uLL);
              v391[14] = 0;
              v391[8] = v548;
              *((_BYTE *)v391 + 72) = v396;
              v398 = v576[0];
              v391[10] = *(_QWORD *)((char *)v576 + 7);
              v391[11] = 0;
              *(_QWORD *)((char *)v391 + 73) = v398;
              v391[12] = 1;
            }
            ggl::CommandBuffer::pushRenderItem(v387, (ggl::RenderItem *)v391);
          }
        }
        goto LABEL_516;
      }
LABEL_694:
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_695;
    }
LABEL_693:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_695:
    __break(1u);
    return;
  }
LABEL_517:
  v399 = *a7;
  if (!*a7)
  {
    v401 = (_QWORD *)a2;
    if (!*v13)
      goto LABEL_687;
    v405 = 0;
    v406 = 0;
    goto LABEL_589;
  }
  v400 = (std::__shared_weak_count *)a7[1];
  *(_QWORD *)v578 = v399;
  *(_QWORD *)&v578[8] = v400;
  v401 = (_QWORD *)a2;
  if (v400)
  {
    v402 = (unint64_t *)&v400->__shared_owners_;
    do
      v403 = __ldxr(v402);
    while (__stxr(v403 + 1, v402));
    *((_QWORD *)&v572 + 1) = v400;
    do
      v404 = __ldxr(v402);
    while (__stxr(v404 + 1, v402));
  }
  else
  {
    *((_QWORD *)&v572 + 1) = 0;
  }
  v573 = 0uLL;
  *(_QWORD *)&v572 = v399;
  LOBYTE(v574) = 0;
  v407 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v399 + 48))(v399, &v573);
  LOBYTE(v574) = v407;
  if (v400)
  {
    v408 = (unint64_t *)&v400->__shared_owners_;
    do
      v409 = __ldaxr(v408);
    while (__stlxr(v409 - 1, v408));
    if (!v409)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
    v407 = v574;
  }
  if (!v407)
  {
    v406 = 0;
    v405 = 0;
    v558 = 0u;
    goto LABEL_588;
  }
  v410 = *(_QWORD *)(v572 + 24);
  if ((int)v22 >= 0x17)
    v411 = 23;
  else
    v411 = (int)v22;
  v412 = *(float **)v410;
  if (!*(_QWORD *)v410
    || (v413 = *v412, LODWORD(v412) = *v412 == 1.0, !*(_BYTE *)(v410 + 10))
    || (v413 != 0.0 ? (v414 = v413 == 1.0) : (v414 = 1), v414))
  {
    v415 = *(unsigned __int8 *)(v410 + v412 + 11);
    v413 = 0.0;
    if (v415 != 2)
    {
      if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v572 + 24), 0x5Bu, v411, v415, 0))goto LABEL_548;
LABEL_561:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
      goto LABEL_687;
    }
  }
  v578[0] = 1;
  v577.i8[0] = 1;
  v416 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v410, 0x5Bu, v411, 0, v578);
  v417 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v410, 0x5Bu, v411, 1, &v577);
  if (v413 < 1.0)
    v417 = v416;
  if (!v417)
    goto LABEL_561;
LABEL_548:
  v418 = *(_QWORD *)(v572 + 24);
  v419 = *(float **)v418;
  if (*(_QWORD *)v418
    && (v420 = *v419, LODWORD(v419) = *v419 == 1.0, *(_BYTE *)(v418 + 10))
    && (v420 != 0.0 ? (v421 = v420 == 1.0) : (v421 = 1), !v421)
    || (v422 = *(unsigned __int8 *)(v418 + v419 + 11), v420 = 0.0, v422 == 2))
  {
    v578[0] = 1;
    v577.i8[0] = 1;
    v423 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v418, 0x68u, v411, 0, v578);
    v424 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v418, 0x68u, v411, 1u, &v577);
    if (v420 >= 1.0)
      v405 = v424;
    else
      v405 = v423;
  }
  else
  {
    v405 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x68u, v411, v422, 0);
  }
  v425 = *(_QWORD *)(v572 + 24);
  v426 = *(float **)v425;
  if (*(_QWORD *)v425
    && (v427 = *v426, LODWORD(v426) = *v426 == 1.0, *(_BYTE *)(v425 + 10))
    && (v427 != 0.0 ? (v428 = v427 == 1.0) : (v428 = 1), !v428)
    || (v429 = *(unsigned __int8 *)(v425 + v426 + 11), v427 = 0.0, v429 == 2))
  {
    v578[0] = 1;
    v577.i8[0] = 1;
    v430 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v425, 0x6Cu, 0, v578);
    v431 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v425, 0x6Cu, 1u, &v577);
    if (v427 >= 1.0)
      v432 = (_BYTE *)v431;
    else
      v432 = (_BYTE *)v430;
    if (*v432)
      goto LABEL_575;
LABEL_577:
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Cu, v411, 2u, 0);
    goto LABEL_578;
  }
  if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v572 + 24), 0x6Cu, v429, 0))
    goto LABEL_577;
LABEL_575:
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v578, *(_QWORD *)(v572 + 24), 0x5Cu, 2u, fminf(fmaxf(v22, 0.0), 23.0));
LABEL_578:
  v433 = *(uint16x4_t *)v578;
  v434 = *(_QWORD *)(v572 + 24);
  v435 = *(float **)v434;
  if (*(_QWORD *)v434
    && (v436 = *v435, LODWORD(v435) = *v435 == 1.0, *(_BYTE *)(v434 + 10))
    && v436 != 0.0
    && v436 != 1.0
    || (v437 = *(unsigned __int8 *)(v434 + v435 + 11), v436 = 0.0, v437 == 2))
  {
    v578[0] = 1;
    v577.i8[0] = 1;
    v438 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v434, 0x8Au, v411, 0, v578);
    v439 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v434, 0x8Au, v411, 1u, &v577);
    if (v436 < 1.0)
      LOBYTE(v439) = v438;
  }
  else
  {
    v439 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v572 + 24), 0x8Au, v411, v437, 0);
  }
  v558 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(v433)), (float32x4_t)vdupq_n_s32(0x37800080u));
  v406 = v439 - 1 < 2;
LABEL_588:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v572);
  if (*v13)
  {
LABEL_589:
    a11.n128_u64[0] = 0x3F80000000000000;
    a10.i64[0] = 0x3F80000000000000;
    goto LABEL_590;
  }
  a11 = (__n128)v558;
  if (*(float *)&v558.i32[3] < 0.0039062)
    goto LABEL_687;
  a10 = vextq_s8(v558, v558, 8uLL);
LABEL_590:
  memset(&v578[4], 0, 32);
  v440 = *(_DWORD *)(a6 + 88);
  if (!v440)
  {
    if (!*(_BYTE *)(a6 + 40))
      goto LABEL_687;
    v566 = (__n128)a10;
    v560 = a11;
    v441 = *(_QWORD *)(a6 + 8);
    v476 = *(_BYTE *)(a6 + 24);
    v577.i64[0] = *(_QWORD *)(a6 + 25);
    *(uint64_t *)((char *)v577.i64 + 7) = *(_QWORD *)(a6 + 32);
    v442 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 24));
    md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedFillColorWithDistancePipelineState,std::shared_ptr<ggl::ElevatedFillColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 392, v568 != 0);
    ggl::Flyover::FlyoverPipelineSetup::setState(v442, v572, *((std::__shared_weak_count **)&v572 + 1));
    v478 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
    *(_QWORD *)&v479 = v560.n128_u64[0];
    v480 = v566.n128_u64[0];
    if (*((_QWORD *)&v572 + 1))
    {
      v481 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
      do
        v482 = __ldaxr(v481);
      while (__stlxr(v482 - 1, v481));
      if (!v482)
      {
        ((void (*)(std::__shared_weak_count *, __n128, __n128))v478->__on_zero_shared)(v478, v560, v566);
        std::__shared_weak_count::__release_weak(v478);
        v480 = v566.n128_u64[0];
        *(_QWORD *)&v479 = v560.n128_u64[0];
      }
    }
    v483 = (_QWORD *)*((_QWORD *)v442 + 8);
    v449 = (_QWORD *)v483[4];
    v450 = v449[1];
    v484 = v449[9];
    *((_QWORD *)&v479 + 1) = v480;
    *(_OWORD *)v484 = v479;
    *(_DWORD *)(v484 + 16) = *a8;
    *(_DWORD *)(v484 + 20) = a8[1];
    *(_DWORD *)(v484 + 24) = a8[2];
    *(_DWORD *)(v484 + 28) = a8[3];
    v483[1] = 0;
    v485 = v401[27];
    *v483 = v485;
    v486 = (_QWORD *)*((_QWORD *)v442 + 20);
    v487 = v401[28];
    if (v487)
    {
      v488 = (unint64_t *)(v487 + 8);
      do
        v489 = __ldxr(v488);
      while (__stxr(v489 + 1, v488));
    }
    v490 = (std::__shared_weak_count *)v486[1];
    *v486 = v485;
    v486[1] = v487;
    if (v490)
    {
      v491 = (unint64_t *)&v490->__shared_owners_;
      do
        v492 = __ldaxr(v491);
      while (__stlxr(v492 - 1, v491));
      if (!v492)
      {
        ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
        std::__shared_weak_count::__release_weak(v490);
      }
    }
    v493 = *((_QWORD *)v442 + 8);
    *(_QWORD *)(v493 + 24) = 0;
    v494 = v401[29];
    *(_QWORD *)(v493 + 16) = v494;
    v495 = *((_QWORD *)v442 + 20);
    v496 = v401[30];
    if (v496)
    {
      v497 = (unint64_t *)(v496 + 8);
      do
        v498 = __ldxr(v497);
      while (__stxr(v498 + 1, v497));
    }
    v499 = *(std::__shared_weak_count **)(v495 + 24);
    *(_QWORD *)(v495 + 16) = v494;
    *(_QWORD *)(v495 + 24) = v496;
    if (v499)
    {
      v500 = (unint64_t *)&v499->__shared_owners_;
      do
        v501 = __ldaxr(v500);
      while (__stlxr(v501 - 1, v500));
      if (!v501)
      {
        ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
        std::__shared_weak_count::__release_weak(v499);
      }
    }
    v502 = *((_QWORD *)v442 + 8);
    *(_QWORD *)(v502 + 48) = v568;
    *(_QWORD *)(v502 + 56) = 0;
    v503 = *((_QWORD *)v442 + 20);
    if (v569)
    {
      v504 = (unint64_t *)&v569->__shared_owners_;
      do
        v505 = __ldxr(v504);
      while (__stxr(v505 + 1, v504));
    }
    v473 = *(std::__shared_weak_count **)(v503 + 56);
    *(_QWORD *)(v503 + 48) = v568;
    *(_QWORD *)(v503 + 56) = v569;
    if (v473)
    {
      v506 = (unint64_t *)&v473->__shared_owners_;
      do
        v507 = __ldaxr(v506);
      while (__stlxr(v507 - 1, v506));
      v477 = 0;
      if (!v507)
        goto LABEL_651;
    }
    else
    {
      v477 = 0;
    }
    goto LABEL_656;
  }
  if (v440 != 1)
    goto LABEL_693;
  v441 = *(_QWORD *)(a6 + 72);
  if (!v441)
    goto LABEL_687;
  v565 = (__n128)a10;
  v559 = a11;
  v442 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a5 + 16));
  md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedFillColorPipelineState,std::shared_ptr<ggl::ElevatedFillNoWidthClipColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v572, a5 + 272, v568 != 0);
  ggl::Flyover::FlyoverPipelineSetup::setState(v442, v572, *((std::__shared_weak_count **)&v572 + 1));
  v443 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
  v444 = v559.n128_u64[0];
  v445 = v565.n128_u64[0];
  if (*((_QWORD *)&v572 + 1))
  {
    v446 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
    do
      v447 = __ldaxr(v446);
    while (__stlxr(v447 - 1, v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v443->__on_zero_shared)(v443, v559, v565);
      std::__shared_weak_count::__release_weak(v443);
      v445 = v565.n128_u64[0];
      v444 = v559.n128_u64[0];
    }
  }
  v448 = (_QWORD *)*((_QWORD *)v442 + 8);
  v449 = (_QWORD *)v448[4];
  v450 = v449[1];
  v451 = v449[9];
  *(_QWORD *)v451 = v444;
  *(_QWORD *)(v451 + 8) = v445;
  *(_DWORD *)(v451 + 32) = v14;
  *(_DWORD *)(v451 + 16) = *a8;
  *(_DWORD *)(v451 + 20) = a8[1];
  *(_DWORD *)(v451 + 24) = a8[2];
  *(_DWORD *)(v451 + 28) = a8[3];
  v448[1] = 0;
  v452 = v401[27];
  *v448 = v452;
  v453 = (_QWORD *)*((_QWORD *)v442 + 20);
  v454 = v401[28];
  if (v454)
  {
    v455 = (unint64_t *)(v454 + 8);
    do
      v456 = __ldxr(v455);
    while (__stxr(v456 + 1, v455));
  }
  v457 = (std::__shared_weak_count *)v453[1];
  *v453 = v452;
  v453[1] = v454;
  if (v457)
  {
    v458 = (unint64_t *)&v457->__shared_owners_;
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
      std::__shared_weak_count::__release_weak(v457);
    }
  }
  v460 = *((_QWORD *)v442 + 8);
  *(_QWORD *)(v460 + 24) = 0;
  v461 = v401[29];
  *(_QWORD *)(v460 + 16) = v461;
  v462 = *((_QWORD *)v442 + 20);
  v463 = v401[30];
  if (v463)
  {
    v464 = (unint64_t *)(v463 + 8);
    do
      v465 = __ldxr(v464);
    while (__stxr(v465 + 1, v464));
  }
  v466 = *(std::__shared_weak_count **)(v462 + 24);
  *(_QWORD *)(v462 + 16) = v461;
  *(_QWORD *)(v462 + 24) = v463;
  if (v466)
  {
    v467 = (unint64_t *)&v466->__shared_owners_;
    do
      v468 = __ldaxr(v467);
    while (__stlxr(v468 - 1, v467));
    if (!v468)
    {
      ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
      std::__shared_weak_count::__release_weak(v466);
    }
  }
  v469 = *((_QWORD *)v442 + 8);
  *(_QWORD *)(v469 + 48) = v568;
  *(_QWORD *)(v469 + 56) = 0;
  v470 = *((_QWORD *)v442 + 20);
  if (v569)
  {
    v471 = (unint64_t *)&v569->__shared_owners_;
    do
      v472 = __ldxr(v471);
    while (__stxr(v472 + 1, v471));
  }
  v473 = *(std::__shared_weak_count **)(v470 + 56);
  *(_QWORD *)(v470 + 48) = v568;
  *(_QWORD *)(v470 + 56) = v569;
  if (v473)
  {
    v474 = (unint64_t *)&v473->__shared_owners_;
    do
      v475 = __ldaxr(v474);
    while (__stlxr(v475 - 1, v474));
    v476 = 0;
    v477 = 1;
    if (!v475)
    {
LABEL_651:
      ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
      std::__shared_weak_count::__release_weak(v473);
    }
  }
  else
  {
    v476 = 0;
    v477 = 1;
  }
LABEL_656:
  v508 = v449[8];
  if (v508 <= v450)
    v508 = v450;
  v449[7] = 0;
  v449[8] = v508;
  v509 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a5 + 752), 3, 0, *v13 == 0, 0, 1, *v13, 3);
  v510 = *(_QWORD *)(a4 + 8);
  v563 = a4 + 8;
  if (!v510)
    goto LABEL_687;
  v511 = v509;
  v512 = (v405 << 10);
  v513 = v563;
  do
  {
    v514 = *(_DWORD *)(v510 + 28);
    v515 = v514 < v406;
    if (v514 >= v406)
      v516 = (uint64_t *)v510;
    else
      v516 = (uint64_t *)(v510 + 8);
    if (!v515)
      v513 = v510;
    v510 = *v516;
  }
  while (*v516);
  if (v513 == v563 || v406 < *(_DWORD *)(v513 + 28))
    goto LABEL_687;
  v517 = *(_QWORD **)(*((_QWORD *)v13 + 1) + 8);
  v518 = v517[3];
  v519 = v517[4];
  v520 = v519 - v518;
  if (v519 == v518)
    goto LABEL_680;
  v521 = 0;
  v522 = v520 >> 3;
  while (1)
  {
    v523 = *(unsigned __int8 **)(v518 + 8 * v521);
    if (*v523 == *(unsigned __int8 *)(v513 + 32))
    {
      v524 = *((_QWORD *)v523 + 1);
      v525 = v517[15];
      if (v524 < (v517[16] - v525) >> 3)
        break;
    }
    if (++v521 >= v522)
      goto LABEL_680;
  }
  v526 = *(_QWORD *)(v525 + 8 * v524);
  if (!v526)
  {
LABEL_680:
    v527 = 0;
    if ((v477 & 1) == 0)
      goto LABEL_675;
LABEL_681:
    v572 = *(_OWORD *)v578;
    v573 = *(_OWORD *)&v578[16];
    v574 = *(_DWORD *)&v578[32];
    v533 = *(_QWORD **)(a5 + 736);
    v534 = v533[1];
    if (v534 == *(_QWORD *)(a5 + 744))
    {
      v533 = (_QWORD *)*v533;
      if (!v533)
      {
        v533 = malloc_type_malloc(120 * v534 + 16, 0xB644C221uLL);
        *v533 = 0;
        v533[1] = 0;
        **(_QWORD **)(a5 + 736) = v533;
      }
      *(_QWORD *)(a5 + 736) = v533;
      v534 = v533[1];
    }
    v535 = &v533[15 * v534];
    v535[2] = &off_1E42B59B0;
    v531 = v535 + 2;
    v533[1] = v534 + 1;
    v531[2] = "draped fill";
    v531[3] = v511;
    v531[4] = v442;
    v531[5] = 0;
    v531[6] = v512;
    *((_DWORD *)v531 + 14) = 1065353216;
    v536 = v574;
    v537 = v573;
    *(_OWORD *)((char *)v531 + 60) = v572;
    *((_DWORD *)v531 + 23) = v536;
    *(_OWORD *)((char *)v531 + 76) = v537;
    *((int64x2_t *)v531 + 6) = vdupq_n_s64(1uLL);
    v531[14] = 0;
    v531[8] = v441;
    goto LABEL_686;
  }
  v527 = *(_QWORD *)(*(_QWORD *)(v526 + 24) + 8 * *(unsigned __int8 *)(v513 + 33));
  if ((v477 & 1) != 0)
    goto LABEL_681;
LABEL_675:
  v572 = *(_OWORD *)v578;
  v573 = *(_OWORD *)&v578[16];
  v574 = *(_DWORD *)&v578[32];
  v528 = *(_QWORD **)(a5 + 736);
  v529 = v528[1];
  if (v529 == *(_QWORD *)(a5 + 744))
  {
    v528 = (_QWORD *)*v528;
    if (!v528)
    {
      v528 = malloc_type_malloc(120 * v529 + 16, 0xB644C221uLL);
      *v528 = 0;
      v528[1] = 0;
      **(_QWORD **)(a5 + 736) = v528;
    }
    *(_QWORD *)(a5 + 736) = v528;
    v529 = v528[1];
  }
  v530 = &v528[15 * v529];
  v530[2] = &off_1E42B59B0;
  v531 = v530 + 2;
  v528[1] = v529 + 1;
  v531[2] = "draped fill";
  v531[3] = v511;
  v531[4] = v442;
  v531[5] = 0;
  v531[6] = v512;
  *((_DWORD *)v531 + 14) = 1065353216;
  *((_DWORD *)v531 + 15) = v572;
  *((int64x2_t *)v531 + 6) = vdupq_n_s64(1uLL);
  v531[14] = 0;
  v531[8] = v441;
  *((_BYTE *)v531 + 72) = v476;
  v532 = v577.i64[0];
  v531[10] = *(uint64_t *)((char *)v577.i64 + 7);
  v531[11] = 0;
  *(_QWORD *)((char *)v531 + 73) = v532;
  v531[12] = 1;
LABEL_686:
  ggl::CommandBuffer::pushRenderItem(v527, (ggl::RenderItem *)v531);
LABEL_687:
  if (v569)
  {
    v538 = (unint64_t *)&v569->__shared_owners_;
    do
      v539 = __ldaxr(v538);
    while (__stlxr(v539 - 1, v538));
    if (!v539)
    {
      ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
      std::__shared_weak_count::__release_weak(v569);
    }
  }
}

void sub_19F7BE9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

md::ElevatedPolygonContext *md::ElevatedPolygonContext::ElevatedPolygonContext(md::ElevatedPolygonContext *this, const md::LayoutContext *a2, char a3, const md::StandardPassList *a4, float a5)
{
  char *v8;
  void *v9;
  char v10;
  char v11;
  _QWORD *v12;
  int8x8_t v13;
  uint8x8_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)this = 0x1000000;
  *((_QWORD *)this + 1) = a4;
  *((_BYTE *)this + 24) = 0;
  v8 = (char *)this + 24;
  *((_BYTE *)this + 32) = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "daVinciWireframeEnabled") & 1) != 0)
    v10 = 1;
  else
    v10 = objc_msgSend(v9, "daVinciTintBandFillWireframeEnabled");
  *(_BYTE *)this = v10;
  if ((objc_msgSend(v9, "daVinciWireframeEnabled") & 1) != 0)
    v11 = 1;
  else
    v11 = objc_msgSend(v9, "daVinciTintBandStrokeWireframeEnabled");
  *((_BYTE *)this + 1) = v11;
  *((_BYTE *)this + 2) = objc_msgSend(v9, "daVinciTintBandStrokeDistanceDebugEnabled");
  *((_BYTE *)this + 3) = objc_msgSend(v9, "enableTileClipping");
  *((_BYTE *)this + 4) = a3;
  *((_DWORD *)this + 4) = 0;
  v12 = (_QWORD *)*((_QWORD *)a2 + 1);
  v13 = (int8x8_t)v12[1];
  if (!*(_QWORD *)&v13)
    goto LABEL_31;
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v13 <= 0x401D4CCE847AB1D1uLL)
      v15 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & 0x401D4CCE847AB1D1;
  }
  v16 = *(_QWORD **)(*v12 + 8 * v15);
  if (!v16)
    goto LABEL_31;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_31;
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v13 - 1;
    while (1)
    {
      v20 = v17[1];
      if (v20 == 0x401D4CCE847AB1D1)
      {
        if (v17[2] == 0x401D4CCE847AB1D1)
          goto LABEL_28;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_31;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v19 = v17[1];
    if (v19 == 0x401D4CCE847AB1D1)
      break;
    if (v19 >= *(_QWORD *)&v13)
      v19 %= *(_QWORD *)&v13;
    if (v19 != v15)
      goto LABEL_31;
LABEL_17:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_31;
  }
  if (v17[2] != 0x401D4CCE847AB1D1)
    goto LABEL_17;
LABEL_28:
  v21 = v17[5];
  if (*(_QWORD *)(v21 + 8) != 0x401D4CCE847AB1D1 || (v22 = *(_QWORD *)(v21 + 32)) == 0)
  {
LABEL_31:
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 32) = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v22 + 8);
  v8[8] = *(_BYTE *)(v22 + 16);
  *(_QWORD *)v8 = v23;
LABEL_32:

  return this;
}

void sub_19F7BEDB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ARDebugDrawIntersectionsLogic::~ARDebugDrawIntersectionsLogic(md::ARDebugDrawIntersectionsLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARDebugDrawIntersectionsContext]";
  v4[3] = 35;
  v4[4] = result;
  *v4 = &off_1E42B15B8;
  v4[1] = 0xA77E48F1AFA034A1;
  *a2 = v4;
  return result;
}

void sub_19F7BEEE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA77E48F1AFA034A1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v4 <= 0x6DBE9777D7FEDAAEuLL)
      v6 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x6DBE9777D7FEDAAELL)
      {
        if (v8[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x6DBE9777D7FEDAAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x6DBE9777D7FEDAAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA77E48F1AFA034A1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v4 <= 0x6DBE9777D7FEDAAEuLL)
      v6 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x6DBE9777D7FEDAAELL)
      {
        if (v8[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x6DBE9777D7FEDAAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x6DBE9777D7FEDAAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA77E48F1AFA034A1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v4 <= 0x6DBE9777D7FEDAAEuLL)
      v6 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x6DBE9777D7FEDAAELL)
      {
        if (v8[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x6DBE9777D7FEDAAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x6DBE9777D7FEDAAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA77E48F1AFA034A1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v4 <= 0x6DBE9777D7FEDAAEuLL)
      v6 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x6DBE9777D7FEDAAELL)
      {
        if (v8[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x6DBE9777D7FEDAAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x6DBE9777D7FEDAAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xA77E48F1AFA034A1 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v5 <= 0x6DBE9777D7FEDAAEuLL)
      v7 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x6DBE9777D7FEDAAELL)
      {
        if (v9[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x6DBE9777D7FEDAAELL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x6DBE9777D7FEDAAELL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARDebugDrawIntersectionsLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _BYTE v113[2];
  int v114;
  _BYTE v115[2];
  int v116;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = (_QWORD *)gdc::Registry::storage<arComponents::DidIntersectFrustum>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<arComponents::LocalBounds>(v2);
  v5 = gdc::Registry::storage<arComponents::MapTileDataComponent>(v2);
  v6 = (_QWORD *)v5;
  v7 = v5 + 32;
  v9 = v3[7];
  v8 = v3[8];
  if (v4[8] - v4[7] >= (unint64_t)(v8 - v9))
    v10 = v3 + 4;
  else
    v10 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= v10[4] - v10[3])
    v11 = v10;
  else
    v11 = (_QWORD *)(v5 + 32);
  if (v3 + 4 == v11 && v9 != v8)
  {
    do
    {
      v22 = *(unsigned int *)(v9 + 4);
      v23 = v22 >> 7;
      v24 = v4[4];
      if (v22 >> 7 < (v4[5] - v24) >> 3)
      {
        v25 = *(_QWORD *)(v24 + 8 * v23);
        if (v25)
        {
          v26 = *(unsigned __int16 *)(v25 + 2 * (v22 & 0x7F));
          v28 = v4[7];
          v27 = v4[8];
          if (v26 < (v27 - v28) >> 3)
          {
            v29 = v28 + 8 * v26;
            if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
            {
              v31 = v6[4];
              if (v23 < (v6[5] - v31) >> 3)
              {
                v32 = *(_QWORD *)(v31 + 8 * v23);
                if (v32)
                {
                  v33 = *(unsigned __int16 *)(v32 + 2 * (v22 & 0x7F));
                  v35 = v6[7];
                  v34 = v6[8];
                  if (v33 < (v34 - v35) >> 3)
                  {
                    v36 = v35 + 8 * v33;
                    if (v36 != v34 && *(_DWORD *)(v36 + 4) == (_DWORD)v22)
                      _ZZN2md29ARDebugDrawIntersectionsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_25ARWorldIntersectorContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_31ARDebugDrawIntersectionsContextEENK3__0clENS5_6EntityERN12arComponents11LocalBoundsERNSI_20MapTileDataComponentE(a1, *(_QWORD *)v9);
                  }
                }
              }
            }
          }
        }
      }
      v9 += 8;
    }
    while (v9 != v8);
  }
  if (v4 + 4 == v11)
  {
    v57 = v4[7];
    v58 = v4[8];
    while (v57 != v58)
    {
      v59 = *(unsigned int *)(v57 + 4);
      v60 = v59 >> 7;
      v61 = v3[4];
      if (v59 >> 7 < (v3[5] - v61) >> 3)
      {
        v62 = *(_QWORD *)(v61 + 8 * v60);
        if (v62)
        {
          v63 = *(unsigned __int16 *)(v62 + 2 * (v59 & 0x7F));
          v65 = v3[7];
          v64 = v3[8];
          if (v63 < (v64 - v65) >> 3)
          {
            v66 = v65 + 8 * v63;
            if (v66 != v64 && *(_DWORD *)(v66 + 4) == (_DWORD)v59)
            {
              v68 = v6[4];
              if (v60 < (v6[5] - v68) >> 3)
              {
                v69 = *(_QWORD *)(v68 + 8 * v60);
                if (v69)
                {
                  v70 = *(unsigned __int16 *)(v69 + 2 * (v59 & 0x7F));
                  v72 = v6[7];
                  v71 = v6[8];
                  if (v70 < (v71 - v72) >> 3)
                  {
                    v73 = v72 + 8 * v70;
                    if (v73 != v71 && *(_DWORD *)(v73 + 4) == (_DWORD)v59)
                      _ZZN2md29ARDebugDrawIntersectionsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_25ARWorldIntersectorContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_31ARDebugDrawIntersectionsContextEENK3__0clENS5_6EntityERN12arComponents11LocalBoundsERNSI_20MapTileDataComponentE(a1, *(_QWORD *)v57);
                  }
                }
              }
            }
          }
        }
      }
      v57 += 8;
    }
  }
  if ((_QWORD *)v7 == v11)
  {
    v76 = v6[7];
    v75 = v6[8];
    while (v76 != v75)
    {
      v77 = *(unsigned int *)(v76 + 4);
      v78 = v77 >> 7;
      v79 = v3[4];
      if (v77 >> 7 < (v3[5] - v79) >> 3)
      {
        v80 = *(_QWORD *)(v79 + 8 * v78);
        if (v80)
        {
          v81 = *(unsigned __int16 *)(v80 + 2 * (v77 & 0x7F));
          v83 = v3[7];
          v82 = v3[8];
          if (v81 < (v82 - v83) >> 3)
          {
            v84 = v83 + 8 * v81;
            if (v84 != v82 && *(_DWORD *)(v84 + 4) == (_DWORD)v77)
            {
              v86 = v4[4];
              if (v78 < (v4[5] - v86) >> 3)
              {
                v87 = *(_QWORD *)(v86 + 8 * v78);
                if (v87)
                {
                  v88 = *(unsigned __int16 *)(v87 + 2 * (v77 & 0x7F));
                  v90 = v4[7];
                  v89 = v4[8];
                  if (v88 < (v89 - v90) >> 3)
                  {
                    v91 = v90 + 8 * v88;
                    if (v91 != v89 && *(_DWORD *)(v91 + 4) == (_DWORD)v77)
                      _ZZN2md29ARDebugDrawIntersectionsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_25ARWorldIntersectorContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_31ARDebugDrawIntersectionsContextEENK3__0clENS5_6EntityERN12arComponents11LocalBoundsERNSI_20MapTileDataComponentE(a1, *(_QWORD *)v76);
                  }
                }
              }
            }
          }
        }
      }
      v76 += 8;
    }
  }
  v13 = *(_QWORD *)(a1 + 120);
  v14 = (_QWORD *)gdc::Registry::storage<arComponents::DidIntersectFrustum>(v13);
  v15 = gdc::Registry::storage<arComponents::WorldBounds>(v13);
  v16 = (_QWORD *)v15;
  v17 = v15 + 32;
  v19 = v14[7];
  v18 = v14[8];
  if (*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56) >= (unint64_t)(v18 - v19))
    v20 = v14 + 4;
  else
    v20 = (_QWORD *)(v15 + 32);
  if (v14 + 4 == v20 && v19 != v18)
  {
    do
    {
      v42 = *(unsigned int *)(v19 + 4);
      v43 = v16[4];
      if (v42 >> 7 >= (v16[5] - v43) >> 3)
        goto LABEL_45;
      v44 = *(_QWORD *)(v43 + 8 * (v42 >> 7));
      if (!v44)
        goto LABEL_45;
      v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
      v47 = v16[7];
      v46 = v16[8];
      if (v45 >= (v46 - v47) >> 3)
        goto LABEL_45;
      v48 = v47 + 8 * v45;
      if (v48 == v46 || *(_DWORD *)(v48 + 4) != (_DWORD)v42)
        goto LABEL_45;
      v50 = *(_QWORD *)v19;
      v51 = *(_QWORD *)v19 >> 39;
      v52 = (_QWORD *)gdc::Registry::storage<arComponents::DidIntersectRaycast>(*(_QWORD *)(a1 + 120));
      v53 = v52[4];
      if (v51 < (v52[5] - v53) >> 3 && (v54 = *(_QWORD *)(v53 + 8 * v51)) != 0)
      {
        v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v50) & 0x7F));
        v56 = v52[7];
        v38 = v52[8];
        if (v55 < (v38 - v56) >> 3)
        {
          v39 = v56 + 8 * v55;
          if (*(_DWORD *)(v39 + 4) != HIDWORD(v50))
            v39 = v52[8];
          goto LABEL_44;
        }
      }
      else
      {
        v38 = v52[8];
      }
      v39 = v38;
LABEL_44:
      v40 = *(_QWORD *)(a1 + 120);
      v113[0] = 0;
      v113[1] = v39 == v38;
      v114 = -16776961;
      v41 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v40);
      gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(v41, v50, (uint64_t)v113);
LABEL_45:
      v19 += 8;
    }
    while (v19 != v18);
  }
  if ((_QWORD *)v17 == v20)
  {
    v93 = v16[7];
    for (i = v16[8]; v93 != i; v93 += 8)
    {
      v99 = *(unsigned int *)(v93 + 4);
      v100 = v14[4];
      if (v99 >> 7 >= (v14[5] - v100) >> 3)
        continue;
      v101 = *(_QWORD *)(v100 + 8 * (v99 >> 7));
      if (!v101)
        continue;
      v102 = *(unsigned __int16 *)(v101 + 2 * (v99 & 0x7F));
      v104 = v14[7];
      v103 = v14[8];
      if (v102 >= (v103 - v104) >> 3)
        continue;
      v105 = v104 + 8 * v102;
      if (v105 == v103 || *(_DWORD *)(v105 + 4) != (_DWORD)v99)
        continue;
      v107 = *(_QWORD *)v93;
      v108 = (_QWORD *)gdc::Registry::storage<arComponents::DidIntersectRaycast>(*(_QWORD *)(a1 + 120));
      v109 = v108[4];
      if (v107 >> 39 < (v108[5] - v109) >> 3 && (v110 = *(_QWORD *)(v109 + 8 * (v107 >> 39))) != 0)
      {
        v111 = *(unsigned __int16 *)(v110 + 2 * (HIDWORD(v107) & 0x7F));
        v112 = v108[7];
        v95 = v108[8];
        if (v111 < (v95 - v112) >> 3)
        {
          v96 = v112 + 8 * v111;
          if (*(_DWORD *)(v96 + 4) != HIDWORD(v107))
            v96 = v108[8];
          goto LABEL_104;
        }
      }
      else
      {
        v95 = v108[8];
      }
      v96 = v95;
LABEL_104:
      v97 = *(_QWORD *)(a1 + 120);
      v115[0] = 0;
      v115[1] = v96 == v95;
      v116 = -16776961;
      v98 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v97);
      gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(v98, v107, (uint64_t)v115);
    }
  }
}

void md::Logic<md::ARDebugDrawIntersectionsLogic,md::ARDebugDrawIntersectionsContext,md::LogicDependencies<gdc::TypeList<md::ARWorldIntersectorContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::DidIntersectFrustum>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x410D1776E02BD50ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x410D1776E02BD50ALL;
      if (*(_QWORD *)&v3 <= 0x410D1776E02BD50AuLL)
        v5 = 0x410D1776E02BD50AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x410D1776E02BD50ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x410D1776E02BD50ALL)
            {
              if (v7[2] == 0x410D1776E02BD50ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x410D1776E02BD50ALL)
          {
            if (v7[2] == 0x410D1776E02BD50ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::DidIntersectFrustum]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1E18;
  *(_QWORD *)(v11 + 8) = 0x410D1776E02BD50ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x410D1776E02BD50AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x410D1776E02BD50ALL;
  v15[1] = "arComponents::DidIntersectFrustum]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0x410D1776E02BD50ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7BFDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md29ARDebugDrawIntersectionsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_25ARWorldIntersectorContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_31ARDebugDrawIntersectionsContextEENK3__0clENS5_6EntityERN12arComponents11LocalBoundsERNSI_20MapTileDataComponentE(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  __int16 *v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  v4 = (_QWORD *)gdc::Registry::storage<arComponents::DidIntersectRaycast>(*(_QWORD *)(a1 + 120));
  v5 = v4[4];
  if (a2 >> 39 < (v4[5] - v5) >> 3
    && (v6 = *(_QWORD *)(v5 + 8 * (a2 >> 39))) != 0
    && (v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F)), v9 = v4[7], v8 = v4[8], v7 < (v8 - v9) >> 3)
    && ((v10 = v9 + 8 * v7, v10 != v8) ? (v11 = *(_DWORD *)(v10 + 4) == HIDWORD(a2)) : (v11 = 0), v11))
  {
    v15 = *(_QWORD *)(a1 + 120);
    v18 = 0;
    v19 = -16776961;
    v13 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v15);
    v14 = &v18;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 120);
    v16 = 257;
    v17 = -256;
    v13 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v12);
    v14 = &v16;
  }
  gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(v13, a2, (uint64_t)v14);
}

uint64_t gdc::Registry::storage<arComponents::DidIntersectRaycast>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB9556ADEAD93443FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB9556ADEAD93443FLL;
      if (*(_QWORD *)&v3 <= 0xB9556ADEAD93443FLL)
        v5 = 0xB9556ADEAD93443FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB9556ADEAD93443FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB9556ADEAD93443FLL)
            {
              if (v7[2] == 0xB9556ADEAD93443FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB9556ADEAD93443FLL)
          {
            if (v7[2] == 0xB9556ADEAD93443FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::DidIntersectRaycast]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1E48;
  *(_QWORD *)(v11 + 8) = 0xB9556ADEAD93443FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB9556ADEAD93443FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB9556ADEAD93443FLL;
  v15[1] = "arComponents::DidIntersectRaycast]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB9556ADEAD93443FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7C00A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::DidIntersectRaycast>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::DidIntersectRaycast>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::DidIntersectRaycast>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::DidIntersectRaycast>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::DidIntersectFrustum>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::DidIntersectFrustum>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::DidIntersectFrustum>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::DidIntersectFrustum>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::ARDebugDrawIntersectionsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B15B8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARDebugDrawIntersectionsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B15B8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARDebugDrawIntersectionsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::RegionalResourceTileData::~RegionalResourceTileData(md::RegionalResourceTileData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0F40;
  *((_QWORD *)this + 79) = &unk_1E42A0F80;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0F40;
  *((_QWORD *)this + 79) = &unk_1E42A0F80;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(uint64_t *a1, unsigned int a2)
{
  __int16 v2;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  gss::Allocator *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  pthread_rwlock_t *v41;
  geo::read_write_lock *v42;
  const char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  const char *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  geo::read_write_lock *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  int v100[2];
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  _BYTE v105[15];
  char v106;
  __int128 v107;
  __int128 v108;

  v2 = a2;
  v5 = a1[8];
  v6 = (uint64_t *)(v5 + 184 * a2);
  v7 = *((unsigned __int8 *)a1 + 88);
  if (!*((_BYTE *)v6 + 176)
    && *(unsigned __int8 *)(v5 + 184 * a2 + 178) == v7
    && *(unsigned __int8 *)(v5 + 184 * a2 + 179) == a2)
  {
    return;
  }
  memset(v105, 0, sizeof(v105));
  v106 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v105, 0x10002u) = v7;
  v8 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v105, 0x10015u);
  *(_WORD *)v8 = v2;
  *(_WORD *)(v5 + 184 * a2 + 178) = v7 | (v2 << 8);
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)v100 = 0;
    v101 = 0;
    v8 = *(_QWORD *)(v9 + 16);
    if (!v8)
      goto LABEL_132;
    v8 = (uint64_t)std::__shared_weak_count::lock((std::__shared_weak_count *)v8);
    v101 = (std::__shared_weak_count *)v8;
    if (!v8)
      goto LABEL_132;
    v10 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v100 = v10;
    if (!v10)
      goto LABEL_132;
    v11 = *(_QWORD *)(v10 + 520);
    v12 = *(std::__shared_weak_count **)(v10 + 528);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      if (*(_BYTE *)(v11 + 252))
      {
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_106;
      }
      v79 = *(_QWORD *)(v9 + 256);
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v79)
        goto LABEL_106;
    }
    else if (*(_BYTE *)(v11 + 252) || *(_QWORD *)(v9 + 256))
    {
LABEL_106:
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v108, *(uint64_t *)v100, (gss::FeatureAttributeSet *)(v9 + 272), (gss::QueryOverrides *)v105);
      v81 = v108;
      v108 = 0uLL;
      v82 = *(std::__shared_weak_count **)(v9 + 264);
      *(_OWORD *)(v9 + 256) = v81;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (!*((_QWORD *)&v108 + 1))
        goto LABEL_116;
      v85 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v71 = __ldaxr(v85);
      while (__stlxr(v71 - 1, v85));
LABEL_114:
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
LABEL_116:
      v86 = *(_QWORD *)(*(_QWORD *)v100 + 520);
      v87 = *(std::__shared_weak_count **)(*(_QWORD *)v100 + 528);
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        v90 = *(unsigned __int8 *)(v86 + 252);
        do
          v91 = __ldaxr(v88);
        while (__stlxr(v91 - 1, v88));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
        if (v90)
          goto LABEL_132;
        goto LABEL_126;
      }
      if (!*(_BYTE *)(v86 + 252))
      {
LABEL_126:
        v92 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v9 + 32));
        if ((_DWORD)v92)
          geo::read_write_lock::logFailure(v92, (uint64_t)"write lock", v93);
        v94 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        if (v94)
          std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v94);
        v8 = pthread_rwlock_unlock((pthread_rwlock_t *)(v9 + 32));
        if ((_DWORD)v8)
          geo::read_write_lock::logFailure((geo::read_write_lock *)v8, (uint64_t)"unlock", v95);
      }
LABEL_132:
      if (v101)
      {
        v96 = (unint64_t *)&v101->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      goto LABEL_137;
    }
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v108, *(uint64_t *)v100, (gss::FeatureAttributeSet *)(v9 + 272), (gss::QueryOverrides *)v105);
    v65 = v108;
    v108 = 0uLL;
    v66 = *(std::__shared_weak_count **)(v9 + 248);
    *(_OWORD *)(v9 + 240) = v65;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (!*((_QWORD *)&v108 + 1))
      goto LABEL_116;
    v70 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    goto LABEL_114;
  }
  v16 = *a1;
  if (*a1)
  {
    md::createFeatureAttributeSet((gss::Allocator *)v100, (uint64_t *)(a1[2] + 24));
    v17 = *(std::__shared_weak_count **)(v16 + 8);
    *(_QWORD *)&v107 = *(_QWORD *)v16;
    if (!v17 || (*((_QWORD *)&v107 + 1) = std::__shared_weak_count::lock(v17)) == 0)
    {
      std::__throw_bad_weak_ptr[abi:nn180100]();
      __break(1u);
      return;
    }
    v18 = (char *)operator new(0x148uLL);
    v19 = v18;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_QWORD *)v18 = &off_1E42E5B58;
    v20 = v18 + 24;
    v21 = v107;
    v107 = 0u;
    v108 = v21;
    v22 = v21;
    if (*((_QWORD *)&v21 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    gss::Queryable<gss::PropertyID>::Queryable((uint64_t)(v18 + 24), &v108);
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    *((_QWORD *)v19 + 3) = &off_1E42C29D0;
    v28 = operator new(0x158uLL);
    v29 = v28;
    v28[1] = 0;
    v28[2] = 0;
    *v28 = &off_1E42E5A78;
    v30 = v28 + 3;
    if (*((_QWORD *)&v22 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = (gss::Allocator *)gss::StylesheetQuery<gss::PropertyID>::StylesheetQuery((uint64_t)(v28 + 3), v22, *((std::__shared_weak_count **)&v22 + 1), (uint64_t)v100, (uint64_t)v105);
    if (*((_QWORD *)&v22 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    *((_QWORD *)v19 + 33) = v30;
    *((_QWORD *)v19 + 34) = v29;
    *((_QWORD *)v19 + 39) = 0;
    *(_OWORD *)(v19 + 280) = 0u;
    *(_OWORD *)(v19 + 296) = 0u;
    *((_QWORD *)v19 + 40) = gss::Allocator::instance(v33);
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)v19 + 37, *(uint64_t *)v100, v101, ((uint64_t)v101 - *(_QWORD *)v100) >> 3);
    if (*((_QWORD *)&v22 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    *(_QWORD *)&v104 = v20;
    *((_QWORD *)&v104 + 1) = v19;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
    if (*((_QWORD *)&v107 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (pthread_rwlock_t *)(v16 + 320);
    *(_QWORD *)&v108 = v16 + 320;
    v42 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v16 + 320));
    if ((_DWORD)v42)
      geo::read_write_lock::logFailure(v42, (uint64_t)"write lock", v43);
    v99 = v104;
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 16);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = *(_OWORD **)(v16 + 96);
    v48 = *(_QWORD *)(v16 + 104);
    if ((unint64_t)v47 >= v48)
    {
      v57 = *(_QWORD *)(v16 + 88);
      v58 = ((uint64_t)v47 - v57) >> 4;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 60)
        abort();
      v60 = v48 - v57;
      if (v60 >> 3 > v59)
        v59 = v60 >> 3;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v16 + 112) + 16))(*(_QWORD *)(v16 + 112), 16 * v61, 8);
        v63 = (_OWORD *)(v62 + 16 * v58);
        v64 = v62 + 16 * v61;
        if (v62)
        {
          *v63 = v99;
          v99 = 0u;
        }
      }
      else
      {
        v64 = 0;
        v63 = (_OWORD *)(16 * v58);
      }
      v72 = v63 + 1;
      v73 = *(_QWORD **)(v16 + 88);
      v74 = *(_QWORD **)(v16 + 96);
      if (v74 == v73)
      {
        *(_QWORD *)(v16 + 88) = v63;
        *(_QWORD *)(v16 + 96) = v72;
        v77 = *(_QWORD *)(v16 + 104);
        *(_QWORD *)(v16 + 104) = v64;
      }
      else
      {
        do
        {
          v75 = *((_OWORD *)v74 - 1);
          v74 -= 2;
          *--v63 = v75;
          *v74 = 0;
          v74[1] = 0;
        }
        while (v74 != v73);
        v74 = *(_QWORD **)(v16 + 88);
        v76 = *(_QWORD **)(v16 + 96);
        *(_QWORD *)(v16 + 88) = v63;
        *(_QWORD *)(v16 + 96) = v72;
        v77 = *(_QWORD *)(v16 + 104);
        *(_QWORD *)(v16 + 104) = v64;
        while (v76 != v74)
        {
          v78 = (std::__shared_weak_count *)*(v76 - 1);
          if (v78)
            std::__shared_weak_count::__release_weak(v78);
          v76 -= 2;
        }
      }
      if (v74)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v16 + 112) + 40))(*(_QWORD *)(v16 + 112), v74, v77 - (_QWORD)v74);
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      *(_QWORD *)(v16 + 96) = v72;
      if (!*((_QWORD *)&v99 + 1))
        goto LABEL_54;
    }
    else
    {
      if (v47)
      {
        v44 = 0;
        *v47 = v99;
      }
      *(_QWORD *)(v16 + 96) = v47 + 1;
      if (!v44)
        goto LABEL_54;
    }
    std::__shared_weak_count::__release_weak(v44);
    v41 = (pthread_rwlock_t *)v108;
LABEL_54:
    v8 = pthread_rwlock_unlock(v41);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure((geo::read_write_lock *)v8, (uint64_t)"unlock", v49);
    v50 = v104;
    v104 = 0uLL;
    v51 = (std::__shared_weak_count *)v6[1];
    *(_OWORD *)v6 = v50;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (*(_QWORD *)v100)
    {
      v101 = *(std::__shared_weak_count **)v100;
      v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v103 + 40))(v103, *(_QWORD *)v100, v102 - *(_QWORD *)v100);
    }
  }
LABEL_137:
  *((_BYTE *)v6 + 176) = 0;
  *(_BYTE *)(v5 + 184 * a2 + 177) = 1;
  if (!v105[14])
  {
    if (*(_QWORD *)v105)
    {
      v98 = gss::Allocator::instance((gss::Allocator *)v8);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v98 + 40))(v98, *(_QWORD *)v105, *(unsigned __int16 *)&v105[12]);
    }
  }
}

void sub_19F7C0D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLine::_resolveStyle(uint64_t a1, char a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  unsigned int v7;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  int v19;
  char v20;
  char v21;
  char v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float32x4_t *v28;
  float v29;
  _BOOL4 v30;
  BOOL v31;
  unsigned int v32;
  float v33;
  float v34;
  uint64_t v35;
  float *v36;
  float v37;
  BOOL v38;
  unsigned int v39;
  float v40;
  float v41;
  uint64_t v42;
  float *v43;
  float v44;
  unsigned int v45;
  float v46;
  float v47;
  uint64_t v48;
  float *v49;
  float v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  float *v55;
  float v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  float *v61;
  float v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  float *v67;
  float v68;
  unsigned int v69;
  int v70;
  int v71;
  uint64_t v72;
  float *v73;
  float v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float v81;
  _BOOL4 v82;
  unsigned int v83;
  float v84;
  _BOOL4 v85;
  unsigned int v86;
  float v87;
  float v88;
  uint64_t v94;
  unsigned int v95;
  int v96;
  float v99;
  uint64_t v100;
  float *v101;
  float v102;
  _BOOL4 v103;
  unsigned int v104;
  float v105;
  _BOOL4 v106;
  unsigned int v107;
  float v108;
  float v109;
  float32x4_t v112;
  uint64_t v113;
  uint64_t v114;
  float *v115;
  float v116;
  unsigned int v117;
  float v118;
  float v119;
  uint64_t v120;
  float *v121;
  float v122;
  unsigned int v123;
  int v124;
  int v125;
  float v126;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  _QWORD v138[2];
  char v139;
  char v140;

  LOBYTE(v7) = a2;
  *(_QWORD *)&v133 = a3;
  *((_QWORD *)&v133 + 1) = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v136 = a3;
    v137 = a4;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v136 = a3;
    v137 = 0;
  }
  v138[0] = 0;
  v138[1] = 0;
  v139 = 0;
  if (a3)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 48))(a3, v138);
    v139 = v12;
    if (a4)
    {
LABEL_10:
      v13 = (unint64_t *)&a4->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (v14)
      {
        if (!v139)
          goto LABEL_188;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
        std::__shared_weak_count::__release_weak(a4);
        if (!v139)
          goto LABEL_188;
      }
      goto LABEL_17;
    }
  }
  else
  {
    v12 = 0;
    v139 = 0;
    if (a4)
      goto LABEL_10;
  }
  if (!v12)
    goto LABEL_188;
LABEL_17:
  v15 = *(_QWORD *)(v136 + 24);
  if (v7 >= 0x17u)
    v7 = 23;
  else
    v7 = v7;
  v16 = *(float **)v15;
  if (*(_QWORD *)v15
    && (v17 = *v16, LODWORD(v16) = *v16 == 1.0, *(_BYTE *)(v15 + 10))
    && (v17 != 0.0 ? (_ZF = v17 == 1.0) : (_ZF = 1), !_ZF)
    || (v19 = *(unsigned __int8 *)(v15 + v16 + 11), v17 = 0.0, v19 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v20 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x5Bu, v7, 0, &v133);
    v21 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x5Bu, v7, 1, &v140);
    if (v17 >= 1.0)
      v22 = v21;
    else
      v22 = v20;
  }
  else
  {
    v22 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v136 + 24), 0x5Bu, v7, v19, 0);
  }
  v140 = 1;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v133, *(_QWORD *)(v136 + 24), 0x5Cu, v7, 0, (BOOL *)&v140);
  if (v140)
    v23 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v133)), (float32x4_t)vdupq_n_s32(0x37800080u));
  else
    v23 = *(float32x4_t *)(a1 + 36);
  v129 = v23;
  v140 = 1;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v133, *(_QWORD *)(v136 + 24), 0x5Cu, v7, 1u, (BOOL *)&v140);
  if (v140)
    v24 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v133)), (float32x4_t)vdupq_n_s32(0x37800080u));
  else
    v24 = *(float32x4_t *)(a1 + 36);
  v25 = *(_QWORD *)(v136 + 24);
  v26 = *(float **)v25;
  if (!*(_QWORD *)v25)
  {
    *(float32x4_t *)a5 = v129;
    *(float32x4_t *)(a5 + 16) = v24;
    v28 = (float32x4_t *)(a5 + 16);
    v27 = (float *)(a5 + 28);
    if (v22)
    {
      v30 = 0;
      goto LABEL_51;
    }
LABEL_53:
    v34 = 0.0;
    goto LABEL_55;
  }
  *(float32x4_t *)a5 = vmlaq_n_f32(v129, vsubq_f32(v24, v129), *v26);
  v27 = (float *)(a5 + 28);
  *(float32x4_t *)(a5 + 16) = v24;
  v28 = (float32x4_t *)(a5 + 16);
  if (!v22)
    goto LABEL_53;
  v29 = *v26;
  v30 = *v26 == 1.0;
  if (!*(_BYTE *)(v25 + 10) || (v29 != 0.0 ? (v31 = v29 == 1.0) : (v31 = 1), v31))
  {
LABEL_51:
    v32 = *(unsigned __int8 *)(v25 + v30 + 11);
    v29 = 0.0;
    if (v32 != 2)
    {
      v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v25, 0x5Eu, v7, v32, 0);
      goto LABEL_55;
    }
  }
  LOBYTE(v133) = 1;
  v140 = 1;
  v33 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v25, 0x5Eu, v7, 0, &v133);
  v34 = v33
      + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v25, 0x5Eu, v7, 1u, &v140)- v33)* v29);
LABEL_55:
  *(float *)(a5 + 56) = v34;
  v35 = *(_QWORD *)(v136 + 24);
  v36 = *(float **)v35;
  if (*(_QWORD *)v35
    && (v37 = *v36, LODWORD(v36) = *v36 == 1.0, *(_BYTE *)(v35 + 10))
    && (v37 != 0.0 ? (v38 = v37 == 1.0) : (v38 = 1), !v38)
    || (v39 = *(unsigned __int8 *)(v35 + v36 + 11), v37 = 0.0, v39 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v40 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v35, 0x108u, v7, 0, &v133);
    v41 = v40
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v35, 0x108u, v7, 1u, &v140)- v40)* v37);
  }
  else
  {
    v41 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v136 + 24), 0x108u, v7, v39, 0);
  }
  *(float *)(a5 + 60) = v41;
  if (v22)
  {
    v42 = *(_QWORD *)(v136 + 24);
    v43 = *(float **)v42;
    if (*(_QWORD *)v42 && (v44 = *v43, LODWORD(v43) = *v43 == 1.0, *(_BYTE *)(v42 + 10)) && v44 != 0.0 && v44 != 1.0
      || (v45 = *(unsigned __int8 *)(v42 + v43 + 11), v44 = 0.0, v45 == 2))
    {
      LOBYTE(v133) = 1;
      v140 = 1;
      v46 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x61u, v7, 0, &v133);
      v47 = v46
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x61u, v7, 1u, &v140)- v46)* v44);
    }
    else
    {
      v47 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v136 + 24), 0x61u, v7, v45, 0);
    }
  }
  else
  {
    v47 = 0.0;
  }
  *(float *)(a5 + 64) = v47;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v133, *(_QWORD *)(v136 + 24), 0x5Du, v7, 2u, 0);
  *(float32x4_t *)(a5 + 32) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v133)), (float32x4_t)vdupq_n_s32(0x37800080u));
  v48 = *(_QWORD *)(v136 + 24);
  v49 = *(float **)v48;
  if (*(_QWORD *)v48 && (v50 = *v49, LODWORD(v49) = *v49 == 1.0, *(_BYTE *)(v48 + 10)) && v50 != 0.0 && v50 != 1.0
    || (v51 = *(unsigned __int8 *)(v48 + v49 + 11), v50 = 0.0, v51 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v52 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v48, 0x109u, v7, 0, &v133);
    v53 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v48, 0x109u, v7, 1, &v140);
    if (v50 < 1.0)
      v53 = v52;
  }
  else
  {
    v53 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v136 + 24), 0x109u, v7, v51, 0);
  }
  *(_BYTE *)(a5 + 68) = v53 != 0;
  v54 = *(_QWORD *)(v136 + 24);
  v55 = *(float **)v54;
  if (*(_QWORD *)v54 && (v56 = *v55, LODWORD(v55) = *v55 == 1.0, *(_BYTE *)(v54 + 10)) && v56 != 0.0 && v56 != 1.0
    || (v57 = *(unsigned __int8 *)(v54 + v55 + 11), v56 = 0.0, v57 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x10Bu, v7, 0, &v133);
    v59 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x10Bu, v7, 1u, &v140);
    if (v56 < 1.0)
      v59 = v58;
  }
  else
  {
    v59 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v136 + 24), 0x10Bu, v7, v57, 0);
  }
  *(_DWORD *)(a5 + 72) = v59;
  v60 = *(_QWORD *)(v136 + 24);
  v61 = *(float **)v60;
  if (*(_QWORD *)v60 && (v62 = *v61, LODWORD(v61) = *v61 == 1.0, *(_BYTE *)(v60 + 10)) && v62 != 0.0 && v62 != 1.0
    || (v63 = *(unsigned __int8 *)(v60 + v61 + 11), v62 = 0.0, v63 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v64 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v60, 0x10Cu, v7, 0, &v133);
    v65 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v60, 0x10Cu, v7, 1, &v140);
    if (v62 < 1.0)
      v65 = v64;
  }
  else
  {
    v65 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v136 + 24), 0x10Cu, v7, v63, 0);
  }
  *(_BYTE *)(a5 + 76) = v65 != 0;
  v66 = *(_QWORD *)(v136 + 24);
  v67 = *(float **)v66;
  if (*(_QWORD *)v66 && (v68 = *v67, LODWORD(v67) = *v67 == 1.0, *(_BYTE *)(v66 + 10)) && v68 != 0.0 && v68 != 1.0
    || (v69 = *(unsigned __int8 *)(v66 + v67 + 11), v68 = 0.0, v69 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v70 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v66, 0x10Du, v7, 0, &v133);
    v71 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v66, 0x10Du, v7, 1u, &v140);
    if (v68 < 1.0)
      v71 = v70;
  }
  else
  {
    v71 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v136 + 24), 0x10Du, v7, v69, 0);
  }
  *(_DWORD *)(a5 + 80) = v71;
  v72 = *(_QWORD *)(v136 + 24);
  v73 = *(float **)v72;
  if (*(_QWORD *)v72 && (v74 = *v73, LODWORD(v73) = *v73 == 1.0, *(_BYTE *)(v72 + 10)) && v74 != 0.0 && v74 != 1.0
    || (v75 = *(unsigned __int8 *)(v72 + v73 + 11), v74 = 0.0, v75 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v76 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v72, 0x68u, v7, 0, &v133);
    v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v72, 0x68u, v7, 1u, &v140);
    if (v74 < 1.0)
      v77 = v76;
  }
  else
  {
    v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v136 + 24), 0x68u, v7, v75, 0);
  }
  *(_DWORD *)(a5 + 84) = v77;
  v78 = v136;
  if (*(float *)(a5 + 12) > 0.0)
  {
    v79 = *(_QWORD *)(v136 + 24);
    v80 = *(float **)v79;
    if (*(_QWORD *)v79)
    {
      v81 = *v80;
      v82 = *v80 == 1.0;
      if (*(_BYTE *)(v79 + 10) && v81 != 0.0 && v81 != 1.0)
      {
LABEL_127:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v136 + 24), 0x114u, v7, 0) & 1) != 0)
          goto LABEL_130;
        v83 = 1;
LABEL_129:
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v79, 0x114u, v7, v83))
          goto LABEL_140;
LABEL_130:
        v130 = *(float32x4_t *)a5;
        if (v80)
        {
          v84 = *v80;
          v85 = *v80 == 1.0;
          if (*(_BYTE *)(v79 + 10) && v84 != 0.0 && v84 != 1.0)
            goto LABEL_137;
        }
        else
        {
          v85 = 0;
        }
        v86 = *(unsigned __int8 *)(v79 + v85 + 11);
        v84 = 0.0;
        if (v86 != 2)
        {
          v88 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x114u, v7, v86, 0);
          goto LABEL_139;
        }
LABEL_137:
        LOBYTE(v133) = 1;
        v140 = 1;
        v87 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x114u, v7, 0, &v133);
        v88 = v87
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x114u, v7, 1u, &v140)- v87)* v84);
LABEL_139:
        __asm
        {
          FMOV            V1.4S, #-1.0
          FMOV            V2.4S, #1.0
        }
        *(float32x4_t *)a5 = vmlaq_n_f32(_Q2, vaddq_f32(v130, _Q1), v88);
        v78 = v136;
        goto LABEL_140;
      }
    }
    else
    {
      v82 = 0;
    }
    v83 = *(unsigned __int8 *)(v79 + v82 + 11);
    if (v83 != 2)
      goto LABEL_129;
    goto LABEL_127;
  }
LABEL_140:
  if (*v27 <= 0.0)
    goto LABEL_148;
  v94 = *(_QWORD *)(v78 + 24);
  v95 = *(unsigned __int8 *)(v94 + 12);
  if (v95 != 2)
  {
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v94, 0x114u, v7, *(unsigned __int8 *)(v94 + 12)))goto LABEL_148;
    v131 = *v28;
    v96 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x114u, v7, v95, 0);
    goto LABEL_147;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v94, 0x114u, v7, 0) & 1) != 0
    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v94, 0x114u, v7, 1u) & 1) != 0)
  {
    v131 = *v28;
    LOBYTE(v133) = 1;
    v140 = 1;
    v128 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x114u, v7, 0, &v133);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v94, 0x114u, v7, 1u, &v140);
    v96 = v128;
LABEL_147:
    __asm
    {
      FMOV            V0.4S, #-1.0
      FMOV            V1.4S, #1.0
    }
    *v28 = vmlaq_n_f32(_Q1, vaddq_f32(v131, _Q0), *(float *)&v96);
    v78 = v136;
  }
LABEL_148:
  v99 = *(float *)(a5 + 44);
  if (v99 <= 0.0)
    goto LABEL_169;
  v100 = *(_QWORD *)(v78 + 24);
  v101 = *(float **)v100;
  if (!*(_QWORD *)v100)
  {
    v103 = 0;
    goto LABEL_155;
  }
  v102 = *v101;
  v103 = *v101 == 1.0;
  if (!*(_BYTE *)(v100 + 10) || v102 == 0.0 || v102 == 1.0)
  {
LABEL_155:
    v104 = *(unsigned __int8 *)(v100 + v103 + 11);
    if (v104 != 2)
      goto LABEL_158;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v78 + 24), 0x115u, v7, 0) & 1) != 0)
    goto LABEL_159;
  v104 = 1;
LABEL_158:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v100, 0x115u, v7, v104))
  {
LABEL_159:
    v132 = *(float32x4_t *)(a5 + 32);
    if (v101)
    {
      v105 = *v101;
      v106 = *v101 == 1.0;
      if (*(_BYTE *)(v100 + 10) && v105 != 0.0 && v105 != 1.0)
        goto LABEL_166;
    }
    else
    {
      v106 = 0;
    }
    v107 = *(unsigned __int8 *)(v100 + v106 + 11);
    v105 = 0.0;
    if (v107 != 2)
    {
      v109 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x115u, v7, v107, 0);
      goto LABEL_168;
    }
LABEL_166:
    LOBYTE(v133) = 1;
    v140 = 1;
    v108 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x115u, v7, 0, &v133);
    v109 = v108
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x115u, v7, 1u, &v140)- v108)* v105);
LABEL_168:
    __asm
    {
      FMOV            V1.4S, #-1.0
      FMOV            V2.4S, #1.0
    }
    v112 = vmlaq_n_f32(_Q2, vaddq_f32(v132, _Q1), v109);
    *(float32x4_t *)(a5 + 32) = v112;
    v99 = v112.f32[3];
    v78 = v136;
  }
LABEL_169:
  *(float *)(a5 + 64) = *(float *)(a5 + 56) + (float)(*(float *)(a5 + 64) * 2.0);
  *(_DWORD *)(a5 + 48) = *(_DWORD *)(a5 + 12);
  *(float *)(a5 + 52) = v99;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v133, *(_QWORD *)(v78 + 24), 0x12Cu, v7, 2);
  v113 = *(_QWORD *)(a5 + 96);
  if (v113)
  {
    *(_QWORD *)(a5 + 104) = v113;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a5 + 120) + 40))(*(_QWORD *)(a5 + 120), v113, *(_QWORD *)(a5 + 112) - v113);
    *(_QWORD *)(a5 + 96) = 0;
    *(_QWORD *)(a5 + 104) = 0;
    *(_QWORD *)(a5 + 112) = 0;
  }
  *(_OWORD *)(a5 + 96) = v133;
  *(_QWORD *)(a5 + 112) = v134;
  *(_DWORD *)(a5 + 128) = v135;
  v114 = *(_QWORD *)(v136 + 24);
  v115 = *(float **)v114;
  if (*(_QWORD *)v114
    && (v116 = *v115, LODWORD(v115) = *v115 == 1.0, *(_BYTE *)(v114 + 10))
    && v116 != 0.0
    && v116 != 1.0
    || (v117 = *(unsigned __int8 *)(v114 + v115 + 11), v116 = 0.0, v117 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v118 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v114, 0x146u, v7, 0, &v133);
    v119 = v118
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v114, 0x146u, v7, 1u, &v140)- v118)* v116);
  }
  else
  {
    v119 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v136 + 24), 0x146u, v7, v117, 0);
  }
  *(float *)(a5 + 152) = v119;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v133, *(_QWORD *)(v136 + 24), 0x97u, v7, 2u, 0);
  *(float32x4_t *)(a5 + 136) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v133)), (float32x4_t)vdupq_n_s32(0x37800080u));
  v120 = *(_QWORD *)(v136 + 24);
  v121 = *(float **)v120;
  if (*(_QWORD *)v120
    && (v122 = *v121, LODWORD(v121) = *v121 == 1.0, *(_BYTE *)(v120 + 10))
    && v122 != 0.0
    && v122 != 1.0
    || (v123 = *(unsigned __int8 *)(v120 + v121 + 11), v122 = 0.0, v123 == 2))
  {
    LOBYTE(v133) = 1;
    v140 = 1;
    v124 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v120, 0x155u, v7, 0, &v133);
    v125 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v120, 0x155u, v7, 1u, &v140);
    if (v122 < 1.0)
      LOBYTE(v125) = v124;
  }
  else
  {
    v125 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v136 + 24), 0x155u, v7, v123, 0);
  }
  *(_BYTE *)(a5 + 88) = v125;
LABEL_188:
  v126 = *(float *)(a5 + 52);
  *(float *)(a5 + 12) = *(float *)(a1 + 52) * *(float *)(a5 + 48);
  *(float *)(a5 + 44) = *(float *)(a1 + 52) * v126;
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v136);
}

void sub_19F7C1DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void gss::DashPattern::~DashPattern(gss::DashPattern *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v1, *((_QWORD *)this + 2) - v1);
  }
}

{
  uint64_t *v1;

  v1 = (uint64_t *)this;
  std::vector<float,geo::StdAllocator<float,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gss::FeatureQueryImpl<gss::PropertyID>::~FeatureQueryImpl(uint64_t a1)
{
  gss::FeatureQueryImpl<gss::PropertyID>::~FeatureQueryImpl(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gss::FeatureQueryImpl<gss::PropertyID>::sourceCartoStyle(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 16))(*(_QWORD *)(a1 + 240));
}

uint64_t gss::FeatureQueryImpl<gss::PropertyID>::targetCartoStyle@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 256);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  result = *(_QWORD *)(a1 + 240);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t gss::FeatureQueryImpl<gss::PropertyID>::resolve(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 240);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  result = *(_QWORD *)(a1 + 256);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t gss::FeatureQueryImpl<gss::PropertyID>::lock(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;

  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  v28 = v5;
  if (!v5)
    return 0;
  if (!a1[1])
  {
    v19 = v5;
    v18 = 0;
LABEL_45:
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return v18;
  }
  v6 = a1 + 30;
  v7 = a1[30];
  v8 = a1[32];
  if (v7 >= v8)
    v9 = a1 + 30;
  else
    v9 = a1 + 32;
  v10 = (std::__shared_weak_count *)v9[1];
  if (v7 >= v8)
    v11 = a1[30];
  else
    v11 = a1[32];
  v27 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7 = *v6;
    v8 = a1[32];
  }
  if (v7 >= v8)
    v6 = a1 + 32;
  v15 = *v6;
  v14 = (std::__shared_weak_count *)v6[1];
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v11 && ((*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v11 + 48))(v11, 0) & 1) == 0)
  {
LABEL_34:
    v18 = 0;
    if (!v14)
      goto LABEL_39;
    goto LABEL_35;
  }
  if (v15 && ((*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v15 + 48))(v15, 0) & 1) == 0)
  {
    v15 = v11;
    if (!v11)
      goto LABEL_34;
    goto LABEL_33;
  }
  if ((gss::Queryable<gss::PropertyID>::lock((uint64_t)a1, a2) & 1) == 0)
  {
    if (v11)
      (*(void (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
    if (!v15)
      goto LABEL_34;
LABEL_33:
    (*(void (**)(unint64_t))(*(_QWORD *)v15 + 56))(v15);
    goto LABEL_34;
  }
  v18 = 1;
  if (!v14)
    goto LABEL_39;
LABEL_35:
  v20 = (unint64_t *)&v14->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_39:
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v19 = v28;
  if (v28)
    goto LABEL_45;
  return v18;
}

void sub_19F7C21A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void gss::FeatureQueryImpl<gss::PropertyID>::unlock(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  v2 = (unint64_t *)(a1 + 240);
  v3 = *(_QWORD *)(a1 + 240);
  v4 = *(_QWORD *)(a1 + 256);
  if (v3 >= v4)
    v5 = a1 + 240;
  else
    v5 = a1 + 256;
  v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v3 >= v4)
    v7 = *(_QWORD *)(a1 + 240);
  else
    v7 = *(_QWORD *)(a1 + 256);
  v21 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v3 = *v2;
    v4 = *(_QWORD *)(a1 + 256);
  }
  if (v3 >= v4)
    v2 = (unint64_t *)(a1 + 256);
  v10 = *v2;
  v11 = (std::__shared_weak_count *)v2[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v10)
    (*(void (**)(unint64_t))(*(_QWORD *)v10 + 56))(v10);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v14 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v14)
    geo::read_write_lock::logFailure(v14, (uint64_t)"unlock", v15);
  if (!v11)
    goto LABEL_26;
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v18 = v21;
    if (!v21)
      return;
  }
  else
  {
LABEL_26:
    v18 = v21;
    if (!v21)
      return;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_19F7C2328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t gss::FeatureQueryImpl<gss::PropertyID>::getAttributeMapForStyle(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t result;

  if (a3)
  {
    v3 = (uint64_t *)(a1 + 256);
    if (!*(_QWORD *)(a1 + 256))
      v3 = (uint64_t *)(a1 + 240);
    result = *v3;
    if (*v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  }
  else
  {
    result = *(_QWORD *)(a1 + 240);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  }
  return result;
}

uint64_t gss::FeatureQueryImpl<gss::PropertyID>::~FeatureQueryImpl(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)a1 = &off_1E42C29D0;
  v2 = *(_QWORD *)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), v2, *(_QWORD *)(a1 + 288) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 264);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 248);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = *(std::__shared_weak_count **)(a1 + 248);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  *(_QWORD *)a1 = &off_1E42C2A28;
  v9 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"destruction", v10);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v11)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v11);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void std::__shared_ptr_emplace<gss::FeatureQueryImpl<gss::PropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::FeatureQueryImpl<gss::PropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::FeatureQueryImpl<gss::PropertyID>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::TransitLine::TransitLine(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v11;
  gss::Allocator *v12;
  gss::Allocator *v13;
  gss::Allocator *v14;
  BOOL ColorOverrideForAttributes;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v38[3];
  uint64_t v39;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  if (a5)
  {
    v9 = (unint64_t *)(a5 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 52) = 1065353216;
  *(_QWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v11 = operator new(0x2E0uLL);
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v11 + 46;
  v11[6] = 0u;
  v11[7] = 0u;
  *v11 = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[8] = 0u;
  v11[9] = 0u;
  v11[10] = 0u;
  *((_QWORD *)v11 + 22) = 0;
  *((_DWORD *)v11 + 22) = -1;
  *((_DWORD *)v11 + 24) = -1;
  *((_BYTE *)v11 + 104) = 1;
  *((_QWORD *)v11 + 14) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 16) = 0;
  v12 = (gss::Allocator *)gss::Allocator::instance((gss::Allocator *)v11);
  *(_OWORD *)((char *)v11 + 184) = 0u;
  *((_QWORD *)v11 + 17) = v12;
  *(_OWORD *)((char *)v11 + 152) = xmmword_19FFB34C0;
  *((_DWORD *)v11 + 42) = 0;
  *((_DWORD *)v11 + 44) = 257;
  *(_OWORD *)((char *)v11 + 264) = 0uLL;
  *(_OWORD *)((char *)v11 + 280) = 0uLL;
  *(_OWORD *)((char *)v11 + 200) = 0uLL;
  *(_OWORD *)((char *)v11 + 216) = 0uLL;
  *(_OWORD *)((char *)v11 + 232) = 0uLL;
  *(_OWORD *)((char *)v11 + 248) = 0uLL;
  *(_OWORD *)((char *)v11 + 296) = 0uLL;
  *(_OWORD *)((char *)v11 + 312) = 0uLL;
  *(_OWORD *)((char *)v11 + 328) = 0uLL;
  *(_OWORD *)((char *)v11 + 344) = 0uLL;
  *((_QWORD *)v11 + 45) = 0;
  *((_DWORD *)v11 + 68) = -1;
  *((_DWORD *)v11 + 70) = -1;
  *((_BYTE *)v11 + 288) = 1;
  *((_QWORD *)v11 + 37) = 0;
  *((_QWORD *)v11 + 38) = 0;
  *((_QWORD *)v11 + 39) = 0;
  v13 = (gss::Allocator *)gss::Allocator::instance(v12);
  *((_QWORD *)v11 + 40) = v13;
  v11[21] = xmmword_19FFB34C0;
  *((_DWORD *)v11 + 88) = 0;
  *((_DWORD *)v11 + 90) = 257;
  v11[28] = 0u;
  v11[29] = 0u;
  v11[23] = 0u;
  v11[24] = 0u;
  v11[25] = 0u;
  v11[26] = 0u;
  v11[27] = 0u;
  v11[30] = 0u;
  v11[31] = 0u;
  v11[32] = 0u;
  v11[33] = 0u;
  *((_QWORD *)v11 + 68) = 0;
  *((_DWORD *)v11 + 114) = -1;
  *((_DWORD *)v11 + 116) = -1;
  *((_BYTE *)v11 + 472) = 1;
  *((_QWORD *)v11 + 60) = 0;
  *((_QWORD *)v11 + 61) = 0;
  *((_QWORD *)v11 + 62) = 0;
  v14 = (gss::Allocator *)gss::Allocator::instance(v13);
  *((_QWORD *)v11 + 63) = v14;
  *(_OWORD *)((char *)v11 + 520) = xmmword_19FFB34C0;
  *((_DWORD *)v11 + 134) = 0;
  *((_DWORD *)v11 + 136) = 257;
  *(_OWORD *)((char *)v11 + 552) = 0u;
  *(_OWORD *)((char *)v11 + 568) = 0u;
  *(_OWORD *)((char *)v11 + 584) = 0u;
  *(_OWORD *)((char *)v11 + 600) = 0u;
  *(_OWORD *)((char *)v11 + 616) = 0u;
  *(_OWORD *)((char *)v11 + 632) = 0u;
  *(_OWORD *)((char *)v11 + 648) = 0u;
  *(_OWORD *)((char *)v11 + 664) = 0u;
  *(_OWORD *)((char *)v11 + 680) = 0u;
  *(_OWORD *)((char *)v11 + 696) = 0u;
  *(_OWORD *)((char *)v11 + 712) = 0u;
  *((_QWORD *)v11 + 91) = 0;
  *((_DWORD *)v11 + 160) = -1;
  *((_DWORD *)v11 + 162) = -1;
  *((_BYTE *)v11 + 656) = 1;
  *((_QWORD *)v11 + 83) = 0;
  *((_QWORD *)v11 + 84) = 0;
  *((_QWORD *)v11 + 85) = 0;
  *((_QWORD *)v11 + 86) = gss::Allocator::instance(v14);
  v11[44] = xmmword_19FFB34C0;
  *((_DWORD *)v11 + 180) = 0;
  *((_DWORD *)v11 + 182) = 257;
  *(_QWORD *)(a1 + 72) = v11 + 46;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  md::createFeatureAttributeSet((gss::Allocator *)v38, (uint64_t *)(a2 + 24));
  ColorOverrideForAttributes = md::DataOverrideManager::getColorOverrideForAttributes(a3, v38, (_DWORD *)(a1 + 36));
  if (v38[0])
  {
    v38[1] = v38[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 40))(v39, v38[0], v38[2] - v38[0]);
  }
  if (!ColorOverrideForAttributes)
  {
    v18 = *(_BYTE **)(a1 + 16);
    LOBYTE(v16) = v18[80];
    v19 = (float)v16;
    LOBYTE(v17) = v18[81];
    v20 = (float)v17;
    LOBYTE(v17) = v18[82];
    v21 = (float)v17;
    LOBYTE(v5) = v18[83];
    if ((float)(v19 * 0.0039216) >= 0.04045)
      v22 = powf((float)(v19 * 0.0037171) + 0.052133, 2.4);
    else
      v22 = v19 * 0.00030353;
    if ((float)(v20 * 0.0039216) >= 0.04045)
      v23 = powf((float)(v20 * 0.0037171) + 0.052133, 2.4);
    else
      v23 = v20 * 0.00030353;
    if ((float)(v21 * 0.0039216) >= 0.04045)
      v24 = powf((float)(v21 * 0.0037171) + 0.052133, 2.4);
    else
      v24 = v21 * 0.00030353;
    *(float *)(a1 + 36) = v22;
    *(float *)(a1 + 40) = v23;
    *(float *)(a1 + 44) = v24;
    *(float *)(a1 + 48) = (float)v5 * 0.0039216;
  }
  v25 = *(_QWORD *)(a1 + 64);
  md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)a1, 0);
  if (*(_BYTE *)(v25 + 177))
  {
    md::TransitLine::_resolveStyle(a1, *(_DWORD *)(a1 + 60), *(_QWORD *)v25, *(std::__shared_weak_count **)(v25 + 8), v25 + 16);
    *(_BYTE *)(v25 + 177) = 0;
  }
  v26 = *(std::__shared_weak_count **)(a2 + 8);
  if (v26)
  {
    v26 = std::__shared_weak_count::lock(v26);
    v27 = v26;
    if (v26)
      v26 = *(std::__shared_weak_count **)a2;
  }
  else
  {
    v27 = 0;
  }
  v28 = geo::codec::VectorTile::transitSystems((geo::codec::VectorTile *)v26);
  v29 = *(_DWORD *)(a2 + 84);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v28 + 72 * v29 + 16);
  v32 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 24);
  v33 = v32[33];
  if (v32[33])
  {
    v34 = (_DWORD *)(*(_QWORD *)v32 + 4);
    v35 = 8 * v33;
    do
    {
      v36 = *(v34 - 1);
      if (v36 == 53)
      {
        *(_DWORD *)(a1 + 32) = *v34;
      }
      else if (v36 == 37)
      {
        *(_QWORD *)(a1 + 96) = 1 << *v34;
      }
      v34 += 2;
      v35 -= 8;
    }
    while (v35);
  }
  return a1;
}

void sub_19F7C29CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  void **v18;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v22 = (char *)*v18;
  if (*v18)
  {
    v23 = *(char **)(v16 + 72);
    v24 = *v18;
    if (v23 != v22)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 9);
        if (v25)
        {
          *((_QWORD *)v23 - 8) = v25;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 - 6) + 40))(*((_QWORD *)v23 - 6), v25, *((_QWORD *)v23 - 7) - v25);
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)v23 - 22);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v23 -= 184;
      }
      while (v23 != v22);
      v24 = *v18;
    }
    *(_QWORD *)(v16 + 72) = v22;
    operator delete(v24);
  }
  v29 = *(std::__shared_weak_count **)(v16 + 8);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::TransitLine::debugSystemName(md::TransitLine *this)
{
  std::__shared_weak_count **v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count **)*((_QWORD *)this + 2);
  v3 = v2[1];
  if (v3)
  {
    v3 = std::__shared_weak_count::lock(v3);
    v4 = v3;
    if (v3)
      v3 = *v2;
  }
  else
  {
    v4 = 0;
  }
  v5 = geo::codec::VectorTile::transitSystems((geo::codec::VectorTile *)v3);
  v6 = *(_DWORD *)(*((_QWORD *)this + 2) + 84);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return *(_QWORD *)(v5 + 72 * v6 + 56);
}

void sub_19F7C2BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLine::debugLineIDString(md::TransitLine *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    v5 = std::__shared_weak_count::lock(v5);
    v6 = v5;
    if (v5)
      v5 = *(std::__shared_weak_count **)v3;
  }
  else
  {
    v6 = 0;
  }
  v7 = geo::codec::VectorTile::transitSystems((geo::codec::VectorTile *)v5);
  v8 = *(_DWORD *)(*((_QWORD *)this + 2) + 84);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return objc_msgSend(v2, "stringWithFormat:", CFSTR("uid:%llu, %s, %s"), v4, *(_QWORD *)(v7 + 72 * v8 + 56), *(_QWORD *)(*((_QWORD *)this + 2) + 16));
}

void sub_19F7C2CA4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

id md::TransitLine::debugString(uint64_t a1, unsigned int a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const gss::FeatureAttributeSet *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  float32x2_t *v26;
  int32x2_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];
  unsigned __int8 v32;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1 + 64);
  v6 = (uint64_t *)(v5 + 184 * a2);
  if (!*((_BYTE *)v6 + 176))
  {
    v7 = *v6;
    if (*v6)
    {
      v8 = (std::__shared_weak_count *)v6[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v30 = v8;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      else
      {
        v30 = 0;
      }
      v31[0] = 0;
      v31[1] = 0;
      v29 = v7;
      v32 = 0;
      v12 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v31);
      v32 = v12;
      if (v8)
      {
        v14 = (unint64_t *)&v8->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v12 = v32;
      }
      if (v12)
      {
        v16 = *(_QWORD *)(v29 + 24);
        v17 = *(_QWORD *)(v16 + 16);
        v18 = *(std::__shared_weak_count **)(v16 + 24);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = "";
        if (v17)
        {
          v22 = *(const char **)(v17 + 104);
          if (v22)
            v21 = v22;
        }
        objc_msgSend(v4, "appendFormat:", CFSTR("style:%s\n"), v21);
        if (v18)
        {
          v23 = (unint64_t *)&v18->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      md::HighlightHelper::debugAttributesToString((md::HighlightHelper *)(*v6 + 272), v13);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "appendFormat:", CFSTR("attrs:{%@}\n"), v25);

      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v29);
    }
  }
  if (!*(_BYTE *)(v5 + 184 * a2 + 177))
    objc_msgSend(v4, "appendFormat:", CFSTR("width: fill=%.1f, stroke=%.1f spacing=%.1f\n"), *(float *)(v5 + 184 * a2 + 72), *(float *)(v5 + 184 * a2 + 80), *(float *)(v5 + 184 * a2 + 76));
  v26 = *(float32x2_t **)(a1 + 64);
  v27 = (int32x2_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vmul_f32(v26[3], (float32x2_t)vdup_n_s32(0x437F0000u))), (uint32x2_t)0x1800000010);
  objc_msgSend(v4, "appendFormat:", CFSTR("system=%llu color=%X group=%i z=%i\n"), *(_QWORD *)(a1 + 24), bswap32(vorr_s8((int8x8_t)vdup_lane_s32(v27, 1), (int8x8_t)v27).u32[0] | ((int)(float)(v26[2].f32[1] * 255.0) << 8) | (int)(float)(v26[2].f32[0] * 255.0)), *(unsigned int *)(a1 + 32), v26[12].u32[1]);
  objc_msgSend(v4, "appendFormat:", CFSTR("Merge: SameSys+Color=%i SysThresh=%i Group=%i GroupThresh=%i\n"), v26[10].u8[4], v26[11].u32[0], v26[11].u8[4], v26[12].u32[0]);
  return v4;
}

void sub_19F7C2F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);

  _Unwind_Resume(a1);
}

void md::MuninLabelLayer::~MuninLabelLayer(md::MuninLabelLayer *this)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E4290778;
  v2 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    std::default_delete<md::MuninLabelTileCache>::operator()[abi:nn180100](v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E4290778;
  v2 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    std::default_delete<md::MuninLabelTileCache>::operator()[abi:nn180100](v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninLabelLayer::layout(md::MuninLabelLayer *this, const md::LayoutContext *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  md::MuninLabelLayer *v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t v45;
  uint8x8_t v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *p_shared_weak_owners;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  int8x8_t v98;
  uint8x8_t v99;
  unint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int8x8_t v111;
  unint64_t v112;
  uint8x8_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  char *v121;
  char *v122;
  int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint8x8_t v131;
  uint64_t **v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  float v137;
  float v138;
  _BOOL8 v139;
  unint64_t v140;
  unint64_t v141;
  size_t prime;
  void *v143;
  void *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  size_t v148;
  size_t v149;
  size_t v150;
  _QWORD *v151;
  size_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint8x8_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  size_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t j;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  int8x8_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint8x8_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t **v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  int v222;
  _OWORD v223[2];
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;

  ++*((_DWORD *)this + 18);
  v2 = *((_QWORD *)this + 8);
  if (*(_QWORD *)(v2 + 40))
  {
    v3 = *(_QWORD **)(v2 + 24);
    while (v3)
    {
      v11 = v3;
      v3 = (_QWORD *)*v3;
      v12 = (std::__shared_weak_count *)v11[3];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v2 + 32) + 40))(*(_QWORD *)(v2 + 32), v11, 32);
    }
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)v2 + 8 * i) = 0;
    }
    *(_QWORD *)(v2 + 40) = 0;
  }
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
  {
    v206 = 0;
    v9 = this;
    goto LABEL_38;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = this;
  if (v8.u32[0] > 1uLL)
  {
    v10 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v7 <= 0xC83717EF586624DCLL)
      v10 = 0xC83717EF586624DCLL % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & 0xC83717EF586624DCLL;
  }
  v15 = *(_QWORD **)(*v6 + 8 * v10);
  if (!v15)
    goto LABEL_37;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_37;
  if (v8.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v19 = v16[1];
      if (v19 == 0xC83717EF586624DCLL)
      {
        if (v16[2] == 0xC83717EF586624DCLL)
          goto LABEL_35;
      }
      else if ((v19 & v17) != v10)
      {
        goto LABEL_37;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_37;
    }
  }
  while (1)
  {
    v18 = v16[1];
    if (v18 == 0xC83717EF586624DCLL)
      break;
    if (v18 >= *(_QWORD *)&v7)
      v18 %= *(_QWORD *)&v7;
    if (v18 != v10)
      goto LABEL_37;
LABEL_24:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_37;
  }
  if (v16[2] != 0xC83717EF586624DCLL)
    goto LABEL_24;
LABEL_35:
  v20 = v16[5];
  if (*(_QWORD *)(v20 + 8) == 0xC83717EF586624DCLL)
  {
    v206 = *(_QWORD *)(v20 + 32);
    goto LABEL_38;
  }
LABEL_37:
  v206 = 0;
LABEL_38:
  v21 = 0;
  v22 = 0;
  v222 = 2490405;
  while (2)
  {
    v207 = v21;
    v23 = *((unsigned __int16 *)&v222 + v22);
    md::SceneContext::renderData((md::SceneContext *)&v220, *(_QWORD *)(v206 + 8), v23);
    v24 = v220;
    v25 = v221;
    v210 = v23 - 0x61C8864680B583EBLL;
    v211 = v23;
    v208 = v221;
    while (2)
    {
      v215 = *((_QWORD *)&v24 + 1);
      if ((_QWORD)v24 != v25)
      {
        v213 = v24;
        v26 = *(_QWORD *)(v24 + 112);
        v27 = *(unsigned __int8 **)(v26 + 720);
        v28 = *(_QWORD *)(v26 + 728);
        *(_QWORD *)&v219 = v27;
        *((_QWORD *)&v219 + 1) = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v214 = v26;
        v33 = *(unsigned __int8 *)(v26 + 168);
        v31 = v26 + 168;
        v32 = v33;
        v34 = *(unsigned __int8 *)(v31 + 1);
        v35 = *(_QWORD *)(v31 + 4);
        v36 = (_QWORD *)*((_QWORD *)v9 + 8);
        v37 = v36 + 13;
        v38 = (v34
             - 0x61C8864680B583EBLL
             + ((v33 - 0x61C8864680B583EBLL) << 6)
             + (((unint64_t)v33 - 0x61C8864680B583EBLL) >> 2)) ^ (v33 - 0x61C8864680B583EBLL);
        v39 = v35;
        v40 = ((int)v35 - 0x61C8864680B583EBLL + (v38 << 6) + (v38 >> 2)) ^ v38;
        v212 = v35;
        v41 = HIDWORD(v35);
        v42 = (SHIDWORD(v35) - 0x61C8864680B583EBLL + (v40 << 6) + (v40 >> 2)) ^ v40;
        v43 = v210 + (v42 << 6) + (v42 >> 2);
        v44 = v43 ^ v42;
        v45 = (int8x8_t)v36[9];
        if (v45)
        {
          v46 = (uint8x8_t)vcnt_s8(v45);
          v46.i16[0] = vaddlv_u8(v46);
          if (v46.u32[0] > 1uLL)
          {
            v47 = v43 ^ v42;
            if (v44 >= *(_QWORD *)&v45)
              v47 = v44 % *(_QWORD *)&v45;
          }
          else
          {
            v47 = v44 & (*(_QWORD *)&v45 - 1);
          }
          v48 = *(uint64_t ***)(v36[8] + 8 * v47);
          if (v48)
          {
            v49 = *v48;
            if (v49)
            {
              if (v46.u32[0] < 2uLL)
              {
                v50 = *(_QWORD *)&v45 - 1;
                while (1)
                {
                  v52 = v49[1];
                  if (v52 == v44)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v49 + 17), *((unsigned __int8 *)v49 + 16)) == __PAIR64__(v34, v32)
                      && *((_DWORD *)v49 + 5) == v39
                      && *((_DWORD *)v49 + 6) == (_DWORD)v41
                      && *((unsigned __int16 *)v49 + 20) == v211)
                    {
                      goto LABEL_72;
                    }
                  }
                  else if ((v52 & v50) != v47)
                  {
                    goto LABEL_75;
                  }
                  v49 = (uint64_t *)*v49;
                  if (!v49)
                    goto LABEL_75;
                }
              }
              do
              {
                v51 = v49[1];
                if (v51 == v44)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v49 + 17), *((unsigned __int8 *)v49 + 16)) == __PAIR64__(v34, v32)
                    && *((_DWORD *)v49 + 5) == v39
                    && *((_DWORD *)v49 + 6) == (_DWORD)v41
                    && *((unsigned __int16 *)v49 + 20) == v211)
                  {
LABEL_72:
                    v37 = (uint64_t *)v36[14];
                    v53 = (uint64_t *)v49[6];
                    if (v37 != v53)
                    {
                      v54 = (uint64_t *)v53[1];
                      if (v54 != v37)
                      {
                        v55 = *v53;
                        *(_QWORD *)(v55 + 8) = v54;
                        *(_QWORD *)v53[1] = v55;
                        v56 = *v37;
                        *(_QWORD *)(v56 + 8) = v53;
                        *v53 = v56;
                        *v37 = (uint64_t)v53;
                        v53[1] = (uint64_t)v37;
                        v37 = (uint64_t *)v36[14];
                        v36 = (_QWORD *)*((_QWORD *)v9 + 8);
                      }
                    }
                    break;
                  }
                }
                else
                {
                  if (v51 >= *(_QWORD *)&v45)
                    v51 %= *(_QWORD *)&v45;
                  if (v51 != v47)
                    break;
                }
                v49 = (uint64_t *)*v49;
              }
              while (v49);
            }
          }
        }
LABEL_75:
        if (v37 != v36 + 13)
        {
          v58 = v37[6];
          v57 = v37[7];
          if (v57)
          {
            v59 = (unint64_t *)(v57 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          *(_QWORD *)&v218 = v58;
          *((_QWORD *)&v218 + 1) = v57;
          goto LABEL_80;
        }
        v76 = *v27;
        v77 = (std::__shared_weak_count *)operator new(0x208uLL);
        v77->__shared_owners_ = 0;
        v78 = (unint64_t *)&v77->__shared_owners_;
        v77->__shared_weak_owners_ = 0;
        v77->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB8D0;
        v79 = (std::__shared_weak_count_vtbl *)&v77[1];
        md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v77[1], (const QuadTile *)v31);
        v77[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4292B58;
        BYTE5(v77[21].__shared_owners_) = v76;
        BYTE2(v77[6].__shared_owners_) = v76 == 7;
        shared_owners = (std::__shared_weak_count *)v77[4].__shared_owners_;
        if (!shared_owners)
        {
          do
            v84 = __ldxr(v78);
          while (__stxr(v84 + 1, v78));
          p_shared_weak_owners = (unint64_t *)&v77->__shared_weak_owners_;
          do
            v86 = __ldxr(p_shared_weak_owners);
          while (__stxr(v86 + 1, p_shared_weak_owners));
          v77[4].__vftable = v79;
          v77[4].__shared_owners_ = (uint64_t)v77;
          goto LABEL_108;
        }
        if (shared_owners->__shared_owners_ == -1)
        {
          do
            v81 = __ldxr(v78);
          while (__stxr(v81 + 1, v78));
          v82 = (unint64_t *)&v77->__shared_weak_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
          v77[4].__vftable = v79;
          v77[4].__shared_owners_ = (uint64_t)v77;
          std::__shared_weak_count::__release_weak(shared_owners);
          do
LABEL_108:
            v87 = __ldaxr(v78);
          while (__stlxr(v87 - 1, v78));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        *(_QWORD *)&v218 = v77 + 1;
        *((_QWORD *)&v218 + 1) = v77;
        v94 = *((_QWORD *)this + 8) + 56;
        v217 = v77;
        v95 = (unint64_t *)&v77->__shared_owners_;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
        *(_QWORD *)&v223[0] = v77 + 1;
        *((_QWORD *)&v223[0] + 1) = v77;
        do
          v97 = __ldxr(v95);
        while (__stxr(v97 + 1, v95));
        v98 = *(int8x8_t *)(v94 + 16);
        if (v98)
        {
          v99 = (uint8x8_t)vcnt_s8(v98);
          v99.i16[0] = vaddlv_u8(v99);
          if (v99.u32[0] > 1uLL)
          {
            v100 = v44;
            if (v44 >= *(_QWORD *)&v98)
              v100 = v44 % *(_QWORD *)&v98;
          }
          else
          {
            v100 = v44 & (*(_QWORD *)&v98 - 1);
          }
          v101 = *(uint64_t ***)(*(_QWORD *)(v94 + 8) + 8 * v100);
          if (v101)
          {
            v102 = *v101;
            if (*v101)
            {
              if (v99.u32[0] < 2uLL)
              {
                v103 = *(_QWORD *)&v98 - 1;
                while (1)
                {
                  v105 = v102[1];
                  if (v105 == v44)
                  {
                    if (*((unsigned __int8 *)v102 + 16) == v32
                      && *((unsigned __int8 *)v102 + 17) == (_DWORD)v34
                      && *((_DWORD *)v102 + 5) == v39
                      && *((_DWORD *)v102 + 6) == (_DWORD)v41
                      && *((unsigned __int16 *)v102 + 20) == v211)
                    {
                      goto LABEL_158;
                    }
                  }
                  else if ((v105 & v103) != v100)
                  {
                    goto LABEL_190;
                  }
                  v102 = (uint64_t *)*v102;
                  if (!v102)
                    goto LABEL_190;
                }
              }
              do
              {
                v104 = v102[1];
                if (v104 == v44)
                {
                  if (*((unsigned __int8 *)v102 + 16) == v32
                    && *((unsigned __int8 *)v102 + 17) == (_DWORD)v34
                    && *((_DWORD *)v102 + 5) == v39
                    && *((_DWORD *)v102 + 6) == (_DWORD)v41
                    && *((unsigned __int16 *)v102 + 20) == v211)
                  {
LABEL_158:
                    v106 = (uint64_t *)v102[6];
                    v107 = *v106;
                    *(_QWORD *)(v107 + 8) = v106[1];
                    *(_QWORD *)v106[1] = v107;
                    --*(_QWORD *)(v94 + 64);
                    v108 = (std::__shared_weak_count *)v106[7];
                    if (v108)
                    {
                      v109 = (unint64_t *)&v108->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    operator delete(v106);
                    v111 = *(int8x8_t *)(v94 + 16);
                    v112 = v102[1];
                    v113 = (uint8x8_t)vcnt_s8(v111);
                    v113.i16[0] = vaddlv_u8(v113);
                    if (v113.u32[0] > 1uLL)
                    {
                      if (v112 >= *(_QWORD *)&v111)
                        v112 %= *(_QWORD *)&v111;
                    }
                    else
                    {
                      v112 &= *(_QWORD *)&v111 - 1;
                    }
                    v114 = *(_QWORD *)(v94 + 8);
                    v115 = *(uint64_t **)(v114 + 8 * v112);
                    do
                    {
                      v116 = v115;
                      v115 = (uint64_t *)*v115;
                    }
                    while (v115 != v102);
                    if (v116 == (uint64_t *)(v94 + 24))
                      goto LABEL_180;
                    v117 = v116[1];
                    if (v113.u32[0] > 1uLL)
                    {
                      if (v117 >= *(_QWORD *)&v111)
                        v117 %= *(_QWORD *)&v111;
                    }
                    else
                    {
                      v117 &= *(_QWORD *)&v111 - 1;
                    }
                    if (v117 != v112)
                    {
LABEL_180:
                      if (!*v102)
                        goto LABEL_181;
                      v118 = *(_QWORD *)(*v102 + 8);
                      if (v113.u32[0] > 1uLL)
                      {
                        if (v118 >= *(_QWORD *)&v111)
                          v118 %= *(_QWORD *)&v111;
                      }
                      else
                      {
                        v118 &= *(_QWORD *)&v111 - 1;
                      }
                      if (v118 != v112)
LABEL_181:
                        *(_QWORD *)(v114 + 8 * v112) = 0;
                    }
                    v119 = (uint64_t *)*v102;
                    if (*v102)
                    {
                      v120 = v119[1];
                      if (v113.u32[0] > 1uLL)
                      {
                        if (v120 >= *(_QWORD *)&v111)
                          v120 %= *(_QWORD *)&v111;
                      }
                      else
                      {
                        v120 &= *(_QWORD *)&v111 - 1;
                      }
                      if (v120 != v112)
                      {
                        *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v120) = v116;
                        v119 = (uint64_t *)*v102;
                      }
                    }
                    *v116 = (uint64_t)v119;
                    *v102 = 0;
                    --*(_QWORD *)(v94 + 32);
                    operator delete(v102);
                    break;
                  }
                }
                else
                {
                  if (v104 >= *(_QWORD *)&v98)
                    v104 %= *(_QWORD *)&v98;
                  if (v104 != v100)
                    break;
                }
                v102 = (uint64_t *)*v102;
              }
              while (v102);
            }
          }
        }
LABEL_190:
        v121 = (char *)operator new(0x40uLL);
        v122 = v121;
        v123 = v41;
        v121[16] = v32;
        v121[17] = v34;
        *(_QWORD *)(v121 + 20) = v212;
        *((_WORD *)v121 + 20) = v211;
        v124 = (std::__shared_weak_count *)*((_QWORD *)&v223[0] + 1);
        *((_QWORD *)v121 + 6) = *(_QWORD *)&v223[0];
        *((_QWORD *)v121 + 7) = v124;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v127 = v94 + 48;
        *(_QWORD *)v121 = v94 + 48;
        v128 = *(_QWORD **)(v94 + 56);
        *((_QWORD *)v121 + 1) = v128;
        *v128 = v121;
        v129 = *(_QWORD *)(v94 + 64) + 1;
        *(_QWORD *)(v94 + 56) = v121;
        *(_QWORD *)(v94 + 64) = v129;
        v130 = *(_QWORD *)(v94 + 16);
        if (v130)
        {
          v131 = (uint8x8_t)vcnt_s8((int8x8_t)v130);
          v131.i16[0] = vaddlv_u8(v131);
          if (v131.u32[0] > 1uLL)
          {
            v41 = v44;
            if (v44 >= v130)
              v41 = v44 % v130;
          }
          else
          {
            v41 = v44 & (v130 - 1);
          }
          v132 = *(uint64_t ***)(*(_QWORD *)(v94 + 8) + 8 * v41);
          if (v132)
          {
            v133 = *v132;
            if (v133)
            {
              if (v131.u32[0] < 2uLL)
              {
                while (1)
                {
                  v135 = v133[1];
                  if (v135 == v44)
                  {
                    if (*((unsigned __int8 *)v133 + 16) == v32
                      && *((unsigned __int8 *)v133 + 17) == (_DWORD)v34
                      && *((_DWORD *)v133 + 5) == v39
                      && *((_DWORD *)v133 + 6) == v123
                      && *((unsigned __int16 *)v133 + 20) == v211)
                    {
                      goto LABEL_289;
                    }
                  }
                  else if ((v135 & (v130 - 1)) != v41)
                  {
                    goto LABEL_222;
                  }
                  v133 = (uint64_t *)*v133;
                  if (!v133)
                    goto LABEL_222;
                }
              }
              do
              {
                v134 = v133[1];
                if (v134 == v44)
                {
                  if (*((unsigned __int8 *)v133 + 16) == v32
                    && *((unsigned __int8 *)v133 + 17) == (_DWORD)v34
                    && *((_DWORD *)v133 + 5) == v39
                    && *((_DWORD *)v133 + 6) == v123
                    && *((unsigned __int16 *)v133 + 20) == v211)
                  {
                    goto LABEL_289;
                  }
                }
                else
                {
                  if (v134 >= v130)
                    v134 %= v130;
                  if (v134 != v41)
                    break;
                }
                v133 = (uint64_t *)*v133;
              }
              while (v133);
            }
          }
        }
LABEL_222:
        v136 = operator new(0x38uLL);
        *v136 = 0;
        v136[1] = v44;
        *((_BYTE *)v136 + 16) = v32;
        *((_BYTE *)v136 + 17) = v34;
        *(_QWORD *)((char *)v136 + 20) = v212;
        *((_WORD *)v136 + 20) = v211;
        v136[6] = v122;
        v137 = (float)(unint64_t)(*(_QWORD *)(v94 + 32) + 1);
        v138 = *(float *)(v94 + 40);
        if (!v130 || (float)(v138 * (float)v130) < v137)
        {
          v139 = (v130 & (v130 - 1)) != 0;
          if (v130 < 3)
            v139 = 1;
          v140 = v139 | (2 * v130);
          v141 = vcvtps_u32_f32(v137 / v138);
          if (v140 <= v141)
            prime = v141;
          else
            prime = v140;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v130 = *(_QWORD *)(v94 + 16);
          }
          if (prime <= v130)
          {
            if (prime < v130)
            {
              v155 = vcvtps_u32_f32((float)*(unint64_t *)(v94 + 32) / *(float *)(v94 + 40));
              if (v130 < 3
                || (v156 = (uint8x8_t)vcnt_s8((int8x8_t)v130), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
              {
                v155 = std::__next_prime(v155);
              }
              else
              {
                v157 = 1 << -(char)__clz(v155 - 1);
                if (v155 >= 2)
                  v155 = v157;
              }
              if (prime <= v155)
                prime = v155;
              if (prime < v130)
              {
                if (prime)
                  goto LABEL_234;
                v162 = *(void **)(v94 + 8);
                *(_QWORD *)(v94 + 8) = 0;
                if (v162)
                  operator delete(v162);
                *(_QWORD *)(v94 + 16) = 0;
              }
            }
            goto LABEL_274;
          }
LABEL_234:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v143 = operator new(8 * prime);
          v144 = *(void **)(v94 + 8);
          *(_QWORD *)(v94 + 8) = v143;
          if (v144)
            operator delete(v144);
          v145 = 0;
          *(_QWORD *)(v94 + 16) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v145++) = 0;
          while (prime != v145);
          v147 = v94 + 24;
          v146 = *(_QWORD **)(v94 + 24);
          if (!v146)
            goto LABEL_274;
          v148 = v146[1];
          v149 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v150 = v148 & v149;
            *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v150) = v147;
            while (1)
            {
              v151 = (_QWORD *)*v146;
              if (!*v146)
                break;
              v152 = v151[1] & v149;
              if (v152 == v150)
              {
                v146 = (_QWORD *)*v146;
              }
              else
              {
                v153 = *(_QWORD *)(v94 + 8);
                if (*(_QWORD *)(v153 + 8 * v152))
                {
                  *v146 = *v151;
                  v154 = 8 * v152;
                  *v151 = **(_QWORD **)(*(_QWORD *)(v94 + 8) + v154);
                  **(_QWORD **)(*(_QWORD *)(v94 + 8) + v154) = v151;
                }
                else
                {
                  *(_QWORD *)(v153 + 8 * v152) = v146;
                  v146 = v151;
                  v150 = v152;
                }
              }
            }
            goto LABEL_274;
          }
          if (v148 >= prime)
            v148 %= prime;
          *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v148) = v147;
          v158 = (_QWORD *)*v146;
          if (!*v146)
          {
LABEL_274:
            v130 = *(_QWORD *)(v94 + 16);
            if ((v130 & (v130 - 1)) != 0)
            {
              if (v44 >= v130)
                v41 = v44 % v130;
              else
                v41 = v44;
            }
            else
            {
              v41 = (v130 - 1) & v44;
            }
            goto LABEL_279;
          }
          while (2)
          {
            v160 = v158[1];
            if (v160 >= prime)
              v160 %= prime;
            if (v160 != v148)
            {
              v161 = *(_QWORD *)(v94 + 8);
              if (!*(_QWORD *)(v161 + 8 * v160))
              {
                *(_QWORD *)(v161 + 8 * v160) = v146;
LABEL_260:
                v146 = v158;
                v158 = (_QWORD *)*v158;
                v148 = v160;
                if (!v158)
                  goto LABEL_274;
                continue;
              }
              *v146 = *v158;
              v159 = 8 * v160;
              *v158 = **(_QWORD **)(*(_QWORD *)(v94 + 8) + v159);
              **(_QWORD **)(*(_QWORD *)(v94 + 8) + v159) = v158;
              v158 = v146;
            }
            break;
          }
          v160 = v148;
          goto LABEL_260;
        }
LABEL_279:
        v163 = *(_QWORD *)(v94 + 8);
        v164 = *(_QWORD **)(v163 + 8 * v41);
        if (v164)
        {
          *v136 = *v164;
          goto LABEL_287;
        }
        *v136 = *(_QWORD *)(v94 + 24);
        *(_QWORD *)(v94 + 24) = v136;
        *(_QWORD *)(v163 + 8 * v41) = v94 + 24;
        if (*v136)
        {
          v165 = *(_QWORD *)(*v136 + 8);
          if ((v130 & (v130 - 1)) != 0)
          {
            if (v165 >= v130)
              v165 %= v130;
          }
          else
          {
            v165 &= v130 - 1;
          }
          v164 = (_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v165);
LABEL_287:
          *v164 = v136;
        }
        ++*(_QWORD *)(v94 + 32);
        v124 = (std::__shared_weak_count *)*((_QWORD *)&v223[0] + 1);
LABEL_289:
        if (v124)
        {
          v166 = (unint64_t *)&v124->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        for (j = *(_QWORD *)(v94 + 64); j > *(_QWORD *)v94; j = *(_QWORD *)(v94 + 64))
        {
          v169 = *(uint64_t **)v127;
          v170 = *(unsigned __int8 *)(*(_QWORD *)v127 + 17);
          v171 = *(int *)(*(_QWORD *)v127 + 20);
          v172 = *(int *)(*(_QWORD *)v127 + 24);
          v173 = *(unsigned __int8 *)(*(_QWORD *)v127 + 16);
          v174 = *(unsigned __int16 *)(*(_QWORD *)v127 + 40);
          v175 = *(std::__shared_weak_count **)(*(_QWORD *)v127 + 56);
          if (v175)
          {
            v176 = (unint64_t *)&v175->__shared_owners_;
            do
              v177 = __ldxr(v176);
            while (__stxr(v177 + 1, v176));
            v169 = *(uint64_t **)(v94 + 48);
            v178 = (std::__shared_weak_count *)v169[7];
            j = *(_QWORD *)(v94 + 64);
          }
          else
          {
            v178 = 0;
          }
          v179 = *v169;
          *(_QWORD *)(v179 + 8) = v169[1];
          *(_QWORD *)v169[1] = v179;
          *(_QWORD *)(v94 + 64) = j - 1;
          if (v178)
          {
            v180 = (unint64_t *)&v178->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          operator delete(v169);
          v182 = *(int8x8_t *)(v94 + 16);
          if (v182)
          {
            v183 = (v170
                  - 0x61C8864680B583EBLL
                  + ((v173 - 0x61C8864680B583EBLL) << 6)
                  + ((unint64_t)(v173 - 0x61C8864680B583EBLL) >> 2)) ^ (v173 - 0x61C8864680B583EBLL);
            v184 = (v171 - 0x61C8864680B583EBLL + (v183 << 6) + (v183 >> 2)) ^ v183;
            v185 = (v172 - 0x61C8864680B583EBLL + (v184 << 6) + (v184 >> 2)) ^ v184;
            v186 = (v174 - 0x61C8864680B583EBLL + (v185 << 6) + (v185 >> 2)) ^ v185;
            v187 = (uint8x8_t)vcnt_s8(v182);
            v187.i16[0] = vaddlv_u8(v187);
            if (v187.u32[0] > 1uLL)
            {
              v188 = v186;
              if (v186 >= *(_QWORD *)&v182)
                v188 = v186 % *(_QWORD *)&v182;
            }
            else
            {
              v188 = v186 & (*(_QWORD *)&v182 - 1);
            }
            v189 = *(_QWORD *)(v94 + 8);
            v190 = *(uint64_t ***)(v189 + 8 * v188);
            if (v190)
            {
              v191 = *v190;
              if (*v190)
              {
                v192 = *(_QWORD *)&v182 - 1;
                if (v187.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v193 = v191[1];
                    if (v193 == v186)
                    {
                      if (*((unsigned __int8 *)v191 + 16) == (_DWORD)v173
                        && *((unsigned __int8 *)v191 + 17) == (_DWORD)v170
                        && *((_DWORD *)v191 + 5) == (_DWORD)v171
                        && *((_DWORD *)v191 + 6) == (_DWORD)v172
                        && *((unsigned __int16 *)v191 + 20) == v174)
                      {
                        goto LABEL_324;
                      }
                    }
                    else if ((v193 & v192) != v188)
                    {
                      goto LABEL_362;
                    }
                    v191 = (uint64_t *)*v191;
                    if (!v191)
                      goto LABEL_362;
                  }
                }
                do
                {
                  v194 = v191[1];
                  if (v194 == v186)
                  {
                    if (*((unsigned __int8 *)v191 + 16) == (_DWORD)v173
                      && *((unsigned __int8 *)v191 + 17) == (_DWORD)v170
                      && *((_DWORD *)v191 + 5) == (_DWORD)v171
                      && *((_DWORD *)v191 + 6) == (_DWORD)v172
                      && *((unsigned __int16 *)v191 + 20) == v174)
                    {
LABEL_324:
                      if (v187.u32[0] > 1uLL)
                      {
                        if (v186 >= *(_QWORD *)&v182)
                          v186 %= *(_QWORD *)&v182;
                      }
                      else
                      {
                        v186 &= v192;
                      }
                      v195 = *(uint64_t **)(v189 + 8 * v186);
                      do
                      {
                        v196 = v195;
                        v195 = (uint64_t *)*v195;
                      }
                      while (v195 != v191);
                      if (v196 == (uint64_t *)(v94 + 24))
                        goto LABEL_352;
                      v197 = v196[1];
                      if (v187.u32[0] > 1uLL)
                      {
                        if (v197 >= *(_QWORD *)&v182)
                          v197 %= *(_QWORD *)&v182;
                      }
                      else
                      {
                        v197 &= v192;
                      }
                      if (v197 != v186)
                      {
LABEL_352:
                        if (!*v191)
                          goto LABEL_353;
                        v198 = *(_QWORD *)(*v191 + 8);
                        if (v187.u32[0] > 1uLL)
                        {
                          if (v198 >= *(_QWORD *)&v182)
                            v198 %= *(_QWORD *)&v182;
                        }
                        else
                        {
                          v198 &= v192;
                        }
                        if (v198 != v186)
LABEL_353:
                          *(_QWORD *)(v189 + 8 * v186) = 0;
                      }
                      v199 = (uint64_t *)*v191;
                      if (*v191)
                      {
                        v200 = v199[1];
                        if (v187.u32[0] > 1uLL)
                        {
                          if (v200 >= *(_QWORD *)&v182)
                            v200 %= *(_QWORD *)&v182;
                        }
                        else
                        {
                          v200 &= v192;
                        }
                        if (v200 != v186)
                        {
                          *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v200) = v196;
                          v199 = (uint64_t *)*v191;
                        }
                      }
                      *v196 = (uint64_t)v199;
                      --*(_QWORD *)(v94 + 32);
                      operator delete(v191);
                      break;
                    }
                  }
                  else
                  {
                    if (v194 >= *(_QWORD *)&v182)
                      v194 %= *(_QWORD *)&v182;
                    if (v194 != v188)
                      break;
                  }
                  v191 = (uint64_t *)*v191;
                }
                while (v191);
              }
            }
          }
LABEL_362:
          if (v175)
          {
            v201 = (unint64_t *)&v175->__shared_owners_;
            do
              v202 = __ldaxr(v201);
            while (__stlxr(v202 - 1, v201));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
        }
        v25 = v208;
        v9 = this;
        if (v217)
        {
          v203 = (unint64_t *)&v217->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
LABEL_80:
        v61 = *(_QWORD *)(v214 + 736);
        v62 = *(std::__shared_weak_count **)(v214 + 744);
        v216 = v62;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        md::LabelMapTile::loadResourcesTile(v218, v61, v62);
        v230 = 0u;
        v231 = 0u;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v224 = 0u;
        v225 = 0u;
        memset(v223, 0, sizeof(v223));
        if (*((_QWORD *)&v219 + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v224 = v219;
        md::LabelMapTile::loadLabelTiles((md::LabelMapTile *)v218, (const md::LabelTileSet *)v223);
        md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)v223);
        v67 = *((_QWORD *)v9 + 8);
        v223[0] = v218;
        if (*((_QWORD *)&v218 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>(v67, v218, (uint64_t)v223);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v223[0] + 1);
        if (!*((_QWORD *)&v223[0] + 1))
          goto LABEL_93;
        v71 = (unint64_t *)(*((_QWORD *)&v223[0] + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          v73 = v216;
          if (v216)
          {
LABEL_94:
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
        else
        {
LABEL_93:
          v73 = v216;
          if (v216)
            goto LABEL_94;
        }
        if (!*((_QWORD *)&v218 + 1))
          goto LABEL_117;
        v88 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v218 + 1) + 16))(*((_QWORD *)&v218 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v218 + 1));
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
          if (*((_QWORD *)&v219 + 1))
            goto LABEL_118;
        }
        else
        {
LABEL_117:
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
          if (*((_QWORD *)&v219 + 1))
          {
LABEL_118:
            v91 = (unint64_t *)&v90->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
        }
        v93 = v213 + 144;
        if (v213 + 144 != v215)
        {
          while (!*(_QWORD *)(v93 + 112))
          {
            v93 += 144;
            if (v93 == v215)
            {
              v93 = v215;
              break;
            }
          }
        }
        *((_QWORD *)&v24 + 1) = v215;
        *(_QWORD *)&v24 = v93;
        continue;
      }
      break;
    }
    v21 = 1;
    v22 = 1;
    if ((v207 & 1) == 0)
      continue;
    break;
  }
  md::LabelManager::layout(*((_QWORD *)v9 + 6), a2, *((_QWORD *)v9 + 8));
}

void sub_19F7C4588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  operator delete(v37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

_QWORD *md::MuninLabelLayer::clearScene(md::MuninLabelLayer *this)
{
  md::LabelManager *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (md::LabelManager *)*((_QWORD *)this + 6);
  v4[0] = &off_1E42C9A28;
  v4[1] = v1;
  v4[2] = 0;
  v5 = v4;
  md::LabelManager::queueCommand(v1, 19, 1, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_19F7C469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::MuninLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB8D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB8D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::default_delete<md::MuninLabelTileCache>::operator()[abi:nn180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a1[15])
  {
    v2 = a1 + 13;
    v3 = a1[13];
    v4 = (uint64_t *)a1[14];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[15] = 0;
    if (v4 != a1 + 13)
    {
      do
      {
        v15 = (uint64_t *)v4[1];
        v16 = (std::__shared_weak_count *)v4[7];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        operator delete(v4);
        v4 = v15;
      }
      while (v15 != v2);
    }
  }
  v6 = (_QWORD *)a1[10];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[8];
  a1[8] = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)a1[3];
  while (v9)
  {
    v11 = v9;
    v9 = (_QWORD *)*v9;
    v12 = (std::__shared_weak_count *)v11[3];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v11, 32);
  }
  v10 = *a1;
  *a1 = 0;
  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v10, 8 * a1[1]);
  JUMPOUT(0x1A1AF4E00);
}

unint64_t altitude::TileKey::getGEOTileKey(unsigned int *a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if (v3 > 0x1F)
    v4 = a1[5];
  else
    v4 = (1 << v3) + ~a1[5];
  v5 = *((_QWORD *)a1 + 3);
  v6 = *a1;
  v7 = *(double *)(a2 + 32);
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "activeTileGroup");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v7 <= 1.0)
    v11 = 1;
  else
    v11 = 2;
  if ((_DWORD)v6 == 33 || (_DWORD)v6 == 17)
    v13 = 1;
  else
    v13 = v11;
  objc_msgSend(v9, "activeTileSetForTileType:scale:", v6, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  switch((int)v6)
  {
    case 1:
    case 7:
    case 12:
    case 13:
    case 17:
    case 20:
    case 22:
    case 26:
    case 33:
    case 45:
    case 68:
      objc_msgSend(v14, "size");
      objc_msgSend(v14, "scale");
      v15 = GEOTileKeyMake();
      if (v6 <= 0x19 && ((1 << v6) & 0x200101C) != 0)
        v16 = 128;
      else
        v16 = (unint64_t)((_DWORD)v6 == 26) << 7;
      v6 = v16 | v15 & 0xFFFFFFFFFFFFFF7FLL;
      break;
    case 14:
      v19 = a1[2];
      objc_msgSend(v14, "size");
      v20 = a1[1];
      LOBYTE(v22) = GEOTileKeyMakeEmpty();
      *((_QWORD *)&v22 + 1) = v21;
      *(_QWORD *)((char *)&v22 + 1) = v19 & 0xFF000000FFFFFFFFLL | ((*(_QWORD *)&v20 & 0xFFFFFFLL) << 32) | 0xE00000000000000;
      v6 = v22;
      break;
    case 15:
    case 42:
    case 43:
    case 44:
    case 52:
      objc_msgSend(v14, "size");
      objc_msgSend(v14, "scale");
      LOBYTE(v22) = GEOTileKeyMakeEmpty();
      *(_QWORD *)((char *)&v22 + 1) = v3 & 0x3F | ((unint64_t)(v4 & 0x3FFFFFF) << 32) | ((_DWORD)v5 << 6) | (HIDWORD(v5) << 58);
      v6 = v22;
      break;
    case 16:
      objc_msgSend(v14, "size");
      objc_msgSend(v14, "scale");
      LOBYTE(v22) = GEOTileKeyMakeEmpty();
      *(_QWORD *)((char *)&v22 + 1) = v3 & 0x3F | ((unint64_t)(v4 & 0x3FFFFFF) << 32) | ((_DWORD)v5 << 6);
      v6 = v22;
      break;
    default:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v18 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v22) = 67109120;
        DWORD1(v22) = v6;
        _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_ERROR, "Unhandled tile style found: %d", (uint8_t *)&v22, 8u);
      }

      break;
  }

  return v6;
}

void sub_19F7C4C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t altitude::TileKey::toUrlString(_BYTE *a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  const char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  size_t v56;
  unint64_t v57;
  const void **v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _QWORD v65[2];
  _QWORD v66[3];
  _QWORD v67[3];
  uint64_t v68;
  unint64_t v69;
  void *__p;
  char v71;
  unint64_t v72;
  int v73;
  uint64_t v74;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v65);
  v10 = *(unsigned __int8 *)(a4 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 == 15)
  {
    if (v11 >= 0)
      v23 = (uint64_t *)a4;
    else
      v23 = *(uint64_t **)a4;
    if (*v23 == 0x756F7365726F6567 && *(uint64_t *)((char *)v23 + 7) == 0x6833635F65637275)
    {
      v38 = *(char *)(a3 + 23);
      if (v38 >= 0)
        v39 = a3;
      else
        v39 = *(_QWORD *)a3;
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(a3 + 23);
      else
        v40 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, v39, v40);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"_", 1);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"_", 1);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"_", 1);
      std::ostream::operator<<();
      if (a5)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"_", 1);
        std::ostream::operator<<();
      }
      v43 = ".c3h";
    }
    else
    {
      v25 = *v23;
      v26 = *(uint64_t *)((char *)v23 + 7);
      if (v25 != 0x756F7365726F6567 || v26 != 0x6233635F65637275)
        goto LABEL_32;
      v44 = *(char *)(a3 + 23);
      if (v44 >= 0)
        v45 = a3;
      else
        v45 = *(_QWORD *)a3;
      if (v44 >= 0)
        v46 = *(unsigned __int8 *)(a3 + 23);
      else
        v46 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, v45, v46);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"_", 1);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)"_", 1);
      v48 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)"_", 1);
      std::ostream::operator<<();
      if (a5)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"_", 1);
        std::ostream::operator<<();
      }
      v43 = ".c3b";
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)v43, 4);
    goto LABEL_68;
  }
  if (v10 == 5)
  {
    v12 = v11 >= 0 ? a4 : *(_QWORD *)a4;
    v13 = *(_DWORD *)v12;
    v14 = *(unsigned __int8 *)(v12 + 4);
    if (v13 == 1819308129 && v14 == 101)
    {
      v16 = *(char *)(a3 + 23);
      if (v16 >= 0)
        v17 = a3;
      else
        v17 = *(_QWORD *)a3;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a3 + 23);
      else
        v18 = *(_QWORD *)(a3 + 8);
      if (*a2 == 14)
      {
        v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, v17, v18);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"style=", 6);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"&region=", 8);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"&v=", 3);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"&part=", 6);
      }
      else
      {
        v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, v17, v18);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"style=", 6);
        v50 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"&region=", 8);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)"&v=", 3);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)"&z=", 3);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"&x=", 3);
        v54 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"&y=", 3);
        v55 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)"&h=", 3);
      }
      std::ostream::operator<<();
      goto LABEL_68;
    }
  }
LABEL_32:
  v28 = *(char *)(a3 + 23);
  if (v28 >= 0)
    v29 = a3;
  else
    v29 = *(_QWORD *)a3;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, v29, v30);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"/", 1);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"/map_", 5);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)"_", 1);
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"_", 1);
  std::ostream::operator<<();
  if (a5)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"_", 1);
    std::ostream::operator<<();
  }
  v35 = *(char *)(a4 + 23);
  if (v35 >= 0)
    v36 = a4;
  else
    v36 = *(_QWORD *)a4;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a4 + 23);
  else
    v37 = *(_QWORD *)(a4 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, v36, v37);
LABEL_68:
  if ((v73 & 0x10) != 0)
  {
    v57 = v72;
    if (v72 < v69)
    {
      v72 = v69;
      v57 = v69;
    }
    v58 = (const void **)&v68;
  }
  else
  {
    if ((v73 & 8) == 0)
    {
      v56 = 0;
      a1[23] = 0;
      goto LABEL_83;
    }
    v58 = (const void **)v67;
    v57 = v67[2];
  }
  v59 = *v58;
  v56 = v57 - (_QWORD)*v58;
  if (v56 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v56 >= 0x17)
  {
    v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v60 = v56 | 7;
    v61 = v60 + 1;
    v62 = operator new(v60 + 1);
    *((_QWORD *)a1 + 1) = v56;
    *((_QWORD *)a1 + 2) = v61 | 0x8000000000000000;
    *(_QWORD *)a1 = v62;
    a1 = v62;
    goto LABEL_82;
  }
  a1[23] = v56;
  if (v56)
LABEL_82:
    memmove(a1, v59, v56);
LABEL_83:
  a1[v56] = 0;
  v65[0] = *MEMORY[0x1E0DE4F50];
  v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v65 + *(_QWORD *)(v65[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v66[0] = v63;
  v66[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v71 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v74);
}

void sub_19F7C5304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void altitude::TriggerManager::Trigger::~Trigger(altitude::TriggerManager::Trigger *this)
{
  altitude::TriggerManager::Trigger::~Trigger(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E42C4428;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 223) < 0)
  {
    operator delete(*((void **)this + 25));
    if ((*((char *)this + 199) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*((char *)this + 175) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 22));
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 151) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*((void **)this + 19));
  if ((*((char *)this + 151) & 0x80000000) == 0)
  {
LABEL_7:
    v3 = (void *)*((_QWORD *)this + 13);
    if (!v3)
      return;
    goto LABEL_8;
  }
LABEL_13:
  operator delete(*((void **)this + 16));
  v3 = (void *)*((_QWORD *)this + 13);
  if (!v3)
    return;
LABEL_8:
  *((_QWORD *)this + 14) = v3;
  operator delete(v3);
}

void altitude::TriggerManager::~TriggerManager(altitude::TriggerManager *this)
{
  altitude::TriggerManager::~TriggerManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void *v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void (**v20)(_QWORD);
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  const void *v29[2];
  char v30;

  *(_QWORD *)this = &off_1E42C4448;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v30 = 8;
    strcpy((char *)v29, "triggers");
    altitude::ManifestManager::unregisterListener(v2, v29, (unint64_t)this);
  }
  v3 = (char *)*((_QWORD *)this + 11);
  v4 = (char *)this + 96;
  if (v3 != (char *)this + 96)
  {
    do
    {
      v21 = (_QWORD *)*((_QWORD *)v3 + 5);
      v22 = v21[6];
      if (v22)
        karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::clear(v22);
      v21[6] = 0;
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      v23 = (char *)*((_QWORD *)v3 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char *)*((_QWORD *)v3 + 2);
          v14 = *(_QWORD *)v24 == (_QWORD)v3;
          v3 = v24;
        }
        while (!v14);
      }
      v3 = v24;
    }
    while (v24 != v4);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 12));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v4;
  v5 = (char *)*((_QWORD *)this + 8);
  v6 = (char *)this + 72;
  if (v5 != (char *)this + 72)
  {
    do
    {
      v25 = (_QWORD *)*((_QWORD *)v5 + 5);
      v26 = v25[6];
      if (v26)
        karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::clear(v26);
      v25[6] = 0;
      (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      v27 = (char *)*((_QWORD *)v5 + 1);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(char **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (char *)*((_QWORD *)v5 + 2);
          v14 = *(_QWORD *)v28 == (_QWORD)v5;
          v5 = v28;
        }
        while (!v14);
      }
      v5 = v28;
    }
    while (v28 != v6);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 9));
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = v6;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 14));
  v7 = *((_QWORD *)this + 14);
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 14) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 12));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 9));
  v8 = (void (***)(_QWORD))*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = (void (***)(_QWORD))*((_QWORD *)this + 6);
    v10 = (void *)*((_QWORD *)this + 5);
    if (v9 != v8)
    {
      v11 = v9 - 30;
      v12 = v9 - 30;
      do
      {
        v13 = *v12;
        v12 -= 30;
        (*v13)(v11);
        v14 = v11 == v8;
        v11 = v12;
      }
      while (!v14);
      v10 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v8;
    operator delete(v10);
  }
  v15 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  if (v15)
  {
    v16 = (void (***)(_QWORD))*((_QWORD *)this + 3);
    v17 = (void *)*((_QWORD *)this + 2);
    if (v16 != v15)
    {
      v18 = v16 - 30;
      v19 = v16 - 30;
      do
      {
        v20 = *v19;
        v19 -= 30;
        (*v20)(v18);
        v14 = v18 == v15;
        v18 = v19;
      }
      while (!v14);
      v17 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v15;
    operator delete(v17);
  }
}

void altitude::TriggerManager::tagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  _QWORD *v10;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  const xmlChar *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const xmlChar *v23;
  int v24;
  uint64_t v25;
  const xmlChar *v26;
  int v27;
  uint64_t v28;
  const xmlChar *v29;
  int v30;
  NSObject *v31;
  xmlChar *v32;
  xmlChar *v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint32_t v37;
  xmlChar *v38;
  xmlChar *v39;
  size_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  xmlChar *v46;
  xmlChar *v47;
  xmlChar *v48;
  xmlChar *v49;
  xmlChar *v50;
  xmlChar *v51;
  NSObject *v52;
  xmlChar *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  void *v58;
  void **v59;
  xmlChar *v60;
  xmlChar *v61;
  xmlChar *v62;
  std::string *v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::ios_base *v69;
  std::string *v70;
  std::string::size_type size;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD **v75;
  std::string::size_type v76;
  std::string *p_dst;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  const void **v90;
  uint64_t v91;
  uint64_t v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  xmlChar *v97;
  xmlChar *v98;
  xmlChar *v99;
  double v100;
  double v101;
  __double2 v102;
  double sinval;
  float64x2_t v104;
  __double2 v105;
  double v106;
  std::string *v107;
  size_t v108;
  double v109;
  __int128 v110;
  std::string *v111;
  size_t v112;
  std::string::size_type v113;
  char *v114;
  std::string *v115;
  size_t v116;
  size_t v117;
  std::string::size_type v118;
  std::string::size_type v119;
  std::string *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  const xmlChar *v150;
  int v151;
  unint64_t v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  std::string *v156;
  std::string *v157;
  std::string *v158;
  size_t v159;
  size_t v160;
  std::string::size_type v161;
  std::string *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::ios_base *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  size_t v176;
  std::string::size_type v177;
  std::string *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  std::ios_base *v184;
  uint64_t v185;
  size_t v186;
  size_t v187;
  __int128 *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::ios_base *v194;
  uint64_t v195;
  _WORD *v196;
  unsigned __int8 v197;
  __int16 v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  unint64_t v211;
  __int128 v212;
  __int16 v213;
  std::ios_base *v214;
  _QWORD *v215;
  _QWORD *v216;
  size_t v217;
  __int128 *v218;
  unint64_t v219;
  const void **v220;
  const void *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  std::string::size_type v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  unsigned int v229;
  int v230;
  void **v231;
  std::string *v232;
  size_t v233;
  float v234;
  uint64_t *v235;
  uint64_t **v236;
  uint64_t **v237;
  uint64_t **v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t **v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t **v248;
  uint64_t *v249;
  uint64_t **v250;
  unsigned int v251;
  uint64_t *v252;
  _QWORD *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t **v257;
  uint64_t **v258;
  unsigned int v259;
  uint64_t *v260;
  uint64_t *v261;
  int v262;
  uint64_t *v263;
  char *v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  _BYTE *v271;
  uint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  _OWORD *v275;
  char *v276;
  uint64_t v277;
  __int128 v278;
  int v279;
  altitude::TriggerManager::Trigger *v280;
  altitude::TriggerManager::Trigger *v281;
  void *v282;
  uint64_t v283;
  uint64_t **v284;
  uint64_t v285;
  void *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t **v293;
  unsigned int v294;
  uint64_t *v295;
  uint64_t *v296;
  int64_t v297;
  char *v298;
  uint64_t v299;
  unsigned int *v300;
  uint64_t *v301;
  uint64_t *v302;
  unsigned int *v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  uint64_t *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t *v320;
  uint64_t **v321;
  uint64_t **v322;
  unsigned int v323;
  uint64_t *v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t *v327;
  uint64_t v328;
  int64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t *v335;
  uint64_t **v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t ***v344;
  double v345;
  double cosval;
  uint64_t v347;
  uint64_t v348;
  BOOL v349;
  BOOL v350;
  BOOL v351;
  char *__s;
  char *__sa;
  char *v354;
  char *v355;
  uint64_t v356;
  std::string::size_type v357;
  void *v358;
  void *v359;
  uint64_t v360;
  void *v361;
  std::string::size_type v362;
  uint64_t v363;
  void *v364;
  void *v365;
  _QWORD **v366;
  _QWORD **v367;
  unsigned int v369;
  void *v370;
  altitude::TriggerManager::Trigger **v371;
  __int128 v372;
  unint64_t v373;
  __int128 v374;
  unint64_t v375;
  uint64_t v376;
  _QWORD v377[3];
  uint64_t v378;
  unint64_t v379;
  __int128 v380;
  __int128 v381;
  int v382;
  char *v383;
  std::string __dst;
  _QWORD v385[8];
  __int128 v386;
  unint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390[19];
  uint64_t v391;
  void (**v392)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v393;
  __int128 v394;
  float64x2_t v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  int v400;
  __int128 v401;
  _QWORD v402[4];
  std::string v403[2];
  std::string v404;
  uint64_t v405;
  int v406;
  int v407;
  double v408;
  int v409;
  int v410;
  int v411;
  int v412[2];
  std::string v413;
  std::string v414;
  std::string v415;
  double v416;
  double v417;
  double v418;
  double v419;
  std::string v420;
  std::string v421;
  std::string v422;
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[7];
  uint64_t **v427;
  uint64_t *v428;
  uint64_t v429;
  void *__p[2];
  int64_t v431;
  _QWORD v432[2];
  _QWORD v433[3];
  uint64_t v434;
  unint64_t v435;
  __int128 v436;
  __int128 v437;
  int v438;
  _QWORD v439[22];

  v439[19] = *MEMORY[0x1E0C80C00];
  v4 = *(void (****)(_QWORD))(a1 + 40);
  v371 = (altitude::TriggerManager::Trigger **)(a1 + 40);
  v5 = *(void (****)(_QWORD))(a1 + 48);
  if (v5 != v4)
  {
    v6 = v5 - 30;
    v7 = v5 - 30;
    do
    {
      v8 = *v7;
      v7 -= 30;
      (*v8)(v6);
      v9 = v6 == v4;
      v6 = v7;
    }
    while (!v9);
  }
  v11 = (_QWORD **)(a1 + 88);
  v10 = *(_QWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 48) = v4;
  v12 = (_QWORD *)(a1 + 96);
  if (v10 != (_QWORD *)(a1 + 96))
  {
    do
    {
      v16 = (_QWORD *)v10[5];
      v17 = v16[6];
      if (v17)
        karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::clear(v17);
      v16[6] = 0;
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      v18 = (_QWORD *)v10[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v10[2];
          v9 = *v19 == (_QWORD)v10;
          v10 = v19;
        }
        while (!v9);
      }
      v10 = v19;
    }
    while (v19 != v12);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v12;
  v429 = 0;
  v428 = 0;
  v427 = &v428;
  HIBYTE(v431) = 7;
  strcpy((char *)__p, "trigger");
  if (*(_QWORD *)a3 && (v13 = *(_QWORD *)(*(_QWORD *)a3 + 24)) != 0)
  {
    while (1)
    {
      v14 = v431 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
      v15 = v431 >= 0 ? HIBYTE(v431) : LODWORD(__p[1]);
      if (!xmlStrncmp(*(const xmlChar **)(v13 + 16), v14, v15))
        break;
      v13 = *(_QWORD *)(v13 + 48);
      if (!v13)
        goto LABEL_16;
    }
    memset(&v426[1], 0, 40);
    v426[0] = v13;
  }
  else
  {
LABEL_16:
    v13 = 0;
    memset(v426, 0, 48);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(__p[0]);
    if (!v426[0])
      goto LABEL_566;
    goto LABEL_30;
  }
  if (v13)
  {
LABEL_30:
    v364 = *(void **)(MEMORY[0x1E0DE4F50] + 24);
    v365 = *(void **)(MEMORY[0x1E0DE4F50] + 16);
    v362 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
    v363 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 32);
    v361 = *(void **)(MEMORY[0x1E0DE4F50] + 48);
    v20 = *(void **)"c3meshdata";
    v359 = (void *)*MEMORY[0x1E0DE4F50];
    v360 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 8);
    v357 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v358 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v21 = v426[0];
    v356 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      HIBYTE(v431) = 4;
      strcpy((char *)__p, "data");
      if (v21 && (v22 = *(_QWORD *)(v21 + 24)) != 0)
      {
        while (1)
        {
          v23 = v431 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
          v24 = v431 >= 0 ? HIBYTE(v431) : LODWORD(__p[1]);
          if (!xmlStrncmp(*(const xmlChar **)(v22 + 16), v23, v24))
            break;
          v22 = *(_QWORD *)(v22 + 48);
          if (!v22)
            goto LABEL_43;
        }
        v425[0] = v22;
        memset(&v425[1], 0, 40);
        if (SHIBYTE(v431) < 0)
LABEL_44:
          operator delete(__p[0]);
      }
      else
      {
LABEL_43:
        v22 = 0;
        memset(v425, 0, sizeof(v425));
        if (SHIBYTE(v431) < 0)
          goto LABEL_44;
      }
      HIBYTE(v431) = 5;
      strcpy((char *)__p, "shape");
      if (v426[0] && (v25 = *(_QWORD *)(v426[0] + 24)) != 0)
      {
        while (1)
        {
          v26 = v431 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
          v27 = v431 >= 0 ? HIBYTE(v431) : LODWORD(__p[1]);
          if (!xmlStrncmp(*(const xmlChar **)(v25 + 16), v26, v27))
            break;
          v25 = *(_QWORD *)(v25 + 48);
          if (!v25)
            goto LABEL_55;
        }
        v424[0] = v25;
        memset(&v424[1], 0, 40);
        if (SHIBYTE(v431) < 0)
LABEL_56:
          operator delete(__p[0]);
      }
      else
      {
LABEL_55:
        v25 = 0;
        memset(v424, 0, sizeof(v424));
        if (SHIBYTE(v431) < 0)
          goto LABEL_56;
      }
      HIBYTE(v431) = 10;
      strcpy((char *)&__p[1], "ta");
      __p[0] = v20;
      if (!v426[0] || (v28 = *(_QWORD *)(v426[0] + 24)) == 0)
      {
LABEL_67:
        v28 = 0;
        memset(v423, 0, sizeof(v423));
        if ((SHIBYTE(v431) & 0x80000000) == 0)
          goto LABEL_69;
LABEL_68:
        operator delete(__p[0]);
        goto LABEL_69;
      }
      while (1)
      {
        v29 = v431 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
        v30 = v431 >= 0 ? HIBYTE(v431) : LODWORD(__p[1]);
        if (!xmlStrncmp(*(const xmlChar **)(v28 + 16), v29, v30))
          break;
        v28 = *(_QWORD *)(v28 + 48);
        if (!v28)
          goto LABEL_67;
      }
      v423[0] = v28;
      memset(&v423[1], 0, 40);
      if (SHIBYTE(v431) < 0)
        goto LABEL_68;
LABEL_69:
      *((_BYTE *)&v422.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v422, ".c3m");
      *((_BYTE *)&v421.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v421, ".c3mm");
      *((_BYTE *)&v420.__r_.__value_.__s + 23) = 0;
      v420.__r_.__value_.__s.__data_[0] = 0;
      v418 = 0.0;
      v417 = 0.0;
      v419 = 0.0;
      v416 = 0.0;
      *((_BYTE *)&v415.__r_.__value_.__s + 23) = 0;
      v415.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v414.__r_.__value_.__s + 23) = 0;
      v414.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v413.__r_.__value_.__s + 23) = 0;
      v413.__r_.__value_.__s.__data_[0] = 0;
      *(_QWORD *)v412 = 0;
      v411 = 0;
      v410 = 1;
      v409 = -1;
      v408 = 384.0;
      v407 = 0x7FFFFFFF;
      if (!v22)
      {
        if (v25 | v28)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v44 = GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            v35 = v44;
            v36 = "Malformed trigger tag in xml: missing data node";
            goto LABEL_282;
          }
          goto LABEL_284;
        }
        v38 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"type");
        if (!v38)
          goto LABEL_143;
        v39 = v38;
        v40 = strlen((const char *)v38);
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_654;
        v41 = (void *)v40;
        if (v40 >= 0x17)
        {
          v55 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v55 = v40 | 7;
          v56 = v55 + 1;
          v42 = operator new(v55 + 1);
          v431 = v56 | 0x8000000000000000;
          __p[0] = v42;
          __p[1] = v41;
        }
        else
        {
          HIBYTE(v431) = v40;
          v42 = __p;
          if (!v40)
          {
LABEL_133:
            v57 = 0;
            *((_BYTE *)v41 + (_QWORD)v42) = 0;
            v58 = (void *)HIBYTE(v431);
            if (v431 < 0)
              v58 = __p[1];
            if (v58 == (void *)4)
            {
              v59 = (void **)__p[0];
              if (v431 >= 0)
                v59 = __p;
              v57 = *(_DWORD *)v59 == 1920298868;
              v20 = *(void **)"c3meshdata";
              if (SHIBYTE(v431) < 0)
                goto LABEL_139;
LABEL_142:
              if (v57)
                goto LABEL_284;
            }
            else
            {
              v20 = *(void **)"c3meshdata";
              if ((SHIBYTE(v431) & 0x80000000) == 0)
                goto LABEL_142;
LABEL_139:
              operator delete(__p[0]);
              if (v57)
                goto LABEL_284;
            }
LABEL_143:
            v60 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"meta_levels");
            v61 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"meta_zmax");
            v62 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"meta_region");
            if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
            {
              v422.__r_.__value_.__l.__size_ = 5;
              v63 = (std::string *)v422.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v422.__r_.__value_.__s + 23) = 5;
              v63 = &v422;
            }
            strcpy((char *)v63, "apple");
            if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
            {
              v421.__r_.__value_.__l.__size_ = 5;
              v64 = (std::string *)v421.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v421.__r_.__value_.__s + 23) = 5;
              v64 = &v421;
            }
            strcpy((char *)v64, "apple");
            if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
            {
              v420.__r_.__value_.__l.__size_ = 5;
              v65 = (std::string *)v420.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v420.__r_.__value_.__s + 23) = 5;
              v65 = &v420;
            }
            strcpy((char *)v65, "apple");
            std::string::__assign_external(&v415, "http://some.server.com/tile?style=15", 0x24uLL);
            std::string::__assign_external(&v413, "http://some.server.com/tile?style=16", 0x24uLL);
            if (!XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"latitude", &v417))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v78 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__p[0]) = 0;
                v35 = v78;
                v36 = "Missing latitude in trigger specification";
                goto LABEL_282;
              }
              goto LABEL_284;
            }
            if (!XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"longitude", &v418))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v80 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__p[0]) = 0;
                v35 = v80;
                v36 = "Missing longitude in trigger specification";
                goto LABEL_282;
              }
              goto LABEL_284;
            }
            if (!XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"radius", &v416))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v82 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__p[0]) = 0;
                v35 = v82;
                v36 = "Missing radius in trigger specification";
                goto LABEL_282;
              }
              goto LABEL_284;
            }
            if (!XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"altitude", &v419))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v84 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__p[0]) = 0;
                v35 = v84;
                v36 = "Missing altitude in trigger specification";
                goto LABEL_282;
              }
              goto LABEL_284;
            }
            XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"priority", &v412[1]);
            XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"tilepixels", &v408);
            if (!XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"region", &v411))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v87 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__p[0]) = 0;
                v35 = v87;
                v36 = "Missing region in trigger specification";
                goto LABEL_282;
              }
              goto LABEL_284;
            }
            if (!XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"version", &v410))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v88 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__p[0]) = 0;
                v35 = v88;
                v36 = "Missing version in trigger specification";
                goto LABEL_282;
              }
              goto LABEL_284;
            }
            __s = (char *)v60;
            v354 = (char *)v61;
            v66 = MEMORY[0x1E0DE4FD0];
            v67 = MEMORY[0x1E0DE4FD0] + 104;
            v439[0] = MEMORY[0x1E0DE4FD0] + 104;
            v68 = MEMORY[0x1E0DE4FD0] + 64;
            v431 = MEMORY[0x1E0DE4FD0] + 64;
            __p[0] = v365;
            *(void **)((char *)__p + *((_QWORD *)v365 - 3)) = v364;
            __p[1] = 0;
            v69 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
            std::ios_base::init(v69, v432);
            v69[1].__vftable = 0;
            v69[1].__fmtflags_ = -1;
            *(_QWORD *)((char *)&v432[-1] + *(_QWORD *)(v363 - 24)) = v362;
            *(void **)((char *)__p + *(_QWORD *)(v360 - 24)) = v361;
            v439[0] = v67;
            __p[0] = (void *)(v66 + 24);
            v431 = v68;
            std::streambuf::basic_streambuf();
            v432[0] = v356;
            v436 = 0u;
            v437 = 0u;
            v438 = 24;
            if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = &v413;
            else
              v70 = (std::string *)v413.__r_.__value_.__r.__words[0];
            if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v413.__r_.__value_.__r.__words[2]);
            else
              size = v413.__r_.__value_.__l.__size_;
            v72 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v431, (uint64_t)v70, size);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)"&v=", 3);
            v73 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)"&region=", 8);
            std::ostream::operator<<();
            if ((v438 & 0x10) != 0)
            {
              v89 = *((_QWORD *)&v437 + 1);
              v90 = (const void **)&v434;
              v74 = v359;
              if (*((_QWORD *)&v437 + 1) < v435)
              {
                *((_QWORD *)&v437 + 1) = v435;
                v89 = v435;
                v90 = (const void **)&v434;
              }
            }
            else
            {
              v74 = v359;
              if ((v438 & 8) == 0)
              {
                v75 = v11;
                v76 = 0;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                p_dst = &__dst;
                goto LABEL_226;
              }
              v89 = v433[2];
              v90 = (const void **)v433;
            }
            v93 = *v90;
            v76 = v89 - (_QWORD)*v90;
            if (v76 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_654;
            v75 = v11;
            if (v76 >= 0x17)
            {
              v94 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v76 | 7) != 0x17)
                v94 = v76 | 7;
              v95 = v94 + 1;
              p_dst = (std::string *)operator new(v94 + 1);
              v96 = v95 | 0x8000000000000000;
              v74 = v359;
              __dst.__r_.__value_.__r.__words[2] = v96;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              __dst.__r_.__value_.__l.__size_ = v76;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v89 - *(_BYTE *)v90;
              p_dst = &__dst;
              if (!v76)
                goto LABEL_226;
            }
            memmove(p_dst, v93, v76);
LABEL_226:
            p_dst->__r_.__value_.__s.__data_[v76] = 0;
            if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v413.__r_.__value_.__l.__data_);
            v413 = __dst;
            XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"level", v412);
            XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"max_level", &v409);
            v11 = v75;
            if (XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"FLYOVER_C3M_MESH"))
            {
              v97 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"FLYOVER_C3M_MESH");
              v351 = strncmp((const char *)v97, "true", 4uLL) == 0;
            }
            else
            {
              v351 = 0;
            }
            if (XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"FLYOVER_C3M_JPEG_TEXTURE"))
            {
              v98 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"FLYOVER_C3M_JPEG_TEXTURE");
              v86 = strncmp((const char *)v98, "true", 4uLL) == 0;
            }
            else
            {
              v86 = 0;
            }
            if (XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"FLYOVER_C3M_ASTC_TEXTURE"))
            {
              v99 = XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"FLYOVER_C3M_ASTC_TEXTURE");
              v85 = strncmp((const char *)v99, "true", 4uLL) == 0;
            }
            else
            {
              v85 = 0;
            }
            XmlNode::Attribute((XmlNode *)v426, (const xmlChar *)"highres_tex_min_level", &v407);
            __p[0] = v74;
            *(void **)((char *)__p + *((_QWORD *)v74 - 3)) = v358;
            v431 = v357;
            v432[0] = MEMORY[0x1E0DE4FB8] + 16;
            if (SBYTE7(v437) < 0)
              operator delete((void *)v436);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1A1AF4D64](v439);
            goto LABEL_240;
          }
        }
        memmove(v42, v39, (size_t)v41);
        goto LABEL_133;
      }
      if (!v25)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v43 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v43;
          v36 = "Malformed trigger tag in xml: missing shape node";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      if (!v28)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v31 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "Malformed trigger tag in xml: missing c3meshdata node", (uint8_t *)__p, 2u);
        }
      }
      v32 = XmlNode::Attribute((XmlNode *)v425, (const xmlChar *)"type");
      if (!v32)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v45 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v45;
          v36 = "No data type specified for trigger";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      v33 = v32;
      if (strncmp((const char *)v32, "c3mesh", 6uLL))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v34 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v33;
          v35 = v34;
          v36 = "Invalid data type in trigger specification: %s";
          v37 = 12;
          goto LABEL_283;
        }
        goto LABEL_284;
      }
      v46 = XmlNode::Attribute((XmlNode *)v425, (const xmlChar *)"dataurl");
      if (!v46)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v79 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v79;
          v36 = "No data url specified for trigger";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      std::string::__assign_external(&v415, (const std::string::value_type *)v46);
      v47 = XmlNode::Attribute((XmlNode *)v425, (const xmlChar *)"dataurlformat");
      if (v47)
        std::string::__assign_external(&v422, (const std::string::value_type *)v47);
      v48 = XmlNode::Attribute((XmlNode *)v425, (const xmlChar *)"metaurl");
      if (!v48)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v81 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v81;
          v36 = "No meta url specified for trigger";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      std::string::__assign_external(&v414, (const std::string::value_type *)v48);
      v49 = XmlNode::Attribute((XmlNode *)v425, (const xmlChar *)"metaurlformat");
      if (v49)
        std::string::__assign_external(&v421, (const std::string::value_type *)v49);
      v50 = XmlNode::Attribute((XmlNode *)v423, (const xmlChar *)"dtmurl");
      if (v50)
        std::string::__assign_external(&v413, (const std::string::value_type *)v50);
      v51 = XmlNode::Attribute((XmlNode *)v423, (const xmlChar *)"dtmurlformat");
      if (v51)
        std::string::__assign_external(&v420, (const std::string::value_type *)v51);
      XmlNode::Attribute((XmlNode *)v423, (const xmlChar *)"priority", &v412[1]);
      if (!XmlNode::Attribute((XmlNode *)v423, (const xmlChar *)"level", v412))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v52 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "Failed to load start level of c3 mesh trigger", (uint8_t *)__p, 2u);
        }
      }
      v53 = XmlNode::Attribute((XmlNode *)v424, (const xmlChar *)"type");
      if (!v53)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v83 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v83;
          v36 = "No shape type specified in trigger";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      if (strncmp((const char *)v53, "sphere", 6uLL))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v54 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v54;
          v36 = "Unknown shape type in trigger";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      if (!XmlNode::Attribute((XmlNode *)v424, (const xmlChar *)"latitude", &v417))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v91 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v91;
          v36 = "Missing latitude in sphere shape trigger specification";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      if (!XmlNode::Attribute((XmlNode *)v424, (const xmlChar *)"longitude", &v418))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v92 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v92;
          v36 = "Missing longitude in sphere shape trigger specification";
          goto LABEL_282;
        }
        goto LABEL_284;
      }
      if (!XmlNode::Attribute((XmlNode *)v424, (const xmlChar *)"radius", &v416))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v121 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v35 = v121;
          v36 = "Missing radius in sphere shape trigger specification";
LABEL_282:
          v37 = 2;
LABEL_283:
          _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, v36, (uint8_t *)__p, v37);
          goto LABEL_284;
        }
        goto LABEL_284;
      }
      XmlNode::Attribute((XmlNode *)v424, (const xmlChar *)"altitude", &v419);
      v62 = 0;
      __s = 0;
      v354 = 0;
      v85 = 0;
      v86 = 0;
      v351 = 0;
      v74 = v359;
LABEL_240:
      v100 = v418;
      v101 = v419;
      v102 = __sincos_stret(v417);
      v105 = __sincos_stret(v100);
      v104.f64[0] = v105.__cosval;
      sinval = v105.__sinval;
      v393 = 0u;
      v394 = 0u;
      v395 = 0u;
      v396 = 0u;
      v392 = &off_1E42C4428;
      v397 = 0;
      v401 = 0u;
      memset(v402, 0, sizeof(v402));
      memset(v403, 0, sizeof(v403));
      memset(&v404, 0, sizeof(v404));
      v406 = 0;
      v405 = 0xFFFFFFFFLL;
      if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
      {
        v345 = v105.__sinval;
        cosval = v105.__cosval;
        std::string::__assign_no_alias<true>(v403[1].__r_.__value_.__r.__words, v421.__r_.__value_.__l.__data_, v421.__r_.__value_.__l.__size_);
        v106 = 1.0;
        if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = &v422;
          else
            v107 = (std::string *)v422.__r_.__value_.__r.__words[0];
          if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = HIBYTE(v422.__r_.__value_.__r.__words[2]);
          else
            v108 = v422.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)&v404.__r_.__value_.__l.__data_, v107, v108);
          goto LABEL_253;
        }
        sinval = v105.__sinval;
        v104.f64[0] = v105.__cosval;
        if ((*((_BYTE *)&v422.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_242:
          v404 = v422;
          goto LABEL_254;
        }
      }
      else
      {
        v403[1] = v421;
        v106 = 1.0;
        if ((SHIBYTE(v422.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_242;
      }
      v345 = sinval;
      cosval = v104.f64[0];
      std::string::__assign_no_alias<true>(&v404, v422.__r_.__value_.__l.__data_, v422.__r_.__value_.__l.__size_);
LABEL_253:
      sinval = v345;
      v104.f64[0] = cosval;
LABEL_254:
      v109 = 6378137.0 / sqrt(v106 + v102.__sinval * v102.__sinval * -0.00669437999);
      v104.f64[1] = sinval;
      *(double *)&v110 = (v101 + v109 * 0.99330562) * v102.__sinval;
      *((double *)&v110 + 1) = v416;
      v395 = vmulq_n_f64(v104, (v109 + v101) * v102.__cosval);
      v396 = v110;
      v349 = v85;
      v350 = v86;
      if (SHIBYTE(v403[0].__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v111 = &v415;
        else
          v111 = (std::string *)v415.__r_.__value_.__r.__words[0];
        if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
        else
          v112 = v415.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)&v403[0].__r_.__value_.__l.__data_, v111, v112);
      }
      else if ((*((_BYTE *)&v415.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v403, v415.__r_.__value_.__l.__data_, v415.__r_.__value_.__l.__size_);
      }
      else
      {
        v403[0] = v415;
      }
      v113 = HIBYTE(v404.__r_.__value_.__r.__words[2]);
      if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v113 = v404.__r_.__value_.__l.__size_;
      v114 = v354;
      if (v113 == 4)
      {
        v115 = &v404;
        if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v115 = (std::string *)v404.__r_.__value_.__r.__words[0];
        if (LODWORD(v115->__r_.__value_.__l.__data_) == 1832084270)
        {
          v116 = HIBYTE(v403[0].__r_.__value_.__r.__words[2]);
          v117 = v403[0].__r_.__value_.__l.__size_;
          if ((v403[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v118 = HIBYTE(v403[0].__r_.__value_.__r.__words[2]);
          else
            v118 = v403[0].__r_.__value_.__l.__size_;
          v119 = v118 - 1;
          if ((SHIBYTE(v403[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (v403[0].__r_.__value_.__s.__data_[v119] == 47)
              goto LABEL_378;
            if (HIBYTE(v403[0].__r_.__value_.__r.__words[2]) == 22)
            {
              v120 = v403;
              v117 = 22;
              goto LABEL_361;
            }
            *((_BYTE *)&v403[0].__r_.__value_.__s + 23) = (*((_BYTE *)&v403[0].__r_.__value_.__s + 23) + 1) & 0x7F;
            v117 = v116;
            v120 = v403;
LABEL_377:
            *(_WORD *)((char *)&v120->__r_.__value_.__l.__data_ + v117) = 47;
            goto LABEL_378;
          }
          v120 = (std::string *)v403[0].__r_.__value_.__r.__words[0];
          if (*(_BYTE *)(v403[0].__r_.__value_.__r.__words[0] + v119) == 47)
            goto LABEL_378;
          if (v403[0].__r_.__value_.__l.__size_ == (v403[0].__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1)
          {
            if ((v403[0].__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
              goto LABEL_654;
            if (v403[0].__r_.__value_.__l.__size_ >= 0x3FFFFFFFFFFFFFF3)
            {
              v157 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
              memmove(v157, v120, v117);
              v347 = 0x7FFFFFFFFFFFFFF7;
            }
            else
            {
LABEL_361:
              if (v117 + 1 > 2 * v117)
                v152 = v117 + 1;
              else
                v152 = 2 * v117;
              if (v152 >= 0x17)
              {
                v154 = (v152 & 0x7FFFFFFFFFFFFFF8) + 8;
                v155 = v152 | 7;
                if (v155 == 23)
                  v155 = v154;
                v153 = v155 + 1;
              }
              else
              {
                v153 = 23;
              }
              v347 = v153;
              v156 = (std::string *)operator new(v153);
              v157 = v156;
              if (v117)
              {
                memmove(v156, v120, v117);
                if (v117 == 22)
                {
LABEL_375:
                  v403[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
                  v403[0].__r_.__value_.__r.__words[2] = v347 | 0x8000000000000000;
                  v120 = v157;
                  goto LABEL_376;
                }
              }
            }
            operator delete(v120);
            goto LABEL_375;
          }
LABEL_376:
          v403[0].__r_.__value_.__l.__size_ = v117 + 1;
          goto LABEL_377;
        }
      }
LABEL_378:
      if (SHIBYTE(v402[3]) < 0)
      {
        if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v158 = &v414;
        else
          v158 = (std::string *)v414.__r_.__value_.__r.__words[0];
        if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v159 = HIBYTE(v414.__r_.__value_.__r.__words[2]);
        else
          v159 = v414.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)&v402[1], v158, v159);
      }
      else if ((*((_BYTE *)&v414.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&v402[1], v414.__r_.__value_.__l.__data_, v414.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)&v402[1] = v414;
      }
      HIDWORD(v405) = v411;
      v406 = v410;
      if (!v62)
        goto LABEL_404;
      v160 = strlen((const char *)v62);
      if (v160 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_654;
      v161 = v160;
      if (v160 >= 0x17)
      {
        v163 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v160 | 7) != 0x17)
          v163 = v160 | 7;
        v164 = v163 + 1;
        v162 = (std::string *)operator new(v163 + 1);
        v165 = v164 | 0x8000000000000000;
        v74 = v359;
        __dst.__r_.__value_.__r.__words[2] = v165;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v162;
        __dst.__r_.__value_.__l.__size_ = v161;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v160;
        v162 = &__dst;
        if (!v160)
          goto LABEL_398;
      }
      memmove(v162, v62, v161);
LABEL_398:
      v162->__r_.__value_.__s.__data_[v161] = 0;
      v166 = MEMORY[0x1E0DE4FD0];
      v167 = MEMORY[0x1E0DE4FD0] + 104;
      v439[0] = MEMORY[0x1E0DE4FD0] + 104;
      v168 = MEMORY[0x1E0DE4FD0] + 64;
      v431 = MEMORY[0x1E0DE4FD0] + 64;
      __p[0] = v365;
      *(void **)((char *)__p + *((_QWORD *)v365 - 3)) = v364;
      __p[1] = 0;
      v169 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
      std::ios_base::init(v169, v432);
      v169[1].__vftable = 0;
      v169[1].__fmtflags_ = -1;
      *(_QWORD *)((char *)&v432[-1] + *(_QWORD *)(v363 - 24)) = v362;
      *(void **)((char *)__p + *(_QWORD *)(v360 - 24)) = v361;
      v439[0] = v167;
      __p[0] = (void *)(v166 + 24);
      v431 = v168;
      v170 = std::streambuf::basic_streambuf();
      v436 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      v437 = __dst.__r_.__value_.__r.__words[2];
      v432[0] = MEMORY[0x1E0DE4FB8] + 16;
      v438 = 24;
      std::stringbuf::__init_buf_ptrs[abi:nn180100](v170);
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v374) = 0;
      LODWORD(v372) = 0;
      v391 = 0;
      v171 = MEMORY[0x1A1AF49B0](__p, &__dst);
      v172 = MEMORY[0x1A1AF49B0](v171, &v374);
      v173 = MEMORY[0x1A1AF49B0](v172, &v372);
      v174 = MEMORY[0x1A1AF49B0](v173, (char *)&v391 + 4);
      v175 = (_QWORD *)MEMORY[0x1A1AF49B0](v174, &v391);
      if ((*((_BYTE *)v175 + *(_QWORD *)(*v175 - 24) + 32) & 5) != 0)
      {
        v398 = 0;
        v399 = 0;
        v400 = 0;
      }
      else
      {
        LOBYTE(v398) = __dst.__r_.__value_.__s.__data_[0];
        HIDWORD(v398) = v374;
        v399 = __PAIR64__(HIDWORD(v391), v372);
        v400 = v391;
      }
      v114 = v354;
      __p[0] = v74;
      *(void **)((char *)__p + *((_QWORD *)v74 - 3)) = v358;
      v431 = v357;
      v432[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v437) < 0)
        operator delete((void *)v436);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v439);
LABEL_404:
      if (!__s || !v114)
        goto LABEL_473;
      v176 = strlen(__s);
      if (v176 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_654;
      v177 = v176;
      if (v176 >= 0x17)
      {
        v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v176 | 7) != 0x17)
          v179 = v176 | 7;
        v180 = v179 + 1;
        v178 = (std::string *)operator new(v179 + 1);
        __dst.__r_.__value_.__r.__words[2] = v180 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
        __dst.__r_.__value_.__l.__size_ = v177;
LABEL_413:
        memmove(v178, __s, v177);
        goto LABEL_414;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v176;
      v178 = &__dst;
      if (v176)
        goto LABEL_413;
LABEL_414:
      v178->__r_.__value_.__s.__data_[v177] = 0;
      v181 = MEMORY[0x1E0DE4FD0];
      v182 = MEMORY[0x1E0DE4FD0] + 104;
      v439[0] = MEMORY[0x1E0DE4FD0] + 104;
      v183 = MEMORY[0x1E0DE4FD0] + 64;
      v431 = MEMORY[0x1E0DE4FD0] + 64;
      __p[0] = v365;
      *(void **)((char *)__p + *((_QWORD *)v365 - 3)) = v364;
      __p[1] = 0;
      v184 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
      std::ios_base::init(v184, v432);
      v184[1].__vftable = 0;
      v184[1].__fmtflags_ = -1;
      *(_QWORD *)((char *)&v432[-1] + *(_QWORD *)(v363 - 24)) = v362;
      *(void **)((char *)__p + *(_QWORD *)(v360 - 24)) = v361;
      v439[0] = v182;
      __p[0] = (void *)(v181 + 24);
      v431 = v183;
      v185 = std::streambuf::basic_streambuf();
      v436 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      v437 = __dst.__r_.__value_.__r.__words[2];
      v432[0] = MEMORY[0x1E0DE4FB8] + 16;
      v438 = 24;
      std::stringbuf::__init_buf_ptrs[abi:nn180100](v185);
      v186 = strlen(v354);
      if (v186 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_654;
      v187 = v186;
      v366 = v11;
      if (v186 >= 0x17)
      {
        v189 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v186 | 7) != 0x17)
          v189 = v186 | 7;
        v190 = v189 + 1;
        v188 = (__int128 *)operator new(v189 + 1);
        *((_QWORD *)&v374 + 1) = v187;
        v375 = v190 | 0x8000000000000000;
        *(_QWORD *)&v374 = v188;
      }
      else
      {
        HIBYTE(v375) = v186;
        v188 = &v374;
        if (!v186)
          goto LABEL_422;
      }
      memmove(v188, v354, v187);
LABEL_422:
      *((_BYTE *)v188 + v187) = 0;
      v191 = MEMORY[0x1E0DE4FD0];
      v192 = MEMORY[0x1E0DE4FD0] + 104;
      v390[0] = MEMORY[0x1E0DE4FD0] + 104;
      v193 = MEMORY[0x1E0DE4FD0] + 64;
      __dst.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FD0] + 64;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *((_QWORD *)v365 - 3)) = (std::string::size_type)v364;
      __dst.__r_.__value_.__l.__size_ = 0;
      v194 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24));
      std::ios_base::init(v194, v385);
      v194[1].__vftable = 0;
      v194[1].__fmtflags_ = -1;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[2] + *(_QWORD *)(v363 - 24)) = v362;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v360 - 24)) = (std::string::size_type)v361;
      __sa = (char *)(v191 + 24);
      v355 = (char *)v192;
      v390[0] = v192;
      __dst.__r_.__value_.__r.__words[0] = v191 + 24;
      __dst.__r_.__value_.__r.__words[2] = v193;
      v195 = std::streambuf::basic_streambuf();
      v386 = v374;
      v387 = v375;
      v348 = MEMORY[0x1E0DE4FB8] + 16;
      v385[0] = MEMORY[0x1E0DE4FB8] + 16;
      v388 = 0;
      v389 = 24;
      std::stringbuf::__init_buf_ptrs[abi:nn180100](v195);
      while (!*(_DWORD *)((char *)&v432[1] + *((_QWORD *)__p[0] - 3))
           && !*(_DWORD *)((char *)&v385[1] + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24)))
      {
        LODWORD(v374) = 0;
        LODWORD(v372) = 0;
        MEMORY[0x1A1AF49B0](__p, &v374);
        MEMORY[0x1A1AF49B0](&__dst, &v372);
        v197 = v374;
        v198 = v372;
        v199 = (char *)*((_QWORD *)&v401 + 1);
        if (*((_QWORD *)&v401 + 1) < v402[0])
        {
          **((_WORD **)&v401 + 1) = v374 | (unsigned __int16)((_WORD)v372 << 8);
          v196 = v199 + 2;
        }
        else
        {
          v200 = (char *)v401;
          v201 = *((_QWORD *)&v401 + 1) - v401;
          if ((uint64_t)(*((_QWORD *)&v401 + 1) - v401) <= -3)
            goto LABEL_654;
          v202 = v201 >> 1;
          if (v402[0] - (_QWORD)v401 <= (unint64_t)((v201 >> 1) + 1))
            v203 = v202 + 1;
          else
            v203 = v402[0] - v401;
          if (v402[0] - (_QWORD)v401 >= 0x7FFFFFFFFFFFFFFEuLL)
            v204 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v204 = v203;
          if (v204)
          {
            if (v204 < 0)
              goto LABEL_655;
            v205 = (char *)operator new(2 * v204);
          }
          else
          {
            v205 = 0;
          }
          v206 = &v205[2 * v202];
          *(_WORD *)v206 = v197 | (unsigned __int16)(v198 << 8);
          v196 = v206 + 2;
          if (v199 == v200)
          {
            v200 = v199;
          }
          else
          {
            v207 = v199 - 2 - v200;
            if (v207 < 0x1E)
              goto LABEL_659;
            if (v199 - v205 - (v201 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              goto LABEL_659;
            v208 = (v207 >> 1) + 1;
            v209 = &v205[2 * v202 - 16];
            v210 = v199 - 16;
            v211 = v208 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v212 = *(_OWORD *)v210;
              *((_OWORD *)v209 - 1) = *((_OWORD *)v210 - 1);
              *(_OWORD *)v209 = v212;
              v209 -= 32;
              v210 -= 32;
              v211 -= 16;
            }
            while (v211);
            v206 -= 2 * (v208 & 0xFFFFFFFFFFFFFFF0);
            v199 -= 2 * (v208 & 0xFFFFFFFFFFFFFFF0);
            if (v208 != (v208 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_659:
              do
              {
                v213 = *((_WORD *)v199 - 1);
                v199 -= 2;
                *((_WORD *)v206 - 1) = v213;
                v206 -= 2;
              }
              while (v199 != v200);
              v200 = (char *)v401;
            }
          }
          *(_QWORD *)&v401 = v206;
          *((_QWORD *)&v401 + 1) = v196;
          v402[0] = &v205[2 * v204];
          if (v200)
            operator delete(v200);
        }
        *((_QWORD *)&v401 + 1) = v196;
      }
      v383 = v355;
      v375 = v193;
      *(_QWORD *)&v374 = v365;
      *(_QWORD *)((char *)&v374 + *((_QWORD *)v365 - 3)) = v364;
      *((_QWORD *)&v374 + 1) = 0;
      v214 = (std::ios_base *)((char *)&v374 + *(_QWORD *)(v374 - 24));
      std::ios_base::init(v214, &v376);
      v214[1].__vftable = 0;
      v214[1].__fmtflags_ = -1;
      *(unint64_t *)((char *)&v375 + *(_QWORD *)(v363 - 24)) = v362;
      *(_QWORD *)((char *)&v374 + *(_QWORD *)(v360 - 24)) = v361;
      v383 = v355;
      *(_QWORD *)&v374 = __sa;
      v375 = v193;
      std::streambuf::basic_streambuf();
      v376 = v348;
      v380 = 0u;
      v381 = 0u;
      v382 = 24;
      v215 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"http://some.server.com/tile?style=52&x=0&y=0&z=0&h=0", 52);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v215, (uint64_t)"&v=", 3);
      v216 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v216, (uint64_t)"&region=", 8);
      std::ostream::operator<<();
      if ((v382 & 0x10) != 0)
      {
        v219 = *((_QWORD *)&v381 + 1);
        v220 = (const void **)&v378;
        v11 = v366;
        if (*((_QWORD *)&v381 + 1) < v379)
        {
          *((_QWORD *)&v381 + 1) = v379;
          v219 = v379;
          v220 = (const void **)&v378;
        }
      }
      else
      {
        v11 = v366;
        if ((v382 & 8) == 0)
        {
          v217 = 0;
          HIBYTE(v373) = 0;
          v218 = &v372;
          goto LABEL_464;
        }
        v219 = v377[2];
        v220 = (const void **)v377;
      }
      v221 = *v220;
      v217 = v219 - (_QWORD)*v220;
      if (v217 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_654;
      if (v217 >= 0x17)
      {
        v222 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v217 | 7) != 0x17)
          v222 = v217 | 7;
        v223 = v222 + 1;
        v218 = (__int128 *)operator new(v222 + 1);
        *((_QWORD *)&v372 + 1) = v217;
        v373 = v223 | 0x8000000000000000;
        *(_QWORD *)&v372 = v218;
      }
      else
      {
        HIBYTE(v373) = v219 - *(_BYTE *)v220;
        v218 = &v372;
        if (!v217)
          goto LABEL_464;
      }
      memmove(v218, v221, v217);
LABEL_464:
      *((_BYTE *)v218 + v217) = 0;
      v225 = v357;
      v224 = v358;
      if (SHIBYTE(v402[3]) < 0)
      {
        operator delete((void *)v402[1]);
        v225 = v357;
        v224 = v358;
      }
      *(_OWORD *)&v402[1] = v372;
      v402[3] = v373;
      *(_QWORD *)&v374 = v359;
      *(_QWORD *)((char *)&v374 + *((_QWORD *)v359 - 3)) = v224;
      v226 = MEMORY[0x1E0DE4FB8] + 16;
      v375 = v225;
      v376 = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v381) < 0)
        operator delete((void *)v380);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](&v383);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v359;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *((_QWORD *)v359 - 3)) = (std::string::size_type)v224;
      __dst.__r_.__value_.__r.__words[2] = v225;
      v385[0] = v226;
      if (SHIBYTE(v387) < 0)
        operator delete((void *)v386);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v390);
      __p[0] = v359;
      *(void **)((char *)__p + *((_QWORD *)v359 - 3)) = v224;
      v431 = v225;
      v432[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v437) < 0)
        operator delete((void *)v436);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v439);
LABEL_473:
      XmlNode::Attribute((XmlNode *)v425, (const xmlChar *)"system");
      v227 = operator new();
      *(_QWORD *)v227 = off_1E42C4400;
      *(_OWORD *)(v227 + 24) = 0u;
      v228 = (_QWORD *)(v227 + 24);
      *(_OWORD *)(v227 + 40) = 0u;
      *(_OWORD *)(v227 + 56) = 0u;
      v397 = v227;
      v229 = v412[0];
      v230 = v409;
      *(_DWORD *)(v227 + 8) = v412[0];
      *(_DWORD *)(v227 + 12) = v230;
      if ((SHIBYTE(v413.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *(_OWORD *)v228 = *(_OWORD *)&v413.__r_.__value_.__l.__data_;
        *(_QWORD *)(v227 + 40) = *((_QWORD *)&v413.__r_.__value_.__l + 2);
        v231 = (void **)(v227 + 48);
        if ((SHIBYTE(v420.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_475;
LABEL_478:
        std::string::__assign_no_alias<true>(v231, v420.__r_.__value_.__l.__data_, v420.__r_.__value_.__l.__size_);
        goto LABEL_486;
      }
      std::string::__assign_no_alias<true>(v228, v413.__r_.__value_.__l.__data_, v413.__r_.__value_.__l.__size_);
      v231 = (void **)(v227 + 48);
      if ((*(char *)(v227 + 71) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)&v420.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_475:
          *(std::string *)v231 = v420;
          goto LABEL_486;
        }
        goto LABEL_478;
      }
      if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v232 = &v420;
      else
        v232 = (std::string *)v420.__r_.__value_.__r.__words[0];
      if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v233 = HIBYTE(v420.__r_.__value_.__r.__words[2]);
      else
        v233 = v420.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>(v231, v232, v233);
LABEL_486:
      *(_DWORD *)(v227 + 16) = v412[1];
      v234 = v408;
      *(float *)(v227 + 20) = v234;
      *(_BYTE *)(v227 + 72) = v351;
      *(_BYTE *)(v227 + 73) = v350;
      *(_BYTE *)(v227 + 74) = v349;
      *(_DWORD *)(v227 + 76) = v407;
      v235 = v428;
      v236 = &v428;
      v237 = &v428;
      if (v428)
      {
        v238 = &v428;
        v239 = v428;
        do
        {
          v240 = v239;
          v241 = v238;
          v242 = *((_DWORD *)v239 + 8);
          if (v242 >= v229)
            v238 = (uint64_t **)v239;
          else
            ++v239;
          v239 = (uint64_t *)*v239;
        }
        while (v239);
        if (v238 != &v428)
        {
          if (v242 < v229)
            v240 = (uint64_t *)v241;
          if (*((_DWORD *)v240 + 8) <= v229)
            goto LABEL_517;
        }
        while (1)
        {
          while (1)
          {
            v236 = (uint64_t **)v235;
            v243 = *((_DWORD *)v235 + 8);
            if (v243 <= v229)
              break;
            v235 = *v236;
            v237 = v236;
            if (!*v236)
              goto LABEL_502;
          }
          if (v243 >= v229)
            break;
          v235 = v236[1];
          if (!v235)
          {
            v237 = v236 + 1;
            goto LABEL_502;
          }
        }
      }
      else
      {
LABEL_502:
        v244 = (uint64_t *)v236;
        v236 = (uint64_t **)operator new(0x40uLL);
        *((_DWORD *)v236 + 8) = v229;
        v236[6] = 0;
        v236[7] = 0;
        v236[5] = 0;
        *v236 = 0;
        v236[1] = 0;
        v236[2] = v244;
        *v237 = (uint64_t *)v236;
        v245 = (uint64_t *)v236;
        if (*v427)
        {
          v427 = (uint64_t **)*v427;
          v245 = *v237;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v428, v245);
        ++v429;
      }
      v246 = v236[5];
      if (v246)
      {
        v236[6] = v246;
        operator delete(v246);
      }
      v236[5] = 0;
      v236[6] = 0;
      v236[7] = 0;
      v247 = (uint64_t *)operator new();
      v247[3] = 0;
      v247[2] = 0;
      *v247 = (uint64_t)&off_1E42C2CA8;
      v247[1] = (uint64_t)(v247 + 2);
      v247[4] = 0x90000000020;
      v247[5] = 0;
      v247[6] = 0;
      v248 = (uint64_t **)(a1 + 96);
      while (1)
      {
        v249 = *v248;
        v250 = v248;
        if (!*v248)
          break;
        while (1)
        {
          v248 = (uint64_t **)v249;
          v251 = *((_DWORD *)v249 + 8);
          if (v229 < v251)
            break;
          if (v251 >= v229)
            goto LABEL_516;
          v249 = v248[1];
          if (!v249)
          {
            v250 = v248 + 1;
            goto LABEL_513;
          }
        }
      }
LABEL_513:
      v252 = (uint64_t *)v248;
      v248 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v248 + 8) = v229;
      v248[5] = 0;
      *v248 = 0;
      v248[1] = 0;
      v248[2] = v252;
      *v250 = (uint64_t *)v248;
      v253 = (_QWORD *)**v11;
      v254 = (uint64_t *)v248;
      if (v253)
      {
        *v11 = v253;
        v254 = *v250;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), v254);
      ++*(_QWORD *)(a1 + 104);
LABEL_516:
      v248[5] = v247;
      v235 = v428;
LABEL_517:
      v256 = *(_QWORD *)(a1 + 40);
      v255 = *(_QWORD *)(a1 + 48);
      v257 = &v428;
LABEL_519:
      v258 = v257;
      if (v235)
      {
        do
        {
          v257 = (uint64_t **)v235;
          v259 = *((_DWORD *)v235 + 8);
          if (v259 > v229)
          {
            v235 = *v257;
            goto LABEL_519;
          }
          if (v259 >= v229)
            goto LABEL_527;
          v235 = v257[1];
        }
        while (v235);
        v258 = v257 + 1;
      }
      v260 = (uint64_t *)v257;
      v257 = (uint64_t **)operator new(0x40uLL);
      *((_DWORD *)v257 + 8) = v229;
      v257[6] = 0;
      v257[7] = 0;
      v257[5] = 0;
      *v257 = 0;
      v257[1] = 0;
      v257[2] = v260;
      *v258 = (uint64_t *)v257;
      v261 = (uint64_t *)v257;
      if (*v427)
      {
        v427 = (uint64_t **)*v427;
        v261 = *v258;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v428, v261);
      ++v429;
LABEL_527:
      v262 = -286331153 * ((unint64_t)(v255 - v256) >> 4);
      v264 = (char *)v257[6];
      v263 = v257[7];
      if (v264 >= (char *)v263)
      {
        v266 = v257[5];
        v267 = (v264 - (char *)v266) >> 2;
        v268 = v267 + 1;
        if ((unint64_t)(v267 + 1) >> 62)
          goto LABEL_656;
        v269 = (char *)v263 - (char *)v266;
        if (v269 >> 1 > v268)
          v268 = v269 >> 1;
        if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL)
          v270 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v270 = v268;
        if (v270)
        {
          if (v270 >> 62)
LABEL_655:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v271 = operator new(4 * v270);
        }
        else
        {
          v271 = 0;
        }
        v272 = (uint64_t *)&v271[4 * v267];
        *(_DWORD *)v272 = v262;
        v265 = (uint64_t *)((char *)v272 + 4);
        if (v264 != (char *)v266)
        {
          v273 = v264 - 4 - (char *)v266;
          if (v273 < 0x2C)
            goto LABEL_660;
          if ((unint64_t)((char *)v266 - v271) < 0x20)
            goto LABEL_660;
          v274 = (v273 >> 2) + 1;
          v275 = &v271[v264 - (char *)v266 - 16];
          v276 = v264 - 16;
          v277 = v274 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v278 = *(_OWORD *)v276;
            *(v275 - 1) = *((_OWORD *)v276 - 1);
            *v275 = v278;
            v275 -= 2;
            v276 -= 32;
            v277 -= 8;
          }
          while (v277);
          v272 = (uint64_t *)((char *)v272 - 4 * (v274 & 0x7FFFFFFFFFFFFFF8));
          v264 -= 4 * (v274 & 0x7FFFFFFFFFFFFFF8);
          if (v274 != (v274 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_660:
            do
            {
              v279 = *((_DWORD *)v264 - 1);
              v264 -= 4;
              *((_DWORD *)v272 - 1) = v279;
              v272 = (uint64_t *)((char *)v272 - 4);
            }
            while (v264 != (char *)v266);
          }
        }
        v257[5] = v272;
        v257[6] = v265;
        v257[7] = (uint64_t *)&v271[4 * v270];
        if (v266)
          operator delete(v266);
      }
      else
      {
        *(_DWORD *)v264 = v262;
        v265 = (uint64_t *)(v264 + 4);
      }
      v20 = *(void **)"c3meshdata";
      v257[6] = v265;
      v280 = *(altitude::TriggerManager::Trigger **)(a1 + 48);
      if ((unint64_t)v280 >= *(_QWORD *)(a1 + 56))
        v281 = std::vector<altitude::TriggerManager::Trigger>::__push_back_slow_path<altitude::TriggerManager::Trigger const&>(v371, (const altitude::TriggerManager::Trigger *)&v392);
      else
        v281 = (altitude::TriggerManager::Trigger *)((char *)altitude::TriggerManager::Trigger::Trigger(v280, (const altitude::TriggerManager::Trigger *)&v392)+ 240);
      *(_QWORD *)(a1 + 48) = v281;
      v392 = &off_1E42C4428;
      if (v397)
        (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
      if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v404.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v403[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_557:
          if (SHIBYTE(v403[0].__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_563;
          goto LABEL_558;
        }
      }
      else if ((SHIBYTE(v403[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_557;
      }
      operator delete(v403[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(v403[0].__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_563:
        operator delete(v403[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v402[3]) < 0)
        {
LABEL_564:
          operator delete((void *)v402[1]);
          v282 = (void *)v401;
          if (!(_QWORD)v401)
            goto LABEL_284;
LABEL_565:
          *((_QWORD *)&v401 + 1) = v282;
          operator delete(v282);
          goto LABEL_284;
        }
        goto LABEL_559;
      }
LABEL_558:
      if (SHIBYTE(v402[3]) < 0)
        goto LABEL_564;
LABEL_559:
      v282 = (void *)v401;
      if ((_QWORD)v401)
        goto LABEL_565;
LABEL_284:
      if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v413.__r_.__value_.__l.__data_);
      if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v414.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v415.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_288:
          if ((SHIBYTE(v420.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_289;
          goto LABEL_305;
        }
      }
      else if ((SHIBYTE(v415.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_288;
      }
      operator delete(v415.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v420.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_289:
        if ((SHIBYTE(v421.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_290;
        goto LABEL_306;
      }
LABEL_305:
      operator delete(v420.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v421.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_290:
        if ((SHIBYTE(v422.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_291;
        goto LABEL_307;
      }
LABEL_306:
      operator delete(v421.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v422.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_291:
        v122 = (char *)v423[3];
        if (!v423[3])
          goto LABEL_308;
        goto LABEL_292;
      }
LABEL_307:
      operator delete(v422.__r_.__value_.__l.__data_);
      v122 = (char *)v423[3];
      if (!v423[3])
      {
LABEL_308:
        v128 = (std::__shared_weak_count *)v423[2];
        if (!v423[2])
          goto LABEL_312;
        goto LABEL_309;
      }
LABEL_292:
      v123 = (char *)v423[4];
      v124 = v122;
      if ((char *)v423[4] != v122)
      {
        do
        {
          v125 = (std::__shared_weak_count *)*((_QWORD *)v123 - 1);
          if (v125)
          {
            p_shared_owners = (unint64_t *)&v125->__shared_owners_;
            do
              v127 = __ldaxr(p_shared_owners);
            while (__stlxr(v127 - 1, p_shared_owners));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v123 -= 16;
        }
        while (v123 != v122);
        v124 = (char *)v423[3];
      }
      v423[4] = v122;
      operator delete(v124);
      v128 = (std::__shared_weak_count *)v423[2];
      if (!v423[2])
      {
LABEL_312:
        v131 = (char *)v424[3];
        if (!v424[3])
          goto LABEL_323;
        goto LABEL_313;
      }
LABEL_309:
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (v130)
        goto LABEL_312;
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
      v131 = (char *)v424[3];
      if (!v424[3])
        goto LABEL_323;
LABEL_313:
      v132 = (char *)v424[4];
      v133 = v131;
      if ((char *)v424[4] != v131)
      {
        do
        {
          v134 = (std::__shared_weak_count *)*((_QWORD *)v132 - 1);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v132 -= 16;
        }
        while (v132 != v131);
        v133 = (char *)v424[3];
      }
      v424[4] = v131;
      operator delete(v133);
LABEL_323:
      v137 = (std::__shared_weak_count *)v424[2];
      if (!v424[2])
        goto LABEL_327;
      v138 = (unint64_t *)(v424[2] + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
        v140 = (char *)v425[3];
        if (v425[3])
        {
LABEL_328:
          v141 = (char *)v425[4];
          v142 = v140;
          if ((char *)v425[4] != v140)
          {
            do
            {
              v143 = (std::__shared_weak_count *)*((_QWORD *)v141 - 1);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v141 -= 16;
            }
            while (v141 != v140);
            v142 = (char *)v425[3];
          }
          v425[4] = v140;
          operator delete(v142);
        }
      }
      else
      {
LABEL_327:
        v140 = (char *)v425[3];
        if (v425[3])
          goto LABEL_328;
      }
      v146 = (std::__shared_weak_count *)v425[2];
      if (v425[2])
      {
        v147 = (unint64_t *)(v425[2] + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      HIBYTE(v431) = 7;
      strcpy((char *)__p, "trigger");
      v149 = v426[0];
      if (v426[0])
      {
        do
        {
          v149 = *(_QWORD *)(v149 + 48);
          if (!v149)
            break;
          v150 = v431 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
          v151 = v431 >= 0 ? HIBYTE(v431) : LODWORD(__p[1]);
        }
        while (xmlStrncmp(*(const xmlChar **)(v149 + 16), v150, v151));
      }
      XmlNodeWrapper::operator=(v426, v149);
      if (SHIBYTE(v431) < 0)
      {
        operator delete(__p[0]);
        v21 = v426[0];
        if (!v426[0])
          break;
      }
      else
      {
        v21 = v426[0];
        if (!v426[0])
          break;
      }
    }
  }
LABEL_566:
  v283 = v426[3];
  v284 = (uint64_t **)(a1 + 96);
  if (v426[3])
  {
    v285 = v426[4];
    v286 = (void *)v426[3];
    if (v426[4] != v426[3])
    {
      do
      {
        v287 = *(std::__shared_weak_count **)(v285 - 8);
        if (v287)
        {
          v288 = (unint64_t *)&v287->__shared_owners_;
          do
            v289 = __ldaxr(v288);
          while (__stlxr(v289 - 1, v288));
          if (!v289)
          {
            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
            std::__shared_weak_count::__release_weak(v287);
          }
        }
        v285 -= 16;
      }
      while (v285 != v283);
      v286 = (void *)v426[3];
    }
    v426[4] = v283;
    operator delete(v286);
  }
  v290 = (std::__shared_weak_count *)v426[2];
  if (v426[2])
  {
    v291 = (unint64_t *)(v426[2] + 8);
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = v427;
  if (v427 != &v428)
  {
    v367 = v11;
    do
    {
      v294 = *((_DWORD *)v293 + 8);
      v296 = v293[5];
      v295 = v293[6];
      v297 = (char *)v295 - (char *)v296;
      if (v295 != v296)
      {
        v369 = *((_DWORD *)v293 + 8);
        if ((v297 & 0x8000000000000000) == 0)
        {
          v298 = (char *)operator new((char *)v295 - (char *)v296);
          memcpy(v298, v296, v297);
          if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_654:
            abort();
          v299 = v297 >> 2;
          v300 = (unsigned int *)&v298[4 * (v297 >> 2)];
          v297 = (int64_t)operator new(2 * v297);
          v301 = (uint64_t *)(v297 + 8 * v299);
          v302 = (uint64_t *)v297;
          v370 = v298;
          v303 = (unsigned int *)v298;
          while (2)
          {
            v304 = (uint64_t)*v371 + 240 * *v303;
            if (v302 < v301)
            {
              *v302++ = v304;
            }
            else
            {
              v305 = (char *)v302 - v297;
              v306 = ((uint64_t)v302 - v297) >> 3;
              v307 = v306 + 1;
              if ((unint64_t)(v306 + 1) >> 61)
                goto LABEL_654;
              if (((uint64_t)v301 - v297) >> 2 > v307)
                v307 = ((uint64_t)v301 - v297) >> 2;
              if ((unint64_t)v301 - v297 >= 0x7FFFFFFFFFFFFFF8)
                v308 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v308 = v307;
              if (v308)
              {
                if (v308 >> 61)
                  goto LABEL_655;
                v309 = (char *)operator new(8 * v308);
              }
              else
              {
                v309 = 0;
              }
              v310 = (uint64_t *)&v309[8 * v306];
              v301 = (uint64_t *)&v309[8 * v308];
              *v310 = v304;
              v311 = v310 + 1;
              if (v302 == (uint64_t *)v297)
                goto LABEL_607;
              v312 = (unint64_t)v302 - v297 - 8;
              if (v312 < 0x168)
              {
                v313 = v302;
                goto LABEL_605;
              }
              if (&v305[(_QWORD)v309 - 8 - (v312 & 0xFFFFFFFFFFFFFFF8)] > &v305[(_QWORD)v309 - 8])
              {
                v313 = v302;
                goto LABEL_605;
              }
              if ((uint64_t *)((char *)v302 - (v312 & 0xFFFFFFFFFFFFFFF8) - 8) > v302 - 1)
              {
                v313 = v302;
                goto LABEL_605;
              }
              if ((unint64_t)(v297 - (_QWORD)v309) < 0x20)
              {
                v313 = v302;
                goto LABEL_605;
              }
              v315 = (v312 >> 3) + 1;
              v313 = &v302[-(v315 & 0x3FFFFFFFFFFFFFFCLL)];
              v316 = &v305[(_QWORD)v309 - 16];
              v317 = v302 - 2;
              v318 = v315 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v319 = *(_OWORD *)v317;
                *((_OWORD *)v316 - 1) = *((_OWORD *)v317 - 1);
                *(_OWORD *)v316 = v319;
                v316 -= 32;
                v317 -= 4;
                v318 -= 4;
              }
              while (v318);
              v310 -= v315 & 0x3FFFFFFFFFFFFFFCLL;
              if (v315 != (v315 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_605:
                  v314 = *--v313;
                  *--v310 = v314;
                }
                while (v313 != (uint64_t *)v297);
              }
              if (v297)
LABEL_607:
                operator delete((void *)v297);
              v297 = (int64_t)v310;
              v302 = v311;
            }
            if (++v303 == v300)
            {
              v11 = v367;
              v284 = (uint64_t **)(a1 + 96);
              v294 = v369;
              goto LABEL_621;
            }
            continue;
          }
        }
LABEL_656:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v302 = 0;
      v370 = 0;
LABEL_621:
      v320 = *v284;
      v321 = v284;
      v322 = v284;
      if (*v284)
      {
        while (1)
        {
          while (1)
          {
            v322 = (uint64_t **)v320;
            v323 = *((_DWORD *)v320 + 8);
            if (v294 >= v323)
              break;
            v320 = *v322;
            v321 = v322;
            if (!*v322)
              goto LABEL_628;
          }
          if (v323 >= v294)
            break;
          v320 = v322[1];
          if (!v320)
          {
            v321 = v322 + 1;
            goto LABEL_628;
          }
        }
      }
      else
      {
LABEL_628:
        v324 = (uint64_t *)v322;
        v325 = v294;
        v322 = (uint64_t **)operator new(0x30uLL);
        *((_DWORD *)v322 + 8) = v325;
        v322[5] = 0;
        *v322 = 0;
        v322[1] = 0;
        v322[2] = v324;
        *v321 = (uint64_t *)v322;
        v326 = (_QWORD *)**v11;
        v327 = (uint64_t *)v322;
        if (v326)
        {
          *v11 = v326;
          v327 = *v321;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), v327);
        ++*(_QWORD *)(a1 + 104);
      }
      if ((uint64_t *)v297 != v302)
      {
        v328 = (uint64_t)v322[5];
        v329 = (int64_t)v302 - v297;
        if ((uint64_t *)((char *)v302 - v297) == (uint64_t *)8)
        {
          v330 = *(_QWORD *)v297;
          *(_QWORD *)(v328 + 48) = *(_QWORD *)v297;
          *(_QWORD *)(v330 + 8) = v328;
          *(_QWORD *)(v330 + 16) = 0;
LABEL_639:
          operator delete((void *)v297);
          goto LABEL_640;
        }
        karo::Pool<karo::StaticSphereTreeElement>::construct<>((uint64_t **)(v328 + 8));
        *(_QWORD *)(v328 + 48) = v331;
        *(_OWORD *)__p = 0uLL;
        v431 = 0;
        if (v329 < 0)
          goto LABEL_654;
        v332 = v331;
        v333 = (char *)operator new(v329);
        v334 = &v333[v329];
        __p[0] = v333;
        v431 = (int64_t)&v333[v329];
        memcpy(v333, (const void *)v297, v329);
        __p[1] = v334;
        karo::StaticSphereTreeElement::build(v332, __p, 0, v329 >> 3, v328, 0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v284 = (uint64_t **)(a1 + 96);
      }
      if (v297)
        goto LABEL_639;
LABEL_640:
      if (v370)
        operator delete(v370);
      v335 = v293[1];
      if (v335)
      {
        do
        {
          v336 = (uint64_t **)v335;
          v335 = (uint64_t *)*v335;
        }
        while (v335);
      }
      else
      {
        do
        {
          v336 = (uint64_t **)v293[2];
          v9 = *v336 == (uint64_t *)v293;
          v293 = v336;
        }
        while (!v9);
      }
      v293 = v336;
    }
    while (v336 != &v428);
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 112));
  v337 = *(_QWORD *)(a1 + 96);
  v338 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v337;
  v339 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 40) = v339;
  v340 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v340;
  v341 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 88) = v338;
  v342 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 80) = v342;
  *(_QWORD *)(a1 + 104) = v341;
  v343 = (_QWORD *)(v337 + 16);
  if (!v342)
    v343 = (_QWORD *)(a1 + 64);
  *v343 = a1 + 72;
  v344 = (uint64_t ***)(*(_QWORD *)(a1 + 96) + 16);
  if (!v341)
    v344 = (uint64_t ***)v11;
  *v344 = v284;
  ++*(_DWORD *)(a1 + 120);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 112));
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(v428);
}

uint64_t karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::clear(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + 24);
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::clear();
    if (*(_QWORD *)(a1 + 32))
      karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::clear();
    *v3 = 0;
    v3[1] = 0;
    v4 = *(_QWORD *)(a1 + 8);
    result = (**(uint64_t (***)(uint64_t))a1)(a1);
    *(_QWORD *)a1 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = a1;
  }
  return result;
}

altitude::TriggerManager::Trigger *altitude::TriggerManager::Trigger::Trigger(altitude::TriggerManager::Trigger *this, const altitude::TriggerManager::Trigger *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;

  *(_QWORD *)this = &off_1E42C2CC8;
  v4 = *(_OWORD *)((char *)a2 + 8);
  v5 = *(_OWORD *)((char *)a2 + 24);
  v6 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v6;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *(_QWORD *)this = &off_1E42C4428;
  *((_QWORD *)this + 9) = 0;
  v7 = *((_OWORD *)a2 + 5);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_OWORD *)this + 5) = v7;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 13);
  v8 = (_BYTE *)*((_QWORD *)a2 + 14);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new(v8 - v9);
    *((_QWORD *)this + 13) = v11;
    *((_QWORD *)this + 14) = v11;
    v12 = &v11[2 * (v10 >> 1)];
    *((_QWORD *)this + 15) = v12;
    memcpy(v11, v9, v10);
    *((_QWORD *)this + 14) = v12;
  }
  v13 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = (std::string *)((char *)this + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v16 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  v17 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  v19 = (std::string *)((char *)this + 200);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v20 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v21 = *((_QWORD *)a2 + 28);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_QWORD *)this + 28) = v21;
  *((_QWORD *)this + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 9) + 16))(*((_QWORD *)a2 + 9));
  return this;
}

altitude::TriggerManager::Trigger *std::vector<altitude::TriggerManager::Trigger>::__push_back_slow_path<altitude::TriggerManager::Trigger const&>(altitude::TriggerManager::Trigger **a1, const altitude::TriggerManager::Trigger *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  altitude::TriggerManager::Trigger *v8;
  altitude::TriggerManager::Trigger *v9;
  altitude::TriggerManager::Trigger *v10;
  const altitude::TriggerManager::Trigger *v11;
  const altitude::TriggerManager::Trigger *v12;
  const altitude::TriggerManager::Trigger *v13;
  const altitude::TriggerManager::Trigger *v14;
  const altitude::TriggerManager::Trigger *v15;
  void (**v16)(const altitude::TriggerManager::Trigger *);
  BOOL v17;

  v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x111111111111111)
    abort();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888)
    v6 = 0x111111111111111;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x111111111111111)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(240 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (altitude::TriggerManager::Trigger *)&v7[240 * v6];
  v9 = altitude::TriggerManager::Trigger::Trigger((altitude::TriggerManager::Trigger *)&v7[240 * v2], a2);
  v10 = (altitude::TriggerManager::Trigger *)((char *)v9 + 240);
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11)
      return v10;
    goto LABEL_18;
  }
  do
  {
    v11 = (const altitude::TriggerManager::Trigger *)((char *)v11 - 240);
    v9 = altitude::TriggerManager::Trigger::Trigger((altitude::TriggerManager::Trigger *)((char *)v9 - 240), v11);
  }
  while (v11 != v12);
  v11 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v13 != v11)
  {
    v14 = (const altitude::TriggerManager::Trigger *)((char *)v13 - 240);
    v15 = (const altitude::TriggerManager::Trigger *)((char *)v13 - 240);
    do
    {
      v16 = *(void (***)(const altitude::TriggerManager::Trigger *))v15;
      v15 = (const altitude::TriggerManager::Trigger *)((char *)v15 - 240);
      (*v16)(v14);
      v17 = v14 == v11;
      v14 = v15;
    }
    while (!v17);
  }
  if (v11)
LABEL_18:
    operator delete(v11);
  return v10;
}

double karo::Pool<karo::StaticSphereTreeElement>::construct<>(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  double result;

  v2 = a1[4];
  if (v2)
  {
    v3 = (uint64_t *)*v2;
  }
  else
  {
    v4 = (char *)malloc_type_malloc(*((unsigned int *)a1 + 7), 0xF0B72BE0uLL);
    v5 = v4;
    v7 = a1 + 1;
    v6 = a1[1];
    if (v6)
    {
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v6;
          v9 = v6[4];
          if ((unint64_t)v4 >= v9)
            break;
          v6 = *v8;
          v7 = v8;
          if (!*v8)
            goto LABEL_10;
        }
        if (v9 >= (unint64_t)v4)
          break;
        v6 = v8[1];
        if (!v6)
        {
          v7 = v8 + 1;
          goto LABEL_10;
        }
      }
    }
    else
    {
      v8 = a1 + 1;
LABEL_10:
      v10 = (uint64_t *)operator new(0x28uLL);
      v10[4] = (uint64_t)v5;
      *v10 = 0;
      v10[1] = 0;
      v10[2] = (uint64_t)v8;
      *v7 = v10;
      v11 = (uint64_t *)**a1;
      if (v11)
      {
        *a1 = v11;
        v12 = *v7;
      }
      else
      {
        v12 = v10;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
    }
    v13 = &v5[72 * *((_DWORD *)a1 + 6) - 72];
    v14 = (char *)a1[4];
    do
    {
      v3 = (uint64_t *)v14;
      v14 = v13;
      *(_QWORD *)v13 = v3;
      v13 -= 72;
    }
    while (v13 >= v5);
    v2 = (uint64_t *)(v13 + 72);
  }
  a1[4] = v3;
  result = 0.0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 1) = 0u;
  *v2 = (uint64_t)&off_1E42C2D70;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  return result;
}

void karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::~BoundsTreeElement()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::BoundsTreeCommon<karo::StaticSphereTreeElement>::~BoundsTreeCommon(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C2CA8;
  karo::Pool<karo::StaticSphereTreeElement>::disposeElements(a1 + 8);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 16));
  return a1;
}

void karo::BoundsTreeCommon<karo::StaticSphereTreeElement>::~BoundsTreeCommon(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C2CA8;
  karo::Pool<karo::StaticSphereTreeElement>::disposeElements(a1 + 8);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 16));
  JUMPOUT(0x1A1AF4E00);
}

void karo::Pool<karo::StaticSphereTreeElement>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (***v18)(_QWORD);
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v29 = &v30;
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = 0;
    do
    {
      v5 = v30;
      v6 = &v30;
      v7 = &v30;
      if (v30)
      {
        while (1)
        {
          while (1)
          {
            v7 = (uint64_t **)v5;
            v8 = v5[4];
            if ((unint64_t)v2 >= v8)
              break;
            v5 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_13;
          }
          if (v8 >= (unint64_t)v2)
            break;
          v5 = v7[1];
          if (!v5)
          {
            v6 = v7 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v9 = (uint64_t *)operator new(0x28uLL);
        v9[4] = (uint64_t)v2;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v7;
        *v6 = v9;
        if (*v29)
        {
          v29 = (uint64_t **)*v29;
          v4 = *v6;
        }
        else
        {
          v4 = v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v30, v4);
        v3 = ++v31;
        v2 = *(_QWORD **)(a1 + 32);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 32) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_QWORD **)a1;
  v12 = (_QWORD *)(a1 + 8);
  v13 = v3 == *(_QWORD *)(a1 + 16) * v10 || v11 == v12;
  if (v13 || v10 == 0)
  {
    if (v11 == v12)
      goto LABEL_48;
    goto LABEL_50;
  }
  v15 = 1;
  do
  {
    if (v15)
    {
      v16 = 0;
      v17 = v11[4];
      do
      {
        v18 = (void (***)(_QWORD))(v17 + (72 * v16));
        v19 = v30;
        if (!v30)
          goto LABEL_29;
        v20 = &v30;
        do
        {
          v21 = v19;
          v22 = v20;
          v23 = v19[4];
          v24 = (uint64_t **)(v19 + 1);
          if (v23 >= (unint64_t)v18)
          {
            v24 = (uint64_t **)v21;
            v20 = (uint64_t **)v21;
          }
          v19 = *v24;
        }
        while (v19);
        if (v20 == &v30)
          goto LABEL_29;
        if (v23 < (unint64_t)v18)
          v21 = (uint64_t *)v22;
        if ((unint64_t)v18 < v21[4])
        {
LABEL_29:
          (**v18)(v18);
          v10 = *(unsigned int *)(a1 + 24);
        }
        ++v16;
        v15 = v10;
      }
      while (v16 < v10);
    }
    v25 = (_QWORD *)v11[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        v26 = (_QWORD *)v11[2];
        v13 = *v26 == (_QWORD)v11;
        v11 = v26;
      }
      while (!v13);
    }
    v11 = v26;
  }
  while (v26 != v12);
  v11 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v12)
  {
    do
    {
LABEL_50:
      free((void *)v11[4]);
      v27 = (_QWORD *)v11[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v11[2];
          v13 = *v28 == (_QWORD)v11;
          v11 = v28;
        }
        while (!v13);
      }
      v11 = v28;
    }
    while (v28 != v12);
  }
LABEL_48:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 32) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v30);
}

void altitude::TriggerManager::Trigger::C3MeshData::~C3MeshData(void **this)
{
  *this = off_1E42C4400;
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if ((*((char *)this + 47) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[3]);
    return;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    goto LABEL_5;
}

{
  *this = off_1E42C4400;
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x1A1AF4E00);
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(this[3]);
  goto LABEL_6;
}

uint64_t altitude::TriggerManager::Trigger::C3MeshData::clone(altitude::TriggerManager::Trigger::C3MeshData *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;

  v2 = operator new();
  *(_QWORD *)v2 = off_1E42C4400;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
  v3 = (std::string *)(v2 + 24);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    *(_QWORD *)(v2 + 40) = *((_QWORD *)this + 5);
  }
  v4 = (std::string *)(v2 + 48);
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    *(_QWORD *)(v2 + 64) = *((_QWORD *)this + 8);
  }
  *(_QWORD *)(v2 + 72) = *((_QWORD *)this + 9);
  return v2;
}

uint64_t altitude::TriggerManager::Trigger::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  unint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  void **v23;
  char v24;
  __int128 v25;
  void *v26;
  size_t v27;
  void **v28;
  char v29;
  __int128 v30;
  void *v31;
  size_t v32;
  void **v33;
  char v34;
  __int128 v35;
  void *v36;
  size_t v37;
  void **v38;
  char v39;
  __int128 v40;
  void *v41;
  size_t v42;
  uint64_t v43;

  v4 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = a2[8];
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[9] + 16))(a2[9]);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_OWORD *)a2 + 5);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 80) = v6;
  if ((_QWORD *)a1 != a2)
  {
    v7 = *(char **)(a1 + 104);
    v8 = (char *)a2[13];
    v9 = (_BYTE *)a2[14];
    v10 = v9 - v8;
    v11 = (v9 - v8) >> 1;
    v12 = *(_QWORD *)(a1 + 120);
    if (v11 > (uint64_t)(v12 - (_QWORD)v7) >> 1)
    {
      if (v7)
      {
        *(_QWORD *)(a1 + 112) = v7;
        operator delete(v7);
        v12 = 0;
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
      }
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_69;
      if (v12 <= v11)
        v13 = (v9 - v8) >> 1;
      else
        v13 = v12;
      v14 = v12 >= 0x7FFFFFFFFFFFFFFELL;
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v14)
        v15 = v13;
      if (v15 < 0)
LABEL_69:
        abort();
      v16 = 2 * v15;
      v17 = (char *)operator new(2 * v15);
      v7 = v17;
      *(_QWORD *)(a1 + 104) = v17;
      *(_QWORD *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = &v17[v16];
      if (v9 != v8)
        memcpy(v17, v8, v9 - v8);
      goto LABEL_24;
    }
    v18 = *(_BYTE **)(a1 + 112);
    v19 = (v18 - v7) >> 1;
    if (v19 >= v11)
    {
      if (v9 == v8)
      {
LABEL_24:
        *(_QWORD *)(a1 + 112) = &v7[v10];
        v23 = (void **)(a1 + 128);
        v24 = *((_BYTE *)a2 + 151);
        if (*(char *)(a1 + 151) < 0)
        {
          if (v24 >= 0)
            v26 = a2 + 16;
          else
            v26 = (void *)a2[16];
          if (v24 >= 0)
            v27 = *((unsigned __int8 *)a2 + 151);
          else
            v27 = a2[17];
          std::string::__assign_no_alias<false>(v23, v26, v27);
        }
        else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v23, (void *)a2[16], a2[17]);
        }
        else
        {
          v25 = *((_OWORD *)a2 + 8);
          *(_QWORD *)(a1 + 144) = a2[18];
          *(_OWORD *)v23 = v25;
        }
        v28 = (void **)(a1 + 152);
        v29 = *((_BYTE *)a2 + 175);
        if (*(char *)(a1 + 175) < 0)
        {
          if (v29 >= 0)
            v31 = a2 + 19;
          else
            v31 = (void *)a2[19];
          if (v29 >= 0)
            v32 = *((unsigned __int8 *)a2 + 175);
          else
            v32 = a2[20];
          std::string::__assign_no_alias<false>(v28, v31, v32);
        }
        else if ((*((_BYTE *)a2 + 175) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v28, (void *)a2[19], a2[20]);
        }
        else
        {
          v30 = *(_OWORD *)(a2 + 19);
          *(_QWORD *)(a1 + 168) = a2[21];
          *(_OWORD *)v28 = v30;
        }
        v33 = (void **)(a1 + 176);
        v34 = *((_BYTE *)a2 + 199);
        if (*(char *)(a1 + 199) < 0)
        {
          if (v34 >= 0)
            v36 = a2 + 22;
          else
            v36 = (void *)a2[22];
          if (v34 >= 0)
            v37 = *((unsigned __int8 *)a2 + 199);
          else
            v37 = a2[23];
          std::string::__assign_no_alias<false>(v33, v36, v37);
        }
        else if ((*((_BYTE *)a2 + 199) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v33, (void *)a2[22], a2[23]);
        }
        else
        {
          v35 = *((_OWORD *)a2 + 11);
          *(_QWORD *)(a1 + 192) = a2[24];
          *(_OWORD *)v33 = v35;
        }
        v38 = (void **)(a1 + 200);
        v39 = *((_BYTE *)a2 + 223);
        if (*(char *)(a1 + 223) < 0)
        {
          if (v39 >= 0)
            v41 = a2 + 25;
          else
            v41 = (void *)a2[25];
          if (v39 >= 0)
            v42 = *((unsigned __int8 *)a2 + 223);
          else
            v42 = a2[26];
          std::string::__assign_no_alias<false>(v38, v41, v42);
        }
        else if ((*((_BYTE *)a2 + 223) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v38, (void *)a2[25], a2[26]);
        }
        else
        {
          v40 = *(_OWORD *)(a2 + 25);
          *(_QWORD *)(a1 + 216) = a2[27];
          *(_OWORD *)v38 = v40;
        }
        goto LABEL_68;
      }
      v21 = *(void **)(a1 + 104);
      v22 = (char *)a2[13];
    }
    else
    {
      v20 = &v8[2 * v19];
      if (v18 != v7)
      {
        memmove(*(void **)(a1 + 104), (const void *)a2[13], v18 - v7);
        v7 = *(char **)(a1 + 112);
      }
      v10 = v9 - v20;
      if (v9 == v20)
        goto LABEL_24;
      v21 = v7;
      v22 = v20;
    }
    memmove(v21, v22, v10);
    goto LABEL_24;
  }
LABEL_68:
  v43 = a2[28];
  *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
  *(_QWORD *)(a1 + 224) = v43;
  return a1;
}

void altitude::TriggerManager::cullTriggers(uint64_t a1, altitude::TriggerManager::Trigger **a2, _OWORD *a3, unsigned int a4)
{
  __int128 v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  const altitude::TriggerManager::Trigger *v15;
  altitude::TriggerManager::Trigger *v16;
  altitude::TriggerManager::Trigger *v17;
  altitude::TriggerManager::Trigger *v18;
  altitude::TriggerManager::Trigger *v19;
  _OWORD v20[2];
  void **v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v7 = a3[1];
  v20[0] = *a3;
  v20[1] = v7;
  v21 = (void **)&v22;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 112));
  v8 = *(_QWORD **)(a1 + 64);
  if (v8 != (_QWORD *)(a1 + 72))
  {
    do
    {
      if (*((_DWORD *)v8 + 8) <= a4)
      {
        v11 = *(_QWORD *)(v8[5] + 48);
        if (v11)
          karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::collectLeafs<altitude::SphereCulling<altitude::TriggerManager::Trigger>>(v11, (uint64_t)v20);
      }
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 72));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 112));
  v9 = v22;
  v10 = v23;
  if (v22 != v23)
  {
    do
    {
      v15 = *(const altitude::TriggerManager::Trigger **)v9;
      if (*(_QWORD *)(*(_QWORD *)v9 + 72))
      {
        v16 = *a2;
        if ((unint64_t)*a2 <= 1)
        {
          *a2 = (altitude::TriggerManager::Trigger *)((char *)v16 + 1);
          altitude::TriggerManager::Trigger::operator=((uint64_t)&a2[30 * (_QWORD)v16 + 1], v15);
        }
        else
        {
          v17 = a2[62];
          if (v16 == (altitude::TriggerManager::Trigger *)2)
          {
            if (v17 >= a2[63])
              v18 = std::vector<altitude::TriggerManager::Trigger>::__push_back_slow_path<altitude::TriggerManager::Trigger const&>(a2 + 61, (const altitude::TriggerManager::Trigger *)(a2 + 1));
            else
              v18 = (altitude::TriggerManager::Trigger *)((char *)altitude::TriggerManager::Trigger::Trigger(v17, (const altitude::TriggerManager::Trigger *)(a2 + 1))+ 240);
            a2[62] = v18;
            if (v18 >= a2[63])
              v17 = std::vector<altitude::TriggerManager::Trigger>::__push_back_slow_path<altitude::TriggerManager::Trigger const&>(a2 + 61, (const altitude::TriggerManager::Trigger *)(a2 + 31));
            else
              v17 = (altitude::TriggerManager::Trigger *)((char *)altitude::TriggerManager::Trigger::Trigger(v18, (const altitude::TriggerManager::Trigger *)(a2 + 31))+ 240);
            a2[62] = v17;
          }
          if (v17 >= a2[63])
            v19 = std::vector<altitude::TriggerManager::Trigger>::__push_back_slow_path<altitude::TriggerManager::Trigger const&>(a2 + 61, v15);
          else
            v19 = (altitude::TriggerManager::Trigger *)((char *)altitude::TriggerManager::Trigger::Trigger(v17, v15)
                                                      + 240);
          a2[62] = v19;
          *a2 = (altitude::TriggerManager::Trigger *)((char *)*a2 + 1);
        }
      }
      v9 += 8;
    }
    while (v9 != v10);
    v9 = v22;
  }
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::collectLeafs<altitude::SphereCulling<altitude::TriggerManager::Trigger>>(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  float64x2_t v5;
  double v6;
  double v7;
  double v8;
  unsigned int v9;

  while (1)
  {
    v4 = vsubq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 8));
    v5 = vmulq_f64(v4, v4);
    v6 = sqrt(v5.f64[0] + (*(double *)(a1 + 40) - *(double *)a2) * (*(double *)(a1 + 40) - *(double *)a2) + v5.f64[1]);
    v7 = *(double *)(a2 + 24);
    v8 = *(double *)(a1 + 64);
    if (v6 <= v8 + v7)
    {
      if (v6 + v8 <= v7)
      {
        v9 = 0;
        if (!*(_QWORD *)(a1 + 24))
        {
LABEL_12:
          if (v9 <= 1)
            altitude::SphereCulling<altitude::TriggerManager::Trigger>::collectLeaf(*(_QWORD *)(a2 + 32), a1);
          return;
        }
      }
      else
      {
        v9 = 1;
        if (!*(_QWORD *)(a1 + 24))
          goto LABEL_12;
      }
    }
    else
    {
      v9 = 2;
      if (!*(_QWORD *)(a1 + 24))
        goto LABEL_12;
    }
    if (v9 != 1)
      break;
    karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::collectLeafs<altitude::SphereCulling<altitude::TriggerManager::Trigger>>();
    a1 = *(_QWORD *)(a1 + 32);
  }
  if (!v9)
    karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::addLeafs<altitude::SphereCulling<altitude::TriggerManager::Trigger>>(a1, a2);
}

void altitude::SphereCulling<altitude::TriggerManager::Trigger>::collectLeaf(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(_BYTE **)a1;
    v9 = (uint64_t)v5 - *(_QWORD *)a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 == (_QWORD *)v8)
    {
      v8 = v5;
    }
    else
    {
      v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58)
        goto LABEL_29;
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20)
        goto LABEL_29;
      v18 = (v17 >> 3) + 1;
      v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v23 = *--v6;
          *--v15 = v23;
        }
        while (v6 != (_QWORD *)v8);
        v8 = *(_BYTE **)a1;
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::addLeafs<altitude::SphereCulling<altitude::TriggerManager::Trigger>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = a1;
  for (i = *(_QWORD *)(a1 + 24); i; i = *(_QWORD *)(v3 + 24))
  {
    karo::BoundsTreeElement<karo::StaticSphereTreeElement,karo::BoundsTreeCommon<karo::StaticSphereTreeElement>,gm::Sphere<double,3,std::enable_if<true,void>>>::addLeafs<altitude::SphereCulling<altitude::TriggerManager::Trigger>>(i, a2);
    v3 = *(_QWORD *)(v3 + 32);
  }
  altitude::SphereCulling<altitude::TriggerManager::Trigger>::collectLeaf(*(_QWORD *)(a2 + 32), v3);
}

void karo::Pool<altitude::Anchor>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;

  v40 = 0;
  v41 = 0;
  v39 = &v40;
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = 0;
    do
    {
      v5 = v40;
      v6 = &v40;
      v7 = &v40;
      if (v40)
      {
        while (1)
        {
          while (1)
          {
            v7 = (uint64_t **)v5;
            v8 = v5[4];
            if ((unint64_t)v2 >= v8)
              break;
            v5 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_13;
          }
          if (v8 >= (unint64_t)v2)
            break;
          v5 = v7[1];
          if (!v5)
          {
            v6 = v7 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v9 = (uint64_t *)operator new(0x28uLL);
        v9[4] = (uint64_t)v2;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v7;
        *v6 = v9;
        if (*v39)
        {
          v39 = (uint64_t **)*v39;
          v4 = *v6;
        }
        else
        {
          v4 = v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v40, v4);
        v3 = ++v41;
        v2 = *(_QWORD **)(a1 + 32);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 32) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_QWORD **)a1;
  v12 = (_QWORD *)(a1 + 8);
  v13 = v3 == *(_QWORD *)(a1 + 16) * v10 || v11 == v12;
  if (v13 || v10 == 0)
  {
    if (v11 == v12)
      goto LABEL_65;
    goto LABEL_67;
  }
  v15 = 1;
  do
  {
    if (v15)
    {
      v16 = 0;
      v17 = v11[4];
      do
      {
        v18 = v17 + (104 * v16);
        v19 = v40;
        if (!v40)
          goto LABEL_40;
        v20 = &v40;
        do
        {
          v21 = v19;
          v22 = v20;
          v23 = v19[4];
          v24 = (uint64_t **)(v19 + 1);
          if (v23 >= v18)
          {
            v24 = (uint64_t **)v21;
            v20 = (uint64_t **)v21;
          }
          v19 = *v24;
        }
        while (v19);
        if (v20 == &v40)
          goto LABEL_40;
        if (v23 < v18)
          v21 = (uint64_t *)v22;
        if (v18 < v21[4])
        {
LABEL_40:
          v25 = *(_QWORD **)(v18 + 88);
          v26 = (uint64_t *)v25[3];
          if (v26)
          {
            v27 = v25 + 3;
            v28 = (_QWORD *)v25[3];
            do
            {
              v29 = v28[4];
              v30 = v29 >= v18;
              if (v29 >= v18)
                v31 = v28;
              else
                v31 = v28 + 1;
              if (v30)
                v27 = v28;
              v28 = (_QWORD *)*v31;
            }
            while (*v31);
            if (v27 != v25 + 3 && v27[4] <= v18)
            {
              v32 = (uint64_t *)v27[1];
              v33 = v27;
              if (v32)
              {
                do
                {
                  v34 = v32;
                  v32 = (uint64_t *)*v32;
                }
                while (v32);
              }
              else
              {
                do
                {
                  v34 = (uint64_t *)v33[2];
                  v13 = *v34 == (_QWORD)v33;
                  v33 = v34;
                }
                while (!v13);
              }
              if ((uint64_t *)v25[2] == v27)
                v25[2] = v34;
              --v25[4];
              std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v26, v27);
              operator delete(v27);
              v10 = *(unsigned int *)(a1 + 24);
            }
          }
        }
        ++v16;
        v15 = v10;
      }
      while (v16 < v10);
    }
    v35 = (_QWORD *)v11[1];
    if (v35)
    {
      do
      {
        v36 = v35;
        v35 = (_QWORD *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        v36 = (_QWORD *)v11[2];
        v13 = *v36 == (_QWORD)v11;
        v11 = v36;
      }
      while (!v13);
    }
    v11 = v36;
  }
  while (v36 != v12);
  v11 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v12)
  {
    do
    {
LABEL_67:
      free((void *)v11[4]);
      v37 = (_QWORD *)v11[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v11[2];
          v13 = *v38 == (_QWORD)v11;
          v11 = v38;
        }
        while (!v13);
      }
      v11 = v38;
    }
    while (v38 != v12);
  }
LABEL_65:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 32) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v40);
}

void altitude::AnchorManager::~AnchorManager(altitude::AnchorManager *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    karo::Pool<altitude::Anchor>::disposeElements(v2);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v2 + 8));
    MEMORY[0x1A1AF4E00](v2, 0x1020C40D4280EFALL);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 3));
}

void `anonymous namespace'::getPointsFromSegments(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v6 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 16 * a2);
  v7 = *v6;
  v8 = v6[1] + *v6;
  if ((a4 & 1) == 0)
  {
    if (v7 >= v8)
      return;
    v29 = *(_QWORD **)(a3 + 8);
    while (1)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7);
      v32 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v29 >= v32)
        break;
      *v29 = v31;
      v30 = v29 + 1;
LABEL_37:
      *(_QWORD *)(a3 + 8) = v30;
      ++v7;
      v29 = v30;
      if (v7 == v8)
        return;
    }
    v33 = *(_BYTE **)a3;
    v34 = (uint64_t)v29 - *(_QWORD *)a3;
    v35 = v34 >> 3;
    v36 = (v34 >> 3) + 1;
    if (v36 >> 61)
LABEL_67:
      abort();
    v37 = v32 - (_QWORD)v33;
    if (v37 >> 2 > v36)
      v36 = v37 >> 2;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      if (v38 >> 61)
LABEL_68:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v39 = operator new(8 * v38);
    }
    else
    {
      v39 = 0;
    }
    v40 = &v39[8 * v35];
    *v40 = v31;
    v30 = v40 + 1;
    if (v29 == (_QWORD *)v33)
    {
      v33 = v29;
      goto LABEL_64;
    }
    v41 = (char *)(v29 - 1) - v33;
    if (v41 >= 0x168)
    {
      if (&v39[v34 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8)] > &v39[v34 - 8])
      {
        v42 = v29;
      }
      else if ((_QWORD *)((char *)v29 - (v41 & 0xFFFFFFFFFFFFFFF8) - 8) > v29 - 1)
      {
        v42 = v29;
      }
      else if ((unint64_t)((char *)v29 - &v39[v34]) >= 0x20)
      {
        v43 = (v41 >> 3) + 1;
        v42 = &v29[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
        v44 = &v39[8 * v35 - 16];
        v45 = (__int128 *)(v29 - 2);
        v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v40 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_64;
      }
      else
      {
        v42 = v29;
      }
    }
    else
    {
      v42 = v29;
    }
    do
    {
      v48 = *--v42;
      *--v40 = v48;
    }
    while (v42 != (_QWORD *)v33);
    v33 = *(_BYTE **)a3;
LABEL_64:
    *(_QWORD *)a3 = v40;
    *(_QWORD *)(a3 + 8) = v30;
    *(_QWORD *)(a3 + 16) = &v39[8 * v38];
    if (v33)
      operator delete(v33);
    goto LABEL_37;
  }
  if (v8 > v7)
  {
    v9 = *(_QWORD **)(a3 + 8);
    while (1)
    {
      --v8;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8);
      v12 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v9 >= v12)
        break;
      *v9 = v11;
      v10 = v9 + 1;
LABEL_5:
      *(_QWORD *)(a3 + 8) = v10;
      v9 = v10;
      if (v8 <= v7)
        return;
    }
    v13 = *(_BYTE **)a3;
    v14 = (uint64_t)v9 - *(_QWORD *)a3;
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      goto LABEL_67;
    v17 = v12 - (_QWORD)v13;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        goto LABEL_68;
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    *v20 = v11;
    v10 = v20 + 1;
    if (v9 == (_QWORD *)v13)
    {
      v13 = v9;
    }
    else
    {
      v21 = (char *)(v9 - 1) - v13;
      if (v21 < 0x168)
      {
        v22 = v9;
        goto LABEL_30;
      }
      if (&v19[v14 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
      {
        v22 = v9;
        goto LABEL_30;
      }
      if ((_QWORD *)((char *)v9 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8) > v9 - 1)
      {
        v22 = v9;
        goto LABEL_30;
      }
      if ((unint64_t)((char *)v9 - v19 - v14) < 0x20)
      {
        v22 = v9;
        goto LABEL_30;
      }
      v23 = (v21 >> 3) + 1;
      v22 = &v9[-(v23 & 0x3FFFFFFFFFFFFFFCLL)];
      v24 = &v19[8 * v15 - 16];
      v25 = (__int128 *)(v9 - 2);
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_30:
          v28 = *--v22;
          *--v20 = v28;
        }
        while (v22 != (_QWORD *)v13);
        v13 = *(_BYTE **)a3;
      }
    }
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = &v19[8 * v18];
    if (v13)
      operator delete(v13);
    goto LABEL_5;
  }
}

void std::vector<md::MetaDataRegion>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 48)
  {
    v6 = *(_QWORD *)(i - 24);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 16);
      v5 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          v8 = *(_QWORD *)(v7 - 24);
          if (v8)
          {
            v9 = *(_QWORD *)(v7 - 16);
            v10 = *(void **)(v7 - 24);
            if (v9 != v8)
            {
              v11 = *(_QWORD *)(v7 - 16);
              do
              {
                v13 = *(void **)(v11 - 24);
                v11 -= 24;
                v12 = v13;
                if (v13)
                {
                  *(_QWORD *)(v9 - 16) = v12;
                  operator delete(v12);
                }
                v9 = v11;
              }
              while (v11 != v8);
              v10 = *(void **)(v7 - 24);
            }
            *(_QWORD *)(v7 - 16) = v8;
            operator delete(v10);
          }
          v14 = *(void **)(v7 - 48);
          if (v14)
          {
            *(_QWORD *)(v7 - 40) = v14;
            operator delete(v14);
          }
          v7 -= 64;
        }
        while (v7 != v6);
        v5 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v6;
      operator delete(v5);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::construct_at[abi:nn180100]<md::MetaDataRegionPolygon,md::MetaDataRegionPolygon,md::MetaDataRegionPolygon*>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v5 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = &v8[8 * (v7 >> 3)];
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 24) = &v8[v9];
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)a2 + 6);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    if (v13 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v14 = (char *)operator new(v12);
    v15 = 0;
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = &v14[24 * v13];
    do
    {
      v18 = v10 + v15;
      v19 = &v14[v15];
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      v21 = *(_BYTE **)(v10 + v15);
      v20 = *(_BYTE **)(v10 + v15 + 8);
      v22 = v20 - v21;
      if (v20 != v21)
      {
        if (v22 < 0)
          abort();
        v16 = (char *)operator new(v20 - v21);
        *(_QWORD *)v19 = v16;
        *((_QWORD *)v19 + 1) = v16;
        *((_QWORD *)v19 + 2) = &v16[8 * (v22 >> 3)];
        v17 = v22 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v16, v21, v17);
        *((_QWORD *)v19 + 1) = &v16[v17];
      }
      v15 += 24;
    }
    while (v18 + 24 != v11);
    *(_QWORD *)(a1 + 48) = &v14[v15];
  }
  return a1;
}

void sub_19F7C9FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  v12 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 24) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::MetaDataRegionPolygon>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    v4 = *(_QWORD *)(i - 24);
    if (v4)
    {
      v5 = *(_QWORD *)(i - 16);
      v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        v7 = *(_QWORD *)(i - 16);
        do
        {
          v9 = *(void **)(v7 - 24);
          v7 -= 24;
          v8 = v9;
          if (v9)
          {
            *(_QWORD *)(v5 - 16) = v8;
            operator delete(v8);
          }
          v5 = v7;
        }
        while (v7 != v4);
        v6 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v4;
      operator delete(v6);
    }
    v10 = *(void **)(i - 48);
    if (v10)
    {
      *(_QWORD *)(i - 40) = v10;
      operator delete(v10);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<md::MetaDataRegion>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v5 = i - 48;
      *(_QWORD *)(a1 + 16) = i - 48;
      v6 = *(_QWORD *)(i - 24);
      if (v6)
        break;
      i -= 48;
      if (v5 == a2)
        return;
    }
    v7 = *(_QWORD *)(i - 16);
    v8 = *(void **)(i - 24);
    if (v7 != v6)
    {
      do
      {
        v9 = *(_QWORD *)(v7 - 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v7 - 16);
          v11 = *(void **)(v7 - 24);
          if (v10 != v9)
          {
            v12 = *(_QWORD *)(v7 - 16);
            do
            {
              v14 = *(void **)(v12 - 24);
              v12 -= 24;
              v13 = v14;
              if (v14)
              {
                *(_QWORD *)(v10 - 16) = v13;
                operator delete(v13);
              }
              v10 = v12;
            }
            while (v12 != v9);
            v11 = *(void **)(v7 - 24);
          }
          *(_QWORD *)(v7 - 16) = v9;
          operator delete(v11);
        }
        v15 = *(void **)(v7 - 48);
        if (v15)
        {
          *(_QWORD *)(v7 - 40) = v15;
          operator delete(v15);
        }
        v7 -= 64;
      }
      while (v7 != v6);
      v8 = *(void **)(i - 24);
    }
    *(_QWORD *)(i - 16) = v6;
    operator delete(v8);
  }
}

void md::RegionMetaTileData::~RegionMetaTileData(md::RegionMetaTileData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E4295DD8;
  *((_QWORD *)this + 79) = &unk_1E4295E18;
  v2 = *((_QWORD *)this + 90);
  if (v2)
  {
    std::vector<md::MetaDataRegion>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 720, v2);
    operator delete(*((void **)this + 90));
  }
  md::MapTileData::~MapTileData(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E4295DD8;
  *((_QWORD *)this + 79) = &unk_1E4295E18;
  v2 = *((_QWORD *)this + 90);
  if (v2)
  {
    std::vector<md::MetaDataRegion>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 720, v2);
    operator delete(*((void **)this + 90));
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::GlobeSkyRenderLayer::layout(md::GlobeSkyRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  float v35;
  md::GlobeSkyRenderResources *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int64x2_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int8x8_t v64;
  uint8x8_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float v98;
  __float2 v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  double v114;
  void *v115;
  float v116;
  float v117;
  double v118;
  float v119;
  float *v120;
  double v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  int v142;
  double v143;
  uint64_t v144;
  ggl::PipelineSetup *v145;
  float v146;
  id v147;
  double v148;
  float v149;
  md::LightingLogicContext *v150;
  float *v151;
  void *v152;
  float v153;
  double v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  int64x2_t *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  ggl::RenderItem *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  float *v219;
  id v220;
  double v221;
  _QWORD *result;
  uint64_t v223;
  float v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  float v238;
  float v239;
  float v240;
  double v241;
  float v242;
  float v243;
  double v244;
  float v245;
  float v246;
  double v247;
  float v248;
  float v249;
  double v250;
  float v251;
  double v252;
  float v253;
  double v254;
  float v255;
  double v256;
  float v257;
  double v258;
  float v259;
  double v260;
  float v261;
  double v262;
  float v263;
  double v264;
  float v265;
  double v266;
  float v267;
  double v268;
  float v269;
  double v270;
  float v271;
  double v272;
  float v273;
  double v274;
  float v275;
  double v276;
  float v277;
  double v278;
  float v279;
  double v280;
  float v281;
  double v282;
  float v283;
  double v284;
  float v285;
  double v286;
  float v287;
  uint64_t v288[5];
  uint64_t v289;
  uint64_t v290[5];
  float *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int16 v296;
  uint64_t v297;
  _QWORD v298[3];
  _QWORD *v299;
  _QWORD v300[3];
  _QWORD *v301;
  _QWORD v302[3];
  _QWORD *v303;
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  v300[0] = &off_1E42CFCE0;
  v300[1] = a2;
  v301 = v300;
  v298[0] = &off_1E42CFD28;
  v298[1] = a2;
  v299 = v298;
  v303 = v302;
  v302[0] = &off_1E42CFD28;
  v302[1] = a2;
  std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v300);
  v4 = v299;
  if (v299 == v298)
  {
    v5 = 4;
    v4 = v298;
  }
  else
  {
    if (!v299)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v301;
  if (v301 == v300)
  {
    v7 = 4;
    v6 = v300;
    goto LABEL_10;
  }
  if (v301)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (uint64_t *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_164;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x7C7EC6C7C111B0D0;
    if (*(_QWORD *)&v9 <= 0x7C7EC6C7C111B0D0uLL)
      v11 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x7C7EC6C7C111B0D0;
  }
  v12 = *v8;
  v13 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v13)
    goto LABEL_164;
  v14 = (_QWORD *)*v13;
  if (!*v13)
    goto LABEL_164;
  v15 = *(_QWORD *)&v9 - 1;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x7C7EC6C7C111B0D0)
      {
        if (v14[2] == 0x7C7EC6C7C111B0D0)
          goto LABEL_32;
      }
      else if ((v16 & v15) != v11)
      {
        goto LABEL_164;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_164;
    }
  }
  while (1)
  {
    v17 = v14[1];
    if (v17 == 0x7C7EC6C7C111B0D0)
      break;
    if (v17 >= *(_QWORD *)&v9)
      v17 %= *(_QWORD *)&v9;
    if (v17 != v11)
      goto LABEL_164;
LABEL_26:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_164;
  }
  if (v14[2] != 0x7C7EC6C7C111B0D0)
    goto LABEL_26;
LABEL_32:
  v18 = v14[5];
  if (*(_QWORD *)(v18 + 8) != 0x7C7EC6C7C111B0D0)
    goto LABEL_164;
  v19 = *(float **)(v18 + 32);
  if (!v19)
    goto LABEL_164;
  if (v10.u32[0] > 1uLL)
  {
    v20 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v9 <= 0x3070CB6B3C7F21D3uLL)
      v20 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v9;
  }
  else
  {
    v20 = v15 & 0x3070CB6B3C7F21D3;
  }
  v21 = *(_QWORD **)(v12 + 8 * v20);
  if (!v21)
    goto LABEL_164;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_164;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v22[1];
      if (v23 == 0x3070CB6B3C7F21D3)
      {
        if (v22[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_54;
      }
      else if ((v23 & v15) != v20)
      {
        goto LABEL_164;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_164;
    }
  }
  while (2)
  {
    v24 = v22[1];
    if (v24 != 0x3070CB6B3C7F21D3)
    {
      if (v24 >= *(_QWORD *)&v9)
        v24 %= *(_QWORD *)&v9;
      if (v24 != v20)
        goto LABEL_164;
      goto LABEL_48;
    }
    if (v22[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_48:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_164;
      continue;
    }
    break;
  }
LABEL_54:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) != 0x3070CB6B3C7F21D3 || !*(_QWORD *)(v25 + 32))
    goto LABEL_164;
  if (v10.u32[0] > 1uLL)
  {
    v26 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v26 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v26 = v15 & 0x1AF456233693CD46;
  }
  v27 = *(_QWORD **)(v12 + 8 * v26);
  if (!v27)
    goto LABEL_78;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_78;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v28[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v28[2] == 0x1AF456233693CD46)
          goto LABEL_76;
      }
      else if ((v29 & v15) != v26)
      {
        goto LABEL_78;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_78;
    }
  }
  while (2)
  {
    v30 = v28[1];
    if (v30 != 0x1AF456233693CD46)
    {
      if (v30 >= *(_QWORD *)&v9)
        v30 %= *(_QWORD *)&v9;
      if (v30 != v26)
        goto LABEL_78;
      goto LABEL_70;
    }
    if (v28[2] != 0x1AF456233693CD46)
    {
LABEL_70:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_78;
      continue;
    }
    break;
  }
LABEL_76:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0x1AF456233693CD46)
  {
    v32 = *(_QWORD *)(v31 + 32);
    goto LABEL_79;
  }
LABEL_78:
  v32 = 0;
LABEL_79:
  v33 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 56), *((_BYTE *)this + 57));
  v34 = *(float *)(v32 + 3076) < 4.0;
  v35 = 0.0;
  if (*(float *)(v32 + 3076) < 4.0)
    v35 = 1.0;
  v224 = v35;
  v36 = (md::GlobeSkyRenderResources *)*((_QWORD *)this + 6);
  if (!*((_QWORD *)v36 + 18))
  {
    md::GlobeSkyRenderResources::buildAtmosphereModel(v36);
    v37 = operator new(0xE8uLL);
    v37[1] = 0;
    v37[2] = 0;
    *v37 = &off_1E42E17C0;
    v38 = ggl::BufferData::BufferData((uint64_t)(v37 + 3), qword_1EE545560, 2, 1, 6, 1);
    v37[28] = ggl::GlobeAtmosphere::AtmosphereConstants::reflection(void)::reflection;
    v37[3] = &off_1E42B9150;
    v39 = *((_QWORD *)this + 6);
    v40 = *(std::__shared_weak_count **)(v39 + 152);
    *(_QWORD *)(v39 + 144) = v38;
    *(_QWORD *)(v39 + 152) = v37;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        v43 = v40;
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v44 = *((_QWORD *)this + 6);
    v45 = operator new(0x100uLL);
    v45[1] = 0;
    v45[2] = 0;
    *v45 = &off_1E42DF648;
    v46 = ggl::GlobeAtmosphere::BasePipelineSetup::BasePipelineSetup(v45 + 3, *(_QWORD *)(v44 + 192), *(std::__shared_weak_count **)(v44 + 200));
    v47 = *((_QWORD *)this + 6);
    v48 = *(std::__shared_weak_count **)(v47 + 168);
    *(_QWORD *)(v47 + 160) = v46;
    *(_QWORD *)(v47 + 168) = v45;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 6) + 160) + 64), *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 6) + 160) + 160), *(_QWORD *)(*((_QWORD *)this + 6) + 144), *(_QWORD *)(*((_QWORD *)this + 6) + 152));
    v51 = operator new(0xF0uLL);
    v51[1] = 0;
    v51[2] = 0;
    *v51 = &off_1E42DEA08;
    v51[5] = 0;
    v51[6] = 0;
    v51[4] = 0;
    *((_DWORD *)v51 + 14) = 0;
    v51[3] = &off_1E42B5DE8;
    *(_QWORD *)((char *)v51 + 60) = 768;
    *((_DWORD *)v51 + 17) = 0;
    v51[9] = 1;
    *((_WORD *)v51 + 40) = 0;
    *((_BYTE *)v51 + 82) = 3;
    *(_QWORD *)((char *)v51 + 91) = 0;
    *(_QWORD *)((char *)v51 + 83) = 0;
    *((_BYTE *)v51 + 99) = 0;
    *(_QWORD *)((char *)v51 + 156) = 0;
    *(_QWORD *)((char *)v51 + 148) = 0;
    *((_WORD *)v51 + 106) = 257;
    v51[27] = 0;
    v51[28] = 0;
    *((_BYTE *)v51 + 232) = 0;
    v52 = *((_QWORD *)this + 6);
    v53 = *(std::__shared_weak_count **)(v52 + 216);
    *(_QWORD *)(v52 + 208) = v51 + 3;
    *(_QWORD *)(v52 + 216) = v51;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *((_QWORD *)this + 6);
    *(_BYTE *)(*(_QWORD *)(v56 + 208) + 58) = 3;
    v57 = (int64x2_t *)operator new();
    v58 = (_QWORD *)*((_QWORD *)this + 6);
    v59 = v58[26];
    v60 = v58[20];
    v61 = v58[14];
    v57->i64[0] = (uint64_t)&off_1E42B59B0;
    v57[1].i64[0] = (uint64_t)"";
    v57[1].i64[1] = v59;
    v57[2].i64[0] = v60;
    v57[2].i32[2] = 0;
    v57[3].i64[0] = 0;
    v57[3].i32[2] = 1065353216;
    v57[4].i64[0] = v61;
    v57[4].i64[1] = 0;
    v57[5].i64[0] = 0;
    v57[5].i64[1] = 0;
    v57[6] = vdupq_n_s64(1uLL);
    v57[7].i64[0] = 0;
    v62 = *(_QWORD *)(v56 + 224);
    *(_QWORD *)(v56 + 224) = v57;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  }
  v63 = (_QWORD *)*((_QWORD *)a2 + 1);
  v64 = (int8x8_t)v63[1];
  if (!*(_QWORD *)&v64)
    goto LABEL_122;
  v65 = (uint8x8_t)vcnt_s8(v64);
  v65.i16[0] = vaddlv_u8(v65);
  if (v65.u32[0] > 1uLL)
  {
    v66 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v64 <= 0x41E8D6E445F4145uLL)
      v66 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v64;
  }
  else
  {
    v66 = (*(_QWORD *)&v64 - 1) & 0x41E8D6E445F4145;
  }
  v67 = *(_QWORD **)(*v63 + 8 * v66);
  if (!v67)
    goto LABEL_122;
  v68 = (_QWORD *)*v67;
  if (!v68)
    goto LABEL_122;
  if (v65.u32[0] < 2uLL)
  {
    v69 = *(_QWORD *)&v64 - 1;
    while (1)
    {
      v71 = v68[1];
      if (v71 == 0x41E8D6E445F4145)
      {
        if (v68[2] == 0x41E8D6E445F4145)
          goto LABEL_120;
      }
      else if ((v71 & v69) != v66)
      {
        goto LABEL_122;
      }
      v68 = (_QWORD *)*v68;
      if (!v68)
        goto LABEL_122;
    }
  }
  while (2)
  {
    v70 = v68[1];
    if (v70 != 0x41E8D6E445F4145)
    {
      if (v70 >= *(_QWORD *)&v64)
        v70 %= *(_QWORD *)&v64;
      if (v70 != v66)
        goto LABEL_122;
      goto LABEL_109;
    }
    if (v68[2] != 0x41E8D6E445F4145)
    {
LABEL_109:
      v68 = (_QWORD *)*v68;
      if (!v68)
        goto LABEL_122;
      continue;
    }
    break;
  }
LABEL_120:
  v72 = v68[5];
  if (*(_QWORD *)(v72 + 8) == 0x41E8D6E445F4145)
  {
    v73 = *(_QWORD *)(v72 + 32);
    goto LABEL_123;
  }
LABEL_122:
  v73 = 0;
LABEL_123:
  v74 = *(_QWORD *)(*((_QWORD *)this + 6) + 144);
  v291 = 0;
  v292 = 0;
  v290[0] = 0;
  v290[1] = 0;
  v75 = *(_QWORD *)(v74 + 8);
  v293 = v74;
  v294 = 0;
  v295 = v75;
  v296 = 1;
  if (v75)
    v76 = *(_QWORD *)(v74 + 72);
  else
    v76 = 0;
  v297 = v76;
  ggl::BufferMemory::operator=(v290, (uint64_t)&v292);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v292);
  v272 = *(double *)(v32 + 608);
  v274 = *(double *)(v32 + 600);
  v268 = *(double *)(v32 + 624);
  v270 = *(double *)(v32 + 616);
  v264 = *(double *)(v32 + 640);
  v266 = *(double *)(v32 + 632);
  v260 = *(double *)(v32 + 656);
  v262 = *(double *)(v32 + 648);
  v256 = *(double *)(v32 + 672);
  v258 = *(double *)(v32 + 664);
  v235 = *(double *)(v32 + 3168);
  v77 = *(double *)(v32 + 528);
  v78 = *(double *)(v32 + 536);
  v79 = *(double *)(v32 + 520);
  v80 = *(double *)(v32 + 544);
  v81 = v77 * -2.0 * v78;
  v82 = -((v79 + v79) * v78 - v80 * (v77 * -2.0));
  v83 = v81 + (v79 + v79) * v80;
  v84 = -(v77 * -2.0 * v77 + 1.0 - (v79 + v79) * v79);
  v85 = 1.0 / sqrt(v82 * v82 + v83 * v83 + v84 * v84);
  v86 = v85 * v82;
  v87 = v85 * v83;
  v88 = v85 * v84;
  v89 = *(double *)(v32 + 496);
  v90 = *(double *)(v32 + 504);
  v91 = *(double *)(v32 + 512);
  v92 = sqrt(v89 * v89 + v90 * v90 + v91 * v91);
  v93 = -(v89 * (1.0 / v92));
  v94 = -(v90 * (1.0 / v92));
  v95 = -(v91 * (1.0 / v92));
  v96 = v93 * v86 + v94 * v87 + v95 * v88;
  v254 = *(double *)(v32 + 3256);
  v252 = *(double *)(v32 + 3264);
  v250 = *(double *)(v32 + 3272);
  v236 = *(double *)(v32 + 3192);
  v237 = *(double *)(v32 + 3160);
  v233 = *(double *)(v32 + 3184);
  v234 = *(double *)(v32 + 3176);
  v231 = *(double *)(v32 + 3248);
  v232 = *(double *)(v32 + 3200);
  v229 = *(double *)(v32 + 3232);
  v230 = *(double *)(v32 + 3240);
  v227 = *(double *)(v32 + 3224);
  v228 = *(double *)(v32 + 3280);
  v225 = *(double *)(v32 + 3208);
  v226 = *(double *)(v32 + 3216);
  v284 = *(double *)(v32 + 560);
  v286 = *(double *)(v32 + 552);
  v280 = *(double *)(v32 + 576);
  v282 = *(double *)(v32 + 568);
  v276 = *(double *)(v32 + 592);
  v278 = *(double *)(v32 + 584);
  if (v96 >= 0.9999999)
  {
    v239 = 0.0;
    v248 = 1.0;
    v113 = 1.0;
    v245 = 0.0;
    v112 = 0.0;
    v110 = 1.0;
    v242 = 0.0;
    v111 = 0.0;
    v109 = 0.0;
  }
  else
  {
    v244 = -(v95 * v86 - v93 * v88);
    v247 = -(v93 * v87 - v94 * v86);
    v241 = -(v94 * v88 - v95 * v87);
    v97 = *(double *)(v32 + 3160) * v241 + *(double *)(v32 + 3192) * v244 + *(double *)(v32 + 3224) * v247;
    v98 = acos(v96);
    v99 = __sincosf_stret(v98 * 0.5);
    v100 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v32 + 3168), v241), *(float64x2_t *)(v32 + 3200), v244), *(float64x2_t *)(v32 + 3232), v247);
    v101 = vmulq_f64(v100, v100);
    v101.f64[0] = 1.0 / sqrt(v101.f64[0] + v97 * v97 + v101.f64[1]);
    v102 = vmulq_n_f64(v100, v101.f64[0]);
    *(float *)v101.f64 = v101.f64[0] * v97;
    *(float *)v101.f64 = v99.__sinval * *(float *)v101.f64;
    v103 = vmul_n_f32(vcvt_f32_f64(v102), v99.__sinval);
    *(float32x2_t *)&v102.f64[0] = vadd_f32(v103, v103);
    v104 = vmul_f32(*(float32x2_t *)&v102.f64[0], v103);
    v248 = 1.0 - vaddv_f32(v104);
    v105 = *(float *)v101.f64 + *(float *)v101.f64;
    v106 = (float)(*(float *)v101.f64 + *(float *)v101.f64) * v103.f32[0];
    v107 = vmuls_lane_f32(v99.__cosval, *(float32x2_t *)&v102.f64[0], 1);
    v108 = vmuls_lane_f32(*(float *)v101.f64 + *(float *)v101.f64, v103, 1);
    v245 = (float)(v99.__cosval * *(float *)v102.f64) + v108;
    v109 = v107 + v106;
    *(float *)v101.f64 = 1.0 - (float)((float)(*(float *)v101.f64 + *(float *)v101.f64) * *(float *)v101.f64);
    v110 = *(float *)v101.f64 - v104.f32[1];
    v103.f32[0] = vmuls_lane_f32(*(float *)v102.f64, v103, 1);
    v239 = v103.f32[0] - (float)(v105 * v99.__cosval);
    v242 = v106 - v107;
    v111 = v108 - (float)(v99.__cosval * *(float *)v102.f64);
    v112 = (float)(v105 * v99.__cosval) + v103.f32[0];
    v113 = *(float *)v101.f64 - v104.f32[0];
  }
  v114 = tan(*(double *)(v32 + 456) * 0.5);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "daVinciAtmosphereMaxHeight");
  v117 = v116;

  v118 = fmax(v92 + -6356752.31, 100.0);
  v119 = sqrt((v118 + 12713504.6) * v118) * 0.000000157313035;
  v120 = v291;
  v291[16] = v248;
  v120[17] = v109;
  v120[18] = v111;
  v120[20] = v242;
  v120[21] = v110;
  v120[22] = v112;
  v120[24] = v245;
  v120[25] = v239;
  v120[26] = v113;
  v121 = v118 + 6356752.31 + v119 * (6992427.55 * v114);
  v122 = v286;
  v123 = v284;
  v124 = v282;
  v125 = v280;
  v126 = v278;
  v127 = v276;
  v128 = v274;
  v129 = v272;
  v130 = v270;
  v131 = v268;
  v132 = v266;
  v133 = v264;
  v134 = v262;
  v135 = v260;
  v136 = v258;
  v137 = v256;
  v138 = v254;
  v139 = v252;
  v140 = v250;
  v257 = v122;
  *v120 = v122;
  v120[1] = v123;
  v259 = v123;
  v261 = v124;
  v120[2] = v124;
  v120[3] = v125;
  v263 = v125;
  v265 = v126;
  v120[4] = v126;
  v120[5] = v127;
  v267 = v127;
  v269 = v128;
  v120[6] = v128;
  v120[7] = v129;
  v271 = v129;
  v273 = v130;
  v120[8] = v130;
  v120[9] = v131;
  v275 = v131;
  v277 = v132;
  v120[10] = v132;
  v120[11] = v133;
  v279 = v133;
  v281 = v134;
  v120[12] = v134;
  v120[13] = v135;
  v283 = v135;
  v285 = v136;
  v120[14] = v136;
  v120[15] = v137;
  v120[19] = 0.0;
  v120[23] = 0.0;
  v120[27] = 0.0;
  v120[28] = v138;
  v120[29] = v139;
  v287 = v139;
  v120[30] = v140;
  v120[31] = 1.0;
  v120[38] = 6356800.0;
  v141 = v121;
  v120[36] = v119;
  v120[37] = v141;
  v120[44] = v19[4];
  v120[45] = v19[5];
  v120[46] = v19[6];
  v120[47] = v19[7];
  v120[48] = *v19;
  v120[49] = v19[1];
  v120[50] = v19[2];
  v120[51] = v19[3];
  *((_OWORD *)v120 + 13) = xmmword_19FFB34C0;
  if (v73)
  {
    v142 = *(_DWORD *)(v73 + 424);
    v120 = v291;
  }
  else
  {
    v142 = 0;
  }
  *((_DWORD *)v120 + 56) = v142;
  v143 = v117;
  v144 = *((_QWORD *)this + 6);
  v145 = *(ggl::PipelineSetup **)(v144 + 160);
  v249 = v137;
  if (v118 >= v143)
  {
    ggl::Flyover::FlyoverPipelineSetup::setState(v145, *(_QWORD *)(v144 + 176), *(std::__shared_weak_count **)(v144 + 184));
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v152, "daVinciAtmosphereColorMidpoint");
    v153 = (v118 - v143) / v143;
    v154 = fmin(fmax(v153, 0.0), 1.0);
    v156 = -(v154 * v155 + -1.0);
    v291[39] = v156;

    v157 = v154;
    v151 = v291;
    v224 = v157;
    v291[40] = v157;
    v158 = v143 + 6356752.31;
    v159 = v141 + v154 * (float)(v158 - v141);
    v151[37] = v159;
    v34 = 1;
  }
  else
  {
    ggl::Flyover::FlyoverPipelineSetup::setState(v145, *(_QWORD *)(v144 + 192), *(std::__shared_weak_count **)(v144 + 200));
    v146 = *(double *)(v32 + 3040);
    v291[41] = fminf(v146, 1.0);
    v147 = *(id *)a2;
    objc_msgSend(v147, "sizeInPixels");
    v149 = v148;
    v291[42] = v149;

    v151 = v291;
    v291[37] = v141;
    *(_QWORD *)(v151 + 39) = 1065353216;
  }
  v160 = v237;
  v161 = v235;
  v163 = v233;
  v164 = v236;
  v165 = v232;
  v166 = v225;
  v167 = v226;
  v168 = v227;
  v169 = v229;
  v170 = v230;
  v171 = v231;
  v172 = v228;
  v255 = v165;
  v253 = v166;
  v251 = v167;
  v246 = v168;
  v240 = v170;
  v243 = v169;
  v238 = v171;
  if (v73)
  {
    v173 = *(double *)(v73 + 160);
    v174 = *(double *)(v73 + 168);
    v175 = *(double *)(v73 + 176);
    v176 = *(double *)(v73 + 184);
    v177 = (float)((float)((float)(v173 * v160) + (float)(v174 * v164)) + (float)(v175 * v168)) + (float)(v176 * v138);
    v178 = (float)((float)((float)(v173 * v161) + (float)(v174 * v165)) + (float)(v175 * v169)) + (float)(v176 * v287);
    v179 = v234;
    v162 = v234;
    v180 = (float)((float)((float)(v173 * v162) + (float)(v174 * v166)) + (float)(v175 * v170)) + (float)(v176 * v140);
    v181 = (float)((float)((float)(v173 * v163) + (float)(v174 * v167)) + (float)(v175 * v171)) + (float)(v176 * v172);
    v182 = 1.0
         / sqrtf((float)((float)((float)(v177 * v177) + (float)(v178 * v178)) + (float)(v180 * v180)) + (float)(v181 * v181));
    v151[32] = v182 * v177;
    v151[33] = v182 * v178;
    v151[34] = v182 * v180;
    v151[35] = v182 * v181;
    v183 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
    v184 = *(_QWORD *)(v183 + 64);
    v185 = *(_QWORD *)(v183 + 160);
    v186 = *(_QWORD *)v73;
    v187 = *(_QWORD *)(v73 + 8);
  }
  else
  {
    v179 = v234;
    v188 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
    md::LightingLogicContext::defaultLightingConstantData(v150);
    v184 = *(_QWORD *)(v188 + 64);
    v185 = *(_QWORD *)(v188 + 160);
    v186 = md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData;
    v187 = qword_1EE5885C8;
  }
  ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(v184, v185, v186, v187);
  ggl::CommandBuffer::pushRenderItem(v33, *(ggl::RenderItem **)(*((_QWORD *)this + 6) + 224));
  if (v34)
  {
    v189 = *((_QWORD *)this + 6);
    if (!*(_QWORD *)(v189 + 24)
      && md::GlobeSkyRenderResources::loadStarsModel((std::__shared_weak_count **)v189))
    {
      v190 = operator new(0xE8uLL);
      v190[1] = 0;
      v190[2] = 0;
      *v190 = &off_1E42E0E20;
      v191 = ggl::BufferData::BufferData((uint64_t)(v190 + 3), qword_1EE5584D8, 2, 1, 6, 1);
      v190[28] = ggl::GlobeStars::View::reflection(void)::reflection;
      v190[3] = &off_1E42B8B90;
      v192 = *((_QWORD *)this + 6);
      v193 = *(std::__shared_weak_count **)(v192 + 32);
      *(_QWORD *)(v192 + 24) = v191;
      *(_QWORD *)(v192 + 32) = v190;
      if (v193)
      {
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      v196 = *((_QWORD *)this + 6);
      v197 = operator new(0x100uLL);
      v197[1] = 0;
      v197[2] = 0;
      *v197 = &off_1E42DE650;
      v198 = ggl::GlobeStars::StarsPipelineSetup::StarsPipelineSetup(v197 + 3, *(_QWORD *)(v196 + 72), *(std::__shared_weak_count **)(v196 + 80), (uint64_t *)(v196 + 24));
      v199 = *((_QWORD *)this + 6);
      v200 = *(std::__shared_weak_count **)(v199 + 64);
      *(_QWORD *)(v199 + 56) = v198;
      *(_QWORD *)(v199 + 64) = v197;
      if (v200)
      {
        v201 = (unint64_t *)&v200->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      v203 = operator new(0xF0uLL);
      v203[1] = 0;
      v203[2] = 0;
      *v203 = &off_1E42DEA08;
      v203[5] = 0;
      v203[6] = 0;
      v203[4] = 0;
      *((_DWORD *)v203 + 14) = 0;
      v203[3] = &off_1E42B5DE8;
      *(_QWORD *)((char *)v203 + 60) = 768;
      *((_DWORD *)v203 + 17) = 0;
      v203[9] = 1;
      *((_WORD *)v203 + 40) = 0;
      *((_BYTE *)v203 + 82) = 3;
      *(_QWORD *)((char *)v203 + 91) = 0;
      *(_QWORD *)((char *)v203 + 83) = 0;
      *((_BYTE *)v203 + 99) = 0;
      *(_QWORD *)((char *)v203 + 156) = 0;
      *(_QWORD *)((char *)v203 + 148) = 0;
      *((_WORD *)v203 + 106) = 257;
      v203[27] = 0;
      v203[28] = 0;
      *((_BYTE *)v203 + 232) = 0;
      v204 = *((_QWORD *)this + 6);
      v205 = *(std::__shared_weak_count **)(v204 + 96);
      *(_QWORD *)(v204 + 88) = v203 + 3;
      *(_QWORD *)(v204 + 96) = v203;
      if (v205)
      {
        v206 = (unint64_t *)&v205->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v208 = *((_QWORD *)this + 6);
      *(_BYTE *)(*(_QWORD *)(v208 + 88) + 58) = 0;
      v209 = (int64x2_t *)operator new();
      v210 = (_QWORD *)*((_QWORD *)this + 6);
      v211 = v210[11];
      v212 = v210[7];
      v213 = v210[5];
      v209->i64[0] = (uint64_t)&off_1E42B59B0;
      v209[1].i64[0] = (uint64_t)"";
      v209[1].i64[1] = v211;
      v209[2].i64[0] = v212;
      v209[2].i32[2] = 0;
      v209[3].i64[0] = 0;
      v209[3].i32[2] = 1065353216;
      v209[4].i64[0] = v213;
      v209[4].i64[1] = 0;
      v209[5].i64[0] = 0;
      v209[5].i64[1] = 0;
      v209[6] = vdupq_n_s64(1uLL);
      v209[7].i64[0] = 0;
      v214 = *(_QWORD *)(v208 + 104);
      *(_QWORD *)(v208 + 104) = v209;
      if (v214)
        (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
    }
    v215 = *(ggl::RenderItem **)(*((_QWORD *)this + 6) + 104);
    if (v215)
    {
      ggl::CommandBuffer::pushRenderItem(v33, v215);
      v216 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 64);
      v289 = 0;
      v288[0] = 0;
      v288[1] = 0;
      v217 = *(_QWORD *)(v216 + 8);
      v292 = 0;
      v293 = v216;
      v294 = 0;
      v295 = v217;
      v296 = 1;
      if (v217)
        v218 = *(_QWORD *)(v216 + 72);
      else
        v218 = 0;
      v297 = v218;
      ggl::BufferMemory::operator=(v288, (uint64_t)&v292);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v292);
      v219 = (float *)v289;
      *(float *)(v289 + 64) = v257;
      v219[17] = v259;
      v219[18] = v261;
      v219[19] = v263;
      v219[20] = v265;
      v219[21] = v267;
      v219[22] = v269;
      v219[23] = v271;
      v219[24] = v273;
      v219[25] = v275;
      v219[26] = v277;
      v219[27] = v279;
      v219[28] = v281;
      v219[29] = v283;
      v219[30] = v285;
      v219[31] = v249;
      *v219 = v160;
      v219[1] = v161;
      v219[2] = v179;
      v219[3] = v163;
      v219[4] = v164;
      v219[5] = v255;
      v219[6] = v253;
      v219[7] = v251;
      v219[8] = v246;
      v219[9] = v243;
      v219[10] = v240;
      v219[11] = v238;
      v219[12] = v138;
      v219[13] = v287;
      v219[14] = v140;
      v219[15] = v172;
      v219[32] = v224;
      v220 = *(id *)a2;
      objc_msgSend(v220, "contentScale");
      *(float *)&v221 = v221;
      *(_DWORD *)(v289 + 132) = LODWORD(v221);

      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v288);
    }
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v290);
LABEL_164:
  if (!v303)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v303 + 48))(v303);
  result = v303;
  if (v303 == v302)
  {
    v223 = 4;
    result = v302;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v223))();
  }
  else if (v303)
  {
    v223 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v223))();
  }
  return result;
}

void sub_19F7CB620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a56);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v56 - 184));
  _Unwind_Resume(a1);
}

void sub_19F7CB6A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F7CB6B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(v2 - 160);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 184);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v2 - 224);
  if (v6 == (_QWORD *)(v2 - 248))
  {
    v7 = 4;
    v6 = (_QWORD *)(v2 - 248);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(v2 - 192);
  if (v8 == (_QWORD *)(v2 - 216))
  {
    v9 = 4;
    v8 = (_QWORD *)(v2 - 216);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GlobeSkyLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__shared_ptr_emplace<ggl::GlobeStars::StarsPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlobeStars::StarsPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GlobeStars::StarsPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::GlobeStars::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::GlobeStars::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlobeStars::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlobeStars::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlobeStars::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::GlobeAtmosphere::BasePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlobeAtmosphere::BasePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GlobeAtmosphere::BasePipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::GlobeAtmosphere::AtmosphereConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::GlobeAtmosphere::AtmosphereConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlobeAtmosphere::AtmosphereConstants>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlobeAtmosphere::AtmosphereConstants>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlobeAtmosphere::AtmosphereConstants>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFD28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFD28;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GlobeSkyLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFCE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFCE0;
  a2[1] = v2;
  return result;
}

void ggl::ConstantDataTyped<ggl::Building::Fade>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Fade>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Fade>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RouteLineArrow::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLineArrow::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLineArrow::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C780;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C780;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF1C8;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 104);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 224);
  }
  free(v21);
  v24 = *(void **)(a1 + 200);
  if (v24)
  {
    *(_QWORD *)(a1 + 208) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 176);
    v27 = *(_QWORD *)(a1 + 168);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 176);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v27, *(_QWORD *)(a1 + 184) - v27);
  }
  v31 = *(void **)(a1 + 144);
  if (v31)
  {
    *(_QWORD *)(a1 + 152) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineArrowRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::RouteLineArrow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

