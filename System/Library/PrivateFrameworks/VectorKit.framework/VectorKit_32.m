void sub_19FCA5F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)va);
  _Unwind_Resume(a1);
}

void md::DaVinciCenterLineRoadsTileData::~DaVinciCenterLineRoadsTileData(md::DaVinciCenterLineRoadsTileData *this)
{
  md::DaVinciCenterLineRoadsTileData::~DaVinciCenterLineRoadsTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = &off_1E42A7990;
  *((_QWORD *)this + 79) = &unk_1E42A79D0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (_QWORD *)*((_QWORD *)this + 98);
  while (v9)
  {
    v15 = v9;
    v9 = (_QWORD *)*v9;
    v16 = (void *)v15[4];
    if (v16)
    {
      v15[5] = v16;
      operator delete(v16);
    }
    v17 = (std::__shared_weak_count *)v15[3];
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), v15, 56);
  }
  v10 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 97) + 40))(*((_QWORD *)this + 97), v10, 8 * *((_QWORD *)this + 96));
  v11 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  md::MapTileData::~MapTileData(this);
}

uint64_t std::__call_once_proxy[abi:nn180100]<std::tuple<md::DaVinciCenterLineRoadsTileData::estimatedCost(void)::$_0 &&>>()
{
  uint64_t result;

  result = GEOConfigGetUInteger();
  md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::metalBufferCacheCountMaximum = result;
  return result;
}

uint64_t md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t *a8, void *a9, uint64_t a10, char a11, uint64_t *a12)
{
  float v12;
  float v13;
  float v14;
  float v15;
  size_t prime;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t i;
  gss::Allocator *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  int *v49;
  int v50;
  float v51;
  float *v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  gss::Allocator *v59;
  unsigned int *v60;
  int8x8_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  float *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  float *v84;
  char *v85;
  float *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  float *v90;
  float *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _DWORD *v125;
  unint64_t v126;
  _BOOL4 v127;
  int *v128;
  int v129;
  int v130;
  unsigned int *FeatureAttributeSet;
  unsigned int *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  unsigned int *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  unint64_t v154;
  unint64_t v155;
  uint8x8_t v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v170;
  size_t *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  unsigned int *v175;
  unint64_t v176;
  __int128 v177;
  uint8x8_t v178;
  _QWORD *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  void *v191;
  float v192;
  _BOOL8 v193;
  unint64_t v194;
  unint64_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  _QWORD **v199;
  size_t v200;
  size_t v201;
  size_t v202;
  _QWORD *j;
  size_t v204;
  uint64_t v205;
  unint64_t v206;
  uint8x8_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  _QWORD *v216;
  uint64_t v217;
  size_t v218;
  _QWORD *v219;
  unint64_t v220;
  uint64_t v221;
  void *v222;
  size_t *v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  size_t *v227;
  uint64_t v228;
  __int128 v229;
  size_t v230;
  int v231;
  double v232;
  long double v233;
  long double v234;
  long double v235;
  double v236;
  long double v237;
  long double v238;
  double v239;
  _QWORD *v240;
  gss::Allocator *v241;
  unint64_t *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  gss::Allocator *v251;
  BOOL v252;
  uint64_t v253;
  int v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  float *v259;
  float v260;
  _BOOL4 v261;
  unsigned int v263;
  float v264;
  _BOOL4 v265;
  uint64_t v267;
  float *v268;
  float v269;
  _BOOL4 v270;
  unsigned int v272;
  float v273;
  _BOOL4 v274;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  int *v279;
  int v280;
  uint64_t *v281;
  unint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  geo::codec *v285;
  geo::codec *v286;
  int **v287;
  unint64_t v288;
  int *v289;
  int v290;
  _BOOL4 v291;
  _BOOL4 v292;
  unint64_t v293;
  int *v294;
  int v295;
  unint64_t v296;
  int *v297;
  int v298;
  unint64_t v299;
  int v300;
  BOOL v301;
  void **v302;
  void **v303;
  char *v304;
  _QWORD *v305;
  uint64_t v306;
  unint64_t v307;
  _BOOL4 v308;
  int *v309;
  int v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  int v315;
  char v316;
  char v317;
  unint64_t v318;
  float v319;
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  float v330;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  float v339;
  uint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t *v346;
  unint64_t *v347;
  unint64_t v348;
  float v349;
  _BOOL4 v350;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  int *v355;
  int v356;
  __int128 *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  __int128 *v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  float v367;
  void **v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  void *v374;
  void **v376;
  void *v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  id v381;
  _QWORD *v382;
  _QWORD *v383;
  int v385;
  uint64_t *v386;
  BOOL v387;
  uint64_t *v388;
  _BOOL4 v389;
  uint64_t *v390;
  uint64_t *v391;
  uint64_t v392;
  int v393;
  _BOOL4 v394;
  double v395;
  uint64_t *v396;
  double v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  uint64_t *v401;
  uint64_t v402;
  BOOL v403;
  long double v404;
  _BOOL4 v405;
  __int128 v406;
  double v407;
  uint64_t v408;
  double v410;
  uint64_t v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  __int128 v414;
  float v415;
  float v416;
  char v417;
  _BYTE v418[7];
  uint64_t v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  __int128 v423;
  float v424;
  float v425;
  char v426;
  _BYTE v427[7];
  uint64_t v428;
  std::__shared_weak_count *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  __int128 v432;
  float v433;
  float v434;
  char v435;
  _BYTE v436[7];
  uint64_t v437;
  std::__shared_weak_count *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  _BYTE v442[7];
  unint64_t v443;
  unint64_t v444;
  unsigned int *v445;
  uint64_t v446;
  __int128 __src;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  size_t v451;
  uint64_t v452;
  std::__shared_weak_count *v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  uint64_t v456;
  std::__shared_weak_count *v457;
  void *__p[2];
  void *v459[2];
  float v460;
  void *v461[2];
  void *v462[2];
  int v463;
  void *v464[2];
  void *v465[2];
  int v466;
  void *v467[2];
  void *v468[2];
  int v469;
  void *v470[2];
  void *v471[2];
  int v472;
  __int128 v473;
  __int128 v474;
  int v475;
  __int128 v476;
  char *v477;
  __int128 *v478;
  char *v479;
  uint64_t v480;

  LODWORD(prime) = a6;
  v480 = *MEMORY[0x1E0C80C00];
  v381 = a9;
  if (*(_QWORD *)(a5 + 8) == *(_QWORD *)a5)
  {
    v23 = 0;
    v473 = 0uLL;
  }
  else
  {
    v22 = **(_QWORD **)a5;
    v23 = *(std::__shared_weak_count **)(v22 + 152);
    *(_QWORD *)&v473 = *(_QWORD *)(v22 + 144);
    *((_QWORD *)&v473 + 1) = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
  }
  md::MapTileData::MapTileData(a1, a3, a4, (uint64_t)&v473, 1);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = a1;
  *(_QWORD *)a1 = &off_1E42A7990;
  *(_QWORD *)(a1 + 632) = &unk_1E42A79D0;
  v383 = (_QWORD *)(a1 + 760);
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  v31 = (uint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v30 & 1) == 0)
    goto LABEL_624;
  while (1)
  {
    *(_QWORD *)(v28 + 776) = *(_QWORD *)(v31 + 2392);
    *(_QWORD *)(v28 + 784) = 0;
    v32 = atomic_load(v29);
    {
      v380 = operator new();
      *(_QWORD *)(v31 + 2392) = geo::MallocZoneAllocator::MallocZoneAllocator(v380, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v28 + 792) = *(_QWORD *)(v31 + 2392);
    *(_QWORD *)(v28 + 800) = 0;
    *(_DWORD *)(v28 + 808) = 1065353216;
    *(_QWORD *)(v28 + 816) = 0;
    v33 = operator new(0xE8uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &off_1E42E2278;
    v34 = ggl::BufferData::BufferData((uint64_t)(v33 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
    v33[28] = ggl::Tile::View::reflection(void)::reflection;
    v33[3] = &off_1E42B97B0;
    *(_QWORD *)(v28 + 824) = v34;
    *(_QWORD *)(v28 + 832) = v33;
    v35 = operator new(0xE8uLL);
    v35[1] = 0;
    v35[2] = 0;
    *v35 = &off_1E42E22E8;
    v36 = ggl::BufferData::BufferData((uint64_t)(v35 + 3), qword_1EE54AFA0, 2, 1, 6, 1);
    v35[28] = ggl::Tile::Transform::reflection(void)::reflection;
    v35[3] = &off_1E42B97F0;
    *(_QWORD *)(v28 + 840) = v36;
    *(_QWORD *)(v28 + 848) = v35;
    *(_BYTE *)(v28 + 856) = prime;
    *(_BYTE *)(v28 + 857) = a7;
    v473 = 0u;
    v474 = 0u;
    v475 = 1065353216;
    *(_OWORD *)v470 = 0u;
    *(_OWORD *)v471 = 0u;
    v472 = 1065353216;
    *(_OWORD *)v467 = 0u;
    *(_OWORD *)v468 = 0u;
    v469 = 1065353216;
    *(_OWORD *)v464 = 0u;
    *(_OWORD *)v465 = 0u;
    v466 = 1065353216;
    *(_OWORD *)v461 = 0u;
    *(_OWORD *)v462 = 0u;
    v463 = 1065353216;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v459 = 0u;
    v460 = 1.0;
    v37 = *(uint64_t **)a5;
    v390 = *(uint64_t **)(a5 + 8);
    v385 = a2;
    if (*(uint64_t **)a5 == v390)
      break;
    v38 = a10;
    v389 = a2 == 46;
    v387 = a2 == 48;
    v39 = 151;
    if ((_DWORD)prime)
      v39 = 0x100000097;
    v392 = v39;
    a7 = -32;
    while (1)
    {
      v40 = *v37;
      if (a2 != 48)
      {
        if (a2 == 47)
        {
          v94 = *(_QWORD *)(v40 + 144);
          v95 = a8[1];
          v456 = *a8;
          v457 = (std::__shared_weak_count *)v95;
          if (v95)
          {
            v96 = (unint64_t *)(v95 + 8);
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          v98 = v457;
          if (v457)
          {
            v99 = (unint64_t *)&v457->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = *(_QWORD *)(v40 + 144);
          v102 = a8[1];
          v454 = *a8;
          v455 = (std::__shared_weak_count *)v102;
          if (v102)
          {
            v103 = (unint64_t *)(v102 + 8);
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
          }
          v105 = v455;
          if (v455)
          {
            v106 = (unint64_t *)&v455->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          v108 = *(_QWORD *)(v40 + 144);
          v109 = a8[1];
          v452 = *a8;
          v453 = (std::__shared_weak_count *)v109;
          if (v109)
          {
            v110 = (unint64_t *)(v109 + 8);
            do
              v111 = __ldxr(v110);
            while (__stxr(v111 + 1, v110));
          }
          v112 = v453;
          if (v453)
          {
            v113 = (unint64_t *)&v453->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v115 = *(_QWORD *)(v40 + 144);
          v116 = a8[1];
          v450 = *a8;
          v451 = v116;
          if (v116)
          {
            v117 = (unint64_t *)(v116 + 8);
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          prime = v451;
          if (v451)
          {
            v119 = (unint64_t *)(v451 + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              (*(void (**)(size_t))(*(_QWORD *)prime + 16))(prime);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)prime);
            }
          }
          v403 = 0;
          v393 = 0;
          goto LABEL_140;
        }
        v403 = v387;
        v393 = v389;
        if (a2 != 46)
          goto LABEL_140;
      }
      for (i = 0; geo::codec::VectorTile::poisCount(*(geo::codec::VectorTile **)(v40 + 144)) > i; ++i)
      {
        v42 = (gss::Allocator *)geo::codec::VectorTile::pois(*(geo::codec::VectorTile **)(v40 + 144));
        v43 = (char *)v42 + 224 * i;
        v45 = *((_QWORD *)v43 + 3);
        prime = (size_t)(v43 + 24);
        v44 = v45;
        if (!v45)
          continue;
        v46 = *(unsigned __int8 *)(v44 + 33);
        if (!*(_BYTE *)(v44 + 33))
          continue;
        v47 = *(_DWORD **)v44;
        if (*v47 == 6)
        {
          v48 = 0;
LABEL_33:
          if (v47[2 * v48 + 1] != 446)
            continue;
          v51 = *((float *)v42 + 56 * i + 24);
          if (v51 == 3.4028e38)
            v12 = 0.0;
          else
            v12 = *(float *)(a1 + 624) * v51;
          v52 = (float *)((char *)v42 + 224 * i);
          v14 = v52[22];
          v13 = v52[23];
          *(_QWORD *)((char *)&__src + 7) = 0;
          *(_QWORD *)&__src = 0;
          HIBYTE(__src) = 1;
          if (a2 == 48)
          {
            v53 = gss::Allocator::instance(v42);
            v54 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, 26, 1);
            v55 = v54;
            if ((_QWORD)__src)
            {
              if (WORD5(__src))
              {
                v54 = memmove(v54, (const void *)__src, 4 * WORD5(__src));
                if (WORD5(__src))
                  v54 = memmove((char *)v55 + 18, (const void *)(__src + WORD4(__src)), 2 * WORD5(__src));
              }
              v56 = gss::Allocator::instance((gss::Allocator *)v54);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 40))(v56, __src, WORD6(__src));
            }
            WORD6(__src) = 4;
            *(_QWORD *)&__src = v55;
            WORD4(__src) = 18;
            v57 = WORD5(__src);
            v55[WORD5(__src)] = 65538;
            *((_WORD *)v55 + v57 + 9) = 0;
            ++WORD5(__src);
            HIBYTE(__src) = 0;
            *(_WORD *)((char *)v55 + 2 * WORD5(__src) + WORD4(__src) - 2) = 1;
          }
          v58 = *a8;
          md::createFeatureAttributeSet((gss::Allocator *)&v476, (uint64_t *)prime);
          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v443, v58, (gss::FeatureAttributeSet *)&v476, (gss::QueryOverrides *)&__src);
          if ((_QWORD)v476)
          {
            *((_QWORD *)&v476 + 1) = v476;
            v59 = (gss::Allocator *)(*(uint64_t (**)(__int128 *, _QWORD, char *))(*(_QWORD *)v478 + 40))(v478, v476, &v477[-v476]);
          }
          v60 = (unsigned int *)v443;
          v61 = *(int8x8_t *)(a1 + 768);
          if (!*(_QWORD *)&v61)
            goto LABEL_66;
          v62 = 0x9DDFEA08EB382D69 * (((8 * v443) + 8) ^ HIDWORD(v443));
          v63 = 0x9DDFEA08EB382D69 * (HIDWORD(v443) ^ (v62 >> 47) ^ v62);
          v64 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
          v65 = (uint8x8_t)vcnt_s8(v61);
          v65.i16[0] = vaddlv_u8(v65);
          if (v65.u32[0] > 1uLL)
          {
            v66 = v64;
            if (v64 >= *(_QWORD *)&v61)
              v66 = v64 % *(_QWORD *)&v61;
          }
          else
          {
            v66 = v64 & (*(_QWORD *)&v61 - 1);
          }
          v67 = *(_QWORD **)(*v383 + 8 * v66);
          if (!v67 || (v68 = (_QWORD *)*v67) == 0)
          {
LABEL_66:
            v72 = (float *)operator new(0xCuLL);
            *v72 = v14;
            v72[1] = v13;
            v72[2] = v12;
            *(_QWORD *)&v476 = v60;
            *((_QWORD *)&v476 + 1) = v444;
            if (v444)
            {
              v73 = (unint64_t *)(v444 + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
            v477 = 0;
            v478 = 0;
            v479 = 0;
            v75 = (char *)operator new(0xCuLL);
            v478 = (__int128 *)(v75 + 12);
            v479 = v75 + 12;
            *(_QWORD *)v75 = *(_QWORD *)v72;
            *((float *)v75 + 2) = v72[2];
            v477 = v75;
            std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>>((unint64_t)v383, (unint64_t)v60, (uint64_t)&v476);
            if (v477)
            {
              v478 = (__int128 *)v477;
              operator delete(v477);
            }
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v476 + 1);
            if (*((_QWORD *)&v476 + 1))
            {
              v77 = (unint64_t *)(*((_QWORD *)&v476 + 1) + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            operator delete(v72);
            prime = v444;
            if (!v444)
              goto LABEL_81;
            goto LABEL_77;
          }
          if (v65.u32[0] < 2uLL)
          {
            v69 = *(_QWORD *)&v61 - 1;
            while (1)
            {
              v71 = v68[1];
              if (v71 == v64)
              {
                if (v68[2] == v443)
                  goto LABEL_86;
              }
              else if ((v71 & v69) != v66)
              {
                goto LABEL_66;
              }
              v68 = (_QWORD *)*v68;
              if (!v68)
                goto LABEL_66;
            }
          }
          while (1)
          {
            v70 = v68[1];
            if (v70 == v64)
            {
              if (v68[2] == v443)
              {
LABEL_86:
                v84 = (float *)v68[5];
                v83 = v68[6];
                if ((unint64_t)v84 < v83)
                {
                  *v84 = v14;
                  v84[1] = v13;
                  v85 = (char *)(v84 + 3);
                  v84[2] = v12;
                  goto LABEL_104;
                }
                v86 = (float *)v68[4];
                v87 = 0xAAAAAAAAAAAAAAABLL * (v84 - v86) + 1;
                if (v87 > 0x1555555555555555)
                  abort();
                v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (_QWORD)v86) >> 2);
                if (2 * v88 > v87)
                  v87 = 2 * v88;
                if (v88 >= 0xAAAAAAAAAAAAAAALL)
                  v89 = 0x1555555555555555;
                else
                  v89 = v87;
                if (!v89)
                {
                  v59 = 0;
                  goto LABEL_98;
                }
                if (v89 <= 0x1555555555555555)
                {
                  v59 = (gss::Allocator *)operator new(12 * v89);
LABEL_98:
                  v90 = (float *)((char *)v59 + 4 * (v84 - v86));
                  *v90 = v14;
                  v90[1] = v13;
                  v90[2] = v12;
                  v91 = v90;
                  if (v84 != v86)
                  {
                    do
                    {
                      v92 = *(_QWORD *)(v84 - 3);
                      v84 -= 3;
                      v93 = *((_DWORD *)v84 + 2);
                      *(_QWORD *)(v91 - 3) = v92;
                      v91 -= 3;
                      *((_DWORD *)v91 + 2) = v93;
                    }
                    while (v84 != v86);
                    v84 = (float *)v68[4];
                  }
                  v85 = (char *)(v90 + 3);
                  v68[4] = v91;
                  v68[5] = v90 + 3;
                  v68[6] = (char *)v59 + 12 * v89;
                  if (v84)
                    operator delete(v84);
                  v38 = a10;
LABEL_104:
                  v68[5] = v85;
                  a7 = -32;
                  prime = v444;
                  if (!v444)
                  {
LABEL_81:
                    if (BYTE14(__src))
                      v81 = 1;
                    else
                      v81 = (_QWORD)__src == 0;
                    if (!v81)
                    {
                      v82 = gss::Allocator::instance(v59);
                      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v82 + 40))(v82, __src, WORD6(__src));
                    }
                    goto LABEL_23;
                  }
LABEL_77:
                  v79 = (unint64_t *)(prime + 8);
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    (*(void (**)(size_t))(*(_QWORD *)prime + 16))(prime);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)prime);
                  }
                  goto LABEL_81;
                }
LABEL_621:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
            }
            else
            {
              if (v70 >= *(_QWORD *)&v61)
                v70 %= *(_QWORD *)&v61;
              if (v70 != v66)
                goto LABEL_66;
            }
            v68 = (_QWORD *)*v68;
            if (!v68)
              goto LABEL_66;
          }
        }
        v48 = 0;
        v49 = v47 + 2;
        do
        {
          if (v46 - 1 == v48)
            goto LABEL_23;
          v50 = *v49;
          v49 += 2;
          ++v48;
        }
        while (v50 != 6);
        if (v48 < v46)
          goto LABEL_33;
LABEL_23:
        ;
      }
      v403 = v387;
      v393 = v389;
LABEL_140:
      a5 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)(v40 + 144));
      v28 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)(v40 + 144));
      v31 = 168;
      if (v28)
        break;
LABEL_18:
      v37 += 2;
      if (v37 == v390)
        goto LABEL_370;
    }
    v29 = 0;
    v399 = a5;
    v401 = v37;
    while (1)
    {
      v121 = *v37;
      LOWORD(v476) = a2;
      v122 = *(_QWORD *)(v38 + 24);
      if (!v122)
        break;
      prime = a5 + 168 * (_QWORD)v29;
      if (((*(uint64_t (**)(uint64_t, uint64_t, size_t, __int128 *))(*(_QWORD *)v122 + 48))(v122, v121, prime, &v476) & 1) != 0)goto LABEL_142;
      if (v403)
        goto LABEL_160;
      v123 = *(_QWORD *)(prime + 24);
      if (!v123)
        goto LABEL_159;
      v124 = *(unsigned __int8 *)(v123 + 33);
      if (!*(_BYTE *)(v123 + 33))
        goto LABEL_159;
      v125 = *(_DWORD **)v123;
      if (*v125 != 185)
      {
        v126 = 0;
        v128 = v125 + 2;
        while (v124 - 1 != v126)
        {
          v129 = *v128;
          v128 += 2;
          ++v126;
          if (v129 == 185)
          {
            v127 = v126 < v124;
            goto LABEL_154;
          }
        }
LABEL_159:
        if ((v393 & 1) != 0)
          goto LABEL_142;
        goto LABEL_160;
      }
      v126 = 0;
      v127 = 1;
LABEL_154:
      v130 = (v125[2 * v126 + 1] & 0xFFFFFFFD) == 0 && v127;
      if (v393 != v130)
        goto LABEL_142;
LABEL_160:
      FeatureAttributeSet = md::createFeatureAttributeSet((gss::Allocator *)&v476, (uint64_t *)(prime + 24));
      v443 = 0;
      v444 = 0;
      v445 = 0;
      v446 = gss::Allocator::instance((gss::Allocator *)FeatureAttributeSet);
      v132 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v446 + 16))(v446, 8, 4);
      v443 = (unint64_t)v132;
      v445 = v132 + 2;
      if (v132)
        *(_QWORD *)v132 = v392;
      v444 = (unint64_t)(v132 + 2);
      gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v476, (unsigned int **)&v443, (uint64_t *)&__src);
      v133 = (_QWORD *)*((_QWORD *)&__src + 1);
      v134 = __src;
      v135 = *((_QWORD *)&__src + 1) - __src;
      v136 = (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3;
      v137 = (uint64_t)v477;
      v138 = v476;
      if (v136 <= (uint64_t)&v477[-v476] >> 3)
      {
        v141 = *((_QWORD *)&v476 + 1);
        v143 = (uint64_t)(*((_QWORD *)&v476 + 1) - v476) >> 3;
        if (v143 >= v136)
        {
          v147 = v476;
          if ((_QWORD)__src != *((_QWORD *)&__src + 1))
          {
            do
            {
              *(_DWORD *)v147 = *(_DWORD *)v134;
              *(_WORD *)(v147 + 4) = *(_WORD *)(v134 + 4);
              v147 += 8;
              v134 += 8;
            }
            while ((_QWORD *)v134 != v133);
          }
          v146 = (char *)(v147 - v138);
          v141 = v138;
        }
        else
        {
          v144 = (_QWORD *)(__src + 8 * v143);
          if (*((_QWORD *)&v476 + 1) != (_QWORD)v476)
          {
            do
            {
              *(_DWORD *)v138 = *(_DWORD *)v134;
              *(_WORD *)(v138 + 4) = *(_WORD *)(v134 + 4);
              v134 += 8;
              v138 += 8;
            }
            while ((_QWORD *)v134 != v144);
          }
          v145 = (_QWORD *)v141;
          while (v144 != v133)
          {
            if (v145)
              *v145 = *v144;
            ++v144;
            ++v145;
          }
          v146 = (char *)v145 - v141;
        }
      }
      else
      {
        if ((_QWORD)v476)
        {
          *((_QWORD *)&v476 + 1) = v476;
          (*(void (**)(__int128 *))(*(_QWORD *)v478 + 40))(v478);
          v137 = 0;
          v476 = 0uLL;
          v477 = 0;
        }
        if (v135 < 0)
          goto LABEL_620;
        v139 = v137 >> 2;
        if (v137 >> 2 <= v136)
          v139 = v136;
        v140 = (unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v139;
        if (v140 >> 61)
LABEL_620:
          abort();
        v141 = (*(uint64_t (**)(__int128 *, unint64_t, uint64_t))(*(_QWORD *)v478 + 16))(v478, 8 * v140, 4);
        *(_QWORD *)&v476 = v141;
        *((_QWORD *)&v476 + 1) = v141;
        v477 = (char *)(v141 + 8 * v140);
        v142 = (_QWORD *)v141;
        if ((_QWORD *)v134 != v133)
        {
          v142 = (_QWORD *)v141;
          do
          {
            if (v142)
              *v142 = *(_QWORD *)v134;
            v134 += 8;
            ++v142;
          }
          while ((_QWORD *)v134 != v133);
        }
        v146 = (char *)v142 - v141;
      }
      *((_QWORD *)&v476 + 1) = &v146[v141];
      if ((_QWORD)__src)
      {
        *((_QWORD *)&__src + 1) = __src;
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v449 + 40))(v449, __src, v448 - __src);
      }
      if (v443)
      {
        v444 = v443;
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v446 + 40))(v446, v443, (unint64_t)v445 - v443);
      }
      v149 = *((_QWORD *)&v476 + 1);
      v148 = (unsigned int *)v476;
      v150 = *((_QWORD *)&v476 + 1) - v476;
      v151 = (uint64_t)(*((_QWORD *)&v476 + 1) - v476) >> 3;
      v152 = v151;
      if (*((_QWORD *)&v476 + 1) != (_QWORD)v476)
      {
        v152 = (uint64_t)(*((_QWORD *)&v476 + 1) - v476) >> 3;
        v153 = (unsigned int *)v476;
        do
        {
          v154 = ((v152 << 6) - 0x61C8864680B583EBLL + (v152 >> 2) + *v153) ^ v152;
          v152 = (*((unsigned __int16 *)v153 + 2) - 0x61C8864680B583EBLL + (v154 << 6) + (v154 >> 2)) ^ v154;
          v153 += 2;
        }
        while (v153 != *((unsigned int **)&v476 + 1));
      }
      v155 = (unint64_t)__p[1];
      if (__p[1])
      {
        v156 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v156.i16[0] = vaddlv_u8(v156);
        if (v156.u32[0] > 1uLL)
        {
          v157 = v152;
          if ((void *)v152 >= __p[1])
            v157 = v152 % (unint64_t)__p[1];
        }
        else
        {
          v157 = ((unint64_t)__p[1] - 1) & v152;
        }
        v158 = (_QWORD *)*((_QWORD *)__p[0] + v157);
        if (v158)
        {
          v159 = (_QWORD *)*v158;
          if (*v158)
          {
            if (v156.u32[0] < 2uLL)
            {
              while (1)
              {
                v165 = v159[1];
                if (v165 == v152)
                {
                  v167 = v159[2];
                  v166 = v159[3];
                  if (v166 - v167 == v150)
                  {
                    if (v167 == v166)
                      goto LABEL_233;
                    v168 = v476;
                    while (*(_DWORD *)v167 == *(_DWORD *)v168
                         && *(unsigned __int16 *)(v167 + 4) == *(unsigned __int16 *)(v168 + 4))
                    {
                      v167 += 8;
                      v168 += 8;
                      if (v167 == v166)
                        goto LABEL_233;
                    }
                  }
                }
                else if ((v165 & ((uint64_t)__p[1] - 1)) != v157)
                {
                  goto LABEL_235;
                }
                v159 = (_QWORD *)*v159;
                if (!v159)
                  goto LABEL_235;
              }
            }
            do
            {
              v160 = v159[1];
              if (v160 == v152)
              {
                v162 = v159[2];
                v161 = v159[3];
                if (v161 - v162 == v150)
                {
                  if (v162 == v161)
                  {
LABEL_233:
                    v171 = (size_t *)v159[7];
                    v170 = v159[8];
                    v31 = 168;
                    if ((unint64_t)v171 >= v170)
                    {
                      v209 = (char *)v159[6];
                      v210 = ((char *)v171 - v209) >> 3;
                      v211 = v210 + 1;
                      if ((unint64_t)(v210 + 1) >> 61)
                        abort();
                      v212 = v170 - (_QWORD)v209;
                      if (v212 >> 2 > v211)
                        v211 = v212 >> 2;
                      if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8)
                        v213 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v213 = v211;
                      if (v213)
                      {
                        if (v213 >> 61)
                          goto LABEL_621;
                        v214 = v213;
                        v215 = (char *)operator new(8 * v213);
                        v213 = v214;
                      }
                      else
                      {
                        v215 = 0;
                      }
                      v223 = (size_t *)&v215[8 * v210];
                      *v223 = prime;
                      v172 = v223 + 1;
                      if (v171 != (size_t *)v209)
                      {
                        v224 = (char *)(v171 - 1) - v209;
                        if (v224 < 0x58)
                          goto LABEL_630;
                        if ((unint64_t)(v209 - v215) < 0x20)
                          goto LABEL_630;
                        v225 = (v224 >> 3) + 1;
                        v226 = &v215[8 * v210 - 16];
                        v227 = v171 - 2;
                        v228 = v225 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v229 = *(_OWORD *)v227;
                          *((_OWORD *)v226 - 1) = *((_OWORD *)v227 - 1);
                          *(_OWORD *)v226 = v229;
                          v226 -= 32;
                          v227 -= 4;
                          v228 -= 4;
                        }
                        while (v228);
                        v223 -= v225 & 0x3FFFFFFFFFFFFFFCLL;
                        v171 -= v225 & 0x3FFFFFFFFFFFFFFCLL;
                        if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_630:
                          do
                          {
                            v230 = *--v171;
                            *--v223 = v230;
                          }
                          while (v171 != (size_t *)v209);
                        }
                        v171 = (size_t *)v159[6];
                      }
                      v159[6] = v223;
                      v159[7] = v172;
                      v159[8] = &v215[8 * v213];
                      a2 = v385;
                      v38 = a10;
                      if (v171)
                        operator delete(v171);
                      v31 = 168;
                    }
                    else
                    {
                      *v171 = prime;
                      v172 = v171 + 1;
                      a2 = v385;
                      v38 = a10;
                    }
                    v159[7] = v172;
                    a5 = v399;
                    v37 = v401;
                    a7 = -32;
                    v221 = v476;
                    if (!(_QWORD)v476)
                      goto LABEL_142;
LABEL_346:
                    *((_QWORD *)&v476 + 1) = v221;
                    (*(void (**)(__int128 *, uint64_t, char *))(*(_QWORD *)v478 + 40))(v478, v221, &v477[-v221]);
                    goto LABEL_142;
                  }
                  v163 = v476;
                  while (*(_DWORD *)v162 == *(_DWORD *)v163
                       && *(unsigned __int16 *)(v162 + 4) == *(unsigned __int16 *)(v163 + 4))
                  {
                    v162 += 8;
                    v163 += 8;
                    if (v162 == v161)
                      goto LABEL_233;
                  }
                }
              }
              else
              {
                if ((void *)v160 >= __p[1])
                  v160 %= (unint64_t)__p[1];
                if (v160 != v157)
                  break;
              }
              v159 = (_QWORD *)*v159;
            }
            while (v159);
          }
        }
      }
LABEL_235:
      v173 = operator new(8uLL);
      *v173 = prime;
      v174 = v173 + 1;
      if (v148 != (unsigned int *)v149)
      {
        v175 = v148;
        do
        {
          v176 = ((v151 << 6) - 0x61C8864680B583EBLL + (v151 >> 2) + *v175) ^ v151;
          v151 = (*((unsigned __int16 *)v175 + 2) - 0x61C8864680B583EBLL + (v176 << 6) + (v176 >> 2)) ^ v176;
          v175 += 2;
        }
        while (v175 != (unsigned int *)v149);
      }
      *(_QWORD *)&v177 = v173;
      *((_QWORD *)&v177 + 1) = v173 + 1;
      v406 = v177;
      if (v155)
      {
        v178 = (uint8x8_t)vcnt_s8((int8x8_t)v155);
        v178.i16[0] = vaddlv_u8(v178);
        if (v178.u32[0] > 1uLL)
        {
          v149 = v151;
          if (v151 >= v155)
            v149 = v151 % v155;
        }
        else
        {
          v149 = (v155 - 1) & v151;
        }
        v179 = (_QWORD *)*((_QWORD *)__p[0] + v149);
        if (v179)
        {
          v180 = (_QWORD *)*v179;
          if (v180)
          {
            if (v178.u32[0] < 2uLL)
            {
              while (1)
              {
                v186 = v180[1];
                if (v186 == v151)
                {
                  v188 = v180[2];
                  v187 = v180[3];
                  if (v187 - v188 == v150)
                  {
                    if (v188 == v187)
                      goto LABEL_274;
                    v189 = v148;
                    while (*(_DWORD *)v188 == *v189
                         && *(unsigned __int16 *)(v188 + 4) == *((unsigned __int16 *)v189 + 2))
                    {
                      v188 += 8;
                      v189 += 2;
                      if (v188 == v187)
                        goto LABEL_274;
                    }
                  }
                }
                else if ((v186 & (v155 - 1)) != v149)
                {
                  goto LABEL_275;
                }
                v180 = (_QWORD *)*v180;
                if (!v180)
                  goto LABEL_275;
              }
            }
            do
            {
              v181 = v180[1];
              if (v181 == v151)
              {
                v183 = v180[2];
                v182 = v180[3];
                if (v182 - v183 == v150)
                {
                  if (v183 == v182)
                  {
LABEL_274:
                    a5 = v399;
                    v37 = v401;
                    v38 = a10;
                    a7 = -32;
                    v31 = 168;
                    v191 = (void *)v406;
                    goto LABEL_343;
                  }
                  v184 = v148;
                  while (*(_DWORD *)v183 == *v184 && *(unsigned __int16 *)(v183 + 4) == *((unsigned __int16 *)v184 + 2))
                  {
                    v183 += 8;
                    v184 += 2;
                    if (v183 == v182)
                      goto LABEL_274;
                  }
                }
              }
              else
              {
                if (v181 >= v155)
                  v181 %= v155;
                if (v181 != v149)
                  break;
              }
              v180 = (_QWORD *)*v180;
            }
            while (v180);
          }
        }
      }
LABEL_275:
      prime = (size_t)operator new(0x48uLL);
      *(_QWORD *)&__src = prime;
      *((_QWORD *)&__src + 1) = v459;
      LOBYTE(v448) = 0;
      *(_QWORD *)prime = 0;
      *(_QWORD *)(prime + 8) = v151;
      *(_QWORD *)(prime + 24) = 0;
      *(_QWORD *)(prime + 32) = 0;
      *(_QWORD *)(prime + 16) = 0;
      *(_QWORD *)(prime + 40) = gss::Allocator::instance((gss::Allocator *)prime);
      std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)(prime + 16), v476, *((_QWORD **)&v476 + 1), (uint64_t)(*((_QWORD *)&v476 + 1) - v476) >> 3);
      v37 = v401;
      *(_OWORD *)(prime + 48) = v406;
      *(_QWORD *)(prime + 64) = v174;
      LOBYTE(v448) = 1;
      v192 = (float)((unint64_t)v459[1] + 1);
      a7 = -32;
      a5 = v399;
      if (v155 && (float)(v460 * (float)v155) >= v192)
        goto LABEL_334;
      v193 = (v155 & (v155 - 1)) != 0;
      if (v155 < 3)
        v193 = 1;
      v194 = v193 | (2 * v155);
      v195 = vcvtps_u32_f32(v192 / v460);
      if (v194 <= v195)
        prime = v195;
      else
        prime = v194;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v155 = (unint64_t)__p[1];
      if ((void *)prime > __p[1])
        goto LABEL_287;
      if ((void *)prime >= __p[1])
        goto LABEL_321;
      v206 = vcvtps_u32_f32((float)(unint64_t)v459[1] / v460);
      if (__p[1] < (void *)3
        || (v207 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v207.i16[0] = vaddlv_u8(v207), v207.u32[0] > 1uLL))
      {
        v206 = std::__next_prime(v206);
      }
      else
      {
        v208 = 1 << -(char)__clz(v206 - 1);
        if (v206 >= 2)
          v206 = v208;
      }
      if (prime <= v206)
        prime = v206;
      if (prime < v155)
      {
        if (!prime)
        {
          v222 = __p[0];
          __p[0] = 0;
          if (v222)
            operator delete(v222);
          v155 = 0;
          __p[1] = 0;
          goto LABEL_321;
        }
LABEL_287:
        if (prime >> 61)
          goto LABEL_621;
        v196 = operator new(8 * prime);
        v197 = __p[0];
        __p[0] = v196;
        if (v197)
          operator delete(v197);
        v198 = 0;
        __p[1] = (void *)prime;
        do
          *((_QWORD *)__p[0] + v198++) = 0;
        while (prime != v198);
        v199 = (_QWORD **)v459[0];
        if (!v459[0])
        {
LABEL_320:
          v155 = prime;
          goto LABEL_321;
        }
        v200 = *((_QWORD *)v459[0] + 1);
        v201 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v202 = v200 & v201;
          *((_QWORD *)__p[0] + v202) = v459;
          for (j = *v199; *v199; j = *v199)
          {
            v204 = j[1] & v201;
            if (v204 == v202)
            {
              v199 = (_QWORD **)j;
            }
            else if (*((_QWORD *)__p[0] + v204))
            {
              *v199 = (_QWORD *)*j;
              v205 = 8 * v204;
              *j = **(_QWORD **)((char *)__p[0] + v205);
              **(_QWORD **)((char *)__p[0] + v205) = j;
            }
            else
            {
              *((_QWORD *)__p[0] + v204) = v199;
              v199 = (_QWORD **)j;
              v202 = v204;
            }
          }
          goto LABEL_320;
        }
        if (v200 >= prime)
          v200 %= prime;
        *((_QWORD *)__p[0] + v200) = v459;
        v216 = *v199;
        if (!*v199)
          goto LABEL_320;
        while (2)
        {
          v218 = v216[1];
          if (v218 >= prime)
            v218 %= prime;
          if (v218 != v200)
          {
            if (!*((_QWORD *)__p[0] + v218))
            {
              *((_QWORD *)__p[0] + v218) = v199;
LABEL_325:
              v199 = (_QWORD **)v216;
              v216 = (_QWORD *)*v216;
              v200 = v218;
              if (!v216)
                goto LABEL_320;
              continue;
            }
            *v199 = (_QWORD *)*v216;
            v217 = 8 * v218;
            *v216 = **(_QWORD **)((char *)__p[0] + v217);
            **(_QWORD **)((char *)__p[0] + v217) = v216;
            v216 = v199;
          }
          break;
        }
        v218 = v200;
        goto LABEL_325;
      }
      v155 = (unint64_t)__p[1];
LABEL_321:
      if ((v155 & (v155 - 1)) != 0)
      {
        if (v151 >= v155)
          v149 = v151 % v155;
        else
          v149 = v151;
      }
      else
      {
        v149 = (v155 - 1) & v151;
      }
LABEL_334:
      v219 = (_QWORD *)*((_QWORD *)__p[0] + v149);
      if (v219)
      {
        *(_QWORD *)__src = *v219;
        *v219 = __src;
        v38 = a10;
        v31 = 168;
      }
      else
      {
        *(void **)__src = v459[0];
        v459[0] = (void *)__src;
        *((_QWORD *)__p[0] + v149) = v459;
        v38 = a10;
        v31 = 168;
        if (*(_QWORD *)__src)
        {
          v220 = *(_QWORD *)(*(_QWORD *)__src + 8);
          if ((v155 & (v155 - 1)) != 0)
          {
            if (v220 >= v155)
              v220 %= v155;
          }
          else
          {
            v220 &= v155 - 1;
          }
          *((_QWORD *)__p[0] + v220) = __src;
        }
      }
      ++v459[1];
      v191 = 0;
LABEL_343:
      a2 = v385;
      if (v191)
        operator delete(v191);
      v221 = v476;
      if ((_QWORD)v476)
        goto LABEL_346;
LABEL_142:
      if (++v29 == (unsigned __int8 *)v28)
        goto LABEL_18;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
LABEL_624:
    {
      v379 = operator new();
      *(_QWORD *)(v31 + 2392) = geo::MallocZoneAllocator::MallocZoneAllocator(v379, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
LABEL_370:
  if ((a11 & 1) != 0 && objc_msgSend(v381, "undulationModel"))
  {
    v402 = objc_msgSend(v381, "undulationModel");
    v400 = 1;
    v231 = 1 << *(_BYTE *)(a1 + 169);
    v407 = (double)*(int *)(a1 + 176);
    v397 = (double)(v231 + ~*(_DWORD *)(a1 + 172));
    v232 = 6.28318531 / (double)v231;
    v233 = exp(v232 * v397 + -3.14159265);
    v395 = atan(v233);
    v234 = fmod(v232 * v407, 6.28318531);
    v404 = fmod(v234 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
    v235 = exp((v397 + 1.0) * v232 + -3.14159265);
    v236 = atan(v235);
    v237 = fmod(v232 + v407 * v232, 6.28318531);
    v238 = fmod(v237 + 6.28318531, 6.28318531);
    v239 = v236 * 114.591559 + -90.0;
    v12 = v404;
    v13 = v238 * 57.2957795 + -180.0;
    v14 = v395 * 114.591559 + -90.0;
    v15 = v239;
    v240 = v459[0];
    if (!v459[0])
      goto LABEL_585;
LABEL_375:
    v398 = a1 + 168;
    while (2)
    {
      if (a2 == 48)
      {
        *(_QWORD *)((char *)&v476 + 7) = 0;
        *(_QWORD *)&v476 = 0;
        HIBYTE(v476) = 1;
        *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v476, 0x10002u) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&__src, *a8, (gss::FeatureAttributeSet *)(v240 + 2), (gss::QueryOverrides *)&v476);
        v244 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
        v243 = __src;
        if (!BYTE14(v476) && (_QWORD)v476)
        {
          v245 = gss::Allocator::instance(v241);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v245 + 40))(v245, v476, WORD6(v476));
        }
        *(_QWORD *)&__src = v243;
        *((_QWORD *)&__src + 1) = v244;
        if (v244)
          goto LABEL_382;
LABEL_394:
        v476 = (unint64_t)v243;
      }
      else
      {
        v250 = *a8;
        *(_QWORD *)((char *)&v476 + 7) = 0;
        *(_QWORD *)&v476 = 0;
        HIBYTE(v476) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&__src, v250, (gss::FeatureAttributeSet *)(v240 + 2), (gss::QueryOverrides *)&v476);
        if (BYTE14(v476))
          v252 = 1;
        else
          v252 = (_QWORD)v476 == 0;
        if (!v252)
        {
          v253 = gss::Allocator::instance(v251);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v253 + 40))(v253, v476, WORD6(v476));
        }
        v244 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
        v243 = __src;
        if (!*((_QWORD *)&__src + 1))
          goto LABEL_394;
LABEL_382:
        v246 = (unint64_t *)&v244->__shared_owners_;
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
        *(_QWORD *)&v476 = v243;
        *((_QWORD *)&v476 + 1) = *((_QWORD *)&__src + 1);
        if (*((_QWORD *)&__src + 1))
        {
          v248 = (unint64_t *)(*((_QWORD *)&__src + 1) + 8);
          do
            v249 = __ldxr(v248);
          while (__stxr(v249 + 1, v248));
        }
      }
      v477 = 0;
      v478 = 0;
      LOBYTE(v479) = 0;
      if (v243)
        v254 = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v243 + 48))(v243, &v477);
      else
        v254 = 0;
      LOBYTE(v479) = v254;
      v255 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
      if (*((_QWORD *)&__src + 1))
      {
        v256 = (unint64_t *)(*((_QWORD *)&__src + 1) + 8);
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
          std::__shared_weak_count::__release_weak(v255);
        }
        v254 = v479;
      }
      v408 = v243;
      if (!v254)
      {
        v405 = 0;
        v394 = 0;
        goto LABEL_461;
      }
      v258 = *(_QWORD *)(v476 + 24);
      v259 = *(float **)v258;
      if (*(_QWORD *)v258)
      {
        v260 = *v259;
        v261 = *v259 == 1.0;
        if (*(_BYTE *)(v258 + 10))
        {
          if (v260 != 0.0 && v260 != 1.0)
          {
LABEL_416:
            v263 = 1;
            if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v476 + 24), 0x12Cu, 0) & 1) == 0)
              goto LABEL_417;
LABEL_431:
            v267 = *(_QWORD *)(v476 + 24);
            v268 = *(float **)v267;
            v405 = v263;
            if (*(_QWORD *)v267)
            {
              v269 = *v268;
              v270 = *v268 == 1.0;
              if (*(_BYTE *)(v267 + 10))
              {
                if (v269 != 0.0 && v269 != 1.0)
                {
LABEL_441:
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v267, 0x1C3u, 0) & 1) == 0)
                  {
                    v272 = 1;
                    goto LABEL_443;
                  }
                  goto LABEL_444;
                }
              }
            }
            else
            {
              v270 = 0;
            }
            v272 = *(unsigned __int8 *)(v267 + v270 + 11);
            if (v272 == 2)
              goto LABEL_441;
LABEL_443:
            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v267, 0x1C3u, v272))
            {
LABEL_444:
              if (v268)
              {
                v273 = *v268;
                v274 = *v268 == 1.0;
                if (*(_BYTE *)(v267 + 10))
                {
                  if (v273 != 0.0 && v273 != 1.0)
                  {
LABEL_455:
                    LOBYTE(__src) = 1;
                    LOBYTE(v443) = 1;
                    v277 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v267, 0x1C3u, 0, &__src);
                    v278 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v267, 0x1C3u, 1u, &v443);
                    if (v273 >= 1.0)
                      v279 = (int *)v278;
                    else
                      v279 = (int *)v277;
                    v280 = *v279;
                    goto LABEL_460;
                  }
                }
              }
              else
              {
                v274 = 0;
              }
              v276 = *(unsigned __int8 *)(v267 + v274 + 11);
              v273 = 0.0;
              if (v276 == 2)
                goto LABEL_455;
              LOBYTE(v280) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v267, 0x1C3u, v276, 0);
LABEL_460:
              v394 = v280 == 0;
            }
            else
            {
              v394 = 0;
            }
LABEL_461:
            v281 = (uint64_t *)v240[6];
            v382 = v240;
            v386 = (uint64_t *)v240[7];
            if (v281 == v386)
            {
LABEL_563:
              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v476);
              a2 = v385;
              if (v244)
              {
                v347 = (unint64_t *)&v244->__shared_owners_;
                do
                  v348 = __ldaxr(v347);
                while (__stlxr(v348 - 1, v347));
                if (!v348)
                {
                  ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                  std::__shared_weak_count::__release_weak(v244);
                }
              }
              v240 = (_QWORD *)*v382;
              if (!*v382)
                goto LABEL_585;
              continue;
            }
            v282 = (unint64_t *)&v244->__shared_owners_;
            while (2)
            {
              v283 = *v281;
              v284 = *(unsigned int *)(*v281 + 100);
              v441 = 0;
              v285 = geo::codec::multiSectionFeatureCharacteristicPoints((std::__shared_weak_count **)v283, (GeoCodecsRoadFeature *)&v441, v242);
              v286 = v285;
              v287 = *(int ***)(v283 + 24);
              v288 = *((unsigned __int8 *)v287 + 33);
              v388 = v281;
              if (*((_BYTE *)v287 + 33))
              {
                v289 = *v287;
                v290 = **v287;
                if (v290 == 2)
                {
                  v291 = 1;
                  goto LABEL_476;
                }
                v293 = 0;
                v294 = v289 + 2;
                while (v288 - 1 != v293)
                {
                  v295 = *v294;
                  v294 += 2;
                  ++v293;
                  if (v295 == 2)
                    goto LABEL_474;
                }
                v293 = v288;
LABEL_474:
                v291 = v293 < v288;
                if (v290 == 185)
                {
                  v296 = 0;
                  LODWORD(v288) = 1;
LABEL_480:
                  v292 = (v289[2 * v296 + 1] & 0xFFFFFFFD) == 0;
                  if (!(_DWORD)v284)
                    goto LABEL_463;
                }
                else
                {
LABEL_476:
                  v296 = 0;
                  v297 = v289 + 2;
                  while (v288 - 1 != v296)
                  {
                    v298 = *v297;
                    v297 += 2;
                    ++v296;
                    if (v298 == 185)
                    {
                      LODWORD(v288) = v296 < v288;
                      goto LABEL_480;
                    }
                  }
                  LODWORD(v288) = 0;
                  v292 = 1;
                  if (!(_DWORD)v284)
                    goto LABEL_463;
                }
              }
              else
              {
                v291 = 0;
                v292 = 1;
                if (!(_DWORD)v284)
                  goto LABEL_463;
              }
              v299 = 0;
              v300 = v288 & v292;
              v301 = !v291;
              v302 = (void **)&v473;
              if (!v301)
                v302 = v470;
              v391 = (uint64_t *)v302;
              v303 = v464;
              if (!v301)
                v303 = v461;
              v396 = (uint64_t *)v303;
              v304 = (char *)v285 + 108;
              while (2)
              {
                v440 = 0;
                v305 = geo::codec::multiSectionFeaturePoints((_QWORD *)v283, v299, &v440);
                v439 = 0;
                v306 = geo::codec::multiSectionFeatureElevations(v283, v299, &v439);
                v242 = (unint64_t *)v440;
                if (v440 < 2)
                  goto LABEL_488;
                if (v441)
                {
                  if (v299 == *((_DWORD *)v286 + 2))
                  {
                    v307 = 0;
                    v308 = 1;
                  }
                  else
                  {
                    v307 = 0;
                    v309 = (int *)((char *)v286 + 108);
                    while (v441 - 1 != v307)
                    {
                      v310 = *v309;
                      v309 += 25;
                      ++v307;
                      if (v299 == v310)
                      {
                        v308 = v307 < v441;
                        goto LABEL_499;
                      }
                    }
                    v308 = 0;
                    v307 = v441;
                  }
                }
                else
                {
                  v307 = 0;
                  v308 = 0;
                }
LABEL_499:
                if (v441 <= v307 + 1)
                  v311 = v307 + 1;
                else
                  v311 = v441;
                v312 = v311 - 1;
                v313 = v307 - 1;
                v314 = &v304[100 * v307];
                do
                {
                  if (v313 + 2 >= v441)
                  {
                    v313 = v312;
                    if (v300)
                      goto LABEL_506;
LABEL_513:
                    v316 = 0;
                    v317 = 0;
                    if (!v405)
                      goto LABEL_531;
                    goto LABEL_514;
                  }
                  v315 = *(_DWORD *)v314;
                  v314 += 100;
                  ++v313;
                }
                while (v299 == v315);
                if (!v300)
                  goto LABEL_513;
LABEL_506:
                if (!v308 || *((_DWORD *)v286 + 25 * v307 + 3))
                {
                  v316 = 1;
                  if (v313 < v441)
                    goto LABEL_509;
LABEL_530:
                  v317 = 1;
                  if (!v405)
                    goto LABEL_531;
LABEL_514:
                  v437 = v408;
                  v438 = v244;
                  if (v244)
                  {
                    do
                      v318 = __ldxr(v282);
                    while (__stxr(v318 + 1, v282));
                  }
                  v319 = *(float *)(a1 + 624);
                  *((_QWORD *)&v432 + 1) = __PAIR64__(LODWORD(v13), LODWORD(v12));
                  v433 = v14;
                  v434 = v15;
                  v435 = v400;
                  *(_DWORD *)v436 = *(_DWORD *)v442;
                  *(_DWORD *)&v436[3] = *(_DWORD *)&v442[3];
                  v320 = a12[1];
                  v430 = *a12;
                  v431 = (std::__shared_weak_count *)v320;
                  *(_QWORD *)&v432 = v402;
                  if (v320)
                  {
                    v321 = (unint64_t *)(v320 + 8);
                    do
                      v322 = __ldxr(v321);
                    while (__stxr(v322 + 1, v321));
                  }
                  v323 = v431;
                  if (!v431)
                    goto LABEL_523;
                  v324 = (unint64_t *)&v431->__shared_owners_;
                  do
                    v325 = __ldaxr(v324);
                  while (__stlxr(v325 - 1, v324));
                  if (!v325)
                  {
                    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                    std::__shared_weak_count::__release_weak(v323);
                    v326 = v438;
                    if (!v438)
                      goto LABEL_488;
                  }
                  else
                  {
LABEL_523:
                    v326 = v438;
                    if (!v438)
                      goto LABEL_488;
                  }
                  v327 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v328 = __ldaxr(v327);
                  while (__stlxr(v328 - 1, v327));
                  goto LABEL_557;
                }
                v316 = *((_BYTE *)v286 + 100 * v307 + 28) == 0;
                if (v313 >= v441)
                  goto LABEL_530;
LABEL_509:
                if (v440 - 1 != *((_DWORD *)v286 + 25 * v313 + 3))
                  goto LABEL_530;
                v317 = *((_BYTE *)v286 + 100 * v313 + 28) == 0;
                if (v405)
                  goto LABEL_514;
LABEL_531:
                if (v394)
                {
                  v428 = v408;
                  v429 = v244;
                  if (v244)
                  {
                    do
                      v329 = __ldxr(v282);
                    while (__stxr(v329 + 1, v282));
                  }
                  v330 = *(float *)(a1 + 624);
                  LOBYTE(__src) = 0;
                  LOBYTE(v443) = 0;
                  *((_QWORD *)&v423 + 1) = __PAIR64__(LODWORD(v13), LODWORD(v12));
                  v424 = v14;
                  v425 = v15;
                  v426 = v400;
                  *(_DWORD *)v427 = *(_DWORD *)v442;
                  *(_DWORD *)&v427[3] = *(_DWORD *)&v442[3];
                  v331 = a12[1];
                  v421 = *a12;
                  v422 = (std::__shared_weak_count *)v331;
                  *(_QWORD *)&v423 = v402;
                  if (v331)
                  {
                    v332 = (unint64_t *)(v331 + 8);
                    do
                      v333 = __ldxr(v332);
                    while (__stxr(v333 + 1, v332));
                  }
                  v334 = v422;
                  if (!v422)
                    goto LABEL_541;
                  v335 = (unint64_t *)&v422->__shared_owners_;
                  do
                    v336 = __ldaxr(v335);
                  while (__stlxr(v336 - 1, v335));
                  if (!v336)
                  {
                    ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                    std::__shared_weak_count::__release_weak(v334);
                    v326 = v429;
                    if (!v429)
                      goto LABEL_488;
                  }
                  else
                  {
LABEL_541:
                    v326 = v429;
                    if (!v429)
                      goto LABEL_488;
                  }
                  v337 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v328 = __ldaxr(v337);
                  while (__stlxr(v328 - 1, v337));
                }
                else
                {
                  v419 = v408;
                  v420 = v244;
                  if (v244)
                  {
                    do
                      v338 = __ldxr(v282);
                    while (__stxr(v338 + 1, v282));
                  }
                  v339 = *(float *)(a1 + 624);
                  LOBYTE(__src) = 0;
                  LOBYTE(v443) = 0;
                  *((_QWORD *)&v414 + 1) = __PAIR64__(LODWORD(v13), LODWORD(v12));
                  v415 = v14;
                  v416 = v15;
                  v417 = v400;
                  *(_DWORD *)v418 = *(_DWORD *)v442;
                  *(_DWORD *)&v418[3] = *(_DWORD *)&v442[3];
                  v340 = a12[1];
                  v412 = *a12;
                  v413 = (std::__shared_weak_count *)v340;
                  *(_QWORD *)&v414 = v402;
                  if (v340)
                  {
                    v341 = (unint64_t *)(v340 + 8);
                    do
                      v342 = __ldxr(v341);
                    while (__stxr(v342 + 1, v341));
                  }
                  v343 = v413;
                  if (!v413)
                    goto LABEL_554;
                  v344 = (unint64_t *)&v413->__shared_owners_;
                  do
                    v345 = __ldaxr(v344);
                  while (__stlxr(v345 - 1, v344));
                  if (!v345)
                  {
                    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                    std::__shared_weak_count::__release_weak(v343);
                    v326 = v420;
                    if (!v420)
                      goto LABEL_488;
                  }
                  else
                  {
LABEL_554:
                    v326 = v420;
                    if (!v420)
                      goto LABEL_488;
                  }
                  v346 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v328 = __ldaxr(v346);
                  while (__stlxr(v328 - 1, v346));
                }
LABEL_557:
                if (!v328)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
LABEL_488:
                if (++v299 != v284)
                  continue;
                break;
              }
LABEL_463:
              v281 = v388 + 1;
              if (v388 + 1 == v386)
                goto LABEL_563;
              continue;
            }
          }
        }
      }
      else
      {
        v261 = 0;
      }
      break;
    }
    v263 = *(unsigned __int8 *)(v258 + v261 + 11);
    if (v263 == 2)
      goto LABEL_416;
LABEL_417:
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v258, 0x12Cu, v263) & 1) != 0)
      goto LABEL_430;
    if (v259)
    {
      v264 = *v259;
      v265 = *v259 == 1.0;
      if (*(_BYTE *)(v258 + 10))
      {
        if (v264 != 0.0 && v264 != 1.0)
          goto LABEL_428;
      }
    }
    else
    {
      v265 = 0;
    }
    v263 = *(unsigned __int8 *)(v258 + v265 + 11);
    if (v263 == 2)
    {
LABEL_428:
      v263 = 1;
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v258, 0x12Du, 0) & 1) != 0)
        goto LABEL_431;
    }
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v258, 0x12Du, v263) & 1) != 0)
    {
LABEL_430:
      v263 = 1;
      goto LABEL_431;
    }
    if (v259)
    {
      v349 = *v259;
      v350 = *v259 == 1.0;
      if (*(_BYTE *)(v258 + 10))
      {
        if (v349 != 0.0 && v349 != 1.0)
        {
LABEL_578:
          LOBYTE(__src) = 1;
          LOBYTE(v443) = 1;
          v353 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v258, 0x96u, 0, &__src);
          v354 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v258, 0x96u, 1u, &v443);
          if (v349 >= 1.0)
            v355 = (int *)v354;
          else
            v355 = (int *)v353;
          v356 = *v355;
          goto LABEL_583;
        }
      }
    }
    else
    {
      v350 = 0;
    }
    v352 = *(unsigned __int8 *)(v258 + v350 + 11);
    v349 = 0.0;
    if (v352 == 2)
      goto LABEL_578;
    LOBYTE(v356) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v258, 0x96u, v352, 0);
LABEL_583:
    v263 = v356 == 1;
    if ((_BYTE)v479)
      goto LABEL_431;
    v405 = v356 == 1;
    v394 = 0;
    goto LABEL_461;
  }
  v400 = 0;
  v402 = 0;
  v240 = v459[0];
  if (v459[0])
    goto LABEL_375;
LABEL_585:
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v381, "gglDevice") + 24))(&v443);
  v357 = (__int128 *)operator new(0x38uLL);
  *(_QWORD *)v357 = &off_1E42F6800;
  *((_QWORD *)v357 + 1) = v464;
  *((_QWORD *)v357 + 2) = &v473;
  *((_QWORD *)v357 + 3) = v461;
  *((_QWORD *)v357 + 4) = v470;
  *((_QWORD *)v357 + 5) = v467;
  *((_QWORD *)v357 + 6) = a1;
  v478 = v357;
  __src = 0uLL;
  (*(void (**)(unint64_t, __int128 *, __int128 *))(*(_QWORD *)v443 + 16))(v443, &v476, &__src);
  v358 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
  if (*((_QWORD *)&__src + 1))
  {
    v359 = (unint64_t *)(*((_QWORD *)&__src + 1) + 8);
    do
      v360 = __ldaxr(v359);
    while (__stlxr(v360 - 1, v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  v361 = v478;
  if (v478 == &v476)
  {
    v362 = 4;
    v361 = &v476;
LABEL_594:
    (*(void (**)(void))(*(_QWORD *)v361 + 8 * v362))();
  }
  else if (v478)
  {
    v362 = 5;
    goto LABEL_594;
  }
  if (v443)
  {
    v363 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v443 + 24))(v443);
    v364 = v443;
    v443 = 0;
    *(_QWORD *)&v476 = v364;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v363 + 48))(v363, &v476);
    v365 = v476;
    *(_QWORD *)&v476 = 0;
    if (v365)
      (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
    v366 = (unsigned int *)v443;
    v443 = 0;
    if (v366)
      (*(void (**)(unsigned int *))(*(_QWORD *)v366 + 8))(v366);
  }
  *(_QWORD *)(a1 + 752) = (char *)v462[1]
                        + (unint64_t)v465[1]
                        + (unint64_t)v468[1]
                        + (unint64_t)v471[1]
                        + *((_QWORD *)&v474 + 1);
  v367 = *(float *)(a1 + 624);
  v411 = 0;
  v410 = 1.0 / v367;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)(a1 + 168), (double *)&v411, &v410);
  v368 = (void **)v459[0];
  if (v459[0])
  {
    do
    {
      v376 = (void **)*v368;
      v377 = v368[6];
      if (v377)
      {
        v368[7] = v377;
        operator delete(v377);
      }
      v378 = v368[2];
      if (v378)
      {
        v368[3] = v378;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v368[5] + 40))(v368[5], v378, (_BYTE *)v368[4] - (_BYTE *)v378);
      }
      operator delete(v368);
      v368 = v376;
    }
    while (v376);
  }
  v369 = __p[0];
  __p[0] = 0;
  if (v369)
    operator delete(v369);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)v462[0]);
  v370 = v461[0];
  v461[0] = 0;
  if (v370)
    operator delete(v370);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)v465[0]);
  v371 = v464[0];
  v464[0] = 0;
  if (v371)
    operator delete(v371);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)v468[0]);
  v372 = v467[0];
  v467[0] = 0;
  if (v372)
    operator delete(v372);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)v471[0]);
  v373 = v470[0];
  v470[0] = 0;
  if (v373)
    operator delete(v373);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)v474);
  v374 = (void *)v473;
  *(_QWORD *)&v473 = 0;
  if (v374)
    operator delete(v374);

  return a1;
}

void sub_19FCA875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,md::MapTileData *a34)
{
  uint64_t v34;
  void **v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void **v62;
  void *v63;
  void *v64;

  v36 = (void **)STACK[0x250];
  if (STACK[0x250])
  {
    do
    {
      v62 = (void **)*v36;
      v63 = v36[6];
      if (v63)
      {
        v36[7] = v63;
        operator delete(v63);
      }
      v64 = v36[2];
      if (v64)
      {
        v36[3] = v64;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v36[5] + 40))(v36[5], v64, (_BYTE *)v36[4] - (_BYTE *)v64);
      }
      operator delete(v36);
      v36 = v62;
    }
    while (v62);
  }
  v37 = (void *)STACK[0x240];
  STACK[0x240] = 0;
  if (v37)
    operator delete(v37);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)STACK[0x280]);
  v38 = (void *)STACK[0x270];
  STACK[0x270] = 0;
  if (v38)
    operator delete(v38);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)STACK[0x2B0]);
  v39 = (void *)STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v39)
    operator delete(v39);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)STACK[0x2E0]);
  v40 = (void *)STACK[0x2D0];
  STACK[0x2D0] = 0;
  if (v40)
    operator delete(v40);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)STACK[0x310]);
  v41 = (void *)STACK[0x300];
  STACK[0x300] = 0;
  if (v41)
    operator delete(v41);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(v34 - 240));
  v42 = *(void **)(v34 - 256);
  *(_QWORD *)(v34 - 256) = 0;
  if (v42)
    operator delete(v42);
  v43 = (std::__shared_weak_count *)*((_QWORD *)a34 + 106);
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)a34 + 104);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *((_QWORD *)a34 + 102);
  *((_QWORD *)a34 + 102) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (_QWORD *)*((_QWORD *)a34 + 98);
  while (v50)
  {
    v57 = v50;
    v50 = (_QWORD *)*v50;
    v58 = (void *)v57[4];
    if (v58)
    {
      v57[5] = v58;
      operator delete(v58);
    }
    v59 = (std::__shared_weak_count *)v57[3];
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)a34 + 99) + 40))(*((_QWORD *)a34 + 99), v57, 56);
  }
  v51 = *a16;
  *a16 = 0;
  if (v51)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a34 + 97) + 40))(*((_QWORD *)a34 + 97), v51, 8 * *((_QWORD *)a34 + 96));
  v52 = *((_QWORD *)a34 + 93);
  *((_QWORD *)a34 + 93) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *((_QWORD *)a34 + 92);
  *((_QWORD *)a34 + 92) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = (uint64_t *)((char *)a34 + 720);
  v55 = *((_QWORD *)a34 + 91);
  *((_QWORD *)a34 + 91) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v54;
  *v54 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  md::MapTileData::~MapTileData(a34);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::addContourLinesToBatches(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  gss::Allocator *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  _BOOL4 v25;
  unsigned int *v27;
  uint64_t *v28;
  unsigned int v29;
  char hasValueForKeyAtEnd;
  float v31;
  _BOOL4 v32;
  char v34;
  float v35;
  _BOOL4 v36;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v68[2];
  __int128 v69;
  char v70;
  unsigned __int8 v71[12];
  unsigned __int8 v72[12];
  __int128 v73;
  __int128 v74;
  uint64_t v75[2];
  __int128 v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  __int128 v84;

  v5 = *a3;
  v65 = a3[1];
  if (*a3 != v65)
  {
    v9 = a3[4];
    v10 = *(_QWORD *)(v9 + 8);
    v64 = *(_QWORD *)(v9 + 32);
    while (1)
    {
      v11 = *a4;
      md::createFeatureAttributeSet((gss::Allocator *)&v79, (uint64_t *)(v5 + 32));
      *(_QWORD *)((char *)&v74 + 7) = 0;
      *(_QWORD *)&v74 = 0;
      HIBYTE(v74) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v84, v11, (gss::FeatureAttributeSet *)&v79, (gss::QueryOverrides *)&v74);
      if (BYTE14(v74))
        v13 = 1;
      else
        v13 = (_QWORD)v74 == 0;
      if (!v13)
      {
        v14 = gss::Allocator::instance(v12);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 40))(v14, v74, WORD6(v74));
      }
      if (v79)
      {
        v80 = (std::__shared_weak_count *)v79;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 40))(v82, v79, v81 - v79);
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
      v15 = v84;
      v74 = v84;
      if (*((_QWORD *)&v84 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v80 = v16;
        do
          v19 = __ldxr(v17);
        while (__stxr(v19 + 1, v17));
      }
      else
      {
        v80 = 0;
      }
      v79 = v15;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      if (v15)
        LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v81);
      v83 = v15;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        LODWORD(v15) = v83;
      }
      if ((_DWORD)v15)
        break;
      v27 = (unsigned int *)(v5 + 20);
      if (*(_DWORD *)(v5 + 20))
      {
        v28 = (uint64_t *)(v64 + 16 * *(unsigned int *)(v5 + 16));
LABEL_82:
        v52 = 0;
        do
        {
          v53 = *v28;
          v54 = *(_QWORD *)(a3[4] + 24);
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
          v73 = v84;
          if (*((_QWORD *)&v84 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = v28[1];
          v72[0] = 0;
          v71[0] = 0;
          LOBYTE(v69) = 0;
          v70 = 0;
          v68[0] = 0;
          v68[1] = 0;
          LOWORD(v74) = 255;
          *(_QWORD *)((char *)&v74 + 4) = 0;
          if (v55)
          {
            v59 = (unint64_t *)&v55->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          ++v52;
          v28 += 2;
        }
        while (v52 < *v27);
      }
LABEL_92:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v79);
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
      if (*((_QWORD *)&v84 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v5 += 56;
      if (v5 == v65)
        return;
    }
    v22 = *(_QWORD *)(v79 + 24);
    v23 = *(float **)v22;
    if (*(_QWORD *)v22)
    {
      v24 = *v23;
      v25 = *v23 == 1.0;
      if (*(_BYTE *)(v22 + 10))
      {
        if (v24 != 0.0 && v24 != 1.0)
        {
LABEL_39:
          hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v22, 0x12Cu, 0);
          v29 = 1;
          if ((hasValueForKeyAtEnd & 1) != 0)
            goto LABEL_70;
LABEL_40:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v22, 0x12Cu, v29) & 1) != 0)
          {
LABEL_53:
            v29 = 1;
            goto LABEL_70;
          }
          if (v23)
          {
            v31 = *v23;
            v32 = *v23 == 1.0;
            if (*(_BYTE *)(v22 + 10))
            {
              if (v31 != 0.0 && v31 != 1.0)
              {
LABEL_51:
                v34 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v22, 0x12Du, 0);
                v29 = 1;
                if ((v34 & 1) != 0)
                  goto LABEL_70;
LABEL_52:
                if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v22, 0x12Du, v29) & 1) != 0)
                  goto LABEL_53;
                if (v23)
                {
                  v35 = *v23;
                  v36 = *v23 == 1.0;
                  if (*(_BYTE *)(v22 + 10))
                  {
                    if (v35 != 0.0 && v35 != 1.0)
                      goto LABEL_64;
                  }
                }
                else
                {
                  v36 = 0;
                }
                v38 = *(unsigned __int8 *)(v22 + v36 + 11);
                v35 = 0.0;
                if (v38 != 2)
                {
                  LOBYTE(v42) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v22, 0x96u, v38, 0);
LABEL_69:
                  v29 = v42 == 1;
LABEL_70:
                  v27 = (unsigned int *)(v5 + 20);
                  if (*(_DWORD *)(v5 + 20))
                  {
                    v28 = (uint64_t *)(v64 + 16 * *(unsigned int *)(v5 + 16));
                    if (!v29)
                      goto LABEL_82;
                    v43 = 0;
                    do
                    {
                      v44 = *v28;
                      v45 = *(_QWORD *)(a3[4] + 24);
                      v46 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
                      v78 = v84;
                      if (*((_QWORD *)&v84 + 1))
                      {
                        v47 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
                        do
                          v48 = __ldxr(v47);
                        while (__stxr(v48 + 1, v47));
                      }
                      v49 = v28[1];
                      LOBYTE(v76) = 0;
                      v77 = 0;
                      v75[0] = 0;
                      v75[1] = 0;
                      LOWORD(v74) = 255;
                      *(_QWORD *)((char *)&v74 + 4) = 0;
                      if (v46)
                      {
                        v50 = (unint64_t *)&v46->__shared_owners_;
                        do
                          v51 = __ldaxr(v50);
                        while (__stlxr(v51 - 1, v50));
                        if (!v51)
                        {
                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                          std::__shared_weak_count::__release_weak(v46);
                        }
                      }
                      ++v43;
                      v28 += 2;
                    }
                    while (v43 < *v27);
                  }
                  goto LABEL_92;
                }
LABEL_64:
                LOBYTE(v74) = 1;
                v72[0] = 1;
                v39 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v22, 0x96u, 0, &v74);
                v40 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v22, 0x96u, 1u, v72);
                if (v35 >= 1.0)
                  v41 = (int *)v40;
                else
                  v41 = (int *)v39;
                v42 = *v41;
                goto LABEL_69;
              }
            }
          }
          else
          {
            v32 = 0;
          }
          v29 = *(unsigned __int8 *)(v22 + v32 + 11);
          if (v29 != 2)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
    }
    else
    {
      v25 = 0;
    }
    v29 = *(unsigned __int8 *)(v22 + v25 + 11);
    if (v29 != 2)
      goto LABEL_40;
    goto LABEL_39;
  }
}

void sub_19FCA92F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v1 - 176);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::addPatternedRibbonToBatches(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5, __int128 *a6, uint64_t *a7, uint64_t a8, double a9)
{
  unsigned __int8 v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  float *v34;
  float v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  BOOL v46;
  const float *v47;
  __int128 v48;
  float *v49;
  unint64_t v50;
  const float *v51;
  float *v52;
  float *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  void (***v65)(_QWORD);
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD v72[2];
  int v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76[2];
  uint64_t v77;
  float32x4x2_t v78;
  float32x4x3_t v79;

  v18 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v67 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v67, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 120, 8);
  v20 = v19;
  *(_OWORD *)(v19 + 49) = 0u;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_QWORD *)(v19 + 56) = a3;
  *(_QWORD *)v19 = off_1E42AF588;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 72) = 0;
  if (!a3)
  {
    *(_QWORD *)v19 = off_1E42909B0;
    *(_WORD *)(v19 + 96) = 0;
    v77 = v19;
    v38 = *a2;
    v39 = (std::__shared_weak_count *)a2[1];
    if (!v39)
      goto LABEL_46;
    goto LABEL_44;
  }
  *(_QWORD *)(v19 + 88) = a3;
  {
    v68 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v68, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v22 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 12 * a3, 8);
  *(_QWORD *)(v20 + 72) = v22;
  *(_BYTE *)(v20 + 64) = 1;
  *(_QWORD *)v20 = off_1E42909B0;
  *(_WORD *)(v20 + 96) = 0;
  v77 = v20;
  if (!a5)
  {
    if (a3 < 0x1C)
      goto LABEL_20;
    v41 = 0;
    v40 = 0;
    v42 = !is_mul_ok(a3 - 1, 0xCuLL);
    v46 = v22 + 12 * (a3 - 1) >= v22
       && v22 + 8 + 12 * (a3 - 1) >= v22 + 8
       && (_DWORD)a3 != 0x100000000
       && (a3 - 1) >> 32 == 0
       && v22 + 4 + 12 * (a3 - 1) >= v22 + 4;
    if (!v46 || v42)
      goto LABEL_41;
    if (v22 < a4 + 8 * a3 && v22 + 12 * a3 > a4)
    {
LABEL_20:
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v40 = a3 & 0xFFFFFFFFFFFFFFF8;
      v47 = (const float *)(a4 + 32);
      v48 = 0uLL;
      v49 = (float *)v22;
      v50 = a3 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v51 = v47 - 8;
        v78 = vld2q_f32(v51);
        *(float32x4x2_t *)v79.val[0].f32 = vld2q_f32(v47);
        v79.val[2] = 0uLL;
        v52 = v49 + 24;
        vst3q_f32(v49, *(float32x4x3_t *)(&v48 - 2));
        v53 = v49 + 12;
        vst3q_f32(v53, v79);
        v47 += 16;
        v49 = v52;
        v50 -= 8;
      }
      while (v50);
      v41 = a3 & 0xFFFFFFF8;
      if (v40 == a3)
      {
LABEL_43:
        v38 = *a2;
        v39 = (std::__shared_weak_count *)a2[1];
        if (!v39)
          goto LABEL_46;
        goto LABEL_44;
      }
    }
LABEL_41:
    v54 = v41 + 1;
    do
    {
      v55 = *(_QWORD *)(a4 + 8 * v40);
      v56 = v22 + 12 * v40;
      *(_QWORD *)v56 = v55;
      *(_DWORD *)(v56 + 8) = 0;
      v40 = v54++;
    }
    while (v40 < a3);
    goto LABEL_43;
  }
  v70 = a1;
  v26 = 0;
  v27 = 0;
  do
  {
    v29 = a6[1];
    v76[0] = *a6;
    v76[1] = v29;
    v30 = *a7;
    v31 = (std::__shared_weak_count *)a7[1];
    v74 = *a7;
    v75 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v34 = (float *)(a4 + 8 * v26);
    v35 = md::drape(v76, v30, v31, a8, *v34, v34[1], *(float *)(a5 + 4 * v26), a9, v23, v24, v25);
    if (v31)
    {
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v20 = v77;
    v28 = *(_QWORD *)(v77 + 72) + 12 * v26;
    *(_QWORD *)v28 = *(_QWORD *)v34;
    *(float *)(v28 + 8) = v35;
    v26 = ++v27;
  }
  while (v27 < a3);
  v18 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
  a1 = v70;
  v38 = *a2;
  v39 = (std::__shared_weak_count *)a2[1];
  if (v39)
  {
LABEL_44:
    v57 = (unint64_t *)&v39->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
LABEL_46:
  v72[0] = v38;
  v72[1] = v39;
  v73 = -1;
  v59 = std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PatternedBatchKey,std::piecewise_construct_t const&,std::tuple<md::PatternedBatchKey const&>,std::tuple<>>(a1, v38, 0xFFFFFFFF, (uint64_t)v72);
  v60 = v59;
  v61 = (uint64_t *)v59[6];
  if ((unint64_t)v61 >= v59[7])
  {
    v62 = std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>((uint64_t)(v59 + 5), &v77);
  }
  else
  {
    if (v61)
    {
      v77 = 0;
      *v61 = v20;
    }
    v62 = v61 + 1;
  }
  v60[6] = v62;
  if (v39)
  {
    v63 = (unint64_t *)&v39->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v65 = (void (***)(_QWORD))v77;
  v77 = 0;
  if (v65)
  {
    (**v65)(v65);
    if ((v66 & 1) == 0)
    {
      {
        v69 = operator new();
        *((_QWORD *)v18 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(_QWORD, void (***)(_QWORD), uint64_t))(**((_QWORD **)v18 + 299) + 40))(*((_QWORD *)v18 + 299), v65, 120);
  }
}

void sub_19FCA98EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))va1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::addRoadRibbonToBatches(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6, char a7, unsigned __int8 *a8, double a9, unsigned __int8 *a10, __int128 *a11, uint64_t *a12, uint64_t a13)
{
  unsigned __int8 v21;
  float *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  float *v38;
  float v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  const float *v47;
  __int128 v48;
  float *v49;
  unint64_t v50;
  const float *v51;
  float *v52;
  float *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  void (***v69)(_QWORD);
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v76[2];
  int v77;
  char v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81[2];
  uint64_t v82;
  float32x4x2_t v83;
  float32x4x3_t v84;

  v22 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v71 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v71, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 120, 8);
  v27 = v23;
  *(_OWORD *)(v23 + 49) = 0u;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_QWORD *)(v23 + 56) = a3;
  *(_QWORD *)v23 = off_1E42AF588;
  *(_QWORD *)(v23 + 80) = 0;
  *(_QWORD *)(v23 + 88) = 0;
  *(_QWORD *)(v23 + 72) = 0;
  if (a3)
  {
    *(_QWORD *)(v23 + 88) = a3;
    {
      v72 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v72, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v29 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 12 * a3, 8);
    *(_QWORD *)(v27 + 72) = v29;
    *(_BYTE *)(v27 + 64) = 1;
  }
  else
  {
    v29 = 0;
  }
  *(_QWORD *)v27 = off_1E428BC18;
  *(_WORD *)(v27 + 98) = 0;
  v82 = v27;
  *(_BYTE *)(v27 + 96) = a6;
  *(_BYTE *)(v27 + 97) = a7;
  *(_QWORD *)(v27 + 88) = a3;
  if (a3)
  {
    if (!a5)
    {
      if (a3 >= 0x1C)
      {
        v43 = 0;
        v42 = 0;
        v45 = !is_mul_ok(a3 - 1, 0xCuLL);
        v46 = 12 * (a3 - 1);
        v44 = a4;
        if (v29 + v46 >= v29
          && v29 + 8 + v46 >= v29 + 8
          && (_DWORD)a3 != 0x100000000
          && !((a3 - 1) >> 32)
          && v29 + 4 + v46 >= v29 + 4
          && !v45)
        {
          if (v29 >= a4 + 8 * a3 || v29 + 12 * a3 <= a4)
          {
            v42 = a3 & 0xFFFFFFFFFFFFFFF8;
            v47 = (const float *)(a4 + 32);
            v48 = 0uLL;
            v49 = (float *)v29;
            v50 = a3 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v51 = v47 - 8;
              v83 = vld2q_f32(v51);
              *(float32x4x2_t *)v84.val[0].f32 = vld2q_f32(v47);
              v84.val[2] = 0uLL;
              v52 = v49 + 24;
              vst3q_f32(v49, *(float32x4x3_t *)(&v48 - 2));
              v53 = v49 + 12;
              vst3q_f32(v53, v84);
              v47 += 16;
              v49 = v52;
              v50 -= 8;
            }
            while (v50);
            v43 = a3 & 0xFFFFFFF8;
            if (v42 == a3)
              goto LABEL_35;
          }
          else
          {
            v42 = 0;
            v43 = 0;
          }
        }
      }
      else
      {
        v42 = 0;
        v43 = 0;
        v44 = a4;
      }
      v54 = v43 + 1;
      do
      {
        v55 = *(_QWORD *)(v44 + 8 * v42);
        v56 = v29 + 12 * v42;
        *(_QWORD *)v56 = v55;
        *(_DWORD *)(v56 + 8) = 0;
        v42 = v54++;
      }
      while (v42 < a3);
      goto LABEL_35;
    }
    v74 = a8;
    v30 = 0;
    v31 = 0;
    do
    {
      v33 = a11[1];
      v81[0] = *a11;
      v81[1] = v33;
      v34 = *a12;
      v35 = (std::__shared_weak_count *)a12[1];
      v79 = *a12;
      v80 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
      }
      v38 = (float *)(a4 + 8 * v30);
      v39 = md::drape(v81, v34, v35, a13, *v38, v38[1], *(float *)(a5 + 4 * v30), a9, v24, v25, v26);
      if (v35)
      {
        v40 = (unint64_t *)&v35->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v27 = v82;
      v32 = *(_QWORD *)(v82 + 72) + 12 * v30;
      *(_QWORD *)v32 = *(_QWORD *)v38;
      *(float *)(v32 + 8) = v39;
      v30 = ++v31;
    }
    while (v31 < a3);
    v22 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    a8 = v74;
  }
LABEL_35:
  v57 = *a8;
  *(_BYTE *)(v27 + 98) = v57;
  if (v57)
  {
    *(_DWORD *)(v27 + 100) = *((_DWORD *)a8 + 1);
    *(_DWORD *)(v27 + 104) = *((_DWORD *)a8 + 2);
  }
  v58 = *a10;
  *(_BYTE *)(v27 + 99) = v58;
  if (v58)
  {
    *(_DWORD *)(v27 + 108) = *((_DWORD *)a10 + 1);
    *(_DWORD *)(v27 + 112) = *((_DWORD *)a10 + 2);
  }
  v59 = *a2;
  v60 = (std::__shared_weak_count *)a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v76[0] = v59;
  v76[1] = (uint64_t)v60;
  v77 = 0;
  v78 = 0;
  v63 = std::__hash_table<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::hash<md::RoadBatchKey>,std::equal_to<md::RoadBatchKey>,true>,std::__unordered_map_equal<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::equal_to<md::RoadBatchKey>,std::hash<md::RoadBatchKey>,true>,std::allocator<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RoadBatchKey,std::piecewise_construct_t const&,std::tuple<md::RoadBatchKey const&>,std::tuple<>>(a1, v76, (uint64_t)v76);
  v64 = v63;
  v65 = (uint64_t *)v63[6];
  if ((unint64_t)v65 >= v63[7])
  {
    v66 = std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>((uint64_t)(v63 + 5), &v82);
  }
  else
  {
    if (v65)
    {
      v82 = 0;
      *v65 = v27;
    }
    v66 = v65 + 1;
  }
  v64[6] = (uint64_t)v66;
  if (v60)
  {
    v67 = (unint64_t *)&v60->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v69 = (void (***)(_QWORD))v82;
  v82 = 0;
  if (v69)
  {
    (**v69)(v69);
    if ((v70 & 1) == 0)
    {
      {
        v73 = operator new();
        *((_QWORD *)v22 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v73, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(_QWORD, void (***)(_QWORD), uint64_t))(**((_QWORD **)v22 + 299) + 40))(*((_QWORD *)v22 + 299), v69, 120);
  }
}

void sub_19FCA9E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData(md::MapDataType,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&,BOOL,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&::PropertyID>>,VKSharedResources *,std::function<BOOL ()(std::shared_ptr const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData(md::MapDataType,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&,BOOL,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&::PropertyID>>,VKSharedResources *,std::function<BOOL ()(std::shared_ptr const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42F6800;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData(md::MapDataType,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&,BOOL,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&::PropertyID>>,VKSharedResources *,std::function<BOOL ()(std::shared_ptr const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42F6800;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData(md::MapDataType,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&,BOOL,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<std::vector<std::shared_ptr<md::GEOVectorTileResource>> const&::PropertyID>>,VKSharedResources *,std::function<BOOL ()(std::shared_ptr const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL,std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[4];
  uint64_t v16;
  char v17;
  char v18[4];
  uint64_t v19;
  char v20;
  char v21[4];
  uint64_t v22;
  char v23;
  char v24[4];
  uint64_t v25;
  char v26;
  char v27[4];
  uint64_t v28;
  char v29;

  v2 = result;
  v3 = *a2;
  v4 = result[6];
  if (*(_QWORD *)(result[2] + 24))
  {
    v5 = (_QWORD *)operator new();
    v6 = v2[2];
    *(_WORD *)v27 = *(_WORD *)(v4 + 168);
    v28 = *(_QWORD *)(v4 + 172);
    v29 = 1;
    md::RoadLayer::RoadLayer(v5, v3, v6, (uint64_t *)(v4 + 824), (uint64_t *)(v4 + 840), v27, *(unsigned __int8 *)(v4 + 857));
    result = *(_QWORD **)(v4 + 736);
    *(_QWORD *)(v4 + 736) = v5;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (*(_QWORD *)(v2[4] + 24))
  {
    v7 = (_QWORD *)operator new();
    v8 = v2[4];
    *(_WORD *)v24 = *(_WORD *)(v4 + 168);
    v25 = *(_QWORD *)(v4 + 172);
    v26 = 1;
    md::RoadLayer::RoadLayer(v7, v3, v8, (uint64_t *)(v4 + 824), (uint64_t *)(v4 + 840), v24, *(unsigned __int8 *)(v4 + 857));
    result = *(_QWORD **)(v4 + 744);
    *(_QWORD *)(v4 + 744) = v7;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (*(_QWORD *)(v2[5] + 24))
  {
    v9 = (_QWORD *)operator new();
    v10 = v2[5];
    *(_WORD *)v21 = *(_WORD *)(v4 + 168);
    v22 = *(_QWORD *)(v4 + 172);
    v23 = 1;
    md::RoadLayer::RoadLayer(v9, v3, v10, (uint64_t *)(v4 + 824), (uint64_t *)(v4 + 840), v21, *(unsigned __int8 *)(v4 + 857));
    result = *(_QWORD **)(v4 + 816);
    *(_QWORD *)(v4 + 816) = v9;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (*(_QWORD *)(v2[1] + 24))
  {
    v11 = operator new();
    v12 = v2[1];
    *(_WORD *)v18 = *(_WORD *)(v4 + 168);
    v19 = *(_QWORD *)(v4 + 172);
    v20 = 1;
    md::PatternedLayer::PatternedLayer(v11, v3, v12, (uint64_t *)(v4 + 824), (uint64_t *)(v4 + 840), v18, *(unsigned __int8 *)(v4 + 857));
    result = *(_QWORD **)(v4 + 720);
    *(_QWORD *)(v4 + 720) = v11;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (*(_QWORD *)(v2[3] + 24))
  {
    v13 = operator new();
    v14 = v2[3];
    *(_WORD *)v15 = *(_WORD *)(v4 + 168);
    v16 = *(_QWORD *)(v4 + 172);
    v17 = 1;
    md::PatternedLayer::PatternedLayer(v13, v3, v14, (uint64_t *)(v4 + 824), (uint64_t *)(v4 + 840), v15, *(unsigned __int8 *)(v4 + 857));
    result = *(_QWORD **)(v4 + 728);
    *(_QWORD *)(v4 + 728) = v13;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_19FCAA1AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C40520EE663);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::FeatureAttributeSet,std::vector<GeoCodecsRoadFeature const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::FeatureAttributeSet,std::vector<GeoCodecsRoadFeature const*>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 48);
      if (v3)
      {
        *(_QWORD *)(v2 + 56) = v3;
        operator delete(v3);
      }
      v4 = *(_QWORD *)(v2 + 16);
      if (v4)
      {
        *(_QWORD *)(v2 + 24) = v4;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), v4, *(_QWORD *)(v2 + 32) - v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::vector<md::TransitLink::Section>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5) >= a2)
  {
    v11 = &v4[96 * a2];
    do
    {
      *((_OWORD *)v4 + 2) = 0uLL;
      *((_OWORD *)v4 + 3) = 0uLL;
      *((_OWORD *)v4 + 4) = 0uLL;
      *((_OWORD *)v4 + 5) = 0uLL;
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      v4[33] = 4;
      *(_OWORD *)(v4 + 40) = 0uLL;
      *(_OWORD *)(v4 + 56) = 0uLL;
      *((_WORD *)v4 + 36) = 1024;
      *((_QWORD *)v4 + 10) = 0;
      *(_QWORD *)(v4 + 86) = 0;
      v4 += 96;
    }
    while (v4 != v11);
    a1[1] = v11;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 5);
    v7 = v6 + a2;
    if (v6 + a2 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 5);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x155555555555555)
      v9 = 0x2AAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(96 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[96 * v6];
    v13 = &v12[96 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      v14[33] = 4;
      *(_OWORD *)(v14 + 40) = 0uLL;
      *(_OWORD *)(v14 + 56) = 0uLL;
      *((_WORD *)v14 + 36) = 1024;
      *((_QWORD *)v14 + 10) = 0;
      *(_QWORD *)(v14 + 86) = 0;
      v14 += 96;
    }
    while (v14 != v13);
    v15 = &v10[96 * v9];
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v16 - 6);
        *((_OWORD *)v12 - 5) = v18;
        v19 = *((_OWORD *)v16 - 4);
        v20 = *((_OWORD *)v16 - 3);
        v21 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v12 - 1) = v21;
        *((_OWORD *)v12 - 4) = v19;
        *((_OWORD *)v12 - 3) = v20;
        v12 -= 96;
        v16 -= 96;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
}

uint64_t *md::TransitLink::TransitLink(uint64_t *a1, uint64_t *a2)
{
  geo::codec::VectorTile **v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  unint64_t v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unint64_t v44;
  unint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  unint64_t v55;
  float32x2_t *v56;
  float32x2_t v57;
  float *v58;
  float v59;
  uint64_t v60;
  unint64_t v61;
  float *v62;
  float *v63;
  unint64_t v64;
  float v65;
  float v66;
  unint64_t v67;
  float *v68;
  float *v69;
  float v70;
  unint64_t v72;

  a1[1] = 0;
  v3 = (geo::codec::VectorTile **)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t)a2;
  if (a2)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    if (v5 && (v5 = std::__shared_weak_count::lock(v5)) != 0)
      v6 = *a2;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (std::__shared_weak_count *)a1[2];
  a1[1] = v6;
  a1[2] = (uint64_t)v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a1 + 7) = 0u;
  a1[18] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  a1[15] = 0;
  a1[16] = (uint64_t)(a1 + 17);
  *((_DWORD *)a1 + 38) = 0;
  a1[20] = 0;
  *((_BYTE *)a1 + 168) = 0;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 52) = 1065353216;
  *(_OWORD *)(a1 + 27) = xmmword_19FFB5030;
  a1[29] = 0;
  v10 = (float *)(a1 + 29);
  *(uint64_t *)((char *)a1 + 237) = 0;
  v11 = *(unsigned int *)(*a1 + 20);
  if (!(_DWORD)v11)
  {
    std::vector<md::TransitLink::Section>::__append((void **)a1 + 7, 1uLL);
    return a1;
  }
  std::vector<md::TransitLink::Section>::__append((void **)a1 + 7, v11);
  if (*v3)
  {
    v12 = geo::codec::VectorTile::transitLinkSections(*v3);
    v13 = a1[7];
    v14 = a1[8];
    if (v14 != v13)
    {
      v15 = 0;
      v16 = *v10;
      v17 = 0.0;
      v14 = a1[7];
      while (1)
      {
        v19 = v14 + 96 * v15;
        *(float *)(v19 + 80) = v16;
        v72 = 0;
        v20 = geo::codec::transitLinkPoints(*a1, v15, &v72);
        v21 = v72;
        if (!v72)
          goto LABEL_32;
        *(_DWORD *)(v19 + 16) = *(_DWORD *)v20;
        *(_DWORD *)(v19 + 20) = *(_DWORD *)(v20 + 4);
        v22 = v14 + 96 * v15;
        *(_BYTE *)(v22 + 92) = 1;
        v23 = v21 - 1;
        v24 = (float *)(v20 + 8 * (v21 - 1));
        *(float *)(v22 + 56) = *v24;
        *(float *)(v22 + 60) = v24[1];
        if (v21 == 1)
          goto LABEL_32;
        v25 = *(float *)(v20 + 8) - *(float *)v20;
        v26 = *(float *)(v20 + 12) - *(float *)(v20 + 4);
        v27 = 1.0 / sqrtf((float)(v25 * v25) + (float)(v26 * v26));
        v28 = v27 * v25;
        *(float *)v19 = v28;
        *(float *)(v19 + 4) = v27 * v26;
        *(float *)(v19 + 8) = -(float)(v27 * v26);
        *(float *)(v19 + 12) = v28;
        if ((uint64_t)(v21 - 2) < 0)
        {
          v38 = v14 + 96 * v15;
          v39 = *(float *)(v38 + 88);
          v35 = v38 + 88;
          v37 = v39;
          *(_BYTE *)(v35 + 5) = 0;
        }
        else
        {
          v29 = (float *)(v20 + 8 * (v21 - 2));
          v30 = *v24 - *v29;
          v31 = v24[1] - v29[1];
          v32 = 1.0 / sqrtf((float)(v30 * v30) + (float)(v31 * v31));
          v33 = v32 * v30;
          v34 = v14 + 96 * v15;
          v36 = *(float *)(v34 + 88);
          v35 = v34 + 88;
          v37 = v36;
          *(float *)(v35 - 48) = v33;
          *(float *)(v35 - 44) = v32 * v31;
          *(float *)(v35 - 40) = -(float)(v32 * v31);
          *(float *)(v35 - 36) = v33;
          *(_BYTE *)(v35 + 5) = 1;
          if (v21 < 9)
            goto LABEL_25;
        }
        if (v35 < v20 + 8 * v21 && v20 < v14 + 96 * v15 + 92)
        {
LABEL_25:
          v40 = 1;
          goto LABEL_30;
        }
        v41 = v23 & 0xFFFFFFFFFFFFFFF8;
        v42 = 0uLL;
        v43 = (float32x4_t)LODWORD(v37);
        v44 = v20 + 40;
        v45 = v23 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v46 = vsubq_f32(*(float32x4_t *)(v44 - 32), *(float32x4_t *)(v44 - 40));
          v47 = vsubq_f32(*(float32x4_t *)(v44 - 16), *(float32x4_t *)(v44 - 24));
          v48 = vsubq_f32(*(float32x4_t *)v44, *(float32x4_t *)(v44 - 8));
          v49 = vsubq_f32(*(float32x4_t *)(v44 + 16), *(float32x4_t *)(v44 + 8));
          v50 = (int32x4_t)vmulq_f32(v47, v47);
          v51 = (int32x4_t)vmulq_f32(v46, v46);
          v52 = (int32x4_t)vmulq_f32(v49, v49);
          v53 = (int32x4_t)vmulq_f32(v48, v48);
          v43 = vaddq_f32(vsqrtq_f32(vaddq_f32((float32x4_t)vuzp2q_s32(v51, v50), (float32x4_t)vuzp1q_s32(v51, v50))), v43);
          v42 = vaddq_f32(vsqrtq_f32(vaddq_f32((float32x4_t)vuzp2q_s32(v53, v52), (float32x4_t)vuzp1q_s32(v53, v52))), v42);
          v44 += 64;
          v45 -= 8;
        }
        while (v45);
        v54 = vaddq_f32(v42, v43);
        v37 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v54, v54));
        *(float *)v35 = v37;
        if (v23 == v41)
          goto LABEL_32;
        v40 = v41 | 1;
LABEL_30:
        v55 = v21 - v40;
        v56 = (float32x2_t *)(v20 + 8 * v40);
        do
        {
          v57 = vsub_f32(*v56, v56[-1]);
          v37 = sqrtf(vaddv_f32(vmul_f32(v57, v57))) + v37;
          *(float *)v35 = v37;
          ++v56;
          --v55;
        }
        while (v55);
LABEL_32:
        v16 = *v10 + *(float *)(v14 + 96 * v15 + 88);
        *v10 = v16;
        if (v12)
        {
          v58 = (float *)(v12 + 8 * *(unsigned int *)(*a1 + 16) + 8 * v15);
          v17 = (float)(v58[1] + v17) - *v58;
        }
        ++v15;
        v14 = a1[7];
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a1[8] - v14) >> 5);
        if (v15 >= v18)
          goto LABEL_36;
      }
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 5);
    v17 = 0.0;
LABEL_36:
    if (v12 && v18)
    {
      v59 = *v10 + (float)(*v10 * (float)(1.0 - v17));
      v60 = *(unsigned int *)(*a1 + 16);
      if (v18 == 1)
      {
        v61 = 0;
LABEL_43:
        v67 = v18 - v61;
        v68 = (float *)(v14 + 96 * v61 + 84);
        v69 = (float *)(v12 + 8 * v61 + 8 * v60);
        do
        {
          v70 = *v69;
          v69 += 2;
          *v68 = v70 * v59;
          v68 += 24;
          --v67;
        }
        while (v67);
        return a1;
      }
      v61 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v62 = (float *)(v14 + 180);
      v63 = (float *)(v12 + 8 * v60 + 8);
      v64 = v18 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v65 = *(v63 - 2);
        v66 = *v63;
        v63 += 4;
        *(v62 - 24) = v65 * v59;
        *v62 = v66 * v59;
        v62 += 48;
        v64 -= 2;
      }
      while (v64);
      if (v18 != v61)
        goto LABEL_43;
    }
  }
  return a1;
}

void sub_19FCAA89C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void **v26;

  v26 = v2;
  v5 = *(_QWORD **)(v1 + 192);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    operator delete(v7);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 136));
  v8 = *(void **)(v1 + 104);
  if (v8)
  {
    *(_QWORD *)(v1 + 112) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(v1 + 80);
  if (v9)
  {
    v10 = *(_QWORD *)(v1 + 88);
    v11 = *(void **)(v1 + 80);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(v1 + 88);
      do
      {
        v14 = *(_QWORD **)(v12 - 8);
        v12 -= 8;
        v13 = v14;
        if (v14)
        {
          if ((*v13)-- == 1)
          {
            operator delete(v13);
            *(_QWORD *)(v10 - 8) = 0;
          }
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(v1 + 80);
    }
    *(_QWORD *)(v1 + 88) = v9;
    operator delete(v11);
  }
  v16 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v1 + 64) = v16;
    operator delete(v16);
  }
  v17 = *(std::__shared_weak_count **)(v1 + 48);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)(v1 + 32);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)(v1 + 16);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

void md::TransitLink::~TransitLink(md::TransitLink *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 24);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 24);
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v7)
    operator delete(v7);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 17));
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 10);
  if (v9)
  {
    v10 = *((_QWORD *)this + 11);
    v11 = (void *)*((_QWORD *)this + 10);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 11);
      do
      {
        v14 = *(_QWORD **)(v12 - 8);
        v12 -= 8;
        v13 = v14;
        if (v14)
        {
          if ((*v13)-- == 1)
          {
            operator delete(v13);
            *(_QWORD *)(v10 - 8) = 0;
          }
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v9;
    operator delete(v11);
  }
  v16 = (void *)*((_QWORD *)this + 7);
  if (v16)
  {
    *((_QWORD *)this + 8) = v16;
    operator delete(v16);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v17)
    goto LABEL_27;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v20)
      goto LABEL_35;
  }
  else
  {
LABEL_27:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v20)
      goto LABEL_35;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_35:
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(_DWORD *)(*v8 + 40) < *(_DWORD *)(*v9 + 40))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(_DWORD *)(v81 + 40);
        v83 = *(_DWORD *)(*v9 + 40);
        v84 = *v8;
        v85 = *(_DWORD *)(*v8 + 40);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(_DWORD *)(v135 + 40) < *(_DWORD *)(*v9 + 40))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(_DWORD *)(*v8 + 40) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(_DWORD *)(v87 + 40);
        v92 = *(_DWORD *)(*v9 + 40);
        v93 = *(_DWORD *)(v89 + 40);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(_DWORD *)(*v8 + 40) < *(_DWORD *)(v87 + 40))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(_DWORD *)(v140 + 40);
                if (v142 < *(_DWORD *)(v141 + 40))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(_DWORD *)(*v9 + 40))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned int *)(v112 + 40);
                    if (result < *(_DWORD *)(v111[1] + 40))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(_DWORD *)(*v113 + 40);
                  if (*(_DWORD *)(v112 + 40) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11 && *(_DWORD *)(v112 + 40) < *(_DWORD *)(v111[1] + 40))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(_DWORD *)(v112 + 40) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned int *)(v124 + 40);
                    if (result < *(_DWORD *)(v123[1] + 40))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(_DWORD *)(*v123 + 40);
                    if (*(_DWORD *)(*v130 + 40) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(_DWORD *)(*v130 + 40) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(_DWORD *)(*v8 + 40);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(_DWORD *)(*v13 + 40);
            v19 = *(_DWORD *)(*v9 + 40);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(_DWORD *)(*v13 + 40) < *(_DWORD *)(*v9 + 40))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(_DWORD *)(*v8 + 40) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(_DWORD *)(v29 + 40);
            v32 = *(_DWORD *)(v30 + 40);
            v33 = *(a2 - 2);
            v34 = *(_DWORD *)(v33 + 40);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(_DWORD *)(*v27 + 40) < *(_DWORD *)(v35 + 40))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(_DWORD *)(v36 + 40) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(_DWORD *)(v40 + 40);
            v43 = *(_DWORD *)(v41 + 40);
            v44 = *(a2 - 3);
            v45 = *(_DWORD *)(v44 + 40);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(_DWORD *)(*v38 + 40) < *(_DWORD *)(v46 + 40))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(_DWORD *)(v47 + 40) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(_DWORD *)(*v13 + 40);
            v51 = *(_DWORD *)(*v27 + 40);
            v52 = *v38;
            v53 = *(_DWORD *)(*v38 + 40);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(_DWORD *)(*v9 + 40);
          v23 = *(_DWORD *)(*v13 + 40);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(_DWORD *)(*v9 + 40) < *(_DWORD *)(*v13 + 40))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(_DWORD *)(*v8 + 40) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(_DWORD *)(v55 + 40);
            if (*(_DWORD *)(*(v9 - 1) + 40) < v56)
              goto LABEL_54;
            if (v56 >= *(_DWORD *)(*v8 + 40))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(_DWORD *)(*v9 + 40));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(_DWORD *)(v70 + 40));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(_DWORD *)(v73 + 40));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(_DWORD *)(v76 + 40));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(_DWORD *)(v77 + 40));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(_DWORD *)(v55 + 40);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(_DWORD *)(v60 + 40) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(_DWORD *)(v63 + 40) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(_DWORD *)(v62 + 40) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(_DWORD *)(v67 + 40) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(_DWORD *)(v68 + 40) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(_DWORD *)(v102 + 40);
              if (v104 < *(_DWORD *)(v103 + 40))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(_DWORD *)(v103 + 40));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(_DWORD *)(v137 + 40);
            if (v139 < *(_DWORD *)(v138 + 40))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(_DWORD *)(v138 + 40));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

void std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2 != (void *)a1[8])
      free(v2);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(*a1);
    std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(a1[1]);
    v2 = (void *)a1[7];
    if (v2 != (void *)a1[9])
      free(v2);
    operator delete(a1);
  }
}

void md::TransitLink::populateMergedLinesAtIndex(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;

  v4 = a2;
  v6 = a1[13];
  if (a2 >= (a1[14] - v6) >> 3)
  {
    v7 = 0;
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(v6 + 8 * a2);
  if (!v7)
    goto LABEL_23;
  v9 = *(char **)a3;
  v8 = *(char **)(a3 + 8);
  v10 = (uint64_t)&v8[-*(_QWORD *)a3] >> 3;
  v11 = *(_QWORD *)(a3 + 24);
  if (v11 < v10 + 1)
  {
    v12 = *(char **)(a3 + 16);
    v13 = (1 << -(char)__clz(v11 + 1));
    if (v11 >= 0xFFFFFFFFFFFFFFFELL)
      v13 = 1;
    if (v13 <= v10 + 1)
      v14 = v10 + 1;
    else
      v14 = v13;
    v15 = (char *)malloc_type_malloc(8 * v14, 0x2004093837F09uLL);
    v16 = v15;
    v17 = *(uint64_t **)a3;
    v18 = *(char **)(a3 + 8);
    if (*(char **)a3 == v18)
      goto LABEL_19;
    v19 = v18 - (char *)v17 - 8;
    if (v19 < 0x18)
    {
      v20 = v15;
    }
    else
    {
      v20 = v15;
      if ((unint64_t)(v15 - (char *)v17) >= 0x20)
      {
        v21 = (v19 >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v20 = &v15[v22];
        v23 = (__int128 *)(v17 + 2);
        v24 = v15 + 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *v24 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_19;
        v17 = (uint64_t *)((char *)v17 + v22);
      }
    }
    do
    {
      v27 = *v17++;
      *(_QWORD *)v20 = v27;
      v20 += 8;
    }
    while (v17 != (uint64_t *)v18);
LABEL_19:
    if (v9 != v12)
      free(*(void **)a3);
    v8 = &v16[8 * v10];
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 24) = v14;
  }
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(a3 + 8) += 8;
LABEL_23:
  v28 = (_QWORD *)a1[10];
  v29 = (_QWORD *)a1[11];
  if (v28 != v29)
  {
    v51 = v4;
    while (1)
    {
      if (*v28)
        v31 = *v28 + 8;
      else
        v31 = 0;
      if (v31 == v7 || *(_DWORD *)(v31 + 40) != v4)
        goto LABEL_27;
      v32 = *(char **)a3;
      v30 = *(uint64_t **)(a3 + 8);
      v33 = ((uint64_t)v30 - *(_QWORD *)a3) >> 3;
      v34 = *(_QWORD *)(a3 + 24);
      if (v34 < v33 + 1)
        break;
LABEL_26:
      *v30 = v31;
      *(_QWORD *)(a3 + 8) += 8;
LABEL_27:
      if (++v28 == v29)
        return;
    }
    v35 = *(char **)(a3 + 16);
    v36 = (1 << -(char)__clz(v34 + 1));
    if (v34 >= 0xFFFFFFFFFFFFFFFELL)
      v36 = 1;
    if (v36 <= v33 + 1)
      v37 = v33 + 1;
    else
      v37 = v36;
    v38 = (char *)malloc_type_malloc(8 * v37, 0x2004093837F09uLL);
    v39 = v38;
    v40 = *(uint64_t **)a3;
    v41 = *(char **)(a3 + 8);
    if (*(char **)a3 != v41)
    {
      v42 = v41 - (char *)v40 - 8;
      if (v42 < 0x18)
      {
        v43 = v38;
        do
        {
LABEL_47:
          v50 = *v40++;
          *(_QWORD *)v43 = v50;
          v43 += 8;
        }
        while (v40 != (uint64_t *)v41);
        goto LABEL_48;
      }
      v43 = v38;
      if ((unint64_t)(v38 - (char *)v40) < 0x20)
        goto LABEL_47;
      v44 = (v42 >> 3) + 1;
      v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      v43 = &v38[v45];
      v46 = (__int128 *)(v40 + 2);
      v47 = v38 + 16;
      v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *v46;
        *(v47 - 1) = *(v46 - 1);
        *v47 = v49;
        v46 += 2;
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v40 = (uint64_t *)((char *)v40 + v45);
        goto LABEL_47;
      }
    }
LABEL_48:
    if (v32 != v35)
      free(*(void **)a3);
    v30 = (uint64_t *)&v39[8 * v33];
    *(_QWORD *)a3 = v39;
    *(_QWORD *)(a3 + 8) = v30;
    *(_QWORD *)(a3 + 24) = v37;
    v4 = v51;
    goto LABEL_26;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_DWORD *)(v3 + 40) < *(_DWORD *)(*a1 + 40))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 40);
      v17 = *(_DWORD *)(*a1 + 40);
      v18 = *(a2 - 1);
      v19 = *(_DWORD *)(v18 + 40);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(v40 + 40) < *(_DWORD *)(*a1 + 40))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 40) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_DWORD *)(v21 + 40);
      v26 = *(_DWORD *)(*a1 + 40);
      v27 = *(_DWORD *)(v23 + 40);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 40) < *(_DWORD *)(v21 + 40))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_DWORD *)(v43 + 40);
        if (v45 < *(_DWORD *)(v44 + 40))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 40))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_DWORD *)(v7 + 40);
      v10 = *(_DWORD *)(*a1 + 40);
      v11 = *(_DWORD *)(v5 + 40);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(_DWORD *)(*v31 + 40);
        if (v37 < *(_DWORD *)(v36 + 40))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 40));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

uint64_t md::TransitLink::isSuperset(md::TransitLink *this, const md::TransitLink *a2, const md::TransitLink *a3)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (*((_QWORD *)this + 14) - *((_QWORD *)this + 13) < (unint64_t)(a3 - a2))
    return 0;
  if (a2 != a3)
  {
    v4 = *((_QWORD *)this + 23);
    if (v4)
    {
      v5 = v4 - 1;
      v6 = *((_QWORD *)this + 22);
      result = 1;
      if ((v4 & (v4 - 1)) != 0)
      {
LABEL_17:
        v11 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a2 + 16) + 40);
        v12 = v11;
        if (v4 <= v11)
          v12 = v11 % v4;
        v13 = *(_QWORD **)(v6 + 8 * v12);
        if (v13)
        {
          while (1)
          {
            v13 = (_QWORD *)*v13;
            if (!v13)
              break;
            v14 = v13[1];
            if (v14 == v11)
            {
              if (v13[2] == v11)
              {
                v15 = v13[3];
                if (!v15 || *(_BYTE *)(v15 + 55))
                  return 0;
                a2 = (const md::TransitLink *)((char *)a2 + 8);
                if (a2 != a3)
                  goto LABEL_17;
                return result;
              }
            }
            else
            {
              if (v14 >= v4)
                v14 %= v4;
              if (v14 != v12)
                return 0;
            }
          }
        }
      }
      else
      {
LABEL_6:
        v7 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a2 + 16) + 40);
        v8 = *(_QWORD **)(v6 + 8 * (v5 & v7));
        if (v8)
        {
          while (1)
          {
            v8 = (_QWORD *)*v8;
            if (!v8)
              break;
            v9 = v8[1];
            if (v9 == v7)
            {
              if (v8[2] == v7)
              {
                v10 = v8[3];
                if (!v10 || *(_BYTE *)(v10 + 55))
                  return 0;
                a2 = (const md::TransitLink *)((char *)a2 + 8);
                if (a2 != a3)
                  goto LABEL_6;
                return result;
              }
            }
            else if ((v9 & v5) != (v5 & v7))
            {
              return 0;
            }
          }
        }
      }
    }
    return 0;
  }
  return 1;
}

float md::TransitLink::populateEndPoints(uint64_t a1, int a2, unint64_t *a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  float result;
  unint64_t v11;
  unint64_t v12;
  _DWORD *i;
  int v14;
  unint64_t v15;

  v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    v6 = v3 - 1;
    if (a2)
      v7 = 0;
    else
      v7 = v6;
    v15 = 0;
    v8 = geo::codec::transitLinkPoints(a1, v7, &v15);
    if (v15 >= 5)
      v9 = 5;
    else
      v9 = v15;
    if (a2)
    {
      std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t)a3, v8, (char *)(v8 + 8 * v9), v9);
    }
    else
    {
      std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t)a3, v8 + 8 * v15 - 8 * v9, (char *)(v8 + 8 * v15), (uint64_t)(8 * v9) >> 3);
      v11 = *a3;
      v12 = a3[1];
      if (*a3 != v12)
      {
        for (i = (_DWORD *)(v12 - 8); v11 < (unint64_t)i; v11 += 8)
        {
          result = *(float *)v11;
          v14 = *(_DWORD *)(v11 + 4);
          *(_DWORD *)v11 = *i;
          *(_DWORD *)(v11 + 4) = i[1];
          *(float *)i = result;
          i[1] = v14;
          i -= 2;
        }
      }
    }
  }
  return result;
}

_DWORD *std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v6 = (char *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_DWORD **)a1;
  if (__sz <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = *(_DWORD **)(a1 + 8);
    v17 = (_QWORD *)(a1 + 8);
    v14 = v18;
    v19 = (char *)v18 - (char *)result;
    v20 = ((char *)v18 - (char *)result) >> 3;
    if (v20 < __sz)
    {
      v21 = (uint64_t *)(a2 + 8 * v20);
      if (v14 == result)
        goto LABEL_30;
      if ((unint64_t)(v19 - 8) >= 0x58)
      {
        v25 = (unint64_t)result < a2 + (v19 & 0xFFFFFFFFFFFFFFF8)
           && (unint64_t)result + (v19 & 0xFFFFFFFFFFFFFFF8) > a2;
        v22 = (uint64_t *)a2;
        if (!v25)
        {
          v26 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFF8);
          v28 = (__int128 *)(a2 + 32);
          v29 = result + 8;
          v30 = v26 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v32 = *(v28 - 2);
            v31 = *(v28 - 1);
            v34 = *v28;
            v33 = v28[1];
            v28 += 4;
            *(v29 - 2) = v32;
            *(v29 - 1) = v31;
            *v29 = v34;
            v29[1] = v33;
            v29 += 4;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_30:
            if (v21 == (uint64_t *)a3)
            {
              v16 = 0;
              goto LABEL_50;
            }
            v35 = v19 + a2;
            v36 = (unint64_t)&a3[-v35 - 8];
            if (v36 < 0x38)
            {
              v38 = (char *)v14;
            }
            else
            {
              v37 = (unint64_t)v14 - v35;
              v38 = (char *)v14;
              if (v37 >= 0x20)
              {
                v39 = (v36 >> 3) + 1;
                v40 = 2 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
                v21 = (uint64_t *)((char *)v21 + v40 * 4);
                v41 = v14 + 4;
                v42 = (__int128 *)(a2 + 8 * v20 + 16);
                v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v44 = *v42;
                  *(v41 - 1) = *(v42 - 1);
                  *v41 = v44;
                  v41 += 2;
                  v42 += 2;
                  v43 -= 4;
                }
                while (v43);
                v38 = (char *)&v14[v40];
                if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_43;
              }
            }
            do
            {
              v46 = *v21++;
              *(_QWORD *)v38 = v46;
              v38 += 8;
            }
            while (v21 != (uint64_t *)a3);
LABEL_43:
            v16 = v38 - (char *)v14;
            goto LABEL_50;
          }
          v22 = (uint64_t *)(a2 + v27);
          result = (_DWORD *)((char *)result + v27);
        }
      }
      else
      {
        v22 = (uint64_t *)a2;
      }
      do
      {
        *result = *(_DWORD *)v22;
        result[1] = *((_DWORD *)v22++ + 1);
        result += 2;
      }
      while (v22 != v21);
      goto LABEL_30;
    }
    if ((char *)a2 == a3)
    {
      v24 = (char *)result;
    }
    else
    {
      v23 = (unint64_t)&a3[-a2 - 8];
      if (v23 >= 0x58)
      {
        v45 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((unint64_t)result >= a2 + v45 || (unint64_t)result + v45 <= a2)
        {
          v47 = (v23 >> 3) + 1;
          v48 = 2 * (v47 & 0x3FFFFFFFFFFFFFF8);
          v24 = (char *)&result[v48];
          v49 = (__int128 *)(a2 + 32);
          v50 = result + 8;
          v51 = v47 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v53 = *(v49 - 2);
            v52 = *(v49 - 1);
            v55 = *v49;
            v54 = v49[1];
            v49 += 4;
            *(v50 - 2) = v53;
            *(v50 - 1) = v52;
            *v50 = v55;
            v50[1] = v54;
            v50 += 4;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFF8))
            goto LABEL_49;
          v6 = (char *)(a2 + v48 * 4);
        }
        else
        {
          v24 = (char *)result;
        }
      }
      else
      {
        v24 = (char *)result;
      }
      do
      {
        *(_DWORD *)v24 = *(_DWORD *)v6;
        *((_DWORD *)v24 + 1) = *((_DWORD *)v6 + 1);
        v24 += 8;
        v6 += 8;
      }
      while (v6 != a3);
    }
LABEL_49:
    v16 = v24 - (char *)result;
    v14 = result;
    goto LABEL_50;
  }
  if (result)
  {
    *(_QWORD *)(a1 + 8) = result;
    operator delete(result);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (__sz >> 61)
    goto LABEL_51;
  v10 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v10 = __sz;
  v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v10;
  if (v12 >> 61)
LABEL_51:
    abort();
  v13 = 2 * v12;
  result = operator new(8 * v12);
  v14 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v13];
  v15 = (char *)result;
  if (v6 != a3)
  {
    result = memcpy(result, v6, ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    v15 = (char *)v14 + ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  v16 = v15 - (char *)v14;
  v17 = (_QWORD *)(a1 + 8);
LABEL_50:
  *v17 = (char *)v14 + v16;
  return result;
}

id md::TransitLink::Section::debugString(md::TransitLink::Section *this)
{
  void *v2;
  double v3;
  double v4;
  float v5;
  float v6;
  double v7;
  double v8;
  float v9;
  float v10;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendFormat:", CFSTR("validPoint=%i validTangent=%i offset=%.2f offsetOutside = %.2f length=%.2f\n"), *((unsigned __int8 *)this + 92), *((unsigned __int8 *)this + 93), *((float *)this + 20), *((float *)this + 21), *((float *)this + 22));
  v3 = *((float *)this + 4);
  v4 = *((float *)this + 5);
  v5 = atan2f(*((float *)this + 1), *(float *)this) * 57.2957795;
  v6 = atan2f(*((float *)this + 3), *((float *)this + 2)) * 57.2957795;
  objc_msgSend(v2, "appendFormat:", CFSTR("    pt=(%f,%f) tngt,nrml=(%.2f,%.2f) jctn=%p type=%i sr=%i\n"), *(_QWORD *)&v3, *(_QWORD *)&v4, v5, v6, *((_QWORD *)this + 3), *((unsigned __int8 *)this + 32), *((unsigned __int8 *)this + 34));
  v7 = *((float *)this + 14);
  v8 = *((float *)this + 15);
  v9 = atan2f(*((float *)this + 11), *((float *)this + 10)) * 57.2957795;
  v10 = atan2f(*((float *)this + 13), *((float *)this + 12)) * 57.2957795;
  objc_msgSend(v2, "appendFormat:", CFSTR("    pt=(%f,%f) tngt,nrml=(%.2f,%.2f) jctn=%p type=%i sr=%i\n"), *(_QWORD *)&v7, *(_QWORD *)&v8, v9, v10, *((_QWORD *)this + 8), *((unsigned __int8 *)this + 72), *((unsigned __int8 *)this + 74));
  return v2;
}

void sub_19FCAC254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id md::TransitLink::debugStringForJunction(md::TransitLink *this, int8x8_t *a2, char a3, int a4)
{
  void *v8;
  void *v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  md::TransitLine **v14;
  uint64_t v15;
  float *v16;
  float v17;
  void *v18;
  md::TransitLine **v19;
  uint64_t v20;
  float *v21;
  float v22;
  void *v23;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a4)
    v10 = 200;
  else
    v10 = 10;
  objc_msgSend(v8, "appendFormat:", CFSTR("MergedLines:\n"));
  v11 = (unint64_t *)*((_QWORD *)this + 13);
  v12 = (unint64_t *)*((_QWORD *)this + 14);
  if (v11 != v12)
  {
    v13 = 0;
    if ((a3 & 1) != 0)
    {
      while (v10 != (_DWORD)v13)
      {
        v14 = (md::TransitLine **)*v11;
        v15 = *(unsigned int *)(*v11 + 48);
        v16 = (float *)md::TransitJunction::normalForLineSegment(a2, *v11);
        if (v16)
          v17 = atan2f(v16[1], *v16) * 57.2957795;
        else
          v17 = 999.0;
        md::TransitLine::debugLineIDString(*v14);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "appendFormat:", CFSTR(" %i:%@, slot:%d normal:%.02f\n"), v13, v18, v15, v17);

        v13 = (v13 + 1);
        if (++v11 == v12)
          return v9;
      }
    }
    else
    {
      while (v10 != (_DWORD)v13)
      {
        v19 = (md::TransitLine **)*v11;
        v20 = *(unsigned int *)(*v11 + 44);
        v21 = (float *)md::TransitJunction::normalForLineSegment(a2, *v11);
        if (v21)
          v22 = atan2f(v21[1], *v21) * 57.2957795;
        else
          v22 = 999.0;
        md::TransitLine::debugLineIDString(*v19);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "appendFormat:", CFSTR(" %i:%@, slot:%d normal:%.02f\n"), v13, v23, v20, v22);

        v13 = (v13 + 1);
        if (++v11 == v12)
          return v9;
      }
    }
    objc_msgSend(v9, "appendString:", CFSTR(" Lines Truncated...\n"));
  }
  return v9;
}

void sub_19FCAC448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::TransitLink::debugDrawWithSelectedJunction(md::TransitLink *this, const md::TransitJunction *a2, int a3, float32x2_t *a4, const md::HighlightHelper *a5)
{
  uint64_t result;
  unint64_t v10;
  char v11;
  char v12;
  __int32 *v13;
  char v14;
  uint64_t v15;
  __int32 *v16;
  __int32 *v17;
  uint64_t v18;
  float *v19;
  float32x2_t v20;
  char v21;
  __int32 *v22;
  __int32 *v23;
  uint64_t v24;
  unint64_t v25;
  void *__p[3];

  result = *(_QWORD *)this;
  if (*(_DWORD *)(result + 20))
  {
    v10 = 0;
    if (a3)
      v11 = 2;
    else
      v11 = 4;
    v21 = v11;
    if (a3)
      v12 = 1;
    else
      v12 = 3;
    do
    {
      v25 = 0;
      v15 = geo::codec::transitLinkPoints(result, v10, &v25);
      if (v25 < 2)
        goto LABEL_11;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      memset(__p, 0, sizeof(__p));
      md::HighlightHelper::tileToMercatorPoints(*(_QWORD *)a5, v15, v25, (uint64_t)__p);
      md::HighlightHelper::mercatorToScreenPoints((uint64_t)a5, (double **)__p, (uint64_t)&v22);
      if (__p[0])
        operator delete(__p[0]);
      v16 = v22;
      v17 = v23;
      if (v22)
      {
        if (v23 != v22)
        {
          a4[1].i32[0] = *v22;
          a4[1].i32[1] = v16[1];
          if ((unint64_t)((char *)v17 - (char *)v16) >= 9)
          {
            v18 = (((char *)v17 - (char *)v16) >> 3) - 1;
            v19 = (float *)(v16 + 2);
            do
            {
              ggl::DebugConsole::drawLine((uint64_t)a4, v19);
              v19 += 2;
              --v18;
            }
            while (v18);
          }
        }
      }
      v20 = *(float32x2_t *)v16;
      __p[0] = *((void **)v17 - 1);
      a4[1] = v20;
      ggl::DebugConsole::drawLine((uint64_t)a4, (float *)__p);
      if (*(const md::TransitJunction **)(*((_QWORD *)this + 8) - 32) == a2)
      {
        v13 = v16 + 1;
        a4[1].i32[0] = *v16;
        v14 = v12;
      }
      else
      {
        if (*(const md::TransitJunction **)(*((_QWORD *)this + 7) + 24) != a2)
          goto LABEL_10;
        a4[1].i32[0] = *(v17 - 2);
        v13 = v17 - 1;
        v14 = v21;
      }
      a4[1].i32[1] = *v13;
      ggl::DebugConsole::drawSymbol(a4, v14);
LABEL_10:
      operator delete(v16);
LABEL_11:
      ++v10;
      result = *(_QWORD *)this;
    }
    while (v10 < *(unsigned int *)(*(_QWORD *)this + 20));
  }
  return result;
}

void sub_19FCAC628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v15;

  if (__p)
  {
    operator delete(__p);
    v15 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void md::BuildingLayerDataSource::~BuildingLayerDataSource(md::BuildingLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429E200;
  *((_QWORD *)this + 97) = &off_1E42B4D50;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429E200;
  *((_QWORD *)this + 97) = &off_1E42B4D50;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::BuildingLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  id v25;
  void *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  id v44;
  void *v45;
  uint64_t *v46;
  std::__shared_weak_count *height;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  id v66;
  void *v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  geo::codec::VectorTile **v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unint64_t v99;
  void **v100;
  int64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  void **v108;
  void **v109;
  char *v110;
  char *v111;
  char *v112;
  void *v113;
  char *v114;
  char *v115;
  void (**v116)(char *);
  double v117;
  unint64_t v118;
  float v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  float *v124;
  unsigned __int8 v125;
  _QWORD *v126;
  char v127;
  unint64_t v128;
  char *v129;
  _BYTE *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  double v143;
  uint64_t *v144;
  uint64_t v145;
  void **v146;
  void ***v147;
  void **v148;
  id v149;
  int v150;
  VKBuildingGroup *v151;
  uint64_t *v152;
  uint64_t v153;
  BOOL v154;
  _DWORD *v155;
  unint64_t v156;
  float *v157;
  float v158;
  __int16 v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  uint64_t v185;
  gss::Allocator *v186;
  uint64_t v187;
  VKBuildingGroup *v188;
  double v189;
  double v190;
  VKBuildingGroup *v191;
  void **v192;
  char *v193;
  unint64_t v194;
  char **v195;
  unint64_t v196;
  void **v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  void **v205;
  void **v206;
  void **v207;
  void *v208;
  void *v209;
  void **v210;
  void **v211;
  void **v212;
  void (**v213)(void **);
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  void *v225;
  void *v226;
  int v227;
  unint64_t v228;
  float32x4_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  _QWORD *v238;
  unint64_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  const float *v243;
  unint64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  const float *v249;
  unint64_t v250;
  float *v251;
  float v252;
  float v253;
  uint64_t v254;
  float32x4_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t *v259;
  geo *v260;
  const unsigned __int8 *v261;
  void *v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  void *v270;
  uint64_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  char *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  const float *v283;
  unint64_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  const float *v289;
  unint64_t v290;
  float *v291;
  float32x4_t v292;
  float v293;
  std::__shared_weak_count *v294;
  _QWORD *v295;
  CGContext *v296;
  int8x16_t v297;
  float32x4_t v298;
  float32x4_t v299;
  int8x16_t v300;
  float32x4_t v301;
  float v302;
  unint64_t v303;
  unint64_t i;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  float v308;
  float *v309;
  float *v311;
  float *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  geo **v318;
  geo *v319;
  geo *v320;
  const unsigned __int8 *v321;
  void *v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  void *v330;
  uint64_t j;
  char *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  float *v337;
  void *v338;
  void *v339;
  char *v340;
  unint64_t *v341;
  __int128 v342;
  uint64_t v343;
  unint64_t v344;
  int shared_owners_high;
  int shared_owners;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  int8x16_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  geo *v361;
  geo *v362;
  uint64_t v363;
  gss::Allocator *v364;
  int8x16_t v365;
  int8x16_t v366;
  uint64_t v367;
  void *v368;
  uint64_t *v369;
  vImagePixelCount v370;
  void *v371;
  unint64_t *v372;
  unint64_t v373;
  _QWORD *v374;
  unsigned __int8 v375;
  gss::Allocator *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  int8x16_t *v387;
  vImagePixelCount v388;
  unint64_t *v389;
  unint64_t v390;
  int8x16_t *v391;
  int8x16_t *v392;
  int64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  int8x16_t *v397;
  unint64_t *v398;
  unint64_t v399;
  int8x16_t *v400;
  int8x16_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  void *v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  int8x16_t *v413;
  int8x16_t *v414;
  uint64_t *v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  int8x16_t *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  int8x16_t *v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  int8x16_t v430;
  int8x16_t *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  uint64_t v447;
  uint64_t v448;
  int v449;
  int8x16_t v450;
  unint64_t v451;
  unsigned int v452;
  unint64_t k;
  float32x2_t *v454;
  float32x4_t v455;
  int8x16_t v456;
  float32x4_t v457;
  char *v458;
  int8x16_t v459;
  float32x4_t v460;
  float32x4_t v461;
  vImagePixelCount v462;
  unint64_t *v463;
  unint64_t v464;
  geo **v465;
  geo **v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  char *v470;
  char *v471;
  char *v472;
  geo **v473;
  uint64_t v474;
  char *v475;
  geo **v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  char *v483;
  uint64_t v484;
  void *v485;
  unint64_t v486;
  unint64_t v487;
  char *v488;
  char *v489;
  char *v490;
  __int128 v491;
  geo *v492;
  const unsigned __int8 *v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  unsigned __int8 *v497;
  int v498;
  __int128 v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t v506;
  geo **v507;
  int32x4_t v511;
  geo *v512;
  uint64_t v513;
  void *v514;
  id v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  __int128 v532;
  unint64_t v533;
  float32x4_t v534;
  float32x4_t v535;
  unsigned int v536;
  uint64_t v537;
  float v538;
  int v539;
  int v540;
  float v541;
  int v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  __int128 v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  unsigned int *v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  size_t v556;
  uint64_t v557;
  size_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  uint64_t v562;
  vImagePixelCount v563;
  __int128 v564;
  int16x8_t *v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  uint64_t v569;
  __int16 *v570;
  __int16 *v571;
  __int16 v572;
  uint64_t v573;
  unsigned int *v574;
  int v575;
  int64x2_t *v576;
  void *v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  __int128 v581;
  unint64_t *v582;
  unint64_t v583;
  size_t v584;
  size_t v585;
  _BYTE *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t *v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t *v598;
  unint64_t v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  int16x8_t *v603;
  int16x8_t *v604;
  unint64_t v605;
  int16x8_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  _QWORD *v610;
  _QWORD *v611;
  _QWORD *v612;
  uint64_t v613;
  unint64_t *v614;
  unint64_t v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  char *v620;
  char *v621;
  uint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  char *v625;
  _QWORD *v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  __int128 v630;
  int64x2_t v631;
  uint64_t v632;
  char *v633;
  char *m;
  void *v635;
  char *v636;
  char *v637;
  char *v638;
  unint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  unint64_t v644;
  char *v645;
  char *v646;
  uint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  __int128 v651;
  void *v652;
  unint64_t v653;
  unint64_t *v654;
  _QWORD *v655;
  _QWORD *v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  char *v660;
  char *v661;
  char *v662;
  __int128 v663;
  std::__shared_weak_count *v664;
  unint64_t *v665;
  unint64_t v666;
  vImagePixelCount width;
  size_t rowBytes;
  _QWORD *v669;
  int v670;
  int v671;
  vImagePixelCount v672;
  size_t v673;
  unint64_t *v674;
  unint64_t v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  _QWORD *v681;
  int v682;
  int v683;
  unint64_t v684;
  unint64_t v685;
  void *v686;
  __int128 v687;
  void **v688;
  void (*v689)(uint64_t, uint64_t, double);
  uint64_t *v690;
  uint64_t *v691;
  std::__shared_weak_count *v692;
  unint64_t *v693;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  geo **v698;
  geo **v699;
  void *v700;
  std::__shared_weak_count *v701;
  unint64_t *v702;
  unint64_t v703;
  char *v704;
  char *v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  char *v709;
  uint64_t v710;
  unint64_t *v711;
  unint64_t v712;
  _QWORD *v713;
  _QWORD *v714;
  uint64_t v715;
  _QWORD *v716;
  _QWORD *v717;
  uint64_t v718;
  unint64_t *v719;
  unint64_t v720;
  void *v721;
  uint64_t v722;
  char *v723;
  size_t v724;
  int v725;
  double v726;
  long double v727;
  long double v728;
  long double v729;
  long double v730;
  long double v731;
  long double v732;
  long double v733;
  double v734;
  long double v735;
  long double v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  void **v740;
  void **v741;
  void *v742;
  void **v743;
  char *v744;
  char *v745;
  char *v746;
  void *v747;
  char *v748;
  char *v749;
  void (**v750)(char *);
  char *v751;
  char *v752;
  std::__shared_weak_count *v753;
  unint64_t *v754;
  unint64_t v755;
  std::__shared_weak_count *v756;
  unint64_t *v757;
  unint64_t v758;
  std::__shared_weak_count *v759;
  unint64_t *v760;
  unint64_t v761;
  uint64_t v762;
  float32x4_t v763;
  uint64_t v764;
  float32x4_t v767;
  float32x4_t v768;
  std::__shared_weak_count *v769;
  id v770;
  _QWORD *v771;
  geo **v772;
  unint64_t *v773;
  void *data;
  int16x8_t dataa;
  char *v776;
  float32x4_t v777;
  id v778;
  geo **v780;
  geo::codec::VectorTile **v781;
  unint64_t v782;
  geo::codec::VectorTile **v783;
  void **v784;
  float v785;
  float v786;
  float v787;
  float v788;
  float v789;
  float v790;
  float v791;
  float v792;
  float v793;
  float v794;
  float v795;
  float v796;
  geo *v797[2];
  geo *v798;
  uint64_t v799;
  float32x4_t v800;
  uint64_t v801;
  _QWORD *v802;
  id v803;
  float32x4_t v804;
  __int128 v805;
  unsigned int v806;
  void ***v807;
  float32x4_t v808;
  geo *v809;
  float32x4_t v810;
  int64x2_t *v811;
  int v812;
  float32x4_t v813;
  unint64_t v814;
  geo *v815;
  CGColorRef color[2];
  CGColorRef colora[2];
  uint64_t colorb;
  uint64_t *v819;
  float32x4_t v820;
  uint64_t v821;
  int8x16_t v822;
  uint64_t v823;
  void *v824[2];
  char *v825;
  std::__shared_weak_count *v826;
  vImagePixelCount v827;
  void *v828[2];
  _OWORD *v829;
  uint64_t v830;
  std::__shared_weak_count *v831;
  void *v832[3];
  uint64_t v833;
  std::__shared_weak_count *v834;
  __int128 v835;
  void (*v836)(uint64_t, uint64_t, double);
  __int128 v837;
  void **v838;
  unint64_t v839;
  _BYTE *v840;
  float v841;
  char v842;
  vImage_Buffer dest;
  void (*v844)(uint64_t);
  const char *v845;
  void *v846;
  void *v847;
  char *v848;
  void *v849;
  uint64_t *v850;
  char *v851;
  void *v852;
  geo **v853;
  unint64_t v854;
  void *v855[2];
  void (*v856)(uint64_t, uint64_t, double);
  void *v857[3];
  _QWORD v858[2];
  uint64_t v859[2];
  __int128 v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t *v863;
  std::__shared_weak_count *v864;
  _BYTE src[48];
  void *__p[2];
  int v867;
  char v868;
  uint64_t v869;
  int v870;
  void *v871;
  void *v872;
  uint64_t v873;
  _BYTE components[32];
  _QWORD *v875;
  uint64_t v876;
  float32x4x2_t v877;
  float32x4x2_t v878;
  float32x4x2_t v879;
  float32x4x2_t v880;

  v876 = *MEMORY[0x1E0C80C00];
  v806 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 8);
  v6 = (unsigned __int16 *)*a3;
  v5 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v5)
  {
    while (*v6 != *(unsigned __int16 *)(a1 + 584))
    {
      v6 += 24;
      if (v6 == v5)
        goto LABEL_15;
    }
  }
  if (v6 == v5 || *((_QWORD *)v6 + 4) != 1)
  {
LABEL_15:
    v8 = 0;
    goto LABEL_16;
  }
  v7 = *((_QWORD *)v6 + 3);
  v8 = *(_QWORD *)(v7 + 112);
  v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
  {
LABEL_16:
    v833 = v8;
    v834 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v833 = v8;
  v834 = v9;
  v12 = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_17:
  memset(v832, 0, sizeof(v832));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v832);
  v15 = a1;
  v16 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 768)));
  sp_mut = std::__get_sp_mut((const void *)(v15 + 752));
  std::__sp_mut::lock(sp_mut);
  v18 = *(std::__shared_weak_count **)(v15 + 760);
  v830 = *(_QWORD *)(v15 + 752);
  v831 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v785 = v16;
  std::__sp_mut::unlock(sp_mut);
  v828[0] = 0;
  v828[1] = 0;
  v829 = 0;
  if (*(_BYTE *)(a1 + 800))
  {
    if (v16 <= 1.0)
      v21 = 1.0;
    else
      v21 = 2.0;
    strcpy(&src[23], "\tbtHORIZPINSTRIPE");
    strcpy(src, "btCHECKER");
    src[47] = 16;
    v868 = 15;
    strcpy((char *)__p, "btVERTPINSTRIPE");
    v22 = operator new(0x30uLL);
    v22[1] = 0u;
    v22[2] = 0u;
    *v22 = 0u;
    v828[0] = v22;
    v828[1] = v22 + 3;
    v829 = v22 + 3;
    v23 = (std::__shared_weak_count *)operator new(0x58uLL);
    v23->__shared_owners_ = 0;
    v24 = (unint64_t *)&v23->__shared_owners_;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    v23[1].__shared_weak_owners_ = 0;
    v23[2].__vftable = 0;
    v23[1].__shared_owners_ = 0;
    LODWORD(v23[2].__shared_owners_) = 0;
    *(_OWORD *)((char *)&v23[2].__shared_owners_ + 4) = xmmword_19FFB2E40;
    *(std::__shared_weak_count_vtbl **)((char *)&v23[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000000;
    HIDWORD(v23[3].__shared_owners_) = 0;
    dest.data = &v23[1];
    dest.height = (vImagePixelCount)v23;
    v25 = *(id *)(a1 + 784);
    v26 = v25;
    if (v25)
    {
      objc_msgSend(v25, "textureManager");
      v27 = *(uint64_t **)components;
    }
    else
    {
      v27 = 0;
      *(_QWORD *)components = 0;
      *(_QWORD *)&components[8] = 0;
    }
    v826 = v23 + 1;
    v827 = (vImagePixelCount)v23;
    do
      v28 = __ldxr(v24);
    while (__stxr(v28 + 1, v24));
    md::TextureManager::texture(&v835, v27, (uint64_t)src, (uint64_t *)&v826, 0, v21);
    do
      v29 = __ldaxr(v24);
    while (__stlxr(v29 - 1, v24));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    v30 = *(std::__shared_weak_count **)&components[8];
    if (*(_QWORD *)&components[8])
    {
      v31 = (unint64_t *)(*(_QWORD *)&components[8] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    v33 = v835;
    if ((_QWORD)v835)
    {
      v34 = *(_QWORD *)(v835 + 32);
      v33 = *(_QWORD *)(v835 + 40);
      if (v33)
      {
        v35 = (unint64_t *)(v33 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
    }
    else
    {
      v34 = 0;
    }
    v37 = v828[0];
    v38 = (std::__shared_weak_count *)*((_QWORD *)v828[0] + 1);
    *(_QWORD *)v828[0] = v34;
    v37[1] = v33;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
    if (*((_QWORD *)&v835 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(id *)(a1 + 784);
    v45 = v44;
    if (v44)
    {
      objc_msgSend(v44, "textureManager");
      v46 = *(uint64_t **)components;
    }
    else
    {
      v46 = 0;
      *(_QWORD *)components = 0;
      *(_QWORD *)&components[8] = 0;
    }
    height = (std::__shared_weak_count *)dest.height;
    v826 = (std::__shared_weak_count *)dest.data;
    v827 = dest.height;
    if (dest.height)
    {
      v48 = (unint64_t *)(dest.height + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    md::TextureManager::texture(&v835, v46, (uint64_t)&src[24], (uint64_t *)&v826, 0, v21);
    if (height)
    {
      v50 = (unint64_t *)&height->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
    v52 = *(std::__shared_weak_count **)&components[8];
    if (*(_QWORD *)&components[8])
    {
      v53 = (unint64_t *)(*(_QWORD *)&components[8] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }

    v55 = v835;
    if ((_QWORD)v835)
    {
      v56 = *(_QWORD *)(v835 + 32);
      v55 = *(_QWORD *)(v835 + 40);
      if (v55)
      {
        v57 = (unint64_t *)(v55 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
    }
    else
    {
      v56 = 0;
    }
    v59 = v828[0];
    v60 = (std::__shared_weak_count *)*((_QWORD *)v828[0] + 3);
    *((_QWORD *)v828[0] + 2) = v56;
    v59[3] = v55;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
    if (*((_QWORD *)&v835 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(id *)(a1 + 784);
    v67 = v66;
    if (v66)
    {
      objc_msgSend(v66, "textureManager");
      v68 = *(uint64_t **)components;
    }
    else
    {
      v68 = 0;
      *(_QWORD *)components = 0;
      *(_QWORD *)&components[8] = 0;
    }
    v69 = (std::__shared_weak_count *)dest.height;
    v826 = (std::__shared_weak_count *)dest.data;
    v827 = dest.height;
    if (dest.height)
    {
      v70 = (unint64_t *)(dest.height + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    md::TextureManager::texture(&v835, v68, (uint64_t)__p, (uint64_t *)&v826, 0, v21);
    if (v69)
    {
      v72 = (unint64_t *)&v69->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v74 = *(std::__shared_weak_count **)&components[8];
    if (*(_QWORD *)&components[8])
    {
      v75 = (unint64_t *)(*(_QWORD *)&components[8] + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }

    v77 = v835;
    if ((_QWORD)v835)
    {
      v78 = *(_QWORD *)(v835 + 32);
      v77 = *(_QWORD *)(v835 + 40);
      if (v77)
      {
        v79 = (unint64_t *)(v77 + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
    }
    else
    {
      v78 = 0;
    }
    v81 = v828[0];
    v82 = (std::__shared_weak_count *)*((_QWORD *)v828[0] + 5);
    *((_QWORD *)v828[0] + 4) = v78;
    v81[5] = v77;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
    if (!*((_QWORD *)&v835 + 1))
      goto LABEL_117;
    v86 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      v88 = (std::__shared_weak_count *)dest.height;
      if (!dest.height)
        goto LABEL_121;
    }
    else
    {
LABEL_117:
      v88 = (std::__shared_weak_count *)dest.height;
      if (!dest.height)
        goto LABEL_121;
    }
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
      if ((v868 & 0x80000000) == 0)
      {
LABEL_122:
        if ((src[47] & 0x80000000) == 0)
          goto LABEL_123;
        goto LABEL_151;
      }
LABEL_150:
      operator delete(__p[0]);
      if ((src[47] & 0x80000000) == 0)
      {
LABEL_123:
        if ((src[23] & 0x80000000) == 0)
          goto LABEL_124;
LABEL_152:
        operator delete(*(void **)src);
        goto LABEL_124;
      }
LABEL_151:
      operator delete(*(void **)&src[24]);
      if ((src[23] & 0x80000000) == 0)
        goto LABEL_124;
      goto LABEL_152;
    }
LABEL_121:
    if ((v868 & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_150;
  }
LABEL_124:
  v824[0] = 0;
  v824[1] = 0;
  v825 = 0;
  v764 = v833;
  v91 = (geo::codec::VectorTile **)(v833 + 144);
  v92 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v833 + 144));
  v781 = v91;
  v794 = 0.0;
  v795 = 0.0;
  v792 = 0.0;
  v793 = 0.0;
  v790 = 0.0;
  v791 = 0.0;
  v788 = 0.0;
  v789 = 0.0;
  v786 = 0.0;
  v787 = 0.0;
  v93 = 0.0;
  v94 = 0.0;
  v95 = 0.0;
  v96 = 0.0;
  v97 = 0.0;
  v98 = 0.0;
  if (v92 + geo::codec::VectorTile::totalBuildingFootprintsCount(*v91))
  {
    *(_QWORD *)&src[8] = 0;
    *(_QWORD *)src = &src[8];
    *(_OWORD *)&src[24] = xmmword_19FFB5070;
    v869 = 0;
    *(_QWORD *)&src[16] = 0;
    *(_QWORD *)&src[40] = 0;
    __p[1] = 0;
    __p[0] = 0;
    v867 = 0;
    v870 = 4;
    v873 = 0;
    v871 = 0;
    v872 = 0;
    v803 = *(id *)(a1 + 784);
    v799 = objc_msgSend(v803, "gglDevice");
    v812 = *(unsigned __int8 *)(a1 + 800);
    v99 = geo::codec::VectorTile::totalBuildingFootprintsCount(*v91);
    if (!v99)
    {
      v794 = 0.0;
      v795 = 0.0;
      v792 = 0.0;
      v793 = 0.0;
      v790 = 0.0;
      v791 = 0.0;
      v788 = 0.0;
      v789 = 0.0;
      v786 = 0.0;
      v787 = 0.0;
LABEL_296:

      if (v871)
      {
        v872 = v871;
        operator delete(v871);
      }
      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)src);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)&src[8]);
      goto LABEL_299;
    }
    v100 = (void **)v824[1];
    v101 = (char *)v824[1] - (char *)v824[0];
    v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v824[1] - (char *)v824[0]) >> 3);
    if (v102 > 2)
    {
      if (v101 != 72)
      {
        v108 = (void **)((char *)v824[0] + 72);
        if (v824[1] != (char *)v824[0] + 72)
        {
          v109 = (void **)v824[1];
          do
          {
            v111 = (char *)*(v109 - 3);
            v109 -= 3;
            v110 = v111;
            if (v111)
            {
              v112 = (char *)*(v100 - 2);
              v113 = v110;
              if (v112 != v110)
              {
                v114 = v112 - 24;
                v115 = v112 - 24;
                do
                {
                  v116 = *(void (***)(char *))v115;
                  v115 -= 24;
                  (*v116)(v114);
                  _ZF = v114 == v110;
                  v114 = v115;
                }
                while (!_ZF);
                v113 = *v109;
              }
              *(v100 - 2) = v110;
              operator delete(v113);
            }
            v100 = v109;
          }
          while (v109 != v108);
        }
        v824[1] = v108;
      }
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((v825 - (char *)v824[1]) >> 3) >= 3 - v102)
    {
      bzero(v824[1], 24 * ((48 - v101) / 0x18uLL) + 24);
      v824[1] = (char *)v824[1] + 24 * ((48 - v101) / 0x18uLL) + 24;
    }
    else
    {
      v103 = 0x5555555555555556 * ((v825 - (char *)v824[0]) >> 3);
      if (v103 <= 3)
        v103 = 3;
      if (0xAAAAAAAAAAAAAAABLL * ((v825 - (char *)v824[0]) >> 3) >= 0x555555555555555)
        v104 = 0xAAAAAAAAAAAAAAALL;
      else
        v104 = v103;
      if (v104 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_971;
      v105 = (char *)operator new(24 * v104);
      v106 = &v105[8 * (((char *)v824[1] - (char *)v824[0]) >> 3)];
      v107 = &v105[24 * v104];
      bzero(v106, 24 * ((48 - v101) / 0x18uLL) + 24);
      v824[0] = v106;
      v824[1] = &v106[24 * ((48 - v101) / 0x18uLL) + 24];
      v825 = v107;
    }
    std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::reserve((void **)v824[0]);
    std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::reserve((void **)v824[0] + 3);
    std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::reserve((void **)v824[0] + 6);
    __powidf2();
    dest.data = 0;
    dest.height = (vImagePixelCount)&dest;
    dest.rowBytes = (size_t)__Block_byref_object_copy__29341;
    v844 = __Block_byref_object_dispose__29342;
    dest.width = 0x4812000000;
    v845 = "";
    v846 = 0;
    v848 = 0;
    v847 = 0;
    if (v99 >> 60)
      abort();
    v118 = 0;
    v119 = v117 * 0.0250000004;
    v846 = operator new(16 * v99);
    v847 = v846;
    v848 = (char *)v846 + 16 * v99;
    if (v99 <= 1)
      v120 = 1;
    else
      v120 = v99;
    v782 = v99;
    do
    {
      v122 = geo::codec::buildingFootprintFeatureAtIndex((uint64_t)v781, v118);
      v123 = v122;
      if (*(_DWORD *)(v122 + 100))
      {
        *(_QWORD *)&v835 = 0;
        v124 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v122, 0, &v835);
        v125 = ggl::CullingGrid::intersectedCellsForRibbon(v835, v124, 1);
        v126 = (_QWORD *)dest.height;
        v127 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF] | (16
                                                                                                * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]);
        v129 = *(char **)(dest.height + 56);
        v128 = *(_QWORD *)(dest.height + 64);
        if ((unint64_t)v129 < v128)
        {
          *(_QWORD *)v129 = v123;
          v129[8] = v127;
          v121 = v129 + 16;
        }
        else
        {
          v130 = *(_BYTE **)(dest.height + 48);
          v131 = (v129 - v130) >> 4;
          v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 60)
            abort();
          v133 = v128 - (_QWORD)v130;
          if (v133 >> 3 > v132)
            v132 = v133 >> 3;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0)
            v134 = 0xFFFFFFFFFFFFFFFLL;
          else
            v134 = v132;
          if (v134 >> 60)
            goto LABEL_971;
          v135 = (char *)operator new(16 * v134);
          v136 = &v135[16 * v131];
          *(_QWORD *)v136 = v123;
          v136[8] = v127;
          if (v129 == v130)
          {
            v138 = &v135[16 * v131];
          }
          else
          {
            v137 = &v135[16 * v131];
            do
            {
              v138 = v137 - 16;
              *((_OWORD *)v137 - 1) = *((_OWORD *)v129 - 1);
              v129 -= 16;
              v137 -= 16;
            }
            while (v129 != v130);
          }
          v121 = v136 + 16;
          v126[6] = v138;
          v126[7] = v136 + 16;
          v126[8] = &v135[16 * v134];
          if (v130)
            operator delete(v130);
        }
        v126[7] = v121;
      }
      ++v118;
    }
    while (v118 != v120);
    v139 = *(uint64_t **)(dest.height + 48);
    v140 = *(_QWORD *)(dest.height + 56);
    v141 = 126 - 2 * __clz((uint64_t)(v140 - (_QWORD)v139) >> 4);
    if ((uint64_t *)v140 == v139)
      v142 = 0;
    else
      v142 = v141;
    std::__introsort<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *,false>(v139, v140, v142, 1);
    v144 = *(uint64_t **)(dest.height + 48);
    v819 = *(uint64_t **)(dest.height + 56);
    if (v144 != v819)
    {
      color[0] = 0;
      v795 = 0.0;
      v796 = (float)v806;
      v793 = 0.0;
      v794 = 0.0;
      v791 = 0.0;
      v792 = 0.0;
      v789 = 0.0;
      v790 = 0.0;
      v787 = 0.0;
      v788 = 0.0;
      v786 = 0.0;
      v93 = 0.0;
      v94 = 0.0;
      v95 = 0.0;
      v96 = 0.0;
      v97 = 0.0;
      v98 = 0.0;
      while (1)
      {
        v145 = *v144;
        if (*(_BYTE *)(*v144 + 128))
          goto LABEL_185;
        if (*(_DWORD *)(v145 + 100))
          break;
LABEL_184:
        ++color[0];
LABEL_185:
        v144 += 2;
        if (v144 == v819)
          goto LABEL_279;
      }
      v807 = (void ***)((char *)v824[0] + 24 * ((unint64_t)color[0] % 3));
      v146 = *v807;
      v147 = v807 + 1;
      v148 = v807[1];
      if (*v807 == v148)
      {
LABEL_191:
        v151 = 0;
      }
      else
      {
        while (1)
        {
          v149 = v146[1];
          v150 = objc_msgSend(v149, "canAcceptPolygon:", v145);

          if (v150)
            break;
          v146 += 3;
          if (v146 == v148)
            goto LABEL_191;
        }
        v151 = v146[1];
      }
      v152 = (uint64_t *)(v145 + 24);
      if (v812)
      {
        v153 = *(unsigned __int8 *)(*v152 + 33);
        if (!*(_BYTE *)(*v152 + 33))
        {
          v154 = 0;
          if (v151)
            goto LABEL_201;
          goto LABEL_243;
        }
        v154 = 0;
        v155 = (_DWORD *)(*(_QWORD *)*v152 + 4);
        do
        {
          if (*(v155 - 1) == 19)
            v154 = *v155 == 0;
          v155 += 2;
          --v153;
        }
        while (v153);
      }
      else
      {
        v154 = 0;
      }
      if (v151)
      {
LABEL_201:
        if (*(_DWORD *)(v145 + 100))
        {
          v156 = 0;
          do
          {
            *(_QWORD *)&v835 = 0;
            v157 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v145, v156, &v835);
            v158 = geo::codec::buildingFootprintExtrusionHeight(v145, v156);
            v159 = ggl::CullingGrid::intersectedCellsForRibbon(v835, v157, 1);
            *(float *)&v143 = fmaxf(v795, v158);
            if ((v159 & 1) != 0)
              v160 = *(float *)&v143;
            else
              v160 = v795;
            v161 = fmaxf(v791, v158);
            if ((v159 & 8) != 0)
              v162 = v161;
            else
              v162 = v791;
            v163 = fmaxf(v787, v158);
            if ((v159 & 0x1000) != 0)
              v164 = v163;
            else
              v164 = v787;
            v165 = fmaxf(v95, v158);
            if (v159 < 0)
              v95 = v165;
            v166 = v794;
            v167 = fmaxf(v794, v158);
            if ((v159 & 2) != 0)
              v166 = v167;
            v794 = v166;
            v795 = v160;
            v168 = v790;
            v169 = fmaxf(v790, v158);
            if ((v159 & 4) != 0)
              v168 = v169;
            v790 = v168;
            v791 = v162;
            v170 = v786;
            v171 = fmaxf(v786, v158);
            if ((v159 & 0x2000) != 0)
              v170 = v171;
            v786 = v170;
            v787 = v164;
            v172 = fmaxf(v96, v158);
            if ((v159 & 0x4000) != 0)
              v96 = v172;
            v173 = fmaxf(v793, v158);
            if ((v159 & 0x10) != 0)
              v174 = v173;
            else
              v174 = v793;
            v175 = fmaxf(v789, v158);
            if ((v159 & 0x80) != 0)
              v176 = v175;
            else
              v176 = v789;
            v177 = fmaxf(v93, v158);
            if ((v159 & 0x100) != 0)
              v93 = v177;
            v178 = fmaxf(v97, v158);
            if ((v159 & 0x800) != 0)
              v97 = v178;
            v179 = v792;
            v180 = fmaxf(v792, v158);
            if ((v159 & 0x20) != 0)
              v179 = v180;
            v792 = v179;
            v793 = v174;
            v181 = v788;
            v182 = fmaxf(v788, v158);
            if ((v159 & 0x40) != 0)
              v181 = v182;
            v788 = v181;
            v789 = v176;
            v183 = fmaxf(v94, v158);
            if ((v159 & 0x200) != 0)
              v94 = v183;
            v184 = fmaxf(v98, v158);
            if ((v159 & 0x400) != 0)
              v98 = v184;
            ++v156;
          }
          while (v156 < *(unsigned int *)(v145 + 100));
        }
        *(float *)&v143 = v119;
        -[VKBuildingGroup prepareForBuilding:forRoofStyle:scaleThreshold:](v151, "prepareForBuilding:forRoofStyle:scaleThreshold:", v145, v154, v143);

        goto LABEL_184;
      }
LABEL_243:
      v185 = v830;
      if (v830)
      {
        md::createFeatureAttributeSet((gss::Allocator *)&v835, v152);
        *(_QWORD *)&components[7] = 0;
        *(_QWORD *)components = 0;
        components[15] = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)v857, v185, (gss::FeatureAttributeSet *)&v835, (gss::QueryOverrides *)components);
        if (!components[14] && *(_QWORD *)components)
        {
          v187 = gss::Allocator::instance(v186);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v187 + 40))(v187, *(_QWORD *)components, *(unsigned __int16 *)&components[12]);
        }
        if ((_QWORD)v835)
        {
          *((_QWORD *)&v835 + 1) = v835;
          (*(void (**)(_QWORD, _QWORD, char *))(*(_QWORD *)v837 + 40))(v837, v835, (char *)v836 - v835);
        }
      }
      else
      {
        *(_OWORD *)v857 = 0uLL;
      }
      v188 = [VKBuildingGroup alloc];
      *(float *)&v189 = v796;
      *(float *)&v190 = v785;
      v191 = -[VKBuildingGroup initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:](v188, "initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:", v857, 0, v189, v190);
      v151 = v191;
      v192 = *v147;
      v193 = (char *)v824[0] + 24 * ((unint64_t)color[0] % 3);
      v196 = *((_QWORD *)v193 + 2);
      v195 = (char **)(v193 + 16);
      v194 = v196;
      if ((unint64_t)*v147 >= v196)
      {
        v198 = 0xAAAAAAAAAAAAAAABLL * (v192 - *v807);
        v199 = v198 + 1;
        if (v198 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v194 - (_QWORD)*v807) >> 3);
        if (2 * v200 > v199)
          v199 = 2 * v200;
        if (v200 >= 0x555555555555555)
          v201 = 0xAAAAAAAAAAAAAAALL;
        else
          v201 = v199;
        if (v201)
        {
          if (v201 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_971;
          v202 = (char *)operator new(24 * v201);
        }
        else
        {
          v202 = 0;
        }
        v203 = &v202[24 * v198];
        *(_QWORD *)v203 = &off_1E42B4BD0;
        *((_QWORD *)v203 + 1) = 0;
        objc_storeStrong((id *)v203 + 1, v191);

        v204 = &v202[24 * v201];
        v197 = (void **)(v203 + 24);
        v205 = *v147;
        v206 = *v807;
        if (*v147 == *v807)
        {
          *v807 = (void **)v203;
          *v147 = v197;
          *v195 = v204;
          if (!v205)
            goto LABEL_271;
        }
        else
        {
          v776 = v204;
          do
          {
            *((_QWORD *)v203 - 3) = &off_1E42B4BD0;
            v203 -= 24;
            *((_QWORD *)v203 + 1) = 0;
            v208 = *(v205 - 2);
            v207 = v205 - 2;
            objc_storeStrong((id *)v203 + 1, v208);
            v209 = *v207;
            *v207 = 0;

            v205 = v207 - 1;
          }
          while (v205 != v206);
          v205 = *v807;
          v210 = *v147;
          *v807 = (void **)v203;
          *v147 = v197;
          *v195 = v776;
          if (v210 != v205)
          {
            v211 = v210 - 3;
            v212 = v210 - 3;
            do
            {
              v213 = (void (**)(void **))*v212;
              v212 -= 3;
              (*v213)(v211);
              _ZF = v211 == v205;
              v211 = v212;
            }
            while (!_ZF);
          }
          if (!v205)
            goto LABEL_271;
        }
        operator delete(v205);
      }
      else
      {
        *v192 = &off_1E42B4BD0;
        v192[1] = 0;
        objc_storeStrong(v192 + 1, v191);

        v197 = v192 + 3;
      }
LABEL_271:
      *v147 = v197;
      v214 = (std::__shared_weak_count *)v857[1];
      if (v857[1])
      {
        v215 = (unint64_t *)((char *)v857[1] + 8);
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      goto LABEL_201;
    }
    v794 = 0.0;
    v795 = 0.0;
    v792 = 0.0;
    v793 = 0.0;
    v790 = 0.0;
    v791 = 0.0;
    v788 = 0.0;
    v789 = 0.0;
    v786 = 0.0;
    v787 = 0.0;
    v93 = 0.0;
    v94 = 0.0;
    v95 = 0.0;
    v96 = 0.0;
    v97 = 0.0;
    v98 = 0.0;
LABEL_279:
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v799 + 24))(v855);
    *(_QWORD *)&v835 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v835 + 1) = 3221225472;
    v836 = ___Z12_buildMeshesRNSt3__16vectorINS0_IN3geo11_retain_ptrIU8__strongP15VKBuildingGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS_9allocatorISA_EEEENSB_ISD_EEEERN3ggl21CullingGridWithHeightERN2md12TriangulatorIfEEPNSH_6DeviceEbRKNS_10shared_ptrINSK_21GEOVectorTileResourceEEERKNSQ_IN3gss17StylesheetManagerINSV_10PropertyIDEEEEEfRKNS1_8QuadTileE_block_invoke;
    *(_QWORD *)&v837 = &unk_1E42F6840;
    v838 = v824;
    *((_QWORD *)&v837 + 1) = &dest;
    v842 = v812;
    v839 = v782;
    v840 = src;
    v841 = v119;
    *(_QWORD *)components = &off_1E42C7118;
    *(_QWORD *)&components[8] = MEMORY[0x1A1AF5730](&v835);
    *(_QWORD *)&components[24] = components;
    *(_OWORD *)v857 = 0uLL;
    (*(void (**)(void *, _BYTE *, void **))(*(_QWORD *)v855[0] + 16))(v855[0], components, v857);
    v217 = (std::__shared_weak_count *)v857[1];
    if (v857[1])
    {
      v218 = (unint64_t *)((char *)v857[1] + 8);
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    v220 = *(_QWORD **)&components[24];
    if (*(_BYTE **)&components[24] == components)
    {
      v221 = 4;
      v220 = components;
    }
    else
    {
      if (!*(_QWORD *)&components[24])
      {
LABEL_289:
        if (v855[0])
        {
          v222 = (*(uint64_t (**)(void *))(*(_QWORD *)v855[0] + 24))(v855[0]);
          v223 = v855[0];
          v855[0] = 0;
          *(_QWORD *)components = v223;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v222 + 48))(v222, components);
          v224 = *(_QWORD *)components;
          *(_QWORD *)components = 0;
          if (v224)
            (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
          v225 = v855[0];
          v855[0] = 0;
          if (v225)
            (*(void (**)(void *))(*(_QWORD *)v225 + 8))(v225);
        }
        _Block_object_dispose(&dest, 8);
        if (v846)
        {
          v847 = v846;
          operator delete(v846);
        }
        goto LABEL_296;
      }
      v221 = 5;
    }
    (*(void (**)(void))(*v220 + 8 * v221))();
    goto LABEL_289;
  }
LABEL_299:
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  v227 = objc_msgSend(v226, "supportsBuildingShadows");

  if (!v227)
  {
    v762 = 0;
    goto LABEL_410;
  }
  v783 = (geo::codec::VectorTile **)(v833 + 144);
  v228 = geo::codec::VectorTile::nonOverlappingBuildingFootprintsCount(*(geo::codec::VectorTile **)(v833 + 144));
  if (v228)
  {
    v230 = 0;
    v229.i32[0] = 0;
    v804 = v229;
    v229.i32[0] = 1.0;
    *(float32x4_t *)v797 = v229;
    v229.i32[0] = 1.0;
    v800 = v229;
    v229.i32[0] = 0;
    v808 = v229;
    while (1)
    {
      v231 = geo::codec::buildingFootprintFeatureAtIndex((uint64_t)v783, v230);
      v232 = v231;
      if (!*(_BYTE *)(v231 + 128))
      {
        if (*(_DWORD *)(v231 + 100))
          break;
      }
LABEL_302:
      if (++v230 == v228)
        goto LABEL_321;
    }
    v233 = 0;
    while (1)
    {
      if (geo::codec::buildingFootprintExtrusionHeight(v232, v233) == 0.0)
        goto LABEL_308;
      *(_QWORD *)src = 0;
      v238 = geo::codec::multiSectionFeaturePoints((_QWORD *)v232, v233, src);
      if (*(_QWORD *)src)
      {
        if (*(_QWORD *)src > 7uLL)
        {
          v239 = *(_QWORD *)src & 0xFFFFFFFFFFFFFFF8;
          v240 = (float32x4_t)vdupq_lane_s32((int32x2_t)v797[0], 0);
          v241 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v800.f32, 0);
          v242 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v804.f32, 0);
          v243 = (const float *)(v238 + 4);
          v244 = *(_QWORD *)src & 0xFFFFFFFFFFFFFFF8;
          v245 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v808.f32, 0);
          v237 = v240;
          v246 = v241;
          v247 = v242;
          v248 = v245;
          do
          {
            v249 = v243 - 8;
            v877 = vld2q_f32(v249);
            v879 = vld2q_f32(v243);
            v245 = vminnmq_f32(v877.val[0], v245);
            v248 = vminnmq_f32(v879.val[0], v248);
            v241 = vmaxnmq_f32(v241, v877.val[0]);
            v246 = vmaxnmq_f32(v246, v879.val[0]);
            v242 = vminnmq_f32(v877.val[1], v242);
            v247 = vminnmq_f32(v879.val[1], v247);
            v240 = vmaxnmq_f32(v240, v877.val[1]);
            v237 = vmaxnmq_f32(v237, v879.val[1]);
            v243 += 16;
            v244 -= 8;
          }
          while (v244);
          v235 = vminnmq_f32(v245, v248);
          v235.f32[0] = vminnmvq_f32(v235);
          v234 = vminnmq_f32(v242, v247);
          v234.f32[0] = vminnmvq_f32(v234);
          v236 = vmaxnmq_f32(v241, v246);
          v236.f32[0] = vmaxnmvq_f32(v236);
          v237.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v240, v237));
          if (*(_QWORD *)src == v239)
            goto LABEL_307;
        }
        else
        {
          v239 = 0;
          v234 = v804;
          v235 = v808;
          v237 = *(float32x4_t *)v797;
          v236 = v800;
        }
        v250 = *(_QWORD *)src - v239;
        v251 = (float *)&v238[v239] + 1;
        do
        {
          v252 = *(v251 - 1);
          v235.f32[0] = fminf(v252, v235.f32[0]);
          v236.f32[0] = fmaxf(v236.f32[0], v252);
          v253 = *v251;
          v251 += 2;
          v234.f32[0] = fminf(v253, v234.f32[0]);
          v237.f32[0] = fmaxf(v237.f32[0], v253);
          --v250;
        }
        while (v250);
      }
      else
      {
        v234 = v804;
        v235 = v808;
        v237 = *(float32x4_t *)v797;
        v236 = v800;
      }
LABEL_307:
      *(float32x4_t *)v797 = v237;
      v800 = v236;
      v804 = v234;
      v808 = v235;
LABEL_308:
      if (++v233 >= *(unsigned int *)(v232 + 100))
        goto LABEL_302;
    }
  }
  v800.i32[0] = 1.0;
  v808.i32[0] = 0;
  v804.i32[0] = 0;
  LODWORD(v797[0]) = 1.0;
LABEL_321:
  v254 = geo::codec::VectorTile::nonOverlappingThreeDBuildingsCount(*v783);
  if (!v254)
  {
    v813.i32[0] = 1.0;
    v255.i32[0] = 0;
    *(float32x4_t *)color = v255;
    v820.i32[0] = 0;
    v777.i32[0] = 1.0;
    goto LABEL_347;
  }
  v256 = 0;
  v255.i32[0] = 0;
  v820 = v255;
  v255.i32[0] = 1.0;
  v777 = v255;
  v255.i32[0] = 1.0;
  v813 = v255;
  v255.i32[0] = 0;
  *(float32x4_t *)color = v255;
  while (2)
  {
    v257 = geo::codec::threeDBuildingFeatureAtIndex((uint64_t)v783, v256);
    v258 = geo::A3DFileCreate(*(geo **)(v257 + 80), (const unsigned __int8 *)(*(_QWORD *)(v257 + 88) - *(_QWORD *)(v257 + 80)));
    v259 = v258;
    if (!v258)
      goto LABEL_324;
    v260 = (geo *)*v258;
    v261 = (const unsigned __int8 *)v258[1];
    v263 = geo::A3DGetMetadataHeaderCount((geo *)*v258, v261);
    if (!v263)
      goto LABEL_323;
    v264 = geo::A3DGetMetadataHeaders(v260, v261);
    if (!v264)
      goto LABEL_323;
    v265 = 0;
    v266 = 0;
    v267 = v263;
    do
    {
      if (!*(_BYTE *)v264)
      {
        v265 += *(unsigned int *)(v264 + 5);
        ++v266;
      }
      v264 += 17;
      --v267;
    }
    while (v267);
    if (!v266)
    {
LABEL_323:
      geo::A3DFileDelete((geo *)v259, v262);
      goto LABEL_324;
    }
    v268 = operator new[]();
    v269 = (char *)malloc_type_malloc(16 * v266, 0x1000040451B5BE8uLL);
    geo::A3DGetShadows((unsigned int *)*v259, v259[1], v268, (uint64_t)v269);
    geo::A3DFileDelete((geo *)v259, v270);
    v271 = 0;
    v272 = v777;
    do
    {
      v276 = &v269[16 * v271];
      v277 = *((_QWORD *)v276 + 1);
      if (!v277)
      {
        v274 = *(float32x4_t *)color;
        v273 = v820;
        v275 = v813;
        goto LABEL_335;
      }
      v278 = *(_QWORD *)v276;
      if (v277 <= 7)
      {
        v279 = 0;
        v274 = *(float32x4_t *)color;
        v273 = v820;
        v275 = v813;
LABEL_342:
        v290 = v277 - v279;
        v291 = (float *)(v268 + 4 + 8 * (v279 + v278));
        do
        {
          v292 = v272;
          v293 = *(v291 - 1);
          v274.f32[0] = fminf(v293, v274.f32[0]);
          v275.f32[0] = fmaxf(v275.f32[0], v293);
          v272 = v292;
          v273.f32[0] = fminf(*v291, v273.f32[0]);
          v272.f32[0] = fmaxf(v292.f32[0], *v291);
          v291 += 2;
          --v290;
        }
        while (v290);
        goto LABEL_335;
      }
      v279 = v277 & 0xFFFFFFFFFFFFFFF8;
      v280 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v272.f32, 0);
      v281 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v813.f32, 0);
      v282 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v820.f32, 0);
      v283 = (const float *)(v268 + 32 + 8 * v278);
      v284 = v277 & 0xFFFFFFFFFFFFFFF8;
      v285 = (float32x4_t)vdupq_lane_s32((int32x2_t)color[0], 0);
      v286 = v280;
      v275 = v281;
      v287 = v282;
      v288 = v285;
      do
      {
        v289 = v283 - 8;
        v878 = vld2q_f32(v289);
        v880 = vld2q_f32(v283);
        v285 = vminnmq_f32(v878.val[0], v285);
        v288 = vminnmq_f32(v880.val[0], v288);
        v281 = vmaxnmq_f32(v281, v878.val[0]);
        v275 = vmaxnmq_f32(v275, v880.val[0]);
        v282 = vminnmq_f32(v878.val[1], v282);
        v287 = vminnmq_f32(v880.val[1], v287);
        v280 = vmaxnmq_f32(v280, v878.val[1]);
        v286 = vmaxnmq_f32(v286, v880.val[1]);
        v283 += 16;
        v284 -= 8;
      }
      while (v284);
      v274 = vminnmq_f32(v285, v288);
      v274.f32[0] = vminnmvq_f32(v274);
      v273 = vminnmq_f32(v282, v287);
      v273.f32[0] = vminnmvq_f32(v273);
      v275.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v281, v275));
      v272 = vmaxnmq_f32(v280, v286);
      v272.f32[0] = vmaxnmvq_f32(v272);
      if (v277 != v279)
        goto LABEL_342;
LABEL_335:
      v813 = v275;
      *(float32x4_t *)color = v274;
      v820 = v273;
      ++v271;
    }
    while (v271 != v266);
    v777 = v272;
    MEMORY[0x1A1AF4DE8](v268, 0x1000C8000313F17);
    free(v269);
LABEL_324:
    if (++v256 != v254)
      continue;
    break;
  }
LABEL_347:
  v294 = (std::__shared_weak_count *)operator new(0x60uLL);
  v294->__shared_owners_ = 0;
  v773 = (unint64_t *)&v294->__shared_owners_;
  v294->__shared_weak_owners_ = 0;
  v294->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v295 = ggl::TextureData2D::TextureData2D((uint64_t)&v294[1], 512, 512, 1u, 2, 1);
  *(_QWORD *)&v835 = v294 + 1;
  *((_QWORD *)&v835 + 1) = v294;
  data = (void *)((uint64_t (*)(_QWORD *, _QWORD))v294[1].__on_zero_shared)(v295, 0);
  v771 = &v294[1].__vftable;
  if (_grayscaleColorSpace(void)::onceToken != -1)
    dispatch_once(&_grayscaleColorSpace(void)::onceToken, &__block_literal_global_29339);
  v296 = CGBitmapContextCreate(data, 0x200uLL, 0x200uLL, 8uLL, 0x200uLL, (CGColorSpaceRef)_grayscaleColorSpace(void)::colorspace, 0);
  CGContextSetBlendMode(v296, kCGBlendModeCopy);
  CGContextScaleCTM(v296, 512.0, 512.0);
  CGContextTranslateCTM(v296, 0.0, 1.0);
  CGContextScaleCTM(v296, 1.0, -1.0);
  v297.i64[0] = __PAIR64__(v804.u32[0], v808.u32[0]);
  v297.i64[1] = __PAIR64__(v797[0], v800.u32[0]);
  v298.i64[1] = __PAIR64__(v797[0], v800.u32[0]);
  v298.i64[0] = __PAIR64__(v820.u32[0], color[0]);
  v299.i64[0] = __PAIR64__(v804.u32[0], v808.u32[0]);
  v299.i64[1] = __PAIR64__(v777.u32[0], v813.u32[0]);
  v300 = (int8x16_t)vcgtq_f32(v299, v298);
  v298.i64[1] = __PAIR64__(v777.u32[0], v813.u32[0]);
  v301 = vaddq_f32((float32x4_t)vbslq_s8(v300, (int8x16_t)v298, v297), (float32x4_t)xmmword_19FFB5DE0);
  v302 = v301.f32[1];
  v763 = v301;
  CGContextScaleCTM(v296, (float)(1.0 / vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v301, 2), v301).f32[0]), (float)(1.0 / (float)(v301.f32[3] - v301.f32[1])));
  CGContextTranslateCTM(v296, (float)-v763.f32[0], (float)-v302);
  *(_OWORD *)components = xmmword_19FFB63A0;
  v769 = v294;
  if (_grayscaleColorSpace(void)::onceToken != -1)
    dispatch_once(&_grayscaleColorSpace(void)::onceToken, &__block_literal_global_29339);
  color[0] = CGColorCreate((CGColorSpaceRef)_grayscaleColorSpace(void)::colorspace, (const CGFloat *)components);
  CGContextSetAllowsAntialiasing(v296, 0);
  CGContextSetFillColorWithColor(v296, color[0]);
  v303 = geo::codec::VectorTile::nonOverlappingBuildingFootprintsCount(*v783);
  if (v303)
  {
    for (i = 0; i != v303; ++i)
    {
      v305 = geo::codec::buildingFootprintFeatureAtIndex((uint64_t)v783, i);
      v306 = v305;
      if (!*(_BYTE *)(v305 + 128) && *(_DWORD *)(v305 + 100))
      {
        v307 = 0;
        do
        {
          v308 = geo::codec::buildingFootprintExtrusionHeight(v306, v307);
          *(_QWORD *)src = 0;
          v309 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v306, v307, src);
          if (v308 > 0.0 && *(_QWORD *)src >= 3uLL)
          {
            v311 = v309;
            CGContextBeginPath(v296);
            CGContextMoveToPoint(v296, *v311, v311[1]);
            if (*(_QWORD *)src >= 2uLL)
            {
              v312 = v311 + 3;
              v313 = 1;
              do
              {
                CGContextAddLineToPoint(v296, *(v312 - 1), *v312);
                ++v313;
                v312 += 2;
              }
              while (v313 < *(_QWORD *)src);
            }
            CGContextClosePath(v296);
            CGContextFillPath(v296);
          }
          ++v307;
        }
        while (v307 < *(unsigned int *)(v306 + 100));
      }
    }
  }
  v314 = geo::codec::VectorTile::nonOverlappingThreeDBuildingsCount(*v783);
  v315 = v314;
  if (v314)
  {
    v316 = 0;
    v821 = v314;
    do
    {
      v317 = geo::codec::threeDBuildingFeatureAtIndex((uint64_t)v783, v316);
      v318 = (geo **)geo::A3DFileCreate(*(geo **)(v317 + 80), (const unsigned __int8 *)(*(_QWORD *)(v317 + 88) - *(_QWORD *)(v317 + 80)));
      v319 = (geo *)v318;
      if (v318)
      {
        v320 = *v318;
        v321 = (const unsigned __int8 *)v318[1];
        v323 = geo::A3DGetMetadataHeaderCount(*v318, v321);
        if (!v323)
          goto LABEL_369;
        v324 = geo::A3DGetMetadataHeaders(v320, v321);
        if (!v324)
          goto LABEL_369;
        v325 = 0;
        v326 = 0;
        v327 = v323;
        do
        {
          if (!*(_BYTE *)v324)
          {
            v325 += *(unsigned int *)(v324 + 5);
            ++v326;
          }
          v324 += 17;
          --v327;
        }
        while (v327);
        if (v326)
        {
          v328 = operator new[]();
          v329 = malloc_type_malloc(16 * v326, 0x1000040451B5BE8uLL);
          geo::A3DGetShadows(*(unsigned int **)v319, *((_QWORD *)v319 + 1), v328, (uint64_t)v329);
          geo::A3DFileDelete(v319, v330);
          for (j = 0; j != v326; ++j)
          {
            v332 = (char *)&v329[2 * j];
            v334 = *((_QWORD *)v332 + 1);
            v333 = (unint64_t *)(v332 + 8);
            if (v334 >= 3)
            {
              v335 = v329[2 * j];
              CGContextBeginPath(v296);
              CGContextMoveToPoint(v296, *(float *)(v328 + 8 * v335), *(float *)(v328 + 8 * v335 + 4));
              if (*v333)
              {
                v336 = 0;
                v337 = (float *)(v328 + 4 + 8 * v335);
                do
                {
                  CGContextAddLineToPoint(v296, *(v337 - 1), *v337);
                  ++v336;
                  v337 += 2;
                }
                while (*v333 > v336);
              }
              CGContextEOFillPath(v296);
            }
          }
          MEMORY[0x1A1AF4DE8](v328, 0x1000C8000313F17);
          free(v329);
          v315 = v821;
        }
        else
        {
LABEL_369:
          geo::A3DFileDelete(v319, v322);
        }
      }
      ++v316;
    }
    while (v316 != v315);
  }
  CGContextRelease(v296);
  CGColorRelease(color[0]);
  *(_QWORD *)src = data;
  v338 = malloc_type_malloc(0x40000uLL, 0x2C50054DuLL);
  v339 = v338;
  if (v338)
  {
    *(int64x2_t *)&dest.height = vdupq_n_s64(0x200uLL);
    *(_OWORD *)&src[8] = *(_OWORD *)&dest.height;
    dest.data = v338;
    dest.rowBytes = 512;
    *(_QWORD *)&src[24] = 512;
    vImageConvolve_Planar8((const vImage_Buffer *)src, &dest, 0, 0, 0, _blurTexture(unsigned char *)::kernel, 0xBu, 1u, 0x7FFF, 0, 4u);
    vImageConvolve_Planar8(&dest, (const vImage_Buffer *)src, 0, 0, 0, _blurTexture(unsigned char *)::kernel, 1u, 0xBu, 0x7FFF, 0, 4u);
    free(v339);
  }
  v340 = (char *)operator new(0x58uLL);
  *((_QWORD *)v340 + 1) = 0;
  v341 = (unint64_t *)(v340 + 8);
  *((_QWORD *)v340 + 2) = 0;
  *((_QWORD *)v340 + 3) = &off_1E42B63B0;
  *(_QWORD *)v340 = &off_1E42DED18;
  *((_QWORD *)v340 + 5) = 0;
  *((_QWORD *)v340 + 6) = 0;
  *((_QWORD *)v340 + 4) = 0;
  *((_DWORD *)v340 + 14) = 0;
  *(_QWORD *)&v342 = 0x100000001;
  *((_QWORD *)&v342 + 1) = 0x100000001;
  *(_OWORD *)(v340 + 60) = v342;
  *(_QWORD *)(v340 + 76) = 0x100000001;
  *((_DWORD *)v340 + 21) = 0;
  *(_QWORD *)src = v340 + 24;
  *(_QWORD *)&src[8] = v340;
  v343 = operator new();
  do
    v344 = __ldxr(v773);
  while (__stxr(v344 + 1, v773));
  *(_QWORD *)(v343 + 16) = 0;
  *(_QWORD *)(v343 + 24) = 0;
  *(_DWORD *)(v343 + 32) = 0;
  *(_QWORD *)(v343 + 56) = 0x100000001;
  shared_owners = v769[1].__shared_owners_;
  shared_owners_high = HIDWORD(v769[1].__shared_owners_);
  *(_DWORD *)(v343 + 64) = 0;
  *(_DWORD *)(v343 + 68) = shared_owners_high;
  *(_QWORD *)(v343 + 72) = 0x100000001;
  *(_QWORD *)(v343 + 88) = 0;
  *(_QWORD *)(v343 + 96) = 0;
  *(_QWORD *)v343 = &off_1E42BE438;
  *(_QWORD *)(v343 + 8) = 0;
  *(_QWORD *)(v343 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v343 + 48) = "";
  *(_DWORD *)(v343 + 104) = shared_owners;
  *(_QWORD *)(v343 + 112) = v771;
  *(_QWORD *)(v343 + 120) = v769;
  do
    v347 = __ldxr(v773);
  while (__stxr(v347 + 1, v773));
  *(_WORD *)(v343 + 128) = 0;
  *(_BYTE *)(v343 + 130) = 1;
  *(_QWORD *)(v343 + 136) = v340 + 24;
  *(_QWORD *)(v343 + 144) = v340;
  do
    v348 = __ldxr(v341);
  while (__stxr(v348 + 1, v341));
  v762 = v343;
  *(_QWORD *)(v343 + 80) = v769[1].__shared_weak_owners_;
  do
    v349 = __ldaxr(v773);
  while (__stlxr(v349 - 1, v773));
  if (!v349)
  {
    ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
    std::__shared_weak_count::__release_weak(v769);
  }
  v350 = *(std::__shared_weak_count **)&src[8];
  if (*(_QWORD *)&src[8])
  {
    v351 = (unint64_t *)(*(_QWORD *)&src[8] + 8);
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  v353 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
  if (*((_QWORD *)&v835 + 1))
  {
    v354 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
LABEL_410:
  v778 = *(id *)(a1 + 784);
  v855[1] = 0;
  v855[0] = 0;
  v856 = 0;
  v356 = geo::codec::VectorTile::totalThreeDBuildingsCount(*v781);
  v358 = v356;
  v853 = 0;
  v852 = 0;
  v854 = 0;
  v850 = 0;
  v849 = 0;
  v851 = 0;
  if (!v356)
  {
    v688 = 0;
    v687 = 0uLL;
    goto LABEL_867;
  }
  v784 = 0;
  v359 = 0;
  v822 = v357;
  v805 = 0u;
  v801 = v356;
  while (2)
  {
    v360 = geo::codec::threeDBuildingFeatureAtIndex((uint64_t)v781, v359);
    v361 = *(geo **)(v360 + 40);
    v362 = (geo *)geo::A3DFileCreate(*(geo **)(v360 + 80), (const unsigned __int8 *)(*(_QWORD *)(v360 + 88) - *(_QWORD *)(v360 + 80)));
    if (v362)
    {
      v363 = v830;
      md::createFeatureAttributeSet((gss::Allocator *)src, (uint64_t *)(v360 + 24));
      *(void **)((char *)&dest.data + 7) = 0;
      dest.data = 0;
      HIBYTE(dest.height) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)components, v363, (gss::FeatureAttributeSet *)src, (gss::QueryOverrides *)&dest);
      if (!BYTE6(dest.height) && dest.data)
      {
        v367 = gss::Allocator::instance(v364);
        (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v367 + 40))(v367, dest.data, WORD2(dest.height));
      }
      v368 = *(void **)src;
      if (*(_QWORD *)src)
      {
        *(_QWORD *)&src[8] = *(_QWORD *)src;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&src[24] + 40))(*(_QWORD *)&src[24], *(_QWORD *)src, *(_QWORD *)&src[16] - *(_QWORD *)src);
      }
      v369 = (uint64_t *)v849;
      if (v849 == v850)
      {
LABEL_423:
        dest.height = 0;
        dest.data = 0;
        if (v369 == v850)
          goto LABEL_428;
        v371 = (void *)v369[2];
        v370 = v369[3];
        if (v370)
        {
          v372 = (unint64_t *)(v370 + 8);
          do
            v373 = __ldxr(v372);
          while (__stxr(v373 + 1, v372));
          dest.data = v371;
          dest.height = v370;
        }
        else
        {
          dest.data = v371;
        }
        goto LABEL_547;
      }
      do
      {
        if (*(_QWORD *)components == *v369)
          goto LABEL_423;
        v369 += 4;
      }
      while (v369 != v850);
      dest.height = 0;
      dest.data = 0;
LABEL_428:
      *(void **)((char *)v857 + 7) = 0;
      v857[0] = 0;
      HIBYTE(v857[1]) = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v857, 0x10002u) = 1;
      md::createFeatureAttributeSet((gss::Allocator *)src, (uint64_t *)(v360 + 24));
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v863, v363, (gss::FeatureAttributeSet *)src, (gss::QueryOverrides *)v857);
      if (*(_QWORD *)src)
      {
        *(_QWORD *)&src[8] = *(_QWORD *)src;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&src[24] + 40))(*(_QWORD *)&src[24], *(_QWORD *)src, *(_QWORD *)&src[16] - *(_QWORD *)src);
      }
      v374 = operator new(0x90uLL);
      v374[1] = 0;
      v374[2] = 0;
      *v374 = &off_1E42DAD38;
      v374[3] = 0;
      v374[4] = 0;
      v374[5] = 0;
      {
        v506 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v506, "GeoGL", 0xA3D02C1100000005);
      }
      v374[6] = ggl::Allocator::instance(void)::alloc;
      ggl::MeshVendor<ggl::Landmark::LandmarkMesh>::_allocateNewMesh((uint64_t)(v374 + 3));
      v374[7] = 0;
      v374[8] = 0;
      v378 = *(_QWORD *)components;
      v377 = *(_QWORD *)&components[8];
      v374[9] = 0;
      v374[10] = v378;
      v374[11] = v377;
      if (v377)
      {
        v379 = (unint64_t *)(v377 + 8);
        do
          v380 = __ldxr(v379);
        while (__stxr(v380 + 1, v379));
      }
      v809 = v361;
      v381 = v864;
      v374[12] = v863;
      v374[13] = v381;
      if (v381)
      {
        v382 = (unint64_t *)&v381->__shared_owners_;
        do
          v383 = __ldxr(v382);
        while (__stxr(v383 + 1, v382));
      }
      *((_BYTE *)v374 + 112) = 0;
      v384 = (std::__shared_weak_count *)dest.height;
      dest.data = v374 + 3;
      dest.height = (vImagePixelCount)v374;
      if (v384)
      {
        v385 = (unint64_t *)&v384->__shared_owners_;
        do
          v386 = __ldaxr(v385);
        while (__stlxr(v386 - 1, v385));
        if (!v386)
        {
          ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
          std::__shared_weak_count::__release_weak(v384);
        }
      }
      v387 = (int8x16_t *)v855[1];
      v814 = v359;
      if (v855[1] < (void *)v856)
      {
        *(_QWORD *)v855[1] = dest.data;
        v388 = dest.height;
        v387->i64[1] = dest.height;
        if (v388)
        {
          v389 = (unint64_t *)(v388 + 8);
          do
            v390 = __ldxr(v389);
          while (__stxr(v390 + 1, v389));
        }
        v391 = v387 + 1;
        goto LABEL_472;
      }
      v392 = (int8x16_t *)v855[0];
      v393 = ((char *)v855[1] - (char *)v855[0]) >> 4;
      v394 = v393 + 1;
      if ((unint64_t)(v393 + 1) >> 60)
        abort();
      v395 = (char *)v856 - (char *)v855[0];
      if (((char *)v856 - (char *)v855[0]) >> 3 > v394)
        v394 = v395 >> 3;
      if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF0)
        v396 = 0xFFFFFFFFFFFFFFFLL;
      else
        v396 = v394;
      if (v396 >> 60)
        goto LABEL_971;
      v376 = (gss::Allocator *)operator new(16 * v396);
      v397 = (int8x16_t *)((char *)v376 + 16 * v393);
      v365 = *(int8x16_t *)&dest.data;
      *v397 = *(int8x16_t *)&dest.data;
      if (v365.i64[1])
      {
        v398 = (unint64_t *)(v365.i64[1] + 8);
        do
          v399 = __ldxr(v398);
        while (__stxr(v399 + 1, v398));
        v387 = (int8x16_t *)v855[1];
      }
      v391 = v397 + 1;
      if (v387 == v392)
      {
        v855[0] = (char *)v376 + 16 * v393;
        v856 = (void (*)(uint64_t, uint64_t, double))((char *)v376 + 16 * v396);
      }
      else
      {
        v400 = v387;
        do
        {
          v401 = v400[-1];
          --v400;
          v365 = v401;
          v397[-1] = v401;
          --v397;
          v400->i64[0] = 0;
          v400->i64[1] = 0;
        }
        while (v400 != v392);
        v855[0] = v397;
        v855[1] = v391;
        v856 = (void (*)(uint64_t, uint64_t, double))((char *)v376 + 16 * v396);
        do
        {
          v402 = (std::__shared_weak_count *)v387[-1].i64[1];
          if (v402)
          {
            v403 = (unint64_t *)&v402->__shared_owners_;
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (!v404)
            {
              ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
              std::__shared_weak_count::__release_weak(v402);
            }
          }
          --v387;
        }
        while (v387 != v392);
      }
      if (v392)
        operator delete(v392);
LABEL_472:
      v855[1] = v391;
      v406 = *(_QWORD *)components;
      v405 = *(_QWORD *)&components[8];
      *(_QWORD *)src = *(_QWORD *)components;
      *(_QWORD *)&src[8] = *(_QWORD *)&components[8];
      if (*(_QWORD *)&components[8])
      {
        v407 = (unint64_t *)(*(_QWORD *)&components[8] + 8);
        do
          v408 = __ldxr(v407);
        while (__stxr(v408 + 1, v407));
      }
      v409 = dest.data;
      v410 = (std::__shared_weak_count *)dest.height;
      *(_QWORD *)&src[16] = dest.data;
      *(_QWORD *)&src[24] = dest.height;
      if (dest.height)
      {
        v411 = (unint64_t *)(dest.height + 8);
        do
          v412 = __ldxr(v411);
        while (__stxr(v412 + 1, v411));
      }
      v413 = (int8x16_t *)v849;
      v414 = (int8x16_t *)v850;
      v415 = (uint64_t *)v849;
      if (v849 != v850)
      {
        v415 = (uint64_t *)v849;
        while (v406 != *v415)
        {
          v415 += 4;
          if (v415 == v850)
            goto LABEL_486;
        }
      }
      if (v415 != v850)
      {
        v359 = v814;
        v361 = v809;
        if (!v410)
          goto LABEL_519;
LABEL_516:
        v432 = (unint64_t *)&v410->__shared_owners_;
        do
          v433 = __ldaxr(v432);
        while (__stlxr(v433 - 1, v432));
        if (v433)
        {
LABEL_519:
          v434 = *(std::__shared_weak_count **)&src[8];
          if (*(_QWORD *)&src[8])
            goto LABEL_520;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
          std::__shared_weak_count::__release_weak(v410);
          v434 = *(std::__shared_weak_count **)&src[8];
          if (*(_QWORD *)&src[8])
          {
LABEL_520:
            v435 = (unint64_t *)&v434->__shared_owners_;
            do
              v436 = __ldaxr(v435);
            while (__stlxr(v436 - 1, v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
        }
        v443 = v864;
        if (v864)
        {
          v444 = (unint64_t *)&v864->__shared_owners_;
          do
            v445 = __ldaxr(v444);
          while (__stlxr(v445 - 1, v444));
          if (!v445)
          {
            ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
            std::__shared_weak_count::__release_weak(v443);
          }
        }
        if (BYTE6(v857[1]))
          _ZF = 1;
        else
          _ZF = v857[0] == 0;
        if (!_ZF)
        {
          v447 = gss::Allocator::instance(v376);
          (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v447 + 40))(v447, v857[0], WORD2(v857[1]));
        }
LABEL_547:
        v448 = *((_QWORD *)v362 + 3);
        if (v448)
        {
LABEL_550:
          v365.i32[0] = *(_DWORD *)(v448 + 8);
          v366.i64[0] = *(_QWORD *)v448;
          v451 = *((_QWORD *)v362 + 2);
          if (v451 < 2)
          {
            v450 = vextq_s8(vextq_s8(v365, v365, 4uLL), v366, 0xCuLL);
            v450.i32[3] = v450.i32[0];
          }
          else
          {
            v450 = vextq_s8(v365, v366, 0xCuLL);
            v450.i32[0] = *(_DWORD *)(v448 + 8);
            v450.i32[3] = v450.i32[0];
            v452 = 2;
            for (k = 1; k < v451; k = v452++)
            {
              v454 = (float32x2_t *)(v448 + 32 * k);
              *(float32x2_t *)v365.i8 = *v454;
              v455 = (float32x4_t)v450;
              v455.i32[0] = v454[1].i32[0];
              v456 = vextq_s8(v365, v365, 0xCuLL);
              v457 = (float32x4_t)v456;
              v457.i32[0] = v450.i32[0];
              *(float32x2_t *)v366.i8 = vminnm_f32(*v454, *(float32x2_t *)v366.i8);
              v457.i32[3] = v455.i32[0];
              v365 = (int8x16_t)vcgtq_f32(v457, v455);
              v456.i32[0] = v455.i32[0];
              v456.i32[3] = v455.i32[0];
              v450 = vbslq_s8(v365, v456, v450);
            }
          }
        }
        else
        {
          v449 = geo::prepareAlignedVertices(v362, v368);
          v450 = *(int8x16_t *)color;
          v366 = v822;
          if (v449)
          {
            v448 = *((_QWORD *)v362 + 3);
            goto LABEL_550;
          }
        }
        *(int8x16_t *)color = v450;
        v822 = v366;
        v458 = (char *)dest.data;
        if (*((_BYTE *)dest.data + 88))
        {
          v459 = v366;
          v459.i32[2] = v450.i32[0];
          v460 = (float32x4_t)v459;
          v460.i32[3] = HIDWORD(*(_OWORD *)((char *)dest.data + 92));
          v461 = *(float32x4_t *)((char *)dest.data + 92);
          v461.i32[3] = v450.i32[1];
          v459.i32[3] = v450.i32[1];
          *(int8x16_t *)((char *)dest.data + 92) = vbslq_s8((int8x16_t)vcgtq_f32(v461, v460), v459, *(int8x16_t *)((char *)dest.data + 92));
          *(float32x2_t *)(v458 + 108) = vmaxnm_f32(*(float32x2_t *)(v458 + 108), (float32x2_t)*(_OWORD *)&vextq_s8(v450, v450, 8uLL));
        }
        else
        {
          *((_BYTE *)dest.data + 88) = 1;
          *(_QWORD *)(v458 + 92) = v366.i64[0];
          *(int8x16_t *)(v458 + 100) = v450;
        }
        v462 = dest.height;
        *(_QWORD *)src = v458;
        *(_QWORD *)&src[8] = dest.height;
        if (dest.height)
        {
          v463 = (unint64_t *)(dest.height + 8);
          do
            v464 = __ldxr(v463);
          while (__stxr(v464 + 1, v463));
        }
        *(_QWORD *)&src[16] = v361;
        v465 = v853;
        if ((unint64_t)v853 < v854)
        {
          *v853 = v362;
          v465[1] = (geo *)v458;
          v465[2] = (geo *)v462;
          v465[3] = v361;
          v853 = v465 + 4;
          goto LABEL_587;
        }
        v466 = (geo **)v852;
        v467 = ((char *)v853 - (_BYTE *)v852) >> 5;
        v468 = v467 + 1;
        if ((unint64_t)(v467 + 1) >> 59)
          abort();
        if ((uint64_t)(v854 - (_QWORD)v852) >> 4 > v468)
          v468 = (uint64_t)(v854 - (_QWORD)v852) >> 4;
        if (v854 - (unint64_t)v852 >= 0x7FFFFFFFFFFFFFE0)
          v469 = 0x7FFFFFFFFFFFFFFLL;
        else
          v469 = v468;
        if (!(v469 >> 59))
        {
          v470 = (char *)operator new(32 * v469);
          v471 = &v470[32 * v467];
          *(_QWORD *)v471 = v362;
          *(_OWORD *)(v471 + 8) = *(_OWORD *)src;
          v472 = &v470[32 * v469];
          *(_QWORD *)src = 0;
          *(_QWORD *)&src[8] = 0;
          *((_QWORD *)v471 + 3) = v361;
          v473 = (geo **)(v471 + 32);
          if (v465 == v466)
          {
            v852 = &v470[32 * v467];
            v854 = (unint64_t)v472;
            if (v465)
              goto LABEL_581;
          }
          else
          {
            v474 = 0;
            do
            {
              v475 = &v471[v474 * 8];
              v476 = &v465[v474];
              *((_OWORD *)v475 - 2) = *(_OWORD *)&v465[v474 - 4];
              *((_QWORD *)v475 - 2) = v465[v474 - 2];
              *(v476 - 3) = 0;
              *(v476 - 2) = 0;
              *((_QWORD *)v475 - 1) = v465[v474 - 1];
              v474 -= 4;
            }
            while (&v465[v474] != v466);
            v852 = &v471[v474 * 8];
            v853 = (geo **)(v471 + 32);
            v854 = (unint64_t)v472;
            do
            {
              v477 = (std::__shared_weak_count *)*(v465 - 2);
              if (v477)
              {
                v478 = (unint64_t *)&v477->__shared_owners_;
                do
                  v479 = __ldaxr(v478);
                while (__stlxr(v479 - 1, v478));
                if (!v479)
                {
                  ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
                  std::__shared_weak_count::__release_weak(v477);
                }
              }
              v465 -= 4;
            }
            while (v465 != v466);
            v465 = v466;
            if (v466)
LABEL_581:
              operator delete(v465);
          }
          v480 = *(std::__shared_weak_count **)&src[8];
          v853 = v473;
          if (*(_QWORD *)&src[8])
          {
            v481 = (unint64_t *)(*(_QWORD *)&src[8] + 8);
            do
              v482 = __ldaxr(v481);
            while (__stlxr(v482 - 1, v481));
            if (!v482)
            {
              ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
              std::__shared_weak_count::__release_weak(v480);
            }
          }
LABEL_587:
          v483 = (char *)*((_QWORD *)&v805 + 1);
          if (*((_QWORD *)&v805 + 1) < (unint64_t)v784)
          {
            *(_QWORD *)(*((_QWORD *)&v805 + 1) + 416) = 0;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 384) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 400) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 352) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 368) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 320) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 336) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 288) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 304) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 256) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 272) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 224) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 240) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 192) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 208) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 160) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 176) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 128) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 144) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 96) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 112) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 64) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 80) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 32) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 48) = 0u;
            **((_OWORD **)&v805 + 1) = 0u;
            *(_OWORD *)(*((_QWORD *)&v805 + 1) + 16) = 0u;
            *(_QWORD *)(*((_QWORD *)&v805 + 1) + 424) = *(_QWORD *)(v360 + 40);
            v484 = *((_QWORD *)&v805 + 1) + 432;
            goto LABEL_600;
          }
          v485 = (void *)v805;
          v486 = 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)&v805 + 1) - v805) >> 4) + 1;
          if (v486 > 0x97B425ED097B42)
            abort();
          if (0x97B425ED097B426 * ((uint64_t)((uint64_t)v784 - v805) >> 4) > v486)
            v486 = 0x97B425ED097B426 * ((uint64_t)((uint64_t)v784 - v805) >> 4);
          v487 = 0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v784 - v805) >> 4) >= 0x4BDA12F684BDA1
               ? 0x97B425ED097B42
               : v486;
          if (v487 <= 0x97B425ED097B42)
          {
            v488 = (char *)operator new(432 * v487);
            v489 = &v488[16 * ((uint64_t)(*((_QWORD *)&v805 + 1) - v805) >> 4)];
            *((_QWORD *)v489 + 52) = 0;
            *((_OWORD *)v489 + 24) = 0u;
            *((_OWORD *)v489 + 25) = 0u;
            *((_OWORD *)v489 + 22) = 0u;
            *((_OWORD *)v489 + 23) = 0u;
            *((_OWORD *)v489 + 20) = 0u;
            *((_OWORD *)v489 + 21) = 0u;
            *((_OWORD *)v489 + 18) = 0u;
            *((_OWORD *)v489 + 19) = 0u;
            *((_OWORD *)v489 + 16) = 0u;
            *((_OWORD *)v489 + 17) = 0u;
            *((_OWORD *)v489 + 14) = 0u;
            *((_OWORD *)v489 + 15) = 0u;
            *((_OWORD *)v489 + 12) = 0u;
            *((_OWORD *)v489 + 13) = 0u;
            *((_OWORD *)v489 + 10) = 0u;
            *((_OWORD *)v489 + 11) = 0u;
            *((_OWORD *)v489 + 8) = 0u;
            *((_OWORD *)v489 + 9) = 0u;
            *((_OWORD *)v489 + 6) = 0u;
            *((_OWORD *)v489 + 7) = 0u;
            *((_OWORD *)v489 + 4) = 0u;
            *((_OWORD *)v489 + 5) = 0u;
            *((_OWORD *)v489 + 2) = 0u;
            *((_OWORD *)v489 + 3) = 0u;
            *(_OWORD *)v489 = 0u;
            *((_OWORD *)v489 + 1) = 0u;
            *((_QWORD *)v489 + 53) = *(_QWORD *)(v360 + 40);
            v490 = v489;
            if (*((_QWORD *)&v805 + 1) != (_QWORD)v805)
            {
              do
              {
                v490 -= 432;
                v483 -= 432;
                memcpy(v490, v483, 0x1B0uLL);
              }
              while (v483 != (char *)v805);
            }
            v784 = (void **)&v488[432 * v487];
            v484 = (uint64_t)(v489 + 432);
            *(_QWORD *)&v805 = v490;
            if (v485)
              operator delete(v485);
LABEL_600:
            *(_QWORD *)&v491 = v805;
            *((_QWORD *)&v491 + 1) = v484;
            v805 = v491;
            v492 = *(geo **)v362;
            v493 = (const unsigned __int8 *)*((_QWORD *)v362 + 1);
            v494 = geo::A3DGetMetadataHeaderCount(*(geo **)v362, v493);
            if (v494 && (v495 = geo::A3DGetMetadataHeaders(v492, v493)) != 0)
            {
              v496 = 0;
              v497 = (unsigned __int8 *)v495;
              while (1)
              {
                v498 = *v497;
                v497 += 17;
                if (v498 == 1)
                  break;
                if (v494 == ++v496)
                  goto LABEL_605;
              }
              memcpy((void *)(v484 - 432), (char *)v492 + *(unsigned int *)(v495 + 17 * v496 + 1), 0x1A8uLL);
              v500 = (std::__shared_weak_count *)dest.height;
              if (!dest.height)
              {
LABEL_611:
                v503 = *(std::__shared_weak_count **)&components[8];
                if (*(_QWORD *)&components[8])
                {
                  v504 = (unint64_t *)(*(_QWORD *)&components[8] + 8);
                  do
                    v505 = __ldaxr(v504);
                  while (__stlxr(v505 - 1, v504));
                  if (!v505)
                  {
                    ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
                    std::__shared_weak_count::__release_weak(v503);
                  }
                }
                goto LABEL_412;
              }
            }
            else
            {
LABEL_605:
              *(_QWORD *)&v499 = v805;
              *((_QWORD *)&v499 + 1) = v484 - 432;
              v805 = v499;
              v500 = (std::__shared_weak_count *)dest.height;
              if (!dest.height)
                goto LABEL_611;
            }
            v501 = (unint64_t *)&v500->__shared_owners_;
            do
              v502 = __ldaxr(v501);
            while (__stlxr(v502 - 1, v501));
            if (!v502)
            {
              ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
              std::__shared_weak_count::__release_weak(v500);
            }
            goto LABEL_611;
          }
        }
LABEL_971:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
LABEL_486:
      if (v850 < (uint64_t *)v851)
      {
        *v850 = v406;
        v414->i64[1] = v405;
        if (v405)
        {
          v416 = (unint64_t *)(v405 + 8);
          do
            v417 = __ldxr(v416);
          while (__stxr(v417 + 1, v416));
        }
        v414[1].i64[0] = (uint64_t)v409;
        v414[1].i64[1] = (uint64_t)v410;
        v359 = v814;
        if (v410)
        {
          v418 = (unint64_t *)&v410->__shared_owners_;
          do
            v419 = __ldxr(v418);
          while (__stxr(v419 + 1, v418));
        }
        v420 = v414 + 2;
        v361 = v809;
LABEL_515:
        v850 = (uint64_t *)v420;
        v410 = *(std::__shared_weak_count **)&src[24];
        if (!*(_QWORD *)&src[24])
          goto LABEL_519;
        goto LABEL_516;
      }
      v421 = ((char *)v850 - (_BYTE *)v849) >> 5;
      v422 = v421 + 1;
      if ((unint64_t)(v421 + 1) >> 59)
        abort();
      v423 = v851 - (_BYTE *)v849;
      if ((v851 - (_BYTE *)v849) >> 4 > v422)
        v422 = v423 >> 4;
      if ((unint64_t)v423 >= 0x7FFFFFFFFFFFFFE0)
        v424 = 0x7FFFFFFFFFFFFFFLL;
      else
        v424 = v422;
      if (v424)
      {
        if (v424 >> 59)
          goto LABEL_971;
        v376 = (gss::Allocator *)operator new(32 * v424);
      }
      else
      {
        v376 = 0;
      }
      v425 = (int8x16_t *)((char *)v376 + 32 * v421);
      v425->i64[0] = v406;
      v425->i64[1] = v405;
      if (v405)
      {
        v426 = (unint64_t *)(v405 + 8);
        do
          v427 = __ldxr(v426);
        while (__stxr(v427 + 1, v426));
      }
      v425[1].i64[0] = (uint64_t)v409;
      v425[1].i64[1] = (uint64_t)v410;
      v358 = v801;
      v359 = v814;
      if (v410)
      {
        v428 = (unint64_t *)&v410->__shared_owners_;
        do
          v429 = __ldxr(v428);
        while (__stxr(v429 + 1, v428));
      }
      v420 = v425 + 2;
      if (v413 == v414)
      {
        v849 = v425;
        v851 = (char *)v376 + 32 * v424;
        v361 = v809;
        if (!v413)
          goto LABEL_515;
LABEL_514:
        operator delete(v413);
        goto LABEL_515;
      }
      do
      {
        v430 = v414[-2];
        v414 -= 2;
        v425[-2] = v430;
        v425 -= 2;
        v414->i64[0] = 0;
        v414->i64[1] = 0;
        v365 = v414[1];
        v425[1] = v365;
        v414[1].i64[0] = 0;
        v414[1].i64[1] = 0;
      }
      while (v414 != v413);
      v413 = (int8x16_t *)v849;
      v431 = (int8x16_t *)v850;
      v849 = v425;
      v850 = (uint64_t *)v420;
      v851 = (char *)v376 + 32 * v424;
      v361 = v809;
      if (v431 == v413)
      {
LABEL_513:
        if (!v413)
          goto LABEL_515;
        goto LABEL_514;
      }
      while (2)
      {
        v437 = (std::__shared_weak_count *)v431[-1].i64[1];
        if (!v437)
          goto LABEL_529;
        v438 = (unint64_t *)&v437->__shared_owners_;
        do
          v439 = __ldaxr(v438);
        while (__stlxr(v439 - 1, v438));
        if (!v439)
        {
          ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
          std::__shared_weak_count::__release_weak(v437);
          v440 = (std::__shared_weak_count *)v431[-2].i64[1];
          if (v440)
          {
LABEL_530:
            v441 = (unint64_t *)&v440->__shared_owners_;
            do
              v442 = __ldaxr(v441);
            while (__stlxr(v442 - 1, v441));
            if (!v442)
            {
              ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
              std::__shared_weak_count::__release_weak(v440);
            }
          }
        }
        else
        {
LABEL_529:
          v440 = (std::__shared_weak_count *)v431[-2].i64[1];
          if (v440)
            goto LABEL_530;
        }
        v431 -= 2;
        if (v431 == v413)
          goto LABEL_513;
        continue;
      }
    }
LABEL_412:
    if (++v359 != v358)
      continue;
    break;
  }
  v507 = (geo **)v852;
  v772 = v853;
  if (v852 != v853)
  {
    __asm { FMOV            V1.4S, #1.0 }
    v511 = vdupq_n_s32(0x477FFF00u);
    v767 = _Q1;
    v768 = (float32x4_t)v511;
    while (1)
    {
      v815 = v507[3];
      v512 = *v507;
      v513 = (uint64_t)v507[1];
      v780 = v507;
      v511.i64[0] = *(_QWORD *)(v513 + 92);
      v511.i32[2] = *(_DWORD *)(v513 + 100);
      *(int32x4_t *)colora = v511;
      v511.i64[0] = *(_QWORD *)(v513 + 104);
      v511.i32[2] = *(_DWORD *)(v513 + 112);
      v810 = (float32x4_t)v511;
      v515 = v778;
      v798 = v512;
      if (!v512)
        goto LABEL_864;
      v823 = *(_QWORD *)v512;
      if (!*((_QWORD *)v512 + 3) && (geo::prepareAlignedVertices(v512, v514) & 1) == 0)
        goto LABEL_864;
      v516 = *((_QWORD *)v512 + 2);
      v517 = *(_QWORD *)(*(_QWORD *)(v513 + 8) - 8);
      v518 = **(_QWORD **)(v517 + 64);
      v519 = *(_QWORD *)(v518 + 8);
      v520 = (*(_QWORD *)(v518 + 48) - *(_QWORD *)(v518 + 40)) / v519;
      v521 = v520 + v516;
      if (v520 + v516 >= 0x10000)
      {
        ggl::MeshVendor<ggl::Landmark::LandmarkMesh>::_allocateNewMesh(v513);
        v517 = *(_QWORD *)(*(_QWORD *)(v513 + 8) - 8);
        v516 = *((_QWORD *)v512 + 2);
        v518 = **(_QWORD **)(v517 + 64);
        v519 = *(_QWORD *)(v518 + 8);
        v520 = (*(_QWORD *)(v518 + 48) - *(_QWORD *)(v518 + 40)) / v519;
        v521 = v516 + v520;
      }
      v522 = v519 * v521;
      v523 = *(_QWORD *)(v518 + 72);
      v524 = *(_QWORD *)(v518 + 80) - v523;
      if (v522 != v524)
      {
        if (v522 <= v524)
        {
          if (v522 < v524)
            *(_QWORD *)(v518 + 80) = v523 + v522;
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v518 + 72, v522 - v524);
        }
        v525 = *(std::__shared_weak_count **)(v518 + 32);
        *(_QWORD *)(v518 + 24) = 0;
        *(_QWORD *)(v518 + 32) = 0;
        if (v525)
        {
          v526 = (unint64_t *)&v525->__shared_owners_;
          do
            v527 = __ldaxr(v526);
          while (__stlxr(v527 - 1, v526));
          if (!v527)
          {
            ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
            std::__shared_weak_count::__release_weak(v525);
          }
        }
        *(_QWORD *)(v518 + 120) = 0;
        *(_DWORD *)(v518 + 112) = 0;
        v528 = *(_QWORD *)(v518 + 80) - *(_QWORD *)(v518 + 72);
        *(_QWORD *)(v518 + 40) = 0;
        *(_QWORD *)(v518 + 48) = v528;
        *(_QWORD *)(v518 + 56) = 0;
        *(_QWORD *)(v518 + 64) = v528;
        v518 = **(_QWORD **)(v517 + 64);
        v516 = *((_QWORD *)v798 + 2);
        v521 = v516 + v520;
      }
      v529 = 0;
      *(_QWORD *)&src[8] = 0;
      *(_QWORD *)src = 0;
      v530 = *(_QWORD *)(v518 + 8);
      v531 = v530 * v521;
      if (v531 != v530 * v520)
        v529 = *(_QWORD *)(v518 + 72) + v530 * v520;
      *(_QWORD *)&v532 = 0;
      *((_QWORD *)&v532 + 1) = v518;
      *(_OWORD *)src = v532;
      *(_QWORD *)&src[16] = v530 * v520;
      *(_QWORD *)&src[24] = v531;
      *(_QWORD *)&src[40] = v529;
      *(_WORD *)&src[32] = 1;
      if (v516)
      {
        v533 = 0;
        v534.i32[3] = v767.i32[3];
        v535 = vdivq_f32(v767, vsubq_f32(v810, *(float32x4_t *)colora));
        v536 = 1;
        do
        {
          v537 = *((_QWORD *)v798 + 3) + 32 * v533;
          v538 = *(float *)(v537 + 20);
          v539 = (int)(float)(*(float *)(v537 + 24) * 65535.0);
          v540 = (int)(float)(*(float *)(v537 + 28) * 65535.0);
          v541 = *(float *)(v537 + 16);
          v542 = (int)(float)(*(float *)(v537 + 12) * 127.0);
          v543 = v529 + 16 * v533;
          v534.i64[0] = *(_QWORD *)v537;
          v534.i32[2] = *(_DWORD *)(v537 + 8);
          v534 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(vsubq_f32(v534, *(float32x4_t *)colora), vmulq_f32(v768, v535)));
          *(int16x4_t *)v534.f32 = vmovn_s32((int32x4_t)v534);
          *(_WORD *)(v543 + 4) = v534.i16[2];
          *(_DWORD *)v543 = v534.i32[0];
          *(_WORD *)(v543 + 6) = -1;
          *(_WORD *)(v543 + 8) = v539;
          *(_WORD *)(v543 + 10) = v540;
          *(_BYTE *)(v543 + 12) = v542;
          *(_BYTE *)(v543 + 13) = (int)(float)(v541 * 127.0);
          *(_WORD *)(v543 + 14) = (int)(float)(v538 * 127.0);
          v533 = v536++;
        }
        while (*((_QWORD *)v798 + 2) > v533);
      }
      if (v778)
      {
        objc_msgSend(v515, "textureManager", v798);
      }
      else
      {
        v864 = 0;
        v863 = 0;
      }
      v544 = (std::__shared_weak_count *)operator new(0x58uLL);
      v544->__shared_owners_ = 0;
      v544->__shared_weak_owners_ = 0;
      v544->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
      v544[1].__shared_weak_owners_ = 0;
      v544[2].__vftable = 0;
      v544[1].__shared_owners_ = 0;
      LODWORD(v544[2].__shared_owners_) = 0;
      v544[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
      *(_QWORD *)&v545 = 0x100000001;
      *((_QWORD *)&v545 + 1) = 0x100000001;
      *(_OWORD *)((char *)&v544[2].__shared_owners_ + 4) = v545;
      *(std::__shared_weak_count_vtbl **)((char *)&v544[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
      HIDWORD(v544[3].__shared_owners_) = 0;
      v861 = (uint64_t)&v544[1];
      v862 = (uint64_t)v544;
      v546 = v823;
      if (*(_WORD *)(v823 + 12))
        break;
LABEL_838:
      v674 = (unint64_t *)&v544->__shared_owners_;
      do
        v675 = __ldaxr(v674);
      while (__stlxr(v675 - 1, v674));
      if (v675)
        goto LABEL_841;
      ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
      std::__shared_weak_count::__release_weak(v544);
      v676 = v864;
      if (v864)
        goto LABEL_844;
LABEL_847:
      if (*(_QWORD *)&src[40])
        goto LABEL_848;
LABEL_864:

      geo::A3DFileDelete(v798, v686);
      v507 = v780 + 4;
      if (v780 + 4 == v772)
        goto LABEL_865;
    }
    v770 = v515;
    v547 = 0;
    v548 = v823 + 14;
    dataa = vdupq_n_s16(v520);
    v811 = (int64x2_t *)v513;
    v802 = (_QWORD *)(v513 + 48);
    colorb = v823 + 14;
    while (1)
    {
      v549 = (unsigned int *)(v548 + 145 * v547);
      v550 = *v549;
      v551 = v549[1];
      v552 = *(_QWORD *)(v517 + 96);
      v553 = *(_QWORD *)(v552 + 8);
      v554 = (*(_QWORD *)(v552 + 48) - *(_QWORD *)(v552 + 40)) / v553;
      v555 = v554 + (v551 >> 1);
      v556 = v553 * v555;
      v557 = *(_QWORD *)(v552 + 72);
      v558 = *(_QWORD *)(v552 + 80) - v557;
      if (v553 * v555 != v558)
      {
        if (v553 * v555 <= v558)
        {
          if (v556 < v558)
            *(_QWORD *)(v552 + 80) = v557 + v556;
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v552 + 72, v553 * v555 - v558);
        }
        v559 = *(std::__shared_weak_count **)(v552 + 32);
        *(_QWORD *)(v552 + 24) = 0;
        *(_QWORD *)(v552 + 32) = 0;
        if (v559)
        {
          v560 = (unint64_t *)&v559->__shared_owners_;
          do
            v561 = __ldaxr(v560);
          while (__stlxr(v561 - 1, v560));
          if (!v561)
          {
            ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
            std::__shared_weak_count::__release_weak(v559);
          }
        }
        *(_QWORD *)(v552 + 120) = 0;
        *(_DWORD *)(v552 + 112) = 0;
        v557 = *(_QWORD *)(v552 + 72);
        v562 = *(_QWORD *)(v552 + 80) - v557;
        *(_QWORD *)(v552 + 40) = 0;
        *(_QWORD *)(v552 + 48) = v562;
        *(_QWORD *)(v552 + 56) = 0;
        *(_QWORD *)(v552 + 64) = v562;
        v553 = *(_QWORD *)(v552 + 8);
        v556 = v553 * v555;
        v546 = v823;
      }
      dest.height = 0;
      dest.data = 0;
      v563 = v553 * v554;
      *(_QWORD *)&v564 = 0;
      *((_QWORD *)&v564 + 1) = v552;
      v565 = (int16x8_t *)(v557 + v563);
      if (v556 == v563)
        v565 = 0;
      *(_OWORD *)&dest.data = v564;
      dest.width = v563;
      dest.rowBytes = v556;
      v845 = (const char *)v565;
      LOWORD(v844) = 1;
      if (v551 >= 2)
      {
        if (v551 >> 1 <= 1)
          v566 = 1;
        else
          v566 = v551 >> 1;
        if (v566 <= 0xF || (unint64_t)v565 - v546 - v550 < 0x20)
        {
          v567 = 0;
LABEL_672:
          v568 = v566 - v567;
          v569 = v567;
          v570 = &v565->i16[v569];
          v571 = (__int16 *)(v546 + v550 + v569 * 2);
          do
          {
            v572 = *v571++;
            *v570++ = v572 + v520;
            --v568;
          }
          while (v568);
          goto LABEL_674;
        }
        v567 = v566 & 0x7FFFFFF0;
        v603 = v565 + 1;
        v604 = (int16x8_t *)(v823 + 16 + v550);
        v605 = v567;
        do
        {
          v606 = vaddq_s16(*v604, dataa);
          v603[-1] = vaddq_s16(v604[-1], dataa);
          *v603 = v606;
          v603 += 2;
          v604 += 2;
          v605 -= 16;
        }
        while (v605);
        if (v566 != v567)
          goto LABEL_672;
      }
LABEL_674:
      v860 = 0uLL;
      v573 = colorb + 145 * v547;
      v575 = *(_DWORD *)(v573 + 13);
      v574 = (unsigned int *)(v573 + 13);
      if (v575)
      {
        v576 = v811;
        v577 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v823 + *(unsigned int *)(colorb + 145 * v547 + 9), *v574);
        v578 = (std::__shared_weak_count *)v862;
        v858[0] = v861;
        v858[1] = v862;
        if (v862)
        {
          v579 = (unint64_t *)(v862 + 8);
          do
            v580 = __ldxr(v579);
          while (__stxr(v580 + 1, v579));
        }
        textureWithData(components, v577, v858, 1);
        v581 = *(_OWORD *)components;
        *(_QWORD *)components = 0;
        *(_QWORD *)&components[8] = 0;
        v860 = v581;
        if (v578)
        {
          v582 = (unint64_t *)&v578->__shared_owners_;
          do
            v583 = __ldaxr(v582);
          while (__stlxr(v583 - 1, v582));
          if (!v583)
          {
            ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
            std::__shared_weak_count::__release_weak(v578);
          }
        }

        goto LABEL_719;
      }
      v584 = strlen((const char *)(colorb + 145 * v547 + 17));
      if (v584 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v585 = v584;
      if (v584 >= 0x17)
      {
        v587 = (v584 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v584 | 7) != 0x17)
          v587 = v584 | 7;
        v588 = v587 + 1;
        v586 = operator new(v587 + 1);
        *(_QWORD *)&components[8] = v585;
        *(_QWORD *)&components[16] = v588 | 0x8000000000000000;
        *(_QWORD *)components = v586;
LABEL_691:
        memmove(v586, (const void *)(colorb + 145 * v547 + 17), v585);
        goto LABEL_692;
      }
      components[23] = v584;
      v586 = components;
      if (v584)
        goto LABEL_691;
LABEL_692:
      v586[v585] = 0;
      v589 = v863;
      v590 = (std::__shared_weak_count *)v862;
      v859[0] = v861;
      v859[1] = v862;
      if (v862)
      {
        v591 = (unint64_t *)(v862 + 8);
        do
          v592 = __ldxr(v591);
        while (__stxr(v592 + 1, v591));
      }
      md::TextureManager::texture(v857, v589, (uint64_t)components, v859, 0, v785);
      v576 = v811;
      if (!v590)
        goto LABEL_699;
      v593 = (unint64_t *)&v590->__shared_owners_;
      do
        v594 = __ldaxr(v593);
      while (__stlxr(v594 - 1, v593));
      if (!v594)
      {
        ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
        std::__shared_weak_count::__release_weak(v590);
        v595 = v857[0];
        if (v857[0])
        {
LABEL_700:
          v597 = v595[4];
          v596 = v595[5];
          if (v596)
          {
            v598 = (unint64_t *)(v596 + 8);
            do
              v599 = __ldxr(v598);
            while (__stxr(v599 + 1, v598));
          }
          v600 = (std::__shared_weak_count *)*((_QWORD *)&v860 + 1);
          *(_QWORD *)&v860 = v597;
          *((_QWORD *)&v860 + 1) = v596;
          if (v600)
          {
            v601 = (unint64_t *)&v600->__shared_owners_;
            do
              v602 = __ldaxr(v601);
            while (__stlxr(v602 - 1, v601));
            if (!v602)
            {
              ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
              std::__shared_weak_count::__release_weak(v600);
            }
          }
        }
      }
      else
      {
LABEL_699:
        v595 = v857[0];
        if (v857[0])
          goto LABEL_700;
      }
      v607 = (std::__shared_weak_count *)v857[1];
      if (!v857[1])
        goto LABEL_717;
      v608 = (unint64_t *)((char *)v857[1] + 8);
      do
        v609 = __ldaxr(v608);
      while (__stlxr(v609 - 1, v608));
      if (v609)
      {
LABEL_717:
        if ((components[23] & 0x80000000) == 0)
          goto LABEL_719;
LABEL_718:
        operator delete(*(void **)components);
        goto LABEL_719;
      }
      ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
      std::__shared_weak_count::__release_weak(v607);
      if ((components[23] & 0x80000000) != 0)
        goto LABEL_718;
LABEL_719:
      v610 = (_QWORD *)v576[2].i64[0];
      v611 = (_QWORD *)v576[2].i64[1];
      v612 = v610;
      if (v610 != v611)
      {
        v612 = (_QWORD *)v576[2].i64[0];
        while ((_QWORD)v860 != *v612)
        {
          v612 += 5;
          if (v612 == v611)
            goto LABEL_725;
        }
      }
      if (v612 == v611)
      {
LABEL_725:
        memset(v857, 0, sizeof(v857));
        if (v610 == v611)
        {
          v612 = v610;
        }
        else
        {
          v612 = v610;
          while ((_QWORD)v860 != *v612)
          {
            v612 += 5;
            if (v612 == v611)
              goto LABEL_732;
          }
        }
        if (v612 == v611)
        {
LABEL_732:
          if ((unint64_t)v611 >= *v802)
          {
            v616 = 0xCCCCCCCCCCCCCCCDLL * (v611 - v610);
            if (v616 + 1 > 0x666666666666666)
              abort();
            v617 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v802 - (_QWORD)v610) >> 3);
            v618 = 2 * v617;
            if (2 * v617 <= v616 + 1)
              v618 = v616 + 1;
            if (v617 >= 0x333333333333333)
              v619 = 0x666666666666666;
            else
              v619 = v618;
            v875 = v802;
            if (v619)
            {
              if (v619 > 0x666666666666666)
                goto LABEL_971;
              v620 = (char *)operator new(40 * v619);
            }
            else
            {
              v620 = 0;
            }
            v621 = &v620[40 * v616];
            *(_QWORD *)components = v620;
            *(_QWORD *)&components[8] = v621;
            *(_QWORD *)&components[16] = v621;
            *(_QWORD *)&components[24] = &v620[40 * v619];
            v622 = *((_QWORD *)&v860 + 1);
            *(_QWORD *)v621 = v860;
            *((_QWORD *)v621 + 1) = v622;
            if (v622)
            {
              v623 = (unint64_t *)(v622 + 8);
              do
                v624 = __ldxr(v623);
              while (__stxr(v624 + 1, v623));
            }
            v625 = &v620[40 * v616];
            *((_QWORD *)v625 + 2) = 0;
            *((_QWORD *)v625 + 3) = 0;
            v625 += 16;
            *((_QWORD *)v625 + 2) = 0;
            std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>::__init_with_size[abi:nn180100]<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*,std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*>(v625, 0, 0, 0);
            v626 = *(_QWORD **)&components[8];
            v627 = *(_QWORD *)&components[16] + 40;
            *(_QWORD *)&components[16] += 40;
            v629 = v576[2].i64[0];
            v628 = v576[2].u64[1];
            if (v628 == v629)
            {
              v631 = vdupq_n_s64(v628);
            }
            else
            {
              do
              {
                v630 = *(_OWORD *)(v628 - 40);
                v628 -= 40;
                *(_OWORD *)(v626 - 5) = v630;
                v626 -= 5;
                *(_QWORD *)v628 = 0;
                *(_QWORD *)(v628 + 8) = 0;
                v626[2] = 0;
                v626[3] = 0;
                v626[4] = 0;
                *((_OWORD *)v626 + 1) = *(_OWORD *)(v628 + 16);
                v626[4] = *(_QWORD *)(v628 + 32);
                *(_QWORD *)(v628 + 16) = 0;
                *(_QWORD *)(v628 + 24) = 0;
                *(_QWORD *)(v628 + 32) = 0;
              }
              while (v628 != v629);
              v631 = v576[2];
              v627 = *(_QWORD *)&components[16];
            }
            v576[2].i64[0] = (uint64_t)v626;
            v576[2].i64[1] = v627;
            *(int64x2_t *)&components[8] = v631;
            v632 = v576[3].i64[0];
            v576[3].i64[0] = *(_QWORD *)&components[24];
            *(_QWORD *)&components[24] = v632;
            *(_QWORD *)components = v631.i64[0];
            std::__split_buffer<std::pair<std::shared_ptr<ggl::Texture2D>,geo::linear_map<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>,std::equal_to<ggl::Landmark::LandmarkMesh *>,std::allocator<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>,std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>>>>::~__split_buffer((uint64_t)components);
            v633 = (char *)v857[0];
            v576[2].i64[1] = v627;
            v612 = (_QWORD *)(v627 - 40);
            if (v633)
            {
              for (m = (char *)v857[1]; m != v633; m -= 32)
              {
                v635 = (void *)*((_QWORD *)m - 3);
                if (v635)
                {
                  *((_QWORD *)m - 2) = v635;
                  operator delete(v635);
                }
              }
              v857[1] = v633;
              operator delete(v633);
            }
          }
          else
          {
            *v611 = v860;
            v613 = *((_QWORD *)&v860 + 1);
            v611[1] = *((_QWORD *)&v860 + 1);
            if (v613)
            {
              v614 = (unint64_t *)(v613 + 8);
              do
                v615 = __ldxr(v614);
              while (__stxr(v615 + 1, v614));
            }
            v611[2] = 0;
            v611[3] = 0;
            v611[4] = 0;
            std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>::__init_with_size[abi:nn180100]<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*,std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*>(v611 + 2, 0, 0, 0);
            v576[2].i64[1] = (uint64_t)(v611 + 5);
            v612 = v611;
          }
        }
      }
      v636 = (char *)v612[2];
      v637 = (char *)v612[3];
      v638 = v636;
      if (v636 != v637)
      {
        v638 = (char *)v612[2];
        while (v517 != *(_QWORD *)v638)
        {
          v638 += 32;
          if (v638 == v637)
            goto LABEL_769;
        }
      }
      if (v638 == v637)
      {
LABEL_769:
        v638 = (char *)v612[2];
        if (v636 != v637)
        {
          v638 = (char *)v612[2];
          while (v517 != *(_QWORD *)v638)
          {
            v638 += 32;
            if (v638 == v637)
              goto LABEL_775;
          }
        }
        if (v638 == v637)
        {
LABEL_775:
          v639 = v612[4];
          if ((unint64_t)v637 >= v639)
          {
            v641 = (v637 - v636) >> 5;
            v642 = v641 + 1;
            if ((unint64_t)(v641 + 1) >> 59)
              abort();
            v643 = v639 - (_QWORD)v636;
            if (v643 >> 4 > v642)
              v642 = v643 >> 4;
            if ((unint64_t)v643 >= 0x7FFFFFFFFFFFFFE0)
              v644 = 0x7FFFFFFFFFFFFFFLL;
            else
              v644 = v642;
            v875 = v612 + 4;
            if (v644)
            {
              if (v644 >> 59)
                goto LABEL_971;
              v645 = (char *)operator new(32 * v644);
            }
            else
            {
              v645 = 0;
            }
            v646 = &v645[32 * v641];
            *(_QWORD *)components = v645;
            *(_QWORD *)&components[8] = v646;
            *(_QWORD *)v646 = v517;
            *((_QWORD *)v646 + 1) = 0;
            *((_QWORD *)v646 + 2) = 0;
            *((_QWORD *)v646 + 3) = 0;
            v640 = v646 + 32;
            *(_QWORD *)&components[16] = v646 + 32;
            *(_QWORD *)&components[24] = &v645[32 * v644];
            if (v636 == v637)
            {
              v612[2] = v646;
              v612[3] = v640;
              v612[4] = &v645[32 * v644];
            }
            else
            {
              v647 = 0;
              do
              {
                v648 = &v646[v647];
                v649 = &v637[v647];
                *((_QWORD *)v648 - 4) = *(_QWORD *)&v637[v647 - 32];
                *((_QWORD *)v648 - 2) = 0;
                *((_QWORD *)v648 - 1) = 0;
                *(_OWORD *)(v648 - 24) = *(_OWORD *)&v637[v647 - 24];
                *((_QWORD *)v648 - 1) = *(_QWORD *)&v637[v647 - 8];
                *((_QWORD *)v649 - 3) = 0;
                *((_QWORD *)v649 - 2) = 0;
                *((_QWORD *)v649 - 1) = 0;
                v647 -= 32;
              }
              while (&v637[v647] != v636);
              v636 = (char *)v612[2];
              v650 = (char *)v612[3];
              v651 = *(_OWORD *)&components[16];
              v612[2] = &v646[v647];
              *(_OWORD *)(v612 + 3) = v651;
              v640 = (_QWORD *)v651;
              while (v650 != v636)
              {
                v652 = (void *)*((_QWORD *)v650 - 3);
                if (v652)
                {
                  *((_QWORD *)v650 - 2) = v652;
                  operator delete(v652);
                }
                v650 -= 32;
              }
            }
            if (v636)
              operator delete(v636);
          }
          else
          {
            *(_QWORD *)v637 = v517;
            *((_QWORD *)v637 + 1) = 0;
            *((_QWORD *)v637 + 2) = 0;
            *((_QWORD *)v637 + 3) = 0;
            v640 = v637 + 32;
            v612[3] = v637 + 32;
          }
          v612[3] = v640;
          v638 = (char *)(v640 - 4);
        }
      }
      v654 = (unint64_t *)*((_QWORD *)v638 + 2);
      v653 = *((_QWORD *)v638 + 3);
      if ((unint64_t)v654 >= v653)
      {
        v656 = (_QWORD *)*((_QWORD *)v638 + 1);
        v657 = 0xAAAAAAAAAAAAAAABLL * (v654 - v656) + 1;
        if (v657 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v658 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v653 - (_QWORD)v656) >> 3);
        if (2 * v658 > v657)
          v657 = 2 * v658;
        if (v658 >= 0x555555555555555)
          v659 = 0xAAAAAAAAAAAAAAALL;
        else
          v659 = v657;
        if (v659)
        {
          if (v659 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_971;
          v660 = (char *)operator new(24 * v659);
        }
        else
        {
          v660 = 0;
        }
        v661 = &v660[8 * (v654 - v656)];
        *(_QWORD *)v661 = v554;
        *((_QWORD *)v661 + 1) = v555;
        *((_QWORD *)v661 + 2) = v815;
        v662 = v661;
        if (v654 != v656)
        {
          do
          {
            v663 = *(_OWORD *)(v654 - 3);
            *((_QWORD *)v662 - 1) = *(v654 - 1);
            *(_OWORD *)(v662 - 24) = v663;
            v662 -= 24;
            v654 -= 3;
          }
          while (v654 != v656);
          v654 = (unint64_t *)*((_QWORD *)v638 + 1);
        }
        v655 = v661 + 24;
        *((_QWORD *)v638 + 1) = v662;
        *((_QWORD *)v638 + 2) = v661 + 24;
        *((_QWORD *)v638 + 3) = &v660[24 * v659];
        if (v654)
          operator delete(v654);
      }
      else
      {
        *v654 = v554;
        v654[1] = v555;
        v655 = v654 + 3;
        v654[2] = (unint64_t)v815;
      }
      *((_QWORD *)v638 + 2) = v655;
      v664 = (std::__shared_weak_count *)*((_QWORD *)&v860 + 1);
      if (!*((_QWORD *)&v860 + 1))
        goto LABEL_820;
      v665 = (unint64_t *)(*((_QWORD *)&v860 + 1) + 8);
      do
        v666 = __ldaxr(v665);
      while (__stlxr(v666 - 1, v665));
      if (!v666)
      {
        ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
        std::__shared_weak_count::__release_weak(v664);
        if (v845)
        {
LABEL_821:
          width = dest.width;
          rowBytes = dest.rowBytes;
          if (dest.rowBytes != dest.width)
          {
            v669 = (_QWORD *)dest.height;
            v670 = v844;
            v671 = BYTE1(v844);
            if (dest.data && *(_BYTE *)(dest.height + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)dest.data + 64))();
            if (v670 && !v671)
            {
              v672 = v669[7];
              v673 = v669[8];
              if (v673 == v672)
                v672 = v669[10] - v669[9];
              if (width < v672)
                v672 = width;
              if (v673 <= rowBytes)
                v673 = rowBytes;
              if (v673 == v672)
                v673 = v672 + v669[10] - v669[9];
              v669[7] = v672;
              v669[8] = v673;
            }
          }
        }
      }
      else
      {
LABEL_820:
        if (v845)
          goto LABEL_821;
      }
      ++v547;
      v546 = v823;
      v548 = v823 + 14;
      if (v547 >= *(unsigned __int16 *)(v823 + 12))
      {
        v544 = (std::__shared_weak_count *)v862;
        v515 = v770;
        if (v862)
          goto LABEL_838;
LABEL_841:
        v676 = v864;
        if (!v864)
          goto LABEL_847;
LABEL_844:
        v677 = (unint64_t *)&v676->__shared_owners_;
        do
          v678 = __ldaxr(v677);
        while (__stlxr(v678 - 1, v677));
        if (v678)
          goto LABEL_847;
        ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
        std::__shared_weak_count::__release_weak(v676);
        if (!*(_QWORD *)&src[40])
          goto LABEL_864;
LABEL_848:
        v679 = *(_QWORD *)&src[16];
        v680 = *(_QWORD *)&src[24];
        if (*(_QWORD *)&src[24] != *(_QWORD *)&src[16])
        {
          v681 = *(_QWORD **)&src[8];
          v682 = src[32];
          v683 = src[33];
          if (*(_QWORD *)src && *(_BYTE *)(*(_QWORD *)&src[8] + 17) != 2)
            (*(void (**)(void))(**(_QWORD **)src + 64))();
          if (v682 && !v683)
          {
            v684 = v681[7];
            v685 = v681[8];
            if (v685 == v684)
              v684 = v681[10] - v681[9];
            if (v679 < v684)
              v684 = v679;
            if (v685 <= v680)
              v685 = v680;
            if (v685 == v684)
              v685 = v684 + v681[10] - v681[9];
            v681[7] = v684;
            v681[8] = v685;
          }
        }
        goto LABEL_864;
      }
    }
  }
LABEL_865:
  v687 = v805;
  v688 = v784;
LABEL_867:
  v835 = *(_OWORD *)v855;
  v689 = v856;
  v856 = 0;
  v855[1] = 0;
  v855[0] = 0;
  v837 = v687;
  v836 = v689;
  v838 = v688;
  v690 = (uint64_t *)v849;
  if (!v849)
    goto LABEL_884;
  v691 = v850;
  if (v850 != v849)
  {
    while (1)
    {
      v692 = (std::__shared_weak_count *)*(v691 - 1);
      if (!v692)
        goto LABEL_875;
      v693 = (unint64_t *)&v692->__shared_owners_;
      do
        v694 = __ldaxr(v693);
      while (__stlxr(v694 - 1, v693));
      if (!v694)
      {
        ((void (*)(std::__shared_weak_count *))v692->__on_zero_shared)(v692);
        std::__shared_weak_count::__release_weak(v692);
        v695 = (std::__shared_weak_count *)*(v691 - 3);
        if (v695)
        {
LABEL_876:
          v696 = (unint64_t *)&v695->__shared_owners_;
          do
            v697 = __ldaxr(v696);
          while (__stlxr(v697 - 1, v696));
          if (!v697)
          {
            ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
            std::__shared_weak_count::__release_weak(v695);
          }
        }
      }
      else
      {
LABEL_875:
        v695 = (std::__shared_weak_count *)*(v691 - 3);
        if (v695)
          goto LABEL_876;
      }
      v691 -= 4;
      if (v691 == v690)
      {
        v690 = (uint64_t *)v849;
        break;
      }
    }
  }
  operator delete(v690);
LABEL_884:
  v698 = (geo **)v852;
  if (v852)
  {
    v699 = v853;
    v700 = v852;
    if (v853 != v852)
    {
      do
      {
        v701 = (std::__shared_weak_count *)*(v699 - 2);
        if (v701)
        {
          v702 = (unint64_t *)&v701->__shared_owners_;
          do
            v703 = __ldaxr(v702);
          while (__stlxr(v703 - 1, v702));
          if (!v703)
          {
            ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
            std::__shared_weak_count::__release_weak(v701);
          }
        }
        v699 -= 4;
      }
      while (v699 != v698);
      v700 = v852;
    }
    v853 = v698;
    operator delete(v700);
  }
  v704 = (char *)v855[0];
  if (v855[0])
  {
    v705 = (char *)v855[1];
    if (v855[1] != v855[0])
    {
      do
      {
        v706 = (std::__shared_weak_count *)*((_QWORD *)v705 - 1);
        if (v706)
        {
          v707 = (unint64_t *)&v706->__shared_owners_;
          do
            v708 = __ldaxr(v707);
          while (__stlxr(v708 - 1, v707));
          if (!v708)
          {
            ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
            std::__shared_weak_count::__release_weak(v706);
          }
        }
        v705 -= 16;
      }
      while (v705 != v704);
      v704 = (char *)v855[0];
    }
    operator delete(v704);
  }

  v709 = (char *)operator new(0x3F0uLL);
  *((_QWORD *)v709 + 1) = 0;
  *((_QWORD *)v709 + 2) = 0;
  *(_QWORD *)v709 = &off_1E42DB668;
  md::MapTileData::MapTileData((uint64_t)(v709 + 24), a2, (uint64_t)v832, (uint64_t)v781, 1);
  *((_QWORD *)v709 + 3) = &off_1E42917B8;
  *((_QWORD *)v709 + 82) = &unk_1E42917F8;
  *(_OWORD *)(v709 + 744) = *(_OWORD *)v824;
  *((_QWORD *)v709 + 95) = v825;
  v824[0] = 0;
  v824[1] = 0;
  v825 = 0;
  *((_DWORD *)v709 + 192) = 0;
  *((float *)v709 + 193) = v795;
  *((_DWORD *)v709 + 194) = 0;
  *((float *)v709 + 195) = v794;
  *((_DWORD *)v709 + 196) = 0;
  *((float *)v709 + 197) = v793;
  *((_DWORD *)v709 + 198) = 0;
  *((float *)v709 + 199) = v792;
  *((_DWORD *)v709 + 200) = 0;
  *((float *)v709 + 201) = v791;
  *((_DWORD *)v709 + 202) = 0;
  *((float *)v709 + 203) = v790;
  *((_DWORD *)v709 + 204) = 0;
  *((float *)v709 + 205) = v789;
  *((_DWORD *)v709 + 206) = 0;
  *((float *)v709 + 207) = v788;
  *((_DWORD *)v709 + 208) = 0;
  *((float *)v709 + 209) = v787;
  *((_DWORD *)v709 + 210) = 0;
  *((float *)v709 + 211) = v786;
  *((_DWORD *)v709 + 212) = 0;
  *((float *)v709 + 213) = v93;
  *((_DWORD *)v709 + 214) = 0;
  *((float *)v709 + 215) = v94;
  *((_DWORD *)v709 + 216) = 0;
  *((float *)v709 + 217) = v95;
  *((_DWORD *)v709 + 218) = 0;
  *((float *)v709 + 219) = v96;
  *((_DWORD *)v709 + 220) = 0;
  *((float *)v709 + 221) = v97;
  *((_DWORD *)v709 + 222) = 0;
  *((float *)v709 + 223) = v98;
  *((_OWORD *)v709 + 56) = *(_OWORD *)v828;
  *((_QWORD *)v709 + 114) = v829;
  v828[1] = 0;
  v829 = 0;
  v828[0] = 0;
  *((_QWORD *)v709 + 115) = v762;
  *((_QWORD *)v709 + 116) = *(_QWORD *)(v764 + 144);
  v710 = *(_QWORD *)(v764 + 152);
  *((_QWORD *)v709 + 117) = v710;
  if (v710)
  {
    v711 = (unint64_t *)(v710 + 8);
    do
      v712 = __ldxr(v711);
    while (__stxr(v712 + 1, v711));
  }
  *((float32x4_t *)v709 + 59) = v763;
  *((_QWORD *)v709 + 120) = 0;
  *((_QWORD *)v709 + 122) = 0;
  *((_QWORD *)v709 + 121) = 0;
  v714 = (_QWORD *)*((_QWORD *)&v835 + 1);
  v713 = (_QWORD *)v835;
  v715 = *((_QWORD *)&v835 + 1) - v835;
  if (*((_QWORD *)&v835 + 1) != (_QWORD)v835)
  {
    if (v715 < 0)
      abort();
    v716 = operator new(*((_QWORD *)&v835 + 1) - v835);
    *((_QWORD *)v709 + 120) = v716;
    *((_QWORD *)v709 + 121) = v716;
    *((_QWORD *)v709 + 122) = &v716[2 * (v715 >> 4)];
    v717 = v713;
    do
    {
      *v716 = *v717;
      v718 = v717[1];
      v716[1] = v718;
      if (v718)
      {
        v719 = (unint64_t *)(v718 + 8);
        do
          v720 = __ldxr(v719);
        while (__stxr(v720 + 1, v719));
      }
      v717 += 2;
      v716 += 2;
    }
    while (v717 != v714);
    *((_QWORD *)v709 + 121) = v716;
  }
  *((_QWORD *)v709 + 125) = 0;
  *(_OWORD *)(v709 + 984) = 0u;
  v721 = (void *)v837;
  v722 = *((_QWORD *)&v837 + 1) - v837;
  if (*((_QWORD *)&v837 + 1) != (_QWORD)v837)
  {
    if (0x84BDA12F684BDA13 * (v722 >> 4) > 0x97B425ED097B42)
      abort();
    v723 = (char *)operator new(*((_QWORD *)&v837 + 1) - v837);
    *((_QWORD *)v709 + 123) = v723;
    *((_QWORD *)v709 + 124) = v723;
    *((_QWORD *)v709 + 125) = &v723[16 * (v722 >> 4)];
    v724 = 432 * ((v722 - 432) / 0x1B0uLL) + 432;
    memcpy(v723, v721, v724);
    *((_QWORD *)v709 + 124) = &v723[v724];
  }
  v725 = 1 << v709[193];
  v726 = 1.0 / (double)v725;
  v727 = exp(v726 * 6.28318531 * ((double)(v725 + ~*((_DWORD *)v709 + 49)) + 0.5) + -3.14159265);
  v728 = atan(v727) * 114.591559 + -90.0;
  v729 = cos(v728 * 0.034906585) * -559.82 + 111132.92;
  v730 = v729 + cos(v728 * 0.0698131701) * 1.175;
  v731 = v730 + cos(v728 * 0.104719755) * -0.0023;
  v732 = v728 * 0.00872664626;
  v733 = tan(v728 * 0.00872664626 + 0.78103484);
  v734 = log(v733);
  v735 = tan(v732 + 0.789761487);
  v736 = log(v735);
  *(_QWORD *)src = 0;
  *(double *)&dest.data = v731 * v726 / fabs((v736 - v734) * 0.159154943);
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)v709 + 192, (double *)src, (double *)&dest);
  *a4 = v709 + 24;
  a4[1] = v709;
  if (v721)
  {
    *((_QWORD *)&v837 + 1) = v721;
    operator delete(v721);
  }
  if (v713)
  {
    if (v714 != v713)
    {
      do
      {
        v737 = (std::__shared_weak_count *)*(v714 - 1);
        if (v737)
        {
          v738 = (unint64_t *)&v737->__shared_owners_;
          do
            v739 = __ldaxr(v738);
          while (__stlxr(v739 - 1, v738));
          if (!v739)
          {
            ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
            std::__shared_weak_count::__release_weak(v737);
          }
        }
        v714 -= 2;
      }
      while (v714 != v713);
      v713 = (_QWORD *)v835;
    }
    operator delete(v713);
  }
  v740 = (void **)v824[0];
  if (v824[0])
  {
    v741 = (void **)v824[1];
    v742 = v824[0];
    if (v824[1] != v824[0])
    {
      v743 = (void **)v824[1];
      do
      {
        v745 = (char *)*(v743 - 3);
        v743 -= 3;
        v744 = v745;
        if (v745)
        {
          v746 = (char *)*(v741 - 2);
          v747 = v744;
          if (v746 != v744)
          {
            v748 = v746 - 24;
            v749 = v746 - 24;
            do
            {
              v750 = *(void (***)(char *))v749;
              v749 -= 24;
              (*v750)(v748);
              _ZF = v748 == v744;
              v748 = v749;
            }
            while (!_ZF);
            v747 = *v743;
          }
          *(v741 - 2) = v744;
          operator delete(v747);
        }
        v741 = v743;
      }
      while (v743 != v740);
      v742 = v824[0];
    }
    v824[1] = v740;
    operator delete(v742);
  }
  v751 = (char *)v828[0];
  if (v828[0])
  {
    v752 = (char *)v828[1];
    if (v828[1] != v828[0])
    {
      do
      {
        v753 = (std::__shared_weak_count *)*((_QWORD *)v752 - 1);
        if (v753)
        {
          v754 = (unint64_t *)&v753->__shared_owners_;
          do
            v755 = __ldaxr(v754);
          while (__stlxr(v755 - 1, v754));
          if (!v755)
          {
            ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
            std::__shared_weak_count::__release_weak(v753);
          }
        }
        v752 -= 16;
      }
      while (v752 != v751);
      v751 = (char *)v828[0];
    }
    operator delete(v751);
  }
  v756 = v831;
  if (v831)
  {
    v757 = (unint64_t *)&v831->__shared_owners_;
    do
      v758 = __ldaxr(v757);
    while (__stlxr(v758 - 1, v757));
    if (!v758)
    {
      ((void (*)(std::__shared_weak_count *))v756->__on_zero_shared)(v756);
      std::__shared_weak_count::__release_weak(v756);
    }
  }
  if (v832[0])
    operator delete(v832[0]);
  v759 = v834;
  if (v834)
  {
    v760 = (unint64_t *)&v834->__shared_owners_;
    do
      v761 = __ldaxr(v760);
    while (__stlxr(v761 - 1, v760));
    if (!v761)
    {
      ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
      std::__shared_weak_count::__release_weak(v759);
    }
  }
}

void sub_19FCB0BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *a66;
  char a69;
  void *v69;
  void *v71;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D8]);
  _Block_object_dispose(&STACK[0x240], 8);
  v71 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v71;
    operator delete(v71);
  }

  md::Triangulator<float>::~Triangulator((uint64_t)&STACK[0x340]);
  std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>::~vector[abi:nn180100](&a55);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a61);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  if (a66)
    operator delete(a66);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void md::BuildingLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void ***std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>::~vector[abi:nn180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  void (**v12)(char *);
  BOOL v13;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = (char *)*(v5 - 3);
        v5 -= 3;
        v6 = v7;
        if (v7)
        {
          v8 = (char *)*(v3 - 2);
          v9 = v6;
          if (v8 != v6)
          {
            v10 = v8 - 24;
            v11 = v8 - 24;
            do
            {
              v12 = *(void (***)(char *))v11;
              v11 -= 24;
              (*v12)(v10);
              v13 = v10 == v6;
              v10 = v11;
            }
            while (!v13);
            v9 = *v5;
          }
          *(v3 - 2) = v6;
          operator delete(v9);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::BuildingTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::BuildingTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::BuildingTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void **geo::linear_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::ObjectGroup>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::allocator<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::ObjectGroup>>>,std::vector<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::ObjectGroup>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void **std::vector<std::pair<void *,std::pair<std::shared_ptr<md::ObjectGroup>,unsigned long long>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ggl::MeshVendor<ggl::Landmark::LandmarkMesh>::_allocateNewMesh(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_count v57;
  unsigned __int8 v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  geo::read_write_lock *v66;
  const char *v67;
  malloc_zone_t *zone;
  uint64_t v69;
  geo::read_write_lock *v70;
  const char *v71;
  malloc_zone_t *v72;
  uint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  malloc_zone_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  geo::read_write_lock *v80;
  const char *v81;
  malloc_zone_t *v82;
  int v83;
  uint64_t v84;
  geo::read_write_lock *v85;
  const char *v86;
  malloc_zone_t *v87;
  uint64_t v88;
  uint64_t v89;

  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v64 & 1) == 0
    {
      ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43DD8 = 1;
  }
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E42BBC08;
  *(_QWORD *)(v2 + 8) = "VendedMesh";
  *(_QWORD *)(v2 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 56) = &ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(v2 + 64) = 0;
  v4 = v2 + 64;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  {
    v65 = operator new();
    *(_QWORD *)(v65 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v65 + 24) = "GeoGL";
    *(_OWORD *)(v65 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v65 = &off_1E42B5668;
    *(_QWORD *)(v65 + 8) = "GeoGL";
    *(_OWORD *)(v65 + 72) = 0u;
    *(_OWORD *)(v65 + 88) = 0u;
    *(_OWORD *)(v65 + 104) = 0u;
    *(_OWORD *)(v65 + 120) = 0u;
    *(_OWORD *)(v65 + 136) = 0u;
    *(_OWORD *)(v65 + 152) = 0u;
    *(_OWORD *)(v65 + 168) = 0u;
    *(_OWORD *)(v65 + 184) = 0u;
    *(_OWORD *)(v65 + 200) = 0u;
    *(_OWORD *)(v65 + 216) = 0u;
    *(_OWORD *)(v65 + 232) = 0u;
    *(_QWORD *)(v65 + 248) = 0;
    *(_OWORD *)(v65 + 56) = 0u;
    v66 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v65 + 56), 0);
    if ((_DWORD)v66)
      geo::read_write_lock::logFailure(v66, (uint64_t)"initialization", v67);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v65 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v65 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v65;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v6;
  {
    v69 = operator new();
    *(_QWORD *)(v69 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v69 + 24) = "GeoGL";
    *(_OWORD *)(v69 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v69 = &off_1E42B5668;
    *(_QWORD *)(v69 + 8) = "GeoGL";
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_OWORD *)(v69 + 104) = 0u;
    *(_OWORD *)(v69 + 120) = 0u;
    *(_OWORD *)(v69 + 136) = 0u;
    *(_OWORD *)(v69 + 152) = 0u;
    *(_OWORD *)(v69 + 168) = 0u;
    *(_OWORD *)(v69 + 184) = 0u;
    *(_OWORD *)(v69 + 200) = 0u;
    *(_OWORD *)(v69 + 216) = 0u;
    *(_OWORD *)(v69 + 232) = 0u;
    *(_QWORD *)(v69 + 248) = 0;
    *(_OWORD *)(v69 + 56) = 0u;
    v70 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v69 + 56), 0);
    if ((_DWORD)v70)
      geo::read_write_lock::logFailure(v70, (uint64_t)"initialization", v71);
    v72 = malloc_create_zone(0, 0);
    *(_QWORD *)(v69 + 48) = v72;
    malloc_set_zone_name(v72, "GeoGL");
    *(_QWORD *)(v69 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v69;
  }
  *(_QWORD *)(v2 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = v2 + 120;
  *(_QWORD *)v2 = &off_1E42BE138;
  *(_QWORD *)(v2 + 16) = &unk_1E42BE158;
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = (v9 - v7) >> 4;
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 < v10)
    {
      v12 = v7 + 16 * v8;
      while (v9 != v12)
      {
        v13 = *(std::__shared_weak_count **)(v9 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 16;
      }
      *(_QWORD *)(v2 + 72) = v12;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v2 + 64, v11);
  }
  *(_QWORD *)v2 = &off_1E42BCC50;
  *(_QWORD *)(v2 + 16) = &unk_1E42BCC70;
  {
    v73 = operator new();
    *(_QWORD *)(v73 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v73 + 24) = "GeoGL";
    *(_OWORD *)(v73 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v73 = &off_1E42B5668;
    *(_QWORD *)(v73 + 8) = "GeoGL";
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 88) = 0u;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *(_OWORD *)(v73 + 184) = 0u;
    *(_OWORD *)(v73 + 200) = 0u;
    *(_OWORD *)(v73 + 216) = 0u;
    *(_OWORD *)(v73 + 232) = 0u;
    *(_QWORD *)(v73 + 248) = 0;
    *(_OWORD *)(v73 + 56) = 0u;
    v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v73 + 56), 0);
    if ((_DWORD)v74)
      geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
    v76 = malloc_create_zone(0, 0);
    *(_QWORD *)(v73 + 48) = v76;
    malloc_set_zone_name(v76, "GeoGL");
    *(_QWORD *)(v73 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v73;
  }
  v17 = ggl::Allocator::instance(void)::alloc;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v18 = &off_1E42E0790;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 32) = &off_1E42B5748;
  v19 = v18 + 32;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 40) = 16;
  *(_DWORD *)(v18 + 48) = 6;
  v20 = 0uLL;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_QWORD *)(v18 + 120) = 0;
  if ((v21 & 1) == 0)
  {
    v88 = v18 + 32;
    v89 = v18;
    v20 = 0uLL;
    v78 = v77;
    v19 = v88;
    v18 = v89;
    if (v78)
    {
      v79 = operator new();
      *(_QWORD *)(v79 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v79 + 24) = "GeoGL";
      *(_OWORD *)(v79 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v79 = &off_1E42B5668;
      *(_QWORD *)(v79 + 8) = "GeoGL";
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *(_OWORD *)(v79 + 168) = 0u;
      *(_OWORD *)(v79 + 184) = 0u;
      *(_OWORD *)(v79 + 200) = 0u;
      *(_OWORD *)(v79 + 216) = 0u;
      *(_OWORD *)(v79 + 232) = 0u;
      *(_QWORD *)(v79 + 248) = 0;
      *(_OWORD *)(v79 + 56) = 0u;
      v80 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v79 + 56), 0);
      if ((_DWORD)v80)
        geo::read_write_lock::logFailure(v80, (uint64_t)"initialization", v81);
      v82 = malloc_create_zone(0, 0);
      *(_QWORD *)(v79 + 48) = v82;
      malloc_set_zone_name(v82, "GeoGL");
      *(_QWORD *)(v79 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v79;
      v19 = v88;
      v18 = v89;
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v18 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v18 + 136) = 0;
  *(_OWORD *)(v18 + 200) = v20;
  *(_OWORD *)(v18 + 184) = v20;
  *(_OWORD *)(v18 + 168) = v20;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = -1;
  *(_OWORD *)(v18 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 240) = "VendedMesh";
  *(_QWORD *)(v18 + 248) = &ggl::Landmark::defaultVboReflection;
  *(_QWORD *)(v18 + 32) = &off_1E42B84E0;
  *(_QWORD *)(v18 + 232) = &unk_1E42B8500;
  v22 = *(uint64_t **)v4;
  v23 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v22 = v19;
  v22[1] = v18;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(uint64_t **)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v26 < v27)
  {
    if (v26)
      *v26 = v2;
    v28 = v26 + 1;
    goto LABEL_56;
  }
  v29 = ((uint64_t)v26 - *(_QWORD *)a1) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    abort();
  v31 = v27 - *(_QWORD *)a1;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  if (v30)
  {
    v32 = 8 * v30;
    v33 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v30, 8);
    v34 = (uint64_t *)(v33 + 8 * v29);
    v30 = v33 + v32;
    if (v33)
      *v34 = v2;
  }
  else
  {
    v34 = (uint64_t *)(8 * v29);
  }
  v28 = v34 + 1;
  v35 = *(char **)a1;
  v36 = *(char **)(a1 + 8);
  if (v36 == *(char **)a1)
  {
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v28;
    v51 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30;
    goto LABEL_54;
  }
  v37 = (unint64_t)&v36[-*(_QWORD *)a1 - 8];
  if (v37 <= 0x57
    || ((v38 = (v35 - v36 + 7) & 0xFFFFFFFFFFFFFFF8,
         v39 = (unint64_t)&v36[v38],
         v40 = (char *)v34 + v38,
         v39 < (unint64_t)v34)
      ? (v41 = v40 >= v36)
      : (v41 = 1),
        !v41))
  {
    v43 = *(char **)(a1 + 8);
    do
    {
LABEL_48:
      v49 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *(_QWORD *)v43 = 0;
      *--v34 = v49;
    }
    while (v43 != v35);
    goto LABEL_49;
  }
  v42 = (v37 >> 3) + 1;
  v43 = &v36[-8 * (v42 & 0x3FFFFFFFFFFFFFFCLL)];
  v44 = v34 - 2;
  v45 = v36 - 32;
  v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = *(_OWORD *)v45;
    v47 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v45 = 0uLL;
    *((_OWORD *)v45 + 1) = 0uLL;
    v45 -= 32;
    *((_OWORD *)v44 - 1) = v48;
    *(_OWORD *)v44 = v47;
    v44 -= 4;
    v46 -= 4;
  }
  while (v46);
  v34 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  v36 = *(char **)a1;
  v50 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v28;
  v51 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v30;
  while (v50 != v36)
  {
    v53 = *((_QWORD *)v50 - 1);
    v50 -= 8;
    v52 = v53;
    *(_QWORD *)v50 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
LABEL_54:
  if (v36)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v36, v51 - (_QWORD)v36);
LABEL_56:
  *(_QWORD *)(a1 + 8) = v28;
  v54 = *(v28 - 1);
  v55 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v55[1].__shared_owners_ = 2;
  LODWORD(v55[1].__shared_weak_owners_) = 262;
  v57 = (std::__shared_count)0;
  v55[2].std::__shared_count = 0u;
  *(_OWORD *)&v55[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[3].__shared_owners_ = 0u;
  v55[4].std::__shared_count = 0u;
  v55[4].__shared_weak_owners_ = 0;
  if ((v58 & 1) == 0)
  {
    v57 = (std::__shared_count)0;
    if (v83)
    {
      v84 = operator new();
      *(_QWORD *)(v84 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v84 + 24) = "GeoGL";
      *(_OWORD *)(v84 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v84 = &off_1E42B5668;
      *(_QWORD *)(v84 + 8) = "GeoGL";
      *(_OWORD *)(v84 + 72) = 0u;
      *(_OWORD *)(v84 + 88) = 0u;
      *(_OWORD *)(v84 + 104) = 0u;
      *(_OWORD *)(v84 + 120) = 0u;
      *(_OWORD *)(v84 + 136) = 0u;
      *(_OWORD *)(v84 + 152) = 0u;
      *(_OWORD *)(v84 + 168) = 0u;
      *(_OWORD *)(v84 + 184) = 0u;
      *(_OWORD *)(v84 + 200) = 0u;
      *(_OWORD *)(v84 + 216) = 0u;
      *(_OWORD *)(v84 + 232) = 0u;
      *(_QWORD *)(v84 + 248) = 0;
      *(_OWORD *)(v84 + 56) = 0u;
      v85 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v84 + 56), 0);
      if ((_DWORD)v85)
        geo::read_write_lock::logFailure(v85, (uint64_t)"initialization", v86);
      v87 = malloc_create_zone(0, 0);
      *(_QWORD *)(v84 + 48) = v87;
      malloc_set_zone_name(v87, "GeoGL");
      *(_QWORD *)(v84 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v84;
      v57 = (std::__shared_count)0;
    }
  }
  v55[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v55[5].__shared_owners_ = 0;
  *((std::__shared_count *)v55 + 11) = v57;
  v55[8].std::__shared_count = v57;
  v55[8].__shared_weak_owners_ = 0;
  v55[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v55 + 10) = v57;
  v55[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v55[5].__shared_weak_owners_) = 0;
  LODWORD(v55[10].__vftable) = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v55[1].__shared_owners_ = 2;
  v55[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v55[9].__shared_weak_owners_ = (uint64_t)"IndexData";
  do
    v59 = __ldxr(v56);
  while (__stxr(v59 + 1, v56));
  v60 = *(std::__shared_weak_count **)(v54 + 104);
  *(_QWORD *)(v54 + 96) = v55 + 1;
  *(_QWORD *)(v54 + 104) = v55;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  do
    v63 = __ldaxr(v56);
  while (__stlxr(v63 - 1, v56));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
}

void std::__shared_ptr_emplace<md::ObjectGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ObjectGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAD38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ObjectGroup>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(void **)(a1 + 56);
    if (v9 != v8)
    {
      do
      {
        v11 = *(_QWORD *)(v9 - 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v9 - 16);
          v13 = *(void **)(v9 - 24);
          if (v12 != v11)
          {
            do
            {
              v14 = *(void **)(v12 - 24);
              if (v14)
              {
                *(_QWORD *)(v12 - 16) = v14;
                operator delete(v14);
              }
              v12 -= 32;
            }
            while (v12 != v11);
            v13 = *(void **)(v9 - 24);
          }
          *(_QWORD *)(v9 - 16) = v11;
          operator delete(v13);
        }
        v15 = *(std::__shared_weak_count **)(v9 - 32);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v9 -= 40;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v10);
  }
  v18 = *(_QWORD **)(a1 + 24);
  if (v18)
  {
    v19 = *(_QWORD **)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 24);
    if (v19 != v18)
    {
      do
      {
        v22 = *--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 8))(v21, v20);
      }
      while (v19 != v18);
      v20 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v18;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v20, *(_QWORD *)(a1 + 40) - v20);
  }
}

CGColorSpaceRef ___ZL20_grayscaleColorSpacev_block_invoke()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateDeviceGray();
  _grayscaleColorSpace(void)::colorspace = (uint64_t)result;
  return result;
}

void std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::reserve(void **a1)
{
  char *v1;
  id *v3;
  int64_t v4;
  char *v5;
  char *v6;
  char *v7;
  id *v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;

  v1 = (char *)a1[2];
  if (v1 != *a1)
    return;
  v3 = (id *)a1[1];
  v4 = (char *)v3 - (_BYTE *)*a1;
  v5 = (char *)operator new(0x18uLL);
  v6 = &v5[v4];
  v7 = v5 + 24;
  if (v3 == (id *)v1)
  {
    *a1 = v6;
    a1[1] = v6;
    a1[2] = v7;
    if (!v1)
      return;
LABEL_13:
    operator delete(v1);
    return;
  }
  v8 = (id *)v6;
  do
  {
    *(v8 - 3) = &off_1E42B4BD0;
    v8 -= 3;
    v8[1] = 0;
    objc_storeStrong(v8 + 1, *(v3 - 2));
    v9 = *(v3 - 2);
    *(v3 - 2) = 0;

    v3 -= 3;
  }
  while (v3 != (id *)v1);
  v1 = (char *)*a1;
  v10 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v6;
  a1[2] = v7;
  if (v10 != v1)
  {
    v11 = v10 - 24;
    v12 = v10 - 24;
    do
    {
      v13 = *(void (***)(char *))v12;
      v12 -= 24;
      (*v13)(v11);
      v14 = v11 == v1;
      v11 = v12;
    }
    while (!v14);
  }
  if (v1)
    goto LABEL_13;
}

__n128 __Block_byref_object_copy__29341(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__29342(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *,false>(uint64_t *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int8 v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t **v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned __int8 *v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  char *v92;
  unsigned int v93;
  char *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  BOOL v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  int64_t v119;
  BOOL v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  char v157;
  unsigned __int8 *v158;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = (uint64_t *)(a2 - 16);
  v9 = (_BYTE *)(a2 - 8);
  v158 = (unsigned __int8 *)(a2 - 24);
  v10 = (unsigned __int8 *)(a2 - 40);
  v11 = v7;
  while (2)
  {
    v7 = v11;
    v12 = a2 - v11;
    v13 = (uint64_t)(a2 - v11) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*v9 < *(unsigned __int8 *)(v11 + 8))
        {
          v91 = *(_QWORD *)v11;
          *(_QWORD *)v11 = *v8;
          *v8 = v91;
          LOBYTE(v91) = *(_BYTE *)(v11 + 8);
          *(_BYTE *)(v11 + 8) = *v9;
          *v9 = v91;
        }
        return result;
      case 3:
        v92 = (char *)(v11 + 8);
        v93 = *(unsigned __int8 *)(v11 + 8);
        v94 = (char *)(v11 + 24);
        v95 = *(unsigned __int8 *)(v11 + 24);
        v96 = *v9;
        if (v95 < v93)
        {
          v97 = *(_QWORD *)v11;
          if (v96 >= v95)
          {
            *(_QWORD *)v11 = *(_QWORD *)(v11 + 16);
            *(_QWORD *)(v11 + 16) = v97;
            *(_BYTE *)(v11 + 8) = v95;
            *(_BYTE *)(v11 + 24) = v93;
            if (*v9 >= v93)
              return result;
            *(_QWORD *)(v11 + 16) = *v8;
            *v8 = v97;
            v92 = (char *)(v11 + 24);
          }
          else
          {
            *(_QWORD *)v11 = *v8;
            *v8 = v97;
          }
          v94 = (char *)(a2 - 8);
          goto LABEL_179;
        }
        if (v96 < v95)
        {
          v149 = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = *v8;
          *v8 = v149;
          LOBYTE(v149) = *(_BYTE *)(v11 + 24);
          *(_BYTE *)(v11 + 24) = *v9;
          *v9 = v149;
          if (*(unsigned __int8 *)(v11 + 24) < *(unsigned __int8 *)(v11 + 8))
          {
            v150 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *(_QWORD *)(v11 + 16);
            *(_QWORD *)(v11 + 16) = v150;
LABEL_179:
            v157 = *v92;
            *v92 = *v94;
            *v94 = v157;
            return result;
          }
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>((uint64_t *)v11, (uint64_t *)(v11 + 16), (uint64_t *)(v11 + 32), (uint64_t *)(a2 - 16));
      case 5:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>((uint64_t *)v11, (uint64_t *)(v11 + 16), (uint64_t *)(v11 + 32), (uint64_t *)(v11 + 48));
        if (*v9 < *(unsigned __int8 *)(v11 + 56))
        {
          v98 = *(_QWORD *)(v11 + 48);
          *(_QWORD *)(v11 + 48) = *v8;
          *v8 = v98;
          LOBYTE(v98) = *(_BYTE *)(v11 + 56);
          *(_BYTE *)(v11 + 56) = *v9;
          *v9 = v98;
          v99 = *(unsigned __int8 *)(v11 + 56);
          v100 = *(unsigned __int8 *)(v11 + 40);
          if (v99 < v100)
          {
            v101 = *(_QWORD *)(v11 + 32);
            v102 = *(_QWORD *)(v11 + 48);
            *(_QWORD *)(v11 + 32) = v102;
            *(_QWORD *)(v11 + 48) = v101;
            *(_BYTE *)(v11 + 40) = v99;
            *(_BYTE *)(v11 + 56) = v100;
            v103 = *(unsigned __int8 *)(v11 + 24);
            if (v99 < v103)
            {
              v104 = *(_QWORD *)(v11 + 16);
              *(_QWORD *)(v11 + 16) = v102;
              *(_QWORD *)(v11 + 32) = v104;
              *(_BYTE *)(v11 + 24) = v99;
              *(_BYTE *)(v11 + 40) = v103;
              v105 = *(unsigned __int8 *)(v11 + 8);
              if (v99 < v105)
              {
                v106 = *(_QWORD *)v11;
                *(_QWORD *)v11 = v102;
                *(_QWORD *)(v11 + 16) = v106;
                *(_BYTE *)(v11 + 8) = v99;
                *(_BYTE *)(v11 + 24) = v105;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 383)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v118 = (unint64_t)(v13 - 2) >> 1;
              v119 = v118;
              do
              {
                if (v118 >= v119)
                {
                  v121 = (2 * v119) | 1;
                  v122 = v11 + 16 * v121;
                  if (2 * v119 + 2 < v13)
                  {
                    v123 = *(unsigned __int8 *)(v122 + 8);
                    v124 = *(unsigned __int8 *)(v122 + 24);
                    v122 += 16 * (v123 < v124);
                    if (v123 < v124)
                      v121 = 2 * v119 + 2;
                  }
                  v125 = v11 + 16 * v119;
                  v126 = *(unsigned __int8 *)(v125 + 8);
                  if (*(unsigned __int8 *)(v122 + 8) >= v126)
                  {
                    v127 = *(_QWORD *)v125;
                    do
                    {
                      v128 = v125;
                      v125 = v122;
                      *(_QWORD *)v128 = *(_QWORD *)v122;
                      *(_BYTE *)(v128 + 8) = *(_BYTE *)(v122 + 8);
                      if (v118 < v121)
                        break;
                      v129 = (2 * v121) | 1;
                      v122 = v11 + 16 * v129;
                      v130 = 2 * v121 + 2;
                      if (v130 < v13)
                      {
                        v131 = *(unsigned __int8 *)(v122 + 8);
                        v132 = *(unsigned __int8 *)(v122 + 24);
                        v122 += 16 * (v131 < v132);
                        if (v131 < v132)
                          v129 = v130;
                      }
                      result = (uint64_t *)*(unsigned __int8 *)(v122 + 8);
                      v121 = v129;
                    }
                    while (result >= v126);
                    *(_QWORD *)v125 = v127;
                    *(_BYTE *)(v125 + 8) = v126;
                  }
                }
                v120 = v119-- <= 0;
              }
              while (!v120);
              v133 = (unint64_t)v12 >> 4;
              do
              {
                v134 = 0;
                v135 = *(_QWORD *)v11;
                v136 = *(_BYTE *)(v11 + 8);
                v137 = v11;
                do
                {
                  v138 = v137 + 16 * v134 + 16;
                  v139 = (2 * v134) | 1;
                  v140 = 2 * v134 + 2;
                  if (v140 < v133)
                  {
                    v141 = *(unsigned __int8 *)(v138 + 8);
                    v142 = *(unsigned __int8 *)(v138 + 24);
                    v138 += 16 * (v141 < v142);
                    if (v141 < v142)
                      v139 = v140;
                  }
                  *(_QWORD *)v137 = *(_QWORD *)v138;
                  *(_BYTE *)(v137 + 8) = *(_BYTE *)(v138 + 8);
                  v137 = v138;
                  v134 = v139;
                }
                while (v139 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                if (v138 == a2 - 16)
                {
                  *(_QWORD *)v138 = v135;
                  *(_BYTE *)(v138 + 8) = v136;
                }
                else
                {
                  *(_QWORD *)v138 = *(_QWORD *)(a2 - 16);
                  *(_BYTE *)(v138 + 8) = *(_BYTE *)(a2 - 8);
                  *(_QWORD *)(a2 - 16) = v135;
                  *(_BYTE *)(a2 - 8) = v136;
                  v143 = v138 - v11 + 16;
                  if (v143 >= 17)
                  {
                    v144 = (((unint64_t)v143 >> 4) - 2) >> 1;
                    v145 = v11 + 16 * v144;
                    v146 = *(unsigned __int8 *)(v138 + 8);
                    if (*(unsigned __int8 *)(v145 + 8) < v146)
                    {
                      v147 = *(_QWORD *)v138;
                      do
                      {
                        v148 = v138;
                        v138 = v145;
                        *(_QWORD *)v148 = *(_QWORD *)v145;
                        *(_BYTE *)(v148 + 8) = *(_BYTE *)(v145 + 8);
                        if (!v144)
                          break;
                        v144 = (v144 - 1) >> 1;
                        v145 = v11 + 16 * v144;
                      }
                      while (*(unsigned __int8 *)(v145 + 8) < v146);
                      *(_QWORD *)v138 = v147;
                      *(_BYTE *)(v138 + 8) = v146;
                    }
                  }
                }
                a2 -= 16;
                v120 = v133-- <= 2;
              }
              while (!v120);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = v11 + 16 * ((unint64_t)v13 >> 1);
          v16 = *v9;
          if ((unint64_t)v12 < 0x801)
          {
            v22 = (unsigned __int8 *)(v11 + 8);
            v23 = *(unsigned __int8 *)(v11 + 8);
            v24 = (unsigned __int8 *)(v15 + 8);
            v25 = *(unsigned __int8 *)(v15 + 8);
            if (v23 < v25)
            {
              v26 = *(uint64_t **)v15;
              if (v16 >= v23)
              {
                *(_QWORD *)v15 = *(_QWORD *)v11;
                *(_QWORD *)v11 = v26;
                *(_BYTE *)(v15 + 8) = v23;
                *(_BYTE *)(v11 + 8) = v25;
                if (*v9 >= v25)
                  goto LABEL_33;
                *(_QWORD *)v11 = *v8;
                *v8 = (uint64_t)v26;
                v24 = (unsigned __int8 *)(v11 + 8);
              }
              else
              {
                *(_QWORD *)v15 = *v8;
                *v8 = (uint64_t)v26;
              }
              v22 = (unsigned __int8 *)(a2 - 8);
              goto LABEL_32;
            }
            if (v16 < v23)
            {
              v30 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *v8;
              *v8 = v30;
              LOBYTE(v30) = *(_BYTE *)(v11 + 8);
              *(_BYTE *)(v11 + 8) = *v9;
              *v9 = v30;
              if (*(unsigned __int8 *)(v11 + 8) < *v24)
              {
                v31 = *(uint64_t **)v15;
                *(_QWORD *)v15 = *(_QWORD *)v11;
                *(_QWORD *)v11 = v31;
LABEL_32:
                v45 = *v24;
                *v24 = *v22;
                *v22 = v45;
              }
            }
LABEL_33:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_34;
LABEL_60:
            v47 = *(unsigned __int8 *)(v11 + 8);
            v46 = *(_QWORD *)v11;
            if (*(unsigned __int8 *)(v11 - 8) < v47)
              goto LABEL_61;
            if (v47 >= *v9)
            {
              v83 = v11 + 16;
              do
              {
                v11 = v83;
                if (v83 >= a2)
                  break;
                v84 = *(unsigned __int8 *)(v83 + 8);
                v83 += 16;
              }
              while (v47 >= v84);
            }
            else
            {
              v81 = v11;
              do
              {
                v11 = v81 + 16;
                v82 = *(unsigned __int8 *)(v81 + 24);
                v81 += 16;
              }
              while (v47 >= v82);
            }
            v85 = a2;
            if (v11 < a2)
            {
              v86 = a2;
              do
              {
                v85 = v86 - 16;
                v87 = *(unsigned __int8 *)(v86 - 8);
                v86 -= 16;
              }
              while (v47 < v87);
            }
            while (v11 < v85)
            {
              v88 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v85;
              *(_QWORD *)v85 = v88;
              LOBYTE(v88) = *(_BYTE *)(v11 + 8);
              *(_BYTE *)(v11 + 8) = *(_BYTE *)(v85 + 8);
              *(_BYTE *)(v85 + 8) = v88;
              do
              {
                v89 = *(unsigned __int8 *)(v11 + 24);
                v11 += 16;
              }
              while (v47 >= v89);
              do
              {
                v90 = *(unsigned __int8 *)(v85 - 8);
                v85 -= 16;
              }
              while (v47 < v90);
            }
            if (v11 - 16 != v7)
            {
              *(_QWORD *)v7 = *(_QWORD *)(v11 - 16);
              *(_BYTE *)(v7 + 8) = *(_BYTE *)(v11 - 8);
            }
            a4 = 0;
            *(_QWORD *)(v11 - 16) = v46;
            *(_BYTE *)(v11 - 8) = v47;
            continue;
          }
          v17 = (unsigned __int8 *)(v15 + 8);
          v18 = *(unsigned __int8 *)(v15 + 8);
          v19 = (unsigned __int8 *)(v11 + 8);
          v20 = *(unsigned __int8 *)(v11 + 8);
          if (v18 < v20)
          {
            v21 = *(_QWORD *)v11;
            if (v16 >= v18)
            {
              *(_QWORD *)v11 = *(_QWORD *)v15;
              *(_QWORD *)v15 = v21;
              *(_BYTE *)(v11 + 8) = v18;
              *(_BYTE *)(v15 + 8) = v20;
              if (*v9 >= v20)
                goto LABEL_23;
              *(_QWORD *)v15 = *v8;
              *v8 = v21;
              v19 = (unsigned __int8 *)(v15 + 8);
            }
            else
            {
              *(_QWORD *)v11 = *v8;
              *v8 = v21;
            }
            v29 = (unsigned __int8 *)(a2 - 8);
            goto LABEL_22;
          }
          if (v16 < v18)
          {
            v27 = *(uint64_t **)v15;
            *(_QWORD *)v15 = *v8;
            *v8 = (uint64_t)v27;
            LOBYTE(v27) = *(_BYTE *)(v15 + 8);
            *(_BYTE *)(v15 + 8) = *v9;
            *v9 = (_BYTE)v27;
            if (*(unsigned __int8 *)(v15 + 8) < *v19)
            {
              v28 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v15;
              *(_QWORD *)v15 = v28;
              v29 = (unsigned __int8 *)(v15 + 8);
LABEL_22:
              v32 = *v19;
              *v19 = *v29;
              *v29 = v32;
            }
          }
LABEL_23:
          v33 = v11 + 16 * v14;
          v36 = *(unsigned __int8 *)(v33 - 8);
          v34 = (unsigned __int8 *)(v33 - 8);
          v35 = v36;
          v37 = (uint64_t **)(v34 - 8);
          v38 = (unsigned __int8 *)(v11 + 24);
          v39 = *(unsigned __int8 *)(v11 + 24);
          v40 = *v158;
          if (v36 < v39)
          {
            v41 = *(uint64_t **)(v11 + 16);
            if (v40 >= v35)
            {
              *(_QWORD *)(v11 + 16) = *v37;
              *v37 = v41;
              *(_BYTE *)(v11 + 24) = v35;
              *v34 = v39;
              if (*v158 >= v39)
                goto LABEL_39;
              *v37 = *(uint64_t **)(a2 - 32);
              *(_QWORD *)(a2 - 32) = v41;
              v38 = v34;
            }
            else
            {
              *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 - 32);
              *(_QWORD *)(a2 - 32) = v41;
            }
            v44 = (unsigned __int8 *)(a2 - 24);
            goto LABEL_38;
          }
          if (v40 < v35)
          {
            v42 = *v37;
            *v37 = *(uint64_t **)(a2 - 32);
            *(_QWORD *)(a2 - 32) = v42;
            LOBYTE(v42) = *v34;
            *v34 = *(_BYTE *)(a2 - 24);
            *(_BYTE *)(a2 - 24) = (_BYTE)v42;
            if (*v34 < *v38)
            {
              v43 = *(uint64_t **)(v11 + 16);
              *(_QWORD *)(v11 + 16) = *v37;
              *v37 = v43;
              v44 = v34;
LABEL_38:
              v48 = *v38;
              *v38 = *v44;
              *v44 = v48;
            }
          }
LABEL_39:
          v49 = v11 + 16 * v14;
          v52 = *(unsigned __int8 *)(v49 + 24);
          v50 = (unsigned __int8 *)(v49 + 24);
          v51 = v52;
          v53 = v50 - 8;
          v55 = (unsigned __int8 *)(v11 + 40);
          v54 = *(unsigned __int8 *)(v11 + 40);
          v56 = *v10;
          if (v52 < v54)
          {
            v57 = *(_QWORD *)(v11 + 32);
            if (v56 >= v51)
            {
              *(_QWORD *)(v11 + 32) = *(_QWORD *)v53;
              *(_QWORD *)v53 = v57;
              *(_BYTE *)(v11 + 40) = v51;
              *v50 = v54;
              v51 = v54;
              if (*v10 >= v54)
                goto LABEL_49;
              *(_QWORD *)v53 = *(_QWORD *)(a2 - 48);
              *(_QWORD *)(a2 - 48) = v57;
              v55 = v50;
            }
            else
            {
              *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 - 48);
              *(_QWORD *)(a2 - 48) = v57;
            }
            v60 = (unsigned __int8 *)(a2 - 40);
            goto LABEL_48;
          }
          if (v56 < v51)
          {
            v58 = *(_QWORD *)v53;
            *(_QWORD *)v53 = *(_QWORD *)(a2 - 48);
            *(_QWORD *)(a2 - 48) = v58;
            LOBYTE(v58) = *v50;
            *v50 = *(_BYTE *)(a2 - 40);
            *(_BYTE *)(a2 - 40) = v58;
            v51 = *v50;
            if (v51 < *v55)
            {
              v59 = *(_QWORD *)(v11 + 32);
              *(_QWORD *)(v11 + 32) = *(_QWORD *)v53;
              *(_QWORD *)v53 = v59;
              v60 = v50;
LABEL_48:
              v61 = *v55;
              *v55 = *v60;
              *v60 = v61;
              v51 = *v50;
            }
          }
LABEL_49:
          v62 = *v17;
          v63 = *v34;
          if (v62 >= v63)
          {
            result = *(uint64_t **)v15;
            if (v51 >= v62)
              goto LABEL_59;
            v64 = *(uint64_t **)v53;
            *(_QWORD *)v15 = *(_QWORD *)v53;
            *(_QWORD *)v53 = result;
            *(_BYTE *)(v15 + 8) = v51;
            v53[8] = v62;
            if (v51 < v63)
            {
              v65 = *v37;
              *v37 = v64;
              *(_QWORD *)v15 = v65;
LABEL_58:
              *v34 = v51;
              *v17 = v63;
              result = *(uint64_t **)v15;
              LOBYTE(v62) = *(_BYTE *)(v11 + 16 * v14 + 8);
              goto LABEL_59;
            }
            LOBYTE(v62) = v51;
            result = v64;
          }
          else
          {
            result = *v37;
            if (v51 < v62)
            {
              *v37 = *(uint64_t **)v53;
              *(_QWORD *)v53 = result;
LABEL_57:
              v17 = v50;
              goto LABEL_58;
            }
            *v37 = *(uint64_t **)v15;
            *(_QWORD *)v15 = result;
            *v34 = v62;
            *(_BYTE *)(v15 + 8) = v63;
            if (v51 < v63)
            {
              *(_QWORD *)v15 = *(_QWORD *)v53;
              *(_QWORD *)v53 = result;
              v34 = (unsigned __int8 *)(v15 + 8);
              goto LABEL_57;
            }
            LOBYTE(v62) = v63;
          }
LABEL_59:
          v66 = *(_QWORD *)v11;
          *(_QWORD *)v11 = result;
          *(_QWORD *)v15 = v66;
          v67 = v11 + 16 * v14;
          v68 = *(_BYTE *)(v11 + 8);
          *(_BYTE *)(v11 + 8) = v62;
          *(_BYTE *)(v67 + 8) = v68;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_60;
LABEL_34:
          v46 = *(_QWORD *)v11;
          v47 = *(unsigned __int8 *)(v11 + 8);
LABEL_61:
          v69 = v11;
          do
          {
            v70 = v69;
            v69 += 16;
          }
          while (*(unsigned __int8 *)(v70 + 24) < v47);
          v71 = a2;
          if (v70 == v11)
          {
            v74 = a2;
            while (v69 < v74)
            {
              v72 = v74 - 16;
              v75 = *(unsigned __int8 *)(v74 - 8);
              v74 -= 16;
              if (v75 < v47)
                goto LABEL_71;
            }
            v72 = v74;
          }
          else
          {
            do
            {
              v72 = v71 - 16;
              v73 = *(unsigned __int8 *)(v71 - 8);
              v71 -= 16;
            }
            while (v73 >= v47);
          }
LABEL_71:
          v11 = v69;
          if (v69 < v72)
          {
            v76 = v72;
            do
            {
              v77 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v76;
              *(_QWORD *)v76 = v77;
              LOBYTE(v77) = *(_BYTE *)(v11 + 8);
              *(_BYTE *)(v11 + 8) = *(_BYTE *)(v76 + 8);
              *(_BYTE *)(v76 + 8) = v77;
              do
              {
                v78 = *(unsigned __int8 *)(v11 + 24);
                v11 += 16;
              }
              while (v78 < v47);
              do
              {
                v79 = *(unsigned __int8 *)(v76 - 8);
                v76 -= 16;
              }
              while (v79 >= v47);
            }
            while (v11 < v76);
          }
          if (v11 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v11 - 16);
            *(_BYTE *)(v7 + 8) = *(_BYTE *)(v11 - 8);
          }
          *(_QWORD *)(v11 - 16) = v46;
          *(_BYTE *)(v11 - 8) = v47;
          if (v69 < v72)
            goto LABEL_82;
          v80 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>(v7, v11 - 16);
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>(v11, a2);
          if (!(_DWORD)result)
          {
            if (v80)
              continue;
LABEL_82:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *,false>(v7, v11 - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v11 - 16;
          if (v80)
            return result;
          goto LABEL_2;
        }
        v107 = (_QWORD *)(v11 + 16);
        v109 = v11 == a2 || v107 == (_QWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v109)
          {
            v110 = 0;
            v111 = (_QWORD *)v11;
            do
            {
              v113 = *((unsigned __int8 *)v111 + 24);
              v114 = *((unsigned __int8 *)v111 + 8);
              v111 = v107;
              if (v113 < v114)
              {
                v115 = *v107;
                v116 = v110;
                do
                {
                  v117 = v11 + v116;
                  *(_QWORD *)(v117 + 16) = *(_QWORD *)(v11 + v116);
                  *(_BYTE *)(v117 + 24) = *(_BYTE *)(v11 + v116 + 8);
                  if (!v116)
                  {
                    v112 = v11;
                    goto LABEL_127;
                  }
                  v116 -= 16;
                }
                while (v113 < *(unsigned __int8 *)(v117 - 8));
                v112 = v11 + v116 + 16;
LABEL_127:
                *(_QWORD *)v112 = v115;
                *(_BYTE *)(v112 + 8) = v113;
              }
              v107 = v111 + 2;
              v110 += 16;
            }
            while (v111 + 2 != (_QWORD *)a2);
          }
        }
        else if (!v109)
        {
          v151 = v11 + 8;
          do
          {
            v152 = *(unsigned __int8 *)(v7 + 24);
            v153 = *(unsigned __int8 *)(v7 + 8);
            v7 = (uint64_t)v107;
            if (v152 < v153)
            {
              v154 = *v107;
              v155 = v151;
              do
              {
                *(_QWORD *)(v155 + 8) = *(_QWORD *)(v155 - 8);
                *(_BYTE *)(v155 + 16) = *(_BYTE *)v155;
                v156 = *(unsigned __int8 *)(v155 - 16);
                v155 -= 16;
              }
              while (v152 < v156);
              *(_QWORD *)(v155 + 8) = v154;
              *(_BYTE *)(v155 + 16) = v152;
            }
            v107 = (_QWORD *)(v7 + 16);
            v151 += 16;
          }
          while (v7 + 16 != a2);
        }
        return result;
    }
  }
}

void ___Z12_buildMeshesRNSt3__16vectorINS0_IN3geo11_retain_ptrIU8__strongP15VKBuildingGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS_9allocatorISA_EEEENSB_ISD_EEEERN3ggl21CullingGridWithHeightERN2md12TriangulatorIfEEPNSH_6DeviceEbRKNS_10shared_ptrINSK_21GEOVectorTileResourceEEERKNSQ_IN3gss17StylesheetManagerINSV_10PropertyIDEEEEEfRKNS1_8QuadTileE_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  BOOL v29;
  _DWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t j;
  id v40;
  uint64_t v41;

  v5 = **(uint64_t ***)(a1 + 40);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      v8 = *(id *)(v6 + 8);
      objc_msgSend(v8, "willAddDataWithAccessor:", a2);

      v6 += 24;
    }
    while (v6 != v7);
    v5 = **(uint64_t ***)(a1 + 40);
  }
  v9 = v5[3];
  v10 = v5[4];
  if (v9 != v10)
  {
    do
    {
      v11 = *(id *)(v9 + 8);
      objc_msgSend(v11, "willAddDataWithAccessor:", a2);

      v9 += 24;
    }
    while (v9 != v10);
    v5 = **(uint64_t ***)(a1 + 40);
  }
  v12 = v5[6];
  for (i = v5[7]; v12 != i; v12 += 24)
  {
    v14 = *(id *)(v12 + 8);
    objc_msgSend(v14, "willAddDataWithAccessor:", a2);

  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v16 = *(uint64_t **)(v15 + 48);
  v17 = *(uint64_t **)(v15 + 56);
  if (v16 != v17)
  {
    v18 = 0;
    while (1)
    {
      v19 = *v16;
      if (*(_BYTE *)(*v16 + 128))
        goto LABEL_12;
      if (*(_DWORD *)(v19 + 100))
        break;
LABEL_11:
      ++v18;
LABEL_12:
      v16 += 2;
      if (v16 == v17)
        goto LABEL_28;
    }
    v20 = (uint64_t *)(**(_QWORD **)(a1 + 40) + 24 * (v18 % 3));
    v21 = *v20;
    v22 = v20[1];
    if (*v20 == v22)
    {
LABEL_18:
      v25 = 0;
      v26 = *(unsigned __int8 *)(a1 + 68);
      if (!*(_BYTE *)(a1 + 68))
        goto LABEL_26;
    }
    else
    {
      while (1)
      {
        v23 = *(id *)(v21 + 8);
        v24 = objc_msgSend(v23, "canAcceptPolygon:", v19);

        if (v24)
          break;
        v21 += 24;
        if (v21 == v22)
          goto LABEL_18;
      }
      v25 = *(id *)(v21 + 8);
      v26 = *(unsigned __int8 *)(a1 + 68);
      if (!*(_BYTE *)(a1 + 68))
        goto LABEL_26;
    }
    v27 = *(unsigned __int8 **)(v19 + 24);
    v28 = v27[33];
    if (v27[33])
    {
      v29 = 0;
      v30 = (_DWORD *)(*(_QWORD *)v27 + 4);
      do
      {
        if (*(v30 - 1) == 19)
          v29 = *v30 == 0;
        v30 += 2;
        --v28;
      }
      while (v28);
      goto LABEL_27;
    }
LABEL_26:
    v29 = 0;
LABEL_27:
    LODWORD(a3) = *(_DWORD *)(a1 + 64);
    LOBYTE(v41) = v29;
    objc_msgSend(v25, "addBuilding:index:ofTotal:accessor:triangulator:prepareExtrusion:forRoofStyle:scaleThreshold:", v19, v18, *(_QWORD *)(a1 + 48), a2, *(_QWORD *)(a1 + 56), v26 != 0, a3, v41);

    goto LABEL_11;
  }
LABEL_28:
  v31 = **(uint64_t ***)(a1 + 40);
  v32 = *v31;
  v33 = v31[1];
  if (*v31 != v33)
  {
    do
    {
      v34 = *(id *)(v32 + 8);
      objc_msgSend(v34, "didFinishAddingData");

      v32 += 24;
    }
    while (v32 != v33);
    v31 = **(uint64_t ***)(a1 + 40);
  }
  v35 = v31[3];
  v36 = v31[4];
  if (v35 != v36)
  {
    do
    {
      v37 = *(id *)(v35 + 8);
      objc_msgSend(v37, "didFinishAddingData");

      v35 += 24;
    }
    while (v35 != v36);
    v31 = **(uint64_t ***)(a1 + 40);
  }
  v38 = v31[6];
  for (j = v31[7]; v38 != j; v38 += 24)
  {
    v40 = *(id *)(v38 + 8);
    objc_msgSend(v40, "didFinishAddingData");

  }
}

void sub_19FCB33A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4BD0;

  return a1;
}

void geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4BD0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 8);
  v5 = (unsigned __int8 *)(result + 1);
  v6 = (unsigned __int8 *)(a3 + 1);
  v7 = *((unsigned __int8 *)a3 + 8);
  if (v4 >= *((unsigned __int8 *)result + 8))
  {
    if (v7 < v4)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      v7 = *((unsigned __int8 *)a2 + 8);
      *((_BYTE *)a2 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)a3 + 8) = v7;
      if (*((unsigned __int8 *)a2 + 8) < *v5)
      {
        v11 = *result;
        *result = *a2;
        *a2 = v11;
        v9 = (char *)(result + 1);
        v12 = (char *)(a2 + 1);
LABEL_10:
        v15 = *v9;
        *v9 = *v12;
        *v12 = v15;
        v7 = *v6;
      }
    }
  }
  else
  {
    v8 = *result;
    if (v7 < v4)
    {
      *result = *a3;
      *a3 = v8;
      v9 = (char *)(result + 1);
LABEL_9:
      v12 = (char *)(a3 + 1);
      goto LABEL_10;
    }
    *result = *a2;
    *a2 = v8;
    v13 = *((unsigned __int8 *)result + 8);
    *((_BYTE *)result + 8) = *((_BYTE *)a2 + 8);
    *((_BYTE *)a2 + 8) = v13;
    v7 = *v6;
    if (v7 < v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v9 = (char *)(a2 + 1);
      goto LABEL_9;
    }
  }
  if (*((unsigned __int8 *)a4 + 8) < v7)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    LOBYTE(v16) = *((_BYTE *)a3 + 8);
    *((_BYTE *)a3 + 8) = *((_BYTE *)a4 + 8);
    *((_BYTE *)a4 + 8) = v16;
    if (*((unsigned __int8 *)a3 + 8) < *((unsigned __int8 *)a2 + 8))
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      LOBYTE(v17) = *((_BYTE *)a2 + 8);
      *((_BYTE *)a2 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)a3 + 8) = v17;
      if (*((unsigned __int8 *)a2 + 8) < *v5)
      {
        v18 = *result;
        *result = *a2;
        *a2 = v18;
        LOBYTE(v18) = *((_BYTE *)result + 8);
        *((_BYTE *)result + 8) = *((_BYTE *)a2 + 8);
        *((_BYTE *)a2 + 8) = v18;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(unsigned __int8 *)(a2 - 8) < *(unsigned __int8 *)(a1 + 8))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v6;
        LOBYTE(v6) = *(_BYTE *)(a1 + 8);
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 - 8);
        *(_BYTE *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      v7 = (char *)(a1 + 8);
      v8 = *(unsigned __int8 *)(a1 + 8);
      v9 = (char *)(a1 + 24);
      v10 = *(unsigned __int8 *)(a1 + 24);
      v11 = *(unsigned __int8 *)(a2 - 8);
      if (v10 < v8)
      {
        v12 = *(_QWORD *)a1;
        if (v11 >= v10)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_BYTE *)(a1 + 8) = v10;
          *(_BYTE *)(a1 + 24) = v8;
          if (*(unsigned __int8 *)(a2 - 8) >= v8)
            return result;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v12;
          v7 = (char *)(a1 + 24);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v12;
        }
        v9 = (char *)(a2 - 8);
        goto LABEL_25;
      }
      if (v11 < v10)
      {
        v28 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v28;
        LOBYTE(v28) = *(_BYTE *)(a1 + 24);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 - 8);
        *(_BYTE *)(a2 - 8) = v28;
        if (*(unsigned __int8 *)(a1 + 24) < *(unsigned __int8 *)(a1 + 8))
        {
          v29 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v29;
LABEL_25:
          v33 = *v7;
          *v7 = *v9;
          *v9 = v33;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (uint64_t *)(a2 - 16));
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_buildMeshes(std::vector<std::vector<geo::_retain_ptr<VKBuildingGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>> &,ggl::CullingGridWithHeight &,md::Triangulator<float> &,ggl::Device *,BOOL,std::shared_ptr<md::GEOVectorTileResource> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,float,geo::QuadTile const&)::$_0 &,std::pair<GeoCodecsBuildingFootprintFeature *,unsigned char> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 48));
      if (*(unsigned __int8 *)(a2 - 8) < *(unsigned __int8 *)(a1 + 56))
      {
        v19 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v19;
        LOBYTE(v19) = *(_BYTE *)(a1 + 56);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 - 8);
        *(_BYTE *)(a2 - 8) = v19;
        v20 = *(unsigned __int8 *)(a1 + 56);
        v21 = *(unsigned __int8 *)(a1 + 40);
        if (v20 < v21)
        {
          v22 = *(_QWORD *)(a1 + 32);
          v23 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = v23;
          *(_QWORD *)(a1 + 48) = v22;
          *(_BYTE *)(a1 + 40) = v20;
          *(_BYTE *)(a1 + 56) = v21;
          v24 = *(unsigned __int8 *)(a1 + 24);
          if (v20 < v24)
          {
            v25 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v23;
            *(_QWORD *)(a1 + 32) = v25;
            *(_BYTE *)(a1 + 24) = v20;
            *(_BYTE *)(a1 + 40) = v24;
            v26 = *(unsigned __int8 *)(a1 + 8);
            if (v20 < v26)
            {
              v27 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v23;
              *(_QWORD *)(a1 + 16) = v27;
              *(_BYTE *)(a1 + 8) = v20;
              *(_BYTE *)(a1 + 24) = v26;
            }
          }
        }
      }
      return 1;
    default:
      v13 = *(unsigned __int8 *)(a1 + 8);
      v14 = (_BYTE *)(a1 + 24);
      v15 = *(unsigned __int8 *)(a1 + 24);
      v16 = *(unsigned __int8 *)(a1 + 40);
      if (v15 < v13)
      {
        v17 = *(_QWORD *)a1;
        if (v16 >= v15)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          *(_BYTE *)(a1 + 8) = v15;
          *(_BYTE *)(a1 + 24) = v13;
          if (v16 >= v13)
            goto LABEL_30;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v17;
          v18 = (_BYTE *)(a1 + 24);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v17;
          v18 = (_BYTE *)(a1 + 8);
        }
        v14 = (_BYTE *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 < v15)
      {
        v30 = *(_QWORD *)(a1 + 16);
        v31 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 16) = v31;
        *(_QWORD *)(a1 + 32) = v30;
        *(_BYTE *)(a1 + 24) = v16;
        *(_BYTE *)(a1 + 40) = v15;
        if (v16 < v13)
        {
          v32 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v31;
          *(_QWORD *)(a1 + 16) = v32;
          v18 = (_BYTE *)(a1 + 8);
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v34 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      v37 = a1 + 32;
      while (1)
      {
        v39 = *(unsigned __int8 *)(v34 + 8);
        if (v39 < *(unsigned __int8 *)(v37 + 8))
        {
          v40 = *(_QWORD *)v34;
          v41 = v35;
          do
          {
            v42 = a1 + v41;
            *(_QWORD *)(v42 + 48) = *(_QWORD *)(a1 + v41 + 32);
            *(_BYTE *)(v42 + 56) = *(_BYTE *)(a1 + v41 + 40);
            if (v41 == -32)
            {
              v38 = a1;
              goto LABEL_33;
            }
            v41 -= 16;
          }
          while (v39 < *(unsigned __int8 *)(v42 + 24));
          v38 = a1 + v41 + 48;
LABEL_33:
          *(_QWORD *)v38 = v40;
          *(_BYTE *)(v38 + 8) = v39;
          if (++v36 == 8)
            return v34 + 16 == a2;
        }
        v37 = v34;
        v35 += 16;
        v34 += 16;
        if (v34 == a2)
          return 1;
      }
  }
}

void colorLerp(float *a1, float *a2, float *a3, float a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v36;
  _BOOL4 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  BOOL v42;
  float v43;
  float v44;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = fmaxf(fmaxf(*a2, v8), v9);
  v11 = v10 - fminf(v9, fminf(v8, *a2));
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  if (v11 > 0.0)
  {
    if (v10 == v7)
    {
      v14 = fmod((float)((float)(v8 - v9) / v11), 6.0) * 60.0;
    }
    else
    {
      if (v10 == v8)
      {
        v15 = (float)((float)(v9 - v7) * 60.0) / v11;
        v16 = 120.0;
      }
      else
      {
        if (v10 != v9)
        {
          if (v10 <= 0.0)
            v13 = 0.0;
          else
            v13 = v11 / v10;
          goto LABEL_14;
        }
        v15 = (float)((float)(v7 - v8) * 60.0) / v11;
        v16 = 240.0;
      }
      v14 = v15 + v16;
    }
    if (v10 <= 0.0)
      v13 = 0.0;
    else
      v13 = v11 / v10;
    if (v14 < 0.0)
      v14 = v14 + 360.0;
  }
LABEL_14:
  v17 = *a3;
  v18 = a3[1];
  v19 = a3[2];
  v20 = fmaxf(fmaxf(*a3, v18), v19);
  v21 = v20 - fminf(v19, fminf(v18, *a3));
  v22 = 0.0;
  if (v21 > 0.0)
  {
    if (v20 == v17)
    {
      v22 = fmod((float)((float)(v18 - v19) / v21), 6.0) * 60.0;
    }
    else
    {
      if (v20 == v18)
      {
        v23 = (float)((float)(v19 - v17) * 60.0) / v21;
        v24 = 120.0;
      }
      else
      {
        if (v20 != v19)
        {
          if (v20 <= 0.0)
            v12 = 0.0;
          else
            v12 = v21 / v20;
          goto LABEL_27;
        }
        v23 = (float)((float)(v17 - v18) * 60.0) / v21;
        v24 = 240.0;
      }
      v22 = v23 + v24;
    }
    if (v20 <= 0.0)
      v12 = 0.0;
    else
      v12 = v21 / v20;
    if (v22 < 0.0)
      v22 = v22 + 360.0;
  }
LABEL_27:
  v25 = v14 + (float)((float)(v22 - v14) * a4);
  v26 = v13 + (float)((float)(v12 - v13) * a4);
  v27 = v10 + (float)((float)(v20 - v10) * a4);
  v28 = v26 * v27;
  v29 = fmod(v25 * 0.0166666667, 6.0);
  v30 = v28 - fabs(fmod(v29, 2.0) + -1.0) * v28;
  v31 = v27 - v28;
  if (v29 >= 0.0 && v29 < 1.0)
  {
    v44 = v31 + v30;
    v43 = v27;
  }
  else if (v29 >= 1.0 && v29 < 2.0)
  {
    v43 = v31 + v30;
    v44 = v27;
  }
  else if (v29 >= 2.0 && v29 < 3.0)
  {
    v43 = v27 - v28;
    v31 = v31 + v30;
    v44 = v27;
  }
  else if (v29 >= 3.0 && v29 < 4.0)
  {
    v44 = v31 + v30;
    v43 = v27 - v28;
    v31 = v27;
  }
  else
  {
    v36 = v29 >= 5.0;
    v37 = v29 < 6.0;
    if (v36 && v37)
      v38 = v27;
    else
      v38 = v27 - v28;
    v39 = -0.0;
    if (v36 && v37)
      v39 = v30;
    v40 = v39 + v31;
    v41 = v31 + v30;
    v42 = v29 >= 4.0 && v29 < 5.0;
    if (v42)
      v43 = v41;
    else
      v43 = v38;
    v44 = v27 - v28;
    if (v42)
      v31 = v27;
    else
      v31 = v40;
  }
  *a1 = v43;
  a1[1] = v44;
  a1[2] = v31;
}

void md::MuninRoadLabeler::updateDebugSettings(md::MuninRoadLabeler *this)
{
  id v2;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 49) = objc_msgSend(v2, "enableMuninRoadNetworkMiniMap");

}

void sub_19FCB41A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL md::MuninRoadLabeler::needsDebugDraw(md::MuninRoadLabeler *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v5[2];

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = atomic_load((unsigned __int8 *)(v2 + 298));
    if ((v3 & 1) == 0)
    {
      v5[0] = 0;
      v5[1] = 0;
      md::MuninRoadLabeler::setDebugHighlight((uint64_t)this, v5);
    }
  }
  return *((_BYTE *)this + 49) || *((_QWORD *)this + 7) != 0;
}

void md::MuninRoadLabeler::setDebugHighlight(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      atomic_store(0, (unsigned __int8 *)(v3 + 298));
      v4 = *a2;
    }
    v5 = a2[1];
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = v5;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v4 = *(_QWORD *)(a1 + 56);
    }
    if (v4)
      atomic_store(1u, (unsigned __int8 *)(v4 + 298));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        __p[0] = *(void **)(a1 + 8);
        buf[0] = 9;
        (*(void (**)(uint64_t, void **, uint8_t *))(*(_QWORD *)v12 + 48))(v12, __p, buf);
      }
    }
    v3 = *(_QWORD *)(a1 + 56);
  }
  if (v3)
  {
    if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_29386);
    v13 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      md::MuninRoadLabel::debugString((md::MuninRoadLabel *)__p, *(md::LabelManager **)(a1 + 56), *(_QWORD *)(a1 + 8), 1);
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v18 = v14;
      _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_INFO, "\n%s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_19FCB43E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL32GEOGetVectorKitLabelHighlightLogv_block_invoke_29389()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelHighlight");
  v1 = (void *)GEOGetVectorKitLabelHighlightLog(void)::log;
  GEOGetVectorKitLabelHighlightLog(void)::log = (uint64_t)v0;

}

void md::MuninRoadLabeler::clearDebugHighlight(md::MuninRoadLabeler *this)
{
  uint64_t v1[2];

  v1[0] = 0;
  v1[1] = 0;
  md::MuninRoadLabeler::setDebugHighlight((uint64_t)this, v1);
}

void sub_19FCB4458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::MuninRoadLabeler::debugHighlightLabelAtPixel(uint64_t a1, float *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  float v4;
  float v5;
  uint64_t v6;
  float *v7;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];

  v2 = *(uint64_t **)(a1 + 104);
  v3 = *(uint64_t **)(a1 + 112);
  if (v2 == v3)
    return 0;
  v4 = *a2;
  v5 = a2[1];
  while (1)
  {
    v6 = *v2;
    v7 = *(float **)(*(_QWORD *)(*v2 + 64) + 24);
    if (v4 >= v7[98] && v4 < v7[100] && v5 >= v7[99] && v5 < v7[101])
      break;
    v2 += 2;
    if (v2 == v3)
      return 0;
  }
  v10 = (std::__shared_weak_count *)v2[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v16[0] = v6;
  v16[1] = (uint64_t)v10;
  md::MuninRoadLabeler::setDebugHighlight(a1, v16);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 1;
}

void sub_19FCB4554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::optional<md::RoadSearchResult>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::MuninRoadLabeler::debugDraw(md::MuninRoadLabeler *this, NSMutableString *a2, float32x2_t *a3)
{
  NSMutableString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  void *v11;
  void **v12;
  void *v13;
  void *__p[2];
  char v15;

  v5 = a2;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = *((_QWORD *)this + 1);
    if (*(_BYTE *)(v8 + 3643))
    {
      md::MuninRoadLabel::debugDraw(v7, (uint64_t)a3);
    }
    else
    {
      -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("LayoutZoom:%.2f\n"), *(float *)(v8 + 472));
      v10 = *((_QWORD *)this + 7);
      if (v10)
      {
        md::MuninRoadLabel::debugDraw(v10, (uint64_t)a3);
        v11 = (void *)MEMORY[0x1E0CB3940];
        md::MuninRoadLabel::debugString((md::MuninRoadLabel *)__p, *((md::LabelManager **)this + 7), *((_QWORD *)this + 1), 0);
        v12 = v15 >= 0 ? __p : (void **)__p[0];
        objc_msgSend(v11, "stringWithUTF8String:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSMutableString appendString:](v5, "appendString:", v13);

        if (v15 < 0)
          operator delete(__p[0]);
      }
    }
  }
  if (objc_msgSend(v6, "enableMuninRoadNetworkMiniMap"))
  {
    objc_msgSend(v6, "muninRoadNetworkMiniMapAreaInMeters");
    md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(this, a3, v9);
  }

}

void sub_19FCB4694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::MuninRoadLabeler *this, float32x2_t *a2, double a3)
{
  unint64_t v3;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  float v10;
  float32_t v11;
  char *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  double *v55;
  double *v56;
  double v57;
  double v58;
  BOOL v59;
  double v61;
  float64x2_t v71;
  float32x4_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  double *v76;
  char v78;
  float v79;
  float v80;
  float v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  __int128 v87;
  uint64_t v88;
  double v89;
  double v91;
  double v93;
  double v94;
  _BYTE *v95;
  _BYTE *v96;
  int64_t v97;
  char *v98;
  char *v99;
  double *v101;
  _QWORD *v102;
  __n128 v103;
  _QWORD *v104;
  char *v105;
  _BYTE *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  size_t v113;
  _BYTE *v114;
  _BYTE *v115;
  unint64_t v116;
  char *v117;
  void *v118;
  int64_t v119;
  const void *v120;
  char *v121;
  __n128 *v122;
  __n128 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  __n128 *v134;
  __n128 v135;
  __n128 *v136;
  __n128 *v137;
  size_t v138;
  char *v139;
  __n128 *v140;
  void *v141;
  unint64_t v142;
  uint64_t v143;
  double *v144;
  double *v145;
  double v146;
  double v147;
  float v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x4_t v151;
  float32x4_t v152;
  __int128 v153;
  double v154;
  double v155;
  double v157;
  char *v158;
  unint64_t v159;
  double v160;
  double v161;
  uint64_t v162;
  double v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  double v175;
  double v176;
  unint64_t v177;
  double v178;
  double *v179;
  double v180;
  unint64_t v181;
  double v182;
  double v183;
  double v184;
  double *v185;
  unint64_t v186;
  double v187;
  float64x2_t *v188;
  float64x2_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  double v197;
  double *v198;
  double v199;
  double v200;
  double v201;
  double *i;
  BOOL v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  double v209;
  double v210;
  unint64_t v211;
  double v212;
  double v213;
  unint64_t v214;
  double *v215;
  double v216;
  double v217;
  double v218;
  double *v219;
  unint64_t v220;
  double v221;
  float64x2_t *v222;
  float64x2_t v223;
  double *v224;
  double *v225;
  double v226;
  float v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x4_t v231;
  __int128 v232;
  double v233;
  double v234;
  double v236;
  char *v237;
  unint64_t v238;
  double v239;
  double v240;
  uint64_t v241;
  double v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  double v254;
  double v255;
  unint64_t v256;
  double v257;
  double *v258;
  double v259;
  unint64_t v260;
  double v261;
  double v262;
  double v263;
  double *v264;
  unint64_t v265;
  double v266;
  float64x2_t *v267;
  float64x2_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  double v276;
  double *v277;
  double v278;
  double v279;
  double v280;
  double *j;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  double v288;
  double v289;
  unint64_t v290;
  double v291;
  double v292;
  unint64_t v293;
  double *v294;
  double v295;
  double v296;
  double v297;
  double *v298;
  unint64_t v299;
  double v300;
  float64x2_t *v301;
  float64x2_t v302;
  double *v303;
  double v304;
  double v305;
  unint64_t v307;
  double v308;
  double v309;
  double v310;
  double v311;
  char *v312;
  uint64_t v313;
  double v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  BOOL v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  double v325;
  double v326;
  unint64_t v327;
  double *v328;
  double v329;
  unint64_t v330;
  double v331;
  double v332;
  double *v333;
  unint64_t v334;
  double v335;
  unint64_t v336;
  uint64_t v337;
  double v338;
  _BOOL4 v339;
  double v340;
  float32x2_t v341;
  float32x2_t v342;
  float32x2_t v343;
  float32x4_t v344;
  float32x4_t v345;
  __int128 v346;
  double v347;
  double v348;
  double v349;
  char *v350;
  unint64_t v351;
  uint64_t v352;
  double v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  BOOL v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  double v364;
  double v365;
  unint64_t v366;
  double *v367;
  double v368;
  unint64_t v369;
  double v370;
  double v371;
  double *v372;
  unint64_t v373;
  double v374;
  double v377;
  uint64_t v378;
  uint64_t v379;
  double *v380;
  float64x2_t *v381;
  float64x2_t v382;
  float64x2_t *v383;
  float64x2_t v384;
  char *v385;
  char *v386;
  void *v387;
  void *v388;
  void *v389;
  MuninRoadEdge **v390;
  MuninRoadEdge *v391;
  uint64_t v392;
  MuninRoadEdge **v393;
  uint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  uint64_t v398;
  int v399;
  double v400;
  double v401;
  double v402;
  double v403;
  BOOL v404;
  MuninRoadEdge **v406;
  MuninRoadEdge **v407;
  _QWORD *v408;
  uint64_t v409;
  MuninRoadEdge *v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  int v419;
  uint64_t **v420;
  uint64_t *v421;
  unint64_t v422;
  uint64_t v423;
  int v424;
  _QWORD *v425;
  _QWORD *v426;
  unint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  float v430;
  _BOOL8 v431;
  unint64_t v432;
  unint64_t v433;
  size_t v434;
  void *v435;
  void *v436;
  uint64_t v437;
  _QWORD *v438;
  size_t v439;
  size_t v440;
  size_t v441;
  _QWORD *k;
  size_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  size_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  unint64_t v454;
  unint64_t v455;
  size_t v456;
  int8x8_t v457;
  unint64_t v459;
  uint64_t v460;
  void *v461;
  void *v462;
  uint64_t v463;
  _QWORD **v464;
  size_t v465;
  size_t v466;
  size_t v467;
  _QWORD *v468;
  size_t v469;
  uint64_t v470;
  _QWORD *v471;
  _QWORD *m;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  size_t v478;
  _QWORD *v479;
  _QWORD *v480;
  unint64_t v481;
  uint64_t v482;
  _QWORD *v483;
  _QWORD *v484;
  void *v485;
  void *v486;
  BOOL v487;
  uint64_t *v488;
  _QWORD *v489;
  void *v490;
  void *v491;
  unint64_t *v492;
  uint64_t *v493;
  unint64_t v494;
  double v495;
  double v497;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint8x8_t v502;
  unint64_t v503;
  _QWORD *v504;
  _QWORD *v505;
  unint64_t v506;
  uint64_t v507;
  unsigned int v508;
  char v509;
  void *v510;
  unsigned int v511;
  char *v512;
  char *v513;
  unint64_t v514;
  double v515;
  _BOOL4 v516;
  uint64_t v517;
  _QWORD *v518;
  double v519;
  uint64_t v520;
  double v521;
  uint64_t v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  BOOL v528;
  BOOL v529;
  float32x2_t v530;
  float v531;
  float64_t v532;
  float64_t v533;
  double v534;
  float v535;
  float v536;
  float v537;
  float v538;
  float v539;
  float v540;
  float v542;
  BOOL v543;
  ggl::DebugConsole *v544;
  char *v545;
  _QWORD *v546;
  double v547;
  double v549;
  _QWORD *v551;
  _QWORD *n;
  __int128 v553;
  double **v554;
  double **v555;
  double *v556;
  long double v557;
  long double v558;
  long double v559;
  double v560;
  double v561;
  __double2 v562;
  long double v563;
  long double v564;
  long double v565;
  float64x2_t v566;
  float64x2_t v567;
  char *v568;
  char *v569;
  _QWORD *v570;
  _QWORD *v571;
  void *v572;
  double v573;
  double v574;
  float v575;
  double v576;
  uint64_t *v577;
  _QWORD *v578;
  char v579;
  int v580;
  int v581;
  char *v582;
  void *v583;
  char *v584;
  float64x2_t v585;
  float64x2_t v586;
  double __srcd;
  _BYTE *__src;
  _QWORD *__srca;
  unint64_t __srcb;
  double __srcc;
  double __nc;
  size_t __n;
  char *__na;
  double __nb;
  long double __nd;
  uint64_t v597;
  void *v598[2];
  void *v599[2];
  float v600;
  double v601;
  double v602;
  ggl::DebugConsole *v603;
  float32x2_t v604;
  float32x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  double v610;
  float64x2_t v611;
  double v612;
  float64x2_t v613;
  double v614;
  float32x2_t v615;
  float v616;
  float v617;
  float v618;
  float v619;
  float v620;
  float32_t v621;
  float v622;
  _DWORD v623[4];
  int v624;
  uint64_t v625;
  int v626;
  float v627[3];
  __int128 v628;
  __int128 v629;
  float v630;
  void *v631;
  char *v632;
  unint64_t v633;
  double v634;
  float64x2_t v635;
  float64x2_t v636;
  double v637;
  double v638;
  MuninRoadEdge *v639;
  void *v640;
  uint64_t v641;
  void *v642;
  __n128 *v643;
  __n128 *v644;
  void *v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  unint64_t v652;
  __int128 v653;
  _BYTE v654[24];
  _BYTE *v655;
  uint64_t v656;

  v656 = *MEMORY[0x1E0C80C00];
  v624 = -16776961;
  v6 = *((_QWORD *)this + 1);
  v575 = *(float *)(v6 + 176);
  v7 = (double *)*((_QWORD *)this + 35);
  v8 = v7[3];
  v9 = v7[4];
  v576 = v7[102];
  v10 = *(float *)(v6 + 1508);
  LODWORD(v6) = *(_DWORD *)(v6 + 1504);
  v623[0] = 0;
  *(float *)&v623[1] = v10 * 0.25;
  v623[2] = v6;
  *(float *)&v623[3] = v10 * 0.75;
  v573 = v9;
  v574 = v8;
  *(double *)&v628 = v8;
  *((double *)&v628 + 1) = v9;
  v601 = a3;
  v602 = a3;
  md::DebugConsoleMapRect::DebugConsoleMapRect((uint64_t)&v603, (uint64_t)a2, (uint64_t)v623, (double *)&v628, &v602, &v601);
  a2[12].i32[0] = 0x80000000;
  v11 = v604.f32[0];
  a2[1] = v604;
  ggl::DebugConsole::drawRectangleWithFill(a2, &v605, v11);
  a2[12].i32[0] = -1;
  *(_OWORD *)v598 = 0u;
  *(_OWORD *)v599 = 0u;
  v600 = 1.0;
  v12 = (char *)*((_QWORD *)this + 21);
  v582 = (char *)this + 176;
  if (v12 != (char *)this + 176)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = **((_QWORD **)v12 + 4);
      v16 = 0x9DDFEA08EB382D69 * (((8 * v15) + 8) ^ HIDWORD(v15));
      v17 = 0x9DDFEA08EB382D69 * (HIDWORD(v15) ^ (v16 >> 47) ^ v16);
      v18 = v17 ^ (v17 >> 47);
      v19 = 0x9DDFEA08EB382D69 * v18;
      if (v14)
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v3 = 0x9DDFEA08EB382D69 * v18;
          if (v19 >= v14)
            v3 = v19 % v14;
        }
        else
        {
          v3 = v19 & (v14 - 1);
        }
        v21 = (_QWORD *)*((_QWORD *)v598[0] + v3);
        if (v21)
        {
          v22 = (_QWORD *)*v21;
          if (v22)
          {
            if (v20.u32[0] < 2uLL)
            {
              while (1)
              {
                v24 = v22[1];
                if (v24 == v19)
                {
                  if (v22[2] == v15)
                    goto LABEL_62;
                }
                else if ((v24 & (v14 - 1)) != v3)
                {
                  goto LABEL_24;
                }
                v22 = (_QWORD *)*v22;
                if (!v22)
                  goto LABEL_24;
              }
            }
            do
            {
              v23 = v22[1];
              if (v23 == v19)
              {
                if (v22[2] == v15)
                  goto LABEL_62;
              }
              else
              {
                if (v23 >= v14)
                  v23 %= v14;
                if (v23 != v3)
                  break;
              }
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
        }
      }
LABEL_24:
      v25 = operator new(0x18uLL);
      *v25 = 0;
      v25[1] = v19;
      v25[2] = v15;
      v26 = (float)((unint64_t)v13 + 1);
      if (!v14 || (float)(v600 * (float)v14) < v26)
      {
        v27 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3)
          v27 = 1;
        v28 = v27 | (2 * v14);
        v29 = vcvtps_u32_f32(v26 / v600);
        if (v28 <= v29)
          prime = v29;
        else
          prime = v28;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v14 = (unint64_t)v598[1];
        }
        if (prime > v14)
          goto LABEL_36;
        if (prime < v14)
        {
          v31 = vcvtps_u32_f32((float)(unint64_t)v599[1] / v600);
          if (v14 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
          {
            v31 = std::__next_prime(v31);
          }
          else
          {
            v33 = 1 << -(char)__clz(v31 - 1);
            if (v31 >= 2)
              v31 = v33;
          }
          if (prime <= v31)
            prime = v31;
          if (prime < v14)
LABEL_36:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v598, prime);
        }
        v14 = (unint64_t)v598[1];
        if (((unint64_t)v598[1] & ((unint64_t)v598[1] - 1)) != 0)
        {
          if ((void *)v19 >= v598[1])
            v3 = v19 % (unint64_t)v598[1];
          else
            v3 = v19;
        }
        else
        {
          v3 = ((unint64_t)v598[1] - 1) & v19;
        }
      }
      v34 = v598[0];
      v35 = (_QWORD *)*((_QWORD *)v598[0] + v3);
      if (v35)
      {
        *v25 = *v35;
      }
      else
      {
        *v25 = v599[0];
        v599[0] = v25;
        v34[v3] = v599;
        if (!*v25)
          goto LABEL_61;
        v36 = *(_QWORD *)(*v25 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v36 >= v14)
            v36 %= v14;
        }
        else
        {
          v36 &= v14 - 1;
        }
        v35 = (char *)v598[0] + 8 * v36;
      }
      *v35 = v25;
LABEL_61:
      v13 = ++v599[1];
LABEL_62:
      v37 = (char *)*((_QWORD *)v12 + 1);
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (char *)*((_QWORD *)v12 + 2);
          _ZF = *(_QWORD *)v38 == (_QWORD)v12;
          v12 = v38;
        }
        while (!_ZF);
      }
      v12 = v38;
    }
    while (v38 != v582);
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v580 = objc_msgSend(v40, "enableMuninMiniMapComposedEdgeRoadColoring");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v581 = objc_msgSend(v41, "enableMuninMiniMapRoadZData");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(v42, "enableMuninMiniMapCollectionPoints");

  if (v43)
  {
    if (*((_QWORD *)this + 18))
    {
      v44 = (uint64_t *)*((_QWORD *)this + 27);
      v45 = (uint64_t *)*((_QWORD *)this + 28);
      if (v44 != v45)
      {
        v3 = 255;
        do
        {
          v46 = *v44;
          v47 = *(_QWORD *)(*v44 + 300);
          v48 = 1 << *(_BYTE *)(*v44 + 297);
          v49 = 1.0 / (double)v48;
          v50 = v49 * (double)SHIDWORD(v47);
          if (v50 + v49 > v606.f64[0])
          {
            v51 = v49 * (double)(v48 + ~(_DWORD)v47);
            v52 = v51 + v49;
            v53 = v50 >= v607.f64[0] || v52 <= v606.f64[1];
            if (!v53 && v51 < v607.f64[1])
            {
              v55 = *(double **)(v46 + 168);
              v56 = *(double **)(v46 + 176);
              while (v55 != v56)
              {
                v57 = v55[7];
                if (v57 >= v606.f64[0])
                {
                  v58 = v55[8];
                  v59 = v57 >= v607.f64[0] || v58 < v606.f64[1];
                  if (!v59 && v58 < v607.f64[1])
                  {
                    v61 = (v55[9] - *(double *)(*((_QWORD *)this + 18) + 160))
                        / fmax(*(double *)(*((_QWORD *)this + 18) + 168) - *(double *)(*((_QWORD *)this + 18) + 160), 40.0);
                    DWORD2(v628) = 1065353216;
                    *(_QWORD *)&v628 = 0;
                    *(float *)&v61 = v61;
                    LODWORD(v643) = 0;
                    v642 = (void *)1065353216;
                    colorLerp((float *)&v645, (float *)&v628, (float *)&v642, *(float *)&v61);
                    _Q0 = *(float32x4_t *)(v55 + 7);
                    LOBYTE(v642) = (int)(float)(*(float *)&v645 * 255.0);
                    BYTE1(v642) = (int)(float)(*((float *)&v645 + 1) * 255.0);
                    BYTE2(v642) = (int)(float)(*(float *)&v646 * 255.0);
                    BYTE3(v642) = -1;
                    _D1 = v611.f64[0];
                    __asm { FMLA            D3, D1, V0.D[1] }
                    _D1 = v611.f64[1];
                    _D2 = *(float32x2_t *)&v612;
                    __asm
                    {
                      FMLA            D4, D1, V0.D[1]
                      FMLA            D1, D2, V0.D[1]
                    }
                    *(double *)_Q0.i64 = 1.0 / _D1;
                    *(float *)&_D1 = 1.0 / _D1 * _D3;
                    _Q0.f32[0] = *(double *)_Q0.i64 * _D4;
                    _D2.f32[0] = v617 * _Q0.f32[0];
                    _D2.f32[1] = v621;
                    *(float *)&_D4 = v620;
                    v71 = vdivq_f64(vcvtq_f64_f32(vsub_f32(v605, v604)), v608);
                    *((float *)&_D4 + 1) = v618 * _Q0.f32[0];
                    *(float32x2_t *)_Q0.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(*(float32x2_t *)&_D4, v615, *(float *)&_D1), _D2), 1.0/ (float)((float)(v622 + (float)(v616 * *(float *)&_D1))+ (float)(v619 * _Q0.f32[0])));
                    _Q0.i64[1] = _Q0.i64[0];
                    v72 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v71), v71);
                    *(_QWORD *)&v73 = vsubq_f32(_Q0, v72).u64[0];
                    *((_QWORD *)&v73 + 1) = vaddq_f32(_Q0, v72).i64[1];
                    v628 = v73;
                    md::DebugConsoleMapRect::drawPixelRect((uint64_t)&v603, (float *)&v628, (__int8 *)&v642, 1);
                  }
                }
                v55 += 233;
              }
            }
          }
          v44 += 2;
        }
        while (v44 != v45);
      }
    }
  }
  if (!v581)
    goto LABEL_484;
  v74 = *((_QWORD *)this + 18);
  if (!v74)
    goto LABEL_484;
  v75 = *((_QWORD *)this + 17);
  if (!v75)
    goto LABEL_484;
  v76 = *(double **)(v74 + 96);
  if (v76)
  {
    __asm { FMOV            V10.2S, #2.5 }
    v3 = 1065353216;
    do
    {
      v88 = *((_QWORD *)v76 + 2);
      v89 = *(double *)(v88 + 16);
      if (v89 >= v606.f64[0] && v89 < v607.f64[0])
      {
        v91 = *(double *)(v88 + 24);
        if (v91 >= v606.f64[1] && v91 < v607.f64[1])
        {
          v93 = v76[3];
          if (v93 == -1.79769313e308)
          {
            v78 = -65;
            v79 = 0.25;
            v80 = 0.25;
            v81 = 0.25;
          }
          else if (v93 == 1.79769313e308)
          {
            v78 = -65;
            v79 = 1.0;
            v80 = 1.0;
            v81 = 1.0;
          }
          else
          {
            v94 = (v93 - *(double *)(*((_QWORD *)this + 18) + 160))
                / fmax(*(double *)(*((_QWORD *)this + 18) + 168) - *(double *)(*((_QWORD *)this + 18) + 160), 40.0);
            LODWORD(v646) = 1065353216;
            v645 = 0;
            *(float *)&v94 = v94;
            LODWORD(v643) = 0;
            v642 = (void *)1065353216;
            __srcd = v91;
            __nc = v89;
            colorLerp((float *)&v628, (float *)&v645, (float *)&v642, *(float *)&v94);
            v91 = __srcd;
            v89 = __nc;
            v80 = *((float *)&v628 + 1);
            v79 = *(float *)&v628;
            v78 = -1;
            v81 = *((float *)&v628 + 2);
          }
          LOBYTE(v645) = (int)(float)(v79 * 255.0);
          BYTE1(v645) = (int)(float)(v80 * 255.0);
          BYTE2(v645) = (int)(float)(v81 * 255.0);
          v82.f32[0] = v620;
          v83 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v613, v609, v89), v611, v91), 1.0 / (v614 + v610 * v89 + v612 * v91)));
          v84.f32[0] = vmuls_lane_f32(v617, v83, 1);
          v84.f32[1] = v621;
          v82.i32[1] = vmuls_lane_f32(v618, v83, 1);
          *(float32x2_t *)v85.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(v82, v615, v83.f32[0]), v84), 1.0/ (float)(vaddv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v619), LODWORD(v616)), v83))+ v622));
          v85.i64[1] = v85.i64[0];
          *(float32x2_t *)v86.f32 = vmul_f32(vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v605, v604)), v608)), _D10);
          v86.i64[1] = v86.i64[0];
          BYTE3(v645) = v78;
          *(_QWORD *)&v87 = vsubq_f32(v85, v86).u64[0];
          *((_QWORD *)&v87 + 1) = vaddq_f32(v85, v86).i64[1];
          v628 = v87;
          md::DebugConsoleMapRect::drawPixelRect((uint64_t)&v603, (float *)&v628, (__int8 *)&v645, 1);
        }
      }
      v76 = *(double **)v76;
    }
    while (v76);
    v75 = *((_QWORD *)this + 17);
  }
  v96 = *(_BYTE **)(v75 + 56);
  v95 = *(_BYTE **)(v75 + 64);
  v97 = v95 - v96;
  if (v95 == v96)
    goto LABEL_484;
  if (v97 < 0)
    abort();
  v98 = (char *)operator new(v95 - v96);
  v99 = &v98[8 * (v97 >> 3)];
  memcpy(v98, v96, v97);
  v3 = (unint64_t)&v639;
  __asm { FMOV            V13.2S, #2.5 }
  v583 = v98;
  v584 = v99;
  while (2)
  {
    v101 = *(double **)v98;
    if (v607.f64[0] <= *(double *)(*(_QWORD *)v98 + 104)
      || v606.f64[0] >= v101[15]
      || v607.f64[1] <= v101[14]
      || v606.f64[1] >= v101[16])
    {
      goto LABEL_121;
    }
    LOBYTE(v645) = 0;
    v646 = 0u;
    v647 = 0u;
    v648 = 0u;
    v649 = 0u;
    v650 = 0u;
    v651 = 0u;
    v652 = 0;
    v102 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(*((_QWORD *)this + 18) + 40), (unint64_t)v101);
    if (!v102)
      goto LABEL_477;
    v104 = v102;
    LOBYTE(v645) = *((_BYTE *)v102 + 24);
    if (v102 + 3 == &v645)
    {
      v114 = 0;
      v115 = 0;
      goto LABEL_153;
    }
    std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(&v646, (char *)v102[4], (char *)v102[5], (uint64_t)(v102[5] - v102[4]) >> 4);
    v105 = (char *)v104[7];
    v106 = (_BYTE *)v104[8];
    __n = v106 - v105;
    v107 = (v106 - v105) >> 4;
    v108 = *((_QWORD *)&v648 + 1);
    v109 = (char *)*((_QWORD *)&v647 + 1);
    if (v107 <= (uint64_t)(*((_QWORD *)&v648 + 1) - *((_QWORD *)&v647 + 1)) >> 4)
    {
      __srca = v104;
      v116 = (uint64_t)(v648 - *((_QWORD *)&v647 + 1)) >> 4;
      if (v116 >= v107)
      {
        if (v106 == v105)
        {
          v104 = __srca;
LABEL_151:
          v113 = __n;
          goto LABEL_152;
        }
        v118 = (void *)*((_QWORD *)&v647 + 1);
        v113 = v106 - v105;
      }
      else
      {
        if ((_QWORD)v648 != *((_QWORD *)&v647 + 1))
        {
          v117 = v105;
          memmove(*((void **)&v647 + 1), v105, v648 - *((_QWORD *)&v647 + 1));
          v105 = v117;
          v109 = (char *)v648;
        }
        v105 += 16 * v116;
        v113 = v106 - v105;
        if (!v113)
          goto LABEL_149;
        v118 = v109;
      }
      memmove(v118, v105, v113);
LABEL_149:
      v104 = __srca;
      goto LABEL_152;
    }
    __src = (_BYTE *)v104[7];
    if (*((_QWORD *)&v647 + 1))
    {
      *(_QWORD *)&v648 = *((_QWORD *)&v647 + 1);
      operator delete(*((void **)&v647 + 1));
      v108 = 0;
      *((_QWORD *)&v647 + 1) = 0;
      v648 = 0uLL;
    }
    if ((__n & 0x8000000000000000) != 0)
      goto LABEL_826;
    v110 = v108 >> 3;
    if (v108 >> 3 <= v107)
      v110 = v107;
    v111 = (unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v110;
    if (v111 >> 60)
LABEL_826:
      abort();
    v112 = (char *)operator new(16 * v111);
    v109 = v112;
    *((_QWORD *)&v647 + 1) = v112;
    *(_QWORD *)&v648 = v112;
    *((_QWORD *)&v648 + 1) = &v112[16 * v111];
    if (v106 == __src)
      goto LABEL_151;
    v113 = __n;
    memcpy(v112, __src, __n);
LABEL_152:
    *(_QWORD *)&v648 = &v109[v113];
    std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(&v649, (char *)v104[10], (char *)v104[11], (uint64_t)(v104[11] - v104[10]) >> 4);
    std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>((_QWORD *)&v650 + 1, (char *)v104[13], (char *)v104[14], (uint64_t)(v104[14] - v104[13]) >> 4);
    v114 = (_BYTE *)*((_QWORD *)&v649 + 1);
    v115 = (_BYTE *)v649;
LABEL_153:
    v103.n128_u64[0] = v104[16];
    v652 = v103.n128_u64[0];
    v643 = 0;
    v642 = 0;
    v644 = 0;
    v119 = v114 - v115;
    if (v114 == v115)
    {
      v121 = 0;
      v122 = 0;
    }
    else
    {
      if (v119 < 0)
        abort();
      v120 = v115;
      v121 = (char *)operator new(v114 - v115);
      v122 = (__n128 *)&v121[16 * (v119 >> 4)];
      v642 = v121;
      v644 = v122;
      memcpy(v121, v120, v119);
      v643 = v122;
    }
    v123 = (__n128 *)*((_QWORD *)&v650 + 1);
    v124 = v651 - *((_QWORD *)&v650 + 1);
    if ((uint64_t)(v651 - *((_QWORD *)&v650 + 1)) >= 1)
    {
      v125 = v124 >> 4;
      __na = v121;
      v126 = (char *)v122 - v121;
      v127 = (v126 >> 4) + (v124 >> 4);
      if (v127 >> 60)
        abort();
      if (v126 >> 3 > v127)
        v127 = v126 >> 3;
      v128 = 0xFFFFFFFFFFFFFFFLL;
      if ((unint64_t)v126 < 0x7FFFFFFFFFFFFFF0)
        v128 = v127;
      __srcb = v128;
      if (v128)
      {
        if (v128 >> 60)
          goto LABEL_824;
        v129 = (char *)operator new(16 * v128);
      }
      else
      {
        v129 = 0;
      }
      v130 = &__na[v126 & 0xFFFFFFFFFFFFFFF0];
      v131 = &v129[16 * (v126 >> 4)];
      v132 = 16 * v125;
      v133 = &v131[16 * v125];
      v134 = (__n128 *)v131;
      do
      {
        v135 = *v123++;
        v103 = v135;
        *v134++ = v135;
        v132 -= 16;
      }
      while (v132);
      v136 = (__n128 *)v642;
      v3 = (unint64_t)&v639;
      if (v642 != v130)
      {
        v137 = (__n128 *)v130;
        do
        {
          v103 = v137[-1];
          *((__n128 *)v131 - 1) = v103;
          v131 -= 16;
          --v137;
        }
        while (v137 != v136);
        v122 = v643;
      }
      v138 = (char *)v122 - v130;
      if (v122 != (__n128 *)v130)
      {
        v139 = v129;
        memcpy(v133, v130, v138);
        v129 = v139;
      }
      v140 = (__n128 *)&v129[16 * __srcb];
      v141 = v642;
      v642 = v131;
      v643 = (__n128 *)&v133[v138];
      v644 = v140;
      if (v141)
        operator delete(v141);
    }
    v142 = 126 - 2 * __clz(((char *)v643 - (_BYTE *)v642) >> 4);
    if (v643 == v642)
      v143 = 0;
    else
      v143 = v142;
    std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::debugDrawZData(md::DebugConsoleMapRect *)::$_0 &,gm::Range<double> *,false>((__n128 *)v642, v643, v143, 1, v103);
    v628 = xmmword_19FFB33A0;
    md::MuninLabelingUtils::clipRange(&v639, &v628, (uint64_t *)&v642);
    md::ComposedRoadEdge::walker((md::ComposedRoadEdge *)&v628, (uint64_t)v101, (char)v645);
    v145 = (double *)*((_QWORD *)&v649 + 1);
    v144 = (double *)v649;
    v146 = 15.0 / v101[18];
    if ((_QWORD)v649 == *((_QWORD *)&v649 + 1))
      goto LABEL_268;
    while (2)
    {
      v155 = *v144;
      v154 = v144[1];
      if (*v144 >= 0.0 && v155 <= 1.0)
      {
        v160 = 0.0;
        if (v638 > 0.0)
          v160 = v637 / v638;
        v161 = (v155 - v160) * v638;
        v157 = v634;
        if (v634 + v161 < 0.0)
        {
          v158 = (char *)v631;
          v159 = v633;
          v162 = 56 * v633 - 8;
          while (v159)
          {
            v161 = v157 + v161;
            v633 = --v159;
            v157 = *(double *)((char *)v631 + v162);
            v634 = v157;
            v162 -= 56;
            if (v157 + v161 >= 0.0)
            {
              v163 = v157;
              v157 = v157 + v161;
              goto LABEL_203;
            }
          }
          goto LABEL_226;
        }
        v164 = v633;
        v158 = (char *)v631;
        v163 = *((double *)v631 + 7 * v633 + 6);
        if (v634 + v161 > v163)
        {
          v165 = (v632 - (_BYTE *)v631) / 56;
          v166 = v165 - 1;
          if (v633 != v165 - 1)
          {
            v157 = v634 - v163 + v161;
            v634 = 0.0;
            v167 = 56 * v633 + 104;
            v168 = v165 - 2;
            while (1)
            {
              v159 = v164 + 1;
              v163 = *(double *)((char *)v631 + v167);
              if (v157 <= v163)
              {
                v633 = v164 + 1;
                goto LABEL_203;
              }
              if (v168 == v164)
                break;
              v157 = v157 - v163;
              v167 += 56;
              ++v164;
            }
            v633 = v164 + 1;
            v157 = 0.0;
          }
          v159 = v166;
          goto LABEL_226;
        }
        v159 = v633;
        v157 = v634 + v161;
LABEL_203:
        v634 = v157;
        v169 = v157 < 0.0 || v163 < v157;
        if (v169
          || (v170 = *(_QWORD *)&v158[56 * v159 + 24],
              v171 = *(_QWORD *)&v158[56 * v159 + 32],
              v172 = v171 - v170,
              v171 == v170))
        {
LABEL_213:
          v637 = v157;
          if (!v159)
            goto LABEL_226;
        }
        else
        {
          v173 = 0;
          v174 = v172 >> 3;
          if (v174 <= 1)
            v174 = 1;
          v175 = 0.0;
          while (1)
          {
            v176 = *(double *)(v170 + 8 * v173);
            if (v176 + v175 >= v157)
              break;
            ++v173;
            v175 = v176 + v175;
            if (v174 == v173)
              goto LABEL_213;
          }
          v188 = (float64x2_t *)(*(_QWORD *)&v158[56 * v159] + 16 * v173);
          v635 = vmlaq_n_f64(*v188, vsubq_f64(v188[1], *v188), (v157 - v175) / v176);
          v189 = vsubq_f64(v188[1], *v188);
          v636 = vmulq_n_f64(v189, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v189, v189))));
          v637 = v157;
          if (!v159)
            goto LABEL_226;
        }
        if (v159 == 1)
        {
          v177 = 0;
          v178 = v157;
        }
        else
        {
          v177 = v159 & 0xFFFFFFFFFFFFFFFELL;
          v179 = (double *)(v158 + 104);
          v180 = 0.0;
          v181 = v159 & 0xFFFFFFFFFFFFFFFELL;
          v182 = v157;
          do
          {
            v183 = *(v179 - 7);
            v184 = *v179;
            v179 += 14;
            v182 = v182 + v183;
            v180 = v180 + v184;
            v181 -= 2;
          }
          while (v181);
          v178 = v180 + v182;
          if (v159 == v177)
            goto LABEL_221;
        }
        v185 = (double *)&v158[56 * v177 + 48];
        v186 = v159 - v177;
        do
        {
          v187 = *v185;
          v185 += 7;
          v178 = v178 + v187;
          --v186;
        }
        while (v186);
LABEL_221:
        v637 = v178;
        goto LABEL_226;
      }
      v157 = v634;
      v158 = (char *)v631;
      v159 = v633;
LABEL_226:
      v190 = 0;
      v191 = (unint64_t)((v154 - v155) * (1.0 / v146));
      v192 = (v632 - v158) / 56;
      v193 = v192 - 1;
      if (v191 + 1 > 1)
        v194 = v191 + 1;
      else
        v194 = 1;
      v195 = v638 * v146;
      v196 = v192 - 2;
      do
      {
        v197 = v157 + v195;
        if (v157 + v195 < 0.0)
        {
          v198 = (double *)&v158[56 * v159 - 8];
          v199 = v638 * v146;
          while (v159)
          {
            v199 = v157 + v199;
            v633 = --v159;
            v200 = *v198;
            v198 -= 7;
            v157 = v200;
            v634 = v200;
            v197 = v200 + v199;
            if (v200 + v199 >= 0.0)
              goto LABEL_246;
          }
          goto LABEL_231;
        }
        v201 = *(double *)&v158[56 * v159 + 48];
        if (v197 <= v201)
        {
          v157 = *(double *)&v158[56 * v159 + 48];
LABEL_246:
          v634 = v197;
          v203 = v197 < 0.0 || v157 < v197;
          if (v203
            || (v205 = *(_QWORD *)&v158[56 * v159 + 24],
                v204 = *(_QWORD *)&v158[56 * v159 + 32],
                v206 = v204 - v205,
                v204 == v205))
          {
LABEL_256:
            v637 = v197;
            if (!v159)
              goto LABEL_232;
LABEL_257:
            if (v159 == 1)
            {
              v211 = 0;
              v212 = v197;
              goto LABEL_262;
            }
            v211 = v159 & 0xFFFFFFFFFFFFFFFELL;
            v213 = 0.0;
            v214 = v159 & 0xFFFFFFFFFFFFFFFELL;
            v215 = (double *)(v158 + 104);
            v216 = v197;
            do
            {
              v217 = *(v215 - 7);
              v218 = *v215;
              v215 += 14;
              v216 = v216 + v217;
              v213 = v213 + v218;
              v214 -= 2;
            }
            while (v214);
            v212 = v213 + v216;
            if (v159 != v211)
            {
LABEL_262:
              v219 = (double *)&v158[56 * v211 + 48];
              v220 = v159 - v211;
              do
              {
                v221 = *v219;
                v219 += 7;
                v212 = v212 + v221;
                --v220;
              }
              while (v220);
            }
            v637 = v212;
            goto LABEL_232;
          }
          v207 = 0;
          v208 = v206 >> 3;
          if (v208 <= 1)
            v208 = 1;
          v209 = 0.0;
          while (1)
          {
            v210 = *(double *)(v205 + 8 * v207);
            if (v210 + v209 >= v197)
              break;
            ++v207;
            v209 = v210 + v209;
            if (v208 == v207)
              goto LABEL_256;
          }
          v222 = (float64x2_t *)(*(_QWORD *)&v158[56 * v159] + 16 * v207);
          v635 = vmlaq_n_f64(*v222, vsubq_f64(v222[1], *v222), (v197 - v209) / v210);
          v223 = vsubq_f64(v222[1], *v222);
          v636 = vmulq_n_f64(v223, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v223, v223))));
          v637 = v197;
          if (v159)
            goto LABEL_257;
        }
        else
        {
          if (v159 == v193)
          {
            v159 = v193;
LABEL_231:
            v197 = v157;
            goto LABEL_232;
          }
          v197 = v157 - v201 + v195;
          v634 = 0.0;
          for (i = (double *)&v158[56 * v159 + 104]; ; i += 7)
          {
            v157 = *i;
            if (v197 <= *i)
            {
              v633 = ++v159;
              goto LABEL_246;
            }
            if (v196 == v159)
              break;
            v197 = v197 - v157;
            ++v159;
          }
          v633 = v159 + 1;
          v197 = 0.0;
          v159 = v193;
        }
LABEL_232:
        ++v190;
        v157 = v197;
      }
      while (v190 != v194);
      v147 = 1.0 / (v614 + v610 * v635.f64[0] + v612 * v635.f64[1]);
      v148 = v147 * (v613.f64[0] + v609.f64[0] * v635.f64[0] + v611.f64[0] * v635.f64[1]);
      *(float *)&v147 = v147 * (v613.f64[1] + v609.f64[1] * v635.f64[0] + v611.f64[1] * v635.f64[1]);
      v149.f32[0] = v617 * *(float *)&v147;
      v149.f32[1] = v621;
      v150.f32[0] = v620;
      v150.f32[1] = v618 * *(float *)&v147;
      *(float32x2_t *)v151.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(v150, v615, v148), v149), 1.0 / (float)((float)(v622 + (float)(v616 * v148)) + (float)(v619 * *(float *)&v147)));
      v151.i64[1] = v151.i64[0];
      *(float32x2_t *)v152.f32 = vmul_f32(vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v605, v604)), v608)), _D13);
      v152.i64[1] = v152.i64[0];
      v627[0] = NAN;
      *(_QWORD *)&v153 = vsubq_f32(v151, v152).u64[0];
      *((_QWORD *)&v153 + 1) = vaddq_f32(v151, v152).i64[1];
      v653 = v153;
      md::DebugConsoleMapRect::drawPixelRect((uint64_t)&v603, (float *)&v653, (__int8 *)v627, 1);
      v144 += 2;
      if (v144 != v145)
        continue;
      break;
    }
LABEL_268:
    v224 = (double *)*((_QWORD *)&v650 + 1);
    v225 = (double *)v651;
    if (*((_QWORD *)&v650 + 1) == (_QWORD)v651)
      goto LABEL_356;
    while (2)
    {
      v234 = *v224;
      v233 = v224[1];
      if (*v224 < 0.0 || v234 > 1.0)
      {
        v236 = v634;
        v237 = (char *)v631;
        v238 = v633;
        goto LABEL_314;
      }
      v239 = 0.0;
      if (v638 > 0.0)
        v239 = v637 / v638;
      v240 = (v234 - v239) * v638;
      v236 = v634;
      if (v634 + v240 < 0.0)
      {
        v237 = (char *)v631;
        v238 = v633;
        v241 = 56 * v633 - 8;
        while (v238)
        {
          v240 = v236 + v240;
          v633 = --v238;
          v236 = *(double *)((char *)v631 + v241);
          v634 = v236;
          v241 -= 56;
          if (v236 + v240 >= 0.0)
          {
            v242 = v236;
            v236 = v236 + v240;
            goto LABEL_291;
          }
        }
        goto LABEL_314;
      }
      v243 = v633;
      v237 = (char *)v631;
      v242 = *((double *)v631 + 7 * v633 + 6);
      if (v634 + v240 <= v242)
      {
        v238 = v633;
        v236 = v634 + v240;
LABEL_291:
        v634 = v236;
        v248 = v236 < 0.0 || v242 < v236;
        if (v248
          || (v249 = *(_QWORD *)&v237[56 * v238 + 24],
              v250 = *(_QWORD *)&v237[56 * v238 + 32],
              v251 = v250 - v249,
              v250 == v249))
        {
LABEL_301:
          v637 = v236;
          if (!v238)
            goto LABEL_314;
        }
        else
        {
          v252 = 0;
          v253 = v251 >> 3;
          if (v253 <= 1)
            v253 = 1;
          v254 = 0.0;
          while (1)
          {
            v255 = *(double *)(v249 + 8 * v252);
            if (v255 + v254 >= v236)
              break;
            ++v252;
            v254 = v255 + v254;
            if (v253 == v252)
              goto LABEL_301;
          }
          v267 = (float64x2_t *)(*(_QWORD *)&v237[56 * v238] + 16 * v252);
          v635 = vmlaq_n_f64(*v267, vsubq_f64(v267[1], *v267), (v236 - v254) / v255);
          v268 = vsubq_f64(v267[1], *v267);
          v636 = vmulq_n_f64(v268, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v268, v268))));
          v637 = v236;
          if (!v238)
            goto LABEL_314;
        }
        if (v238 == 1)
        {
          v256 = 0;
          v257 = v236;
        }
        else
        {
          v256 = v238 & 0xFFFFFFFFFFFFFFFELL;
          v258 = (double *)(v237 + 104);
          v259 = 0.0;
          v260 = v238 & 0xFFFFFFFFFFFFFFFELL;
          v261 = v236;
          do
          {
            v262 = *(v258 - 7);
            v263 = *v258;
            v258 += 14;
            v261 = v261 + v262;
            v259 = v259 + v263;
            v260 -= 2;
          }
          while (v260);
          v257 = v259 + v261;
          if (v238 == v256)
            goto LABEL_309;
        }
        v264 = (double *)&v237[56 * v256 + 48];
        v265 = v238 - v256;
        do
        {
          v266 = *v264;
          v264 += 7;
          v257 = v257 + v266;
          --v265;
        }
        while (v265);
LABEL_309:
        v637 = v257;
        goto LABEL_314;
      }
      v244 = (v632 - (_BYTE *)v631) / 56;
      v245 = v244 - 1;
      if (v633 != v244 - 1)
      {
        v236 = v634 - v242 + v240;
        v634 = 0.0;
        v246 = 56 * v633 + 104;
        v247 = v244 - 2;
        while (1)
        {
          v238 = v243 + 1;
          v242 = *(double *)((char *)v631 + v246);
          if (v236 <= v242)
          {
            v633 = v243 + 1;
            goto LABEL_291;
          }
          if (v247 == v243)
            break;
          v236 = v236 - v242;
          v246 += 56;
          ++v243;
        }
        v633 = v243 + 1;
        v236 = 0.0;
      }
      v238 = v245;
LABEL_314:
      v269 = 0;
      v270 = (unint64_t)((v233 - v234) * (1.0 / v146));
      v271 = (v632 - v237) / 56;
      v272 = v271 - 1;
      if (v270 + 1 > 1)
        v273 = v270 + 1;
      else
        v273 = 1;
      v274 = v638 * v146;
      v275 = v271 - 2;
      while (2)
      {
        v276 = v236 + v274;
        if (v236 + v274 < 0.0)
        {
          v277 = (double *)&v237[56 * v238 - 8];
          v278 = v638 * v146;
          while (v238)
          {
            v278 = v236 + v278;
            v633 = --v238;
            v279 = *v277;
            v277 -= 7;
            v236 = v279;
            v634 = v279;
            v276 = v279 + v278;
            if (v279 + v278 >= 0.0)
              goto LABEL_334;
          }
LABEL_319:
          v276 = v236;
          goto LABEL_320;
        }
        v280 = *(double *)&v237[56 * v238 + 48];
        if (v276 <= v280)
        {
          v236 = *(double *)&v237[56 * v238 + 48];
LABEL_334:
          v634 = v276;
          v282 = v276 < 0.0 || v236 < v276;
          if (v282
            || (v284 = *(_QWORD *)&v237[56 * v238 + 24],
                v283 = *(_QWORD *)&v237[56 * v238 + 32],
                v285 = v283 - v284,
                v283 == v284))
          {
LABEL_344:
            v637 = v276;
            if (!v238)
              goto LABEL_320;
          }
          else
          {
            v286 = 0;
            v287 = v285 >> 3;
            if (v287 <= 1)
              v287 = 1;
            v288 = 0.0;
            while (1)
            {
              v289 = *(double *)(v284 + 8 * v286);
              if (v289 + v288 >= v276)
                break;
              ++v286;
              v288 = v289 + v288;
              if (v287 == v286)
                goto LABEL_344;
            }
            v301 = (float64x2_t *)(*(_QWORD *)&v237[56 * v238] + 16 * v286);
            v635 = vmlaq_n_f64(*v301, vsubq_f64(v301[1], *v301), (v276 - v288) / v289);
            v302 = vsubq_f64(v301[1], *v301);
            v636 = vmulq_n_f64(v302, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v302, v302))));
            v637 = v276;
            if (!v238)
              goto LABEL_320;
          }
          if (v238 == 1)
          {
            v290 = 0;
            v291 = v276;
          }
          else
          {
            v290 = v238 & 0xFFFFFFFFFFFFFFFELL;
            v292 = 0.0;
            v293 = v238 & 0xFFFFFFFFFFFFFFFELL;
            v294 = (double *)(v237 + 104);
            v295 = v276;
            do
            {
              v296 = *(v294 - 7);
              v297 = *v294;
              v294 += 14;
              v295 = v295 + v296;
              v292 = v292 + v297;
              v293 -= 2;
            }
            while (v293);
            v291 = v292 + v295;
            if (v238 == v290)
              goto LABEL_352;
          }
          v298 = (double *)&v237[56 * v290 + 48];
          v299 = v238 - v290;
          do
          {
            v300 = *v298;
            v298 += 7;
            v291 = v291 + v300;
            --v299;
          }
          while (v299);
LABEL_352:
          v637 = v291;
          goto LABEL_320;
        }
        if (v238 == v272)
        {
          v238 = v272;
          goto LABEL_319;
        }
        v276 = v236 - v280 + v274;
        v634 = 0.0;
        for (j = (double *)&v237[56 * v238 + 104]; ; j += 7)
        {
          v236 = *j;
          if (v276 <= *j)
          {
            v633 = ++v238;
            goto LABEL_334;
          }
          if (v275 == v238)
            break;
          v276 = v276 - v236;
          ++v238;
        }
        v633 = v238 + 1;
        v276 = 0.0;
        v238 = v272;
LABEL_320:
        ++v269;
        v236 = v276;
        if (v269 != v273)
          continue;
        break;
      }
      v226 = 1.0 / (v614 + v610 * v635.f64[0] + v612 * v635.f64[1]);
      v227 = v226 * (v613.f64[0] + v609.f64[0] * v635.f64[0] + v611.f64[0] * v635.f64[1]);
      *(float *)&v226 = v226 * (v613.f64[1] + v609.f64[1] * v635.f64[0] + v611.f64[1] * v635.f64[1]);
      v228.f32[0] = v617 * *(float *)&v226;
      v228.f32[1] = v621;
      v229.f32[0] = v620;
      v229.f32[1] = v618 * *(float *)&v226;
      *(float32x2_t *)v230.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(v229, v615, v227), v228), 1.0 / (float)((float)(v622 + (float)(v616 * v227)) + (float)(v619 * *(float *)&v226)));
      v230.i64[1] = v230.i64[0];
      *(float32x2_t *)v231.f32 = vmul_f32(vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v605, v604)), v608)), _D13);
      v231.i64[1] = v231.i64[0];
      v627[0] = -1.7014e38;
      *(_QWORD *)&v232 = vsubq_f32(v230, v231).u64[0];
      *((_QWORD *)&v232 + 1) = vaddq_f32(v230, v231).i64[1];
      v653 = v232;
      md::DebugConsoleMapRect::drawPixelRect((uint64_t)&v603, (float *)&v653, (__int8 *)v627, 1);
      v224 += 2;
      if (v224 != v225)
        continue;
      break;
    }
LABEL_356:
    v303 = (double *)v640;
    if (v640 == &v639)
      goto LABEL_458;
    while (2)
    {
      v305 = v303[2];
      v304 = v303[3];
      if (v305 < 0.0 || v305 > 1.0)
      {
LABEL_363:
        v307 = 0;
        goto LABEL_398;
      }
      v308 = 0.0;
      if (v638 > 0.0)
        v308 = v637 / v638;
      v309 = (v305 - v308) * v638;
      v310 = v634;
      v311 = v634 + v309;
      if (v634 + v309 < 0.0)
      {
        v312 = (char *)v631;
        v307 = v633;
        v313 = 56 * v633 - 8;
        while (v307)
        {
          v309 = v310 + v309;
          v633 = --v307;
          v310 = *(double *)((char *)v631 + v313);
          v634 = v310;
          v311 = v310 + v309;
          v313 -= 56;
          if (v310 + v309 >= 0.0)
          {
            v314 = v310;
            goto LABEL_379;
          }
        }
        goto LABEL_398;
      }
      v315 = v633;
      v312 = (char *)v631;
      v314 = *((double *)v631 + 7 * v633 + 6);
      if (v311 <= v314)
      {
        v307 = v633;
LABEL_379:
        v634 = v311;
        v319 = v311 < 0.0 || v314 < v311;
        if (v319
          || (v320 = *(_QWORD *)&v312[56 * v307 + 24],
              v321 = *(_QWORD *)&v312[56 * v307 + 32],
              v322 = v321 - v320,
              v321 == v320))
        {
LABEL_389:
          v637 = v311;
          if (!v307)
            goto LABEL_398;
        }
        else
        {
          v323 = 0;
          v324 = v322 >> 3;
          if (v324 <= 1)
            v324 = 1;
          v325 = 0.0;
          while (1)
          {
            v326 = *(double *)(v320 + 8 * v323);
            if (v326 + v325 >= v311)
              break;
            ++v323;
            v325 = v326 + v325;
            if (v324 == v323)
              goto LABEL_389;
          }
          v383 = (float64x2_t *)(*(_QWORD *)&v312[56 * v307] + 16 * v323);
          v635 = vmlaq_n_f64(*v383, vsubq_f64(v383[1], *v383), (v311 - v325) / v326);
          v384 = vsubq_f64(v383[1], *v383);
          v636 = vmulq_n_f64(v384, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v384, v384))));
          v637 = v311;
          if (!v307)
            goto LABEL_398;
        }
        if (v307 == 1)
        {
          v327 = 0;
        }
        else
        {
          v327 = v307 & 0xFFFFFFFFFFFFFFFELL;
          v328 = (double *)(v312 + 104);
          v329 = 0.0;
          v330 = v307 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v331 = *(v328 - 7);
            v332 = *v328;
            v328 += 14;
            v311 = v311 + v331;
            v329 = v329 + v332;
            v330 -= 2;
          }
          while (v330);
          v311 = v329 + v311;
          if (v307 == v327)
            goto LABEL_397;
        }
        v333 = (double *)&v312[56 * v327 + 48];
        v334 = v307 - v327;
        do
        {
          v335 = *v333;
          v333 += 7;
          v311 = v311 + v335;
          --v334;
        }
        while (v334);
LABEL_397:
        v307 = 0;
        v637 = v311;
        goto LABEL_398;
      }
      v316 = (v632 - (_BYTE *)v631) / 56;
      if (v633 == v316 - 1)
        goto LABEL_363;
      v311 = v634 - v314 + v309;
      v634 = 0.0;
      v317 = 56 * v633 + 104;
      v318 = v316 - 2;
      while (1)
      {
        v307 = v315 + 1;
        v314 = *(double *)((char *)v631 + v317);
        if (v311 <= v314)
        {
          v633 = v315 + 1;
          goto LABEL_379;
        }
        if (v318 == v315)
          break;
        v311 = v311 - v314;
        v317 += 56;
        ++v315;
      }
      v633 = v315 + 1;
      v307 = 0;
LABEL_398:
      v336 = (unint64_t)((v304 - v305) * (1.0 / v146));
      while (2)
      {
        v347 = v634;
        v348 = v638 * v146;
        v349 = v634 + v638 * v146;
        if (v349 < 0.0)
        {
          v350 = (char *)v631;
          v351 = v633;
          v352 = 56 * v633 - 8;
          while (v351)
          {
            v348 = v347 + v348;
            v633 = --v351;
            v347 = *(double *)((char *)v631 + v352);
            v634 = v347;
            v349 = v347 + v348;
            v352 -= 56;
            if (v347 + v348 >= 0.0)
            {
              v353 = v347;
              goto LABEL_416;
            }
          }
          goto LABEL_435;
        }
        v354 = v633;
        v350 = (char *)v631;
        v353 = *((double *)v631 + 7 * v633 + 6);
        if (v349 <= v353)
        {
          v351 = v633;
LABEL_416:
          v634 = v349;
          v358 = v349 < 0.0 || v353 < v349;
          if (v358
            || (v359 = *(_QWORD *)&v350[56 * v351 + 24],
                v360 = *(_QWORD *)&v350[56 * v351 + 32],
                v361 = v360 - v359,
                v360 == v359))
          {
LABEL_426:
            v637 = v349;
            if (!v351)
              goto LABEL_435;
          }
          else
          {
            v362 = 0;
            v363 = v361 >> 3;
            if (v363 <= 1)
              v363 = 1;
            v364 = 0.0;
            while (1)
            {
              v365 = *(double *)(v359 + 8 * v362);
              if (v365 + v364 >= v349)
                break;
              ++v362;
              v364 = v365 + v364;
              if (v363 == v362)
                goto LABEL_426;
            }
            v381 = (float64x2_t *)(*(_QWORD *)&v350[56 * v351] + 16 * v362);
            v635 = vmlaq_n_f64(*v381, vsubq_f64(v381[1], *v381), (v349 - v364) / v365);
            v382 = vsubq_f64(v381[1], *v381);
            v636 = vmulq_n_f64(v382, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v382, v382))));
            v637 = v349;
            if (!v351)
              goto LABEL_435;
          }
          if (v351 == 1)
          {
            v366 = 0;
          }
          else
          {
            v366 = v351 & 0xFFFFFFFFFFFFFFFELL;
            v367 = (double *)(v350 + 104);
            v368 = 0.0;
            v369 = v351 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v370 = *(v367 - 7);
              v371 = *v367;
              v367 += 14;
              v349 = v349 + v370;
              v368 = v368 + v371;
              v369 -= 2;
            }
            while (v369);
            v349 = v368 + v349;
            if (v351 == v366)
              goto LABEL_434;
          }
          v372 = (double *)&v350[56 * v366 + 48];
          v373 = v351 - v366;
          do
          {
            v374 = *v372;
            v372 += 7;
            v349 = v349 + v374;
            --v373;
          }
          while (v373);
LABEL_434:
          v637 = v349;
          goto LABEL_435;
        }
        v355 = (v632 - (_BYTE *)v631) / 56;
        if (v633 != v355 - 1)
        {
          v349 = v634 - v353 + v348;
          v634 = 0.0;
          v356 = 56 * v633 + 104;
          v357 = v355 - 2;
          while (1)
          {
            v351 = v354 + 1;
            v353 = *(double *)((char *)v631 + v356);
            if (v349 <= v353)
            {
              v633 = v354 + 1;
              goto LABEL_416;
            }
            if (v357 == v354)
              break;
            v349 = v349 - v353;
            v356 += 56;
            ++v354;
          }
          v633 = v354 + 1;
        }
LABEL_435:
        if (v635.f64[0] >= v606.f64[0]
          && v635.f64[0] < v607.f64[0]
          && v635.f64[1] >= v606.f64[1]
          && v635.f64[1] < v607.f64[1])
        {
          __srcc = v635.f64[1];
          __nb = v635.f64[0];
          if ((_QWORD)v646 == *((_QWORD *)&v646 + 1))
          {
            v338 = 0.0;
          }
          else
          {
            v377 = v146 * (double)v307;
            v378 = (uint64_t)(*((_QWORD *)&v646 + 1) - v646) >> 4;
            v379 = v378 - 1;
            if (v378 == 1)
            {
              v337 = 0;
            }
            else
            {
              v337 = 0;
              v380 = (double *)v646;
              while (*v380 < v377)
              {
                ++v337;
                v380 += 2;
                if (v379 == v337)
                {
                  v337 = v379;
                  break;
                }
              }
            }
            v338 = *(double *)(*((_QWORD *)&v647 + 1) + 16 * v337 + 8)
                 + *(double *)(*((_QWORD *)&v647 + 1) + 16 * v337) * v377;
          }
          v339 = (_QWORD)v646 != *((_QWORD *)&v646 + 1);
          v340 = (v338 - *(double *)(*((_QWORD *)this + 18) + 160))
               / fmax(*(double *)(*((_QWORD *)this + 18) + 168) - *(double *)(*((_QWORD *)this + 18) + 160), 40.0);
          DWORD2(v653) = 1065353216;
          *(_QWORD *)&v653 = 0;
          *(float *)&v340 = v340;
          v626 = 0;
          v625 = 1065353216;
          colorLerp(v627, (float *)&v653, (float *)&v625, *(float *)&v340);
          LOBYTE(v625) = (int)(float)(v627[0] * 255.0);
          BYTE1(v625) = (int)(float)(v627[1] * 255.0);
          BYTE2(v625) = (int)(float)(v627[2] * 255.0);
          v341.f32[0] = v620;
          v342 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v613, v609, __nb), v611, __srcc), 1.0 / (v614 + v610 * __nb + v612 * __srcc)));
          v343.f32[0] = vmuls_lane_f32(v617, v342, 1);
          v343.f32[1] = v621;
          v341.i32[1] = vmuls_lane_f32(v618, v342, 1);
          *(float32x2_t *)v344.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(v341, v615, v342.f32[0]), v343), 1.0/ (float)(vaddv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v619), LODWORD(v616)), v342))+ v622));
          v344.i64[1] = v344.i64[0];
          *(float32x2_t *)v345.f32 = vmul_f32(vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v605, v604)), v608)), _D13);
          v345.i64[1] = v345.i64[0];
          BYTE3(v625) = 64;
          *(_QWORD *)&v346 = vsubq_f32(v344, v345).u64[0];
          *((_QWORD *)&v346 + 1) = vaddq_f32(v344, v345).i64[1];
          v653 = v346;
          md::DebugConsoleMapRect::drawPixelRect((uint64_t)&v603, (float *)&v653, (__int8 *)&v625, v339);
        }
        if (++v307 <= v336)
          continue;
        break;
      }
      v303 = (double *)*((_QWORD *)v303 + 1);
      v3 = (unint64_t)&v639;
      if (v303 != (double *)&v639)
        continue;
      break;
    }
LABEL_458:
    v385 = (char *)v631;
    if (v631)
    {
      v386 = v632;
      v387 = v631;
      if (v632 != v631)
      {
        do
        {
          v388 = (void *)*((_QWORD *)v386 - 4);
          if (v388)
          {
            *((_QWORD *)v386 - 3) = v388;
            operator delete(v388);
          }
          v389 = (void *)*((_QWORD *)v386 - 7);
          if (v389)
          {
            *((_QWORD *)v386 - 6) = v389;
            operator delete(v389);
          }
          v386 -= 56;
        }
        while (v386 != v385);
        v387 = v631;
      }
      v632 = v385;
      operator delete(v387);
    }
    if ((_QWORD)v629)
    {
      *((_QWORD *)&v629 + 1) = v629;
      operator delete((void *)v629);
    }
    if (v641)
    {
      v390 = (MuninRoadEdge **)v640;
      v391 = v639;
      v392 = *(_QWORD *)v640;
      *(_QWORD *)(v392 + 8) = *((_QWORD *)v639 + 1);
      **((_QWORD **)v391 + 1) = v392;
      v641 = 0;
      if (v390 != &v639)
      {
        do
        {
          v393 = (MuninRoadEdge **)v390[1];
          operator delete(v390);
          v390 = v393;
        }
        while (v393 != &v639);
      }
    }
    if (v642)
      operator delete(v642);
    v99 = v584;
    if (*((_QWORD *)&v650 + 1))
    {
      *(_QWORD *)&v651 = *((_QWORD *)&v650 + 1);
      operator delete(*((void **)&v650 + 1));
    }
LABEL_477:
    if ((_QWORD)v649)
    {
      *((_QWORD *)&v649 + 1) = v649;
      operator delete((void *)v649);
    }
    if (*((_QWORD *)&v647 + 1))
    {
      *(_QWORD *)&v648 = *((_QWORD *)&v647 + 1);
      operator delete(*((void **)&v647 + 1));
    }
    if ((_QWORD)v646)
    {
      *((_QWORD *)&v646 + 1) = v646;
      operator delete((void *)v646);
    }
LABEL_121:
    v98 += 8;
    if (v98 != v99)
      continue;
    break;
  }
  operator delete(v583);
LABEL_484:
  LODWORD(v653) = -1;
  v646 = 0uLL;
  v645 = 0;
  v395 = (uint64_t *)*((_QWORD *)this + 24);
  v394 = (uint64_t *)*((_QWORD *)this + 25);
  if (v395 == v394)
    goto LABEL_817;
  v579 = 0;
  v396 = (float)(v575 + v575);
  v578 = (_QWORD *)((char *)this + 256);
  __asm { FMOV            V0.2D, #0.5 }
  v585 = _Q0;
  v586 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  v577 = (uint64_t *)*((_QWORD *)this + 25);
  while (2)
  {
    v398 = *v395;
    v399 = 1 << *(_BYTE *)(*v395 + 169);
    v400 = 1.0 / (double)v399;
    v401 = v400 * (double)*(int *)(*v395 + 176);
    if (v401 + v400 <= v606.f64[0])
      goto LABEL_487;
    v402 = v400 * (double)(v399 + ~*(_DWORD *)(v398 + 172));
    v403 = v402 + v400;
    v404 = v401 >= v607.f64[0] || v403 <= v606.f64[1];
    if (v404 || v402 >= v607.f64[1])
      goto LABEL_487;
    LODWORD(v653) = -1;
    v406 = *(MuninRoadEdge ***)(v398 + 752);
    v407 = *(MuninRoadEdge ***)(v398 + 760);
    if (v406 != v407)
    {
LABEL_502:
      v639 = 0;
      v410 = *v406;
      v639 = *v406;
      v643 = 0;
      v642 = 0;
      if (!v580)
      {
        if (v410 == *((MuninRoadEdge **)this + 19))
        {
          v403 = -5.82767265e303;
        }
        else
        {
          if (*((_BYTE *)v410 + 112))
          {
            v419 = -1;
            goto LABEL_510;
          }
LABEL_513:
          v403 = -4.09174166e149;
        }
LABEL_562:
        LODWORD(v653) = LODWORD(v403);
        if (!v581)
          goto LABEL_687;
        goto LABEL_616;
      }
      v411 = md::MuninRoadGraph::composedEdgeForEdge(*((int8x8_t **)this + 17), (unint64_t)v410);
      if (!v411)
      {
        if (*((_BYTE *)v410 + 112))
          goto LABEL_513;
        *(_QWORD *)&v403 = 541081664;
        goto LABEL_562;
      }
      v412 = v411;
      v413 = 0x9DDFEA08EB382D69 * (((8 * v411) + 8) ^ HIDWORD(v411));
      v414 = 0x9DDFEA08EB382D69 * (HIDWORD(v411) ^ (v413 >> 47) ^ v413);
      v415 = v414 ^ (v414 >> 47);
      v416 = 0x9DDFEA08EB382D69 * v415;
      v417 = *((_QWORD *)this + 31);
      if (!v417)
        goto LABEL_532;
      v403 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v417));
      LOWORD(v403) = vaddlv_u8(*(uint8x8_t *)&v403);
      if (LODWORD(v403) > 1uLL)
      {
        v418 = 0x9DDFEA08EB382D69 * v415;
        if (v416 >= v417)
          v418 = v416 % v417;
      }
      else
      {
        v418 = (v417 - 1) & v416;
      }
      v420 = *(uint64_t ***)(*((_QWORD *)this + 30) + 8 * v418);
      if (!v420 || (v421 = *v420) == 0)
      {
LABEL_532:
        v424 = kDebugColors[v579 & 0x3F];
        LOBYTE(v653) = BYTE2(v424);
        BYTE1(v653) = BYTE1(v424);
        BYTE2(v653) = v424;
        BYTE3(v653) = -1;
        if (v417)
        {
          v403 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v417));
          LOWORD(v403) = vaddlv_u8(*(uint8x8_t *)&v403);
          if (LODWORD(v403) > 1uLL)
          {
            v3 = v416;
            if (v416 >= v417)
              v3 = v416 % v417;
          }
          else
          {
            v3 = v416 & (v417 - 1);
          }
          v425 = *(_QWORD **)(*((_QWORD *)this + 30) + 8 * v3);
          if (v425)
          {
            v426 = (_QWORD *)*v425;
            if (v426)
            {
              if (LODWORD(v403) < 2uLL)
              {
                while (1)
                {
                  v428 = v426[1];
                  if (v428 == v416)
                  {
                    if (v426[2] == v411)
                      goto LABEL_615;
                  }
                  else if ((v428 & (v417 - 1)) != v3)
                  {
                    goto LABEL_552;
                  }
                  v426 = (_QWORD *)*v426;
                  if (!v426)
                    goto LABEL_552;
                }
              }
              do
              {
                v427 = v426[1];
                if (v427 == v416)
                {
                  if (v426[2] == v411)
                    goto LABEL_615;
                }
                else
                {
                  if (v427 >= v417)
                    v427 %= v417;
                  if (v427 != v3)
                    break;
                }
                v426 = (_QWORD *)*v426;
              }
              while (v426);
            }
          }
        }
LABEL_552:
        v429 = operator new(0x20uLL);
        *v429 = 0;
        v429[1] = v416;
        v429[2] = v412;
        *((_DWORD *)v429 + 6) = v653;
        *(float *)&v403 = (float)(unint64_t)(*((_QWORD *)this + 33) + 1);
        v430 = *((float *)this + 68);
        if (!v417 || (float)(v430 * (float)v417) < *(float *)&v403)
        {
          v431 = (v417 & (v417 - 1)) != 0;
          if (v417 < 3)
            v431 = 1;
          v432 = v431 | (2 * v417);
          *(float *)&v403 = *(float *)&v403 / v430;
          v433 = vcvtps_u32_f32(*(float *)&v403);
          if (v432 <= v433)
            v434 = v433;
          else
            v434 = v432;
          if (v434 == 1)
          {
            v434 = 2;
          }
          else if ((v434 & (v434 - 1)) != 0)
          {
            v434 = std::__next_prime(v434);
            v417 = *((_QWORD *)this + 31);
          }
          if (v434 > v417)
          {
LABEL_567:
            if (!(v434 >> 61))
            {
              v435 = operator new(8 * v434);
              v436 = (void *)*((_QWORD *)this + 30);
              *((_QWORD *)this + 30) = v435;
              if (v436)
                operator delete(v436);
              v437 = 0;
              *((_QWORD *)this + 31) = v434;
              do
                *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v437++) = 0;
              while (v434 != v437);
              v438 = (_QWORD *)*v578;
              if (!*v578)
                goto LABEL_591;
              v439 = v438[1];
              v440 = v434 - 1;
              if ((v434 & (v434 - 1)) == 0)
              {
                v441 = v439 & v440;
                *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v441) = v578;
                for (k = (_QWORD *)*v438; *v438; k = (_QWORD *)*v438)
                {
                  v443 = k[1] & v440;
                  if (v443 == v441)
                  {
                    v438 = k;
                  }
                  else
                  {
                    v444 = *((_QWORD *)this + 30);
                    if (*(_QWORD *)(v444 + 8 * v443))
                    {
                      *v438 = *k;
                      v445 = 8 * v443;
                      *k = **(_QWORD **)(*((_QWORD *)this + 30) + v445);
                      **(_QWORD **)(*((_QWORD *)this + 30) + v445) = k;
                    }
                    else
                    {
                      *(_QWORD *)(v444 + 8 * v443) = v438;
                      v438 = k;
                      v441 = v443;
                    }
                  }
                }
                goto LABEL_591;
              }
              if (v439 >= v434)
                v439 %= v434;
              *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v439) = v578;
              v448 = (_QWORD *)*v438;
              if (!*v438)
              {
LABEL_591:
                v417 = v434;
                goto LABEL_592;
              }
              while (2)
              {
                v450 = v448[1];
                if (v450 >= v434)
                  v450 %= v434;
                if (v450 != v439)
                {
                  v451 = *((_QWORD *)this + 30);
                  if (!*(_QWORD *)(v451 + 8 * v450))
                  {
                    *(_QWORD *)(v451 + 8 * v450) = v438;
LABEL_596:
                    v438 = v448;
                    v448 = (_QWORD *)*v448;
                    v439 = v450;
                    if (!v448)
                      goto LABEL_591;
                    continue;
                  }
                  *v438 = *v448;
                  v449 = 8 * v450;
                  *v448 = **(_QWORD **)(*((_QWORD *)this + 30) + v449);
                  **(_QWORD **)(*((_QWORD *)this + 30) + v449) = v448;
                  v448 = v438;
                }
                break;
              }
              v450 = v439;
              goto LABEL_596;
            }
LABEL_824:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          if (v434 < v417)
          {
            v446 = vcvtps_u32_f32((float)*((unint64_t *)this + 33) / *((float *)this + 68));
            if (v417 < 3
              || (v403 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v417)),
                  LOWORD(v403) = vaddlv_u8(*(uint8x8_t *)&v403),
                  LODWORD(v403) > 1uLL))
            {
              v446 = std::__next_prime(v446);
            }
            else
            {
              v447 = 1 << -(char)__clz(v446 - 1);
              if (v446 >= 2)
                v446 = v447;
            }
            if (v434 <= v446)
              v434 = v446;
            if (v434 >= v417)
            {
              v417 = *((_QWORD *)this + 31);
            }
            else
            {
              if (v434)
                goto LABEL_567;
              v490 = (void *)*((_QWORD *)this + 30);
              *((_QWORD *)this + 30) = 0;
              if (v490)
                operator delete(v490);
              v417 = 0;
              *((_QWORD *)this + 31) = 0;
            }
          }
LABEL_592:
          if ((v417 & (v417 - 1)) != 0)
          {
            if (v416 >= v417)
              v3 = v416 % v417;
            else
              v3 = v416;
          }
          else
          {
            v3 = (v417 - 1) & v416;
          }
        }
        v452 = *((_QWORD *)this + 30);
        v453 = *(_QWORD **)(v452 + 8 * v3);
        if (v453)
        {
          *v429 = *v453;
          goto LABEL_613;
        }
        *v429 = *v578;
        *v578 = v429;
        *(_QWORD *)(v452 + 8 * v3) = v578;
        if (*v429)
        {
          v454 = *(_QWORD *)(*v429 + 8);
          if ((v417 & (v417 - 1)) != 0)
          {
            if (v454 >= v417)
              v454 %= v417;
          }
          else
          {
            v454 &= v417 - 1;
          }
          v453 = (_QWORD *)(*((_QWORD *)this + 30) + 8 * v454);
LABEL_613:
          *v453 = v429;
        }
        ++*((_QWORD *)this + 33);
LABEL_615:
        ++v579;
        if (!v581)
          goto LABEL_687;
LABEL_616:
        v455 = md::MuninRoadGraph::composedEdgeForEdge(*((int8x8_t **)this + 17), (unint64_t)v639);
        v3 = *((_QWORD *)this + 18);
        v403 = 0.0;
        v628 = 0u;
        v629 = 0u;
        v630 = *(float *)(v3 + 152);
        v456 = *(_QWORD *)(v3 + 128);
        if (v456 == 1)
        {
          v456 = 2;
          goto LABEL_634;
        }
        if ((v456 & (v456 - 1)) != 0)
        {
          v456 = std::__next_prime(*(_QWORD *)(v3 + 128));
          v457 = *(int8x8_t *)((char *)&v628 + 8);
          _CF = v456 >= *((_QWORD *)&v628 + 1);
          if (v456 > *((_QWORD *)&v628 + 1))
            goto LABEL_633;
        }
        else
        {
          v457 = 0;
          _CF = 1;
          if (v456)
          {
LABEL_633:
            if (v456 >> 61)
              goto LABEL_824;
LABEL_634:
            v461 = operator new(8 * v456);
            v462 = (void *)v628;
            *(_QWORD *)&v628 = v461;
            if (v462)
              operator delete(v462);
            v463 = 0;
            *((_QWORD *)&v628 + 1) = v456;
            do
              *(_QWORD *)(v628 + 8 * v463++) = 0;
            while (v456 != v463);
            v464 = (_QWORD **)v629;
            if (!(_QWORD)v629)
              goto LABEL_650;
            v465 = *(_QWORD *)(v629 + 8);
            v466 = v456 - 1;
            if ((v456 & (v456 - 1)) == 0)
            {
              v467 = v465 & v466;
              *(_QWORD *)(v628 + 8 * v467) = &v629;
              while (1)
              {
                v468 = *v464;
                if (!*v464)
                  break;
                v469 = v468[1] & v466;
                if (v469 == v467)
                {
                  v464 = (_QWORD **)*v464;
                }
                else if (*(_QWORD *)(v628 + 8 * v469))
                {
                  *v464 = (_QWORD *)*v468;
                  v470 = 8 * v469;
                  *v468 = **(_QWORD **)(v628 + v470);
                  **(_QWORD **)(v628 + v470) = v468;
                }
                else
                {
                  *(_QWORD *)(v628 + 8 * v469) = v464;
                  v464 = (_QWORD **)v468;
                  v467 = v469;
                }
              }
              goto LABEL_650;
            }
            if (v465 >= v456)
              v465 %= v456;
            *(_QWORD *)(v628 + 8 * v465) = &v629;
            v471 = *v464;
            if (!*v464)
            {
LABEL_650:
              m = *(_QWORD **)(v3 + 136);
              if (m)
                goto LABEL_651;
              goto LABEL_652;
            }
            while (2)
            {
              v478 = v471[1];
              if (v478 >= v456)
                v478 %= v456;
              if (v478 != v465)
              {
                if (!*(_QWORD *)(v628 + 8 * v478))
                {
                  *(_QWORD *)(v628 + 8 * v478) = v464;
LABEL_657:
                  v464 = (_QWORD **)v471;
                  v471 = (_QWORD *)*v471;
                  v465 = v478;
                  if (!v471)
                    goto LABEL_650;
                  continue;
                }
                *v464 = (_QWORD *)*v471;
                v477 = 8 * v478;
                *v471 = **(_QWORD **)(v628 + v477);
                **(_QWORD **)(v628 + v477) = v471;
                v471 = v464;
              }
              break;
            }
            v478 = v465;
            goto LABEL_657;
          }
        }
        if (_CF)
          goto LABEL_650;
        v459 = vcvtps_u32_f32((float)*((unint64_t *)&v629 + 1) / v630);
        if (*(_QWORD *)&v457 < 3uLL
          || (v403 = COERCE_DOUBLE(vcnt_s8(v457)), LOWORD(v403) = vaddlv_u8(*(uint8x8_t *)&v403), LODWORD(v403) > 1uLL))
        {
          v459 = std::__next_prime(v459);
        }
        else
        {
          v460 = 1 << -(char)__clz(v459 - 1);
          if (v459 >= 2)
            v459 = v460;
        }
        if (v456 <= v459)
          v456 = v459;
        if (v456 >= *(_QWORD *)&v457)
          goto LABEL_650;
        if (v456)
          goto LABEL_633;
        v491 = (void *)v628;
        *(_QWORD *)&v628 = 0;
        if (v491)
          operator delete(v491);
        *((_QWORD *)&v628 + 1) = 0;
        for (m = *(_QWORD **)(v3 + 136); m; m = (_QWORD *)*m)
LABEL_651:
          std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const* const&>((uint64_t)&v628, m[2], m[2]);
        if (!*((_QWORD *)&v628 + 1))
          goto LABEL_680;
LABEL_652:
        v473 = 0x9DDFEA08EB382D69 * (((8 * v455) + 8) ^ HIDWORD(v455));
        v474 = 0x9DDFEA08EB382D69 * (HIDWORD(v455) ^ (v473 >> 47) ^ v473);
        v475 = 0x9DDFEA08EB382D69 * (v474 ^ (v474 >> 47));
        v403 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)((char *)&v628 + 8)));
        LOWORD(v403) = vaddlv_u8(*(uint8x8_t *)&v403);
        if (LODWORD(v403) > 1uLL)
        {
          v476 = v475;
          if (v475 >= *((_QWORD *)&v628 + 1))
            v476 = v475 % *((_QWORD *)&v628 + 1);
        }
        else
        {
          v476 = (*((_QWORD *)&v628 + 1) - 1) & v475;
        }
        v479 = *(_QWORD **)(v628 + 8 * v476);
        if (v479)
        {
          v480 = (_QWORD *)*v479;
          if (*v479)
          {
            if (LODWORD(v403) < 2uLL)
            {
              while (1)
              {
                v482 = v480[1];
                if (v475 == v482)
                {
                  if (v480[2] == v455)
                    goto LABEL_681;
                }
                else if ((v482 & (*((_QWORD *)&v628 + 1) - 1)) != v476)
                {
                  goto LABEL_680;
                }
                v480 = (_QWORD *)*v480;
                if (!v480)
                  goto LABEL_681;
              }
            }
            do
            {
              v481 = v480[1];
              if (v475 == v481)
              {
                if (v480[2] == v455)
                  break;
              }
              else
              {
                if (v481 >= *((_QWORD *)&v628 + 1))
                  v481 %= *((_QWORD *)&v628 + 1);
                if (v481 != v476)
                  goto LABEL_680;
              }
              v480 = (_QWORD *)*v480;
            }
            while (v480);
          }
        }
        else
        {
LABEL_680:
          v480 = 0;
        }
LABEL_681:
        v483 = (_QWORD *)v629;
        if ((_QWORD)v629)
        {
          do
          {
            v484 = (_QWORD *)*v483;
            operator delete(v483);
            v483 = v484;
          }
          while (v484);
        }
        v485 = (void *)v628;
        *(_QWORD *)&v628 = 0;
        if (v485)
          operator delete(v485);
        if (v480)
        {
          v403 = -5.48746343e303;
          LODWORD(v653) = -16776961;
        }
        goto LABEL_687;
      }
      if (LODWORD(v403) < 2uLL)
      {
        while (1)
        {
          v423 = v421[1];
          if (v423 == v416)
          {
            if (v421[2] == v411)
              goto LABEL_693;
          }
          else if ((v423 & (v417 - 1)) != v418)
          {
            goto LABEL_532;
          }
          v421 = (uint64_t *)*v421;
          if (!v421)
            goto LABEL_532;
        }
      }
      while (1)
      {
        v422 = v421[1];
        if (v422 == v416)
        {
          if (v421[2] == v411)
          {
LABEL_693:
            v419 = *((_DWORD *)v421 + 6);
LABEL_510:
            LODWORD(v653) = v419;
            if (v581)
              goto LABEL_616;
LABEL_687:
            LOBYTE(v628) = 0;
            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v403);
            v486 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v486, "enableMuninMiniMapRoadWidths"))
              v487 = *((_BYTE *)v639 + 112) != 0;
            else
              v487 = 0;

            LOBYTE(v628) = v487;
            v488 = (uint64_t *)v639;
            v655 = 0;
            v489 = operator new(0x40uLL);
            *v489 = &off_1E42D9008;
            v489[1] = &v642;
            v489[2] = &v645;
            v489[3] = &v628;
            v489[4] = &v639;
            v489[5] = this;
            v489[6] = &v603;
            v489[7] = &v653;
            v655 = v489;
            md::MuninRoadEdge::walkEdgeGeometry(v488, 1, (uint64_t)v654);
            v408 = v655;
            if (v655 == v654)
            {
              v408 = v654;
              v409 = 4;
              goto LABEL_500;
            }
            if (v655)
            {
              v409 = 5;
LABEL_500:
              (*(void (**)(void))(*v408 + 8 * v409))();
            }
            if (++v406 == v407)
            {
              v398 = *v395;
              break;
            }
            goto LABEL_502;
          }
        }
        else
        {
          if (v422 >= v417)
            v422 %= v417;
          if (v422 != v418)
            goto LABEL_532;
        }
        v421 = (uint64_t *)*v421;
        if (!v421)
          goto LABEL_532;
      }
    }
    v492 = *(unint64_t **)(v398 + 776);
    v493 = *(uint64_t **)(v398 + 784);
    while (2)
    {
      if (v492 != (unint64_t *)v493)
      {
        v494 = *v492;
        v495 = *(double *)(*v492 + 16);
        if (v495 < v606.f64[0] || v495 >= v607.f64[0])
          goto LABEL_711;
        v497 = *(double *)(v494 + 24);
        if (v497 < v606.f64[1] || v497 >= v607.f64[1])
          goto LABEL_711;
        if (v598[1])
        {
          v499 = 0x9DDFEA08EB382D69 * (((8 * v494) + 8) ^ HIDWORD(v494));
          v500 = 0x9DDFEA08EB382D69 * (HIDWORD(v494) ^ (v499 >> 47) ^ v499);
          v501 = 0x9DDFEA08EB382D69 * (v500 ^ (v500 >> 47));
          v502 = (uint8x8_t)vcnt_s8((int8x8_t)v598[1]);
          v502.i16[0] = vaddlv_u8(v502);
          if (v502.u32[0] > 1uLL)
          {
            v503 = v501;
            if ((void *)v501 >= v598[1])
              v503 = v501 % (unint64_t)v598[1];
          }
          else
          {
            v503 = ((unint64_t)v598[1] - 1) & v501;
          }
          v504 = (_QWORD *)*((_QWORD *)v598[0] + v503);
          if (v504)
          {
            v505 = (_QWORD *)*v504;
            if (v505)
            {
              if (v502.u32[0] < 2uLL)
              {
                while (1)
                {
                  v507 = v505[1];
                  if (v501 == v507)
                  {
                    if (v505[2] == v494)
                      goto LABEL_792;
                  }
                  else if ((v507 & ((uint64_t)v598[1] - 1)) != v503)
                  {
                    goto LABEL_743;
                  }
                  v505 = (_QWORD *)*v505;
                  if (!v505)
                    goto LABEL_743;
                }
              }
              do
              {
                v506 = v505[1];
                if (v501 == v506)
                {
                  if (v505[2] == v494)
                  {
LABEL_792:
                    v3 = 0;
                    LODWORD(v628) = -16711936;
                    v509 = -1;
                    goto LABEL_748;
                  }
                }
                else
                {
                  if ((void *)v506 >= v598[1])
                    v506 %= (unint64_t)v598[1];
                  if (v506 != v503)
                    break;
                }
                v505 = (_QWORD *)*v505;
              }
              while (v505);
            }
          }
        }
LABEL_743:
        v508 = *(unsigned __int8 *)(v494 + 69);
        if (v508 > 2 || v508 - 1 <= 1 && *(unsigned __int8 *)(v494 + 68) >= 3u)
        {
          LODWORD(v628) = -1;
          v509 = -1;
          v3 = 255;
        }
        else
        {
          LODWORD(v628) = -553648128;
          v3 = 255;
          v509 = 32;
        }
LABEL_748:
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v510 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v510, "enableMuninMiniMapRoadWidths"))
          goto LABEL_709;
        v511 = *(unsigned __int8 *)(v494 + 69);
        if (v511 >= 3)
        {

          goto LABEL_751;
        }
        if (v511 - 1 < 2)
        {
          v516 = *(unsigned __int8 *)(v494 + 68) > 2u;

          if (v516)
          {
LABEL_751:
            v512 = *(char **)(v494 + 40);
            v513 = *(char **)(v494 + 48);
            if (v512 == v513)
            {
              v515 = 0.0;
            }
            else
            {
              v514 = v513 - v512 - 8;
              if (v514 > 7)
              {
                v517 = (v514 >> 3) + 1;
                v518 = v512 + 8;
                v519 = 0.0;
                v520 = v517 & 0x3FFFFFFFFFFFFFFELL;
                v521 = 0.0;
                do
                {
                  v519 = fmax(v519, *(float *)(*(v518 - 1) + 8));
                  v521 = fmax(v521, *(float *)(*v518 + 8));
                  v518 += 2;
                  v520 -= 2;
                }
                while (v520);
                v515 = fmax(v519, v521);
                if (v517 != (v517 & 0x3FFFFFFFFFFFFFFELL))
                {
                  v512 += 8 * (v517 & 0x3FFFFFFFFFFFFFFELL);
                  goto LABEL_763;
                }
              }
              else
              {
                v515 = 0.0;
                do
                {
LABEL_763:
                  v522 = *(_QWORD *)v512;
                  v512 += 8;
                  v515 = fmax(v515, *(float *)(v522 + 8));
                }
                while (v512 != v513);
              }
            }
            if (v607.f64[0] >= v606.f64[0] && v607.f64[1] >= v606.f64[1])
            {
              v523 = v515 * v576;
              v524 = *(double *)(v494 + 16);
              v525 = *(double *)(v494 + 24);
              v526 = fmax(v524 - v607.f64[0], v606.f64[0] - v524);
              v527 = fmax(v525 - v607.f64[1], v606.f64[1] - v525);
              v528 = v523 != 0.0 && v526 < v523;
              v529 = v528 && v527 < v523;
              if (v529
                && (v526 <= 0.0 || v527 <= 0.0 || v526 * v526 + v527 * v527 < v523 * v523)
                && (vcgt_f32(v604, v605).u8[0] & 1) == 0
                && v605.f32[1] >= v604.f32[1])
              {
                v530 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v605, v604)), vsubq_f64(v607, v606)));
                v531 = v523 * fminf(v530.f32[1], v530.f32[0]);
                if (v531 != 0.0)
                {
                  v532 = v613.f64[0] + v609.f64[0] * v524 + v611.f64[0] * v525;
                  v533 = v613.f64[1] + v609.f64[1] * v524 + v611.f64[1] * v525;
                  v534 = 1.0 / (v614 + v610 * v524 + v612 * v525);
                  v535 = v534 * v532;
                  *(float *)&v534 = v534 * v533;
                  *(float *)&v532 = (float)(v620 + (float)(v615.f32[0] * v535)) + (float)(v617 * *(float *)&v534);
                  *(float *)&v533 = (float)(v621 + (float)(v615.f32[1] * v535)) + (float)(v618 * *(float *)&v534);
                  v536 = 1.0 / (float)((float)(v622 + (float)(v616 * v535)) + (float)(v619 * *(float *)&v534));
                  v537 = v536 * *(float *)&v532;
                  v538 = v536 * *(float *)&v533;
                  v539 = fmaxf(v537 - v605.f32[0], v604.f32[0] - v537);
                  v540 = fmaxf(v538 - v605.f32[1], v604.f32[1] - v538);
                  if (v539 < v531 && v540 < v531)
                  {
                    if (v539 <= 0.0
                      || ((v542 = (float)(v539 * v539) + (float)(v540 * v540), v540 > 0.0)
                        ? (v543 = v542 < (float)(v531 * v531))
                        : (v543 = 1),
                          v543))
                    {
                      v544 = v603;
                      *((_BYTE *)v603 + 96) = v3;
                      *((_BYTE *)v544 + 97) = -1;
                      *((_BYTE *)v544 + 98) = v3;
                      *((_BYTE *)v544 + 99) = v509;
                      *((float *)v544 + 2) = v537;
                      *((float *)v544 + 3) = v538;
                      ggl::DebugConsole::drawCircle(v544, v531);
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
LABEL_709:

        }
        md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)&v603, v396, &v628, 1, *(double *)(v494 + 16), *(double *)(v494 + 24));
LABEL_711:
        ++v492;
        continue;
      }
      break;
    }
    v545 = (char *)*((_QWORD *)this + 21);
    if (v545 != v582)
    {
      do
      {
        v546 = (_QWORD *)*((_QWORD *)v545 + 4);
        v547 = *(double *)(*v546 + 16);
        if (v547 >= v606.f64[0] && v547 < v607.f64[0])
        {
          v549 = *(double *)(*v546 + 24);
          if (v549 >= v606.f64[1] && v549 < v607.f64[1])
          {
            v551 = (_QWORD *)v546[7];
            for (n = (_QWORD *)v546[8]; v551 != n; v551 += 2)
            {
              v553 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v551 + 16))(*v551);
              LODWORD(v628) = -65281;
              md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)&v603, v396, &v628, 1, *(double *)&v553, *((double *)&v553 + 1));
              v554 = *(double ***)(*v551 + 16);
              v555 = *(double ***)(*v551 + 24);
              while (v554 != v555)
              {
                v556 = *v554;
                v554 += 2;
                v557 = v556[27];
                v558 = v556[28];
                v559 = v556[29];
                v560 = sqrt(v557 * v557 + v558 * v558);
                v561 = atan2(v559, v560 * 0.996647189);
                __nd = atan2(v558, v557);
                v562 = __sincos_stret(v561);
                v563 = atan2(v559 + v562.__sinval * v562.__sinval * 42841.3115 * v562.__sinval, v560 + v562.__cosval * v562.__cosval * -42697.6727 * v562.__cosval);
                v564 = tan(v563 * 0.5 + 0.785398163);
                v565 = log(v564);
                v566.f64[0] = __nd;
                v566.f64[1] = v565;
                v567 = vmlaq_f64(v585, v586, v566);
                LODWORD(v628) = -256;
                md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)&v603, v396, &v628, 1, v567.f64[0], v567.f64[1]);
              }
            }
          }
        }
        v568 = (char *)*((_QWORD *)v545 + 1);
        if (v568)
        {
          do
          {
            v569 = v568;
            v568 = *(char **)v568;
          }
          while (v568);
        }
        else
        {
          do
          {
            v569 = (char *)*((_QWORD *)v545 + 2);
            _ZF = *(_QWORD *)v569 == (_QWORD)v545;
            v545 = v569;
          }
          while (!_ZF);
        }
        v545 = v569;
      }
      while (v569 != v582);
    }
    v394 = v577;
LABEL_487:
    v395 += 2;
    if (v395 != v394)
      continue;
    break;
  }
LABEL_817:
  v597 = *(_QWORD *)(*((_QWORD *)this + 35) + 1288);
  md::DebugConsoleMapRect::drawWorldArrow((uint64_t)&v603, (double *)&v597, &v624, v574, v573, v575 * 22.0, v575 * 12.0);
  if (v645)
  {
    *(_QWORD *)&v646 = v645;
    operator delete(v645);
  }
  v570 = v599[0];
  if (v599[0])
  {
    do
    {
      v571 = (_QWORD *)*v570;
      operator delete(v570);
      v570 = v571;
    }
    while (v571);
  }
  v572 = v598[0];
  v598[0] = 0;
  if (v572)
    operator delete(v572);
}

void sub_19FCB79B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,_QWORD *a35)
{
  _QWORD *v36;
  _QWORD *v37;

  if (__p)
  {
    STACK[0x2E8] = (unint64_t)__p;
    operator delete(__p);
  }
  md::ComposedRoadEdgeZInfo::~ComposedRoadEdgeZInfo((md::ComposedRoadEdgeZInfo *)&STACK[0x300]);
  operator delete(a20);
  v36 = a35;
  if (a35)
  {
    do
    {
      v37 = (_QWORD *)*v36;
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
  if (!a33)
    _Unwind_Resume(a1);
  operator delete(a33);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0,std::allocator<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0,std::allocator<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E42D9008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0,std::allocator<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E42D9008;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0,std::allocator<md::MuninRoadLabeler::debugDrawRoadNetworkMiniMap(md::DebugConsole *,double)::$_0>,BOOL ()(gm::Matrix<double,2,1> const&)>::operator()(uint64_t a1, float64x2_t *a2)
{
  float64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  double *v20;
  unint64_t v21;
  float64x2_t v22;
  _OWORD *f64;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  double **v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  double *v40;
  double *v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  float64x2_t v54;
  double *v55;
  __int128 v56;
  double **v57;
  double *v58;
  double *v59;
  _QWORD *v60;

  v4 = *(float64x2_t **)(a1 + 8);
  if (*v4 == 0)
    goto LABEL_42;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float64x2_t **)v6;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)v6;
  if (!**(_BYTE **)(a1 + 24))
  {
    v21 = *(_QWORD *)(v6 + 16);
    if ((unint64_t)v7 >= v21)
    {
      v48 = v21 - (_QWORD)v7;
      v49 = v48 >> 4;
      if ((unint64_t)(v48 >> 4) <= 1)
        v49 = 1;
      v26 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0;
      v50 = 0x7FFFFFFFFFFFFFFLL;
      if (!v26)
        v50 = v49;
      if (v50 >> 59)
        goto LABEL_43;
      v51 = 2 * v50;
      v52 = operator new(32 * v50);
      v53 = &v52[v51];
      v54 = vsubq_f64(*a2, *v4);
      *v52 = *v4;
      v52[1] = v54;
      f64 = v52 + 2;
      *(_QWORD *)v6 = v52;
      *(_QWORD *)(v6 + 8) = v52 + 2;
      *(_QWORD *)(v6 + 16) = v53;
      if (v7)
        operator delete(v7);
    }
    else
    {
      v22 = vsubq_f64(*a2, *v4);
      *v7 = *v4;
      v7[1] = v22;
      f64 = (_OWORD *)v7[2].f64;
    }
    *(_QWORD *)(v6 + 8) = f64;
    goto LABEL_40;
  }
  v9 = v4->f64[0];
  v8 = v4->f64[1];
  v11 = a2->f64[0];
  v10 = a2->f64[1];
  v12 = v4->f64[0] - a2->f64[0];
  v13 = 1.0 / sqrt(v12 * v12 + (v8 - v10) * (v8 - v10));
  v14 = *(double *)(*(_QWORD *)(v5 + 280) + 816) * (float)(*(float *)(**(_QWORD **)(a1 + 32) + 8) * 0.5);
  v15 = -((v8 - v10) * v13) * v14;
  v16 = v13 * (v12 * v14);
  v17 = v15 + v4->f64[0];
  v18 = v16 + v8;
  v19 = *(_QWORD *)(v6 + 16);
  if ((unint64_t)v7 >= v19)
  {
    v24 = v19 - (_QWORD)v7;
    v25 = v24 >> 4;
    if ((unint64_t)(v24 >> 4) <= 1)
      v25 = 1;
    v26 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0;
    v27 = 0x7FFFFFFFFFFFFFFLL;
    if (!v26)
      v27 = v25;
    if (v27 >> 59)
      goto LABEL_43;
    v28 = 4 * v27;
    v29 = (double *)operator new(32 * v27);
    v30 = &v29[v28];
    *v29 = v17;
    v29[1] = v18;
    v29[2] = v11 - v9;
    v29[3] = v10 - v8;
    v20 = v29 + 4;
    *(_QWORD *)v6 = v29;
    *(_QWORD *)(v6 + 8) = v29 + 4;
    *(_QWORD *)(v6 + 16) = v30;
    if (v7)
      operator delete(v7);
  }
  else
  {
    v7->f64[0] = v17;
    v7->f64[1] = v18;
    v7[1].f64[0] = v11 - v9;
    v7[1].f64[1] = v10 - v8;
    v20 = v7[2].f64;
  }
  *(_QWORD *)(v6 + 8) = v20;
  v31 = *(double **)(a1 + 8);
  v32 = *(double ***)(a1 + 16);
  v34 = *v31;
  v33 = v31[1];
  v35 = *v31 - v15;
  v36 = v33 - v16;
  v38 = a2->f64[0];
  v37 = a2->f64[1];
  v40 = v32[1];
  v39 = (unint64_t)v32[2];
  if ((unint64_t)v40 >= v39)
  {
    v42 = *v32;
    v43 = ((char *)v40 - (char *)*v32) >> 5;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 59)
      abort();
    v45 = v39 - (_QWORD)v42;
    if (v45 >> 4 > v44)
      v44 = v45 >> 4;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
      v46 = 0x7FFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (!v46)
    {
      v47 = 0;
      goto LABEL_34;
    }
    if (!(v46 >> 59))
    {
      v47 = (char *)operator new(32 * v46);
LABEL_34:
      v55 = (double *)&v47[32 * v43];
      *v55 = v35;
      v55[1] = v36;
      v55[2] = v38 - v34;
      v55[3] = v37 - v33;
      v41 = v55 + 4;
      if (v40 != v42)
      {
        do
        {
          v56 = *((_OWORD *)v40 - 1);
          *((_OWORD *)v55 - 2) = *((_OWORD *)v40 - 2);
          *((_OWORD *)v55 - 1) = v56;
          v55 -= 4;
          v40 -= 4;
        }
        while (v40 != v42);
        v40 = *v32;
      }
      *v32 = v55;
      v32[1] = v41;
      v32[2] = (double *)&v47[32 * v46];
      if (v40)
        operator delete(v40);
      goto LABEL_39;
    }
LABEL_43:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *v40 = v35;
  v40[1] = v36;
  v40[2] = v38 - v34;
  v40[3] = v37 - v33;
  v41 = v40 + 4;
LABEL_39:
  v32[1] = v41;
LABEL_40:
  v57 = *(double ***)(a1 + 16);
  v58 = *v57;
  v59 = v57[1];
  if (*v57 != v59)
  {
    do
    {
      md::DebugConsoleMapRect::drawWorldSegment(*(_QWORD *)(a1 + 48), v58, *(_BYTE **)(a1 + 56));
      v58 += 4;
    }
    while (v58 != v59);
  }
LABEL_42:
  v60 = *(_QWORD **)(a1 + 8);
  *v60 = *(_QWORD *)&a2->f64[0];
  v60[1] = *(_QWORD *)&a2->f64[1];
  return 1;
}

double std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::debugDrawZData(md::DebugConsoleMapRect *)::$_0 &,gm::Range<double> *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t *n128_u64;
  double *n128_f64;
  double *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  double v23;
  double v24;
  double v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  double v32;
  double v33;
  double v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  double v38;
  double v39;
  unint64_t v40;
  __n128 *v41;
  __n128 *v42;
  double v43;
  __n128 *v44;
  double v45;
  double v46;
  __n128 *v47;
  __n128 v48;
  double v49;
  double v50;
  BOOL v51;
  __n128 v52;
  double v53;
  __n128 *v54;
  __n128 *v55;
  double v56;
  unint64_t v57;
  double v58;
  double v59;
  __n128 *v60;
  double v61;
  __n128 *v62;
  __n128 *v63;
  __n128 *v64;
  __n128 *v65;
  BOOL v67;
  uint64_t v68;
  __n128 *v69;
  __n128 *v70;
  __n128 *v71;
  unint64_t v72;
  uint64_t v73;
  double v74;
  int64_t v75;
  int64_t v76;
  BOOL v77;
  uint64_t v78;
  double *v79;
  __n128 *v80;
  double v81;
  unint64_t v82;
  __n128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 *v88;
  __n128 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __n128 *v94;
  unint64_t v95;
  __n128 *v96;
  __n128 *v97;
  unint64_t v98;
  __n128 *v99;
  double v100;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;

void md::ComposedRoadEdgeZInfo::~ComposedRoadEdgeZInfo(md::ComposedRoadEdgeZInfo *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::debugDrawZData(md::DebugConsoleMapRect *)::$_0 &,gm::Range<double> *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  double v9;
  double v10;
  __n128 v11;
  __n128 *v12;
  double v13;
  __n128 *v14;
  double v15;
  double v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  double v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  double v41;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (a2[-1].n128_f64[0] < a1->n128_f64[0])
        goto LABEL_6;
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a1[1].n128_f64[0];
      v7 = a2 - 1;
      v10 = a2[-1].n128_f64[0];
      if (v9 >= a1->n128_f64[0])
      {
        if (v10 < v9)
        {
          v27 = *v8;
          *v8 = *v7;
          *v7 = v27;
          if (a1[1].n128_f64[0] < a1->n128_f64[0])
          {
            v28 = *a1;
            *a1 = *v8;
            *v8 = v28;
          }
        }
      }
      else if (v10 >= v9)
      {
        v31 = *a1;
        *a1 = *v8;
        *v8 = v31;
        if (v7->n128_f64[0] < a1[1].n128_f64[0])
        {
          v32 = *v8;
          *v8 = *v7;
          *v7 = v32;
        }
      }
      else
      {
LABEL_6:
        v11 = *a1;
        *a1 = *v7;
        *v7 = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(a1, a1[1].n128_f64, a1[2].n128_f64, a2[-1].n128_u64, a3);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(a1, a1[1].n128_f64, a1[2].n128_f64, a1[3].n128_u64, a3);
      v22 = a2[-1].n128_f64[0];
      v21 = a2 - 1;
      if (v22 < a1[3].n128_f64[0])
      {
        v23 = *v20;
        *v20 = *v21;
        *v21 = v23;
        if (v20->n128_f64[0] < v19->n128_f64[0])
        {
          v24 = *v19;
          *v19 = *v20;
          *v20 = v24;
          if (v19->n128_f64[0] < v18->n128_f64[0])
          {
            v25 = *v18;
            *v18 = *v19;
            *v19 = v25;
            if (a1[1].n128_f64[0] < a1->n128_f64[0])
            {
              v26 = *a1;
              *a1 = *v18;
              *v18 = v26;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2].n128_f64[0];
      v14 = a1 + 1;
      v15 = a1[1].n128_f64[0];
      v16 = a1->n128_f64[0];
      if (v15 >= a1->n128_f64[0])
      {
        if (v13 < v15)
        {
          v29 = *v14;
          *v14 = *v12;
          *v12 = v29;
          if (v14->n128_f64[0] < v16)
          {
            v30 = *a1;
            *a1 = *v14;
            *v14 = v30;
          }
        }
      }
      else
      {
        if (v13 >= v15)
        {
          v33 = *a1;
          *a1 = *v14;
          *v14 = v33;
          if (v13 >= a1[1].n128_f64[0])
            goto LABEL_27;
          v17 = *v14;
          *v14 = *v12;
        }
        else
        {
          v17 = *a1;
          *a1 = *v12;
        }
        *v12 = v17;
      }
LABEL_27:
      v34 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      break;
  }
  while (1)
  {
    v38 = v34->n128_f64[0];
    if (v34->n128_f64[0] < v12->n128_f64[0])
    {
      v39 = v34->n128_u64[1];
      v40 = v35;
      do
      {
        *(__n128 *)((char *)a1 + v40 + 48) = *(__n128 *)((char *)a1 + v40 + 32);
        if (v40 == -32)
        {
          v37 = (uint64_t)a1;
          goto LABEL_30;
        }
        v41 = *(double *)((char *)a1[1].n128_f64 + v40);
        v40 -= 16;
      }
      while (v38 < v41);
      v37 = (uint64_t)&a1[3] + v40;
LABEL_30:
      *(double *)v37 = v38;
      *(_QWORD *)(v37 + 8) = v39;
      if (++v36 == 8)
        return &v34[1] == a2;
    }
    v12 = v34;
    v35 += 16;
    if (++v34 == a2)
      return 1;
  }
}

uint64_t md::MuninRoadLabeler::debugString@<X0>(md::MuninRoadLabeler *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[3];
  uint64_t v31;
  unint64_t v32;
  void *__p[2];
  __int128 v34;
  int v35;
  uint64_t v36[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v36[0] = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v7;
  *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v9, v29);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v28 = v4 + 24;
  v36[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  v35 = 16;
  md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(*((_QWORD *)this + 1) + 336)
                                                                              + 200));
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"[MuninRoadLabeler]\n", 19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)" State: isSceneLoaded=", 22);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  v12 = v28;
  *(_DWORD *)((char *)v29 + *(_QWORD *)(v28 - 24)) = *(_DWORD *)((_BYTE *)v29 + *(_QWORD *)(v28 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v29[1] + *(_QWORD *)(v12 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)" Junctions: active=", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" maxDist(Corner=", 16);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" Cross=", 7);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)")\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)" Labels: active=", 16);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)") display=", 10);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" exist=", 7);
  atomic_load((unsigned int *)&md::MuninRoadLabel::_totalLabels);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void **)&v31;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v20 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    v22 = (const void **)v30;
    v21 = v30[2];
  }
  v23 = *v22;
  v20 = v21 - (_QWORD)*v22;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    *((_QWORD *)a2 + 1) = v20;
    *((_QWORD *)a2 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)a2 = v26;
    a2 = v26;
    goto LABEL_15;
  }
  a2[23] = v20;
  if (v20)
LABEL_15:
    memmove(a2, v23, v20);
LABEL_16:
  a2[v20] = 0;
  v28 = *v6;
  *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24)) = v6[3];
  v29[0] = v10 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v36);
}

void sub_19FCB90AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FCB90D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL altitude::Anchor::update(altitude::Anchor *this)
{
  unsigned int v2;
  double v3;
  long double v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v15;
  double v16;
  char *v17;
  int v18;
  uint64_t v19;
  double v20;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  __double2 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  char v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  __double2 v40;
  double v41;
  double v42;
  __double2 v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v54;
  __int128 v55;
  _BYTE v56[4];
  int v57;
  int v58;
  double v59;
  _QWORD v60[4];
  __int128 v61;
  void (**v62)(karo::AsyncRequestManager::RequestHandle *__hidden);
  __int128 v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)this + 65);
  v3 = *((double *)this + 2);
  v4 = tan(*((double *)this + 1) * 0.5 + 0.785398163);
  v5.n128_f64[0] = log(v4);
  BYTE1(v61) = 0;
  *(_QWORD *)((char *)&v61 + 4) = 0;
  BYTE1(v63) = 0;
  *(_QWORD *)((char *)&v63 + 4) = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v6 = *((_QWORD *)this + 11);
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(_QWORD **)(v7 + 40);
  if (v8 != *(_QWORD **)(v7 + 48))
  {
    v5.n128_f64[0] = v5.n128_f64[0] * 0.159154943 + 0.5;
    do
    {
      v9 = (_DWORD *)*v8;
      if (*v8)
      {
        v10 = v9[98];
        if (v10 >= 0x1F)
          v11 = 31;
        else
          v11 = v10;
        if (*((_BYTE *)this + 65))
          v12 = *((unsigned __int8 *)this + 65) >= v10;
        else
          v12 = 0;
        if (!v12)
        {
          v13 = v9[99];
          v14 = v9[100];
          if (*((unsigned __int8 *)&v61 + 24 * v10 + 1) == v10)
          {
            v15 = *((_DWORD *)&v61 + 6 * v10 + 1);
          }
          else
          {
            v16 = (double)(1 << v10);
            v17 = (char *)&v61 + 24 * v10;
            *v17 = -1;
            v15 = (1 << v10) + ~vcvtmd_s64_f64(v5.n128_f64[0] * v16);
            v17[1] = v10;
            *((_DWORD *)v17 + 1) = v15;
            *((_DWORD *)v17 + 2) = vcvtmd_s64_f64((v3 * 0.159154943 + 0.5) * v16);
          }
          v18 = ~(-1 << v11) - v13;
          if (v15 == v18 && *((_DWORD *)&v61 + 6 * v10 + 2) == v14)
          {
            *((_BYTE *)this + 64) = -1;
            *((_BYTE *)this + 65) = v10;
            *((_DWORD *)this + 17) = v18;
            *((_DWORD *)this + 18) = v14;
          }
        }
        v7 = *(_QWORD *)(v6 + 48);
      }
      ++v8;
    }
    while (v8 != *(_QWORD **)(v7 + 48));
  }
  v19 = *((unsigned __int8 *)this + 65);
  if (v19 <= v2 && !*((_BYTE *)this + 96))
    return 0;
  *((_BYTE *)this + 96) = 1;
  if (v19 > 7)
  {
    v60[0] = 0;
    v60[1] = 0;
    v26 = *((unsigned int *)this + 18);
    v60[2] = v19 | ((unint64_t)(~(-1 << v19) - *((_DWORD *)this + 17)) << 32);
    v60[3] = v26;
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *, _QWORD, uint64_t, __n128))(**(_QWORD **)(v6 + 56)
                                                                                              + 104))(&v61, *(_QWORD *)(v6 + 56), v60, 0, 1, v5);
    if ((_QWORD)v61)
    {
      v59 = 0.0;
      v27 = *(_QWORD *)(v61 + 136);
      v28 = *(_QWORD *)(v61 + 144);
      if (v27 >= 0x1F)
        v29 = 31;
      else
        v29 = *(_QWORD *)(v61 + 136);
      v56[0] = -1;
      v56[1] = v27;
      v57 = ~(-1 << v29) - HIDWORD(v27);
      v58 = v28;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      v55 = v61;
      if (*((_QWORD *)&v61 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        v54 = *(_OWORD *)((char *)this + 8);
        v33 = altitude::IntersectorHeight::sampleHeightMap((uint64_t *)&v55, (uint64_t)v56, (double *)&v54, &v59);
        v34 = v33;
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (v36)
        {
          if (!v33)
            goto LABEL_40;
LABEL_38:
          v37 = v59;
          v38 = *((double *)this + 2);
          v39 = *((double *)this + 3) + v59;
          v40 = __sincos_stret(*((double *)this + 1));
          v41 = 6378137.0 / sqrt(v40.__sinval * v40.__sinval * -0.00669437999 + 1.0);
          v42 = (v41 + v39) * v40.__cosval;
          v43 = __sincos_stret(v38);
          v44 = 0;
          *((double *)this + 4) = v42 * v43.__cosval;
          *((double *)this + 5) = v42 * v43.__sinval;
          *((double *)this + 6) = (v39 + v41 * 0.99330562) * v40.__sinval;
          *((double *)this + 7) = v37;
          *((_BYTE *)this + 96) = 0;
          goto LABEL_42;
        }
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        if ((v34 & 1) != 0)
          goto LABEL_38;
      }
      else
      {
        v54 = *(_OWORD *)((char *)this + 8);
        if ((altitude::IntersectorHeight::sampleHeightMap((uint64_t *)&v55, (uint64_t)v56, (double *)&v54, &v59) & 1) != 0)
          goto LABEL_38;
      }
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v62))
    {
LABEL_41:
      v44 = 1;
LABEL_42:
      v62 = &off_1E42C2D08;
      if ((_QWORD)v63)
      {
        v45 = (unsigned int *)(v63 + 128);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (!*((_QWORD *)&v63 + 1))
        goto LABEL_49;
      v48 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        if (!*((_QWORD *)&v61 + 1))
          return !v44;
      }
      else
      {
LABEL_49:
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        if (!*((_QWORD *)&v61 + 1))
          return !v44;
      }
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        return !v44;
      }
      return !v44;
    }
LABEL_40:
    *((_BYTE *)this + 96) = 0;
    goto LABEL_41;
  }
  *((_BYTE *)this + 96) = 0;
  v20 = *((double *)this + 2);
  v21 = *((double *)this + 3);
  v22 = __sincos_stret(*((double *)this + 1));
  v23 = 6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
  v24 = (v23 + v21) * v22.__cosval;
  v25 = __sincos_stret(v20);
  *((double *)this + 4) = v24 * v25.__cosval;
  *((double *)this + 5) = v24 * v25.__sinval;
  *((double *)this + 6) = (v21 + v23 * 0.99330562) * v22.__sinval;
  return 1;
}

void altitude::Anchor::destroy(altitude::Anchor *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v2 = (_QWORD *)*((_QWORD *)this + 11);
  v3 = v2[5];
  v4 = (uint64_t *)v2[3];
  if (v4)
  {
    v5 = v2 + 3;
    v6 = (_QWORD *)v2[3];
    do
    {
      v7 = v6[4];
      v8 = v7 >= (unint64_t)this;
      if (v7 >= (unint64_t)this)
        v9 = v6;
      else
        v9 = v6 + 1;
      if (v8)
        v5 = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v5 != v2 + 3 && v5[4] <= (unint64_t)this)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)v2[2] == v5)
        v2[2] = v11;
      --v2[4];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v4, v5);
      operator delete(v5);
    }
  }
  *(_QWORD *)this = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = this;
}

void md::PolarFlyoverTileData::~PolarFlyoverTileData(md::PolarFlyoverTileData *this)
{
  md::PolarFlyoverTileData::~PolarFlyoverTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E426F188;
  *((_QWORD *)this + 79) = &unk_1E426F1D0;
  md::RegistryManager::removeRegistry(*((md::RegistryManager **)this + 95), this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 92);
  if (v5)
  {
    v6 = *((_QWORD *)this + 93);
    v7 = (void *)*((_QWORD *)this + 92);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 92);
    }
    *((_QWORD *)this + 93) = v5;
    operator delete(v7);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  md::MapTileData::~MapTileData(this);
}

uint64_t md::PolarFlyoverTileData::featureRegistryPtr(md::PolarFlyoverTileData *this)
{
  return *((_QWORD *)this + 97);
}

uint64_t `non-virtual thunk to'md::PolarFlyoverTileData::featureRegistryPtr(md::PolarFlyoverTileData *this)
{
  return *((_QWORD *)this + 18);
}

void sub_19FCB98B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 736));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 720);
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingStorefrontLabelFeature::~ARWalkingStorefrontLabelFeature(md::ARWalkingStorefrontLabelFeature *this)
{
  md::ARWalkingStorefrontLabelFeature::~ARWalkingStorefrontLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42A85F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 92));
  *((_QWORD *)this + 87) = &off_1E42B5170;

  *(_QWORD *)this = &off_1E429DB28;
  v5 = *((_QWORD *)this + 84);
  if (v5)
  {
    v6 = *((_QWORD *)this + 85);
    v7 = (void *)*((_QWORD *)this + 84);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 84);
    }
    *((_QWORD *)this + 85) = v5;
    operator delete(v7);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

uint64_t md::ARWalkingStorefrontLabelFeature::newRootPart(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = md::PointLabelFeature::newRootPart(a1, a2, a3, a4, a5);
  v6 = v5;
  if (v5)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, 1, 1);
  return v6;
}

BOOL md::ARWalkingStorefrontLabelFeature::updateDynamicStyling(md::ARWalkingStorefrontLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t **v4;
  char *v5;
  unsigned int v6;
  uint64_t **v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  _BOOL8 v12;
  char v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = (uint64_t **)((char *)this + 736);
  v5 = (char *)*((_QWORD *)this + 92);
  if (v5)
  {
    v6 = *((_DWORD *)a3 + 12);
    v7 = (uint64_t **)((char *)this + 736);
    v8 = (char *)*((_QWORD *)this + 92);
    do
    {
      v9 = *((_DWORD *)v8 + 7);
      v10 = v9 >= v6;
      if (v9 >= v6)
        v11 = (char **)v8;
      else
        v11 = (char **)(v8 + 8);
      if (v10)
        v7 = (uint64_t **)v8;
      v8 = *v11;
    }
    while (*v11);
    v12 = v7 != v4 && v6 >= *((_DWORD *)v7 + 7) && *((unsigned __int8 *)v7 + 32) != *((unsigned __int8 *)this + 720);
    v13 = *((_BYTE *)this + 720);
    do
    {
      while (1)
      {
        v14 = v5;
        v15 = *((_DWORD *)v5 + 7);
        if (v6 < v15)
          break;
        if (v15 >= v6)
          goto LABEL_25;
        v5 = (char *)*((_QWORD *)v14 + 1);
        if (!v5)
        {
          v4 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
      v5 = *(char **)v14;
    }
    while (*(_QWORD *)v14);
    v4 = (uint64_t **)v14;
  }
  else
  {
    v12 = 0;
    v13 = *((_BYTE *)this + 720);
    v6 = *((_DWORD *)a3 + 12);
    v14 = (char *)this + 736;
  }
LABEL_22:
  v16 = v14;
  v14 = (char *)operator new(0x28uLL);
  *((_DWORD *)v14 + 7) = v6;
  v14[32] = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = v16;
  *v4 = (uint64_t *)v14;
  v17 = **((_QWORD **)this + 91);
  v18 = (uint64_t *)v14;
  if (v17)
  {
    *((_QWORD *)this + 91) = v17;
    v18 = *v4;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 92), v18);
  ++*((_QWORD *)this + 93);
LABEL_25:
  v14[32] = v13;
  return v12;
}

id md::ARWalkingStorefrontLabelFeature::arWalkingFeature(id *this)
{
  return this[88];
}

uint64_t md::ARWalkingStorefrontLabelFeature::labelFeatureType(md::ARWalkingStorefrontLabelFeature *this)
{
  return 27;
}

uint64_t md::ARWalkingStorefrontLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 760);
  *a2 = *(_QWORD *)(this + 752);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

float md::ARWalkingStorefrontLabelFeature::elevationOffset()
{
  return 0.0;
}

void md::ARWalkingStorefrontLabelFeature::populateDebugNode(id *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  char *v5;
  void *v6;
  const std::string::value_type *v7;
  char *v8;
  char *ChildNode;
  id *v10;
  id **v11;
  unsigned int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  id *v16;
  id **v17;
  BOOL v18;
  void *v19;
  _QWORD v20[7];
  int v21;
  char v22[32];
  std::string __p;
  int v24;
  std::string v25;

  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  v5 = (char *)operator new(0x20uLL);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_19FFB3D50;
  strcpy(v5, "ARWalkingStorefrontLabelFeature");
  gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)&v25);
  operator delete(v5);
  objc_msgSend(this[88], "description");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v6;
  if (v6)
  {
    *((_BYTE *)&v25.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v25, "VKARWalkingFeature");
    v7 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
    memset(&__p, 0, sizeof(__p));
    v24 = 4;
    if (v7)
    {
      std::string::__assign_external(&__p, v7);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)&v25, (uint64_t)v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v8 = (char *)operator new(0x20uLL);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
  strcpy(v8, "FallbackOcclusionStyling");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)&v25);
  operator delete(v8);
  v10 = (id *)this[91];
  v11 = (id **)(this + 92);
  if (v10 != this + 92)
  {
    do
    {
      v12 = *((_DWORD *)v10 + 7);
      if (v12)
      {
        std::to_string(&v25, v12);
      }
      else
      {
        *((_BYTE *)&v25.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v25, "UNKNOWN");
      }
      v13 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v14 = (char *)operator new(0x20uLL);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
      strcpy(v14, "FallbackOcclusionStyling");
      v15 = *((unsigned __int8 *)v10 + 32);
      memset(&v20[4], 0, 24);
      v21 = 0;
      v20[0] = v15;
      gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&v25, (uint64_t)v20);
      operator delete(v14);
      v16 = (id *)v10[1];
      if (v16)
      {
        do
        {
          v17 = (id **)v16;
          v16 = (id *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (id **)v10[2];
          v18 = *v17 == v10;
          v10 = (id *)v17;
        }
        while (!v18);
      }
      v10 = (id *)v17;
    }
    while (v17 != v11);
  }

}

void sub_19FCB9D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingStorefrontLabelFeature::style(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 736);
  if (!v2)
    goto LABEL_12;
  v3 = a1 + 736;
  do
  {
    v4 = *(_DWORD *)(v2 + 28);
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != a1 + 736 && *(_DWORD *)(v3 + 28) <= a2)
    v7 = *(unsigned __int8 *)(v3 + 32);
  else
LABEL_12:
    v7 = 0;
  return *(_QWORD *)(a1 + 96) + 16 * v7;
}

void md::ARWalkingStorefrontLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const FeatureStyleAttributes *v48;
  char *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  unsigned __int8 v56;
  int *v57;
  int v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  __int128 v82;
  const FeatureStyleAttributes *v83;
  std::__shared_weak_count *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v85 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v85 = (_QWORD *)v6;
  }
  v9 = *(_QWORD **)a2;
  v10 = *(_QWORD **)(a2 + 8);
  v11 = (uint64_t)v10 - *(_QWORD *)a2;
  if ((unint64_t)v11 > 0x1F)
  {
    if (v11 != 32)
    {
      v20 = v9 + 4;
      while (v10 != v20)
      {
        v21 = (std::__shared_weak_count *)*(v10 - 1);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v10 -= 2;
      }
      *(_QWORD *)(a2 + 8) = v20;
    }
  }
  else
  {
    v12 = (unint64_t)v11 >> 4;
    v13 = 2 - ((unint64_t)v11 >> 4);
    v14 = *(_QWORD *)(a2 + 16);
    if (v13 <= (v14 - (uint64_t)v10) >> 4)
    {
      v24 = &v10[2 * v13];
      v25 = 32 - 16 * v12;
      do
      {
        if (v10)
        {
          *v10 = 0;
          v10[1] = 0;
        }
        v10 += 2;
        v25 -= 16;
      }
      while (v25);
      *(_QWORD *)(a2 + 8) = v24;
    }
    else
    {
      v15 = v11 >> 4;
      v16 = (v11 >> 4) + v13;
      if (v16 >> 60)
        abort();
      v17 = v14 - (_QWORD)v9;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
        v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 16 * v18, 8);
      else
        v19 = 0;
      v26 = (_QWORD *)(v19 + 16 * v15);
      v27 = &v26[2 * v13];
      v28 = 32 - 16 * v12;
      v29 = v26;
      do
      {
        if (v29)
        {
          *v29 = 0;
          v29[1] = 0;
        }
        v29 += 2;
        v28 -= 16;
      }
      while (v28);
      v30 = v19 + 16 * v18;
      v31 = *(_QWORD **)a2;
      v32 = *(_QWORD **)(a2 + 8);
      if (v32 == *(_QWORD **)a2)
      {
        *(_QWORD *)a2 = v26;
        *(_QWORD *)(a2 + 8) = v27;
        v35 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v30;
      }
      else
      {
        do
        {
          v33 = *((_OWORD *)v32 - 1);
          v32 -= 2;
          *((_OWORD *)v26 - 1) = v33;
          v26 -= 2;
          *v32 = 0;
          v32[1] = 0;
        }
        while (v32 != v31);
        v32 = *(_QWORD **)a2;
        v34 = *(_QWORD **)(a2 + 8);
        *(_QWORD *)a2 = v26;
        *(_QWORD *)(a2 + 8) = v27;
        v35 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v30;
        while (v34 != v32)
        {
          v36 = (std::__shared_weak_count *)*(v34 - 1);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v34 -= 2;
        }
      }
      if (v32)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v32, v35 - (_QWORD)v32);
    }
  }
  (*(void (**)(const FeatureStyleAttributes **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(&v83, a1, 0);
  v39 = v85;
  md::createFeatureAttributeSet((gss::Allocator *)&v86, (uint64_t *)&v83);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v82, a3, &v86, v39);
  if (v86)
  {
    v87 = v86;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v86, v88 - v86);
  }
  v40 = *(_QWORD **)a2;
  v41 = v82;
  v82 = 0uLL;
  v42 = (std::__shared_weak_count *)v40[1];
  *(_OWORD *)v40 = v41;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v83;
  v49 = (char *)operator new(0x40uLL);
  *((_QWORD *)v49 + 1) = 0;
  v50 = (unint64_t *)(v49 + 8);
  *((_QWORD *)v49 + 2) = 0;
  *(_QWORD *)v49 = &off_1E42DAB40;
  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v49 + 24), v48);
  *(_QWORD *)&v82 = v49 + 24;
  *((_QWORD *)&v82 + 1) = v49;
  v51 = v49[57];
  v52 = *((_QWORD *)v49 + 3);
  if (v49[57])
  {
    if (v51 >= 0x20)
    {
      v53 = 0;
      v57 = (int *)*((_QWORD *)v49 + 3);
      while (1)
      {
        v58 = *v57;
        v57 += 2;
        if (v58 == 65594)
          break;
        if (v51 == ++v53)
          goto LABEL_73;
      }
    }
    else
    {
      v53 = 0;
      v54 = (int *)*((_QWORD *)v49 + 3);
      while (1)
      {
        v55 = *v54;
        v54 += 2;
        if (v55 == 65594)
          break;
        if (v51 == ++v53)
          goto LABEL_67;
      }
    }
    *(_DWORD *)(v52 + 8 * v53 + 4) = 1;
  }
  else
  {
LABEL_67:
    *(_QWORD *)(v52 + 8 * v51) = 0x10001003ALL;
    v56 = v49[57] + 1;
    v49[57] = v56;
    qsort(*((void **)v49 + 3), v56, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  }
LABEL_73:
  v79 = v49 + 24;
  v80 = (std::__shared_weak_count *)v49;
  do
    v59 = __ldxr(v50);
  while (__stxr(v59 + 1, v50));
  v60 = v85;
  md::createFeatureAttributeSet((gss::Allocator *)&v86, (uint64_t *)&v79);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v81, a3, &v86, v60);
  if (v86)
  {
    v87 = v86;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v86, v88 - v86);
  }
  v61 = *(_QWORD **)a2;
  v62 = v81;
  v81 = 0uLL;
  v63 = (std::__shared_weak_count *)v61[3];
  *((_OWORD *)v61 + 1) = v62;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v80;
  if (v80)
  {
    v70 = (unint64_t *)&v80->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v84;
  if (v84)
  {
    v76 = (unint64_t *)&v84->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v85;
  if (v85)
  {
    if (*((char *)v85 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v85[3] + 40))(v85[3], *v85, v85[2] & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v78, 0x1032C402ED93987);
  }
}

void sub_19FCBA430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKARWalkingArrivalStoreFront * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5250;

  return a1;
}

void geo::_retain_ptr<VKARWalkingArrivalStoreFront * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5250;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelExternalPointFeature::addLocation(_QWORD *a1, double *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  __double2 v21;
  long double v22;
  long double v23;
  float64x2_t v24;
  double v30;
  float v31;
  float64_t v32;

  v4 = a1[24];
  if (!*(_BYTE *)(v4 + 45) || !*(_BYTE *)(v4 + 46) || *(float *)(v4 + 40) != 3.4028e38 || *(_OWORD *)(v4 + 24) != 0)
  {
    v6 = a1[25];
    v5 = a1[26];
    if (v6 >= v5)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v4) >> 4) + 1;
      if (v8 > 0x555555555555555)
        abort();
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v4) >> 4);
      if (2 * v9 > v8)
        v8 = 2 * v9;
      if (v9 >= 0x2AAAAAAAAAAAAAALL)
        v10 = 0x555555555555555;
      else
        v10 = v8;
      if (v10 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = 48 * v10;
      v12 = (char *)operator new(48 * v10);
      v13 = &v12[16 * ((uint64_t)(v6 - v4) >> 4)];
      v14 = &v12[v11];
      *((_OWORD *)v13 + 1) = 0u;
      *((_OWORD *)v13 + 2) = 0u;
      *(_OWORD *)v13 = 0u;
      *((_DWORD *)v13 + 10) = 2139095039;
      v7 = v13 + 48;
      if (v6 == v4)
      {
        a1[24] = v13;
        a1[25] = v7;
        a1[26] = v14;
      }
      else
      {
        do
        {
          v15 = *(_OWORD *)(v6 - 48);
          *((_QWORD *)v13 - 4) = *(_QWORD *)(v6 - 32);
          *((_OWORD *)v13 - 3) = v15;
          *(_OWORD *)(v13 - 24) = *(_OWORD *)(v6 - 24);
          v16 = *(_DWORD *)(v6 - 8);
          *(_DWORD *)(v13 - 5) = *(_DWORD *)(v6 - 5);
          *((_DWORD *)v13 - 2) = v16;
          v13 -= 48;
          v6 -= 48;
        }
        while (v6 != v4);
        a1[24] = v13;
        a1[25] = v7;
        a1[26] = v14;
        if (!v4)
          goto LABEL_20;
      }
      operator delete((void *)v4);
    }
    else
    {
      *(_OWORD *)(v6 + 16) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)v6 = 0u;
      *(_DWORD *)(v6 + 40) = 2139095039;
      v7 = (char *)(v6 + 48);
    }
LABEL_20:
    a1[25] = v7;
    goto LABEL_21;
  }
  v7 = (char *)a1[25];
LABEL_21:
  v17 = *a2;
  if (fabs(*a2) <= 85.0511169)
  {
    v32 = a2[1];
    v22 = tan(v17 * 0.00872664626 + 0.785398163);
    v23 = log(v22);
    v24.f64[0] = v32;
    v24.f64[1] = v23;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)(v7 - 24) = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v24);
    *(_WORD *)(v7 - 3) = 257;
  }
  else
  {
    v18 = a2[1] * 0.0174532925;
    v19 = __sincos_stret(v17 * 0.0174532925);
    v20 = 6378137.0 / sqrt(v19.__sinval * v19.__sinval * -0.00669437999 + 1.0);
    v21 = __sincos_stret(v18);
    *((double *)v7 - 6) = v20 * v19.__cosval * v21.__cosval;
    *((double *)v7 - 5) = v20 * v19.__cosval * v21.__sinval;
    *((double *)v7 - 4) = v19.__sinval * 0.99330562 * v20;
    *(v7 - 4) = 1;
  }
  v30 = a2[2];
  if (v30 != 1.79769313e308)
  {
    v31 = v30;
    *((float *)v7 - 2) = v31;
  }
}

void std::__shared_ptr_emplace<md::ARWalkingStorefront>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARWalkingStorefront>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ARWalkingStorefront>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 168) = &off_1E42B5250;

}

void std::__shared_ptr_pointer<ARStorefrontLabelFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARStorefrontLabelFeatureDedupingGroup>,std::allocator<ARStorefrontLabelFeatureDedupingGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ARStorefrontLabelFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARStorefrontLabelFeatureDedupingGroup>,std::allocator<ARStorefrontLabelFeatureDedupingGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ARStorefrontLabelFeatureDedupingGroup::~ARStorefrontLabelFeatureDedupingGroup(ARStorefrontLabelFeatureDedupingGroup *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E428B900;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E4294980;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v5, *((_QWORD *)this + 7) - v5);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v6, *((_QWORD *)this + 3) - v6);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E428B900;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E4294980;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v5, *((_QWORD *)this + 7) - v5);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v6, *((_QWORD *)this + 3) - v6);
  }
  JUMPOUT(0x1A1AF4E00);
}

double *ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(int8x8_t *this, md::LabelManager *a2)
{
  int8x16_t *v4;
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  double *result;
  int8x8_t *v14;
  int8x8_t *v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  int8x8_t v22;
  int8x8_t v23;
  uint64_t v24;
  double *v25;
  int8x8_t v26;
  uint64_t v27;
  int8x8_t *v28[2];

  this[6] = this[5];
  this[9] = 0;
  v5 = (int8x16_t *)this[1];
  v4 = (int8x16_t *)this[2];
  if (v5 != v4)
  {
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5->i64[0] + 16))(v5->i64[0]) & 1) != 0)
    {
      v5 = (int8x16_t *)((char *)v5 + 8);
LABEL_4:
      if (v5 == v4)
        goto LABEL_11;
    }
    v6 = (int8x16_t *)((char *)v4 - 8);
    while (v6 != v5)
    {
      v4 = v6;
      v7 = v6->i64[0];
      v6 = (int8x16_t *)((char *)v6 - 8);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
      {
        v8 = v5->i64[0];
        v5->i64[0] = v4->i64[0];
        v5 = (int8x16_t *)((char *)v5 + 8);
        v4->i64[0] = v8;
        goto LABEL_4;
      }
    }
  }
  v4 = v5;
LABEL_11:
  v9 = (double *)this[1];
  v10 = 126 - 2 * __clz(((char *)v4 - (char *)v9) >> 3);
  v11 = (int8x8_t *)(*((_QWORD *)a2 + 54) + 136);
  v28[0] = this;
  v28[1] = v11;
  if (v4 == (int8x16_t *)v9)
    v12 = 0;
  else
    v12 = v10;
  result = std::__introsort<std::_ClassicAlgPolicy,ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**,false>(v9, v4, v28, v12, 1);
  v14 = (int8x8_t *)this[1];
  v15 = (int8x8_t *)this[2];
  if (v14 != v15)
  {
    v16 = (char *)v15 - (char *)v14 - 8;
    if (v16 > 7)
    {
      v19 = 0;
      v20 = (v16 >> 3) + 1;
      v17 = v20 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v21 = &v14[v19];
        v23 = *v21;
        v22 = v21[1];
        *(_DWORD *)(*(_QWORD *)&v23 + 32) = v19;
        *(_DWORD *)(*(_QWORD *)&v22 + 32) = v19 + 1;
        v19 += 2;
      }
      while (v17 != v19);
      if (v20 == v17)
        goto LABEL_22;
      v18 = &v14[v20 & 0x3FFFFFFFFFFFFFFELL];
    }
    else
    {
      LODWORD(v17) = 0;
      v18 = (int8x8_t *)this[1];
    }
    do
    {
      v24 = (uint64_t)*v18++;
      *(_DWORD *)(v24 + 32) = v17;
      LODWORD(v17) = v17 + 1;
    }
    while (v18 != v15);
LABEL_22:
    this[9] = *v14;
  }
  if (this[13])
  {
    result = (double *)this[12];
    if (result)
    {
      do
      {
        v25 = *(double **)result;
        operator delete(result);
        result = v25;
      }
      while (v25);
    }
    this[12] = 0;
    v26 = this[11];
    if (v26)
    {
      v27 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&this[10] + 8 * v27++) = 0;
      while (*(_QWORD *)&v26 != v27);
    }
    this[13] = 0;
  }
  return result;
}

BOOL ARStorefrontLabelFeatureDedupingGroup::isResolved(ARStorefrontLabelFeatureDedupingGroup *this)
{
  return *((_QWORD *)this + 5) != *((_QWORD *)this + 6);
}

double *std::__introsort<std::_ClassicAlgPolicy,ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**,false>(double *result, int8x16_t *a2, int8x8_t **a3, uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  double *v19;
  double v20;
  int8x8_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  double *v24;
  double v25;
  int8x8_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  int8x16_t *v30;
  int8x8_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  float *v37;
  double *v38;
  double v39;
  int8x8_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  double *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  unint64_t v46;
  unint64_t v47;
  float *v48;
  double *v49;
  double v50;
  int8x8_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  double *v54;
  int8x8_t *v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int8x8_t *v67;
  float *v68;
  int8x8_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  double **v75;
  double *v76;
  unint64_t v77;
  uint64_t v78;
  int8x8_t *v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82;
  uint8x8_t v83;
  unint64_t v84;
  double **v85;
  double *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int8x8_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  unint64_t v94;
  unint64_t v95;
  int8x8_t *v96;
  float *v97;
  int8x8_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  unint64_t v103;
  double **v104;
  double *v105;
  unint64_t v106;
  uint64_t v107;
  int8x8_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  uint8x8_t v112;
  unint64_t v113;
  double **v114;
  double *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int8x8_t *v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  int8x8_t *v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  unint64_t v127;
  unint64_t v128;
  float *v129;
  double *v130;
  double v131;
  int8x8_t *v132;
  float64x2_t v133;
  float64x2_t v134;
  double *v135;
  BOOL v136;
  unint64_t v137;
  float *v138;
  double *v139;
  double v140;
  int8x8_t *v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  int8x8_t *v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t *v148;
  int8x8_t *v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  unint64_t v153;
  unint64_t v154;
  float *v155;
  double *v156;
  double v157;
  int8x8_t *v158;
  float64x2_t v159;
  float64x2_t v160;
  unint64_t *v161;
  int8x8_t *v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  unint64_t v166;
  float *v167;
  double *v168;
  double v169;
  int8x8_t *v170;
  float64x2_t v171;
  float64x2_t v172;
  int8x16_t *v173;
  int8x8_t *v174;
  float64x2_t v175;
  float64x2_t v176;
  double v177;
  unint64_t v178;
  unint64_t v179;
  float *v180;
  double *v181;
  double v182;
  int8x8_t *v183;
  float64x2_t v184;
  float64x2_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int8x8_t *v192;
  float *v193;
  int8x8_t v194;
  uint8x8_t v195;
  unint64_t v196;
  double **v197;
  double *v198;
  unint64_t v199;
  uint64_t v200;
  int8x8_t *v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint8x8_t v208;
  unint64_t v209;
  double **v210;
  double *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int8x8_t *v215;
  float64x2_t v216;
  float64x2_t v217;
  double v218;
  unint64_t v219;
  unint64_t v220;
  int8x8_t *v221;
  float *v222;
  int8x8_t v223;
  uint8x8_t v224;
  unint64_t v225;
  double **v226;
  double *v227;
  unint64_t v228;
  uint64_t v229;
  int8x8_t *v230;
  float64x2_t v231;
  float64x2_t v232;
  double v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint8x8_t v237;
  unint64_t v238;
  double **v239;
  double *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  int8x8_t *v244;
  float64x2_t v245;
  float64x2_t v246;
  double v247;
  uint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  float *v251;
  double *v252;
  double v253;
  int8x16_t *v254;
  unint64_t v255;
  unint64_t v256;
  float *v257;
  double *v258;
  double v259;
  int8x16_t *v260;
  BOOL v262;
  unint64_t *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  float *v267;
  double *v268;
  double v269;
  int8x8_t *v270;
  float64x2_t v271;
  float64x2_t v272;
  int8x16_t *v273;
  double v274;
  int8x8_t *v275;
  float64x2_t v276;
  float64x2_t v277;
  int8x16_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  float64x2_t *v283;
  unint64_t v284;
  unint64_t v285;
  int8x8_t *v286;
  float *v287;
  int8x8_t v288;
  uint8x8_t v289;
  unint64_t v290;
  double **v291;
  double *v292;
  unint64_t v293;
  uint64_t v294;
  int8x8_t *v295;
  float64x2_t v296;
  float64x2_t v297;
  double v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint8x8_t v302;
  unint64_t v303;
  double **v304;
  double *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  int8x8_t *v309;
  float64x2_t v310;
  float64x2_t v311;
  double v312;
  int64_t v313;
  int64_t v314;
  uint64_t v315;
  unint64_t *v316;
  int8x8_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t *v320;
  unint64_t v321;
  float *v322;
  double *v323;
  double v324;
  int8x8_t *v325;
  float64x2_t v326;
  float64x2_t v327;
  double *v328;
  double v329;
  int8x8_t *v330;
  float64x2_t v331;
  float64x2_t v332;
  unint64_t *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  float *v337;
  double *v338;
  double v339;
  unint64_t v340;
  int8x8_t *v341;
  float64x2_t v342;
  float64x2_t v343;
  double v344;
  int8x8_t *v345;
  float64x2_t v346;
  float64x2_t v347;
  unint64_t v348;
  int8x8_t *v349;
  float64x2_t v350;
  float64x2_t v351;
  double v352;
  unint64_t *v353;
  uint64_t v354;
  unint64_t *v355;
  int8x8_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  float *v360;
  double *v361;
  double v362;
  int8x8_t *v363;
  float64x2_t v364;
  float64x2_t v365;
  double *v366;
  double v367;
  int8x8_t *v368;
  float64x2_t v369;
  float64x2_t v370;
  unint64_t v371;
  float *v372;
  double *v373;
  double v374;
  unint64_t v375;
  int8x8_t *v376;
  float64x2_t v377;
  float64x2_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v382;
  int64_t v383;
  unint64_t *v384;
  int8x8_t *v385;
  float64x2_t v386;
  float64x2_t v387;
  double v388;
  unint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  int8x8_t *v394;
  float *v395;
  int8x8_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint8x8_t v400;
  unint64_t v401;
  double **v402;
  double *v403;
  unint64_t v404;
  uint64_t v405;
  int8x8_t *v406;
  float64x2_t v407;
  float64x2_t v408;
  double v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint8x8_t v413;
  unint64_t v414;
  double **v415;
  double *v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t v424;
  float *v425;
  double *v426;
  double v427;
  int8x8_t *v428;
  float64x2_t v429;
  float64x2_t v430;
  double v431;
  int8x8_t *v432;
  float64x2_t v433;
  float64x2_t v434;
  unint64_t v435;
  float64x2_t *v436;
  int8x8_t *v437;
  float64x2_t v438;
  float64x2_t v439;
  double v440;
  unint64_t *v441;
  unint64_t v442;
  float *v443;
  double *v444;
  double v445;
  int8x8_t *v446;
  float64x2_t v447;
  float64x2_t v448;
  int8x16_t *v449;
  unint64_t *v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t *v453;
  float *v454;
  double *v455;
  double v456;
  int8x8_t *v457;
  float64x2_t v458;
  float64x2_t v459;
  int8x8_t *v460;
  float64x2_t v461;
  float64x2_t v462;
  double v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  float64x2_t *v468;
  unint64_t *v469;
  unint64_t v470;
  unint64_t v471;
  int8x8_t *v472;
  float *v473;
  int8x8_t v474;
  uint8x8_t v475;
  unint64_t v476;
  double **v477;
  double *v478;
  unint64_t v479;
  uint64_t v480;
  int8x8_t *v481;
  float64x2_t v482;
  float64x2_t v483;
  double v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  uint8x8_t v488;
  unint64_t v489;
  double **v490;
  double *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  int8x8_t *v495;
  float64x2_t v496;
  float64x2_t v497;
  double v498;
  int8x8_t *v499;
  float64x2_t v500;
  float64x2_t v501;
  int8x8_t *v502;
  float64x2_t v503;
  float64x2_t v504;
  double v505;
  unint64_t v506;
  int8x8_t *v507;
  float64x2_t v508;
  float64x2_t v509;
  int8x8_t *v510;
  float64x2_t v511;
  float64x2_t v512;
  double v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  float *v517;
  double *v518;
  double v519;
  int8x8_t *v520;
  float64x2_t v521;
  float64x2_t v522;
  double v523;
  int8x8_t *v524;
  float64x2_t v525;
  float64x2_t v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  float *v530;
  double *v531;
  double v532;
  int8x8_t *v533;
  float64x2_t v534;
  float64x2_t v535;
  double v536;
  int8x8_t *v537;
  float64x2_t v538;
  float64x2_t v539;
  unint64_t *v540;
  unint64_t *v541;
  uint64_t v542;
  int64_t v544;
  unint64_t *v545;
  float64x2_t *v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  int8x16_t *v550;
  unint64_t *v551;
  int64_t v552;
  int8x16_t *v553;
  unint64_t *v554;
  int64_t v555;
  uint64_t v556;
  int8x16_t *v557;
  uint64_t *v558;
  uint64_t *v559;
  int8x16_t *v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;

  v7 = (int8x16_t *)result;
LABEL_2:
  v545 = &a2[-1].u64[1];
  v557 = a2;
  v540 = &a2[-2].u64[1];
  v541 = (unint64_t *)&a2[-1];
  v8 = v7;
  while (2)
  {
    v9 = v8;
    v10 = (char *)v557 - (char *)v8;
    v11 = ((char *)v557 - (char *)v8) >> 3;
    v560 = v8;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v249 = *v545;
        v250 = v8->i64[0];
        v562 = v8->i64[0];
        v563 = v249;
        v251 = (float *)&(*a3)[10];
        v252 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v251, v249);
        if (v252)
        {
          v253 = v252[3];
        }
        else
        {
          v499 = a3[1];
          v500 = vsubq_f64(*(float64x2_t *)v499[1].i8, *(float64x2_t *)(v249 + 600));
          v501 = vmulq_f64(v500, v500);
          v253 = v501.f64[0]
               + (*(double *)v499 - *(double *)(v249 + 592)) * (*(double *)v499 - *(double *)(v249 + 592))
               + v501.f64[1];
          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v251, v249, &v563)+ 3) = v253;
        }
        result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v251, v250);
        if (result)
        {
          if (v253 >= result[3])
            return result;
        }
        else
        {
          v502 = a3[1];
          v503 = vsubq_f64(*(float64x2_t *)v502[1].i8, *(float64x2_t *)(v250 + 600));
          v504 = vmulq_f64(v503, v503);
          v505 = v504.f64[0]
               + (*(double *)v502 - *(double *)(v250 + 592)) * (*(double *)v502 - *(double *)(v250 + 592))
               + v504.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v251, v250, &v562);
          result[3] = v505;
          if (v253 >= v505)
            return result;
        }
        v506 = v8->i64[0];
        v8->i64[0] = *v545;
        *v545 = v506;
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, &v8->u64[1], v545, a3);
      case 4:
        v254 = v8 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], a3);
        v255 = *v545;
        v256 = v8[1].u64[0];
        v562 = v256;
        v563 = v255;
        v257 = (float *)&(*a3)[10];
        v258 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v257, v255);
        if (v258)
        {
          v259 = v258[3];
        }
        else
        {
          v507 = a3[1];
          v508 = vsubq_f64(*(float64x2_t *)v507[1].i8, *(float64x2_t *)(v255 + 600));
          v509 = vmulq_f64(v508, v508);
          v259 = v509.f64[0]
               + (*(double *)v507 - *(double *)(v255 + 592)) * (*(double *)v507 - *(double *)(v255 + 592))
               + v509.f64[1];
          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v257, v255, &v563)+ 3) = v259;
        }
        result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v257, v256);
        if (result)
        {
          if (v259 >= result[3])
            return result;
        }
        else
        {
          v510 = a3[1];
          v511 = vsubq_f64(*(float64x2_t *)v510[1].i8, *(float64x2_t *)(v256 + 600));
          v512 = vmulq_f64(v511, v511);
          v513 = v512.f64[0]
               + (*(double *)v510 - *(double *)(v256 + 592)) * (*(double *)v510 - *(double *)(v256 + 592))
               + v512.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v257, v256, &v562);
          result[3] = v513;
          if (v259 >= v513)
            return result;
        }
        v514 = v254->i64[0];
        v254->i64[0] = *v545;
        *v545 = v514;
        v515 = v254->i64[0];
        v516 = v8->u64[1];
        v562 = v516;
        v563 = v515;
        v517 = (float *)&(*a3)[10];
        v518 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v517, v515);
        if (v518)
        {
          v519 = v518[3];
        }
        else
        {
          v520 = a3[1];
          v521 = vsubq_f64(*(float64x2_t *)v520[1].i8, *(float64x2_t *)(v515 + 600));
          v522 = vmulq_f64(v521, v521);
          v519 = v522.f64[0]
               + (*(double *)v520 - *(double *)(v515 + 592)) * (*(double *)v520 - *(double *)(v515 + 592))
               + v522.f64[1];
          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v517, v515, &v563)+ 3) = v519;
        }
        result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v517, v516);
        if (result)
        {
          v523 = result[3];
        }
        else
        {
          v524 = a3[1];
          v525 = vsubq_f64(*(float64x2_t *)v524[1].i8, *(float64x2_t *)(v516 + 600));
          v526 = vmulq_f64(v525, v525);
          v523 = v526.f64[0]
               + (*(double *)v524 - *(double *)(v516 + 592)) * (*(double *)v524 - *(double *)(v516 + 592))
               + v526.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v517, v516, &v562);
          result[3] = v523;
        }
        if (v519 < v523)
        {
          v527 = v8->i64[1];
          v528 = v8[1].u64[0];
          v529 = v8->i64[0];
          v8->i64[1] = v528;
          v8[1].i64[0] = v527;
          v562 = v529;
          v563 = v528;
          v530 = (float *)&(*a3)[10];
          v531 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v530, v528);
          if (v531)
          {
            v532 = v531[3];
          }
          else
          {
            v533 = a3[1];
            v534 = vsubq_f64(*(float64x2_t *)v533[1].i8, *(float64x2_t *)(v528 + 600));
            v535 = vmulq_f64(v534, v534);
            v532 = v535.f64[0]
                 + (*(double *)v533 - *(double *)(v528 + 592)) * (*(double *)v533 - *(double *)(v528 + 592))
                 + v535.f64[1];
            *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v530, v528, &v563)+ 3) = v532;
          }
          result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v530, v529);
          if (result)
          {
            v536 = result[3];
          }
          else
          {
            v537 = a3[1];
            v538 = vsubq_f64(*(float64x2_t *)v537[1].i8, *(float64x2_t *)(v529 + 600));
            v539 = vmulq_f64(v538, v538);
            v536 = v539.f64[0]
                 + (*(double *)v537 - *(double *)(v529 + 592)) * (*(double *)v537 - *(double *)(v529 + 592))
                 + v539.f64[1];
            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v530, v529, &v562);
            result[3] = v536;
          }
          if (v532 < v536)
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], &v8[1].u64[1], v545, a3);
      default:
        if (v10 > 191)
        {
          if (!a4)
          {
            if (v8 != v557)
            {
              v542 = (char *)v557 - (char *)v8;
              v313 = (unint64_t)(v11 - 2) >> 1;
              v555 = v313;
              v548 = ((char *)v557 - (char *)v8) >> 3;
              do
              {
                v314 = v313;
                if (v555 >= v313)
                {
                  v315 = (2 * v313) | 1;
                  v316 = (unint64_t *)v9 + v315;
                  v317 = *a3;
                  if (2 * v314 + 2 < v11)
                  {
                    v318 = *v316;
                    v319 = (unint64_t *)v9 + v315;
                    v320 = v316 + 1;
                    v321 = v316[1];
                    v562 = v321;
                    v563 = v318;
                    v322 = (float *)&v317[10];
                    v323 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v317[10], v318);
                    if (v323)
                    {
                      v324 = v323[3];
                    }
                    else
                    {
                      v325 = a3[1];
                      v326 = vsubq_f64(*(float64x2_t *)v325[1].i8, *(float64x2_t *)(v318 + 600));
                      v327 = vmulq_f64(v326, v326);
                      v324 = v327.f64[0]
                           + (*(double *)v325 - *(double *)(v318 + 592)) * (*(double *)v325 - *(double *)(v318 + 592))
                           + v327.f64[1];
                      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v322, v318, &v563)+ 3) = v324;
                    }
                    v328 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v322, v321);
                    if (v328)
                    {
                      v329 = v328[3];
                    }
                    else
                    {
                      v330 = a3[1];
                      v331 = vsubq_f64(*(float64x2_t *)v330[1].i8, *(float64x2_t *)(v321 + 600));
                      v332 = vmulq_f64(v331, v331);
                      v329 = v332.f64[0]
                           + (*(double *)v330 - *(double *)(v321 + 592)) * (*(double *)v330 - *(double *)(v321 + 592))
                           + v332.f64[1];
                      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v322, v321, &v562)+ 3) = v329;
                    }
                    v9 = v560;
                    if (v324 >= v329)
                      v316 = v319;
                    else
                      v316 = v320;
                    if (v324 < v329)
                      v315 = 2 * v314 + 2;
                    v317 = *a3;
                  }
                  v333 = (unint64_t *)v9 + v314;
                  v334 = v316;
                  v335 = *v316;
                  v336 = *v333;
                  v562 = *v333;
                  v563 = v335;
                  v337 = (float *)&v317[10];
                  v338 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v317[10], v335);
                  if (v338)
                  {
                    v339 = v338[3];
                    v340 = v336;
                  }
                  else
                  {
                    v341 = a3[1];
                    v342 = vsubq_f64(*(float64x2_t *)v341[1].i8, *(float64x2_t *)(v335 + 600));
                    v343 = vmulq_f64(v342, v342);
                    v339 = v343.f64[0]
                         + (*(double *)v341 - *(double *)(v335 + 592)) * (*(double *)v341 - *(double *)(v335 + 592))
                         + v343.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v337, v335, &v563)+ 3) = v339;
                    v340 = v562;
                  }
                  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v337, v340);
                  if (result)
                  {
                    v344 = result[3];
                  }
                  else
                  {
                    v345 = a3[1];
                    v346 = vsubq_f64(*(float64x2_t *)v345[1].i8, *(float64x2_t *)(v336 + 600));
                    v347 = vmulq_f64(v346, v346);
                    v344 = v347.f64[0]
                         + (*(double *)v345 - *(double *)(v336 + 592)) * (*(double *)v345 - *(double *)(v336 + 592))
                         + v347.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v337, v340, &v562);
                    result[3] = v344;
                  }
                  v9 = v560;
                  v11 = v548;
                  if (v339 >= v344)
                  {
                    v348 = *v333;
                    v544 = v314;
                    v546 = (float64x2_t *)(*v333 + 600);
                    do
                    {
                      v353 = v334;
                      *v333 = *v334;
                      if (v555 < v315)
                        break;
                      v354 = (2 * v315) | 1;
                      v355 = (unint64_t *)v9 + v354;
                      v315 = 2 * v315 + 2;
                      v356 = *a3;
                      if (v315 >= v11)
                      {
                        v315 = v354;
                      }
                      else
                      {
                        v357 = *v355;
                        v551 = (unint64_t *)v9 + v354;
                        v358 = v355 + 1;
                        v359 = v355[1];
                        v562 = v359;
                        v563 = v357;
                        v360 = (float *)&v356[10];
                        v361 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v356[10], v357);
                        if (v361)
                        {
                          v362 = v361[3];
                        }
                        else
                        {
                          v363 = a3[1];
                          v364 = vsubq_f64(*(float64x2_t *)v363[1].i8, *(float64x2_t *)(v357 + 600));
                          v365 = vmulq_f64(v364, v364);
                          v362 = v365.f64[0]
                               + (*(double *)v363 - *(double *)(v357 + 592))
                               * (*(double *)v363 - *(double *)(v357 + 592))
                               + v365.f64[1];
                          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v360, v357, &v563)+ 3) = v362;
                        }
                        v366 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v360, v359);
                        if (v366)
                        {
                          v367 = v366[3];
                        }
                        else
                        {
                          v368 = a3[1];
                          v369 = vsubq_f64(*(float64x2_t *)v368[1].i8, *(float64x2_t *)(v359 + 600));
                          v370 = vmulq_f64(v369, v369);
                          v367 = v370.f64[0]
                               + (*(double *)v368 - *(double *)(v359 + 592))
                               * (*(double *)v368 - *(double *)(v359 + 592))
                               + v370.f64[1];
                          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v360, v359, &v562)+ 3) = v367;
                        }
                        v355 = v551;
                        if (v362 >= v367)
                          v315 = v354;
                        else
                          v355 = v358;
                        v356 = *a3;
                        v11 = v548;
                      }
                      v334 = v355;
                      v371 = *v355;
                      v562 = v348;
                      v563 = v371;
                      v372 = (float *)&v356[10];
                      v373 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v356[10], v371);
                      if (v373)
                      {
                        v374 = v373[3];
                        v375 = v348;
                      }
                      else
                      {
                        v376 = a3[1];
                        v377 = vsubq_f64(*(float64x2_t *)v376[1].i8, *(float64x2_t *)(v371 + 600));
                        v378 = vmulq_f64(v377, v377);
                        v374 = v378.f64[0]
                             + (*(double *)v376 - *(double *)(v371 + 592)) * (*(double *)v376 - *(double *)(v371 + 592))
                             + v378.f64[1];
                        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v372, v371, &v563)+ 3) = v374;
                        v375 = v562;
                      }
                      result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v372, v375);
                      if (result)
                      {
                        v352 = result[3];
                      }
                      else
                      {
                        v349 = a3[1];
                        v350 = vsubq_f64(*(float64x2_t *)v349[1].i8, *v546);
                        v351 = vmulq_f64(v350, v350);
                        v352 = v351.f64[0]
                             + (*(double *)v349 - *(double *)(v348 + 592)) * (*(double *)v349 - *(double *)(v348 + 592))
                             + v351.f64[1];
                        result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v372, v375, &v562);
                        result[3] = v352;
                      }
                      v9 = v560;
                      v333 = v353;
                    }
                    while (v374 >= v352);
                    *v353 = v348;
                    v314 = v544;
                  }
                }
                v313 = v314 - 1;
              }
              while (v314);
              v379 = (uint64_t *)v557;
              if (v542 >= 9)
              {
                v380 = (unint64_t)v542 >> 3;
                do
                {
                  v556 = v380;
                  v558 = v379;
                  v382 = 0;
                  v383 = (unint64_t)(v380 - 2) >> 1;
                  v384 = (unint64_t *)v9;
                  v549 = v9->i64[0];
                  v552 = v383;
                  do
                  {
                    v389 = &v384[v382 + 1];
                    v390 = (2 * v382) | 1;
                    v391 = 2 * v382 + 2;
                    if (v391 < v380)
                    {
                      v392 = v384[v382 + 2];
                      v393 = *v389;
                      v562 = v392;
                      v563 = v393;
                      v394 = *a3;
                      v395 = (float *)&(*a3)[10];
                      v396 = (*a3)[11];
                      if (v396)
                      {
                        v397 = 0x9DDFEA08EB382D69 * (((8 * v393) + 8) ^ HIDWORD(v393));
                        v398 = 0x9DDFEA08EB382D69 * (HIDWORD(v393) ^ (v397 >> 47) ^ v397);
                        v399 = 0x9DDFEA08EB382D69 * (v398 ^ (v398 >> 47));
                        v400 = (uint8x8_t)vcnt_s8(v396);
                        v400.i16[0] = vaddlv_u8(v400);
                        if (v400.u32[0] > 1uLL)
                        {
                          v401 = v399;
                          if (v399 >= *(_QWORD *)&v396)
                            v401 = v399 % *(_QWORD *)&v396;
                        }
                        else
                        {
                          v401 = v399 & (*(_QWORD *)&v396 - 1);
                        }
                        v402 = *(double ***)(*(_QWORD *)v395 + 8 * v401);
                        if (v402)
                        {
                          v403 = *v402;
                          if (v403)
                          {
                            if (v400.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v405 = *((_QWORD *)v403 + 1);
                                if (v405 == v399)
                                {
                                  if (*((_QWORD *)v403 + 2) == v393)
                                    goto LABEL_445;
                                }
                                else if ((v405 & (*(_QWORD *)&v396 - 1)) != v401)
                                {
                                  goto LABEL_424;
                                }
                                v403 = *(double **)v403;
                                if (!v403)
                                  goto LABEL_424;
                              }
                            }
                            do
                            {
                              v404 = *((_QWORD *)v403 + 1);
                              if (v404 == v399)
                              {
                                if (*((_QWORD *)v403 + 2) == v393)
                                {
LABEL_445:
                                  v409 = v403[3];
                                  goto LABEL_425;
                                }
                              }
                              else
                              {
                                if (v404 >= *(_QWORD *)&v396)
                                  v404 %= *(_QWORD *)&v396;
                                if (v404 != v401)
                                  break;
                              }
                              v403 = *(double **)v403;
                            }
                            while (v403);
                          }
                        }
                      }
LABEL_424:
                      v406 = a3[1];
                      v407 = vsubq_f64(*(float64x2_t *)v406[1].i8, *(float64x2_t *)(v393 + 600));
                      v408 = vmulq_f64(v407, v407);
                      v409 = v408.f64[0]
                           + (*(double *)v406 - *(double *)(v393 + 592)) * (*(double *)v406 - *(double *)(v393 + 592))
                           + v408.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v393, &v563);
                      result[3] = v409;
                      v396 = v394[11];
                      if (v396)
                      {
LABEL_425:
                        v410 = 0x9DDFEA08EB382D69 * (((8 * v392) + 8) ^ HIDWORD(v392));
                        v411 = 0x9DDFEA08EB382D69 * (HIDWORD(v392) ^ (v410 >> 47) ^ v410);
                        v412 = 0x9DDFEA08EB382D69 * (v411 ^ (v411 >> 47));
                        v413 = (uint8x8_t)vcnt_s8(v396);
                        v413.i16[0] = vaddlv_u8(v413);
                        if (v413.u32[0] > 1uLL)
                        {
                          v414 = v412;
                          if (v412 >= *(_QWORD *)&v396)
                            v414 = v412 % *(_QWORD *)&v396;
                        }
                        else
                        {
                          v414 = v412 & (*(_QWORD *)&v396 - 1);
                        }
                        v415 = *(double ***)(*(_QWORD *)v395 + 8 * v414);
                        if (v415)
                        {
                          v416 = *v415;
                          if (v416)
                          {
                            if (v413.u32[0] < 2uLL)
                            {
                              v417 = *(_QWORD *)&v396 - 1;
                              while (1)
                              {
                                v419 = *((_QWORD *)v416 + 1);
                                if (v419 == v412)
                                {
                                  if (*((_QWORD *)v416 + 2) == v392)
                                    goto LABEL_446;
                                }
                                else if ((v419 & v417) != v414)
                                {
                                  goto LABEL_399;
                                }
                                v416 = *(double **)v416;
                                if (!v416)
                                  goto LABEL_399;
                              }
                            }
                            do
                            {
                              v418 = *((_QWORD *)v416 + 1);
                              if (v418 == v412)
                              {
                                if (*((_QWORD *)v416 + 2) == v392)
                                {
LABEL_446:
                                  v388 = v416[3];
                                  goto LABEL_400;
                                }
                              }
                              else
                              {
                                if (v418 >= *(_QWORD *)&v396)
                                  v418 %= *(_QWORD *)&v396;
                                if (v418 != v414)
                                  break;
                              }
                              v416 = *(double **)v416;
                            }
                            while (v416);
                          }
                        }
                      }
LABEL_399:
                      v385 = a3[1];
                      v386 = vsubq_f64(*(float64x2_t *)v385[1].i8, *(float64x2_t *)(v392 + 600));
                      v387 = vmulq_f64(v386, v386);
                      v388 = v387.f64[0]
                           + (*(double *)v385 - *(double *)(v392 + 592)) * (*(double *)v385 - *(double *)(v392 + 592))
                           + v387.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v395, v392, &v562);
                      result[3] = v388;
LABEL_400:
                      v9 = v560;
                      v383 = v552;
                      v380 = v556;
                      if (v409 < v388)
                      {
                        ++v389;
                        v390 = v391;
                      }
                    }
                    *v384 = *v389;
                    v384 = v389;
                    v382 = v390;
                  }
                  while (v390 <= v383);
                  v379 = v558 - 1;
                  if (v389 == (unint64_t *)(v558 - 1))
                  {
                    *v389 = v549;
                  }
                  else
                  {
                    *v389 = *v379;
                    *v379 = v549;
                    v420 = (char *)v389 - (char *)v9 + 8;
                    if (v420 >= 9)
                    {
                      v559 = v558 - 1;
                      v421 = (((unint64_t)v420 >> 3) - 2) >> 1;
                      v422 = (unint64_t *)v9 + v421;
                      v423 = *v422;
                      v424 = *v389;
                      v562 = *v389;
                      v563 = v423;
                      v425 = (float *)&(*a3)[10];
                      v426 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v425, v423);
                      if (v426)
                      {
                        v427 = v426[3];
                      }
                      else
                      {
                        v428 = a3[1];
                        v429 = vsubq_f64(*(float64x2_t *)v428[1].i8, *(float64x2_t *)(v423 + 600));
                        v430 = vmulq_f64(v429, v429);
                        v427 = v430.f64[0]
                             + (*(double *)v428 - *(double *)(v423 + 592)) * (*(double *)v428 - *(double *)(v423 + 592))
                             + v430.f64[1];
                        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v425, v423, &v563)+ 3) = v427;
                      }
                      v379 = v559;
                      result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v425, v424);
                      if (result)
                      {
                        v431 = result[3];
                      }
                      else
                      {
                        v432 = a3[1];
                        v433 = vsubq_f64(*(float64x2_t *)v432[1].i8, *(float64x2_t *)(v424 + 600));
                        v434 = vmulq_f64(v433, v433);
                        v431 = v434.f64[0]
                             + (*(double *)v432 - *(double *)(v424 + 592)) * (*(double *)v432 - *(double *)(v424 + 592))
                             + v434.f64[1];
                        result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v425, v424, &v562);
                        result[3] = v431;
                      }
                      v9 = v560;
                      v380 = v556;
                      if (v427 < v431)
                      {
                        v435 = *v389;
                        v436 = (float64x2_t *)(*v389 + 600);
                        do
                        {
                          v441 = v422;
                          *v389 = *v422;
                          if (!v421)
                            break;
                          v421 = (v421 - 1) >> 1;
                          v422 = (unint64_t *)v9 + v421;
                          v442 = *v422;
                          v562 = v435;
                          v563 = v442;
                          v443 = (float *)&(*a3)[10];
                          v444 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v443, v442);
                          if (v444)
                          {
                            v445 = v444[3];
                          }
                          else
                          {
                            v446 = a3[1];
                            v447 = vsubq_f64(*(float64x2_t *)v446[1].i8, *(float64x2_t *)(v442 + 600));
                            v448 = vmulq_f64(v447, v447);
                            v445 = v448.f64[0]
                                 + (*(double *)v446 - *(double *)(v442 + 592))
                                 * (*(double *)v446 - *(double *)(v442 + 592))
                                 + v448.f64[1];
                            *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v443, v442, &v563)+ 3) = v445;
                          }
                          result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v443, v435);
                          if (result)
                          {
                            v440 = result[3];
                          }
                          else
                          {
                            v437 = a3[1];
                            v438 = vsubq_f64(*(float64x2_t *)v437[1].i8, *v436);
                            v439 = vmulq_f64(v438, v438);
                            v440 = v439.f64[0]
                                 + (*(double *)v437 - *(double *)(v435 + 592))
                                 * (*(double *)v437 - *(double *)(v435 + 592))
                                 + v439.f64[1];
                            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v443, v435, &v562);
                            result[3] = v440;
                          }
                          v9 = v560;
                          v389 = v441;
                        }
                        while (v445 < v440);
                        *v441 = v435;
                        v380 = v556;
                        v379 = v559;
                      }
                    }
                  }
                }
                while (v380-- > 2);
              }
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (unint64_t *)v8 + v12;
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8 + v12, (unint64_t *)v8, v545, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, (unint64_t *)v8 + v12, v545, a3);
            v14 = v12;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(&v8->u64[1], &v8->u64[v14 - 1], v541, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)&v8[1], &v8->u64[v14 + 1], v540, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(&v8->u64[v14 - 1], v13, &v8->u64[v14 + 1], a3);
            v15 = v8->i64[0];
            v8->i64[0] = v8->i64[v14];
            v8->i64[v14] = v15;
            v9 = v8;
          }
          v547 = a4 - 1;
          v16 = v9->i64[0];
          if ((a5 & 1) == 0)
          {
            v17 = v9[-1].u64[1];
            v562 = v9->i64[0];
            v563 = v17;
            v18 = (float *)&(*a3)[10];
            v19 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v18, v17);
            if (v19)
            {
              v20 = v19[3];
            }
            else
            {
              v21 = a3[1];
              v22 = vsubq_f64(*(float64x2_t *)v21[1].i8, *(float64x2_t *)(v17 + 600));
              v23 = vmulq_f64(v22, v22);
              v20 = v23.f64[0]
                  + (*(double *)v21 - *(double *)(v17 + 592)) * (*(double *)v21 - *(double *)(v17 + 592))
                  + v23.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v18, v17, &v563)+ 3) = v20;
            }
            v24 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v18, v16);
            if (v24)
            {
              v25 = v24[3];
            }
            else
            {
              v26 = a3[1];
              v27 = vsubq_f64(*(float64x2_t *)v26[1].i8, *(float64x2_t *)(v16 + 600));
              v28 = vmulq_f64(v27, v27);
              v25 = v28.f64[0]
                  + (*(double *)v26 - *(double *)(v16 + 592)) * (*(double *)v26 - *(double *)(v16 + 592))
                  + v28.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v18, v16, &v562)+ 3) = v25;
            }
            v16 = v9->i64[0];
            if (v20 >= v25)
            {
              v137 = *v545;
              v562 = *v545;
              v563 = v16;
              v138 = (float *)&(*a3)[10];
              v139 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v138, v16);
              if (v139)
              {
                v140 = v139[3];
              }
              else
              {
                v141 = a3[1];
                v142 = vsubq_f64(*(float64x2_t *)v141[1].i8, *(float64x2_t *)(v16 + 600));
                v143 = vmulq_f64(v142, v142);
                v140 = v143.f64[0]
                     + (*(double *)v141 - *(double *)(v16 + 592)) * (*(double *)v141 - *(double *)(v16 + 592))
                     + v143.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v138, v16, &v563)+ 3) = v140;
              }
              result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v138, v137);
              if (result)
              {
                v144 = result[3];
              }
              else
              {
                v145 = a3[1];
                v146 = vsubq_f64(*(float64x2_t *)v145[1].i8, *(float64x2_t *)(v137 + 600));
                v147 = vmulq_f64(v146, v146);
                v144 = v147.f64[0]
                     + (*(double *)v145 - *(double *)(v137 + 592)) * (*(double *)v145 - *(double *)(v137 + 592))
                     + v147.f64[1];
                result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v138, v137, &v562);
                result[3] = v144;
              }
              v148 = (float64x2_t *)(v16 + 600);
              if (v140 >= v144)
              {
                v161 = &v9->u64[1];
                do
                {
                  v8 = (int8x16_t *)v161;
                  if (v161 >= (unint64_t *)v557)
                    break;
                  v166 = *v161;
                  v562 = *v161;
                  v563 = v16;
                  v167 = (float *)&(*a3)[10];
                  v168 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v167, v16);
                  if (v168)
                  {
                    v169 = v168[3];
                  }
                  else
                  {
                    v170 = a3[1];
                    v171 = vsubq_f64(*(float64x2_t *)v170[1].i8, *v148);
                    v172 = vmulq_f64(v171, v171);
                    v169 = v172.f64[0]
                         + (*(double *)v170 - *(double *)(v16 + 592)) * (*(double *)v170 - *(double *)(v16 + 592))
                         + v172.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v167, v16, &v563)+ 3) = v169;
                  }
                  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v167, v166);
                  if (result)
                  {
                    v165 = result[3];
                  }
                  else
                  {
                    v162 = a3[1];
                    v163 = vsubq_f64(*(float64x2_t *)v162[1].i8, *(float64x2_t *)(v166 + 600));
                    v164 = vmulq_f64(v163, v163);
                    v165 = v164.f64[0]
                         + (*(double *)v162 - *(double *)(v166 + 592)) * (*(double *)v162 - *(double *)(v166 + 592))
                         + v164.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v167, v166, &v562);
                    result[3] = v165;
                  }
                  v161 = &v8->u64[1];
                }
                while (v169 >= v165);
              }
              else
              {
                v8 = v9;
                do
                {
                  v154 = v8->u64[1];
                  v8 = (int8x16_t *)((char *)v8 + 8);
                  v153 = v154;
                  v562 = v154;
                  v563 = v16;
                  v155 = (float *)&(*a3)[10];
                  v156 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v155, v16);
                  if (v156)
                  {
                    v157 = v156[3];
                  }
                  else
                  {
                    v158 = a3[1];
                    v159 = vsubq_f64(*(float64x2_t *)v158[1].i8, *v148);
                    v160 = vmulq_f64(v159, v159);
                    v157 = v160.f64[0]
                         + (*(double *)v158 - *(double *)(v16 + 592)) * (*(double *)v158 - *(double *)(v16 + 592))
                         + v160.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v155, v16, &v563)+ 3) = v157;
                  }
                  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v155, v153);
                  if (result)
                  {
                    v152 = result[3];
                  }
                  else
                  {
                    v149 = a3[1];
                    v150 = vsubq_f64(*(float64x2_t *)v149[1].i8, *(float64x2_t *)(v153 + 600));
                    v151 = vmulq_f64(v150, v150);
                    v152 = v151.f64[0]
                         + (*(double *)v149 - *(double *)(v153 + 592)) * (*(double *)v149 - *(double *)(v153 + 592))
                         + v151.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v155, v153, &v562);
                    result[3] = v152;
                  }
                }
                while (v157 >= v152);
              }
              v173 = v557;
              if (v8 < v557)
              {
                v173 = v557;
                do
                {
                  while (1)
                  {
                    v179 = v173[-1].u64[1];
                    v173 = (int8x16_t *)((char *)v173 - 8);
                    v178 = v179;
                    v562 = v179;
                    v563 = v16;
                    v180 = (float *)&(*a3)[10];
                    v181 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v180, v16);
                    if (v181)
                    {
                      v182 = v181[3];
                    }
                    else
                    {
                      v183 = a3[1];
                      v184 = vsubq_f64(*(float64x2_t *)v183[1].i8, *v148);
                      v185 = vmulq_f64(v184, v184);
                      v182 = v185.f64[0]
                           + (*(double *)v183 - *(double *)(v16 + 592)) * (*(double *)v183 - *(double *)(v16 + 592))
                           + v185.f64[1];
                      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v180, v16, &v563)+ 3) = v182;
                    }
                    result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v180, v178);
                    if (result)
                      break;
                    v174 = a3[1];
                    v175 = vsubq_f64(*(float64x2_t *)v174[1].i8, *(float64x2_t *)(v178 + 600));
                    v176 = vmulq_f64(v175, v175);
                    v177 = v176.f64[0]
                         + (*(double *)v174 - *(double *)(v178 + 592)) * (*(double *)v174 - *(double *)(v178 + 592))
                         + v176.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v180, v178, &v562);
                    result[3] = v177;
                    if (v182 >= v177)
                      goto LABEL_173;
                  }
                }
                while (v182 < result[3]);
              }
LABEL_173:
              if (v8 < v173)
              {
                v186 = 0x9DDFEA08EB382D69 * (((8 * v16) + 8) ^ HIDWORD(v16));
                v187 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v186 >> 47) ^ v186);
                v188 = 0x9DDFEA08EB382D69 * (v187 ^ (v187 >> 47));
                do
                {
                  v189 = v8->i64[0];
                  v8->i64[0] = v173->i64[0];
                  v173->i64[0] = v189;
                  do
                  {
                    while (1)
                    {
                      v191 = v8->u64[1];
                      v8 = (int8x16_t *)((char *)v8 + 8);
                      v190 = v191;
                      v562 = v191;
                      v563 = v16;
                      v192 = *a3;
                      v193 = (float *)&(*a3)[10];
                      v194 = (*a3)[11];
                      if (!*(_QWORD *)&v194)
                        goto LABEL_197;
                      v195 = (uint8x8_t)vcnt_s8(v194);
                      v195.i16[0] = vaddlv_u8(v195);
                      if (v195.u32[0] > 1uLL)
                      {
                        v196 = v188;
                        if (v188 >= *(_QWORD *)&v194)
                          v196 = v188 % *(_QWORD *)&v194;
                      }
                      else
                      {
                        v196 = (*(_QWORD *)&v194 - 1) & v188;
                      }
                      v197 = *(double ***)(*(_QWORD *)v193 + 8 * v196);
                      if (!v197 || (v198 = *v197) == 0)
                      {
LABEL_197:
                        v201 = a3[1];
                        v202 = vsubq_f64(*(float64x2_t *)v201[1].i8, *v148);
                        v203 = vmulq_f64(v202, v202);
                        v204 = v203.f64[0]
                             + (*(double *)v201 - *(double *)(v16 + 592)) * (*(double *)v201 - *(double *)(v16 + 592))
                             + v203.f64[1];
                        result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v16, &v563);
                        result[3] = v204;
                        v194 = v192[11];
                        if (v194)
                          goto LABEL_198;
                        goto LABEL_219;
                      }
                      if (v195.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v200 = *((_QWORD *)v198 + 1);
                          if (v200 == v188)
                          {
                            if (*((_QWORD *)v198 + 2) == v16)
                              goto LABEL_218;
                          }
                          else if ((v200 & (*(_QWORD *)&v194 - 1)) != v196)
                          {
                            goto LABEL_197;
                          }
                          v198 = *(double **)v198;
                          if (!v198)
                            goto LABEL_197;
                        }
                      }
                      while (1)
                      {
                        v199 = *((_QWORD *)v198 + 1);
                        if (v199 == v188)
                          break;
                        if (v199 >= *(_QWORD *)&v194)
                          v199 %= *(_QWORD *)&v194;
                        if (v199 != v196)
                          goto LABEL_197;
LABEL_187:
                        v198 = *(double **)v198;
                        if (!v198)
                          goto LABEL_197;
                      }
                      if (*((_QWORD *)v198 + 2) != v16)
                        goto LABEL_187;
LABEL_218:
                      v204 = v198[3];
LABEL_198:
                      v205 = 0x9DDFEA08EB382D69 * (((8 * v190) + 8) ^ HIDWORD(v190));
                      v206 = 0x9DDFEA08EB382D69 * (HIDWORD(v190) ^ (v205 >> 47) ^ v205);
                      v207 = 0x9DDFEA08EB382D69 * (v206 ^ (v206 >> 47));
                      v208 = (uint8x8_t)vcnt_s8(v194);
                      v208.i16[0] = vaddlv_u8(v208);
                      if (v208.u32[0] > 1uLL)
                      {
                        v209 = v207;
                        if (v207 >= *(_QWORD *)&v194)
                          v209 = v207 % *(_QWORD *)&v194;
                      }
                      else
                      {
                        v209 = v207 & (*(_QWORD *)&v194 - 1);
                      }
                      v210 = *(double ***)(*(_QWORD *)v193 + 8 * v209);
                      if (v210)
                      {
                        v211 = *v210;
                        if (v211)
                          break;
                      }
LABEL_219:
                      v215 = a3[1];
                      v216 = vsubq_f64(*(float64x2_t *)v215[1].i8, *(float64x2_t *)(v190 + 600));
                      v217 = vmulq_f64(v216, v216);
                      v218 = v217.f64[0]
                           + (*(double *)v215 - *(double *)(v190 + 592)) * (*(double *)v215 - *(double *)(v190 + 592))
                           + v217.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v193, v190, &v562);
                      result[3] = v218;
                      if (v204 < v218)
                        goto LABEL_222;
                    }
                    if (v208.u32[0] < 2uLL)
                    {
                      v212 = *(_QWORD *)&v194 - 1;
                      while (1)
                      {
                        v214 = *((_QWORD *)v211 + 1);
                        if (v214 == v207)
                        {
                          if (*((_QWORD *)v211 + 2) == v190)
                            goto LABEL_221;
                        }
                        else if ((v214 & v212) != v209)
                        {
                          goto LABEL_219;
                        }
                        v211 = *(double **)v211;
                        if (!v211)
                          goto LABEL_219;
                      }
                    }
                    while (1)
                    {
                      v213 = *((_QWORD *)v211 + 1);
                      if (v213 == v207)
                        break;
                      if (v213 >= *(_QWORD *)&v194)
                        v213 %= *(_QWORD *)&v194;
                      if (v213 != v209)
                        goto LABEL_219;
LABEL_207:
                      v211 = *(double **)v211;
                      if (!v211)
                        goto LABEL_219;
                    }
                    if (*((_QWORD *)v211 + 2) != v190)
                      goto LABEL_207;
LABEL_221:
                    ;
                  }
                  while (v204 >= v211[3]);
LABEL_222:
                  while (2)
                  {
                    while (1)
                    {
                      v220 = v173[-1].u64[1];
                      v173 = (int8x16_t *)((char *)v173 - 8);
                      v219 = v220;
                      v562 = v220;
                      v563 = v16;
                      v221 = *a3;
                      v222 = (float *)&(*a3)[10];
                      v223 = (*a3)[11];
                      if (v223)
                      {
                        v224 = (uint8x8_t)vcnt_s8(v223);
                        v224.i16[0] = vaddlv_u8(v224);
                        if (v224.u32[0] > 1uLL)
                        {
                          v225 = v188;
                          if (v188 >= *(_QWORD *)&v223)
                            v225 = v188 % *(_QWORD *)&v223;
                        }
                        else
                        {
                          v225 = (*(_QWORD *)&v223 - 1) & v188;
                        }
                        v226 = *(double ***)(*(_QWORD *)v222 + 8 * v225);
                        if (v226)
                        {
                          v227 = *v226;
                          if (v227)
                            break;
                        }
                      }
LABEL_242:
                      v230 = a3[1];
                      v231 = vsubq_f64(*(float64x2_t *)v230[1].i8, *v148);
                      v232 = vmulq_f64(v231, v231);
                      v233 = v232.f64[0]
                           + (*(double *)v230 - *(double *)(v16 + 592)) * (*(double *)v230 - *(double *)(v16 + 592))
                           + v232.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v16, &v563);
                      result[3] = v233;
                      v223 = v221[11];
                      if (v223)
                        goto LABEL_243;
LABEL_264:
                      v244 = a3[1];
                      v245 = vsubq_f64(*(float64x2_t *)v244[1].i8, *(float64x2_t *)(v219 + 600));
                      v246 = vmulq_f64(v245, v245);
                      v247 = v246.f64[0]
                           + (*(double *)v244 - *(double *)(v219 + 592)) * (*(double *)v244 - *(double *)(v219 + 592))
                           + v246.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v222, v219, &v562);
                      result[3] = v247;
                      if (v233 >= v247)
                        goto LABEL_175;
                    }
                    if (v224.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v229 = *((_QWORD *)v227 + 1);
                        if (v229 == v188)
                        {
                          if (*((_QWORD *)v227 + 2) == v16)
                            goto LABEL_263;
                        }
                        else if ((v229 & (*(_QWORD *)&v223 - 1)) != v225)
                        {
                          goto LABEL_242;
                        }
                        v227 = *(double **)v227;
                        if (!v227)
                          goto LABEL_242;
                      }
                    }
                    while (2)
                    {
                      v228 = *((_QWORD *)v227 + 1);
                      if (v228 != v188)
                      {
                        if (v228 >= *(_QWORD *)&v223)
                          v228 %= *(_QWORD *)&v223;
                        if (v228 != v225)
                          goto LABEL_242;
                        goto LABEL_232;
                      }
                      if (*((_QWORD *)v227 + 2) != v16)
                      {
LABEL_232:
                        v227 = *(double **)v227;
                        if (!v227)
                          goto LABEL_242;
                        continue;
                      }
                      break;
                    }
LABEL_263:
                    v233 = v227[3];
LABEL_243:
                    v234 = 0x9DDFEA08EB382D69 * (((8 * v219) + 8) ^ HIDWORD(v219));
                    v235 = 0x9DDFEA08EB382D69 * (HIDWORD(v219) ^ (v234 >> 47) ^ v234);
                    v236 = 0x9DDFEA08EB382D69 * (v235 ^ (v235 >> 47));
                    v237 = (uint8x8_t)vcnt_s8(v223);
                    v237.i16[0] = vaddlv_u8(v237);
                    if (v237.u32[0] > 1uLL)
                    {
                      v238 = v236;
                      if (v236 >= *(_QWORD *)&v223)
                        v238 = v236 % *(_QWORD *)&v223;
                    }
                    else
                    {
                      v238 = v236 & (*(_QWORD *)&v223 - 1);
                    }
                    v239 = *(double ***)(*(_QWORD *)v222 + 8 * v238);
                    if (!v239)
                      goto LABEL_264;
                    v240 = *v239;
                    if (!v240)
                      goto LABEL_264;
                    if (v237.u32[0] < 2uLL)
                    {
                      v241 = *(_QWORD *)&v223 - 1;
                      while (1)
                      {
                        v243 = *((_QWORD *)v240 + 1);
                        if (v243 == v236)
                        {
                          if (*((_QWORD *)v240 + 2) == v219)
                            goto LABEL_266;
                        }
                        else if ((v243 & v241) != v238)
                        {
                          goto LABEL_264;
                        }
                        v240 = *(double **)v240;
                        if (!v240)
                          goto LABEL_264;
                      }
                    }
                    while (2)
                    {
                      v242 = *((_QWORD *)v240 + 1);
                      if (v242 != v236)
                      {
                        if (v242 >= *(_QWORD *)&v223)
                          v242 %= *(_QWORD *)&v223;
                        if (v242 != v238)
                          goto LABEL_264;
                        goto LABEL_252;
                      }
                      if (*((_QWORD *)v240 + 2) != v219)
                      {
LABEL_252:
                        v240 = *(double **)v240;
                        if (!v240)
                          goto LABEL_264;
                        continue;
                      }
                      break;
                    }
LABEL_266:
                    if (v233 < v240[3])
                      continue;
                    break;
                  }
LABEL_175:
                  ;
                }
                while (v8 < v173);
              }
              v248 = &v8[-1].i64[1];
              if (&v8[-1].u64[1] != (unint64_t *)v560)
                v560->i64[0] = *v248;
              a5 = 0;
              *v248 = v16;
              a4 = v547;
              continue;
            }
          }
          v29 = (float64x2_t *)(v16 + 600);
          v30 = v560;
          do
          {
            while (1)
            {
              v36 = v30->u64[1];
              v30 = (int8x16_t *)((char *)v30 + 8);
              v35 = v36;
              v562 = v16;
              v563 = v36;
              v37 = (float *)&(*a3)[10];
              v38 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v37, v36);
              if (v38)
              {
                v39 = v38[3];
              }
              else
              {
                v40 = a3[1];
                v41 = vsubq_f64(*(float64x2_t *)v40[1].i8, *(float64x2_t *)(v35 + 600));
                v42 = vmulq_f64(v41, v41);
                v39 = v42.f64[0]
                    + (*(double *)v40 - *(double *)(v35 + 592)) * (*(double *)v40 - *(double *)(v35 + 592))
                    + v42.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v37, v35, &v563)+ 3) = v39;
              }
              v43 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v37, v16);
              if (v43)
                break;
              v31 = a3[1];
              v32 = vsubq_f64(*(float64x2_t *)v31[1].i8, *v29);
              v33 = vmulq_f64(v32, v32);
              v34 = v33.f64[0]
                  + (*(double *)v31 - *(double *)(v16 + 592)) * (*(double *)v31 - *(double *)(v16 + 592))
                  + v33.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v37, v16, &v562)+ 3) = v34;
              if (v39 >= v34)
                goto LABEL_24;
            }
          }
          while (v39 < v43[3]);
LABEL_24:
          v44 = (int8x16_t *)((char *)v30 - 8);
          v45 = v557;
          if (&v30[-1].u64[1] == (unint64_t *)v560)
          {
            v45 = v557;
            do
            {
              if (v30 >= v45)
                break;
              v128 = v45[-1].u64[1];
              v45 = (int8x16_t *)((char *)v45 - 8);
              v127 = v128;
              v562 = v16;
              v563 = v128;
              v129 = (float *)&(*a3)[10];
              v130 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v129, v128);
              if (v130)
              {
                v131 = v130[3];
              }
              else
              {
                v132 = a3[1];
                v133 = vsubq_f64(*(float64x2_t *)v132[1].i8, *(float64x2_t *)(v127 + 600));
                v134 = vmulq_f64(v133, v133);
                v131 = v134.f64[0]
                     + (*(double *)v132 - *(double *)(v127 + 592)) * (*(double *)v132 - *(double *)(v127 + 592))
                     + v134.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v129, v127, &v563)+ 3) = v131;
              }
              v135 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v129, v16);
              if (v135)
              {
                v126 = v135[3];
              }
              else
              {
                v123 = a3[1];
                v124 = vsubq_f64(*(float64x2_t *)v123[1].i8, *v29);
                v125 = vmulq_f64(v124, v124);
                v126 = v125.f64[0]
                     + (*(double *)v123 - *(double *)(v16 + 592)) * (*(double *)v123 - *(double *)(v16 + 592))
                     + v125.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v129, v16, &v562)+ 3) = v126;
              }
            }
            while (v131 >= v126);
          }
          else
          {
            do
            {
              while (1)
              {
                v47 = v45[-1].u64[1];
                v45 = (int8x16_t *)((char *)v45 - 8);
                v46 = v47;
                v562 = v16;
                v563 = v47;
                v48 = (float *)&(*a3)[10];
                v49 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v48, v47);
                if (v49)
                {
                  v50 = v49[3];
                }
                else
                {
                  v51 = a3[1];
                  v52 = vsubq_f64(*(float64x2_t *)v51[1].i8, *(float64x2_t *)(v46 + 600));
                  v53 = vmulq_f64(v52, v52);
                  v50 = v53.f64[0]
                      + (*(double *)v51 - *(double *)(v46 + 592)) * (*(double *)v51 - *(double *)(v46 + 592))
                      + v53.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v48, v46, &v563)+ 3) = v50;
                }
                v54 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v48, v16);
                if (!v54)
                  break;
                if (v50 < v54[3])
                  goto LABEL_32;
              }
              v55 = a3[1];
              v56 = vsubq_f64(*(float64x2_t *)v55[1].i8, *v29);
              v57 = vmulq_f64(v56, v56);
              v58 = v57.f64[0]
                  + (*(double *)v55 - *(double *)(v16 + 592)) * (*(double *)v55 - *(double *)(v16 + 592))
                  + v57.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v48, v16, &v562)+ 3) = v58;
            }
            while (v50 >= v58);
          }
LABEL_32:
          v550 = v45;
          v553 = v30;
          if (v30 < v45)
          {
            v59 = 0x9DDFEA08EB382D69 * (((8 * v16) + 8) ^ HIDWORD(v16));
            v60 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v59 >> 47) ^ v59);
            v61 = 0x9DDFEA08EB382D69 * (v60 ^ (v60 >> 47));
            v63 = (uint64_t *)v45;
            v62 = (uint64_t *)v30;
            do
            {
              v64 = *v62;
              *v62 = *v63;
              *v63 = v64;
              do
              {
                while (1)
                {
                  v44 = (int8x16_t *)v62;
                  v66 = v62[1];
                  ++v62;
                  v65 = v66;
                  v562 = v16;
                  v563 = v66;
                  v67 = *a3;
                  v68 = (float *)&(*a3)[10];
                  v69 = (*a3)[11];
                  if (!*(_QWORD *)&v69)
                    goto LABEL_56;
                  v70 = 0x9DDFEA08EB382D69 * (((8 * v65) + 8) ^ HIDWORD(v65));
                  v71 = 0x9DDFEA08EB382D69 * (HIDWORD(v65) ^ (v70 >> 47) ^ v70);
                  v72 = 0x9DDFEA08EB382D69 * (v71 ^ (v71 >> 47));
                  v73 = (uint8x8_t)vcnt_s8(v69);
                  v73.i16[0] = vaddlv_u8(v73);
                  if (v73.u32[0] > 1uLL)
                  {
                    v74 = v72;
                    if (v72 >= *(_QWORD *)&v69)
                      v74 = v72 % *(_QWORD *)&v69;
                  }
                  else
                  {
                    v74 = v72 & (*(_QWORD *)&v69 - 1);
                  }
                  v75 = *(double ***)(*(_QWORD *)v68 + 8 * v74);
                  if (!v75 || (v76 = *v75) == 0)
                  {
LABEL_56:
                    v79 = a3[1];
                    v80 = vsubq_f64(*(float64x2_t *)v79[1].i8, *(float64x2_t *)(v65 + 600));
                    v81 = vmulq_f64(v80, v80);
                    v82 = v81.f64[0]
                        + (*(double *)v79 - *(double *)(v65 + 592)) * (*(double *)v79 - *(double *)(v65 + 592))
                        + v81.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v65, &v563)+ 3) = v82;
                    v69 = v67[11];
                    if (v69)
                      goto LABEL_57;
                    goto LABEL_78;
                  }
                  if (v73.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v78 = *((_QWORD *)v76 + 1);
                      if (v78 == v72)
                      {
                        if (*((_QWORD *)v76 + 2) == v65)
                          goto LABEL_77;
                      }
                      else if ((v78 & (*(_QWORD *)&v69 - 1)) != v74)
                      {
                        goto LABEL_56;
                      }
                      v76 = *(double **)v76;
                      if (!v76)
                        goto LABEL_56;
                    }
                  }
                  while (1)
                  {
                    v77 = *((_QWORD *)v76 + 1);
                    if (v77 == v72)
                      break;
                    if (v77 >= *(_QWORD *)&v69)
                      v77 %= *(_QWORD *)&v69;
                    if (v77 != v74)
                      goto LABEL_56;
LABEL_46:
                    v76 = *(double **)v76;
                    if (!v76)
                      goto LABEL_56;
                  }
                  if (*((_QWORD *)v76 + 2) != v65)
                    goto LABEL_46;
LABEL_77:
                  v82 = v76[3];
LABEL_57:
                  v83 = (uint8x8_t)vcnt_s8(v69);
                  v83.i16[0] = vaddlv_u8(v83);
                  if (v83.u32[0] > 1uLL)
                  {
                    v84 = v61;
                    if (v61 >= *(_QWORD *)&v69)
                      v84 = v61 % *(_QWORD *)&v69;
                  }
                  else
                  {
                    v84 = v61 & (*(_QWORD *)&v69 - 1);
                  }
                  v85 = *(double ***)(*(_QWORD *)v68 + 8 * v84);
                  if (v85)
                  {
                    v86 = *v85;
                    if (v86)
                      break;
                  }
LABEL_78:
                  v90 = a3[1];
                  v91 = vsubq_f64(*(float64x2_t *)v90[1].i8, *v29);
                  v92 = vmulq_f64(v91, v91);
                  v93 = v92.f64[0]
                      + (*(double *)v90 - *(double *)(v16 + 592)) * (*(double *)v90 - *(double *)(v16 + 592))
                      + v92.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v68, v16, &v562)+ 3) = v93;
                  if (v82 >= v93)
                    goto LABEL_81;
                }
                if (v83.u32[0] < 2uLL)
                {
                  v87 = *(_QWORD *)&v69 - 1;
                  while (1)
                  {
                    v89 = *((_QWORD *)v86 + 1);
                    if (v89 == v61)
                    {
                      if (*((_QWORD *)v86 + 2) == v16)
                        goto LABEL_80;
                    }
                    else if ((v89 & v87) != v84)
                    {
                      goto LABEL_78;
                    }
                    v86 = *(double **)v86;
                    if (!v86)
                      goto LABEL_78;
                  }
                }
                while (1)
                {
                  v88 = *((_QWORD *)v86 + 1);
                  if (v88 == v61)
                    break;
                  if (v88 >= *(_QWORD *)&v69)
                    v88 %= *(_QWORD *)&v69;
                  if (v88 != v84)
                    goto LABEL_78;
LABEL_66:
                  v86 = *(double **)v86;
                  if (!v86)
                    goto LABEL_78;
                }
                if (*((_QWORD *)v86 + 2) != v16)
                  goto LABEL_66;
LABEL_80:
                ;
              }
              while (v82 < v86[3]);
LABEL_81:
              while (2)
              {
                while (1)
                {
                  v95 = *--v63;
                  v94 = v95;
                  v562 = v16;
                  v563 = v95;
                  v96 = *a3;
                  v97 = (float *)&(*a3)[10];
                  v98 = (*a3)[11];
                  if (v98)
                  {
                    v99 = 0x9DDFEA08EB382D69 * (((8 * v94) + 8) ^ HIDWORD(v94));
                    v100 = 0x9DDFEA08EB382D69 * (HIDWORD(v94) ^ (v99 >> 47) ^ v99);
                    v101 = 0x9DDFEA08EB382D69 * (v100 ^ (v100 >> 47));
                    v102 = (uint8x8_t)vcnt_s8(v98);
                    v102.i16[0] = vaddlv_u8(v102);
                    if (v102.u32[0] > 1uLL)
                    {
                      v103 = v101;
                      if (v101 >= *(_QWORD *)&v98)
                        v103 = v101 % *(_QWORD *)&v98;
                    }
                    else
                    {
                      v103 = v101 & (*(_QWORD *)&v98 - 1);
                    }
                    v104 = *(double ***)(*(_QWORD *)v97 + 8 * v103);
                    if (v104)
                    {
                      v105 = *v104;
                      if (v105)
                        break;
                    }
                  }
LABEL_101:
                  v108 = a3[1];
                  v109 = vsubq_f64(*(float64x2_t *)v108[1].i8, *(float64x2_t *)(v94 + 600));
                  v110 = vmulq_f64(v109, v109);
                  v111 = v110.f64[0]
                       + (*(double *)v108 - *(double *)(v94 + 592)) * (*(double *)v108 - *(double *)(v94 + 592))
                       + v110.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v94, &v563)+ 3) = v111;
                  v98 = v96[11];
                  if (v98)
                    goto LABEL_102;
LABEL_123:
                  v119 = a3[1];
                  v120 = vsubq_f64(*(float64x2_t *)v119[1].i8, *v29);
                  v121 = vmulq_f64(v120, v120);
                  v122 = v121.f64[0]
                       + (*(double *)v119 - *(double *)(v16 + 592)) * (*(double *)v119 - *(double *)(v16 + 592))
                       + v121.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v97, v16, &v562)+ 3) = v122;
                  if (v111 < v122)
                    goto LABEL_34;
                }
                if (v102.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v107 = *((_QWORD *)v105 + 1);
                    if (v107 == v101)
                    {
                      if (*((_QWORD *)v105 + 2) == v94)
                        goto LABEL_122;
                    }
                    else if ((v107 & (*(_QWORD *)&v98 - 1)) != v103)
                    {
                      goto LABEL_101;
                    }
                    v105 = *(double **)v105;
                    if (!v105)
                      goto LABEL_101;
                  }
                }
                while (2)
                {
                  v106 = *((_QWORD *)v105 + 1);
                  if (v106 != v101)
                  {
                    if (v106 >= *(_QWORD *)&v98)
                      v106 %= *(_QWORD *)&v98;
                    if (v106 != v103)
                      goto LABEL_101;
                    goto LABEL_91;
                  }
                  if (*((_QWORD *)v105 + 2) != v94)
                  {
LABEL_91:
                    v105 = *(double **)v105;
                    if (!v105)
                      goto LABEL_101;
                    continue;
                  }
                  break;
                }
LABEL_122:
                v111 = v105[3];
LABEL_102:
                v112 = (uint8x8_t)vcnt_s8(v98);
                v112.i16[0] = vaddlv_u8(v112);
                if (v112.u32[0] > 1uLL)
                {
                  v113 = v61;
                  if (v61 >= *(_QWORD *)&v98)
                    v113 = v61 % *(_QWORD *)&v98;
                }
                else
                {
                  v113 = v61 & (*(_QWORD *)&v98 - 1);
                }
                v114 = *(double ***)(*(_QWORD *)v97 + 8 * v113);
                if (!v114)
                  goto LABEL_123;
                v115 = *v114;
                if (!v115)
                  goto LABEL_123;
                if (v112.u32[0] < 2uLL)
                {
                  v116 = *(_QWORD *)&v98 - 1;
                  while (1)
                  {
                    v118 = *((_QWORD *)v115 + 1);
                    if (v118 == v61)
                    {
                      if (*((_QWORD *)v115 + 2) == v16)
                        goto LABEL_125;
                    }
                    else if ((v118 & v116) != v113)
                    {
                      goto LABEL_123;
                    }
                    v115 = *(double **)v115;
                    if (!v115)
                      goto LABEL_123;
                  }
                }
                while (2)
                {
                  v117 = *((_QWORD *)v115 + 1);
                  if (v117 != v61)
                  {
                    if (v117 >= *(_QWORD *)&v98)
                      v117 %= *(_QWORD *)&v98;
                    if (v117 != v113)
                      goto LABEL_123;
                    goto LABEL_111;
                  }
                  if (*((_QWORD *)v115 + 2) != v16)
                  {
LABEL_111:
                    v115 = *(double **)v115;
                    if (!v115)
                      goto LABEL_123;
                    continue;
                  }
                  break;
                }
LABEL_125:
                if (v111 >= v115[3])
                  continue;
                break;
              }
LABEL_34:
              ;
            }
            while (v62 < v63);
          }
          v7 = v560;
          if (v44 != v560)
            v560->i64[0] = v44->i64[0];
          v44->i64[0] = v16;
          a4 = v547;
          if (v553 < v550)
            goto LABEL_140;
          v136 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(v560, v44, a3);
          v8 = (int8x16_t *)&v44->u64[1];
          result = (double *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((int8x16_t *)&v44->u64[1], v557, a3);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_140:
            result = (double *)std::__introsort<std::_ClassicAlgPolicy,ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**,false>(v560, v44, a3, v547, a5 & 1);
            a5 = 0;
            v8 = (int8x16_t *)&v44->u64[1];
            continue;
          }
          a2 = v44;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v260 = (int8x16_t *)&v8->u64[1];
        v262 = v8 == v557 || v260 == v557;
        if ((a5 & 1) == 0)
        {
          if (v262)
            return result;
          while (1)
          {
            v450 = (unint64_t *)v260;
            v451 = v9->i64[0];
            v452 = v9->u64[1];
            v453 = (unint64_t *)v9;
            v562 = v9->i64[0];
            v563 = v452;
            v454 = (float *)&(*a3)[10];
            v455 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v454, v452);
            if (v455)
            {
              v456 = v455[3];
            }
            else
            {
              v457 = a3[1];
              v458 = vsubq_f64(*(float64x2_t *)v457[1].i8, *(float64x2_t *)(v452 + 600));
              v459 = vmulq_f64(v458, v458);
              v456 = v459.f64[0]
                   + (*(double *)v457 - *(double *)(v452 + 592)) * (*(double *)v457 - *(double *)(v452 + 592))
                   + v459.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v454, v452, &v563)+ 3) = v456;
            }
            v449 = v557;
            result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v454, v451);
            if (!result)
              break;
            if (v456 < result[3])
              goto LABEL_477;
LABEL_469:
            v260 = (int8x16_t *)(v450 + 1);
            v9 = (int8x16_t *)v450;
            if (v450 + 1 == (unint64_t *)v449)
              return result;
          }
          v460 = a3[1];
          v461 = vsubq_f64(*(float64x2_t *)v460[1].i8, *(float64x2_t *)(v451 + 600));
          v462 = vmulq_f64(v461, v461);
          v463 = v462.f64[0]
               + (*(double *)v460 - *(double *)(v451 + 592)) * (*(double *)v460 - *(double *)(v451 + 592))
               + v462.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v454, v451, &v562);
          result[3] = v463;
          if (v456 >= v463)
            goto LABEL_469;
LABEL_477:
          v464 = *v450;
          v465 = HIDWORD(*v450);
          v466 = 0x9DDFEA08EB382D69 * ((8 * *v450 + 8) ^ v465);
          v467 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v465 ^ (v466 >> 47) ^ v466)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v465 ^ (v466 >> 47) ^ v466)) >> 47));
          v468 = (float64x2_t *)(*v450 + 600);
          v561 = v450;
LABEL_478:
          v469 = v450;
          v450 = v453;
          *v469 = *v453;
          v471 = *--v453;
          v470 = v471;
          v562 = v471;
          v563 = v464;
          v472 = *a3;
          v473 = (float *)&(*a3)[10];
          v474 = (*a3)[11];
          if (v474)
          {
            v475 = (uint8x8_t)vcnt_s8(v474);
            v475.i16[0] = vaddlv_u8(v475);
            if (v475.u32[0] > 1uLL)
            {
              v476 = v467;
              if (v467 >= *(_QWORD *)&v474)
                v476 = v467 % *(_QWORD *)&v474;
            }
            else
            {
              v476 = (*(_QWORD *)&v474 - 1) & v467;
            }
            v477 = *(double ***)(*(_QWORD *)v473 + 8 * v476);
            if (v477)
            {
              v478 = *v477;
              if (v478)
              {
                if (v475.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v480 = *((_QWORD *)v478 + 1);
                    if (v480 == v467)
                    {
                      if (*((_QWORD *)v478 + 2) == v464)
                        goto LABEL_519;
                    }
                    else if ((v480 & (*(_QWORD *)&v474 - 1)) != v476)
                    {
                      goto LABEL_498;
                    }
                    v478 = *(double **)v478;
                    if (!v478)
                      goto LABEL_498;
                  }
                }
                do
                {
                  v479 = *((_QWORD *)v478 + 1);
                  if (v479 == v467)
                  {
                    if (*((_QWORD *)v478 + 2) == v464)
                    {
LABEL_519:
                      v484 = v478[3];
LABEL_499:
                      v485 = 0x9DDFEA08EB382D69 * (((8 * v470) + 8) ^ HIDWORD(v470));
                      v486 = 0x9DDFEA08EB382D69 * (HIDWORD(v470) ^ (v485 >> 47) ^ v485);
                      v487 = 0x9DDFEA08EB382D69 * (v486 ^ (v486 >> 47));
                      v488 = (uint8x8_t)vcnt_s8(v474);
                      v488.i16[0] = vaddlv_u8(v488);
                      if (v488.u32[0] > 1uLL)
                      {
                        v489 = v487;
                        if (v487 >= *(_QWORD *)&v474)
                          v489 = v487 % *(_QWORD *)&v474;
                      }
                      else
                      {
                        v489 = v487 & (*(_QWORD *)&v474 - 1);
                      }
                      v490 = *(double ***)(*(_QWORD *)v473 + 8 * v489);
                      if (v490)
                      {
                        v491 = *v490;
                        if (v491)
                        {
                          if (v488.u32[0] < 2uLL)
                          {
                            v492 = *(_QWORD *)&v474 - 1;
                            while (1)
                            {
                              v494 = *((_QWORD *)v491 + 1);
                              if (v494 == v487)
                              {
                                if (*((_QWORD *)v491 + 2) == v470)
                                  goto LABEL_522;
                              }
                              else if ((v494 & v492) != v489)
                              {
                                goto LABEL_520;
                              }
                              v491 = *(double **)v491;
                              if (!v491)
                                goto LABEL_520;
                            }
                          }
                          do
                          {
                            v493 = *((_QWORD *)v491 + 1);
                            if (v493 == v487)
                            {
                              if (*((_QWORD *)v491 + 2) == v470)
                              {
LABEL_522:
                                if (v484 >= v491[3])
                                {
LABEL_468:
                                  *v450 = v464;
                                  v449 = v557;
                                  v450 = v561;
                                  goto LABEL_469;
                                }
                                goto LABEL_478;
                              }
                            }
                            else
                            {
                              if (v493 >= *(_QWORD *)&v474)
                                v493 %= *(_QWORD *)&v474;
                              if (v493 != v489)
                                break;
                            }
                            v491 = *(double **)v491;
                          }
                          while (v491);
                        }
                      }
LABEL_520:
                      v495 = a3[1];
                      v496 = vsubq_f64(*(float64x2_t *)v495[1].i8, *(float64x2_t *)(v470 + 600));
                      v497 = vmulq_f64(v496, v496);
                      v498 = v497.f64[0]
                           + (*(double *)v495 - *(double *)(v470 + 592)) * (*(double *)v495 - *(double *)(v470 + 592))
                           + v497.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v473, v470, &v562);
                      result[3] = v498;
                      if (v484 >= v498)
                        goto LABEL_468;
                      goto LABEL_478;
                    }
                  }
                  else
                  {
                    if (v479 >= *(_QWORD *)&v474)
                      v479 %= *(_QWORD *)&v474;
                    if (v479 != v476)
                      break;
                  }
                  v478 = *(double **)v478;
                }
                while (v478);
              }
            }
          }
LABEL_498:
          v481 = a3[1];
          v482 = vsubq_f64(*(float64x2_t *)v481[1].i8, *v468);
          v483 = vmulq_f64(v482, v482);
          v484 = v483.f64[0]
               + (*(double *)v481 - *(double *)(v464 + 592)) * (*(double *)v481 - *(double *)(v464 + 592))
               + v483.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v464, &v563);
          result[3] = v484;
          v474 = v472[11];
          if (v474)
            goto LABEL_499;
          goto LABEL_520;
        }
        if (!v262)
        {
          v263 = (unint64_t *)v8;
          while (1)
          {
            v264 = (unint64_t *)v260;
            v265 = *v263;
            v266 = v263[1];
            v562 = *v263;
            v563 = v266;
            v267 = (float *)&(*a3)[10];
            v268 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v267, v266);
            if (v268)
            {
              v269 = v268[3];
            }
            else
            {
              v270 = a3[1];
              v271 = vsubq_f64(*(float64x2_t *)v270[1].i8, *(float64x2_t *)(v266 + 600));
              v272 = vmulq_f64(v271, v271);
              v269 = v272.f64[0]
                   + (*(double *)v270 - *(double *)(v266 + 592)) * (*(double *)v270 - *(double *)(v266 + 592))
                   + v272.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v267, v266, &v563)+ 3) = v269;
            }
            v273 = v557;
            result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v267, v265);
            if (result)
            {
              v274 = result[3];
            }
            else
            {
              v275 = a3[1];
              v276 = vsubq_f64(*(float64x2_t *)v275[1].i8, *(float64x2_t *)(v265 + 600));
              v277 = vmulq_f64(v276, v276);
              v274 = v277.f64[0]
                   + (*(double *)v275 - *(double *)(v265 + 592)) * (*(double *)v275 - *(double *)(v265 + 592))
                   + v277.f64[1];
              result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v267, v265, &v562);
              result[3] = v274;
            }
            v278 = v560;
            if (v269 < v274)
              break;
LABEL_292:
            v260 = (int8x16_t *)(v264 + 1);
            v263 = v264;
            if (v264 + 1 == (unint64_t *)v273)
              return result;
          }
          v279 = *v264;
          v280 = HIDWORD(*v264);
          v281 = 0x9DDFEA08EB382D69 * ((8 * *v264 + 8) ^ v280);
          v282 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v280 ^ (v281 >> 47) ^ v281)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v280 ^ (v281 >> 47) ^ v281)) >> 47));
          v283 = (float64x2_t *)(*v264 + 600);
          v554 = v264;
LABEL_301:
          *v264 = *v263;
          if (v263 == (unint64_t *)v278)
          {
            v264 = (unint64_t *)v278;
            goto LABEL_291;
          }
          v264 = v263;
          v285 = *--v263;
          v284 = v285;
          v562 = v285;
          v563 = v279;
          v286 = *a3;
          v287 = (float *)&(*a3)[10];
          v288 = (*a3)[11];
          if (!*(_QWORD *)&v288)
            goto LABEL_322;
          v289 = (uint8x8_t)vcnt_s8(v288);
          v289.i16[0] = vaddlv_u8(v289);
          if (v289.u32[0] > 1uLL)
          {
            v290 = v282;
            if (v282 >= *(_QWORD *)&v288)
              v290 = v282 % *(_QWORD *)&v288;
          }
          else
          {
            v290 = (*(_QWORD *)&v288 - 1) & v282;
          }
          v291 = *(double ***)(*(_QWORD *)v287 + 8 * v290);
          if (!v291 || (v292 = *v291) == 0)
          {
LABEL_322:
            v295 = a3[1];
            v296 = vsubq_f64(*(float64x2_t *)v295[1].i8, *v283);
            v297 = vmulq_f64(v296, v296);
            v298 = v297.f64[0]
                 + (*(double *)v295 - *(double *)(v279 + 592)) * (*(double *)v295 - *(double *)(v279 + 592))
                 + v297.f64[1];
            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v279, &v563);
            result[3] = v298;
            v288 = v286[11];
            if (v288)
              goto LABEL_323;
LABEL_344:
            v309 = a3[1];
            v310 = vsubq_f64(*(float64x2_t *)v309[1].i8, *(float64x2_t *)(v284 + 600));
            v311 = vmulq_f64(v310, v310);
            v312 = v311.f64[0]
                 + (*(double *)v309 - *(double *)(v284 + 592)) * (*(double *)v309 - *(double *)(v284 + 592))
                 + v311.f64[1];
            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v287, v284, &v562);
            result[3] = v312;
            goto LABEL_345;
          }
          if (v289.u32[0] < 2uLL)
          {
            while (1)
            {
              v294 = *((_QWORD *)v292 + 1);
              if (v294 == v282)
              {
                if (*((_QWORD *)v292 + 2) == v279)
                  goto LABEL_343;
              }
              else if ((v294 & (*(_QWORD *)&v288 - 1)) != v290)
              {
                goto LABEL_322;
              }
              v292 = *(double **)v292;
              if (!v292)
                goto LABEL_322;
            }
          }
          while (1)
          {
            v293 = *((_QWORD *)v292 + 1);
            if (v293 == v282)
            {
              if (*((_QWORD *)v292 + 2) == v279)
              {
LABEL_343:
                v298 = v292[3];
LABEL_323:
                v299 = 0x9DDFEA08EB382D69 * (((8 * v284) + 8) ^ HIDWORD(v284));
                v300 = 0x9DDFEA08EB382D69 * (HIDWORD(v284) ^ (v299 >> 47) ^ v299);
                v301 = 0x9DDFEA08EB382D69 * (v300 ^ (v300 >> 47));
                v302 = (uint8x8_t)vcnt_s8(v288);
                v302.i16[0] = vaddlv_u8(v302);
                if (v302.u32[0] > 1uLL)
                {
                  v303 = v301;
                  if (v301 >= *(_QWORD *)&v288)
                    v303 = v301 % *(_QWORD *)&v288;
                }
                else
                {
                  v303 = v301 & (*(_QWORD *)&v288 - 1);
                }
                v304 = *(double ***)(*(_QWORD *)v287 + 8 * v303);
                if (!v304)
                  goto LABEL_344;
                v305 = *v304;
                if (!v305)
                  goto LABEL_344;
                if (v302.u32[0] < 2uLL)
                {
                  v306 = *(_QWORD *)&v288 - 1;
                  while (1)
                  {
                    v308 = *((_QWORD *)v305 + 1);
                    if (v308 == v301)
                    {
                      if (*((_QWORD *)v305 + 2) == v284)
                        goto LABEL_347;
                    }
                    else if ((v308 & v306) != v303)
                    {
                      goto LABEL_344;
                    }
                    v305 = *(double **)v305;
                    if (!v305)
                      goto LABEL_344;
                  }
                }
                while (2)
                {
                  v307 = *((_QWORD *)v305 + 1);
                  if (v307 != v301)
                  {
                    if (v307 >= *(_QWORD *)&v288)
                      v307 %= *(_QWORD *)&v288;
                    if (v307 != v303)
                      goto LABEL_344;
                    goto LABEL_332;
                  }
                  if (*((_QWORD *)v305 + 2) != v284)
                  {
LABEL_332:
                    v305 = *(double **)v305;
                    if (!v305)
                      goto LABEL_344;
                    continue;
                  }
                  break;
                }
LABEL_347:
                v312 = v305[3];
LABEL_345:
                v273 = v557;
                v278 = v560;
                if (v298 >= v312)
                {
LABEL_291:
                  *v264 = v279;
                  v264 = v554;
                  goto LABEL_292;
                }
                goto LABEL_301;
              }
            }
            else
            {
              if (v293 >= *(_QWORD *)&v288)
                v293 %= *(_QWORD *)&v288;
              if (v293 != v290)
                goto LABEL_322;
            }
            v292 = *(double **)v292;
            if (!v292)
              goto LABEL_322;
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ARStorefrontLabelFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(int8x16_t *a1, int8x16_t *a2, _QWORD *a3)
{
  int8x16_t *v4;
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  double *v11;
  double v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *i64;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  double *v21;
  double v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  unint64_t v31;
  float64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  unint64_t v38;
  float *v39;
  double *v40;
  double v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  unint64_t *v46;
  int8x16_t *v47;
  unint64_t v48;
  unint64_t v49;
  float *v50;
  double *v51;
  double v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double *v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float *v73;
  double *v74;
  double v75;
  uint64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double *v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float *v87;
  double *v88;
  double v89;
  uint64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double *v93;
  double v94;
  uint64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2[-1].u64[1];
      v9 = a1->i64[0];
      v99 = a1->i64[0];
      v100 = v8;
      v10 = (float *)(*a3 + 80);
      v11 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, v8);
      if (v11)
      {
        v12 = v11[3];
      }
      else
      {
        v53 = a3[1];
        v54 = vsubq_f64(*(float64x2_t *)(v53 + 8), *(float64x2_t *)(v8 + 600));
        v55 = vmulq_f64(v54, v54);
        v12 = v55.f64[0]
            + (*(double *)v53 - *(double *)(v8 + 592)) * (*(double *)v53 - *(double *)(v8 + 592))
            + v55.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v10, v8, &v100)+ 3) = v12;
      }
      v56 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, v9);
      if (v56)
      {
        if (v12 >= v56[3])
          return 1;
      }
      else
      {
        v57 = a3[1];
        v58 = vsubq_f64(*(float64x2_t *)(v57 + 8), *(float64x2_t *)(v9 + 600));
        v59 = vmulq_f64(v58, v58);
        v60 = v59.f64[0]
            + (*(double *)v57 - *(double *)(v9 + 592)) * (*(double *)v57 - *(double *)(v9 + 592))
            + v59.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v10, v9, &v99)+ 3) = v60;
        if (v12 >= v60)
          return 1;
      }
      v61 = a1->i64[0];
      a1->i64[0] = v4[-1].i64[1];
      v4[-1].i64[1] = v61;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      v46 = &a1->u64[1];
      v47 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v48 = v4[-1].u64[1];
      v49 = a1[1].u64[0];
      v99 = v49;
      v100 = v48;
      v50 = (float *)(*a3 + 80);
      v51 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v50, v48);
      if (v51)
      {
        v52 = v51[3];
      }
      else
      {
        v62 = a3[1];
        v63 = vsubq_f64(*(float64x2_t *)(v62 + 8), *(float64x2_t *)(v48 + 600));
        v64 = vmulq_f64(v63, v63);
        v52 = v64.f64[0]
            + (*(double *)v62 - *(double *)(v48 + 592)) * (*(double *)v62 - *(double *)(v48 + 592))
            + v64.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v50, v48, &v100)+ 3) = v52;
      }
      v65 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v50, v49);
      if (v65)
      {
        if (v52 >= v65[3])
          return 1;
      }
      else
      {
        v66 = a3[1];
        v67 = vsubq_f64(*(float64x2_t *)(v66 + 8), *(float64x2_t *)(v49 + 600));
        v68 = vmulq_f64(v67, v67);
        v69 = v68.f64[0]
            + (*(double *)v66 - *(double *)(v49 + 592)) * (*(double *)v66 - *(double *)(v49 + 592))
            + v68.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v50, v49, &v99)+ 3) = v69;
        if (v52 >= v69)
          return 1;
      }
      v70 = v47->i64[0];
      v47->i64[0] = v4[-1].i64[1];
      v4[-1].i64[1] = v70;
      v71 = v47->i64[0];
      v72 = *v46;
      v99 = *v46;
      v100 = v71;
      v73 = (float *)(*a3 + 80);
      v74 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v73, v71);
      if (v74)
      {
        v75 = v74[3];
      }
      else
      {
        v76 = a3[1];
        v77 = vsubq_f64(*(float64x2_t *)(v76 + 8), *(float64x2_t *)(v71 + 600));
        v78 = vmulq_f64(v77, v77);
        v75 = v78.f64[0]
            + (*(double *)v76 - *(double *)(v71 + 592)) * (*(double *)v76 - *(double *)(v71 + 592))
            + v78.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v73, v71, &v100)+ 3) = v75;
      }
      v79 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v73, v72);
      if (v79)
      {
        if (v75 >= v79[3])
          return 1;
      }
      else
      {
        v80 = a3[1];
        v81 = vsubq_f64(*(float64x2_t *)(v80 + 8), *(float64x2_t *)(v72 + 600));
        v82 = vmulq_f64(v81, v81);
        v83 = v82.f64[0]
            + (*(double *)v80 - *(double *)(v72 + 592)) * (*(double *)v80 - *(double *)(v72 + 592))
            + v82.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v73, v72, &v99)+ 3) = v83;
        if (v75 >= v83)
          return 1;
      }
      v84 = a1->i64[1];
      v85 = a1[1].u64[0];
      v86 = a1->i64[0];
      a1->i64[1] = v85;
      a1[1].i64[0] = v84;
      v99 = v86;
      v100 = v85;
      v87 = (float *)(*a3 + 80);
      v88 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v87, v85);
      if (v88)
      {
        v89 = v88[3];
      }
      else
      {
        v90 = a3[1];
        v91 = vsubq_f64(*(float64x2_t *)(v90 + 8), *(float64x2_t *)(v85 + 600));
        v92 = vmulq_f64(v91, v91);
        v89 = v92.f64[0]
            + (*(double *)v90 - *(double *)(v85 + 592)) * (*(double *)v90 - *(double *)(v85 + 592))
            + v92.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v87, v85, &v100)+ 3) = v89;
      }
      v93 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v87, v86);
      if (v93)
      {
        v94 = v93[3];
      }
      else
      {
        v95 = a3[1];
        v96 = vsubq_f64(*(float64x2_t *)(v95 + 8), *(float64x2_t *)(v86 + 600));
        v97 = vmulq_f64(v96, v96);
        v94 = v97.f64[0]
            + (*(double *)v95 - *(double *)(v86 + 592)) * (*(double *)v95 - *(double *)(v86 + 592))
            + v97.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v87, v86, &v99)+ 3) = v94;
      }
      if (v89 < v94)
        *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      v13 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v14 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)v4)
        return 1;
      v15 = 0;
      v16 = 0;
      v98 = (unint64_t *)v4;
      break;
  }
  do
  {
    v18 = *v14;
    v19 = *v13;
    v99 = v19;
    v100 = v18;
    v20 = (float *)(*a3 + 80);
    v21 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v20, v18);
    if (v21)
    {
      v22 = v21[3];
    }
    else
    {
      v23 = a3[1];
      v24 = vsubq_f64(*(float64x2_t *)(v23 + 8), *(float64x2_t *)(v18 + 600));
      v25 = vmulq_f64(v24, v24);
      v22 = v25.f64[0]
          + (*(double *)v23 - *(double *)(v18 + 592)) * (*(double *)v23 - *(double *)(v18 + 592))
          + v25.f64[1];
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v20, v18, &v100)+ 3) = v22;
    }
    v26 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v20, v19);
    if (v26)
    {
      if (v22 >= v26[3])
        goto LABEL_8;
    }
    else
    {
      v27 = a3[1];
      v28 = vsubq_f64(*(float64x2_t *)(v27 + 8), *(float64x2_t *)(v19 + 600));
      v29 = vmulq_f64(v28, v28);
      v30 = v29.f64[0]
          + (*(double *)v27 - *(double *)(v19 + 592)) * (*(double *)v27 - *(double *)(v19 + 592))
          + v29.f64[1];
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v20, v19, &v99)+ 3) = v30;
      if (v22 >= v30)
        goto LABEL_8;
    }
    v31 = *v14;
    v32 = (float64x2_t *)(*v14 + 600);
    v33 = v15;
    do
    {
      *(uint64_t *)((char *)&a1[1].i64[1] + v33) = *(uint64_t *)((char *)a1[1].i64 + v33);
      if (v33 == -16)
      {
        i64 = a1->i64;
        goto LABEL_7;
      }
      v38 = *(unint64_t *)((char *)&a1->u64[1] + v33);
      v99 = v38;
      v100 = v31;
      v39 = (float *)(*a3 + 80);
      v40 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v39, v31);
      if (v40)
      {
        v41 = v40[3];
      }
      else
      {
        v42 = a3[1];
        v43 = vsubq_f64(*(float64x2_t *)(v42 + 8), *v32);
        v44 = vmulq_f64(v43, v43);
        v41 = v44.f64[0]
            + (*(double *)v42 - *(double *)(v31 + 592)) * (*(double *)v42 - *(double *)(v31 + 592))
            + v44.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v39, v31, &v100)+ 3) = v41;
      }
      v45 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v39, v38);
      if (v45)
      {
        v37 = v45[3];
      }
      else
      {
        v34 = a3[1];
        v35 = vsubq_f64(*(float64x2_t *)(v34 + 8), *(float64x2_t *)(v38 + 600));
        v36 = vmulq_f64(v35, v35);
        v37 = v36.f64[0]
            + (*(double *)v34 - *(double *)(v38 + 592)) * (*(double *)v34 - *(double *)(v38 + 592))
            + v36.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v39, v38, &v99)+ 3) = v37;
      }
      v33 -= 8;
    }
    while (v41 < v37);
    i64 = (uint64_t *)((char *)&a1[1].i64[1] + v33);
LABEL_7:
    *i64 = v31;
    ++v16;
    v4 = (int8x16_t *)v98;
    if (v16 == 8)
      return v14 + 1 == v98;
LABEL_8:
    v13 = v14;
    v15 += 8;
    ++v14;
  }
  while (v14 != (unint64_t *)v4);
  return 1;
}

void md::DebugDrawLogic::~DebugDrawLogic(md::DebugDrawLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428F0E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428F0E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x3619066E3FB5F2CLL && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void gdc::ComponentStorageWrapper<std::vector<gm::LineSegment<float,3>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<std::vector<gm::LineSegment<float,3>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != v15 - 24)
  {
    std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>(v14, *(char **)(v15 - 24), *(char **)(v15 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 - 16) - *(_QWORD *)(v15 - 24)) >> 3));
    v15 = a1[11];
  }
  v17 = v15 - 24;
  v16 = *(void **)(v15 - 24);
  if (v16)
  {
    *(_QWORD *)(v15 - 16) = v16;
    operator delete(v16);
  }
  a1[11] = v17;
  v18 = (_QWORD *)a1[28];
  if (!v18)
    return 1;
  v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v19;
    v20 = v18[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v24, v25);
    v18 = (_QWORD *)*v18;
    if (!v18)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<std::vector<gm::LineSegment<float,3>>>::contains(v21, v22);
}

BOOL gdc::ComponentStorageWrapper<std::vector<gm::LineSegment<float,3>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v25 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 112 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(unsigned int *)(v14 + 104);
  v17 = *(unsigned int *)(v15 - 8);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v17 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v17 == -1)
  {
    ((void (*)(_QWORD *, uint64_t))off_1E42F6900[v16])(v27, v14);
    *(_DWORD *)(v14 + 104) = -1;
    goto LABEL_16;
  }
  v27[0] = v14;
  ((void (*)(_QWORD *, uint64_t, uint64_t))off_1E42F6930[v17])(v27, v14, v15 - 112);
LABEL_16:
  v18 = a1[11];
  v19 = *(unsigned int *)(v18 - 8);
  if ((_DWORD)v19 != -1)
    ((void (*)(_QWORD *, uint64_t))off_1E42F6900[v19])(v27, v18 - 112);
  *(_DWORD *)(v18 - 8) = -1;
  a1[11] = v18 - 112;
  v20 = (_QWORD *)a1[28];
  if (!v20)
    return 1;
  v21 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    v26 = v21;
    v22 = v20[6];
    if (!v22)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v22 + 48))(v22, &v26, v27);
    v20 = (_QWORD *)*v20;
    if (!v20)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::contains(v23, v24);
}

BOOL gdc::ComponentStorageWrapper<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 104);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      a2[3] = a3[3];
      a2[4] = a3[4];
      result.n128_u64[0] = a3[5];
      a2[5] = result.n128_u64[0];
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E42F6900[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 104) = -1;
  result = *(__n128 *)a3;
  v7 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(v4 + 16) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(v4 + 32) = v7;
  *(__n128 *)v4 = result;
  *(_DWORD *)(v4 + 104) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 104);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      result.n128_u64[0] = a3[3];
      a2[3] = result.n128_u64[0];
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E42F6900[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 104) = -1;
  result = *(__n128 *)a3;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v7;
  *(_DWORD *)(v4 + 104) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 104);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      a2[3] = a3[3];
      a2[4] = a3[4];
      a2[5] = a3[5];
      a2[6] = a3[6];
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      a2[7] = a3[7];
      a2[8] = a3[8];
      a2[9] = a3[9];
      a2[10] = a3[10];
      a2[11] = a3[11];
      result.n128_u64[0] = a3[12];
      a2[12] = result.n128_u64[0];
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E42F6900[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 104) = -1;
  v7 = *(_OWORD *)a3;
  *(_QWORD *)(v4 + 16) = a3[2];
  *(_OWORD *)v4 = v7;
  v8 = *(_OWORD *)(a3 + 3);
  *(_QWORD *)(v4 + 40) = a3[5];
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 48) = a3[6];
  result = *(__n128 *)(a3 + 7);
  v9 = *(_OWORD *)(a3 + 9);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a3 + 11);
  *(_OWORD *)(v4 + 72) = v9;
  *(__n128 *)(v4 + 56) = result;
  *(_DWORD *)(v4 + 104) = 2;
  return result;
}

_QWORD *gdc::ComponentStorageWrapper<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 112;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E42F6900[v6])(&v14, v3 - 112);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 112;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[4];
  if (v8)
  {
    v9 = (_QWORD *)a1[5];
    v10 = (void *)a1[4];
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x1A1AF4E00](v11, 0x1000C40104B78CFLL);
      }
      while (v9 != v8);
      v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<debugComponents::DisplayOptions>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<debugComponents::DisplayOptions>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)v14 = *(_BYTE *)(v15 - 16);
  *(_BYTE *)(v14 + 1) = *(_BYTE *)(v15 - 15);
  *(_BYTE *)(v14 + 2) = *(_BYTE *)(v15 - 14);
  *(_BYTE *)(v14 + 3) = *(_BYTE *)(v15 - 13);
  v16 = *(_QWORD *)(v15 - 12);
  *(_BYTE *)(v14 + 12) = *(_BYTE *)(v15 - 4);
  *(_QWORD *)(v14 + 4) = v16;
  a1[11] -= 16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<debugComponents::DisplayOptions>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<debugComponents::DisplayOptions>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v25 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 56 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(unsigned int *)(v14 + 52);
  v17 = *(unsigned int *)(v15 - 4);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v17 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v17 == -1)
  {
    ((void (*)(_QWORD *, uint64_t))off_1E42F68A0[v16])(v27, v14);
    *(_DWORD *)(v14 + 52) = -1;
    goto LABEL_16;
  }
  v27[0] = v14;
  ((void (*)(_QWORD *, uint64_t, uint64_t))off_1E42F68E0[v17])(v27, v14, v15 - 56);
LABEL_16:
  v18 = a1[11];
  v19 = *(unsigned int *)(v18 - 4);
  if ((_DWORD)v19 != -1)
    ((void (*)(_QWORD *, uint64_t))off_1E42F68A0[v19])(v27, v18 - 56);
  *(_DWORD *)(v18 - 4) = -1;
  a1[11] = v18 - 56;
  v20 = (_QWORD *)a1[28];
  if (!v20)
    return 1;
  v21 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    v26 = v21;
    v22 = v20[6];
    if (!v22)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v22 + 48))(v22, &v26, v27);
    v20 = (_QWORD *)*v20;
    if (!v20)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::contains(v23, v24);
}

BOOL gdc::ComponentStorageWrapper<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKSZ_EEEDcSR_DpT0_(__n128 **a1, _DWORD *a2, _DWORD *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[3].n128_u32[1];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      a2[3] = a3[3];
      a2[4] = a3[4];
      result.n128_u32[0] = a3[5];
      a2[5] = result.n128_u32[0];
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E42F68A0[v5])(&v7, v4);
  }
  v4[3].n128_u32[1] = -1;
  result = *(__n128 *)a3;
  v4[1].n128_u64[0] = *((_QWORD *)a3 + 2);
  *v4 = result;
  v4[3].n128_u32[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 52);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      result.n128_u32[0] = a3[3];
      a2[3] = result.n128_u32[0];
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E42F68A0[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 52) = -1;
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_DWORD *)(v4 + 52) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 52);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      a2[3] = a3[3];
      a2[4] = a3[4];
      a2[5] = a3[5];
      a2[6] = a3[6];
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      a2[7] = a3[7];
      a2[8] = a3[8];
      a2[9] = a3[9];
      a2[10] = a3[10];
      a2[11] = a3[11];
      result.n128_u32[0] = a3[12];
      a2[12] = result.n128_u32[0];
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E42F68A0[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 52) = -1;
  v7 = *(_QWORD *)a3;
  *(_DWORD *)(v4 + 8) = a3[2];
  *(_QWORD *)v4 = v7;
  v8 = *(_QWORD *)(a3 + 3);
  *(_DWORD *)(v4 + 20) = a3[5];
  *(_QWORD *)(v4 + 12) = v8;
  *(_DWORD *)(v4 + 24) = a3[6];
  result = *(__n128 *)(a3 + 7);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)(a3 + 11);
  *(__n128 *)(v4 + 28) = result;
  *(_DWORD *)(v4 + 52) = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 52);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      a2[3] = a3[3];
      a2[4] = a3[4];
      a2[5] = a3[5];
      a2[6] = a3[6];
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      a2[7] = a3[7];
      a2[8] = a3[8];
      a2[9] = a3[9];
      result.n128_u32[0] = a3[10];
      a2[10] = result.n128_u32[0];
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E42F68A0[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 52) = -1;
  v7 = *(_QWORD *)a3;
  *(_DWORD *)(v4 + 8) = a3[2];
  *(_QWORD *)v4 = v7;
  v8 = *(_QWORD *)(a3 + 3);
  *(_DWORD *)(v4 + 20) = a3[5];
  *(_QWORD *)(v4 + 12) = v8;
  *(_DWORD *)(v4 + 24) = a3[6];
  result = *(__n128 *)(a3 + 7);
  *(__n128 *)(v4 + 28) = result;
  *(_DWORD *)(v4 + 52) = 3;
  return result;
}

_QWORD *gdc::ComponentStorageWrapper<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 56;
        v6 = *(unsigned int *)(v3 - 4);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E42F68A0[v6])(&v14, v3 - 56);
        *(_DWORD *)(v3 - 4) = -1;
        v3 -= 56;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[4];
  if (v8)
  {
    v9 = (_QWORD *)a1[5];
    v10 = (void *)a1[4];
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x1A1AF4E00](v11, 0x1000C40104B78CFLL);
      }
      while (v9 != v8);
      v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<gdc::Tiled>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::Tiled>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  __n128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 464 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15.n128_f32[0] = gdc::Tiled::operator=(v14, (__int128 *)(a1[11] - 464));
  a1[11] -= 464;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *, __n128))(*(_QWORD *)v18 + 48))(v18, &v22, v23, v15);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::Tiled>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<gdc::Tiled>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

float gdc::Tiled::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  float result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
  *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  *(_OWORD *)(a1 + 432) = a2[27];
  *(_DWORD *)(a1 + 448) = *((_DWORD *)a2 + 112);
  *(_DWORD *)(a1 + 452) = *((_DWORD *)a2 + 113);
  result = *((float *)a2 + 114);
  *(float *)(a1 + 456) = result;
  return result;
}

void gdc::ComponentStorageWrapper<debugComponents::WorldDrawableContainer>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageWrapper<debugComponents::WorldDrawableContainer>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<debugComponents::WorldDrawableContainer>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[2];

  v70 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v15 = (uint64_t)(a1 + 10);
  v14 = a1[10];
  v16 = (char **)(v14 + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v17 = a1[11];
  if (v16 == (char **)(v17 - 48))
    goto LABEL_67;
  v67 = v14;
  v68 = a1[11];
  v69 = v7;
  v18 = *(_QWORD *)(v17 - 48);
  v19 = *(_QWORD *)(v17 - 40);
  v20 = v19 - v18;
  v21 = (v19 - v18) >> 7;
  v22 = (uint64_t)v16[2];
  v23 = *v16;
  if (v21 > (v22 - (uint64_t)*v16) >> 7)
  {
    if (v23)
    {
      v24 = v16[1];
      v25 = *v16;
      if (v24 != v23)
      {
        do
        {
          v26 = v24 - 128;
          v27 = *((unsigned int *)v24 - 6);
          if ((_DWORD)v27 != -1)
            ((void (*)(_QWORD *, char *))off_1E42F6900[v27])(v72, v24 - 128);
          *((_DWORD *)v24 - 6) = -1;
          v24 -= 128;
        }
        while (v26 != v23);
        v25 = *v16;
        v20 = v19 - v18;
      }
      v16[1] = v23;
      operator delete(v25);
      v22 = 0;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
    }
    if ((v20 & 0x8000000000000000) == 0)
    {
      v42 = v22 >> 6;
      if (v22 >> 6 <= v21)
        v42 = (v19 - v18) >> 7;
      v43 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFF80;
      v44 = 0x1FFFFFFFFFFFFFFLL;
      if (!v43)
        v44 = v42;
      if (!(v44 >> 57))
      {
        v45 = v44 << 7;
        v46 = (char *)operator new(v44 << 7);
        *v16 = v46;
        v16[1] = v46;
        v16[2] = &v46[v45];
        if (v18 != v19)
        {
          v66 = v16;
          v47 = 0;
          do
          {
            v49 = v18 + v47;
            v50 = &v46[v47];
            *v50 = 0;
            *((_DWORD *)v50 + 26) = -1;
            v51 = *(unsigned int *)(v18 + v47 + 104);
            if ((_DWORD)v51 != -1)
            {
              ((void (*)(uint64_t *, char *, uint64_t))off_1E42F6918[v51])(&v71, &v46[v47], v18 + v47);
              *((_DWORD *)v50 + 26) = v51;
            }
            *((_DWORD *)v50 + 28) = *(_DWORD *)(v49 + 112);
            v48 = *(_QWORD *)(v49 + 116);
            v50[124] = *(_BYTE *)(v49 + 124);
            *(_QWORD *)(v50 + 116) = v48;
            v47 += 128;
          }
          while (v18 + v47 != v19);
          v46 += v47;
          v16 = v66;
        }
        v16[1] = v46;
        v15 = (uint64_t)(a1 + 10);
        goto LABEL_65;
      }
    }
LABEL_73:
    abort();
  }
  v28 = v16[1];
  v29 = (v28 - v23) >> 7;
  if (v29 >= v21)
  {
    if (v18 == v19)
    {
LABEL_57:
      v59 = v67;
      v58 = v68;
      if (v28 != v23)
      {
        do
        {
          v60 = v28 - 128;
          v61 = *((unsigned int *)v28 - 6);
          if ((_DWORD)v61 != -1)
            ((void (*)(_QWORD *, char *))off_1E42F6900[v61])(v72, v28 - 128);
          *((_DWORD *)v28 - 6) = -1;
          v28 -= 128;
        }
        while (v60 != v23);
      }
      v16[1] = v23;
      v62 = v69;
      goto LABEL_66;
    }
    v37 = 0;
    while (1)
    {
      v40 = *(unsigned int *)&v23[v37 + 104];
      v41 = *(unsigned int *)(v18 + v37 + 104);
      if ((_DWORD)v40 != -1)
        break;
      if ((_DWORD)v41 != -1)
        goto LABEL_30;
LABEL_31:
      v38 = &v23[v37];
      v38[112] = *(_BYTE *)(v18 + v37 + 112);
      v38[113] = *(_BYTE *)(v18 + v37 + 113);
      v38[114] = *(_BYTE *)(v18 + v37 + 114);
      v38[115] = *(_BYTE *)(v18 + v37 + 115);
      v39 = *(_QWORD *)(v18 + v37 + 116);
      v38[124] = *(_BYTE *)(v18 + v37 + 124);
      *(_QWORD *)(v38 + 116) = v39;
      v37 += 128;
      if (v18 + v37 == v19)
      {
        v23 += v37;
        v28 = v16[1];
        goto LABEL_57;
      }
    }
    if ((_DWORD)v41 == -1)
    {
      ((void (*)(_QWORD *, char *))off_1E42F6900[v40])(v72, &v23[v37]);
      *(_DWORD *)&v23[v37 + 104] = -1;
      goto LABEL_31;
    }
LABEL_30:
    v72[0] = &v23[v37];
    ((void (*)(_QWORD *, char *))off_1E42F6930[v41])(v72, &v23[v37]);
    goto LABEL_31;
  }
  v30 = v18 + (v29 << 7);
  if (v28 == v23)
    goto LABEL_51;
  v31 = 0;
  v32 = v29 << 7;
  do
  {
    v35 = *(unsigned int *)&v23[v31 + 104];
    v36 = *(unsigned int *)(v18 + v31 + 104);
    if ((_DWORD)v35 == -1)
    {
      if ((_DWORD)v36 == -1)
        goto LABEL_23;
LABEL_22:
      v72[0] = &v23[v31];
      ((void (*)(_QWORD *, char *))off_1E42F6930[v36])(v72, &v23[v31]);
      goto LABEL_23;
    }
    if ((_DWORD)v36 != -1)
      goto LABEL_22;
    ((void (*)(_QWORD *, char *))off_1E42F6900[v35])(v72, &v23[v31]);
    *(_DWORD *)&v23[v31 + 104] = -1;
LABEL_23:
    v33 = &v23[v31];
    v33[112] = *(_BYTE *)(v18 + v31 + 112);
    v33[113] = *(_BYTE *)(v18 + v31 + 113);
    v33[114] = *(_BYTE *)(v18 + v31 + 114);
    v33[115] = *(_BYTE *)(v18 + v31 + 115);
    v34 = *(_QWORD *)(v18 + v31 + 116);
    v33[124] = *(_BYTE *)(v18 + v31 + 124);
    *(_QWORD *)(v33 + 116) = v34;
    v31 += 128;
  }
  while (v32 != v31);
  v23 = v16[1];
LABEL_51:
  v52 = v23;
  if (v30 != v19)
  {
    v53 = 0;
    do
    {
      v55 = v30 + v53;
      v56 = &v23[v53];
      *v56 = 0;
      *((_DWORD *)v56 + 26) = -1;
      v57 = *(unsigned int *)(v30 + v53 + 104);
      if ((_DWORD)v57 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t))off_1E42F6918[v57])(&v71, &v23[v53], v30 + v53);
        *((_DWORD *)v56 + 26) = v57;
      }
      *((_DWORD *)v56 + 28) = *(_DWORD *)(v55 + 112);
      v54 = *(_QWORD *)(v55 + 116);
      v56[124] = *(_BYTE *)(v55 + 124);
      *(_QWORD *)(v56 + 116) = v54;
      v53 += 128;
    }
    while (v30 + v53 != v19);
    v52 = &v23[v53];
    v15 = (uint64_t)(a1 + 10);
  }
  v16[1] = v52;
LABEL_65:
  v58 = v68;
  v62 = v69;
  v59 = v67;
LABEL_66:
  std::vector<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*,std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*>((char **)(v59 + 48 * v62 + 24), *(_QWORD *)(v58 - 24), *(_QWORD *)(v58 - 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v58 - 16) - *(_QWORD *)(v58 - 24)) >> 3));
  v17 = a1[11];
LABEL_67:
  std::vector<debugComponents::WorldDrawableContainer>::__base_destruct_at_end[abi:nn180100](v15, (void **)(v17 - 48));
  v63 = (_QWORD *)a1[28];
  if (v63)
  {
    v64 = a1[31];
    while (1)
    {
      v72[0] = &v70;
      v72[1] = 1;
      v71 = v64;
      v65 = v63[6];
      if (!v65)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v65 + 48))(v65, &v71, v72);
      v63 = (_QWORD *)*v63;
      if (!v63)
        return 1;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_73;
  }
  return 1;
}

void sub_19FCBF694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = *(unsigned int *)(v17 + 104);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_1E42F6900[v21])(&a17, v17);
  *(_DWORD *)(v17 + 104) = -1;
  *(_QWORD *)(v19 + 8) = v18;
  _Unwind_Resume(exception_object);
}

void sub_19FCBF6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = *(unsigned int *)(v18 + 104);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_1E42F6900[v20])(&a17, v18);
  *(_DWORD *)(v18 + 104) = -1;
  *(_QWORD *)(a10 + 8) = v17;
  _Unwind_Resume(exception_object);
}

BOOL gdc::ComponentStorageWrapper<debugComponents::WorldDrawableContainer>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::vector<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*,std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*>(char **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v5;
  char **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  size_t v39;
  char *v40;
  void *v41;
  void *v42;
  char **v43;
  char **v44;
  uint64_t v45;

  v5 = a2;
  v6 = a1;
  v7 = (uint64_t)a1[2];
  v8 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)*a1) >> 3) < __sz)
  {
    if (v8)
    {
      v9 = a1[1];
      v10 = *a1;
      if (v9 != v8)
      {
        v11 = v6[1];
        do
        {
          v13 = (void *)*((_QWORD *)v11 - 5);
          v11 -= 40;
          v12 = v13;
          if (v13)
          {
            *((_QWORD *)v9 - 4) = v12;
            operator delete(v12);
          }
          v9 = v11;
        }
        while (v11 != v8);
        v10 = *v6;
      }
      v6[1] = v8;
      operator delete(v10);
      v7 = 0;
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_53;
    v18 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
    v19 = 2 * v18;
    if (2 * v18 <= __sz)
      v19 = __sz;
    v20 = v18 >= 0x333333333333333 ? 0x666666666666666 : v19;
    if (v20 > 0x666666666666666)
LABEL_53:
      abort();
    v21 = 40 * v20;
    v8 = (char *)operator new(40 * v20);
    *v6 = v8;
    v6[1] = v8;
    v6[2] = &v8[v21];
    if (v5 != a3)
    {
      v43 = v6;
      v22 = 0;
      do
      {
        v23 = v5 + v22;
        v24 = &v8[v22];
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        v26 = *(_BYTE **)(v5 + v22);
        v25 = *(_BYTE **)(v5 + v22 + 8);
        v27 = v25 - v26;
        if (v25 != v26)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v27 >> 3) > 0xAAAAAAAAAAAAAAALL)
            abort();
          v28 = (char *)operator new(v27);
          *(_QWORD *)v24 = v28;
          *((_QWORD *)v24 + 1) = v28;
          *((_QWORD *)v24 + 2) = &v28[8 * (v27 >> 3)];
          v29 = 24 * ((v27 - 24) / 0x18uLL) + 24;
          memcpy(v28, v26, v29);
          *((_QWORD *)v24 + 1) = &v28[v29];
        }
        *((_DWORD *)v24 + 6) = *(_DWORD *)(v23 + 24);
        *(_QWORD *)(v24 + 28) = *(_QWORD *)(v23 + 28);
        v24[36] = *(_BYTE *)(v23 + 36);
        v22 += 40;
      }
      while (v23 + 40 != a3);
      v8 += v22;
      v6 = v43;
    }
LABEL_48:
    v6[1] = v8;
    return;
  }
  v14 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v8) >> 3) >= __sz)
  {
    if (a2 != a3)
    {
      do
      {
        if ((char *)v5 != v8)
          std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>((uint64_t)v8, *(char **)v5, *(char **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
        v8[24] = *(_BYTE *)(v5 + 24);
        v8[25] = *(_BYTE *)(v5 + 25);
        v8[26] = *(_BYTE *)(v5 + 26);
        v8[27] = *(_BYTE *)(v5 + 27);
        v17 = *(_QWORD *)(v5 + 28);
        v8[36] = *(_BYTE *)(v5 + 36);
        *(_QWORD *)(v8 + 28) = v17;
        v5 += 40;
        v8 += 40;
      }
      while (v5 != a3);
      v14 = v6[1];
    }
    if (v14 != v8)
    {
      v40 = v14;
      do
      {
        v42 = (void *)*((_QWORD *)v40 - 5);
        v40 -= 40;
        v41 = v42;
        if (v42)
        {
          *((_QWORD *)v14 - 4) = v41;
          operator delete(v41);
        }
        v14 = v40;
      }
      while (v40 != v8);
    }
    goto LABEL_48;
  }
  v45 = a2 + 8 * ((v14 - v8) >> 3);
  if (v14 != v8)
  {
    v15 = 8 * ((v14 - v8) >> 3);
    do
    {
      if ((char *)v5 != v8)
        std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>((uint64_t)v8, *(char **)v5, *(char **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v8[24] = *(_BYTE *)(v5 + 24);
      v8[25] = *(_BYTE *)(v5 + 25);
      v8[26] = *(_BYTE *)(v5 + 26);
      v8[27] = *(_BYTE *)(v5 + 27);
      v16 = *(_QWORD *)(v5 + 28);
      v8[36] = *(_BYTE *)(v5 + 36);
      *(_QWORD *)(v8 + 28) = v16;
      v5 += 40;
      v8 += 40;
      v15 -= 40;
    }
    while (v15);
    v8 = v6[1];
  }
  v30 = v8;
  if (v45 != a3)
  {
    v44 = v6;
    v31 = 0;
    do
    {
      v33 = v45 + v31;
      v34 = &v8[v31];
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = 0;
      v36 = *(_BYTE **)(v45 + v31);
      v35 = *(_BYTE **)(v45 + v31 + 8);
      v37 = v35 - v36;
      if (v35 != v36)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v37 >> 3) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v38 = (char *)operator new(v37);
        *(_QWORD *)v34 = v38;
        *((_QWORD *)v34 + 1) = v38;
        *((_QWORD *)v34 + 2) = &v38[8 * (v37 >> 3)];
        v39 = 24 * ((v37 - 24) / 0x18uLL) + 24;
        memcpy(v38, v36, v39);
        *((_QWORD *)v34 + 1) = &v38[v39];
      }
      *((_DWORD *)v34 + 6) = *(_DWORD *)(v33 + 24);
      v32 = *(_QWORD *)(v33 + 28);
      v34[36] = *(_BYTE *)(v33 + 36);
      *(_QWORD *)(v34 + 28) = v32;
      v31 += 40;
    }
    while (v33 + 40 != a3);
    v30 = &v8[v31];
    v6 = v44;
  }
  v6[1] = v30;
}

void sub_19FCBFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)(a10 + 8) = v10;
  _Unwind_Resume(a1);
}

void std::vector<debugComponents::WorldDrawableContainer>::__base_destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void **v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v6 = (char *)*(v4 - 3);
      if (v6)
      {
        v7 = (char *)*(v4 - 2);
        v8 = *(v4 - 3);
        if (v7 != v6)
        {
          v9 = (char *)*(v4 - 2);
          do
          {
            v11 = (void *)*((_QWORD *)v9 - 5);
            v9 -= 40;
            v10 = v11;
            if (v11)
            {
              *((_QWORD *)v7 - 4) = v10;
              operator delete(v10);
            }
            v7 = v9;
          }
          while (v9 != v6);
          v8 = *(v4 - 3);
        }
        *(v4 - 2) = v6;
        operator delete(v8);
      }
      v12 = v4 - 6;
      v13 = (char *)*(v4 - 6);
      if (v13)
      {
        v14 = (char *)*(v4 - 5);
        v5 = *(v4 - 6);
        if (v14 != v13)
        {
          do
          {
            v15 = v14 - 128;
            v16 = *((unsigned int *)v14 - 6);
            if ((_DWORD)v16 != -1)
              ((void (*)(char *, char *))off_1E42F6900[v16])(&v17, v14 - 128);
            *((_DWORD *)v14 - 6) = -1;
            v14 -= 128;
          }
          while (v15 != v13);
          v5 = *v12;
        }
        *(v4 - 5) = v13;
        operator delete(v5);
      }
      v4 -= 6;
    }
    while (v12 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t gdc::ComponentStorageWrapper<debugComponents::WorldDrawableContainer>::~ComponentStorageWrapper(uint64_t a1)
{
  void **v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  v2 = *(void ***)(a1 + 80);
  if (v2)
  {
    std::vector<debugComponents::WorldDrawableContainer>::__base_destruct_at_end[abi:nn180100](a1 + 80, v2);
    operator delete(*(void **)(a1 + 80));
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD **)(a1 + 40);
    v6 = *(void **)(a1 + 32);
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          MEMORY[0x1A1AF4E00](v7, 0x1000C40104B78CFLL);
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<std::vector<debugComponents::TiledDrawableContainer>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::vector<debugComponents::TiledDrawableContainer>>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<std::vector<debugComponents::TiledDrawableContainer>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::vector<debugComponents::TiledDrawableContainer>>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<std::vector<debugComponents::TiledDrawableContainer>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v48 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = (uint64_t *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  if (v15 != (uint64_t *)(v16 - 24))
  {
    v17 = *(_QWORD *)(v16 - 24);
    v18 = *(_QWORD *)(v16 - 16);
    v19 = (v18 - v17) >> 9;
    v20 = v14 + 24 * v7;
    v23 = *(_QWORD *)(v20 + 16);
    v22 = (_QWORD *)(v20 + 16);
    v21 = v23;
    v24 = *v15;
    if (v19 <= (v23 - *v15) >> 9)
    {
      v33 = v14 + 24 * v7;
      v36 = *(_QWORD *)(v33 + 8);
      v35 = (uint64_t *)(v33 + 8);
      v34 = v36;
      v37 = (v36 - v24) >> 9;
      if (v37 >= v19)
      {
        for (; v17 != v18; v24 += 512)
        {
          gdc::Tiled::operator=(v24, (__int128 *)v17);
          if (v17 != v24)
          {
            std::vector<std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>*,std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>*>((void **)(v24 + 464), *(_QWORD *)(v17 + 464), *(_QWORD *)(v17 + 472), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v17 + 472) - *(_QWORD *)(v17 + 464)) >> 3));
            std::vector<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*,std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*>((char **)(v24 + 488), *(_QWORD *)(v17 + 488), *(_QWORD *)(v17 + 496), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v17 + 496) - *(_QWORD *)(v17 + 488)) >> 3));
          }
          v17 += 512;
        }
        std::vector<debugComponents::TiledDrawableContainer>::__base_destruct_at_end[abi:nn180100]((uint64_t)v15, v24);
      }
      else
      {
        v38 = v17 + (v37 << 9);
        if (v34 != v24)
        {
          v39 = v37 << 9;
          do
          {
            gdc::Tiled::operator=(v24, (__int128 *)v17);
            if (v17 != v24)
            {
              std::vector<std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>*,std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>*>((void **)(v24 + 464), *(_QWORD *)(v17 + 464), *(_QWORD *)(v17 + 472), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v17 + 472) - *(_QWORD *)(v17 + 464)) >> 3));
              std::vector<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*,std::pair<std::vector<gm::LineSegment<float,3>>,debugComponents::DisplayOptions>*>((char **)(v24 + 488), *(_QWORD *)(v17 + 488), *(_QWORD *)(v17 + 496), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v17 + 496) - *(_QWORD *)(v17 + 488)) >> 3));
            }
            v17 += 512;
            v24 += 512;
            v39 -= 512;
          }
          while (v39);
          v24 = *v35;
        }
        v40 = v24;
        if (v38 != v18)
        {
          v41 = 0;
          do
          {
            std::construct_at[abi:nn180100]<debugComponents::TiledDrawableContainer,debugComponents::TiledDrawableContainer&,debugComponents::TiledDrawableContainer*>(v24 + v41, v38 + v41);
            v41 += 512;
          }
          while (v38 + v41 != v18);
          v40 = v24 + v41;
        }
        *v35 = v40;
      }
    }
    else
    {
      if (v24)
      {
        std::vector<debugComponents::TiledDrawableContainer>::__base_destruct_at_end[abi:nn180100](v14 + 24 * v7, *v15);
        operator delete((void *)*v15);
        v21 = 0;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      if (v18 - v17 < 0)
        goto LABEL_53;
      v25 = v21 >> 8;
      if (v21 >> 8 <= v19)
        v25 = (v18 - v17) >> 9;
      v26 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFE00;
      v27 = 0x7FFFFFFFFFFFFFLL;
      if (!v26)
        v27 = v25;
      if (v27 >> 55)
        goto LABEL_53;
      v28 = v27 << 9;
      v29 = (char *)operator new(v27 << 9);
      *v15 = (uint64_t)v29;
      v30 = v14 + 24 * v7;
      *(_QWORD *)(v30 + 8) = v29;
      v31 = (_QWORD *)(v30 + 8);
      *v22 = &v29[v28];
      if (v17 != v18)
      {
        v32 = 0;
        do
        {
          std::construct_at[abi:nn180100]<debugComponents::TiledDrawableContainer,debugComponents::TiledDrawableContainer&,debugComponents::TiledDrawableContainer*>((uint64_t)&v29[v32], v17 + v32);
          v32 += 512;
        }
        while (v17 + v32 != v18);
        v29 += v32;
      }
      *v31 = v29;
    }
    v16 = a1[11];
  }
  v44 = *(_QWORD *)(v16 - 24);
  v43 = (void **)(v16 - 24);
  v42 = v44;
  if (v44)
  {
    std::vector<debugComponents::TiledDrawableContainer>::__base_destruct_at_end[abi:nn180100]((uint64_t)v43, v42);
    operator delete(*v43);
  }
  a1[11] = v43;
  v45 = (_QWORD *)a1[28];
  if (v45)
  {
    v46 = a1[31];
    while (1)
    {
      v50[0] = &v48;
      v50[1] = 1;
      v49 = v46;
      v47 = v45[6];
      if (!v47)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v47 + 48))(v47, &v49, v50);
      v45 = (_QWORD *)*v45;
      if (!v45)
        return 1;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
    abort();
  }
  return 1;
}

void sub_19FCC0198(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void sub_19FCC01A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<std::vector<debugComponents::TiledDrawableContainer>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::vector<debugComponents::TiledDrawableContainer>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 512)
  {
    v6 = *(_QWORD *)(i - 24);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 16);
      v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        v9 = *(_QWORD *)(i - 16);
        do
        {
          v11 = *(void **)(v9 - 40);
          v9 -= 40;
          v10 = v11;
          if (v11)
          {
            *(_QWORD *)(v7 - 32) = v10;
            operator delete(v10);
          }
          v7 = v9;
        }
        while (v9 != v6);
        v8 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v6;
      operator delete(v8);
    }
    v12 = *(_QWORD *)(i - 48);
    if (v12)
    {
      v13 = *(_QWORD *)(i - 40);
      v5 = *(void **)(i - 48);
      if (v13 != v12)
      {
        do
        {
          v14 = v13 - 72;
          v15 = *(unsigned int *)(v13 - 20);
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, uint64_t))off_1E42F68A0[v15])(&v16, v13 - 72);
          *(_DWORD *)(v13 - 20) = -1;
          v13 -= 72;
        }
        while (v14 != v12);
        v5 = *(void **)(i - 48);
      }
      *(_QWORD *)(i - 40) = v12;
      operator delete(v5);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void **std::vector<std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>>::__assign_with_size[abi:nn180100]<std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>*,std::pair<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>,debugComponents::DisplayOptions>*>(void **result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char v46;

  v7 = result;
  v8 = (uint64_t)result[2];
  v9 = (char *)*result;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*result) >> 3) < a4)
  {
    if (v9)
    {
      v10 = (char *)result[1];
      v11 = *result;
      if (v10 != v9)
      {
        do
        {
          v12 = v10 - 72;
          v13 = *((unsigned int *)v10 - 5);
          if ((_DWORD)v13 != -1)
            ((void (*)(char **, char *))off_1E42F68A0[v13])(&v45, v10 - 72);
          *((_DWORD *)v10 - 5) = -1;
          v10 -= 72;
        }
        while (v12 != v9);
        v11 = *v7;
      }
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL)
      goto LABEL_57;
    v28 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v29 = 2 * v28;
    if (2 * v28 <= a4)
      v29 = a4;
    v30 = v28 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v29;
    if (v30 > 0x38E38E38E38E38ELL)
LABEL_57:
      abort();
    v31 = 9 * v30;
    result = (void **)operator new(72 * v30);
    v32 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v31];
    if (a2 != a3)
    {
      v33 = 0;
      do
      {
        v34 = a2 + v33;
        v35 = &v32[v33 / 8];
        *(_BYTE *)v35 = 0;
        *((_DWORD *)v35 + 13) = -1;
        v36 = *(unsigned int *)(a2 + v33 + 52);
        if ((_DWORD)v36 != -1)
        {
          result = (void **)((uint64_t (*)(char *, void **, unint64_t))off_1E42F68C0[v36])(&v46, &v32[v33 / 8], a2 + v33);
          *((_DWORD *)v35 + 13) = v36;
        }
        *((_DWORD *)v35 + 14) = *(_DWORD *)(v34 + 56);
        *(void **)((char *)v35 + 60) = *(void **)(v34 + 60);
        *((_BYTE *)v35 + 68) = *(_BYTE *)(v34 + 68);
        v33 += 72;
      }
      while (a2 + v33 != a3);
      v32 = (void **)((char *)v32 + v33);
    }
    v7[1] = v32;
    return result;
  }
  v14 = result[1];
  v15 = 0x8E38E38E38E38E39 * ((v14 - v9) >> 3);
  if (v15 >= a4)
  {
    if (a2 == a3)
    {
LABEL_48:
      if (v14 != v9)
      {
        do
        {
          v43 = v14 - 72;
          v44 = *((unsigned int *)v14 - 5);
          if ((_DWORD)v44 != -1)
            result = (void **)((uint64_t (*)(char **, _BYTE *))off_1E42F68A0[v44])(&v45, v14 - 72);
          *((_DWORD *)v14 - 5) = -1;
          v14 -= 72;
        }
        while (v43 != v9);
      }
      v7[1] = v9;
      return result;
    }
    v23 = 0;
    while (1)
    {
      v26 = *(unsigned int *)&v9[v23 + 52];
      v27 = *(unsigned int *)(a2 + v23 + 52);
      if ((_DWORD)v26 != -1)
        break;
      if ((_DWORD)v27 != -1)
        goto LABEL_20;
LABEL_21:
      v24 = &v9[v23];
      v24[56] = *(_BYTE *)(a2 + v23 + 56);
      v24[57] = *(_BYTE *)(a2 + v23 + 57);
      v24[58] = *(_BYTE *)(a2 + v23 + 58);
      v24[59] = *(_BYTE *)(a2 + v23 + 59);
      v25 = *(_QWORD *)(a2 + v23 + 60);
      v24[68] = *(_BYTE *)(a2 + v23 + 68);
      *(_QWORD *)(v24 + 60) = v25;
      v23 += 72;
      if (a2 + v23 == a3)
      {
        v9 += v23;
        v14 = v7[1];
        goto LABEL_48;
      }
    }
    if ((_DWORD)v27 == -1)
    {
      result = (void **)((uint64_t (*)(char **, char *))off_1E42F68A0[v26])(&v45, &v9[v23]);
      *(_DWORD *)&v9[v23 + 52] = -1;
      goto LABEL_21;
    }
LABEL_20:
    v45 = &v9[v23];
    result = (void **)((uint64_t (*)(char **, char *))off_1E42F68E0[v27])(&v45, &v9[v23]);
    goto LABEL_21;
  }
  v16 = a2 + 8 * ((v14 - v9) >> 3);
  if (v14 == v9)
    goto LABEL_42;
  v17 = 0;
  v18 = 72 * v15;
  do
  {
    v21 = *(unsigned int *)&v9[v17 + 52];
    v22 = *(unsigned int *)(a2 + v17 + 52);
    if ((_DWORD)v21 == -1)
    {
      if ((_DWORD)v22 == -1)
        goto LABEL_13;
LABEL_12:
      v45 = &v9[v17];
      result = (void **)((uint64_t (*)(char **, char *))off_1E42F68E0[v22])(&v45, &v9[v17]);
      goto LABEL_13;
    }
    if ((_DWORD)v22 != -1)
      goto LABEL_12;
    result = (void **)((uint64_t (*)(char **, char *))off_1E42F68A0[v21])(&v45, &v9[v17]);
    *(_DWORD *)&v9[v17 + 52] = -1;
LABEL_13:
    v19 = &v9[v17];
    v19[56] = *(_BYTE *)(a2 + v17 + 56);
    v19[57] = *(_BYTE *)(a2 + v17 + 57);
    v19[58] = *(_BYTE *)(a2 + v17 + 58);
    v19[59] = *(_BYTE *)(a2 + v17 + 59);
    v20 = *(_QWORD *)(a2 + v17 + 60);
    v19[68] = *(_BYTE *)(a2 + v17 + 68);
    *(_QWORD *)(v19 + 60) = v20;
    v17 += 72;
  }
  while (v18 != v17);
  v9 = (char *)v7[1];
LABEL_42:
  v37 = v9;
  if (v16 != a3)
  {
    v38 = 0;
    do
    {
      v40 = v16 + v38;
      v41 = &v9[v38];
      *v41 = 0;
      *((_DWORD *)v41 + 13) = -1;
      v42 = *(unsigned int *)(v16 + v38 + 52);
      if ((_DWORD)v42 != -1)
      {
        result = (void **)((uint64_t (*)(char *, char *, uint64_t))off_1E42F68C0[v42])(&v46, &v9[v38], v16 + v38);
        *((_DWORD *)v41 + 13) = v42;
      }
      *((_DWORD *)v41 + 14) = *(_DWORD *)(v40 + 56);
      v39 = *(_QWORD *)(v40 + 60);
      v41[68] = *(_BYTE *)(v40 + 68);
      *(_QWORD *)(v41 + 60) = v39;
      v38 += 72;
    }
    while (v16 + v38 != a3);
    v37 = &v9[v38];
  }
  v7[1] = v37;
  return result;
}

void sub_19FCC079C(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, exception_object);
  v5 = *(unsigned int *)(v2 + 52);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E42F68A0[v5])((uint64_t *)va, v2);
  *(_DWORD *)(v2 + 52) = -1;
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_19FCC07D8(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, exception_object);
  v5 = *(unsigned int *)(v3 + 52);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E42F68A0[v5])((uint64_t *)va, v3);
  *(_DWORD *)(v3 + 52) = -1;
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:nn180100]<debugComponents::TiledDrawableContainer,debugComponents::TiledDrawableContainer&,debugComponents::TiledDrawableContainer*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  uint64_t v34;
  char v35[2];

  v3 = a1;
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  memcpy((void *)(a1 + 128), (const void *)(a2 + 128), 0x130uLL);
  *(_QWORD *)(v3 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(v3 + 440) = *(_QWORD *)(a2 + 440);
  v8 = *(_QWORD *)(a2 + 448);
  *(_DWORD *)(v3 + 456) = *(_DWORD *)(a2 + 456);
  *(_QWORD *)(v3 + 448) = v8;
  *(_QWORD *)(v3 + 472) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  v9 = *(_QWORD *)(a2 + 464);
  v10 = *(_QWORD *)(a2 + 472);
  v11 = v10 - v9;
  v34 = v3;
  if (v10 != v9)
  {
    v12 = 0x8E38E38E38E38E39 * (v11 >> 3);
    if (v12 >= 0x38E38E38E38E38FLL)
      abort();
    v13 = (char *)operator new(v11);
    v14 = 0;
    *(_QWORD *)(v3 + 464) = v13;
    *(_QWORD *)(v3 + 472) = v13;
    *(_QWORD *)(v3 + 480) = &v13[72 * v12];
    do
    {
      v16 = v9 + v14;
      v17 = &v13[v14];
      *v17 = 0;
      *((_DWORD *)v17 + 13) = -1;
      v18 = *(unsigned int *)(v9 + v14 + 52);
      if ((_DWORD)v18 != -1)
      {
        ((void (*)(char *, char *, uint64_t))off_1E42F68C0[v18])(v35, &v13[v14], v9 + v14);
        *((_DWORD *)v17 + 13) = v18;
      }
      *((_DWORD *)v17 + 14) = *(_DWORD *)(v16 + 56);
      v15 = *(_QWORD *)(v16 + 60);
      v17[68] = *(_BYTE *)(v16 + 68);
      *(_QWORD *)(v17 + 60) = v15;
      v14 += 72;
    }
    while (v9 + v14 != v10);
    v3 = v34;
    *(_QWORD *)(v34 + 472) = &v13[v14];
  }
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  v19 = *(_QWORD *)(a2 + 488);
  v20 = *(_QWORD *)(a2 + 496);
  v21 = v20 - v19;
  if (v20 != v19)
  {
    v22 = 0xCCCCCCCCCCCCCCCDLL * (v21 >> 3);
    if (v22 >= 0x666666666666667)
      abort();
    v23 = (char *)operator new(v21);
    v24 = 0;
    *(_QWORD *)(v3 + 488) = v23;
    *(_QWORD *)(v3 + 496) = v23;
    *(_QWORD *)(v3 + 504) = &v23[40 * v22];
    do
    {
      v28 = v19 + v24;
      v29 = &v23[v24];
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = 0;
      v31 = *(_BYTE **)(v19 + v24);
      v30 = *(_BYTE **)(v19 + v24 + 8);
      v32 = v30 - v31;
      if (v30 != v31)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v32 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          abort();
        v25 = (char *)operator new(v32);
        *(_QWORD *)v29 = v25;
        *((_QWORD *)v29 + 1) = v25;
        *((_QWORD *)v29 + 2) = &v25[8 * (v32 >> 3)];
        v26 = 24 * ((v32 - 24) / 0x18uLL) + 24;
        memcpy(v25, v31, v26);
        *((_QWORD *)v29 + 1) = &v25[v26];
      }
      *((_DWORD *)v29 + 6) = *(_DWORD *)(v28 + 24);
      v27 = *(_QWORD *)(v28 + 28);
      v29[36] = *(_BYTE *)(v28 + 36);
      *(_QWORD *)(v29 + 28) = v27;
      v24 += 40;
    }
    while (v28 + 40 != v20);
    v3 = v34;
    *(_QWORD *)(v34 + 496) = &v23[v24];
  }
  return v3;
}

void sub_19FCC0AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, char a14, char a15, char a16)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v17 = *(_QWORD *)(a10 + 464);
  if (v17)
  {
    v18 = *(_QWORD *)(a10 + 472);
    v19 = *(void **)(a10 + 464);
    if (v18 != v17)
    {
      do
      {
        v20 = v18 - 72;
        v21 = *(unsigned int *)(v18 - 20);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))off_1E42F68A0[v21])(&a14, v18 - 72);
        *(_DWORD *)(v18 - 20) = -1;
        v18 -= 72;
      }
      while (v20 != v17);
      v19 = *(void **)(a10 + 464);
    }
    *(_QWORD *)(a10 + 472) = v17;
    operator delete(v19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *geo::sparse_map<gdc::Entity,std::vector<debugComponents::TiledDrawableContainer>>::~sparse_map(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  BOOL v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[6];
  if (v2)
  {
    v3 = (uint64_t *)a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      v5 = v3 - 3;
      do
      {
        if (*v5)
        {
          std::vector<debugComponents::TiledDrawableContainer>::__base_destruct_at_end[abi:nn180100]((uint64_t)v5, *v5);
          operator delete((void *)*v5);
        }
        v6 = v5 == v2;
        v5 -= 3;
      }
      while (!v6);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)*a1;
  if (*a1)
  {
    v9 = (_QWORD *)a1[1];
    v10 = (_QWORD *)*a1;
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x1A1AF4E00](v11, 0x1000C40104B78CFLL);
      }
      while (v9 != v8);
      v10 = (_QWORD *)*a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

_QWORD *gdc::ManagedObjectHolder<md::DebugDrawContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::DebugDrawContext *v2;

  *a1 = &off_1E42B0DC0;
  v2 = (md::DebugDrawContext *)a1[4];
  if (v2)
  {
    md::DebugDrawContext::~DebugDrawContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::DebugDrawContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::DebugDrawContext *v1;

  *a1 = &off_1E42B0DC0;
  v1 = (md::DebugDrawContext *)a1[4];
  if (v1)
  {
    md::DebugDrawContext::~DebugDrawContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::DebugDrawContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::RouteLineLogic::~RouteLineLogic(md::RouteLineLogic *this)
{
  md::RouteLineLogic::~RouteLineLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428FCE8;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 24));
  v2 = (_QWORD *)*((_QWORD *)this + 20);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    operator delete(v3);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  void *__p;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v21, a1);
  v5 = operator new();
  v6 = __p;
  v7 = v23;
  v8 = v24;
  __p = 0;
  v23 = 0;
  *(_QWORD *)v5 = v21;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 16) = v7;
  v9 = v25;
  *(_QWORD *)(v5 + 32) = v25;
  *(_DWORD *)(v5 + 40) = v26;
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    v6[v10] = v5 + 24;
    v24 = 0;
    v25 = 0;
  }
  v12 = v27;
  v11 = v28;
  *(_QWORD *)(v5 + 56) = v28;
  v13 = v5 + 56;
  *(_QWORD *)(v5 + 48) = v12;
  v14 = v29;
  *(_QWORD *)(v5 + 64) = v29;
  if (v14)
  {
    v11[2] = v13;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 48) = v13;
  }
  *(_QWORD *)(v5 + 72) = v30;
  v4[2] = "md::RouteLineContext]";
  v4[3] = 20;
  v4[4] = v5;
  *v4 = &off_1E42B0E38;
  v4[1] = 0x8E4587A431F9C696;
  *a2 = v4;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v11);
  v15 = v24;
  if (v24)
  {
    do
    {
      v17 = v15;
      v15 = (_QWORD *)*v15;
      v18 = (std::__shared_weak_count *)v17[6];
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      operator delete(v17);
    }
    while (v15);
  }
  v16 = __p;
  __p = 0;
  if (v16)
    operator delete(v16);
}

void sub_19FCC0F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::RouteLineContext::~RouteLineContext((md::RouteLineContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a3 + 8) == 0x8E4587A431F9C696)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(v14, *v6, v8);
      v9 = md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(v7, v8);
      v11[0] = v14[0];
      v11[1] = v14[1];
      v12 = v9;
      v13 = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a3 + 8) == 0x8E4587A431F9C696)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(v14, *v6, v8);
      v9 = md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(v7, v8);
      v11[0] = v14[0];
      v11[1] = v14[1];
      v12 = v9;
      v13 = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a3 + 8) == 0x8E4587A431F9C696)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(v14, *v6, v8);
      v9 = md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(v7, v8);
      v11[0] = v14[0];
      v11[1] = v14[1];
      v12 = v9;
      v13 = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a3 + 8) == 0x8E4587A431F9C696)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(v14, *v6, v8);
      v9 = md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(v7, v8);
      v11[0] = v14[0];
      v11[1] = v14[1];
      v12 = v9;
      v13 = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a3 + 8) == 0x8E4587A431F9C696 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v7 = *(uint64_t **)(a2 + 8);
    v8 = *v7;
    v9 = v7[1];
    md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(v15, *v7, v9);
    v10 = md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(v8, v9);
    v12[0] = v15[0];
    v12[1] = v15[1];
    v13 = v10;
    v14 = v11;
    return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v12, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  return result;
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::RouteLineLogic::runBeforeLayout(uint64_t a1, id *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  double *v13;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  __double2 v23;
  __double2 v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  long double v40;
  long double v41;
  double v42;
  double v43;
  float v44;
  float v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  unsigned __int8 v49;
  _WORD *v50;
  _WORD *v51;
  uint64_t *v52;
  _WORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t j;
  uint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint8x8_t v121;
  uint64_t **v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  float v130;
  float v131;
  _BOOL8 v132;
  unint64_t v133;
  unint64_t v134;
  size_t prime;
  int8x8_t v136;
  unint64_t v137;
  uint8x8_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unsigned int v146;
  _BYTE *v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _BOOL4 v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  char *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  void *v187;
  _QWORD *v188;
  char *__p;
  char *v190;
  char *v191;
  void *v192[2];
  void *v193[2];
  int v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;

  v7 = *(_BYTE **)a3;
  v8 = *(uint64_t **)(a3 + 24);
  if (!*(_QWORD *)(*(_QWORD *)a3 + 40))
    goto LABEL_30;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(unsigned __int8 *)(v10 + 3776) - 1;
  v12 = v11 >= 3 && **(_BYTE **)(a3 + 8) == 0;
  if (!v12)
  {
    v13 = *(double **)(a3 + 32);
    v14 = *(double *)(v10 + 16);
    v15 = *(double *)(v10 + 24);
    v16 = tan(*(double *)(v10 + 8) * 0.5 + 0.785398163);
    v17 = v14 * 0.159154943 + 0.5;
    v18 = log(v16) * 0.159154943 + 0.5;
    v19 = exp(v18 * 6.28318531 + -3.14159265);
    v20 = atan(v19) * 2.0 + -1.57079633;
    v21 = fmod(v17 * 6.28318531, 6.28318531);
    v22 = fmod(v21 + 6.28318531, 6.28318531) + -3.14159265;
    v23 = __sincos_stret(v20);
    v24 = __sincos_stret(v22);
    if (v13
      && (v11 >= 3 ? (v25 = v13 + 1) : (v25 = v13 + 4),
          geo::Intersect::encloses<double>((double *)(v10 + 984), v25) && v7[168]))
    {
      if (*v7)
      {
        v26 = *(double *)(v10 + 496);
        v27 = *(double *)(v10 + 504);
        v28 = *(double *)(v10 + 512);
        if (v11 > 2)
          v29 = sqrt((v26 - v13[1]) * (v26 - v13[1]) + (v27 - v13[2]) * (v27 - v13[2]) + (v28 - v13[3]) * (v28 - v13[3]));
        else
          v29 = sqrt((v26 - v13[4]) * (v26 - v13[4]) + (v27 - v13[5]) * (v27 - v13[5]) + (v28 - v13[6]) * (v28 - v13[6]))
              * 0.0000000249532021;
        goto LABEL_23;
      }
      v30 = 1.0;
    }
    else
    {
      v30 = 1.0;
      if (*v7 && *(_BYTE *)(a1 + 216))
        v30 = *(double *)(a1 + 208);
    }
    v32 = *(double *)(v10 + 496);
    v31 = *(double *)(v10 + 504);
    v33 = *(double *)(v10 + 512);
    if (v11 > 2)
    {
      v29 = sqrt((v32 - v17) * (v32 - v17)+ (v31 - v18) * (v31 - v18)+ (v33 + v15 * -0.0000000249532021) * (v33 + v15 * -0.0000000249532021))* v30;
    }
    else
    {
      v34 = 6378137.0 / sqrt(v23.__sinval * v23.__sinval * -0.00669437999 + 1.0);
      v29 = v30
          * 0.0000000249532021
          * sqrt((v32 - (v34 + v15) * v23.__cosval * v24.__cosval) * (v32 - (v34 + v15) * v23.__cosval * v24.__cosval)+ (v31 - (v34 + v15) * v23.__cosval * v24.__sinval) * (v31 - (v34 + v15) * v23.__cosval * v24.__sinval)+ (v33 - (v15 + v34 * 0.99330562) * v23.__sinval) * (v33 - (v15 + v34 * 0.99330562) * v23.__sinval));
    }
    goto LABEL_23;
  }
  v29 = -*(double *)(v10 + 512) / fmin(*(double *)(v10 + 3104), -0.000001);
LABEL_23:
  v36 = *(double *)(v10 + 368);
  v35 = *(double *)(v10 + 376);
  if (v35 >= v36)
  {
    v42 = *(double *)(v10 + 456);
  }
  else
  {
    v37 = v35 * v36;
    v38 = v35 / v36;
    if (v37 <= 0.0)
      v39 = 1.0;
    else
      v39 = v38;
    v40 = tan(*(double *)(v10 + 456) * 0.5);
    v41 = atan(v39 * v40);
    v42 = v41 + v41;
  }
  objc_msgSend(*a2, "size");
  v44 = v42 / v43;
  v45 = v29 * v44;
  *((float *)a4 + 19) = v45;
LABEL_30:
  *((_BYTE *)a4 + 72) = 0;
  v46 = *v8;
  v47 = *(_WORD **)(v46 + 48);
  v48 = *(_WORD **)(v46 + 56);
  if (v47 != v48)
  {
    while (*v47 != 77)
    {
      v47 += 16;
      if (v47 == v48)
        goto LABEL_41;
    }
  }
  if (v47 == v48)
  {
LABEL_41:
    v54 = *a4;
    if (*a4 != *(_QWORD *)(a1 + 136))
    {
      v55 = *(_QWORD **)(a1 + 120);
      v56 = (_QWORD *)*v55;
      v57 = (_QWORD *)v55[1];
      if ((_QWORD *)*v55 != v57)
      {
        while (*v56 != 0xA89E774940B82160)
        {
          v56 += 5;
          if (v56 == v57)
            goto LABEL_55;
        }
      }
      if (v56 != v57)
      {
        *(_QWORD *)&v195 = 0xAB4154EC82453679;
        *((_QWORD *)&v195 + 1) = "md::RouteElevationSource]";
        v58 = v56[3];
        v59 = (std::__shared_weak_count *)v56[4];
        v196 = 24;
        v197 = v58;
        v198 = v59;
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(p_shared_owners);
          while (__stxr(v61 + 1, p_shared_owners));
        }
        geo::linear_map<gdc::TypeInfo,std::shared_ptr<void>,std::equal_to<gdc::TypeInfo>,std::allocator<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>,std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>>::insert_or_assign((uint64_t)v55, &v195);
        if (v59)
        {
          v62 = (unint64_t *)&v59->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
      }
LABEL_55:
      if (*(_QWORD *)(a1 + 168))
      {
        v64 = *(_QWORD **)(a1 + 160);
        while (v64)
        {
          v69 = v64;
          v64 = (_QWORD *)*v64;
          v70 = (std::__shared_weak_count *)v69[6];
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          operator delete(v69);
        }
        *(_QWORD *)(a1 + 160) = 0;
        v65 = *(_QWORD *)(a1 + 152);
        if (v65)
        {
          for (i = 0; i != v65; ++i)
            *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * i) = 0;
        }
        *(_QWORD *)(a1 + 168) = 0;
      }
      v68 = *(_QWORD **)(a1 + 192);
      v67 = (_QWORD *)(a1 + 192);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v68);
      *(v67 - 1) = v67;
      *v67 = 0;
      v67[1] = 0;
      v54 = *(v67 - 7);
    }
    *a4 = v54;
    return;
  }
  *(_OWORD *)v192 = 0u;
  *(_OWORD *)v193 = 0u;
  v194 = 1065353216;
  __p = 0;
  v190 = 0;
  v191 = 0;
  if ((v49 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v50 = *(_WORD **)(v46 + 48);
  v51 = *(_WORD **)(v46 + 56);
  v52 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v50 != v51)
  {
    v53 = v50;
    while (*v53 != 77)
    {
      v53 += 16;
      if (v53 == v51)
        goto LABEL_75;
    }
    if (v53 == v51)
    {
      v52 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v50 != 77)
      {
        v50 += 16;
        if (v50 == v51)
        {
          v50 = v51;
          break;
        }
      }
      v52 = (uint64_t *)(v50 + 4);
    }
  }
LABEL_75:
  v75 = (uint64_t *)*v52;
  v73 = v52 + 1;
  v74 = v75;
  if (v75 != v73)
  {
    do
    {
      v76 = v74[4];
      v77 = v74[5];
      *(_QWORD *)&v195 = v76;
      *((_QWORD *)&v195 + 1) = v77;
      if (v77)
      {
        v78 = (unint64_t *)(v77 + 8);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v192, (unsigned __int8 *)(v76 + 168), v76 + 168);
      v80 = v190;
      if (v190 >= v191)
      {
        v83 = __p;
        v84 = (v190 - __p) >> 4;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 60)
          abort();
        v86 = v191 - __p;
        if ((v191 - __p) >> 3 > v85)
          v85 = v86 >> 3;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
          v87 = 0xFFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v88 = (char *)operator new(16 * v87);
        v89 = &v88[16 * v84];
        v90 = *((_QWORD *)&v195 + 1);
        *(_OWORD *)v89 = v195;
        if (v90)
        {
          v91 = (unint64_t *)(v90 + 8);
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
          v80 = v190;
        }
        v4 = (uint64_t)(v89 + 16);
        if (v80 == __p)
        {
          __p = v89;
          v191 = &v88[16 * v87];
        }
        else
        {
          v93 = v80;
          do
          {
            v94 = *((_OWORD *)v93 - 1);
            v93 -= 16;
            *((_OWORD *)v89 - 1) = v94;
            v89 -= 16;
            *(_QWORD *)v93 = 0;
            *((_QWORD *)v93 + 1) = 0;
          }
          while (v93 != __p);
          __p = v89;
          v191 = &v88[16 * v87];
          do
          {
            v95 = (std::__shared_weak_count *)*((_QWORD *)v80 - 1);
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            v80 -= 16;
          }
          while (v80 != v83);
        }
        if (v83)
          operator delete(v83);
      }
      else
      {
        *(_QWORD *)v190 = v195;
        *((_QWORD *)v190 + 1) = v77;
        if (v77)
        {
          v81 = (unint64_t *)(v77 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v4 = (uint64_t)(v190 + 16);
      }
      v190 = (char *)v4;
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
      if (!*((_QWORD *)&v195 + 1))
        goto LABEL_114;
      v99 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
        v101 = (uint64_t *)v74[1];
        if (!v101)
        {
          do
          {
LABEL_118:
            v102 = (uint64_t *)v74[2];
            v12 = *v102 == (_QWORD)v74;
            v74 = v102;
          }
          while (!v12);
          goto LABEL_77;
        }
      }
      else
      {
LABEL_114:
        v101 = (uint64_t *)v74[1];
        if (!v101)
          goto LABEL_118;
      }
      do
      {
        v102 = v101;
        v101 = (uint64_t *)*v101;
      }
      while (v101);
LABEL_77:
      v74 = v102;
    }
    while (v102 != v73);
  }
  v103 = (unint64_t)v193[0];
  v104 = *(_QWORD *)(a1 + 160);
  v188 = (_QWORD *)(a1 + 160);
  if (v193[0])
    v105 = v104 == 0;
  else
    v105 = 1;
  if (!v105)
  {
    while (1)
    {
      v149 = *(unsigned __int8 *)(v103 + 17);
      v150 = *(_DWORD *)(v103 + 20);
      v151 = *(_DWORD *)(v103 + 24);
      v152 = *(unsigned __int8 *)(v103 + 16);
      v153 = *(unsigned __int8 *)(v104 + 17);
      v154 = *(_DWORD *)(v104 + 20);
      v155 = *(_DWORD *)(v104 + 24);
      v156 = *(unsigned __int8 *)(v104 + 16);
      v157 = *(std::__shared_weak_count **)(v104 + 48);
      if (v157)
      {
        v158 = (unint64_t *)&v157->__shared_owners_;
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      v163 = v152 == v156 && v149 == v153 && v150 == v154 && v151 == v155;
      if (v157)
      {
        v164 = (unint64_t *)&v157->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      if (!v163)
        break;
      v103 = *(_QWORD *)v103;
      v104 = *(_QWORD *)v104;
      if (!v103 || !v104)
        goto LABEL_126;
    }
LABEL_127:
    *((_BYTE *)a4 + 72) = 1;
    v106 = (uint64_t *)(a1 + 144);
    if (*(_QWORD *)(a1 + 168))
    {
      v107 = (_QWORD *)*v188;
      if (*v188)
      {
        do
        {
          v166 = v107;
          v107 = (_QWORD *)*v107;
          v167 = (std::__shared_weak_count *)v166[6];
          if (v167)
          {
            v168 = (unint64_t *)&v167->__shared_owners_;
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          operator delete(v166);
        }
        while (v107);
      }
      *(_QWORD *)(a1 + 160) = 0;
      v108 = *(_QWORD *)(a1 + 152);
      if (v108)
      {
        for (j = 0; j != v108; ++j)
          *(_QWORD *)(*v106 + 8 * j) = 0;
      }
      *(_QWORD *)(a1 + 168) = 0;
    }
    v110 = (uint64_t *)(a1 + 192);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 192));
    *(_QWORD *)(a1 + 184) = a1 + 192;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    v111 = __p;
    if (__p != v190)
    {
      while (1)
      {
        v112 = *(_QWORD *)v111;
        v113 = *(unsigned __int8 *)(*(_QWORD *)v111 + 168);
        v114 = *(unsigned __int8 *)(*(_QWORD *)v111 + 169);
        v115 = (v114
              - 0x61C8864680B583EBLL
              + ((v113 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v113 - 0x61C8864680B583EBLL) >> 2)) ^ (v113 - 0x61C8864680B583EBLL);
        v116 = *(int *)(*(_QWORD *)v111 + 172);
        v117 = *(int *)(*(_QWORD *)v111 + 176);
        v118 = (v116 - 0x61C8864680B583EBLL + (v115 << 6) + (v115 >> 2)) ^ v115;
        v119 = (v117 - 0x61C8864680B583EBLL + (v118 << 6) + (v118 >> 2)) ^ v118;
        v120 = *(_QWORD *)(a1 + 152);
        if (v120)
        {
          v121 = (uint8x8_t)vcnt_s8((int8x8_t)v120);
          v121.i16[0] = vaddlv_u8(v121);
          if (v121.u32[0] > 1uLL)
          {
            v4 = (v117 - 0x61C8864680B583EBLL + (v118 << 6) + (v118 >> 2)) ^ v118;
            if (v119 >= v120)
              v4 = v119 % v120;
          }
          else
          {
            v4 = v119 & (v120 - 1);
          }
          v122 = *(uint64_t ***)(*v106 + 8 * v4);
          if (v122)
          {
            v123 = *v122;
            if (v123)
            {
              if (v121.u32[0] < 2uLL)
              {
                while (1)
                {
                  v125 = v123[1];
                  if (v125 == v119)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v123 + 17), *((unsigned __int8 *)v123 + 16)) == __PAIR64__(v114, v113)
                      && *(uint64_t *)((char *)v123 + 20) == __PAIR64__(v117, v116))
                    {
                      goto LABEL_201;
                    }
                  }
                  else if ((v125 & (v120 - 1)) != v4)
                  {
                    goto LABEL_160;
                  }
                  v123 = (uint64_t *)*v123;
                  if (!v123)
                    goto LABEL_160;
                }
              }
              do
              {
                v124 = v123[1];
                if (v124 == v119)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v123 + 17), *((unsigned __int8 *)v123 + 16)) == __PAIR64__(v114, v113)
                    && *(uint64_t *)((char *)v123 + 20) == __PAIR64__(v117, v116))
                  {
                    goto LABEL_201;
                  }
                }
                else
                {
                  if (v124 >= v120)
                    v124 %= v120;
                  if (v124 != v4)
                    break;
                }
                v123 = (uint64_t *)*v123;
              }
              while (v123);
            }
          }
        }
LABEL_160:
        v126 = operator new(0x38uLL);
        *(_QWORD *)&v195 = v126;
        *((_QWORD *)&v195 + 1) = a1 + 160;
        *v126 = 0;
        v126[1] = v119;
        *((_WORD *)v126 + 8) = *(_WORD *)(v112 + 168);
        *(_QWORD *)((char *)v126 + 20) = *(_QWORD *)(v112 + 172);
        v126[5] = *(_QWORD *)v111;
        v127 = *((_QWORD *)v111 + 1);
        v126[6] = v127;
        if (v127)
        {
          v128 = (unint64_t *)(v127 + 8);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        LOBYTE(v196) = 1;
        v130 = (float)(unint64_t)(*(_QWORD *)(a1 + 168) + 1);
        v131 = *(float *)(a1 + 176);
        if (!v120 || (float)(v131 * (float)v120) < v130)
        {
          v132 = (v120 & (v120 - 1)) != 0;
          if (v120 < 3)
            v132 = 1;
          v133 = v132 | (2 * v120);
          v134 = vcvtps_u32_f32(v130 / v131);
          if (v133 <= v134)
            prime = v134;
          else
            prime = v133;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v136 = *(int8x8_t *)(a1 + 152);
          if (prime > *(_QWORD *)&v136)
            goto LABEL_175;
          if (prime < *(_QWORD *)&v136)
          {
            v137 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 168) / *(float *)(a1 + 176));
            if (*(_QWORD *)&v136 < 3uLL
              || (v138 = (uint8x8_t)vcnt_s8(v136), v138.i16[0] = vaddlv_u8(v138), v138.u32[0] > 1uLL))
            {
              v137 = std::__next_prime(v137);
            }
            else
            {
              v139 = 1 << -(char)__clz(v137 - 1);
              if (v137 >= 2)
                v137 = v139;
            }
            if (prime <= v137)
              prime = v137;
            if (prime < *(_QWORD *)&v136)
LABEL_175:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 144, prime);
          }
          v120 = *(_QWORD *)(a1 + 152);
          if ((v120 & (v120 - 1)) != 0)
          {
            if (v119 >= v120)
              v4 = v119 % v120;
            else
              v4 = v119;
          }
          else
          {
            v4 = (v120 - 1) & v119;
          }
        }
        v140 = *v106;
        v141 = *(_QWORD **)(*v106 + 8 * v4);
        if (v141)
        {
          *v126 = *v141;
        }
        else
        {
          *v126 = *v188;
          *v188 = v126;
          *(_QWORD *)(v140 + 8 * v4) = v188;
          if (!*v126)
            goto LABEL_200;
          v142 = *(_QWORD *)(*v126 + 8);
          if ((v120 & (v120 - 1)) != 0)
          {
            if (v142 >= v120)
              v142 %= v120;
          }
          else
          {
            v142 &= v120 - 1;
          }
          v141 = (_QWORD *)(*v106 + 8 * v142);
        }
        *v141 = v126;
LABEL_200:
        ++*(_QWORD *)(a1 + 168);
        LODWORD(v114) = *(unsigned __int8 *)(*(_QWORD *)v111 + 169);
LABEL_201:
        v143 = *v110;
        v144 = (_QWORD *)(a1 + 192);
        v145 = (_QWORD *)(a1 + 192);
        if (*v110)
        {
          while (1)
          {
            while (1)
            {
              v145 = (_QWORD *)v143;
              v146 = *(unsigned __int8 *)(v143 + 25);
              if (v114 <= v146)
                break;
              v143 = *v145;
              v144 = v145;
              if (!*v145)
                goto LABEL_208;
            }
            if (v146 <= v114)
              break;
            v143 = v145[1];
            if (!v143)
            {
              v144 = v145 + 1;
              goto LABEL_208;
            }
          }
        }
        else
        {
LABEL_208:
          v147 = operator new(0x20uLL);
          v147[25] = v114;
          *(_QWORD *)v147 = 0;
          *((_QWORD *)v147 + 1) = 0;
          *((_QWORD *)v147 + 2) = v145;
          *v144 = v147;
          v148 = **(_QWORD **)(a1 + 184);
          if (v148)
          {
            *(_QWORD *)(a1 + 184) = v148;
            v147 = (_BYTE *)*v144;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 192), (uint64_t *)v147);
          ++*(_QWORD *)(a1 + 200);
        }
        v111 += 16;
        if (v111 == v190)
          goto LABEL_240;
      }
    }
    goto LABEL_240;
  }
LABEL_126:
  if (v103 | v104)
    goto LABEL_127;
LABEL_240:
  v170 = *(_QWORD *)(a1 + 128);
  if (*a4 == v170)
  {
    v170 = *a4;
  }
  else
  {
    v171 = *(_QWORD **)(a1 + 120);
    v172 = (_QWORD *)*v171;
    v173 = (_QWORD *)v171[1];
    if ((_QWORD *)*v171 != v173)
    {
      while (*v172 != 0xD91D59D9773C991ALL)
      {
        v172 += 5;
        if (v172 == v173)
          goto LABEL_256;
      }
    }
    if (v172 != v173)
    {
      *(_QWORD *)&v195 = 0xAB4154EC82453679;
      *((_QWORD *)&v195 + 1) = "md::RouteElevationSource]";
      v174 = v172[3];
      v175 = (std::__shared_weak_count *)v172[4];
      v196 = 24;
      v197 = v174;
      v198 = v175;
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      geo::linear_map<gdc::TypeInfo,std::shared_ptr<void>,std::equal_to<gdc::TypeInfo>,std::allocator<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>,std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>>::insert_or_assign((uint64_t)v171, &v195);
      if (v175)
      {
        v178 = (unint64_t *)&v175->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      v170 = *(_QWORD *)(a1 + 128);
    }
  }
LABEL_256:
  *a4 = v170;
  if (a4 + 1 != (uint64_t *)(a1 + 144))
  {
    *((_DWORD *)a4 + 10) = *(_DWORD *)(a1 + 176);
    std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,void *> *>>(a4 + 1, *(uint64_t **)(a1 + 160));
    std::__tree<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::__assign_multi<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>((uint64_t **)a4 + 6, *(_QWORD **)(a1 + 184), (_QWORD *)(a1 + 192));
  }
  v180 = __p;
  if (__p)
  {
    v181 = v190;
    if (v190 != __p)
    {
      do
      {
        v182 = (std::__shared_weak_count *)*((_QWORD *)v181 - 1);
        if (v182)
        {
          v183 = (unint64_t *)&v182->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        v181 -= 16;
      }
      while (v181 != __p);
      v180 = __p;
    }
    operator delete(v180);
  }
  v185 = v193[0];
  if (v193[0])
  {
    do
    {
      v186 = (_QWORD *)*v185;
      operator delete(v185);
      v185 = v186;
    }
    while (v186);
  }
  v187 = v192[0];
  v192[0] = 0;
  if (v187)
    operator delete(v187);
}

void sub_19FCC2220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)va2);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v4 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v9[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v6 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v13 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x8BD499FBD96FBB9ELL)
      {
        if (v15[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0x8BD499FBD96FBB9ELL)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v7 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v19 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v21[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x1AF456233693CD46)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x1AF456233693CD46)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v25 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x99BED48DEFBBD82BLL)
      {
        if (v27[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0x99BED48DEFBBD82BLL)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x9AEE7E062376E454;
    if (a2 <= 0x9AEE7E062376E454)
      v3 = 0x9AEE7E062376E454 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x9AEE7E062376E454;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x9AEE7E062376E454)
      {
        if (v6[2] == 0x9AEE7E062376E454)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x9AEE7E062376E454)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x9AEE7E062376E454)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x9AEE7E062376E454)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x13043386C0978CC2;
    if (a2 <= 0x13043386C0978CC2)
      v11 = 0x13043386C0978CC2 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x13043386C0978CC2;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x13043386C0978CC2)
      {
        if (v13[2] == 0x13043386C0978CC2)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x13043386C0978CC2)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x13043386C0978CC2)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x13043386C0978CC2)
    return v10;
  return v10;
}

void md::RouteLineContext::~RouteLineContext(md::RouteLineContext *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
}

void gdc::ManagedObjectHolder<md::RouteLineContext>::~ManagedObjectHolder(_QWORD *a1)
{
  gdc::ManagedObjectHolder<md::RouteLineContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::RouteLineContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::RouteLineContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E42B0E38;
  v2 = a1[4];
  if (v2)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v2 + 56));
    v3 = *(_QWORD **)(v2 + 24);
    while (v3)
    {
      v6 = v3;
      v3 = (_QWORD *)*v3;
      v7 = (std::__shared_weak_count *)v6[6];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      operator delete(v6);
    }
    v4 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C408B8AFFAALL);
  }
  return a1;
}

float md::ARContext::planeHeight(md::ARContext *this)
{
  void *v2;
  int v3;
  void *v4;
  float v5;
  float v6;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "arOverrideDefaults");

  if (!v3)
    return *((float *)this + 2);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "arVirtualPlaneHeight");
  v6 = v5;

  return v6;
}

void sub_19FCC2C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::MuninJunction::~MuninJunction(md::MuninJunction *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E428E0C8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E428E0C8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninJunction::addRoad(md::MuninJunction *this, const md::MuninRoadEdge *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  int64x2_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  md::MuninJunction *v51;

  v5 = (char *)*((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*((_QWORD *)this + 5);
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_61;
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (char *)(v14 + 1);
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_65;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_65;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)*((_QWORD *)this + 5);
      }
    }
    *((_QWORD *)this + 5) = v14;
    *((_QWORD *)this + 6) = v7;
    *((_QWORD *)this + 7) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  *((_QWORD *)this + 6) = v7;
  *((_BYTE *)this + 68) += *((_BYTE *)a2 + 112);
  v23 = (char *)*((_QWORD *)this + 5);
  v24 = v7 - v23;
  if (v7 == v23)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_34;
  }
  if (v24 < 0)
LABEL_61:
    abort();
  v25 = (int64x2_t *)operator new(v7 - v23);
  bzero(v25, v7 - v23);
  v26 = (uint64_t *)((char *)v25->i64 + v24);
  if ((unint64_t)(v24 - 8) >= 0x18)
  {
    v29 = ((unint64_t)(v24 - 8) >> 3) + 1;
    v27 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    v30 = (int64x2_t)xmmword_19FFB2E40;
    v31 = v25 + 1;
    v32 = vdupq_n_s64(2uLL);
    v33 = vdupq_n_s64(4uLL);
    v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31[-1] = v30;
      *v31 = vaddq_s64(v30, v32);
      v30 = vaddq_s64(v30, v33);
      v31 += 2;
      v34 -= 4;
    }
    while (v34);
    if (v29 == v27)
      goto LABEL_34;
    v28 = &v25->i64[v29 & 0x3FFFFFFFFFFFFFFCLL];
  }
  else
  {
    v27 = 0;
    v28 = (uint64_t *)v25;
  }
  do
    *v28++ = v27++;
  while (v28 != v26);
LABEL_34:
  v51 = this;
  v35 = 126 - 2 * __clz(((char *)v26 - (char *)v25) >> 3);
  if (v7 == v23)
    v36 = 0;
  else
    v36 = v35;
  std::__introsort<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *,false>(v25->i64, v26, (uint64_t *)&v51, v36, 1);
  *((_BYTE *)this + 69) = 0;
  if (v26 != (uint64_t *)v25)
  {
    v37 = 0;
    v38 = 0;
    v39 = *((_QWORD *)this + 5);
    v40 = (uint64_t *)v25;
    while (1)
    {
      v41 = *(_QWORD *)(v39 + 8 * *v40);
      if (!*(_BYTE *)(v41 + 112))
        goto LABEL_58;
      if (!v38)
        goto LABEL_40;
      v42 = *(unsigned __int8 *)(v41 + 39);
      if ((v42 & 0x80u) == 0)
        v43 = *(unsigned __int8 *)(v41 + 39);
      else
        v43 = *(_QWORD *)(v41 + 24);
      v44 = *(unsigned __int8 *)(v38 + 39);
      v45 = (char)v44;
      if ((v44 & 0x80u) != 0)
        v44 = *(_QWORD *)(v38 + 24);
      if (v43 != v44)
        goto LABEL_40;
      v46 = (const void **)(v41 + 16);
      v49 = *(_QWORD *)(v38 + 16);
      v47 = v38 + 16;
      v48 = v49;
      v50 = (unsigned __int8 *)(v45 >= 0 ? v47 : v48);
      if ((v42 & 0x80) == 0)
        break;
      if (memcmp(*v46, v50, *(_QWORD *)(v41 + 24)))
        goto LABEL_40;
LABEL_41:
      ++v40;
      v38 = v41;
      if (v40 == v26)
        goto LABEL_58;
    }
    if (!*(_BYTE *)(v41 + 39))
      goto LABEL_41;
    while (*(unsigned __int8 *)v46 == *v50)
    {
      v46 = (const void **)((char *)v46 + 1);
      ++v50;
      if (!--v42)
        goto LABEL_41;
    }
LABEL_40:
    *((_BYTE *)this + 69) = ++v37;
    goto LABEL_41;
  }
LABEL_58:
  if (v25)
    operator delete(v25);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *,false>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *k;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void *v33;
  unint64_t v34;
  int v35;
  const void *v36;
  unint64_t v37;
  size_t v38;
  int v39;
  uint64_t *m;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  const void *v44;
  int v45;
  const void *v46;
  size_t v47;
  int v48;
  const void *v49;
  size_t v50;
  size_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  int v60;
  const void *v61;
  size_t v62;
  size_t v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  int v72;
  const void *v73;
  size_t v74;
  int v75;
  const void *v76;
  size_t v77;
  size_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  const void *v82;
  const void *v83;
  int v84;
  const void *v85;
  size_t v86;
  char v87;
  const void *v88;
  size_t v89;
  size_t v90;
  int v91;
  BOOL v92;
  BOOL v93;
  uint64_t v94;
  const void *v95;
  const void *v96;
  int v97;
  const void *v98;
  size_t v99;
  int v100;
  const void *v101;
  size_t v102;
  size_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  const void *v108;
  size_t v109;
  uint64_t v110;
  const void *v111;
  const void *v112;
  int v113;
  const void *v114;
  size_t v115;
  size_t v116;
  int v117;
  const void *v118;
  size_t v119;
  int v120;
  const void *v121;
  size_t v122;
  size_t v123;
  uint64_t v124;
  int v125;
  const void *v126;
  size_t v127;
  uint64_t v128;
  const void *v129;
  const void *v130;
  int v131;
  const void *v132;
  size_t v133;
  size_t v134;
  uint64_t *j;
  uint64_t v136;
  int v137;
  const void *v138;
  size_t v139;
  const void *v140;
  uint64_t v141;
  const void *v142;
  int v143;
  const void *v144;
  size_t v145;
  size_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  const void *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  const void *v157;
  unint64_t v158;
  size_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  const void *v163;
  size_t v164;
  uint64_t v165;
  const void *v166;
  const void *v167;
  int v168;
  const void *v169;
  size_t v170;
  size_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  const void *v193;
  size_t v194;
  uint64_t v195;
  const void *v196;
  const void *v197;
  int v198;
  const void *v199;
  size_t v200;
  size_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  const void *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  const void *v212;
  unint64_t v213;
  size_t v214;
  int64_t v215;
  uint64_t *v216;
  int64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int64_t v226;
  uint64_t v227;
  const void *v228;
  const void *v229;
  int v230;
  const void *v231;
  size_t v232;
  int v233;
  const void *v234;
  size_t v235;
  size_t v236;
  int64_t v237;
  uint64_t v238;
  const void *v239;
  const void *v240;
  int v241;
  const void *v242;
  size_t v243;
  uint64_t v244;
  const void *v245;
  const void *v246;
  int v247;
  const void *v248;
  size_t v249;
  size_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const void *v260;
  const void *v261;
  int v262;
  const void *v263;
  size_t v264;
  char v265;
  const void *v266;
  size_t v267;
  size_t v268;
  uint64_t v269;
  const void *v270;
  const void *v271;
  int v272;
  const void *v273;
  size_t v274;
  uint64_t v275;
  const void *v276;
  const void *v277;
  int v278;
  const void *v279;
  size_t v280;
  size_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const void *v296;
  const void *v297;
  int v298;
  const void *v299;
  size_t v300;
  uint64_t v301;
  const void *v302;
  const void *v303;
  int v304;
  const void *v305;
  size_t v306;
  size_t v307;
  uint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  const void *v319;
  const void *v320;
  int v321;
  const void *v322;
  size_t v323;
  int v324;
  const void *v325;
  size_t v326;
  size_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  const void *v334;
  const void *v335;
  int v336;
  const void *v337;
  size_t v338;
  char v339;
  const void *v340;
  size_t v341;
  size_t v342;
  uint64_t v343;
  const void *v344;
  const void *v345;
  int v346;
  const void *v347;
  size_t v348;
  uint64_t v349;
  const void *v350;
  const void *v351;
  int v352;
  const void *v353;
  size_t v354;
  size_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  const void *v364;
  size_t v365;
  uint64_t v366;
  const void *v367;
  const void *v368;
  int v369;
  const void *v370;
  size_t v371;
  size_t v372;
  int v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  const void *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  const void *v384;
  unint64_t v385;
  size_t v386;
  int64_t v387;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v403;
  uint64_t *v404;
  uint64_t v405;
  int v406;
  const void *v407;
  uint64_t *v408;
  int v409;
  int64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;

  v6 = (uint64_t)a3;
  v7 = result;
LABEL_2:
  v8 = a2;
  v394 = a2 - 1;
  i = v7;
  while (2)
  {
    v10 = i;
    v11 = (char *)v8 - (char *)i;
    v12 = v8 - i;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v173 = *v394;
        v174 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        v175 = *(_QWORD *)(v174 + 8 * *v394);
        v176 = *i;
        v177 = *(_QWORD *)(v174 + 8 * *i);
        if ((*(_BYTE *)(v175 + 112) != 0) != (*(_BYTE *)(v177 + 112) != 0))
        {
          if (!*(_BYTE *)(v175 + 112))
            return result;
        }
        else
        {
          v345 = *(const void **)(v175 + 16);
          v343 = v175 + 16;
          v344 = v345;
          v346 = *(char *)(v343 + 23);
          if (v346 >= 0)
            v347 = (const void *)v343;
          else
            v347 = v344;
          if (v346 >= 0)
            v348 = *(unsigned __int8 *)(v343 + 23);
          else
            v348 = *(_QWORD *)(v343 + 8);
          v351 = *(const void **)(v177 + 16);
          v349 = v177 + 16;
          v350 = v351;
          v352 = *(char *)(v349 + 23);
          if (v352 >= 0)
            v353 = (const void *)v349;
          else
            v353 = v350;
          if (v352 >= 0)
            v354 = *(unsigned __int8 *)(v349 + 23);
          else
            v354 = *(_QWORD *)(v349 + 8);
          if (v354 >= v348)
            v355 = v348;
          else
            v355 = v354;
          result = (uint64_t *)memcmp(v347, v353, v355);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v348 >= v354)
          {
            return result;
          }
        }
        *i = v173;
        *v394 = v176;
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(i, i + 1, v394, *(_QWORD *)(*(_QWORD *)v6 + 40));
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(i, i + 1, i + 2, v394, v6);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *,0>(i, i + 1, i + 2, i + 3, v394, v6);
      default:
        v403 = i;
        if (v11 <= 191)
        {
          v178 = i + 1;
          v179 = i == v8 || v178 == v8;
          v180 = v179;
          if ((a5 & 1) != 0)
          {
            if ((v180 & 1) != 0)
              return result;
            v181 = 0;
            v182 = *(_QWORD *)(*(_QWORD *)v6 + 40);
            v183 = v10;
            while (1)
            {
              v186 = v183;
              v183 = v178;
              v187 = *v186;
              v185 = v186[1];
              v188 = *(_QWORD *)(v182 + 8 * v185);
              v189 = *(unsigned __int8 *)(v188 + 112);
              v190 = *(_QWORD *)(v182 + 8 * *v186);
              if ((*(_BYTE *)(v188 + 112) != 0) != (*(_BYTE *)(v190 + 112) != 0))
              {
                if (!*(_BYTE *)(v188 + 112))
                  goto LABEL_332;
              }
              else
              {
                v191 = v186[1];
                v192 = *(char *)(v188 + 39);
                if (v192 >= 0)
                  v193 = (const void *)(v188 + 16);
                else
                  v193 = *(const void **)(v188 + 16);
                if (v192 >= 0)
                  v194 = *(unsigned __int8 *)(v188 + 39);
                else
                  v194 = *(_QWORD *)(v188 + 24);
                v197 = *(const void **)(v190 + 16);
                v195 = v190 + 16;
                v196 = v197;
                v198 = *(char *)(v195 + 23);
                if (v198 >= 0)
                  v199 = (const void *)v195;
                else
                  v199 = v196;
                if (v198 >= 0)
                  v200 = *(unsigned __int8 *)(v195 + 23);
                else
                  v200 = *(_QWORD *)(v195 + 8);
                if (v200 >= v194)
                  v201 = v194;
                else
                  v201 = v200;
                result = (uint64_t *)memcmp(v193, v199, v201);
                if ((_DWORD)result)
                {
                  v185 = v191;
                  if ((result & 0x80000000) == 0)
                    goto LABEL_332;
                }
                else
                {
                  v185 = v191;
                  if (v194 >= v200)
                    goto LABEL_332;
                }
              }
              v186[1] = v187;
              v184 = v403;
              if (v186 == v403)
                goto LABEL_331;
              v395 = v185;
              v399 = v183;
              v202 = *(unsigned __int8 *)(*(_QWORD *)(v182 + 8 * v185) + 112);
              v405 = v181;
              while (1)
              {
                v203 = *(uint64_t *)((char *)v403 + v181 - 8);
                v204 = *(_QWORD *)(v182 + 8 * v203);
                if ((v202 != 0) != (*(_BYTE *)(v204 + 112) != 0))
                {
                  if (!v189)
                    goto LABEL_379;
                  goto LABEL_358;
                }
                v205 = *(_BYTE *)(v188 + 39);
                v206 = v205 >= 0 ? (const void *)(v188 + 16) : *(const void **)(v188 + 16);
                v207 = v205 >= 0 ? *(unsigned __int8 *)(v188 + 39) : *(_QWORD *)(v188 + 24);
                v210 = *(_QWORD *)(v204 + 16);
                v208 = v204 + 16;
                v209 = v210;
                v211 = *(char *)(v208 + 23);
                v212 = (const void *)(v211 >= 0 ? v208 : v209);
                v213 = v211 >= 0 ? *(unsigned __int8 *)(v208 + 23) : *(_QWORD *)(v208 + 8);
                v214 = v213 >= v207 ? v207 : v213;
                result = (uint64_t *)memcmp(v206, v212, v214);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) == 0)
                {
                  v184 = (uint64_t *)((char *)v403 + v181);
                  goto LABEL_330;
                }
LABEL_358:
                --v186;
                *(uint64_t *)((char *)v403 + v181) = v203;
                v181 -= 8;
                if (!v181)
                {
                  v184 = v403;
                  goto LABEL_330;
                }
              }
              if (v207 < v213)
                goto LABEL_358;
LABEL_379:
              v184 = v186;
LABEL_330:
              v181 = v405;
              v185 = v395;
              v183 = v399;
LABEL_331:
              *v184 = v185;
LABEL_332:
              v178 = v183 + 1;
              v181 += 8;
              if (v183 + 1 == a2)
                return result;
            }
          }
          if ((v180 & 1) != 0)
            return result;
          v356 = *(_QWORD *)(*(_QWORD *)v6 + 40);
          while (1)
          {
            v357 = v10;
            v404 = v178;
            v359 = *v10;
            v358 = v10[1];
            v360 = *(_QWORD *)(v356 + 8 * v358);
            v361 = *(unsigned __int8 *)(v360 + 112);
            v362 = *(_QWORD *)(v356 + 8 * *v10);
            if ((*(_BYTE *)(v360 + 112) != 0) != (*(_BYTE *)(v362 + 112) != 0))
            {
              if (!*(_BYTE *)(v360 + 112))
                goto LABEL_585;
            }
            else
            {
              v363 = *(char *)(v360 + 39);
              if (v363 >= 0)
                v364 = (const void *)(v360 + 16);
              else
                v364 = *(const void **)(v360 + 16);
              if (v363 >= 0)
                v365 = *(unsigned __int8 *)(v360 + 39);
              else
                v365 = *(_QWORD *)(v360 + 24);
              v368 = *(const void **)(v362 + 16);
              v366 = v362 + 16;
              v367 = v368;
              v369 = *(char *)(v366 + 23);
              if (v369 >= 0)
                v370 = (const void *)v366;
              else
                v370 = v367;
              if (v369 >= 0)
                v371 = *(unsigned __int8 *)(v366 + 23);
              else
                v371 = *(_QWORD *)(v366 + 8);
              if (v371 >= v365)
                v372 = v365;
              else
                v372 = v371;
              result = (uint64_t *)memcmp(v364, v370, v372);
              if ((_DWORD)result)
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_585;
              }
              else if (v365 >= v371)
              {
                goto LABEL_585;
              }
            }
            v413 = v358;
            v373 = *(unsigned __int8 *)(*(_QWORD *)(v356 + 8 * v358) + 112);
            do
            {
              while (1)
              {
                while (1)
                {
                  v374 = v357;
                  v375 = *--v357;
                  v357[2] = v359;
                  v359 = v375;
                  v376 = *(_QWORD *)(v356 + 8 * v375);
                  if ((v373 != 0) == (*(_BYTE *)(v376 + 112) != 0))
                    break;
                  if (!v361)
                    goto LABEL_584;
                }
                v377 = *(char *)(v360 + 39);
                v378 = v377 >= 0 ? (const void *)(v360 + 16) : *(const void **)(v360 + 16);
                v379 = v377 >= 0 ? *(unsigned __int8 *)(v360 + 39) : *(_QWORD *)(v360 + 24);
                v382 = *(_QWORD *)(v376 + 16);
                v380 = v376 + 16;
                v381 = v382;
                v383 = *(char *)(v380 + 23);
                v384 = (const void *)(v383 >= 0 ? v380 : v381);
                v385 = v383 >= 0 ? *(unsigned __int8 *)(v380 + 23) : *(_QWORD *)(v380 + 8);
                v386 = v385 >= v379 ? v379 : v385;
                result = (uint64_t *)memcmp(v378, v384, v386);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) == 0)
                  goto LABEL_584;
              }
            }
            while (v379 < v385);
LABEL_584:
            *v374 = v413;
LABEL_585:
            v10 = v404;
            v178 = v404 + 1;
            if (v404 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (i == v8)
            return result;
          v215 = (v12 - 2) >> 1;
          v389 = *(_QWORD *)v6;
          v410 = v215;
          while (1)
          {
            v217 = v215;
            if (v410 < v215)
              goto LABEL_384;
            v218 = (2 * v215) | 1;
            v216 = &v10[v218];
            v219 = 2 * v215 + 2;
            v220 = *(_QWORD *)(v389 + 40);
            v400 = v220;
            if (v219 < (uint64_t)v12)
            {
              v221 = *(_QWORD *)(v220 + 8 * *v216);
              v222 = *(_QWORD *)(v220 + 8 * v216[1]);
              if ((*(_BYTE *)(v221 + 112) != 0) != (*(_BYTE *)(v222 + 112) != 0))
              {
                if (!*(_BYTE *)(v221 + 112))
                  goto LABEL_390;
LABEL_389:
                ++v216;
                v218 = v219;
                goto LABEL_390;
              }
              v237 = v217;
              v240 = *(const void **)(v221 + 16);
              v238 = v221 + 16;
              v239 = v240;
              v241 = *(char *)(v238 + 23);
              if (v241 >= 0)
                v242 = (const void *)v238;
              else
                v242 = v239;
              if (v241 >= 0)
                v243 = *(unsigned __int8 *)(v238 + 23);
              else
                v243 = *(_QWORD *)(v238 + 8);
              v246 = *(const void **)(v222 + 16);
              v244 = v222 + 16;
              v245 = v246;
              v247 = *(char *)(v244 + 23);
              if (v247 >= 0)
                v248 = (const void *)v244;
              else
                v248 = v245;
              if (v247 >= 0)
                v249 = *(unsigned __int8 *)(v244 + 23);
              else
                v249 = *(_QWORD *)(v244 + 8);
              if (v249 >= v243)
                v250 = v243;
              else
                v250 = v249;
              result = (uint64_t *)memcmp(v242, v248, v250);
              if ((_DWORD)result)
              {
                v217 = v237;
                v220 = v400;
                if ((result & 0x80000000) != 0)
                  goto LABEL_389;
              }
              else
              {
                v217 = v237;
                v220 = v400;
                if (v243 < v249)
                  goto LABEL_389;
              }
            }
LABEL_390:
            v223 = *v216;
            v224 = *(_QWORD *)(v220 + 8 * *v216);
            v225 = *(_QWORD *)(v220 + 8 * v10[v217]);
            v406 = *(unsigned __int8 *)(v225 + 112);
            v391 = v10[v217];
            if ((*(_BYTE *)(v224 + 112) != 0) != (v406 != 0))
            {
              if (!*(_BYTE *)(v224 + 112))
                goto LABEL_430;
            }
            else
            {
              v226 = v217;
              v229 = *(const void **)(v224 + 16);
              v227 = v224 + 16;
              v228 = v229;
              v230 = *(char *)(v227 + 23);
              if (v230 >= 0)
                v231 = (const void *)v227;
              else
                v231 = v228;
              if (v230 >= 0)
                v232 = *(unsigned __int8 *)(v227 + 23);
              else
                v232 = *(_QWORD *)(v227 + 8);
              v233 = *(char *)(v225 + 39);
              if (v233 >= 0)
                v234 = (const void *)(v225 + 16);
              else
                v234 = *(const void **)(v225 + 16);
              if (v233 >= 0)
                v235 = *(unsigned __int8 *)(v225 + 39);
              else
                v235 = *(_QWORD *)(v225 + 24);
              if (v235 >= v232)
                v236 = v232;
              else
                v236 = v235;
              result = (uint64_t *)memcmp(v231, v234, v236);
              if ((_DWORD)result)
              {
                v217 = v226;
                v220 = v400;
                if ((result & 0x80000000) == 0)
                  goto LABEL_430;
              }
              else
              {
                v217 = v226;
                v220 = v400;
                if (v232 >= v235)
                {
LABEL_430:
                  v387 = v217;
                  v10[v217] = v223;
                  if (v410 >= v218)
                  {
                    v396 = *a3;
                    while (1)
                    {
                      v251 = v216;
                      v252 = 2 * v218;
                      v218 = (2 * v218) | 1;
                      v216 = &v10[v218];
                      v253 = v252 + 2;
                      if (v252 + 2 >= (uint64_t)v12)
                        goto LABEL_438;
                      v254 = *(_QWORD *)(v396 + 40);
                      v255 = *(_QWORD *)(v254 + 8 * *v216);
                      v256 = *(_QWORD *)(v254 + 8 * v216[1]);
                      if ((*(_BYTE *)(v255 + 112) != 0) != (*(_BYTE *)(v256 + 112) != 0))
                        break;
                      v271 = *(const void **)(v255 + 16);
                      v269 = v255 + 16;
                      v270 = v271;
                      v272 = *(char *)(v269 + 23);
                      if (v272 >= 0)
                        v273 = (const void *)v269;
                      else
                        v273 = v270;
                      if (v272 >= 0)
                        v274 = *(unsigned __int8 *)(v269 + 23);
                      else
                        v274 = *(_QWORD *)(v269 + 8);
                      v277 = *(const void **)(v256 + 16);
                      v275 = v256 + 16;
                      v276 = v277;
                      v278 = *(char *)(v275 + 23);
                      if (v278 >= 0)
                        v279 = (const void *)v275;
                      else
                        v279 = v276;
                      if (v278 >= 0)
                        v280 = *(unsigned __int8 *)(v275 + 23);
                      else
                        v280 = *(_QWORD *)(v275 + 8);
                      if (v280 >= v274)
                        v281 = v274;
                      else
                        v281 = v280;
                      result = (uint64_t *)memcmp(v273, v279, v281);
                      if ((_DWORD)result)
                      {
                        v10 = v403;
                        v220 = v400;
                        if ((result & 0x80000000) != 0)
                          goto LABEL_437;
                      }
                      else
                      {
                        v92 = v274 >= v280;
                        v10 = v403;
                        v220 = v400;
                        if (!v92)
                          goto LABEL_437;
                      }
LABEL_438:
                      v257 = *v216;
                      v258 = *(_QWORD *)(v220 + 8 * *v216);
                      if ((*(_BYTE *)(v258 + 112) != 0) != (v406 != 0))
                      {
                        if (*(_BYTE *)(v258 + 112))
                          goto LABEL_382;
                      }
                      else
                      {
                        v261 = *(const void **)(v258 + 16);
                        v259 = v258 + 16;
                        v260 = v261;
                        v262 = *(char *)(v259 + 23);
                        if (v262 >= 0)
                          v263 = (const void *)v259;
                        else
                          v263 = v260;
                        if (v262 >= 0)
                          v264 = *(unsigned __int8 *)(v259 + 23);
                        else
                          v264 = *(_QWORD *)(v259 + 8);
                        v265 = *(_BYTE *)(v225 + 39);
                        if (v265 >= 0)
                          v266 = (const void *)(v225 + 16);
                        else
                          v266 = *(const void **)(v225 + 16);
                        if (v265 >= 0)
                          v267 = *(unsigned __int8 *)(v225 + 39);
                        else
                          v267 = *(_QWORD *)(v225 + 24);
                        if (v267 >= v264)
                          v268 = v264;
                        else
                          v268 = v267;
                        result = (uint64_t *)memcmp(v263, v266, v268);
                        if ((_DWORD)result)
                        {
                          v10 = v403;
                          v220 = v400;
                          if ((result & 0x80000000) != 0)
                            goto LABEL_382;
                        }
                        else
                        {
                          v92 = v264 >= v267;
                          v10 = v403;
                          v220 = v400;
                          if (!v92)
                          {
LABEL_382:
                            v216 = v251;
                            goto LABEL_383;
                          }
                        }
                      }
                      *v251 = v257;
                      if (v410 < v218)
                        goto LABEL_383;
                    }
                    if (!*(_BYTE *)(v255 + 112))
                      goto LABEL_438;
LABEL_437:
                    ++v216;
                    v218 = v253;
                    goto LABEL_438;
                  }
LABEL_383:
                  *v216 = v391;
                  v217 = v387;
                }
              }
            }
LABEL_384:
            v215 = v217 - 1;
            if (!v217)
            {
              v282 = (unint64_t)v11 >> 3;
              v283 = a3;
              v397 = *a3;
              while (1)
              {
                v286 = 0;
                v411 = *v10;
                v287 = v10;
                v288 = *v283;
                do
                {
                  v289 = v287;
                  v287 += v286 + 1;
                  v290 = 2 * v286;
                  v286 = (2 * v286) | 1;
                  v291 = v290 + 2;
                  if (v290 + 2 < v282)
                  {
                    v292 = *(_QWORD *)(v288 + 40);
                    v293 = *(_QWORD *)(v292 + 8 * *v287);
                    v294 = *(_QWORD *)(v292 + 8 * v287[1]);
                    if ((*(_BYTE *)(v293 + 112) != 0) != (*(_BYTE *)(v294 + 112) != 0))
                    {
                      if (!*(_BYTE *)(v293 + 112))
                        goto LABEL_489;
LABEL_488:
                      ++v287;
                      v286 = v291;
                      goto LABEL_489;
                    }
                    v297 = *(const void **)(v293 + 16);
                    v295 = v293 + 16;
                    v296 = v297;
                    v298 = *(char *)(v295 + 23);
                    if (v298 >= 0)
                      v299 = (const void *)v295;
                    else
                      v299 = v296;
                    if (v298 >= 0)
                      v300 = *(unsigned __int8 *)(v295 + 23);
                    else
                      v300 = *(_QWORD *)(v295 + 8);
                    v303 = *(const void **)(v294 + 16);
                    v301 = v294 + 16;
                    v302 = v303;
                    v304 = *(char *)(v301 + 23);
                    if (v304 >= 0)
                      v305 = (const void *)v301;
                    else
                      v305 = v302;
                    if (v304 >= 0)
                      v306 = *(unsigned __int8 *)(v301 + 23);
                    else
                      v306 = *(_QWORD *)(v301 + 8);
                    if (v306 >= v300)
                      v307 = v300;
                    else
                      v307 = v306;
                    result = (uint64_t *)memcmp(v299, v305, v307);
                    if ((_DWORD)result)
                    {
                      if ((result & 0x80000000) != 0)
                        goto LABEL_488;
                    }
                    else if (v300 < v306)
                    {
                      goto LABEL_488;
                    }
                  }
LABEL_489:
                  *v289 = *v287;
                }
                while (v286 <= (uint64_t)((unint64_t)(v282 - 2) >> 1));
                v308 = a2 - 1;
                v179 = v287 == --a2;
                if (v179)
                {
                  v284 = v411;
                  goto LABEL_484;
                }
                *v287 = *v308;
                *v308 = v411;
                v309 = (char *)v287 - (char *)v403 + 8;
                if (v309 >= 9)
                {
                  v310 = ((unint64_t)v309 >> 3) - 2;
                  v311 = v310 >> 1;
                  v312 = &v403[v310 >> 1];
                  v313 = *v312;
                  v314 = *(_QWORD *)(v397 + 40);
                  v315 = *(_QWORD *)(v314 + 8 * *v312);
                  v401 = *v287;
                  v316 = *(_QWORD *)(v314 + 8 * *v287);
                  v317 = *(unsigned __int8 *)(v316 + 112);
                  v412 = v316;
                  if ((*(_BYTE *)(v315 + 112) != 0) != (*(_BYTE *)(v316 + 112) != 0))
                  {
                    if (!*(_BYTE *)(v315 + 112))
                      goto LABEL_485;
LABEL_536:
                    *v287 = v313;
                    if (v310 >= 2)
                    {
                      v407 = (const void *)(v316 + 16);
                      while (1)
                      {
                        v328 = v311 - 1;
                        v311 = (v311 - 1) >> 1;
                        v287 = &v403[v311];
                        v329 = *v287;
                        v330 = *(_QWORD *)(v314 + 8 * *v287);
                        if ((*(_BYTE *)(v330 + 112) != 0) != ((_DWORD)v317 != 0))
                        {
                          if (!*(_BYTE *)(v330 + 112))
                            break;
                        }
                        else
                        {
                          v331 = v314;
                          v332 = v317;
                          v335 = *(const void **)(v330 + 16);
                          v333 = v330 + 16;
                          v334 = v335;
                          v336 = *(char *)(v333 + 23);
                          if (v336 >= 0)
                            v337 = (const void *)v333;
                          else
                            v337 = v334;
                          if (v336 >= 0)
                            v338 = *(unsigned __int8 *)(v333 + 23);
                          else
                            v338 = *(_QWORD *)(v333 + 8);
                          v339 = *(_BYTE *)(v316 + 39);
                          if (v339 >= 0)
                            v340 = v407;
                          else
                            v340 = *(const void **)(v316 + 16);
                          if (v339 >= 0)
                            v341 = *(unsigned __int8 *)(v316 + 39);
                          else
                            v341 = *(_QWORD *)(v316 + 24);
                          if (v341 >= v338)
                            v342 = v338;
                          else
                            v342 = v341;
                          result = (uint64_t *)memcmp(v337, v340, v342);
                          if ((_DWORD)result)
                          {
                            v317 = v332;
                            v314 = v331;
                            v316 = v412;
                            if ((result & 0x80000000) == 0)
                              break;
                          }
                          else
                          {
                            v92 = v338 >= v341;
                            v317 = v332;
                            v314 = v331;
                            v316 = v412;
                            if (v92)
                              break;
                          }
                        }
                        *v312 = v329;
                        v312 = &v403[v311];
                        if (v328 <= 1)
                          goto LABEL_538;
                      }
                    }
                    v287 = v312;
LABEL_538:
                    v284 = v401;
LABEL_484:
                    *v287 = v284;
                  }
                  else
                  {
                    v320 = *(const void **)(v315 + 16);
                    v318 = v315 + 16;
                    v319 = v320;
                    v321 = *(char *)(v318 + 23);
                    if (v321 >= 0)
                      v322 = (const void *)v318;
                    else
                      v322 = v319;
                    if (v321 >= 0)
                      v323 = *(unsigned __int8 *)(v318 + 23);
                    else
                      v323 = *(_QWORD *)(v318 + 8);
                    v324 = *(char *)(v316 + 39);
                    if (v324 >= 0)
                      v325 = (const void *)(v316 + 16);
                    else
                      v325 = *(const void **)(v316 + 16);
                    if (v324 >= 0)
                      v326 = *(unsigned __int8 *)(v316 + 39);
                    else
                      v326 = *(_QWORD *)(v316 + 24);
                    if (v326 >= v323)
                      v327 = v323;
                    else
                      v327 = v326;
                    result = (uint64_t *)memcmp(v322, v325, v327);
                    if ((_DWORD)result)
                    {
                      v316 = v412;
                      if ((result & 0x80000000) != 0)
                        goto LABEL_536;
                    }
                    else
                    {
                      v316 = v412;
                      if (v323 < v326)
                        goto LABEL_536;
                    }
                  }
                }
LABEL_485:
                v285 = v282-- <= 2;
                v10 = v403;
                v283 = a3;
                if (v285)
                  return result;
              }
            }
          }
        }
        v13 = &i[v12 >> 1];
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v11 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(&v10[v12 >> 1], v10, v394, v14);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v10, &v10[v12 >> 1], v394, v14);
          v15 = v12 >> 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v10 + 1, &v10[v15 - 1], a2 - 2, *(_QWORD *)(*(_QWORD *)v6 + 40));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v10 + 2, &v10[v15 + 1], a2 - 3, *(_QWORD *)(*(_QWORD *)v6 + 40));
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(&v10[v15 - 1], v13, &v10[v15 + 1], *(_QWORD *)(*(_QWORD *)v6 + 40));
          v16 = *v10;
          *v10 = v10[v15];
          v10[v15] = v16;
        }
        v17 = *(_QWORD *)v6;
        v392 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          v23 = *(v10 - 1);
          v24 = v10;
          v20 = *(_QWORD *)(v17 + 40);
          v25 = *(_QWORD *)(v20 + 8 * v23);
          v390 = *v24;
          v21 = *(_QWORD *)(v20 + 8 * *v24);
          v22 = *(unsigned __int8 *)(v21 + 112);
          if ((*(_BYTE *)(v25 + 112) != 0) != (*(_BYTE *)(v21 + 112) != 0))
          {
            if (*(_BYTE *)(v25 + 112))
              goto LABEL_13;
          }
          else
          {
            v96 = *(const void **)(v25 + 16);
            v94 = v25 + 16;
            v95 = v96;
            v97 = *(char *)(v94 + 23);
            if (v97 >= 0)
              v98 = (const void *)v94;
            else
              v98 = v95;
            if (v97 >= 0)
              v99 = *(unsigned __int8 *)(v94 + 23);
            else
              v99 = *(_QWORD *)(v94 + 8);
            v100 = *(char *)(v21 + 39);
            if (v100 >= 0)
              v101 = (const void *)(v21 + 16);
            else
              v101 = *(const void **)(v21 + 16);
            if (v100 >= 0)
              v102 = *(unsigned __int8 *)(v21 + 39);
            else
              v102 = *(_QWORD *)(v21 + 24);
            if (v102 >= v99)
              v103 = v99;
            else
              v103 = v102;
            result = (uint64_t *)memcmp(v98, v101, v103);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_13;
            }
            else if (v99 < v102)
            {
LABEL_13:
              v19 = v403;
              goto LABEL_14;
            }
          }
          v104 = *(_QWORD *)(v20 + 8 * *v394);
          v105 = *(unsigned __int8 *)(v104 + 112);
          if ((v22 != 0) != (*(_BYTE *)(v104 + 112) != 0))
          {
            if (v22)
              goto LABEL_166;
          }
          else
          {
            v117 = *(char *)(v21 + 39);
            if (v117 >= 0)
              v118 = (const void *)(v21 + 16);
            else
              v118 = *(const void **)(v21 + 16);
            if (v117 >= 0)
              v119 = *(unsigned __int8 *)(v21 + 39);
            else
              v119 = *(_QWORD *)(v21 + 24);
            v120 = *(char *)(v104 + 39);
            if (v120 >= 0)
              v121 = (const void *)(v104 + 16);
            else
              v121 = *(const void **)(v104 + 16);
            if (v120 >= 0)
              v122 = *(unsigned __int8 *)(v104 + 39);
            else
              v122 = *(_QWORD *)(v104 + 24);
            if (v122 >= v119)
              v123 = v119;
            else
              v123 = v122;
            result = (uint64_t *)memcmp(v118, v121, v123);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_166;
            }
            else if (v119 < v122)
            {
LABEL_166:
              for (i = v403 + 1; ; ++i)
              {
                v106 = *(_QWORD *)(v20 + 8 * *i);
                if ((v22 != 0) != (*(_BYTE *)(v106 + 112) != 0))
                {
                  if (v22)
                    goto LABEL_233;
                }
                else
                {
                  v107 = *(char *)(v21 + 39);
                  if (v107 >= 0)
                    v108 = (const void *)(v21 + 16);
                  else
                    v108 = *(const void **)(v21 + 16);
                  if (v107 >= 0)
                    v109 = *(unsigned __int8 *)(v21 + 39);
                  else
                    v109 = *(_QWORD *)(v21 + 24);
                  v112 = *(const void **)(v106 + 16);
                  v110 = v106 + 16;
                  v111 = v112;
                  v113 = *(char *)(v110 + 23);
                  if (v113 >= 0)
                    v114 = (const void *)v110;
                  else
                    v114 = v111;
                  if (v113 >= 0)
                    v115 = *(unsigned __int8 *)(v110 + 23);
                  else
                    v115 = *(_QWORD *)(v110 + 8);
                  if (v115 >= v109)
                    v116 = v109;
                  else
                    v116 = v115;
                  result = (uint64_t *)memcmp(v108, v114, v116);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) != 0)
                      goto LABEL_233;
                  }
                  else if (v109 < v115)
                  {
                    goto LABEL_233;
                  }
                }
              }
            }
          }
          for (i = v403 + 1; i < a2; ++i)
          {
            v124 = *(_QWORD *)(v20 + 8 * *i);
            if ((v22 != 0) != (*(_BYTE *)(v124 + 112) != 0))
            {
              if (v22)
                break;
            }
            else
            {
              v125 = *(char *)(v21 + 39);
              if (v125 >= 0)
                v126 = (const void *)(v21 + 16);
              else
                v126 = *(const void **)(v21 + 16);
              if (v125 >= 0)
                v127 = *(unsigned __int8 *)(v21 + 39);
              else
                v127 = *(_QWORD *)(v21 + 24);
              v130 = *(const void **)(v124 + 16);
              v128 = v124 + 16;
              v129 = v130;
              v131 = *(char *)(v128 + 23);
              if (v131 >= 0)
                v132 = (const void *)v128;
              else
                v132 = v129;
              if (v131 >= 0)
                v133 = *(unsigned __int8 *)(v128 + 23);
              else
                v133 = *(_QWORD *)(v128 + 8);
              if (v133 >= v127)
                v134 = v127;
              else
                v134 = v133;
              result = (uint64_t *)memcmp(v126, v132, v134);
              if ((_DWORD)result)
              {
                if ((result & 0x80000000) != 0)
                  break;
              }
              else if (v127 < v133)
              {
                break;
              }
            }
          }
LABEL_233:
          j = a2;
          if (i < a2)
          {
            for (j = a2 - 1; ; --j)
            {
              if ((v22 != 0) != (v105 != 0))
              {
                if (!v22)
                  break;
              }
              else
              {
                v137 = *(char *)(v21 + 39);
                if (v137 >= 0)
                  v138 = (const void *)(v21 + 16);
                else
                  v138 = *(const void **)(v21 + 16);
                if (v137 >= 0)
                  v139 = *(unsigned __int8 *)(v21 + 39);
                else
                  v139 = *(_QWORD *)(v21 + 24);
                v142 = *(const void **)(v104 + 16);
                v141 = v104 + 16;
                v140 = v142;
                v143 = *(char *)(v141 + 23);
                if (v143 >= 0)
                  v144 = (const void *)v141;
                else
                  v144 = v140;
                if (v143 >= 0)
                  v145 = *(unsigned __int8 *)(v141 + 23);
                else
                  v145 = *(_QWORD *)(v141 + 8);
                if (v145 >= v139)
                  v146 = v139;
                else
                  v146 = v145;
                result = (uint64_t *)memcmp(v138, v144, v146);
                if ((_DWORD)result)
                {
                  if ((result & 0x80000000) == 0)
                    break;
                }
                else if (v139 >= v145)
                {
                  break;
                }
              }
              v136 = *(j - 1);
              v104 = *(_QWORD *)(v20 + 8 * v136);
              v105 = *(unsigned __int8 *)(v104 + 112);
            }
          }
          if (i < j)
          {
            v147 = *i;
            v148 = *j;
            v409 = v22;
            do
            {
              *i++ = v148;
              *j = v147;
              while (1)
              {
                v147 = *i;
                v149 = *(_QWORD *)(v20 + 8 * *i);
                if ((v22 != 0) != (*(_BYTE *)(v149 + 112) != 0))
                {
                  if (v409)
                    goto LABEL_285;
                  goto LABEL_262;
                }
                v150 = *(char *)(v21 + 39);
                v151 = v150 >= 0 ? (const void *)(v21 + 16) : *(const void **)(v21 + 16);
                v152 = v150 >= 0 ? *(unsigned __int8 *)(v21 + 39) : *(_QWORD *)(v21 + 24);
                v155 = *(_QWORD *)(v149 + 16);
                v153 = v149 + 16;
                v154 = v155;
                v156 = *(char *)(v153 + 23);
                v157 = (const void *)(v156 >= 0 ? v153 : v154);
                v158 = v156 >= 0 ? *(unsigned __int8 *)(v153 + 23) : *(_QWORD *)(v153 + 8);
                v159 = v158 >= v152 ? v152 : v158;
                result = (uint64_t *)memcmp(v151, v157, v159);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) != 0)
                  goto LABEL_285;
LABEL_262:
                ++i;
              }
              if (v152 >= v158)
                goto LABEL_262;
              do
              {
LABEL_285:
                while (1)
                {
                  v160 = *--j;
                  v148 = v160;
                  v161 = *(_QWORD *)(v20 + 8 * v160);
                  if ((v22 != 0) != (*(_BYTE *)(v161 + 112) != 0))
                    break;
                  v162 = *(char *)(v21 + 39);
                  if (v162 >= 0)
                    v163 = (const void *)(v21 + 16);
                  else
                    v163 = *(const void **)(v21 + 16);
                  if (v162 >= 0)
                    v164 = *(unsigned __int8 *)(v21 + 39);
                  else
                    v164 = *(_QWORD *)(v21 + 24);
                  v167 = *(const void **)(v161 + 16);
                  v165 = v161 + 16;
                  v166 = v167;
                  v168 = *(char *)(v165 + 23);
                  if (v168 >= 0)
                    v169 = (const void *)v165;
                  else
                    v169 = v166;
                  if (v168 >= 0)
                    v170 = *(unsigned __int8 *)(v165 + 23);
                  else
                    v170 = *(_QWORD *)(v165 + 8);
                  if (v170 >= v164)
                    v171 = v164;
                  else
                    v171 = v170;
                  result = (uint64_t *)memcmp(v163, v169, v171);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) == 0)
                      goto LABEL_259;
                  }
                  else if (v164 >= v170)
                  {
                    goto LABEL_259;
                  }
                }
                v409 = v22;
              }
              while (v22);
              v409 = 0;
LABEL_259:
              ;
            }
            while (i < j);
          }
          v172 = i - 1;
          if (i - 1 != v403)
            *v403 = *v172;
          a5 = 0;
          a4 = v392;
          *v172 = v390;
          v8 = a2;
          v6 = (uint64_t)a3;
          continue;
        }
        v18 = *v10;
        v19 = v10;
        v20 = *(_QWORD *)(v17 + 40);
        v390 = v18;
        v21 = *(_QWORD *)(v20 + 8 * v18);
        v22 = *(unsigned __int8 *)(v21 + 112);
LABEL_14:
        for (k = v19 + 1; ; ++k)
        {
          v27 = *k;
          v28 = *(_QWORD *)(v20 + 8 * *k);
          if ((*(_BYTE *)(v28 + 112) != 0) != (v22 != 0))
          {
            if (!*(_BYTE *)(v28 + 112))
              goto LABEL_37;
            continue;
          }
          v31 = *(_QWORD *)(v28 + 16);
          v29 = v28 + 16;
          v30 = v31;
          v32 = *(char *)(v29 + 23);
          v33 = (const void *)(v32 >= 0 ? v29 : v30);
          v34 = v32 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
          v35 = *(char *)(v21 + 39);
          v36 = v35 >= 0 ? (const void *)(v21 + 16) : *(const void **)(v21 + 16);
          v37 = v35 >= 0 ? *(unsigned __int8 *)(v21 + 39) : *(_QWORD *)(v21 + 24);
          v38 = v37 >= v34 ? v34 : v37;
          v39 = memcmp(v33, v36, v38);
          if (!v39)
            break;
          if ((v39 & 0x80000000) == 0)
            goto LABEL_37;
LABEL_16:
          ;
        }
        if (v34 < v37)
          goto LABEL_16;
LABEL_37:
        v408 = k - 1;
        if (k - 1 != v403)
        {
          for (m = a2 - 1; ; --m)
          {
            v41 = *(_QWORD *)(v20 + 8 * *m);
            if ((*(_BYTE *)(v41 + 112) != 0) != (v22 != 0))
            {
              if (*(_BYTE *)(v41 + 112))
                goto LABEL_90;
            }
            else
            {
              v44 = *(const void **)(v41 + 16);
              v42 = v41 + 16;
              v43 = v44;
              v45 = *(char *)(v42 + 23);
              if (v45 >= 0)
                v46 = (const void *)v42;
              else
                v46 = v43;
              if (v45 >= 0)
                v47 = *(unsigned __int8 *)(v42 + 23);
              else
                v47 = *(_QWORD *)(v42 + 8);
              v48 = *(char *)(v21 + 39);
              if (v48 >= 0)
                v49 = (const void *)(v21 + 16);
              else
                v49 = *(const void **)(v21 + 16);
              if (v48 >= 0)
                v50 = *(unsigned __int8 *)(v21 + 39);
              else
                v50 = *(_QWORD *)(v21 + 24);
              if (v50 >= v47)
                v51 = v47;
              else
                v51 = v50;
              v52 = memcmp(v46, v49, v51);
              if (v52)
              {
                if (v52 < 0)
                  goto LABEL_90;
              }
              else if (v47 < v50)
              {
                goto LABEL_90;
              }
            }
          }
        }
        m = a2;
        if (k < a2)
        {
          for (m = a2 - 1; ; --m)
          {
            v53 = *(_QWORD *)(v20 + 8 * *m);
            if ((*(_BYTE *)(v53 + 112) != 0) != (v22 != 0))
            {
              if (k >= m || *(_BYTE *)(v53 + 112))
                break;
            }
            else
            {
              v56 = *(const void **)(v53 + 16);
              v54 = v53 + 16;
              v55 = v56;
              v57 = *(char *)(v54 + 23);
              if (v57 >= 0)
                v58 = (const void *)v54;
              else
                v58 = v55;
              if (v57 >= 0)
                v59 = *(unsigned __int8 *)(v54 + 23);
              else
                v59 = *(_QWORD *)(v54 + 8);
              v60 = *(char *)(v21 + 39);
              if (v60 >= 0)
                v61 = (const void *)(v21 + 16);
              else
                v61 = *(const void **)(v21 + 16);
              if (v60 >= 0)
                v62 = *(unsigned __int8 *)(v21 + 39);
              else
                v62 = *(_QWORD *)(v21 + 24);
              if (v62 >= v59)
                v63 = v59;
              else
                v63 = v62;
              v64 = memcmp(v58, v61, v63);
              if (v64)
              {
                if (k >= m || v64 < 0)
                  break;
              }
              else if (k >= m || v59 < v62)
              {
                break;
              }
            }
          }
        }
LABEL_90:
        v398 = k;
        if (k >= m)
          goto LABEL_140;
        v65 = *m;
        v66 = k;
        v67 = m;
        while (2)
        {
          *v66++ = v65;
          *v67 = v27;
          while (2)
          {
            v27 = *v66;
            v68 = *(_QWORD *)(v20 + 8 * *v66);
            if ((*(_BYTE *)(v68 + 112) != 0) != (v22 != 0))
            {
              if (!*(_BYTE *)(v68 + 112))
                goto LABEL_115;
LABEL_94:
              ++v66;
              continue;
            }
            break;
          }
          v71 = *(const void **)(v68 + 16);
          v69 = v68 + 16;
          v70 = v71;
          v72 = *(char *)(v69 + 23);
          if (v72 >= 0)
            v73 = (const void *)v69;
          else
            v73 = v70;
          if (v72 >= 0)
            v74 = *(unsigned __int8 *)(v69 + 23);
          else
            v74 = *(_QWORD *)(v69 + 8);
          v75 = *(char *)(v21 + 39);
          if (v75 >= 0)
            v76 = (const void *)(v21 + 16);
          else
            v76 = *(const void **)(v21 + 16);
          if (v75 >= 0)
            v77 = *(unsigned __int8 *)(v21 + 39);
          else
            v77 = *(_QWORD *)(v21 + 24);
          if (v77 >= v74)
            v78 = v74;
          else
            v78 = v77;
          v79 = memcmp(v73, v76, v78);
          if (v79)
          {
            if ((v79 & 0x80000000) == 0)
              goto LABEL_115;
            goto LABEL_94;
          }
          if (v74 < v77)
            goto LABEL_94;
LABEL_115:
          v408 = v66 - 1;
          --v67;
          do
          {
            while (1)
            {
              v65 = *v67;
              v80 = *(_QWORD *)(v20 + 8 * *v67);
              if ((*(_BYTE *)(v80 + 112) != 0) != (v22 != 0))
                break;
              v83 = *(const void **)(v80 + 16);
              v81 = v80 + 16;
              v82 = v83;
              v84 = *(char *)(v81 + 23);
              if (v84 >= 0)
                v85 = (const void *)v81;
              else
                v85 = v82;
              if (v84 >= 0)
                v86 = *(unsigned __int8 *)(v81 + 23);
              else
                v86 = *(_QWORD *)(v81 + 8);
              v87 = *(_BYTE *)(v21 + 39);
              if (v87 >= 0)
                v88 = (const void *)(v21 + 16);
              else
                v88 = *(const void **)(v21 + 16);
              if (v87 >= 0)
                v89 = *(unsigned __int8 *)(v21 + 39);
              else
                v89 = *(_QWORD *)(v21 + 24);
              if (v89 >= v86)
                v90 = v86;
              else
                v90 = v89;
              v91 = memcmp(v85, v88, v90);
              if (v91)
              {
                if (v91 < 0)
                  goto LABEL_139;
              }
              else if (v86 < v89)
              {
                goto LABEL_139;
              }
              --v67;
            }
            --v67;
          }
          while (!*(_BYTE *)(v80 + 112));
          ++v67;
LABEL_139:
          if (v66 < v67)
            continue;
          break;
        }
LABEL_140:
        v7 = v403;
        if (v408 != v403)
          *v403 = *v408;
        a4 = v392;
        *v408 = v390;
        v92 = v398 >= m;
        v8 = a2;
        v6 = (uint64_t)a3;
        if (!v92)
        {
LABEL_146:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *,false>(v403, v408, a3, v392, a5 & 1);
          a5 = 0;
          i = v408 + 1;
          continue;
        }
        v93 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v403, v408, (uint64_t)a3);
        i = v408 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v408 + 1, a2, (uint64_t)a3);
        if (!(_DWORD)result)
        {
          if (v93)
            continue;
          goto LABEL_146;
        }
        a2 = v408;
        if (!v93)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *v16;
  size_t v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  int v28;
  const void *v29;
  size_t v30;
  const void *v31;
  uint64_t v32;
  const void *v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  const void *v42;
  int v43;
  const void *v44;
  size_t v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  int v49;
  const void *v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  const void *v54;
  const void *v55;
  int v56;
  const void *v57;
  size_t v58;
  const void *v59;
  uint64_t v60;
  const void *v61;
  int v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  const void *v72;
  int v73;
  const void *v74;
  size_t v75;
  uint64_t v76;
  const void *v77;
  const void *v78;
  int v79;
  const void *v80;
  size_t v81;
  size_t v82;
  uint64_t *v84;

  v84 = result;
  v6 = *a2;
  v7 = *(_QWORD *)(a4 + 8 * *a2);
  v8 = *(unsigned __int8 *)(v7 + 112);
  v9 = *result;
  v10 = *(_QWORD *)(a4 + 8 * *result);
  v11 = *(unsigned __int8 *)(v10 + 112);
  if ((*(_BYTE *)(v7 + 112) != 0) == (*(_BYTE *)(v10 + 112) != 0))
  {
    v15 = *(char *)(v7 + 39);
    if (v15 >= 0)
      v16 = (const void *)(v7 + 16);
    else
      v16 = *(const void **)(v7 + 16);
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v7 + 39);
    else
      v17 = *(_QWORD *)(v7 + 24);
    v18 = *(char *)(v10 + 39);
    if (v18 >= 0)
      v19 = (const void *)(v10 + 16);
    else
      v19 = *(const void **)(v10 + 16);
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(v10 + 39);
    else
      v20 = *(_QWORD *)(v10 + 24);
    if (v20 >= v17)
      v21 = v17;
    else
      v21 = v20;
    result = (uint64_t *)memcmp(v16, v19, v21);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if (v17 >= v20)
    {
      goto LABEL_23;
    }
LABEL_3:
    v12 = v8 != 0;
    v13 = *a3;
    v14 = *(_QWORD *)(a4 + 8 * *a3);
    if ((((*(_BYTE *)(v14 + 112) != 0) ^ v12) & 1) != 0)
    {
      if (*(_BYTE *)(v14 + 112))
      {
LABEL_5:
        *v84 = v13;
LABEL_110:
        *a3 = v9;
        return result;
      }
    }
    else
    {
      v27 = *(const void **)(v14 + 16);
      v25 = v14 + 16;
      v26 = v27;
      v28 = *(char *)(v25 + 23);
      if (v28 >= 0)
        v29 = (const void *)v25;
      else
        v29 = v26;
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(v25 + 23);
      else
        v30 = *(_QWORD *)(v25 + 8);
      v33 = *(const void **)(v7 + 16);
      v32 = v7 + 16;
      v31 = v33;
      v34 = *(char *)(v32 + 23);
      if (v34 >= 0)
        v35 = (const void *)v32;
      else
        v35 = v31;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v32 + 23);
      else
        v36 = *(_QWORD *)(v32 + 8);
      if (v36 >= v30)
        v37 = v30;
      else
        v37 = v36;
      result = (uint64_t *)memcmp(v29, v35, v37);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_5;
      }
      else if (v30 < v36)
      {
        goto LABEL_5;
      }
    }
    *v84 = v6;
    *a2 = v9;
    v38 = *a3;
    v39 = *(_QWORD *)(a4 + 8 * *a3);
    if ((*(_BYTE *)(v39 + 112) != 0) != (v11 != 0))
    {
      if (!*(_BYTE *)(v39 + 112))
        return result;
    }
    else
    {
      v55 = *(const void **)(v39 + 16);
      v53 = v39 + 16;
      v54 = v55;
      v56 = *(char *)(v53 + 23);
      if (v56 >= 0)
        v57 = (const void *)v53;
      else
        v57 = v54;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(v53 + 23);
      else
        v58 = *(_QWORD *)(v53 + 8);
      v61 = *(const void **)(v10 + 16);
      v60 = v10 + 16;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = (const void *)v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      if (v64 >= v58)
        v65 = v58;
      else
        v65 = v64;
      result = (uint64_t *)memcmp(v57, v63, v65);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          return result;
      }
      else if (v58 >= v64)
      {
        return result;
      }
    }
    *a2 = v38;
    goto LABEL_110;
  }
  if (*(_BYTE *)(v7 + 112))
    goto LABEL_3;
LABEL_23:
  v22 = *a3;
  v23 = *(_QWORD *)(a4 + 8 * *a3);
  if ((*(_BYTE *)(v23 + 112) != 0) != (v8 != 0))
  {
    v24 = a2;
    if (!*(_BYTE *)(v23 + 112))
      return result;
  }
  else
  {
    v42 = *(const void **)(v23 + 16);
    v40 = v23 + 16;
    v41 = v42;
    v43 = *(char *)(v40 + 23);
    if (v43 >= 0)
      v44 = (const void *)v40;
    else
      v44 = v41;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(v40 + 23);
    else
      v45 = *(_QWORD *)(v40 + 8);
    v48 = *(const void **)(v7 + 16);
    v47 = v7 + 16;
    v46 = v48;
    v49 = *(char *)(v47 + 23);
    if (v49 >= 0)
      v50 = (const void *)v47;
    else
      v50 = v46;
    if (v49 >= 0)
      v51 = *(unsigned __int8 *)(v47 + 23);
    else
      v51 = *(_QWORD *)(v47 + 8);
    if (v51 >= v45)
      v52 = v45;
    else
      v52 = v51;
    result = (uint64_t *)memcmp(v44, v50, v52);
    if ((_DWORD)result)
    {
      v24 = a2;
      if ((result & 0x80000000) == 0)
        return result;
    }
    else
    {
      v24 = a2;
      if (v45 >= v51)
        return result;
    }
  }
  *v24 = v22;
  *a3 = v6;
  v66 = *v24;
  v67 = *(_QWORD *)(a4 + 8 * *v24);
  v68 = *v84;
  v69 = *(_QWORD *)(a4 + 8 * *v84);
  if ((*(_BYTE *)(v67 + 112) != 0) == (*(_BYTE *)(v69 + 112) != 0))
  {
    v72 = *(const void **)(v67 + 16);
    v70 = v67 + 16;
    v71 = v72;
    v73 = *(char *)(v70 + 23);
    if (v73 >= 0)
      v74 = (const void *)v70;
    else
      v74 = v71;
    if (v73 >= 0)
      v75 = *(unsigned __int8 *)(v70 + 23);
    else
      v75 = *(_QWORD *)(v70 + 8);
    v78 = *(const void **)(v69 + 16);
    v76 = v69 + 16;
    v77 = v78;
    v79 = *(char *)(v76 + 23);
    if (v79 >= 0)
      v80 = (const void *)v76;
    else
      v80 = v77;
    if (v79 >= 0)
      v81 = *(unsigned __int8 *)(v76 + 23);
    else
      v81 = *(_QWORD *)(v76 + 8);
    if (v81 >= v75)
      v82 = v75;
    else
      v82 = v81;
    result = (uint64_t *)memcmp(v74, v80, v82);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v75 >= v81)
    {
      return result;
    }
    goto LABEL_112;
  }
  if (*(_BYTE *)(v67 + 112))
  {
LABEL_112:
    *v84 = v66;
    *v24 = v68;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  int v36;
  const void *v37;
  size_t v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  const void *v52;
  int v53;
  const void *v54;
  size_t v55;
  uint64_t v56;
  const void *v57;
  const void *v58;
  int v59;
  const void *v60;
  size_t v61;
  size_t v62;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 40));
  v11 = *a4;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 40);
  v13 = *(_QWORD *)(v12 + 8 * *a4);
  v14 = *a3;
  v15 = *(_QWORD *)(v12 + 8 * *a3);
  if ((*(_BYTE *)(v13 + 112) != 0) != (*(_BYTE *)(v15 + 112) != 0))
  {
    if (!*(_BYTE *)(v13 + 112))
      return result;
  }
  else
  {
    v18 = *(const void **)(v13 + 16);
    v16 = v13 + 16;
    v17 = v18;
    v19 = *(char *)(v16 + 23);
    if (v19 >= 0)
      v20 = (const void *)v16;
    else
      v20 = v17;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(v16 + 23);
    else
      v21 = *(_QWORD *)(v16 + 8);
    v24 = *(const void **)(v15 + 16);
    v22 = v15 + 16;
    v23 = v24;
    v25 = *(char *)(v22 + 23);
    if (v25 >= 0)
      v26 = (const void *)v22;
    else
      v26 = v23;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(v22 + 23);
    else
      v27 = *(_QWORD *)(v22 + 8);
    if (v27 >= v21)
      v28 = v21;
    else
      v28 = v27;
    result = (uint64_t *)memcmp(v20, v26, v28);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v21 >= v27)
    {
      return result;
    }
  }
  *a3 = v11;
  *a4 = v14;
  v29 = *a3;
  v30 = *(_QWORD *)(v12 + 8 * *a3);
  v31 = *a2;
  v32 = *(_QWORD *)(v12 + 8 * *a2);
  if ((*(_BYTE *)(v30 + 112) != 0) != (*(_BYTE *)(v32 + 112) != 0))
  {
    if (!*(_BYTE *)(v30 + 112))
      return result;
  }
  else
  {
    v35 = *(const void **)(v30 + 16);
    v33 = v30 + 16;
    v34 = v35;
    v36 = *(char *)(v33 + 23);
    if (v36 >= 0)
      v37 = (const void *)v33;
    else
      v37 = v34;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v33 + 23);
    else
      v38 = *(_QWORD *)(v33 + 8);
    v41 = *(const void **)(v32 + 16);
    v39 = v32 + 16;
    v40 = v41;
    v42 = *(char *)(v39 + 23);
    if (v42 >= 0)
      v43 = (const void *)v39;
    else
      v43 = v40;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v39 + 23);
    else
      v44 = *(_QWORD *)(v39 + 8);
    if (v44 >= v38)
      v45 = v38;
    else
      v45 = v44;
    result = (uint64_t *)memcmp(v37, v43, v45);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v38 >= v44)
    {
      return result;
    }
  }
  *a2 = v29;
  *a3 = v31;
  v46 = *a2;
  v47 = *(_QWORD *)(v12 + 8 * *a2);
  v48 = *a1;
  v49 = *(_QWORD *)(v12 + 8 * *a1);
  if ((*(_BYTE *)(v47 + 112) != 0) != (*(_BYTE *)(v49 + 112) != 0))
  {
    if (!*(_BYTE *)(v47 + 112))
      return result;
    goto LABEL_47;
  }
  v52 = *(const void **)(v47 + 16);
  v50 = v47 + 16;
  v51 = v52;
  v53 = *(char *)(v50 + 23);
  if (v53 >= 0)
    v54 = (const void *)v50;
  else
    v54 = v51;
  if (v53 >= 0)
    v55 = *(unsigned __int8 *)(v50 + 23);
  else
    v55 = *(_QWORD *)(v50 + 8);
  v58 = *(const void **)(v49 + 16);
  v56 = v49 + 16;
  v57 = v58;
  v59 = *(char *)(v56 + 23);
  if (v59 >= 0)
    v60 = (const void *)v56;
  else
    v60 = v57;
  if (v59 >= 0)
    v61 = *(unsigned __int8 *)(v56 + 23);
  else
    v61 = *(_QWORD *)(v56 + 8);
  if (v61 >= v55)
    v62 = v55;
  else
    v62 = v61;
  result = (uint64_t *)memcmp(v54, v60, v62);
  if (!(_DWORD)result)
  {
    if (v55 >= v61)
      return result;
    goto LABEL_47;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_47:
    *a1 = v46;
    *a2 = v48;
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  const void *v37;
  int v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  const void *v42;
  const void *v43;
  int v44;
  const void *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  const void *v54;
  int v55;
  const void *v56;
  size_t v57;
  uint64_t v58;
  const void *v59;
  const void *v60;
  int v61;
  const void *v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  int v72;
  const void *v73;
  size_t v74;
  uint64_t v75;
  const void *v76;
  const void *v77;
  int v78;
  const void *v79;
  size_t v80;
  size_t v81;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 40);
  v15 = *(_QWORD *)(v14 + 8 * *a5);
  v16 = *a4;
  v17 = *(_QWORD *)(v14 + 8 * *a4);
  if ((*(_BYTE *)(v15 + 112) != 0) != (*(_BYTE *)(v17 + 112) != 0))
  {
    if (!*(_BYTE *)(v15 + 112))
      return result;
  }
  else
  {
    v20 = *(const void **)(v15 + 16);
    v18 = v15 + 16;
    v19 = v20;
    v21 = *(char *)(v18 + 23);
    if (v21 >= 0)
      v22 = (const void *)v18;
    else
      v22 = v19;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(v18 + 23);
    else
      v23 = *(_QWORD *)(v18 + 8);
    v26 = *(const void **)(v17 + 16);
    v24 = v17 + 16;
    v25 = v26;
    v27 = *(char *)(v24 + 23);
    if (v27 >= 0)
      v28 = (const void *)v24;
    else
      v28 = v25;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(v24 + 23);
    else
      v29 = *(_QWORD *)(v24 + 8);
    if (v29 >= v23)
      v30 = v23;
    else
      v30 = v29;
    result = (uint64_t *)memcmp(v22, v28, v30);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v23 >= v29)
    {
      return result;
    }
  }
  *a4 = v13;
  *a5 = v16;
  v31 = *a4;
  v32 = *(_QWORD *)(v14 + 8 * *a4);
  v33 = *a3;
  v34 = *(_QWORD *)(v14 + 8 * *a3);
  if ((*(_BYTE *)(v32 + 112) != 0) != (*(_BYTE *)(v34 + 112) != 0))
  {
    if (!*(_BYTE *)(v32 + 112))
      return result;
  }
  else
  {
    v37 = *(const void **)(v32 + 16);
    v35 = v32 + 16;
    v36 = v37;
    v38 = *(char *)(v35 + 23);
    if (v38 >= 0)
      v39 = (const void *)v35;
    else
      v39 = v36;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(v35 + 23);
    else
      v40 = *(_QWORD *)(v35 + 8);
    v43 = *(const void **)(v34 + 16);
    v41 = v34 + 16;
    v42 = v43;
    v44 = *(char *)(v41 + 23);
    if (v44 >= 0)
      v45 = (const void *)v41;
    else
      v45 = v42;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v41 + 23);
    else
      v46 = *(_QWORD *)(v41 + 8);
    if (v46 >= v40)
      v47 = v40;
    else
      v47 = v46;
    result = (uint64_t *)memcmp(v39, v45, v47);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v40 >= v46)
    {
      return result;
    }
  }
  *a3 = v31;
  *a4 = v33;
  v48 = *a3;
  v49 = *(_QWORD *)(v14 + 8 * *a3);
  v50 = *a2;
  v51 = *(_QWORD *)(v14 + 8 * *a2);
  if ((*(_BYTE *)(v49 + 112) != 0) != (*(_BYTE *)(v51 + 112) != 0))
  {
    if (!*(_BYTE *)(v49 + 112))
      return result;
  }
  else
  {
    v54 = *(const void **)(v49 + 16);
    v52 = v49 + 16;
    v53 = v54;
    v55 = *(char *)(v52 + 23);
    if (v55 >= 0)
      v56 = (const void *)v52;
    else
      v56 = v53;
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(v52 + 23);
    else
      v57 = *(_QWORD *)(v52 + 8);
    v60 = *(const void **)(v51 + 16);
    v58 = v51 + 16;
    v59 = v60;
    v61 = *(char *)(v58 + 23);
    if (v61 >= 0)
      v62 = (const void *)v58;
    else
      v62 = v59;
    if (v61 >= 0)
      v63 = *(unsigned __int8 *)(v58 + 23);
    else
      v63 = *(_QWORD *)(v58 + 8);
    if (v63 >= v57)
      v64 = v57;
    else
      v64 = v63;
    result = (uint64_t *)memcmp(v56, v62, v64);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v57 >= v63)
    {
      return result;
    }
  }
  *a2 = v48;
  *a3 = v50;
  v65 = *a2;
  v66 = *(_QWORD *)(v14 + 8 * *a2);
  v67 = *a1;
  v68 = *(_QWORD *)(v14 + 8 * *a1);
  if ((*(_BYTE *)(v66 + 112) != 0) != (*(_BYTE *)(v68 + 112) != 0))
  {
    if (!*(_BYTE *)(v66 + 112))
      return result;
    goto LABEL_69;
  }
  v71 = *(const void **)(v66 + 16);
  v69 = v66 + 16;
  v70 = v71;
  v72 = *(char *)(v69 + 23);
  if (v72 >= 0)
    v73 = (const void *)v69;
  else
    v73 = v70;
  if (v72 >= 0)
    v74 = *(unsigned __int8 *)(v69 + 23);
  else
    v74 = *(_QWORD *)(v69 + 8);
  v77 = *(const void **)(v68 + 16);
  v75 = v68 + 16;
  v76 = v77;
  v78 = *(char *)(v75 + 23);
  if (v78 >= 0)
    v79 = (const void *)v75;
  else
    v79 = v76;
  if (v78 >= 0)
    v80 = *(unsigned __int8 *)(v75 + 23);
  else
    v80 = *(_QWORD *)(v75 + 8);
  if (v80 >= v74)
    v81 = v74;
  else
    v81 = v80;
  result = (uint64_t *)memcmp(v73, v79, v81);
  if (!(_DWORD)result)
  {
    if (v74 >= v80)
      return result;
    goto LABEL_69;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_69:
    *a1 = v65;
    *a2 = v67;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void *v25;
  size_t v26;
  uint64_t v27;
  const void *v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  const void *v44;
  size_t v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  int v49;
  const void *v50;
  size_t v51;
  size_t v52;
  int v53;
  uint64_t v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  uint64_t v60;
  const void *v61;
  const void *v62;
  int v63;
  const void *v64;
  size_t v65;
  size_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  int v72;
  int v73;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40);
      v10 = *(_QWORD *)(v9 + 8 * v8);
      v11 = *v5;
      v12 = *(_QWORD *)(v9 + 8 * *v5);
      if ((*(_BYTE *)(v10 + 112) != 0) == (*(_BYTE *)(v12 + 112) != 0))
      {
        v56 = *(const void **)(v10 + 16);
        v54 = v10 + 16;
        v55 = v56;
        v57 = *(char *)(v54 + 23);
        if (v57 >= 0)
          v58 = (const void *)v54;
        else
          v58 = v55;
        if (v57 >= 0)
          v59 = *(unsigned __int8 *)(v54 + 23);
        else
          v59 = *(_QWORD *)(v54 + 8);
        v62 = *(const void **)(v12 + 16);
        v60 = v12 + 16;
        v61 = v62;
        v63 = *(char *)(v60 + 23);
        if (v63 >= 0)
          v64 = (const void *)v60;
        else
          v64 = v61;
        if (v63 >= 0)
          v65 = *(unsigned __int8 *)(v60 + 23);
        else
          v65 = *(_QWORD *)(v60 + 8);
        if (v65 >= v59)
          v66 = v59;
        else
          v66 = v65;
        v67 = memcmp(v58, v64, v66);
        if (v67)
        {
          if ((v67 & 0x80000000) == 0)
            return 1;
          goto LABEL_80;
        }
        if (v59 < v65)
        {
LABEL_80:
          *v5 = v8;
          *(v4 - 1) = v11;
        }
        return 1;
      }
      if (*(_BYTE *)(v10 + 112))
        goto LABEL_80;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v5, v5 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 40));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v5, v5 + 1, v5 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *,0>(v5, v5 + 1, v5 + 2, v5 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = v5 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunction::addRoad(md::MuninRoadEdge const*)::$_0 &,unsigned long *>(v5, v5 + 1, v5 + 2, *(_QWORD *)(*(_QWORD *)a3 + 40));
      v14 = v5 + 3;
      if (v5 + 3 == v4)
        return 1;
      v15 = 0;
      v72 = 0;
      v16 = *(_QWORD *)(*(_QWORD *)a3 + 40);
      v71 = v4;
      while (2)
      {
        v18 = *v14;
        v19 = *(_QWORD *)(v16 + 8 * *v14);
        v20 = *(unsigned __int8 *)(v19 + 112);
        v21 = *v13;
        v22 = *(_QWORD *)(v16 + 8 * *v13);
        v73 = v20;
        if ((*(_BYTE *)(v19 + 112) != 0) != (*(_BYTE *)(v22 + 112) != 0))
        {
          if (!*(_BYTE *)(v19 + 112))
            goto LABEL_10;
        }
        else
        {
          v23 = v15;
          v24 = *(char *)(v19 + 39);
          if (v24 >= 0)
            v25 = (const void *)(v19 + 16);
          else
            v25 = *(const void **)(v19 + 16);
          if (v24 >= 0)
            v26 = *(unsigned __int8 *)(v19 + 39);
          else
            v26 = *(_QWORD *)(v19 + 24);
          v29 = *(const void **)(v22 + 16);
          v27 = v22 + 16;
          v28 = v29;
          v30 = *(char *)(v27 + 23);
          if (v30 >= 0)
            v31 = (const void *)v27;
          else
            v31 = v28;
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(v27 + 23);
          else
            v32 = *(_QWORD *)(v27 + 8);
          if (v32 >= v26)
            v33 = v26;
          else
            v33 = v32;
          v34 = memcmp(v25, v31, v33);
          if (v34)
          {
            v15 = v23;
            v4 = v71;
            v20 = v73;
            if ((v34 & 0x80000000) == 0)
              goto LABEL_10;
          }
          else
          {
            v35 = v26 >= v32;
            v15 = v23;
            v4 = v71;
            v20 = v73;
            if (v35)
              goto LABEL_10;
          }
        }
        *v14 = v21;
        v17 = v5;
        if (v13 == v5)
          goto LABEL_9;
        v69 = v15;
        v70 = v14;
        v68 = v18;
        v36 = *(_QWORD *)(v16 + 8 * v18);
        v37 = v15;
        v38 = *(unsigned __int8 *)(v36 + 112);
LABEL_37:
        v39 = (char *)v5 + v37;
        v40 = *(uint64_t *)((char *)v5 + v37 + 8);
        v41 = *(_QWORD *)(v16 + 8 * v40);
        if ((v38 != 0) != (*(_BYTE *)(v41 + 112) != 0))
        {
          if (!v20)
          {
            v17 = (uint64_t *)((char *)v5 + v37 + 16);
LABEL_8:
            v14 = v70;
            v4 = v71;
            v18 = v68;
            v15 = v69;
LABEL_9:
            *v17 = v18;
            if (++v72 == 8)
              return v14 + 1 == v4;
LABEL_10:
            v13 = v14;
            v15 += 8;
            if (++v14 != v4)
              continue;
            return 1;
          }
        }
        else
        {
          v42 = v5;
          v43 = *(_BYTE *)(v19 + 39);
          if (v43 >= 0)
            v44 = (const void *)(v19 + 16);
          else
            v44 = *(const void **)(v19 + 16);
          if (v43 >= 0)
            v45 = *(unsigned __int8 *)(v19 + 39);
          else
            v45 = *(_QWORD *)(v19 + 24);
          v48 = *(const void **)(v41 + 16);
          v46 = v41 + 16;
          v47 = v48;
          v49 = *(char *)(v46 + 23);
          if (v49 >= 0)
            v50 = (const void *)v46;
          else
            v50 = v47;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v46 + 23);
          else
            v51 = *(_QWORD *)(v46 + 8);
          if (v51 >= v45)
            v52 = v45;
          else
            v52 = v51;
          v53 = memcmp(v44, v50, v52);
          if (v53)
          {
            v5 = v42;
            v20 = v73;
            if ((v53 & 0x80000000) == 0)
              goto LABEL_58;
          }
          else
          {
            v35 = v45 >= v51;
            v5 = v42;
            v20 = v73;
            if (v35)
            {
LABEL_58:
              v17 = v13;
              goto LABEL_8;
            }
          }
        }
        break;
      }
      --v13;
      *((_QWORD *)v39 + 2) = v40;
      v37 -= 8;
      if (v37 == -16)
      {
        v17 = v5;
        goto LABEL_8;
      }
      goto LABEL_37;
  }
}

void altitude::SkyLoadJob::~SkyLoadJob(altitude::SkyLoadJob *this)
{
  altitude::SkyLoadJob::~SkyLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E42C3990;
  if (!*((_BYTE *)this + 248))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 30);
    if (v2)
    {
      v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = v2[1];
      v2[1] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *v2;
      *v2 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
    }
  }
  *((_QWORD *)this + 30) = 0;
  v8 = (void *)*((_QWORD *)this + 27);
  if (v8)
  {
    *((_QWORD *)this + 28) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  karo::Job::~Job(this);
}

uint64_t altitude::SkyLoadJob::jobStep(altitude::SkyLoadJob *this)
{
  char *v2;
  uint64_t MemFile;
  uint64_t v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  int v15;
  pthread_mutex_t *v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unsigned __int8 v21;
  uint64_t *p_shared_weak_owners;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t shared_weak_owners;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v33;
  unint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned __int8 v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float *v56;
  float *v57;
  unsigned int v58;
  float v59;
  __float2 v60;
  __float2 v61;
  BOOL v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count **v75;
  std::__shared_weak_count **v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  int64x2_t *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unsigned __int8 v94;
  uint64_t v95;
  geo::read_write_lock *v96;
  const char *v97;
  malloc_zone_t *zone;
  uint64_t v99;
  geo::read_write_lock *v100;
  const char *v101;
  malloc_zone_t *v102;
  uint64_t v103;
  geo::read_write_lock *v104;
  const char *v105;
  malloc_zone_t *v106;
  int v107;
  uint64_t v108;
  geo::read_write_lock *v109;
  const char *v110;
  malloc_zone_t *v111;
  std::__shared_weak_count *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;

  v2 = (char *)this + 192;
  v115 = 0;
  MemFile = karo::Loader::getMemFile(*(_QWORD *)(*((_QWORD *)this + 1) + 80), (uint64_t)this + 192, &v115);
  v4 = MemFile;
  if (!MemFile)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VectorKit"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((char *)this + 215) >= 0)
      v6 = v2;
    else
      v6 = (char *)*((_QWORD *)this + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lastPathComponent");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringByDeletingPathExtension");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "pathExtension");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringByDeletingLastPathComponent");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "pathForResource:ofType:inDirectory:", v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12
      || (objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v13, "pathForResource:ofType:inDirectory:", v9, v10, v11),
          v12 = (void *)objc_claimAutoreleasedReturnValue(),
          v13,
          v12))
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v12);
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v4 = objc_msgSend(v14, "bytes");
      v115 = objc_msgSend(v14, "length");

    }
    else
    {
      v4 = 0;
    }

  }
  karo::media::SkyLoader::loadFromChunk(MemFile, v4, v115, (char **)this + 27);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v15 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  v16 = (pthread_mutex_t *)*((_QWORD *)this + 19);
  if ((v15 & 2) == 0)
  {
    pthread_mutex_lock(v16);
    v17 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v17 & 2) != 0)
    {
      v30 = 0;
LABEL_92:
      *((_QWORD *)this + 30) = v30;
      v16 = (pthread_mutex_t *)*((_QWORD *)this + 19);
      goto LABEL_93;
    }
    v18 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40);
    v19 = (std::__shared_weak_count *)operator new(0xA8uLL);
    v19->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E46C8;
    if ((v21 & 1) == 0
    {
      if ((v94 & 1) == 0
      {
        ggl::MeshTyped<ggl::Stars::StarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::Stars::starVertexReflection;
      }
      ggl::MeshTyped<ggl::Stars::StarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Stars::StarVertex>::attributesReflection(void)::r;
      unk_1EE5762C8 = 1;
    }
    v19[3].__shared_weak_owners_ = 0;
    p_shared_weak_owners = &v19[3].__shared_weak_owners_;
    v19[2].__shared_owners_ = 0;
    v19[2].__shared_weak_owners_ = 0;
    LODWORD(v19[3].__vftable) = 0;
    v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
    v19[1].__shared_owners_ = (uint64_t)"/Stars/Mesh";
    v19[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
    v19[2].__vftable = 0;
    v19[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::Stars::StarVertex>::typedReflection(void)::r;
    v19[4].__vftable = 0;
    v19[4].__shared_owners_ = 0;
    {
      v95 = operator new();
      *(_QWORD *)(v95 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v95 + 24) = "GeoGL";
      *(_OWORD *)(v95 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v95 = &off_1E42B5668;
      *(_QWORD *)(v95 + 8) = "GeoGL";
      *(_OWORD *)(v95 + 72) = 0u;
      *(_OWORD *)(v95 + 88) = 0u;
      *(_OWORD *)(v95 + 104) = 0u;
      *(_OWORD *)(v95 + 120) = 0u;
      *(_OWORD *)(v95 + 136) = 0u;
      *(_OWORD *)(v95 + 152) = 0u;
      *(_OWORD *)(v95 + 168) = 0u;
      *(_OWORD *)(v95 + 184) = 0u;
      *(_OWORD *)(v95 + 200) = 0u;
      *(_OWORD *)(v95 + 216) = 0u;
      *(_OWORD *)(v95 + 232) = 0u;
      *(_QWORD *)(v95 + 248) = 0;
      *(_OWORD *)(v95 + 56) = 0u;
      v96 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v95 + 56), 0);
      if ((_DWORD)v96)
        geo::read_write_lock::logFailure(v96, (uint64_t)"initialization", v97);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v95 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v95 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v95;
    }
    v24 = ggl::Allocator::instance(void)::alloc;
    v19[6].__vftable = 0;
    v19[5].__vftable = 0;
    v19[5].__shared_owners_ = 0;
    v19[4].__shared_weak_owners_ = v24;
    {
      v99 = operator new();
      *(_QWORD *)(v99 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v99 + 24) = "GeoGL";
      *(_OWORD *)(v99 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v99 = &off_1E42B5668;
      *(_QWORD *)(v99 + 8) = "GeoGL";
      *(_OWORD *)(v99 + 72) = 0u;
      *(_OWORD *)(v99 + 88) = 0u;
      *(_OWORD *)(v99 + 104) = 0u;
      *(_OWORD *)(v99 + 120) = 0u;
      *(_OWORD *)(v99 + 136) = 0u;
      *(_OWORD *)(v99 + 152) = 0u;
      *(_OWORD *)(v99 + 168) = 0u;
      *(_OWORD *)(v99 + 184) = 0u;
      *(_OWORD *)(v99 + 200) = 0u;
      *(_OWORD *)(v99 + 216) = 0u;
      *(_OWORD *)(v99 + 232) = 0u;
      *(_QWORD *)(v99 + 248) = 0;
      *(_OWORD *)(v99 + 56) = 0u;
      v100 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v99 + 56), 0);
      if ((_DWORD)v100)
        geo::read_write_lock::logFailure(v100, (uint64_t)"initialization", v101);
      v102 = malloc_create_zone(0, 0);
      *(_QWORD *)(v99 + 48) = v102;
      malloc_set_zone_name(v102, "GeoGL");
      *(_QWORD *)(v99 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v99;
    }
    v19[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
    v19[6].__shared_weak_owners_ = 0;
    v19[5].__shared_weak_owners_ = (uint64_t)&v19[6];
    v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BDDB8;
    v19[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BDDD8;
    shared_weak_owners = v19[3].__shared_weak_owners_;
    v26 = *(_QWORD *)(v19[3].__shared_owners_ + 8);
    v27 = v19[4].__vftable;
    v28 = ((uint64_t)v27 - shared_weak_owners) >> 4;
    v29 = v26 - v28;
    if (v26 <= v28)
    {
      if (v26 < v28)
      {
        v31 = (std::__shared_weak_count_vtbl *)(shared_weak_owners + 16 * v26);
        while (v27 != v31)
        {
          on_zero_shared_weak = (std::__shared_weak_count *)v27[-1].__on_zero_shared_weak;
          if (on_zero_shared_weak)
          {
            v33 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak, v29);
              std::__shared_weak_count::__release_weak(on_zero_shared_weak);
            }
          }
          v27 = (std::__shared_weak_count_vtbl *)((char *)v27 - 16);
        }
        v19[4].__vftable = v31;
      }
    }
    else
    {
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)&v19[3].__shared_weak_owners_, v29);
    }
    v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC008;
    v19[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BC028;
    {
      v103 = operator new();
      *(_QWORD *)(v103 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v103 + 24) = "GeoGL";
      *(_OWORD *)(v103 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v103 = &off_1E42B5668;
      *(_QWORD *)(v103 + 8) = "GeoGL";
      *(_OWORD *)(v103 + 72) = 0u;
      *(_OWORD *)(v103 + 88) = 0u;
      *(_OWORD *)(v103 + 104) = 0u;
      *(_OWORD *)(v103 + 120) = 0u;
      *(_OWORD *)(v103 + 136) = 0u;
      *(_OWORD *)(v103 + 152) = 0u;
      *(_OWORD *)(v103 + 168) = 0u;
      *(_OWORD *)(v103 + 184) = 0u;
      *(_OWORD *)(v103 + 200) = 0u;
      *(_OWORD *)(v103 + 216) = 0u;
      *(_OWORD *)(v103 + 232) = 0u;
      *(_QWORD *)(v103 + 248) = 0;
      *(_OWORD *)(v103 + 56) = 0u;
      v104 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v103 + 56), 0);
      if ((_DWORD)v104)
        geo::read_write_lock::logFailure(v104, (uint64_t)"initialization", v105);
      v106 = malloc_create_zone(0, 0);
      *(_QWORD *)(v103 + 48) = v106;
      malloc_set_zone_name(v106, "GeoGL");
      *(_QWORD *)(v103 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v103;
    }
    v36 = ggl::Allocator::instance(void)::alloc;
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
    *(_QWORD *)v37 = &off_1E42E0480;
    *(_QWORD *)(v37 + 8) = 0;
    *(_QWORD *)(v37 + 32) = &off_1E42B5748;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = v36;
    *(_QWORD *)(v37 + 40) = 32;
    *(_DWORD *)(v37 + 48) = 6;
    v38 = 0uLL;
    *(_OWORD *)(v37 + 56) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 88) = 0u;
    *(_OWORD *)(v37 + 104) = 0u;
    *(_QWORD *)(v37 + 120) = 0;
    if ((v39 & 1) == 0)
    {
      v38 = 0uLL;
      if (v107)
      {
        v108 = operator new();
        *(_QWORD *)(v108 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v108 + 24) = "GeoGL";
        *(_OWORD *)(v108 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v108 = &off_1E42B5668;
        *(_QWORD *)(v108 + 8) = "GeoGL";
        *(_OWORD *)(v108 + 72) = 0u;
        *(_OWORD *)(v108 + 88) = 0u;
        *(_OWORD *)(v108 + 104) = 0u;
        *(_OWORD *)(v108 + 120) = 0u;
        *(_OWORD *)(v108 + 136) = 0u;
        *(_OWORD *)(v108 + 152) = 0u;
        *(_OWORD *)(v108 + 168) = 0u;
        *(_OWORD *)(v108 + 184) = 0u;
        *(_OWORD *)(v108 + 200) = 0u;
        *(_OWORD *)(v108 + 216) = 0u;
        *(_OWORD *)(v108 + 232) = 0u;
        *(_QWORD *)(v108 + 248) = 0;
        *(_OWORD *)(v108 + 56) = 0u;
        v109 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v108 + 56), 0);
        if ((_DWORD)v109)
          geo::read_write_lock::logFailure(v109, (uint64_t)"initialization", v110);
        v111 = malloc_create_zone(0, 0);
        *(_QWORD *)(v108 + 48) = v111;
        malloc_set_zone_name(v111, "GeoGL");
        *(_QWORD *)(v108 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v108;
        v38 = 0uLL;
      }
    }
    *(_QWORD *)(v37 + 128) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v37 + 136) = 0;
    *(_OWORD *)(v37 + 200) = v38;
    *(_OWORD *)(v37 + 184) = v38;
    *(_OWORD *)(v37 + 168) = v38;
    *(_QWORD *)(v37 + 216) = 0;
    *(_QWORD *)(v37 + 224) = -1;
    *(_OWORD *)(v37 + 152) = xmmword_19FFB2DD0;
    *(_DWORD *)(v37 + 144) = 0;
    *(_QWORD *)(v37 + 32) = &off_1E42B8160;
    *(_QWORD *)(v37 + 240) = "/Stars/Mesh";
    *(_QWORD *)(v37 + 248) = &ggl::Stars::starVertexReflection;
    *(_QWORD *)(v37 + 232) = &unk_1E42B8180;
    v40 = (_QWORD *)*p_shared_weak_owners;
    v41 = *(std::__shared_weak_count **)(*p_shared_weak_owners + 8);
    *v40 = v37 + 32;
    v40[1] = v37;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(_QWORD *)*p_shared_weak_owners;
    v45 = *((_QWORD *)this + 27);
    v46 = *((_QWORD *)this + 28);
    v47 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 2);
    v48 = *(_QWORD *)(v44 + 8) * v47;
    v49 = *(_QWORD *)(v44 + 72);
    v50 = *(_QWORD *)(v44 + 80) - v49;
    if (v48 != v50)
    {
      if (v48 <= v50)
      {
        if (v48 < v50)
          *(_QWORD *)(v44 + 80) = v49 + v48;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v44 + 72, v48 - v50);
      }
      v51 = *(std::__shared_weak_count **)(v44 + 32);
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      *(_QWORD *)(v44 + 120) = 0;
      *(_DWORD *)(v44 + 112) = 0;
      v54 = *(_QWORD *)(v44 + 80) - *(_QWORD *)(v44 + 72);
      *(_QWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = v54;
      *(_QWORD *)(v44 + 56) = 0;
      *(_QWORD *)(v44 + 64) = v54;
      v44 = *(_QWORD *)*p_shared_weak_owners;
      v45 = *((_QWORD *)this + 27);
      v46 = *((_QWORD *)this + 28);
      v47 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 2);
      v48 = *(_QWORD *)(v44 + 8) * v47;
    }
    v113 = v48;
    if (v48)
    {
      v114 = *(_QWORD *)(v44 + 72);
      if (v46 == v45)
        goto LABEL_51;
    }
    else
    {
      v114 = 0;
      if (v46 == v45)
      {
LABEL_51:
        v64 = *(_QWORD *)(v18 + 104);
        v63 = *(std::__shared_weak_count **)(v18 + 112);
        if (v63)
        {
          v65 = (unint64_t *)&v63->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = (_QWORD *)operator new();
        v68 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v112 = v19 + 1;
        v68->__shared_owners_ = 0;
        v69 = (unint64_t *)&v68->__shared_owners_;
        v68->__shared_weak_owners_ = 0;
        v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2588;
        v70 = v68 + 1;
        ggl::BufferData::BufferData((uint64_t)&v68[1], qword_1EE547AF8, 2, 1, 6, 1);
        v68[9].__shared_owners_ = (uint64_t)ggl::Stars::View::reflection(void)::reflection;
        v68[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9970;
        if (v63)
        {
          v71 = (unint64_t *)&v63->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
          ggl::PipelineSetup::PipelineSetup(v67, v64, (uint64_t)v63);
          v73 = (unint64_t *)&v63->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        else
        {
          ggl::PipelineSetup::PipelineSetup(v67, v64, 0);
        }
        *v67 = &off_1E42BBFB8;
        v75 = (std::__shared_weak_count **)v67[8];
        *v75 = v70;
        v75[1] = 0;
        v76 = (std::__shared_weak_count **)v67[20];
        do
          v77 = __ldxr(v69);
        while (__stxr(v77 + 1, v69));
        v78 = v76[1];
        *v76 = v70;
        v76[1] = v68;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        do
          v81 = __ldaxr(v69);
        while (__stlxr(v81 - 1, v69));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        v82 = (int64x2_t *)operator new();
        v82->i64[0] = (uint64_t)&off_1E42B59B0;
        v82[1].i64[0] = (uint64_t)"";
        v82[1].i64[1] = 0;
        v82[2].i64[0] = (uint64_t)v67;
        v82[2].i32[2] = 0;
        v82[3].i64[0] = 0;
        v82[3].i32[2] = 1065353216;
        v82[4].i64[0] = (uint64_t)v112;
        v82[4].i64[1] = 0;
        v82[5].i64[0] = 0;
        v82[5].i64[1] = 0;
        v82[6] = vdupq_n_s64(1uLL);
        v82[7].i64[0] = 0;
        v83 = (_QWORD *)operator new();
        v30 = v83;
        do
          v84 = __ldxr(p_shared_owners);
        while (__stxr(v84 + 1, p_shared_owners));
        *v83 = v82;
        v83[1] = v67;
        v83[2] = v112;
        v83[3] = v19;
        do
          v85 = __ldxr(p_shared_owners);
        while (__stxr(v85 + 1, p_shared_owners));
        do
          v86 = __ldaxr(p_shared_owners);
        while (__stlxr(v86 - 1, p_shared_owners));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        if (v63)
        {
          v87 = (unint64_t *)&v63->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (v114 && v113)
        {
          v89 = *(_QWORD *)(v44 + 64);
          if (v89 <= v113)
            v89 = v113;
          *(_QWORD *)(v44 + 56) = 0;
          *(_QWORD *)(v44 + 64) = v89;
        }
        do
          v90 = __ldaxr(p_shared_owners);
        while (__stlxr(v90 - 1, p_shared_owners));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        goto LABEL_92;
      }
    }
    v55 = *(float *)(v45 + 12 * v47 - 4);
    v56 = (float *)(v45 + 4);
    v57 = (float *)(v114 + 8);
    v58 = 1;
    v59 = (float)(1.0 / (float)(v55 - *(float *)(v45 + 8))) + (float)(1.0 / (float)(v55 - *(float *)(v45 + 8)));
    do
    {
      v60 = __sincosf_stret(*(v56 - 1));
      v61 = __sincosf_stret(*v56);
      *(v57 - 2) = (float)(v61.__cosval * 10000000.0) * v60.__cosval;
      *(v57 - 1) = (float)(v61.__cosval * 10000000.0) * v60.__sinval;
      *v57 = v61.__sinval * 10000000.0;
      v57[2] = (float)(v55 - v56[1]) * v59;
      v62 = v47 > v58++;
      v56 += 3;
      v57 += 8;
    }
    while (v62);
    goto LABEL_51;
  }
LABEL_93:
  pthread_mutex_lock(v16);
  v91 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  v92 = (v91 & 2) == 0 && *((_QWORD *)this + 30) != 0;
  *((_BYTE *)this + 249) = v92;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_19FCC5E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t altitude::SkyLoadJob::succeeded(altitude::SkyLoadJob *this)
{
  return *((unsigned __int8 *)this + 249);
}

uint64_t ggl::ConstantDataTyped<ggl::Stars::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Stars::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Stars::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Stars::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Stars::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Stars::StarsMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E46C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Stars::StarsMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E46C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Stars::StarsMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::Debug::BasePipelineState::BasePipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::DebugShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1ECE43AA8 = 1;
          }
          ggl::Debug::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          unk_1EE581460 = &ggl::Debug::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE581468 = 0;
          if ((v95 & 1) == 0
          {
            ggl::Debug::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            *(_QWORD *)algn_1EE581558 = ggl::Debug::View::reflection(void)::reflection;
            qword_1EE581560 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1EE581470 = (uint64_t)&ggl::Debug::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EE581478 = xmmword_19FFB3410;
        }
      }
      ggl::Debug::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::BasePipelineSetup::typedReflection(void)::ref;
      ggl::DebugShader::typedReflection(v90);
      qword_1ECE32138 = (uint64_t)&ggl::DebugShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::Debug::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5816F8 = 0;
        qword_1EE581700 = (uint64_t)"";
        dword_1EE581708 = 0;
        qword_1EE581710 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE581718 = 1;
      }
      qword_1ECE32140 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE32148 = 1;
      qword_1ECE32150 = 0;
      unk_1ECE32158 = 0;
      qword_1ECE32160 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE32168 = 0;
      if ((v93 & 1) == 0
      {
        ggl::Debug::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5815A8 = 0;
        qword_1EE5815B0 = (uint64_t)"style";
        dword_1EE5815B8 = 3;
        qword_1EE5815C0 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE5815C8 = xmmword_19FFB35E0;
        qword_1EE5815D8 = 1;
        unk_1EE5815E0 = "view";
        dword_1EE5815E8 = 3;
        qword_1EE5815F0 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE5815F8 = xmmword_19FFB2DB0;
        qword_1EE581608 = 2;
        unk_1EE581610 = "transform";
        dword_1EE581618 = 3;
        qword_1EE581620 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1EE581628 = 10;
      }
      qword_1ECE32170 = (uint64_t)&ggl::Debug::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE32178 = 3;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Debug::BasePipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BBD48;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Debug::BasePipelineSetup::~BasePipelineSetup(ggl::Debug::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Debug::BasePipelineSetup::constantDataIsEnabled(ggl::Debug::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::Debug::BasePipelineSetup::textureIsEnabled(ggl::Debug::BasePipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::Debug::BasePipelineSetup::BasePipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42BBD18;
  v15 = (uint64_t *)a1[8];
  v16 = *a4;
  v17 = a4[1];
  *v15 = *a4;
  v15[1] = 0;
  v18 = (_QWORD *)a1[20];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v18[1];
  *v18 = v16;
  v18[1] = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = a1[8];
  v25 = *a5;
  v26 = a5[1];
  *(_QWORD *)(v24 + 16) = *a5;
  *(_QWORD *)(v24 + 24) = 0;
  v27 = a1[20];
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = a1[8];
  v34 = *a6;
  v35 = a6[1];
  *(_QWORD *)(v33 + 32) = *a6;
  *(_QWORD *)(v33 + 40) = 0;
  v36 = a1[20];
  if (v35)
  {
    v37 = (unint64_t *)(v35 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v36 + 40);
  *(_QWORD *)(v36 + 32) = v34;
  *(_QWORD *)(v36 + 40) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return a1;
}

void ggl::Debug::BasePipelineSetup::setTransformConstantData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  if (a4)
  {
    v4 = (unint64_t *)(a4 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 40);
  *(_QWORD *)(a2 + 32) = a3;
  *(_QWORD *)(a2 + 40) = a4;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ggl::Debug::ExtendedPipelineState::~ExtendedPipelineState(ggl::Debug::ExtendedPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Debug::ExtendedPipelineState::ExtendedPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::DebugExtendedShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::extendedVboReflection;
            }
            ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r;
            unk_1EE58B490 = 1;
          }
          ggl::Debug::ExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r;
          unk_1EE58B2E0 = &ggl::Debug::pipelineDataExtendedPipelineDeviceStructs(void)::ref;
          qword_1EE58B2E8 = 0;
          if ((v95 & 1) == 0
          {
            ggl::Debug::pipelineDataExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            *(_QWORD *)algn_1EE58B448 = ggl::Debug::View::reflection(void)::reflection;
            qword_1EE58B450 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1EE58B2F0 = (uint64_t)&ggl::Debug::pipelineDataExtendedPipelineConstantStructs(void)::ref;
          unk_1EE58B2F8 = xmmword_19FFB3410;
        }
      }
      ggl::Debug::ExtendedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::ExtendedPipelineSetup::typedReflection(void)::ref;
      ggl::DebugExtendedShader::typedReflection(v90);
      qword_1EE58B288 = (uint64_t)&ggl::DebugExtendedShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::Debug::pipelineStateExtendedPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58B368 = 0;
        qword_1EE58B370 = (uint64_t)"";
        dword_1EE58B378 = 0;
        qword_1EE58B380 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineAttributeBinding_0(void)::attr;
        unk_1EE58B388 = 2;
      }
      qword_1EE58B290 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58B298 = 1;
      qword_1EE58B2A0 = 0;
      unk_1EE58B2A8 = 0;
      qword_1EE58B2B0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineDeviceStructBinding(void)::ref;
      unk_1EE58B2B8 = 0;
      if ((v93 & 1) == 0
      {
        ggl::Debug::pipelineStateExtendedPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE58B3A8 = 0;
        qword_1EE58B3B0 = (uint64_t)"style";
        dword_1EE58B3B8 = 3;
        qword_1EE58B3C0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantStyleBinding(void)::reflection;
        unk_1EE58B3C8 = xmmword_19FFB35E0;
        qword_1EE58B3D8 = 1;
        unk_1EE58B3E0 = "view";
        dword_1EE58B3E8 = 3;
        qword_1EE58B3F0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantViewBinding(void)::reflection;
        unk_1EE58B3F8 = xmmword_19FFB2DB0;
        qword_1EE58B408 = 2;
        unk_1EE58B410 = "transform";
        dword_1EE58B418 = 3;
        qword_1EE58B420 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantTransformBinding(void)::reflection;
        unk_1EE58B428 = 10;
      }
      qword_1EE58B2C0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE58B2C8 = 3;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Debug::ExtendedPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BBDE8;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Debug::ExtendedPipelineSetup::~ExtendedPipelineSetup(ggl::Debug::ExtendedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Debug::ExtendedPipelineSetup::constantDataIsEnabled(ggl::Debug::ExtendedPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::Debug::ExtendedPipelineSetup::textureIsEnabled(ggl::Debug::ExtendedPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::Debug::ExtendedPipelineSetup::ExtendedPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42BBDB8;
  v15 = (uint64_t *)a1[8];
  v16 = *a4;
  v17 = a4[1];
  *v15 = *a4;
  v15[1] = 0;
  v18 = (_QWORD *)a1[20];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v18[1];
  *v18 = v16;
  v18[1] = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = a1[8];
  v25 = *a5;
  v26 = a5[1];
  *(_QWORD *)(v24 + 16) = *a5;
  *(_QWORD *)(v24 + 24) = 0;
  v27 = a1[20];
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = a1[8];
  v34 = *a6;
  v35 = a6[1];
  *(_QWORD *)(v33 + 32) = *a6;
  *(_QWORD *)(v33 + 40) = 0;
  v36 = a1[20];
  if (v35)
  {
    v37 = (unint64_t *)(v35 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v36 + 40);
  *(_QWORD *)(v36 + 32) = v34;
  *(_QWORD *)(v36 + 40) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return a1;
}

void ggl::Debug::LinePipelineSetup::~LinePipelineSetup(ggl::Debug::LinePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Debug::LinePipelineSetup::constantDataIsEnabled(ggl::Debug::LinePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

uint64_t ggl::Debug::LinePipelineSetup::textureIsEnabled(ggl::Debug::LinePipelineSetup *this)
{
  return 0;
}

void md::BalloonLabelPart::~BalloonLabelPart(md::BalloonLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::BalloonLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 40))(mdm::Allocator::instance(void)::alloc, this, 640);
}

uint64_t md::BalloonLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;

  if (*(_BYTE *)(result + 608))
    a3 = *(float *)(result + 612);
  v5 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v5 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 128))(v7, a2, a3))
  {
    v7 = *v5++;
  }
  return result;
}

uint64_t md::BalloonLabelPart::partType(md::BalloonLabelPart *this)
{
  return 7;
}

BOOL md::BalloonLabelPart::needsCrossfade(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  if (!*(_BYTE *)(a1 + 631))
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = atomic_load((unsigned __int8 *)(v1 + 1240));
  return (v2 & 1) == 0;
}

void md::BalloonLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "Balloon");
}

md::BalloonLabelPart *md::BalloonLabelPart::BalloonLabelPart(md::BalloonLabelPart *this, md::IconLabelPart *a2, md::IconLabelPart *a3, md::IconLabelPart *a4, md::IconLabelPart *a5, md::LabelManager *a6, md::Label *a7, md::LabelStyle *a8)
{
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v17;
  geo::read_write_lock *v18;
  const char *v19;
  malloc_zone_t *zone;

  *((_DWORD *)this + 2) = 1065353216;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB2E30;
  *((_QWORD *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 136) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 152) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 168) = xmmword_19FFB3480;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_19FFB3580;
  *(_OWORD *)((char *)this + 296) = xmmword_19FFB3590;
  *(_OWORD *)((char *)this + 312) = xmmword_19FFB2E30;
  *((_QWORD *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 376) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 392) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 408) = xmmword_19FFB3480;
  *((_BYTE *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_19FFB3580;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((_BYTE *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  *(_DWORD *)((char *)this + 565) = 0;
  *(_QWORD *)this = off_1E4294028;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 74) = 0;
  {
    v17 = operator new();
    *(_QWORD *)(v17 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v17 + 24) = "VectorKitLabels";
    *(_OWORD *)(v17 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v17 = &off_1E42B5668;
    *(_QWORD *)(v17 + 8) = "VectorKitLabels";
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 136) = 0u;
    *(_OWORD *)(v17 + 152) = 0u;
    *(_OWORD *)(v17 + 168) = 0u;
    *(_OWORD *)(v17 + 184) = 0u;
    *(_OWORD *)(v17 + 200) = 0u;
    *(_OWORD *)(v17 + 216) = 0u;
    *(_OWORD *)(v17 + 232) = 0u;
    *(_QWORD *)(v17 + 248) = 0;
    *(_OWORD *)(v17 + 56) = 0u;
    v18 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v17 + 56), 0);
    if ((_DWORD)v18)
      geo::read_write_lock::logFailure(v18, (uint64_t)"initialization", v19);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v17 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v17 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v17;
  }
  *((_QWORD *)this + 75) = mdm::Allocator::instance(void)::alloc;
  *((_BYTE *)this + 608) = 0;
  *((_BYTE *)this + 616) = 0;
  *(_QWORD *)this = off_1E4291420;
  *((_DWORD *)this + 157) = 1;
  *((_BYTE *)this + 632) = 1;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a3);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a4);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a5);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(_QWORD *)a2 + 176))(a2, 1);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(_QWORD *)a3 + 176))(a3, 1);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(_QWORD *)a4 + 176))(a4, 1);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(_QWORD *)a5 + 176))(a5, 1);
  *((_BYTE *)a2 + 659) = 2;
  *((_BYTE *)a3 + 659) = 1;
  *((_BYTE *)a4 + 659) = 1;
  *((_QWORD *)this + 3) = a2;
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    v15 = atomic_load((unsigned __int8 *)(v14 + 1240));
    LOBYTE(v14) = v15 & 1;
  }
  *((_BYTE *)this + 631) = v14;
  return this;
}

void sub_19FCC7E98(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;

  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingManeuverArrowLabelPart::~ARWalkingManeuverArrowLabelPart(md::ARWalkingManeuverArrowLabelPart *this)
{
  *(_QWORD *)this = off_1E42A8258;
  md::LabelAnimator::~LabelAnimator((md::ARWalkingManeuverArrowLabelPart *)((char *)this + 632));
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A8258;
  md::LabelAnimator::~LabelAnimator((md::ARWalkingManeuverArrowLabelPart *)((char *)this + 632));
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARWalkingManeuverArrowLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, this, 736);
}

uint64_t md::ARWalkingManeuverArrowLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  double v10;
  double v11;
  _QWORD *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  void *v26;
  void *v27;
  float v28[4];

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 80))(**(_QWORD **)(a1 + 576));
  if ((_DWORD)result != 37)
    return result;
  v12 = *(_QWORD **)(a1 + 576);
  v13 = *(float **)(*v12 + 24);
  v14 = v13[20];
  v15 = v13[18];
  if (v14 < v15)
    return 14;
  v16 = v13[21];
  v17 = v13[19];
  if (v16 < v17)
    return 14;
  if (!*(_BYTE *)(a1 + 631))
    goto LABEL_11;
  v18 = v12[1];
  if (!v18)
    goto LABEL_11;
  v19 = v16 - v17;
  v20 = 0.0;
  v21 = fmaxf(v14 - v15, 0.0);
  if ((float)(v16 - v17) >= 0.0)
    v20 = (float)(v16 - v17) * 0.3;
  v22 = v17 + (float)(v19 * 0.5);
  v23 = v15 + (float)((float)(v14 - v15) * 0.5);
  v28[0] = v23 - v21;
  v28[1] = v22 - v20;
  v28[2] = v21 + v23;
  v28[3] = v20 + v22;
  v24 = v19 * 0.85;
  md::AnimatedTextureLabelPart::setMeshRectForStaging(v18, (uint64_t)v28);
  *(float *)(v18 + 648) = v24;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v18 + 80))(v18, a2, a3, a4);
  if ((_DWORD)result == 37)
  {
    v25 = *(_QWORD *)(v18 + 24);
    LODWORD(v10) = *(_DWORD *)(v25 + 76);
    v15 = fminf(*(float *)(v25 + 72), v15);
    LODWORD(v11) = *(_DWORD *)(v25 + 84);
    v14 = fmaxf(v14, *(float *)(v25 + 80));
    v17 = fminf(*(float *)&v10, v17);
    v16 = fmaxf(v16, *(float *)&v11);
LABEL_11:
    v26 = *(void **)(a1 + 232);
    if (v26)
    {
      free(v26);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v27 = *(void **)(a1 + 240);
    if (v27)
    {
      free(v27);
      *(_QWORD *)(a1 + 240) = 0;
    }
    *(float *)(a1 + 72) = v15;
    *(float *)(a1 + 76) = v17;
    *(float *)(a1 + 80) = v14;
    *(float *)(a1 + 84) = v16;
    *(_DWORD *)(a1 + 280) = *a3;
    *(_DWORD *)(a1 + 284) = a3[1];
    *(_DWORD *)(a1 + 104) = *a3;
    LODWORD(v9) = a3[1];
    *(_DWORD *)(a1 + 108) = LODWORD(v9);
    md::CollisionObject::setupShapeData(a1 + 72, v9, v10, v11);
    *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    return 37;
  }
  return result;
}

float md::ARWalkingManeuverArrowLabelPart::updateForDisplay(md::ARWalkingManeuverArrowLabelPart *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  float result;

  v2 = (uint64_t *)*((_QWORD *)this + 72);
  v3 = (uint64_t *)*((_QWORD *)this + 73);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 72);
  }
  result = (float)(*(float *)(*(_QWORD *)(*v2 + 24) + 80) - *(float *)(*(_QWORD *)(*v2 + 24) + 72)) * 0.15625;
  *((float *)this + 182) = result;
  return result;
}

uint64_t md::ARWalkingManeuverArrowLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float32x4_t v18;
  int16x4_t v19;
  uint64_t v20;
  int8x16_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  void *v24;
  void *v25;
  int8x16_t v27;
  float32x2_t v28;

  v10 = **(unsigned __int8 ***)(a1 + 576);
  v11 = *(_QWORD *)(a1 + 664);
  v12 = *(_QWORD *)(a1 + 656);
  if (0x8E38E38E38E38E39 * ((v11 - v12) >> 4) <= v10[563])
  {
    v13 = 0;
    if (v12 == v11 || *(_BYTE *)(a1 + 721) == 0)
      goto LABEL_11;
  }
  else
  {
    v12 += 144 * v10[563];
  }
  v13 = 0;
  if (v12)
  {
    v15 = *(_QWORD *)(v12 + 88);
    if (v15)
    {
      v13.i32[1] = 0;
      v13.f32[0] = *(float *)(a1 + 728) * *(float *)(*(_QWORD *)v15 + 32 * *(unsigned int *)(v15 + 32) + 8);
      if (*(_BYTE *)(a1 + 508))
        v13 = vmul_n_f32(*(float32x2_t *)(a1 + 328), v13.f32[0]);
    }
  }
LABEL_11:
  v28 = vadd_f32(*a5, v13);
  v16 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)v10 + 120))(v10, a2, a3, a4, &v28);
  if ((_DWORD)v16 != 37)
    return v16;
  v17 = *(_QWORD **)(a1 + 576);
  v18 = *(float32x4_t *)(*(_QWORD *)(*v17 + 24) + 312);
  v19.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB2E30, v18)).u32[0];
  v19.i32[1] = vmovn_s32(vcgtq_f32(v18, (float32x4_t)xmmword_19FFB2E30)).i32[1];
  v27 = vbslq_s8((int8x16_t)vmovl_s16(v19), (int8x16_t)v18, (int8x16_t)xmmword_19FFB2E30);
  if (*(_BYTE *)(a1 + 631))
  {
    v20 = v17[1];
    if (v20)
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)v20 + 120))(v20, a2, a3, a4, a5);
      v21 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) + 24) + 312);
      v22.i64[0] = v21->i64[0];
      v22.i64[1] = v27.i64[1];
      v23.i64[0] = v27.i64[0];
      v23.i64[1] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) + 24) + 320);
      v27 = vbslq_s8((int8x16_t)vcgtq_f32(v23, v22), *v21, v27);
      v24 = *(void **)(a1 + 472);
      if (!v24)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  v16 = 37;
  v24 = *(void **)(a1 + 472);
  if (v24)
  {
LABEL_17:
    free(v24);
    *(_QWORD *)(a1 + 472) = 0;
  }
LABEL_18:
  v25 = *(void **)(a1 + 480);
  if (v25)
  {
    free(v25);
    *(_QWORD *)(a1 + 480) = 0;
  }
  *(int8x16_t *)(a1 + 312) = v27;
  *(_QWORD *)(a1 + 424) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return v16;
}

_DWORD *md::ARWalkingManeuverArrowLabelPart::pushToRenderModel(uint64_t a1, uint64_t a2, float a3)
{
  _DWORD *result;
  _QWORD *v7;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 128))(**(_QWORD **)(a1 + 576));
  if (*(_BYTE *)(a1 + 631))
  {
    v7 = *(_QWORD **)(a1 + 576);
    result = (_DWORD *)v7[1];
    if (result)
    {
      result[196] = *(_DWORD *)(*v7 + 760);
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, float))(*(_QWORD *)result + 128))(result, a2, a3);
    }
  }
  return result;
}

uint64_t md::ARWalkingManeuverArrowLabelPart::stagingModelMatrix(md::ARWalkingManeuverArrowLabelPart *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t md::ARWalkingManeuverArrowLabelPart::modelMatrix(md::ARWalkingManeuverArrowLabelPart *this)
{
  return *((_QWORD *)this + 6);
}

void md::ARWalkingManeuverArrowLabelPart::animate(md::ARWalkingManeuverArrowLabelPart *this, __n128 a2)
{
  float v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  md::LabelAnimationTrack **v7;
  md::LabelAnimationTrack **v8;
  char v9;
  md::LabelAnimationTrack *v10;

  v2 = a2.n128_f32[0];
  v4 = (uint64_t *)*((_QWORD *)this + 72);
  v5 = (uint64_t *)*((_QWORD *)this + 73);
  while (v4 != v5)
  {
    v6 = *v4++;
    (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 616))(v6, v2);
  }
  if (!*((_BYTE *)this + 720))
  {
    if (*((_BYTE *)this + 722))
    {
      if (v2 < 100.0 && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 80) + 1192) + 52) != 2)
        return;
      *((_BYTE *)this + 722) = 0;
    }
    *((float *)this + 163) = *((float *)this + 163) + v2;
    v7 = (md::LabelAnimationTrack **)*((_QWORD *)this + 86);
    v8 = (md::LabelAnimationTrack **)*((_QWORD *)this + 87);
    if (v7 == v8)
      goto LABEL_12;
    v9 = 0;
    do
    {
      a2.n128_u32[0] = *((_DWORD *)this + 163);
      md::LabelAnimationTrack::runAnimation(*v7, a2);
      v10 = *v7++;
      v9 |= *((_BYTE *)v10 + 40) == 0;
    }
    while (v7 != v8);
    if ((v9 & 1) == 0)
LABEL_12:
      *((_BYTE *)this + 720) = 1;
  }
}

BOOL md::ARWalkingManeuverArrowLabelPart::isAnimating(md::ARWalkingManeuverArrowLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  BOOL v6;

  v2 = *((_QWORD *)this + 72);
  v3 = *((_QWORD *)this + 73);
  if (v2 == v3)
    return *((_BYTE *)this + 720) == 0;
  v4 = v2 + 8;
  do
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 - 8) + 704))(*(_QWORD *)(v4 - 8));
    if ((v5 & 1) != 0)
      break;
    v6 = v4 == v3;
    v4 += 8;
  }
  while (!v6);
  return (v5 & 1) != 0 || *((_BYTE *)this + 720) == 0;
}

double md::ARWalkingManeuverArrowLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3D50;
  strcpy(v3, "ARWalkingManeuverArrowLabelPart");
  return *(double *)"erArrowLabelPart";
}

uint64_t md::ARWalkingManeuverArrowLabelPart::ARWalkingManeuverArrowLabelPart(uint64_t a1, md::LabelManager *a2, md::Label *a3, _QWORD *a4, md::LabelPart *a5, char a6)
{
  unsigned __int8 v10;
  unsigned __int8 v11;
  md::LabelPart *v12;
  md::Label *v14;
  int v15;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  malloc_zone_t *zone;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;
  malloc_zone_t *v23;
  md::LabelManager *v24;
  _BYTE v25[12];

  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E4294028;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  if ((v10 & 1) == 0)
  {
    v14 = a3;
    v24 = a2;
    a2 = v24;
    a3 = v14;
    if (v15)
    {
      v16 = operator new();
      *(_QWORD *)(v16 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v16 + 24) = "VectorKitLabels";
      *(_OWORD *)(v16 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v16 = &off_1E42B5668;
      *(_QWORD *)(v16 + 8) = "VectorKitLabels";
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_OWORD *)(v16 + 104) = 0u;
      *(_OWORD *)(v16 + 120) = 0u;
      *(_OWORD *)(v16 + 136) = 0u;
      *(_OWORD *)(v16 + 152) = 0u;
      *(_OWORD *)(v16 + 168) = 0u;
      *(_OWORD *)(v16 + 184) = 0u;
      *(_OWORD *)(v16 + 200) = 0u;
      *(_OWORD *)(v16 + 216) = 0u;
      *(_OWORD *)(v16 + 232) = 0u;
      *(_QWORD *)(v16 + 248) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v16 + 56), 0);
      if ((_DWORD)v17)
        geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v16 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v16;
      a3 = v14;
      a2 = v24;
    }
  }
  *(_QWORD *)(a1 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)a1 = off_1E42A8258;
  *(_DWORD *)(a1 + 628) = 1;
  md::LabelAnimator::LabelAnimator(a1 + 632, a2, a3);
  *(_DWORD *)(a1 + 728) = 0;
  {
    v20 = operator new();
    *(_QWORD *)(v20 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v20 + 24) = "VectorKitLabels";
    *(_OWORD *)(v20 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v20 = &off_1E42B5668;
    *(_QWORD *)(v20 + 8) = "VectorKitLabels";
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 120) = 0u;
    *(_OWORD *)(v20 + 136) = 0u;
    *(_OWORD *)(v20 + 152) = 0u;
    *(_OWORD *)(v20 + 168) = 0u;
    *(_OWORD *)(v20 + 184) = 0u;
    *(_OWORD *)(v20 + 200) = 0u;
    *(_OWORD *)(v20 + 216) = 0u;
    *(_OWORD *)(v20 + 232) = 0u;
    *(_QWORD *)(v20 + 248) = 0;
    *(_OWORD *)(v20 + 56) = 0u;
    v21 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v20 + 56), 0);
    if ((_DWORD)v21)
      geo::read_write_lock::logFailure(v21, (uint64_t)"initialization", v22);
    v23 = malloc_create_zone(0, 0);
    *(_QWORD *)(v20 + 48) = v23;
    malloc_set_zone_name(v23, "VectorKitLabels");
    *(_QWORD *)(v20 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v20;
  }
  v12 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 1184, 8);
  v25[0] = 0;
  v25[10] = 0;
  md::HorizontalTextLabelPart::HorizontalTextLabelPart((uint64_t)v12, a4, (uint64_t)v25, 1);
  *(_QWORD *)v12 = off_1E42A7178;
  *((_BYTE *)v12 + 1168) = a6;
  md::CompositeLabelPart::addLabelPart(a1, v12);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v12 + 824))(v12, 1);
  if (a5)
  {
    *(_BYTE *)(a1 + 631) = 1;
    md::CompositeLabelPart::addLabelPart(a1, a5);
    (*(void (**)(md::LabelPart *, _QWORD))(*(_QWORD *)a5 + 824))(a5, 0);
  }
  md::LabelAnimator::setupAnimations(a1 + 632, 18, v12);
  return a1;
}

void sub_19FCC8AFC(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;
  md::LabelAnimator *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v7;
  uint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;
  malloc_zone_t *zone;

  v7 = atomic_load(v5);
  {
    v8 = operator new();
    *(_QWORD *)(v8 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v8 + 24) = "VectorKitLabels";
    *(_OWORD *)(v8 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v8 = &off_1E42B5668;
    *(_QWORD *)(v8 + 8) = "VectorKitLabels";
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 200) = 0u;
    *(_OWORD *)(v8 + 216) = 0u;
    *(_OWORD *)(v8 + 232) = 0u;
    *(_QWORD *)(v8 + 248) = 0;
    *(_OWORD *)(v8 + 56) = 0u;
    v9 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v8 + 56), 0);
    if ((_DWORD)v9)
      geo::read_write_lock::logFailure(v9, (uint64_t)"initialization", v10);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v8 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v8 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    *(_QWORD *)(v4 + 2392) = v8;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 2392) + 40))(*(_QWORD *)(v4 + 2392), v3, 1184);
  md::LabelAnimator::~LabelAnimator(v2);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ElevationRaster::elevationInMetersAtWorldPoint(uint64_t a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  int v22;
  double v23;
  double v24;
  float v25;
  unsigned int v26;
  double v28;
  float v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  float v50;
  __int16 v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  int v71;
  unint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unint64_t v77;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  __int16 v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  BOOL v88;
  int v89;
  int v90;
  int v91;
  _BOOL4 v93;
  unsigned __int16 v94;
  int v95;
  _BOOL4 v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _BOOL4 v103;
  unint64_t v104;
  float v105;
  unsigned __int16 v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v116;
  float v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;

  v20 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    LOBYTE(v21) = 0;
    v43 = 0;
    v44 = 0;
    return v43 & 0x100000000 | LOBYTE(v21) | v44;
  }
  LOBYTE(v21) = 0;
  v22 = 1 << *(_BYTE *)(a1 + 57);
  v23 = (double)v22;
  v24 = -1.0 / (double)v22;
  v25 = (a3 + v24 * (double)*(int *)(a1 + 64)) * (double)v22;
  v26 = 1.0;
  if (v25 < 0.0 || v25 > 1.0)
  {
    v43 = 0;
    v44 = 0;
    return v43 & 0x100000000 | LOBYTE(v21) | v44;
  }
  v28 = (double)(v22 + ~*(_DWORD *)(a1 + 60));
  v29 = (a4 + v24 * v28) * v23;
  v30 = v29 >= 0.0 && v29 <= 1.0;
  v43 = 0;
  v44 = 0;
  if (v30)
  {
    v32 = *(_QWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 40);
    *(float *)&v23 = (float)(v32 - 1);
    *(float *)&v24 = (float)(v31 - 1);
    v33 = *(float *)&v23 * v25;
    v34 = (float)(1.0 - v29) * *(float *)&v24;
    switch(a2)
    {
      case 0:
        v35 = llroundf(v33);
        v36 = llroundf(v34);
        v37 = v32 - 1;
        if ((int)v32 - 1 >= v35)
          v37 = v35;
        if (v35 >= 0)
          v38 = v37;
        else
          v38 = 0;
        v39 = v31 - 1;
        if ((int)v31 - 1 >= v36)
          v39 = v36;
        if (v36 >= 0)
          v40 = v39;
        else
          v40 = 0;
        v41 = v32 * v40 + v38;
        if (*(_BYTE *)(a1 + 24) == 8)
          LOBYTE(v34) = *(_BYTE *)(v20 + v41);
        else
          LOWORD(v34) = *(_WORD *)(v20 + 2 * v41);
        v117 = (float)*(__int16 *)(a1 + 52) + (float)((float)LODWORD(v34) * *(float *)(a1 + 48));
        goto LABEL_152;
      case 2:
        v45 = (int)v33;
        v46 = (int)v34;
        v47 = *(unsigned __int8 *)(a1 + 24);
        v48 = v32 - 1;
        v49 = v31 - 1;
        v50 = *(float *)(a1 + 48);
        v51 = *(_WORD *)(a1 + 52);
        if ((int)v32 - 1 >= (int)v33)
          v52 = (int)v33;
        else
          v52 = v32 - 1;
        if (v45 < 0)
          v52 = 0;
        if (v49 >= v46)
          v53 = (int)v34;
        else
          v53 = v31 - 1;
        if (v46 < 0)
          v53 = 0;
        v54 = v32 * v53;
        v55 = v54 + v52;
        if (v48 >= v45 + 1)
          v56 = v45 + 1;
        else
          v56 = v32 - 1;
        if (v45 < -1)
          v56 = 0;
        v57 = v54 + v56;
        v58 = v45 + 2;
        if (v48 < v45 + 2)
          v58 = v32 - 1;
        if (v45 < -2)
          v58 = 0;
        v59 = v54 + v58;
        if (v48 >= v45 + 3)
          v48 = v45 + 3;
        if (v45 < -3)
          v48 = 0;
        v60 = v54 + v48;
        if (v49 >= v46 + 1)
          v61 = v46 + 1;
        else
          v61 = v49;
        if (v46 < -1)
          v61 = 0;
        v62 = v32 * v61;
        v63 = v62 + v52;
        v64 = v62 + v56;
        v65 = v62 + v58;
        if (v47 == 8)
        {
          LOBYTE(v24) = *(_BYTE *)(v20 + v55);
          *(float *)&v24 = (float)LODWORD(v24);
          LOBYTE(v26) = *(_BYTE *)(v20 + v57);
          v66 = (float)v26;
          LOBYTE(v28) = *(_BYTE *)(v20 + v59);
          *(float *)&v28 = (float)LODWORD(v28);
          LOBYTE(a9) = *(_BYTE *)(v20 + v60);
          *(float *)&a9 = (float)LODWORD(a9);
          LOBYTE(a10) = *(_BYTE *)(v20 + v63);
          v67 = (float)LODWORD(a10);
          LOBYTE(v11) = *(_BYTE *)(v20 + v64);
          v68 = (float)v11;
          LOBYTE(v12) = *(_BYTE *)(v20 + v65);
          LOBYTE(v13) = *(_BYTE *)(v20 + v62 + v48);
          v69 = (float)v12;
          v70 = (float)v13;
          v71 = v46 + 2;
          if (v49 < v46 + 2)
            v71 = v49;
          if (v46 < -2)
            v71 = 0;
          v72 = v32 * v71;
          LOBYTE(v14) = *(_BYTE *)(v20 + v72 + v52);
          v73 = (float)v14;
          LOBYTE(v15) = *(_BYTE *)(v20 + v72 + v56);
          v74 = (float)v15;
          LOBYTE(v16) = *(_BYTE *)(v20 + v72 + v58);
          v75 = (float)v16;
          LOBYTE(v17) = *(_BYTE *)(v20 + v72 + v48);
          v76 = (float)v17;
          if (v49 >= v46 + 3)
            v49 = v46 + 3;
          if (v46 < -3)
            v49 = 0;
          v77 = v32 * v49;
          LOBYTE(v18) = *(_BYTE *)(v20 + v77 + v52);
          v78 = (float)v18;
          LOBYTE(v18) = *(_BYTE *)(v20 + v77 + v56);
          LOBYTE(v19) = *(_BYTE *)(v20 + v77 + v58);
          v79 = (float)v18;
          v80 = (float)v19;
          LOBYTE(v18) = *(_BYTE *)(v20 + v77 + v48);
        }
        else
        {
          LOWORD(v24) = *(_WORD *)(v20 + 2 * v55);
          *(float *)&v24 = (float)LODWORD(v24);
          LOWORD(v26) = *(_WORD *)(v20 + 2 * v57);
          v66 = (float)v26;
          LOWORD(v28) = *(_WORD *)(v20 + 2 * v59);
          *(float *)&v28 = (float)LODWORD(v28);
          LOWORD(a9) = *(_WORD *)(v20 + 2 * v60);
          *(float *)&a9 = (float)LODWORD(a9);
          LOWORD(a10) = *(_WORD *)(v20 + 2 * v63);
          v67 = (float)LODWORD(a10);
          LOWORD(v11) = *(_WORD *)(v20 + 2 * v64);
          v68 = (float)v11;
          LOWORD(v12) = *(_WORD *)(v20 + 2 * v65);
          LOWORD(v13) = *(_WORD *)(v20 + 2 * (v62 + v48));
          v69 = (float)v12;
          v70 = (float)v13;
          v118 = v46 + 2;
          if (v49 < v46 + 2)
            v118 = v49;
          if (v46 < -2)
            v118 = 0;
          v119 = v32 * v118;
          LOWORD(v14) = *(_WORD *)(v20 + 2 * (v119 + v52));
          v73 = (float)v14;
          LOWORD(v15) = *(_WORD *)(v20 + 2 * (v119 + v56));
          v74 = (float)v15;
          LOWORD(v16) = *(_WORD *)(v20 + 2 * (v119 + v58));
          v75 = (float)v16;
          LOWORD(v17) = *(_WORD *)(v20 + 2 * (v119 + v48));
          v76 = (float)v17;
          if (v49 >= v46 + 3)
            v49 = v46 + 3;
          if (v46 < -3)
            v49 = 0;
          v120 = v32 * v49;
          LOWORD(v18) = *(_WORD *)(v20 + 2 * (v120 + v52));
          v78 = (float)v18;
          LOWORD(v18) = *(_WORD *)(v20 + 2 * (v120 + v56));
          LOWORD(v19) = *(_WORD *)(v20 + 2 * (v120 + v58));
          v79 = (float)v18;
          v80 = (float)v19;
          LOWORD(v18) = *(_WORD *)(v20 + 2 * (v120 + v48));
        }
        v121 = (float)v51;
        v122 = v50 * v80;
        v123 = v50 * v79;
        v124 = v50 * v78;
        v125 = v50 * *(float *)&v24;
        v126 = (float)(v50 * *(float *)&v24) + v121;
        v127 = v50 * v66;
        v128 = v127 + v121;
        v129 = v50 * *(float *)&v28;
        v130 = v129 + v121;
        v131 = v50 * *(float *)&a9;
        v132 = v50 * v67;
        v133 = v50 * v68;
        v134 = v50 * v69;
        v135 = v50 * v70;
        v136 = v50 * v73;
        v137 = v50 * v74;
        v138 = v50 * v75;
        v139 = v50 * v76;
        v140 = v50 * (float)v18;
        v141 = v33 - (float)v45;
        v142 = v129 - v125;
        v143 = v127 - v129;
        v144 = v131 - v125;
        v145 = (float)((float)((float)(v128 * -5.0) + (float)(v130 * 4.0)) + (float)(v126 * 2.0)) - (float)(v131 + v121);
        v146 = v133 + v121;
        v147 = v142 + (float)((float)(v145 + (float)((float)(v144 + (float)(v143 * 3.0)) * v141)) * v141);
        v148 = (float)(v134 - v132)
             + (float)((float)((float)((float)((float)((float)((float)(v133 + v121) * -5.0)
                                                     + (float)((float)(v134 + v121) * 4.0))
                                             + (float)((float)(v132 + v121) * 2.0))
                                     - (float)(v135 + v121))
                             + (float)((float)((float)(v135 - v132) + (float)((float)(v133 - v134) * 3.0)) * v141))
                     * v141);
        v149 = (float)(v138 - v136)
             + (float)((float)((float)((float)((float)((float)((float)(v137 + v121) * -5.0)
                                                     + (float)((float)(v138 + v121) * 4.0))
                                             + (float)((float)(v136 + v121) * 2.0))
                                     - (float)(v139 + v121))
                             + (float)((float)((float)(v139 - v136) + (float)((float)(v137 - v138) * 3.0)) * v141))
                     * v141);
        v150 = (float)(v122 - v124)
             + (float)((float)((float)((float)((float)((float)((float)(v123 + v121) * -5.0)
                                                     + (float)((float)(v122 + v121) * 4.0))
                                             + (float)((float)(v124 + v121) * 2.0))
                                     - (float)(v140 + v121))
                             + (float)((float)((float)(v140 - v124) + (float)((float)(v123 - v122) * 3.0)) * v141))
                     * v141);
        v151 = v141 * 0.5;
        v152 = v128 + (float)(v151 * v147);
        v153 = v146 + (float)(v151 * v148);
        v117 = v153
             + (float)((float)((float)(v34 - (float)v46) * 0.5)
                     * (float)((float)((float)((float)(v137 + v121) + (float)(v151 * v149)) - v152)
                             + (float)((float)((float)((float)((float)((float)(v153 * -5.0)
                                                                     + (float)((float)((float)(v137 + v121)
                                                                                     + (float)(v151 * v149))
                                                                             * 4.0))
                                                             + (float)(v152 * 2.0))
                                                     - (float)((float)(v123 + v121) + (float)(v151 * v150)))
                                             + (float)((float)((float)((float)((float)(v123 + v121)
                                                                             + (float)(v151 * v150))
                                                                     - v152)
                                                             + (float)((float)(v153
                                                                             - (float)((float)(v137 + v121)
                                                                                     + (float)(v151 * v149)))
                                                                     * 3.0))
                                                     * (float)(v34 - (float)v46)))
                                     * (float)(v34 - (float)v46))));
LABEL_152:
        v21 = v117;
        v43 = 0x100000000;
        goto LABEL_153;
      case 3:
        v81 = 0;
        v82 = 0;
        v83 = 0;
        LODWORD(v10) = llroundf(v34);
        v84 = llroundf(v33) - 8;
        v85 = (__int16)(v10 - 8);
        v86 = (__int16)(v10 - 4);
        v88 = v85 >= 0 && v31 > (unsigned __int16)(v10 - 8);
        v89 = v31 - 1;
        if ((int)v31 - 1 >= v85)
          v90 = (__int16)(v10 - 8);
        else
          v90 = v31 - 1;
        v91 = (__int16)v10;
        v93 = v86 >= 0 && v31 > (unsigned __int16)(v10 - 4);
        if (v89 < v86)
          v86 = v31 - 1;
        v94 = v10 + 4;
        v95 = (__int16)(v10 + 4);
        v97 = (v10 & 0x8000u) == 0 && v31 > v10;
        if (v89 >= v91)
          v98 = v91;
        else
          v98 = v31 - 1;
        v99 = v32 * v90;
        v100 = v32 * v86;
        v101 = v32 * v98;
        v103 = v95 >= 0 && v31 > v94;
        if (v89 >= v95)
          v89 = v95;
        v104 = v32 * v89;
        v105 = 0.0;
        break;
      default:
        v42 = md::ElevationRaster::bilinearSample((uint64_t *)a1, v33, v34, v23, v24, 1.0, v28, a9, a10);
        v21 = *(float *)&v42;
        v43 = v42 & 0x100000000;
        goto LABEL_153;
    }
    while (1)
    {
      v106 = v84 + v82;
      if ((v106 & 0x8000) != 0)
        goto LABEL_101;
      v107 = v106;
      if ((int)v32 - 1 < v106)
        v107 = v32 - 1;
      if (v32 <= v106)
        goto LABEL_101;
      v108 = v81 >> 2;
      if (v88)
      {
        v109 = v99 + v107;
        if (*(_BYTE *)(a1 + 24) == 8)
        {
          v110 = *(unsigned __int8 *)(v20 + v109);
          if (!*(_BYTE *)(a1 + 80) || v110 != 255)
            goto LABEL_113;
        }
        else
        {
          v110 = *(unsigned __int16 *)(v20 + 2 * v109);
          if (!*(_BYTE *)(a1 + 80) || v110 != 0xFFFF)
          {
LABEL_113:
            LOWORD(v24) = *(_WORD *)(a1 + 52);
            *(_QWORD *)&v24 = vmovl_s16(*(int16x4_t *)&v24).u64[0];
            *(float *)&v24 = (float)SLODWORD(v24);
            v105 = v105
                 + (float)(gaussianLookup4x4[4 * v108]
                         * (float)(*(float *)&v24 + (float)(*(float *)(a1 + 48) * (float)v110)));
            ++v83;
          }
        }
      }
      if (!v93)
        goto LABEL_122;
      v111 = v100 + v107;
      if (*(_BYTE *)(a1 + 24) == 8)
      {
        v112 = *(unsigned __int8 *)(v20 + v111);
        if (!*(_BYTE *)(a1 + 80) || v112 != 255)
          goto LABEL_121;
      }
      else
      {
        v112 = *(unsigned __int16 *)(v20 + 2 * v111);
        if (!*(_BYTE *)(a1 + 80) || v112 != 0xFFFF)
        {
LABEL_121:
          LOWORD(v24) = *(_WORD *)(a1 + 52);
          *(_QWORD *)&v24 = vmovl_s16(*(int16x4_t *)&v24).u64[0];
          *(float *)&v24 = (float)SLODWORD(v24);
          v105 = v105
               + (float)(gaussianLookup4x4[4 * v108 + 1]
                       * (float)(*(float *)&v24 + (float)(*(float *)(a1 + 48) * (float)v112)));
          ++v83;
        }
      }
LABEL_122:
      if (!v97)
        goto LABEL_130;
      v113 = v101 + v107;
      if (*(_BYTE *)(a1 + 24) == 8)
      {
        v114 = *(unsigned __int8 *)(v20 + v113);
        if (!*(_BYTE *)(a1 + 80) || v114 != 255)
          goto LABEL_129;
      }
      else
      {
        v114 = *(unsigned __int16 *)(v20 + 2 * v113);
        if (!*(_BYTE *)(a1 + 80) || v114 != 0xFFFF)
        {
LABEL_129:
          LOWORD(v24) = *(_WORD *)(a1 + 52);
          *(_QWORD *)&v24 = vmovl_s16(*(int16x4_t *)&v24).u64[0];
          *(float *)&v24 = (float)SLODWORD(v24);
          v105 = v105
               + (float)(gaussianLookup4x4[4 * v108 + 2]
                       * (float)(*(float *)&v24 + (float)(*(float *)(a1 + 48) * (float)v114)));
          ++v83;
        }
      }
LABEL_130:
      if (v103)
      {
        v115 = v104 + v107;
        if (*(_BYTE *)(a1 + 24) == 8)
        {
          v116 = *(unsigned __int8 *)(v20 + v115);
          if (*(_BYTE *)(a1 + 80) && v116 == 255)
            goto LABEL_101;
        }
        else
        {
          v116 = *(unsigned __int16 *)(v20 + 2 * v115);
          if (*(_BYTE *)(a1 + 80) && v116 == 0xFFFF)
            goto LABEL_101;
        }
        LOWORD(v24) = *(_WORD *)(a1 + 52);
        *(_QWORD *)&v24 = vmovl_s16(*(int16x4_t *)&v24).u64[0];
        *(float *)&v24 = (float)SLODWORD(v24);
        v105 = v105
             + (float)(gaussianLookup4x4[4 * v108 + 3]
                     * (float)(*(float *)&v24 + (float)(*(float *)(a1 + 48) * (float)v116)));
        ++v83;
      }
LABEL_101:
      v82 = v81 + 4;
      v81 = (unsigned __int16)(v81 + 4);
      if (v81 >= 0x10)
      {
        if ((_WORD)v83)
        {
          v21 = v105 / (float)(unsigned __int16)v83;
          v43 = 0x100000000;
        }
        else
        {
          v21 = 0.0;
          v43 = 0;
        }
LABEL_153:
        v44 = LODWORD(v21) & 0xFFFFFF00;
        return v43 & 0x100000000 | LOBYTE(v21) | v44;
      }
    }
  }
  return v43 & 0x100000000 | LOBYTE(v21) | v44;
}

uint64_t md::ElevationRaster::bilinearSample(uint64_t *a1, float a2, float a3, double a4, double a5, float a6, double a7, double a8, float a9)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;

  v9 = (int)a2;
  v10 = (int)a3;
  v11 = *a1;
  v12 = a1[4];
  v13 = v12 - 1;
  v14 = *((_DWORD *)a1 + 10) - 1;
  if (*((_BYTE *)a1 + 24) == 8)
  {
    if (*((_BYTE *)a1 + 80))
    {
      if (v14 >= v10)
        v15 = (int)a3;
      else
        v15 = *((_DWORD *)a1 + 10) - 1;
      if (v10 < 0)
        v15 = 0;
      v16 = v12 * v15;
      if (v13 >= v9)
        v17 = (int)a2;
      else
        v17 = v12 - 1;
      if (v9 < 0)
        v17 = 0;
      v18 = v17;
      v19 = *(unsigned __int8 *)(v11 + v16 + v17);
      if (v19 == 255)
        return 0;
      if (v13 >= v9 + 1)
        v13 = v9 + 1;
      if (v9 < -1)
        v13 = 0;
      v20 = v13;
      v21 = *(unsigned __int8 *)(v11 + v16 + v13);
      if (v21 == 255)
        return 0;
      if (v14 >= v10 + 1)
        v14 = v10 + 1;
      if (v10 < -1)
        v14 = 0;
      v22 = v12 * v14;
      v23 = *(unsigned __int8 *)(v11 + v22 + v18);
      if (v23 == 255)
        return 0;
      v24 = *(unsigned __int8 *)(v11 + v22 + v20);
      if (v24 == 255)
        return 0;
      goto LABEL_49;
    }
    v31 = *((float *)a1 + 12);
    LOWORD(a4) = *((_WORD *)a1 + 26);
    LODWORD(a4) = vmovl_s16(*(int16x4_t *)&a4).u32[0];
    v32 = (float)SLODWORD(a4);
    if (v13 >= v9)
      v36 = (int)a2;
    else
      v36 = v12 - 1;
    if (v9 < 0)
      v36 = 0;
    if (v14 >= v10)
      v37 = (int)a3;
    else
      v37 = *((_DWORD *)a1 + 10) - 1;
    if (v10 < 0)
      v37 = 0;
    v38 = v12 * v37;
    LOBYTE(a4) = *(_BYTE *)(v11 + v38 + v36);
    *(float *)&a4 = v32 + (float)(v31 * (float)LODWORD(a4));
    if (v13 >= v9 + 1)
      v13 = v9 + 1;
    if (v9 < -1)
      v13 = 0;
    LOBYTE(a5) = *(_BYTE *)(v11 + v38 + v13);
    *(float *)&a5 = v32 + (float)(v31 * (float)LODWORD(a5));
    if (v14 >= v10 + 1)
      v14 = v10 + 1;
    if (v10 < -1)
      v14 = 0;
    v39 = v12 * v14;
    LOBYTE(a6) = *(_BYTE *)(v11 + v39 + v36);
    v33 = v32 + (float)(v31 * (float)LODWORD(a6));
    LOBYTE(a9) = *(_BYTE *)(v11 + v39 + v13);
LABEL_89:
    v34 = (float)LODWORD(a9);
    goto LABEL_90;
  }
  if (!*((_BYTE *)a1 + 80))
  {
    v31 = *((float *)a1 + 12);
    LOWORD(a4) = *((_WORD *)a1 + 26);
    LODWORD(a4) = vmovl_s16(*(int16x4_t *)&a4).u32[0];
    v32 = (float)SLODWORD(a4);
    if (v13 >= v9)
      v40 = (int)a2;
    else
      v40 = v12 - 1;
    if (v9 < 0)
      v40 = 0;
    if (v14 >= v10)
      v41 = (int)a3;
    else
      v41 = *((_DWORD *)a1 + 10) - 1;
    if (v10 < 0)
      v41 = 0;
    v42 = v12 * v41;
    LOWORD(a4) = *(_WORD *)(v11 + 2 * (v42 + v40));
    *(float *)&a4 = v32 + (float)(v31 * (float)LODWORD(a4));
    if (v13 >= v9 + 1)
      v13 = v9 + 1;
    if (v9 < -1)
      v13 = 0;
    LOWORD(a5) = *(_WORD *)(v11 + 2 * (v42 + v13));
    *(float *)&a5 = v32 + (float)(v31 * (float)LODWORD(a5));
    if (v14 >= v10 + 1)
      v14 = v10 + 1;
    if (v10 < -1)
      v14 = 0;
    v43 = v12 * v14;
    LOWORD(a6) = *(_WORD *)(v11 + 2 * (v43 + v40));
    v33 = v32 + (float)(v31 * (float)LODWORD(a6));
    LOWORD(a9) = *(_WORD *)(v11 + 2 * (v43 + v13));
    goto LABEL_89;
  }
  if (v14 >= v10)
    v25 = (int)a3;
  else
    v25 = *((_DWORD *)a1 + 10) - 1;
  if (v10 < 0)
    v25 = 0;
  v26 = v12 * v25;
  if (v13 >= v9)
    v27 = (int)a2;
  else
    v27 = v12 - 1;
  if (v9 < 0)
    v27 = 0;
  v28 = v27;
  v19 = *(unsigned __int16 *)(v11 + 2 * (v26 + v27));
  if (v19 == 0xFFFF)
    return 0;
  if (v13 >= v9 + 1)
    v13 = v9 + 1;
  if (v9 < -1)
    v13 = 0;
  v29 = v13;
  v21 = *(unsigned __int16 *)(v11 + 2 * (v26 + v13));
  if (v21 == 0xFFFF)
    return 0;
  if (v14 >= v10 + 1)
    v14 = v10 + 1;
  if (v10 < -1)
    v14 = 0;
  v30 = v12 * v14;
  v23 = *(unsigned __int16 *)(v11 + 2 * (v30 + v28));
  if (v23 == 0xFFFF)
    return 0;
  v24 = *(unsigned __int16 *)(v11 + 2 * (v30 + v29));
  if (v24 == 0xFFFF)
    return 0;
LABEL_49:
  v31 = *((float *)a1 + 12);
  LOWORD(a5) = *((_WORD *)a1 + 26);
  v32 = (float)vmovl_s16(*(int16x4_t *)&a5).i32[0];
  *(float *)&a4 = v32 + (float)(v31 * (float)v19);
  *(float *)&a5 = v32 + (float)(v31 * (float)v21);
  v33 = v32 + (float)(v31 * (float)v23);
  v34 = (float)v24;
LABEL_90:
  v44 = a2 - (float)v9;
  return COERCE_UNSIGNED_INT((float)((float)(*(float *)&a4 * (float)(1.0 - v44)) + (float)(*(float *)&a5 * v44))+ (float)((float)(a3 - (float)v10)* (float)((float)((float)(v33 * (float)(1.0 - v44)) + (float)((float)(v32 + (float)(v31 * v34)) * v44))- (float)((float)(*(float *)&a4 * (float)(1.0 - v44)) + (float)(*(float *)&a5 * v44))))) | 0x100000000;
}

BOOL md::ElevationRaster::decodePngElevationRaster(_DWORD *data, size_t size, char **a3, size_t *a4, size_t *a5)
{
  _BOOL8 v5;
  CGDataProvider *v11;
  CGDataProvider *v12;
  CGImageSourceRef v13;
  CGImage *ImageAtIndex;
  CGColorSpace *ColorSpace;
  size_t BytesPerRow;
  size_t BitsPerComponent;
  uint64_t v18;
  unsigned __int8 *v19;
  CGColorSpace *BaseColorSpace;
  size_t NumberOfComponents;
  uint8_t *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  size_t v28;
  uint8_t *v29;
  char *v30;
  size_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  size_t v36;
  unsigned int v37;

  v5 = 0;
  if (data && size)
  {
    if (*data != 1196314761 || data[1] != 169478669)
      return 0;
    if (md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::onceToken != -1)
      dispatch_once(&md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::onceToken, &__block_literal_global_29616);
    v11 = CGDataProviderCreateWithData(0, data, size, 0);
    if (!v11)
      return 0;
    v12 = v11;
    v13 = CGImageSourceCreateWithDataProvider(v11, (CFDictionaryRef)md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::options);
    CGDataProviderRelease(v12);
    if (!v13)
      return 0;
    if (!CGImageSourceGetCount(v13))
    {
      CFRelease(v13);
      return 0;
    }
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v13, 0, (CFDictionaryRef)md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::options);
    CFRelease(v13);
    if (ImageAtIndex)
    {
      CGImageGetImageProvider();
      ColorSpace = CGImageGetColorSpace(ImageAtIndex);
      *a4 = CGImageGetWidth(ImageAtIndex);
      *a5 = CGImageGetHeight(ImageAtIndex);
      BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
      BitsPerComponent = CGImageGetBitsPerComponent(ImageAtIndex);
      if (CGColorSpaceGetNumberOfComponents(ColorSpace) == 1
        && (CGImageGetBitmapInfo(ImageAtIndex),
            v18 = CGImageProviderCopyImageBlockSetWithOptions(),
            CGImageBlockSetGetPixelSize(),
            v18))
      {
        if (CGImageBlockSetGetCount() == 1 && CGImageBlockSetGetImageBlock())
        {
          v19 = (unsigned __int8 *)CGImageBlockGetData();
          if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelIndexed)
          {
            BaseColorSpace = CGColorSpaceGetBaseColorSpace(ColorSpace);
            NumberOfComponents = CGColorSpaceGetNumberOfComponents(BaseColorSpace);
            CGColorSpaceGetColorTableCount(ColorSpace);
            v22 = (uint8_t *)operator new[]();
            CGColorSpaceGetColorTable(ColorSpace, v22);
            std::vector<unsigned char>::resize((uint64_t)a3, *a4 * NumberOfComponents * *a5);
            v23 = *a5;
            if (*a5)
            {
              v24 = *a4;
              if (*a4)
              {
                v25 = 0;
                v26 = *a3;
                do
                {
                  if (v24 && NumberOfComponents)
                  {
                    v28 = 0;
                    do
                    {
                      v29 = &v22[NumberOfComponents * v19[v28 + v24 * v25]];
                      v30 = v26;
                      v31 = NumberOfComponents;
                      do
                      {
                        v32 = *v29++;
                        v30[NumberOfComponents * (v28 + v25 * *a4)] = v32;
                        ++v30;
                        --v31;
                      }
                      while (v31);
                      ++v28;
                      v24 = *a4;
                    }
                    while (*a4 > v28);
                    v23 = *a5;
                  }
                  ++v25;
                }
                while (v23 > v25);
              }
            }
            MEMORY[0x1A1AF4DE8](v22, 0x1000C8077774924);
            v5 = 1;
          }
          else
          {
            v33 = CGImageBlockGetBytesPerRow();
            std::vector<unsigned char>::resize((uint64_t)a3, *a5 * BytesPerRow);
            v34 = *a3;
            v35 = *a5;
            if (v33 == BytesPerRow)
            {
              memcpy(v34, v19, v35 * BytesPerRow);
            }
            else if (v35)
            {
              v36 = 0;
              v37 = 1;
              do
              {
                memcpy(&v34[v36 * BytesPerRow], &v19[v36 * v33], BytesPerRow);
                v36 = v37++;
              }
              while (*a5 > v36);
            }
            v5 = ((BitsPerComponent - 8) & 0xFFFFFFFFFFFFFFF7) == 0;
          }
        }
        else
        {
          v5 = 0;
        }
        CGImageBlockSetRelease();
      }
      else
      {
        v5 = 0;
      }
      CGImageRelease(ImageAtIndex);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

CFDictionaryRef ___ZN2md15ElevationRaster24decodePngElevationRasterEPKhmRNSt3__16vectorIhNS3_9allocatorIhEEEERmS9__block_invoke()
{
  CFDictionaryRef result;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = *(void **)MEMORY[0x1E0C9DAC0];
  values = (void *)*MEMORY[0x1E0C9AE50];
  result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::options = (uint64_t)result;
  return result;
}

void md::ElevationRaster::texture(md::ElevationRaster *this, uint64_t a2, float a3)
{
  md::ElevationRaster *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int16 v18;
  unsigned __int8 *v19;
  unsigned __int16 v20;
  unsigned int v21;
  BOOL v22;
  float v23;
  float v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  _QWORD *v32;
  double v33;
  double v34;
  float v35;
  double v36;
  double v37;
  float v38;
  uint64_t v40;
  int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  int shared_owners_high;
  int shared_owners;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;

  v4 = this;
  if (!*(_QWORD *)(a2 + 88))
  {
    v8 = *(unsigned __int8 **)a2;
    v9 = *(unsigned __int8 **)(a2 + 8);
    if (*(unsigned __int8 **)a2 != v9)
    {
      if (*(_BYTE *)(a2 + 24) == 8)
      {
        v10 = v8 + 1;
        if (v8 + 1 != v9)
        {
          v11 = *v8;
          v12 = v8 + 1;
          do
          {
            v14 = *v12++;
            v13 = v14;
            v15 = v11 >= v14;
            if (v11 <= v14)
              v11 = v13;
            if (!v15)
              v8 = v10;
            v10 = v12;
          }
          while (v12 != v9);
        }
        LOBYTE(a3) = *v8;
      }
      else
      {
        v16 = v9 - v8 - 2;
        if (v16)
        {
          v17 = v8 + 2;
          v18 = *(_WORD *)v8;
          v19 = v8 + 2;
          do
          {
            v21 = *(unsigned __int16 *)v19;
            v19 += 2;
            v20 = v21;
            v22 = v18 >= v21;
            if (v18 <= v21)
              v18 = v20;
            if (!v22)
              v8 = v17;
            v17 = v19;
            v16 -= 2;
          }
          while (v16);
        }
        LOWORD(a3) = *(_WORD *)v8;
      }
      v23 = (float)LODWORD(a3);
      v24 = *(float *)(a2 + 48);
      v25 = *(_WORD *)(a2 + 52);
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = (int)(float)v26;
      v29 = (int)(float)v27;
      v30 = (std::__shared_weak_count *)operator new(0x60uLL);
      v30->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      v30->__shared_weak_owners_ = 0;
      v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
      v65 = v30;
      v32 = &v30[1].__vftable;
      ggl::TextureData2D::TextureData2D((uint64_t)&v30[1], v28, v29, 1u, 2, 0);
      if (v29 >= 1 && v28 >= 1)
      {
        v40 = 0;
        v41 = 0;
        v42 = (float)(v26 - 1);
        *(float *)&v33 = (float)(v28 - 1);
        LODWORD(v34) = 1.0;
        v43 = 1.0 / *(float *)&v33;
        v44 = 1.0 / truncf((float)v25 + (float)(v24 * v23));
        do
        {
          v45 = 0;
          do
          {
            v46 = md::ElevationRaster::bilinearSample((uint64_t *)a2, (float)((float)(int)v45 * v42) * v43, (float)(v27 - 1) - (float)((float)((float)v41 * (float)(1.0 / (float)(v29 - 1))) * (float)(v27 - 1)), v33, v34, v35, v36, v37, v38);
            v47 = *(float *)&v46;
            if (!HIDWORD(v46))
              v47 = 0.0;
            *(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD))(*v32 + 16))(v32, 0) + v40 + v45++) = (int)(float)(sqrtf(sqrtf(v47 * v44)) * 255.0);
          }
          while (v28 != (_DWORD)v45);
          v40 += v45;
          ++v41;
        }
        while (v41 != v29);
      }
      v48 = (std::__shared_weak_count *)operator new(0x58uLL);
      v48->__shared_owners_ = 0;
      v49 = (unint64_t *)&v48->__shared_owners_;
      v48->__shared_weak_owners_ = 0;
      v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
      v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
      v48[1].__shared_weak_owners_ = 0;
      v48[2].__vftable = 0;
      v48[1].__shared_owners_ = 0;
      LODWORD(v48[2].__shared_owners_) = 0;
      *(_QWORD *)&v50 = 0x100000001;
      *((_QWORD *)&v50 + 1) = 0x100000001;
      *(_OWORD *)((char *)&v48[2].__shared_owners_ + 4) = v50;
      *(std::__shared_weak_count_vtbl **)((char *)&v48[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000000;
      HIDWORD(v48[3].__shared_owners_) = 0;
      v51 = operator new(0xB0uLL);
      v52 = v51;
      v51[1] = 0;
      v51[2] = 0;
      *v51 = &off_1E42E53B0;
      v53 = (char *)(v51 + 3);
      do
        v54 = __ldxr(p_shared_owners);
      while (__stxr(v54 + 1, p_shared_owners));
      v51[5] = 0;
      v51[6] = 0;
      *((_DWORD *)v51 + 14) = 0;
      v51[10] = 0x100000001;
      v4 = this;
      shared_owners = v65[1].__shared_owners_;
      shared_owners_high = HIDWORD(v65[1].__shared_owners_);
      *((_DWORD *)v51 + 22) = 0;
      *((_DWORD *)v51 + 23) = shared_owners_high;
      v51[12] = 0x100000001;
      v51[14] = 0;
      v51[15] = 0;
      v51[3] = &off_1E42BE438;
      v51[4] = 0;
      v51[8] = &unk_1E42BE458;
      v51[9] = "";
      *((_DWORD *)v51 + 32) = shared_owners;
      v51[17] = v32;
      v51[18] = v65;
      do
        v57 = __ldxr(p_shared_owners);
      while (__stxr(v57 + 1, p_shared_owners));
      *((_WORD *)v51 + 76) = 0;
      *((_BYTE *)v51 + 154) = 1;
      v51[20] = v48 + 1;
      v51[21] = v48;
      do
        v58 = __ldxr(v49);
      while (__stxr(v58 + 1, v49));
      v51[13] = v65[1].__shared_weak_owners_;
      do
        v59 = __ldaxr(p_shared_owners);
      while (__stlxr(v59 - 1, p_shared_owners));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      v60 = *(std::__shared_weak_count **)(a2 + 96);
      *(_QWORD *)(a2 + 88) = v53;
      *(_QWORD *)(a2 + 96) = v52;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      do
        v63 = __ldaxr(v49);
      while (__stlxr(v63 - 1, v49));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      do
        v64 = __ldaxr(p_shared_owners);
      while (__stlxr(v64 - 1, p_shared_owners));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)v4 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v4 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void md::MuninLabelMapTile::~MuninLabelMapTile(md::MuninLabelMapTile *this)
{
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::MuninLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, double *a2)
{
  long double v2;
  long double v3;
  double v4;
  long double v5;
  double v6;
  __double2 v7;

  v2 = *a2 * 6.28318531;
  v3 = exp(a2[1] * 6.28318531 + -3.14159265);
  v4 = atan(v3) * 2.0 + -1.57079633;
  v5 = fmod(v2, 6.28318531);
  v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
  v7 = __sincos_stret(v4);
  return 6378137.0 / sqrt(v7.__sinval * v7.__sinval * -0.00669437999 + 1.0) * v7.__cosval * __sincos_stret(v6).__cosval;
}

double md::MuninLabelMapTile::assignWorldPointToLabel(md::MuninLabelMapTile *this, md::Label *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  long double v8;
  long double v9;
  double v10;
  long double v11;
  double v12;
  __double2 v13;
  double v14;
  __double2 v15;
  double v16;
  double result;

  v3 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)a2 + 1) + 112))(*((_QWORD *)a2 + 1), (char *)a2 + 48);
  v4 = v3;
  if (*(_BYTE *)(v3 + 44))
  {
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
  }
  else
  {
    v8 = *(double *)(v3 + 24) * 6.28318531;
    v9 = exp(*(double *)(v3 + 32) * 6.28318531 + -3.14159265);
    v10 = atan(v9) * 2.0 + -1.57079633;
    v11 = fmod(v8, 6.28318531);
    v12 = fmod(v11 + 6.28318531, 6.28318531) + -3.14159265;
    v13 = __sincos_stret(v10);
    v14 = 6378137.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
    v15 = __sincos_stret(v12);
    v5 = v14 * v13.__cosval * v15.__cosval;
    v6 = v14 * v13.__cosval * v15.__sinval;
    v7 = v13.__sinval * 0.99330562 * v14;
    *(double *)v4 = v5;
    *(double *)(v4 + 8) = v6;
    *(double *)(v4 + 16) = v7;
    *(_BYTE *)(v4 + 44) = 1;
  }
  *((_DWORD *)a2 + 47) = 0;
  v16 = 1.0 / sqrt(v5 * v5 + v6 * v6 + v7 * v7);
  *((_BYTE *)a2 + 192) = 1;
  *((_BYTE *)a2 + 835) = 1;
  *((double *)a2 + 62) = v5;
  *((double *)a2 + 63) = v6;
  *((double *)a2 + 64) = v7;
  *((_QWORD *)a2 + 82) = 0;
  *((_QWORD *)a2 + 68) = 0;
  *((_QWORD *)a2 + 70) = 0;
  *((_QWORD *)a2 + 69) = 0;
  *((double *)a2 + 65) = v16 * v5;
  result = v16 * v7;
  *((double *)a2 + 66) = v16 * v6;
  *((double *)a2 + 67) = result;
  return result;
}

void altitude::EarthAdjustedViewNode::~EarthAdjustedViewNode(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::EarthAdjustedViewNode::computeView(altitude::EarthAdjustedViewNode *this, const karo::Item *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  int v11;
  double v12;
  long double v13;
  long double v14;
  long double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __double2 v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  double v35;
  __double2 v36;
  double v37;
  long double v38;
  double v39;
  double v40;
  double v41;
  long double v42;
  double v43;
  NSObject *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  _BOOL4 v56;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint8_t buf[4];
  double v64;
  __int16 v65;
  double v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (!v4)
    return 0;
  v5 = a3;
  if ((_DWORD)a3 == -1)
    v5 = *((unsigned int *)this + 14);
  v6 = (*(uint64_t (**)(uint64_t, altitude::EarthAdjustedViewNode *, uint64_t))(*(_QWORD *)v4 + 24))(v4, this, v5);
  v7 = v6;
  if (*(_DWORD *)(*((_QWORD *)this + 4) + 88) != *((_DWORD *)this + 15) || *(_DWORD *)(v6 + 112) != (_DWORD)v5)
  {
    v8 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 24))(v6 + 40);
    v9 = fmax(*(double *)(v7 + 1448) - fmax(*(double *)(v7 + 1448) * 0.8 + -1600.0, 2000.0), 1.0);
    v10 = v9 * 0.5;
    v11 = *((_DWORD *)this + 16);
    if (v11 == 1)
    {
      v13 = *v8;
      v14 = v8[1];
      v15 = v8[2];
      v16 = v14 * v14 + v13 * v13;
      v61 = v16 + v15 * v15;
      v62 = v9 * 0.5;
      v17 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 24))(v7 + 40);
      v19 = v17[3];
      v18 = v17[4];
      v20 = v17[5];
      v21 = v17[6];
      v22 = v18 * -2.0 * v20;
      v23 = -((v19 + v19) * v20 - v21 * (v18 * -2.0));
      v24 = v22 + (v19 + v19) * v21;
      v25 = -(v18 * -2.0 * v18 + 1.0 - (v19 + v19) * v19);
      v26 = 1.0 / sqrt(v23 * v23 + v24 * v24 + v25 * v25);
      v58 = v26 * v24;
      v59 = v26 * v23;
      v60 = v26 * v25;
      v27 = sqrt(v16);
      v28 = atan2(v15, v27 * 0.996647189);
      v29 = atan2(v14, v13);
      v30 = __sincos_stret(v28);
      v31 = atan2(v15 + v30.__sinval * v30.__sinval * 42841.3115 * v30.__sinval, v27 + v30.__cosval * v30.__cosval * -42697.6727 * v30.__cosval);
      v32 = __sincos_stret(v31);
      v33 = 6378137.0 / sqrt(v32.__sinval * v32.__sinval * -0.00669437999 + 1.0);
      v34 = v27 / v32.__cosval - (*(double *)(v7 + 1448) + v33);
      v35 = (v34 + v33) * v32.__cosval;
      v36 = __sincos_stret(v29);
      v37 = v59 * v59 + v58 * v58 + v60 * v60;
      v38 = v58 * v14 + v59 * v13 + v60 * v15;
      v39 = v38 + v38;
      v40 = ((v34 + v33 * 0.99330562) * v32.__sinval * ((v34 + v33 * 0.99330562) * v32.__sinval)
           + v35 * v36.__cosval * (v35 * v36.__cosval)
           + v35 * v36.__sinval * (v35 * v36.__sinval)
           - v13 * v13
           - v14 * v14
           - v15 * v15)
          * (4.0
           * v37)
          + v39 * v39;
      if (v40 >= 0.0 && (v41 = (sqrt(v40) + v39) * -0.5 / v37, v41 >= 0.0))
      {
        v42 = v60 * v15 + v58 * v14 + v59 * v13;
        v12 = v41
            + 20000.0
            + v41 / fmin(*(double *)(v7 + 416), *(double *)(v7 + 376))
            + fmax(fmin(v41 * 5.0, 6378137.0), 20000.0) * (1.0 - v42 * v42 / v61);
      }
      else
      {
        v12 = sqrt(v61) + 100000.0;
      }
      v10 = v62;
    }
    else
    {
      v12 = 0.0;
      if (!v11)
        v12 = sqrt((v9 + 12756274.0) * v9) + 357299.23;
    }
    v43 = fmax(v10, 1.0);
    if (v12 < v43 + -0.000001)
    {
      if ((altitude::EarthAdjustedViewNode::computeView(karo::Item const*,unsigned int)::seenBefore & 1) == 0)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v44 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          v64 = v43;
          v65 = 2048;
          v66 = v12;
          _os_log_impl(&dword_19F029000, v44, OS_LOG_TYPE_ERROR, "Adjustment not applied, invalid depth range, znear = %f zfar = %f", buf, 0x16u);
        }
        altitude::EarthAdjustedViewNode::computeView(karo::Item const*,unsigned int)::seenBefore = 1;
      }
      return v7;
    }
    v45 = (v12 + v43) * 0.5;
    v46 = v45 + -0.000001;
    v47 = v45 + 0.000001;
    if (v12 >= v43 + 0.000001)
    {
      v46 = v43;
      v47 = v12;
    }
    if (*(_BYTE *)(v7 + 1016))
    {
      v48 = fmax((v47 - v46) * 0.02, 1.0);
      v49 = v46 - v48;
      v50 = v48 + v47;
    }
    else
    {
      v51 = v46 * 0.98;
      v50 = v47 * 1.02;
      v49 = fmax(v51, *((double *)this + 6) * v47);
    }
    v52 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (!v52)
    {
      v56 = 0;
      v54 = 0.0;
      goto LABEL_34;
    }
    v53 = *(_QWORD *)(v52 + 112);
    if (v53)
    {
      v54 = *(double *)(*(_QWORD *)(v53 + 8) + 64);
      v55 = *(_QWORD *)(v52 + 112);
      if (v55)
      {
LABEL_30:
        v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 8) + 72) != 0;
LABEL_34:
        karo::graphics::View::setFar((karo::graphics::View *)v7, v50, v54, v56);
        karo::graphics::View::setNear((karo::graphics::View *)v7, v49, v54, v56);
        *((_DWORD *)this + 14) = *(_DWORD *)(v7 + 112);
        *((_DWORD *)this + 15) = *(_DWORD *)(*((_QWORD *)this + 4) + 88);
        return v7;
      }
    }
    else
    {
      v54 = 0.0;
      v55 = *(_QWORD *)(v52 + 112);
      if (v55)
        goto LABEL_30;
    }
    v56 = 0;
    goto LABEL_34;
  }
  return v7;
}

uint64_t md::TransitRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned __int8 *v25;

  v3 = *(unsigned __int8 *)(a3 + 1);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 384) + 32);
  if (v4[20] == v3 || v4[19] == v3)
  {
    v5 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
    v6 = *(unsigned __int8 **)(a2 + 24);
    v7 = *v6;
    v8 = v7 + v5;
    v9 = v6[1];
    v10 = v8 > v9;
    if (v8 <= v9)
      v11 = 0;
    else
      v11 = v6 + 4;
    *(_QWORD *)(*(_QWORD *)(result + 376) + 152) = v11;
    if (v10)
    {
      v6[1] = v6[2];
      v7 = 1;
    }
    *v6 = v7 + v5;
    *(_DWORD *)(*(_QWORD *)(result + 376) + 72) = v7 - *(unsigned __int8 *)(result + 48);
  }
  else if (v4[95] == v3 || v4[94] == v3)
  {
    v12 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
    v13 = *(unsigned __int8 **)(a2 + 24);
    v14 = *v13;
    v15 = v14 + v12;
    v16 = v13[1];
    v17 = v15 > v16;
    if (v15 <= v16)
      v18 = 0;
    else
      v18 = v13 + 4;
    *(_QWORD *)(*(_QWORD *)(result + 376) + 144) = v18;
    if (v17)
    {
      v13[1] = v13[2];
      v14 = 1;
    }
    *v13 = v14 + v12;
    *(_DWORD *)(*(_QWORD *)(result + 376) + 68) = v14 - *(unsigned __int8 *)(result + 48);
  }
  else if (v4[78] == v3 || v4[77] == v3)
  {
    v19 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
    v20 = *(unsigned __int8 **)(a2 + 24);
    v21 = *v20;
    v22 = v21 + v19;
    v23 = v20[1];
    v24 = v22 > v23;
    if (v22 <= v23)
      v25 = 0;
    else
      v25 = v20 + 4;
    *(_QWORD *)(*(_QWORD *)(result + 376) + 136) = v25;
    if (v24)
    {
      v20[1] = v20[2];
      v21 = 1;
    }
    *v20 = v21 + v19;
    *(_DWORD *)(*(_QWORD *)(result + 376) + 64) = v21 - *(unsigned __int8 *)(result + 48);
  }
  return result;
}

void md::TransitRenderLayer::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  void *v8;
  uint64_t v9;
  VKTimedAnimation *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  VKTimedAnimation *v21;
  VKAnimation *p_super;
  VKTimedAnimation *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD v36[5];
  int v37;
  _QWORD v38[6];

  v3 = *(_QWORD *)(a1 + 376);
  v4 = *(unsigned __int8 *)(v3 + 76);
  *(_BYTE *)(v3 + 76) = 0;
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v7 = (uint64_t **)(a1 + 424);
    do
    {
      v9 = *v5;
      std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(v7, *(_QWORD *)(*v5 + 384), *(_QWORD *)(*v5 + 384), *(_QWORD *)(*v5 + 392));
      if (!v4)
      {
        v24 = *(void **)(v9 + 408);
        if (v24)
        {
          objc_msgSend(v24, "stop");
          v25 = *(void **)(v9 + 408);
          if (v25)
          {
            *(_QWORD *)(v9 + 408) = 0;

          }
        }
        v26 = *(_QWORD *)(v9 + 384);
        *(_DWORD *)(v26 + 1344) = 1065353216;
        *(_BYTE *)(v26 + 1368) = 1;
        v27 = *(_QWORD *)(v26 + 864);
        v28 = *(_QWORD *)(v26 + 872);
        while (2)
        {
          if (v27 == v28)
            goto LABEL_4;
          if (*(float *)(v27 + 52) != 1.0)
          {
            *(_DWORD *)(v27 + 52) = 1065353216;
            v29 = *(_QWORD *)(v27 + 64);
            v30 = *(_QWORD *)(v27 + 72);
            if (v29 != v30)
            {
              v31 = v30 - v29 - 184;
              if (v31 < 0xB8)
              {
                do
                {
LABEL_33:
                  *(_BYTE *)(v29 + 177) = 1;
                  v29 += 184;
                }
                while (v29 != v30);
              }
              else
              {
                v32 = v31 / 0xB8 + 1;
                v33 = (_BYTE *)(v29 + 361);
                v34 = v32 & 0x3FFFFFFFFFFFFFELL;
                do
                {
                  *(v33 - 184) = 1;
                  *v33 = 1;
                  v33 += 368;
                  v34 -= 2;
                }
                while (v34);
                if (v32 != (v32 & 0x3FFFFFFFFFFFFFELL))
                {
                  v29 += 184 * (v32 & 0x3FFFFFFFFFFFFFELL);
                  goto LABEL_33;
                }
              }
            }
          }
          v27 += 104;
          continue;
        }
      }
      v10 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.5);
      LODWORD(v11) = 30.0;
      -[VKAnimation setFrequency:](v10, "setFrequency:", v11);
      v12 = *(_QWORD *)(v9 + 384);
      *(_DWORD *)(v12 + 1344) = 0;
      *(_BYTE *)(v12 + 1368) = 1;
      v13 = *(_QWORD *)(v12 + 864);
      v14 = *(_QWORD *)(v12 + 872);
      while (v13 != v14)
      {
        if (*(float *)(v13 + 52) != 0.0)
        {
          *(_DWORD *)(v13 + 52) = 0;
          v15 = *(_QWORD *)(v13 + 64);
          v16 = *(_QWORD *)(v13 + 72);
          if (v15 != v16)
          {
            v17 = v16 - v15 - 184;
            if (v17 < 0xB8)
              goto LABEL_16;
            v18 = v17 / 0xB8 + 1;
            v19 = (_BYTE *)(v15 + 361);
            v20 = v18 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *(v19 - 184) = 1;
              *v19 = 1;
              v19 += 368;
              v20 -= 2;
            }
            while (v20);
            if (v18 != (v18 & 0x3FFFFFFFFFFFFFELL))
            {
              v15 += 184 * (v18 & 0x3FFFFFFFFFFFFFELL);
              do
              {
LABEL_16:
                *(_BYTE *)(v15 + 177) = 1;
                v15 += 184;
              }
              while (v15 != v16);
            }
          }
        }
        v13 += 104;
      }
      objc_msgSend(*(id *)(v9 + 408), "stop");
      -[VKTimedAnimation setTimingFunction:](v10, "setTimingFunction:", VKAnimationCurveLinear);
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke;
      v38[3] = &__block_descriptor_48_e8_v12__0f8l;
      v38[4] = v9;
      v38[5] = 0x3F80000000000000;
      -[VKTimedAnimation setStepHandler:](v10, "setStepHandler:", v38);
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke_2;
      v36[3] = &__block_descriptor_44_e8_v12__0B8l;
      v36[4] = v9;
      v37 = 1065353216;
      -[VKAnimation setCompletionHandler:](v10, "setCompletionHandler:", v36);
      v21 = v10;
      p_super = &v21->super;
      if (v21)
        v23 = v21;
      v8 = *(void **)(v9 + 408);
      *(_QWORD *)(v9 + 408) = p_super;

      md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 400), p_super);
LABEL_4:
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_19FCCAD30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, md::LayoutContext *a3)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t *v8;
  double *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x8_t *v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float32x2_t v33;
  float v34;
  double v35;
  double v36;
  double v37;
  long double v38;
  long double v39;
  float64x2_t v40;
  const double *v41;
  float64x2_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  float32x4_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  float32x4_t *v54;
  uint64_t v55;
  float64_t v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _DWORD *v62;
  float64_t v63;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  float64x2_t v68[8];
  char v69;
  char **v70;
  char *v71;

  v4 = (uint64_t *)*((_QWORD *)a3 + 1);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_72;
  }
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v7 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v10 = *v4;
  v11 = *(_QWORD **)(v10 + 8 * v7);
  if (!v11)
    goto LABEL_25;
  v12 = (_QWORD *)*v11;
  if (!v12)
    goto LABEL_25;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v14 = v12[1];
      if (v14 == 0x1AF456233693CD46)
      {
        if (v12[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v14 & (*(_QWORD *)&v5 - 1)) != v7)
      {
        goto LABEL_25;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v13 = v12[1];
    if (v13 == 0x1AF456233693CD46)
      break;
    if (v13 >= *(_QWORD *)&v5)
      v13 %= *(_QWORD *)&v5;
    if (v13 != v7)
      goto LABEL_25;
LABEL_12:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (v12[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v15 = v12[5];
  if (*(_QWORD *)(v15 + 8) == 0x1AF456233693CD46)
  {
    v9 = *(double **)(v15 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
LABEL_26:
  if (v6.u32[0] > 1uLL)
  {
    v16 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v5 <= 0x3070CB6B3C7F21D3uLL)
      v16 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v5;
  }
  else
  {
    v16 = (*(_QWORD *)&v5 - 1) & 0x3070CB6B3C7F21D3;
  }
  v17 = *(_QWORD **)(v10 + 8 * v16);
  if (!v17)
    goto LABEL_48;
  v18 = (_QWORD *)*v17;
  if (!v18)
    goto LABEL_48;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v20 = v18[1];
      if (v20 == 0x3070CB6B3C7F21D3)
      {
        if (v18[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v20 & (*(_QWORD *)&v5 - 1)) != v16)
      {
        goto LABEL_48;
      }
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v19 = v18[1];
    if (v19 != 0x3070CB6B3C7F21D3)
    {
      if (v19 >= *(_QWORD *)&v5)
        v19 %= *(_QWORD *)&v5;
      if (v19 != v16)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v18[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v21 = v18[5];
  if (*(_QWORD *)(v21 + 8) == 0x3070CB6B3C7F21D3)
  {
    v8 = *(uint64_t **)(v21 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v8 = 0;
LABEL_49:
  if (v6.u32[0] > 1uLL)
  {
    v22 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v5 <= 0x8BD499FBD96FBB9ELL)
      v22 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v5;
  }
  else
  {
    v22 = (*(_QWORD *)&v5 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v23 = *(_QWORD **)(v10 + 8 * v22);
  if (!v23)
    goto LABEL_71;
  v24 = (_QWORD *)*v23;
  if (!v24)
    goto LABEL_71;
  if (v6.u32[0] < 2uLL)
  {
    v25 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v27 = v24[1];
      if (v27 == 0x8BD499FBD96FBB9ELL)
      {
        if (v24[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_69;
      }
      else if ((v27 & v25) != v22)
      {
        goto LABEL_71;
      }
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v26 = v24[1];
    if (v26 != 0x8BD499FBD96FBB9ELL)
    {
      if (v26 >= *(_QWORD *)&v5)
        v26 %= *(_QWORD *)&v5;
      if (v26 != v22)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v24[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_58:
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v28 = (int8x8_t *)v24[5];
  if (*(_QWORD *)&v28[1] == 0x8BD499FBD96FBB9ELL)
  {
    v5 = v28[4];
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  v29 = 0.0;
  v30 = 0.0;
  if (*(_BYTE *)(a1 + 417))
    v30 = *(float *)(*(_QWORD *)&v5 + 16);
  v31 = *(float *)(*(_QWORD *)&v5 + 20);
  md::LayoutContext::frameState(a3);
  v33 = 0;
  v34 = 0.0;
  if (*(unsigned __int8 *)(v32 + 128) - 4 >= 0xFFFFFFFD)
  {
    v35 = v9[536];
    v36 = v9[537];
    v66 = v9[538];
    v37 = sqrt(v35 * v35 + v36 * v36 + v66 * v66);
    v38 = asin(194259.118 / v37);
    v39 = cos(1.3962634 - v38);
    v40.f64[0] = 1.0 / v37;
    v29 = 1.0 / v37 * v35;
    v34 = 1.0 / v37 * v36;
    v40.f64[1] = v39;
    v41 = (const double *)&qword_19FFB19E0;
    v42 = vld1q_dup_f64(v41);
    v42.f64[0] = v66;
    v33 = vcvt_f32_f64(vmulq_f64(v40, v42));
  }
  v43 = *a2;
  v44 = a2[1];
  if (*a2 != v44)
  {
    do
    {
      v45 = *v43;
      v46 = v9[471] * v9[173] / (v9[171] * (*(double *)(*v43 + 72) - *(double *)(*v43 + 56)));
      *(float *)(v45 + 368) = v46;
      md::BaseMapTileDataRenderable::adjustZScale(v45, v30, v31);
      v47 = *(_QWORD *)(v45 + 384);
      *(_DWORD *)(v47 + 1352) = *(_DWORD *)(v45 + 368);
      v48 = *(_QWORD **)(v47 + 816);
      v49 = v48[1];
      v50 = (float32x4_t *)v48[9];
      gm::operator*<double,4,4,4>(v68[0].f64, v9 + 101, (double *)(v45 + 88));
      *v50 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v68[0]), v68[1]);
      v50[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v68[2]), v68[3]);
      v50[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v68[4]), v68[5]);
      v50[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v68[6]), v68[7]);
      v50[4].i32[0] = *(_DWORD *)(v45 + 368);
      v51 = v48[8];
      if (v51 <= v49)
        v51 = v49;
      v48[7] = 0;
      v48[8] = v51;
      v52 = *(_QWORD **)(v47 + 848);
      v53 = v52[1];
      v54 = (float32x4_t *)v52[9];
      *v54 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v45 + 88)), *(float64x2_t *)(v45 + 104));
      v54[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v45 + 120)), *(float64x2_t *)(v45 + 136));
      v54[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v45 + 152)), *(float64x2_t *)(v45 + 168));
      v54[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v45 + 184)), *(float64x2_t *)(v45 + 200));
      v54[4].f32[0] = v29;
      v54[4].f32[1] = v34;
      *(float32x2_t *)&v54[4].u32[2] = v33;
      if (v52[8] > v53)
        v53 = v52[8];
      v52[7] = 0;
      v52[8] = v53;
      md::LayoutContext::frameState(a3);
      md::GeometryContext::transformConstantData(v68[0].f64, v8, (unsigned __int8 *)(v45 + 24), *(unsigned __int8 *)(v55 + 128), 0.0, 0.0);
      v56 = v68[0].f64[0];
      v57 = *(_QWORD *)(*(_QWORD *)&v68[0].f64[0] + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v68[0].f64[0] + 16) & 2) == 0)
      {
        v58 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v58 != -1)
        {
          v71 = &v69;
          v70 = &v71;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      if (v57)
        v59 = *(_DWORD **)(*(_QWORD *)&v56 + 72);
      else
        v59 = 0;
      v60 = *(_QWORD **)(v47 + 832);
      v61 = v60[1];
      if (v61)
        v62 = (_DWORD *)v60[9];
      else
        v62 = 0;
      *v62 = *v59;
      v62[1] = v59[1];
      v62[2] = v59[2];
      v62[3] = v59[3];
      v62[4] = v59[4];
      v62[5] = v59[5];
      v62[6] = v59[6];
      v62[8] = v59[8];
      v62[9] = v59[9];
      v62[10] = v59[10];
      v62[11] = v59[11];
      v62[12] = v59[12];
      v62[13] = v59[13];
      v62[14] = v59[14];
      v62[15] = v59[15];
      v62[16] = v59[16];
      v62[17] = v59[17];
      v62[18] = v59[18];
      v62[19] = v59[19];
      v62[20] = v59[20];
      v62[21] = v59[21];
      v62[22] = v59[22];
      v62[23] = v59[23];
      v62[24] = v59[24];
      v62[25] = v59[25];
      v62[26] = v59[26];
      v62[27] = v59[27];
      v62[28] = v59[28];
      v62[29] = v59[29];
      v62[30] = v59[30];
      v62[31] = v59[31];
      v62[32] = v59[32];
      v62[33] = v59[33];
      v62[34] = v59[34];
      v62[35] = v59[35];
      v62[36] = v59[36];
      v62[37] = v59[37];
      v62[38] = v59[38];
      v62[39] = v59[39];
      v62[40] = v59[40];
      v62[41] = v59[41];
      v62[42] = v59[42];
      v62[43] = v59[43];
      v62[44] = v59[44];
      v62[45] = v59[45];
      v62[46] = v59[46];
      v62[47] = v59[47];
      v62[48] = v59[48];
      v62[49] = v59[49];
      v62[50] = v59[50];
      v62[51] = v59[51];
      v62[52] = v59[52];
      v62[53] = v59[53];
      v62[54] = v59[54];
      v62[55] = v59[55];
      v62[56] = v59[56];
      v62[57] = v59[57];
      v62[58] = v59[58];
      v62[59] = v59[59];
      v62[60] = v59[60];
      v62[61] = v59[61];
      v62[62] = v59[62];
      v62[63] = v59[63];
      v62[64] = v59[64];
      v62[65] = v59[65];
      v62[66] = v59[66];
      v62[67] = v59[67];
      v62[68] = v59[68];
      v62[69] = v59[69];
      v62[70] = v59[70];
      v62[71] = v59[71];
      v62[72] = v59[72];
      v62[73] = v59[73];
      v62[74] = v59[74];
      v62[75] = v59[75];
      v62[85] = v59[85];
      if (v62 && v61)
      {
        if (v60[8] > v61)
          v61 = v60[8];
        v60[7] = 0;
        v60[8] = v61;
      }
      v63 = v68[0].f64[1];
      if (*(_QWORD *)&v68[0].f64[1])
      {
        v64 = (unint64_t *)(*(_QWORD *)&v68[0].f64[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v63 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v63));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v63);
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t *std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (!md::TransitTileSetCompare::operator()(a2, v11))
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      result = (uint64_t *)md::TransitTileSetCompare::operator()(v11, a2);
      if (!(_DWORD)result)
        break;
      v8 = v10 + 1;
      v7 = v10[1];
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    v13 = (uint64_t *)operator new(0x30uLL);
    v14 = v13;
    v13[4] = a3;
    v13[5] = a4;
    if (a4)
    {
      v15 = (unint64_t *)(a4 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v10;
    *v8 = v13;
    v17 = (uint64_t *)**a1;
    if (v17)
    {
      *a1 = v17;
      v14 = *v8;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

BOOL md::TransitTileSetCompare::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  const void *v8;
  size_t v9;
  const void *v10;
  unsigned __int16 *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  unsigned int v15;
  BOOL v16;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == v5)
  {
    v6 = *(unsigned __int16 *)(a1 + 24);
    v7 = *(unsigned __int16 *)(a2 + 24);
    if (v6 == v7)
    {
      if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a2 + 96))
      {
        v8 = *(const void **)(a1 + 32);
        v9 = *(_QWORD *)(a1 + 40) - (_QWORD)v8;
        v10 = *(const void **)(a2 + 32);
        if (v9 == *(_QWORD *)(a2 + 40) - (_QWORD)v10 && !memcmp(v8, v10, v9))
          return *(_QWORD *)(a1 + 136) < *(_QWORD *)(a2 + 136);
      }
      v11 = (unsigned __int16 *)(a2 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a1 + 24);
    v7 = *(unsigned __int16 *)(a2 + 24);
  }
  v11 = (unsigned __int16 *)(a2 + 24);
  if (v6 != v7)
    goto LABEL_12;
LABEL_9:
  if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96)
    || (v12 = *(const void **)(a1 + 32),
        v13 = *(_QWORD *)(a1 + 40) - (_QWORD)v12,
        v14 = *(const void **)(a2 + 32),
        v13 != *(_QWORD *)(a2 + 40) - (_QWORD)v14)
    || memcmp(v12, v14, v13))
  {
LABEL_12:
    v15 = *v11;
    v16 = v6 >= v15;
    if (v6 == v15)
      return gdc::GenericKey::operator<(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
    return !v16;
  }
  v16 = v4 >= v5;
  return !v16;
}

uint64_t ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke(uint64_t result, float a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(float *)(result + 40) + (float)((float)(*(float *)(result + 44) - *(float *)(result + 40)) * a2);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 384);
  *(float *)(v3 + 1344) = v2;
  *(_BYTE *)(v3 + 1368) = 1;
  v4 = *(_QWORD *)(v3 + 864);
  for (i = *(_QWORD *)(v3 + 872); v4 != i; v4 += 104)
  {
    if (*(float *)(v4 + 52) == v2)
      continue;
    *(float *)(v4 + 52) = v2;
    v6 = *(_QWORD *)(v4 + 64);
    v7 = *(_QWORD *)(v4 + 72);
    if (v6 == v7)
      continue;
    v8 = v7 - v6 - 184;
    if (v8 >= 0xB8)
    {
      v9 = v8 / 0xB8 + 1;
      result = v6 + 361;
      v10 = v9 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(result - 184) = 1;
        *(_BYTE *)result = 1;
        result += 368;
        v10 -= 2;
      }
      while (v10);
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFELL))
        continue;
      v6 += 184 * (v9 & 0x3FFFFFFFFFFFFFELL);
    }
    do
    {
      *(_BYTE *)(v6 + 177) = 1;
      v6 += 184;
    }
    while (v6 != v7);
  }
  return result;
}

void ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(float *)(a1 + 40);
  v3 = *(_QWORD *)(v1 + 384);
  *(float *)(v3 + 1344) = v2;
  *(_BYTE *)(v3 + 1368) = 1;
  v4 = *(_QWORD *)(v3 + 864);
  for (i = *(_QWORD *)(v3 + 872); v4 != i; v4 += 104)
  {
    if (*(float *)(v4 + 52) == v2)
      continue;
    *(float *)(v4 + 52) = v2;
    v6 = *(_QWORD *)(v4 + 64);
    v7 = *(_QWORD *)(v4 + 72);
    if (v6 == v7)
      continue;
    v8 = v7 - v6 - 184;
    if (v8 >= 0xB8)
    {
      v9 = v8 / 0xB8 + 1;
      v10 = (_BYTE *)(v6 + 361);
      v11 = v9 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(v10 - 184) = 1;
        *v10 = 1;
        v10 += 368;
        v11 -= 2;
      }
      while (v11);
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFELL))
        continue;
      v6 += 184 * (v9 & 0x3FFFFFFFFFFFFFELL);
    }
    do
    {
      *(_BYTE *)(v6 + 177) = 1;
      v6 += 184;
    }
    while (v6 != v7);
  }
  v12 = *(void **)(v1 + 408);
  *(_QWORD *)(v1 + 408) = 0;

}

uint64_t ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke(uint64_t result, float a2)
{
  _QWORD *v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD **)(*(_QWORD *)(result + 32) + 104);
  if (v2)
  {
    v3 = 1.0 - a2;
    do
    {
      v4 = *(_QWORD *)(v2[16] + 384);
      *(float *)(v4 + 1344) = v3;
      *(_BYTE *)(v4 + 1368) = 1;
      v5 = *(_QWORD *)(v4 + 864);
      v6 = *(_QWORD *)(v4 + 872);
      while (v5 != v6)
      {
        if (*(float *)(v5 + 52) != v3)
        {
          *(float *)(v5 + 52) = v3;
          v7 = *(_QWORD *)(v5 + 64);
          v8 = *(_QWORD *)(v5 + 72);
          if (v7 != v8)
          {
            v9 = v8 - v7 - 184;
            if (v9 < 0xB8)
              goto LABEL_14;
            v10 = v9 / 0xB8 + 1;
            result = v10 & 0x3FFFFFFFFFFFFFELL;
            v11 = (_BYTE *)(v7 + 361);
            v12 = v10 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *(v11 - 184) = 1;
              *v11 = 1;
              v11 += 368;
              v12 -= 2;
            }
            while (v12);
            if (v10 != result)
            {
              v7 += 184 * (v10 & 0x3FFFFFFFFFFFFFELL);
              do
              {
LABEL_14:
                *(_BYTE *)(v7 + 177) = 1;
                v7 += 184;
              }
              while (v7 != v8);
            }
          }
        }
        v5 += 104;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    goto LABEL_17;
  v3 = *(_QWORD **)(v2 + 104);
  if (!v3)
    goto LABEL_17;
  while (2)
  {
    v4 = *(_QWORD *)(v3[16] + 384);
    *(_DWORD *)(v4 + 1344) = 0;
    *(_BYTE *)(v4 + 1368) = 1;
    v5 = *(_QWORD *)(v4 + 864);
    v6 = *(_QWORD *)(v4 + 872);
    while (v5 != v6)
    {
      if (*(float *)(v5 + 52) != 0.0)
      {
        *(_DWORD *)(v5 + 52) = 0;
        v7 = *(_QWORD *)(v5 + 64);
        v8 = *(_QWORD *)(v5 + 72);
        if (v7 != v8)
        {
          v9 = v8 - v7 - 184;
          if (v9 < 0xB8)
            goto LABEL_15;
          v10 = v9 / 0xB8 + 1;
          v11 = (_BYTE *)(v7 + 361);
          v12 = v10 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            *(v11 - 184) = 1;
            *v11 = 1;
            v11 += 368;
            v12 -= 2;
          }
          while (v12);
          if (v10 != (v10 & 0x3FFFFFFFFFFFFFELL))
          {
            v7 += 184 * (v10 & 0x3FFFFFFFFFFFFFELL);
            do
            {
LABEL_15:
              *(_BYTE *)(v7 + 177) = 1;
              v7 += 184;
            }
            while (v7 != v8);
          }
        }
      }
      v5 += 104;
    }
    v3 = (_QWORD *)*v3;
    if (v3)
      continue;
    break;
  }
LABEL_17:
  v13 = *(_QWORD *)(a1 + 64);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
    v14 = *(_QWORD *)(v2 + 376);
    v15 = *(void **)(v14 + 112);
    *(_QWORD *)(v14 + 112) = 0;

  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(v16);
  }
}

_QWORD *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CF6F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF6F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 8);
  v1[32] = 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 48))(v1);
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TransitLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::TransitRenderLayer::appendTransitLineCommandsToBuffer(md::TransitRenderLayer *this, ggl::CommandBuffer *a2, ggl::CommandBuffer *a3, const md::LayoutContext *a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  id v10;
  unsigned int v11;
  void *v12;
  float v13;
  float v14;
  __n128 v15;
  uint64_t v16;
  float v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char ***v29;
  char ***v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char **v34;
  char *v35;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  char *v40;
  unint64_t v41;
  void (***v42)(void);
  void (**v43)(void);
  char ***v44;
  uint64_t (***v45)();
  __int128 *v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  char ***v50;
  char ***v51;
  uint64_t (***v52)();
  __int128 *v53;
  uint64_t v54;
  char **v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  unint64_t v69;
  void (***v70)(void);
  void (**v71)(void);
  uint64_t v72;
  char ***v73;
  char ***v74;
  uint64_t (***v75)();
  __int128 *v76;
  uint64_t v77;
  char **v78;
  uint64_t v79;
  char ***v80;
  char ***v81;
  uint64_t (***v82)();
  __int128 *v83;
  uint64_t v84;
  char **v85;
  uint64_t v86;
  char ***v87;
  char ***v88;
  uint64_t (***v89)();
  __int128 *v90;
  uint64_t v91;
  char **v92;
  char ***v93;
  char ***v94;
  __int128 *v95;
  uint64_t v96;
  char **v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  void (***v113)(void);
  void (**v114)(void);
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char **v123;
  char **v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char **v153;
  char **v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  char *v180;
  uint64_t (***v181)();
  uint64_t v182;
  uint64_t v184;
  md::TransitRenderLayer *v185;
  uint64_t v186;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  int v191;
  uint64_t v192;
  _QWORD *v193;
  int v194;
  _QWORD v195[3];
  _QWORD *v196;
  _QWORD v197[3];
  _QWORD *v198;
  uint64_t (**v199)();
  uint64_t v200;
  ggl::CommandBuffer *v201;
  uint64_t (***v202)();
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)*((_QWORD *)this + 47);
  if (*((_BYTE *)this + 419))
  {
    if (*((_BYTE *)this + 360))
    {
      v186 = v5[6];
      if (!*((_BYTE *)this + 421))
      {
        v189 = v5[5];
        goto LABEL_11;
      }
      goto LABEL_8;
    }
    v186 = v5[2];
    if (*((_BYTE *)this + 421))
    {
LABEL_8:
      v189 = 0;
      goto LABEL_11;
    }
    v189 = v5[3];
  }
  else
  {
    v189 = 0;
    if (*((_BYTE *)this + 360))
      v6 = v5[4];
    else
      v6 = v5[1];
    v186 = v6;
  }
LABEL_11:
  v7 = *((_QWORD *)a4 + 1);
  if ((v7 & (v7 - 1)) != 0)
  {
    v9 = 0xA60DDA5A69582425;
    if (v7 <= 0xA60DDA5A69582425)
      v9 = 0xA60DDA5A69582425 % v7;
    v8 = *(_QWORD **)(*(_QWORD *)a4 + 8 * v9);
    do
    {
      do
        v8 = (_QWORD *)*v8;
      while (v8[1] != 0xA60DDA5A69582425);
    }
    while (v8[2] != 0xA60DDA5A69582425);
  }
  else
  {
    v8 = *(_QWORD **)(*(_QWORD *)a4 + 8 * ((v7 - 1) & 0xA60DDA5A69582425));
    do
    {
      do
        v8 = (_QWORD *)*v8;
      while (v8[1] != 0xA60DDA5A69582425);
    }
    while (v8[2] != 0xA60DDA5A69582425);
  }
  v10 = **(id **)(v8[5] + 32);
  v11 = *(_DWORD *)objc_msgSend(v10, "highInflationAlphaAtlas");
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "ribbonCrispness");
  v14 = v13;

  v16 = *((_QWORD *)this + 34);
  v184 = *((_QWORD *)this + 35);
  v185 = this;
  if (v16 != v184)
  {
    v15.n128_f32[0] = (float)v11;
    v17 = v14 * (float)v11;
    do
    {
      v188 = v16;
      v20 = *(_QWORD *)(*(_QWORD *)v16 + 384);
      v21 = *(unsigned __int8 *)(v20 + 169);
      v22 = 64;
      if (!*((_BYTE *)v185 + 418))
        v22 = 68;
      v23 = (*(_DWORD *)(*((_QWORD *)v185 + 47) + v22) + v21);
      v24 = *(_QWORD **)(v20 + 1064);
      if (!v24 && !*(_QWORD *)(v20 + 1072))
        goto LABEL_90;
      v25 = *(_QWORD **)(v20 + 1128);
      v26 = v25[1];
      *(float *)(v25[9] + 16) = v17;
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
      v27 = *(_QWORD **)(v20 + 1144);
      v28 = v27[1];
      *(float *)(v27[9] + 16) = v17;
      if (v27[8] > v28)
        v28 = v27[8];
      v27[7] = 0;
      v27[8] = v28;
      if (!v24)
        goto LABEL_90;
      v29 = (char ***)v24[1];
      v30 = (char ***)v24[2];
      if (v29 == v30)
      {
        v44 = (char ***)v24[1];
      }
      else
      {
        v191 = v21;
        v31 = v20;
        v32 = v23;
        do
        {
          v34 = *v29;
          v35 = (*v29)[70];
          v36 = (*v29)[69];
          if (v35 != v36)
          {
            v37 = (*v29)[70];
            do
            {
              v39 = (void *)*((_QWORD *)v37 - 3);
              v37 -= 24;
              v38 = v39;
              if (v39)
              {
                *((_QWORD *)v35 - 2) = v38;
                operator delete(v38);
              }
              v35 = v37;
            }
            while (v37 != v36);
          }
          v34[70] = v36;
          v34[67] = v34[66];
          v40 = v34[76];
          if (v40)
          {
            do
            {
              if (*((_QWORD *)v40 + 1))
              {
                v41 = 0;
                v42 = (void (***)(void))(v40 + 16);
                do
                {
                  v43 = *v42;
                  v42 += 15;
                  (*v43)();
                  ++v41;
                }
                while (v41 < *((_QWORD *)v40 + 1));
              }
              *((_QWORD *)v40 + 1) = 0;
              v40 = *(char **)v40;
            }
            while (v40);
            v33 = v34[76];
          }
          else
          {
            v33 = 0;
          }
          v34[77] = v33;
          ++v29;
        }
        while (v29 != v30);
        v44 = (char ***)v24[1];
        v29 = (char ***)v24[2];
        v23 = v32;
        v20 = v31;
        v21 = v191;
      }
      v24[7] = v186;
      v24[8] = v186;
      v24[9] = v189;
      v24[10] = v189;
      v199 = &off_1E42D9BD8;
      v200 = v23;
      v201 = a2;
      v202 = &v199;
      if (v44 == v29)
        goto LABEL_69;
      v45 = &v199;
      do
      {
        v48 = *v44;
        if (!v45)
          goto LABEL_61;
        if (v45 != &v199)
        {
          v45 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v45)[2])(v45);
LABEL_61:
          *((_QWORD *)&v204 + 1) = v45;
          goto LABEL_63;
        }
        *((_QWORD *)&v204 + 1) = &v203;
        v15.n128_f64[0] = ((double (*)(uint64_t (***)(), __int128 *))v199[3])(&v199, &v203);
LABEL_63:
        md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(v48, 3, (uint64_t)&v203, v15);
        v46 = (__int128 *)*((_QWORD *)&v204 + 1);
        if (*((__int128 **)&v204 + 1) == &v203)
        {
          v46 = &v203;
          v47 = 4;
LABEL_56:
          (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
          goto LABEL_57;
        }
        if (*((_QWORD *)&v204 + 1))
        {
          v47 = 5;
          goto LABEL_56;
        }
LABEL_57:
        ++v44;
        v45 = v202;
      }
      while (v44 != v29);
      if (v202 != &v199)
      {
        if (v202)
        {
          v49 = 5;
          goto LABEL_70;
        }
        goto LABEL_71;
      }
LABEL_69:
      v45 = &v199;
      v49 = 4;
LABEL_70:
      (*v45)[v49]();
LABEL_71:
      if (!v189)
        goto LABEL_90;
      v51 = (char ***)v24[1];
      v50 = (char ***)v24[2];
      v199 = &off_1E42D9BD8;
      v200 = v23;
      v201 = a2;
      v202 = &v199;
      if (v51 == v50)
        goto LABEL_88;
      v52 = &v199;
      while (2)
      {
        v55 = *v51;
        if (v52)
        {
          if (v52 != &v199)
          {
            v52 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v52)[2])(v52);
            goto LABEL_80;
          }
          *((_QWORD *)&v204 + 1) = &v203;
          v15.n128_f64[0] = ((double (*)(uint64_t (***)(), __int128 *))v199[3])(&v199, &v203);
        }
        else
        {
LABEL_80:
          *((_QWORD *)&v204 + 1) = v52;
        }
        md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(v55, 12, (uint64_t)&v203, v15);
        v53 = (__int128 *)*((_QWORD *)&v204 + 1);
        if (*((__int128 **)&v204 + 1) == &v203)
        {
          v53 = &v203;
          v54 = 4;
          goto LABEL_75;
        }
        if (*((_QWORD *)&v204 + 1))
        {
          v54 = 5;
LABEL_75:
          (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
        }
        ++v51;
        v52 = v202;
        if (v51 != v50)
          continue;
        break;
      }
      if (v202 != &v199)
      {
        if (v202)
        {
          v56 = 5;
          goto LABEL_89;
        }
        goto LABEL_90;
      }
LABEL_88:
      v52 = &v199;
      v56 = 4;
LABEL_89:
      (*v52)[v56]();
LABEL_90:
      v57 = *(_QWORD **)(v20 + 1072);
      if (!v57)
        goto LABEL_179;
      v192 = v20;
      v58 = v23;
      v59 = v57[1];
      v60 = v57[2];
      while (v59 != v60)
      {
        v62 = *(_QWORD **)v59;
        v63 = *(_QWORD *)(*(_QWORD *)v59 + 560);
        v64 = *(_QWORD *)(*(_QWORD *)v59 + 552);
        if (v63 != v64)
        {
          v65 = *(_QWORD *)(*(_QWORD *)v59 + 560);
          do
          {
            v67 = *(void **)(v65 - 24);
            v65 -= 24;
            v66 = v67;
            if (v67)
            {
              *(_QWORD *)(v63 - 16) = v66;
              operator delete(v66);
            }
            v63 = v65;
          }
          while (v65 != v64);
        }
        v62[70] = v64;
        v62[67] = v62[66];
        v68 = (_QWORD *)v62[76];
        if (v68)
        {
          do
          {
            if (v68[1])
            {
              v69 = 0;
              v70 = (void (***)(void))(v68 + 2);
              do
              {
                v71 = *v70;
                v70 += 15;
                (*v71)();
                ++v69;
              }
              while (v69 < v68[1]);
            }
            v68[1] = 0;
            v68 = (_QWORD *)*v68;
          }
          while (v68);
          v61 = v62[76];
        }
        else
        {
          v61 = 0;
        }
        v62[77] = v61;
        v59 += 8;
      }
      v57[7] = v186;
      v57[8] = v186;
      v57[9] = v189;
      v57[10] = v189;
      if (a3)
      {
        v72 = (*(_DWORD *)(*((_QWORD *)v185 + 47) + 72) + v21);
        v73 = (char ***)v57[1];
        v74 = (char ***)v57[2];
        v199 = &off_1E42D9BD8;
        v200 = v72;
        v201 = a3;
        v202 = &v199;
        v23 = v58;
        v75 = &v199;
        if (v73 == v74)
        {
          v79 = 4;
          v20 = v192;
          goto LABEL_142;
        }
        v20 = v192;
        while (2)
        {
          v78 = *v73;
          if (v75)
          {
            if (v75 != &v199)
            {
              v75 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v75)[2])(v75);
              goto LABEL_116;
            }
            *((_QWORD *)&v204 + 1) = &v203;
            v15.n128_f64[0] = ((double (*)(uint64_t (***)(), __int128 *))v199[3])(&v199, &v203);
          }
          else
          {
LABEL_116:
            *((_QWORD *)&v204 + 1) = v75;
          }
          md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(v78, 3, (uint64_t)&v203, v15);
          v76 = (__int128 *)*((_QWORD *)&v204 + 1);
          if (*((__int128 **)&v204 + 1) != &v203)
          {
            if (*((_QWORD *)&v204 + 1))
            {
              v77 = 5;
LABEL_111:
              (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
            }
            ++v73;
            v75 = v202;
            if (v73 == v74)
            {
              if (v202 != &v199)
              {
                if (v202)
                {
                  v79 = 5;
                  goto LABEL_142;
                }
LABEL_143:
                if (!v189)
                  goto LABEL_179;
                v88 = (char ***)v57[1];
                v87 = (char ***)v57[2];
                v199 = &off_1E42D9BD8;
                v200 = v72;
                v201 = a3;
                v202 = &v199;
                if (v88 == v87)
                {
LABEL_177:
                  v89 = &v199;
                  v98 = 4;
LABEL_178:
                  (*v89)[v98]();
                  goto LABEL_179;
                }
                v89 = &v199;
                while (2)
                {
                  v92 = *v88;
                  if (v89)
                  {
                    if (v89 != &v199)
                    {
                      v89 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v89)[2])(v89);
                      goto LABEL_152;
                    }
                    *((_QWORD *)&v204 + 1) = &v203;
                    v15.n128_f64[0] = ((double (*)(uint64_t (***)(), __int128 *))v199[3])(&v199, &v203);
                  }
                  else
                  {
LABEL_152:
                    *((_QWORD *)&v204 + 1) = v89;
                  }
                  md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(v92, 12, (uint64_t)&v203, v15);
                  v90 = (__int128 *)*((_QWORD *)&v204 + 1);
                  if (*((__int128 **)&v204 + 1) != &v203)
                  {
                    if (*((_QWORD *)&v204 + 1))
                    {
                      v91 = 5;
LABEL_147:
                      (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
                    }
                    ++v88;
                    v89 = v202;
                    if (v88 == v87)
                      goto LABEL_174;
                    continue;
                  }
                  break;
                }
                v90 = &v203;
                v91 = 4;
                goto LABEL_147;
              }
              v75 = &v199;
              v79 = 4;
LABEL_142:
              (*v75)[v79]();
              goto LABEL_143;
            }
            continue;
          }
          break;
        }
        v76 = &v203;
        v77 = 4;
        goto LABEL_111;
      }
      v80 = (char ***)v57[1];
      v81 = (char ***)v57[2];
      v199 = &off_1E42D9BD8;
      v200 = v58;
      v23 = v58;
      v201 = a2;
      v202 = &v199;
      v82 = &v199;
      if (v80 == v81)
      {
        v86 = 4;
        v20 = v192;
LABEL_159:
        (*v82)[v86]();
        goto LABEL_160;
      }
      v20 = v192;
      while (2)
      {
        v85 = *v80;
        if (v82)
        {
          if (v82 != &v199)
          {
            v82 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v82)[2])(v82);
            goto LABEL_132;
          }
          *((_QWORD *)&v204 + 1) = &v203;
          v15.n128_f64[0] = ((double (*)(uint64_t (***)(), __int128 *))v199[3])(&v199, &v203);
        }
        else
        {
LABEL_132:
          *((_QWORD *)&v204 + 1) = v82;
        }
        md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(v85, 3, (uint64_t)&v203, v15);
        v83 = (__int128 *)*((_QWORD *)&v204 + 1);
        if (*((__int128 **)&v204 + 1) == &v203)
        {
          v83 = &v203;
          v84 = 4;
          goto LABEL_127;
        }
        if (*((_QWORD *)&v204 + 1))
        {
          v84 = 5;
LABEL_127:
          (*(void (**)(void))(*(_QWORD *)v83 + 8 * v84))();
        }
        ++v80;
        v82 = v202;
        if (v80 != v81)
          continue;
        break;
      }
      if (v202 == &v199)
      {
        v82 = &v199;
        v86 = 4;
        goto LABEL_159;
      }
      if (v202)
      {
        v86 = 5;
        goto LABEL_159;
      }
LABEL_160:
      if (!v189)
        goto LABEL_179;
      v94 = (char ***)v57[1];
      v93 = (char ***)v57[2];
      v199 = &off_1E42D9BD8;
      v200 = v23;
      v201 = a2;
      v202 = &v199;
      if (v94 == v93)
        goto LABEL_177;
      v89 = &v199;
      while (2)
      {
        v97 = *v94;
        if (v89)
        {
          if (v89 != &v199)
          {
            v89 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v89)[2])(v89);
            goto LABEL_169;
          }
          *((_QWORD *)&v204 + 1) = &v203;
          v15.n128_f64[0] = ((double (*)(uint64_t (***)(), __int128 *))v199[3])(&v199, &v203);
        }
        else
        {
LABEL_169:
          *((_QWORD *)&v204 + 1) = v89;
        }
        md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(v97, 12, (uint64_t)&v203, v15);
        v95 = (__int128 *)*((_QWORD *)&v204 + 1);
        if (*((__int128 **)&v204 + 1) == &v203)
        {
          v95 = &v203;
          v96 = 4;
          goto LABEL_164;
        }
        if (*((_QWORD *)&v204 + 1))
        {
          v96 = 5;
LABEL_164:
          (*(void (**)(void))(*(_QWORD *)v95 + 8 * v96))();
        }
        ++v94;
        v89 = v202;
        if (v94 != v93)
          continue;
        break;
      }
LABEL_174:
      if (v89 == &v199)
        goto LABEL_177;
      if (v89)
      {
        v98 = 5;
        goto LABEL_178;
      }
LABEL_179:
      v99 = *(_QWORD **)(v20 + 1216);
      if (!v99)
        goto LABEL_25;
      v99[7] = v186;
      v99[8] = v186;
      v195[0] = &off_1E42CF740;
      v195[1] = v23;
      v195[2] = a2;
      v196 = v195;
      v100 = (_QWORD *)v99[1];
      v190 = (_QWORD *)v99[2];
      if (v100 == v190)
      {
LABEL_23:
        v18 = v195;
        v19 = 4;
        goto LABEL_24;
      }
      while (2)
      {
        v103 = *v100;
        v104 = (uint64_t)v196;
        if (v196)
        {
          if (v196 != v195)
          {
            v104 = (*(uint64_t (**)(void))(*v196 + 16))();
            goto LABEL_188;
          }
          v198 = v197;
          (*(void (**)(_QWORD *, _QWORD *))(v195[0] + 24))(v195, v197);
        }
        else
        {
LABEL_188:
          v198 = (_QWORD *)v104;
        }
        if (*(_BYTE *)(v103 + 400))
        {
          v193 = v100;
          v106 = *(_QWORD *)(v103 + 296);
          v105 = *(_QWORD *)(v103 + 304);
          if (v105 != v106)
          {
            v107 = *(_QWORD *)(v103 + 304);
            do
            {
              v109 = *(void **)(v107 - 24);
              v107 -= 24;
              v108 = v109;
              if (v109)
              {
                *(_QWORD *)(v105 - 16) = v108;
                operator delete(v108);
              }
              v105 = v107;
            }
            while (v107 != v106);
          }
          *(_QWORD *)(v103 + 304) = v106;
          *(_QWORD *)(v103 + 280) = *(_QWORD *)(v103 + 272);
          v110 = *(_QWORD **)(v103 + 352);
          if (v110)
          {
            do
            {
              if (v110[1])
              {
                v112 = 0;
                v113 = (void (***)(void))(v110 + 2);
                do
                {
                  v114 = *v113;
                  v113 += 15;
                  (*v114)();
                  ++v112;
                }
                while (v112 < v110[1]);
              }
              v110[1] = 0;
              v110 = (_QWORD *)*v110;
            }
            while (v110);
            v111 = *(_QWORD *)(v103 + 352);
          }
          else
          {
            v111 = 0;
          }
          *(_QWORD *)(v103 + 360) = v111;
          v115 = (uint64_t)v198;
          if (v198)
          {
            if (v198 != v197)
            {
              v115 = (*(uint64_t (**)(void))(*v198 + 16))();
              goto LABEL_207;
            }
            v202 = &v199;
            (*(void (**)(_QWORD *, uint64_t (***)()))(v197[0] + 24))(v197, &v199);
          }
          else
          {
LABEL_207:
            v202 = (uint64_t (***)())v115;
          }
          if (*(_BYTE *)(v103 + 400))
          {
            if (*(_BYTE *)(v103 + 136))
            {
              v116 = *(_QWORD *)(*(_QWORD *)(v103 + 8) + 56);
              *(_QWORD *)(v103 + 40) = v116;
              v117 = *(unsigned __int8 *)(v116 + 58) == 1;
              if (*(_BYTE *)(v103 + 264))
              {
LABEL_212:
                v118 = *(_QWORD *)(*(_QWORD *)(v103 + 8) + 64);
                *(_QWORD *)(v103 + 168) = v118;
                if (*(_BYTE *)(v118 + 58) == 1)
                  v117 = 1;
              }
            }
            else
            {
              v117 = 0;
              if (*(_BYTE *)(v103 + 264))
                goto LABEL_212;
            }
            v119 = *(uint64_t **)(v103 + 376);
            v120 = *(uint64_t **)(v103 + 384);
            if (v119 != v120)
            {
              v121 = 0;
              while (1)
              {
                v122 = *v119;
                if (*(_BYTE *)(*v119 + 48))
                {
                  if (*(_QWORD *)(v122 + 88) != v121)
                  {
                    if (v121)
                    {
                      v123 = ggl::Batcher::commit((__int128 **)(v103 + 272), 0xC8u, v15);
                      if (v123[1] != *v123)
                      {
                        v124 = v123;
                        if (*(_BYTE *)(v103 + 136))
                        {
                          v125 = *(_QWORD *)(v103 + 24);
                          v126 = *(_QWORD *)(v103 + 32);
                          v127 = *(_OWORD *)(v103 + 88);
                          v205 = *(_OWORD *)(v103 + 72);
                          v206 = v127;
                          v128 = *(_OWORD *)(v103 + 120);
                          v207 = *(_OWORD *)(v103 + 104);
                          v208 = v128;
                          v129 = *(_OWORD *)(v103 + 56);
                          v203 = *(_OWORD *)(v103 + 40);
                          v204 = v129;
                          v130 = *(_QWORD **)(v103 + 360);
                          v131 = v130[1];
                          if (v131 == *(_QWORD *)(v103 + 368))
                          {
                            v130 = (_QWORD *)*v130;
                            if (!v130)
                            {
                              v130 = malloc_type_malloc(120 * v131 + 16, 0xB644C221uLL);
                              *v130 = 0;
                              v130[1] = 0;
                              **(_QWORD **)(v103 + 360) = v130;
                            }
                            *(_QWORD *)(v103 + 360) = v130;
                            v131 = v130[1];
                          }
                          v132 = &v130[15 * v131];
                          v130[1] = v131 + 1;
                          v132[2] = &off_1E42B59B0;
                          v132[3] = v125;
                          v132 += 2;
                          v132[2] = v126;
                          v133 = v207;
                          v134 = v208;
                          v135 = v206;
                          *(_OWORD *)(v132 + 7) = v205;
                          v136 = v203;
                          *(_OWORD *)(v132 + 5) = v204;
                          *(_OWORD *)(v132 + 3) = v136;
                          *(_OWORD *)(v132 + 13) = v134;
                          *(_OWORD *)(v132 + 11) = v133;
                          *(_OWORD *)(v132 + 9) = v135;
                          v132[8] = v121;
                          v137 = *v124;
                          v132[11] = *v124;
                          v132[12] = (v124[1] - v137) >> 4;
                          v194 = 0;
                          *(_QWORD *)&v203 = v132;
                          if (!v202)
                            goto LABEL_272;
                          ((void (*)(uint64_t (***)(), int *, __int128 *))(*v202)[6])(v202, &v194, &v203);
                        }
                        if (*(_BYTE *)(v103 + 264))
                        {
                          v138 = *(_QWORD *)(v103 + 152);
                          v139 = *(_QWORD *)(v103 + 160);
                          v140 = *(_OWORD *)(v103 + 216);
                          v205 = *(_OWORD *)(v103 + 200);
                          v206 = v140;
                          v141 = *(_OWORD *)(v103 + 248);
                          v207 = *(_OWORD *)(v103 + 232);
                          v208 = v141;
                          v142 = *(_OWORD *)(v103 + 184);
                          v203 = *(_OWORD *)(v103 + 168);
                          v204 = v142;
                          v143 = *(_QWORD **)(v103 + 360);
                          v144 = v143[1];
                          if (v144 == *(_QWORD *)(v103 + 368))
                          {
                            v143 = (_QWORD *)*v143;
                            if (!v143)
                            {
                              v143 = malloc_type_malloc(120 * v144 + 16, 0xB644C221uLL);
                              *v143 = 0;
                              v143[1] = 0;
                              **(_QWORD **)(v103 + 360) = v143;
                            }
                            *(_QWORD *)(v103 + 360) = v143;
                            v144 = v143[1];
                          }
                          v145 = &v143[15 * v144];
                          v143[1] = v144 + 1;
                          v145[2] = &off_1E42B59B0;
                          v145[3] = v138;
                          v145 += 2;
                          v145[2] = v139;
                          v146 = v207;
                          v147 = v208;
                          v148 = v206;
                          *(_OWORD *)(v145 + 7) = v205;
                          v149 = v203;
                          *(_OWORD *)(v145 + 5) = v204;
                          *(_OWORD *)(v145 + 3) = v149;
                          *(_OWORD *)(v145 + 13) = v147;
                          *(_OWORD *)(v145 + 11) = v146;
                          *(_OWORD *)(v145 + 9) = v148;
                          v145[8] = v121;
                          v150 = *v124;
                          v145[11] = *v124;
                          v145[12] = (v124[1] - v150) >> 4;
                          v194 = 1;
                          *(_QWORD *)&v203 = v145;
                          if (!v202)
                            goto LABEL_272;
                          ((void (*)(uint64_t (***)(), int *, __int128 *))(*v202)[6])(v202, &v194, &v203);
                        }
                      }
                    }
                    v122 = *v119;
                    v121 = *(_QWORD *)(*v119 + 88);
                  }
                  v151 = 32;
                  if (v117)
                  {
                    v152 = v122 + 32;
                  }
                  else
                  {
                    v151 = 16;
                    v152 = v122 + 16;
                  }
                  if (*(_QWORD *)(v152 + 8) != *(_QWORD *)(v122 + v151))
                    gm::MultiRange<unsigned long>::push_back((char **)(v103 + 272), (_OWORD *)v152);
                }
                if (++v119 == v120)
                  goto LABEL_244;
              }
            }
            v121 = 0;
LABEL_244:
            v153 = ggl::Batcher::commit((__int128 **)(v103 + 272), 0xC8u, v15);
            if (v153[1] != *v153)
            {
              v154 = v153;
              if (*(_BYTE *)(v103 + 136))
              {
                v155 = *(_QWORD *)(v103 + 24);
                v156 = *(_QWORD *)(v103 + 32);
                v157 = *(_OWORD *)(v103 + 88);
                v205 = *(_OWORD *)(v103 + 72);
                v206 = v157;
                v158 = *(_OWORD *)(v103 + 120);
                v207 = *(_OWORD *)(v103 + 104);
                v208 = v158;
                v159 = *(_OWORD *)(v103 + 56);
                v203 = *(_OWORD *)(v103 + 40);
                v204 = v159;
                v160 = *(_QWORD **)(v103 + 360);
                v161 = v160[1];
                if (v161 == *(_QWORD *)(v103 + 368))
                {
                  v160 = (_QWORD *)*v160;
                  if (!v160)
                  {
                    v160 = malloc_type_malloc(120 * v161 + 16, 0xB644C221uLL);
                    *v160 = 0;
                    v160[1] = 0;
                    **(_QWORD **)(v103 + 360) = v160;
                  }
                  *(_QWORD *)(v103 + 360) = v160;
                  v161 = v160[1];
                }
                v162 = &v160[15 * v161];
                v160[1] = v161 + 1;
                v162[2] = &off_1E42B59B0;
                v162[3] = v155;
                v162 += 2;
                v162[2] = v156;
                v163 = v207;
                v164 = v208;
                v165 = v206;
                *(_OWORD *)(v162 + 7) = v205;
                v166 = v203;
                *(_OWORD *)(v162 + 5) = v204;
                *(_OWORD *)(v162 + 3) = v166;
                *(_OWORD *)(v162 + 13) = v164;
                *(_OWORD *)(v162 + 11) = v163;
                *(_OWORD *)(v162 + 9) = v165;
                v162[8] = v121;
                v167 = *v154;
                v162[11] = *v154;
                v162[12] = (v154[1] - v167) >> 4;
                v194 = 0;
                *(_QWORD *)&v203 = v162;
                if (!v202)
                {
LABEL_272:
                  std::__throw_bad_function_call[abi:nn180100]();
                  __break(1u);
                }
                ((void (*)(uint64_t (***)(), int *, __int128 *))(*v202)[6])(v202, &v194, &v203);
              }
              if (*(_BYTE *)(v103 + 264))
              {
                v168 = *(_QWORD *)(v103 + 152);
                v169 = *(_QWORD *)(v103 + 160);
                v170 = *(_OWORD *)(v103 + 216);
                v205 = *(_OWORD *)(v103 + 200);
                v206 = v170;
                v171 = *(_OWORD *)(v103 + 248);
                v207 = *(_OWORD *)(v103 + 232);
                v208 = v171;
                v172 = *(_OWORD *)(v103 + 184);
                v203 = *(_OWORD *)(v103 + 168);
                v204 = v172;
                v173 = *(_QWORD **)(v103 + 360);
                v174 = v173[1];
                if (v174 == *(_QWORD *)(v103 + 368))
                {
                  v173 = (_QWORD *)*v173;
                  if (!v173)
                  {
                    v173 = malloc_type_malloc(120 * v174 + 16, 0xB644C221uLL);
                    *v173 = 0;
                    v173[1] = 0;
                    **(_QWORD **)(v103 + 360) = v173;
                  }
                  *(_QWORD *)(v103 + 360) = v173;
                  v174 = v173[1];
                }
                v175 = &v173[15 * v174];
                v173[1] = v174 + 1;
                v175[2] = &off_1E42B59B0;
                v175[3] = v168;
                v175 += 2;
                v175[2] = v169;
                v176 = v207;
                v177 = v208;
                v178 = v206;
                *(_OWORD *)(v175 + 7) = v205;
                v179 = v203;
                *(_OWORD *)(v175 + 5) = v204;
                *(_OWORD *)(v175 + 3) = v179;
                *(_OWORD *)(v175 + 13) = v177;
                *(_OWORD *)(v175 + 11) = v176;
                *(_OWORD *)(v175 + 9) = v178;
                v175[8] = v121;
                v180 = *v154;
                v175[11] = *v154;
                v175[12] = (v154[1] - v180) >> 4;
                v194 = 1;
                *(_QWORD *)&v203 = v175;
                if (!v202)
                  goto LABEL_272;
                ((void (*)(uint64_t (***)(), int *, __int128 *))(*v202)[6])(v202, &v194, &v203);
              }
            }
          }
          v181 = v202;
          if (v202 == &v199)
          {
            v181 = &v199;
            v182 = 4;
            v100 = v193;
LABEL_263:
            (*v181)[v182]();
          }
          else
          {
            v100 = v193;
            if (v202)
            {
              v182 = 5;
              goto LABEL_263;
            }
          }
        }
        v101 = v198;
        if (v198 == v197)
        {
          v101 = v197;
          v102 = 4;
          goto LABEL_183;
        }
        if (v198)
        {
          v102 = 5;
LABEL_183:
          (*(void (**)(void))(*v101 + 8 * v102))();
        }
        if (++v100 != v190)
          continue;
        break;
      }
      v18 = v196;
      if (v196 == v195)
        goto LABEL_23;
      if (v196)
      {
        v19 = 5;
LABEL_24:
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
LABEL_25:
      v16 = v188 + 8;
    }
    while (v188 + 8 != v184);
  }
}

void sub_19FCCCE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FCCCE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  char *v37;
  uint64_t v38;

  v37 = a32;
  if (a32 == &a29)
  {
    v38 = 4;
    v37 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CF740;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF740;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2;
  v6 = *a3;
  v7 = v5 == 0;
  v8 = -3;
  if (!v7)
    v8 = -2;
  *(_QWORD *)(v6 + 48) = v8;
  *(_DWORD *)(v6 + 40) = v3;
  return ggl::CommandBuffer::pushRenderItem(v4, (ggl::RenderItem *)v6);
}

void std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D9BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  int v3;
  uint64_t v4;
  ggl::RenderItem *v5;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a3;
  *((_DWORD *)*a3 + 10) = v3;
  return ggl::CommandBuffer::pushRenderItem(v4, v5);
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (*a2 <= 4u)
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_DWORD *)(v2 + 408);
    if ((v3 + 1) > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    *(_DWORD *)(v2 + 408) = v4;
  }
  return result;
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF7D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF7D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TransitLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF788;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF788;
  a2[1] = v2;
  return result;
}

_QWORD **md::TransitRenderLayer::{unnamed type#1}::~TransitRenderLayer(_QWORD **a1)
{
  std::__tree<gdc::LayerDataWithWorld>::destroy(a1[10]);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a1[7]);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a1[4]);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a1[1]);
  return a1;
}

md::CTransitRenderResources **std::unique_ptr<md::CTransitRenderResources>::~unique_ptr[abi:nn180100](md::CTransitRenderResources **a1)
{
  md::CTransitRenderResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::CTransitRenderResources::~CTransitRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void altitude::RoadTileDataPrivate::operator()(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  geo::codec::VectorTile *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  geo::codec::VectorTile *v12;
  std::__shared_weak_count *v13;

  v8 = (geo::codec::VectorTile *)(***(uint64_t (****)(_QWORD))(a2 + 88))(*(_QWORD *)(a2 + 88));
  if (v8)
  {
    -[geo::codec::VectorTile vectorTilePtr](v8, "vectorTilePtr");
    v8 = v12;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (geo::codec::VectorTile::linesCount(v8) <= a3
    || *(_DWORD *)(geo::codec::VectorTile::lines(v12) + 168 * a3 + 100) <= a4)
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 72);
    v9 = v13;
    if (!v13)
      return;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = geo::codec::VectorTile::lines(v12) + 168 * a3;
    *(_DWORD *)(a1 + 8) = a4;
    *(_DWORD *)(a1 + 12) = a3;
    v9 = v13;
    if (!v13)
      return;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_19FCCD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float altitude::RoadTileDataPrivate::evaluate(altitude::RoadTileDataPrivate *this, unsigned int a2, unsigned int a3, float a4)
{
  void *v7;
  uint64_t v8;
  float v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v13;
  std::__shared_weak_count *v14;

  v7 = (void *)(**(uint64_t (***)(altitude::RoadTileDataPrivate *))this)(this);
  if (v7)
  {
    objc_msgSend(v7, "vectorTilePtr");
    v7 = v13;
  }
  else
  {
    v14 = 0;
  }
  v8 = geo::codec::VectorTile::lines((geo::codec::VectorTile *)v7);
  v9 = geo::codec::roadFeatureMapOriginalToEvaluatedIndex((std::__shared_weak_count **)(v8 + 168 * a2), (const GeoCodecsRoadFeature *)a3, a4);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v9;
}

void sub_19FCCD4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::RoadSuperTile *,std::shared_ptr<altitude::RoadSuperTile>::__shared_ptr_default_delete<altitude::RoadSuperTile,altitude::RoadSuperTile>,std::allocator<altitude::RoadSuperTile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

std::mutex *std::__shared_ptr_pointer<altitude::RoadSuperTile *,std::shared_ptr<altitude::RoadSuperTile>::__shared_ptr_default_delete<altitude::RoadSuperTile,altitude::RoadSuperTile>,std::allocator<altitude::RoadSuperTile>>::__on_zero_shared(uint64_t a1)
{
  std::mutex *result;

  result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    altitude::RoadSuperTile::~RoadSuperTile(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void altitude::SgNode::~SgNode(altitude::SgNode *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42C69F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42C69F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::SgNode::update(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t *j;
  uint64_t *v14;
  uint64_t v15;

  v9 = result;
  v10 = *(uint64_t **)(result + 32);
  for (i = *(uint64_t **)(result + 40); v10 != i; *(_QWORD *)(v12 + 248) = a4[2])
  {
    v12 = *v10++;
    *(_BYTE *)(v12 + 180) = a5;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a3);
    *(_QWORD *)(v12 + 232) = *a4;
    *(_QWORD *)(v12 + 240) = a4[1];
  }
  v14 = *(uint64_t **)(v9 + 8);
  for (j = *(uint64_t **)(v9 + 16);
        v14 != j;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v15 + 16))(v15, a2, a3, a4, a5))
  {
    v15 = *v14;
    v14 += 2;
  }
  return result;
}

void altitude::SgStaticTransform::~SgStaticTransform(altitude::SgStaticTransform *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42C69F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42C69F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A1AF4E00);
}

float *altitude::SgStaticTransform::update(uint64_t a1, uint64_t a2, double *a3, float64x2_t *a4, uint64_t a5)
{
  int32x2_t v10;
  float32x2_t v11;
  __int128 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float *result;
  float32x2_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float32x2_t v28;
  double v29;
  double v30;
  double v31;
  float32x2_t v32;
  float64x2_t v33;
  double v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *i;
  uint64_t *v39;
  uint64_t v40;
  int32x2_t v41;
  int32x2_t v42;
  __int32 v43;
  __int32 v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  _BYTE v48[24];
  double v49;
  double v50;
  double v51;
  double v52;

  *(_DWORD *)v48 = *(_DWORD *)(a1 + 56);
  v44 = *(_DWORD *)v48;
  v10 = *(int32x2_t *)(a1 + 72);
  v49 = *(double *)(a1 + 88);
  v11 = *(float32x2_t *)&v49;
  *(_QWORD *)&v12 = *(_QWORD *)(a1 + 60);
  v41 = v10;
  v42 = (int32x2_t)v12;
  *((int32x2_t *)&v12 + 1) = v10;
  *(_OWORD *)&v48[4] = v12;
  *(_DWORD *)&v48[20] = *(_DWORD *)(a1 + 80);
  v43 = *(_DWORD *)&v48[20];
  LODWORD(v50) = *(_DWORD *)(a1 + 96);
  v13 = *(float *)&v50;
  v14 = *(float *)(a1 + 104);
  v15 = *(float *)(a1 + 108);
  v16 = *(float *)(a1 + 112);
  result = gm::quaternionFromRotationMatrix<float>((float *)&v46, (float *)v48);
  v18.i32[0] = *(_DWORD *)(a1 + 68);
  v18.i32[1] = *(_DWORD *)(a1 + 84);
  v19 = sqrtf((float)(vaddv_f32(vmul_f32(v11, v11)) + (float)(v13 * v13))+ (float)(*(float *)(a1 + 100) * *(float *)(a1 + 100)));
  v21 = a3[5];
  v20 = a3[6];
  v23 = a3[3];
  v22 = a3[4];
  v24 = -(v23 * v16 - v21 * v14);
  v25 = a3[2];
  v26 = -(v22 * v14 - v23 * v15);
  v27 = -(v21 * v15 - v22 * v16);
  *(double *)&v28 = v27 + v27;
  v29 = v24 + v24;
  v30 = v26 + v26;
  v31 = a3[1] + v15 - v30 * v23 + *(double *)&v28 * v21 + v29 * v20;
  *(double *)v48 = *a3 + v14 + v30 * v22 + *(double *)&v28 * v20 - v29 * v21;
  *(double *)&v48[8] = v31;
  *(double *)&v48[16] = v25 + v16 + v30 * v20 + v29 * v23 - *(double *)&v28 * v22;
  v49 = v20 * *(float *)v46.f64
      + v23 * *((float *)&v46.f64[1] + 1)
      + v22 * *(float *)&v46.f64[1]
      - v21 * *((float *)v46.f64 + 1);
  v50 = v22 * *((float *)&v46.f64[1] + 1)
      - (v23 * *(float *)&v46.f64[1]
       - v20 * *((float *)v46.f64 + 1))
      + v21 * *(float *)v46.f64;
  v51 = v20 * *(float *)&v46.f64[1]
      + v23 * *((float *)v46.f64 + 1)
      - v22 * *(float *)v46.f64
      + v21 * *((float *)&v46.f64[1] + 1);
  v52 = -(v23 * *(float *)v46.f64
        + v22 * *((float *)v46.f64 + 1)
        + v21 * *(float *)&v46.f64[1]
        - v20 * *((float *)&v46.f64[1] + 1));
  v32 = (float32x2_t)vdup_lane_s32(v41, 0);
  v32.i32[0] = v44;
  v28.i32[0] = vdup_lane_s32(v42, 1).u32[0];
  v28.i32[1] = v43;
  v33 = vmulq_f64(*a4, vcvtq_f64_f32(vsqrt_f32(vmla_f32(vmla_f32(vmla_f32(vmul_f32(v32, v32), (float32x2_t)__PAIR64__(v41.u32[1], v42.u32[0]), (float32x2_t)__PAIR64__(v41.u32[1], v42.u32[0])), v28, v28), v18, v18))));
  v34 = a4[1].f64[0] * v19;
  v46 = v33;
  v47 = v34;
  v35 = *(uint64_t **)(a1 + 32);
  v36 = *(uint64_t **)(a1 + 40);
  if (v35 != v36)
  {
    v45 = v33;
    do
    {
      v37 = *v35++;
      *(_BYTE *)(v37 + 180) = a5;
      result = (float *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v37 + 16))(v37, v48);
      *(float64x2_t *)(v37 + 232) = v45;
      *(double *)(v37 + 248) = v34;
    }
    while (v35 != v36);
  }
  v39 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16);
        v39 != i;
        result = (float *)(*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, float64x2_t *, uint64_t))(*(_QWORD *)v40 + 16))(v40, a2, v48, &v46, a5))
  {
    v40 = *v39;
    v39 += 2;
  }
  return result;
}

float *gm::quaternionFromRotationMatrix<float>(float *result, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  BOOL v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v18;
  double v19;
  float v20;

  v2 = *a2;
  v3 = a2[4];
  v4 = a2[8];
  v5 = v4 + *a2;
  if ((float)(v5 + v3) <= 0.0)
  {
    if (v2 > v3)
    {
      v11 = v2 == v4;
      v12 = v2 < v4;
    }
    else
    {
      v11 = 1;
      v12 = 0;
    }
    if (v12 || v11)
    {
      if (v3 > v4)
      {
        v13 = sqrtf((float)(v3 + 1.0) - v5);
        v14 = 1.0 / (float)(v13 + v13);
        v8 = v13 * 0.5;
        v7 = (float)(a2[1] + a2[3]) * v14;
        v9 = (float)(a2[5] + a2[7]) * v14;
        v10 = (float)(a2[6] - a2[2]) * v14;
        goto LABEL_12;
      }
      v19 = sqrt(1.0 - (v2 + v3) + v4);
      v20 = v19 + v19;
      v17 = 1.0 / v20;
      v7 = (float)(a2[2] + a2[6]) * (float)(1.0 / v20);
      v8 = (float)(a2[5] + a2[7]) * (float)(1.0 / v20);
      v9 = v20 * 0.25;
      v18 = a2[1] - a2[3];
    }
    else
    {
      v15 = sqrt(v2 + 1.0 - (v3 + v4));
      v16 = v15 + v15;
      v7 = v16 * 0.25;
      v17 = 1.0 / v16;
      v8 = (float)(a2[1] + a2[3]) * (float)(1.0 / v16);
      v9 = (float)(a2[2] + a2[6]) * v17;
      v18 = a2[5] - a2[7];
    }
    v10 = v18 * v17;
    goto LABEL_12;
  }
  v6 = 0.5 / sqrtf((float)(v5 + v3) + 1.0);
  v7 = (float)(a2[5] - a2[7]) * v6;
  v8 = (float)(a2[6] - a2[2]) * v6;
  v9 = (float)(a2[1] - a2[3]) * v6;
  v10 = 0.25 / v6;
LABEL_12:
  *result = v7;
  result[1] = v8;
  result[2] = v9;
  result[3] = v10;
  return result;
}

void altitude::SgFixedAxisRotationAnimation::~SgFixedAxisRotationAnimation(altitude::SgFixedAxisRotationAnimation *this)
{
  altitude::SgAnimation<float>::~SgAnimation(this);
  JUMPOUT(0x1A1AF4E00);
}

float *altitude::SgFixedAxisRotationAnimation::update(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  double v14;
  int v15;
  double v16;
  double *v17;
  double *v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  double *v27;
  double v28;
  double *v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  __float2 v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int32x4_t v48;
  float v49;
  float v50;
  int32x4_t v51;
  float v52;
  float v53;
  int32x4_t v54;
  __int32 v55;
  float v56;
  __int32 v57;
  float v58;
  float v59;
  __int32 v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float *result;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t *v103;
  uint64_t *i;
  uint64_t v105;
  _QWORD *j;
  _QWORD *v107;
  int32x4_t v108;
  float v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  _BYTE v116[32];
  double v117;
  double v118;
  double v119;
  _BYTE v120[32];
  _BYTE v121[32];
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v14 = *(double *)(a1 + 64) + *(double *)(*(_QWORD *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  v15 = *(unsigned __int8 *)(a1 + 76);
  if (v15 == 2)
  {
    v14 = fmin(*(double *)(a1 + 56), v14);
  }
  else if (v15 == 1)
  {
    v16 = *(double *)(a1 + 56);
    v14 = fmod(v14, v16 + v16);
    if (v14 > v16)
      v14 = v16 - v14;
  }
  else if (!*(_BYTE *)(a1 + 76))
  {
    v14 = fmod(v14, *(long double *)(a1 + 56));
  }
  v17 = *(double **)(a1 + 80);
  v18 = *(double **)(a1 + 88);
  if (*v17 <= v14)
  {
    v20 = 0;
    v21 = 0;
    while (((char *)v18 - (char *)v17) >> 4 > v20)
    {
      v20 = (v21 + 1);
      v21 = v20;
      v19 = v20;
      if (v17[2 * v20] > v14)
        goto LABEL_16;
    }
    v19 = v21;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
LABEL_16:
  v22 = (v19 - 1);
  if (v17 == v18)
    v23 = 1;
  else
    v23 = ((char *)v18 - (char *)v17) >> 4;
  v24 = v20 % v23;
  v26 = v24;
  v25 = v24 == 0;
  v27 = &v17[2 * v24];
  if (v25)
    v27 = (double *)(a1 + 56);
  v28 = *v27;
  v29 = &v17[2 * v22];
  v30 = (v14 - *v29) / (v28 - *v29);
  v31 = *((unsigned __int8 *)v29 + 8);
  v32 = ceilf(v30);
  v33 = floorf(v30);
  v34 = roundf(v30);
  if (v31 == 1)
    v30 = v34;
  if (v31 == 2)
    v30 = v33;
  if (v31 == 3)
    v30 = v32;
  v35 = *((float *)&v17[2 * v22 + 1] + 1)
      + (float)(v30 * (float)(*((float *)&v17[2 * v26 + 1] + 1) - *((float *)&v17[2 * v22 + 1] + 1)));
  *(_QWORD *)&v121[20] = 1065353216;
  *(_OWORD *)&v121[4] = 0uLL;
  *(_DWORD *)v121 = 1065353216;
  *(_DWORD *)&v121[28] = 0;
  a7.i64[0] = *(_QWORD *)(a1 + 104);
  v108 = (int32x4_t)a7;
  v109 = *(float *)(a1 + 112);
  a7.f32[2] = v109;
  v36 = (int32x4_t)vnegq_f32(a7);
  a9.i64[0] = *(_QWORD *)v121;
  v37 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v121[8], (float32x4_t)xmmword_19FFB3850);
  v38 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v121[8], (float32x4_t)xmmword_19FFB3480);
  v39 = (float32x4_t)vzip1q_s32(v36, v36);
  v40 = (int8x16_t)vmulq_f32(v39, *(float32x4_t *)&v121[8]);
  v110 = vaddq_f32(vmlsq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v40, v40, 8uLL), a9, v39), (float32x4_t)xmmword_19FFB3580, a7, 2), (float32x4_t)xmmword_19FFB34C0);
  *(float32x4_t *)v121 = vmlaq_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), (float32x4_t)xmmword_19FFB3850, a9);
  *(float32x4_t *)&v121[16] = vmlaq_f32((float32x4_t)vextq_s8(v38, v38, 8uLL), (float32x4_t)xmmword_19FFB3480, a9);
  v41 = __sincosf_stret(v35 * 0.5);
  v42 = *(float *)(a1 + 116) * v41.__sinval;
  v43 = *(float *)(a1 + 120) * v41.__sinval;
  v44 = *(float *)(a1 + 124) * v41.__sinval;
  v45 = v43 + v43;
  v46 = (float)(v43 + v43) * v43;
  v47 = (float)(v44 + v44) * v44;
  *(float *)v48.i32 = 1.0 - (float)(v46 + v47);
  v49 = (float)(v42 + v42) * v43;
  v50 = (float)(v44 + v44) * v41.__cosval;
  *(float *)v51.i32 = v49 - v50;
  v52 = v44 * (float)(v42 + v42);
  v53 = (float)(v43 + v43) * v41.__cosval;
  *(float *)v54.i32 = v53 + v52;
  *(float *)&v55 = v50 + v49;
  v56 = 1.0 - (float)((float)(v42 + v42) * v42);
  *(float *)&v57 = v56 - v47;
  v58 = v45 * v44;
  v59 = (float)(v42 + v42) * v41.__cosval;
  *(float *)&v60 = v58 - v59;
  v61 = v52 - v53;
  v62 = v58 + v59;
  v63 = v56 - v46;
  *(_DWORD *)&v120[20] = 1065353216;
  *(_OWORD *)&v120[4] = 0uLL;
  *(_DWORD *)v120 = 1065353216;
  v64.i64[0] = *(_QWORD *)v120;
  v65 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v120[8], (float32x4_t)xmmword_19FFB3850);
  v66 = vmlaq_f32((float32x4_t)vextq_s8(v65, v65, 8uLL), (float32x4_t)xmmword_19FFB3850, v64);
  v67 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v120[8], (float32x4_t)xmmword_19FFB3480);
  v68 = vmlaq_f32((float32x4_t)vextq_s8(v67, v67, 8uLL), (float32x4_t)xmmword_19FFB3480, v64);
  v69 = (float32x4_t)vzip1q_s32(v108, v108);
  v70 = (int8x16_t)vmulq_f32(v69, *(float32x4_t *)&v120[8]);
  v71 = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v70, v70, 8uLL), v64, v69), (float32x4_t)xmmword_19FFB3580, v109), (float32x4_t)xmmword_19FFB34C0);
  *(float32x4_t *)v120 = v66;
  *(float32x4_t *)&v120[16] = v68;
  v48.i32[1] = v55;
  v72 = (float32x4_t)vzip1q_s32(v48, v48);
  v73 = (int8x16_t)vmulq_f32(v72, *(float32x4_t *)&v120[8]);
  v66.i64[1] = v68.i64[1];
  v74 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v73, v73, 8uLL), v66, v72), (float32x4_t)xmmword_19FFB3580, v61);
  v51.i32[1] = v57;
  v75 = (float32x4_t)vzip1q_s32(v51, v51);
  v76 = (int8x16_t)vmulq_f32(v75, *(float32x4_t *)&v120[8]);
  v77 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v76, v76, 8uLL), v66, v75), (float32x4_t)xmmword_19FFB3580, v62);
  *(_QWORD *)&v116[8] = v74.i64[1];
  *(_QWORD *)&v116[16] = v77.i64[0];
  v54.i32[1] = v60;
  v78 = (float32x4_t)vzip1q_s32(v54, v54);
  v79 = (int8x16_t)vmulq_f32(v78, *(float32x4_t *)&v120[8]);
  v80 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), v66, v78), (float32x4_t)xmmword_19FFB3580, v63);
  v78.i64[1] = *(_QWORD *)&v121[20];
  v72.i64[0] = *(_QWORD *)v121;
  v81 = (float32x4_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v72);
  v82 = (int8x16_t)vmulq_f32(v81, *(float32x4_t *)&v116[8]);
  v74.i64[1] = v77.i64[1];
  v83 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v82, v82, 8uLL), v74, v81), v80, *(float *)&v121[8]), v71, *(float *)&v121[12]);
  v78.i64[0] = *(_QWORD *)&v121[16];
  v84 = (float32x4_t)vzip1q_s32((int32x4_t)v78, (int32x4_t)v78);
  v85 = (int8x16_t)vmulq_f32(v84, *(float32x4_t *)&v116[8]);
  v86 = (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v85, v85, 8uLL), v74, v84), v80, *(float *)&v121[24]), v71, *(float *)&v121[28]);
  v87 = (float32x4_t)vzip1q_s32((int32x4_t)v110, (int32x4_t)v110);
  v88 = (int8x16_t)vmulq_f32(v87, *(float32x4_t *)&v116[8]);
  v111 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v88, v88, 8uLL), v74, v87), v80, v110, 2), v71, v110, 3);
  v83.i32[3] = v86.i32[0];
  *(float32x4_t *)v116 = v83;
  *(int8x16_t *)&v116[16] = vextq_s8(vextq_s8(v86, v86, 0xCuLL), (int8x16_t)v80, 8uLL);
  LODWORD(v117) = v80.i32[2];
  result = gm::quaternionFromRotationMatrix<float>(&v112, (float *)v116);
  v91 = a3[5];
  v90 = a3[6];
  v93 = a3[3];
  v92 = a3[4];
  v94 = -(v93 * v111.f32[2] - v91 * v111.f32[0]);
  v95 = -(v92 * v111.f32[0] - v93 * v111.f32[1]);
  v96 = -(v91 * v111.f32[1] - v92 * v111.f32[2]);
  v97 = v96 + v96;
  v98 = v94 + v94;
  v99 = v95 + v95;
  v100 = *a3 + v111.f32[0] + v99 * v92 + v97 * v90 - v98 * v91;
  v101 = a3[1] + v111.f32[1] - v99 * v93 + v97 * v91 + v98 * v90;
  v102 = a3[2] + v111.f32[2] + v99 * v90 + v98 * v93 - v97 * v92;
  *(double *)v116 = v100;
  *(double *)&v116[8] = v101;
  *(double *)&v116[16] = v102;
  *(double *)&v116[24] = v90 * v112 + v93 * v115 + v92 * v114 - v91 * v113;
  v117 = v92 * v115 - (v93 * v114 - v90 * v113) + v91 * v112;
  v118 = v90 * v114 + v93 * v113 - v92 * v112 + v91 * v115;
  v119 = -(v93 * v112 + v92 * v113 + v91 * v114 - v90 * v115);
  v103 = *(uint64_t **)(a1 + 32);
  for (i = *(uint64_t **)(a1 + 40); v103 != i; *(_QWORD *)(v105 + 248) = a4[2])
  {
    v105 = *v103++;
    *(_BYTE *)(v105 + 180) = a5;
    result = (float *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v105 + 16))(v105, v116);
    *(_QWORD *)(v105 + 232) = *a4;
    *(_QWORD *)(v105 + 240) = a4[1];
  }
  v107 = *(_QWORD **)(a1 + 8);
  for (j = *(_QWORD **)(a1 + 16); v107 != j; v107 += 2)
    result = (float *)(*(uint64_t (**)(_QWORD, _QWORD *, _BYTE *, _QWORD *, uint64_t))(*(_QWORD *)*v107 + 16))(*v107, a2, v116, a4, a5);
  return result;
}

_QWORD *altitude::SgAnimation<float>::~SgAnimation(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1E42C3CD0;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E42C69F0;
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgMatrixAnimation::~SgMatrixAnimation(altitude::SgMatrixAnimation *this)
{
  altitude::SgAnimation<karo::media::TRS>::~SgAnimation(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::SgMatrixAnimation::update(uint64_t a1, _QWORD *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  double v10;
  int v11;
  double v12;
  double *v13;
  double *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  double *v23;
  double v24;
  double *v25;
  float v26;
  int v27;
  float v28;
  float v29;
  float v30;
  double *v31;
  double *v32;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v50;
  double v52;
  float64x2_t v55;
  double v59;
  int8x16_t v60;
  float64x2_t v61;
  int8x16_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v68;
  double v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;

  v10 = *(double *)(a1 + 64) + *(double *)(*(_QWORD *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  v11 = *(unsigned __int8 *)(a1 + 76);
  if (v11 == 2)
  {
    v10 = fmin(*(double *)(a1 + 56), v10);
  }
  else if (v11 == 1)
  {
    v12 = *(double *)(a1 + 56);
    v10 = fmod(v10, v12 + v12);
    if (v10 > v12)
      v10 = v12 - v10;
  }
  else if (!*(_BYTE *)(a1 + 76))
  {
    v10 = fmod(v10, *(long double *)(a1 + 56));
  }
  v13 = *(double **)(a1 + 80);
  v14 = *(double **)(a1 + 88);
  if (*v13 <= v10)
  {
    v16 = 0;
    v17 = 0;
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 5) > v16)
    {
      v16 = ++v17;
      v15 = v17;
      if (v13[12 * v17] > v10)
        goto LABEL_15;
    }
    v15 = v17;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
LABEL_15:
  v18 = v15 - 1;
  if (v13 == v14)
    v19 = 1;
  else
    v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 5);
  v20 = v16 % v19;
  v22 = v20;
  _ZF = v20 == 0;
  v23 = &v13[12 * v20];
  if (_ZF)
    v23 = (double *)(a1 + 56);
  v24 = *v23;
  v25 = &v13[12 * v18];
  v26 = (v10 - *v25) / (v24 - *v25);
  v27 = *((unsigned __int8 *)v25 + 8);
  v28 = ceilf(v26);
  v29 = floorf(v26);
  v30 = roundf(v26);
  if (v27 == 1)
    v26 = v30;
  if (v27 == 2)
    v26 = v29;
  if (v27 == 3)
    v26 = v28;
  v31 = &v13[12 * v18];
  v32 = &v13[12 * v22];
  v76 = v26;
  v80 = *(float64x2_t *)(v31 + 5);
  v81 = *((_QWORD *)v31 + 7);
  v82 = v31[8];
  gm::Quaternion<double>::slerp(v80.f64, v32 + 5, v26);
  _KR00_16 = v80;
  _D20 = v81;
  _D21 = v82;
  _D2 = v31[4] + (v32[4] - v31[4]) * v76;
  v37 = v31[11] + (v32[11] - v31[11]) * v76;
  v38 = vmlaq_n_f64(*(float64x2_t *)(v31 + 2), vsubq_f64(*(float64x2_t *)(v32 + 2), *(float64x2_t *)(v31 + 2)), v76);
  v39 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
  v40 = vmlaq_n_f64(*(float64x2_t *)(v31 + 9), vsubq_f64(*(float64x2_t *)(v32 + 9), *(float64x2_t *)(v31 + 9)), v76);
  _Q6 = *(float64x2_t *)(a3 + 40);
  _Q5 = *(float64x2_t *)(a3 + 24);
  __asm
  {
    FMLA            D4, D20, V5.D[1]
    FMLS            D4, D19, V6.D[0]
    FMLA            D16, D19, V6.D[1]
    FMLA            D16, D21, V5.D[1]
  }
  v50 = vmlad_n_f64(_D16, v80.f64[0], _Q6.f64[0]);
  __asm { FMLS            D3, D18, V5.D[1] }
  v52 = vmlad_n_f64(_D3, v82, _Q6.f64[0]);
  __asm
  {
    FMLA            D18, D19, V5.D[1]
    FMLA            D18, D21, V6.D[1]
  }
  v55 = vaddq_f64(*(float64x2_t *)a3, v38);
  v38.f64[0] = _D2;
  _Q7 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q6, 8uLL), v38);
  _Q7.f64[0] = vsubq_f64(_Q7, (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q7, 1)).f64[0];
  __asm { FMLS            D20, D2, V5.D[0] }
  _Q17 = vmulq_f64(_Q5, v39);
  _Q17.f64[0] = vsubq_f64(_Q17, (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q17, 1)).f64[0];
  _Q7.f64[0] = _Q7.f64[0] + _Q7.f64[0];
  v59 = _D20 + _D20;
  _Q17.f64[0] = _Q17.f64[0] + _Q17.f64[0];
  v60 = (int8x16_t)vmulq_n_f64(_Q6, _Q7.f64[0]);
  v61 = vmulq_n_f64(_Q6, v59);
  v62 = (int8x16_t)vmulq_n_f64(_Q5, _Q17.f64[0]);
  v63 = (float64x2_t)vextq_s8(v62, v62, 8uLL);
  *(_QWORD *)&v64.f64[0] = *(_OWORD *)&vaddq_f64(v55, v63);
  v64.f64[1] = vsubq_f64(v55, v63).f64[1];
  v65 = vaddq_f64(v64, (float64x2_t)vextq_s8(v60, v60, 8uLL));
  *(_QWORD *)&v55.f64[0] = *(_OWORD *)&vsubq_f64(v65, v61);
  v55.f64[1] = vaddq_f64(v65, v61).f64[1];
  __asm
  {
    FMLA            D2, D17, V6.D[1]
    FMLS            D2, D7, V5.D[1]
  }
  v80 = v55;
  v81 = _D2;
  v82 = _D4;
  v83 = v50;
  v84 = v52;
  v85 = _D18;
  v68 = vmulq_f64(*a4, v40);
  v69 = a4[1].f64[0] * v37;
  v78 = v68;
  v79 = v69;
  v70 = *(uint64_t **)(a1 + 32);
  v71 = *(uint64_t **)(a1 + 40);
  if (v70 != v71)
  {
    v77 = v68;
    do
    {
      v72 = *v70++;
      *(_BYTE *)(v72 + 180) = a5;
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v72 + 16))(v72, &v80);
      *(float64x2_t *)(v72 + 232) = v77;
      *(double *)(v72 + 248) = v69;
    }
    while (v70 != v71);
  }
  v74 = *(uint64_t **)(a1 + 8);
  v73 = *(uint64_t **)(a1 + 16);
  while (v74 != v73)
  {
    v75 = *v74;
    v74 += 2;
    (*(void (**)(uint64_t, _QWORD *, float64x2_t *, float64x2_t *, uint64_t))(*(_QWORD *)v75 + 16))(v75, a2, &v80, &v78, a5);
  }
}

_QWORD *altitude::SgAnimation<karo::media::TRS>::~SgAnimation(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1E42C3C80;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E42C69F0;
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgRotationAnimation::~SgRotationAnimation(altitude::SgRotationAnimation *this)
{
  altitude::SgAnimation<gm::Matrix<float,4,1>>::~SgAnimation(this);
  JUMPOUT(0x1A1AF4E00);
}

float *altitude::SgRotationAnimation::update(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t a5, double a6, double a7, int8x16_t a8, int32x4_t a9, float32x4_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  double v17;
  int v18;
  double v19;
  double *v20;
  double *v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  double *v29;
  double v30;
  double *v31;
  float v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x4_t v38;
  float32x4_t v40;
  int8x16_t v41;
  float v42;
  double v44;
  float v45;
  int8x16_t v46;
  float v47;
  float v48;
  float v49;
  double v50;
  double v51;
  __int128 v52;
  float32x2_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float v60;
  float v62;
  float v63;
  float v64;
  float v65;
  float32_t v66;
  __int32 v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t v78;
  int32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  int8x16_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float *result;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t *v123;
  uint64_t *i;
  uint64_t v125;
  _QWORD *j;
  _QWORD *v127;
  __int128 v128;
  int8x16_t v129;
  __int128 v130;
  float32x4_t v131;
  float v132;
  float v133;
  float v134;
  float v135;
  _BYTE v136[32];
  double v137;
  double v138;
  double v139;
  _BYTE v140[32];
  _BYTE v141[32];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v17 = *(double *)(a1 + 64) + *(double *)(*(_QWORD *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  v18 = *(unsigned __int8 *)(a1 + 76);
  if (v18 == 2)
  {
    v17 = fmin(*(double *)(a1 + 56), v17);
  }
  else if (v18 == 1)
  {
    v19 = *(double *)(a1 + 56);
    v17 = fmod(v17, v19 + v19);
    if (v17 > v19)
      v17 = v19 - v17;
  }
  else if (!*(_BYTE *)(a1 + 76))
  {
    v17 = fmod(v17, *(long double *)(a1 + 56));
  }
  v20 = *(double **)(a1 + 80);
  v21 = *(double **)(a1 + 88);
  if (*v20 <= v17)
  {
    v23 = 0;
    v24 = 0;
    while (((char *)v21 - (char *)v20) >> 5 > v23)
    {
      v23 = (v24 + 1);
      v24 = v23;
      v22 = v23;
      if (v20[4 * v23] > v17)
        goto LABEL_16;
    }
    v22 = v24;
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
LABEL_16:
  if (v20 == v21)
    v25 = 1;
  else
    v25 = ((char *)v21 - (char *)v20) >> 5;
  v26 = v23 % v25;
  v28 = v26;
  _ZF = v26 == 0;
  v29 = &v20[4 * v26];
  if (_ZF)
    v29 = (double *)(a1 + 56);
  v30 = *v29;
  v31 = &v20[4 * (v22 - 1)];
  v32 = (v17 - *v31) / (v30 - *v31);
  v33 = *((unsigned __int8 *)v31 + 8);
  v34 = ceilf(v32);
  v35 = floorf(v32);
  v36 = roundf(v32);
  if (v33 == 1)
    v32 = v36;
  if (v33 == 2)
    v32 = v35;
  if (v33 == 3)
    v37 = v34;
  else
    v37 = v32;
  v38 = *(float32x4_t *)((char *)v31 + 12);
  _Q21 = *(float32x4_t *)((char *)&v20[4 * v28 + 1] + 4);
  v40 = vmulq_f32(_Q21, v38);
  v41 = (int8x16_t)vpaddq_f32(v40, v40);
  v42 = vaddv_f32(*(float32x2_t *)v41.i8);
  if (v42 >= 1.0 || v42 <= -1.0)
  {
    a9.i32[0] = HIDWORD(*(_OWORD *)((char *)&v20[4 * v28 + 1] + 4));
    _Q21.i32[3] = HIDWORD(*(_OWORD *)((char *)v31 + 12));
  }
  else
  {
    v44 = v37;
    v45 = fabsf(v42);
    if (v45 <= 0.95)
    {
      v129 = *(int8x16_t *)((char *)v31 + 12);
      v130 = *(_OWORD *)((char *)&v20[4 * v28 + 1] + 4);
      v48 = acosf(v45);
      v49 = sinf(v48);
      v50 = v48;
      v51 = (float)(1.0 / v49);
      *(double *)&v52 = sin(v50 - v44 * v50) * v51;
      *(float *)&v52 = *(double *)&v52;
      v128 = v52;
      *(double *)v41.i64 = sin(v50 * v44) * v51;
      *(float *)v41.i32 = *(double *)v41.i64;
      a9.i64[1] = *((_QWORD *)&v128 + 1);
      v53 = vmul_n_f32(*(float32x2_t *)v129.i8, *(float *)&v128);
      a8 = vextq_s8(v129, v129, 8uLL);
      *(float32x2_t *)a8.i8 = vmul_n_f32(*(float32x2_t *)a8.i8, *(float *)&v128);
      *(float32x2_t *)v54.i8 = v53;
      v54.i64[1] = a8.i64[0];
      v55 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 0);
      if (v42 <= 0.0)
      {
        *(float32x2_t *)v56.f32 = vmls_f32(v53, v55, *(float32x2_t *)&v130);
        v56.i32[3] = vextq_s8(v54, v54, 8uLL).i32[1];
        v56.f32[2] = *(float *)a8.i32 - (float)(*((float *)&v130 + 2) * *(float *)v41.i32);
        *(float *)a9.i32 = *(float *)&a8.i32[1] - (float)(*((float *)&v130 + 3) * *(float *)v41.i32);
      }
      else
      {
        *(float32x2_t *)v56.f32 = vmla_f32(v53, v55, *(float32x2_t *)&v130);
        v56.i32[3] = vextq_s8(v54, v54, 8uLL).i32[1];
        v56.f32[2] = *(float *)a8.i32 + (float)(*((float *)&v130 + 2) * *(float *)v41.i32);
        *(float *)a9.i32 = *(float *)&a8.i32[1] + (float)(*((float *)&v130 + 3) * *(float *)v41.i32);
      }
      _Q21 = v56;
    }
    else
    {
      if (v42 <= 0.0)
      {
        v47 = -v38.f32[3];
        a10 = vaddq_f32(_Q21, v38);
        *(float *)v41.i32 = vmlas_n_f32(-v38.f32[0], v37, a10.f32[0]);
        v46 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL);
        *(float32x2_t *)v46.i8 = vmla_n_f32(vneg_f32(*(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), v37);
        a8 = vextq_s8(vextq_s8(v41, v41, 4uLL), v46, 0xCuLL);
        *(float *)&a8.i32[3] = -v38.f32[3];
      }
      else
      {
        a10 = vsubq_f32(_Q21, v38);
        *(float *)v41.i32 = vmlas_n_f32(v38.f32[0], v37, a10.f32[0]);
        a8.i32[3] = HIDWORD(*(_OWORD *)((char *)v31 + 12));
        a8.i32[0] = v41.i32[0];
        *(float32x2_t *)v46.i8 = vmla_n_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), v37);
        *(uint64_t *)((char *)a8.i64 + 4) = v46.i64[0];
        v47 = *(float *)&a8.i32[3];
      }
      v57 = v47 + a10.f32[3] * v44;
      v58 = vmul_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8);
      v58.f32[0] = 1.0
                 / sqrtf((float)((float)(v58.f32[0] + (float)(*(float *)v41.i32 * *(float *)v41.i32)) + v58.f32[1])+ (float)(v57 * v57));
      v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 0);
      v59.i32[0] = v41.i32[0];
      *(float32x2_t *)_Q21.f32 = vmul_n_f32(v59, v58.f32[0]);
      v41 = vextq_s8(a8, a8, 8uLL);
      _Q21.i64[1] = __PAIR64__(v41.u32[1], COERCE_UNSIGNED_INT(vmuls_lane_f32(v58.f32[0], *(float32x2_t *)v46.i8, 1)));
      *(float *)a9.i32 = v58.f32[0] * v57;
    }
  }
  v10.f32[0] = vmuls_lane_f32(_Q21.f32[1] + _Q21.f32[1], *(float32x2_t *)_Q21.f32, 1);
  v60 = vmuls_lane_f32(_Q21.f32[2] + _Q21.f32[2], _Q21, 2);
  a10.f32[0] = 1.0 - (float)(v10.f32[0] + v60);
  _S16 = _Q21.f32[0] + _Q21.f32[0];
  v62 = vmuls_lane_f32(_Q21.f32[0] + _Q21.f32[0], *(float32x2_t *)_Q21.f32, 1);
  v63 = (float)(_Q21.f32[2] + _Q21.f32[2]) * *(float *)a9.i32;
  *(float *)a8.i32 = v62 - v63;
  v64 = vmuls_lane_f32(_Q21.f32[0] + _Q21.f32[0], _Q21, 2);
  v65 = *(float *)a9.i32 * (float)(_Q21.f32[1] + _Q21.f32[1]);
  *(float *)v41.i32 = v65 + v64;
  v66 = v63 + v62;
  __asm { FMLS            S18, S16, V21.S[0] }
  *(float *)&v71 = _S18 - v60;
  v72 = vmuls_lane_f32(_Q21.f32[1] + _Q21.f32[1], _Q21, 2);
  v73 = *(float *)a9.i32 * (float)(_Q21.f32[0] + _Q21.f32[0]);
  *(float *)a9.i32 = v72 - v73;
  v74 = v64 - v65;
  v75 = v73 + v72;
  v76 = _S18 - v10.f32[0];
  *(_QWORD *)&v141[20] = 1065353216;
  *(_OWORD *)&v141[4] = 0uLL;
  *(_DWORD *)v141 = 1065353216;
  *(_DWORD *)&v141[28] = 0;
  v77 = *(float *)(a1 + 112);
  v10.i64[0] = *(_QWORD *)(a1 + 104);
  v78 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
  v10.f32[2] = v77;
  v79 = (int32x4_t)vnegq_f32(v10);
  v11.i64[0] = *(_QWORD *)v141;
  v80 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v141[8], (float32x4_t)xmmword_19FFB3850);
  v81 = vmlaq_f32((float32x4_t)vextq_s8(v80, v80, 8uLL), (float32x4_t)xmmword_19FFB3850, v11);
  v82 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v141[8], (float32x4_t)xmmword_19FFB3480);
  v83 = (float32x4_t)vzip1q_s32(v79, v79);
  v84 = (int8x16_t)vmulq_f32(v83, *(float32x4_t *)&v141[8]);
  v85 = vmlsq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v84, v84, 8uLL), v11, v83), (float32x4_t)xmmword_19FFB3580, v10, 2);
  v86 = vaddq_f32(v85, (float32x4_t)xmmword_19FFB34C0);
  *(float32x4_t *)v141 = v81;
  *(float32x4_t *)&v141[16] = vmlaq_f32((float32x4_t)vextq_s8(v82, v82, 8uLL), (float32x4_t)xmmword_19FFB3480, v11);
  *(_OWORD *)&v140[4] = 0uLL;
  *(_DWORD *)v140 = 1065353216;
  *(_DWORD *)&v140[20] = 1065353216;
  v85.i64[0] = *(_QWORD *)v140;
  v87 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v140[8], (float32x4_t)xmmword_19FFB3850);
  v88 = vmlaq_f32((float32x4_t)vextq_s8(v87, v87, 8uLL), (float32x4_t)xmmword_19FFB3850, v85);
  v89 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v140[8], (float32x4_t)xmmword_19FFB3480);
  v90 = (int8x16_t)vmulq_f32(v78, *(float32x4_t *)&v140[8]);
  v91 = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v90, v90, 8uLL), v85, v78), (float32x4_t)xmmword_19FFB3580, v77), (float32x4_t)xmmword_19FFB34C0);
  *(float32x4_t *)v140 = v88;
  *(float32x4_t *)&v140[16] = vmlaq_f32((float32x4_t)vextq_s8(v89, v89, 8uLL), (float32x4_t)xmmword_19FFB3480, v85);
  a10.f32[1] = v66;
  v92 = (float32x4_t)vzip1q_s32((int32x4_t)a10, (int32x4_t)a10);
  v93 = (int8x16_t)vmulq_f32(v92, *(float32x4_t *)&v140[8]);
  v88.i64[1] = *(_QWORD *)&v140[24];
  v94 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v93, v93, 8uLL), v88, v92), (float32x4_t)xmmword_19FFB3580, v74);
  a8.i32[1] = v71;
  v95 = (float32x4_t)vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
  v96 = (int8x16_t)vmulq_f32(v95, *(float32x4_t *)&v140[8]);
  v97 = (int32x4_t)vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v96, v96, 8uLL), v88, v95), (float32x4_t)xmmword_19FFB3580, v75);
  *(_QWORD *)&v136[8] = v94.i64[1];
  *(_QWORD *)&v136[16] = v97.i64[0];
  v41.i32[1] = a9.i32[0];
  v98 = (float32x4_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v41);
  v99 = (int8x16_t)vmulq_f32(v98, *(float32x4_t *)&v140[8]);
  v100 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v99, v99, 8uLL), v88, v98), (float32x4_t)xmmword_19FFB3580, v76);
  a9.i64[0] = v81.i64[0];
  v97.i64[0] = *(_QWORD *)&v141[16];
  v101 = (float32x4_t)vzip1q_s32(a9, a9);
  v102 = (int8x16_t)vmulq_f32(v101, *(float32x4_t *)&v136[8]);
  v94.i64[1] = v97.i64[1];
  v103 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v102, v102, 8uLL), v94, v101), v100, v81, 2), v91, v81, 3);
  v104 = (float32x4_t)vzip1q_s32(v97, v97);
  v105 = (int8x16_t)vmulq_f32(v104, *(float32x4_t *)&v136[8]);
  v106 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v105, v105, 8uLL), v94, v104), v100, *(float32x4_t *)&v141[16], 2), v91, *(float32x4_t *)&v141[16], 3);
  v107 = (float32x4_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v86);
  v108 = (int8x16_t)vmulq_f32(v107, *(float32x4_t *)&v136[8]);
  v131 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v108, v108, 8uLL), v94, v107), v100, v86, 2), v91, v86, 3);
  v103.i32[3] = v106.i32[0];
  *(float32x4_t *)v136 = v103;
  *(int8x16_t *)&v136[16] = vextq_s8(vextq_s8(v106, v106, 0xCuLL), (int8x16_t)v100, 8uLL);
  LODWORD(v137) = v100.i32[2];
  result = gm::quaternionFromRotationMatrix<float>(&v132, (float *)v136);
  v111 = a3[5];
  v110 = a3[6];
  v113 = a3[3];
  v112 = a3[4];
  v114 = -(v113 * v131.f32[2] - v111 * v131.f32[0]);
  v115 = -(v112 * v131.f32[0] - v113 * v131.f32[1]);
  v116 = -(v111 * v131.f32[1] - v112 * v131.f32[2]);
  v117 = v116 + v116;
  v118 = v114 + v114;
  v119 = v115 + v115;
  v120 = *a3 + v131.f32[0] + v119 * v112 + v117 * v110 - v118 * v111;
  v121 = a3[1] + v131.f32[1] - v119 * v113 + v117 * v111 + v118 * v110;
  v122 = a3[2] + v131.f32[2] + v119 * v110 + v118 * v113 - v117 * v112;
  *(double *)v136 = v120;
  *(double *)&v136[8] = v121;
  *(double *)&v136[16] = v122;
  *(double *)&v136[24] = v110 * v132 + v113 * v135 + v112 * v134 - v111 * v133;
  v137 = v112 * v135 - (v113 * v134 - v110 * v133) + v111 * v132;
  v138 = v110 * v134 + v113 * v133 - v112 * v132 + v111 * v135;
  v139 = -(v113 * v132 + v112 * v133 + v111 * v134 - v110 * v135);
  v123 = *(uint64_t **)(a1 + 32);
  for (i = *(uint64_t **)(a1 + 40); v123 != i; *(_QWORD *)(v125 + 248) = a4[2])
  {
    v125 = *v123++;
    *(_BYTE *)(v125 + 180) = a5;
    result = (float *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v125 + 16))(v125, v136);
    *(_QWORD *)(v125 + 232) = *a4;
    *(_QWORD *)(v125 + 240) = a4[1];
  }
  v127 = *(_QWORD **)(a1 + 8);
  for (j = *(_QWORD **)(a1 + 16); v127 != j; v127 += 2)
    result = (float *)(*(uint64_t (**)(_QWORD, _QWORD *, _BYTE *, _QWORD *, uint64_t))(*(_QWORD *)*v127 + 16))(*v127, a2, v136, a4, a5);
  return result;
}

_QWORD *altitude::SgAnimation<gm::Matrix<float,4,1>>::~SgAnimation(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1E42C3C58;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E42C69F0;
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgScaleAnimation::~SgScaleAnimation(altitude::SgScaleAnimation *this)
{
  altitude::SgAnimation<gm::Matrix<float,3,1>>::~SgAnimation(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::SgScaleAnimation::update(_QWORD *a1, uint64_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  double v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  unsigned int v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0;
  altitude::SgAnimation<gm::Matrix<float,3,1>>::getFrameIndicesAndFraction((uint64_t)a1, *a2, &v25, &v24, (float *)&v25 + 1);
  v10 = a1[10];
  v11 = v10 + 24 * v25;
  v12 = v10 + 24 * v24;
  v13 = vmulq_f64(*a4, vcvtq_f64_f32(vmla_n_f32(*(float32x2_t *)(v11 + 12), vsub_f32(*(float32x2_t *)(v12 + 12), *(float32x2_t *)(v11 + 12)), *((float *)&v25 + 1))));
  v14 = a4[1].f64[0]
      * (float)(*(float *)(v11 + 20)
              + (float)((float)(*(float *)(v12 + 20) - *(float *)(v11 + 20)) * *((float *)&v25 + 1)));
  v22 = v13;
  v23 = v14;
  v15 = (uint64_t *)a1[4];
  v16 = (uint64_t *)a1[5];
  if (v15 != v16)
  {
    v21 = v13;
    do
    {
      v17 = *v15++;
      *(_BYTE *)(v17 + 180) = a5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a3);
      *(float64x2_t *)(v17 + 232) = v21;
      *(double *)(v17 + 248) = v14;
    }
    while (v15 != v16);
  }
  v19 = (uint64_t *)a1[1];
  v18 = (uint64_t *)a1[2];
  while (v19 != v18)
  {
    v20 = *v19;
    v19 += 2;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, float64x2_t *, uint64_t))(*(_QWORD *)v20 + 16))(v20, a2, a3, &v22, a5);
  }
}

void altitude::SgAnimation<gm::Matrix<float,3,1>>::getFrameIndicesAndFraction(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, float *a5)
{
  double v9;
  int v10;
  double v11;
  double *v12;
  double *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  double *v20;
  float v21;
  int v22;
  float v23;

  v9 = *(double *)(a1 + 64) + *(double *)(*(_QWORD *)(a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  v10 = *(unsigned __int8 *)(a1 + 76);
  if (v10 == 2)
  {
    v9 = fmin(*(double *)(a1 + 56), v9);
  }
  else if (v10 == 1)
  {
    v11 = *(double *)(a1 + 56);
    v9 = fmod(v9, v11 + v11);
    if (v9 > v11)
      v9 = v11 - v9;
  }
  else if (!*(_BYTE *)(a1 + 76))
  {
    v9 = fmod(v9, *(long double *)(a1 + 56));
  }
  v12 = *(double **)(a1 + 80);
  v13 = *(double **)(a1 + 88);
  if (*v12 <= v9)
  {
    v15 = 0;
    v16 = 0;
    while (0xAAAAAAAAAAAAAAABLL * (v13 - v12) > v15)
    {
      v15 = ++v16;
      v14 = v16;
      if (v12[3 * v16] > v9)
        goto LABEL_15;
    }
    v14 = v16;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
LABEL_15:
  *a3 = v14 - 1;
  if (v12 == v13)
    v17 = 1;
  else
    v17 = 0xAAAAAAAAAAAAAAABLL * (v13 - v12);
  v18 = v15 % v17;
  *a4 = v18;
  if ((_DWORD)v18)
    v19 = &v12[3 * v18];
  else
    v19 = (double *)(a1 + 56);
  v20 = &v12[3 * *a3];
  v21 = (v9 - *v20) / (*v19 - *v20);
  *a5 = v21;
  v22 = *((unsigned __int8 *)v20 + 8);
  switch(v22)
  {
    case 3:
      v23 = ceilf(v21);
      break;
    case 2:
      v23 = floorf(v21);
      break;
    case 1:
      v23 = roundf(v21);
      break;
    default:
      return;
  }
  *a5 = v23;
}

_QWORD *altitude::SgAnimation<gm::Matrix<float,3,1>>::~SgAnimation(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1E42C3C30;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E42C69F0;
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgSwitchAnimation::~SgSwitchAnimation(altitude::SgSwitchAnimation *this)
{
  altitude::SgAnimation<BOOL>::~SgAnimation(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::SgSwitchAnimation::update(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  double v10;
  int v11;
  double v12;
  double *v13;
  double *v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  double v21;
  double *v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;

  LODWORD(v5) = a5;
  v10 = *(double *)(a1 + 64) + *(double *)(*(_QWORD *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  v11 = *(unsigned __int8 *)(a1 + 76);
  if (v11 == 2)
  {
    v10 = fmin(*(double *)(a1 + 56), v10);
  }
  else if (v11 == 1)
  {
    v12 = *(double *)(a1 + 56);
    v10 = fmod(v10, v12 + v12);
    if (v10 > v12)
      v10 = v12 - v10;
  }
  else if (!*(_BYTE *)(a1 + 76))
  {
    v10 = fmod(v10, *(long double *)(a1 + 56));
  }
  v13 = *(double **)(a1 + 80);
  v14 = *(double **)(a1 + 88);
  if (*v13 <= v10)
  {
    v16 = 0;
    v17 = 0;
    while (((char *)v14 - (char *)v13) >> 4 > v16)
    {
      v16 = (v17 + 1);
      v17 = v16;
      v15 = v16;
      if (v13[2 * v16] > v10)
        goto LABEL_15;
    }
    v15 = v17;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
LABEL_15:
  if (v13 == v14)
    v18 = 1;
  else
    v18 = ((char *)v14 - (char *)v13) >> 4;
  v19 = v16 % v18;
  if ((_DWORD)v19)
    v20 = &v13[2 * v19];
  else
    v20 = (double *)(a1 + 56);
  v21 = *v20;
  v22 = &v13[2 * (v15 - 1)];
  v23 = (v10 - *v22) / (v21 - *v22);
  v24 = *((unsigned __int8 *)v22 + 8);
  v25 = ceilf(v23);
  v26 = floorf(v23);
  v27 = roundf(v23);
  if (v24 == 1)
    v23 = v27;
  if (v24 == 2)
    v23 = v26;
  if (v24 == 3)
    v23 = v25;
  if (BYTE1(v13[2 * (v23 >= 0.5) + 1]))
    v5 = v5;
  else
    v5 = 0;
  v28 = *(uint64_t **)(a1 + 32);
  for (i = *(uint64_t **)(a1 + 40); v28 != i; *(_QWORD *)(v30 + 248) = a4[2])
  {
    v30 = *v28++;
    *(_BYTE *)(v30 + 180) = v5;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, a3);
    *(_QWORD *)(v30 + 232) = *a4;
    *(_QWORD *)(v30 + 240) = a4[1];
  }
  v32 = *(uint64_t **)(a1 + 8);
  v31 = *(uint64_t **)(a1 + 16);
  while (v32 != v31)
  {
    v33 = *v32;
    v32 += 2;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v33 + 16))(v33, a2, a3, a4, v5);
  }
}

_QWORD *altitude::SgAnimation<BOOL>::~SgAnimation(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1E42C3CA8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E42C69F0;
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgTranslationAnimation::~SgTranslationAnimation(altitude::SgTranslationAnimation *this)
{
  altitude::SgAnimation<gm::Matrix<float,3,1>>::~SgAnimation(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::SgTranslationAnimation::update(_QWORD *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  unsigned int v46;
  unsigned int v47;
  float v48;

  v48 = 0.0;
  v46 = 0;
  v47 = 0;
  altitude::SgAnimation<gm::Matrix<float,3,1>>::getFrameIndicesAndFraction((uint64_t)a1, *a2, &v47, &v46, &v48);
  v10 = a1[10];
  v11 = v10 + 24 * v47;
  v12 = v10 + 24 * v46;
  v13 = vcvtq_f64_f32(vmla_n_f32(*(float32x2_t *)(v11 + 12), vsub_f32(*(float32x2_t *)(v12 + 12), *(float32x2_t *)(v11 + 12)), v48));
  v14 = *(float64x2_t *)(a3 + 24);
  _Q3 = *(float64x2_t *)(a3 + 40);
  v16 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  v17 = (int64x2_t)vmulq_f64(_Q3, v13);
  v18 = vaddq_f64(*(float64x2_t *)a3, v13);
  v13.f64[0] = (float)(*(float *)(v11 + 20) + (float)((float)(*(float *)(v12 + 20) - *(float *)(v11 + 20)) * v48));
  v19 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)_Q3, 8uLL), v13);
  _Q4 = vmulq_f64(v14, v16);
  _Q4.f64[0] = vsubq_f64(_Q4, (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q4, 1)).f64[0];
  _Q4.f64[0] = _Q4.f64[0] + _Q4.f64[0];
  v21 = (int8x16_t)vmulq_n_f64(v14, _Q4.f64[0]);
  v22 = (float64x2_t)vextq_s8(v21, v21, 8uLL);
  *(_QWORD *)&v23.f64[0] = *(_OWORD *)&vaddq_f64(v18, v22);
  v23.f64[1] = vsubq_f64(v18, v22).f64[1];
  v24 = (float64x2_t)vzip1q_s64(v17, (int64x2_t)v19);
  v19.f64[0] = (float)(*(float *)(v11 + 20) + (float)((float)(*(float *)(v12 + 20) - *(float *)(v11 + 20)) * v48))
             * v14.f64[0];
  v25 = vsubq_f64(v24, v19);
  v26 = vaddq_f64(v25, v25);
  v27 = (int8x16_t)vmulq_laneq_f64(_Q3, v26, 1);
  v28 = vmulq_n_f64(_Q3, v26.f64[0]);
  v29 = vaddq_f64(v23, (float64x2_t)vextq_s8(v27, v27, 8uLL));
  *(_QWORD *)&v18.f64[0] = *(_OWORD *)&vsubq_f64(v29, v28);
  v18.f64[1] = vaddq_f64(v29, v28).f64[1];
  __asm { FMLA            D1, D4, V3.D[1] }
  v35 = vmulq_f64(v26, v14);
  v42 = v18;
  v43 = _D1 + v35.f64[0] - v35.f64[1];
  v44 = v14;
  v45 = _Q3;
  v36 = (uint64_t *)a1[4];
  for (i = (uint64_t *)a1[5]; v36 != i; *(_QWORD *)(v38 + 248) = a4[2])
  {
    v38 = *v36++;
    *(_BYTE *)(v38 + 180) = a5;
    (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v38 + 16))(v38, &v42);
    *(_QWORD *)(v38 + 232) = *a4;
    *(_QWORD *)(v38 + 240) = a4[1];
  }
  v40 = (uint64_t *)a1[1];
  v39 = (uint64_t *)a1[2];
  while (v40 != v39)
  {
    v41 = *v40;
    v40 += 2;
    (*(void (**)(uint64_t, uint64_t *, float64x2_t *, _QWORD *, uint64_t))(*(_QWORD *)v41 + 16))(v41, a2, &v42, a4, a5);
  }
}

void altitude::SceneGraph::updateTime(altitude::SceneGraph *this)
{
  void *v2;
  double v3;
  void ***v4;
  void ***v5;
  double v6;
  void *v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceDate:", v2);
  v5 = (void ***)*((_QWORD *)this + 10);
  v4 = (void ***)*((_QWORD *)this + 11);
  if (v5 != v4)
  {
    v6 = v3;
    do
    {
      v7 = **v5;
      if (v7)
        *((double *)*v5 + 1) = v6 + (double)objc_msgSend(v7, "secondsFromGMT");
      v5 += 2;
    }
    while (v5 != v4);
  }

}

void sub_19FCCF9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<altitude::SgTimeZoneSpec>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgTimeZoneSpec>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::SgTimeZoneSpec>::__on_zero_shared(uint64_t a1)
{

}

void altitude::loadSceneGraphNode(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, int **a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  _QWORD *v8;
  int *v9;
  int v10;
  _QWORD *v11;
  karo::media::C3mMesh *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34;
  void **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int16 v53;
  double v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  __int16 v72;
  _QWORD *v73;
  __int128 v74;
  _QWORD *v75;
  __int128 v76;
  NSObject *v77;
  int v78;
  double v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  double v99;
  __int128 v100;
  char *v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  double v114;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t *v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  char v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int *v168;
  __n128 *v169;
  __n128 v170;
  unint64_t *v171;
  unint64_t v172;
  __n128 *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  __n128 *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  __n128 *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  __n128 *v194;
  __n128 *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  int *v200;
  int *v203;
  void **v205;
  void **v206;
  void **v207;
  int v208;
  unint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  uint64_t v216;
  uint8_t buf[32];
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  __n128 v222;
  uint64_t v223;
  uint64_t v224;

  v8 = a6;
  v224 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  v9 = *a5;
  v10 = **a5;
  switch(v10)
  {
    case 1:
      v11 = operator new(0x90uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_1E42E6220;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      v11[3] = &off_1E42C51A8;
      *a1 = v11 + 3;
      a1[1] = v11;
      v13 = (std::__shared_weak_count *)a5[1];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      *((_DWORD *)v11 + 20) = v9[14];
      *((_DWORD *)v11 + 21) = v9[15];
      *((_DWORD *)v11 + 22) = v9[16];
      *((_DWORD *)v11 + 23) = v9[17];
      *((_DWORD *)v11 + 24) = v9[18];
      *((_DWORD *)v11 + 25) = v9[19];
      *((_DWORD *)v11 + 26) = v9[20];
      *((_DWORD *)v11 + 27) = v9[21];
      *((_DWORD *)v11 + 28) = v9[22];
      *((_DWORD *)v11 + 29) = v9[23];
      *((_DWORD *)v11 + 30) = v9[24];
      *((_DWORD *)v11 + 31) = v9[25];
      *((_DWORD *)v11 + 32) = v9[26];
      *((_DWORD *)v11 + 33) = v9[27];
      *((_DWORD *)v11 + 34) = v9[28];
      *((_DWORD *)v11 + 35) = v9[29];
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_111;
    case 2:
      v34 = operator new(0x98uLL);
      v34[1] = 0;
      v34[2] = 0;
      *v34 = &off_1E42E63E0;
      v34[13] = 0;
      v35 = (void **)(v34 + 13);
      v34[14] = 0;
      v34[15] = 0;
      *(_QWORD *)((char *)v34 + 93) = 0;
      *((_OWORD *)v34 + 4) = 0u;
      *((_OWORD *)v34 + 5) = 0u;
      *((_OWORD *)v34 + 2) = 0u;
      *((_OWORD *)v34 + 3) = 0u;
      v34[3] = &off_1E42C6618;
      *a1 = v34 + 3;
      a1[1] = v34;
      v34[10] = *((_QWORD *)v9 + 9);
      v36 = *((unsigned __int16 *)v9 + 29);
      *((_DWORD *)v34 + 24) = v36;
      v38 = (uint64_t *)*((_QWORD *)v9 + 11);
      v37 = (uint64_t *)*((_QWORD *)v9 + 12);
      v39 = (char *)v37 - (char *)v38;
      if (v37 == v38)
      {
        v40 = 0;
      }
      else
      {
        if (v39 < 0)
LABEL_244:
          abort();
        v40 = (char *)operator new((char *)v37 - (char *)v38);
        v34[13] = v40;
        v34[14] = v40;
        v34[15] = &v40[16 * (v39 >> 4)];
      }
      v114 = *((double *)v9 + 8);
      if (*((_BYTE *)v9 + 56) == 1)
        v114 = v114 - *(double *)(*(_QWORD *)(*(_QWORD *)(a8 + 80) + 16 * v36) + 8);
      *((double *)v34 + 11) = v114;
      for (*((_BYTE *)v34 + 100) = *((_BYTE *)v9 + 57); v38 != v37; v40 = v153)
      {
        v154 = *((_BYTE *)v38 + 8);
        v155 = *v38;
        v156 = *((_DWORD *)v38 + 3);
        v157 = v34[15];
        if ((unint64_t)v40 < v157)
        {
          *(_QWORD *)v40 = v155;
          v40[8] = v154;
          v153 = v40 + 16;
          *((_DWORD *)v40 + 3) = v156;
        }
        else
        {
          v158 = (char *)*v35;
          v159 = (v40 - (_BYTE *)*v35) >> 4;
          v160 = v159 + 1;
          if ((unint64_t)(v159 + 1) >> 60)
            goto LABEL_244;
          v161 = v157 - (_QWORD)v158;
          if (v161 >> 3 > v160)
            v160 = v161 >> 3;
          if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0)
            v162 = 0xFFFFFFFFFFFFFFFLL;
          else
            v162 = v160;
          if (v162)
          {
            if (v162 >> 60)
              goto LABEL_241;
            v163 = (char *)operator new(16 * v162);
          }
          else
          {
            v163 = 0;
          }
          v164 = &v163[16 * v159];
          *(_QWORD *)v164 = v155;
          v164[8] = v154;
          *((_DWORD *)v164 + 3) = v156;
          v165 = v164;
          if (v40 != v158)
          {
            do
            {
              *((_OWORD *)v165 - 1) = *((_OWORD *)v40 - 1);
              v165 -= 16;
              v40 -= 16;
            }
            while (v40 != v158);
            v40 = (char *)*v35;
          }
          v153 = v164 + 16;
          v34[13] = v165;
          v34[14] = v164 + 16;
          v34[15] = &v163[16 * v162];
          if (v40)
            operator delete(v40);
        }
        v34[14] = v153;
        v38 += 2;
      }
      *(double *)(a8 + 104) = fmax(*(double *)(a8 + 104), *((double *)v9 + 10));
      *((_DWORD *)v34 + 32) = v9[28];
      *((_DWORD *)v34 + 33) = v9[29];
      *((_DWORD *)v34 + 34) = v9[30];
      *((_DWORD *)v34 + 35) = v9[31];
      *((_DWORD *)v34 + 36) = v9[32];
      *((_DWORD *)v34 + 37) = v9[33];
      break;
    case 3:
      v19 = operator new(0x80uLL);
      v19[1] = 0;
      v19[2] = 0;
      *v19 = &off_1E42E61E8;
      v19[13] = 0;
      v205 = (void **)(v19 + 13);
      v19[14] = 0;
      v19[15] = 0;
      *(_QWORD *)((char *)v19 + 93) = 0;
      *((_OWORD *)v19 + 4) = 0u;
      *((_OWORD *)v19 + 5) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      v19[3] = &off_1E42C5180;
      *a1 = v19 + 3;
      a1[1] = v19;
      v19[10] = *((_QWORD *)v9 + 9);
      v20 = *((unsigned __int16 *)v9 + 29);
      *((_DWORD *)v19 + 24) = v20;
      v22 = (uint64_t *)*((_QWORD *)v9 + 11);
      v21 = (uint64_t *)*((_QWORD *)v9 + 12);
      v23 = (char *)v21 - (char *)v22;
      if (v21 == v22)
      {
        v25 = 0;
      }
      else
      {
        v24 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 5);
        if (v24 > 0x2AAAAAAAAAAAAAALL)
LABEL_242:
          abort();
        v25 = (char *)operator new(v23);
        v19[13] = v25;
        v19[14] = v25;
        v19[15] = &v25[96 * v24];
      }
      v79 = *((double *)v9 + 8);
      if (*((_BYTE *)v9 + 56) == 1)
        v79 = v79 - *(double *)(*(_QWORD *)(*(_QWORD *)(a8 + 80) + 16 * v20) + 8);
      *((double *)v19 + 11) = v79;
      *((_BYTE *)v19 + 100) = *((_BYTE *)v9 + 57);
      if (v21 == v22)
        goto LABEL_80;
      while (1)
      {
        v82 = *((_BYTE *)v22 + 8);
        v83 = *v22;
        *(_OWORD *)&buf[7] = *((_OWORD *)v22 + 1);
        *(_QWORD *)&buf[23] = v22[4];
        v220 = *(_OWORD *)(v22 + 5);
        v221 = v22[7];
        v84 = v22[8];
        v222 = *(__n128 *)(v22 + 9);
        v223 = v22[11];
        v85 = v19[15];
        if ((unint64_t)v25 < v85)
        {
          *(_QWORD *)v25 = v83;
          v25[8] = v82;
          v80 = *(_QWORD *)&buf[23];
          *((_OWORD *)v25 + 1) = *(_OWORD *)&buf[7];
          *((_QWORD *)v25 + 4) = v80;
          *(_OWORD *)(v25 + 40) = v220;
          *((_QWORD *)v25 + 7) = v221;
          *((_QWORD *)v25 + 8) = v84;
          *(__n128 *)(v25 + 72) = v222;
          *((_QWORD *)v25 + 11) = v223;
          v81 = v25 + 96;
        }
        else
        {
          v86 = (char *)*v205;
          v87 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (_BYTE *)*v205) >> 5);
          v88 = v87 + 1;
          if (v87 + 1 > 0x2AAAAAAAAAAAAAALL)
            goto LABEL_242;
          v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v86) >> 5);
          if (2 * v89 > v88)
            v88 = 2 * v89;
          if (v89 >= 0x155555555555555)
            v90 = 0x2AAAAAAAAAAAAAALL;
          else
            v90 = v88;
          if (v90)
          {
            if (v90 > 0x2AAAAAAAAAAAAAALL)
              goto LABEL_241;
            v91 = (char *)operator new(96 * v90);
          }
          else
          {
            v91 = 0;
          }
          v92 = &v91[96 * v87];
          *(_QWORD *)v92 = v83;
          v92[8] = v82;
          *((_OWORD *)v92 + 1) = *(_OWORD *)&buf[7];
          *((_QWORD *)v92 + 4) = *(_QWORD *)&buf[23];
          *(_OWORD *)(v92 + 40) = v220;
          *((_QWORD *)v92 + 7) = v221;
          *((_QWORD *)v92 + 8) = v84;
          *(__n128 *)(v92 + 72) = v222;
          *((_QWORD *)v92 + 11) = v223;
          v93 = v92;
          if (v25 != v86)
          {
            do
            {
              v94 = *((_QWORD *)v25 - 12);
              v25 -= 96;
              v95 = v25[8];
              *((_QWORD *)v93 - 12) = v94;
              v93 -= 96;
              v93[8] = v95;
              v96 = *((_OWORD *)v25 + 1);
              *((_QWORD *)v93 + 4) = *((_QWORD *)v25 + 4);
              *((_OWORD *)v93 + 1) = v96;
              v97 = *(_OWORD *)(v25 + 40);
              *((_QWORD *)v93 + 7) = *((_QWORD *)v25 + 7);
              *(_OWORD *)(v93 + 40) = v97;
              *((_QWORD *)v93 + 8) = *((_QWORD *)v25 + 8);
              v98 = *(_OWORD *)(v25 + 72);
              *((_QWORD *)v93 + 11) = *((_QWORD *)v25 + 11);
              *(_OWORD *)(v93 + 72) = v98;
            }
            while (v25 != v86);
            v25 = (char *)*v205;
          }
          v81 = v92 + 96;
          v19[13] = v93;
          v19[14] = v92 + 96;
          v19[15] = &v91[96 * v90];
          if (v25)
            operator delete(v25);
        }
        v19[14] = v81;
        v22 += 12;
        v25 = v81;
        if (v22 == v21)
          goto LABEL_80;
      }
    case 4:
      v26 = operator new(0x90uLL);
      v26[1] = 0;
      v26[2] = 0;
      *v26 = &off_1E42E62C8;
      v26[13] = 0;
      v206 = (void **)(v26 + 13);
      v26[14] = 0;
      v26[15] = 0;
      *(_QWORD *)((char *)v26 + 93) = 0;
      *((_OWORD *)v26 + 4) = 0u;
      *((_OWORD *)v26 + 5) = 0u;
      *((_OWORD *)v26 + 2) = 0u;
      *((_OWORD *)v26 + 3) = 0u;
      v26[3] = &off_1E42C57D0;
      *a1 = v26 + 3;
      a1[1] = v26;
      v26[10] = *((_QWORD *)v9 + 9);
      v27 = *((unsigned __int16 *)v9 + 29);
      *((_DWORD *)v26 + 24) = v27;
      v29 = (uint64_t *)*((_QWORD *)v9 + 11);
      v28 = (uint64_t *)*((_QWORD *)v9 + 12);
      v30 = (char *)v28 - (char *)v29;
      if (v28 == v29)
      {
        v31 = 0;
      }
      else
      {
        if (v30 < 0)
LABEL_243:
          abort();
        v31 = (char *)operator new((char *)v28 - (char *)v29);
        v26[13] = v31;
        v26[14] = v31;
        v26[15] = &v31[32 * (v30 >> 5)];
      }
      v99 = *((double *)v9 + 8);
      if (*((_BYTE *)v9 + 56) == 1)
        v99 = v99 - *(double *)(*(_QWORD *)(*(_QWORD *)(a8 + 80) + 16 * v27) + 8);
      *((double *)v26 + 11) = v99;
      for (*((_BYTE *)v26 + 100) = *((_BYTE *)v9 + 57); v29 != v28; v31 = v101)
      {
        v102 = *((_BYTE *)v29 + 8);
        v103 = *v29;
        *(_OWORD *)&buf[3] = *(_OWORD *)((char *)v29 + 12);
        v104 = v26[15];
        if ((unint64_t)v31 < v104)
        {
          *(_QWORD *)v31 = v103;
          v31[8] = v102;
          v100 = *(_OWORD *)buf;
          *((_DWORD *)v31 + 6) = *(_DWORD *)&buf[15];
          *(_OWORD *)(v31 + 9) = v100;
          v101 = v31 + 32;
        }
        else
        {
          v105 = (char *)*v206;
          v106 = (v31 - (_BYTE *)*v206) >> 5;
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 59)
            goto LABEL_243;
          v108 = v104 - (_QWORD)v105;
          if (v108 >> 4 > v107)
            v107 = v108 >> 4;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFE0)
            v109 = 0x7FFFFFFFFFFFFFFLL;
          else
            v109 = v107;
          if (v109)
          {
            if (v109 >> 59)
              goto LABEL_241;
            v110 = (char *)operator new(32 * v109);
          }
          else
          {
            v110 = 0;
          }
          v111 = &v110[32 * v106];
          *(_QWORD *)v111 = v103;
          v111[8] = v102;
          *(_OWORD *)(v111 + 9) = *(_OWORD *)buf;
          *((_DWORD *)v111 + 6) = *(_DWORD *)&buf[15];
          v112 = v111;
          if (v31 != v105)
          {
            do
            {
              v113 = *((_OWORD *)v31 - 1);
              *((_OWORD *)v112 - 2) = *((_OWORD *)v31 - 2);
              *((_OWORD *)v112 - 1) = v113;
              v112 -= 32;
              v31 -= 32;
            }
            while (v31 != v105);
            v31 = (char *)*v206;
          }
          v101 = v111 + 32;
          v26[13] = v112;
          v26[14] = v111 + 32;
          v26[15] = &v110[32 * v109];
          if (v31)
            operator delete(v31);
        }
        v26[14] = v101;
        v29 += 4;
      }
      *(double *)(a8 + 104) = fmax(*(double *)(a8 + 104), *((double *)v9 + 10));
      *((_DWORD *)v26 + 32) = v9[28];
      *((_DWORD *)v26 + 33) = v9[29];
      *((_DWORD *)v26 + 34) = v9[30];
      break;
    case 5:
      v18 = operator new(0x80uLL);
      v18[1] = 0;
      v18[2] = 0;
      *v18 = &off_1E42E61B0;
      v18[14] = 0;
      v18[15] = 0;
      v18[13] = 0;
      *((_OWORD *)v18 + 2) = 0u;
      *((_OWORD *)v18 + 3) = 0u;
      *((_OWORD *)v18 + 4) = 0u;
      *((_OWORD *)v18 + 5) = 0u;
      *(_QWORD *)((char *)v18 + 93) = 0;
      v18[3] = &off_1E42C4BB0;
      *a1 = v18 + 3;
      a1[1] = v18;
      altitude::readAnimation<gm::Matrix<float,3,1>>((uint64_t)v9, (uint64_t)(v18 + 3), a8);
      goto LABEL_111;
    case 6:
      v41 = operator new(0x80uLL);
      v41[1] = 0;
      v41[2] = 0;
      *v41 = &off_1E42E6258;
      v41[13] = 0;
      v207 = (void **)(v41 + 13);
      v41[14] = 0;
      v41[15] = 0;
      *(_QWORD *)((char *)v41 + 93) = 0;
      *((_OWORD *)v41 + 4) = 0u;
      *((_OWORD *)v41 + 5) = 0u;
      *((_OWORD *)v41 + 2) = 0u;
      *((_OWORD *)v41 + 3) = 0u;
      v41[3] = &off_1E42C51D0;
      *(_QWORD *)&v42 = v41 + 3;
      *((_QWORD *)&v42 + 1) = v41;
      *(_OWORD *)a1 = v42;
      v43 = *((unsigned __int16 *)v9 + 29);
      v45 = *((_QWORD *)v9 + 11);
      v44 = *((_QWORD *)v9 + 12);
      v41[10] = *((_QWORD *)v9 + 9);
      *((_DWORD *)v41 + 24) = v43;
      v46 = v44 - v45;
      v47 = (v44 - v45) >> 4;
      if (!v47)
        goto LABEL_27;
      if ((v46 & 0x8000000000000000) != 0)
        goto LABEL_245;
      v48 = v41[14];
      v49 = (char *)operator new(v46);
      v50 = &v49[v48];
      v51 = &v49[v48];
      if (v48)
      {
        v51 = &v49[v48];
        do
        {
          v52 = *(_QWORD *)(v48 - 16);
          v48 -= 16;
          v53 = *(_WORD *)(v48 + 8);
          *((_QWORD *)v51 - 2) = v52;
          v51 -= 16;
          *((_WORD *)v51 + 4) = v53;
        }
        while (v48);
      }
      v41[13] = v51;
      v41[14] = v50;
      v41[15] = &v49[16 * v47];
LABEL_27:
      v54 = *((double *)v9 + 8);
      if (*((_BYTE *)v9 + 56) == 1)
        v54 = v54 - *(double *)(*(_QWORD *)(*(_QWORD *)(a8 + 80) + 16 * *((unsigned __int16 *)v9 + 29)) + 8);
      *((double *)v41 + 11) = v54;
      *((_BYTE *)v41 + 100) = *((_BYTE *)v9 + 57);
      v55 = (uint64_t *)*((_QWORD *)v9 + 11);
      v56 = (uint64_t *)*((_QWORD *)v9 + 12);
      if (v55 == v56)
        goto LABEL_80;
      v57 = (char *)v41[14];
      do
      {
        v59 = *((_BYTE *)v55 + 8);
        v60 = *v55;
        v61 = *((_BYTE *)v55 + 9);
        v62 = v41[15];
        if ((unint64_t)v57 < v62)
        {
          *(_QWORD *)v57 = v60;
          v57[8] = v59;
          v58 = v57 + 16;
          v57[9] = v61;
        }
        else
        {
          v63 = (char *)*v207;
          v64 = (v57 - (_BYTE *)*v207) >> 4;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 60)
LABEL_245:
            abort();
          v66 = v62 - (_QWORD)v63;
          if (v66 >> 3 > v65)
            v65 = v66 >> 3;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
            v67 = 0xFFFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          if (v67)
          {
            if (v67 >> 60)
LABEL_241:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v68 = (char *)operator new(16 * v67);
          }
          else
          {
            v68 = 0;
          }
          v69 = &v68[16 * v64];
          *(_QWORD *)v69 = v60;
          v69[8] = v59;
          v69[9] = v61;
          v70 = v69;
          if (v57 != v63)
          {
            do
            {
              v71 = *((_QWORD *)v57 - 2);
              v57 -= 16;
              v72 = *((_WORD *)v57 + 4);
              *((_QWORD *)v70 - 2) = v71;
              v70 -= 16;
              *((_WORD *)v70 + 4) = v72;
            }
            while (v57 != v63);
            v57 = (char *)*v207;
          }
          v58 = v69 + 16;
          v41[13] = v70;
          v41[14] = v69 + 16;
          v41[15] = &v68[16 * v67];
          if (v57)
            operator delete(v57);
        }
        v41[14] = v58;
        v55 += 2;
        v57 = v58;
      }
      while (v55 != v56);
LABEL_80:
      *(double *)(a8 + 104) = fmax(*(double *)(a8 + 104), *((double *)v9 + 10));
      break;
    case 7:
      v73 = operator new(0x80uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_1E42E6370;
      v73[14] = 0;
      v73[15] = 0;
      v73[13] = 0;
      *((_OWORD *)v73 + 2) = 0u;
      *((_OWORD *)v73 + 3) = 0u;
      *((_OWORD *)v73 + 4) = 0u;
      *((_OWORD *)v73 + 5) = 0u;
      *(_QWORD *)((char *)v73 + 93) = 0;
      v73[3] = &off_1E42C6058;
      *(_QWORD *)&v74 = v73 + 3;
      *((_QWORD *)&v74 + 1) = v73;
      *(_OWORD *)a1 = v74;
      altitude::readAnimation<gm::Matrix<float,3,1>>((uint64_t)v9, (uint64_t)(v73 + 3), a8);
      goto LABEL_111;
    case 8:
      v32 = operator new(0x58uLL);
      v32[1] = 0;
      v32[2] = 0;
      *v32 = &off_1E42E63A8;
      *((_OWORD *)v32 + 2) = 0u;
      *((_OWORD *)v32 + 3) = 0u;
      *((_OWORD *)v32 + 4) = 0u;
      v32[3] = &off_1E42C6510;
      *(_QWORD *)&v33 = v32 + 3;
      *((_QWORD *)&v33 + 1) = v32;
      *(_OWORD *)a1 = v33;
      *((_DWORD *)v32 + 20) = v9[14];
      goto LABEL_113;
    default:
      v75 = operator new(0x50uLL);
      v75[1] = 0;
      v75[2] = 0;
      *v75 = &off_1E42E64C0;
      v75[3] = &off_1E42C69F0;
      *((_OWORD *)v75 + 2) = 0u;
      *((_OWORD *)v75 + 3) = 0u;
      *((_OWORD *)v75 + 4) = 0u;
      *(_QWORD *)&v76 = v75 + 3;
      *((_QWORD *)&v76 + 1) = v75;
      *(_OWORD *)a1 = v76;
      if (v10)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v77 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          v78 = **a5;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v78;
          _os_log_impl(&dword_19F029000, v77, OS_LOG_TYPE_ERROR, "Unhandled node type: %d fall back to C3M_SG_NODE", buf, 8u);
        }

      }
      goto LABEL_111;
  }
  v8 = a6;
LABEL_111:
  if (*a1)
  {
    v9 = *a5;
LABEL_113:
    v203 = (int *)*((_QWORD *)v9 + 1);
    v200 = (int *)*((_QWORD *)v9 + 2);
    if (v203 != v200 && a3[17] != a3[18])
    {
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        v121 = a3[17];
        v120 = a3[18];
        if (v121 != v120)
        {
          v122 = *v203;
          v208 = *v203;
          do
          {
            if (*(_DWORD *)(v121 + 4) == v122)
            {
              altitude::util::createMeshIndexData((_QWORD *)v121, v12);
              if (*(unsigned int *)(v121 + 32) >= (unint64_t)((uint64_t)(v8[1] - *v8) >> 4))
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                v125 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_19F029000, v125, OS_LOG_TYPE_ERROR, "Missing texture", buf, 2u);
                }

              }
              else
              {
                v216 = _D8;
                v215 = 0;
                altitude::util::computeBounds((uint64_t)&v220, (uint64_t *)(v121 + 40), (unint64_t *)(v121 + 64));
                v123 = *(unsigned int *)(v121 + 32);
                if (v123 >= (uint64_t)(a7[1] - *a7) >> 4)
                  v124 = 0;
                else
                  v124 = *(_QWORD *)(*a7 + 16 * v123);
                v126 = *(_QWORD *)(*v8 + 16 * v123);
                v127 = *(_QWORD *)(v121 + 48);
                v222.n128_u64[0] = *(_QWORD *)(v121 + 40);
                v222.n128_u64[1] = v127;
                if (v127)
                {
                  v128 = (unint64_t *)(v127 + 8);
                  do
                    v129 = __ldxr(v128);
                  while (__stxr(v129 + 1, v128));
                }
                v130 = operator new();
                v131 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 8) + 216);
                v218 = 0u;
                memset(buf, 0, sizeof(buf));
                v219 = 0x3FF0000000000000;
                if (v124)
                  altitude::FlyoverNightRenderable::FlyoverNightRenderable(v130, v131, (uint64_t)buf, (uint64_t)&v220, (uint64_t)&v222, (uint64_t *)(v121 + 64), v126, v124, &v216, &v215);
                else
                  altitude::FlyoverRenderable::FlyoverRenderable(v130, v131, (uint64_t)buf, (uint64_t)&v220, (uint64_t)&v222, (uint64_t *)(v121 + 64), v126, &v216, &v215);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v130);
                v132 = (_QWORD *)*a1;
                v134 = *(uint64_t **)(*a1 + 40);
                v133 = *(_QWORD *)(*a1 + 48);
                if ((unint64_t)v134 >= v133)
                {
                  v136 = (char *)v132[4];
                  v137 = ((char *)v134 - v136) >> 3;
                  v138 = v137 + 1;
                  if ((unint64_t)(v137 + 1) >> 61)
                    abort();
                  v139 = v133 - (_QWORD)v136;
                  if (v139 >> 2 > v138)
                    v138 = v139 >> 2;
                  if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
                    v140 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v140 = v138;
                  if (v140)
                  {
                    if (v140 >> 61)
                      goto LABEL_241;
                    v141 = (char *)operator new(8 * v140);
                  }
                  else
                  {
                    v141 = 0;
                  }
                  v142 = (uint64_t *)&v141[8 * v137];
                  *v142 = v130;
                  v135 = v142 + 1;
                  if (v134 != (uint64_t *)v136)
                  {
                    v143 = (char *)(v134 - 1) - v136;
                    if (v143 < 0x58)
                      goto LABEL_248;
                    if ((unint64_t)(v136 - v141) < 0x20)
                      goto LABEL_248;
                    v144 = (v143 >> 3) + 1;
                    v145 = &v141[8 * v137 - 16];
                    v146 = v134 - 2;
                    v147 = v144 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v148 = *(_OWORD *)v146;
                      *((_OWORD *)v145 - 1) = *((_OWORD *)v146 - 1);
                      *(_OWORD *)v145 = v148;
                      v145 -= 32;
                      v146 -= 4;
                      v147 -= 4;
                    }
                    while (v147);
                    v142 -= v144 & 0x3FFFFFFFFFFFFFFCLL;
                    v134 -= v144 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_248:
                      do
                      {
                        v149 = *--v134;
                        *--v142 = v149;
                      }
                      while (v134 != (uint64_t *)v136);
                    }
                    v134 = (uint64_t *)v132[4];
                  }
                  v132[4] = v142;
                  v132[5] = v135;
                  v132[6] = &v141[8 * v140];
                  v8 = a6;
                  if (v134)
                    operator delete(v134);
                }
                else
                {
                  *v134 = v130;
                  v135 = v134 + 1;
                  v8 = a6;
                }
                v132[5] = v135;
                v150 = (std::__shared_weak_count *)v222.n128_u64[1];
                v122 = v208;
                if (v222.n128_u64[1])
                {
                  v151 = (unint64_t *)(v222.n128_u64[1] + 8);
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
              }
            }
            v121 += 120;
          }
          while (v121 != v120);
        }
        ++v203;
      }
      while (v203 != v200);
      v9 = *a5;
    }
    v166 = a3[20];
    memset(buf, 0, 24);
    v167 = (unsigned int *)*((_QWORD *)v9 + 4);
    v168 = (unsigned int *)*((_QWORD *)v9 + 5);
    if (v167 != v168)
    {
      v169 = 0;
      do
      {
        v170 = *(__n128 *)(*(_QWORD *)(v166 + 24) + 16 * *v167);
        if ((unint64_t)v169 >= *(_QWORD *)&buf[16])
        {
          v169 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)buf, v170);
        }
        else
        {
          *v169 = v170;
          if (v170.n128_u64[1])
          {
            v171 = (unint64_t *)(v170.n128_u64[1] + 8);
            do
              v172 = __ldxr(v171);
            while (__stxr(v172 + 1, v171));
          }
          ++v169;
        }
        *(_QWORD *)&buf[8] = v169;
        ++v167;
      }
      while (v167 != v168);
      v173 = *(__n128 **)buf;
      if (*(__n128 **)buf != v169)
      {
        while (1)
        {
          v174 = v173->n128_u64[0];
          v175 = (std::__shared_weak_count *)v173->n128_u64[1];
          *(_QWORD *)&v220 = v173->n128_u64[0];
          *((_QWORD *)&v220 + 1) = v175;
          if (v175)
          {
            v176 = (unint64_t *)&v175->__shared_owners_;
            do
              v177 = __ldxr(v176);
            while (__stxr(v177 + 1, v176));
            v214 = v175;
            do
              v178 = __ldxr(v176);
            while (__stxr(v178 + 1, v176));
          }
          else
          {
            v214 = 0;
          }
          v213 = v174;
          altitude::loadSceneGraphNode(&v222, a2, a3, a4, &v213, a6, a7, a8);
          if (!v175)
            goto LABEL_206;
          v179 = (unint64_t *)&v175->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
            v181 = v222.n128_u64[0];
            if (!v222.n128_u64[0])
              goto LABEL_214;
          }
          else
          {
LABEL_206:
            v181 = v222.n128_u64[0];
            if (!v222.n128_u64[0])
              goto LABEL_214;
          }
          v182 = *a1;
          v183 = *(__n128 **)(*a1 + 16);
          if ((unint64_t)v183 >= *(_QWORD *)(*a1 + 24))
          {
            v187 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v182 + 8, v222);
          }
          else
          {
            v183->n128_u64[0] = v181;
            v184 = v222.n128_u64[1];
            v183->n128_u64[1] = v222.n128_u64[1];
            if (v184)
            {
              v185 = (unint64_t *)(v184 + 8);
              do
                v186 = __ldxr(v185);
              while (__stxr(v186 + 1, v185));
            }
            v187 = v183 + 1;
          }
          *(_QWORD *)(v182 + 16) = v187;
LABEL_214:
          v188 = (std::__shared_weak_count *)v222.n128_u64[1];
          if (!v222.n128_u64[1])
            goto LABEL_218;
          v189 = (unint64_t *)(v222.n128_u64[1] + 8);
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
            v191 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
            if (*((_QWORD *)&v220 + 1))
            {
LABEL_219:
              v192 = (unint64_t *)&v191->__shared_owners_;
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
          }
          else
          {
LABEL_218:
            v191 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
            if (*((_QWORD *)&v220 + 1))
              goto LABEL_219;
          }
          if (++v173 == v169)
          {
            v169 = *(__n128 **)buf;
            break;
          }
        }
      }
      if (v169)
      {
        v194 = *(__n128 **)&buf[8];
        v195 = v169;
        if (*(__n128 **)&buf[8] != v169)
        {
          do
          {
            v196 = (std::__shared_weak_count *)v194[-1].n128_u64[1];
            if (v196)
            {
              v197 = (unint64_t *)&v196->__shared_owners_;
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            --v194;
          }
          while (v194 != v169);
          v195 = *(__n128 **)buf;
        }
        *(_QWORD *)&buf[8] = v169;
        operator delete(v195);
      }
    }
  }
}

void sub_19FCD0DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a19);
  _Unwind_Resume(a1);
}

void altitude::readAnimation<gm::Matrix<float,3,1>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  double v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[15];

  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = *(unsigned __int16 *)(a1 + 58);
  v6 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
  v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v8 = *(_BYTE **)(a2 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - (_QWORD)v8) >> 3) < v7)
  {
    if (v7 > 0xAAAAAAAAAAAAAAALL)
LABEL_32:
      abort();
    v9 = *(_BYTE **)(a2 + 88);
    v10 = (char *)operator new(v6);
    v11 = &v10[24 * ((v9 - v8) / 24)];
    v12 = v11;
    if (v9 != v8)
    {
      v13 = &v10[24 * ((v9 - v8) / 24)];
      do
      {
        v12 = v13 - 24;
        v14 = *(_OWORD *)(v9 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v9 - 1);
        *(_OWORD *)(v13 - 24) = v14;
        v9 -= 24;
        v13 -= 24;
      }
      while (v9 != v8);
    }
    *(_QWORD *)(a2 + 80) = v12;
    *(_QWORD *)(a2 + 88) = v11;
    *(_QWORD *)(a2 + 96) = &v10[24 * v7];
    if (v8)
      operator delete(v8);
  }
  v15 = *(double *)(a1 + 64);
  v33 = a3;
  if (*(_BYTE *)(a1 + 56) == 1)
    v15 = v15 - *(double *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 16 * *(unsigned __int16 *)(a1 + 58)) + 8);
  *(double *)(a2 + 64) = v15;
  *(_BYTE *)(a2 + 76) = *(_BYTE *)(a1 + 57);
  v32 = a1;
  v16 = *(uint64_t **)(a1 + 88);
  v17 = *(uint64_t **)(a1 + 96);
  if (v16 != v17)
  {
    v18 = *(char **)(a2 + 88);
    do
    {
      v20 = *((_BYTE *)v16 + 8);
      v21 = *v16;
      *(_QWORD *)&v34[3] = *(uint64_t *)((char *)v16 + 12);
      *(_DWORD *)&v34[11] = *((_DWORD *)v16 + 5);
      v22 = *(_QWORD *)(a2 + 96);
      if ((unint64_t)v18 < v22)
      {
        *(_QWORD *)v18 = v21;
        v18[8] = v20;
        *(_QWORD *)(v18 + 9) = *(_QWORD *)v34;
        *((_QWORD *)v18 + 2) = *(_QWORD *)&v34[7];
        v19 = v18 + 24;
      }
      else
      {
        v23 = *(_BYTE **)(a2 + 80);
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v23) >> 3) + 1;
        if (v24 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_32;
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v23) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v27 = (char *)operator new(24 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[8 * ((v18 - v23) >> 3)];
        *(_QWORD *)v28 = v21;
        v28[8] = v20;
        *(_QWORD *)(v28 + 9) = *(_QWORD *)v34;
        *((_QWORD *)v28 + 2) = *(_QWORD *)&v34[7];
        v29 = v28;
        if (v18 != v23)
        {
          do
          {
            v30 = *(_OWORD *)(v18 - 24);
            *((_QWORD *)v29 - 1) = *((_QWORD *)v18 - 1);
            *(_OWORD *)(v29 - 24) = v30;
            v29 -= 24;
            v18 -= 24;
          }
          while (v18 != v23);
          v18 = *(char **)(a2 + 80);
        }
        v31 = &v27[24 * v26];
        v19 = v28 + 24;
        *(_QWORD *)(a2 + 80) = v29;
        *(_QWORD *)(a2 + 88) = v28 + 24;
        *(_QWORD *)(a2 + 96) = v31;
        if (v18)
          operator delete(v18);
      }
      *(_QWORD *)(a2 + 88) = v19;
      v16 += 3;
      v18 = v19;
    }
    while (v16 != v17);
  }
  *(double *)(v33 + 104) = fmax(*(double *)(v33 + 104), *(double *)(v32 + 80));
}

void std::__shared_ptr_emplace<altitude::SgNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E64C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E64C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::SgExternalObjectPlaceHolder::~SgExternalObjectPlaceHolder(altitude::SgExternalObjectPlaceHolder *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42C69F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42C69F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::SgExternalObjectPlaceHolder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E63A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgExternalObjectPlaceHolder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E63A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgExternalObjectPlaceHolder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgTranslationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgTranslationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgTranslationAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgSwitchAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgSwitchAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgSwitchAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgScaleAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E61B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgScaleAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E61B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgScaleAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E62C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E62C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgRotationAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgMatrixAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E61E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgMatrixAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E61E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgMatrixAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgFixedAxisRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E63E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgFixedAxisRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E63E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgFixedAxisRotationAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SgStaticTransform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SgStaticTransform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::SgStaticTransform>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::SceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::SceneGraph>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = a1[13];
  if (v2)
  {
    v3 = a1[14];
    v4 = (void *)a1[13];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[13];
    }
    a1[14] = v2;
    operator delete(v4);
  }
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
}

void altitude::loadSceneGraphPlaceHolderNodes(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __n128 *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  __n128 *v43;
  __n128 v44;
  unint64_t *v45;
  unint64_t v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v65;
  int *v66;
  int *v67;
  int v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  __n128 v73;
  unint64_t v74;

  v4 = a4;
  v6 = a1;
  v7 = (_DWORD *)*a3;
  if (*(_DWORD *)*a3 == 8)
  {
    v8 = operator new(0x58uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E42E63A8;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    v8[3] = &off_1E42C6510;
    v73.n128_u64[0] = (unint64_t)(v8 + 3);
    v73.n128_u64[1] = (unint64_t)v8;
    *((_DWORD *)v8 + 20) = v7[14];
    v66 = (int *)*((_QWORD *)v7 + 2);
    v67 = (int *)*((_QWORD *)v7 + 1);
    if (v67 != v66 && *(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 56))
    {
      v65 = a2;
      do
      {
        v10 = *(uint64_t **)(a2 + 48);
        v9 = *(uint64_t **)(a2 + 56);
        if (v10 != v9)
        {
          v11 = *v67;
          v68 = *v67;
          do
          {
            v13 = *v10;
            if (*(_DWORD *)(*v10 + 172) == v11)
            {
              v14 = (_QWORD *)v73.n128_u64[0];
              v16 = *(char **)(v73.n128_u64[0] + 40);
              v15 = *(_QWORD *)(v73.n128_u64[0] + 48);
              if ((unint64_t)v16 < v15)
              {
                *(_QWORD *)v16 = v13;
                v12 = v16 + 8;
              }
              else
              {
                v17 = *(char **)(v73.n128_u64[0] + 32);
                v18 = (v16 - v17) >> 3;
                v19 = v18 + 1;
                if ((unint64_t)(v18 + 1) >> 61)
                  abort();
                v20 = v15 - (_QWORD)v17;
                if (v20 >> 2 > v19)
                  v19 = v20 >> 2;
                if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                  v21 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v21 = v19;
                if (v21)
                {
                  if (v21 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v22 = (char *)operator new(8 * v21);
                }
                else
                {
                  v22 = 0;
                }
                v23 = &v22[8 * v18];
                *(_QWORD *)v23 = v13;
                v12 = v23 + 8;
                if (v16 != v17)
                {
                  v24 = v16 - 8 - v17;
                  if (v24 < 0x58)
                    goto LABEL_93;
                  if ((unint64_t)(v17 - v22) < 0x20)
                    goto LABEL_93;
                  v25 = (v24 >> 3) + 1;
                  v26 = &v22[8 * v18 - 16];
                  v27 = (__int128 *)(v16 - 16);
                  v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v29 = *v27;
                    *((_OWORD *)v26 - 1) = *(v27 - 1);
                    *(_OWORD *)v26 = v29;
                    v26 -= 32;
                    v27 -= 2;
                    v28 -= 4;
                  }
                  while (v28);
                  v23 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
                  v16 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_93:
                    do
                    {
                      v30 = *((_QWORD *)v16 - 1);
                      v16 -= 8;
                      *((_QWORD *)v23 - 1) = v30;
                      v23 -= 8;
                    }
                    while (v16 != v17);
                  }
                  v16 = (char *)v14[4];
                }
                v14[4] = v23;
                v14[5] = v12;
                v14[6] = &v22[8 * v21];
                if (v16)
                  operator delete(v16);
                v11 = v68;
              }
              v14[5] = v12;
            }
            ++v10;
          }
          while (v10 != v9);
        }
        ++v67;
        a2 = v65;
      }
      while (v67 != v66);
    }
    v31 = a2;
    v4 = a4;
    v32 = *a4;
    v33 = *(__n128 **)(*a4 + 8);
    if ((unint64_t)v33 >= *(_QWORD *)(*a4 + 16))
    {
      v37 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(*a4, v73);
      v34 = (std::__shared_weak_count *)v73.n128_u64[1];
    }
    else
    {
      v33->n128_u64[0] = v73.n128_u64[0];
      v34 = (std::__shared_weak_count *)v73.n128_u64[1];
      v33->n128_u64[1] = v73.n128_u64[1];
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
      }
      v37 = v33 + 1;
    }
    v6 = a1;
    *(_QWORD *)(v32 + 8) = v37;
    a2 = v31;
    if (v34)
    {
      v38 = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v7 = (_DWORD *)*a3;
  }
  v40 = *(_QWORD *)(v6 + 160);
  v74 = 0;
  v73 = 0uLL;
  v41 = (unsigned int *)*((_QWORD *)v7 + 4);
  v42 = (unsigned int *)*((_QWORD *)v7 + 5);
  if (v41 == v42)
    return;
  v43 = 0;
  do
  {
    v44 = *(__n128 *)(*(_QWORD *)(v40 + 24) + 16 * *v41);
    if ((unint64_t)v43 >= v74)
    {
      v43 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v73, v44);
    }
    else
    {
      *v43 = v44;
      if (v44.n128_u64[1])
      {
        v45 = (unint64_t *)(v44.n128_u64[1] + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      ++v43;
    }
    v73.n128_u64[1] = (unint64_t)v43;
    ++v41;
  }
  while (v41 != v42);
  v47 = (__n128 *)v73.n128_u64[0];
  if ((__n128 *)v73.n128_u64[0] == v43)
  {
    if (!v43)
      return;
    goto LABEL_58;
  }
  do
  {
    v49 = v47->n128_u64[0];
    v50 = (std::__shared_weak_count *)v47->n128_u64[1];
    v71 = v47->n128_u64[0];
    v72 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v70 = v50;
      do
        v53 = __ldxr(v51);
      while (__stxr(v53 + 1, v51));
    }
    else
    {
      v70 = 0;
    }
    v69 = v49;
    altitude::loadSceneGraphPlaceHolderNodes(v6, a2, &v69, v4);
    if (!v50)
      goto LABEL_72;
    v54 = (unint64_t *)&v50->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      v56 = v72;
      if (!v72)
        goto LABEL_60;
    }
    else
    {
LABEL_72:
      v56 = v72;
      if (!v72)
        goto LABEL_60;
    }
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
LABEL_60:
    ++v47;
  }
  while (v47 != v43);
  v43 = (__n128 *)v73.n128_u64[0];
  if (!v73.n128_u64[0])
    return;
LABEL_58:
  v48 = v73.n128_u64[1];
  if ((__n128 *)v73.n128_u64[1] != v43)
  {
    do
    {
      v59 = *(std::__shared_weak_count **)(v48 - 8);
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v48 -= 16;
    }
    while ((__n128 *)v48 != v43);
    v43 = (__n128 *)v73.n128_u64[0];
  }
  operator delete(v43);
}

void sub_19FCD1C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:nn180100]<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0>>(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 16))
    v2 = *(_BYTE *)(a2 + 16) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 16) != 0) ^ (*(_BYTE *)(a2 + 16) != 0);
  return *(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

BOOL md::MaterialDecalRenderBatchKey::operator!=(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64)
    || *(_QWORD *)a1 != *(_QWORD *)a2
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74)
    || *(unsigned __int8 *)(a1 + 75) != *(unsigned __int8 *)(a2 + 75)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v4 = v3 == *(_QWORD *)(a2 + 16);
  else
    v4 = 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v4)
    v2 = 1;
  if (v5)
    v6 = v5 == *(_QWORD *)(a2 + 32);
  else
    v6 = 1;
  v7 = *(_QWORD *)(a1 + 48);
  if (!v6)
    v2 = 1;
  if (v7)
    v8 = v7 == *(_QWORD *)(a2 + 48);
  else
    v8 = 1;
  if (!v8)
    v2 = 1;
  return v2 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80) || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96);
}

BOOL md::DynamicTypedRenderBatchKey::operator!=(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64)
    || *(_QWORD *)a1 != *(_QWORD *)a2
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74)
    || *(unsigned __int8 *)(a1 + 75) != *(unsigned __int8 *)(a2 + 75)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v4 = v3 == *(_QWORD *)(a2 + 16);
  else
    v4 = 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v4)
    v2 = 1;
  if (v5)
    v6 = v5 == *(_QWORD *)(a2 + 32);
  else
    v6 = 1;
  v7 = *(_QWORD *)(a1 + 48);
  if (!v6)
    v2 = 1;
  if (v7)
    v8 = v7 == *(_QWORD *)(a2 + 48);
  else
    v8 = 1;
  if (!v8)
    v2 = 1;
  return v2 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80);
}

void md::PuckRenderResources::update(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5, float a6)
{
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  __int128 v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int16 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  __int128 v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63[2];
  uint64_t v64[2];
  std::string __p;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;

  v11 = a2;
  v12 = (uint64_t *)(a1 + 96);
  if (*(_BYTE *)(a5 + 73) != 1)
    v12 = (uint64_t *)(a1 + 96 + 16 * a4);
  v13 = *v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24) = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24) = v13;
  v14 = *(_QWORD *)(a1 + 224);
  if (!v14)
  {
    v15 = (std::__shared_weak_count *)operator new(0x58uLL);
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v15[1].__shared_weak_owners_ = 0;
    v15[2].__vftable = 0;
    v15[1].__shared_owners_ = 0;
    LODWORD(v15[2].__shared_owners_) = 0;
    *(_QWORD *)&v17 = 0x100000001;
    *((_QWORD *)&v17 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v15[2].__shared_owners_ + 4) = v17;
    *(std::__shared_weak_count_vtbl **)((char *)&v15[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v15[3].__shared_owners_) = 0;
    v70 = v15 + 1;
    v71 = v15;
    if (v11)
    {
      objc_msgSend(v11, "textureManager");
      v18 = v66;
    }
    else
    {
      v18 = 0;
      v66 = 0;
      v67 = 0;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
    v64[1] = (uint64_t)v15;
    strcpy((char *)&__p, "puckCircle");
    v64[0] = (uint64_t)&v15[1];
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    md::TextureManager::texture(&v68, v18, (uint64_t)&__p, v64, 0, a6);
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (v20)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        v21 = v67;
        if (!v67)
          goto LABEL_20;
        goto LABEL_17;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v21 = v67;
    if (!v67)
      goto LABEL_20;
LABEL_17:
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v24 = v68;
      if (v68)
      {
LABEL_21:
        v25 = v24[4];
        v24 = (unint64_t *)v24[5];
        if (v24)
        {
          v26 = v24 + 1;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        goto LABEL_27;
      }
LABEL_26:
      v25 = 0;
LABEL_27:
      v28 = *(std::__shared_weak_count **)(a1 + 232);
      *(_QWORD *)(a1 + 224) = v25;
      *(_QWORD *)(a1 + 232) = v24;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v69;
      if (v69)
      {
        v32 = (unint64_t *)&v69->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v71;
      if (v71)
      {
        v35 = (unint64_t *)&v71->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v14 = *(_QWORD *)(a1 + 224);
      goto LABEL_43;
    }
LABEL_20:
    v24 = v68;
    if (v68)
      goto LABEL_21;
    goto LABEL_26;
  }
LABEL_43:
  **(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) = v14;
  v37 = *(_QWORD *)(a1 + 208);
  if (!v37)
  {
    v38 = *(_DWORD *)(a3 + 44);
LABEL_47:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    *(_DWORD *)(a1 + 256) = v38;
    if (v38 == 1)
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1802264951;
      v39 = 26987;
    }
    else
    {
      if (v38)
        goto LABEL_52;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1986622052;
      v39 = 26998;
    }
    *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) = v39 | 0x676E0000;
    __p.__r_.__value_.__s.__data_[7] = 0;
LABEL_52:
    std::string::append(&__p, "PuckArrowMask", 0xDuLL);
    v40 = (std::__shared_weak_count *)operator new(0x58uLL);
    v40[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    v40->__shared_owners_ = 0;
    v41 = (unint64_t *)&v40->__shared_owners_;
    v40->__shared_weak_owners_ = 0;
    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v40[1].__shared_weak_owners_ = 0;
    v40[2].__vftable = 0;
    v40[1].__shared_owners_ = 0;
    LODWORD(v40[2].__shared_owners_) = 0;
    *(_QWORD *)&v42 = 0x100000001;
    *((_QWORD *)&v42 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v40[2].__shared_owners_ + 4) = v42;
    *(std::__shared_weak_count_vtbl **)((char *)&v40[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v40[3].__shared_owners_) = 0;
    v70 = v40 + 1;
    v71 = v40;
    if (v11)
    {
      objc_msgSend(v11, "textureManager");
      v43 = v66;
    }
    else
    {
      v43 = 0;
      v66 = 0;
      v67 = 0;
    }
    v63[0] = (uint64_t)&v40[1];
    v63[1] = (uint64_t)v40;
    do
      v44 = __ldxr(v41);
    while (__stxr(v44 + 1, v41));
    md::TextureManager::texture(&v68, v43, (uint64_t)&__p, v63, 0, a6);
    do
      v45 = __ldaxr(v41);
    while (__stlxr(v45 - 1, v41));
    if (v45)
    {
      v46 = v67;
      if (!v67)
        goto LABEL_66;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      v46 = v67;
      if (!v67)
        goto LABEL_66;
    }
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = v68;
      if (v68)
      {
LABEL_67:
        v50 = v49[4];
        v49 = (unint64_t *)v49[5];
        if (v49)
        {
          v51 = v49 + 1;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
LABEL_73:
        v53 = *(std::__shared_weak_count **)(a1 + 216);
        *(_QWORD *)(a1 + 208) = v50;
        *(_QWORD *)(a1 + 216) = v49;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = v69;
        if (!v69)
          goto LABEL_82;
        v57 = (unint64_t *)&v69->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
          v59 = v71;
          if (!v71)
            goto LABEL_86;
        }
        else
        {
LABEL_82:
          v59 = v71;
          if (!v71)
            goto LABEL_86;
        }
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_88;
          goto LABEL_87;
        }
LABEL_86:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_88:
          v37 = *(_QWORD *)(a1 + 208);
          goto LABEL_89;
        }
LABEL_87:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_88;
      }
LABEL_72:
      v50 = 0;
      goto LABEL_73;
    }
LABEL_66:
    v49 = v68;
    if (v68)
      goto LABEL_67;
    goto LABEL_72;
  }
  v38 = *(_DWORD *)(a3 + 44);
  if (*(_DWORD *)(a1 + 256) != v38)
    goto LABEL_47;
LABEL_89:
  **(_QWORD **)(*(_QWORD *)(a1 + 48) + 96) = v37;
  if (!*(_BYTE *)(a5 + 73))
  {
    v62 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(*(_QWORD *)(a1 + 176) + 24) = v62;
    *(_QWORD *)(*(_QWORD *)(a1 + 192) + 24) = v62;
    **(_QWORD **)(*(_QWORD *)(a1 + 64) + 96) = *(_QWORD *)(a1 + 224);
    **(_QWORD **)(*(_QWORD *)(a1 + 80) + 96) = *(_QWORD *)(a1 + 208);
  }

}

void sub_19FCD24CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t *ggl::ConstantDataTyped<ggl::Textured::Style>::write(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *result;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;

  a1[5] = 0;
  *a1 = 0;
  a1[1] = 0;
  v2 = *(_QWORD *)(a2 + 8);
  v11 = 0;
  v12 = a2;
  v13 = 0;
  v14 = v2;
  v15 = 1;
  if (v2)
    v2 = *(_QWORD *)(a2 + 72);
  v16 = v2;
  result = ggl::BufferMemory::operator=(a1, (uint64_t)&v11);
  if (v16)
  {
    v5 = v13;
    v4 = v14;
    if (v14 != v13)
    {
      result = v11;
      v6 = (_QWORD *)v12;
      v7 = v15;
      v8 = HIBYTE(v15);
      if (v11 && *(_BYTE *)(v12 + 17) != 2)
        result = (uint64_t *)(*(uint64_t (**)(void))(*v11 + 64))();
      if (v7 && !v8)
      {
        v10 = v6[7];
        v9 = v6[8];
        if (v9 == v10)
          v10 = v6[10] - v6[9];
        if (v5 < v10)
          v10 = v5;
        if (v9 <= v4)
          v9 = v4;
        if (v9 == v10)
          v9 = v10 + v6[10] - v6[9];
        v6[7] = v10;
        v6[8] = v9;
      }
    }
  }
  return result;
}

void std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC800;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC7B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC7B8;
  a2[1] = v2;
  return result;
}

void md::PuckRenderResources::~PuckRenderResources(md::PuckRenderResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v29)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v29)
      goto LABEL_51;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_51:
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v32)
    goto LABEL_55;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v35)
      goto LABEL_61;
  }
  else
  {
LABEL_55:
    v35 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v35)
      goto LABEL_61;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_61:
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v38)
    goto LABEL_65;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v41 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v41)
      goto LABEL_71;
  }
  else
  {
LABEL_65:
    v41 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v41)
      goto LABEL_71;
  }
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_71:
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v44)
    goto LABEL_75;
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    v47 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v47)
      return;
  }
  else
  {
LABEL_75:
    v47 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v47)
      return;
  }
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
}

md::PuckRenderResources *md::PuckRenderResources::PuckRenderResources(md::PuckRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  VKSharedResources *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  unsigned __int8 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  char *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  __int128 v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  ggl::TextureAlphaMaskShader *v236;
  unsigned __int8 v237;
  unsigned __int8 v238;
  unsigned __int8 v239;
  unsigned __int8 v240;
  unsigned __int8 v241;
  unsigned __int8 v242;
  uint64_t *v243;
  VKSharedResources *v244;
  _BYTE v245[32];
  _BYTE v246[52];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _OWORD v253[2];
  _QWORD v254[2];
  _OWORD v255[3];

  v5 = a2;
  v244 = v5;
  v6 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v5, "shaderLibrary") + 80);
  v7 = *(std::__shared_weak_count **)(v6 + 2872);
  v254[0] = *(_QWORD *)(v6 + 2864);
  v254[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_QWORD *)&v245[24] = 0;
  *(_QWORD *)v246 = 0;
  *(_DWORD *)&v246[8] = 0;
  v245[0] = 1;
  *(_OWORD *)&v245[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v245[20] = 7;
  v246[12] = 15;
  v10 = -[VKSharedResources gglDevice](v5, "gglDevice");
  v11 = operator new(0x198uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42E5030;
  v12 = *(_OWORD *)&a3->colorFormatsCount;
  v255[0] = *(_OWORD *)a3->colorFormats;
  v255[1] = v12;
  *(_QWORD *)this = ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState((uint64_t)(v11 + 3), v254, (uint64_t)v245, v255, *(_BYTE *)(v10 + 20));
  *((_QWORD *)this + 1) = v11;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v15 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v5, "shaderLibrary") + 80);
  v16 = *(_QWORD *)(v15 + 2744);
  v17 = *(_QWORD *)(v15 + 2752);
  *(_QWORD *)&v255[0] = v16;
  *((_QWORD *)&v255[0] + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (char *)operator new(0x198uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_1E42E0DB0;
  v21 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v245 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v245[16] = v21;
  if ((v22 & 1) == 0)
  {
    if ((_DWORD)v236)
    {
      if ((v237 & 1) == 0)
      {
        if ((_DWORD)v236)
        {
          if ((v240 & 1) == 0
          {
            if ((v242 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE396C8 = &ggl::TextureAlphaMask::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1ECE396D0 = 0;
          if ((v241 & 1) == 0
          {
            ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
            unk_1ECE39700 = ggl::TextureAlphaMask::Style::reflection(void)::reflection;
          }
          qword_1ECE396D8 = (uint64_t)&ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1ECE396E0 = xmmword_19FFB35A0;
        }
      }
      ggl::TextureAlphaMask::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::TextureAlphaMaskShader::typedReflection(v236);
      qword_1ECE31580 = (uint64_t)&ggl::TextureAlphaMaskShader::typedReflection(void)::ref;
      if ((v238 & 1) == 0
      {
        ggl::TextureAlphaMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57D3C0 = 0;
        qword_1EE57D3C8 = (uint64_t)"";
        dword_1EE57D3D0 = 0;
        qword_1EE57D3D8 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57D3E0 = 2;
      }
      qword_1ECE31588 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31590 = 1;
      qword_1ECE31598 = 0;
      unk_1ECE315A0 = 1;
      qword_1ECE315A8 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE315B0 = 0;
      if ((v239 & 1) == 0
      {
        ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57D360 = 0;
        qword_1EE57D368 = (uint64_t)"view";
        dword_1EE57D370 = 3;
        qword_1EE57D378 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57D380 = vdupq_n_s64(1uLL);
        qword_1EE57D390 = 1;
        unk_1EE57D398 = "style";
        dword_1EE57D3A0 = 3;
        qword_1EE57D3A8 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57D3B0 = 1;
      }
      qword_1ECE315B8 = (uint64_t)&ggl::TextureAlphaMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE315C0 = 2;
    }
  }
  v23 = v255[0];
  if (*((_QWORD *)&v255[0] + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v255[0] + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    *((_DWORD *)v20 + 14) = 0;
    *((_QWORD *)v20 + 5) = 0;
    *((_QWORD *)v20 + 6) = 0;
    *((_QWORD *)v20 + 3) = &off_1E42B6760;
    *((_QWORD *)v20 + 4) = 0;
    *((_QWORD *)v20 + 8) = &ggl::TextureAlphaMask::MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v20 + 72) = v23;
    do
      v26 = __ldxr(v24);
    while (__stxr(v26 + 1, v24));
  }
  else
  {
    *((_DWORD *)v20 + 14) = 0;
    *((_QWORD *)v20 + 5) = 0;
    *((_QWORD *)v20 + 6) = 0;
    *((_QWORD *)v20 + 3) = &off_1E42B6760;
    *((_QWORD *)v20 + 4) = 0;
    *((_QWORD *)v20 + 8) = &ggl::TextureAlphaMask::MeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v20 + 9) = v23;
    *((_QWORD *)v20 + 10) = 0;
  }
  v20[136] = 0;
  *(_OWORD *)(v20 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v20 + 156) = 0;
  *(_QWORD *)(v20 + 172) = 0;
  *(_QWORD *)(v20 + 164) = 0;
  v20[184] = 0;
  *(_OWORD *)(v20 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v20 + 204) = 0;
  *(_QWORD *)(v20 + 220) = 0;
  *(_QWORD *)(v20 + 212) = 0;
  v20[232] = 0;
  *(_OWORD *)(v20 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v20 + 252) = 0;
  *(_QWORD *)(v20 + 268) = 0;
  *(_QWORD *)(v20 + 260) = 0;
  v27 = *(_OWORD *)&v245[16];
  *(_OWORD *)(v20 + 280) = *(_OWORD *)v245;
  *(_OWORD *)(v20 + 296) = v27;
  v20[312] = 0;
  *((_QWORD *)v20 + 48) = 0;
  *((_OWORD *)v20 + 22) = 0u;
  *((_OWORD *)v20 + 23) = 0u;
  *((_OWORD *)v20 + 20) = 0u;
  *((_OWORD *)v20 + 21) = 0u;
  *((_QWORD *)v20 + 49) = 0x100000001;
  v20[400] = 0;
  v20[88] = 1;
  *(_WORD *)(v20 + 89) = v254[0];
  v20[91] = BYTE2(v254[0]);
  *(_OWORD *)(v20 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v20 + 27) = 7;
  *((_QWORD *)v20 + 14) = 0;
  *((_QWORD *)v20 + 15) = 0;
  *((_DWORD *)v20 + 32) = 0;
  v20[132] = 15;
  if (*((_QWORD *)&v23 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  *((_QWORD *)v20 + 3) = &off_1E42B8B20;
  *((_QWORD *)this + 2) = v20 + 24;
  *((_QWORD *)this + 3) = v20;
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v255[0] + 1);
  if (*((_QWORD *)&v255[0] + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v255[0] + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = operator new(0x100uLL);
  v34 = (uint64_t *)((char *)this + 32);
  v33[1] = 0;
  v33[2] = 0;
  *v33 = &off_1E42E4FF8;
  *((_QWORD *)this + 4) = ggl::Textured::Pos2DUVExtendedPipelineSetup::Pos2DUVExtendedPipelineSetup((ggl::Textured::Pos2DUVExtendedPipelineSetup *)(v33 + 3));
  *((_QWORD *)this + 5) = v33;
  v35 = operator new(0x100uLL);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = &off_1E42E0D78;
  *((_QWORD *)this + 6) = ggl::TextureAlphaMask::MeshPipelineSetup::MeshPipelineSetup((ggl::TextureAlphaMask::MeshPipelineSetup *)(v35 + 3));
  *((_QWORD *)this + 7) = v35;
  v36 = operator new(0x100uLL);
  v36[2] = 0;
  *v36 = &off_1E42E4FF8;
  v36[1] = 0;
  *((_QWORD *)this + 8) = ggl::Textured::Pos2DUVExtendedPipelineSetup::Pos2DUVExtendedPipelineSetup((ggl::Textured::Pos2DUVExtendedPipelineSetup *)(v36 + 3));
  *((_QWORD *)this + 9) = v36;
  v37 = operator new(0x100uLL);
  v37[2] = 0;
  *v37 = &off_1E42E0D78;
  v37[1] = 0;
  v38 = ggl::TextureAlphaMask::MeshPipelineSetup::MeshPipelineSetup((ggl::TextureAlphaMask::MeshPipelineSetup *)(v37 + 3));
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 10) = v38;
  *((_QWORD *)this + 11) = v37;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 64) = 0;
  if ((v39 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultCircleColorLinear, (uint64_t)&md::kDefaultCircleColor);
  }
  if ((v40 & 1) == 0
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear, (uint64_t)&md::kDefaultArrowColor);
  }
  v243 = (uint64_t *)((char *)this + 96);
  v41 = *v34;
  v42 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v42->__shared_owners_ = 0;
  v43 = (unint64_t *)&v42->__shared_owners_;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v44 = ggl::BufferData::BufferData((uint64_t)&v42[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v42[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v45 = *(uint64_t **)(v41 + 64);
  *v45 = v44;
  v45[1] = 0;
  v46 = *(uint64_t **)(v41 + 160);
  do
    v47 = __ldxr(v43);
  while (__stxr(v47 + 1, v43));
  v48 = (std::__shared_weak_count *)v46[1];
  *v46 = v44;
  v46[1] = (uint64_t)v42;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  do
    v51 = __ldaxr(v43);
  while (__stlxr(v51 - 1, v43));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  v52 = *v34;
  v53 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v53->__shared_owners_ = 0;
  v54 = (unint64_t *)&v53->__shared_owners_;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D68;
  v55 = ggl::BufferData::BufferData((uint64_t)&v53[1], qword_1EE562BB0, 2, 1, 6, 1);
  v53[9].__shared_owners_ = (uint64_t)ggl::Textured::Style::reflection(void)::reflection;
  v53[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F50;
  v56 = *(_QWORD *)(v52 + 64);
  *(_QWORD *)(v56 + 48) = v55;
  *(_QWORD *)(v56 + 56) = 0;
  v57 = *(_QWORD *)(v52 + 160);
  do
    v58 = __ldxr(v54);
  while (__stxr(v58 + 1, v54));
  v59 = *(std::__shared_weak_count **)(v57 + 56);
  *(_QWORD *)(v57 + 48) = v55;
  *(_QWORD *)(v57 + 56) = v53;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  do
    v62 = __ldaxr(v54);
  while (__stlxr(v62 - 1, v54));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  v63 = *(_QWORD **)(*((_QWORD *)this + 4) + 64);
  v64 = (_QWORD *)v63[6];
  v65 = v64[1];
  *(_OWORD *)v64[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultCircleColorLinear;
  if (v64[8] > v65)
    v65 = v64[8];
  v64[7] = 0;
  v64[8] = v65;
  v66 = (_QWORD *)*v63;
  v67 = v66[1];
  v68 = v66[9];
  *(_DWORD *)v68 = 1065353216;
  *(_QWORD *)(v68 + 12) = 0;
  *(_QWORD *)(v68 + 4) = 0;
  *(_DWORD *)(v68 + 20) = 1065353216;
  *(_QWORD *)(v68 + 24) = 0;
  *(_QWORD *)(v68 + 32) = 0;
  *(_DWORD *)(v68 + 40) = 1065353216;
  *(_QWORD *)(v68 + 52) = 0;
  *(_QWORD *)(v68 + 44) = 0;
  *(_DWORD *)(v68 + 60) = 1065353216;
  if (v66[8] > v67)
    v67 = v66[8];
  v66[7] = 0;
  v66[8] = v67;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 4), *(_QWORD *)this, *((std::__shared_weak_count **)this + 1));
  v69 = *((_QWORD *)this + 6);
  v70 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v70->__shared_owners_ = 0;
  v71 = (unint64_t *)&v70->__shared_owners_;
  v70->__shared_weak_owners_ = 0;
  v70->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A98;
  v72 = ggl::BufferData::BufferData((uint64_t)&v70[1], qword_1EE56CA78, 2, 1, 6, 1);
  v70[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
  v70[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9310;
  v73 = *(uint64_t **)(v69 + 64);
  *v73 = v72;
  v73[1] = 0;
  v74 = *(uint64_t **)(v69 + 160);
  do
    v75 = __ldxr(v71);
  while (__stxr(v75 + 1, v71));
  v76 = (std::__shared_weak_count *)v74[1];
  *v74 = v72;
  v74[1] = (uint64_t)v70;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  do
    v79 = __ldaxr(v71);
  while (__stlxr(v79 - 1, v71));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  v80 = *((_QWORD *)this + 6);
  v81 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v81->__shared_owners_ = 0;
  v82 = (unint64_t *)&v81->__shared_owners_;
  v81->__shared_weak_owners_ = 0;
  v81->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1AD0;
  v83 = ggl::BufferData::BufferData((uint64_t)&v81[1], qword_1EE56CAB8, 2, 1, 6, 1);
  v81[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::Style::reflection(void)::reflection;
  v81[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9330;
  v84 = *(_QWORD *)(v80 + 64);
  *(_QWORD *)(v84 + 16) = v83;
  *(_QWORD *)(v84 + 24) = 0;
  v85 = *(_QWORD *)(v80 + 160);
  do
    v86 = __ldxr(v82);
  while (__stxr(v86 + 1, v82));
  v87 = *(std::__shared_weak_count **)(v85 + 24);
  *(_QWORD *)(v85 + 16) = v83;
  *(_QWORD *)(v85 + 24) = v81;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  do
    v90 = __ldaxr(v82);
  while (__stlxr(v90 - 1, v82));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  v91 = *(_QWORD **)(*((_QWORD *)this + 6) + 64);
  v92 = (_QWORD *)v91[2];
  v93 = v92[1];
  *(_OWORD *)v92[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear;
  if (v92[8] > v93)
    v93 = v92[8];
  v92[7] = 0;
  v92[8] = v93;
  v94 = (_QWORD *)*v91;
  v95 = v94[1];
  v96 = v94[9];
  *(_DWORD *)v96 = 1065353216;
  *(_QWORD *)(v96 + 12) = 0;
  *(_QWORD *)(v96 + 4) = 0;
  *(_DWORD *)(v96 + 20) = 1065353216;
  *(_QWORD *)(v96 + 24) = 0;
  *(_QWORD *)(v96 + 32) = 0;
  *(_DWORD *)(v96 + 40) = 1065353216;
  *(_QWORD *)(v96 + 52) = 0;
  *(_QWORD *)(v96 + 44) = 0;
  *(_DWORD *)(v96 + 60) = 1065353216;
  if (v94[8] > v95)
    v95 = v94[8];
  v94[7] = 0;
  v94[8] = v95;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 6), *((_QWORD *)this + 2), *((std::__shared_weak_count **)this + 3));
  v97 = *((_QWORD *)this + 8);
  v98 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v98->__shared_owners_ = 0;
  v99 = (unint64_t *)&v98->__shared_owners_;
  v98->__shared_weak_owners_ = 0;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v100 = ggl::BufferData::BufferData((uint64_t)&v98[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v98[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v98[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v101 = *(uint64_t **)(v97 + 64);
  *v101 = v100;
  v101[1] = 0;
  v102 = *(uint64_t **)(v97 + 160);
  do
    v103 = __ldxr(v99);
  while (__stxr(v103 + 1, v99));
  v104 = (std::__shared_weak_count *)v102[1];
  *v102 = v100;
  v102[1] = (uint64_t)v98;
  if (v104)
  {
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  do
    v107 = __ldaxr(v99);
  while (__stlxr(v107 - 1, v99));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
  v108 = *((_QWORD *)this + 8);
  v109 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v109->__shared_owners_ = 0;
  v110 = (unint64_t *)&v109->__shared_owners_;
  v109->__shared_weak_owners_ = 0;
  v109->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2D68;
  v111 = ggl::BufferData::BufferData((uint64_t)&v109[1], qword_1EE562BB0, 2, 1, 6, 1);
  v109[9].__shared_owners_ = (uint64_t)ggl::Textured::Style::reflection(void)::reflection;
  v109[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F50;
  v112 = *(_QWORD *)(v108 + 64);
  *(_QWORD *)(v112 + 48) = v111;
  *(_QWORD *)(v112 + 56) = 0;
  v113 = *(_QWORD *)(v108 + 160);
  do
    v114 = __ldxr(v110);
  while (__stxr(v114 + 1, v110));
  v115 = *(std::__shared_weak_count **)(v113 + 56);
  *(_QWORD *)(v113 + 48) = v111;
  *(_QWORD *)(v113 + 56) = v109;
  if (v115)
  {
    v116 = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  do
    v118 = __ldaxr(v110);
  while (__stlxr(v118 - 1, v110));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
  v119 = *(_QWORD **)(*((_QWORD *)this + 8) + 64);
  v120 = (_QWORD *)v119[6];
  v121 = v120[1];
  *(_OWORD *)v120[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear;
  if (v120[8] > v121)
    v121 = v120[8];
  v120[7] = 0;
  v120[8] = v121;
  v122 = (_QWORD *)*v119;
  v123 = v122[1];
  v124 = v122[9];
  *(_DWORD *)v124 = 1065353216;
  *(_QWORD *)(v124 + 12) = 0;
  *(_QWORD *)(v124 + 4) = 0;
  *(_DWORD *)(v124 + 20) = 1065353216;
  *(_QWORD *)(v124 + 24) = 0;
  *(_QWORD *)(v124 + 32) = 0;
  *(_DWORD *)(v124 + 40) = 1065353216;
  *(_QWORD *)(v124 + 52) = 0;
  *(_QWORD *)(v124 + 44) = 0;
  *(_DWORD *)(v124 + 60) = 1065353216;
  if (v122[8] > v123)
    v123 = v122[8];
  v122[7] = 0;
  v122[8] = v123;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 8), *(_QWORD *)this, *((std::__shared_weak_count **)this + 1));
  v125 = *((_QWORD *)this + 10);
  v126 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v126->__shared_owners_ = 0;
  v127 = (unint64_t *)&v126->__shared_owners_;
  v126->__shared_weak_owners_ = 0;
  v126->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A98;
  v128 = ggl::BufferData::BufferData((uint64_t)&v126[1], qword_1EE56CA78, 2, 1, 6, 1);
  v126[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
  v126[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9310;
  v129 = *(uint64_t **)(v125 + 64);
  *v129 = v128;
  v129[1] = 0;
  v130 = *(uint64_t **)(v125 + 160);
  do
    v131 = __ldxr(v127);
  while (__stxr(v131 + 1, v127));
  v132 = (std::__shared_weak_count *)v130[1];
  *v130 = v128;
  v130[1] = (uint64_t)v126;
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  do
    v135 = __ldaxr(v127);
  while (__stlxr(v135 - 1, v127));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }
  v136 = *((_QWORD *)this + 10);
  v137 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v137->__shared_owners_ = 0;
  v138 = (unint64_t *)&v137->__shared_owners_;
  v137->__shared_weak_owners_ = 0;
  v137->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1AD0;
  v139 = ggl::BufferData::BufferData((uint64_t)&v137[1], qword_1EE56CAB8, 2, 1, 6, 1);
  v137[9].__shared_owners_ = (uint64_t)ggl::TextureAlphaMask::Style::reflection(void)::reflection;
  v137[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9330;
  v140 = *(_QWORD *)(v136 + 64);
  *(_QWORD *)(v140 + 16) = v139;
  *(_QWORD *)(v140 + 24) = 0;
  v141 = *(_QWORD *)(v136 + 160);
  do
    v142 = __ldxr(v138);
  while (__stxr(v142 + 1, v138));
  v143 = *(std::__shared_weak_count **)(v141 + 24);
  *(_QWORD *)(v141 + 16) = v139;
  *(_QWORD *)(v141 + 24) = v137;
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  do
    v146 = __ldaxr(v138);
  while (__stlxr(v146 - 1, v138));
  if (!v146)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
  }
  v147 = *(_QWORD **)(*((_QWORD *)this + 10) + 64);
  v148 = (_QWORD *)v147[2];
  v149 = v148[1];
  *(_OWORD *)v148[9] = md::PuckRenderResources::PuckRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::kDefaultArrowColorLinear;
  if (v148[8] > v149)
    v149 = v148[8];
  v148[7] = 0;
  v148[8] = v149;
  v150 = (_QWORD *)*v147;
  v151 = v150[1];
  v152 = v150[9];
  *(_DWORD *)v152 = 1065353216;
  *(_QWORD *)(v152 + 12) = 0;
  *(_QWORD *)(v152 + 4) = 0;
  *(_DWORD *)(v152 + 20) = 1065353216;
  *(_QWORD *)(v152 + 24) = 0;
  *(_QWORD *)(v152 + 32) = 0;
  *(_DWORD *)(v152 + 40) = 1065353216;
  *(_QWORD *)(v152 + 52) = 0;
  *(_QWORD *)(v152 + 44) = 0;
  *(_DWORD *)(v152 + 60) = 1065353216;
  if (v150[8] > v151)
    v151 = v150[8];
  v150[7] = 0;
  v150[8] = v151;
  ggl::Flyover::FlyoverPipelineSetup::setState(*((ggl::PipelineSetup **)this + 10), *((_QWORD *)this + 2), *((std::__shared_weak_count **)this + 3));
  *(_DWORD *)v246 = 0;
  *(_QWORD *)v245 = &off_1E42B5DE8;
  memset(&v245[8], 0, 24);
  *(_QWORD *)&v246[4] = 67329;
  *(_DWORD *)&v246[12] = 0;
  *(_QWORD *)&v246[16] = 1;
  *(_WORD *)&v246[24] = 0;
  v246[26] = 3;
  memset(&v246[27], 0, 17);
  *(_QWORD *)&v250 = 0;
  *((_QWORD *)&v249 + 1) = 0;
  WORD4(v253[0]) = 257;
  memset((char *)v253 + 12, 0, 17);
  v153 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v153 + 217) = *(_OWORD *)((char *)v253 + 13);
  v154 = v252;
  *(_OWORD *)(v153 + 204) = v253[0];
  *(_OWORD *)(v153 + 188) = v154;
  v155 = v250;
  *(_OWORD *)(v153 + 172) = v251;
  *(_OWORD *)(v153 + 156) = v155;
  v156 = v248;
  *(_OWORD *)(v153 + 140) = v249;
  *(_OWORD *)(v153 + 124) = v156;
  v157 = *(_OWORD *)&v246[36];
  *(_OWORD *)(v153 + 108) = v247;
  v158 = *(_OWORD *)&v246[20];
  *(_OWORD *)(v153 + 60) = *(_OWORD *)&v246[4];
  *(_OWORD *)(v153 + 76) = v158;
  *((_QWORD *)v153 + 1) = 0;
  *((_QWORD *)v153 + 2) = 0;
  *(_QWORD *)v153 = &off_1E42DEA08;
  *((_QWORD *)v153 + 4) = 0;
  *((_QWORD *)v153 + 5) = 0;
  *((_QWORD *)v153 + 6) = *(_QWORD *)&v245[24];
  *((_DWORD *)v153 + 14) = *(_DWORD *)v246;
  *((_QWORD *)v153 + 3) = &off_1E42B5DE8;
  *(_OWORD *)(v153 + 92) = v157;
  v159 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 12) = v153 + 24;
  *((_QWORD *)this + 13) = v153;
  if (v159)
  {
    v160 = (unint64_t *)&v159->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  *(_QWORD *)v245 = &off_1E42B8A10;
  if (*(_QWORD *)&v245[8])
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v245[8] + 16))(*(_QWORD *)&v245[8], *(_QWORD *)&v245[24]);
    *(_QWORD *)&v245[24] = 3735927469;
  }
  v162 = *(std::__shared_weak_count **)&v245[16];
  if (*(_QWORD *)&v245[16])
  {
    v163 = (unint64_t *)(*(_QWORD *)&v245[16] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  *(_DWORD *)v246 = 0;
  *(_QWORD *)&v245[16] = 0;
  *(_QWORD *)&v245[24] = 0;
  *(_OWORD *)v245 = (unint64_t)&off_1E42B5DE8;
  *(_QWORD *)&v246[4] = 65792;
  *(_DWORD *)&v246[12] = 0;
  *(_QWORD *)&v246[16] = 1;
  *(_WORD *)&v246[24] = 0;
  v246[26] = 3;
  memset(&v246[27], 0, 17);
  *(_QWORD *)&v250 = 0;
  *((_QWORD *)&v249 + 1) = 0;
  WORD4(v253[0]) = 257;
  memset((char *)v253 + 12, 0, 17);
  v165 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v165 + 217) = *(_OWORD *)((char *)v253 + 13);
  v166 = v252;
  *(_OWORD *)(v165 + 204) = v253[0];
  *(_OWORD *)(v165 + 188) = v166;
  v167 = v250;
  *(_OWORD *)(v165 + 172) = v251;
  *(_OWORD *)(v165 + 156) = v167;
  v168 = v248;
  *(_OWORD *)(v165 + 140) = v249;
  *(_OWORD *)(v165 + 124) = v168;
  v169 = *(_OWORD *)&v246[36];
  *(_OWORD *)(v165 + 108) = v247;
  v170 = *(_OWORD *)&v246[20];
  *(_OWORD *)(v165 + 60) = *(_OWORD *)&v246[4];
  *(_OWORD *)(v165 + 76) = v170;
  *((_QWORD *)v165 + 1) = 0;
  *((_QWORD *)v165 + 2) = 0;
  *(_QWORD *)v165 = &off_1E42DEA08;
  *((_QWORD *)v165 + 4) = 0;
  *((_QWORD *)v165 + 5) = 0;
  *((_QWORD *)v165 + 6) = *(_QWORD *)&v245[24];
  *((_DWORD *)v165 + 14) = *(_DWORD *)v246;
  *((_QWORD *)v165 + 3) = &off_1E42B5DE8;
  *(_OWORD *)(v165 + 92) = v169;
  v171 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = v165 + 24;
  *((_QWORD *)this + 15) = v165;
  if (v171)
  {
    v172 = (unint64_t *)&v171->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  *(_QWORD *)v245 = &off_1E42B8A10;
  if (*(_QWORD *)&v245[8])
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v245[8] + 16))(*(_QWORD *)&v245[8], *(_QWORD *)&v245[24]);
    *(_QWORD *)&v245[24] = 3735927469;
  }
  v174 = *(std::__shared_weak_count **)&v245[16];
  if (*(_QWORD *)&v245[16])
  {
    v175 = (unint64_t *)(*(_QWORD *)&v245[16] + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  *(_DWORD *)v246 = 0;
  *(_QWORD *)&v245[16] = 0;
  *(_QWORD *)&v245[24] = 0;
  *(_OWORD *)v245 = (unint64_t)&off_1E42B5DE8;
  *(_QWORD *)&v246[4] = 67072;
  *(_DWORD *)&v246[12] = 0;
  *(_QWORD *)&v246[16] = 1;
  *(_WORD *)&v246[24] = 0;
  v246[26] = 3;
  memset(&v246[27], 0, 17);
  *(_QWORD *)&v250 = 0;
  *((_QWORD *)&v249 + 1) = 0;
  WORD4(v253[0]) = 257;
  memset((char *)v253 + 12, 0, 17);
  v177 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v177 + 217) = *(_OWORD *)((char *)v253 + 13);
  v178 = v252;
  *(_OWORD *)(v177 + 204) = v253[0];
  *(_OWORD *)(v177 + 188) = v178;
  v179 = v250;
  *(_OWORD *)(v177 + 172) = v251;
  *(_OWORD *)(v177 + 156) = v179;
  v180 = v248;
  *(_OWORD *)(v177 + 140) = v249;
  *(_OWORD *)(v177 + 124) = v180;
  v181 = *(_OWORD *)&v246[36];
  *(_OWORD *)(v177 + 108) = v247;
  v182 = *(_OWORD *)&v246[20];
  *(_OWORD *)(v177 + 60) = *(_OWORD *)&v246[4];
  *(_OWORD *)(v177 + 76) = v182;
  *((_QWORD *)v177 + 1) = 0;
  *((_QWORD *)v177 + 2) = 0;
  *(_QWORD *)v177 = &off_1E42DEA08;
  *((_QWORD *)v177 + 4) = 0;
  *((_QWORD *)v177 + 5) = 0;
  *((_QWORD *)v177 + 6) = *(_QWORD *)&v245[24];
  *((_DWORD *)v177 + 14) = *(_DWORD *)v246;
  *((_QWORD *)v177 + 3) = &off_1E42B5DE8;
  *(_OWORD *)(v177 + 92) = v181;
  v183 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = v177 + 24;
  *((_QWORD *)this + 17) = v177;
  if (v183)
  {
    v184 = (unint64_t *)&v183->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  *(_QWORD *)v245 = &off_1E42B8A10;
  if (*(_QWORD *)&v245[8])
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v245[8] + 16))(*(_QWORD *)&v245[8], *(_QWORD *)&v245[24]);
    *(_QWORD *)&v245[24] = 3735927469;
  }
  v186 = *(std::__shared_weak_count **)&v245[16];
  if (*(_QWORD *)&v245[16])
  {
    v187 = (unint64_t *)(*(_QWORD *)&v245[16] + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
      v189 = *((_QWORD *)this + 12);
      v190 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
      if (v190)
        goto LABEL_164;
LABEL_185:
      *(_BYTE *)(v189 + 58) = 3;
      *(_BYTE *)(v189 + 56) = 0;
      v194 = *((_QWORD *)this + 14);
      v195 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
      if (v195)
        goto LABEL_171;
      goto LABEL_186;
    }
  }
  v189 = *((_QWORD *)this + 12);
  v190 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v190)
    goto LABEL_185;
LABEL_164:
  v191 = (unint64_t *)&v190->__shared_owners_;
  do
    v192 = __ldxr(v191);
  while (__stxr(v192 + 1, v191));
  *(_BYTE *)(v189 + 58) = 3;
  *(_BYTE *)(v189 + 56) = 0;
  do
    v193 = __ldaxr(v191);
  while (__stlxr(v193 - 1, v191));
  if (!v193)
  {
    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
    std::__shared_weak_count::__release_weak(v190);
  }
  v194 = *((_QWORD *)this + 14);
  v195 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v195)
  {
LABEL_171:
    v196 = (unint64_t *)&v195->__shared_owners_;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
    *(_BYTE *)(v194 + 58) = 3;
    *(_BYTE *)(v194 + 56) = 0;
    do
      v198 = __ldaxr(v196);
    while (__stlxr(v198 - 1, v196));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
    v199 = *((_QWORD *)this + 16);
    v200 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (v200)
      goto LABEL_178;
LABEL_187:
    *(_BYTE *)(v199 + 58) = 3;
    *(_BYTE *)(v199 + 56) = 0;
    goto LABEL_188;
  }
LABEL_186:
  *(_BYTE *)(v194 + 58) = 3;
  *(_BYTE *)(v194 + 56) = 0;
  v199 = *((_QWORD *)this + 16);
  v200 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v200)
    goto LABEL_187;
LABEL_178:
  v201 = (unint64_t *)&v200->__shared_owners_;
  do
    v202 = __ldxr(v201);
  while (__stxr(v202 + 1, v201));
  *(_BYTE *)(v199 + 58) = 3;
  *(_BYTE *)(v199 + 56) = 0;
  do
    v203 = __ldaxr(v201);
  while (__stlxr(v203 - 1, v201));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
  }
LABEL_188:
  v204 = *v243;
  v205 = *((_QWORD *)this + 6);
  v206 = (char *)operator new(0x90uLL);
  *((_QWORD *)v206 + 1) = 0;
  *((_QWORD *)v206 + 2) = 0;
  *(_QWORD *)v206 = &off_1E42DE6F8;
  *((_QWORD *)v206 + 3) = &off_1E42B59B0;
  *((_QWORD *)v206 + 5) = "PuckArrow";
  *((_QWORD *)v206 + 6) = v204;
  *((_QWORD *)v206 + 7) = v205;
  *((_DWORD *)v206 + 16) = 0;
  *((_QWORD *)v206 + 9) = 0;
  *(_OWORD *)(v206 + 88) = 0u;
  *(_OWORD *)(v206 + 104) = 0u;
  *((_DWORD *)v206 + 20) = 1065353216;
  *(int64x2_t *)(v206 + 120) = vdupq_n_s64(1uLL);
  *((_QWORD *)v206 + 17) = 0;
  v207 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = v206 + 24;
  *((_QWORD *)this + 19) = v206;
  if (v207)
  {
    v208 = (unint64_t *)&v207->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = *v243;
  v211 = *((_QWORD *)this + 4);
  v212 = (char *)operator new(0x90uLL);
  *((_QWORD *)v212 + 1) = 0;
  *((_QWORD *)v212 + 2) = 0;
  *(_QWORD *)v212 = &off_1E42DE6F8;
  *((_QWORD *)v212 + 3) = &off_1E42B59B0;
  *((_QWORD *)v212 + 5) = "PuckCircle";
  *((_QWORD *)v212 + 6) = v210;
  *((_QWORD *)v212 + 7) = v211;
  *((_DWORD *)v212 + 16) = 0;
  *((_QWORD *)v212 + 9) = 0;
  *(_OWORD *)(v212 + 88) = 0u;
  *(_OWORD *)(v212 + 104) = 0u;
  *((_DWORD *)v212 + 20) = 1065353216;
  *(int64x2_t *)(v212 + 120) = vdupq_n_s64(1uLL);
  *((_QWORD *)v212 + 17) = 0;
  v213 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 20) = v212 + 24;
  *((_QWORD *)this + 21) = v212;
  if (v213)
  {
    v214 = (unint64_t *)&v213->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = *((_QWORD *)this + 16);
  v217 = *((_QWORD *)this + 10);
  v218 = (char *)operator new(0x90uLL);
  *((_QWORD *)v218 + 1) = 0;
  *((_QWORD *)v218 + 2) = 0;
  *(_QWORD *)v218 = &off_1E42DE6F8;
  *((_QWORD *)v218 + 3) = &off_1E42B59B0;
  *((_QWORD *)v218 + 5) = "PuckArrow";
  *((_QWORD *)v218 + 6) = v216;
  *((_QWORD *)v218 + 7) = v217;
  *((_DWORD *)v218 + 16) = 0;
  *((_QWORD *)v218 + 9) = 0;
  *(_OWORD *)(v218 + 88) = 0u;
  *(_OWORD *)(v218 + 104) = 0u;
  *((_DWORD *)v218 + 20) = 1065353216;
  *(int64x2_t *)(v218 + 120) = vdupq_n_s64(1uLL);
  *((_QWORD *)v218 + 17) = 0;
  v219 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = v218 + 24;
  *((_QWORD *)this + 23) = v218;
  if (v219)
  {
    v220 = (unint64_t *)&v219->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = *((_QWORD *)this + 16);
  v223 = *((_QWORD *)this + 8);
  v224 = (char *)operator new(0x90uLL);
  *((_QWORD *)v224 + 1) = 0;
  *((_QWORD *)v224 + 2) = 0;
  *(_QWORD *)v224 = &off_1E42DE6F8;
  *((_QWORD *)v224 + 3) = &off_1E42B59B0;
  *((_QWORD *)v224 + 5) = "PuckCircle";
  *((_QWORD *)v224 + 6) = v222;
  *((_QWORD *)v224 + 7) = v223;
  *((_DWORD *)v224 + 16) = 0;
  *((_QWORD *)v224 + 9) = 0;
  *(_OWORD *)(v224 + 88) = 0u;
  *(_OWORD *)(v224 + 104) = 0u;
  *((_DWORD *)v224 + 20) = 1065353216;
  *(int64x2_t *)(v224 + 120) = vdupq_n_s64(1uLL);
  *((_QWORD *)v224 + 17) = 0;
  v225 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 24) = v224 + 24;
  *((_QWORD *)this + 25) = v224;
  if (v225)
  {
    v226 = (unint64_t *)&v225->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v245);
  v228 = *(_OWORD *)v245;
  *(_OWORD *)v245 = 0uLL;
  v229 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_OWORD *)this + 15) = v228;
  if (v229)
  {
    v230 = (unint64_t *)&v229->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = *(std::__shared_weak_count **)&v245[8];
  if (*(_QWORD *)&v245[8])
  {
    v233 = (unint64_t *)(*(_QWORD *)&v245[8] + 8);
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }

  return this;
}

void sub_19FCD43AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v22 + 128);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v22 + 112);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v22 + 16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v22);

  _Unwind_Resume(a1);
}

void sub_19FCD4488()
{
  JUMPOUT(0x19FCD4450);
}

void sub_19FCD4490()
{
  JUMPOUT(0x19FCD4458);
}

void sub_19FCD4498()
{
  JUMPOUT(0x19FCD4460);
}

void sub_19FCD44A0()
{
  JUMPOUT(0x19FCD4468);
}

void sub_19FCD44A8()
{
  uint64_t v0;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v0 - 128);
  JUMPOUT(0x19FCD4470);
}

void sub_19FCD44B8()
{
  JUMPOUT(0x19FCD4470);
}

void sub_19FCD44C0()
{
  JUMPOUT(0x19FCD4478);
}

void sub_19FCD44C8()
{
  uint64_t v0;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v0 - 144);
  JUMPOUT(0x19FCD4478);
}

void std::__shared_ptr_emplace<ggl::RenderItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RenderItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

char *md::LabelCollider::addCollidableItem(char *this, float32x2_t *a2)
{
  uint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  __int32 v15;
  uint64_t v16;
  __int32 v17;
  void **v19;
  __int32 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v25;
  unint64_t v26;
  __int32 v27;

  v3 = (uint64_t)this;
  v4.i32[0] = a2[1].i32[0];
  if (a2[3].f32[0] == 1.0)
  {
    v4.i32[1] = a2[1].i32[1];
  }
  else
  {
    v5.f32[0] = -a2[3].f32[1];
    v5.i32[1] = a2[3].i32[0];
    v4 = vadd_f32(vabs_f32(vmul_n_f32(v5, a2[1].f32[1])), vabs_f32(vmul_n_f32(a2[3], v4.f32[0])));
  }
  v6 = *((float *)this + 8);
  v7 = a2[2];
  v8 = vadd_f32(v7, v4);
  v9 = *(float32x2_t *)(this + 36);
  v10 = vmul_n_f32(vsub_f32(v7, vadd_f32(v4, v9)), v6);
  v11 = vcvt_s32_f32(vmul_n_f32(vsub_f32(v8, v9), v6));
  v12 = vmax_s32(vcvt_s32_f32(v10), 0);
  v13 = vmin_s32(vadd_s32(*(int32x2_t *)(this + 44), (int32x2_t)-1), v11);
  v14 = vcgt_s32(v12, v13);
  if ((vorr_s8((int8x8_t)v14, (int8x8_t)vdup_lane_s32(v14, 1)).u8[0] & 1) == 0)
  {
    a2[5].i32[0] = 0;
    v15 = v12.i32[1];
    v27 = v13.i32[1];
    v16 = *((_QWORD *)this + 7) + 24 * (v12.i32[0] + *((_DWORD *)this + 11) * v12.i32[1]);
    v17 = v13.i32[0] - v12.i32[0] + 1;
    while (1)
    {
      v19 = (void **)(v16 + 16);
      v20 = v17;
      do
      {
        v21 = (unint64_t)*(v19 - 2);
        v22 = (unint64_t)*(v19 - 1);
        v23 = (2 * v21) | 1;
        if (v21 < v22 || v22 >= v23)
          goto LABEL_13;
        if (v23 <= 0x14)
          v25 = 20;
        else
          v25 = (2 * v21) | 1;
        v26 = (1 << -__clz(v25 - 1));
        this = (char *)malloc_type_realloc(*v19, 8 * v26, 0x2004093837F09uLL);
        if (this)
        {
          *(v19 - 1) = (void *)v26;
          *v19 = this;
          v21 = (unint64_t)*(v19 - 2);
LABEL_13:
          *((_QWORD *)*v19 + v21) = a2;
          *(v19 - 2) = (void *)(v21 + 1);
        }
        v19 += 3;
        --v20;
      }
      while (v20);
      v16 += 24 * *(int *)(v3 + 44);
      if (v15++ == v27)
      {
        ++*(_DWORD *)(v3 + 8);
        return this;
      }
    }
  }
  return this;
}

uint64_t md::LabelCollider::getGridItems(uint64_t a1, int *a2, _DWORD *a3, unint64_t *a4)
{
  int v5;
  int v6;
  int v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _DWORD *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;

  *a4 = 0;
  ++*(_DWORD *)(a1 + 88);
  v5 = a2[1];
  v6 = a2[3];
  if (v5 > v6 || (v8 = a2[2], *a2 > v8))
  {
    v9 = (unint64_t *)a4[2];
    v10 = (uint64_t)v9;
    goto LABEL_4;
  }
  v15 = *(_DWORD *)(a1 + 44);
  v16 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * (*a2 + v15 * v5));
  do
  {
    v30 = v5;
    v17 = *a2;
    v29 = v16;
    if (*a2 <= v8)
    {
      while (!*v16)
      {
LABEL_11:
        v16 += 3;
        if (v17++ >= v8)
        {
          v15 = *(_DWORD *)(a1 + 44);
          v6 = a2[3];
          goto LABEL_7;
        }
      }
      v19 = v16[2];
      v20 = 8 * *v16;
      while (1)
      {
        v22 = *(_DWORD **)v19;
        v23 = *(_DWORD *)(a1 + 88);
        if (*(_DWORD *)(*(_QWORD *)v19 + 40) != v23
          && (a3[9] & v22[8]) != 0
          && (a3[12] & v22[11]) == 0
          && (a3[11] & v22[12]) == 0)
        {
          v22[10] = v23;
          v24 = *a4;
          v25 = a4[1];
          if (*a4 < v25)
          {
            v21 = (void *)a4[2];
          }
          else
          {
            v26 = (2 * v24) | 1;
            v21 = (void *)a4[2];
            if (v25 < v26)
            {
              v27 = 20;
              if (v26 > 0x14)
                v27 = v26;
              v28 = (1 << -__clz(v27 - 1));
              v21 = malloc_type_realloc(v21, 8 * v28, 0x2004093837F09uLL);
              if (!v21)
                goto LABEL_17;
              a4[1] = v28;
              a4[2] = (unint64_t)v21;
              v24 = *a4;
            }
          }
          *((_QWORD *)v21 + v24) = v22;
          *a4 = v24 + 1;
        }
LABEL_17:
        v19 += 8;
        v20 -= 8;
        if (!v20)
        {
          v8 = a2[2];
          goto LABEL_11;
        }
      }
    }
LABEL_7:
    v16 = &v29[3 * v15];
    v5 = v30 + 1;
  }
  while (v30 < v6);
  v10 = a4[2];
  v9 = (unint64_t *)(v10 + 8 * *a4);
  if (*a4)
  {
    v11 = 126 - 2 * __clz(*a4);
    return std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**,false>(v10, v9, v11, 1);
  }
LABEL_4:
  v11 = 0;
  return std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**,false>(v10, v9, v11, 1);
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;

  v4 = *a2;
  v5 = *result;
  v6 = *(unsigned __int8 *)(*a2 + 52);
  v7 = *(unsigned __int8 *)(*result + 52);
  v8 = v6 < v7;
  if (v6 == v7)
    v8 = *a2 < *result;
  v9 = *a3;
  v10 = *(unsigned __int8 *)(*a3 + 52);
  v11 = v10 == v6;
  v12 = v10 < v6;
  if (v11)
    v12 = *a3 < v4;
  if (v8)
  {
    if (v12)
    {
      *result = v9;
LABEL_17:
      *a3 = v5;
      v4 = v5;
      goto LABEL_19;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    v17 = *(unsigned __int8 *)(*a3 + 52);
    v11 = v17 == v7;
    v18 = v17 < v7;
    if (v11)
      v18 = *a3 < v5;
    if (v18)
    {
      *a2 = v4;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    *a2 = v9;
    *a3 = v4;
    v13 = *result;
    v14 = *(unsigned __int8 *)(*a2 + 52);
    v15 = *(unsigned __int8 *)(*result + 52);
    v11 = v14 == v15;
    v16 = v14 < v15;
    if (v11)
      v16 = *a2 < *result;
    if (v16)
    {
      *result = *a2;
      *a2 = v13;
      v4 = *a3;
    }
  }
  else
  {
    v4 = *a3;
  }
LABEL_19:
  v19 = *(unsigned __int8 *)(*a4 + 52);
  v20 = *(unsigned __int8 *)(v4 + 52);
  v11 = v19 == v20;
  v21 = v19 < v20;
  if (v11)
    v21 = *a4 < v4;
  if (v21)
  {
    *a3 = *a4;
    *a4 = v4;
    v22 = *a2;
    v23 = *(unsigned __int8 *)(*a3 + 52);
    v24 = *(unsigned __int8 *)(*a2 + 52);
    v11 = v23 == v24;
    v25 = v23 < v24;
    if (v11)
      v25 = *a3 < *a2;
    if (v25)
    {
      *a2 = *a3;
      *a3 = v22;
      v26 = *result;
      v27 = *(unsigned __int8 *)(*a2 + 52);
      v28 = *(unsigned __int8 *)(*result + 52);
      v11 = v27 == v28;
      v29 = v27 < v28;
      if (v11)
        v29 = *a2 < *result;
      if (v29)
      {
        *result = *a2;
        *a2 = v26;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t *v30;
  unint64_t *v31;
  _BOOL4 v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _BOOL4 v45;
  unint64_t v46;
  unsigned int v47;
  _BOOL4 v48;
  unint64_t v49;
  unsigned int v50;
  _BOOL4 v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _BOOL4 v56;
  BOOL v57;
  unint64_t *v58;
  int v59;
  uint64_t i;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  BOOL v71;
  unint64_t v72;
  unsigned int v73;
  _BOOL4 v74;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(unsigned __int8 *)(v6 + 52);
      v9 = *(unsigned __int8 *)(*a1 + 52);
      v10 = v8 == v9;
      v11 = v8 < v9;
      if (v10)
        v11 = v6 < *a1;
      if (v11)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v12 = *a1;
      v13 = a1[1];
      v14 = *(unsigned __int8 *)(v13 + 52);
      v15 = *(unsigned __int8 *)(*a1 + 52);
      v16 = v14 < v15;
      if (v14 == v15)
        v16 = v13 < *a1;
      v17 = *(a2 - 1);
      v18 = *(unsigned __int8 *)(v17 + 52);
      v10 = v18 == v14;
      v19 = v18 < v14;
      if (v10)
        v19 = v17 < v13;
      if (v16)
      {
        if (v19)
        {
          *a1 = v17;
          *(a2 - 1) = v12;
        }
        else
        {
          *a1 = v13;
          a1[1] = v12;
          v72 = *(a2 - 1);
          v73 = *(unsigned __int8 *)(v72 + 52);
          v10 = v73 == v15;
          v74 = v73 < v15;
          if (v10)
            v74 = v72 < v12;
          if (v74)
          {
            a1[1] = v72;
            *(a2 - 1) = v12;
          }
        }
      }
      else if (v19)
      {
        a1[1] = v17;
        *(a2 - 1) = v13;
        v53 = *a1;
        v52 = a1[1];
        v54 = *(unsigned __int8 *)(v52 + 52);
        v55 = *(unsigned __int8 *)(*a1 + 52);
        v10 = v54 == v55;
        v56 = v54 < v55;
        if (v10)
          v56 = v52 < *a1;
        if (v56)
        {
          *a1 = v52;
          a1[1] = v53;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v33 = a1 + 1;
      v34 = a1 + 2;
      v35 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v36 = *(a2 - 1);
      v37 = a1[3];
      v38 = *(unsigned __int8 *)(v36 + 52);
      v39 = *(unsigned __int8 *)(v37 + 52);
      v10 = v38 == v39;
      v40 = v38 < v39;
      if (v10)
        v40 = v36 < v37;
      if (v40)
      {
        *v35 = v36;
        *(a2 - 1) = v37;
        v41 = *v35;
        v42 = *v34;
        v43 = *(unsigned __int8 *)(*v35 + 52);
        v44 = *(unsigned __int8 *)(*v34 + 52);
        v10 = v43 == v44;
        v45 = v43 < v44;
        if (v10)
          v45 = *v35 < *v34;
        if (v45)
        {
          *v34 = v41;
          *v35 = v42;
          v46 = *v33;
          v47 = *(unsigned __int8 *)(*v33 + 52);
          v10 = v43 == v47;
          v48 = v43 < v47;
          if (v10)
            v48 = v41 < *v33;
          if (v48)
          {
            a1[1] = v41;
            a1[2] = v46;
            v49 = *a1;
            v50 = *(unsigned __int8 *)(*a1 + 52);
            v10 = v43 == v50;
            v51 = v43 < v50;
            if (v10)
              v51 = v41 < *a1;
            if (v51)
            {
              *a1 = v41;
              a1[1] = v49;
            }
          }
        }
      }
      return 1;
    default:
      v21 = a1 + 2;
      v20 = a1[2];
      v22 = a1[1];
      v23 = *a1;
      v24 = *(unsigned __int8 *)(v22 + 52);
      v25 = *(unsigned __int8 *)(*a1 + 52);
      v26 = v24 < v25;
      if (v24 == v25)
        v26 = v22 < *a1;
      v27 = *(unsigned __int8 *)(v20 + 52);
      v28 = v20 < v22;
      v10 = v27 == v24;
      v29 = v27 < v24;
      if (!v10)
        v28 = v29;
      if (v26)
      {
        v30 = a1;
        v31 = a1 + 2;
        if (!v28)
        {
          *a1 = v22;
          a1[1] = v23;
          v10 = v27 == v25;
          v32 = v27 < v25;
          if (v10)
            v32 = v20 < v23;
          v30 = a1 + 1;
          v31 = a1 + 2;
          if (!v32)
            goto LABEL_47;
        }
LABEL_46:
        *v30 = v20;
        *v31 = v23;
        goto LABEL_47;
      }
      if (v28)
      {
        a1[1] = v20;
        *v21 = v22;
        v10 = v27 == v25;
        v57 = v27 < v25;
        if (v10)
          v57 = v20 < v23;
        v30 = a1;
        v31 = a1 + 1;
        if (v57)
          goto LABEL_46;
      }
LABEL_47:
      v58 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v59 = 0;
      for (i = 24; ; i += 8)
      {
        v62 = *v58;
        v63 = *v21;
        v64 = *(unsigned __int8 *)(*v58 + 52);
        v65 = *(unsigned __int8 *)(v63 + 52);
        v10 = v64 == v65;
        v66 = v64 < v65;
        if (v10)
          v66 = *v58 < v63;
        if (v66)
        {
          v67 = i;
          do
          {
            *(unint64_t *)((char *)a1 + v67) = v63;
            v68 = v67 - 8;
            if (v67 == 8)
            {
              v61 = a1;
              goto LABEL_50;
            }
            v63 = *(unint64_t *)((char *)a1 + v67 - 16);
            v69 = *(unsigned __int8 *)(v63 + 52);
            v70 = v62 < v63;
            v10 = v64 == v69;
            v71 = v64 < v69;
            if (!v10)
              v70 = v71;
            v67 = v68;
          }
          while (v70);
          v61 = (unint64_t *)((char *)a1 + v68);
LABEL_50:
          *v61 = v62;
          if (++v59 == 8)
            break;
        }
        v21 = v58++;
        if (v58 == a2)
          return 1;
      }
      return v58 + 1 == a2;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v6;
  uint64_t *v7;
  int8x16_t *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int8x16_t *v18;
  char v19;
  int8x16_t *v20;
  uint64_t *j;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  char v31;
  int8x16_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int8x16_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  uint64_t *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int8x16_t *v63;
  int8x16_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *i64;
  int8x16_t *v84;
  int64_t v86;

  v6 = (int8x16_t *)result;
LABEL_2:
  v7 = &a2[-1].i64[1];
  v82 = &a2[-2].i64[1];
  i64 = a2[-1].i64;
  i = v6;
  v84 = a2;
  while (2)
  {
    v6 = i;
    v9 = (char *)a2 - (char *)i;
    v10 = ((char *)a2 - (char *)i) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *v7;
        if (*v7 != v6->i64[0])
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
          if ((_DWORD)result)
          {
            v37 = v6->i64[0];
            v6->i64[0] = *v7;
            *v7 = v37;
          }
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(v6->i64, &v6->i64[1], v7);
      case 4:
        v38 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(v6->i64, &v6->i64[1], v6[1].i64);
        result = *v7;
        if (*v7 != v6[1].i64[0])
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
          if ((_DWORD)result)
          {
            v39 = v38->i64[0];
            v38->i64[0] = *v7;
            *v7 = v39;
            result = v38->i64[0];
            if (v38->i64[0] != v6->i64[1])
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
              if ((_DWORD)result)
              {
                v40 = v6->i64[1];
                result = v6[1].i64[0];
                v41 = v6->i64[0];
                v6->i64[1] = result;
                v6[1].i64[0] = v40;
                if (result != v41)
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
                  if ((_DWORD)result)
                    *v6 = vextq_s8(*v6, *v6, 8uLL);
                }
              }
            }
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,0>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v7);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v6 == a2)
              return result;
            v47 = (unint64_t)(v10 - 2) >> 1;
            v86 = v47;
            while (1)
            {
              v49 = v47;
              if (v86 >= v47)
              {
                v50 = (2 * v47) | 1;
                v51 = &v6->i64[v50];
                if (2 * v47 + 2 < v10
                  && *v51 != v51[1]
                  && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v51 + 80))(*v51))
                {
                  ++v51;
                  v50 = 2 * v49 + 2;
                }
                result = *v51;
                if (*v51 == v6->i64[v49])
                {
                  v52 = *v51;
                  goto LABEL_111;
                }
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
                if ((result & 1) == 0)
                {
                  v52 = v6->i64[v49];
                  result = *v51;
LABEL_111:
                  v6->i64[v49] = result;
                  if (v86 >= v50)
                  {
                    while (1)
                    {
                      v54 = 2 * v50;
                      v50 = (2 * v50) | 1;
                      v48 = &v6->i64[v50];
                      v55 = v54 + 2;
                      if (v54 + 2 < v10
                        && *v48 != v48[1]
                        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v48 + 80))(*v48))
                      {
                        ++v48;
                        v50 = v55;
                      }
                      result = *v48;
                      v53 = v52;
                      if (*v48 != v52)
                      {
                        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, v52);
                        if ((result & 1) != 0)
                          break;
                        v53 = *v48;
                      }
                      *v51 = v53;
                      v51 = v48;
                      if (v86 < v50)
                        goto LABEL_100;
                    }
                  }
                  v48 = v51;
LABEL_100:
                  *v48 = v52;
                }
              }
              v47 = v49 - 1;
              if (!v49)
              {
                v62 = (unint64_t)v9 >> 3;
                v63 = v84;
                do
                {
                  v65 = v63;
                  v66 = 0;
                  v67 = v6->i64[0];
                  v68 = (uint64_t *)v6;
                  do
                  {
                    v69 = v68;
                    v68 += v66 + 1;
                    v70 = 2 * v66;
                    v66 = (2 * v66) | 1;
                    v71 = v70 + 2;
                    if (v70 + 2 < v62)
                    {
                      result = *v68;
                      if (*v68 != v68[1])
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
                        if ((_DWORD)result)
                        {
                          ++v68;
                          v66 = v71;
                        }
                      }
                    }
                    *v69 = *v68;
                  }
                  while (v66 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
                  v72 = &v65[-1].i64[1];
                  if (v68 == v72)
                  {
                    v63 = (int8x16_t *)v72;
                    *v68 = v67;
                  }
                  else
                  {
                    *v68 = *v72;
                    v63 = (int8x16_t *)v72;
                    *v72 = v67;
                    v73 = (char *)v68 - (char *)v6 + 8;
                    if (v73 >= 9)
                    {
                      v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                      v75 = &v6->i64[v74];
                      result = *v75;
                      if (*v75 != *v68)
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
                        if ((_DWORD)result)
                        {
                          v76 = *v68;
                          do
                          {
                            v77 = v75;
                            *v68 = *v75;
                            if (!v74)
                              break;
                            v74 = (v74 - 1) >> 1;
                            v75 = &v6->i64[v74];
                            result = *v75;
                            if (*v75 == v76)
                              break;
                            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, v76);
                            v68 = v77;
                          }
                          while ((result & 1) != 0);
                          *v77 = v76;
                        }
                      }
                    }
                  }
                }
                while (v62-- > 2);
                return result;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v6->i64[(unint64_t)v10 >> 1];
          if ((unint64_t)v9 < 0x401)
          {
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(v12, v6->i64, v7);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(v6->i64, v12, v7);
            v13 = v11;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(&v6->i64[1], &v6->i64[v13 - 1], i64);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(v6[1].i64, &v6->i64[v13 + 1], v82);
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(&v6->i64[v13 - 1], v12, &v6->i64[v13 + 1]);
            v14 = v6->i64[0];
            v6->i64[0] = v6->i64[v13];
            v6->i64[v13] = v14;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v15 = v6[-1].i64[1];
            if (v15 != v6->i64[0])
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v6[-1].i64[1]);
              if ((result & 1) != 0)
                goto LABEL_12;
              v15 = v6->i64[0];
            }
            if (v15 == *v7
              || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15), !(_DWORD)result))
            {
              for (i = (int8x16_t *)&v6->u64[1]; i < a2; i = (int8x16_t *)((char *)i + 8))
              {
                if (v15 != i->i64[0])
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
                  if ((result & 1) != 0)
                    break;
                }
              }
            }
            else
            {
              for (i = (int8x16_t *)&v6->u64[1]; ; i = (int8x16_t *)((char *)i + 8))
              {
                if (v15 != i->i64[0])
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
                  if ((result & 1) != 0)
                    break;
                }
              }
            }
            v32 = a2;
            if (i < a2)
            {
              v33 = v7;
              do
              {
                v32 = (int8x16_t *)v33;
                if (v15 == *v33)
                  break;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
                v33 = &v32[-1].i64[1];
              }
              while ((result & 1) != 0);
            }
            while (i < v32)
            {
              v34 = i->i64[0];
              i->i64[0] = v32->i64[0];
              i = (int8x16_t *)((char *)i + 8);
              v32->i64[0] = v34;
              while (1)
              {
                if (v15 != i->i64[0])
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
                  if ((result & 1) != 0)
                    break;
                }
                i = (int8x16_t *)((char *)i + 8);
              }
              v35 = (int8x16_t *)((char *)v32 - 8);
              do
              {
                v32 = v35;
                if (v15 == v35->i64[0])
                  break;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
                v35 = (int8x16_t *)((char *)v32 - 8);
              }
              while ((result & 1) != 0);
            }
            v36 = &i[-1].i64[1];
            if (&i[-1].u64[1] != (unint64_t *)v6)
              v6->i64[0] = *v36;
            a4 = 0;
            *v36 = v15;
            continue;
          }
LABEL_12:
          v16 = &v6->i64[1];
          v17 = v6->i64[0];
          do
          {
            v18 = (int8x16_t *)v16;
            if (*v16 == v17)
              break;
            v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v16 + 80))(*v16, v17);
            v16 = &v18->i64[1];
          }
          while ((v19 & 1) != 0);
          v20 = (int8x16_t *)((char *)v18 - 8);
          j = v7;
          if (&v18[-1].u64[1] == (unint64_t *)v6)
          {
            j = (uint64_t *)v84;
            if (v18 < v84)
            {
              for (j = v7; ; --j)
              {
                if (*j == v17)
                {
                  if (v18 >= (int8x16_t *)j)
                    break;
                }
                else
                {
                  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*j + 80))(*j, v17);
                  if (v18 >= (int8x16_t *)j || (v31 & 1) != 0)
                    break;
                }
              }
            }
          }
          else
          {
            while (*j == v17
                 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*j + 80))(*j, v17) & 1) == 0)
              --j;
          }
          if (v18 < (int8x16_t *)j)
          {
            v22 = (uint64_t *)v18;
            v23 = j;
            do
            {
              v24 = *v22;
              *v22 = *v23;
              *v23 = v24;
              v25 = v22 + 1;
              do
              {
                v22 = v25;
                if (*v25 == v17)
                  break;
                v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v25 + 80))(*v25, v17);
                v25 = v22 + 1;
              }
              while ((v26 & 1) != 0);
              v20 = (int8x16_t *)(v22 - 1);
              do
              {
                do
                {
                  v28 = *--v23;
                  v27 = v28;
                }
                while (v28 == v17);
              }
              while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 80))(v27, v17) & 1) == 0);
            }
            while (v22 < v23);
          }
          if (v20 != v6)
            v6->i64[0] = v20->i64[0];
          v20->i64[0] = v17;
          v29 = v18 >= (int8x16_t *)j;
          a2 = v84;
          if (!v29)
          {
LABEL_36:
            result = std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,false>(v6, v20, a3, a4 & 1);
            a4 = 0;
            i = (int8x16_t *)&v20->u64[1];
            continue;
          }
          v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(v6, v20);
          i = (int8x16_t *)&v20->u64[1];
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>((int8x16_t *)&v20->u64[1], v84);
          if (!(_DWORD)result)
          {
            if (v30)
              continue;
            goto LABEL_36;
          }
          a2 = v20;
          if (v30)
            return result;
          goto LABEL_2;
        }
        v42 = (int8x16_t *)&v6->u64[1];
        v44 = v6 == a2 || v42 == a2;
        if ((a4 & 1) != 0)
        {
          if (v44)
            return result;
          v45 = 0;
          v46 = (uint64_t *)v6;
          while (1)
          {
            v57 = *v46;
            result = v46[1];
            v46 = (uint64_t *)v42;
            if (result != v57)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
              if ((_DWORD)result)
              {
                v58 = *v46;
                v59 = v45;
                do
                {
                  v60 = v59;
                  v61 = (uint64_t *)((char *)v6->i64 + v59);
                  v61[1] = *v61;
                  if (!v60)
                  {
                    v56 = (uint64_t *)v6;
                    goto LABEL_123;
                  }
                  if (v58 == *(v61 - 1))
                    break;
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 80))(v58);
                  v59 = v60 - 8;
                }
                while ((result & 1) != 0);
                v56 = (uint64_t *)((char *)v6->i64 + v60);
LABEL_123:
                *v56 = v58;
              }
            }
            v42 = (int8x16_t *)(v46 + 1);
            v45 += 8;
            if (v46 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!v44)
        {
          do
          {
            v78 = (uint64_t *)v6;
            v6 = v42;
            result = v78[1];
            if (result != *v78)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
              if ((_DWORD)result)
              {
                v79 = v6->i64[0];
                do
                {
                  v80 = v78;
                  v78[1] = *v78;
                  v81 = *--v78;
                  if (v79 == v81)
                    break;
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 80))(v79);
                }
                while ((result & 1) != 0);
                *v80 = v79;
              }
            }
            v42 = (int8x16_t *)&v6->u64[1];
          }
          while (&v6->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  if (*a2 == *a1 || (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6), v6 = *v4, (v7 & 1) == 0))
  {
    result = *a3;
    if (*a3 != v6)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, v6);
      if ((_DWORD)result)
      {
        v9 = *v4;
        *v4 = *a3;
        *a3 = v9;
        result = *v4;
        if (*v4 != *v5)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
          if ((result & 1) != 0)
            goto LABEL_14;
        }
      }
    }
  }
  else
  {
    if (*a3 != v6)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 80))(*a3, *v4);
      if ((result & 1) != 0)
      {
        v4 = a3;
LABEL_14:
        v11 = *v5;
        *v5 = *v4;
        *v4 = v11;
        return result;
      }
      v6 = *v4;
    }
    v10 = *v5;
    *v5 = v6;
    *v4 = v10;
    result = *a3;
    if (*a3 != v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
      v5 = v4;
      v4 = a3;
      if ((_DWORD)result)
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1, a2, a3);
  if (*a4 != *a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a4 + 80))(*a4))
    {
      v10 = *a3;
      *a3 = *a4;
      *a4 = v10;
      if (*a3 != *a2)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 80))(*a3))
        {
          v11 = *a2;
          *a2 = *a3;
          *a3 = v11;
          if (*a2 != *a1)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 80))(*a2))
            {
              v12 = *a1;
              *a1 = *a2;
              *a2 = v12;
            }
          }
        }
      }
    }
  }
  result = *a5;
  if (*a5 != *a4)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
    if ((_DWORD)result)
    {
      v14 = *a4;
      *a4 = *a5;
      *a5 = v14;
      result = *a4;
      if (*a4 != *a3)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
        if ((_DWORD)result)
        {
          v15 = *a3;
          *a3 = *a4;
          *a4 = v15;
          result = *a3;
          if (*a3 != *a2)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
            if ((_DWORD)result)
            {
              v16 = *a2;
              *a2 = *a3;
              *a3 = v16;
              result = *a2;
              if (*a2 != *a1)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
                if ((_DWORD)result)
                {
                  v17 = *a1;
                  *a1 = *a2;
                  *a2 = v17;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      if (v6 != a1->i64[0])
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6))
        {
          v7 = a1->i64[0];
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v7;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v18 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1->i64, &a1->i64[1], a1[1].i64);
      v19 = a2[-1].i64[1];
      if (v19 != a1[1].i64[0])
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 80))(v19))
        {
          v20 = v18->i64[0];
          v18->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v20;
          if (v18->i64[0] != a1->i64[1])
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18->i64[0] + 80))(v18->i64[0]))
            {
              v22 = a1->i64[1];
              v21 = a1[1].i64[0];
              v23 = a1->i64[0];
              a1->i64[1] = v21;
              a1[1].i64[0] = v22;
              if (v21 != v23)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 80))(v21))
                  *a1 = vextq_s8(*a1, *a1, 8uLL);
              }
            }
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,0>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v8 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v10 = 0;
      v11 = 16;
      break;
  }
  while (1)
  {
    if (*v9 != v8->i64[0] && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 80))(*v9))
    {
      v13 = *v9;
      v14 = v11;
      do
      {
        v15 = v14;
        v16 = (uint64_t *)((char *)a1->i64 + v14);
        v16[1] = *v16;
        if (!v15)
        {
          v12 = (uint64_t *)a1;
          goto LABEL_8;
        }
        if (v13 == *(v16 - 1))
          break;
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 80))(v13);
        v14 = v15 - 8;
      }
      while ((v17 & 1) != 0);
      v12 = (uint64_t *)((char *)a1->i64 + v15);
LABEL_8:
      *v12 = v13;
      if (++v10 == 8)
        return v9 + 1 == (uint64_t *)a2;
    }
    v8 = (int8x16_t *)v9;
    v11 += 8;
    if (++v9 == (uint64_t *)a2)
      return 1;
  }
}

void md::LabelSettingsStyleCache::~LabelSettingsStyleCache(md::LabelSettingsStyleCache *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40F5825EE8);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C4033FC2DF1);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x1A1AF4E00](v4, 0x1000C4000313F17);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C40F5825EE8);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C4090D0E795);
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    MEMORY[0x1A1AF4E00](v9, 0x1000C40005DEF19);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    MEMORY[0x1A1AF4E00](v10, 0x1000C40D77C405DLL);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void std::__shared_ptr_emplace<md::LabelStyleContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E4289FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelStyleContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E4289FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelStyleCache::~LabelStyleCache(md::LabelStyleCache *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  md::LabelSettingsStyleCache *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (_QWORD *)*((_QWORD *)this + 47);
  while (v11)
  {
    v22 = v11;
    v11 = (_QWORD *)*v11;
    v23 = (std::__shared_weak_count *)v22[5];
    if (v23)
      std::__shared_weak_count::__release_weak(v23);
    v24 = (std::__shared_weak_count *)v22[3];
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 48) + 40))(*((_QWORD *)this + 48), v22, 64);
  }
  v12 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v12)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v12, 8 * *((_QWORD *)this + 45));
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)this + 40);
  v13 = (_QWORD *)*((_QWORD *)this + 33);
  while (v13)
  {
    v27 = v13;
    v13 = (_QWORD *)*v13;
    v28 = (std::__shared_weak_count *)v27[5];
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    v29 = (std::__shared_weak_count *)v27[3];
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34), v27, 64);
  }
  v14 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v14)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32), v14, 8 * *((_QWORD *)this + 31));
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)this + 26);
  v15 = (md::LabelSettingsStyleCache *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v15)
  {
    md::LabelSettingsStyleCache::~LabelSettingsStyleCache(v15);
    MEMORY[0x1A1AF4E00]();
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v16)
    goto LABEL_28;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v19)
      goto LABEL_50;
  }
  else
  {
LABEL_28:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v19)
      goto LABEL_50;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_50:
  std::mutex::~mutex((std::mutex *)this + 1);
  std::mutex::~mutex((std::mutex *)this);
}

void std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E42CC380;
  result[2] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E42CC380;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, md::LabelStyle **a2)
{
  md::LabelStyle::setContentScale(*a2, *(float *)(a1 + 8));
}

uint64_t *md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t *result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (*(_QWORD *)(a1 + 72))
  {
    v2 = *(_QWORD **)(a1 + 56);
    while (v2)
    {
      v6 = v2;
      v2 = (_QWORD *)*v2;
      v7 = (std::__shared_weak_count *)v6[5];
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      v8 = (std::__shared_weak_count *)v6[3];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), v6, 64);
    }
    *(_QWORD *)(a1 + 56) = 0;
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 72) = 0;
  }
  result = std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)a1);
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  return result;
}

void std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1)
{
  _BYTE *result;
  char v3;

  result = operator new(0x10uLL);
  v3 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E42CC410;
  result[8] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = &off_1E42CC410;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *a2;
  if (*(unsigned __int8 *)(*a2 + 93) != v2)
  {
    *(_BYTE *)(v3 + 93) = v2;
    *(_BYTE *)(v3 + 136) = -1;
    *(_BYTE *)(v3 + 125) = 0;
    v4 = *(std::__shared_weak_count **)(v3 + 416);
    *(_QWORD *)(v3 + 408) = 0;
    *(_QWORD *)(v3 + 416) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = *(std::__shared_weak_count **)(v3 + 432);
    *(_QWORD *)(v3 + 424) = 0;
    *(_QWORD *)(v3 + 432) = 0;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CC4A0;
  return result;
}

void std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CC4A0;
}

void std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *a2;
  v3 = *a2 + 408;
  *(_BYTE *)(v2 + 136) = -1;
  *(_BYTE *)(v2 + 125) = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 416);
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 416) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(std::__shared_weak_count **)(v2 + 432);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC458;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42CC458;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  md::LabelStyle::setVariantStyleType(*a2, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CC3C8;
  return result;
}

void std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CC3C8;
}

void std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *a2;
  v3 = *a2 + 408;
  *(_BYTE *)(v2 + 136) = -1;
  *(_BYTE *)(v2 + 125) = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 416);
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 416) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(std::__shared_weak_count **)(v2 + 432);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t *md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::purge(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  *(_DWORD *)(a1 + 104) = 0;
  v2 = *(uint64_t **)(a1 + 56);
  if (v2)
  {
    v3 = 0;
    do
    {
      while (!*((_BYTE *)v2 + 56))
      {
        v10 = v2[5];
        if (!v10 || *(_QWORD *)(v10 + 8) == -1)
          break;
        v2[6] = a1;
        v2 = (uint64_t *)*v2;
        ++v3;
        if (!v2)
          goto LABEL_20;
      }
      v4 = (uint64_t *)*v2;
      std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v12, (_QWORD *)(a1 + 32), v2);
      v5 = v12;
      v12 = 0;
      if (v5)
      {
        if (v14)
        {
          v6 = *(std::__shared_weak_count **)(v5 + 40);
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          v7 = *(std::__shared_weak_count **)(v5 + 24);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v13 + 40))(*v13, v5, 64);
      }
      v2 = v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
LABEL_20:
  *(_DWORD *)(a1 + 100) = v3;
  return std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)a1);
}

void md::LabelStyleCache::requestStyles(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  unsigned __int8 v26;
  uint64_t *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  uint64_t *v40;
  _QWORD *v41;
  unsigned __int8 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _OWORD *v61;
  unsigned __int8 v62;
  uint64_t *v63;
  _QWORD *v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[2];
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[2];
  unsigned __int8 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;

  std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve(a3, ((char *)a2[1] - (char *)*a2) >> 4);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  {
    v95 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v95, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v110 = mdm::Allocator::instance(void)::alloc;
  std::vector<BOOL,geo::StdAllocator<BOOL,mdm::Allocator>>::reserve((uint64_t)&v107, ((char *)a2[1] - (char *)*a2) >> 4);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v13 = *v8;
      v14 = (std::__shared_weak_count *)v8[1];
      *(_QWORD *)&v111 = *v8;
      *((_QWORD *)&v111 + 1) = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        *((_QWORD *)&v104 + 1) = v14;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      else
      {
        *((_QWORD *)&v104 + 1) = 0;
      }
      *(_QWORD *)&v104 = v13;
      v105[0] = 0;
      v105[1] = 0;
      v106 = 0;
      if (v13)
      {
        v18 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v105);
        v106 = v18;
        if (v14)
          goto LABEL_18;
      }
      else
      {
        v18 = 0;
        v106 = 0;
        if (v14)
        {
LABEL_18:
          v19 = (unint64_t *)&v14->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
          v18 = v106;
        }
      }
      v21 = v108;
      if (v108 == v109 << 6)
      {
        if ((uint64_t)(v108 + 1) < 0)
          abort();
        v22 = v109 << 7;
        if (v109 << 7 <= (v108 & 0xFFFFFFFFFFFFFFC0) + 64)
          v22 = (v108 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v108 <= 0x3FFFFFFFFFFFFFFELL)
          v23 = v22;
        else
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        std::vector<BOOL,geo::StdAllocator<BOOL,mdm::Allocator>>::reserve((uint64_t)&v107, v23);
        v21 = v108;
      }
      v108 = v21 + 1;
      v10 = v21 >> 6;
      v11 = 1 << v21;
      if (v18)
        v12 = *(_QWORD *)(v107 + 8 * v10) | v11;
      else
        v12 = *(_QWORD *)(v107 + 8 * v10) & ~v11;
      *(_QWORD *)(v107 + 8 * v10) = v12;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v104);
      v8 += 2;
    }
    while (v8 != v9);
  }
  v103 = 0uLL;
  std::mutex::lock((std::mutex *)a1);
  if (a2[1] == *a2)
  {
    std::mutex::unlock((std::mutex *)a1);
    goto LABEL_136;
  }
  v24 = 0;
  do
  {
    v26 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 3659));
    if ((v26 & 1) == 0)
    {
      if (((*(_QWORD *)(v107 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
      {
        v27 = &(*a2)[2 * v24];
        md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::find((uint64_t)&v104, a1 + 320, v27);
        if (LOBYTE(v105[0]))
        {
          v28 = v104;
          if (*((_QWORD *)&v104 + 1))
          {
            v29 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
          v103 = v28;
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
        else
        {
          v44 = operator new(0x1E8uLL);
          v45 = v44;
          v44[1] = 0;
          v44[2] = 0;
          *v44 = &off_1E42DAC90;
          v111 = *(_OWORD *)v27;
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
          if (*((_QWORD *)&v111 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          md::LabelStyle::LabelStyle((uint64_t)(v44 + 3), &v111, (_QWORD *)(a1 + 136), *(_BYTE *)(a1 + 156), *(_BYTE *)(a1 + 158), *(_QWORD *)(a1 + 161), *(_BYTE *)(a1 + 160), *(float *)(a1 + 152));
          if (v46)
          {
            v49 = (unint64_t *)&v46->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
          *(_QWORD *)&v103 = v45 + 3;
          *((_QWORD *)&v103 + 1) = v45;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::insert(a1 + 320, v27, &v103);
        }
        if (LOBYTE(v105[0]))
        {
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
          if (*((_QWORD *)&v104 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        v57 = *(_QWORD **)(a3 + 8);
        if ((unint64_t)v57 >= *(_QWORD *)(a3 + 16))
        {
          v61 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a3, &v103);
        }
        else
        {
          if (v57)
          {
            *v57 = v103;
            v58 = *((_QWORD *)&v103 + 1);
            v57[1] = *((_QWORD *)&v103 + 1);
            if (v58)
            {
              v59 = (unint64_t *)(v58 + 8);
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
          }
          v61 = v57 + 2;
        }
        *(_QWORD *)(a3 + 8) = v61;
        v62 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 3661));
        if ((v62 & 1) != 0)
        {
          v63 = *a2;
          v64 = *(_QWORD **)(*a4 + 8 * v24);
          md::LabelStyle::styleName((md::LabelStyle *)v100, (uint64_t *)v103);
          md::LabelStyleCache::logStyleAttributes(a1, (uint64_t)"StyleQuery", (uint64_t)&v63[2 * v24], v64, v100);
          if (SHIBYTE(v101) < 0)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102 + 40))(v102, v100[0], v101 & 0x7FFFFFFFFFFFFFFFLL);
        }
        goto LABEL_36;
      }
      v38 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 3660));
      if ((v38 & 1) == 0)
      {
        v39 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 3661));
        if ((v39 & 1) == 0)
          goto LABEL_58;
      }
      v40 = *a2;
      v41 = *(_QWORD **)(*a4 + 8 * v24);
      {
        v91 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v91, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v99 = mdm::Allocator::instance(void)::alloc;
      HIBYTE(v98) = 8;
      strcpy((char *)v97, "No Style");
      md::LabelStyleCache::logStyleAttributes(a1, (uint64_t)"StyleQuery FAIL", (uint64_t)&v40[2 * v24], v41, v97);
      if (SHIBYTE(v98) < 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v99 + 40))(v99, v97[0], v98 & 0x7FFFFFFFFFFFFFFFLL);
        v43 = *(_QWORD *)(a1 + 128);
        if (!v43)
          goto LABEL_92;
      }
      else
      {
LABEL_58:
        v43 = *(_QWORD *)(a1 + 128);
        if (!v43)
          goto LABEL_92;
      }
      v65 = atomic_load((unsigned __int8 *)(v43 + 3658));
      if ((v65 & 1) != 0)
      {
        v67 = *(_QWORD *)(a1 + 432);
        v66 = *(_QWORD *)(a1 + 440);
        *(_QWORD *)&v104 = v67;
        *((_QWORD *)&v104 + 1) = v66;
        if (v66)
        {
          v68 = (unint64_t *)(v66 + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        goto LABEL_96;
      }
LABEL_92:
      v66 = 0;
      v67 = 0;
      v104 = 0uLL;
LABEL_96:
      v70 = *(_QWORD **)(a3 + 8);
      v71 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v70 >= v71)
      {
        v73 = ((uint64_t)v70 - *(_QWORD *)a3) >> 4;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 60)
          abort();
        v75 = v71 - *(_QWORD *)a3;
        if (v75 >> 3 > v74)
          v74 = v75 >> 3;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
          v76 = 0xFFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          v77 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 24) + 16))(*(_QWORD *)(a3 + 24), 16 * v76, 8);
          v78 = (__int128 *)(v77 + 16 * v73);
          v79 = v77 + 16 * v76;
          if (v77)
          {
            *v78 = v104;
            v104 = 0uLL;
          }
        }
        else
        {
          v79 = 0;
          v78 = (__int128 *)(16 * v73);
        }
        v72 = v78 + 1;
        v80 = *(_QWORD **)a3;
        v81 = *(_QWORD **)(a3 + 8);
        if (v81 == *(_QWORD **)a3)
        {
          *(_QWORD *)a3 = v78;
          *(_QWORD *)(a3 + 8) = v72;
          v84 = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v79;
        }
        else
        {
          do
          {
            v82 = *((_OWORD *)v81 - 1);
            v81 -= 2;
            *--v78 = v82;
            *v81 = 0;
            v81[1] = 0;
          }
          while (v81 != v80);
          v81 = *(_QWORD **)a3;
          v83 = *(_QWORD **)(a3 + 8);
          *(_QWORD *)a3 = v78;
          *(_QWORD *)(a3 + 8) = v72;
          v84 = *(_QWORD *)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v79;
          while (v83 != v81)
          {
            v85 = (std::__shared_weak_count *)*(v83 - 1);
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v83 -= 2;
          }
        }
        if (v81)
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24), v81, v84 - (_QWORD)v81);
      }
      else
      {
        if (v70)
        {
          *v70 = v67;
          v70[1] = v66;
          v104 = 0uLL;
        }
        v72 = v70 + 2;
      }
      *(_QWORD *)(a3 + 8) = v72;
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      goto LABEL_36;
    }
    v34 = *(_QWORD **)(a3 + 8);
    if ((unint64_t)v34 >= *(_QWORD *)(a3 + 16))
    {
      v25 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a3, (__int128 *)(a1 + 432));
    }
    else
    {
      if (v34)
      {
        *v34 = *(_QWORD *)(a1 + 432);
        v35 = *(_QWORD *)(a1 + 440);
        v34[1] = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
      }
      v25 = v34 + 2;
    }
    *(_QWORD *)(a3 + 8) = v25;
LABEL_36:
    ++v24;
  }
  while (v24 < ((char *)a2[1] - (char *)*a2) >> 4);
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  std::mutex::unlock((std::mutex *)a1);
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_136:
  if (v107)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 40))(v110, v107, 8 * v109);
}

void sub_19FCD7200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v15 = *(_QWORD *)(v13 - 144);
  if (v15)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 - 120) + 40))(*(_QWORD *)(v13 - 120), v15, 8 * *(_QWORD *)(v13 - 128));
  _Unwind_Resume(a1);
}

void md::LabelStyleCache::logStyleAttributes(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  geo::read_write_lock *v21;
  const char *v22;
  geo::read_write_lock *v23;
  const char *v24;
  _BYTE *v25;
  gss::Allocator *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _BYTE v30[15];
  char v31;
  uint64_t v32;
  uint8_t v33[4];
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE buf[12];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitLabelStyleQueryLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelStyleQueryLog(void)::onceToken, &__block_literal_global_29791);
  v10 = (id)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a1 + 128);
    if (a4)
    {
      md::LabelFeature::debugName((md::LabelFeature *)&v35, a4);
      if (v36 >= 0)
        v12 = (const char *)&v35;
      else
        v12 = (const char *)v35;
      if (*((char *)a5 + 23) < 0)
        a5 = (uint64_t *)*a5;
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = v11;
      v39 = 2080;
      v40 = a2;
      v41 = 2080;
      v42 = v12;
      v43 = 2080;
      v44 = a5;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "MDL:[mgr=%p] %s feature=%s style=%s", buf, 0x2Au);
      if (SHIBYTE(v36) < 0)
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 40))(v37, v35, v36 & 0x7FFFFFFFFFFFFFFFLL);
    }
    else
    {
      if (*((char *)a5 + 23) < 0)
        a5 = (uint64_t *)*a5;
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = v11;
      v39 = 2080;
      v40 = a2;
      v41 = 2080;
      v42 = "?";
      v43 = 2080;
      v44 = a5;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "MDL:[mgr=%p] %s feature=%s style=%s", buf, 0x2Au);
    }
  }

  if (GEOGetVectorKitLabelStyleQueryLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelStyleQueryLog(void)::onceToken, &__block_literal_global_29791);
  v13 = (id)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    gss::attributesToString((uint64_t *)(*(_QWORD *)a3 + 240), 1, 0, 0, buf);
    v14 = v41 >= 0 ? buf : *(_BYTE **)buf;
    LODWORD(v35) = 136315138;
    *(_QWORD *)((char *)&v35 + 4) = v14;
    _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_INFO, "MDL:featureAttributes:%s", (uint8_t *)&v35, 0xCu);
    if (SHIBYTE(v41) < 0)
      operator delete(*(void **)buf);
  }

  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(v15 + 520);
  v17 = *(std::__shared_weak_count **)(v15 + 528);
  *(_QWORD *)&v35 = v16;
  *((_QWORD *)&v35 + 1) = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (GEOGetVectorKitLabelStyleQueryLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelStyleQueryLog(void)::onceToken, &__block_literal_global_29791);
  v20 = (id)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    v32 = v16 + 16;
    v21 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v16 + 16));
    if ((_DWORD)v21)
      geo::read_write_lock::logFailure(v21, (uint64_t)"read lock", v22);
    memset(v30, 0, sizeof(v30));
    v31 = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v30, v16 + 216);
    v23 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 16));
    if ((_DWORD)v23)
      geo::read_write_lock::logFailure(v23, (uint64_t)"unlock", v24);
    gss::attributesToString((unsigned __int16 *)v30, 1, 0, 0, buf);
    if (v41 >= 0)
      v25 = buf;
    else
      v25 = *(_BYTE **)buf;
    *(_DWORD *)v33 = 136315138;
    v34 = v25;
    _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_INFO, "MDL:clientAttributes:%s", v33, 0xCu);
    if (SHIBYTE(v41) < 0)
      operator delete(*(void **)buf);
    if (!v30[14] && *(_QWORD *)v30)
    {
      v27 = gss::Allocator::instance(v26);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 40))(v27, *(_QWORD *)v30, *(unsigned __int16 *)&v30[12]);
    }
  }

  if (v17)
  {
    v28 = (unint64_t *)&v17->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19FCD77AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FCD77BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FCD77F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL33GEOGetVectorKitLabelStyleQueryLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelStyleQuery");
  v1 = (void *)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  GEOGetVectorKitLabelStyleQueryLog(void)::log = (uint64_t)v0;

}

void md::HillshadeLayerDataSource::~HillshadeLayerDataSource(md::HillshadeLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A08F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A08F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::HillshadeLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  gss::Allocator *v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  gss::Allocator *v34;
  uint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  char *v39;
  __int128 v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD v68[2];
  _QWORD v69[2];
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  char *v72;
  uint64_t v73;
  void *__p[3];
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  __int128 v81;

  sp_mut = std::__get_sp_mut((const void *)(a1 + 776));
  std::__sp_mut::lock(sp_mut);
  v9 = *(std::__shared_weak_count **)(a1 + 784);
  v78 = *(_QWORD *)(a1 + 776);
  v79 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  v12 = (unsigned __int16 *)*a3;
  v13 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v13)
  {
    while (*v12 != *(unsigned __int16 *)(a1 + 584))
    {
      v12 += 24;
      if (v12 == v13)
        goto LABEL_18;
    }
  }
  if (v12 == v13 || *((_QWORD *)v12 + 4) != 1)
  {
LABEL_18:
    v15 = 0;
    goto LABEL_19;
  }
  v14 = *((_QWORD *)v12 + 3);
  v15 = *(_QWORD *)(v14 + 112);
  v16 = *(std::__shared_weak_count **)(v14 + 120);
  if (!v16)
  {
LABEL_19:
    v76 = v15;
    v77 = 0;
    goto LABEL_20;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v76 = v15;
  v77 = v16;
  v19 = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_20:
  v75 = 0uLL;
  v22 = geo::codec::VectorTile::hillshadeRasterData(*(geo::codec::VectorTile **)(v76 + 144));
  v23 = geo::codec::VectorTile::hillshadeRasterCount(*(geo::codec::VectorTile **)(v76 + 144));
  v24 = geo::codec::VectorTile::hillshadeRasterFormat(*(geo::codec::VectorTile **)(v76 + 144));
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  if (v22)
    v26 = v23 == 0;
  else
    v26 = 1;
  if (v26)
  {
    v27 = (char *)operator new(0x308uLL);
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
    *(_QWORD *)v27 = &off_1E42DB860;
    v70 = 0;
    v71 = 0;
    v81 = 0uLL;
    v80 = 0uLL;
    v28 = md::MapTileData::MapTileData((uint64_t)(v27 + 24), a2, (uint64_t)__p, (uint64_t)&v80, 0);
    *((_QWORD *)v27 + 3) = &off_1E4292618;
    *((_QWORD *)v27 + 82) = &unk_1E4292658;
    *(_OWORD *)(v27 + 744) = 0u;
    *(_OWORD *)(v27 + 760) = 0u;
    *a4 = v28;
    a4[1] = v27;
    goto LABEL_67;
  }
  v29 = v78;
  if (v78)
  {
    v30 = gss::Allocator::instance(v25);
    v31 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 8, 4);
    v32 = v31;
    if (v31)
      *v31 = 0x1800000005;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = v30;
    v33 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 8, 4);
    v70 = (std::__shared_weak_count *)v33;
    v71 = (std::__shared_weak_count *)v33;
    v72 = (char *)(v33 + 1);
    if (v33)
      *v33 = *v32;
    v71 = (std::__shared_weak_count *)(v33 + 1);
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v70);
    *(_QWORD *)((char *)&v81 + 7) = 0;
    *(_QWORD *)&v81 = 0;
    HIBYTE(v81) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v80, v29, (gss::FeatureAttributeSet *)&v70, (gss::QueryOverrides *)&v81);
    if (!BYTE14(v81) && (_QWORD)v81)
    {
      v35 = gss::Allocator::instance(v34);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v35 + 40))(v35, v81, WORD6(v81));
    }
    v75 = v80;
    if (v70)
    {
      v71 = v70;
      (*(void (**)(uint64_t, std::__shared_weak_count *, int64_t))(*(_QWORD *)v73 + 40))(v73, v70, v72 - (char *)v70);
    }
    if (v32)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v30 + 40))(v30, v32, 8);
  }
  v36 = (char *)operator new(0x58uLL);
  v37 = (std::__shared_weak_count *)v36;
  *((_QWORD *)v36 + 1) = 0;
  v38 = (unint64_t *)(v36 + 8);
  *((_QWORD *)v36 + 2) = 0;
  *(_QWORD *)v36 = &off_1E42DED18;
  *((_QWORD *)v36 + 3) = &off_1E42B63B0;
  v39 = v36 + 24;
  *((_QWORD *)v36 + 5) = 0;
  *((_QWORD *)v36 + 6) = 0;
  *((_QWORD *)v36 + 4) = 0;
  *((_DWORD *)v36 + 14) = 0;
  *(_QWORD *)&v40 = 0x100000001;
  *((_QWORD *)&v40 + 1) = 0x100000001;
  *(_OWORD *)(v36 + 60) = v40;
  *(_QWORD *)(v36 + 76) = 0x100000001;
  *((_DWORD *)v36 + 21) = 0;
  v70 = (std::__shared_weak_count *)(v36 + 24);
  v71 = (std::__shared_weak_count *)v36;
  if ((v24 & 0xFFFFFFFB) == 1)
  {
    LOBYTE(v80) = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v22, v23, 0);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = v39;
    v69[1] = v37;
    do
      v42 = __ldxr(v38);
    while (__stxr(v42 + 1, v38));
    textureWithData(&v81, v41, v69, 2u, 0, &v80);
    do
      v43 = __ldaxr(v38);
    while (__stlxr(v43 - 1, v38));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }

    v44 = v76;
    v45 = operator new(0x308uLL);
    v46 = v44 + 144;
    v45[1] = 0;
    v45[2] = 0;
    *v45 = &off_1E42DB860;
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    *a4 = std::construct_at[abi:nn180100]<md::HillshadeTileData,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata>,std::shared_ptr<ggl::Texture2D> &,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,std::shared_ptr<geo::codec::VectorTile> const&,md::HillshadeTileData*>(v45 + 3, a2, (uint64_t)__p, v81, *((std::__shared_weak_count **)&v81 + 1), (uint64_t *)&v75, v46);
    a4[1] = v45;
    if (!v47)
      goto LABEL_62;
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    goto LABEL_59;
  }
  if (v24 == 3)
  {
    v68[0] = v36 + 24;
    v68[1] = v36;
    do
      v50 = __ldxr(v38);
    while (__stxr(v50 + 1, v38));
    loadASTCTexture(&v81, v22, v23, v68, 0);
    do
      v51 = __ldaxr(v38);
    while (__stlxr(v51 - 1, v38));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    v52 = v76;
    v53 = operator new(0x308uLL);
    v54 = v52 + 144;
    v53[1] = 0;
    v53[2] = 0;
    *v53 = &off_1E42DB860;
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    *a4 = std::construct_at[abi:nn180100]<md::HillshadeTileData,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata>,std::shared_ptr<ggl::Texture2D> &,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,std::shared_ptr<geo::codec::VectorTile> const&,md::HillshadeTileData*>(v53 + 3, a2, (uint64_t)__p, v81, *((std::__shared_weak_count **)&v81 + 1), (uint64_t *)&v75, v54);
    a4[1] = v53;
    if (!v47)
      goto LABEL_62;
    v55 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v55);
    while (__stlxr(v49 - 1, v55));
LABEL_59:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_62;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_62:
  v56 = v71;
  if (v71)
  {
    v57 = (unint64_t *)&v71->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_67:
  if (__p[0])
    operator delete(__p[0]);
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v77;
  if (v77)
  {
    v63 = (unint64_t *)&v77->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v79;
  if (v79)
  {
    v66 = (unint64_t *)&v79->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_19FCD7F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v25;
  uint64_t v26;
  void *v28;

  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v26 - 96);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void md::HillshadeLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

_QWORD *std::construct_at[abi:nn180100]<md::HillshadeTileData,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata>,std::shared_ptr<ggl::Texture2D> &,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,std::shared_ptr<geo::codec::VectorTile> const&,md::HillshadeTileData*>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t *a6, uint64_t a7)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v13 = *a6;
  v12 = (std::__shared_weak_count *)a6[1];
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  md::MapTileData::MapTileData((uint64_t)a1, a2, a3, a7, 0);
  *a1 = &off_1E4292618;
  a1[79] = &unk_1E4292658;
  a1[90] = v13;
  a1[91] = v12;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  a1[92] = a4;
  a1[93] = a5;
  if (a5)
  {
    v18 = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (v12)
  {
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a5)
  {
    v22 = (unint64_t *)&a5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  return a1;
}

void sub_19FCD8344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::HillshadeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::HillshadeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::HillshadeTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::mun::MuninPointLabelDataRequester::~MuninPointLabelDataRequester(md::mun::MuninPointLabelDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::mun::MuninPointLabelDataRequester::requestDataKeys(md::mun::MuninPointLabelDataRequester *this, const gdc::SelectionContext *a2)
{
  gdc::LayerDataCollector *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  long double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  long double v12;
  long double v13;
  double v14;
  long double v15;
  double v16;
  float v17;
  unsigned __int8 v18;
  double v19;
  char v20;
  int v21;
  signed int v22;
  unsigned int v23;
  signed int v24;
  int v25;
  char *v26;
  unint64_t v28;
  char *v29;
  signed int v30;
  char *v31;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  char *v41;
  gdc::LayerDataCollector *v42;
  unsigned int v43;
  signed int v44;
  uint64_t v45;
  char v46;
  void *v47;
  void *v48;
  char v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _BYTE v54[220];
  uint64_t v55;
  QuadTile v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)this + 1);
  v4 = *((double *)a2 + 13);
  v5 = *((double *)a2 + 14);
  v6 = v4 * 0.5;
  v7 = tan(v4 * 0.5 + 0.785398163);
  v8 = v5 * 0.159154943 + 0.5;
  v9 = log(v7) * 0.159154943 + 0.5;
  v10 = cos(v4 + v4) * -559.82 + 111132.92;
  v11 = v10 + cos(v4 * 4.0) * 1.175;
  v12 = v11 + cos(v4 * 6.0) * -0.0023;
  v13 = tan(v4 * 0.5 + 0.78103484);
  v14 = log(v13);
  v15 = tan(v6 + 0.789761487);
  v16 = fabs((log(v15) - v14) * 0.159154943) * 1000.0 / v12;
  v17 = log2(1.0 / v16);
  v18 = vcvtms_s32_f32(v17);
  v19 = (double)(1 << v18);
  v56._type = -1;
  v56._level = v18;
  v56._yIdx = (1 << v18) + ~vcvtmd_s64_f64(v9 * v19);
  v56._xIdx = vcvtmd_s64_f64(v8 * v19);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, QuadTile *))(*(_QWORD *)v3 + 16))(&v45, v3, 26, &v56);
  if ((_BYTE)v45)
  {
    v20 = v46;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(&v55, v3, 26);
    if (!(_BYTE)v55)
    {
      v50 = v54;
      v51 = v54;
      v52 = v54;
      v53 = 9;
LABEL_36:
      v29 = v54;
      goto LABEL_37;
    }
    v20 = BYTE4(v55);
  }
  v21 = 1 << v20;
  v22 = vcvtmd_s64_f64((v8 - v16) * (double)(1 << v20));
  v23 = vcvtmd_s64_f64((v9 - v16) * (double)(1 << v20));
  v24 = vcvtmd_s64_f64((v16 + v8) * (double)(1 << v20));
  v25 = v21 + ~vcvtmd_s64_f64((v16 + v9) * (double)v21);
  v26 = v54;
  v50 = v54;
  v51 = v54;
  v52 = v54;
  v53 = 9;
  v44 = v22;
  if (v25 > (int)((1 << v20) + ~v23) || v22 > v24)
    goto LABEL_36;
  v42 = v2;
  v43 = v21 - v23;
  v28 = 9;
  v29 = v54;
  do
  {
    v30 = v44;
    do
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v26) >> 3);
      if (v28 >= v33 + 1)
      {
        v31 = v29;
      }
      else
      {
        v34 = v52;
        v35 = (1 << -(char)__clz(v28 + 1));
        if (v28 >= 0xFFFFFFFFFFFFFFFELL)
          v35 = 1;
        if (v35 <= v33 + 1)
          v28 = v33 + 1;
        else
          v28 = v35;
        v36 = malloc_type_malloc(24 * v28, 0x1000040FC312AA6uLL);
        v37 = v50;
        v38 = v51;
        if (v50 != v51)
        {
          v39 = v36;
          v40 = v50;
          do
          {
            *(_WORD *)v39 = *(_WORD *)v40;
            *(_QWORD *)(v39 + 4) = *(_QWORD *)(v40 + 4);
            v40 += 24;
            v39 += 24;
          }
          while (v40 != v38);
        }
        if (v26 != v34)
          free(v37);
        v31 = &v36[24 * v33];
        v50 = v36;
        v53 = v28;
        v26 = v36;
      }
      *v31 = -1;
      v31[1] = v20;
      *((_DWORD *)v31 + 1) = v25;
      *((_DWORD *)v31 + 2) = v30;
      v29 = v31 + 24;
      v51 = v31 + 24;
    }
    while (v30++ != v24);
    ++v25;
  }
  while (v25 != v43);
  if (v50 != v29)
  {
    v41 = v50 - 24;
    do
    {
      *(int32x2_t *)&v56._type = vrev64_s32(*(int32x2_t *)(v41 + 28));
      v56._xIdx = v41[25];
      *(&v56._xIdx + 1) = v41[24];
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v45, 0, 38, (int *)&v56, 4);
      *(_WORD *)&v56._type = 255;
      *(_QWORD *)&v56._yIdx = 0;
      gdc::LayerDataCollector::addDataKey(v42, (const gdc::LayerDataRequestKey *)&v45, &v56);
      if (v49)
        v49 = 0;
      if (v47 != v48)
        free(v47);
      v41 += 24;
    }
    while (v41 != v31);
    v29 = v50;
  }
LABEL_37:
  if (v29 != v52)
    free(v29);
}

void sub_19FCD8810(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FCD881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  if (a25 == a27)
    _Unwind_Resume(exception_object);
  free(a25);
  _Unwind_Resume(exception_object);
}

void md::DaVinciAssetDataRequester::~DaVinciAssetDataRequester(md::DaVinciAssetDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciGroundTileData::~DaVinciGroundTileData(md::DaVinciGroundTileData *this)
{
  md::DaVinciGroundTileData::~DaVinciGroundTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;

  *(_QWORD *)this = &off_1E429A8F0;
  *((_QWORD *)this + 79) = &unk_1E429A938;
  md::RegistryManager::removeRegistry(*((md::RegistryManager **)this + 166), this);
  v95 = (void **)((char *)this + 1344);
  std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__destroy_vector::operator()[abi:nn180100](&v95);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 167);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 164);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (void *)*((_QWORD *)this + 160);
  if (v8)
  {
    *((_QWORD *)this + 161) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 157);
  if (v9)
  {
    *((_QWORD *)this + 158) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 154);
  if (v10)
  {
    *((_QWORD *)this + 155) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 151);
  if (v11)
  {
    *((_QWORD *)this + 152) = v11;
    operator delete(v11);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 144));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 141));
  v12 = (_QWORD *)*((_QWORD *)this + 137);
  if (v12)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 138);
    v14 = (void *)*((_QWORD *)this + 137);
    if (v13 != v12)
    {
      do
      {
        v15 = (_QWORD *)*(v13 - 3);
        if (v15)
        {
          do
          {
            v16 = (_QWORD *)*v15;
            operator delete(v15);
            v15 = v16;
          }
          while (v16);
        }
        v18 = (void *)*(v13 - 5);
        v13 -= 5;
        v17 = v18;
        *v13 = 0;
        if (v18)
          operator delete(v17);
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 137);
    }
    *((_QWORD *)this + 138) = v12;
    operator delete(v14);
  }
  v19 = *((_QWORD *)this + 134);
  if (v19)
  {
    v20 = *((_QWORD *)this + 135);
    v21 = (void *)*((_QWORD *)this + 134);
    if (v20 != v19)
    {
      do
        md::DaVinciGroundTileData::RibbonAsset::~RibbonAsset((md::DaVinciGroundTileData::RibbonAsset *)(v20 - 56));
      while (v20 != v19);
      v21 = (void *)*((_QWORD *)this + 134);
    }
    *((_QWORD *)this + 135) = v19;
    operator delete(v21);
  }
  v22 = *((_QWORD *)this + 131);
  if (v22)
  {
    v23 = *((_QWORD *)this + 132);
    v24 = (void *)*((_QWORD *)this + 131);
    if (v23 != v22)
    {
      do
      {
        v25 = *(std::__shared_weak_count **)(v23 - 8);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 131);
    }
    *((_QWORD *)this + 132) = v22;
    operator delete(v24);
  }
  v28 = *((_QWORD *)this + 128);
  if (v28)
  {
    v29 = *((_QWORD *)this + 129);
    v30 = (void *)*((_QWORD *)this + 128);
    if (v29 == v28)
    {
LABEL_61:
      *((_QWORD *)this + 129) = v28;
      operator delete(v30);
      goto LABEL_62;
    }
    while (1)
    {
      v31 = *(std::__shared_weak_count **)(v29 - 8);
      if (!v31)
        goto LABEL_53;
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        v34 = *(std::__shared_weak_count **)(v29 - 72);
        if (v34)
        {
LABEL_54:
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
LABEL_53:
        v34 = *(std::__shared_weak_count **)(v29 - 72);
        if (v34)
          goto LABEL_54;
      }
      v29 -= 80;
      if (v29 == v28)
      {
        v30 = (void *)*((_QWORD *)this + 128);
        goto LABEL_61;
      }
    }
  }
LABEL_62:
  v37 = *((_QWORD *)this + 125);
  if (v37)
  {
    v38 = *((_QWORD *)this + 126);
    v39 = (void *)*((_QWORD *)this + 125);
    if (v38 != v37)
    {
      do
      {
        v40 = *(std::__shared_weak_count **)(v38 - 8);
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v38 -= 16;
      }
      while (v38 != v37);
      v39 = (void *)*((_QWORD *)this + 125);
    }
    *((_QWORD *)this + 126) = v37;
    operator delete(v39);
  }
  v43 = *((_QWORD *)this + 122);
  if (v43)
  {
    v44 = *((_QWORD *)this + 123);
    v45 = (void *)*((_QWORD *)this + 122);
    if (v44 != v43)
    {
      do
      {
        v46 = *(std::__shared_weak_count **)(v44 - 8);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v44 -= 16;
      }
      while (v44 != v43);
      v45 = (void *)*((_QWORD *)this + 122);
    }
    *((_QWORD *)this + 123) = v43;
    operator delete(v45);
  }
  v49 = *((_QWORD *)this + 119);
  if (v49)
  {
    v50 = *((_QWORD *)this + 120);
    v51 = (void *)*((_QWORD *)this + 119);
    if (v50 != v49)
    {
      do
      {
        v52 = *(std::__shared_weak_count **)(v50 - 8);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v50 -= 16;
      }
      while (v50 != v49);
      v51 = (void *)*((_QWORD *)this + 119);
    }
    *((_QWORD *)this + 120) = v49;
    operator delete(v51);
  }
  v55 = (void *)*((_QWORD *)this + 116);
  if (v55)
  {
    *((_QWORD *)this + 117) = v55;
    operator delete(v55);
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)this + 115);
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)this + 111);
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)this + 109);
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)this + 107);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)this + 105);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)this + 103);
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 101);
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)this + 99);
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v83)
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  md::MapTileData::~MapTileData(this);
}

uint64_t md::DaVinciGroundTileData::featureRegistryPtr(md::DaVinciGroundTileData *this)
{
  return *((_QWORD *)this + 165);
}

uint64_t `non-virtual thunk to'md::DaVinciGroundTileData::featureRegistryPtr(md::DaVinciGroundTileData *this)
{
  return *((_QWORD *)this + 86);
}

void sub_19FCD8FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  a10 = (void **)(v10 + 1344);
  std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__destroy_vector::operator()[abi:nn180100](&a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 1304);
  v13 = *(void **)(v10 + 1280);
  if (v13)
  {
    *(_QWORD *)(v10 + 1288) = v13;
    operator delete(v13);
    v14 = *(void **)(v10 + 1256);
    if (!v14)
    {
LABEL_3:
      v15 = *(void **)(v10 + 1232);
      if (!v15)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v14 = *(void **)(v10 + 1256);
    if (!v14)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 1264) = v14;
  operator delete(v14);
  v15 = *(void **)(v10 + 1232);
  if (!v15)
  {
LABEL_4:
    v16 = *(void **)(v10 + 1208);
    if (!v16)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_11:
  *(_QWORD *)(v10 + 1240) = v15;
  operator delete(v15);
  v16 = *(void **)(v10 + 1208);
  if (!v16)
  {
LABEL_6:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v10 + 1152));
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v10 + 1128));
    std::vector<std::unordered_map<unsigned short,unsigned long long>>::~vector[abi:nn180100]((_QWORD *)(v10 + 1096));
    std::vector<md::DaVinciGroundTileData::RibbonAsset>::~vector[abi:nn180100]((void **)(v10 + 1072));
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 1048));
    std::vector<md::Mesh>::~vector[abi:nn180100]((void **)(v10 + 1024));
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 1000));
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 976));
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 952));
    v17 = *(void **)(v10 + 928);
    if (v17)
    {
      *(_QWORD *)(v10 + 936) = v17;
      operator delete(v17);
    }
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 912);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 896);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 880);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 864);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 848);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 832);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 816);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 800);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 784);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 768);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 752);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 736);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 720);
    md::MapTileData::~MapTileData((md::MapTileData *)v10);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(_QWORD *)(v10 + 1216) = v16;
  operator delete(v16);
  goto LABEL_6;
}

void std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
LABEL_20:
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    while (1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      v9 = (void *)*((_QWORD *)v4 - 5);
      if (v9)
        goto LABEL_10;
LABEL_11:
      v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 9);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 80;
      if (v4 == v2)
      {
        v5 = **a1;
        goto LABEL_20;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (void *)*((_QWORD *)v4 - 5);
    if (!v9)
      goto LABEL_11;
LABEL_10:
    *((_QWORD *)v4 - 4) = v9;
    operator delete(v9);
    goto LABEL_11;
  }
}

void md::DaVinciGroundTileData::RibbonAsset::~RibbonAsset(md::DaVinciGroundTileData::RibbonAsset *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 == v2)
    {
LABEL_17:
      *((_QWORD *)this + 5) = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 24);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 24);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 4);
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    v12 = *((_QWORD *)this + 2);
    v13 = (void *)*((_QWORD *)this + 1);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 16);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v11;
    operator delete(v13);
  }
}

void **std::vector<md::DaVinciGroundTileData::RibbonAsset>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        md::DaVinciGroundTileData::RibbonAsset::~RibbonAsset((md::DaVinciGroundTileData::RibbonAsset *)(v3 - 56));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *gdc::ManagedObjectHolder<md::overlayComponents::Overlayable>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0F28;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::overlayComponents::Overlayable>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0F28;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::overlayComponents::Overlayable>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D0AA8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D0AA8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E42D0AA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  *((__n128 *)v2 + 2) = result;
  *((_OWORD *)v2 + 3) = v7;
  *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  __n128 result;
  __int128 v6;

  *(_QWORD *)a2 = &off_1E42D0AA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::DaVinciGroundTileData::_buildBuildingBatch(uint64_t a1, geo::codec::VectorTile **a2, uint64_t *a3, void **a4, uint64_t a5, float *a6, _QWORD **a7, _OWORD *a8, double *a9)
{
  void *v13;
  uint64_t v14;
  geo::codec::VectorTile *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_count v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_count v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_count v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_count v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t **v49;
  uint64_t **v50;
  _QWORD *v51;
  unint64_t on_zero_shared_weak;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t **v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  geo::codec::VectorTile **v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  __int128 v114;
  char *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t *m;
  uint64_t v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  int32x2_t v151;
  unint64_t *v152;
  float32x2_t v153;
  uint64_t v154;
  uint64_t v155;
  double v158;
  double v159;
  float32x4_t v160;
  float32x4_t v161;
  unsigned __int16 v164;
  _QWORD *v165;
  unint64_t v166;
  double v167;
  unint64_t v168;
  double v169;
  uint64_t v170;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  int v184;
  uint64_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  char *v189;
  float *v190;
  unint64_t v191;
  char *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int32x4_t v197;
  float **v198;
  float **v199;
  float *v200;
  float *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  float *v205;
  uint64_t v206;
  int32x4_t v207;
  unint64_t v208;
  float *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  const float *v214;
  float32x4_t v215;
  const float *v216;
  unsigned __int128 v217;
  unsigned __int128 v218;
  float32x2x2_t v219;
  int8x16_t v220;
  float32x4_t v221;
  int8x16_t v222;
  float32x4_t v223;
  char *v224;
  uint64_t v225;
  float v226;
  NSObject *v227;
  double *v228;
  char *v229;
  int16x8_t v230;
  int8x16_t v231;
  float32x4_t v232;
  float v233;
  float v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v240;
  uint64_t v241;
  float *v242;
  _WORD *v243;
  uint64_t v244;
  float v245;
  float v246;
  float v247;
  float v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  float *v265;
  uint64_t v266;
  _WORD *v267;
  uint64_t v268;
  float v269;
  float v270;
  float v271;
  float *v272;
  _WORD *v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  float *v277;
  float *v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  unsigned int v282;
  char *v283;
  char *v284;
  size_t v285;
  double v286;
  size_t v287;
  unint64_t v288;
  unint64_t *v289;
  char *v290;
  unint64_t *v291;
  unint64_t v292;
  int64_t v293;
  unint64_t v294;
  float *v295;
  float *v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  float *v300;
  float *v301;
  uint64_t v302;
  BOOL v305;
  BOOL v306;
  int *v307;
  float *v308;
  unint64_t v309;
  int v310;
  int v311;
  unsigned int v312;
  char *v313;
  void *v314;
  int16x8_t *v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  float v319;
  float v320;
  uint64_t v321;
  int *v322;
  float *v323;
  unint64_t v324;
  int v325;
  int v326;
  float32x4_t v327;
  const float *v328;
  float32x4_t v329;
  unint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  const float *v336;
  unint64_t v337;
  float *v338;
  float v339;
  double v340;
  float v341;
  double v342;
  double v343;
  uint64_t LinkedList;
  uint64_t v346;
  unint64_t v347;
  char *v348;
  __int128 v349;
  __int128 v350;
  double v351;
  double v352;
  double v353;
  int8x16_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  char *v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  BOOL v377;
  _BOOL4 v378;
  int64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  _BYTE *v384;
  uint64_t *v385;
  char *v386;
  char *v387;
  unint64_t v388;
  char *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  _OWORD *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  float *v397;
  char *v398;
  float *v399;
  char *v400;
  uint64_t v401;
  float v402;
  uint64_t v403;
  float v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  char *v408;
  float *v409;
  char *v410;
  float *v411;
  char *v412;
  unint64_t v413;
  uint64_t v414;
  float *v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t *v420;
  unsigned int v421;
  uint64_t **v422;
  uint64_t **v423;
  uint64_t **v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t *v427;
  unsigned int v428;
  uint64_t **v429;
  uint64_t **v430;
  uint64_t **v431;
  _QWORD *v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t *v435;
  _BYTE *v436;
  unsigned int v437;
  uint64_t v438;
  _QWORD *v439;
  unsigned int v440;
  BOOL v441;
  uint64_t *v442;
  uint64_t v443;
  unsigned int v444;
  BOOL v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  _QWORD *v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  int v454;
  float v455;
  float v456;
  double v457;
  double v458;
  double v459;
  double v460;
  float v461;
  double v462;
  uint64_t v463;
  uint64_t v464;
  float v465;
  float v466;
  double v468;
  float v469;
  float v470;
  double v471;
  double v472;
  double v473;
  double v474;
  BOOL v475;
  double v476;
  double v477;
  uint64_t v478;
  double v479;
  double v480;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  BOOL v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  __int128 v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  float *v495;
  uint64_t v496;
  uint64_t v497;
  double v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  float v504;
  uint64_t v505;
  float v506;
  float v507;
  double v508;
  double v509;
  BOOL v510;
  BOOL v511;
  double v513;
  double v514;
  double v515;
  double v516;
  float v517;
  unsigned int v518;
  uint64_t *v519;
  _BYTE *v520;
  unsigned int v521;
  uint64_t v522;
  _QWORD *v523;
  unsigned int v524;
  BOOL v525;
  uint64_t *v526;
  uint64_t v527;
  unsigned int v528;
  BOOL v529;
  uint64_t *v530;
  uint64_t v531;
  int v532;
  _QWORD *v533;
  _QWORD *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  uint64_t v546;
  unint64_t v547;
  char *v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  void *v553;
  char *v554;
  unint64_t v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  char *v559;
  char *v560;
  uint64_t v561;
  __int128 v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  char *v566;
  uint64_t i;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t *v572;
  char *v573;
  uint64_t *v574;
  BOOL v575;
  _QWORD *v576;
  _QWORD *v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  BOOL v590;
  _BOOL4 v591;
  int v592;
  int16x8_t *v593;
  int16x8_t *v594;
  uint64_t v595;
  uint64_t v596;
  double v597;
  uint64_t v598;
  double v599;
  uint64_t v600;
  uint64_t v601;
  _QWORD *v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  unint64_t v606;
  int16x8_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  _BYTE *v613;
  int16x8_t *v614;
  int16x8_t *v615;
  unint64_t v616;
  int16x8_t *v617;
  __int16 v618;
  unint64_t v619;
  uint64_t v620;
  int16x8_t *v621;
  int16x8_t *v622;
  unint64_t v623;
  int16x8_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  char *v628;
  uint64_t v629;
  __int16 v630;
  NSObject *v631;
  uint64_t v632;
  double v633;
  uint64_t v634;
  double v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  unint64_t v643;
  int16x8_t v644;
  int16x8_t *v645;
  unint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v653;
  uint64_t v654;
  float *v655;
  uint64_t v656;
  _WORD *v657;
  int v658;
  float v659;
  uint64_t v660;
  _QWORD *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int32x4_t v667;
  unint64_t v668;
  int64_t v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  int v673;
  float v674;
  __int16 v675;
  __int16 v676;
  unint64_t v677;
  int v678;
  float v679;
  __int16 v680;
  __int16 v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  uint64_t v688;
  int16x8_t *v689;
  uint64_t v690;
  _OWORD *v691;
  unint64_t v699;
  unint64_t v700;
  uint64_t v701;
  unint64_t v702;
  unint64_t v703;
  unint64_t v704;
  BOOL v706;
  BOOL v708;
  unint64_t v709;
  BOOL v711;
  int32x4_t *v713;
  char *v714;
  int32x4_t *v715;
  unint64_t v716;
  __int128 v717;
  int32x4_t v718;
  int32x4_t v719;
  int32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  int16x8_t *v731;
  uint64_t v732;
  _OWORD *v733;
  unint64_t v741;
  unint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unint64_t v745;
  unint64_t v746;
  BOOL v748;
  BOOL v750;
  unint64_t v751;
  BOOL v753;
  BOOL v754;
  float32x4_t *v755;
  char *v756;
  const float *v757;
  unint64_t v758;
  __int128 v759;
  int16x4_t v760;
  int16x4_t v761;
  uint64_t v762;
  char *v763;
  char *v764;
  unint64_t v765;
  float v766;
  uint64_t v767;
  char *v768;
  char *v769;
  unint64_t v770;
  float v771;
  char *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  char *v778;
  uint64_t v779;
  uint64_t v780;
  double v781;
  uint64_t v782;
  double v783;
  uint64_t v784;
  _QWORD *v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t v789;
  uint64_t v790;
  unint64_t v791;
  int16x8_t v792;
  int16x8_t *v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t *v797;
  char *v798;
  unint64_t v799;
  uint64_t v800;
  unint64_t v801;
  unint64_t v802;
  int16x8_t v803;
  int16x8_t *v804;
  int16x8_t *v805;
  unint64_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int64x2_t v809;
  int64x2_t v810;
  int8x16_t *v811;
  int64x2_t v812;
  unint64_t v813;
  int64x2_t v814;
  int64x2_t v815;
  int64x2_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t v821;
  int64x2_t v822;
  int64x2_t v823;
  int64x2_t v824;
  int64x2_t v825;
  int64x2_t v826;
  int8x16_t v827;
  int8x16_t v828;
  uint8x16_t v829;
  uint16x8_t v830;
  uint32x4_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int64x2_t v834;
  uint32x4_t v835;
  int64x2_t v836;
  uint16x8_t v837;
  uint32x4_t v838;
  int64x2_t v839;
  int64x2_t v840;
  int64x2_t v841;
  uint32x4_t v842;
  int64x2_t v843;
  int64x2_t v844;
  uint8x16_t v845;
  uint16x8_t v846;
  uint32x4_t v847;
  int64x2_t v848;
  int64x2_t v849;
  uint32x4_t v850;
  int64x2_t v851;
  uint16x8_t v852;
  uint32x4_t v853;
  int64x2_t v854;
  int64x2_t v855;
  int64x2_t v856;
  uint32x4_t v857;
  int64x2_t v858;
  uint64_t v859;
  unint64_t v860;
  int16x8_t v861;
  int16x8_t *v862;
  int16x8_t *v863;
  unint64_t v864;
  int16x8_t v865;
  __int16 v866;
  unint64_t v867;
  int64x2_t v868;
  int64x2_t v869;
  unint64_t v870;
  int8x8_t *v871;
  int64x2_t v872;
  int64x2_t v873;
  int8x8_t v874;
  uint16x8_t v875;
  uint32x4_t v876;
  int8x16_t v877;
  int8x16_t v878;
  int64x2_t v879;
  int64x2_t v880;
  uint32x4_t v881;
  int64x2_t v882;
  char v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t j;
  uint64_t v887;
  uint64_t v888;
  _QWORD *v889;
  int8x16_t *v890;
  int8x16_t *v891;
  unint64_t v892;
  int64x2_t v893;
  int64x2_t v894;
  int8x16_t *v895;
  int64x2_t v896;
  unint64_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t v902;
  int64x2_t v903;
  int64x2_t v904;
  int64x2_t v905;
  int64x2_t v906;
  int64x2_t v907;
  int64x2_t v908;
  int64x2_t v909;
  int64x2_t v910;
  int8x16_t v911;
  int8x16_t v912;
  uint8x16_t v913;
  uint16x8_t v914;
  uint32x4_t v915;
  int8x16_t v916;
  int8x16_t v917;
  int64x2_t v918;
  uint32x4_t v919;
  int64x2_t v920;
  uint16x8_t v921;
  uint32x4_t v922;
  int64x2_t v923;
  int64x2_t v924;
  int64x2_t v925;
  uint32x4_t v926;
  int64x2_t v927;
  int64x2_t v928;
  uint8x16_t v929;
  uint16x8_t v930;
  uint32x4_t v931;
  int64x2_t v932;
  int64x2_t v933;
  uint32x4_t v934;
  int64x2_t v935;
  uint16x8_t v936;
  uint32x4_t v937;
  int64x2_t v938;
  int64x2_t v939;
  int64x2_t v940;
  uint32x4_t v941;
  int64x2_t v942;
  unint64_t v943;
  int64x2_t v944;
  int64x2_t v945;
  unint64_t v946;
  int64x2_t v947;
  int64x2_t v948;
  int8x8_t v949;
  uint16x8_t v950;
  uint32x4_t v951;
  int8x16_t v952;
  int8x16_t v953;
  int64x2_t v954;
  int64x2_t v955;
  uint32x4_t v956;
  int64x2_t v957;
  __int8 v958;
  uint64_t v959;
  unint64_t v960;
  int16x8_t v961;
  int16x8_t *v962;
  unint64_t v963;
  unint64_t v964;
  char *v965;
  void *v966;
  void *v967;
  char *v968;
  char *k;
  void *v970;
  void *v971;
  uint64_t v972;
  __int128 v973;
  uint64_t v974;
  unint64_t v975;
  unint64_t v976;
  uint64_t v977;
  std::__shared_weak_count *v978;
  unint64_t *v979;
  unint64_t v980;
  unint64_t v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  unint64_t v985;
  unint64_t v986;
  uint64_t v987;
  char *v988;
  unint64_t *v989;
  unint64_t v990;
  char *v991;
  char *v992;
  uint64_t v993;
  std::__shared_weak_count *v994;
  unint64_t *v995;
  unint64_t v996;
  unint64_t v997;
  char *v998;
  unint64_t *v999;
  unint64_t v1000;
  char *v1001;
  char *v1002;
  char *v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  char *v1007;
  std::__shared_weak_count *v1008;
  unint64_t *v1009;
  unint64_t v1010;
  std::__shared_weak_count *v1011;
  unint64_t *v1012;
  unint64_t v1013;
  gdc::Registry *v1014;
  uint64_t *v1015;
  __n128 v1016;
  double *v1017;
  uint64_t *v1018;
  uint64_t v1019;
  uint64_t v1020;
  __n128 v1021;
  double *v1022;
  uint64_t v1023;
  uint64_t v1024;
  char v1025;
  void *v1026;
  uint64_t *v1027;
  uint64_t *v1028;
  uint64_t *v1029;
  uint64_t *v1030;
  _QWORD *v1031;
  char v1032;
  uint64_t v1033;
  void *v1034;
  _QWORD *v1035;
  uint64_t v1036;
  unint64_t v1037;
  char *v1038;
  _QWORD *v1039;
  char *v1040;
  uint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  char *v1045;
  uint64_t *v1046;
  uint64_t *v1047;
  uint64_t *v1048;
  uint64_t *v1049;
  uint64_t *v1050;
  uint64_t *v1051;
  uint64_t *v1052;
  uint64_t *v1053;
  gss::Allocator *v1054;
  uint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  _QWORD *v1058;
  char *v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t *v1062;
  uint64_t *v1063;
  uint64_t *v1064;
  uint64_t *v1065;
  uint64_t *v1066;
  gss::Allocator *v1067;
  uint64_t v1068;
  uint64_t v1069;
  _QWORD *v1070;
  double v1071;
  double v1072;
  unint64_t *v1073;
  unint64_t v1074;
  unint64_t v1075;
  _QWORD *v1076;
  uint64_t v1077;
  __int128 v1078;
  std::__shared_weak_count *v1079;
  unint64_t *v1080;
  unint64_t v1081;
  unint64_t v1082;
  double *v1083;
  unint64_t *v1084;
  unint64_t v1085;
  double *v1086;
  uint64_t v1087;
  unint64_t v1088;
  uint64_t v1089;
  unint64_t v1090;
  char *v1091;
  double *v1092;
  unint64_t *v1093;
  unint64_t v1094;
  char *v1095;
  __int128 v1096;
  double *v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  void *v1101;
  _QWORD *v1102;
  uint64_t v1103;
  _QWORD *v1104;
  uint64_t v1105;
  std::__shared_weak_count *v1106;
  unint64_t *v1107;
  unint64_t v1108;
  std::__shared_weak_count *v1109;
  unint64_t *v1110;
  unint64_t v1111;
  uint64_t *v1112;
  unint64_t v1113;
  unint64_t v1114;
  _QWORD *v1115;
  int v1116;
  int v1117;
  unint64_t v1118;
  unint64_t v1119;
  unint64_t v1120;
  unint64_t v1121;
  _QWORD *v1122;
  int v1123;
  int v1124;
  unint64_t v1125;
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  _QWORD *v1129;
  int v1130;
  int v1131;
  unint64_t v1132;
  unint64_t v1133;
  unint64_t v1134;
  unint64_t v1135;
  _QWORD *v1136;
  int v1137;
  int v1138;
  unint64_t v1139;
  unint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  _QWORD *v1143;
  int v1144;
  int v1145;
  unint64_t v1146;
  unint64_t v1147;
  unint64_t v1148;
  unint64_t v1149;
  unint64_t v1150;
  unint64_t v1151;
  unint64_t v1152;
  unint64_t v1153;
  int v1154;
  uint64_t v1155;
  int v1156;
  uint64_t v1157;
  std::__shared_weak_count *v1158;
  int v1159;
  uint64_t v1160;
  int v1161;
  uint64_t v1162;
  unint64_t *v1163;
  unint64_t *v1164;
  unint64_t *v1165;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v1167;
  std::__shared_weak_count *v1168;
  std::__shared_weak_count *v1169;
  std::__shared_weak_count *v1170;
  std::__shared_weak_count *v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  uint64_t v1175;
  float v1176;
  uint64_t v1177;
  int8x16_t *v1178;
  uint64_t v1180;
  uint64_t v1182;
  char *v1183;
  char *v1184;
  char *v1185;
  char *v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  uint64_t v1191;
  int v1192;
  int16x8_t v1194;
  geo::codec::VectorTile **v1195;
  uint64_t v1196;
  char *v1197;
  char *v1198;
  int16x8_t v1199;
  __int128 v1200;
  int8x16_t v1201;
  char *v1202;
  char *v1203;
  uint64_t v1204;
  unsigned int v1205;
  uint64_t v1206;
  _BYTE *v1207;
  uint64_t v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  float *v1212;
  unint64_t *v1213;
  __int16 v1214;
  __int16 v1215;
  char *v1216;
  uint64_t v1217;
  char *__p;
  float *__pa;
  int __pb;
  char *__pc;
  unint64_t v1222;
  char *v1223;
  void *v1224;
  float *v1225;
  void *v1226;
  void *v1227;
  char *v1228;
  float v1229;
  char v1230;
  float v1231;
  float32x4_t v1232;
  std::__shared_weak_count *v1233;
  _WORD *v1234;
  _QWORD *v1235;
  void *v1236[2];
  void *v1237[2];
  void *v1238[2];
  double v1239;
  std::__shared_weak_count *v1240;
  __int128 v1241;
  char *v1242;
  __int128 v1243;
  __int128 v1244;
  float32x4_t v1245;
  int64x2_t v1246;
  int64x2_t v1247;
  float v1248;
  char v1249;
  char v1250;
  uint64_t v1251;
  __int128 v1252;
  void *v1253[2];
  _BYTE v1254[20];
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  uint64_t v1258;
  int v1259;
  uint64_t v1260;
  int v1261;
  uint64_t v1262;
  int v1263;
  void *v1264;
  char *v1265;
  char *v1266;
  __int16 v1267[2];
  uint64_t v1268;
  void *v1269;
  int16x8_t *v1270;
  int16x8_t *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  __int128 v1275;
  unint64_t v1276;
  uint64_t v1277;
  __int16 v1278;
  uint64_t v1279;
  __int128 v1280;
  unint64_t v1281;
  uint64_t v1282;
  __int16 v1283;
  uint64_t v1284;
  __int128 v1285;
  unint64_t v1286;
  uint64_t v1287;
  __int16 v1288;
  uint64_t v1289;
  __int128 v1290;
  unint64_t v1291;
  uint64_t v1292;
  __int16 v1293;
  uint64_t v1294;
  __int128 v1295;
  unint64_t v1296;
  unint64_t v1297;
  __int16 v1298;
  uint64_t v1299;
  std::__shared_weak_count *v1300;
  std::__shared_weak_count *v1301;
  std::__shared_weak_count *v1302;
  std::__shared_weak_count *v1303;
  std::__shared_weak_count *v1304;
  std::__shared_weak_count *v1305;
  uint64_t *v1306;
  _QWORD *v1307;
  uint64_t v1308;
  __int128 v1309;
  uint64_t *v1310;
  unint64_t v1311;
  unint64_t v1312;
  float v1313;
  uint64_t v1314;
  int v1315;
  void *v1316[2];
  uint64_t v1317;
  _BYTE buf[40];
  _BYTE v1319[12];
  uint64_t v1320;
  int v1321;
  double v1322;
  double v1323;
  _BYTE *v1324;
  void **v1325;
  uint64_t v1326;
  float32x4x2_t v1327;
  float32x4x2_t v1328;
  float32x4x3_t v1329;
  float32x4x3_t v1330;
  float32x4x3_t v1331;

  v1326 = *MEMORY[0x1E0C80C00];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v1192 = objc_msgSend(v13, "daVinciBuildingHeights");

  v1307 = 0;
  v1306 = (uint64_t *)&v1307;
  v1309 = xmmword_19FFB5070;
  v1314 = 0;
  v1308 = 0;
  v1310 = 0;
  v1312 = 0;
  v1311 = 0;
  v1313 = 0.0;
  v1315 = 4;
  v1175 = geo::codec::VectorTile::daVinciBuildingSections(*a2);
  v1191 = geo::codec::VectorTile::daVinciLineLoops(*a2);
  v14 = geo::codec::VectorTile::daVinciBuildingVertices(*a2);
  v15 = *a2;
  if (v14)
  {
    v1190 = geo::codec::VectorTile::daVinciBuildingVertices(v15);
  }
  else
  {
    v16 = geo::codec::VectorTile::daVinciVertices(v15);
    v1190 = v16 + 12 * geo::codec::VectorTile::daVinciBuildingVertexOffset(*a2);
  }
  v17 = operator new(0xF8uLL);
  v17[1] = 0;
  v1173 = v17 + 1;
  v17[2] = 0;
  *v17 = &off_1E42E5228;
  v1235 = v17 + 3;
  v18 = v17;
  ggl::BufferData::BufferData((uint64_t)(v17 + 3), 2, 1, 0, 6, *((unsigned int *)a3 + 12));
  v18[28] = &unk_1E42BD118;
  v18[29] = "DV Building Index Data";
  *((_DWORD *)v18 + 60) = 0;
  v18[3] = &off_1E42BD0F8;
  v18[4] = 2;
  v1170 = (std::__shared_weak_count *)v18;
  v19 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0640;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v1233 = v19 + 1;
  v20 = *((unsigned int *)a3 + 13);
  v19[1].__shared_owners_ = 8;
  LODWORD(v19[1].__shared_weak_owners_) = 1;
  v19[2].__vftable = 0;
  v19[2].__shared_owners_ = 0;
  v19[2].__shared_weak_owners_ = 0;
  v19[3].__vftable = (std::__shared_weak_count_vtbl *)(8 * v20);
  v21 = (std::__shared_count)0;
  *(_OWORD *)&v19[3].__shared_owners_ = 0u;
  v19[4].std::__shared_count = 0u;
  v19[4].__shared_weak_owners_ = 0;
  v1168 = v19;
  if ((v20 & 1) == 0)
  {
    v21 = (std::__shared_count)0;
    v19 = v1168;
    if (v1154)
    {
      v1155 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1155, "GeoGL", 0xA3D02C1100000005);
      v21 = (std::__shared_count)0;
      v19 = v1168;
    }
  }
  v19[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v19[5].__shared_owners_ = 0;
  *((std::__shared_count *)v19 + 11) = v21;
  v19[8].std::__shared_count = v21;
  v19[8].__shared_weak_owners_ = 0;
  v19[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  v19[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  *((std::__shared_count *)v19 + 10) = v21;
  LODWORD(v19[5].__shared_weak_owners_) = 0;
  v19[9].__shared_weak_owners_ = (uint64_t)"DV Building Vertex Data";
  v19[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::elevationCompressedVboReflection;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8360;
  v19[9].__shared_owners_ = (uint64_t)&unk_1E42B8380;
  v22 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v22->__shared_owners_ = 0;
  v1165 = (unint64_t *)&v22->__shared_owners_;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v1240 = v22 + 1;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
  v23 = *((unsigned int *)a3 + 13);
  v24 = qword_1EE5517A8;
  v22[1].__shared_owners_ = qword_1EE5517A8;
  v1171 = v22;
  v25 = v22;
  LODWORD(v22[1].__shared_weak_owners_) = 769;
  v22[2].__vftable = 0;
  v22[2].__shared_owners_ = 0;
  v22[2].__shared_weak_owners_ = 0;
  v22[3].__vftable = (std::__shared_weak_count_vtbl *)(v24 * v23);
  v26 = (std::__shared_count)0;
  *(_OWORD *)&v22[3].__shared_owners_ = 0uLL;
  v22[4].std::__shared_count = 0uLL;
  v22[4].__shared_weak_owners_ = 0;
  if ((v23 & 1) == 0)
  {
    v26 = (std::__shared_count)0;
    v25 = v1171;
    if (v1156)
    {
      v1157 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1157, "GeoGL", 0xA3D02C1100000005);
      v26 = (std::__shared_count)0;
      v25 = v1171;
    }
  }
  v1211 = a1;
  v25[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v25[5].__shared_owners_ = 0;
  *((std::__shared_count *)v25 + 11) = v26;
  v25[8].std::__shared_count = v26;
  v25[8].__shared_weak_owners_ = 0;
  v25[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v25 + 10) = v26;
  v25[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v25[5].__shared_weak_owners_) = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F48;
  v27 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v27->__shared_owners_ = 0;
  v1164 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v28 = v27 + 1;
  v29 = *((unsigned int *)a3 + 13);
  v30 = qword_1EE5517E8;
  v27[1].__shared_owners_ = qword_1EE5517E8;
  LODWORD(v27[1].__shared_weak_owners_) = 769;
  v27[2].__vftable = 0;
  v27[2].__shared_owners_ = 0;
  v27[2].__shared_weak_owners_ = 0;
  v27[3].__vftable = (std::__shared_weak_count_vtbl *)(v30 * v29);
  v31 = (std::__shared_count)0;
  *(_OWORD *)&v27[3].__shared_owners_ = 0u;
  v27[4].std::__shared_count = 0u;
  v27[4].__shared_weak_owners_ = 0;
  if ((v29 & 1) == 0)
  {
    v1158 = v27;
    v31 = (std::__shared_count)0;
    v27 = v1158;
    if (v1159)
    {
      v1160 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1160, "GeoGL", 0xA3D02C1100000005);
      v31 = (std::__shared_count)0;
      v27 = v1158;
    }
  }
  v27[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v27[5].__shared_owners_ = 0;
  *((std::__shared_count *)v27 + 11) = v31;
  v27[8].std::__shared_count = v31;
  v27[8].__shared_weak_owners_ = 0;
  v27[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v27 + 10) = v31;
  v27[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v27[5].__shared_weak_owners_) = 0;
  v1169 = v27;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F28;
  v32 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v32->__shared_owners_ = 0;
  v1163 = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF418;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v33 = v32 + 1;
  v34 = *((unsigned int *)a3 + 13);
  v35 = qword_1EE551828;
  v32[1].__shared_owners_ = qword_1EE551828;
  LODWORD(v32[1].__shared_weak_owners_) = 769;
  v32[2].__vftable = 0;
  v32[2].__shared_owners_ = 0;
  v32[2].__shared_weak_owners_ = 0;
  v32[3].__vftable = (std::__shared_weak_count_vtbl *)(v35 * v34);
  v36 = (std::__shared_count)0;
  *(_OWORD *)&v32[3].__shared_owners_ = 0u;
  v32[4].std::__shared_count = 0u;
  v32[4].__shared_weak_owners_ = 0;
  v1167 = v32;
  if ((v34 & 1) == 0)
  {
    v36 = (std::__shared_count)0;
    v32 = v1167;
    if (v1161)
    {
      v1162 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1162, "GeoGL", 0xA3D02C1100000005);
      v36 = (std::__shared_count)0;
      v32 = v1167;
    }
  }
  v1195 = a2;
  v32[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v32[5].__shared_owners_ = 0;
  *((std::__shared_count *)v32 + 11) = v36;
  v32[8].std::__shared_count = v36;
  v32[8].__shared_weak_owners_ = 0;
  v32[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v32 + 10) = v36;
  v32[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v32[5].__shared_weak_owners_) = 0;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6EE8;
  v37 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v1178 = (int8x16_t *)(v1211 + 1180);
  v37->__shared_owners_ = 0;
  v38 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AB8;
  v1172 = v37;
  v39 = &v37[1].__vftable;
  *(_QWORD *)&v1252 = v1233;
  *((_QWORD *)&v1252 + 1) = v1168;
  do
    v40 = __ldxr(p_shared_owners);
  while (__stxr(v40 + 1, p_shared_owners));
  *(_QWORD *)buf = v1235;
  *(_QWORD *)&buf[8] = v1170;
  do
    v41 = __ldxr(v1173);
  while (__stxr(v41 + 1, v1173));
  ggl::DaVinci::ElevationCompressedMesh::ElevationCompressedMesh((uint64_t)&v37[1], (uint64_t)"DV Building Mesh", (uint64_t *)&v1252, (uint64_t *)buf);
  do
    v42 = __ldaxr(v1173);
  while (__stlxr(v42 - 1, v1173));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v1170->__on_zero_shared)(v1170);
    std::__shared_weak_count::__release_weak(v1170);
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v1252 + 1);
  if (*((_QWORD *)&v1252 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v1252 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *(_QWORD *)&v46 = v39;
  *((_QWORD *)&v46 + 1) = v1172;
  v1243 = v46;
  v1304 = v1240;
  v1305 = v1171;
  do
    v47 = __ldxr(v1165);
  while (__stxr(v47 + 1, v1165));
  v49 = (uint64_t **)&v1172[6];
  v48 = v1172[6].__vftable;
  v50 = (uint64_t **)&v1172[6];
  v51 = &v1172[6].__vftable;
  v1213 = v38;
  if (v48)
  {
    while (1)
    {
      while (1)
      {
        v51 = &v48->~__shared_weak_count;
        on_zero_shared_weak = (unint64_t)v48->__on_zero_shared_weak;
        if (on_zero_shared_weak < 2)
          break;
        v48 = (std::__shared_weak_count_vtbl *)*v51;
        v50 = (uint64_t **)v51;
        if (!*v51)
          goto LABEL_30;
      }
      if (on_zero_shared_weak)
        break;
      v48 = (std::__shared_weak_count_vtbl *)v51[1];
      if (!v48)
      {
        v50 = (uint64_t **)(v51 + 1);
        goto LABEL_30;
      }
    }
    v56 = v1240;
    v57 = v1171;
    goto LABEL_36;
  }
LABEL_30:
  v53 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1172[6].__shared_owners_ + 16))(v1172[6].__shared_owners_, 56, 8);
  v53[5] = 0;
  v53[6] = 0;
  v53[4] = 1;
  *v53 = 0;
  v53[1] = 0;
  v53[2] = (uint64_t)v51;
  *v50 = v53;
  v54 = *(_QWORD *)v1172[5].__shared_weak_owners_;
  v55 = v53;
  if (v54)
  {
    v1172[5].__shared_weak_owners_ = v54;
    v55 = *v50;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1172[6].__vftable, v55);
  ++v1172[6].__shared_weak_owners_;
  v56 = v1304;
  v57 = v1305;
  if (v1305)
  {
    v51 = v53;
LABEL_36:
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v53 = v51;
  }
  v60 = (std::__shared_weak_count *)v53[6];
  v53[5] = (uint64_t)v56;
  v53[6] = (uint64_t)v57;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v1305;
  if (v1305)
  {
    v64 = (unint64_t *)&v1305->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v1302 = v28;
  v1303 = v1169;
  do
    v66 = __ldxr(v1164);
  while (__stxr(v66 + 1, v1164));
  v67 = *v49;
  v68 = (uint64_t **)&v1172[6];
  if (*v49)
  {
    while (1)
    {
      v68 = (uint64_t **)v67;
      if (!v67[4])
        break;
      v67 = (uint64_t *)*v67;
      if (!*v68)
        goto LABEL_54;
    }
    v72 = v28;
    v73 = v1169;
    goto LABEL_59;
  }
LABEL_54:
  v69 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1172[6].__shared_owners_ + 16))(v1172[6].__shared_owners_, 56, 8);
  *v69 = 0;
  v69[1] = 0;
  v69[5] = 0;
  v69[6] = 0;
  v69[4] = 0;
  v69[2] = (uint64_t)v68;
  *v68 = v69;
  v70 = *(_QWORD *)v1172[5].__shared_weak_owners_;
  v71 = v69;
  if (v70)
  {
    v1172[5].__shared_weak_owners_ = v70;
    v71 = *v68;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1172[6].__vftable, v71);
  ++v1172[6].__shared_weak_owners_;
  v72 = v1302;
  v73 = v1303;
  if (v1303)
  {
    v68 = (uint64_t **)v69;
LABEL_59:
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
    v69 = (uint64_t *)v68;
  }
  v76 = (std::__shared_weak_count *)v69[6];
  v69[5] = (uint64_t)v72;
  v69[6] = (uint64_t)v73;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v1303;
  if (v1303)
  {
    v80 = (unint64_t *)&v1303->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v1300 = v33;
  v1301 = v1167;
  do
    v82 = __ldxr(v1163);
  while (__stxr(v82 + 1, v1163));
  v83 = *v49;
  v84 = (uint64_t **)&v1172[6];
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        v84 = (uint64_t **)v83;
        v85 = v83[4];
        if (v85 < 3)
          break;
        v83 = *v84;
        v49 = v84;
        if (!*v84)
          goto LABEL_81;
      }
      if (v85 == 2)
        break;
      v83 = v84[1];
      if (!v83)
      {
        v49 = v84 + 1;
        goto LABEL_81;
      }
    }
    v89 = v33;
    v90 = v1167;
    goto LABEL_86;
  }
LABEL_81:
  v86 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1172[6].__shared_owners_ + 16))(v1172[6].__shared_owners_, 56, 8);
  v86[5] = 0;
  v86[6] = 0;
  v86[4] = 2;
  *v86 = 0;
  v86[1] = 0;
  v86[2] = (uint64_t)v84;
  *v49 = v86;
  v87 = *(_QWORD *)v1172[5].__shared_weak_owners_;
  v88 = v86;
  if (v87)
  {
    v1172[5].__shared_weak_owners_ = v87;
    v88 = *v49;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1172[6].__vftable, v88);
  ++v1172[6].__shared_weak_owners_;
  v89 = v1300;
  v90 = v1301;
  if (v1301)
  {
    v84 = (uint64_t **)v86;
LABEL_86:
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
    v86 = (uint64_t *)v84;
  }
  v93 = (std::__shared_weak_count *)v86[6];
  v86[5] = (uint64_t)v89;
  v86[6] = (uint64_t)v90;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v1301;
  if (v1301)
  {
    v97 = (unint64_t *)&v1301->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = *(char **)(v1211 + 960);
  v100 = *(_QWORD *)(v1211 + 968);
  if ((unint64_t)v99 < v100)
  {
    *(_QWORD *)v99 = v39;
    *((_QWORD *)v99 + 1) = v1172;
    do
      v101 = __ldxr(v38);
    while (__stxr(v101 + 1, v38));
    v102 = v99 + 16;
    v103 = v1168;
    v104 = v1195;
    goto LABEL_126;
  }
  v105 = *(char **)(v1211 + 952);
  v106 = (v99 - v105) >> 4;
  v107 = v106 + 1;
  if ((unint64_t)(v106 + 1) >> 60)
    abort();
  v108 = v100 - (_QWORD)v105;
  if (v108 >> 3 > v107)
    v107 = v108 >> 3;
  if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
    v109 = 0xFFFFFFFFFFFFFFFLL;
  else
    v109 = v107;
  v104 = v1195;
  if (v109 >> 60)
    goto LABEL_1332;
  v110 = (char *)operator new(16 * v109);
  v111 = &v110[16 * v106];
  v112 = &v110[16 * v109];
  *(_OWORD *)v111 = v1243;
  do
    v113 = __ldxr(v38);
  while (__stxr(v113 + 1, v38));
  v102 = v111 + 16;
  if (v99 == v105)
  {
    *(_QWORD *)(v1211 + 952) = v111;
    *(_QWORD *)(v1211 + 960) = v102;
    *(_QWORD *)(v1211 + 968) = v112;
    if (!v99)
      goto LABEL_125;
  }
  else
  {
    do
    {
      v114 = *((_OWORD *)v99 - 1);
      v99 -= 16;
      *((_OWORD *)v111 - 1) = v114;
      v111 -= 16;
      *(_QWORD *)v99 = 0;
      *((_QWORD *)v99 + 1) = 0;
    }
    while (v99 != v105);
    v99 = *(char **)(v1211 + 952);
    v115 = *(char **)(v1211 + 960);
    *(_QWORD *)(v1211 + 952) = v111;
    *(_QWORD *)(v1211 + 960) = v102;
    *(_QWORD *)(v1211 + 968) = v112;
    if (v115 != v99)
    {
      do
      {
        v116 = (std::__shared_weak_count *)*((_QWORD *)v115 - 1);
        if (v116)
        {
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v115 -= 16;
      }
      while (v115 != v99);
      v104 = v1195;
    }
    if (!v99)
      goto LABEL_125;
  }
  operator delete(v99);
LABEL_125:
  v103 = v1168;
LABEL_126:
  *(_QWORD *)(v1211 + 960) = v102;
  v119 = *((unsigned int *)a3 + 12);
  v1295 = 0uLL;
  v120 = v1170[1].__shared_owners_ * v119;
  *(_QWORD *)&v121 = a5;
  *(_QWORD *)&v122 = a5;
  *((_QWORD *)&v122 + 1) = v1235;
  if (v120)
  {
    if (!a5 || BYTE1(v1170[1].__shared_weak_owners_) == 2)
    {
      v124 = (uint64_t)v1170[4].__vftable;
    }
    else
    {
      v123 = v1235;
      *(_OWORD *)v1236 = v122;
      v124 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v123, 0, v120, 1, 1);
      v122 = *(_OWORD *)v1236;
      *(_QWORD *)&v121 = a5;
      v103 = v1168;
    }
  }
  else
  {
    v124 = 0;
  }
  v1295 = v122;
  v1296 = 0;
  v1297 = v120;
  v1299 = v124;
  v1298 = 257;
  v125 = *((unsigned int *)a3 + 13);
  v1290 = 0uLL;
  v126 = v103[1].__shared_owners_ * v125;
  *(_QWORD *)&v127 = v121;
  *((_QWORD *)&v127 + 1) = v1233;
  if (v126)
  {
    if (!a5 || BYTE1(v103[1].__shared_weak_owners_) == 2)
    {
      v128 = (uint64_t)v103[4].__vftable;
    }
    else
    {
      *(_OWORD *)v1237 = v127;
      v128 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v1233, 0, v126, 1, 1);
      v127 = *(_OWORD *)v1237;
      *(_QWORD *)&v121 = a5;
    }
  }
  else
  {
    v128 = 0;
  }
  v1290 = v127;
  v1291 = 0;
  v1292 = v126;
  v1294 = v128;
  v1293 = 257;
  v129 = *((unsigned int *)a3 + 13);
  v1285 = 0uLL;
  v130 = v1169[1].__shared_owners_ * v129;
  *(_QWORD *)&v131 = v121;
  *((_QWORD *)&v131 + 1) = v28;
  v132 = v1171;
  if (v130)
  {
    if (!a5 || BYTE1(v1169[1].__shared_weak_owners_) == 2)
    {
      v133 = (uint64_t)v1169[4].__vftable;
    }
    else
    {
      *(_OWORD *)v1238 = v131;
      v133 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v28, 0, v130, 1, 1);
      v131 = *(_OWORD *)v1238;
      *(_QWORD *)&v121 = a5;
      v132 = v1171;
    }
  }
  else
  {
    v133 = 0;
  }
  v1285 = v131;
  v1286 = 0;
  v1287 = v130;
  v1289 = v133;
  v1288 = 257;
  v134 = *((unsigned int *)a3 + 13);
  v1280 = 0uLL;
  v135 = v132[1].__shared_owners_ * v134;
  *(_QWORD *)&v136 = v121;
  *((_QWORD *)&v136 + 1) = v1240;
  if (v135)
  {
    if (!a5 || BYTE1(v132[1].__shared_weak_owners_) == 2)
    {
      v138 = (uint64_t)v132[4].__vftable;
    }
    else
    {
      v137 = v1240;
      v1241 = v136;
      v138 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v137, 0, v135, 1, 1);
      v136 = v1241;
      *(_QWORD *)&v121 = a5;
    }
  }
  else
  {
    v138 = 0;
  }
  v1280 = v136;
  v1281 = 0;
  v1282 = v135;
  v1284 = v138;
  v1283 = 257;
  v139 = *((unsigned int *)a3 + 13);
  v1275 = 0uLL;
  v140 = v1167[1].__shared_owners_ * v139;
  *((_QWORD *)&v121 + 1) = v33;
  if (v140)
  {
    if (!a5 || BYTE1(v1167[1].__shared_weak_owners_) == 2)
    {
      v142 = (uint64_t)v1167[4].__vftable;
    }
    else
    {
      v1244 = v121;
      v141 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v33, 0, v140, 1, 1);
      v121 = v1244;
      v142 = v141;
    }
  }
  else
  {
    v142 = 0;
  }
  v1275 = v121;
  v1276 = 0;
  v1277 = v140;
  v1279 = v142;
  v1278 = 257;
  v1274 = 0;
  v1273 = 0;
  v143 = (uint64_t *)geo::codec::VectorTile::daVinciBuildingTileBound(*v104);
  m = a3;
  v146 = v1211;
  v147.i64[0] = *v143;
  v148 = (float32x2_t)v143[1];
  v1212 = (float *)a8 + 6;
  if (*((_BYTE *)a8 + 24))
  {
    v149 = vmul_f32(*(float32x2_t *)a8, *(float32x2_t *)v147.f32);
    v150 = vmul_f32(*(float32x2_t *)a8, v148);
    v151 = vcgt_f32(v149, v150);
    v152 = v1173;
    if (((v151.i32[0] | v151.i32[1]) & 1) != 0)
    {
      *(int32x2_t *)v147.f32 = vdup_n_s32(0x7F7FFFFFu);
      v148 = (float32x2_t)0x80000000800000;
    }
    else
    {
      v153 = *(float32x2_t *)((char *)a8 + 12);
      *(float32x2_t *)v147.f32 = vadd_f32(v153, v149);
      v148 = vadd_f32(v153, v150);
    }
  }
  else
  {
    v152 = v1173;
  }
  v154 = *a3;
  if (a3[1] == *a3)
    goto LABEL_1230;
  v155 = 0;
  _D1 = COERCE_DOUBLE(vabs_f32(v148));
  *(float32x2_t *)v147.f32 = vmaxnm_f32(vabs_f32(*(float32x2_t *)v147.f32), *(float32x2_t *)&_D1);
  WORD1(_D1) = v147.i16[3];
  v1176 = fmaxf(v147.f32[0], v147.f32[1]);
  v147.f32[0] = 32767.0 / v1176;
  v1232 = v147;
  _D0 = 1.40444743e306;
  v158 = 1.0;
  v159 = -1.0;
  while (1)
  {
    v1187 = v155;
    v1196 = *(_QWORD *)(v154 + 8 * v155);
    v1272 = 0;
    _S15 = 0.0;
    _S14 = 0.0;
    if (!*(_QWORD *)a9)
      goto LABEL_170;
    v164 = *(_WORD *)(m[3] + 2 * v155);
    if (geo::codec::VectorTile::daVinciBuildingColorsArePresent(*v104))
    {
      v165 = *a7;
    }
    else
    {
      v165 = *a7;
      if (v164 == 0xFFFF)
      {
        v1056 = ((uint64_t)(v165[1] - *v165) >> 2) - 1;
        v1057 = v165[9];
        v167 = 0.5;
        v168 = v165[7];
        _S14 = ((float)(v165[10] * (v1056 % v1057)) + 0.5) / (double)(unint64_t)v165[6];
        v169 = (float)(v1056 / v1057);
        goto LABEL_169;
      }
    }
    v166 = v165[9];
    v167 = 0.5;
    v168 = v165[7];
    _S14 = ((float)(v165[10] * (v164 % v166)) + 0.5) / (double)(unint64_t)v165[6];
    v169 = (double)(v164 / v166);
LABEL_169:
    _D1 = (double)v168;
    _D0 = (v169 + v167) / (double)v168;
    *(float *)&v1272 = _S14;
    _S15 = _D0;
    *((float *)&v1272 + 1) = _S15;
LABEL_170:
    v170 = v1274;
    if (*(_WORD *)(v1196 + 34))
    {
      v1180 = v1274;
      v1217 = 0;
      __asm
      {
        FCVT            H0, S14
        FCVT            H1, S15
      }
      v1214 = LOWORD(_D1);
      v1215 = LOWORD(_D0);
      *(int16x4_t *)v173.i8 = vdup_lane_s16(*(int16x4_t *)&_D0, 0);
      *(int16x4_t *)v174.i8 = vdup_lane_s16(*(int16x4_t *)&_D1, 0);
      v174.i64[1] = v173.i64[0];
      v1208 = v1175 + 20 * *(unsigned __int16 *)(v1196 + 32);
      v173.i64[1] = v173.i64[0];
      v175 = vzip1q_s16(v173, v174);
      v1194 = v175;
      v175.i64[0] = 0x80000000800000;
      v1199 = v175;
      v1200 = xmmword_19FFB3470;
      while (1)
      {
        v176 = *(float *)(v146 + 1176);
        if (v1192)
        {
          v177 = v1217;
          v178 = v1208;
          v179 = v1208 + 20 * v1217;
          v180 = *(float *)(v179 + 4);
          v181 = *((float *)a8 + 5) + (float)(*((float *)a8 + 2) * v180);
          if (!*((_BYTE *)a8 + 24))
            v181 = *(float *)(v179 + 4);
          v182 = v176 * 0.1;
          if ((float)(v180 - *(float *)(v179 + 8)) > 0.0)
            v182 = -0.0;
          v183 = v182 + v181;
          v184 = *(unsigned __int8 *)(v179 + 1);
        }
        else
        {
          v183 = v176 * 5.0;
          v184 = 1;
          v177 = v1217;
          v178 = v1208;
        }
        v185 = v1191 + 8 * *(unsigned int *)(v178 + 20 * v177 + 12);
        *(_OWORD *)v1253 = 0u;
        *(_OWORD *)v1254 = 0u;
        v1252 = 0u;
        v1316[1] = 0;
        v1316[0] = 0;
        v1317 = 0;
        v1207 = (_BYTE *)(v178 + 20 * v177);
        md::DaVinciGroundTileData::_populateBuildingLoops(a6, v1190, (uint64_t)v1207, *(_DWORD *)v185, *(_WORD *)(v185 + 4), v185 + 8, (uint64_t)&v1252, (uint64_t)v1316);
        v189 = (char *)*((_QWORD *)&v1252 + 1);
        v1216 = (char *)v1252;
        if (*(_BYTE *)v1212)
        {
          if ((_QWORD)v1252 != *((_QWORD *)&v1252 + 1))
          {
            v190 = (float *)v1252;
            v191 = *((_QWORD *)&v1252 + 1) - v1252 - 12;
            v192 = (char *)v1252;
            if (v191 > 0x23)
            {
              v193 = v191 / 0xC;
              if ((unint64_t)v1252 >= (unint64_t)v1212
                || (v192 = (char *)v1252, (unint64_t)v1252 + 12 * v193 + 12 <= (unint64_t)a8))
              {
                v194 = v193 + 1;
                v195 = (v193 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                v196 = v195;
                do
                {
                  *(float32x4x3_t *)v186.f32 = vld3q_f32(v190);
                  v197 = *(int32x4_t *)((char *)a8 + 8);
                  v1330.val[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64((uint64x2_t)v197, 0x20uLL), 0), v186, COERCE_FLOAT(*a8));
                  v1330.val[1] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v197, 2), v187, COERCE_FLOAT(*(_OWORD *)((char *)a8 + 4)));
                  v1330.val[2] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v197, 3), v188, *(float *)v197.i32);
                  vst3q_f32(v190, v1330);
                  v190 += 12;
                  v196 -= 4;
                }
                while (v196);
                if (v194 == v195)
                  goto LABEL_190;
                v192 = &v1216[12 * v195];
              }
            }
            do
            {
              v186.i64[0] = *(_QWORD *)v192;
              v186.i32[2] = *((_DWORD *)v192 + 2);
              v187.i64[0] = *(_QWORD *)a8;
              v187.i32[2] = *((_DWORD *)a8 + 2);
              v188.i64[0] = *(_QWORD *)((char *)a8 + 12);
              v188.i32[2] = *((_DWORD *)a8 + 5);
              v188 = vmlaq_f32(v188, v186, v187);
              *((_DWORD *)v192 + 2) = v188.i32[2];
              *(_QWORD *)v192 = v188.i64[0];
              v192 += 12;
            }
            while (v192 != v189);
          }
LABEL_190:
          v198 = (float **)v1316[0];
          v199 = (float **)v1316[1];
          while (1)
          {
            if (v198 == v199)
              goto LABEL_203;
            v200 = *v198;
            v201 = v198[1];
            if (*v198 != v201)
            {
              v202 = (char *)v201 - (char *)v200 - 12;
              if (v202 <= 0x23)
                goto LABEL_201;
              v203 = v202 / 0xC;
              if (v200 < v1212 && &v200[3 * v203 + 3] > (float *)a8)
                goto LABEL_201;
              v204 = v203 + 1;
              v205 = *v198;
              v206 = v204 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                *(float32x4x3_t *)v186.f32 = vld3q_f32(v205);
                v207 = *(int32x4_t *)((char *)a8 + 8);
                v1331.val[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64((uint64x2_t)v207, 0x20uLL), 0), v186, COERCE_FLOAT(*a8));
                v1331.val[1] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v207, 2), v187, COERCE_FLOAT(*(_OWORD *)((char *)a8 + 4)));
                v1331.val[2] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v207, 3), v188, *(float *)v207.i32);
                vst3q_f32(v205, v1331);
                v205 += 12;
                v206 -= 4;
              }
              while (v206);
              if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                break;
            }
LABEL_191:
            v198 += 6;
          }
          v200 += 3 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_201:
            v186.i64[0] = *(_QWORD *)v200;
            v186.f32[2] = v200[2];
            v187.i64[0] = *(_QWORD *)a8;
            v187.i32[2] = *((_DWORD *)a8 + 2);
            v188.i64[0] = *(_QWORD *)((char *)a8 + 12);
            v188.i32[2] = *((_DWORD *)a8 + 5);
            v188 = vmlaq_f32(v188, v186, v187);
            v200[2] = v188.f32[2];
            *(_QWORD *)v200 = v188.i64[0];
            v200 += 3;
          }
          while (v200 != v201);
          goto LABEL_191;
        }
LABEL_203:
        v1270 = 0;
        v1269 = 0;
        v1271 = 0;
        if (v1216 == v189)
        {
          v187.i32[0] = -8388609;
        }
        else
        {
          v208 = v189 - v1216 - 12;
          if (v208 > 0x5F)
          {
            v210 = v208 / 0xC + 1;
            v211 = v210 & 7;
            if ((v210 & 7) == 0)
              v211 = 8;
            v212 = v210 - v211;
            v213 = 12 * v212;
            v214 = (const float *)(v1216 + 56);
            v215.i64[0] = 0x80000000800000;
            v215.i64[1] = 0x80000000800000;
            v187.i64[0] = 0x80000000800000;
            v187.i64[1] = 0x80000000800000;
            do
            {
              v216 = v214 - 12;
              v217 = (unsigned __int128)vld3q_f32(v216);
              v218 = (unsigned __int128)vld3q_f32(v214);
              v215 = vmaxnmq_f32((float32x4_t)v217, v215);
              v187 = vmaxnmq_f32((float32x4_t)v218, v187);
              v214 += 24;
              v212 -= 8;
            }
            while (v212);
            v209 = (float *)&v1216[v213];
            v187.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v215, v187));
          }
          else
          {
            v187.i32[0] = -8388609;
            v209 = (float *)v1216;
          }
          do
          {
            v187.f32[0] = fmaxf(v209[2], v187.f32[0]);
            v209 += 3;
          }
          while (v209 != (float *)v189);
        }
        v1245 = v187;
        if (geo::codec::VectorTile::daVinciBuildingsSupportTerrainElevation(*v104))
        {
          v224 = v189;
          v225 = v1217;
          v226 = *(float *)(v1208 + 20 * v1217 + 8);
          v221.i32[1] = v1245.i32[1];
          v1230 = v1245.f32[0] > (float)(v226 + 0.0001);
          if (v226 > (float)(v1245.f32[0] + 0.0001))
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v227 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
            {
              v1267[0] = *(_WORD *)(v146 + 168);
              v1268 = *(_QWORD *)(v146 + 172);
              md::debugString<geo::QuadTile>(&v1322, v1267);
              v228 = &v1322;
              if (SHIBYTE(v1324) < 0)
                v228 = *(double **)&v1322;
              *(_DWORD *)buf = 134219010;
              *(_QWORD *)&buf[4] = v1187;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v1217;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v228;
              *(_WORD *)&buf[28] = 2048;
              *(double *)&buf[30] = v226;
              *(_WORD *)&buf[38] = 2048;
              *(double *)v1319 = v1245.f32[0];
              _os_log_impl(&dword_19F029000, v227, OS_LOG_TYPE_DEBUG, "For Building %zu/section %d key %s, terrainElevation (%f) should be lower than section maxz (%f)", buf, 0x30u);
              if (SHIBYTE(v1324) < 0)
                operator delete(*(void **)&v1322);
            }

          }
          v189 = v224;
          v219.val[0].f32[0] = *(_BYTE *)v1212 ? *((float *)a8 + 5) + (float)(*((float *)a8 + 2) * v226) : v226;
          v1245 = (float32x4_t)v219;
        }
        else
        {
          v1230 = 1;
          v225 = v1217;
        }
        v229 = v1216;
        if (v1216 == v189)
        {
          LODWORD(v236) = v1273;
          v237 = 0xAAAAAAAAAAAAAAABLL * ((v189 - v1216) >> 2);
          v249 = v1273;
        }
        else
        {
          v230 = v1199;
          v231 = (int8x16_t)v1200;
          v219.val[0].i32[0] = v1199.i32[1];
          do
          {
            v220.i32[0] = *(_DWORD *)v229;
            v232.i32[3] = v231.i32[3];
            v222.i64[0] = *(_QWORD *)(v229 + 4);
            v233 = *(float *)&v222.i32[1];
            if (!v184)
              v233 = 0.0;
            v234 = v233 + v183;
            v230.i32[1] = fmaxf(v219.val[0].f32[0], v234);
            *(uint64_t *)((char *)v232.i64 + 4) = v222.i64[0];
            v221.i64[0] = v231.i64[0];
            v221.i64[1] = __PAIR64__(v220.u32[0], COERCE_UNSIGNED_INT(fminf(v234, *(float *)&v231.i32[2])));
            *(float32x2_t *)v230.i8 = vmaxnm_f32(*(float32x2_t *)v230.i8, *(float32x2_t *)v222.i8);
            v232.i32[0] = *(_DWORD *)v229;
            v219 = (float32x2x2_t)vcgtq_f32(v221, v232);
            v220 = vextq_s8(vextq_s8(v220, v220, 4uLL), v222, 0xCuLL);
            v220.i32[3] = v220.i32[0];
            v221.i32[3] = v231.i32[3];
            v231 = vbslq_s8((int8x16_t)v219, v220, (int8x16_t)v221);
            v219.val[0].i32[0] = v230.i32[1];
            v229 += 12;
          }
          while (v229 != v189);
          v1199 = v230;
          v1200 = (__int128)v231;
          v235 = 0;
          v236 = v1273;
          v237 = 0xAAAAAAAAAAAAAAABLL * ((v189 - v1216) >> 2);
          __asm
          {
            FCVT            H0, S14
            FCVT            H1, S15
          }
          v240 = v1294 + 8 * v1273 + 2;
          v241 = v1279 + 4 * v1273;
          v242 = (float *)(v1216 + 8);
          v243 = (_WORD *)(v1289 + 4 * v1273 + 2);
          v244 = v1284 + 4 * v1273 + 2;
          v223 = v1232;
          do
          {
            v245 = *(v242 - 2);
            v246 = *(v242 - 1);
            v247 = *v242;
            v242 += 3;
            v248 = v247;
            if (!v184)
              v248 = 0.0;
            *(_WORD *)(v240 - 2) = (int)(float)(v245 * v1232.f32[0]);
            *(_WORD *)v240 = (int)(float)(v246 * v1232.f32[0]);
            *(float *)(v240 + 2) = v248 + v183;
            *(_DWORD *)(v244 - 2) = 939538432;
            *(v243 - 1) = _H0;
            *v243 = _H1;
            *(_DWORD *)(v241 + 4 * v235++) = v1245.i32[0];
            v240 += 8;
            v243 += 2;
            v244 += 4;
          }
          while (v237 > (unsigned __int16)v235);
          v249 = v236 + v235;
        }
        v1205 = v236;
        v1209 = v189;
        v1234 = (_WORD *)(v1208 + 20 * v225 + 16);
        if (*v1234)
        {
          v250 = 0;
          v251 = (char *)v1316[0];
          __asm
          {
            FCVT            H0, S14
            FCVT            H1, S15
          }
          v254 = v1279;
          v255 = v1294 + 2;
          v256 = v1284 + 2;
          v257 = v1289 + 2;
          v258 = (unint64_t)v1216;
          do
          {
            v259 = &v251[48 * v250];
            v260 = *(_QWORD *)v259;
            v261 = *((_QWORD *)v259 + 1) - *(_QWORD *)v259;
            if (v261)
            {
              v262 = 0xAAAAAAAAAAAAAAABLL * (v261 >> 2);
              v263 = 4 * v249;
              v264 = 0;
              if (v184)
              {
                v265 = (float *)(v260 + 8);
                v266 = v256 + v263;
                v267 = (_WORD *)(v257 + v263);
                v268 = v255 + 8 * v249;
                v223 = v1232;
                do
                {
                  v269 = *(v265 - 2);
                  v270 = *(v265 - 1);
                  v271 = *v265;
                  v265 += 3;
                  *(_WORD *)(v268 - 2) = (int)(float)(v269 * v1232.f32[0]);
                  *(_WORD *)v268 = (int)(float)(v270 * v1232.f32[0]);
                  *(float *)(v268 + 2) = v271 + v183;
                  *(_DWORD *)(v266 - 2) = 939538432;
                  *(v267 - 1) = _H0;
                  *v267 = _H1;
                  *(_DWORD *)(v254 + 4 * v249++) = v1245.i32[0];
                  ++v264;
                  v268 += 8;
                  v266 += 4;
                  v267 += 2;
                }
                while (v262 > (unsigned __int16)v264);
              }
              else
              {
                v272 = (float *)(v260 + 4);
                v273 = (_WORD *)(v257 + v263);
                v274 = v256 + v263;
                v275 = v255 + 8 * v249;
                v223 = v1245;
                do
                {
                  v276 = (int)(float)(*v272 * v1232.f32[0]);
                  *(_WORD *)(v275 - 2) = (int)(float)(*(v272 - 1) * v1232.f32[0]);
                  *(_WORD *)v275 = v276;
                  *(float *)(v275 + 2) = v183;
                  *(_DWORD *)(v274 - 2) = 939538432;
                  *(v273 - 1) = _H0;
                  *v273 = _H1;
                  *(_DWORD *)(v254 + 4 * v249++) = v1245.i32[0];
                  ++v264;
                  v275 += 8;
                  v272 += 3;
                  v273 += 2;
                  v274 += 4;
                }
                while (v262 > (unsigned __int16)v264);
              }
            }
            ++v250;
          }
          while (v250 < (unsigned __int16)*v1234);
        }
        else
        {
          v258 = (unint64_t)v1216;
        }
        v1273 = v249;
        v1265 = 0;
        v1264 = 0;
        v1266 = 0;
        if ((char *)v258 != v189)
          break;
        v283 = 0;
        v284 = 0;
        v278 = 0;
LABEL_262:
        v1264 = v278;
        v1265 = v284;
        v1266 = v283;
        if (v1316[1] == v1316[0])
        {
          v1239 = 0.0;
          v1242 = 0;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1316[1] - (char *)v1316[0]) >> 4) >= 0xAAAAAAAAAAAAAABLL)
            abort();
          v285 = 8 * (((char *)v1316[1] - (char *)v1316[0]) >> 4);
          v286 = COERCE_DOUBLE(operator new(v285));
          v287 = 24 * ((v285 - 24) / 0x18) + 24;
          bzero(*(void **)&v286, v287);
          v1239 = v286;
          v1242 = (char *)(*(_QWORD *)&v286 + v287);
        }
        v1222 = v237;
        if (*v1234)
        {
          v288 = 0;
          v1223 = (char *)v1316[0];
          v289 = v38;
          while (1)
          {
            v291 = (unint64_t *)&v1223[48 * v288];
            v292 = *v291;
            v293 = v291[1] - *v291;
            if (v293)
              break;
            v300 = 0;
            v301 = 0;
            v296 = 0;
LABEL_301:
            v313 = (char *)(*(_QWORD *)&v1239 + 24 * v288);
            v314 = *(void **)v313;
            if (*(_QWORD *)v313)
            {
              *(_QWORD *)(*(_QWORD *)&v1239 + 24 * v288 + 8) = v314;
              operator delete(v314);
              *(_QWORD *)v313 = 0;
              *((_QWORD *)v313 + 1) = 0;
              *((_QWORD *)v313 + 2) = 0;
            }
            *(_QWORD *)v313 = v296;
            v290 = (char *)(*(_QWORD *)&v1239 + 24 * v288);
            *((_QWORD *)v290 + 1) = v301;
            *((_QWORD *)v290 + 2) = v300;
            ++v288;
            v38 = v289;
            if (v288 >= (unsigned __int16)*v1234)
            {
              v315 = (int16x8_t *)v1269;
              v284 = v1265;
              v278 = (float *)v1264;
              goto LABEL_305;
            }
          }
          v294 = v293 / 12;
          if ((unint64_t)(v293 / 12) >> 61)
            abort();
          v295 = (float *)operator new(8 * v294);
          v296 = v295;
          if (v294 <= 1)
            v297 = 1;
          else
            v297 = v294;
          if (v297 >= 0x1C)
          {
            v302 = 2 * (v297 - 1);
            _CF = &v295[v302 + 1] >= v295 + 1 && &v295[v302] >= v295;
            _ZF = !_CF || (_DWORD)v297 == 0x100000000;
            v305 = !_ZF && (v297 - 1) >> 32 == 0;
            if (v305
              && ((unint64_t)v295 < v292 + 12 * v297 - 4
                ? (v306 = v292 >= (unint64_t)&v295[2 * v297])
                : (v306 = 1),
                  v306))
            {
              v298 = v297 & 0xFFFFFFFFFFFFFFFELL;
              v307 = (int *)(v292 + 16);
              v308 = v295;
              v309 = v297 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v219.val[0].i32[0] = *(v307 - 4);
                v219.val[0].i32[1] = *(v307 - 1);
                v310 = *(v307 - 3);
                v311 = *v307;
                vst2_f32(v308, v219);
                v308 += 4;
                v307 += 6;
                v309 -= 2;
              }
              while (v309);
              v299 = v297 & 0xFFFFFFFE;
              if (v297 == v298)
                goto LABEL_300;
            }
            else
            {
              v298 = 0;
              v299 = 0;
            }
          }
          else
          {
            v298 = 0;
            v299 = 0;
          }
          v312 = v299 + 1;
          do
          {
            v219.val[0] = *(float32x2_t *)(v292 + 12 * v298);
            *(float32x2_t *)&v295[2 * v298] = v219.val[0];
            v298 = v312++;
          }
          while (v294 > v298);
LABEL_300:
          v300 = &v295[2 * v294];
          v301 = v300;
          goto LABEL_301;
        }
        v315 = 0;
LABEL_305:
        v1314 = 0;
        v1270 = v315;
        v316 = v284 - (char *)v278;
        if ((unint64_t)(v284 - (char *)v278) < 0x18)
          goto LABEL_758;
        v317 = v316 >> 3;
        v1315 |= 4u;
        if ((unint64_t)v316 > 0x3F)
        {
          v318 = v317 & 0xFFFFFFFFFFFFFFF8;
          v327 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v328 = v278 + 8;
          v329.i64[0] = 0x80000000800000;
          v329.i64[1] = 0x80000000800000;
          v330 = v317 & 0xFFFFFFFFFFFFFFF8;
          v331.i64[0] = 0x80000000800000;
          v331.i64[1] = 0x80000000800000;
          v332.i64[0] = 0x80000000800000;
          v332.i64[1] = 0x80000000800000;
          v223.i64[0] = 0x80000000800000;
          v223.i64[1] = 0x80000000800000;
          v333 = v327;
          v334 = v327;
          v335 = v327;
          do
          {
            v336 = v328 - 8;
            v1327 = vld2q_f32(v336);
            v1328 = vld2q_f32(v328);
            v334 = vminnmq_f32(v1327.val[0], v334);
            v335 = vminnmq_f32(v1328.val[0], v335);
            v327 = vminnmq_f32(v1327.val[1], v327);
            v333 = vminnmq_f32(v1328.val[1], v333);
            v332 = vmaxnmq_f32(v1327.val[0], v332);
            v223 = vmaxnmq_f32(v1328.val[0], v223);
            v329 = vmaxnmq_f32(v1327.val[1], v329);
            v331 = vmaxnmq_f32(v1328.val[1], v331);
            v328 += 16;
            v330 -= 8;
          }
          while (v330);
          v221 = vminnmq_f32(v334, v335);
          v221.f32[0] = vminnmvq_f32(v221);
          v219 = (float32x2x2_t)vminnmq_f32(v327, v333);
          v219.val[0].f32[0] = vminnmvq_f32((float32x4_t)v219);
          v320 = vmaxnmvq_f32(vmaxnmq_f32(v332, v223));
          v319 = vmaxnmvq_f32(vmaxnmq_f32(v329, v331));
          if (v317 == v318)
            goto LABEL_323;
        }
        else
        {
          v318 = 0;
          v219.val[0].i32[0] = 2139095039;
          v319 = -3.4028e38;
          v320 = -3.4028e38;
          v221.i32[0] = 2139095039;
        }
        v337 = v317 - v318;
        v338 = &v278[2 * v318 + 1];
        do
        {
          v339 = *(v338 - 1);
          v223.f32[0] = *v338;
          v221.f32[0] = fminf(v339, v221.f32[0]);
          v219.val[0].f32[0] = fminf(*v338, v219.val[0].f32[0]);
          v320 = fmaxf(v339, v320);
          v319 = fmaxf(*v338, v319);
          v338 += 2;
          --v337;
        }
        while (v337);
LABEL_323:
        v1311 = __PAIR64__(v219.val[0].u32[0], v221.u32[0]);
        v1312 = __PAIR64__(LODWORD(v319), LODWORD(v320));
        v221.f32[0] = v320 - v221.f32[0];
        v340 = v221.f32[0];
        v341 = v319 - v219.val[0].f32[0];
        v342 = v341;
        v343 = 4294967300.0;
        if (v221.f32[0] < 4294967300.0 && v342 < 4294967300.0)
        {
          v219.val[0].f32[0] = fmaxf(v221.f32[0], v341);
        }
        else
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Cannot properly hash this geometry. Its space is too large.\n", 60);
          v278 = (float *)v1264;
          v317 = (v1265 - (_BYTE *)v1264) >> 3;
          v219.val[0].i32[0] = 0;
        }
        v1313 = v219.val[0].f32[0];
        LinkedList = geo::Triangulator<float,unsigned short>::createLinkedList((uint64_t)&v1306, (uint64_t)v278, v317, 0, 1, *(double *)v219.val, v342, *(double *)v221.i64, v340, v343, (int8x16_t)v223);
        if (!LinkedList)
          goto LABEL_758;
        v346 = *(_QWORD *)(LinkedList + 24);
        geo::Triangulator<float,unsigned short>::linkListInHashSpace(v346, v1313);
        if (v1242 == *(char **)&v1239)
        {
          v1197 = 0;
          v399 = 0;
          v396 = 0;
          goto LABEL_427;
        }
        v347 = (uint64_t)&v1242[-*(_QWORD *)&v1239] / 24;
        if (v347 >> 61)
          goto LABEL_1335;
        v348 = (char *)operator new(8 * v347);
        v355 = 0;
        v356 = &v348[8 * v347];
        if (v347 <= 1)
          v357 = 1;
        else
          v357 = (uint64_t)&v1242[-*(_QWORD *)&v1239] / 24;
        __p = v348;
        v358 = v348;
        v1224 = (void *)v357;
        while (2)
        {
          v359 = (uint64_t *)(*(_QWORD *)&v1239 + 24 * v355);
          v360 = *v359;
          v361 = v359[1] - *v359;
          if ((unint64_t)v361 < 0x18)
            goto LABEL_336;
          v362 = geo::Triangulator<float,unsigned short>::createLinkedList((uint64_t)&v1306, v360, v361 >> 3, v355 + 1, 2, *(double *)&v349, *(double *)&v350, v351, v352, v353, v354);
          v363 = v362;
          if (!v362)
            goto LABEL_336;
          *(float *)&v349 = v1313;
          if (v1313 == 0.0)
            goto LABEL_368;
          v364 = (_QWORD *)v362;
          do
          {
            v365 = (_QWORD *)v364[3];
            v364[4] = v364[2];
            v364[5] = v365;
            v364 = v365;
          }
          while (v365 != (_QWORD *)v362);
          *(_QWORD *)(*(_QWORD *)(v362 + 32) + 40) = 0;
          *(_QWORD *)(v362 + 32) = 0;
          v366 = 1;
          while (2)
          {
            v367 = 0;
            v368 = 0;
            v369 = v362;
            v370 = v362;
            while (2)
            {
              v371 = 0;
              ++v367;
              while (1)
              {
                ++v371;
                v370 = *(_QWORD *)(v370 + 40);
                if (!v370)
                  break;
                if (v366 == v371)
                {
                  v371 = v366;
                  break;
                }
              }
              v372 = v366;
              while (1)
              {
                v377 = !v372 || v370 == 0;
                v378 = !v377;
                if (!v371)
                  break;
                if (!v378 || *(_DWORD *)(v369 + 48) <= *(_DWORD *)(v370 + 48))
                {
                  v373 = *(_QWORD *)(v369 + 40);
                  --v371;
                  v374 = v370;
                  v375 = v369;
                  v376 = v369;
                  if (!v368)
                    goto LABEL_353;
LABEL_352:
                  *(_QWORD *)(v368 + 40) = v375;
                  v376 = v362;
                  goto LABEL_353;
                }
LABEL_366:
                v374 = *(_QWORD *)(v370 + 40);
                --v372;
                v373 = v369;
                v375 = v370;
                v376 = v370;
                if (v368)
                  goto LABEL_352;
LABEL_353:
                *(_QWORD *)(v375 + 32) = v368;
                v362 = v376;
                v369 = v373;
                v370 = v374;
                v368 = v375;
              }
              if (v378)
              {
                v371 = 0;
                goto LABEL_366;
              }
              v369 = v370;
              if (v370)
                continue;
              break;
            }
            *(_QWORD *)(v368 + 40) = 0;
            v366 *= 2;
            if (v367 > 1)
              continue;
            break;
          }
LABEL_368:
          if (v358 < v356)
          {
            *(_QWORD *)v358 = v363;
            v358 += 8;
            goto LABEL_336;
          }
          v379 = v358 - __p;
          v380 = (v358 - __p) >> 3;
          v381 = v380 + 1;
          if ((unint64_t)(v380 + 1) >> 61)
            abort();
          if ((v356 - __p) >> 2 > v381)
            v381 = (v356 - __p) >> 2;
          if ((unint64_t)(v356 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v382 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v382 = v381;
          if (v382)
          {
            if (!(v382 >> 61))
            {
              v383 = v382;
              v384 = operator new(8 * v382);
              v382 = v383;
              goto LABEL_380;
            }
LABEL_1332:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v384 = 0;
LABEL_380:
          v385 = (uint64_t *)&v384[8 * v380];
          *v385 = v363;
          v386 = (char *)(v385 + 1);
          v387 = __p;
          if (v358 != __p)
          {
            v388 = v358 - 8 - __p;
            if (v388 < 0x168
              || &v384[v379 - 8 - (v388 & 0xFFFFFFFFFFFFFFF8)] > &v384[v379 - 8]
              || &v358[-(v388 & 0xFFFFFFFFFFFFFFF8) - 8] > v358 - 8
              || (unint64_t)(__p - v384) < 0x20)
            {
              v389 = v358;
              v387 = __p;
            }
            else
            {
              v392 = (v388 >> 3) + 1;
              v389 = &v358[-8 * (v392 & 0x3FFFFFFFFFFFFFFCLL)];
              v393 = &v384[v379 - 16];
              v394 = v358 - 16;
              v395 = v392 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v350 = *((_OWORD *)v394 - 1);
                v349 = *(_OWORD *)v394;
                *(v393 - 1) = v350;
                *v393 = v349;
                v393 -= 2;
                v394 -= 32;
                v395 -= 4;
              }
              while (v395);
              v385 -= v392 & 0x3FFFFFFFFFFFFFFCLL;
              v387 = __p;
              if (v392 == (v392 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_384:
                v391 = &v384[8 * v382];
                if (v387)
                  goto LABEL_385;
                goto LABEL_386;
              }
            }
            do
            {
              v390 = *((_QWORD *)v389 - 1);
              v389 -= 8;
              *--v385 = v390;
            }
            while (v389 != v387);
            goto LABEL_384;
          }
          v391 = &v384[8 * v382];
          if (__p)
LABEL_385:
            operator delete(v387);
LABEL_386:
          v358 = v386;
          __p = (char *)v385;
          v357 = (uint64_t)v1224;
          v356 = v391;
LABEL_336:
          if (++v355 != v357)
            continue;
          break;
        }
        v396 = v358 - __p;
        if (v358 == __p)
        {
          v1197 = v358;
          v399 = 0;
        }
        else
        {
          if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF9)
            abort();
          v397 = (float *)operator new(2 * v396);
          v398 = (char *)&v397[4 * (v396 >> 3)];
          v1225 = v397;
          v399 = v397;
          v400 = __p;
          do
          {
            v401 = 0;
            v402 = -3.4028e38;
            v403 = *(_QWORD *)v400;
            do
            {
              v404 = *(float *)(v403 + 4);
              if (v404 > v402)
                v401 = v403;
              v402 = fmaxf(v404, v402);
              v403 = *(_QWORD *)(v403 + 24);
            }
            while (v403 != *(_QWORD *)v400);
            if (v399 < (float *)v398)
            {
              *(_QWORD *)v399 = v401;
              v399[2] = v402;
              v399 += 4;
            }
            else
            {
              v405 = ((char *)v399 - (char *)v1225) >> 4;
              v406 = v405 + 1;
              if ((unint64_t)(v405 + 1) >> 60)
                abort();
              if ((v398 - (char *)v1225) >> 3 > v406)
                v406 = (v398 - (char *)v1225) >> 3;
              if ((unint64_t)(v398 - (char *)v1225) >= 0x7FFFFFFFFFFFFFF0)
                v407 = 0xFFFFFFFFFFFFFFFLL;
              else
                v407 = v406;
              if (v407)
              {
                if (v407 >> 60)
                  goto LABEL_1332;
                v408 = (char *)operator new(16 * v407);
              }
              else
              {
                v408 = 0;
              }
              v409 = (float *)&v408[16 * v405];
              *(_QWORD *)v409 = v401;
              v409[2] = v402;
              if (v399 == v1225)
              {
                v412 = &v408[16 * v405];
                v411 = v1225;
              }
              else
              {
                v410 = &v408[16 * v405];
                v411 = v1225;
                do
                {
                  v412 = v410 - 16;
                  *((_OWORD *)v410 - 1) = *((_OWORD *)v399 - 1);
                  v399 -= 4;
                  v410 -= 16;
                }
                while (v399 != v1225);
              }
              v398 = &v408[16 * v407];
              v399 = v409 + 4;
              if (v411)
                operator delete(v411);
              v1225 = (float *)v412;
            }
            v400 += 8;
          }
          while (v400 != v358);
          v1197 = __p;
          v396 = (uint64_t)v1225;
        }
LABEL_427:
        v413 = 126 - 2 * __clz(((uint64_t)v399 - v396) >> 4);
        if (v399 == (float *)v396)
          v414 = 0;
        else
          v414 = v413;
        std::__introsort<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *,false>((float *)v396, v399, v414, 1);
        v415 = (float *)v396;
        v1226 = (void *)v396;
        if (v399 != (float *)v396)
        {
LABEL_431:
          v416 = *(_QWORD *)v415;
          v417 = *(char *)(*(_QWORD *)v415 + 52);
          if (v1313 == 0.0)
          {
            v451 = 0;
            if (v346)
              goto LABEL_496;
          }
          else
          {
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            v418 = v346;
            *(_QWORD *)buf = &buf[8];
            do
            {
              v419 = (uint64_t *)operator new(0x30uLL);
              v420 = v419;
              v421 = *(_DWORD *)(v418 + 48);
              *((_DWORD *)v419 + 8) = v421;
              v419[5] = v418;
              v422 = *(uint64_t ***)&buf[8];
              v423 = (uint64_t **)&buf[8];
              v424 = (uint64_t **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                do
                {
                  while (1)
                  {
                    v423 = v422;
                    if (v421 >= *((_DWORD *)v422 + 8))
                      break;
                    v422 = (uint64_t **)*v422;
                    v424 = v423;
                    if (!*v423)
                      goto LABEL_441;
                  }
                  v422 = (uint64_t **)v422[1];
                }
                while (v422);
                v424 = v423 + 1;
              }
LABEL_441:
              *v419 = 0;
              v419[1] = 0;
              v419[2] = (uint64_t)v423;
              *v424 = v419;
              if (**(_QWORD **)buf)
              {
                *(_QWORD *)buf = **(_QWORD **)buf;
                v420 = *v424;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v420);
              ++*(_QWORD *)&buf[16];
              v418 = *(_QWORD *)(v418 + 24);
            }
            while (v418 != v346);
            v425 = v416;
            do
            {
              v426 = (uint64_t *)operator new(0x30uLL);
              v427 = v426;
              v428 = *(_DWORD *)(v425 + 48);
              *((_DWORD *)v426 + 8) = v428;
              v426[5] = v425;
              v429 = *(uint64_t ***)&buf[8];
              v430 = (uint64_t **)&buf[8];
              v431 = (uint64_t **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                do
                {
                  while (1)
                  {
                    v430 = v429;
                    if (v428 >= *((_DWORD *)v429 + 8))
                      break;
                    v429 = (uint64_t **)*v429;
                    v431 = v430;
                    if (!*v430)
                      goto LABEL_452;
                  }
                  v429 = (uint64_t **)v429[1];
                }
                while (v429);
                v431 = v430 + 1;
              }
LABEL_452:
              *v426 = 0;
              v426[1] = 0;
              v426[2] = (uint64_t)v430;
              *v431 = v426;
              if (**(_QWORD **)buf)
              {
                *(_QWORD *)buf = **(_QWORD **)buf;
                v427 = *v431;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v427);
              ++*(_QWORD *)&buf[16];
              v425 = *(_QWORD *)(v425 + 24);
            }
            while (v425 != v416);
            v432 = *(_QWORD **)&buf[8];
            if (!*(_QWORD *)&buf[8])
            {
              v346 = 0;
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(0);
              goto LABEL_670;
            }
            __pa = v415;
            v433 = v346;
            while (1)
            {
              v434 = *(_DWORD *)(v433 + 48);
              v435 = *(uint64_t **)&buf[8];
              v436 = &buf[8];
              while (1)
              {
                while (1)
                {
                  v437 = *((_DWORD *)v435 + 8);
                  if (v434 >= v437)
                    break;
                  v436 = v435;
                  v435 = (uint64_t *)*v435;
                  if (!v435)
                    goto LABEL_457;
                }
                if (v437 >= v434)
                  break;
                v435 = (uint64_t *)v435[1];
                if (!v435)
                  goto LABEL_457;
              }
              v438 = *v435;
              v439 = v435;
              if (*v435)
              {
                v439 = v435;
                do
                {
                  v440 = *(_DWORD *)(v438 + 32);
                  v441 = v440 >= v434;
                  if (v440 >= v434)
                    v442 = (uint64_t *)v438;
                  else
                    v442 = (uint64_t *)(v438 + 8);
                  if (v441)
                    v439 = (_QWORD *)v438;
                  v438 = *v442;
                }
                while (*v442);
              }
              v443 = v435[1];
              if (v443)
              {
                do
                {
                  v444 = *(_DWORD *)(v443 + 32);
                  v445 = v434 >= v444;
                  if (v434 >= v444)
                    v446 = (uint64_t *)(v443 + 8);
                  else
                    v446 = (uint64_t *)v443;
                  if (!v445)
                    v436 = (_BYTE *)v443;
                  v443 = *v446;
                }
                while (*v446);
              }
              if (v439 != (_QWORD *)v436)
              {
                v447 = 0;
                do
                {
                  v448 = v447;
                  v449 = (_QWORD *)v439[1];
                  if (v449)
                  {
                    do
                    {
                      v450 = v449;
                      v449 = (_QWORD *)*v449;
                    }
                    while (v449);
                  }
                  else
                  {
                    do
                    {
                      v450 = (_QWORD *)v439[2];
                      _ZF = *v450 == (_QWORD)v439;
                      v439 = v450;
                    }
                    while (!_ZF);
                  }
                  v447 = v448 + 1;
                  v439 = v450;
                }
                while (v450 != (_QWORD *)v436);
                if (!v448)
                  break;
              }
LABEL_457:
              v433 = *(_QWORD *)(v433 + 16);
              if (v433 == v346)
                goto LABEL_494;
            }
            if (!v433)
            {
LABEL_494:
              v346 = 0;
              v451 = 0;
              goto LABEL_495;
            }
            v346 = v433;
            while (1)
            {
              v518 = *(_DWORD *)(v346 + 48);
              v519 = *(uint64_t **)&buf[8];
              v520 = &buf[8];
              while (1)
              {
                while (1)
                {
                  v521 = *((_DWORD *)v519 + 8);
                  if (v518 >= v521)
                    break;
                  v520 = v519;
                  v519 = (uint64_t *)*v519;
                  if (!v519)
                    goto LABEL_568;
                }
                if (v521 >= v518)
                  break;
                v519 = (uint64_t *)v519[1];
                if (!v519)
                  goto LABEL_568;
              }
              v522 = *v519;
              v523 = v519;
              if (*v519)
              {
                v523 = v519;
                do
                {
                  v524 = *(_DWORD *)(v522 + 32);
                  v525 = v524 >= v518;
                  if (v524 >= v518)
                    v526 = (uint64_t *)v522;
                  else
                    v526 = (uint64_t *)(v522 + 8);
                  if (v525)
                    v523 = (_QWORD *)v522;
                  v522 = *v526;
                }
                while (*v526);
              }
              v527 = v519[1];
              if (v527)
              {
                do
                {
                  v528 = *(_DWORD *)(v527 + 32);
                  v529 = v518 >= v528;
                  if (v518 >= v528)
                    v530 = (uint64_t *)(v527 + 8);
                  else
                    v530 = (uint64_t *)v527;
                  if (!v529)
                    v520 = (_BYTE *)v527;
                  v527 = *v530;
                }
                while (*v530);
              }
              if (v523 != (_QWORD *)v520)
                break;
LABEL_568:
              v346 = *(_QWORD *)(v346 + 24);
              if (v433 == v346)
              {
                v451 = 0;
                v346 = v433;
LABEL_495:
                v415 = __pa;
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v432);
                if (!v346)
                  goto LABEL_670;
LABEL_496:
                if (v451)
                  goto LABEL_541;
                v452 = 0;
                v453 = 0;
                v454 = 0;
                v455 = *(float *)(v416 + 4);
                v456 = *(float *)(v416 + 8);
                v457 = v455;
                v458 = v456;
                buf[0] = 0;
                v459 = *(double *)buf;
                v460 = *(double *)&buf[8];
                v461 = *(float *)(v346 + 8);
                v462 = *(double *)buf;
                v463 = v346;
                while (2)
                {
                  v464 = v463;
                  v465 = v461;
                  v463 = *(_QWORD *)(v463 + 24);
                  v461 = *(float *)(v463 + 8);
                  v466 = fminf(v461, v465);
                  if (fmaxf(v465, v461) < v456 || v466 > v456)
                    goto LABEL_502;
                  v469 = *(float *)(v464 + 4);
                  v470 = *(float *)(v463 + 4);
                  if (fmaxf(v469, v470) < v455)
                    goto LABEL_502;
                  if ((float)((float)((float)(v469 - v470) * (float)(v456 - v461))
                             + (float)((float)(v455 - v470) * (float)(v461 - v465))) >= 0.0)
                    goto LABEL_502;
                  v471 = v465;
                  v472 = v461;
                  v473 = v461 - v471;
                  if (v473 == 0.0)
                    goto LABEL_502;
                  v474 = -((v472 - v458) * (v159 / v473));
                  v475 = v474 >= 0.0 && v474 <= v158;
                  if (v475
                    && (v476 = v470,
                        v477 = v476 - v469,
                        ((v457 - v476) * v473 + v477 * (v472 - v458)) * (v159 / v473) >= 0.0))
                  {
                    v468 = v476 - v477 * v474;
                    if (v454)
                    {
                      if (v468 >= v462)
                      {
                        v454 = 1;
                        goto LABEL_502;
                      }
                    }
                    else
                    {
                      v452 = 1;
                    }
                    v460 = v472 - v474 * v473;
                    v454 = 1;
                    v459 = v468;
                    v453 = v464;
                  }
                  else
                  {
LABEL_502:
                    v468 = v462;
                  }
                  v462 = v468;
                  if (v463 != v346)
                    continue;
                  break;
                }
                *(double *)buf = v459;
                *(double *)&buf[8] = v460;
                buf[16] = v452;
                if (v452)
                {
                  v478 = *(float *)(*(_QWORD *)(v453 + 24) + 4) <= *(float *)(v453 + 4)
                       ? v453
                       : *(_QWORD *)(v453 + 24);
                  v479 = *(float *)(v478 + 4);
                  v480 = *(float *)(v478 + 8);
                  v1322 = v479;
                  v1323 = v480;
                  if (*(_QWORD *)buf == *(_QWORD *)&v479 && *(_QWORD *)&buf[8] == *(_QWORD *)&v480)
                    goto LABEL_534;
                  v482 = v459 - v457;
                  v483 = v460 - v458;
                  v484 = v479 - v457;
                  v485 = v480 - v458;
                  v486 = -((v460 - v458) * (v479 - v457) - (v480 - v458) * (v459 - v457));
                  v487 = v486 == 0.0;
                  if (v486 != 0.0)
                    v486 = v158 / v486;
                  v488 = 0;
                  if (!v487)
                  {
                    v498 = fmin(v460, fmin(v458, 1.79769313e308));
                    v499 = fmax(fmax(v458, -1.79769313e308), v460);
                    v500 = fmin(fmin(v459, fmin(v457, 1.79769313e308)), v479);
                    v501 = fmax(fmax(fmax(v457, -1.79769313e308), v459), v479);
                    v502 = fmin(v498, v480);
                    v503 = fmax(v499, v480);
                    v504 = 3.4028e38;
                    v505 = *(_QWORD *)(v478 + 24);
                    do
                    {
                      if (*(_QWORD *)(v505 + 4) != *(_QWORD *)(v478 + 4))
                      {
                        v506 = *(float *)(v505 + 4);
                        v507 = *(float *)(v505 + 8);
                        v508 = v506;
                        v509 = v507;
                        v510 = v500 > v506 || v501 <= v508;
                        v511 = !v510 && v502 <= v509;
                        if (v511 && v503 > v509)
                        {
                          v513 = v508 - v457;
                          v514 = v509 - v458;
                          v515 = -((v509 - v458) * v484 - v513 * v485) * v486;
                          v516 = -(v513 * v483 - v514 * v482) * v486;
                          if (v158 - (v516 + v515) > 0.0
                            && v515 > 0.0
                            && v516 > 0.0
                            && (float)((float)((float)(v507 - *(float *)(*(_QWORD *)(v505 + 24) + 8))
                                             * (float)(v506 - *(float *)(*(_QWORD *)(v505 + 16) + 4)))
                                     + (float)((float)(*(float *)(*(_QWORD *)(v505 + 24) + 4) - v506)
                                             * (float)(v507 - *(float *)(*(_QWORD *)(v505 + 16) + 8)))) >= 0.0)
                          {
                            v517 = (float)((float)(v506 - v455) * (float)(v506 - v455))
                                 + (float)((float)(v507 - v456) * (float)(v507 - v456));
                            _NF = v517 < v504;
                            v504 = fminf(v517, v504);
                            if (_NF)
                              v488 = v505;
                          }
                        }
                      }
                      v505 = *(_QWORD *)(v505 + 24);
                    }
                    while (v505 != v478);
                  }
                  if (v488)
                    v478 = v488;
                  if (v478)
                  {
LABEL_534:
                    v489 = v416;
                    do
                    {
                      *(_BYTE *)(v489 + 52) = 0;
                      v489 = *(_QWORD *)(v489 + 24);
                    }
                    while (v489 != v416);
                    v490 = v1310;
                    if (!v1310)
                    {
                      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::allocateSlab(&v1306);
                      v490 = v1310;
                    }
                    v1310 = (uint64_t *)*v490;
                    *(_WORD *)v490 = *(_WORD *)v478;
                    *(uint64_t *)((char *)v490 + 4) = *(_QWORD *)(v478 + 4);
                    v491 = 0uLL;
                    *((_OWORD *)v490 + 1) = 0u;
                    *((_OWORD *)v490 + 2) = 0u;
                    *(uint64_t *)((char *)v490 + 45) = 0;
                    *((_DWORD *)v490 + 12) = *(_DWORD *)(v478 + 48);
                    v492 = v1310;
                    if (!v1310)
                    {
                      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::allocateSlab(&v1306);
                      v492 = v1310;
                      v491 = 0uLL;
                    }
                    v1310 = (uint64_t *)*v492;
                    *(_WORD *)v492 = *(_WORD *)v416;
                    *(uint64_t *)((char *)v492 + 4) = *(_QWORD *)(v416 + 4);
                    *(uint64_t *)((char *)v492 + 45) = 0;
                    *((_OWORD *)v492 + 1) = v491;
                    *((_OWORD *)v492 + 2) = v491;
                    *((_DWORD *)v492 + 12) = *(_DWORD *)(v416 + 48);
                    v490[5] = v478;
                    *(_QWORD *)(v478 + 40) = v490;
                    v492[5] = v416;
                    *(_QWORD *)(v416 + 40) = v492;
                    v493 = *(_QWORD *)(v478 + 24);
                    v494 = *(_QWORD *)(v416 + 16);
                    *(_QWORD *)(v478 + 24) = v416;
                    *(_QWORD *)(v416 + 16) = v478;
                    v490[3] = v493;
                    *(_QWORD *)(v493 + 16) = v490;
                    v492[3] = (uint64_t)v490;
                    v490[2] = (uint64_t)v492;
                    *(_QWORD *)(v494 + 24) = v492;
                    v492[2] = v494;
                  }
                }
LABEL_541:
                v415 += 4;
                if (v415 == v399)
                  goto LABEL_670;
                v495 = v415;
                do
                {
                  v496 = *(_QWORD *)v495;
                  if (*(char *)(*(_QWORD *)v495 + 52) > v417)
                  {
                    v497 = *(_QWORD *)v495;
                    do
                    {
                      --*(_BYTE *)(v497 + 52);
                      v497 = *(_QWORD *)(v497 + 24);
                    }
                    while (v497 != v496);
                  }
                  v495 += 4;
                }
                while (v495 != v399);
                goto LABEL_431;
              }
            }
            v531 = 0;
            do
            {
              v532 = *(char *)(v523[5] + 52);
              if (v532 >= 1)
                v531 = v523[5];
              if (v532 > 0)
              {
                v531 = v523[5];
                goto LABEL_604;
              }
              v533 = (_QWORD *)v523[1];
              if (v533)
              {
                do
                {
                  v534 = v533;
                  v533 = (_QWORD *)*v533;
                }
                while (v533);
              }
              else
              {
                do
                {
                  v534 = (_QWORD *)v523[2];
                  _ZF = *v534 == (_QWORD)v523;
                  v523 = v534;
                }
                while (!_ZF);
              }
              v523 = v534;
            }
            while (v534 != (_QWORD *)v520);
            if (!v531)
              goto LABEL_568;
LABEL_604:
            v535 = v531;
            v536 = v346;
            while (1)
            {
              v536 = *(_QWORD *)(v536 + 24);
              v535 = *(_QWORD *)(v535 + 16);
              if (v531 == v535)
                break;
              if (*(_DWORD *)(v535 + 48) != *(_DWORD *)(v536 + 48))
                goto LABEL_609;
            }
            v535 = v531;
LABEL_609:
            v537 = *(_QWORD *)(v535 + 24);
            if (v537 == v531 || (v538 = *(_QWORD *)(v536 + 16)) == 0)
            {
              if (v346)
              {
                v563 = v531;
                do
                {
                  *(_BYTE *)(v563 + 52) = 0;
                  v563 = *(_QWORD *)(v563 + 24);
                }
                while (v563 != v531);
                v564 = *(_QWORD *)(v531 + 24);
                v565 = *(_QWORD *)(v346 + 24);
                *(_QWORD *)(v346 + 24) = v564;
                *(_QWORD *)(v531 + 24) = v565;
                *(_QWORD *)(v565 + 16) = v531;
                *(_QWORD *)(v564 + 16) = v346;
              }
LABEL_651:
              v346 = v433;
              v451 = 1;
              goto LABEL_495;
            }
            if (!v537)
              goto LABEL_651;
            v539 = v531;
            do
            {
              *(_BYTE *)(v539 + 52) = 0;
              v539 = *(_QWORD *)(v539 + 24);
            }
            while (v539 != v531);
            v1177 = v538;
            v540 = *(_QWORD *)(v531 + 16);
            v1182 = v537;
            if (v540 != v537)
            {
              v541 = 0;
              v542 = 0;
              v543 = 0;
              while (v542 < v541)
              {
                *(_QWORD *)v542 = v540;
                v544 = v542 + 8;
LABEL_617:
                v540 = *(_QWORD *)(v540 + 16);
                v542 = v544;
                if (v540 == v537)
                  goto LABEL_654;
              }
              v545 = (char *)(v542 - v543);
              v546 = (v542 - v543) >> 3;
              v547 = v546 + 1;
              v548 = v543;
              if ((unint64_t)(v546 + 1) >> 61)
                abort();
              v1202 = v543;
              v549 = v541 - v543;
              v550 = (v541 - v548) >> 2;
              if (v550 > v547)
                v547 = v550;
              if (v549 >= 0x7FFFFFFFFFFFFFF8)
                v551 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v551 = v547;
              v1188 = v540;
              if (v551)
              {
                v1183 = v545;
                v1185 = v542;
                if (v551 >> 61)
                  goto LABEL_1332;
                v552 = v551;
                v553 = operator new(8 * v551);
                v540 = v1188;
                v551 = v552;
                v545 = v1183;
                v542 = v1185;
              }
              else
              {
                v553 = 0;
              }
              v554 = (char *)v553 + 8 * v546;
              *(_QWORD *)v554 = v540;
              v544 = v554 + 8;
              if (v542 == v1202)
              {
                v543 = (char *)v553 + 8 * v546;
                v38 = v1213;
                v541 = (char *)v553 + 8 * v551;
                if (v542)
                  goto LABEL_641;
              }
              else
              {
                v555 = v542 - 8 - v1202;
                if (v555 < 0x168)
                {
                  v556 = v542;
                  v38 = v1213;
                  goto LABEL_638;
                }
                v38 = v1213;
                if (&v545[(_QWORD)v553 - 8 - (v555 & 0xFFFFFFFFFFFFFFF8)] > &v545[(_QWORD)v553 - 8]
                  || &v542[-(v555 & 0xFFFFFFFFFFFFFFF8) - 8] > v542 - 8
                  || (unint64_t)(v542 - &v545[(_QWORD)v553]) < 0x20)
                {
                  v556 = v542;
                  goto LABEL_638;
                }
                v558 = (v555 >> 3) + 1;
                v556 = &v542[-8 * (v558 & 0x3FFFFFFFFFFFFFFCLL)];
                v559 = &v545[(_QWORD)v553 - 16];
                v560 = v542 - 16;
                v561 = v558 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v562 = *(_OWORD *)v560;
                  *((_OWORD *)v559 - 1) = *((_OWORD *)v560 - 1);
                  *(_OWORD *)v559 = v562;
                  v559 -= 32;
                  v560 -= 32;
                  v561 -= 4;
                }
                while (v561);
                v554 -= 8 * (v558 & 0x3FFFFFFFFFFFFFFCLL);
                if (v558 == (v558 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v542 = v1202;
                }
                else
                {
LABEL_638:
                  v542 = v1202;
                  do
                  {
                    v557 = *((_QWORD *)v556 - 1);
                    v556 -= 8;
                    *((_QWORD *)v554 - 1) = v557;
                    v554 -= 8;
                  }
                  while (v556 != v1202);
                }
                v543 = v554;
                v541 = (char *)v553 + 8 * v551;
                if (v542)
                {
LABEL_641:
                  v1203 = v543;
                  v1184 = v541;
                  v1186 = v544;
                  operator delete(v542);
                  v541 = v1184;
                  v544 = v1186;
                  v540 = v1188;
                  v543 = v1203;
                }
              }
              v537 = v1182;
              goto LABEL_617;
            }
            v543 = 0;
            v544 = 0;
LABEL_654:
            v566 = v543;
            for (i = *(_QWORD *)(v346 + 24); i != v1177; i = *(_QWORD *)(i + 24))
            {
              if (i == v433)
                break;
            }
            v568 = *(_QWORD *)(v531 + 24);
            v569 = v1177;
            v570 = v346;
            if (v568 != v1182)
            {
              *(_QWORD *)(v568 + 16) = v346;
              v570 = *(_QWORD *)(v1182 + 16);
              *(_QWORD *)(v570 + 24) = v1177;
              v569 = *(_QWORD *)(v531 + 24);
            }
            *(_QWORD *)(v346 + 24) = v569;
            *(_QWORD *)(v1177 + 16) = v570;
            v415 = __pa;
            if (v566 != v544)
            {
              v571 = v1308;
              v572 = v1310;
              v573 = v566;
              do
              {
                v574 = *(uint64_t **)v573;
                if (*(_QWORD *)v573)
                  v575 = v571 == 0;
                else
                  v575 = 1;
                if (!v575)
                {
                  *((_BYTE *)v574 + 52) = -1;
                  *v574 = (uint64_t)v572;
                  v572 = v574;
                  v1310 = v574;
                }
                v573 += 8;
              }
              while (v573 != v544);
            }
            if (v566)
              operator delete(v566);
            v451 = 1;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)&buf[8]);
            if (v346)
              goto LABEL_496;
          }
        }
LABEL_670:
        if (v1226)
          operator delete(v1226);
        if (v1197)
          operator delete(v1197);
        if (!v346)
          goto LABEL_758;
        if (v1313 == 0.0)
          goto LABEL_704;
        v576 = (_QWORD *)v346;
        do
        {
          v577 = (_QWORD *)v576[3];
          v576[4] = v576[2];
          v576[5] = v577;
          v576 = v577;
        }
        while (v577 != (_QWORD *)v346);
        *(_QWORD *)(*(_QWORD *)(v346 + 32) + 40) = 0;
        *(_QWORD *)(v346 + 32) = 0;
        v578 = v346;
        v579 = 1;
        while (2)
        {
          v580 = 0;
          v581 = 0;
          v582 = v578;
          v583 = v578;
          while (2)
          {
            v584 = 0;
            ++v580;
            while (1)
            {
              ++v584;
              v583 = *(_QWORD *)(v583 + 40);
              if (!v583)
                break;
              if (v579 == v584)
              {
                v584 = v579;
                break;
              }
            }
            v585 = v579;
            while (1)
            {
              v590 = !v585 || v583 == 0;
              v591 = !v590;
              if (!v584)
                break;
              if (!v591 || *(_DWORD *)(v582 + 48) <= *(_DWORD *)(v583 + 48))
              {
                v586 = *(_QWORD *)(v582 + 40);
                --v584;
                v587 = v583;
                v588 = v582;
                v589 = v582;
                if (!v581)
                  goto LABEL_689;
LABEL_688:
                *(_QWORD *)(v581 + 40) = v588;
                v589 = v578;
                goto LABEL_689;
              }
LABEL_702:
              v587 = *(_QWORD *)(v583 + 40);
              --v585;
              v586 = v582;
              v588 = v583;
              v589 = v583;
              if (v581)
                goto LABEL_688;
LABEL_689:
              *(_QWORD *)(v588 + 32) = v581;
              v578 = v589;
              v582 = v586;
              v583 = v587;
              v581 = v588;
            }
            if (v591)
            {
              v584 = 0;
              goto LABEL_702;
            }
            v582 = v583;
            if (v583)
              continue;
            break;
          }
          *(_QWORD *)(v581 + 40) = 0;
          v579 *= 2;
          if (v580 > 1)
            continue;
          break;
        }
LABEL_704:
        v592 = geo::Triangulator<float,unsigned short>::earclipPolygon((uint64_t)&v1306, (_QWORD *)v346, (char **)&v1269);
        v593 = v1270;
        v594 = (int16x8_t *)v1269;
        *(_QWORD *)buf = &off_1E42D5BF0;
        *(_QWORD *)&buf[8] = &v1264;
        *(_QWORD *)&buf[24] = buf;
        if ((unint64_t)(v1265 - (_BYTE *)v1264) >= 0x18)
        {
          v596 = (v1265 - (_BYTE *)v1264) >> 3;
          if (*(_QWORD *)v1264 == *((_QWORD *)v1264 + v596 - 1))
            v595 = v596 - 1;
          else
            v595 = (v1265 - (_BYTE *)v1264) >> 3;
        }
        else
        {
          v595 = 0;
        }
        v597 = v1239;
        __pb = v592;
        v598 = 0;
        if (v1242 != *(char **)&v1239)
        {
          v599 = v1239;
          do
          {
            v602 = **(_QWORD ***)&v597;
            v603 = *(_QWORD *)(*(_QWORD *)&v597 + 8);
            if (**(_QWORD **)&v597 != v603)
            {
              *(_QWORD *)buf = &off_1E42D5BF0;
              *(double *)&buf[8] = v599;
              *(_QWORD *)&buf[24] = buf;
              v604 = v603 - (_QWORD)v602;
              v1325 = (void **)&v1322;
              v1322 = COERCE_DOUBLE(&off_1E42D5BF0);
              v1323 = v599;
              if ((unint64_t)v604 >= 0x18)
              {
                v600 = v604 >> 3;
                if (*v602 == v602[v600 - 1])
                  v601 = v600 - 1;
                else
                  v601 = v600;
              }
              else
              {
                v601 = 0;
              }
              v595 += v601;
              ++v598;
            }
            *(_QWORD *)&v599 += 24;
            *(_QWORD *)&v597 += 24;
          }
          while (*(char **)&v597 != v1242);
        }
        v605 = ((char *)v1270 - (_BYTE *)v1269) >> 1;
        v606 = 3 * (v595 + 2 * v598) - 6;
        if (v605 < v606)
        {
          v607 = v1271;
          v1227 = (void *)v606;
          while (v593 < v607)
          {
            v593->i16[0] = 0;
            v593 = (int16x8_t *)((char *)v593 + 2);
LABEL_722:
            v1270 = v593;
            if (++v605 == v606)
            {
              v1271 = v607;
              v1269 = v594;
              goto LABEL_754;
            }
          }
          v608 = (char *)v593 - (char *)v594;
          if ((char *)v593 - (char *)v594 <= -3)
          {
            v1271 = v607;
            v1269 = v594;
LABEL_1335:
            abort();
          }
          v609 = v608 >> 1;
          if ((char *)v607 - (char *)v594 <= (unint64_t)((v608 >> 1) + 1))
            v610 = v609 + 1;
          else
            v610 = (char *)v607 - (char *)v594;
          if ((unint64_t)((char *)v607 - (char *)v594) >= 0x7FFFFFFFFFFFFFFELL)
            v611 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v611 = v610;
          if (v611)
          {
            if (v611 < 0)
              goto LABEL_1332;
            v612 = v611;
            v613 = operator new(2 * v611);
            v611 = v612;
          }
          else
          {
            v613 = 0;
          }
          v614 = (int16x8_t *)&v613[2 * v609];
          v614->i16[0] = 0;
          v615 = (int16x8_t *)&v614->i16[1];
          if (v593 != v594)
          {
            v616 = (char *)&v593[-1].u64[1] + 6 - (char *)v594;
            if (v616 < 0x5E
              || (v619 = v608 & 0xFFFFFFFFFFFFFFFELL,
                  &v613[(v608 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v616 & 0xFFFFFFFFFFFFFFFELL)] > &v613[(v608 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                 - 2]))
            {
              v617 = v593;
              v38 = v1213;
            }
            else
            {
              v38 = v1213;
              if ((char *)&v593[-1].u64[1] - (v616 & 0xFFFFFFFFFFFFFFFELL) + 6 > (char *)&v593[-1].u64[1] + 6)
              {
                v617 = v593;
                goto LABEL_738;
              }
              if ((char *)v593 - v613 - v619 < 0x20)
              {
                v617 = v593;
                goto LABEL_738;
              }
              v620 = (v616 >> 1) + 1;
              v617 = (int16x8_t *)((char *)v593 - 2 * (v620 & 0xFFFFFFFFFFFFFFF0));
              v621 = (int16x8_t *)&v613[2 * v609 - 16];
              v622 = v593 - 1;
              v623 = v620 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v624 = *v622;
                v621[-1] = v622[-1];
                *v621 = v624;
                v621 -= 2;
                v622 -= 2;
                v623 -= 16;
              }
              while (v623);
              v614 = (int16x8_t *)((char *)v614 - 2 * (v620 & 0xFFFFFFFFFFFFFFF0));
              if (v620 == (v620 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_741:
                v607 = (int16x8_t *)&v613[2 * v611];
                v1270 = v615;
                if (v594)
                  operator delete(v594);
                v594 = v614;
                v593 = v615;
                v606 = (unint64_t)v1227;
                goto LABEL_722;
              }
            }
            do
            {
LABEL_738:
              v618 = v617[-1].i16[7];
              v617 = (int16x8_t *)((char *)v617 - 2);
              v614[-1].i16[7] = v618;
              v614 = (int16x8_t *)((char *)v614 - 2);
            }
            while (v617 != v594);
            goto LABEL_741;
          }
          v38 = v1213;
          goto LABEL_741;
        }
LABEL_754:
        if (!__pb)
        {
LABEL_758:
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v631 = (id)GEOGetVectorKitVKDefaultLog_log;
          v146 = v1211;
          v629 = v1217;
          if (os_log_type_enabled(v631, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19F029000, v631, OS_LOG_TYPE_ERROR, "Building failed to triangulate!", buf, 2u);
          }

          v628 = v1209;
          *(_QWORD *)buf = &off_1E42D5BF0;
          *(_QWORD *)&buf[8] = &v1264;
          *(_QWORD *)&buf[24] = buf;
          if ((unint64_t)(v1265 - (_BYTE *)v1264) >= 0x18)
          {
            v632 = (v1265 - (_BYTE *)v1264) >> 3;
            if (*(_QWORD *)v1264 == *((_QWORD *)v1264 + v632 - 1))
              --v632;
          }
          else
          {
            v632 = 0;
          }
          v633 = v1239;
          if (*(char **)&v1239 == v1242)
          {
            v634 = 0;
          }
          else
          {
            v634 = 0;
            v635 = v1239;
            do
            {
              v638 = **(_QWORD ***)&v633;
              v639 = *(_QWORD *)(*(_QWORD *)&v633 + 8);
              if (**(_QWORD **)&v633 != v639)
              {
                *(_QWORD *)buf = &off_1E42D5BF0;
                *(double *)&buf[8] = v635;
                *(_QWORD *)&buf[24] = buf;
                v640 = v639 - (_QWORD)v638;
                v1325 = (void **)&v1322;
                v1322 = COERCE_DOUBLE(&off_1E42D5BF0);
                v1323 = v635;
                if ((unint64_t)v640 >= 0x18)
                {
                  v636 = v640 >> 3;
                  if (*v638 == v638[v636 - 1])
                    v637 = v636 - 1;
                  else
                    v637 = v636;
                }
                else
                {
                  v637 = 0;
                }
                v632 += v637;
                ++v634;
              }
              *(_QWORD *)&v635 += 24;
              *(_QWORD *)&v633 += 24;
            }
            while (*(char **)&v633 != v1242);
          }
          v625 = v1274;
          if (v632 + 2 * v634 != 2)
          {
            v641 = 3 * (v632 + 2 * v634 - 2);
            v642 = v1299;
            if (v641 < 0x10)
            {
              v643 = 0;
              goto LABEL_783;
            }
            v643 = v641 & 0xFFFFFFFFFFFFFFF0;
            v644 = vdupq_n_s16(v1205);
            v645 = (int16x8_t *)(v1299 + 2 * v1274 + 16);
            v646 = v641 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v645[-1] = v644;
              *v645 = v644;
              v645 += 2;
              v646 -= 16;
            }
            while (v646);
            v625 += v643;
            if (v641 != v643)
            {
LABEL_783:
              v647 = v643 - 3 * v632 - 6 * v634 + 6;
              do
              {
                *(_WORD *)(v642 + 2 * v625++) = v1205;
                _CF = __CFADD__(v647++, 1);
              }
              while (!_CF);
            }
          }
          v648 = 0;
          goto LABEL_787;
        }
        v625 = v1274;
        if (v594 == v593)
        {
          v648 = 1;
          v628 = v1209;
          v146 = v1211;
          v629 = v1217;
          goto LABEL_787;
        }
        v626 = v1299;
        v627 = (char *)v593 - (char *)v594 - 2;
        v628 = v1209;
        if (v627 > 0x1D)
        {
          v629 = v1217;
          v630 = v1205;
          if ((unint64_t)(2 * v1274 + v1299 - (_QWORD)v594) >= 0x20)
          {
            v859 = (v627 >> 1) + 1;
            v860 = v859 & 0xFFFFFFFFFFFFFFF0;
            v861 = vdupq_n_s16(v1205);
            v862 = (int16x8_t *)(v1299 + 2 * v1274 + 16);
            v863 = v594 + 1;
            v864 = v859 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v865 = vaddq_s16(*v863, v861);
              v862[-1] = vaddq_s16(v863[-1], v861);
              *v862 = v865;
              v862 += 2;
              v863 += 2;
              v864 -= 16;
            }
            while (v864);
            v625 += v860;
            if (v859 == v860)
              goto LABEL_986;
            v594 = (int16x8_t *)((char *)v594 + 2 * (v859 & 0xFFFFFFFFFFFFFFF0));
          }
        }
        else
        {
          v629 = v1217;
          v630 = v1205;
        }
        do
        {
          v866 = v594->i16[0];
          v594 = (int16x8_t *)((char *)v594 + 2);
          *(_WORD *)(v626 + 2 * v625++) = v866 + v630;
        }
        while (v594 != v593);
LABEL_986:
        v648 = 1;
        v146 = v1211;
LABEL_787:
        v1274 = v625;
        if (!*v1207)
        {
          v649 = v249;
          goto LABEL_959;
        }
        v649 = v249;
        if (v1216 != v628)
        {
          v650 = 0;
          __asm
          {
            FCVT            H0, S14
            FCVT            H1, S15
          }
          v653 = v1294 + 8 * v249 + 2;
          v654 = v1279 + 4 * v249;
          v655 = (float *)(v1216 + 8);
          v656 = v1284 + 4 * v249 + 2;
          v657 = (_WORD *)(v1289 + 4 * v249 + 2);
          do
          {
            v658 = (int)(float)(*(v655 - 1) * v1232.f32[0]);
            *(_WORD *)(v653 - 2) = (int)(float)(*(v655 - 2) * v1232.f32[0]);
            *(_WORD *)v653 = v658;
            *(float *)(v653 + 2) = *v655;
            v659 = v1245.f32[0];
            if ((v1230 & 1) == 0)
              v659 = *v655;
            *(float *)(v654 + 4 * v650) = v659;
            *(v657 - 1) = _H0;
            *v657 = _H1;
            *(_DWORD *)(v656 - 2) = 939538432;
            ++v650;
            v653 += 8;
            v655 += 3;
            v656 += 4;
            v657 += 2;
          }
          while (v1222 > (unsigned __int16)v650);
          v649 = v249 + v650;
        }
        if (*v1234)
        {
          v1189 = v648;
          v660 = 0;
          v661 = v1316[0];
          v662 = v1294;
          v663 = v1279;
          v664 = v1289;
          v665 = v1284;
          v666 = v1294 + 2;
          v1228 = (char *)(v1289 + 2);
          __pc = (char *)(v1284 + 2);
          v1204 = v1294 + 4;
          v1206 = v1284;
          v667 = vdupq_lane_s32(*(int32x2_t *)v1245.f32, 0);
          v1198 = (char *)(v1294 + 16);
          v1210 = v1294 + 2;
          while (1)
          {
            v668 = v661[6 * v660];
            v669 = v661[6 * v660 + 1] - v668;
            if (v669)
              break;
LABEL_796:
            if (++v660 >= (unint64_t)(unsigned __int16)*v1234)
            {
              v648 = v1189;
              goto LABEL_923;
            }
          }
          v670 = v669 / 12;
          if (v670 <= 1)
            v671 = 1;
          else
            v671 = v670;
          if ((v1230 & 1) == 0)
          {
            if (v671 <= 0x17)
            {
              v677 = 0;
              v678 = 0;
              v679 = v1232.f32[0];
              goto LABEL_807;
            }
            v723 = 8 * v649;
            v724 = v662 + 8 * v649;
            v725 = 8 * (v671 - 1);
            v726 = v724 + v725;
            v727 = v666 + 8 * v649;
            v728 = v662;
            v729 = v727 + v725;
            v730 = 4 * v649;
            v731 = (int16x8_t *)(v664 + 4 * v649);
            v732 = 4 * (v671 - 1);
            v733 = (_OWORD *)(v665 + 4 * v649);
            if (&__pc[4 * v649 + v732] >= &__pc[4 * v649]
              && (_OWORD *)((char *)v733 + v732) >= v733
              && &v1228[4 * v649 + v732] >= &v1228[4 * v649]
              && &v731->i8[v732] >= (__int8 *)v731
              && v729 >= v727
              && v726 >= v724
              && (unsigned __int16)(v671 - 1) != 0xFFFFLL
              && (v671 - 1) >> 16 == 0)
            {
              v678 = 0;
              v677 = 0;
              v741 = v728 + 8 * (v649 + v671);
              v742 = v663 + v730;
              v743 = 4 * (v649 + v671);
              v744 = v663 + v743;
              v745 = v668 + 12 * v671;
              v746 = v665 + v743;
              v748 = v1204 + v723 < v745 && v668 < v741;
              v750 = v742 < v745 && v668 < v744;
              v751 = v664 + v743;
              v753 = (unint64_t)v731 < v746 && (unint64_t)v733 < v751;
              v754 = v742 >= v741 || v1204 + v723 >= v744;
              v662 = v728;
              if (v754)
              {
                v665 = v1206;
                v666 = v1210;
                if (v748 || v750 || v753)
                {
                  v38 = v1213;
                  v146 = v1211;
                  v679 = v1232.f32[0];
                  v629 = v1217;
LABEL_807:
                  v681 = v1214;
                  v680 = v1215;
                }
                else
                {
                  v677 = v671 & 0xFFFFFFFFFFFFFFFCLL;
                  v678 = v671 & 0xFFFFFFFC;
                  v755 = (float32x4_t *)(v663 + v730);
                  v756 = &v1198[v723];
                  v757 = (const float *)v661[6 * v660];
                  v758 = v671 & 0xFFFFFFFFFFFFFFFCLL;
                  v679 = v1232.f32[0];
                  *(_QWORD *)&v759 = 0x3800380038003800;
                  *((_QWORD *)&v759 + 1) = 0x3800380038003800;
                  do
                  {
                    v1329 = vld3q_f32(v757);
                    v757 += 12;
                    v760 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v1329.val[0], v1232.f32[0])));
                    *((_WORD *)v756 - 4) = v760.i16[1];
                    *(_WORD *)v756 = v760.i16[2];
                    *((_WORD *)v756 + 4) = v760.i16[3];
                    *((_WORD *)v756 - 8) = v760.i16[0];
                    v761 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v1329.val[1], v1232.f32[0])));
                    *((_WORD *)v756 - 7) = v761.i16[0];
                    *((_WORD *)v756 - 3) = v761.i16[1];
                    *((_WORD *)v756 + 1) = v761.i16[2];
                    *((_WORD *)v756 + 5) = v761.i16[3];
                    *((_DWORD *)v756 - 3) = v1329.val[2].i32[0];
                    *((_DWORD *)v756 - 1) = v1329.val[2].i32[1];
                    *((_DWORD *)v756 + 1) = v1329.val[2].i32[2];
                    *((_DWORD *)v756 + 3) = v1329.val[2].i32[3];
                    *v755++ = v1329.val[2];
                    v756 += 32;
                    *v731++ = v1194;
                    *v733++ = v759;
                    v758 -= 4;
                  }
                  while (v758);
                  v649 += v677;
                  v38 = v1213;
                  v146 = v1211;
                  v629 = v1217;
                  v681 = v1214;
                  v680 = v1215;
                  if (v671 == v677)
                    goto LABEL_796;
                }
              }
              else
              {
                v38 = v1213;
                v666 = v1210;
                v146 = v1211;
                v679 = v1232.f32[0];
                v629 = v1217;
                v681 = v1214;
                v680 = v1215;
                v665 = v1206;
              }
            }
            else
            {
              v677 = 0;
              v678 = 0;
              v38 = v1213;
              v679 = v1232.f32[0];
              v629 = v1217;
              v681 = v1214;
              v680 = v1215;
              v662 = v728;
              v666 = v1210;
              v146 = v1211;
            }
            v767 = v666 + 8 * v649;
            v768 = &__pc[4 * v649];
            v769 = &v1228[4 * v649];
            do
            {
              v770 = v668 + 12 * v677;
              v771 = *(float *)(v770 + 4);
              *(_WORD *)(v767 - 2) = (int)(float)(*(float *)v770 * v679);
              *(_WORD *)v767 = (int)(float)(v771 * v679);
              *(_DWORD *)(v767 + 2) = *(_DWORD *)(v770 + 8);
              *(_DWORD *)(v663 + 4 * v649) = *(_DWORD *)(v770 + 8);
              *((_WORD *)v769 - 1) = v680;
              ++v649;
              v677 = (unsigned __int16)++v678;
              *(_WORD *)v769 = v681;
              *(_DWORD *)(v768 - 2) = 939538432;
              v767 += 8;
              v768 += 4;
              v769 += 4;
            }
            while (v670 > (unsigned __int16)v678);
            goto LABEL_796;
          }
          if (v671 < 0x1C)
          {
            v672 = 0;
            v673 = 0;
            v674 = v1232.f32[0];
            goto LABEL_804;
          }
          v682 = 8 * v649;
          v683 = v662 + 8 * v649;
          v684 = 8 * (v671 - 1);
          v685 = v683 + v684;
          v686 = v666 + 8 * v649;
          v687 = v686 + v684;
          v688 = 4 * v649;
          v689 = (int16x8_t *)(v664 + 4 * v649);
          v690 = 4 * (v671 - 1);
          v691 = (_OWORD *)(v665 + 4 * v649);
          if (&__pc[4 * v649 + v690] >= &__pc[4 * v649]
            && (_OWORD *)((char *)v691 + v690) >= v691
            && &v1228[4 * v649 + v690] >= &v1228[4 * v649]
            && &v689->i8[v690] >= (__int8 *)v689
            && v687 >= v686
            && v685 >= v683
            && (unsigned __int16)(v671 - 1) != 0xFFFFLL
            && (v671 - 1) >> 16 == 0)
          {
            v673 = 0;
            v672 = 0;
            v699 = v662 + 8 * (v649 + v671);
            v700 = v663 + v688;
            v701 = 4 * (v649 + v671);
            v702 = v663 + v701;
            v703 = v668 + 12 * v671;
            v704 = v665 + v701;
            v706 = v1204 + v682 < v703 && v668 < v699;
            v708 = v700 < v703 && v668 < v702;
            v709 = v664 + v701;
            v711 = (unint64_t)v689 < v704 && (unint64_t)v691 < v709;
            if (v700 >= v699 || v1204 + v682 >= v702)
            {
              v665 = v1206;
              v666 = v1210;
              if (v706 || v708 || v711)
              {
                v38 = v1213;
                v146 = v1211;
                v674 = v1232.f32[0];
                v629 = v1217;
LABEL_804:
                v676 = v1214;
                v675 = v1215;
              }
              else
              {
                v672 = v671 & 0xFFFFFFFFFFFFFFFCLL;
                v673 = v671 & 0xFFFFFFFC;
                v713 = (int32x4_t *)(v663 + v688);
                v714 = &v1198[v682];
                v715 = (int32x4_t *)v661[6 * v660];
                v716 = v671 & 0xFFFFFFFFFFFFFFFCLL;
                v674 = v1232.f32[0];
                *(_QWORD *)&v717 = 0x3800380038003800;
                *((_QWORD *)&v717 + 1) = 0x3800380038003800;
                do
                {
                  v719 = v715[1];
                  v718 = v715[2];
                  v720 = *v715;
                  v715 += 3;
                  v721.i64[0] = __PAIR64__(v720.u32[3], v720.u32[0]);
                  v722 = (float32x4_t)vrev64q_s32(v719);
                  v722.i32[0] = v720.i32[1];
                  *((_DWORD *)v714 - 3) = v720.i32[2];
                  v721.i64[1] = __PAIR64__(v718.u32[1], v719.u32[2]);
                  v722.i32[3] = v718.i32[2];
                  *(int16x4_t *)v721.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v721, v1232.f32[0])));
                  *(int16x4_t *)v722.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v722, v1232.f32[0])));
                  *((_WORD *)v714 - 4) = v721.i16[1];
                  *(_WORD *)v714 = v721.i16[2];
                  *((_WORD *)v714 - 8) = v721.i16[0];
                  *((_WORD *)v714 + 4) = v721.i16[3];
                  *((_WORD *)v714 - 3) = v722.i16[1];
                  *((_WORD *)v714 + 1) = v722.i16[2];
                  *((_WORD *)v714 + 5) = v722.i16[3];
                  *((_WORD *)v714 - 7) = v722.i16[0];
                  *((_DWORD *)v714 - 1) = v719.i32[1];
                  *((_DWORD *)v714 + 1) = v718.i32[0];
                  *((_DWORD *)v714 + 3) = v718.i32[3];
                  *v713++ = v667;
                  *v689++ = v1194;
                  *v691++ = v717;
                  v714 += 32;
                  v716 -= 4;
                }
                while (v716);
                v649 += v672;
                v38 = v1213;
                v146 = v1211;
                v629 = v1217;
                v676 = v1214;
                v675 = v1215;
                if (v671 == v672)
                  goto LABEL_796;
              }
            }
            else
            {
              v38 = v1213;
              v666 = v1210;
              v146 = v1211;
              v674 = v1232.f32[0];
              v629 = v1217;
              v676 = v1214;
              v675 = v1215;
              v665 = v1206;
            }
          }
          else
          {
            v672 = 0;
            v673 = 0;
            v38 = v1213;
            v674 = v1232.f32[0];
            v629 = v1217;
            v676 = v1214;
            v675 = v1215;
            v666 = v1210;
            v146 = v1211;
          }
          v762 = v666 + 8 * v649;
          v763 = &__pc[4 * v649];
          v764 = &v1228[4 * v649];
          do
          {
            v765 = v668 + 12 * v672;
            v766 = *(float *)(v765 + 4);
            *(_WORD *)(v762 - 2) = (int)(float)(*(float *)v765 * v674);
            *(_WORD *)v762 = (int)(float)(v766 * v674);
            *(_DWORD *)(v762 + 2) = *(_DWORD *)(v765 + 8);
            *(_DWORD *)(v663 + 4 * v649) = v1245.i32[0];
            *((_WORD *)v764 - 1) = v675;
            ++v649;
            v672 = (unsigned __int16)++v673;
            *(_WORD *)v764 = v676;
            *(_DWORD *)(v763 - 2) = 939538432;
            v762 += 8;
            v763 += 4;
            v764 += 4;
          }
          while (v670 > (unsigned __int16)v673);
          goto LABEL_796;
        }
LABEL_923:
        v1273 = v649;
        if ((v648 & 1) != 0)
        {
          v772 = (char *)v1269;
          v773 = (char *)v1270 - (_BYTE *)v1269;
          if (v1270 != v1269)
          {
            v774 = v773 >> 1;
            v775 = v1299;
            if ((unint64_t)v773 >= 0x20
              && ((v776 = v1299 + 2 * v625, v776 >= (unint64_t)v1269 + (v773 & 0xFFFFFFFFFFFFFFFELL))
               || (unint64_t)v1269 >= v776 + (v773 & 0xFFFFFFFFFFFFFFFELL)))
            {
              v802 = v774 & 0xFFFFFFFFFFFFFFF0;
              v803 = vdupq_n_s16(v249);
              v777 = ((unint64_t)v773 >> 1) & 0xF;
              v804 = (int16x8_t *)((char *)v1269 + 2 * v774 - 16);
              v805 = (int16x8_t *)(v1299 + 2 * v625 + 16);
              v806 = v774 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v807 = (int8x16_t)vrev64q_s16(*v804);
                v808 = (int8x16_t)vrev64q_s16(v804[-1]);
                v805[-1] = vaddq_s16((int16x8_t)vextq_s8(v807, v807, 8uLL), v803);
                *v805 = vaddq_s16((int16x8_t)vextq_s8(v808, v808, 8uLL), v803);
                v804 -= 2;
                v805 += 2;
                v806 -= 16;
              }
              while (v806);
              v625 += v802;
              if (v774 == v802)
                goto LABEL_958;
            }
            else
            {
              v777 = v773 >> 1;
            }
            v778 = v772 - 2;
            do
              *(_WORD *)(v775 + 2 * v625++) = *(_WORD *)&v778[2 * v777--] + v249;
            while (v777);
          }
        }
        else
        {
          *(_QWORD *)buf = &off_1E42D5BF0;
          *(_QWORD *)&buf[8] = &v1264;
          *(_QWORD *)&buf[24] = buf;
          if ((unint64_t)(v1265 - (_BYTE *)v1264) >= 0x18)
          {
            v780 = (v1265 - (_BYTE *)v1264) >> 3;
            if (*(_QWORD *)v1264 == *((_QWORD *)v1264 + v780 - 1))
              v779 = v780 - 1;
            else
              v779 = (v1265 - (_BYTE *)v1264) >> 3;
          }
          else
          {
            v779 = 0;
          }
          v781 = v1239;
          if (*(char **)&v1239 == v1242)
          {
            v782 = 0;
          }
          else
          {
            v782 = 0;
            v783 = v1239;
            do
            {
              v785 = **(_QWORD ***)&v781;
              v786 = *(_QWORD *)(*(_QWORD *)&v781 + 8);
              if (**(_QWORD **)&v781 != v786)
              {
                *(_QWORD *)buf = &off_1E42D5BF0;
                *(double *)&buf[8] = v783;
                *(_QWORD *)&buf[24] = buf;
                v787 = v786 - (_QWORD)v785;
                v1325 = (void **)&v1322;
                v1322 = COERCE_DOUBLE(&off_1E42D5BF0);
                v1323 = v783;
                if ((unint64_t)v787 >= 0x18)
                {
                  if (*v785 == v785[(v787 >> 3) - 1])
                    v784 = (v787 >> 3) - 1;
                  else
                    v784 = v787 >> 3;
                }
                else
                {
                  v784 = 0;
                }
                v779 += v784;
                ++v782;
              }
              *(_QWORD *)&v783 += 24;
              *(_QWORD *)&v781 += 24;
            }
            while (*(char **)&v781 != v1242);
          }
          v788 = v779 + 2 * v782;
          if (v788 == 2)
            goto LABEL_958;
          v789 = 3 * (v788 - 2);
          v790 = v1299;
          if (v789 >= 0x10)
          {
            v791 = v789 & 0xFFFFFFFFFFFFFFF0;
            v792 = vdupq_n_s16(v249);
            v793 = (int16x8_t *)(v1299 + 2 * v625 + 16);
            v794 = v789 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v793[-1] = v792;
              *v793 = v792;
              v793 += 2;
              v794 -= 16;
            }
            while (v794);
            v625 += v791;
            if (v789 == v791)
              goto LABEL_958;
          }
          else
          {
            v791 = 0;
          }
          v795 = v791 - 3 * v779 - 6 * v782 + 6;
          do
          {
            *(_WORD *)(v790 + 2 * v625++) = v249;
            _CF = __CFADD__(v795++, 1);
          }
          while (!_CF);
        }
LABEL_958:
        v1274 = v625;
LABEL_959:
        v144 = (unint64_t)v1207;
        if ((float)(*(float *)(v1208 + 20 * v629 + 4) - *(float *)(v1208 + 20 * v629 + 8)) > 0.0)
        {
          if (v648)
          {
            md::DaVinciGroundTileData::_appendFaces(v146, (uint64_t)v1207, (uint64_t *)&v1252, (uint64_t)&v1295, (uint64_t)&v1290, (uint64_t)&v1285, (uint64_t)&v1280, (uint64_t)&v1275, v1245.f32[0], v1232.f32[0], &v1274, &v1273, v1230, (int *)&v1272, (uint64_t)a8);
            if (*v1234)
            {
              v796 = 0;
              v797 = (uint64_t *)v1316[0];
              do
              {
                md::DaVinciGroundTileData::_appendFaces(v146, (uint64_t)v1207, v797, (uint64_t)&v1295, (uint64_t)&v1290, (uint64_t)&v1285, (uint64_t)&v1280, (uint64_t)&v1275, v1245.f32[0], v1232.f32[0], &v1274, &v1273, v1230, (int *)&v1272, (uint64_t)a8);
                ++v796;
                v797 += 6;
              }
              while (v796 < (unsigned __int16)*v1234);
            }
            goto LABEL_1028;
          }
          v798 = (char *)v1253[1];
          v1231 = _S14;
          v1229 = _S15;
          if (v1253[1] == *(void **)v1254)
          {
            v800 = 0;
            goto LABEL_996;
          }
          v799 = *(_QWORD *)v1254 - (unint64_t)v1253[1];
          if (*(_QWORD *)v1254 - (unint64_t)v1253[1] >= 8)
          {
            if (v799 >= 0x20)
            {
              v809 = 0uLL;
              v801 = v799 & 0xFFFFFFFFFFFFFFE0;
              v810 = 0uLL;
              v811 = (int8x16_t *)((char *)v1253[1] + 16);
              v812 = 0uLL;
              v813 = v799 & 0xFFFFFFFFFFFFFFE0;
              v814 = 0uLL;
              v815 = 0uLL;
              v816 = 0uLL;
              v817 = 0uLL;
              v818 = 0uLL;
              v819 = 0uLL;
              v820 = 0uLL;
              v821 = 0uLL;
              v822 = 0uLL;
              v823 = 0uLL;
              v824 = 0uLL;
              v825 = 0uLL;
              v826 = 0uLL;
              do
              {
                v827.i64[0] = 0x303030303030303;
                v827.i64[1] = 0x303030303030303;
                v828 = vandq_s8(*v811, v827);
                v829 = (uint8x16_t)vceqzq_s8(vandq_s8(v811[-1], v827));
                v830 = vmovl_u8(*(uint8x8_t *)v829.i8);
                v831 = vmovl_u16(*(uint16x4_t *)v830.i8);
                v832.i64[0] = v831.u32[0];
                v832.i64[1] = v831.u32[1];
                v833 = (int8x16_t)vdupq_n_s64(1uLL);
                v1246 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v831.u32[2];
                v832.i64[1] = v831.u32[3];
                v834 = (int64x2_t)vandq_s8(v832, v833);
                v835 = vmovl_high_u16(v830);
                v832.i64[0] = v835.u32[0];
                v832.i64[1] = v835.u32[1];
                v836 = (int64x2_t)vandq_s8(v832, v833);
                v837 = vmovl_high_u8(v829);
                v838 = vmovl_u16(*(uint16x4_t *)v837.i8);
                v832.i64[0] = v838.u32[0];
                v832.i64[1] = v838.u32[1];
                v839 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v835.u32[2];
                v832.i64[1] = v835.u32[3];
                v840 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v838.u32[2];
                v832.i64[1] = v838.u32[3];
                v841 = (int64x2_t)vandq_s8(v832, v833);
                v842 = vmovl_high_u16(v837);
                v832.i64[0] = v842.u32[0];
                v832.i64[1] = v842.u32[1];
                v843 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v842.u32[2];
                v832.i64[1] = v842.u32[3];
                v844 = (int64x2_t)vandq_s8(v832, v833);
                v845 = (uint8x16_t)vceqzq_s8(v828);
                v846 = vmovl_u8(*(uint8x8_t *)v845.i8);
                v847 = vmovl_u16(*(uint16x4_t *)v846.i8);
                v832.i64[0] = v847.u32[0];
                v832.i64[1] = v847.u32[1];
                v848 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v847.u32[2];
                v832.i64[1] = v847.u32[3];
                v849 = (int64x2_t)vandq_s8(v832, v833);
                v850 = vmovl_high_u16(v846);
                v832.i64[0] = v850.u32[0];
                v832.i64[1] = v850.u32[1];
                v851 = (int64x2_t)vandq_s8(v832, v833);
                v852 = vmovl_high_u8(v845);
                v853 = vmovl_u16(*(uint16x4_t *)v852.i8);
                v832.i64[0] = v853.u32[0];
                v832.i64[1] = v853.u32[1];
                v854 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v850.u32[2];
                v832.i64[1] = v850.u32[3];
                v855 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v853.u32[2];
                v832.i64[1] = v853.u32[3];
                v856 = (int64x2_t)vandq_s8(v832, v833);
                v857 = vmovl_high_u16(v852);
                v832.i64[0] = v857.u32[0];
                v832.i64[1] = v857.u32[1];
                v858 = (int64x2_t)vandq_s8(v832, v833);
                v832.i64[0] = v857.u32[2];
                v832.i64[1] = v857.u32[3];
                v818 = vaddq_s64(v818, v844);
                v817 = vaddq_s64(v817, v843);
                v816 = vaddq_s64(v816, v841);
                v814 = vaddq_s64(v814, v840);
                v815 = vaddq_s64(v815, v839);
                v812 = vaddq_s64(v812, v836);
                v810 = vaddq_s64(v810, v834);
                v809 = vaddq_s64(v809, v1246);
                v826 = vaddq_s64(v826, (int64x2_t)vandq_s8(v832, v833));
                v825 = vaddq_s64(v825, v858);
                v824 = vaddq_s64(v824, v856);
                v822 = vaddq_s64(v822, v855);
                v823 = vaddq_s64(v823, v854);
                v821 = vaddq_s64(v821, v851);
                v820 = vaddq_s64(v820, v849);
                v819 = vaddq_s64(v819, v848);
                v811 += 2;
                v813 -= 32;
              }
              while (v813);
              v800 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v819, v809), vaddq_s64(v823, v815)), vaddq_s64(vaddq_s64(v821, v812), vaddq_s64(v825, v817))), vaddq_s64(vaddq_s64(vaddq_s64(v820, v810), vaddq_s64(v824, v816)), vaddq_s64(vaddq_s64(v822, v814), vaddq_s64(v826, v818)))));
              if (v799 == v801)
              {
                v158 = 1.0;
                v159 = -1.0;
                _S14 = v1231;
                _S15 = v1229;
                goto LABEL_996;
              }
              v158 = 1.0;
              v159 = -1.0;
              _S14 = v1231;
              _S15 = v1229;
              if ((v799 & 0x18) == 0)
              {
                v798 = (char *)v1253[1] + v801;
                goto LABEL_993;
              }
            }
            else
            {
              v800 = 0;
              v801 = 0;
            }
            v867 = v799 & 0xFFFFFFFFFFFFFFF8;
            v868 = 0uLL;
            v869 = (int64x2_t)(unint64_t)v800;
            v870 = v801 - (v799 & 0xFFFFFFFFFFFFFFF8);
            v871 = (int8x8_t *)((char *)v1253[1] + v801);
            v872 = 0uLL;
            v873 = 0uLL;
            do
            {
              v874 = *v871++;
              v875 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v874, (int8x8_t)0x303030303030303)));
              v876 = vmovl_u16(*(uint16x4_t *)v875.i8);
              v877.i64[0] = v876.u32[0];
              v877.i64[1] = v876.u32[1];
              v878 = (int8x16_t)vdupq_n_s64(1uLL);
              v879 = (int64x2_t)vandq_s8(v877, v878);
              v877.i64[0] = v876.u32[2];
              v877.i64[1] = v876.u32[3];
              v880 = (int64x2_t)vandq_s8(v877, v878);
              v881 = vmovl_high_u16(v875);
              v877.i64[0] = v881.u32[0];
              v877.i64[1] = v881.u32[1];
              v882 = (int64x2_t)vandq_s8(v877, v878);
              v877.i64[0] = v881.u32[2];
              v877.i64[1] = v881.u32[3];
              v873 = vaddq_s64(v873, (int64x2_t)vandq_s8(v877, v878));
              v872 = vaddq_s64(v872, v882);
              v868 = vaddq_s64(v868, v880);
              v869 = vaddq_s64(v869, v879);
              v870 += 8;
            }
            while (v870);
            v800 = vaddvq_s64(vaddq_s64(vaddq_s64(v869, v872), vaddq_s64(v868, v873)));
            if (v799 != v867)
            {
              v798 = (char *)v1253[1] + v867;
              goto LABEL_993;
            }
          }
          else
          {
            v800 = 0;
            do
            {
LABEL_993:
              v883 = *v798++;
              if ((v883 & 3) == 0)
                ++v800;
            }
            while (v798 != *(char **)v1254);
          }
LABEL_996:
          v884 = 6 * v1222;
          v885 = 2 * (v800 + v1222);
          if (*v1234)
          {
            for (j = 0; j != (unsigned __int16)*v1234; ++j)
            {
              v889 = (char *)v1316[0] + 48 * j;
              v890 = (int8x16_t *)v889[3];
              v891 = (int8x16_t *)v889[4];
              if (v890 == v891)
              {
                v887 = 0;
              }
              else
              {
                v892 = (char *)v891 - (char *)v890;
                if ((unint64_t)((char *)v891 - (char *)v890) < 8)
                {
                  v887 = 0;
                  goto LABEL_1015;
                }
                if (v892 >= 0x20)
                {
                  v893 = 0uLL;
                  v144 = v892 & 0xFFFFFFFFFFFFFFE0;
                  v894 = 0uLL;
                  v895 = v890 + 1;
                  v896 = 0uLL;
                  v897 = v892 & 0xFFFFFFFFFFFFFFE0;
                  v898 = 0uLL;
                  v899 = 0uLL;
                  v900 = 0uLL;
                  v901 = 0uLL;
                  v902 = 0uLL;
                  v903 = 0uLL;
                  v904 = 0uLL;
                  v905 = 0uLL;
                  v906 = 0uLL;
                  v907 = 0uLL;
                  v908 = 0uLL;
                  v909 = 0uLL;
                  v910 = 0uLL;
                  do
                  {
                    v911.i64[0] = 0x303030303030303;
                    v911.i64[1] = 0x303030303030303;
                    v912 = vandq_s8(*v895, v911);
                    v913 = (uint8x16_t)vceqzq_s8(vandq_s8(v895[-1], v911));
                    v914 = vmovl_u8(*(uint8x8_t *)v913.i8);
                    v915 = vmovl_u16(*(uint16x4_t *)v914.i8);
                    v916.i64[0] = v915.u32[0];
                    v916.i64[1] = v915.u32[1];
                    v917 = (int8x16_t)vdupq_n_s64(1uLL);
                    v1247 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v915.u32[2];
                    v916.i64[1] = v915.u32[3];
                    v918 = (int64x2_t)vandq_s8(v916, v917);
                    v919 = vmovl_high_u16(v914);
                    v916.i64[0] = v919.u32[0];
                    v916.i64[1] = v919.u32[1];
                    v920 = (int64x2_t)vandq_s8(v916, v917);
                    v921 = vmovl_high_u8(v913);
                    v922 = vmovl_u16(*(uint16x4_t *)v921.i8);
                    v916.i64[0] = v922.u32[0];
                    v916.i64[1] = v922.u32[1];
                    v923 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v919.u32[2];
                    v916.i64[1] = v919.u32[3];
                    v924 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v922.u32[2];
                    v916.i64[1] = v922.u32[3];
                    v925 = (int64x2_t)vandq_s8(v916, v917);
                    v926 = vmovl_high_u16(v921);
                    v916.i64[0] = v926.u32[0];
                    v916.i64[1] = v926.u32[1];
                    v927 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v926.u32[2];
                    v916.i64[1] = v926.u32[3];
                    v928 = (int64x2_t)vandq_s8(v916, v917);
                    v929 = (uint8x16_t)vceqzq_s8(v912);
                    v930 = vmovl_u8(*(uint8x8_t *)v929.i8);
                    v931 = vmovl_u16(*(uint16x4_t *)v930.i8);
                    v916.i64[0] = v931.u32[0];
                    v916.i64[1] = v931.u32[1];
                    v932 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v931.u32[2];
                    v916.i64[1] = v931.u32[3];
                    v933 = (int64x2_t)vandq_s8(v916, v917);
                    v934 = vmovl_high_u16(v930);
                    v916.i64[0] = v934.u32[0];
                    v916.i64[1] = v934.u32[1];
                    v935 = (int64x2_t)vandq_s8(v916, v917);
                    v936 = vmovl_high_u8(v929);
                    v937 = vmovl_u16(*(uint16x4_t *)v936.i8);
                    v916.i64[0] = v937.u32[0];
                    v916.i64[1] = v937.u32[1];
                    v938 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v934.u32[2];
                    v916.i64[1] = v934.u32[3];
                    v939 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v937.u32[2];
                    v916.i64[1] = v937.u32[3];
                    v940 = (int64x2_t)vandq_s8(v916, v917);
                    v941 = vmovl_high_u16(v936);
                    v916.i64[0] = v941.u32[0];
                    v916.i64[1] = v941.u32[1];
                    v942 = (int64x2_t)vandq_s8(v916, v917);
                    v916.i64[0] = v941.u32[2];
                    v916.i64[1] = v941.u32[3];
                    v902 = vaddq_s64(v902, v928);
                    v901 = vaddq_s64(v901, v927);
                    v900 = vaddq_s64(v900, v925);
                    v898 = vaddq_s64(v898, v924);
                    v899 = vaddq_s64(v899, v923);
                    v896 = vaddq_s64(v896, v920);
                    v894 = vaddq_s64(v894, v918);
                    v893 = vaddq_s64(v893, v1247);
                    v910 = vaddq_s64(v910, (int64x2_t)vandq_s8(v916, v917));
                    v909 = vaddq_s64(v909, v942);
                    v908 = vaddq_s64(v908, v940);
                    v906 = vaddq_s64(v906, v939);
                    v907 = vaddq_s64(v907, v938);
                    v905 = vaddq_s64(v905, v935);
                    v904 = vaddq_s64(v904, v933);
                    v903 = vaddq_s64(v903, v932);
                    v895 += 2;
                    v897 -= 32;
                  }
                  while (v897);
                  v887 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v903, v893), vaddq_s64(v907, v899)), vaddq_s64(vaddq_s64(v905, v896), vaddq_s64(v909, v901))), vaddq_s64(vaddq_s64(vaddq_s64(v904, v894), vaddq_s64(v908, v900)), vaddq_s64(vaddq_s64(v906, v898), vaddq_s64(v910, v902)))));
                  if (v892 == v144)
                  {
                    v158 = 1.0;
                    v159 = -1.0;
                    _S14 = v1231;
                    _S15 = v1229;
                    goto LABEL_999;
                  }
                  v158 = 1.0;
                  v159 = -1.0;
                  _S14 = v1231;
                  _S15 = v1229;
                  if ((v892 & 0x18) == 0)
                  {
                    v890 = (int8x16_t *)((char *)v890 + v144);
                    do
                    {
LABEL_1015:
                      v958 = v890->i8[0];
                      v890 = (int8x16_t *)((char *)v890 + 1);
                      if ((v958 & 3) == 0)
                        ++v887;
                    }
                    while (v890 != v891);
                    goto LABEL_999;
                  }
                }
                else
                {
                  v887 = 0;
                  v144 = 0;
                }
                v943 = v892 & 0xFFFFFFFFFFFFFFF8;
                v944 = 0uLL;
                v945 = (int64x2_t)(unint64_t)v887;
                v946 = v144 - (v892 & 0xFFFFFFFFFFFFFFF8);
                v144 += (unint64_t)v890;
                v947 = 0uLL;
                v948 = 0uLL;
                do
                {
                  v949 = *(int8x8_t *)v144;
                  v144 += 8;
                  v950 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v949, (int8x8_t)0x303030303030303)));
                  v951 = vmovl_u16(*(uint16x4_t *)v950.i8);
                  v952.i64[0] = v951.u32[0];
                  v952.i64[1] = v951.u32[1];
                  v953 = (int8x16_t)vdupq_n_s64(1uLL);
                  v954 = (int64x2_t)vandq_s8(v952, v953);
                  v952.i64[0] = v951.u32[2];
                  v952.i64[1] = v951.u32[3];
                  v955 = (int64x2_t)vandq_s8(v952, v953);
                  v956 = vmovl_high_u16(v950);
                  v952.i64[0] = v956.u32[0];
                  v952.i64[1] = v956.u32[1];
                  v957 = (int64x2_t)vandq_s8(v952, v953);
                  v952.i64[0] = v956.u32[2];
                  v952.i64[1] = v956.u32[3];
                  v948 = vaddq_s64(v948, (int64x2_t)vandq_s8(v952, v953));
                  v947 = vaddq_s64(v947, v957);
                  v944 = vaddq_s64(v944, v955);
                  v945 = vaddq_s64(v945, v954);
                  v946 += 8;
                }
                while (v946);
                v887 = vaddvq_s64(vaddq_s64(vaddq_s64(v945, v947), vaddq_s64(v944, v948)));
                if (v892 != v943)
                {
                  v890 = (int8x16_t *)((char *)v890 + v943);
                  goto LABEL_1015;
                }
              }
LABEL_999:
              v888 = v889[1] - *v889;
              v884 += v888 >> 1;
              v885 += 2 * (v887 - 0x5555555555555555 * (v888 >> 2));
            }
          }
          v1273 = v885 + v649;
          if (v884)
          {
            v959 = v1299;
            if (v884 < 0x10)
            {
              v960 = 0;
              goto LABEL_1025;
            }
            v960 = v884 & 0xFFFFFFFFFFFFFFF0;
            v961 = vdupq_n_s16(v649);
            v962 = (int16x8_t *)(v1299 + 2 * v625 + 16);
            v963 = v884 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v962[-1] = v961;
              *v962 = v961;
              v962 += 2;
              v963 -= 16;
            }
            while (v963);
            v625 += v960;
            if (v884 != v960)
            {
LABEL_1025:
              v964 = v884 - v960;
              do
              {
                *(_WORD *)(v959 + 2 * v625++) = v649;
                --v964;
              }
              while (v964);
            }
          }
          v1274 = v625;
        }
LABEL_1028:
        if (v1239 != 0.0)
        {
          if (v1242 != *(char **)&v1239)
          {
            v965 = v1242;
            do
            {
              v967 = (void *)*((_QWORD *)v965 - 3);
              v965 -= 24;
              v966 = v967;
              if (v967)
              {
                *((_QWORD *)v1242 - 2) = v966;
                operator delete(v966);
              }
              v1242 = v965;
            }
            while (v965 != *(char **)&v1239);
          }
          operator delete(*(void **)&v1239);
        }
        if (v1264)
        {
          v1265 = (char *)v1264;
          operator delete(v1264);
        }
        v104 = v1195;
        if (v1269)
          operator delete(v1269);
        v968 = (char *)v1316[0];
        if (v1316[0])
        {
          for (k = (char *)v1316[1]; k != v968; k -= 48)
          {
            v970 = (void *)*((_QWORD *)k - 3);
            if (v970)
            {
              *((_QWORD *)k - 2) = v970;
              operator delete(v970);
            }
            v971 = (void *)*((_QWORD *)k - 6);
            if (v971)
            {
              *((_QWORD *)k - 5) = v971;
              operator delete(v971);
            }
          }
          operator delete(v968);
        }
        if (v1253[1])
          operator delete(v1253[1]);
        if (v1216)
          operator delete(v1216);
        if (++v1217 >= (unint64_t)*(unsigned __int16 *)(v1196 + 34))
        {
          v972 = v1274;
          v973 = v1200;
          v170 = v1180;
          goto LABEL_1054;
        }
      }
      if (v237 >> 61)
        abort();
      v277 = (float *)operator new(8 * v237);
      v278 = v277;
      if (v237 <= 1)
        v279 = 1;
      else
        v279 = v237;
      if (v279 >= 0x1C)
      {
        v281 = 0;
        v280 = 0;
        v321 = 2 * (v279 - 1);
        if (&v277[v321 + 1] < v277 + 1 || &v277[v321] < v277 || (_DWORD)v279 == 0x100000000 || (v279 - 1) >> 32)
          goto LABEL_258;
        if ((unint64_t)v277 >= v258 + 12 * v279 - 4 || v258 >= (unint64_t)&v277[2 * v279])
        {
          v280 = v279 & 0xFFFFFFFFFFFFFFFELL;
          v322 = (int *)(v258 + 16);
          v323 = v277;
          v324 = v279 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v219.val[0].i32[0] = *(v322 - 4);
            v219.val[0].i32[1] = *(v322 - 1);
            v325 = *(v322 - 3);
            v326 = *v322;
            vst2_f32(v323, v219);
            v323 += 4;
            v322 += 6;
            v324 -= 2;
          }
          while (v324);
          v281 = v279 & 0xFFFFFFFE;
          if (v279 == v280)
            goto LABEL_260;
          goto LABEL_258;
        }
      }
      v280 = 0;
      v281 = 0;
LABEL_258:
      v282 = v281 + 1;
      do
      {
        v219.val[0] = *(float32x2_t *)(v258 + 12 * v280);
        *(float32x2_t *)&v277[2 * v280] = v219.val[0];
        v280 = v282++;
      }
      while (v237 > v280);
LABEL_260:
      v283 = (char *)&v277[2 * v237];
      v284 = v283;
      goto LABEL_262;
    }
    v1199.i64[0] = 0x80000000800000;
    v973 = xmmword_19FFB3470;
    v972 = v1274;
LABEL_1054:
    v974 = *(_QWORD *)(v146 + 960);
    v975 = *(_QWORD *)(v146 + 1032);
    v976 = *(_QWORD *)(v146 + 1040);
    v1201 = (int8x16_t)v973;
    if (v975 >= v976)
    {
      v982 = *(_QWORD *)(v146 + 1024);
      v983 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v975 - v982) >> 4);
      v984 = v983 + 1;
      if (v983 + 1 > 0x333333333333333)
        abort();
      v985 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v976 - v982) >> 4);
      if (2 * v985 > v984)
        v984 = 2 * v985;
      if (v985 >= 0x199999999999999)
        v986 = 0x333333333333333;
      else
        v986 = v984;
      if (v986)
      {
        if (v986 > 0x333333333333333)
          goto LABEL_1332;
        v987 = v972;
        v988 = (char *)operator new(80 * v986);
        v973 = (__int128)v1201;
        v972 = v987;
      }
      else
      {
        v988 = 0;
      }
      v992 = &v988[80 * v983];
      v993 = *(_QWORD *)(v974 - 16);
      v994 = *(std::__shared_weak_count **)(v974 - 8);
      if (v994)
      {
        v995 = (unint64_t *)&v994->__shared_owners_;
        do
          v996 = __ldxr(v995);
        while (__stxr(v996 + 1, v995));
        *(_QWORD *)v992 = v993;
        *((_QWORD *)v992 + 1) = v994;
        do
          v997 = __ldxr(v995);
        while (__stxr(v997 + 1, v995));
      }
      else
      {
        *(_QWORD *)v992 = v993;
        *((_QWORD *)v992 + 1) = 0;
      }
      v998 = &v988[80 * v983];
      *((_QWORD *)v998 + 2) = v170;
      *((_QWORD *)v998 + 3) = v972;
      v998[32] = 3;
      *(_OWORD *)(v998 + 36) = v973;
      *(_QWORD *)(v998 + 52) = v1199.i64[0];
      *((_WORD *)v998 + 30) = 257;
      *((_QWORD *)v998 + 8) = 0;
      *((_QWORD *)v998 + 9) = 0;
      v146 = v1211;
      if (v994)
      {
        v999 = (unint64_t *)&v994->__shared_owners_;
        do
          v1000 = __ldaxr(v999);
        while (__stlxr(v1000 - 1, v999));
        if (!v1000)
        {
          ((void (*)(std::__shared_weak_count *))v994->__on_zero_shared)(v994);
          std::__shared_weak_count::__release_weak(v994);
        }
      }
      v1001 = &v988[80 * v986];
      v991 = v992 + 80;
      v1002 = *(char **)(v1211 + 1032);
      v1003 = *(char **)(v1211 + 1024);
      if (v1002 != v1003)
      {
        do
        {
          v1004 = *((_OWORD *)v1002 - 5);
          v1002 -= 80;
          *((_OWORD *)v992 - 5) = v1004;
          v992 -= 80;
          *(_QWORD *)v1002 = 0;
          *((_QWORD *)v1002 + 1) = 0;
          v1005 = *((_OWORD *)v1002 + 1);
          v1006 = *((_OWORD *)v1002 + 2);
          *(_OWORD *)(v992 + 46) = *(_OWORD *)(v1002 + 46);
          *((_OWORD *)v992 + 1) = v1005;
          *((_OWORD *)v992 + 2) = v1006;
          *((_OWORD *)v992 + 4) = *((_OWORD *)v1002 + 4);
          *((_QWORD *)v1002 + 8) = 0;
          *((_QWORD *)v1002 + 9) = 0;
        }
        while (v1002 != v1003);
        v1002 = *(char **)(v1211 + 1024);
        v1007 = *(char **)(v1211 + 1032);
        *(_QWORD *)(v1211 + 1024) = v992;
        *(_QWORD *)(v1211 + 1032) = v991;
        *(_QWORD *)(v1211 + 1040) = v1001;
        while (2)
        {
          if (v1007 == v1002)
            goto LABEL_1107;
          v1008 = (std::__shared_weak_count *)*((_QWORD *)v1007 - 1);
          if (!v1008)
            goto LABEL_1099;
          v1009 = (unint64_t *)&v1008->__shared_owners_;
          do
            v1010 = __ldaxr(v1009);
          while (__stlxr(v1010 - 1, v1009));
          if (!v1010)
          {
            ((void (*)(std::__shared_weak_count *))v1008->__on_zero_shared)(v1008);
            std::__shared_weak_count::__release_weak(v1008);
            v1011 = (std::__shared_weak_count *)*((_QWORD *)v1007 - 9);
            if (v1011)
            {
LABEL_1100:
              v1012 = (unint64_t *)&v1011->__shared_owners_;
              do
                v1013 = __ldaxr(v1012);
              while (__stlxr(v1013 - 1, v1012));
              if (!v1013)
              {
                ((void (*)(std::__shared_weak_count *))v1011->__on_zero_shared)(v1011);
                std::__shared_weak_count::__release_weak(v1011);
              }
            }
          }
          else
          {
LABEL_1099:
            v1011 = (std::__shared_weak_count *)*((_QWORD *)v1007 - 9);
            if (v1011)
              goto LABEL_1100;
          }
          v1007 -= 80;
          continue;
        }
      }
      *(_QWORD *)(v1211 + 1024) = v992;
      *(_QWORD *)(v1211 + 1032) = v991;
      *(_QWORD *)(v1211 + 1040) = v1001;
LABEL_1107:
      if (v1002)
        operator delete(v1002);
    }
    else
    {
      v977 = *(_QWORD *)(v974 - 16);
      v978 = *(std::__shared_weak_count **)(v974 - 8);
      if (v978)
      {
        v979 = (unint64_t *)&v978->__shared_owners_;
        do
          v980 = __ldxr(v979);
        while (__stxr(v980 + 1, v979));
        *(_QWORD *)v975 = v977;
        *(_QWORD *)(v975 + 8) = v978;
        do
          v981 = __ldxr(v979);
        while (__stxr(v981 + 1, v979));
      }
      else
      {
        *(_QWORD *)v975 = v977;
        *(_QWORD *)(v975 + 8) = 0;
      }
      *(_QWORD *)(v975 + 16) = v170;
      *(_QWORD *)(v975 + 24) = v972;
      *(_BYTE *)(v975 + 32) = 3;
      *(_OWORD *)(v975 + 36) = v973;
      *(_QWORD *)(v975 + 52) = v1199.i64[0];
      *(_WORD *)(v975 + 60) = 257;
      *(_QWORD *)(v975 + 64) = 0;
      *(_QWORD *)(v975 + 72) = 0;
      if (v978)
      {
        v989 = (unint64_t *)&v978->__shared_owners_;
        do
          v990 = __ldaxr(v989);
        while (__stlxr(v990 - 1, v989));
        if (!v990)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v978->__on_zero_shared)(v978, v144);
          std::__shared_weak_count::__release_weak(v978);
        }
      }
      v991 = (char *)(v975 + 80);
    }
    *(_QWORD *)(v146 + 1032) = v991;
    v1014 = *(gdc::Registry **)(v146 + 1320);
    v1015 = (uint64_t *)(v991 - 44);
    if (*((_BYTE *)a3 + 72))
      break;
    *(_QWORD *)&v1252 = v991 - 80;
    BYTE8(v1252) = 0;
    LOBYTE(v1253[1]) = 0;
    v1254[0] = 1;
    *(_OWORD *)&v1254[4] = xmmword_19FFB3470;
    v1255 = 0x80000000800000;
    v1257 = 0;
    v1256 = 1065353216;
    v1259 = 0;
    v1258 = 0x3F80000000000000;
    v1260 = 0;
    v1263 = 0;
    v1262 = 0;
    v1261 = 1065353216;
    *(_QWORD *)buf = 1065353216;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0x3F80000000000000;
    *(_QWORD *)&buf[24] = 0;
    *(_QWORD *)&buf[32] = 0;
    *(_QWORD *)&v1319[4] = 0;
    v1320 = 0;
    *(_DWORD *)v1319 = 1065353216;
    v1321 = 1065353216;
    *(_OWORD *)v1316 = xmmword_19FFB3470;
    v1317 = 0x80000000800000;
    v1322 = COERCE_DOUBLE(&off_1E42D8AB0);
    v1323 = COERCE_DOUBLE(v1316);
    v1324 = buf;
    v1325 = (void **)&v1322;
    v1021.n128_u64[0] = (unint64_t)gm::Box<float,3>::forEachCorner(v1015, (uint64_t)&v1322);
    v1022 = (double *)v1325;
    if (v1325 == (void **)&v1322)
    {
      v1022 = &v1322;
      v1023 = 4;
      m = a3;
      goto LABEL_1138;
    }
    m = a3;
    if (v1325)
    {
      v1023 = 5;
LABEL_1138:
      (*(void (**)(__n128))(*(_QWORD *)v1022 + 8 * v1023))(v1021);
    }
    *(_OWORD *)&v1254[4] = *(_OWORD *)v1316;
    v1255 = v1317;
    v1322 = *(double *)a4;
    v1316[0] = *(void **)(v1196 + 24);
    *(_QWORD *)&buf[8] = 0x100000000000000;
    *(_QWORD *)buf = 0;
    LOBYTE(v1264) = 1;
    LOBYTE(v1251) = 3;
    *(float *)&v1269 = v1176;
    v1026 = (void *)gdc::Registry::create(v1014);
    v1046 = (uint64_t *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(v1046, (uint64_t)v1026, &v1252);
    v1047 = (uint64_t *)gdc::Registry::storage<md::components::PendingMaterial>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v1047, (uint64_t)v1026, &v1322);
    v1048 = (uint64_t *)gdc::Registry::storage<md::components::Building>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v1048, (uint64_t)v1026, v1316);
    v1049 = (uint64_t *)gdc::Registry::storage<md::components::ClientState>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::ClientState>::emplace(v1049, (uint64_t)v1026, (uint64_t)buf);
    v1050 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v1050, (uint64_t)v1026, &v1264);
    v1051 = (uint64_t *)gdc::Registry::storage<md::components::SupportsDebugHighlight>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1051, (uint64_t)v1026);
    v1052 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v1052, (uint64_t)v1026, &v1251);
    v1053 = (uint64_t *)gdc::Registry::storage<md::components::PositionScaleFactor>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1053, (uint64_t)v1026, &v1269);
    if (!buf[14] && *(_QWORD *)buf)
    {
      v1055 = gss::Allocator::instance(v1054);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1055 + 40))(v1055, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
    }
LABEL_1158:
    if (!*(_QWORD *)a9)
      goto LABEL_1225;
    v1069 = gdc::Registry::storage<md::components::GeneratedTexture>(*(_QWORD *)(v1211 + 1320));
    v1070 = (_QWORD *)v1069;
    v1072 = *a9;
    v1071 = a9[1];
    v1322 = *a9;
    v1323 = v1071;
    if (v1071 == 0.0)
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      v1073 = (unint64_t *)(*(_QWORD *)&v1071 + 8);
      do
        v1074 = __ldxr(v1073);
      while (__stxr(v1074 + 1, v1073));
      *(double *)&buf[8] = v1071;
      do
        v1075 = __ldxr(v1073);
      while (__stxr(v1075 + 1, v1073));
    }
    *(double *)buf = v1072;
    v1269 = v1026;
    v1076 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v1069 + 32), (uint64_t)&v1269);
    if ((v144 & 1) != 0)
    {
      v1083 = (double *)v1070[11];
      v1082 = v1070[12];
      if ((unint64_t)v1083 < v1082)
      {
        *v1083 = v1072;
        v1083[1] = v1071;
        if (v1071 != 0.0)
        {
          v1084 = (unint64_t *)(*(_QWORD *)&v1071 + 8);
          do
            v1085 = __ldxr(v1084);
          while (__stxr(v1085 + 1, v1084));
        }
        v1077 = (uint64_t)(v1083 + 2);
        v104 = v1195;
        goto LABEL_1206;
      }
      v1086 = (double *)v1070[10];
      v1087 = ((char *)v1083 - (char *)v1086) >> 4;
      v1088 = v1087 + 1;
      if ((unint64_t)(v1087 + 1) >> 60)
        abort();
      v1089 = v1082 - (_QWORD)v1086;
      if (v1089 >> 3 > v1088)
        v1088 = v1089 >> 3;
      if ((unint64_t)v1089 >= 0x7FFFFFFFFFFFFFF0)
        v1090 = 0xFFFFFFFFFFFFFFFLL;
      else
        v1090 = v1088;
      if (v1090)
      {
        if (v1090 >> 60)
          goto LABEL_1332;
        v1091 = (char *)operator new(16 * v1090);
      }
      else
      {
        v1091 = 0;
      }
      v1092 = (double *)&v1091[16 * v1087];
      *v1092 = v1072;
      v1092[1] = v1071;
      if (v1071 == 0.0)
      {
        v104 = v1195;
      }
      else
      {
        v1093 = (unint64_t *)(*(_QWORD *)&v1071 + 8);
        v104 = v1195;
        do
          v1094 = __ldxr(v1093);
        while (__stxr(v1094 + 1, v1093));
        v1086 = (double *)v1070[10];
        v1083 = (double *)v1070[11];
      }
      v1095 = &v1091[16 * v1090];
      v1077 = (uint64_t)(v1092 + 2);
      if (v1083 == v1086)
      {
        v1070[10] = v1092;
        v1070[11] = v1077;
        v1070[12] = v1095;
        if (v1086)
          goto LABEL_1205;
      }
      else
      {
        do
        {
          v1096 = *((_OWORD *)v1083 - 1);
          v1083 -= 2;
          *((_OWORD *)v1092 - 1) = v1096;
          v1092 -= 2;
          *v1083 = 0.0;
          v1083[1] = 0.0;
        }
        while (v1083 != v1086);
        v1086 = (double *)v1070[10];
        v1097 = (double *)v1070[11];
        v1070[10] = v1092;
        v1070[11] = v1077;
        v1070[12] = v1095;
        if (v1097 != v1086)
        {
          do
          {
            v1098 = (std::__shared_weak_count *)*((_QWORD *)v1097 - 1);
            if (v1098)
            {
              v1099 = (unint64_t *)&v1098->__shared_owners_;
              do
                v1100 = __ldaxr(v1099);
              while (__stlxr(v1100 - 1, v1099));
              if (!v1100)
              {
                ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
                std::__shared_weak_count::__release_weak(v1098);
              }
            }
            v1097 -= 2;
          }
          while (v1097 != v1086);
          v104 = v1195;
        }
        if (!v1086)
          goto LABEL_1206;
LABEL_1205:
        operator delete(v1086);
      }
LABEL_1206:
      v1070[11] = v1077;
      goto LABEL_1207;
    }
    v1077 = v1070[10] + 2 * ((_QWORD)v1076 - v1070[7]);
    v1078 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v1079 = *(std::__shared_weak_count **)(v1077 + 8);
    *(_OWORD *)v1077 = v1078;
    if (v1079)
    {
      v1080 = (unint64_t *)&v1079->__shared_owners_;
      do
        v1081 = __ldaxr(v1080);
      while (__stlxr(v1081 - 1, v1080));
      v104 = v1195;
      if (!v1081)
      {
        ((void (*)(std::__shared_weak_count *))v1079->__on_zero_shared)(v1079);
        std::__shared_weak_count::__release_weak(v1079);
      }
    }
    else
    {
      v104 = v1195;
    }
LABEL_1207:
    v1101 = (void *)v1070[31];
    if (v1077 == v1070[11])
    {
      v1104 = (_QWORD *)v1070[22];
      for (m = a3; v1104; v1104 = (_QWORD *)*v1104)
      {
        *(_QWORD *)&v1252 = &v1269;
        *((_QWORD *)&v1252 + 1) = 1;
        v1316[0] = v1101;
        v1105 = v1104[6];
        if (!v1105)
          goto LABEL_1337;
        (*(void (**)(uint64_t, void **, __int128 *))(*(_QWORD *)v1105 + 48))(v1105, v1316, &v1252);
      }
    }
    else
    {
      v1102 = (_QWORD *)v1070[16];
      for (m = a3; v1102; v1102 = (_QWORD *)*v1102)
      {
        *(_QWORD *)&v1252 = &v1269;
        *((_QWORD *)&v1252 + 1) = 1;
        v1316[0] = v1101;
        v1103 = v1102[6];
        if (!v1103)
          goto LABEL_1337;
        (*(void (**)(uint64_t, void **, __int128 *))(*(_QWORD *)v1103 + 48))(v1103, v1316, &v1252);
      }
    }
    v1106 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_1219;
    v1107 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v1108 = __ldaxr(v1107);
    while (__stlxr(v1108 - 1, v1107));
    if (!v1108)
    {
      ((void (*)(std::__shared_weak_count *))v1106->__on_zero_shared)(v1106);
      std::__shared_weak_count::__release_weak(v1106);
      v1109 = *(std::__shared_weak_count **)&v1323;
      if (v1323 != 0.0)
      {
LABEL_1220:
        v1110 = (unint64_t *)&v1109->__shared_owners_;
        do
          v1111 = __ldaxr(v1110);
        while (__stlxr(v1111 - 1, v1110));
        if (!v1111)
        {
          ((void (*)(std::__shared_weak_count *))v1109->__on_zero_shared)(v1109);
          std::__shared_weak_count::__release_weak(v1109);
        }
      }
    }
    else
    {
LABEL_1219:
      v1109 = *(std::__shared_weak_count **)&v1323;
      if (v1323 != 0.0)
        goto LABEL_1220;
    }
LABEL_1225:
    if ((*(_BYTE *)(v1196 + 36) & 1) != 0)
    {
      v1112 = (uint64_t *)gdc::Registry::storage<md::components::Collapsible>(*(_QWORD *)(v1211 + 1320));
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1112, (uint64_t)v1026);
    }
    v160 = (float32x4_t)v1201;
    v160.i32[3] = HIDWORD(*(unsigned __int128 *)v1178);
    v161 = *(float32x4_t *)v1178;
    v161.i32[3] = v1201.i32[3];
    *v1178 = vbslq_s8((int8x16_t)vcgtq_f32(v161, v160), v1201, *v1178);
    _D1 = *(double *)v1199.i64;
    _D0 = COERCE_DOUBLE(vmaxnm_f32(*(float32x2_t *)(v1211 + 1196), *(float32x2_t *)v1199.i8));
    *(double *)(v1211 + 1196) = _D0;
    v155 = v1187 + 1;
    v154 = *m;
    v146 = v1211;
    if (v1187 + 1 >= (unint64_t)((m[1] - *m) >> 3))
    {
      v142 = v1279;
      v152 = v1173;
LABEL_1230:
      if (v142)
      {
        v1113 = v1276;
        v1114 = v1277;
        if (v1277 != v1276)
        {
          v1115 = (_QWORD *)*((_QWORD *)&v1275 + 1);
          v1116 = v1278;
          v1117 = HIBYTE(v1278);
          if ((_QWORD)v1275 && *(_BYTE *)(*((_QWORD *)&v1275 + 1) + 17) != 2)
          {
            (*(void (**)(void))(*(_QWORD *)v1275 + 64))();
            v152 = v1173;
          }
          if (v1116 && !v1117)
          {
            v1119 = v1115[7];
            v1118 = v1115[8];
            if (v1118 == v1119)
              v1119 = v1115[10] - v1115[9];
            if (v1113 < v1119)
              v1119 = v1113;
            if (v1118 <= v1114)
              v1118 = v1114;
            if (v1118 == v1119)
              v1118 = v1119 + v1115[10] - v1115[9];
            v1115[7] = v1119;
            v1115[8] = v1118;
          }
        }
      }
      if (v1284)
      {
        v1120 = v1281;
        v1121 = v1282;
        if (v1282 != v1281)
        {
          v1122 = (_QWORD *)*((_QWORD *)&v1280 + 1);
          v1123 = v1283;
          v1124 = HIBYTE(v1283);
          if ((_QWORD)v1280 && *(_BYTE *)(*((_QWORD *)&v1280 + 1) + 17) != 2)
          {
            (*(void (**)(void))(*(_QWORD *)v1280 + 64))();
            v152 = v1173;
          }
          if (v1123 && !v1124)
          {
            v1126 = v1122[7];
            v1125 = v1122[8];
            if (v1125 == v1126)
              v1126 = v1122[10] - v1122[9];
            if (v1120 < v1126)
              v1126 = v1120;
            if (v1125 <= v1121)
              v1125 = v1121;
            if (v1125 == v1126)
              v1125 = v1126 + v1122[10] - v1122[9];
            v1122[7] = v1126;
            v1122[8] = v1125;
          }
        }
      }
      if (v1289)
      {
        v1127 = v1286;
        v1128 = v1287;
        if (v1287 != v1286)
        {
          v1129 = (_QWORD *)*((_QWORD *)&v1285 + 1);
          v1130 = v1288;
          v1131 = HIBYTE(v1288);
          if ((_QWORD)v1285 && *(_BYTE *)(*((_QWORD *)&v1285 + 1) + 17) != 2)
          {
            (*(void (**)(void))(*(_QWORD *)v1285 + 64))();
            v152 = v1173;
          }
          if (v1130 && !v1131)
          {
            v1133 = v1129[7];
            v1132 = v1129[8];
            if (v1132 == v1133)
              v1133 = v1129[10] - v1129[9];
            if (v1127 < v1133)
              v1133 = v1127;
            if (v1132 <= v1128)
              v1132 = v1128;
            if (v1132 == v1133)
              v1132 = v1133 + v1129[10] - v1129[9];
            v1129[7] = v1133;
            v1129[8] = v1132;
          }
        }
      }
      if (v1294)
      {
        v1134 = v1291;
        v1135 = v1292;
        if (v1292 != v1291)
        {
          v1136 = (_QWORD *)*((_QWORD *)&v1290 + 1);
          v1137 = v1293;
          v1138 = HIBYTE(v1293);
          if ((_QWORD)v1290 && *(_BYTE *)(*((_QWORD *)&v1290 + 1) + 17) != 2)
          {
            (*(void (**)(void))(*(_QWORD *)v1290 + 64))();
            v152 = v1173;
          }
          if (v1137 && !v1138)
          {
            v1140 = v1136[7];
            v1139 = v1136[8];
            if (v1139 == v1140)
              v1140 = v1136[10] - v1136[9];
            if (v1134 < v1140)
              v1140 = v1134;
            if (v1139 <= v1135)
              v1139 = v1135;
            if (v1139 == v1140)
              v1139 = v1140 + v1136[10] - v1136[9];
            v1136[7] = v1140;
            v1136[8] = v1139;
          }
        }
      }
      if (v1299)
      {
        v1141 = v1296;
        v1142 = v1297;
        if (v1297 != v1296)
        {
          v1143 = (_QWORD *)*((_QWORD *)&v1295 + 1);
          v1144 = v1298;
          v1145 = HIBYTE(v1298);
          if ((_QWORD)v1295 && *(_BYTE *)(*((_QWORD *)&v1295 + 1) + 17) != 2)
          {
            (*(void (**)(void))(*(_QWORD *)v1295 + 64))();
            v152 = v1173;
          }
          if (v1144 && !v1145)
          {
            v1147 = v1143[7];
            v1146 = v1143[8];
            if (v1146 == v1147)
              v1147 = v1143[10] - v1143[9];
            if (v1141 < v1147)
              v1147 = v1141;
            if (v1146 <= v1142)
              v1146 = v1142;
            if (v1146 == v1147)
              v1146 = v1147 + v1143[10] - v1143[9];
            v1143[7] = v1147;
            v1143[8] = v1146;
          }
        }
      }
      do
        v1148 = __ldaxr(v38);
      while (__stlxr(v1148 - 1, v38));
      if (!v1148)
      {
        ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
        std::__shared_weak_count::__release_weak(v1172);
        v152 = v1173;
      }
      do
        v1149 = __ldaxr(v1163);
      while (__stlxr(v1149 - 1, v1163));
      if (!v1149)
      {
        ((void (*)(std::__shared_weak_count *))v1167->__on_zero_shared)(v1167);
        std::__shared_weak_count::__release_weak(v1167);
        v152 = v1173;
      }
      do
        v1150 = __ldaxr(v1164);
      while (__stlxr(v1150 - 1, v1164));
      if (!v1150)
      {
        ((void (*)(std::__shared_weak_count *))v1169->__on_zero_shared)(v1169);
        std::__shared_weak_count::__release_weak(v1169);
        v152 = v1173;
      }
      do
        v1151 = __ldaxr(v1165);
      while (__stlxr(v1151 - 1, v1165));
      if (!v1151)
      {
        ((void (*)(std::__shared_weak_count *))v1171->__on_zero_shared)(v1171);
        std::__shared_weak_count::__release_weak(v1171);
        v152 = v1173;
      }
      do
        v1152 = __ldaxr(p_shared_owners);
      while (__stlxr(v1152 - 1, p_shared_owners));
      if (!v1152)
      {
        ((void (*)(std::__shared_weak_count *))v1168->__on_zero_shared)(v1168);
        std::__shared_weak_count::__release_weak(v1168);
        v152 = v1173;
      }
      do
        v1153 = __ldaxr(v152);
      while (__stlxr(v1153 - 1, v152));
      if (!v1153)
      {
        ((void (*)(std::__shared_weak_count *))v1170->__on_zero_shared)(v1170);
        std::__shared_weak_count::__release_weak(v1170);
      }
      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)&v1306);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1307);
      return;
    }
  }
  *(_QWORD *)&v1252 = v991 - 80;
  BYTE8(v1252) = 0;
  LOBYTE(v1253[1]) = 0;
  v1254[0] = 1;
  *(_OWORD *)&v1254[4] = xmmword_19FFB3470;
  v1255 = 0x80000000800000;
  v1257 = 0;
  v1256 = 1065353216;
  v1259 = 0;
  v1258 = 0x3F80000000000000;
  v1260 = 0;
  v1263 = 0;
  v1262 = 0;
  v1261 = 1065353216;
  *(_QWORD *)buf = 1065353216;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0x3F80000000000000;
  *(_QWORD *)&buf[24] = 0;
  *(_QWORD *)&buf[32] = 0;
  *(_QWORD *)&v1319[4] = 0;
  v1320 = 0;
  *(_DWORD *)v1319 = 1065353216;
  v1321 = 1065353216;
  *(_OWORD *)v1316 = xmmword_19FFB3470;
  v1317 = 0x80000000800000;
  v1322 = COERCE_DOUBLE(&off_1E42D8AB0);
  v1323 = COERCE_DOUBLE(v1316);
  v1324 = buf;
  v1325 = (void **)&v1322;
  v1016.n128_u64[0] = (unint64_t)gm::Box<float,3>::forEachCorner(v1015, (uint64_t)&v1322);
  v1017 = (double *)v1325;
  if (v1325 == (void **)&v1322)
  {
    v1017 = &v1322;
    v1020 = 4;
    v1018 = a3;
    v1019 = v1196;
LABEL_1117:
    (*(void (**)(__n128))(*(_QWORD *)v1017 + 8 * v1020))(v1016);
  }
  else
  {
    v1018 = a3;
    v1019 = v1196;
    if (v1325)
    {
      v1020 = 5;
      goto LABEL_1117;
    }
  }
  *(_OWORD *)&v1254[4] = *(_OWORD *)v1316;
  v1255 = v1317;
  v1264 = *a4;
  v1251 = *(_QWORD *)(v1019 + 24);
  if (!*((_BYTE *)v1018 + 72) || !*((_BYTE *)v1018 + 57))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_1356;
  }
  v1024 = v1018[8];
  v1025 = *((_BYTE *)v1018 + 56);
  v1322 = 0.0;
  v1323 = 7.29112202e-304;
  v1250 = 1;
  v1249 = 3;
  v1248 = v1176;
  v1026 = (void *)gdc::Registry::create(v1014);
  v1027 = (uint64_t *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v1014);
  gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(v1027, (uint64_t)v1026, &v1252);
  v1028 = (uint64_t *)gdc::Registry::storage<md::components::PendingMaterial>((uint64_t)v1014);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v1028, (uint64_t)v1026, &v1264);
  v1029 = (uint64_t *)gdc::Registry::storage<md::components::Building>((uint64_t)v1014);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v1029, (uint64_t)v1026, &v1251);
  v1030 = (uint64_t *)gdc::Registry::storage<md::components::IntersectionWithTileEdges>((uint64_t)v1014);
  v1269 = v1026;
  v1031 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1030 + 4, (uint64_t)&v1269);
  if ((v1032 & 1) == 0)
  {
    v1033 = v1030[10] + 2 * ((_QWORD)v1031 - v1030[7]);
    *(_BYTE *)v1033 = v1025;
    *(_QWORD *)(v1033 + 8) = v1024;
    v1034 = (void *)v1030[31];
    if (v1033 == v1030[11])
    {
      v1058 = (_QWORD *)v1030[22];
      if (v1058)
        goto LABEL_1152;
    }
    else
    {
      v1035 = (_QWORD *)v1030[16];
      if (v1035)
      {
        while (1)
        {
          *(_QWORD *)buf = &v1269;
          *(_QWORD *)&buf[8] = 1;
          v1316[0] = v1034;
          v1036 = v1035[6];
          if (!v1036)
            goto LABEL_1337;
          (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v1036 + 48))(v1036, v1316, buf);
          v1035 = (_QWORD *)*v1035;
          if (!v1035)
            goto LABEL_1154;
        }
      }
    }
    goto LABEL_1154;
  }
  v1038 = (char *)v1030[11];
  v1037 = v1030[12];
  if ((unint64_t)v1038 >= v1037)
  {
    v1040 = (char *)v1030[10];
    v1041 = (v1038 - v1040) >> 4;
    v1042 = v1041 + 1;
    if ((unint64_t)(v1041 + 1) >> 60)
      abort();
    v1043 = v1037 - (_QWORD)v1040;
    if (v1043 >> 3 > v1042)
      v1042 = v1043 >> 3;
    if ((unint64_t)v1043 >= 0x7FFFFFFFFFFFFFF0)
      v1044 = 0xFFFFFFFFFFFFFFFLL;
    else
      v1044 = v1042;
    if (v1044)
    {
      if (v1044 >> 60)
        goto LABEL_1332;
      v1045 = (char *)operator new(16 * v1044);
    }
    else
    {
      v1045 = 0;
    }
    v1059 = &v1045[16 * v1041];
    *v1059 = v1025;
    *((_QWORD *)v1059 + 1) = v1024;
    v1060 = (uint64_t)v1059;
    if (v1038 != v1040)
    {
      do
      {
        *(_OWORD *)(v1060 - 16) = *((_OWORD *)v1038 - 1);
        v1060 -= 16;
        v1038 -= 16;
      }
      while (v1038 != v1040);
      v1038 = (char *)v1030[10];
    }
    v1039 = v1059 + 16;
    v1030[10] = v1060;
    v1030[11] = (uint64_t)(v1059 + 16);
    v1030[12] = (uint64_t)&v1045[16 * v1044];
    if (v1038)
      operator delete(v1038);
  }
  else
  {
    *v1038 = v1025;
    *((_QWORD *)v1038 + 1) = v1024;
    v1039 = v1038 + 16;
  }
  v1030[11] = (uint64_t)v1039;
  v1034 = (void *)v1030[31];
  v1058 = (_QWORD *)v1030[22];
  if (!v1058)
  {
LABEL_1154:
    v1062 = (uint64_t *)gdc::Registry::storage<md::components::ClientState>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::ClientState>::emplace(v1062, (uint64_t)v1026, (uint64_t)&v1322);
    v1063 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v1063, (uint64_t)v1026, &v1250);
    v1064 = (uint64_t *)gdc::Registry::storage<md::components::SupportsDebugHighlight>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1064, (uint64_t)v1026);
    v1065 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v1065, (uint64_t)v1026, &v1249);
    v1066 = (uint64_t *)gdc::Registry::storage<md::components::PositionScaleFactor>((uint64_t)v1014);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1066, (uint64_t)v1026, &v1248);
    if (!BYTE6(v1323) && v1322 != 0.0)
    {
      v1068 = gss::Allocator::instance(v1067);
      (*(void (**)(uint64_t, double, _QWORD))(*(_QWORD *)v1068 + 40))(v1068, COERCE_DOUBLE(*(_QWORD *)&v1322), WORD2(v1323));
    }
    v38 = v1213;
    m = a3;
    v104 = v1195;
    goto LABEL_1158;
  }
LABEL_1152:
  while (1)
  {
    *(_QWORD *)buf = &v1269;
    *(_QWORD *)&buf[8] = 1;
    v1316[0] = v1034;
    v1061 = v1058[6];
    if (!v1061)
      break;
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v1061 + 48))(v1061, v1316, buf);
    v1058 = (_QWORD *)*v1058;
    if (!v1058)
      goto LABEL_1154;
  }
LABEL_1337:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_1356:
  __break(1u);
}

void sub_19FCDF150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unint64_t *a15, unint64_t *a16, unint64_t *a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,unint64_t *a24)
{
  unint64_t *v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x468]);
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
    std::__shared_weak_count::__release_weak(a23);
  }
  do
    v27 = __ldaxr(a14);
  while (__stlxr(v27 - 1, a14));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  do
    v28 = __ldaxr(a15);
  while (__stlxr(v28 - 1, a15));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
    std::__shared_weak_count::__release_weak(a20);
  }
  do
    v29 = __ldaxr(a16);
  while (__stlxr(v29 - 1, a16));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
    std::__shared_weak_count::__release_weak(a22);
  }
  do
    v30 = __ldaxr(a17);
  while (__stlxr(v30 - 1, a17));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
    std::__shared_weak_count::__release_weak(a19);
  }
  do
    v31 = __ldaxr(a24);
  while (__stlxr(v31 - 1, a24));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
    std::__shared_weak_count::__release_weak(a21);
  }
  geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)&STACK[0x488]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)STACK[0x490]);
  _Unwind_Resume(a1);
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;

  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v5 >= v4)
  {
    if (v4 < v6)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v8;
      a2[2] = v6;
      a3[2] = v4;
      v9 = a2[2];
      v10 = result[2];
      if (v10 < v9)
      {
        v11 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
        result[2] = v9;
        a2[2] = v10;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)result;
    if (v4 < v6)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      result[2] = v6;
LABEL_9:
      a3[2] = v5;
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    result[2] = v4;
    a2[2] = v5;
    v12 = a3[2];
    if (v5 < v12)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      a2[2] = v12;
      goto LABEL_9;
    }
  }
LABEL_10:
  v13 = a4[2];
  v14 = a3[2];
  if (v14 < v13)
  {
    v15 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v15;
    a3[2] = v13;
    a4[2] = v14;
    v16 = a3[2];
    v17 = a2[2];
    if (v17 < v16)
    {
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      a2[2] = v16;
      a3[2] = v17;
      v19 = a2[2];
      v20 = result[2];
      if (v20 < v19)
      {
        v21 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v21;
        result[2] = v19;
        a2[2] = v20;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;
  int v39;
  float *v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = a1[2];
      if (v7 < v6)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v8;
        a1[2] = v6;
        *(a2 - 2) = v7;
      }
      return result;
    case 3:
      v9 = a1[6];
      v10 = a1[2];
      v11 = *(a2 - 2);
      if (v10 >= v9)
      {
        if (v9 < v11)
        {
          v29 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v29;
          a1[6] = v11;
          *(a2 - 2) = v9;
          v30 = a1[6];
          v31 = a1[2];
          if (v31 < v30)
          {
            v32 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v32;
            a1[2] = v30;
            a1[6] = v31;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v9 >= v11)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v12;
          a1[2] = v9;
          a1[6] = v10;
          v36 = *(a2 - 2);
          if (v10 < v36)
          {
            *((_QWORD *)a1 + 2) = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v12;
            a1[6] = v36;
            *(a2 - 2) = v10;
          }
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v12;
          a1[2] = v11;
          *(a2 - 2) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v18 = *(a2 - 2);
      v19 = a1[14];
      if (v19 < v18)
      {
        v20 = *((_QWORD *)a1 + 6);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v20;
        a1[14] = v18;
        *(a2 - 2) = v19;
        v21 = a1[14];
        v22 = a1[10];
        if (v22 < v21)
        {
          v23 = *((_QWORD *)a1 + 4);
          v24 = *((_QWORD *)a1 + 6);
          *((_QWORD *)a1 + 4) = v24;
          *((_QWORD *)a1 + 6) = v23;
          a1[10] = v21;
          a1[14] = v22;
          v25 = a1[6];
          if (v25 < v21)
          {
            v26 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v24;
            *((_QWORD *)a1 + 4) = v26;
            a1[6] = v21;
            a1[10] = v25;
            v27 = a1[2];
            if (v27 < v21)
            {
              v28 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v24;
              *((_QWORD *)a1 + 2) = v28;
              a1[2] = v21;
              a1[6] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1[10];
      v14 = a1 + 6;
      v15 = a1[6];
      v16 = a1[2];
      if (v16 < v15)
      {
        v17 = *(_QWORD *)a1;
        if (v15 >= v13)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v17;
          a1[2] = v15;
          a1[6] = v16;
          if (v16 >= v13)
            goto LABEL_28;
          *((_QWORD *)a1 + 2) = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 4) = v17;
          a1[6] = v13;
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 4) = v17;
          a1[2] = v13;
        }
        v14 = a1 + 10;
        goto LABEL_27;
      }
      if (v15 < v13)
      {
        v33 = *((_QWORD *)a1 + 2);
        v34 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 2) = v34;
        *((_QWORD *)a1 + 4) = v33;
        a1[6] = v13;
        a1[10] = v15;
        if (v16 < v13)
        {
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v34;
          *((_QWORD *)a1 + 2) = v35;
          a1[2] = v13;
LABEL_27:
          *v14 = v16;
        }
      }
LABEL_28:
      v37 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v38 = 0;
      v39 = 0;
      v40 = a1 + 8;
      while (1)
      {
        v42 = v37[2];
        if (v40[2] < v42)
        {
          v43 = *(_QWORD *)v37;
          v44 = v38;
          do
          {
            v45 = (char *)a1 + v44;
            *((_QWORD *)v45 + 6) = *(_QWORD *)((char *)a1 + v44 + 32);
            *((float *)v45 + 14) = *(float *)((char *)a1 + v44 + 40);
            if (v44 == -32)
            {
              v41 = (uint64_t)a1;
              goto LABEL_31;
            }
            v44 -= 16;
          }
          while (*((float *)v45 + 6) < v42);
          v41 = (uint64_t)a1 + v44 + 48;
LABEL_31:
          *(_QWORD *)v41 = v43;
          *(float *)(v41 + 8) = v42;
          if (++v39 == 8)
            return v37 + 4 == a2;
        }
        v40 = v37;
        v38 += 16;
        v37 += 4;
        if (v37 == a2)
          return 1;
      }
  }
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevationCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::DeviceDataTyped<ggl::DaVinci::Elevations>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::DeviceDataTyped<ggl::DaVinci::Elevations>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::Texture2D  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Texture2D  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void **std::vector<std::pair<unsigned long,std::function<gm::Matrix<float,2,1> ()(unsigned long)>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9170;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + 12 * *a2);
}

void std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D91B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D91B8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + 12 * *a2);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[4];
      if (v3)
      {
        v4 = v2[5];
        v5 = (void *)v2[4];
        if (v4 != v3)
        {
          do
          {
            v6 = *(void **)(v4 - 56);
            if (v6)
            {
              *(_QWORD *)(v4 - 48) = v6;
              operator delete(v6);
            }
            v7 = *(void **)(v4 - 80);
            if (v7)
            {
              *(_QWORD *)(v4 - 72) = v7;
              operator delete(v7);
            }
            v4 -= 80;
          }
          while (v4 != v3);
          v5 = (void *)v2[4];
        }
        v2[5] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42D9D88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D9D88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::operator()(uint64_t a1)
{
  return md::DaVinciGroundTileData::_buildBuildings(*(_QWORD *)(a1 + 8), *(geo::codec::VectorTile ***)(a1 + 16), **(_QWORD **)(a1 + 24), *(float **)(a1 + 40), *(_OWORD **)(a1 + 48));
}

void md::DaVinciDecalBuilder::~DaVinciDecalBuilder(md::DaVinciDecalBuilder *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = (_QWORD *)*((_QWORD *)this + 12);
  while (v2)
  {
    v8 = v2;
    v2 = (_QWORD *)*v2;
    v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(v8);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (v4)
  {
    do
    {
      v12 = (_QWORD *)*v4;
      v13 = (void *)v4[3];
      if (v13)
      {
        v4[4] = v13;
        operator delete(v13);
      }
      operator delete(v4);
      v4 = v12;
    }
    while (v12);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  while (v6)
  {
    v14 = v6;
    v6 = (_QWORD *)*v6;
    v15 = (void *)v14[4];
    if (v15)
    {
      v14[5] = v15;
      operator delete(v15);
    }
    v16 = (std::__shared_weak_count *)v14[3];
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    operator delete(v14);
  }
  v7 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v7)
    operator delete(v7);
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D9D40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9D40;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::operator()(uint64_t a1)
{
  md::DaVinciGroundTileData::_buildDecals(*(_QWORD **)(a1 + 8), *(geo::codec::VectorTile ***)(a1 + 16), **(_QWORD **)(a1 + 24), *(unint64_t **)(a1 + 32));
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E48C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E48C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::RibbonMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E06E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E06E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *geo::range_map<unsigned int,md::DaVinciGroundTileData::TextureMappingData,std::less<unsigned int>,std::allocator<std::pair<gm::Range<unsigned int> const,md::DaVinciGroundTileData::TextureMappingData>>>::insert(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = result;
  if (result[2])
  {
    v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      v10 = (uint64_t **)*result;
    }
    else
    {
      v5 = 0;
      v6 = (uint64_t *)*result;
      do
      {
        v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            v8 = (uint64_t **)v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t **)v6[2];
            v9 = *v8 == v6;
            v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      v10 = (uint64_t **)*result;
      do
      {
        v11 = v5 >> 1;
        v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          v14 = v5 >> 1;
          v15 = v10;
          do
          {
            v17 = v15[1];
            if (v17)
            {
              do
              {
                v12 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v12 = v15[2];
                v9 = *v12 == (_QWORD)v15;
                v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((_DWORD *)v12 + 9) < *(_DWORD *)(a2 + 4))
        {
          v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              v10 = (uint64_t **)v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v10 = (uint64_t **)v12[2];
              v9 = *v10 == v12;
              v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          v11 = v5 + ~v11;
        }
        v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((_DWORD *)v10 + 8) < *(_DWORD *)(a2 + 4))
      return result;
    if (v10 != (uint64_t **)*result)
    {
      v22 = *v10;
      if (*v10)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = v10[2];
          v9 = *v23 == (_QWORD)v10;
          v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*(_DWORD *)a2 < *((_DWORD *)v23 + 9))
        return result;
    }
    v24 = *v4;
    v20 = (uint64_t **)(result + 1);
    if (*v4)
    {
      v25 = *(_DWORD *)(a2 + 4);
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v24;
          v26 = *((_DWORD *)v24 + 9);
          if (v25 >= v26)
            break;
          v24 = *v20;
          v4 = v20;
          if (!*v20)
            goto LABEL_54;
        }
        if (v26 >= v25)
          return result;
        v24 = v20[1];
        if (!v24)
          goto LABEL_52;
      }
    }
LABEL_54:
    v27 = operator new(0x40uLL);
    v28 = *(_OWORD *)(a2 + 16);
    v27[2] = *(_OWORD *)a2;
    v27[3] = v28;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = v20;
    *v4 = (uint64_t *)v27;
    v29 = *(_QWORD *)*v3;
    if (v29)
    {
      *v3 = v29;
      v30 = *v4;
    }
    else
    {
      v30 = (uint64_t *)v27;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v30);
    ++v3[2];
    return result;
  }
  v4 = (uint64_t **)(result + 1);
  v18 = result[1];
  if (!v18)
  {
    v20 = (uint64_t **)(result + 1);
    goto LABEL_54;
  }
  v19 = *(_DWORD *)(a2 + 4);
  while (1)
  {
    while (1)
    {
      v20 = (uint64_t **)v18;
      v21 = *(_DWORD *)(v18 + 36);
      if (v19 >= v21)
        break;
      v18 = (uint64_t)*v20;
      v4 = v20;
      if (!*v20)
        goto LABEL_54;
    }
    if (v21 >= v19)
      return result;
    v18 = (uint64_t)v20[1];
    if (!v18)
    {
LABEL_52:
      v4 = v20 + 1;
      goto LABEL_54;
    }
  }
}

_QWORD *std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>::~pair(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[5];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[5];
  if (v5)
  {
LABEL_6:
    a1[6] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void md::ServerDrapedMesh::~ServerDrapedMesh(md::ServerDrapedMesh *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__shared_ptr_emplace<md::MeshConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MeshConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::MeshConnectivity>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<ggl::DaVinci::DistanceCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::DistanceCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::DistanceCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevationMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::DaVinciGroundTileData::_planTileMeshVertexTransfers(std::shared_ptr<geo::codec::VectorTile> const&,std::vector<gm::Range<unsigned int>> const&,std::vector<gm::Range<unsigned int>>&,std::vector<md::DaVinciGroundTileData::TransferDetails> *,unsigned int *)::$_2::operator()(uint64_t a1, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v4 = *a2;
  v5 = a2[1];
  if (v5 != (_DWORD)v4)
  {
    v7 = ***(_QWORD ***)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 8 * (v5 - 1) + 4);
    v9 = *(_DWORD *)(v7 + 8 * v4);
    v10 = v8 - v9;
    if (v8 != v9)
    {
      v13 = *(unsigned int *)(**(_QWORD **)a1 + 4 * a3);
      v14 = (char **)(**(_QWORD **)(a1 + 8) + 24 * a3);
      v15 = *(_QWORD *)a2;
      v16 = v13 | ((unint64_t)(v13 + v10) << 32);
      v18 = v14 + 1;
      v17 = v14[1];
      v19 = (unint64_t)v14[2];
      if ((unint64_t)v17 >= v19)
      {
        v21 = *v14;
        v22 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *v14) >> 2);
        v23 = v22 + 1;
        if (v22 + 1 > 0xCCCCCCCCCCCCCCCLL)
          abort();
        v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (_QWORD)v21) >> 2);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0x666666666666666)
          v25 = 0xCCCCCCCCCCCCCCCLL;
        else
          v25 = v23;
        if (v25)
        {
          v30 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *v14) >> 2);
          v31 = v13 | ((unint64_t)(v13 + v10) << 32);
          v32 = *(_QWORD *)a2;
          if (v25 > 0xCCCCCCCCCCCCCCCLL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v26 = (char *)operator new(20 * v25);
          v16 = v31;
          v15 = v32;
          v22 = v30;
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[20 * v22];
        v28 = &v26[20 * v25];
        *(_QWORD *)v27 = v15;
        *((_QWORD *)v27 + 1) = v16;
        *((_DWORD *)v27 + 4) = a4;
        v20 = v27 + 20;
        if (v17 != v21)
        {
          do
          {
            v29 = *(_OWORD *)(v17 - 20);
            *((_DWORD *)v27 - 1) = *((_DWORD *)v17 - 1);
            *(_OWORD *)(v27 - 20) = v29;
            v27 -= 20;
            v17 -= 20;
          }
          while (v17 != v21);
          v17 = *v14;
        }
        *v14 = v27;
        *v18 = v20;
        v14[2] = v28;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v17 = v15;
        *((_QWORD *)v17 + 1) = v16;
        v20 = v17 + 20;
        *((_DWORD *)v17 + 4) = a4;
      }
      *v18 = v20;
      *(_DWORD *)(**(_QWORD **)a1 + 4 * a3) += v10;
    }
  }
}

uint64_t std::default_delete<gdc::DCEL>::operator()[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 104);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 112);
      v4 = *(void **)(result + 104);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(v1 + 112);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(v1 + 104);
      }
      *(_QWORD *)(v1 + 112) = v2;
      operator delete(v4);
    }
    v8 = *(_QWORD **)(v1 + 96);
    if (v8 == (_QWORD *)(v1 + 72))
    {
      v9 = 4;
      v8 = (_QWORD *)(v1 + 72);
    }
    else
    {
      if (!v8)
        goto LABEL_16;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
    v10 = *(void **)(v1 + 48);
    if (v10)
    {
      *(_QWORD *)(v1 + 56) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v1 + 24);
    if (v11)
    {
      *(_QWORD *)(v1 + 32) = v11;
      operator delete(v11);
    }
    v12 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v12;
      operator delete(v12);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<gdc::DCEL  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42D0A60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D0A60;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  uint64_t *k;
  size_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t *j;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  _BOOL4 v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  size_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  int v56;
  _BOOL4 v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  int *v66;
  int v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  int *v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t buf[4];
  int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = *a4;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD **)v5;
  v7 = *(_DWORD **)(v5 + 8);
  if (v6 == v7)
  {
LABEL_8:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v13 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v91 = v4;
      _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_ERROR, "could not find vtx offset for face %d", buf, 8u);
    }

  }
  else
  {
    v9 = *a3;
    v10 = (**(_DWORD **)(a1 + 32) + 3 * v4);
    while (*v6 > v10 || v6[1] <= v10)
    {
      v6 += 4;
      if (v6 == v7)
        goto LABEL_8;
    }
    v11 = v6[2];
    if (v10 < 0xFFFFFFFD)
    {
      for (i = (**(_DWORD **)(a1 + 32) + 3 * v4); i < (v10 + 3); ++i)
      {
        v15 = *(_QWORD *)(a1 + 40);
        v16 = v11 + *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * i);
        v17 = (char *)operator new(0x20uLL);
        *((_DWORD *)v17 + 4) = v16;
        *(_QWORD *)(v17 + 20) = v11 | (i << 32);
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = v16;
        v18 = *(_QWORD *)(v15 + 8);
        v19 = (float)(unint64_t)(*(_QWORD *)(v15 + 24) + 1);
        v20 = *(float *)(v15 + 32);
        if (!v18 || (float)(v20 * (float)v18) < v19)
        {
          v21 = (v18 & (v18 - 1)) != 0;
          if (v18 < 3)
            v21 = 1;
          v22 = v21 | (2 * v18);
          v23 = vcvtps_u32_f32(v19 / v20);
          if (v22 <= v23)
            prime = v23;
          else
            prime = v22;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v18 = *(_QWORD *)(v15 + 8);
          }
          if (prime > v18)
            goto LABEL_136;
          if (prime >= v18)
            goto LABEL_55;
          v38 = vcvtps_u32_f32((float)*(unint64_t *)(v15 + 24) / *(float *)(v15 + 32));
          if (v18 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
          {
            v38 = std::__next_prime(v38);
          }
          else
          {
            v40 = 1 << -(char)__clz(v38 - 1);
            if (v38 >= 2)
              v38 = v40;
          }
          if (prime <= v38)
            prime = v38;
          if (prime >= v18)
          {
            v18 = *(_QWORD *)(v15 + 8);
            goto LABEL_55;
          }
          if (prime)
          {
LABEL_136:
            if (prime >> 61)
              goto LABEL_132;
            v25 = operator new(8 * prime);
            v26 = *(void **)v15;
            *(_QWORD *)v15 = v25;
            if (v26)
              operator delete(v26);
            v27 = 0;
            *(_QWORD *)(v15 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v15 + 8 * v27++) = 0;
            while (prime != v27);
            v29 = v15 + 16;
            v28 = *(uint64_t ***)(v15 + 16);
            if (v28)
            {
              v30 = (size_t)v28[1];
              v31 = prime - 1;
              if ((prime & (prime - 1)) != 0)
              {
                if (v30 >= prime)
                  v30 %= prime;
                *(_QWORD *)(*(_QWORD *)v15 + 8 * v30) = v29;
                for (j = *v28; *v28; j = *v28)
                {
                  v50 = j[1];
                  if (v50 >= prime)
                    v50 %= prime;
                  if (v50 == v30)
                  {
                    v28 = (uint64_t **)j;
                  }
                  else
                  {
                    v51 = j;
                    if (*(_QWORD *)(*(_QWORD *)v15 + 8 * v50))
                    {
                      do
                      {
                        v52 = v51;
                        v51 = (uint64_t *)*v51;
                      }
                      while (v51 && *((_DWORD *)j + 4) == *((_DWORD *)v51 + 4));
                      *v28 = v51;
                      v53 = 8 * v50;
                      *v52 = **(_QWORD **)(*(_QWORD *)v15 + v53);
                      **(_QWORD **)(*(_QWORD *)v15 + v53) = j;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)v15 + 8 * v50) = v28;
                      v28 = (uint64_t **)j;
                      v30 = v50;
                    }
                  }
                }
              }
              else
              {
                v32 = v30 & v31;
                *(_QWORD *)(*(_QWORD *)v15 + 8 * v32) = v29;
                for (k = *v28; *v28; k = *v28)
                {
                  v34 = k[1] & v31;
                  if (v34 == v32)
                  {
                    v28 = (uint64_t **)k;
                  }
                  else
                  {
                    v35 = k;
                    if (*(_QWORD *)(*(_QWORD *)v15 + 8 * v34))
                    {
                      do
                      {
                        v36 = v35;
                        v35 = (uint64_t *)*v35;
                      }
                      while (v35 && *((_DWORD *)k + 4) == *((_DWORD *)v35 + 4));
                      *v28 = v35;
                      v37 = 8 * v34;
                      *v36 = **(_QWORD **)(*(_QWORD *)v15 + v37);
                      **(_QWORD **)(*(_QWORD *)v15 + v37) = k;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)v15 + 8 * v34) = v28;
                      v28 = (uint64_t **)k;
                      v32 = v34;
                    }
                  }
                }
              }
            }
            v18 = prime;
          }
          else
          {
            v62 = *(void **)v15;
            *(_QWORD *)v15 = 0;
            if (v62)
              operator delete(v62);
            v18 = 0;
            *(_QWORD *)(v15 + 8) = 0;
          }
        }
LABEL_55:
        v42 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] >= 2uLL)
        {
          v54 = v16;
          if (v18 <= v16)
            v54 = v16 % v18;
          v55 = *(uint64_t **)(*(_QWORD *)v15 + 8 * v54);
          if (!v55)
          {
            v48 = 0;
            v61 = *((_QWORD *)v17 + 1);
            if (v61 < v18)
              goto LABEL_93;
LABEL_92:
            v61 %= v18;
            goto LABEL_93;
          }
          v56 = 0;
          do
          {
            v48 = v55;
            v55 = (uint64_t *)*v55;
            if (!v55)
              break;
            v59 = v55[1];
            v60 = v59;
            if (v59 >= v18)
              v60 = v59 % v18;
            if (v60 != v54)
              break;
            v57 = v59 == v16 && *((_DWORD *)v55 + 4) == *((_DWORD *)v17 + 4);
            v58 = v56 & !v57;
            v56 |= v57;
          }
          while (v58 != 1);
        }
        else
        {
          v43 = (v18 - 1) & v16;
          v44 = *(uint64_t **)(*(_QWORD *)v15 + 8 * v43);
          if (!v44)
          {
            v48 = 0;
            v61 = *((_QWORD *)v17 + 1);
LABEL_90:
            v61 &= v18 - 1;
            goto LABEL_93;
          }
          v45 = 0;
          do
          {
            v48 = v44;
            v44 = (uint64_t *)*v44;
            if (!v44)
              break;
            v49 = v44[1];
            if ((v49 & (v18 - 1)) != v43)
              break;
            v46 = v49 == v16 && *((_DWORD *)v44 + 4) == *((_DWORD *)v17 + 4);
            v47 = v45 & !v46;
            v45 |= v46;
          }
          while ((v47 & 1) == 0);
        }
        v61 = *((_QWORD *)v17 + 1);
        if (v42.u32[0] <= 1uLL)
          goto LABEL_90;
        if (v61 >= v18)
          goto LABEL_92;
LABEL_93:
        if (v48)
        {
          *(_QWORD *)v17 = *v48;
          *v48 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_15;
          v14 = *(_QWORD *)(*(_QWORD *)v17 + 8);
          if (v42.u32[0] > 1uLL)
          {
            if (v14 >= v18)
              v14 %= v18;
          }
          else
          {
            v14 &= v18 - 1;
          }
          if (v14 == v61)
            goto LABEL_15;
        }
        else
        {
          *(_QWORD *)v17 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = v17;
          *(_QWORD *)(*(_QWORD *)v15 + 8 * v61) = v15 + 16;
          if (!*(_QWORD *)v17)
            goto LABEL_15;
          v14 = *(_QWORD *)(*(_QWORD *)v17 + 8);
          if (v42.u32[0] <= 1uLL)
          {
            v14 &= v18 - 1;
          }
          else if (v14 >= v18)
          {
            v14 %= v18;
          }
        }
        *(_QWORD *)(*(_QWORD *)v15 + 8 * v14) = v17;
LABEL_15:
        ++*(_QWORD *)(v15 + 24);
      }
    }
    v63 = *(_QWORD *)(a1 + 8);
    v64 = *(char ***)(a1 + 16);
    v65 = *(_QWORD *)(a1 + 24);
    v66 = (int *)(v65 + 12 * (v11 + *(unsigned __int16 *)(v63 + 2 * v10)));
    v67 = *v66;
    *(_QWORD *)&v68 = *(_QWORD *)(v66 + 1);
    v69 = (uint64_t *)(v65 + 12 * (v11 + *(unsigned __int16 *)(v63 + 2 * (v10 + 1))));
    v70 = *v69;
    v71 = *((_DWORD *)v69 + 2);
    v72 = (int *)(v65 + 12 * (v11 + *(unsigned __int16 *)(v63 + 2 * (v10 + 2))));
    v74 = *v72;
    v73 = v72[1];
    v75 = v72[2];
    v77 = v64[1];
    v76 = (unint64_t)v64[2];
    if ((unint64_t)v77 >= v76)
    {
      v79 = *v64;
      v80 = 0xCCCCCCCCCCCCCCCDLL * ((v77 - *v64) >> 3);
      v81 = v80 + 1;
      if (v80 + 1 > 0x666666666666666)
        abort();
      v82 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v76 - (_QWORD)v79) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x333333333333333)
        v83 = 0x666666666666666;
      else
        v83 = v81;
      if (v83)
      {
        v88 = v70;
        v89 = v68;
        if (v83 > 0x666666666666666)
LABEL_132:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v84 = (char *)operator new(40 * v83);
        v70 = v88;
        *(_QWORD *)&v68 = v89;
      }
      else
      {
        v84 = 0;
      }
      v85 = &v84[40 * v80];
      *(_DWORD *)v85 = v9;
      *((_DWORD *)v85 + 1) = v67;
      *((_QWORD *)&v68 + 1) = v70;
      *(_OWORD *)(v85 + 8) = v68;
      *((_DWORD *)v85 + 6) = v71;
      *((_DWORD *)v85 + 7) = v74;
      *((_DWORD *)v85 + 8) = v73;
      *((_DWORD *)v85 + 9) = v75;
      v78 = v85 + 40;
      if (v77 != v79)
      {
        do
        {
          v86 = *(_OWORD *)(v77 - 40);
          v87 = *(_OWORD *)(v77 - 24);
          *((_QWORD *)v85 - 1) = *((_QWORD *)v77 - 1);
          *(_OWORD *)(v85 - 24) = v87;
          *(_OWORD *)(v85 - 40) = v86;
          v85 -= 40;
          v77 -= 40;
        }
        while (v77 != v79);
        v77 = *v64;
      }
      *v64 = v85;
      v64[1] = v78;
      v64[2] = &v84[40 * v83];
      if (v77)
        operator delete(v77);
    }
    else
    {
      *(_DWORD *)v77 = v9;
      *((_DWORD *)v77 + 1) = v67;
      *((_QWORD *)&v68 + 1) = v70;
      *(_OWORD *)(v77 + 8) = v68;
      *((_DWORD *)v77 + 6) = v71;
      *((_DWORD *)v77 + 7) = v74;
      *((_DWORD *)v77 + 8) = v73;
      *((_DWORD *)v77 + 9) = v75;
      v78 = v77 + 40;
    }
    v64[1] = v78;
  }
}

void sub_19FCE15E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42D9DD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D9DD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::operator()(uint64_t a1)
{
  md::DaVinciGroundTileData::_buildTileMeshes(*(_QWORD *)(a1 + 8), *(geo::codec::VectorTile ***)(a1 + 16), **(_QWORD **)(a1 + 24), *(uint64_t **)(a1 + 32), *(float32x2_t **)(a1 + 40));
}

md::MaterialRaster **std::unique_ptr<md::MaterialRaster>::~unique_ptr[abi:nn180100](md::MaterialRaster **a1)
{
  md::MaterialRaster *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::MaterialRaster::~MaterialRaster(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__shared_ptr_emplace<md::StyleAttributeRasterSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StyleAttributeRasterSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::StyleAttributeRasterSet>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  md::MaterialRaster *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (_QWORD *)a1[10];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = (md::MaterialRaster *)v2[3];
      v2[3] = 0;
      if (v7)
      {
        md::MaterialRaster::~MaterialRaster(v7);
        MEMORY[0x1A1AF4E00]();
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)a1[5];
  while (v4)
  {
    v8 = v4;
    v4 = (_QWORD *)*v4;
    v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(v8);
  }
  v5 = (void *)a1[3];
  a1[3] = 0;
  if (v5)
    operator delete(v5);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::unique_ptr<md::MaterialRaster>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::unique_ptr<md::MaterialRaster>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  md::MaterialRaster *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (md::MaterialRaster *)v2[3];
      v2[3] = 0;
      if (v3)
      {
        md::MaterialRaster::~MaterialRaster(v3);
        MEMORY[0x1A1AF4E00]();
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t md::DaVinciGroundTileData::DaVinciGroundTileData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  geo::codec::VectorTile *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t *v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned __int16 v41;
  geo::codec::VectorTile *v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int16x8_t **v49;
  int16x8_t **v50;
  uint64_t j;
  unint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  float v60;
  long double v61;
  long double v62;
  long double v63;
  long double v64;
  long double v65;
  long double v66;
  long double v67;
  long double v68;
  long double v69;
  double v70;
  uint64_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  unint64_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  unint64_t v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  geo::codec::VectorTile *v97;
  uint64_t v98;
  unsigned int v99;
  double v100;
  double v101;
  double v102;
  int8x16_t v103;
  double v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  double v111;
  double v112;
  double v113;
  int8x16_t v114;
  double v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  void *v119;
  char v120;
  unsigned int v121;
  float v122;
  void *v123;
  float v124;
  float v125;
  float v126;
  float v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  double v151;
  double v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint8x8_t v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  float v169;
  float v170;
  _BOOL8 v171;
  unint64_t v172;
  unint64_t v173;
  size_t prime;
  unint64_t v175;
  uint8x8_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  void *v183;
  uint64_t v184;
  _BYTE v185[64];
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _BYTE v191[304];
  __int128 v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  unint64_t v198;
  double v199[2];
  int v200;
  double v201;
  float v202;
  uint64_t v203;
  float v204;
  char v205;
  float v206;
  geo::codec::VectorTile *v207;
  std::__shared_weak_count *v208;
  _BYTE v209[24];
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  _BYTE v218[304];
  __int128 v219;
  uint64_t v220;
  int v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v14 = a5;
  v15 = *a4;
  if (*a4)
  {
    v16 = *(_QWORD *)(v15 + 152);
    *(_QWORD *)v185 = *(_QWORD *)(v15 + 144);
    *(_QWORD *)&v185[8] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v16 = 0;
    *(_OWORD *)v185 = 0uLL;
  }
  v183 = v14;
  md::MapTileData::MapTileData(a1, a2, a3, (uint64_t)v185, 1);
  if (v16)
  {
    v19 = (unint64_t *)(v16 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
    }
  }
  v184 = a2;
  *(_QWORD *)a1 = &off_1E429A8F0;
  *(_QWORD *)(a1 + 632) = &unk_1E429A938;
  v21 = (uint64_t **)(a1 + 1128);
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1144) = a1 + 1152;
  *(_OWORD *)(a1 + 1180) = xmmword_19FFB3470;
  *(_QWORD *)(a1 + 1196) = 0x80000000800000;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_QWORD *)(a1 + 1320) = a8;
  *(_QWORD *)(a1 + 1328) = *a7;
  v22 = a7[1];
  *(_QWORD *)(a1 + 1336) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0uLL;
  v25 = *a4;
  if (*a4)
  {
    v27 = *(geo::codec::VectorTile **)(v25 + 144);
    v26 = *(std::__shared_weak_count **)(v25 + 152);
    v207 = v27;
    v208 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    v30 = geo::codec::VectorTile::daVinciExternalMaterialCount(v27);
    v31 = geo::codec::VectorTile::daVinciExternalMaterialIDs(v27);
    if (v30)
    {
      v32 = v31;
      for (i = 0; i != v30; ++i)
      {
        v34 = *v21;
        v35 = *(_QWORD *)(v32 + 8 * i);
        v36 = (uint64_t **)(a1 + 1128);
        v37 = (uint64_t **)(a1 + 1128);
        if (*v21)
        {
          while (1)
          {
            while (1)
            {
              v37 = (uint64_t **)v34;
              v38 = v34[4];
              if (v35 >= v38)
                break;
              v34 = *v37;
              v36 = v37;
              if (!*v37)
                goto LABEL_30;
            }
            if (v38 >= v35)
              break;
            v34 = v37[1];
            if (!v34)
            {
              v36 = v37 + 1;
              goto LABEL_30;
            }
          }
        }
        else
        {
LABEL_30:
          v39 = (uint64_t *)operator new(0x28uLL);
          v39[4] = v35;
          *v39 = 0;
          v39[1] = 0;
          v39[2] = (uint64_t)v37;
          *v36 = v39;
          v40 = **(_QWORD **)(a1 + 1120);
          if (v40)
          {
            *(_QWORD *)(a1 + 1120) = v40;
            v39 = *v36;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1128), v39);
          ++*(_QWORD *)(a1 + 1136);
        }
      }
    }
    v41 = md::DaVinciGroundTileData::_buildingCount(a1, &v207);
    v42 = v207;
    v43 = (uint64_t *)geo::codec::VectorTile::key(v207);
    v44 = *(_BYTE *)(a1 + 169);
    v45 = *v43;
    v47 = *(_DWORD *)(a1 + 172);
    v46 = *(_DWORD *)(a1 + 176);
    v48 = geo::codec::VectorTile::daVinciBuildings(v42);
    v49 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(v42, v46 & ~(-1 << (v44 - (BYTE1(v45) & 0x3F))), v47 & ~(-1 << (v44 - (BYTE1(v45) & 0x3F))), (v44 - (BYTE1(v45) & 0x3F)));
    if (v41)
    {
      v50 = v49;
      for (j = 0; j != v41; ++j)
      {
        v52 = *(_QWORD *)(v48 + 40 * (*v50)->u16[j] + 16);
        v53 = *v21;
        v54 = (uint64_t **)(a1 + 1128);
        v55 = (uint64_t **)(a1 + 1128);
        if (*v21)
        {
          while (1)
          {
            while (1)
            {
              v55 = (uint64_t **)v53;
              v56 = v53[4];
              if (v52 >= v56)
                break;
              v53 = *v55;
              v54 = v55;
              if (!*v55)
                goto LABEL_43;
            }
            if (v56 >= v52)
              break;
            v53 = v55[1];
            if (!v53)
            {
              v54 = v55 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          v57 = (uint64_t *)operator new(0x28uLL);
          v57[4] = v52;
          *v57 = 0;
          v57[1] = 0;
          v57[2] = (uint64_t)v55;
          *v54 = v57;
          v58 = **(_QWORD **)(a1 + 1120);
          if (v58)
          {
            *(_QWORD *)(a1 + 1120) = v58;
            v57 = *v54;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1128), v57);
          ++*(_QWORD *)(a1 + 1136);
        }
      }
      v42 = v207;
    }
    v59 = 1 << *(_BYTE *)(a1 + 169);
    v60 = ((double)(v59 + ~*(_DWORD *)(a1 + 172)) + 0.5) / (double)v59;
    v61 = exp(v60 * 6.28318531 + -3.14159265);
    v62 = atan(v61) * 114.591559 + -90.0;
    v63 = cos(v62 * 0.034906585) * -559.82 + 111132.92;
    v64 = v63 + cos(v62 * 0.0698131701) * 1.175;
    v65 = v64 + cos(v62 * 0.104719755) * -0.0023;
    v66 = v62 * 0.00872664626;
    v67 = tan(v62 * 0.00872664626 + 0.78103484);
    v68 = log(v67);
    v69 = tan(v66 + 0.789761487);
    *(float *)&v68 = fabs((log(v69) - v68) * 0.159154943) / (v65 * (float)(1.0 / (float)v59));
    __powidf2();
    *(_DWORD *)(a1 + 1168) = LODWORD(v68);
    *(float *)&v70 = v70 * 0.0000000249532021;
    *(_DWORD *)(a1 + 1172) = LODWORD(v68);
    *(_DWORD *)(a1 + 1176) = LODWORD(v70);
    v206 = *(float *)&v68;
    v71 = geo::codec::VectorTile::key(v42);
    md::VirtualSubTileHelper::computeScaleAndOffset((uint64_t)&v201, a1 + 168, *(_QWORD *)v71, *(unsigned __int16 *)(v71 + 8) | (*(unsigned __int8 *)(v71 + 10) << 16), &v206);
    v185[0] = 0;
    LOBYTE(v186) = 0;
    if (v205)
    {
      *(_DWORD *)v185 = 1065353216;
      *(_OWORD *)&v185[4] = 0uLL;
      *(_DWORD *)&v185[20] = 1065353216;
      *(_OWORD *)&v185[24] = 0uLL;
      *(_DWORD *)&v185[40] = 1065353216;
      *(_QWORD *)&v185[44] = 0;
      *(_QWORD *)&v185[52] = 0;
      *(_DWORD *)&v185[60] = 1065353216;
      LOBYTE(v186) = 1;
      v72.i64[0] = v203;
      v73.i64[0] = *(_QWORD *)v185;
      v74 = (float32x4_t)vzip1q_s32(v72, v72);
      v75 = (int8x16_t)vmulq_f32(v74, *(float32x4_t *)&v185[8]);
      v76 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v185[8], (float32x4_t)xmmword_19FFB3480);
      v77 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v185[8], (float32x4_t)xmmword_19FFB3850);
      v78 = vmlaq_f32((float32x4_t)vextq_s8(v77, v77, 8uLL), (float32x4_t)xmmword_19FFB3850, v73);
      *(_QWORD *)&v185[8] = v78.i64[1];
      *(float32x4_t *)&v185[16] = vmlaq_f32((float32x4_t)vextq_s8(v76, v76, 8uLL), (float32x4_t)xmmword_19FFB3480, v73);
      *(float32x4_t *)&v185[48] = vaddq_f32(*(float32x4_t *)&v185[48], vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v75, v75, 8uLL), v73, v74), *(float32x4_t *)&v185[32], v204));
      LODWORD(v79) = 0;
      HIDWORD(v79) = HIDWORD(v201);
      v78.i64[1] = *(_QWORD *)&v185[24];
      v80 = (float32x4_t)vzip1q_s32((int32x4_t)v79, (int32x4_t)v79);
      v81 = (int8x16_t)vmulq_f32(v80, *(float32x4_t *)&v185[8]);
      v82 = vmlaq_f32((float32x4_t)vextq_s8(v81, v81, 8uLL), v78, v80);
      v83 = (float32x4_t)vzip1q_s32((int32x4_t)LODWORD(v201), (int32x4_t)LODWORD(v201));
      v84 = (int8x16_t)vmulq_f32(v83, *(float32x4_t *)&v185[8]);
      *(float32x4_t *)v185 = vmlaq_f32((float32x4_t)vextq_s8(v84, v84, 8uLL), v78, v83);
      *(float32x4_t *)&v185[16] = v82;
      *(float32x4_t *)&v185[32] = vmulq_n_f32(*(float32x4_t *)&v185[32], v202);
    }
    v85 = geo::codec::VectorTile::daVinciDecalCount(v42);
    v86 = geo::codec::VectorTile::daVinciDecals(v42);
    if (v85)
    {
      v87 = v86;
      for (k = 0; k != v85; ++k)
      {
        v89 = *(_QWORD *)(v87 + 72 * k);
        v90 = *v21;
        v91 = (uint64_t **)(a1 + 1128);
        v92 = (uint64_t **)(a1 + 1128);
        if (*v21)
        {
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v90;
              v93 = v90[4];
              if (v89 >= v93)
                break;
              v90 = *v92;
              v91 = v92;
              if (!*v92)
                goto LABEL_59;
            }
            if (v93 >= v89)
              break;
            v90 = v92[1];
            if (!v90)
            {
              v91 = v92 + 1;
              goto LABEL_59;
            }
          }
        }
        else
        {
LABEL_59:
          v94 = (uint64_t *)operator new(0x28uLL);
          v94[4] = v89;
          *v94 = 0;
          v94[1] = 0;
          v94[2] = (uint64_t)v92;
          *v91 = v94;
          v95 = **(_QWORD **)(a1 + 1120);
          if (v95)
          {
            *(_QWORD *)(a1 + 1120) = v95;
            v94 = *v91;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1128), v94);
          ++*(_QWORD *)(a1 + 1136);
        }
      }
      v42 = v207;
    }
    v96 = geo::codec::VectorTile::daVinciRenderables(v42);
    v97 = v207;
    v98 = geo::codec::VectorTile::daVinciExternalAssetIDs(v207);
    v99 = geo::codec::VectorTile::daVinciRenderableCount(v97);
    md::DaVinciGroundTileData::_buildAssetRequests(a1, v96, v98, v99, (float32x2_t *)v185, v100, v101, v102, v103, v104, v105, v106, v107);
    v108 = geo::codec::VectorTile::daVinciLandmarks(v97);
    v109 = geo::codec::VectorTile::daVinciLandmarkAssetIDs(v97);
    v110 = geo::codec::VectorTile::daVinciLandmarkCount(v97);
    md::DaVinciGroundTileData::_buildAssetRequests(a1, v108, v109, v110, (float32x2_t *)v185, v111, v112, v113, v114, v115, v116, v117, v118);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    v120 = objc_msgSend(v119, "daVinciRoundBuildings");

    v121 = *(unsigned __int8 *)(a1 + 169);
    v122 = v206;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v123, "daVinciBuildingRoundingRadius");
    v125 = v124;

    if (v121 >= 0x10 && (v120 & 1) != 0)
      v126 = v125 * v122;
    else
      v126 = 0.0;
    v127 = 0.5236;
    if (v121 == 16)
      v127 = 1.5708;
    if (v121 == 17)
      v127 = 0.7854;
    *(_QWORD *)&v199[0] = __PAIR64__(LODWORD(v127), LODWORD(v126));
    v199[1] = 2.75516175;
    v200 = 1056964608;
    v128 = geo::codec::VectorTile::daVinciMeshCount(v97);
    v16 = md::DaVinciGroundTileData::_buildingCount(a1, &v207);
    v129 = geo::codec::VectorTile::daVinciDecalCount(v97);
    v130 = (unsigned __int16)(v128 + v16 + v129);
    std::vector<md::Mesh>::reserve(a1 + 1024, v130);
    v198 = (v129 << 32) | (v130 << 48) | ((unint64_t)v128 << 16) | (unsigned __int16)v16;
    v14 = v183;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v183, "gglDevice") + 24))(&v197);
    v131 = v208;
    if (v208)
    {
      v132 = (unint64_t *)&v208->__shared_owners_;
      do
        v133 = __ldxr(v132);
      while (__stxr(v133 + 1, v132));
    }
    *(_QWORD *)&v210 = 0;
    v134 = operator new(0x48uLL);
    *v134 = &off_1E42D0AA8;
    v134[1] = a1;
    v134[2] = v97;
    v134[3] = v131;
    if (v131)
    {
      v135 = (unint64_t *)&v131->__shared_owners_;
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
    }
    v134[4] = a6;
    v134[5] = &v198;
    v134[6] = v199;
    v134[7] = &v201;
    v134[8] = v185;
    *(_QWORD *)&v210 = v134;
    v196 = 0;
    v195 = 0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v197 + 16))(v197, v209, &v195);
    v137 = v196;
    if (v196)
    {
      v138 = (unint64_t *)&v196->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = (_QWORD *)v210;
    if ((_BYTE *)v210 == v209)
    {
      v141 = 4;
      v140 = v209;
    }
    else
    {
      if (!(_QWORD)v210)
        goto LABEL_86;
      v141 = 5;
    }
    (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_86:
    if (v131)
    {
      v142 = (unint64_t *)&v131->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (v197)
    {
      v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 24))(v197);
      v145 = v197;
      v197 = 0;
      *(_QWORD *)v209 = v145;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v144 + 48))(v144, v209);
      v146 = *(_QWORD *)v209;
      *(_QWORD *)v209 = 0;
      if (v146)
        (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
      v147 = v197;
      v197 = 0;
      if (v147)
        (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
    }
    v148 = v208;
    if (v208)
    {
      v149 = (unint64_t *)&v208->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
  }
  v151 = 1.0;
  v152 = 0.0;
  if (*(float *)(a1 + 1192) >= *(float *)(a1 + 1180) && *(float *)(a1 + 1196) >= *(float *)(a1 + 1184))
  {
    v153 = *(float *)(a1 + 1200);
    v154 = *(float *)(a1 + 1188);
    if (v153 >= v154)
    {
      v155 = *(float *)(a1 + 1176);
      v152 = (float)(v154 / v155);
      v151 = (float)(v153 / v155);
    }
  }
  v201 = v152;
  v199[0] = v151;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)(a1 + 168), &v201, v199);
  v156 = v152;
  v157 = v151;
  gdc::Tiled::Tiled((gdc::Tiled *)v185, (const QuadTile *)(a1 + 168), v156, v157);
  v158 = *(_QWORD *)(a1 + 1320);
  *(_WORD *)v209 = *(_WORD *)v185;
  *(_QWORD *)&v209[4] = *(_QWORD *)&v185[4];
  v210 = *(_OWORD *)&v185[24];
  v212 = *(_OWORD *)&v185[48];
  v211 = *(_QWORD *)&v185[40];
  v213 = v186;
  v214 = v187;
  v216 = v189;
  v217 = v190;
  v215 = v188;
  memcpy(v218, v191, sizeof(v218));
  v219 = v192;
  v220 = v193;
  v221 = v194;
  gdc::Context::setContext<md::components::SharedTransformData,md::components::SharedTransformData>(v158, (uint64_t)v209);
  if (*(_WORD *)(v184 + 8) == 33)
  {
    v159 = *(_QWORD *)(a1 + 1320);
    v160 = (_QWORD *)operator new();
    v161 = operator new();
    v160[2] = "md::overlayComponents::Overlayable]";
    v160[3] = 34;
    v160[4] = v161;
    *v160 = &off_1E42B0F28;
    v160[1] = 0x41A3BFA74D47A0E8;
    v162 = *(_QWORD *)(v159 + 8);
    if (v162)
    {
      v163 = (uint8x8_t)vcnt_s8((int8x8_t)v162);
      v163.i16[0] = vaddlv_u8(v163);
      if (v163.u32[0] > 1uLL)
      {
        v16 = 0x41A3BFA74D47A0E8;
        if (v162 <= 0x41A3BFA74D47A0E8)
          v16 = 0x41A3BFA74D47A0E8 % v162;
      }
      else
      {
        v16 = (v162 - 1) & 0x41A3BFA74D47A0E8;
      }
      v164 = *(_QWORD **)(*(_QWORD *)v159 + 8 * v16);
      if (v164)
      {
        v165 = (_QWORD *)*v164;
        if (v165)
        {
          if (v163.u32[0] < 2uLL)
          {
            while (1)
            {
              v167 = v165[1];
              if (v167 == 0x41A3BFA74D47A0E8)
              {
                if (v165[2] == 0x41A3BFA74D47A0E8)
                  goto LABEL_165;
              }
              else if ((v167 & (v162 - 1)) != v16)
              {
                goto LABEL_127;
              }
              v165 = (_QWORD *)*v165;
              if (!v165)
                goto LABEL_127;
            }
          }
          do
          {
            v166 = v165[1];
            if (v166 == 0x41A3BFA74D47A0E8)
            {
              if (v165[2] == 0x41A3BFA74D47A0E8)
                goto LABEL_165;
            }
            else
            {
              if (v166 >= v162)
                v166 %= v162;
              if (v166 != v16)
                break;
            }
            v165 = (_QWORD *)*v165;
          }
          while (v165);
        }
      }
    }
LABEL_127:
    v168 = (char *)operator new(0x30uLL);
    *(_QWORD *)v168 = 0;
    *(int64x2_t *)(v168 + 8) = vdupq_n_s64(0x41A3BFA74D47A0E8uLL);
    *((_QWORD *)v168 + 3) = "md::overlayComponents::Overlayable]";
    *((_QWORD *)v168 + 4) = 34;
    *((_QWORD *)v168 + 5) = v160;
    v169 = (float)(unint64_t)(*(_QWORD *)(v159 + 24) + 1);
    v170 = *(float *)(v159 + 32);
    if (!v162 || (float)(v170 * (float)v162) < v169)
    {
      v171 = 1;
      if (v162 >= 3)
        v171 = (v162 & (v162 - 1)) != 0;
      v172 = v171 | (2 * v162);
      v173 = vcvtps_u32_f32(v169 / v170);
      if (v172 <= v173)
        prime = v173;
      else
        prime = v172;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v162 = *(_QWORD *)(v159 + 8);
      }
      if (prime > v162)
        goto LABEL_139;
      if (prime < v162)
      {
        v175 = vcvtps_u32_f32((float)*(unint64_t *)(v159 + 24) / *(float *)(v159 + 32));
        if (v162 < 3 || (v176 = (uint8x8_t)vcnt_s8((int8x8_t)v162), v176.i16[0] = vaddlv_u8(v176), v176.u32[0] > 1uLL))
        {
          v175 = std::__next_prime(v175);
        }
        else
        {
          v177 = 1 << -(char)__clz(v175 - 1);
          if (v175 >= 2)
            v175 = v177;
        }
        if (prime <= v175)
          prime = v175;
        if (prime < v162)
LABEL_139:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v159, prime);
      }
      v162 = *(_QWORD *)(v159 + 8);
      if ((v162 & (v162 - 1)) != 0)
      {
        if (v162 <= 0x41A3BFA74D47A0E8)
          v16 = 0x41A3BFA74D47A0E8 % v162;
        else
          v16 = 0x41A3BFA74D47A0E8;
      }
      else
      {
        v16 = (v162 - 1) & 0x41A3BFA74D47A0E8;
      }
    }
    v178 = *(_QWORD *)v159;
    v179 = *(_QWORD **)(*(_QWORD *)v159 + 8 * v16);
    if (v179)
    {
      *(_QWORD *)v168 = *v179;
    }
    else
    {
      *(_QWORD *)v168 = *(_QWORD *)(v159 + 16);
      *(_QWORD *)(v159 + 16) = v168;
      *(_QWORD *)(v178 + 8 * v16) = v159 + 16;
      if (!*(_QWORD *)v168)
      {
LABEL_164:
        ++*(_QWORD *)(v159 + 24);
        goto LABEL_165;
      }
      v180 = *(_QWORD *)(*(_QWORD *)v168 + 8);
      if ((v162 & (v162 - 1)) != 0)
      {
        if (v180 >= v162)
          v180 %= v162;
      }
      else
      {
        v180 &= v162 - 1;
      }
      v179 = (_QWORD *)(*(_QWORD *)v159 + 8 * v180);
    }
    *v179 = v168;
    goto LABEL_164;
  }
LABEL_165:

  return a1;
}

void sub_19FCE276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, void **a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  void *v49;
  std::__shared_weak_count *v50;
  char *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;

  v18 = v16[5];
  v16[5] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  operator delete(v16);
  a15 = v15 + 1344;
  std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a15);
  v19 = *(std::__shared_weak_count **)(v15 + 1336);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)(v15 + 1312);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(void **)(v15 + 1280);
  if (v25)
  {
    *(_QWORD *)(v15 + 1288) = v25;
    operator delete(v25);
    v26 = *(void **)(v15 + 1256);
    if (!v26)
    {
LABEL_15:
      v27 = *(void **)(v15 + 1232);
      if (!v27)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v26 = *(void **)(v15 + 1256);
    if (!v26)
      goto LABEL_15;
  }
  *(_QWORD *)(v15 + 1264) = v26;
  operator delete(v26);
  v27 = *(void **)(v15 + 1232);
  if (!v27)
  {
LABEL_17:
    v28 = *a10;
    if (*a10)
    {
      *(_QWORD *)(v15 + 1216) = v28;
      operator delete(v28);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v15 + 1152));
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v15 + 1128));
    v29 = *(_QWORD **)(v15 + 1096);
    if (v29)
    {
      v32 = *(_QWORD **)(v15 + 1104);
      v33 = *(void **)(v15 + 1096);
      if (v32 != v29)
      {
        do
        {
          v34 = (_QWORD *)*(v32 - 3);
          if (v34)
          {
            do
            {
              v35 = (_QWORD *)*v34;
              operator delete(v34);
              v34 = v35;
            }
            while (v35);
          }
          v37 = (void *)*(v32 - 5);
          v32 -= 5;
          v36 = v37;
          *v32 = 0;
          if (v37)
            operator delete(v36);
        }
        while (v32 != v29);
        v33 = *(void **)(v15 + 1096);
      }
      *(_QWORD *)(v15 + 1104) = v29;
      operator delete(v33);
      v30 = *(char **)(v15 + 1072);
      if (!v30)
      {
LABEL_21:
        v31 = *(char **)(v15 + 1048);
        if (!v31)
        {
LABEL_49:
          v45 = (char *)*a13;
          if (!*a13)
          {
            v46 = *(char **)(v15 + 1000);
            if (!v46)
              goto LABEL_51;
            goto LABEL_72;
          }
          v51 = *(char **)(v15 + 1032);
          v52 = *a13;
          if (v51 == v45)
          {
LABEL_71:
            *(_QWORD *)(v15 + 1032) = v45;
            operator delete(v52);
            v46 = *(char **)(v15 + 1000);
            if (!v46)
            {
LABEL_51:
              v47 = *(char **)(v15 + 976);
              if (!v47)
                goto LABEL_52;
              goto LABEL_82;
            }
LABEL_72:
            v59 = *(char **)(v15 + 1008);
            v60 = v46;
            if (v59 != v46)
            {
              do
              {
                v61 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v59 -= 16;
              }
              while (v59 != v46);
              v60 = *(char **)(v15 + 1000);
            }
            *(_QWORD *)(v15 + 1008) = v46;
            operator delete(v60);
            v47 = *(char **)(v15 + 976);
            if (!v47)
            {
LABEL_52:
              v48 = *(char **)(v15 + 952);
              if (!v48)
                goto LABEL_53;
              goto LABEL_92;
            }
LABEL_82:
            v64 = *(char **)(v15 + 984);
            v65 = v47;
            if (v64 != v47)
            {
              do
              {
                v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
                if (v66)
                {
                  v67 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                v64 -= 16;
              }
              while (v64 != v47);
              v65 = *(char **)(v15 + 976);
            }
            *(_QWORD *)(v15 + 984) = v47;
            operator delete(v65);
            v48 = *(char **)(v15 + 952);
            if (!v48)
            {
LABEL_53:
              v49 = *(void **)(v15 + 928);
              if (!v49)
                goto LABEL_54;
              goto LABEL_102;
            }
LABEL_92:
            v69 = *(char **)(v15 + 960);
            v70 = v48;
            if (v69 != v48)
            {
              do
              {
                v71 = (std::__shared_weak_count *)*((_QWORD *)v69 - 1);
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v69 -= 16;
              }
              while (v69 != v48);
              v70 = *(char **)(v15 + 952);
            }
            *(_QWORD *)(v15 + 960) = v48;
            operator delete(v70);
            v49 = *(void **)(v15 + 928);
            if (!v49)
            {
LABEL_54:
              v50 = *(std::__shared_weak_count **)(v15 + 920);
              if (!v50)
                goto LABEL_107;
LABEL_103:
              v74 = (unint64_t *)&v50->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
LABEL_107:
              v76 = *(std::__shared_weak_count **)(v15 + 904);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v79 = *(std::__shared_weak_count **)(v15 + 888);
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              v82 = *(std::__shared_weak_count **)(v15 + 872);
              if (v82)
              {
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              v85 = *(std::__shared_weak_count **)(v15 + 856);
              if (v85)
              {
                v86 = (unint64_t *)&v85->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              v88 = *(std::__shared_weak_count **)(v15 + 840);
              if (v88)
              {
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              v91 = *(std::__shared_weak_count **)(v15 + 824);
              if (v91)
              {
                v92 = (unint64_t *)&v91->__shared_owners_;
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              v94 = *(std::__shared_weak_count **)(v15 + 808);
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v97 = *(std::__shared_weak_count **)(v15 + 792);
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              v100 = *(std::__shared_weak_count **)(v15 + 776);
              if (v100)
              {
                v101 = (unint64_t *)&v100->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
              v103 = *(std::__shared_weak_count **)(v15 + 760);
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              v106 = *(std::__shared_weak_count **)(v15 + 744);
              if (v106)
              {
                v107 = (unint64_t *)&v106->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              v109 = *(std::__shared_weak_count **)(v15 + 728);
              if (v109)
              {
                v110 = (unint64_t *)&v109->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
              md::MapTileData::~MapTileData((md::MapTileData *)v15);

              _Unwind_Resume(a1);
            }
LABEL_102:
            *(_QWORD *)(v15 + 936) = v49;
            operator delete(v49);
            v50 = *(std::__shared_weak_count **)(v15 + 920);
            if (!v50)
              goto LABEL_107;
            goto LABEL_103;
          }
          while (1)
          {
            v53 = (std::__shared_weak_count *)*((_QWORD *)v51 - 1);
            if (!v53)
              goto LABEL_63;
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
              v56 = (std::__shared_weak_count *)*((_QWORD *)v51 - 9);
              if (v56)
              {
LABEL_64:
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
            }
            else
            {
LABEL_63:
              v56 = (std::__shared_weak_count *)*((_QWORD *)v51 - 9);
              if (v56)
                goto LABEL_64;
            }
            v51 -= 80;
            if (v51 == v45)
            {
              v52 = *a13;
              goto LABEL_71;
            }
          }
        }
LABEL_39:
        v40 = *(char **)(v15 + 1056);
        v41 = v31;
        if (v40 != v31)
        {
          do
          {
            v42 = (std::__shared_weak_count *)*((_QWORD *)v40 - 1);
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v40 -= 16;
          }
          while (v40 != v31);
          v41 = *(char **)(v15 + 1048);
        }
        *(_QWORD *)(v15 + 1056) = v31;
        operator delete(v41);
        goto LABEL_49;
      }
    }
    else
    {
      v30 = *(char **)(v15 + 1072);
      if (!v30)
        goto LABEL_21;
    }
    v38 = *(char **)(v15 + 1080);
    v39 = v30;
    if (v38 != v30)
    {
      do
        md::DaVinciGroundTileData::RibbonAsset::~RibbonAsset((md::DaVinciGroundTileData::RibbonAsset *)(v38 - 56));
      while (v38 != v30);
      v39 = *(char **)(v15 + 1072);
    }
    *(_QWORD *)(v15 + 1080) = v30;
    operator delete(v39);
    v31 = *(char **)(v15 + 1048);
    if (!v31)
      goto LABEL_49;
    goto LABEL_39;
  }
LABEL_16:
  *(_QWORD *)(v15 + 1240) = v27;
  operator delete(v27);
  goto LABEL_17;
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::WriteStencilBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::WriteStencilBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PatternedRibbon::WriteStencilBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

md::PatternedSharedResources *md::PatternedSharedResources::PatternedSharedResources(md::PatternedSharedResources *this, const StandardLibrary *a2, const RenderTargetFormat *a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  unsigned __int8 v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t *v54;
  unint64_t *v55;
  unint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int16x8_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int32x4_t v122;
  int8x16_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if ((a4 & 1) != 0 || a5)
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)v17 = &off_1E42B5DE8;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 36) = 65537;
    *(_DWORD *)(v17 + 44) = 0;
    *(_QWORD *)(v17 + 48) = 1;
    *(_WORD *)(v17 + 56) = 0;
    *(_BYTE *)(v17 + 58) = 3;
    *(_QWORD *)(v17 + 67) = 0;
    *(_QWORD *)(v17 + 59) = 0;
    *(_BYTE *)(v17 + 75) = 0;
    *(_QWORD *)(v17 + 132) = 0;
    *(_QWORD *)(v17 + 124) = 0;
    *(_WORD *)(v17 + 188) = 257;
    *(_QWORD *)(v17 + 192) = 0;
    *(_QWORD *)(v17 + 200) = 0;
    *(_BYTE *)(v17 + 208) = 0;
    v18 = *(_QWORD *)this;
    *(_QWORD *)this = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = operator new();
    *(_DWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)v19 = &off_1E42B5DE8;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 36) = 65537;
    *(_DWORD *)(v19 + 44) = 0;
    *(_QWORD *)(v19 + 48) = 0xFF0000000400;
    *(_WORD *)(v19 + 56) = 0;
    *(_BYTE *)(v19 + 58) = 3;
    *(_QWORD *)(v19 + 67) = 0;
    *(_QWORD *)(v19 + 59) = 0;
    *(_BYTE *)(v19 + 75) = 0;
    *(_QWORD *)(v19 + 132) = 0;
    *(_QWORD *)(v19 + 124) = 0;
    *(_WORD *)(v19 + 188) = 257;
    *(_QWORD *)(v19 + 192) = 0;
    *(_QWORD *)(v19 + 200) = 0;
    *(_BYTE *)(v19 + 208) = 0;
    v20 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = operator new();
    *(_DWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)v21 = &off_1E42B5DE8;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 36) = 66304;
    *(_DWORD *)(v21 + 44) = 0;
    *(_QWORD *)(v21 + 48) = 1;
    *(_WORD *)(v21 + 56) = 0;
    *(_BYTE *)(v21 + 58) = 3;
    *(_QWORD *)(v21 + 67) = 0;
    *(_QWORD *)(v21 + 59) = 0;
    *(_BYTE *)(v21 + 75) = 0;
    *(_QWORD *)(v21 + 132) = 0;
    *(_QWORD *)(v21 + 124) = 0;
    *(_WORD *)(v21 + 188) = 257;
    *(_QWORD *)(v21 + 192) = 0;
    *(_QWORD *)(v21 + 200) = 0;
    *(_BYTE *)(v21 + 208) = 0;
    v22 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  else
  {
    v9 = operator new();
    *(_DWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)v9 = &off_1E42B5DE8;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 36) = 65537;
    *(_DWORD *)(v9 + 44) = 0;
    *(_QWORD *)(v9 + 48) = 0xFFFF0200000700;
    *(_WORD *)(v9 + 56) = 0;
    *(_BYTE *)(v9 + 58) = 3;
    *(_QWORD *)(v9 + 67) = 0;
    *(_QWORD *)(v9 + 59) = 0;
    *(_BYTE *)(v9 + 75) = 0;
    *(_QWORD *)(v9 + 132) = 0;
    *(_QWORD *)(v9 + 124) = 0;
    *(_WORD *)(v9 + 188) = 257;
    *(_QWORD *)(v9 + 192) = 0;
    *(_QWORD *)(v9 + 200) = 0;
    *(_BYTE *)(v9 + 208) = 0;
    v10 = *(_QWORD *)this;
    *(_QWORD *)this = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = *(_QWORD *)this;
    }
    *(_BYTE *)(v9 + 208) = 1;
    v11 = operator new();
    *(_DWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)v11 = &off_1E42B5DE8;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 36) = 65537;
    *(_DWORD *)(v11 + 44) = 0;
    *(_QWORD *)(v11 + 48) = 0x80FF0300000400;
    *(_WORD *)(v11 + 56) = 0;
    *(_BYTE *)(v11 + 58) = 3;
    *(_QWORD *)(v11 + 67) = 0;
    *(_QWORD *)(v11 + 59) = 0;
    *(_BYTE *)(v11 + 75) = 0;
    *(_QWORD *)(v11 + 132) = 0;
    *(_QWORD *)(v11 + 124) = 0;
    *(_WORD *)(v11 + 188) = 257;
    *(_QWORD *)(v11 + 192) = 0;
    *(_QWORD *)(v11 + 200) = 0;
    *(_BYTE *)(v11 + 208) = 0;
    v12 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = operator new();
    *(_DWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)v13 = &off_1E42B5DE8;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 36) = 66304;
    *(_DWORD *)(v13 + 44) = 0;
    *(_QWORD *)(v13 + 48) = 1;
    *(_WORD *)(v13 + 56) = 0;
    *(_BYTE *)(v13 + 58) = 3;
    *(_QWORD *)(v13 + 67) = 0;
    *(_QWORD *)(v13 + 59) = 0;
    *(_BYTE *)(v13 + 75) = 0;
    *(_QWORD *)(v13 + 132) = 0;
    *(_QWORD *)(v13 + 124) = 0;
    *(_WORD *)(v13 + 188) = 257;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_BYTE *)(v13 + 208) = 0;
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = operator new();
    *(_DWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)v15 = &off_1E42B5DE8;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 36) = 65537;
    *(_DWORD *)(v15 + 44) = 0;
    *(_QWORD *)(v15 + 48) = 0x807F0200000400;
    *(_WORD *)(v15 + 56) = 0;
    *(_BYTE *)(v15 + 58) = 3;
    *(_QWORD *)(v15 + 67) = 0;
    *(_QWORD *)(v15 + 59) = 0;
    *(_BYTE *)(v15 + 75) = 0;
    *(_QWORD *)(v15 + 132) = 0;
    *(_QWORD *)(v15 + 124) = 0;
    *(_WORD *)(v15 + 188) = 257;
    *(_QWORD *)(v15 + 192) = 0;
    *(_QWORD *)(v15 + 200) = 0;
    *(_BYTE *)(v15 + 208) = 0;
    v16 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v15 = *((_QWORD *)this + 3);
    }
    *(_BYTE *)(v15 + 208) = 1;
    *(_BYTE *)(v15 + 56) = 1;
  }
  *(_BYTE *)(*(_QWORD *)this + 56) = 1;
  v23 = *((_QWORD *)this + 1);
  *(_BYTE *)(v23 + 56) = 1;
  *(_BYTE *)(v23 + 208) = 1;
  *(_BYTE *)(*((_QWORD *)this + 2) + 56) = 1;
  *((_QWORD *)this + 4) = 0;
  v24 = (uint64_t *)((char *)this + 32);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a4)
    v25 = 1;
  else
    v25 = 6;
  if (a4)
    v26 = 0;
  else
    v26 = 7;
  v27 = operator new();
  v28 = v27;
  v29 = *((_QWORD *)a2 + 10);
  v30 = *(_QWORD *)(v29 + 1568);
  v31 = *(std::__shared_weak_count **)(v29 + 1576);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    v148 = *(_OWORD *)a3->colorFormats;
    v149 = *(_OWORD *)&a3->colorFormatsCount;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    v150 = v148;
    v152 = v149;
    *(_QWORD *)v27 = v30;
    *(_QWORD *)(v27 + 8) = v31;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  else
  {
    v150 = *(_OWORD *)a3->colorFormats;
    v152 = *(_OWORD *)&a3->colorFormatsCount;
    *(_QWORD *)v27 = v30;
    *(_QWORD *)(v27 + 8) = 0;
  }
  *(_QWORD *)(v27 + 104) = 0;
  *(_OWORD *)(v27 + 16) = v150;
  *(_OWORD *)(v27 + 32) = v152;
  *(_BYTE *)(v27 + 48) = a4 ^ 1;
  *(_DWORD *)(v27 + 52) = v25;
  *(_DWORD *)(v27 + 56) = v26;
  *(_QWORD *)(v27 + 60) = 0x100000000;
  *(_DWORD *)(v27 + 68) = v26;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 80) = 0;
  *(_DWORD *)(v27 + 88) = 0;
  *(_BYTE *)(v27 + 92) = 15;
  *(_QWORD *)(v27 + 112) = 0;
  *(_QWORD *)(v27 + 96) = v27 + 104;
  if (v31)
  {
    v36 = (unint64_t *)&v31->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v38 = *v24;
  *v24 = v28;
  if (v38)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v38 + 104));
    v39 = *(std::__shared_weak_count **)(v38 + 8);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    MEMORY[0x1A1AF4E00](v38, 0x1020C40AD78EA61);
  }
  if (!v31)
    goto LABEL_49;
  v42 = (unint64_t *)&v31->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if ((a4 & 1) != 0)
      goto LABEL_78;
  }
  else
  {
LABEL_49:
    if ((a4 & 1) != 0)
      goto LABEL_78;
  }
  v44 = *((_QWORD *)a2 + 10);
  v45 = *(_QWORD *)(v44 + 1592);
  v46 = *(std::__shared_weak_count **)(v44 + 1600);
  v146 = v45;
  v147 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = (char *)operator new(0x198uLL);
  *((_QWORD *)v49 + 1) = 0;
  *((_QWORD *)v49 + 2) = 0;
  *(_QWORD *)v49 = &off_1E42DF6F0;
  v151 = *(_OWORD *)a3->colorFormats;
  v153 = *(_OWORD *)&a3->colorFormatsCount;
  if ((v50 & 1) == 0
  {
    if ((v135 & 1) == 0
    {
      if ((v139 & 1) == 0
      {
        if ((v143 & 1) == 0
        {
          ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PatternedRibbon::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r;
        unk_1ECE372C8 = 1;
      }
      ggl::PatternedRibbon::WriteStencilBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r;
      *(_QWORD *)algn_1EE58BDF8 = &ggl::PatternedRibbon::pipelineDataWriteStencilBasePipelineDeviceStructs(void)::ref;
      qword_1EE58BE00 = 0;
      if ((v140 & 1) == 0
      {
        ggl::PatternedRibbon::pipelineDataWriteStencilBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(_QWORD *)algn_1EE58BF48 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1EE58BF50 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
      }
      qword_1EE58BE08 = (uint64_t)&ggl::PatternedRibbon::pipelineDataWriteStencilBasePipelineConstantStructs(void)::ref;
      *(_OWORD *)algn_1EE58BE10 = xmmword_19FFB3410;
    }
    ggl::PatternedRibbon::WriteStencilBasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PatternedRibbon::WriteStencilBasePipelineSetup::typedReflection(void)::ref;
    if ((v136 & 1) == 0
    {
      ggl::WriteStencilPatternedRibbonShader::typedReflection(void)::ref = (uint64_t)"WriteStencilPatternedRibbonShader";
      if ((v141 & 1) == 0
      {
        qword_1ECE432B0 = (uint64_t)"WriteStencilPatternedRibbonShader";
        unk_1ECE432B8 = ggl::writeStencilPatternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE432C0 = 1;
        unk_1ECE432C8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE432D0 = 3;
        unk_1ECE432D8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE432E0 = 0;
        unk_1ECE432E8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref = 3294471237;
        qword_1ECE432F0 = 0;
        unk_1ECE432F8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE43308 = 0;
        unk_1ECE43310 = 0;
        qword_1ECE43300 = 0;
      }
      qword_1ECE3BE30 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3BE38 = -1000496059;
      if ((v142 & 1) == 0
      {
        ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x11CF0EFDFLL;
        qword_1ECE435D8 = (uint64_t)"WriteStencilPatternedRibbonShader";
        unk_1ECE435E0 = 0;
        qword_1ECE435E8 = 0;
        unk_1ECE435F0 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE435F8 = 1;
        unk_1ECE43600 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE43608 = 0;
        unk_1ECE43610 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE43618 = 0;
        unk_1ECE43620 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE43630 = 0;
        unk_1ECE43638 = 0;
        qword_1ECE43628 = 0;
      }
      qword_1ECE3BE40 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3BE48 = 485552095;
      qword_1ECE3BE50 = (uint64_t)ggl::writeStencilPatternedRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3BE58 = 3;
      qword_1ECE3BE60 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3BE68 = 0;
      qword_1ECE3BE70 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3BE78 = 0;
    }
    qword_1EE58BDA0 = (uint64_t)&ggl::WriteStencilPatternedRibbonShader::typedReflection(void)::ref;
    if ((v137 & 1) == 0
    {
      ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE58BE68 = 0;
      qword_1EE58BE70 = (uint64_t)"";
      dword_1EE58BE78 = 0;
      qword_1EE58BE80 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineAttributeBinding_0(void)::attr;
      unk_1EE58BE88 = 5;
    }
    qword_1EE58BDA8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineAttributeStructBinding(void)::attr;
    unk_1EE58BDB0 = 1;
    qword_1EE58BDB8 = 0;
    unk_1EE58BDC0 = 0;
    qword_1EE58BDC8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineDeviceStructBinding(void)::ref;
    unk_1EE58BDD0 = 0;
    if ((v138 & 1) == 0
    {
      ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE58BEA8 = 0;
      qword_1EE58BEB0 = (uint64_t)"view";
      dword_1EE58BEB8 = 3;
      qword_1EE58BEC0 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineConstantViewBinding(void)::reflection;
      unk_1EE58BEC8 = xmmword_19FFB35A0;
      qword_1EE58BED8 = 1;
      unk_1EE58BEE0 = "transform";
      dword_1EE58BEE8 = 3;
      qword_1EE58BEF0 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineConstantTransformBinding(void)::reflection;
      unk_1EE58BEF8 = xmmword_19FFB3660;
      qword_1EE58BF08 = 2;
      unk_1EE58BF10 = "style";
      dword_1EE58BF18 = 3;
      qword_1EE58BF20 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineConstantStyleBinding(void)::reflection;
      unk_1EE58BF28 = 7;
    }
    qword_1EE58BDD8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateWriteStencilBasePipelineConstantStructBinding(void)::ref;
    unk_1EE58BDE0 = 3;
  }
  if (v147)
  {
    v51 = (unint64_t *)&v147->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    *((_DWORD *)v49 + 14) = 0;
    *((_QWORD *)v49 + 5) = 0;
    *((_QWORD *)v49 + 6) = 0;
    *((_QWORD *)v49 + 3) = &off_1E42B6760;
    *((_QWORD *)v49 + 4) = 0;
    *((_QWORD *)v49 + 8) = &ggl::PatternedRibbon::WriteStencilBasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v49 + 9) = v146;
    *((_QWORD *)v49 + 10) = v147;
    do
      v53 = __ldxr(v51);
    while (__stxr(v53 + 1, v51));
  }
  else
  {
    *((_DWORD *)v49 + 14) = 0;
    *((_QWORD *)v49 + 5) = 0;
    *((_QWORD *)v49 + 6) = 0;
    *((_QWORD *)v49 + 3) = &off_1E42B6760;
    *((_QWORD *)v49 + 4) = 0;
    *((_QWORD *)v49 + 8) = &ggl::PatternedRibbon::WriteStencilBasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v49 + 9) = v146;
    *((_QWORD *)v49 + 10) = 0;
  }
  v54 = (int8x16_t *)(v49 + 328);
  v49[136] = 0;
  *(_OWORD *)(v49 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v49 + 156) = 0;
  *(_QWORD *)(v49 + 172) = 0;
  *(_QWORD *)(v49 + 164) = 0;
  v49[184] = 0;
  *(_OWORD *)(v49 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v49 + 204) = 0;
  *(_QWORD *)(v49 + 220) = 0;
  *(_QWORD *)(v49 + 212) = 0;
  v49[232] = 0;
  *(_OWORD *)(v49 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v49 + 252) = 0;
  *(_QWORD *)(v49 + 268) = 0;
  *(_QWORD *)(v49 + 260) = 0;
  *(_OWORD *)(v49 + 280) = v151;
  *(_OWORD *)(v49 + 296) = v153;
  v49[312] = 0;
  *((_QWORD *)v49 + 48) = 0;
  *((_OWORD *)v49 + 22) = 0u;
  *((_OWORD *)v49 + 23) = 0u;
  *((_OWORD *)v49 + 20) = 0u;
  *((_OWORD *)v49 + 21) = 0u;
  *((_QWORD *)v49 + 49) = 0x100000001;
  v49[400] = 0;
  v49[88] = 0;
  *(_WORD *)(v49 + 89) = v144;
  v49[91] = v145;
  *(_OWORD *)(v49 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v49 + 108) = 0;
  *(_QWORD *)(v49 + 124) = 0;
  *(_QWORD *)(v49 + 116) = 0;
  v49[132] = 0;
  if (v147)
  {
    v55 = (unint64_t *)&v147->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v54->i64[0] = 0;
  *((_DWORD *)v49 + 84) = 0;
  v57 = *(int8x16_t *)(v49 + 344);
  v58 = vceqzq_s8(*v54);
  v59 = vmovl_high_s8(v58);
  v60 = vmovl_s16(*(int16x4_t *)v59.i8);
  v61.i64[0] = v60.u32[0];
  v61.i64[1] = v60.u32[1];
  v62 = v61;
  v63 = vmovl_s8(*(int8x8_t *)v58.i8);
  v64 = vmovl_s16(*(int16x4_t *)v63.i8);
  v61.i64[0] = v64.u32[0];
  v61.i64[1] = v64.u32[1];
  v65 = v61;
  v66 = vmovl_high_s16(v59);
  v61.i64[0] = v66.u32[0];
  v61.i64[1] = v66.u32[1];
  v67 = v61;
  v68 = vmovl_high_s16(v63);
  v61.i64[0] = v68.u32[0];
  v61.i64[1] = v68.u32[1];
  v69 = v61;
  v61.i64[0] = v60.u32[2];
  v61.i64[1] = v60.u32[3];
  v70 = v61;
  v61.i64[0] = v64.u32[2];
  v61.i64[1] = v64.u32[3];
  v71 = v61;
  v61.i64[0] = v66.u32[2];
  v61.i64[1] = v66.u32[3];
  v72 = v61;
  v61.i64[0] = v68.u32[2];
  v61.i64[1] = v68.u32[3];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v61);
  v74 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v72);
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v71);
  v76 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v67);
  *((_QWORD *)v49 + 3) = &off_1E42B7288;
  v77 = vceqzq_s8(v57);
  v78 = vmovl_high_s8(v77);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v61.i64[0] = v79.u32[0];
  v61.i64[1] = v79.u32[1];
  v80 = v61;
  v81 = vmovl_s8(*(int8x8_t *)v77.i8);
  v82 = vmovl_s16(*(int16x4_t *)v81.i8);
  v61.i64[0] = v82.u32[0];
  v61.i64[1] = v82.u32[1];
  v83 = v61;
  v84 = vmovl_high_s16(v78);
  v61.i64[0] = v84.u32[0];
  v61.i64[1] = v84.u32[1];
  v85 = v61;
  v86 = vmovl_high_s16(v81);
  v61.i64[0] = v86.u32[0];
  v61.i64[1] = v86.u32[1];
  v87 = v61;
  v61.i64[0] = v79.u32[2];
  v61.i64[1] = v79.u32[3];
  v88 = v61;
  v61.i64[0] = v82.u32[2];
  v61.i64[1] = v82.u32[3];
  v89 = v61;
  v61.i64[0] = v84.u32[2];
  v61.i64[1] = v84.u32[3];
  v90 = v61;
  v61.i64[0] = v86.u32[2];
  v61.i64[1] = v86.u32[3];
  v91 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v90);
  v92 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v80), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v62));
  v93 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v83), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v65));
  v94 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v85), v76);
  v95 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v87), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v69));
  v96 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v88), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v70));
  v97 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v89), v75);
  v98 = vorrq_s8(v91, v74);
  v99 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v61), v73);
  v100 = vceqzq_s8(*(int8x16_t *)(v49 + 360));
  v101 = vmovl_s8(*(int8x8_t *)v100.i8);
  v102 = vmovl_high_s16(v101);
  v61.i64[0] = v102.i32[2];
  v61.i64[1] = v102.i32[3];
  v103 = v61;
  v104 = vmovl_high_s8(v100);
  v105 = vmovl_high_s16(v104);
  v61.i64[0] = v105.i32[2];
  v61.i64[1] = v105.i32[3];
  v106 = v61;
  v107 = vmovl_s16(*(int16x4_t *)v101.i8);
  v61.i64[0] = v107.i32[2];
  v61.i64[1] = v107.i32[3];
  v108 = v61;
  v109 = vmovl_s16(*(int16x4_t *)v104.i8);
  v61.i64[0] = v109.i32[2];
  v61.i64[1] = v109.i32[3];
  v110 = v61;
  v61.i64[0] = v102.i32[0];
  v61.i64[1] = v102.i32[1];
  v111 = v61;
  v61.i64[0] = v105.i32[0];
  v61.i64[1] = v105.i32[1];
  v112 = v61;
  v61.i64[0] = v107.i32[0];
  v61.i64[1] = v107.i32[1];
  v113 = v61;
  v61.i64[0] = v109.i32[0];
  v61.i64[1] = v109.i32[1];
  v114 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v61);
  v115 = vceqzq_s8(*(int8x16_t *)(v49 + 376));
  v116 = vmovl_high_s8(v115);
  v117 = vmovl_s16(*(int16x4_t *)v116.i8);
  v61.i64[0] = v117.i32[0];
  v61.i64[1] = v117.i32[1];
  v118 = v61;
  v119 = vmovl_s8(*(int8x8_t *)v115.i8);
  v120 = vmovl_s16(*(int16x4_t *)v119.i8);
  v61.i64[0] = v120.i32[0];
  v61.i64[1] = v120.i32[1];
  v121 = v61;
  v122 = vmovl_high_s16(v116);
  v61.i64[0] = v122.i32[0];
  v61.i64[1] = v122.i32[1];
  v123 = v61;
  v124 = vmovl_high_s16(v119);
  v61.i64[0] = v124.i32[0];
  v61.i64[1] = v124.i32[1];
  v125 = v61;
  v61.i64[0] = v117.i32[2];
  v61.i64[1] = v117.i32[3];
  v126 = v61;
  v61.i64[0] = v120.i32[2];
  v61.i64[1] = v120.i32[3];
  v127 = v61;
  v61.i64[0] = v122.i32[2];
  v61.i64[1] = v122.i32[3];
  v128 = v61;
  v61.i64[0] = v124.i32[2];
  v61.i64[1] = v124.i32[3];
  *((_QWORD *)v49 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v121), vbicq_s8((int8x16_t)xmmword_19FFB3170, v113)), v93), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v118), v114), v92)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v125), vbicq_s8((int8x16_t)xmmword_19FFB3190, v111)), v95), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v123), vbicq_s8((int8x16_t)xmmword_19FFB3180, v112)),
                                               v94))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v127), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v108)), v97), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v126), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v110)), v96)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v61), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v103)), v99), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v128),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v106)),
                                               v98)))));
  v49[312] = 1;
  v129 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = v49 + 24;
  *((_QWORD *)this + 6) = v49;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v147)
  {
    v132 = (unint64_t *)&v147->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
LABEL_78:
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_BYTE *)this + 96) = a4;
  return this;
}

void sub_19FCE40A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);
  std::unique_ptr<md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>>::~unique_ptr[abi:nn180100](v4);
  v7 = v3[3];
  v3[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v3[2];
  v3[2] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v3[1];
  v3[1] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *v3;
  *v3 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t md::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C6E0;
  v2 = (std::__shared_weak_count *)a1[116];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C6E0;
  v2 = (std::__shared_weak_count *)a1[116];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF108;
  v2 = *(_QWORD **)(a1 + 888);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 896);
    v4 = *(void **)(a1 + 888);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 120);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 888);
    }
    *(_QWORD *)(a1 + 896) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 864);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 864);
  *(_QWORD *)(a1 + 872) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 864);
  }
  free(v21);
  v24 = *(void **)(a1 + 840);
  if (v24)
  {
    *(_QWORD *)(a1 + 848) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 808);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 816);
    v27 = *(_QWORD *)(a1 + 808);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 816);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 808);
    }
    *(_QWORD *)(a1 + 816) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 832) + 40))(*(_QWORD *)(a1 + 832), v27, *(_QWORD *)(a1 + 824) - v27);
  }
  v31 = *(void **)(a1 + 784);
  if (v31)
  {
    *(_QWORD *)(a1 + 792) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 656) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 672) = 3131955885;
  *(_QWORD *)(a1 + 528) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 544) = 3131955885;
  *(_QWORD *)(a1 + 400) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 416) = 3131955885;
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PatternedBatch::~PatternedBatch(md::PatternedBatch *this)
{
  md::PatternedBatch::~PatternedBatch(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = &off_1E428FBB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 129);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 125);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *(_QWORD *)this = &off_1E428C6E0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 116);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C6E0;
  v2 = (std::__shared_weak_count *)a1[116];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v14;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          v8 = (void (***)(_QWORD, uint64_t))*--v4;
          v7 = v8;
          *v4 = 0;
          if (v8)
          {
            (**v7)(v7, v5);
            {
              v14 = v3;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v3 = v14;
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 120);
          }
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v5, *(_QWORD *)(v2 + 72) - v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C4010FC18DELL);
  }
  return a1;
}

void md::PatternedPipelineStateManager::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, __int8 a3, __int8 a4, unsigned __int8 a5, __int8 a6, unsigned __int8 a7, __int8 a8)
{
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unsigned __int8 v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  char v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t **v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t *v130;
  unint64_t v131;
  ggl::PatternedRibbonShader *v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  __int128 v144;
  __int128 v145;
  _BYTE v146[28];

  v11.i8[4] = 0;
  v11.i16[4] = 0;
  v11.i8[10] = 0;
  v11.i32[3] = 0;
  v11.i8[0] = a3;
  v11.i8[1] = a4;
  v11.i16[1] = a5;
  v11.i8[5] = a6;
  v11.i16[3] = a7;
  v11.i8[11] = a8;
  v12 = vceqzq_s8(v11);
  v13 = vmovl_s8(*(int8x8_t *)v12.i8);
  v14 = vmovl_high_s16(v13);
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  v16 = v15;
  v17 = vmovl_high_s8(v12);
  v18 = vmovl_high_s16(v17);
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  v19 = v15;
  v20 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  v21 = v15;
  v22 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  v23 = v15;
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v24 = v15;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  v25 = v15;
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  v26 = v15;
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  v27 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v15)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v24), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v25))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v21), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v23)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v16), vbicq_s8((int8x16_t)xmmword_19FFB3080, v19)))));
  v28 = v27;
  v30 = (uint64_t **)(a2 + 104);
  v29 = *(_QWORD **)(a2 + 104);
  if (!v29)
    goto LABEL_12;
  v31 = (uint64_t **)(a2 + 104);
  do
  {
    v32 = v29[4];
    v33 = v32 >= v27;
    if (v32 >= v27)
      v34 = v29;
    else
      v34 = v29 + 1;
    if (v33)
      v31 = (uint64_t **)v29;
    v29 = (_QWORD *)*v34;
  }
  while (*v34);
  if (v31 != v30 && v27 >= (unint64_t)v31[4])
  {
    *a1 = (std::__shared_weak_count *)v31[5];
    v129 = v31[6];
    a1[1] = (std::__shared_weak_count *)v129;
    if (v129)
    {
      v130 = (unint64_t *)(v129 + 1);
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
    }
  }
  else
  {
LABEL_12:
    v35 = (std::__shared_weak_count *)operator new(0x198uLL);
    v35->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    v35->__shared_weak_owners_ = 0;
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF6B8;
    v144 = *(_OWORD *)(a2 + 16);
    v145 = *(_OWORD *)(a2 + 32);
    if ((v37 & 1) == 0)
    {
      if ((_DWORD)v132)
      {
        if ((v133 & 1) == 0)
        {
          if ((_DWORD)v132)
          {
            if ((v136 & 1) == 0
            {
              if ((v138 & 1) == 0
              {
                ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PatternedRibbon::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r;
              unk_1ECE372C8 = 1;
            }
            ggl::PatternedRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r;
            *(_QWORD *)algn_1ECE37248 = &ggl::PatternedRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
            qword_1ECE37250 = 0;
            if ((v137 & 1) == 0
            {
              ggl::PatternedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1ECE37280 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1ECE37288 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
              unk_1ECE37290 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1ECE37258 = (uint64_t)&ggl::PatternedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
            unk_1ECE37260 = xmmword_19FFB48D0;
          }
        }
        ggl::PatternedRibbon::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PatternedRibbon::BasePipelineSetup::typedReflection(void)::ref;
        ggl::PatternedRibbonShader::typedReflection(v132);
        qword_1ECE2F690 = (uint64_t)&ggl::PatternedRibbonShader::typedReflection(void)::ref;
        if ((v134 & 1) == 0
        {
          ggl::PatternedRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE57C750 = 0;
          qword_1EE57C758 = (uint64_t)"";
          dword_1EE57C760 = 0;
          qword_1EE57C768 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
          unk_1EE57C770 = 5;
        }
        qword_1ECE2F698 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
        unk_1ECE2F6A0 = 1;
        qword_1ECE2F6A8 = 0;
        unk_1ECE2F6B0 = 1;
        qword_1ECE2F6B8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
        unk_1ECE2F6C0 = 0;
        if ((v135 & 1) == 0
        {
          ggl::PatternedRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
          unk_1EE57C690 = 0;
          qword_1EE57C698 = (uint64_t)"view";
          dword_1EE57C6A0 = 3;
          qword_1EE57C6A8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1EE57C6B0 = xmmword_19FFB35A0;
          qword_1EE57C6C0 = 1;
          unk_1EE57C6C8 = "transform";
          dword_1EE57C6D0 = 3;
          qword_1EE57C6D8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
          unk_1EE57C6E0 = xmmword_19FFB3660;
          qword_1EE57C6F0 = 2;
          unk_1EE57C6F8 = "style";
          dword_1EE57C700 = 3;
          qword_1EE57C708 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
          *(_OWORD *)algn_1EE57C710 = xmmword_19FFB5E10;
          qword_1EE57C720 = 3;
          unk_1EE57C728 = "tileClipping";
          dword_1EE57C730 = 3;
          qword_1EE57C738 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantTileClippingBinding(void)::reflection;
          unk_1EE57C740 = 2;
        }
        qword_1ECE2F6C8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref;
        unk_1ECE2F6D0 = 4;
      }
    }
    v38 = *(std::__shared_weak_count_vtbl **)a2;
    v39 = *(std::__shared_weak_count **)(a2 + 8);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = v35 + 1;
    *(_OWORD *)v146 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v146[12] = *(_OWORD *)(a2 + 60);
    v43 = *(_OWORD *)(a2 + 76);
    v44 = *(_BYTE *)(a2 + 92);
    v35[1].__shared_weak_owners_ = 0;
    v35[2].__vftable = 0;
    LODWORD(v35[2].__shared_owners_) = 0;
    v35[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v35[1].__shared_owners_ = 0;
    v35[2].__shared_weak_owners_ = (uint64_t)&ggl::PatternedRibbon::BasePipelineState::typedReflection(void)::ref;
    v35[3].__vftable = v38;
    v35[3].__shared_owners_ = (uint64_t)v39;
    if (v39)
    {
      v45 = (unint64_t *)&v39->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    LOBYTE(v35[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v35[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v35[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v35[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v35[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v35[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v35[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v35[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v35[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v35[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v35[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v35[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v35[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v35[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v35[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v35[11].__shared_weak_owners_ = v144;
    *(_OWORD *)&v35[12].__shared_owners_ = v145;
    LOBYTE(v35[13].__vftable) = 0;
    v35[16].__vftable = 0;
    *(_OWORD *)&v35[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v35[15].__shared_owners_ = 0u;
    *(_OWORD *)&v35[13].__shared_owners_ = 0u;
    v35[14].std::__shared_count = 0u;
    v35[16].__shared_owners_ = 0x100000001;
    LOBYTE(v35[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v35[4].std::__shared_count + 4) = *(std::__shared_count *)&v146[12];
    *(_OWORD *)&v35[3].__shared_weak_owners_ = *(_OWORD *)v146;
    *(_OWORD *)((char *)&v35[4].__shared_weak_owners_ + 4) = v43;
    BYTE4(v35[5].__shared_owners_) = v44;
    if (v39)
    {
      v47 = (unint64_t *)&v39->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    LOBYTE(v35[13].__shared_weak_owners_) = a3;
    BYTE1(v35[13].__shared_weak_owners_) = a4;
    BYTE2(v35[13].__shared_weak_owners_) = a5;
    *(_WORD *)((char *)&v35[13].__shared_weak_owners_ + 3) = 0;
    BYTE5(v35[13].__shared_weak_owners_) = a6;
    BYTE6(v35[13].__shared_weak_owners_) = a7;
    *(_DWORD *)((char *)&v35[13].__shared_weak_owners_ + 7) = 0;
    BYTE3(v35[14].__vftable) = a8;
    v49 = *(int8x16_t *)&v35[14].__shared_owners_;
    v50 = vceqzq_s8(*(int8x16_t *)&v35[13].__shared_weak_owners_);
    v51 = vmovl_high_s8(v50);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v53.i64[0] = v52.u32[0];
    v53.i64[1] = v52.u32[1];
    v54 = v53;
    v55 = vmovl_s8(*(int8x8_t *)v50.i8);
    v56 = vmovl_s16(*(int16x4_t *)v55.i8);
    v53.i64[0] = v56.u32[0];
    v53.i64[1] = v56.u32[1];
    v57 = v53;
    v58 = vmovl_high_s16(v51);
    v53.i64[0] = v58.u32[0];
    v53.i64[1] = v58.u32[1];
    v59 = v53;
    v60 = vmovl_high_s16(v55);
    v53.i64[0] = v60.u32[0];
    v53.i64[1] = v60.u32[1];
    v61 = v53;
    v53.i64[0] = v52.u32[2];
    v53.i64[1] = v52.u32[3];
    v62 = v53;
    v53.i64[0] = v56.u32[2];
    v53.i64[1] = v56.u32[3];
    v63 = v53;
    v53.i64[0] = v58.u32[2];
    v53.i64[1] = v58.u32[3];
    v64 = v53;
    v53.i64[0] = v60.u32[2];
    v53.i64[1] = v60.u32[3];
    v65 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v53);
    v35[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7238;
    v66 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v64);
    v67 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v63);
    v68 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v59);
    v69 = vceqzq_s8(v49);
    v70 = vmovl_high_s8(v69);
    v71 = vmovl_s16(*(int16x4_t *)v70.i8);
    v53.i64[0] = v71.u32[0];
    v53.i64[1] = v71.u32[1];
    v72 = v53;
    v73 = vmovl_s8(*(int8x8_t *)v69.i8);
    v74 = vmovl_s16(*(int16x4_t *)v73.i8);
    v53.i64[0] = v74.u32[0];
    v53.i64[1] = v74.u32[1];
    v75 = v53;
    v76 = vmovl_high_s16(v70);
    v53.i64[0] = v76.u32[0];
    v53.i64[1] = v76.u32[1];
    v77 = v53;
    v78 = vmovl_high_s16(v73);
    v53.i64[0] = v78.u32[0];
    v53.i64[1] = v78.u32[1];
    v79 = v53;
    v53.i64[0] = v71.u32[2];
    v53.i64[1] = v71.u32[3];
    v80 = v53;
    v53.i64[0] = v74.u32[2];
    v53.i64[1] = v74.u32[3];
    v81 = v53;
    v53.i64[0] = v76.u32[2];
    v53.i64[1] = v76.u32[3];
    v82 = v53;
    v53.i64[0] = v78.u32[2];
    v53.i64[1] = v78.u32[3];
    v83 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v82);
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v72), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v54));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v75), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v57));
    v86 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v77), v68);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v79), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v61));
    v88 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v80), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v62));
    v89 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v81), v67);
    v90 = vorrq_s8(v83, v66);
    v91 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v53), v65);
    v92 = vceqzq_s8((int8x16_t)v35[15].std::__shared_count);
    v93 = vmovl_s8(*(int8x8_t *)v92.i8);
    v94 = vmovl_high_s16(v93);
    v53.i64[0] = v94.i32[2];
    v53.i64[1] = v94.i32[3];
    v95 = v53;
    v96 = vmovl_high_s8(v92);
    v97 = vmovl_high_s16(v96);
    v53.i64[0] = v97.i32[2];
    v53.i64[1] = v97.i32[3];
    v98 = v53;
    v99 = vmovl_s16(*(int16x4_t *)v93.i8);
    v53.i64[0] = v99.i32[2];
    v53.i64[1] = v99.i32[3];
    v100 = v53;
    v101 = vmovl_s16(*(int16x4_t *)v96.i8);
    v53.i64[0] = v101.i32[2];
    v53.i64[1] = v101.i32[3];
    v102 = v53;
    v53.i64[0] = v94.i32[0];
    v53.i64[1] = v94.i32[1];
    v103 = v53;
    v53.i64[0] = v97.i32[0];
    v53.i64[1] = v97.i32[1];
    v104 = v53;
    v53.i64[0] = v99.i32[0];
    v53.i64[1] = v99.i32[1];
    v105 = v53;
    v53.i64[0] = v101.i32[0];
    v53.i64[1] = v101.i32[1];
    v106 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v53);
    v107 = vceqzq_s8(*(int8x16_t *)&v35[15].__shared_weak_owners_);
    v108 = vmovl_high_s8(v107);
    v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v53.i64[0] = v109.i32[0];
    v53.i64[1] = v109.i32[1];
    v110 = v53;
    v111 = vmovl_s8(*(int8x8_t *)v107.i8);
    v112 = vmovl_s16(*(int16x4_t *)v111.i8);
    v53.i64[0] = v112.i32[0];
    v53.i64[1] = v112.i32[1];
    v113 = v53;
    v114 = vmovl_high_s16(v108);
    v53.i64[0] = v114.i32[0];
    v53.i64[1] = v114.i32[1];
    v115 = v53;
    v116 = vmovl_high_s16(v111);
    v53.i64[0] = v116.i32[0];
    v53.i64[1] = v116.i32[1];
    v117 = v53;
    v53.i64[0] = v109.i32[2];
    v53.i64[1] = v109.i32[3];
    v118 = v53;
    v53.i64[0] = v112.i32[2];
    v53.i64[1] = v112.i32[3];
    v119 = v53;
    v53.i64[0] = v114.i32[2];
    v53.i64[1] = v114.i32[3];
    v120 = v53;
    v53.i64[0] = v116.i32[2];
    v53.i64[1] = v116.i32[3];
    v35[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v113), vbicq_s8((int8x16_t)xmmword_19FFB3170, v105)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v110), v106), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v117), vbicq_s8((int8x16_t)xmmword_19FFB3190, v103)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v115),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v104)),
                                                    v86))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v119), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v100)), v89), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v118), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v102)), v88)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v53), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v95)), v91), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v120),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v98)),
                                                    v90)))));
    LOBYTE(v35[13].__vftable) = 1;
    *a1 = v42;
    a1[1] = v35;
    do
      v121 = __ldxr(p_shared_owners);
    while (__stxr(v121 + 1, p_shared_owners));
    v122 = *v30;
    v123 = v30;
    if (*v30)
    {
      while (1)
      {
        while (1)
        {
          v123 = (uint64_t **)v122;
          v124 = v122[4];
          if (v28 >= v124)
            break;
          v122 = *v123;
          v30 = v123;
          if (!*v123)
            goto LABEL_33;
        }
        if (v124 >= v28)
          break;
        v122 = v123[1];
        if (!v122)
        {
          v30 = v123 + 1;
          goto LABEL_33;
        }
      }
      v127 = (unint64_t *)&v35->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    else
    {
LABEL_33:
      v125 = (uint64_t *)operator new(0x38uLL);
      v125[4] = v28;
      v125[5] = (uint64_t)v42;
      v125[6] = (uint64_t)v35;
      *v125 = 0;
      v125[1] = 0;
      v125[2] = (uint64_t)v123;
      *v30 = v125;
      v126 = **(_QWORD **)(a2 + 96);
      if (v126)
      {
        *(_QWORD *)(a2 + 96) = v126;
        v125 = *v30;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v125);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FCE5594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  md::components::Material::~Material((md::components::Material *)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

void setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(uint64_t a1, float *a2, uint64_t a3, _DWORD *a4, _QWORD *a5, int a6, __n128 a7, float a8, float a9)
{
  float v9;
  int v11;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v35;
  float *v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  float *v66;
  uint64_t v67;
  float v70;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  char v81;
  __int128 *v82;

  _S8 = a9;
  v11 = a6;
  _S9 = a8;
  v16 = a7.n128_f32[0];
  v17 = a2;
  v18 = a1;
  v19 = *a5;
  if (*a5)
  {
    v22 = *(_QWORD *)(a3 + 24);
    v23 = *(float **)a3;
    v24 = *(float **)(a3 + 8);
    v25 = (uint64_t)v24 - *(_QWORD *)a3;
    if (v24 == *(float **)a3)
    {
      v30 = 0;
      v29 = 0;
    }
    else
    {
      if (v25 < 0)
        goto LABEL_65;
      v26 = v25 >> 2;
      v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v22 + 16))(*(_QWORD *)(a3 + 24));
      v25 = v27;
      v28 = 0;
      do
      {
        if (v27 + v28 * 4)
          *(float *)(v27 + v28 * 4) = v23[v28];
        ++v28;
      }
      while (&v23[v28] != v24);
      v29 = v27 + v28 * 4;
      v30 = v27 + 4 * v26;
    }
    v11 = a6;
    if (*(unsigned __int16 *)(v19 + 46) == (int)(float)(_S9 + 0.5)
      && *(float *)(a3 + 32) == *(float *)(v19 + 32)
      && (v31 = (v29 - v25) >> 2, v31 == (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2))
    {
      if (v29 == v25)
      {
        v18 = a1;
        if (!v25)
          goto LABEL_43;
        v48 = *(void (**)(void))(*(_QWORD *)v22 + 40);
        goto LABEL_42;
      }
      v32 = 0;
      v33 = 1;
      a7.n128_u64[0] = 0x3400000034000000;
      v17 = a2;
      do
      {
        v9 = vabds_f32(*(float *)(v25 + 4 * v32), *(float *)(*(_QWORD *)v19 + 4 * v32));
        v32 = v33++;
      }
      while (v9 <= 0.00000011921 && v31 > v32);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v22 + 40))(v22, v25, v30 - v25, a7);
      v18 = a1;
      if (v9 <= 0.00000011921)
        goto LABEL_43;
    }
    else
    {
      v17 = a2;
      v18 = a1;
      if (v25)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 40))(v22, v25, v30 - v25);
    }
  }
  v75 = 0;
  v76 = 0;
  v35 = *(_QWORD *)(a3 + 24);
  v77 = 0;
  v78 = v35;
  v36 = *(float **)a3;
  v37 = *(float **)(a3 + 8);
  v38 = (uint64_t)v37 - *(_QWORD *)a3;
  if (v37 == *(float **)a3)
    goto LABEL_30;
  if (v38 < 0)
LABEL_65:
    abort();
  v39 = v38 >> 2;
  v40 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  v75 = v40;
  v77 = &v40[v39];
  do
  {
    if (v40)
      *v40 = *(_DWORD *)v36;
    ++v36;
    ++v40;
  }
  while (v36 != v37);
  v76 = v40;
LABEL_30:
  v79 = *(_DWORD *)(a3 + 32);
  md::DashTextureCache::textureForPattern(&v80, v17, (float *)&v75, 0, _S9);
  v41 = v80;
  v80 = 0uLL;
  v42 = (std::__shared_weak_count *)a5[1];
  *(_OWORD *)a5 = v41;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v75)
  {
    v76 = v75;
    v48 = *(void (**)(void))(*(_QWORD *)v78 + 40);
LABEL_42:
    v48();
  }
LABEL_43:
  **(_QWORD **)(v18 + 96) = *(_QWORD *)(*a5 + 64);
  v49 = *a5;
  LOWORD(v9) = *(_WORD *)(*a5 + 40);
  v50 = **(_QWORD **)(v18 + 64);
  if ((*(_BYTE *)(v50 + 16) & 2) == 0)
  {
    v51 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v51 != -1)
    {
      *(_QWORD *)&v80 = &v81;
      v82 = &v80;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v82, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v52 = *(float *)(v49 + 48);
  v53 = 0.0;
  if (v52 != 0.0)
  {
    v54 = *(float *)(*(_QWORD *)(v50 + 72) + 64);
    if (v11)
    {
      v55 = log2f(v54);
      v53 = 1.0 / (float)(v52 * exp2f(floorf(v55)));
    }
    else
    {
      v56 = logf(v52 * v54);
      v53 = expf(floorf(v56 * 4.0) * -0.25);
    }
  }
  v57 = *(_QWORD **)(*(_QWORD *)(v18 + 64) + 32);
  v58 = v57[1];
  if (v58)
    v59 = v57[9];
  else
    v59 = 0;
  *(_DWORD *)(v59 + 16) = *a4;
  *(_DWORD *)(v59 + 20) = a4[1];
  *(_DWORD *)(v59 + 24) = a4[2];
  v60 = a4[3];
  *(float *)v59 = (float)((float)LODWORD(v9) * 0.5) / v16;
  *(_DWORD *)(v59 + 28) = v60;
  *(float *)(v59 + 32) = v53;
  __asm { FCVT            H0, S9 }
  *(_WORD *)(v59 + 36) = _H0;
  v66 = *(float **)a3;
  v67 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    _S0 = 0.0;
  else
    _S0 = *v66;
  __asm { FCVT            H1, S0 }
  *(_WORD *)(v59 + 38) = _H1;
  v70 = _S0 + (float)(unint64_t)v67;
  _H0 = 0;
  if (v70 > 1.0)
  {
    _S0 = *((_DWORD *)v66 + 1);
    __asm { FCVT            H0, S0 }
  }
  *(_WORD *)(v59 + 40) = _H0;
  __asm { FCVT            H0, S8 }
  *(_WORD *)(v59 + 42) = _H0;
  if (v58)
  {
    if (v57[8] > v58)
      v58 = v57[8];
    v57[7] = 0;
    v57[8] = v58;
  }
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PatternedRibbon::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PatternedLayer::~PatternedLayer(md::PatternedLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C820;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C820;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF348;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[14];
  a1[14] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C820;
  v2 = (std::__shared_weak_count *)a1[22];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[20];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[20];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C820;
  v2 = (std::__shared_weak_count *)a1[22];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[20];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[20];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(uint64_t *result, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  __int32 *v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  unint64_t v26;
  float *v27;
  unsigned int v28;
  float v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *i;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void (***v82)(_QWORD);
  void (***v83)(_QWORD);
  unsigned __int8 v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int64x2_t v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  ggl::PatternedRibbon::BasePipelineSetup **v103;
  void *v104;
  _QWORD *v105;
  unint64_t *v106;
  ggl::PatternedRibbon::BasePipelineSetup *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  ggl::PatternedRibbon::BasePipelineSetup *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  ggl::PatternedRibbon::BasePipelineSetup *v163;
  uint64_t v164;
  unsigned __int16 *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  ggl::PatternedRibbon::BasePipelineSetup *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  ggl::PatternedRibbon::WriteStencilBasePipelineSetup *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  ggl::PatternedRibbon::WriteStencilBasePipelineSetup *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t *v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  ggl::PatternedRibbon::WriteStencilBasePipelineSetup *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  std::__shared_weak_count *v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int *v286;
  unint64_t j;
  unint64_t v288;
  unsigned int v289;
  unint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t *v306;
  _QWORD *v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  _BYTE *v314;
  uint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  _OWORD *v318;
  uint64_t *v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  unsigned __int8 v326;
  uint64_t *v327;
  _QWORD *v328;
  int64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  uint64_t *v334;
  int64_t v335;
  unint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  uint64_t *v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  void (***v353)(_QWORD, uint64_t);
  void (***v354)(_QWORD, uint64_t);
  unsigned __int8 v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  void (***v360)(_QWORD, uint64_t);
  void (***v361)(_QWORD, uint64_t);
  unsigned __int8 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void (***v366)(_QWORD);
  uint64_t v367;
  uint64_t v368;
  unsigned __int8 v369;
  _QWORD *v370;
  uint64_t v371;
  int64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  char *v376;
  uint64_t *v377;
  int64_t v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  char *v386;
  uint64_t *v387;
  uint64_t v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  malloc_zone_t *zone;
  void (***v397)(_QWORD, uint64_t);
  void (***v398)(_QWORD, uint64_t);
  unsigned __int8 v399;
  uint64_t v400;
  geo::read_write_lock *v401;
  const char *v402;
  _QWORD *v403;
  _QWORD *v404;
  uint64_t v405;
  void (***v406)(_QWORD, uint64_t);
  void (***v407)(_QWORD, uint64_t);
  unsigned __int8 v408;
  uint64_t v409;
  _QWORD *v410;
  unint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  BOOL v425;
  unint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  _OWORD *v429;
  __int128 *v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  void (***v437)(_QWORD);
  void (***v438)(_QWORD);
  unsigned __int8 v439;
  uint64_t v440;
  unsigned __int8 v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int8x16_t *v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t *v450;
  uint64_t *v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t *v454;
  unint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  char *v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  unint64_t v468;
  uint64_t v470;
  char *v471;
  char *v472;
  uint64_t v473;
  __int128 v474;
  __int128 v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  uint64_t *v482;
  _QWORD *v483;
  void (***v484)(_QWORD, uint64_t);
  void (***v485)(_QWORD, uint64_t);
  unsigned __int8 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  _QWORD *v492;
  void (***v493)(_QWORD, uint64_t);
  void (***v494)(_QWORD, uint64_t);
  unsigned __int8 v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t v506;
  uint64_t *v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  int8x8_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  float v521;
  _QWORD *v522;
  uint64_t *v523;
  char v524;
  _QWORD *v525;
  std::__shared_weak_count *v526;
  _QWORD *v527;
  std::__shared_weak_count *v528;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (!a2)
    return result;
  v5 = a2;
  v501 = xmmword_19FFB2E80;
  v510 = result;
  while (2)
  {
    v515 = 0;
    v516 = 0;
    {
      v497 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v497, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v7 = (unint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
    v517 = mdm::Allocator::instance(void)::alloc;
    v518 = 0;
    {
      v498 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v498, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v519 = mdm::Allocator::instance(void)::alloc;
    v520 = 0;
    v521 = 1.0;
    v502 = v5;
    v9 = *(uint64_t **)(v5 + 40);
    v10 = *(uint64_t **)(v5 + 48);
    while (v9 != v10)
    {
      v11 = *(_QWORD *)(*v9 + 88);
      v12 = *(_QWORD **)(*v9 + 72);
      if (a5)
      {
        if (v11)
        {
          if (v11 >= 8)
          {
            v13 = v11 & 0xFFFFFFFFFFFFFFF8;
            v15 = (__int32 *)(v12 + 6);
            v16 = 0uLL;
            v17 = v11 & 0xFFFFFFFFFFFFFFF8;
            v18 = 0uLL;
            v19.i64[0] = 0x300000003;
            v19.i64[1] = 0x300000003;
            v20.i64[0] = 0x100000001;
            v20.i64[1] = 0x100000001;
            do
            {
              v21.i32[0] = *(v15 - 12);
              v22.i32[0] = *(v15 - 11);
              v21.i32[1] = *(v15 - 9);
              v21.i32[2] = *(v15 - 6);
              v21.i32[3] = *(v15 - 3);
              v23.i32[0] = *v15;
              v24.i32[0] = v15[1];
              v23.i32[1] = v15[3];
              v23.i32[2] = v15[6];
              v23.i32[3] = v15[9];
              v22.i32[1] = *(v15 - 8);
              v22.i32[2] = *(v15 - 5);
              v22.i32[3] = *(v15 - 2);
              v24.i32[1] = v15[4];
              v24.i32[2] = v15[7];
              v24.i32[3] = v15[10];
              v16 = vorrq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v22, 2uLL), v19), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v21, 2uLL), v19))), v16);
              v18 = vorrq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v24, 2uLL), v19), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v23, 2uLL), v19))), v18);
              v15 += 24;
              v17 -= 8;
            }
            while (v17);
            v25 = vorrq_s8(v18, v16);
            *(int8x8_t *)v25.i8 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
            v14 = v25.i32[0] | v25.i32[1];
            if (v11 == v13)
              goto LABEL_26;
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
          v26 = v11 - v13;
          v27 = (float *)v12 + 3 * v13 + 1;
          do
          {
            v28 = vcvts_n_u32_f32(*(v27 - 1), 2uLL);
            if (v28 >= 3)
              LOBYTE(v28) = 3;
            v29 = *v27;
            v27 += 3;
            v30 = vcvts_n_u32_f32(v29, 2uLL);
            if (v30 >= 3)
              LOBYTE(v30) = 3;
            v14 |= 1 << (v28 | (4 * v30));
            --v26;
          }
          while (v26);
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v14 = ggl::CullingGrid::intersectedCellsForRibbon(v11, v12);
      }
LABEL_26:
      v31 = v14;
      v32 = (unint64_t)v516;
      if (v516)
      {
        v33 = (uint8x8_t)vcnt_s8(v516);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          v7 = v14;
          if (*(_QWORD *)&v516 <= (unint64_t)v14)
            v7 = (unint64_t)v14 % *(_QWORD *)&v516;
        }
        else
        {
          v7 = (v516.i32[0] - 1) & v14;
        }
        v34 = *(uint64_t **)(v515 + 8 * v7);
        if (v34)
        {
          v35 = *v34;
          if (*v34)
          {
            if (v33.u32[0] < 2uLL)
            {
              while (1)
              {
                v37 = *(_QWORD *)(v35 + 8);
                if (v37 == v14)
                {
                  if (*(_DWORD *)(v35 + 16) == v14)
                    goto LABEL_106;
                }
                else if ((v37 & (*(_QWORD *)&v516 - 1)) != v7)
                {
                  goto LABEL_46;
                }
                v35 = *(_QWORD *)v35;
                if (!v35)
                  goto LABEL_46;
              }
            }
            do
            {
              v36 = *(_QWORD *)(v35 + 8);
              if (v36 == v14)
              {
                if (*(_DWORD *)(v35 + 16) == v14)
                  goto LABEL_106;
              }
              else
              {
                if (v36 >= *(_QWORD *)&v516)
                  v36 %= *(_QWORD *)&v516;
                if (v36 != v7)
                  break;
              }
              v35 = *(_QWORD *)v35;
            }
            while (v35);
          }
        }
      }
LABEL_46:
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v519 + 16))(v519, 56, 8);
      v522 = (_QWORD *)v35;
      v523 = &v519;
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 8) = v14;
      *(_DWORD *)(v35 + 16) = v14;
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 24) = 0;
      {
        v94 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v94, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v35 + 48) = mdm::Allocator::instance(void)::alloc;
      v524 = 1;
      v39 = (float)(v520 + 1);
      if (!v32 || (float)(v521 * (float)v32) < v39)
      {
        v40 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3)
          v40 = 1;
        v41 = v40 | (2 * v32);
        v42 = vcvtps_u32_f32(v39 / v521);
        if (v41 <= v42)
          prime = (int8x8_t)v42;
        else
          prime = (int8x8_t)v41;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v32 = (unint64_t)v516;
        if (*(_QWORD *)&prime <= *(_QWORD *)&v516)
        {
          if (*(_QWORD *)&prime < *(_QWORD *)&v516)
          {
            v54 = vcvtps_u32_f32((float)v520 / v521);
            if (*(_QWORD *)&v516 < 3uLL
              || (v55 = (uint8x8_t)vcnt_s8(v516), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
            {
              v54 = std::__next_prime(v54);
            }
            else
            {
              v56 = 1 << -(char)__clz(v54 - 1);
              if (v54 >= 2)
                v54 = v56;
            }
            if (*(_QWORD *)&prime <= v54)
              prime = (int8x8_t)v54;
            if (*(_QWORD *)&prime >= v32)
            {
              v32 = (unint64_t)v516;
            }
            else
            {
              if (prime)
                goto LABEL_59;
              v93 = v515;
              v515 = 0;
              if (v93)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v517 + 40))(v517, v93, 8 * *(_QWORD *)&v516);
              v32 = 0;
              v516 = 0;
            }
          }
LABEL_83:
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v32 <= v31)
              v7 = v31 % v32;
            else
              v7 = v31;
          }
          else
          {
            v7 = ((_DWORD)v32 - 1) & v31;
          }
          goto LABEL_96;
        }
LABEL_59:
        v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v517 + 16))(v517, 8 * *(_QWORD *)&prime, 8);
        v45 = v515;
        v515 = v44;
        if (v45)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v517 + 40))(v517, v45, 8 * *(_QWORD *)&v516);
        v46 = 0;
        v516 = prime;
        do
          *(_QWORD *)(v515 + 8 * v46++) = 0;
        while (*(_QWORD *)&prime != v46);
        v47 = (_QWORD **)v518;
        if (!v518)
          goto LABEL_82;
        v48 = *(_QWORD *)(v518 + 8);
        v49 = *(_QWORD *)&prime - 1;
        if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
        {
          v50 = v48 & v49;
          *(_QWORD *)(v515 + 8 * v50) = &v518;
          for (i = *v47; *v47; i = *v47)
          {
            v52 = i[1] & v49;
            if (v52 == v50)
            {
              v47 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v515 + 8 * v52))
            {
              *v47 = (_QWORD *)*i;
              v53 = 8 * v52;
              *i = **(_QWORD **)(v515 + v53);
              **(_QWORD **)(v515 + v53) = i;
            }
            else
            {
              *(_QWORD *)(v515 + 8 * v52) = v47;
              v47 = (_QWORD **)i;
              v50 = v52;
            }
          }
          goto LABEL_82;
        }
        if (v48 >= *(_QWORD *)&prime)
          v48 %= *(_QWORD *)&prime;
        *(_QWORD *)(v515 + 8 * v48) = &v518;
        v57 = *v47;
        if (!*v47)
        {
LABEL_82:
          v32 = (unint64_t)prime;
          goto LABEL_83;
        }
        while (2)
        {
          v59 = v57[1];
          if (v59 >= *(_QWORD *)&prime)
            v59 %= *(_QWORD *)&prime;
          if (v59 != v48)
          {
            if (!*(_QWORD *)(v515 + 8 * v59))
            {
              *(_QWORD *)(v515 + 8 * v59) = v47;
LABEL_87:
              v47 = (_QWORD **)v57;
              v57 = (_QWORD *)*v57;
              v48 = v59;
              if (!v57)
                goto LABEL_82;
              continue;
            }
            *v47 = (_QWORD *)*v57;
            v58 = 8 * v59;
            *v57 = **(_QWORD **)(v515 + v58);
            **(_QWORD **)(v515 + v58) = v57;
            v57 = v47;
          }
          break;
        }
        v59 = v48;
        goto LABEL_87;
      }
LABEL_96:
      v60 = *(uint64_t **)(v515 + 8 * v7);
      if (v60)
      {
        *(_QWORD *)v35 = *v60;
LABEL_104:
        *v60 = v35;
        goto LABEL_105;
      }
      *(_QWORD *)v35 = v518;
      v518 = v35;
      *(_QWORD *)(v515 + 8 * v7) = &v518;
      if (*(_QWORD *)v35)
      {
        v61 = *(_QWORD *)(*(_QWORD *)v35 + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v61 >= v32)
            v61 %= v32;
        }
        else
        {
          v61 &= v32 - 1;
        }
        v60 = (uint64_t *)(v515 + 8 * v61);
        goto LABEL_104;
      }
LABEL_105:
      ++v520;
LABEL_106:
      v62 = *(_QWORD **)(v35 + 32);
      v63 = *(_QWORD *)(v35 + 40);
      if ((unint64_t)v62 < v63)
      {
        if (v62)
        {
          v64 = *v9;
          *v9 = 0;
          *v62 = v64;
        }
        v7 = (unint64_t)(v62 + 1);
        goto LABEL_9;
      }
      v65 = *(_QWORD *)(v35 + 24);
      v66 = ((uint64_t)v62 - v65) >> 3;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        abort();
      v68 = v63 - v65;
      if (v68 >> 2 > v67)
        v67 = v68 >> 2;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v35 + 48) + 16))(*(_QWORD *)(v35 + 48), 8 * v69, 8);
        v71 = (_QWORD *)(v70 + 8 * v66);
        v72 = v70 + 8 * v69;
        if (v70)
        {
          v73 = *v9;
          *v9 = 0;
          *v71 = v73;
        }
      }
      else
      {
        v72 = 0;
        v71 = (_QWORD *)(8 * v66);
      }
      v7 = (unint64_t)(v71 + 1);
      v74 = *(_QWORD **)(v35 + 24);
      v75 = *(_QWORD *)(v35 + 32);
      if ((_QWORD *)v75 == v74)
      {
        *(_QWORD *)(v35 + 24) = v71;
        *(_QWORD *)(v35 + 32) = v7;
        v81 = *(_QWORD *)(v35 + 40);
        *(_QWORD *)(v35 + 40) = v72;
        if (!v75)
          goto LABEL_9;
LABEL_135:
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v35 + 48) + 40))(*(_QWORD *)(v35 + 48), v75, v81 - v75);
        goto LABEL_9;
      }
      v76 = v75 - (_QWORD)v74 - 8;
      if (v76 > 0x47
        && ((v77 = v76 >> 3, v75 - 8 * v77 - 8 >= (unint64_t)v71) || (unint64_t)&v71[-v77 - 1] >= v75))
      {
        v86 = v77 + 1;
        v87 = (v77 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v78 = (_QWORD *)(v75 - 8 * v87);
        v88 = v71 - 2;
        v89 = (__int128 *)(v75 - 32);
        v90 = v87;
        do
        {
          v92 = *v89;
          v91 = v89[1];
          *v89 = 0uLL;
          v89[1] = 0uLL;
          v89 -= 2;
          *(v88 - 1) = v92;
          *v88 = v91;
          v88 -= 2;
          v90 -= 4;
        }
        while (v90);
        v71 -= v87;
        if (v86 == v87)
          goto LABEL_125;
      }
      else
      {
        v78 = *(_QWORD **)(v35 + 32);
      }
      do
      {
        v79 = *--v78;
        *v78 = 0;
        *--v71 = v79;
      }
      while (v78 != v74);
LABEL_125:
      v75 = *(_QWORD *)(v35 + 24);
      v80 = *(_QWORD **)(v35 + 32);
      *(_QWORD *)(v35 + 24) = v71;
      *(_QWORD *)(v35 + 32) = v7;
      v81 = *(_QWORD *)(v35 + 40);
      *(_QWORD *)(v35 + 40) = v72;
      while (v80 != (_QWORD *)v75)
      {
        v83 = (void (***)(_QWORD))*--v80;
        v82 = v83;
        *v80 = 0;
        if (v83)
        {
          (**v82)(v82);
          {
            v85 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v85, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v82, 120);
        }
      }
      if (v75)
        goto LABEL_135;
LABEL_9:
      *(_QWORD *)(v35 + 32) = v7;
      ++v9;
    }
    v95 = operator new();
    *(_QWORD *)v95 = &off_1E42AF108;
    *(_QWORD *)(v95 + 8) = 0;
    *(_QWORD *)(v95 + 64) = 0;
    *(_QWORD *)(v95 + 40) = 0;
    *(_QWORD *)(v95 + 48) = 0;
    *(_QWORD *)(v95 + 32) = "";
    *(_DWORD *)(v95 + 56) = 0;
    *(_DWORD *)(v95 + 72) = 1065353216;
    v96 = 0uLL;
    *(_OWORD *)(v95 + 80) = 0u;
    *(_OWORD *)(v95 + 96) = 0u;
    v97 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v95 + 112) = v97;
    *(_QWORD *)(v95 + 128) = 0;
    *(_QWORD *)(v95 + 16) = &off_1E42AF548;
    *(_BYTE *)(v95 + 136) = 1;
    *(_QWORD *)(v95 + 192) = 0;
    *(_QWORD *)(v95 + 168) = 0;
    *(_QWORD *)(v95 + 176) = 0;
    *(_QWORD *)(v95 + 160) = "";
    *(_DWORD *)(v95 + 184) = 0;
    *(_DWORD *)(v95 + 200) = 1065353216;
    *(_OWORD *)(v95 + 208) = 0u;
    *(_OWORD *)(v95 + 224) = 0u;
    *(int64x2_t *)(v95 + 240) = v97;
    *(_QWORD *)(v95 + 256) = 0;
    *(_QWORD *)(v95 + 144) = &off_1E42AF548;
    *(_BYTE *)(v95 + 264) = 1;
    *(_QWORD *)(v95 + 320) = 0;
    *(_DWORD *)(v95 + 312) = 0;
    *(_QWORD *)(v95 + 288) = "";
    *(_QWORD *)(v95 + 296) = 0;
    *(_QWORD *)(v95 + 304) = 0;
    *(_DWORD *)(v95 + 328) = 1065353216;
    *(_OWORD *)(v95 + 336) = 0u;
    *(_OWORD *)(v95 + 352) = 0u;
    *(int64x2_t *)(v95 + 368) = v97;
    *(_QWORD *)(v95 + 384) = 0;
    *(_QWORD *)(v95 + 272) = &off_1E42AF548;
    *(_BYTE *)(v95 + 392) = 1;
    *(_QWORD *)(v95 + 448) = 0;
    *(_QWORD *)(v95 + 424) = 0;
    *(_QWORD *)(v95 + 432) = 0;
    *(_QWORD *)(v95 + 416) = "";
    *(_DWORD *)(v95 + 440) = 0;
    *(_DWORD *)(v95 + 456) = 1065353216;
    *(_OWORD *)(v95 + 464) = 0u;
    *(_OWORD *)(v95 + 480) = 0u;
    *(int64x2_t *)(v95 + 496) = v97;
    *(_QWORD *)(v95 + 512) = 0;
    *(_QWORD *)(v95 + 400) = &off_1E42AF548;
    *(_BYTE *)(v95 + 520) = 1;
    *(_QWORD *)(v95 + 544) = "";
    *(_QWORD *)(v95 + 576) = 0;
    *(_DWORD *)(v95 + 568) = 0;
    *(_QWORD *)(v95 + 552) = 0;
    *(_QWORD *)(v95 + 560) = 0;
    *(_DWORD *)(v95 + 584) = 1065353216;
    *(_OWORD *)(v95 + 592) = 0u;
    *(_OWORD *)(v95 + 608) = 0u;
    *(int64x2_t *)(v95 + 624) = v97;
    *(_QWORD *)(v95 + 640) = 0;
    *(_QWORD *)(v95 + 528) = &off_1E42AF548;
    *(_BYTE *)(v95 + 648) = 1;
    *(_QWORD *)(v95 + 672) = "";
    *(_QWORD *)(v95 + 704) = 0;
    *(_QWORD *)(v95 + 688) = 0;
    *(_QWORD *)(v95 + 680) = 0;
    *(_DWORD *)(v95 + 696) = 0;
    *(_DWORD *)(v95 + 712) = 1065353216;
    *(_OWORD *)(v95 + 720) = 0u;
    *(_OWORD *)(v95 + 736) = 0u;
    *(int64x2_t *)(v95 + 752) = v97;
    *(_QWORD *)(v95 + 768) = 0;
    *(_QWORD *)(v95 + 656) = &off_1E42AF548;
    *(_BYTE *)(v95 + 776) = 1;
    *(_OWORD *)(v95 + 800) = 0u;
    *(_OWORD *)(v95 + 816) = 0u;
    *(_OWORD *)(v95 + 784) = 0u;
    if ((v98 & 1) == 0)
    {
      v96 = 0uLL;
      if (v499)
      {
        v500 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v500, "GeoGL", 0xA3D02C1100000005);
        v96 = 0uLL;
      }
    }
    *(_QWORD *)(v95 + 832) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v95 + 872) = 0;
    *(_OWORD *)(v95 + 840) = v96;
    *(_OWORD *)(v95 + 856) = v96;
    *(_QWORD *)(v95 + 880) = 32;
    v99 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v99 = 0;
    v99[1] = 0;
    *(_QWORD *)(v95 + 864) = v99;
    *(_QWORD *)(v95 + 872) = v99;
    *(_QWORD *)(v95 + 888) = 0;
    *(_QWORD *)(v95 + 904) = 0;
    *(_QWORD *)(v95 + 896) = 0;
    *(_BYTE *)(v95 + 912) = 1;
    *(_QWORD *)v95 = &off_1E428C6E0;
    *(_QWORD *)(v95 + 920) = *(_QWORD *)(v502 + 16);
    v100 = *(_QWORD *)(v502 + 24);
    *(_QWORD *)(v95 + 928) = v100;
    if (v100)
    {
      v101 = (unint64_t *)(v100 + 8);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    *(_DWORD *)(v95 + 936) = *(_DWORD *)(v502 + 32);
    *(_QWORD *)v95 = &off_1E428FBB0;
    v103 = (ggl::PatternedRibbon::BasePipelineSetup **)(v95 + 944);
    *(_OWORD *)(v95 + 944) = 0u;
    *(_OWORD *)(v95 + 960) = 0u;
    *(_OWORD *)(v95 + 976) = 0u;
    *(_OWORD *)(v95 + 992) = 0u;
    *(_OWORD *)(v95 + 1008) = 0u;
    *(_OWORD *)(v95 + 1024) = 0u;
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources", v501);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(v95 + 1041) = *(_BYTE *)(objc_msgSend(v104, "gglDevice") + 20);

    v105 = operator new(0xE8uLL);
    v105[1] = 0;
    v106 = v105 + 1;
    v105[2] = 0;
    *v105 = &off_1E42E17F8;
    ggl::BufferData::BufferData((uint64_t)(v105 + 3), qword_1EE56BEF8, 2, 1, 6, 1);
    v105[28] = ggl::PatternedRibbon::Style::reflection(void)::reflection;
    v105[3] = &off_1E42B9170;
    v522 = v105 + 3;
    v523 = v105;
    v107 = (ggl::PatternedRibbon::BasePipelineSetup *)operator new();
    v108 = ggl::PatternedRibbon::BasePipelineSetup::BasePipelineSetup(v107);
    v109 = *(_QWORD *)(v108 + 64);
    *(_QWORD *)(v109 + 32) = v105 + 3;
    *(_QWORD *)(v109 + 40) = 0;
    v110 = *(_QWORD *)(v108 + 160);
    do
      v111 = __ldxr(v106);
    while (__stxr(v111 + 1, v106));
    v112 = *(std::__shared_weak_count **)(v110 + 40);
    *(_QWORD *)(v110 + 32) = v105 + 3;
    *(_QWORD *)(v110 + 40) = v105;
    if (v112)
    {
      p_shared_owners = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldaxr(p_shared_owners);
      while (__stlxr(v114 - 1, p_shared_owners));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = (uint64_t *)*((_QWORD *)v107 + 8);
    v115[1] = 0;
    v116 = *a3;
    *v115 = *a3;
    v117 = (_QWORD *)*((_QWORD *)v107 + 20);
    v118 = a3[1];
    if (v118)
    {
      v119 = (unint64_t *)(v118 + 8);
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    v121 = (std::__shared_weak_count *)v117[1];
    *v117 = v116;
    v117[1] = v118;
    if (v121)
    {
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = *((_QWORD *)v107 + 8);
    *(_QWORD *)(v124 + 24) = 0;
    v125 = *a4;
    *(_QWORD *)(v124 + 16) = *a4;
    v126 = *((_QWORD *)v107 + 20);
    v127 = a4[1];
    if (v127)
    {
      v128 = (unint64_t *)(v127 + 8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
    v130 = *(std::__shared_weak_count **)(v126 + 24);
    *(_QWORD *)(v126 + 16) = v125;
    *(_QWORD *)(v126 + 24) = v127;
    if (v130)
    {
      v131 = (unint64_t *)&v130->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v133 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v133->__shared_owners_ = 0;
    v134 = (unint64_t *)&v133->__shared_owners_;
    v133->__shared_weak_owners_ = 0;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17F8;
    ggl::BufferData::BufferData((uint64_t)&v133[1], qword_1EE56BEF8, 2, 1, 6, 1);
    v133[9].__shared_owners_ = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9170;
    v527 = &v133[1].__vftable;
    v528 = v133;
    v135 = (ggl::PatternedRibbon::BasePipelineSetup *)operator new();
    v136 = ggl::PatternedRibbon::BasePipelineSetup::BasePipelineSetup(v135);
    v137 = *(_QWORD *)(v136 + 64);
    *(_QWORD *)(v137 + 32) = v133 + 1;
    *(_QWORD *)(v137 + 40) = 0;
    v138 = *(_QWORD *)(v136 + 160);
    do
      v139 = __ldxr(v134);
    while (__stxr(v139 + 1, v134));
    v140 = *(std::__shared_weak_count **)(v138 + 40);
    *(_QWORD *)(v138 + 32) = v133 + 1;
    *(_QWORD *)(v138 + 40) = v133;
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = (uint64_t *)*((_QWORD *)v135 + 8);
    v143[1] = 0;
    v144 = *a3;
    *v143 = *a3;
    v145 = (_QWORD *)*((_QWORD *)v135 + 20);
    v146 = a3[1];
    if (v146)
    {
      v147 = (unint64_t *)(v146 + 8);
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
    }
    v149 = (std::__shared_weak_count *)v145[1];
    *v145 = v144;
    v145[1] = v146;
    if (v149)
    {
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    v152 = *((_QWORD *)v135 + 8);
    *(_QWORD *)(v152 + 24) = 0;
    v153 = *a4;
    *(_QWORD *)(v152 + 16) = *a4;
    v154 = *((_QWORD *)v135 + 20);
    v155 = a4[1];
    if (v155)
    {
      v156 = (unint64_t *)(v155 + 8);
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 1, v156));
    }
    v158 = *(std::__shared_weak_count **)(v154 + 24);
    *(_QWORD *)(v154 + 16) = v153;
    *(_QWORD *)(v154 + 24) = v155;
    if (v158)
    {
      v159 = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    v161 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v161->__shared_owners_ = 0;
    v162 = (unint64_t *)&v161->__shared_owners_;
    v161->__shared_weak_owners_ = 0;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17F8;
    ggl::BufferData::BufferData((uint64_t)&v161[1], qword_1EE56BEF8, 2, 1, 6, 1);
    v161[9].__shared_owners_ = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9170;
    v525 = &v161[1].__vftable;
    v526 = v161;
    v163 = (ggl::PatternedRibbon::BasePipelineSetup *)operator new();
    v164 = ggl::PatternedRibbon::BasePipelineSetup::BasePipelineSetup(v163);
    v166 = *(_QWORD *)(v164 + 64);
    *(_QWORD *)(v166 + 32) = v161 + 1;
    *(_QWORD *)(v166 + 40) = 0;
    v167 = *(_QWORD *)(v164 + 160);
    do
      v168 = __ldxr(v162);
    while (__stxr(v168 + 1, v162));
    v169 = *(std::__shared_weak_count **)(v167 + 40);
    *(_QWORD *)(v167 + 32) = v161 + 1;
    *(_QWORD *)(v167 + 40) = v161;
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v172 = (uint64_t *)*((_QWORD *)v163 + 8);
    v172[1] = 0;
    v173 = *a3;
    *v172 = *a3;
    v174 = (_QWORD *)*((_QWORD *)v163 + 20);
    v175 = a3[1];
    if (v175)
    {
      v176 = (unint64_t *)(v175 + 8);
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
    }
    v178 = (std::__shared_weak_count *)v174[1];
    *v174 = v173;
    v174[1] = v175;
    if (v178)
    {
      v179 = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    v181 = *((_QWORD *)v163 + 8);
    *(_QWORD *)(v181 + 24) = 0;
    v182 = *a4;
    *(_QWORD *)(v181 + 16) = *a4;
    v183 = *((_QWORD *)v163 + 20);
    v184 = a4[1];
    if (v184)
    {
      v185 = (unint64_t *)(v184 + 8);
      do
        v186 = __ldxr(v185);
      while (__stxr(v186 + 1, v185));
    }
    v187 = *(std::__shared_weak_count **)(v183 + 24);
    *(_QWORD *)(v183 + 16) = v182;
    *(_QWORD *)(v183 + 24) = v184;
    if (v187)
    {
      v188 = (unint64_t *)&v187->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    v190 = *v103;
    *v103 = v107;
    if (v190)
      (*(void (**)(ggl::PatternedRibbon::BasePipelineSetup *))(*(_QWORD *)v190 + 8))(v190);
    v191 = *(_QWORD *)(v95 + 952);
    *(_QWORD *)(v95 + 952) = v135;
    v192 = v510;
    if (v191)
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
    v193 = *(_QWORD *)(v95 + 960);
    *(_QWORD *)(v95 + 960) = v163;
    if (v193)
      (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
    if (!*(_BYTE *)(v95 + 1041))
    {
      v194 = (ggl::PatternedRibbon::WriteStencilBasePipelineSetup *)operator new();
      v195 = ggl::PatternedRibbon::WriteStencilBasePipelineSetup::WriteStencilBasePipelineSetup(v194);
      v196 = *(_QWORD *)(v195 + 64);
      v197 = v527;
      v198 = v528;
      *(_QWORD *)(v196 + 32) = v527;
      *(_QWORD *)(v196 + 40) = 0;
      v199 = *(_QWORD *)(v195 + 160);
      if (v198)
      {
        v200 = (unint64_t *)&v198->__shared_owners_;
        do
          v201 = __ldxr(v200);
        while (__stxr(v201 + 1, v200));
      }
      v202 = *(std::__shared_weak_count **)(v199 + 40);
      *(_QWORD *)(v199 + 32) = v197;
      *(_QWORD *)(v199 + 40) = v198;
      if (v202)
      {
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = (uint64_t *)*((_QWORD *)v194 + 8);
      v205[1] = 0;
      v206 = *a3;
      *v205 = *a3;
      v207 = (_QWORD *)*((_QWORD *)v194 + 20);
      v208 = a3[1];
      if (v208)
      {
        v209 = (unint64_t *)(v208 + 8);
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      v211 = (std::__shared_weak_count *)v207[1];
      *v207 = v206;
      v207[1] = v208;
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v214 = *((_QWORD *)v194 + 8);
      *(_QWORD *)(v214 + 24) = 0;
      v215 = *a4;
      *(_QWORD *)(v214 + 16) = *a4;
      v216 = *((_QWORD *)v194 + 20);
      v217 = a4[1];
      if (v217)
      {
        v218 = (unint64_t *)(v217 + 8);
        do
          v219 = __ldxr(v218);
        while (__stxr(v219 + 1, v218));
      }
      v220 = *(std::__shared_weak_count **)(v216 + 24);
      *(_QWORD *)(v216 + 16) = v215;
      *(_QWORD *)(v216 + 24) = v217;
      if (v220)
      {
        v221 = (unint64_t *)&v220->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v223 = *(_QWORD *)(v95 + 976);
      *(_QWORD *)(v95 + 976) = v194;
      if (v223)
        (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
      v224 = (ggl::PatternedRibbon::WriteStencilBasePipelineSetup *)operator new();
      v225 = ggl::PatternedRibbon::WriteStencilBasePipelineSetup::WriteStencilBasePipelineSetup(v224);
      v226 = *(_QWORD *)(v225 + 64);
      v227 = v522;
      v228 = v523;
      *(_QWORD *)(v226 + 32) = v522;
      *(_QWORD *)(v226 + 40) = 0;
      v229 = *(_QWORD *)(v225 + 160);
      if (v228)
      {
        v230 = (unint64_t *)(v228 + 1);
        do
          v231 = __ldxr(v230);
        while (__stxr(v231 + 1, v230));
      }
      v232 = *(std::__shared_weak_count **)(v229 + 40);
      *(_QWORD *)(v229 + 32) = v227;
      *(_QWORD *)(v229 + 40) = v228;
      if (v232)
      {
        v233 = (unint64_t *)&v232->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      v235 = (uint64_t *)*((_QWORD *)v224 + 8);
      v235[1] = 0;
      v236 = *a3;
      *v235 = *a3;
      v237 = (_QWORD *)*((_QWORD *)v224 + 20);
      v238 = a3[1];
      if (v238)
      {
        v239 = (unint64_t *)(v238 + 8);
        do
          v240 = __ldxr(v239);
        while (__stxr(v240 + 1, v239));
      }
      v241 = (std::__shared_weak_count *)v237[1];
      *v237 = v236;
      v237[1] = v238;
      if (v241)
      {
        v242 = (unint64_t *)&v241->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      v244 = *((_QWORD *)v224 + 8);
      *(_QWORD *)(v244 + 24) = 0;
      v245 = *a4;
      *(_QWORD *)(v244 + 16) = *a4;
      v246 = *((_QWORD *)v224 + 20);
      v247 = a4[1];
      if (v247)
      {
        v248 = (unint64_t *)(v247 + 8);
        do
          v249 = __ldxr(v248);
        while (__stxr(v249 + 1, v248));
      }
      v250 = *(std::__shared_weak_count **)(v246 + 24);
      *(_QWORD *)(v246 + 16) = v245;
      *(_QWORD *)(v246 + 24) = v247;
      if (v250)
      {
        v251 = (unint64_t *)&v250->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
      }
      v253 = *(_QWORD *)(v95 + 968);
      *(_QWORD *)(v95 + 968) = v224;
      if (v253)
        (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
      v254 = (ggl::PatternedRibbon::WriteStencilBasePipelineSetup *)operator new();
      v255 = ggl::PatternedRibbon::WriteStencilBasePipelineSetup::WriteStencilBasePipelineSetup(v254);
      v256 = *(_QWORD *)(v255 + 64);
      v257 = v525;
      v258 = v526;
      *(_QWORD *)(v256 + 32) = v525;
      *(_QWORD *)(v256 + 40) = 0;
      v259 = *(_QWORD *)(v255 + 160);
      if (v258)
      {
        v260 = (unint64_t *)&v258->__shared_owners_;
        do
          v261 = __ldxr(v260);
        while (__stxr(v261 + 1, v260));
      }
      v262 = *(std::__shared_weak_count **)(v259 + 40);
      *(_QWORD *)(v259 + 32) = v257;
      *(_QWORD *)(v259 + 40) = v258;
      if (v262)
      {
        v263 = (unint64_t *)&v262->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
      v265 = (uint64_t *)*((_QWORD *)v254 + 8);
      v265[1] = 0;
      v266 = *a3;
      *v265 = *a3;
      v267 = (_QWORD *)*((_QWORD *)v254 + 20);
      v268 = a3[1];
      if (v268)
      {
        v269 = (unint64_t *)(v268 + 8);
        do
          v270 = __ldxr(v269);
        while (__stxr(v270 + 1, v269));
      }
      v271 = (std::__shared_weak_count *)v267[1];
      *v267 = v266;
      v267[1] = v268;
      if (v271)
      {
        v272 = (unint64_t *)&v271->__shared_owners_;
        do
          v273 = __ldaxr(v272);
        while (__stlxr(v273 - 1, v272));
        if (!v273)
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v271);
        }
      }
      v274 = *((_QWORD *)v254 + 8);
      *(_QWORD *)(v274 + 24) = 0;
      v275 = *a4;
      *(_QWORD *)(v274 + 16) = *a4;
      v276 = *((_QWORD *)v254 + 20);
      v277 = a4[1];
      if (v277)
      {
        v278 = (unint64_t *)(v277 + 8);
        do
          v279 = __ldxr(v278);
        while (__stxr(v279 + 1, v278));
      }
      v280 = *(std::__shared_weak_count **)(v276 + 24);
      *(_QWORD *)(v276 + 16) = v275;
      *(_QWORD *)(v276 + 24) = v277;
      if (v280)
      {
        v281 = (unint64_t *)&v280->__shared_owners_;
        do
          v282 = __ldaxr(v281);
        while (__stlxr(v282 - 1, v281));
        if (!v282)
        {
          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
          std::__shared_weak_count::__release_weak(v280);
        }
      }
      v283 = *(_QWORD *)(v95 + 984);
      *(_QWORD *)(v95 + 984) = v254;
      if (v283)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
        v254 = *(ggl::PatternedRibbon::WriteStencilBasePipelineSetup **)(v95 + 984);
      }
      *(_QWORD *)(v95 + 560) = *(_QWORD *)(v95 + 976);
      *(_QWORD *)(v95 + 432) = *(_QWORD *)(v95 + 968);
      *(_QWORD *)(v95 + 688) = v254;
    }
    v284 = *(_QWORD *)(v95 + 920);
    v286 = *(unsigned int **)(v284 + 240);
    v285 = *(unsigned int **)(v284 + 248);
    for (j = ((char *)v285 - (char *)v286) >> 3; v286 != v285; v286 += 2)
    {
      v288 = ((j << 6) - 0x61C8864680B583EBLL + (j >> 2) + *v286) ^ j;
      j = (*((unsigned __int16 *)v286 + 2) - 0x61C8864680B583EBLL + (v288 << 6) + (v288 >> 2)) ^ v288;
    }
    v289 = *(unsigned __int16 *)(v284 + 282);
    if (*(_WORD *)(v284 + 282))
    {
      v290 = 0;
      v291 = 0;
      v292 = 0;
      v293 = *(_QWORD *)(v284 + 272);
      v294 = v293 + *(unsigned __int16 *)(v284 + 280);
      do
      {
        if (v292 < v289)
        {
          v291 = (unsigned int *)(v293 + 4 * v292);
          v165 = (unsigned __int16 *)(v294 + 2 * v292);
        }
        v290 ^= (*v165
               - 0x61C8864680B583EBLL
               + ((((v290 << 6) - 0x61C8864680B583EBLL + (v290 >> 2) + *v291) ^ v290) << 6)
               + ((((v290 << 6) - 0x61C8864680B583EBLL + (v290 >> 2) + *v291) ^ v290) >> 2)) ^ ((v290 << 6)
                                                                                              - 0x61C8864680B583EBLL
                                                                                              + (v290 >> 2)
                                                                                              + *v291);
        v295 = v292 + 1;
        if (v292 + 1 < v289)
          ++v292;
        else
          v292 = v289;
      }
      while (v295 < v289);
    }
    else
    {
      LODWORD(v290) = 0;
    }
    *(_BYTE *)(v95 + 1040) = *(_BYTE *)(v95 + 936) ^ j ^ v290 ^ ((*(_DWORD *)(v95 + 936) ^ j ^ v290) >> 16) ^ ((unsigned __int16)(*(_WORD *)(v95 + 936) ^ j ^ v290 ^ ((*(_DWORD *)(v95 + 936) ^ j ^ v290) >> 16)) >> 8);
    v296 = v526;
    if (!v526)
      goto LABEL_326;
    v297 = (unint64_t *)&v526->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
      v299 = v528;
      if (v528)
      {
LABEL_327:
        v300 = (unint64_t *)&v299->__shared_owners_;
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 - 1, v300));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
        }
      }
    }
    else
    {
LABEL_326:
      v299 = v528;
      if (v528)
        goto LABEL_327;
    }
    v302 = (std::__shared_weak_count *)v523;
    if (v523)
    {
      v303 = (unint64_t *)(v523 + 1);
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (!v304)
      {
        ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
        std::__shared_weak_count::__release_weak(v302);
      }
    }
    v306 = (uint64_t *)v510[1];
    v305 = v510[2];
    if ((unint64_t)v306 >= v305)
    {
      v308 = (uint64_t *)*v510;
      v309 = (uint64_t)v306 - *v510;
      v310 = v309 >> 3;
      v311 = (v309 >> 3) + 1;
      if (v311 >> 61)
        abort();
      v312 = v305 - (_QWORD)v308;
      if (v312 >> 2 > v311)
        v311 = v312 >> 2;
      if ((unint64_t)v312 >= 0x7FFFFFFFFFFFFFF8)
        v313 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v313 = v311;
      if (v313)
      {
        if (v313 >> 61)
LABEL_616:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v314 = operator new(8 * v313);
      }
      else
      {
        v314 = 0;
      }
      v315 = (uint64_t *)&v314[8 * v310];
      *v315 = v95;
      v307 = v315 + 1;
      if (v306 == v308)
      {
        v308 = v306;
      }
      else
      {
        v316 = (char *)(v306 - 1) - (char *)v308;
        if (v316 < 0x58)
          goto LABEL_623;
        if ((unint64_t)((char *)v306 - &v314[v309]) < 0x20)
          goto LABEL_623;
        v317 = (v316 >> 3) + 1;
        v318 = &v314[8 * v310 - 16];
        v319 = v306 - 2;
        v320 = v317 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v321 = *(_OWORD *)v319;
          *(v318 - 1) = *((_OWORD *)v319 - 1);
          *v318 = v321;
          v318 -= 2;
          v319 -= 4;
          v320 -= 4;
        }
        while (v320);
        v315 -= v317 & 0x3FFFFFFFFFFFFFFCLL;
        v306 -= v317 & 0x3FFFFFFFFFFFFFFCLL;
        if (v317 != (v317 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_623:
          do
          {
            v322 = *--v306;
            *--v315 = v322;
          }
          while (v306 != v308);
          v308 = (uint64_t *)*v510;
        }
      }
      *v510 = (uint64_t)v315;
      v510[1] = (uint64_t)v307;
      v510[2] = (uint64_t)&v314[8 * v313];
      if (v308)
        operator delete(v308);
    }
    else
    {
      *v306 = v95;
      v307 = v306 + 1;
    }
    v510[1] = (uint64_t)v307;
    v509 = v518;
    if (v518)
    {
      v323 = 0;
      v512 = 0;
      v324 = 0;
      while (1)
      {
        v325 = operator new();
        *(_QWORD *)(v325 + 96) = 0;
        *(_OWORD *)(v325 + 64) = 0u;
        *(_OWORD *)(v325 + 80) = 0u;
        *(_OWORD *)(v325 + 32) = 0u;
        *(_OWORD *)(v325 + 48) = 0u;
        *(_OWORD *)v325 = 0u;
        *(_OWORD *)(v325 + 16) = 0u;
        *(_BYTE *)(v325 + 48) = 1;
        *(_QWORD *)(v325 + 56) = 0;
        *(_QWORD *)(v325 + 64) = 0;
        *(_QWORD *)(v325 + 72) = 0;
        {
          v444 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v444, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v325 + 80) = mdm::Allocator::instance(void)::alloc;
        *(_DWORD *)(v325 + 96) = 0;
        v522 = (_QWORD *)v325;
        if (v324 < (uint64_t *)v512)
        {
          v522 = 0;
          *v324 = v325;
          v327 = v324 + 1;
          v328 = v522;
          if (!v522)
            goto LABEL_420;
LABEL_408:
          v357 = (_QWORD *)v328[7];
          if (v357)
          {
            v358 = (_QWORD *)v328[8];
            v359 = v328[7];
            if (v358 != v357)
            {
              do
              {
                v361 = (void (***)(_QWORD, uint64_t))*--v358;
                v360 = v361;
                *v358 = 0;
                if (v361)
                {
                  (**v360)(v360, v359);
                  if ((v362 & 1) == 0
                  {
                    v363 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v363, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v360, 120);
                }
              }
              while (v358 != v357);
              v359 = v328[7];
            }
            v328[8] = v357;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v328[10] + 40))(v328[10], v359, v328[9] - v359);
          }
          MEMORY[0x1A1AF4E00](v328, 0x1020C4010FC18DELL);
          goto LABEL_420;
        }
        v329 = (char *)v324 - (char *)v323;
        v330 = v324 - v323;
        v331 = v330 + 1;
        if ((unint64_t)(v330 + 1) >> 61)
          abort();
        if ((v512 - (char *)v323) >> 2 > v331)
          v331 = (v512 - (char *)v323) >> 2;
        v332 = (unint64_t)(v512 - (char *)v323) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v331;
        if (v332)
        {
          if (v332 >> 61)
            goto LABEL_616;
          v333 = (char *)operator new(8 * v332);
        }
        else
        {
          v333 = 0;
        }
        v334 = (uint64_t *)&v333[8 * v330];
        v522 = 0;
        *v334 = v325;
        v327 = v334 + 1;
        v335 = (char *)v324 - (char *)v323;
        if (v324 != v323)
          break;
LABEL_405:
        v512 = &v333[8 * v332];
        if (v323)
          operator delete(v323);
        v323 = v334;
        v328 = v522;
        if (v522)
          goto LABEL_408;
LABEL_420:
        *(_DWORD *)(*(v327 - 1) + 96) = *(_DWORD *)(v509 + 16);
        v364 = *(_QWORD *)(v509 + 24);
        v511 = *(_QWORD *)(v509 + 32);
        if (v364 != v511)
        {
          v365 = 0;
          v324 = v327;
          while (1)
          {
            v366 = *(void (****)(_QWORD))v364;
            v367 = *(_QWORD *)(*(_QWORD *)v364 + 88);
            if ((unint64_t)(v367 + v365) <= 0x5999)
            {
              v371 = *(v324 - 1);
              goto LABEL_485;
            }
            v368 = operator new();
            *(_QWORD *)(v368 + 96) = 0;
            *(_OWORD *)(v368 + 64) = 0u;
            *(_OWORD *)(v368 + 80) = 0u;
            *(_OWORD *)(v368 + 32) = 0u;
            *(_OWORD *)(v368 + 48) = 0u;
            *(_OWORD *)v368 = 0u;
            *(_OWORD *)(v368 + 16) = 0u;
            *(_BYTE *)(v368 + 48) = 1;
            *(_QWORD *)(v368 + 56) = 0;
            *(_QWORD *)(v368 + 64) = 0;
            *(_QWORD *)(v368 + 72) = 0;
            {
              v443 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v443, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v368 + 80) = mdm::Allocator::instance(void)::alloc;
            *(_DWORD *)(v368 + 96) = 0;
            v522 = (_QWORD *)v368;
            if (v324 >= (uint64_t *)v512)
              break;
            v522 = 0;
            *v324++ = v368;
            v370 = v522;
            if (v522)
              goto LABEL_472;
LABEL_484:
            v365 = 0;
            v371 = *(v324 - 1);
            *(_DWORD *)(v371 + 96) = *(_DWORD *)(v509 + 16);
            v366 = *(void (****)(_QWORD))v364;
            v367 = *(_QWORD *)(*(_QWORD *)v364 + 88);
LABEL_485:
            *(_QWORD *)v364 = 0;
            v410 = *(_QWORD **)(v371 + 64);
            v411 = *(_QWORD *)(v371 + 72);
            if ((unint64_t)v410 < v411)
            {
              if (v410)
              {
                *v410 = v366;
                v366 = 0;
              }
              v412 = v410 + 1;
              goto LABEL_522;
            }
            v413 = *(_QWORD *)(v371 + 56);
            v414 = ((uint64_t)v410 - v413) >> 3;
            v415 = v414 + 1;
            if ((unint64_t)(v414 + 1) >> 61)
              abort();
            v416 = v411 - v413;
            if (v416 >> 2 > v415)
              v415 = v416 >> 2;
            if ((unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
              v417 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v417 = v415;
            if (v417)
            {
              v418 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v371 + 80) + 16))(*(_QWORD *)(v371 + 80), 8 * v417, 8);
              v419 = (_QWORD *)(v418 + 8 * v414);
              v420 = v418 + 8 * v417;
              if (v418)
              {
                *v419 = v366;
                v366 = 0;
              }
            }
            else
            {
              v420 = 0;
              v419 = (_QWORD *)(8 * v414);
            }
            v412 = v419 + 1;
            v421 = *(_QWORD **)(v371 + 56);
            v422 = *(_QWORD *)(v371 + 64);
            if ((_QWORD *)v422 == v421)
            {
              *(_QWORD *)(v371 + 56) = v419;
              *(_QWORD *)(v371 + 64) = v412;
              v436 = *(_QWORD *)(v371 + 72);
              *(_QWORD *)(v371 + 72) = v420;
              if (!v422)
                goto LABEL_522;
              goto LABEL_521;
            }
            v423 = v422 - (_QWORD)v421 - 8;
            v508 = v323;
            if (v423 <= 0x47
              || ((v424 = v423 >> 3, v422 - 8 * v424 - 8 < (unint64_t)v419)
                ? (v425 = (unint64_t)&v419[-v424 - 1] >= v422)
                : (v425 = 1),
                  !v425))
            {
              v428 = *(_QWORD **)(v371 + 64);
              do
              {
LABEL_511:
                v434 = *--v428;
                *v428 = 0;
                *--v419 = v434;
              }
              while (v428 != v421);
              goto LABEL_512;
            }
            v426 = v424 + 1;
            v427 = (v424 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v428 = (_QWORD *)(v422 - 8 * v427);
            v429 = v419 - 2;
            v430 = (__int128 *)(v422 - 32);
            v431 = v427;
            do
            {
              v433 = *v430;
              v432 = v430[1];
              *v430 = 0uLL;
              v430[1] = 0uLL;
              v430 -= 2;
              *(v429 - 1) = v433;
              *v429 = v432;
              v429 -= 2;
              v431 -= 4;
            }
            while (v431);
            v419 -= v427;
            if (v426 != v427)
              goto LABEL_511;
LABEL_512:
            v422 = *(_QWORD *)(v371 + 56);
            v435 = *(_QWORD **)(v371 + 64);
            *(_QWORD *)(v371 + 56) = v419;
            *(_QWORD *)(v371 + 64) = v412;
            v436 = *(_QWORD *)(v371 + 72);
            *(_QWORD *)(v371 + 72) = v420;
            if (v435 == (_QWORD *)v422)
            {
              v323 = v508;
              if (!v422)
                goto LABEL_522;
            }
            else
            {
              v506 = v436;
              do
              {
                v438 = (void (***)(_QWORD))*--v435;
                v437 = v438;
                *v435 = 0;
                if (v438)
                {
                  (**v437)(v437);
                  if ((v439 & 1) == 0
                  {
                    v440 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v440, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v437, 120);
                }
              }
              while (v435 != (_QWORD *)v422);
              v436 = v506;
              v323 = v508;
              if (!v422)
                goto LABEL_522;
            }
LABEL_521:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v371 + 80) + 40))(*(_QWORD *)(v371 + 80), v422, v436 - v422);
LABEL_522:
            *(_QWORD *)(v371 + 64) = v412;
            if (v366)
            {
              (**v366)(v366);
              {
                v442 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v442, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v366, 120);
            }
            v365 += v367;
            v364 += 8;
            if (v364 == v511)
              goto LABEL_363;
          }
          v372 = (char *)v324 - (char *)v323;
          v373 = v324 - v323;
          v374 = v373 + 1;
          if ((unint64_t)(v373 + 1) >> 61)
            abort();
          if ((v512 - (char *)v323) >> 2 > v374)
            v374 = (v512 - (char *)v323) >> 2;
          if ((unint64_t)(v512 - (char *)v323) >= 0x7FFFFFFFFFFFFFF8)
            v375 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v375 = v374;
          if (v375)
          {
            if (v375 >> 61)
              goto LABEL_616;
            v376 = (char *)operator new(8 * v375);
          }
          else
          {
            v376 = 0;
          }
          v377 = (uint64_t *)&v376[8 * v373];
          v522 = 0;
          *v377 = v368;
          v507 = v377 + 1;
          v378 = (char *)v324 - (char *)v323;
          if (v324 != v323)
          {
            v379 = v378 - 8;
            if ((unint64_t)(v378 - 8) < 0x138)
            {
              v380 = v324;
              goto LABEL_443;
            }
            v382 = v379 & 0xFFFFFFFFFFFFFFF8;
            if ((uint64_t *)((char *)v324 - (v379 & 0xFFFFFFFFFFFFFFF8) - 8) > v324 - 1)
            {
              v380 = v324;
              goto LABEL_443;
            }
            if (&v376[v372 - 8 - v382] > &v376[v372 - 8])
            {
              v380 = v324;
              goto LABEL_443;
            }
            v383 = v379 >> 3;
            if (&v324[-v383 - 1] < v377)
            {
              v384 = (unint64_t)&v376[v372 - v382 - 8];
              v380 = v324;
              if (v384 < (unint64_t)v324)
                goto LABEL_624;
            }
            v385 = v383 + 1;
            v380 = &v324[-(v385 & 0x3FFFFFFFFFFFFFFCLL)];
            v386 = &v376[8 * v373 - 16];
            v387 = v324 - 4;
            v388 = v385 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v390 = *(_OWORD *)v387;
              v389 = *((_OWORD *)v387 + 1);
              *(_OWORD *)v387 = 0uLL;
              *((_OWORD *)v387 + 1) = 0uLL;
              v387 -= 4;
              *((_OWORD *)v386 - 1) = v390;
              *(_OWORD *)v386 = v389;
              v386 -= 32;
              v388 -= 4;
            }
            while (v388);
            v377 -= v385 & 0x3FFFFFFFFFFFFFFCLL;
            if (v385 != (v385 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_624:
              do
              {
LABEL_443:
                v381 = *--v380;
                *v380 = 0;
                *--v377 = v381;
              }
              while (v380 != v323);
            }
            do
            {
              v393 = *--v324;
              v392 = v393;
              *v324 = 0;
              if (v393)
              {
                v394 = *(_QWORD **)(v392 + 56);
                if (v394)
                {
                  v395 = *(_QWORD **)(v392 + 64);
                  v391 = *(_QWORD *)(v392 + 56);
                  if (v395 != v394)
                  {
                    do
                    {
                      v398 = (void (***)(_QWORD, uint64_t))*--v395;
                      v397 = v398;
                      *v395 = 0;
                      if (v398)
                      {
                        (**v397)(v397, v391);
                        if ((v399 & 1) == 0
                        {
                          v400 = operator new();
                          *(_QWORD *)(v400 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v400 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v400 + 32) = v501;
                          *(_QWORD *)v400 = &off_1E42B5668;
                          *(_QWORD *)(v400 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v400 + 72) = 0u;
                          *(_OWORD *)(v400 + 88) = 0u;
                          *(_OWORD *)(v400 + 104) = 0u;
                          *(_OWORD *)(v400 + 120) = 0u;
                          *(_OWORD *)(v400 + 136) = 0u;
                          *(_OWORD *)(v400 + 152) = 0u;
                          *(_OWORD *)(v400 + 168) = 0u;
                          *(_OWORD *)(v400 + 184) = 0u;
                          *(_OWORD *)(v400 + 200) = 0u;
                          *(_OWORD *)(v400 + 216) = 0u;
                          *(_OWORD *)(v400 + 232) = 0u;
                          *(_QWORD *)(v400 + 248) = 0;
                          v513 = v400;
                          *(_OWORD *)(v400 + 56) = 0u;
                          v401 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v400 + 56), 0);
                          if ((_DWORD)v401)
                            geo::read_write_lock::logFailure(v401, (uint64_t)"initialization", v402);
                          zone = malloc_create_zone(0, 0);
                          *(_QWORD *)(v513 + 48) = zone;
                          malloc_set_zone_name(zone, "VectorKitLabels");
                          *(_QWORD *)(v513 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v513;
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v397, 120);
                      }
                    }
                    while (v395 != v394);
                    v391 = *(_QWORD *)(v392 + 56);
                  }
                  *(_QWORD *)(v392 + 64) = v394;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v392 + 80) + 40))(*(_QWORD *)(v392 + 80), v391, *(_QWORD *)(v392 + 72) - v391);
                }
                MEMORY[0x1A1AF4E00](v392, 0x1020C4010FC18DELL);
              }
            }
            while (v324 != v323);
          }
          v512 = &v376[8 * v375];
          if (v323)
            operator delete(v323);
          v323 = v377;
          v324 = v507;
          v370 = v522;
          if (!v522)
            goto LABEL_484;
LABEL_472:
          v403 = (_QWORD *)v370[7];
          if (v403)
          {
            v404 = (_QWORD *)v370[8];
            v405 = v370[7];
            if (v404 != v403)
            {
              do
              {
                v407 = (void (***)(_QWORD, uint64_t))*--v404;
                v406 = v407;
                *v404 = 0;
                if (v407)
                {
                  (**v406)(v406, v405);
                  if ((v408 & 1) == 0
                  {
                    v409 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v409, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v406, 120);
                }
              }
              while (v404 != v403);
              v405 = v370[7];
            }
            v370[8] = v403;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v370[10] + 40))(v370[10], v405, v370[9] - v405);
          }
          MEMORY[0x1A1AF4E00](v370, 0x1020C4010FC18DELL);
          goto LABEL_484;
        }
        v324 = v327;
LABEL_363:
        v192 = v510;
        v509 = *(_QWORD *)v509;
        if (!v509)
        {
          v307 = (_QWORD *)v510[1];
          goto LABEL_540;
        }
      }
      v336 = v335 - 8;
      if ((unint64_t)(v335 - 8) >= 0x138)
      {
        v339 = v336 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v324 - (v336 & 0xFFFFFFFFFFFFFFF8) - 8) > v324 - 1)
        {
          v337 = v324;
        }
        else if (&v333[v329 - 8 - v339] > &v333[v329 - 8])
        {
          v337 = v324;
        }
        else
        {
          v340 = v336 >> 3;
          if (&v324[-v340 - 1] >= v334
            || (v341 = (unint64_t)&v333[v329 - v339 - 8], v337 = v324, v341 >= (unint64_t)v324))
          {
            v342 = v340 + 1;
            v337 = &v324[-(v342 & 0x3FFFFFFFFFFFFFFCLL)];
            v343 = &v333[8 * v330 - 16];
            v344 = v324 - 4;
            v345 = v342 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v347 = *(_OWORD *)v344;
              v346 = *((_OWORD *)v344 + 1);
              *(_OWORD *)v344 = 0uLL;
              *((_OWORD *)v344 + 1) = 0uLL;
              v344 -= 4;
              *((_OWORD *)v343 - 1) = v347;
              *(_OWORD *)v343 = v346;
              v343 -= 32;
              v345 -= 4;
            }
            while (v345);
            v334 -= v342 & 0x3FFFFFFFFFFFFFFCLL;
            if (v342 == (v342 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_395:
                v350 = *--v324;
                v349 = v350;
                *v324 = 0;
                if (v350)
                {
                  v351 = *(_QWORD **)(v349 + 56);
                  if (v351)
                  {
                    v352 = *(_QWORD **)(v349 + 64);
                    v348 = *(_QWORD *)(v349 + 56);
                    if (v352 != v351)
                    {
                      do
                      {
                        v354 = (void (***)(_QWORD, uint64_t))*--v352;
                        v353 = v354;
                        *v352 = 0;
                        if (v354)
                        {
                          (**v353)(v353, v348);
                          if ((v355 & 1) == 0
                          {
                            v356 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v356, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v353, 120);
                        }
                      }
                      while (v352 != v351);
                      v348 = *(_QWORD *)(v349 + 56);
                    }
                    *(_QWORD *)(v349 + 64) = v351;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v349 + 80) + 40))(*(_QWORD *)(v349 + 80), v348, *(_QWORD *)(v349 + 72) - v348);
                  }
                  MEMORY[0x1A1AF4E00](v349, 0x1020C4010FC18DELL);
                }
              }
              while (v324 != v323);
              goto LABEL_405;
            }
          }
        }
      }
      else
      {
        v337 = v324;
      }
      do
      {
        v338 = *--v337;
        *v337 = 0;
        *--v334 = v338;
      }
      while (v337 != v323);
      goto LABEL_395;
    }
    v324 = 0;
    v323 = 0;
LABEL_540:
    v445 = *(v307 - 1);
    v446 = *(_QWORD *)(v445 + 888);
    v447 = *(int8x16_t **)(v445 + 896);
    v448 = 126 - 2 * __clz(((uint64_t)v447->i64 - v446) >> 3);
    if (v447 == (int8x16_t *)v446)
      v449 = 0;
    else
      v449 = v448;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v446, v447, v449, 1);
    v450 = v323;
    if (v323 == v324)
    {
      v451 = (uint64_t *)v502;
      if (!v324)
        goto LABEL_4;
LABEL_3:
      operator delete(v323);
      goto LABEL_4;
    }
    do
    {
      v452 = *(_QWORD **)(v192[1] - 8);
      v453 = *v450;
      *v450 = 0;
      v454 = (uint64_t *)v452[112];
      v455 = v452[113];
      if ((unint64_t)v454 < v455)
      {
        *v454 = v453;
        v456 = v454 + 1;
        goto LABEL_576;
      }
      v514 = v450;
      v457 = v452[111];
      v458 = (char *)v454 - v457;
      v459 = ((uint64_t)v454 - v457) >> 3;
      if ((unint64_t)(v459 + 1) >> 61)
        abort();
      v460 = v455 - v457;
      v461 = v460 >> 2;
      if (v460 >> 2 <= (unint64_t)(v459 + 1))
        v461 = v459 + 1;
      if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
        v462 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v462 = v461;
      if (v462)
      {
        if (v462 >> 61)
          goto LABEL_616;
        v463 = (char *)operator new(8 * v462);
      }
      else
      {
        v463 = 0;
      }
      v464 = &v463[8 * v459];
      v465 = &v463[8 * v462];
      *(_QWORD *)v464 = v453;
      v456 = v464 + 8;
      v466 = (char *)v452[112];
      v467 = (char *)v452[111];
      if (v466 == v467)
      {
        v452[111] = v464;
        v452[112] = v456;
        v452[113] = v465;
      }
      else
      {
        v468 = v466 - v467 - 8;
        if (v468 <= 0x77)
          goto LABEL_625;
        if (&v466[-(v468 & 0xFFFFFFFFFFFFFFF8) - 8] < v464
          && &v458[(_QWORD)v463 - (v468 & 0xFFFFFFFFFFFFFFF8) - 8] < v466)
        {
          goto LABEL_625;
        }
        v470 = (v468 >> 3) + 1;
        v471 = &v463[8 * v459 - 16];
        v472 = v466 - 32;
        v473 = v470 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v475 = *(_OWORD *)v472;
          v474 = *((_OWORD *)v472 + 1);
          *(_OWORD *)v472 = 0uLL;
          *((_OWORD *)v472 + 1) = 0uLL;
          v472 -= 32;
          *((_OWORD *)v471 - 1) = v475;
          *(_OWORD *)v471 = v474;
          v471 -= 32;
          v473 -= 4;
        }
        while (v473);
        v464 -= 8 * (v470 & 0x3FFFFFFFFFFFFFFCLL);
        v466 -= 8 * (v470 & 0x3FFFFFFFFFFFFFFCLL);
        if (v470 != (v470 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_625:
          do
          {
            v476 = *((_QWORD *)v466 - 1);
            v466 -= 8;
            *(_QWORD *)v466 = 0;
            *((_QWORD *)v464 - 1) = v476;
            v464 -= 8;
          }
          while (v466 != v467);
        }
        v466 = (char *)v452[111];
        v477 = (char *)v452[112];
        v452[111] = v464;
        v452[112] = v456;
        v452[113] = v465;
        if (v477 == v466)
          goto LABEL_574;
        do
        {
          v480 = *((_QWORD *)v477 - 1);
          v477 -= 8;
          v479 = v480;
          *(_QWORD *)v477 = 0;
          if (v480)
          {
            v481 = *(_QWORD **)(v479 + 56);
            if (v481)
            {
              v482 = v323;
              v483 = *(_QWORD **)(v479 + 64);
              v478 = *(_QWORD *)(v479 + 56);
              if (v483 != v481)
              {
                do
                {
                  v485 = (void (***)(_QWORD, uint64_t))*--v483;
                  v484 = v485;
                  *v483 = 0;
                  if (v485)
                  {
                    (**v484)(v484, v478);
                    if ((v486 & 1) == 0
                    {
                      v487 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v487, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v484, 120);
                  }
                }
                while (v483 != v481);
                v478 = *(_QWORD *)(v479 + 56);
              }
              *(_QWORD *)(v479 + 64) = v481;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v479 + 80) + 40))(*(_QWORD *)(v479 + 80), v478, *(_QWORD *)(v479 + 72) - v478);
              v323 = v482;
            }
            MEMORY[0x1A1AF4E00](v479, 0x1020C4010FC18DELL);
            v192 = v510;
          }
        }
        while (v477 != v466);
      }
      v450 = v514;
LABEL_574:
      if (v466)
        operator delete(v466);
LABEL_576:
      v452[112] = v456;
      ++v450;
    }
    while (v450 != v324);
    v451 = (uint64_t *)v502;
    if (v323)
    {
      do
      {
        v490 = *--v324;
        v489 = v490;
        *v324 = 0;
        if (v490)
        {
          v491 = *(_QWORD **)(v489 + 56);
          if (v491)
          {
            v492 = *(_QWORD **)(v489 + 64);
            v488 = *(_QWORD *)(v489 + 56);
            if (v492 != v491)
            {
              do
              {
                v494 = (void (***)(_QWORD, uint64_t))*--v492;
                v493 = v494;
                *v492 = 0;
                if (v494)
                {
                  (**v493)(v493, v488);
                  if ((v495 & 1) == 0
                  {
                    v496 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v496, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v493, 120);
                }
              }
              while (v492 != v491);
              v488 = *(_QWORD *)(v489 + 56);
            }
            *(_QWORD *)(v489 + 64) = v491;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v489 + 80) + 40))(*(_QWORD *)(v489 + 80), v488, *(_QWORD *)(v489 + 72) - v488);
          }
          MEMORY[0x1A1AF4E00](v489, 0x1020C4010FC18DELL);
        }
      }
      while (v324 != v323);
      goto LABEL_3;
    }
LABEL_4:
    result = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(&v515);
    v5 = *v451;
    if (v5)
      continue;
    return result;
  }
}

void sub_19FCE89D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  va_list va;

  va_start(va, a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v18 - 120);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v18 - 104);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v18 - 144);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v17 + 128));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v17 + 126));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v17 + 124));
  v20 = v17[123];
  v17[123] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v17[122];
  v17[122] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v17[121];
  v17[121] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v17[120];
  v17[120] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v17[119];
  v17[119] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *v16;
  *v16 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  md::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(v17);
  MEMORY[0x1A1AF4E00](v17, 0x10F1C4033AD85D8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)va);
  v26 = *(void **)a13;
  if (*(_QWORD *)a13)
  {
    *(_QWORD *)(a13 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 120);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 120);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 120);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

uint64_t md::PatternedLayer::PatternedLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char *a6, int a7)
{
  char v7;
  uint64_t v8;
  int v11;
  char v12;
  int32x2_t *v13;
  int64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  const QuadTile *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  _QWORD **v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::vector<unsigned int>::pointer begin;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  char *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  char *v47;
  uint64_t v48;
  double v49;
  float v50;
  float v51;
  unint64_t v52;
  float v53;
  float v54;
  unint64_t v55;
  float *v56;
  float v57;
  float v58;
  float *v59;
  unint64_t v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  float v66;
  float v67;
  double v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  gdc::GlobeTileGrid *v85;
  gdc::GlobeTileGrid *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float *v96;
  unsigned int v97;
  float v98;
  unsigned int v99;
  unsigned int v100;
  float *v101;
  float v102;
  float v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *__ptr32 *v110;
  _QWORD *v111;
  unint64_t *v112;
  __int128 v113;
  unsigned __int8 v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  std::__shared_count v117;
  unsigned __int8 v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned __int8 v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  uint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  uint64_t *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  int v181;
  uint64_t v182;
  geo::read_write_lock *v183;
  const char *v184;
  malloc_zone_t *zone;
  int v186;
  uint64_t v187;
  geo::read_write_lock *v188;
  const char *v189;
  malloc_zone_t *v190;
  unsigned __int8 v191;
  int v192;
  uint64_t v193;
  geo::read_write_lock *v194;
  const char *v195;
  malloc_zone_t *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  geo::read_write_lock *v200;
  const char *v201;
  malloc_zone_t *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  float v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int8x16_t v232;
  unint64_t v233;
  unint64_t v234;
  int32x2_t v235;
  unint64_t v236;
  float v237;
  float32x2_t v238;
  uint64_t v239;
  int8x16_t v240;
  int32x4_t *v241;
  float32x4_t v242;
  unint64_t v243;
  float32x4_t v244;
  const float *i32;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int8x16_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  unint64_t v255;
  char *v256;
  float32x2_t v257;
  float32x2_t v258;
  double v259;
  float v260;
  uint64_t v261;
  float v262;
  float v263;
  float v264;
  int32x2_t *v265;
  uint64_t v266;
  uint64_t v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  int v273;
  float v274;
  float v275;
  int v276;
  float32x4_t v277;
  float32x4_t v278;
  char *v279;
  float v280;
  float v281;
  float *v282;
  unint64_t v283;
  float v284;
  float v285;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  int v296;
  float v297;
  float v298;
  double v299;
  float v300;
  unint64_t v301;
  uint64_t v302;
  float v303;
  float v304;
  int v305;
  float v306;
  float v307;
  int v308;
  __float2 v309;
  float32x4_t v310;
  float32x4_t v311;
  float *v312;
  unint64_t v313;
  float v314;
  float v315;
  float v317;
  float v318;
  float v319;
  __int32 v320;
  float v321;
  int v322;
  float v323;
  float v324;
  int v325;
  float32x4_t v326;
  float32x4_t v327;
  int32x2_t *v328;
  char *v329;
  char *v330;
  char *v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  double v352;
  unint64_t v353;
  float v354;
  float v355;
  int v356;
  float v357;
  float v358;
  int v359;
  float v360;
  float v361;
  int v362;
  float32x4_t v363;
  float32x4_t v364;
  unint64_t v365;
  unint64_t v366;
  int16x8_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _WORD *v372;
  uint64_t v373;
  unint64_t v374;
  _WORD *v375;
  __int16 v376;
  unint64_t v377;
  __int16 v378;
  __int16 v379;
  uint64_t v380;
  __int16 *v381;
  unint64_t v382;
  int64x2_t v383;
  int64x2_t v384;
  int64x2_t v385;
  int64x2_t v386;
  __int16 *v387;
  unint64_t v388;
  int64x2_t v389;
  unint64_t v390;
  unint64_t v391;
  unsigned __int8 v392;
  _QWORD *v393;
  _QWORD *v394;
  _QWORD *v395;
  _QWORD *v396;
  malloc_zone_t *v397;
  void (***v398)(_QWORD, _QWORD *);
  void (***v399)(_QWORD, _QWORD *);
  unsigned __int8 v400;
  uint64_t v401;
  geo::read_write_lock *v402;
  const char *v403;
  uint64_t v404;
  geo::read_write_lock *v405;
  const char *v406;
  malloc_zone_t *v407;
  uint64_t result;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t *v425;
  __int16 *v426;
  const QuadTile *v427;
  uint64_t *v428;
  _WORD *v430;
  uint64_t v432;
  void **v433;
  int32x2_t *v434;
  _QWORD *v435;
  unint64_t v436;
  _QWORD *v437;
  float v438;
  _QWORD **v439;
  float v440;
  unint64_t v441;
  float v442;
  _QWORD *v443;
  char *v444;
  uint64_t v445;
  float v446;
  char *v447;
  float v448;
  float v449;
  char *__p;
  char *__pa;
  float __pb;
  float __pc;
  uint64_t *v454;
  std::__shared_weak_count *v455;
  std::vector<unsigned int> v456;
  int32x2_t *v457;
  int32x2_t *v458;
  uint64_t v459;
  std::vector<unsigned int> v460;
  unint64_t v461;
  __int128 v462;
  uint64_t v463[4];
  int16x8x2_t v464;
  float32x4x3_t v465;

  v463[2] = *MEMORY[0x1E0C80C00];
  v11 = a6[24];
  if (a6[24])
  {
    v7 = a6[1];
    v12 = *a6;
    v8 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v12 = 0;
  }
  md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch((uint64_t *)&v457, *(_QWORD *)(a3 + 16), a4, a5, a7);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E42AF348;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v13 = v457;
  v14 = (char *)v458 - (char *)v457;
  if (v458 == v457)
  {
    v435 = 0;
    v17 = 0;
  }
  else
  {
    if (v14 < 0)
      abort();
    v15 = operator new((char *)v458 - (char *)v457);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v16 = (char *)&v15[v14 >> 3];
    *(_QWORD *)(a1 + 24) = v16;
    v17 = v15;
    memcpy(v15, v13, v14);
    v435 = v16;
    *(_QWORD *)(a1 + 16) = v16;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 104) = a7;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v18 = (const QuadTile *)(a1 + 120);
  v433 = (void **)(a1 + 32);
  *(_BYTE *)(a1 + 144) = 0;
  if (v11)
  {
    *(_BYTE *)(a1 + 120) = v12;
    *(_BYTE *)(a1 + 121) = v7;
    *(_QWORD *)(a1 + 124) = v8;
    *(_BYTE *)(a1 + 144) = 1;
  }
  v411 = a1;
  if (v17 == v435)
  {
    v20 = 0;
    __pa = 0;
    if (a7)
      goto LABEL_89;
LABEL_110:
    v104 = 0;
    v105 = 0;
    v106 = v20;
    v107 = 0;
    v108 = 0;
    v109 = (v106 - __pa) >> 3;
    v110 = &off_19FFB1000;
    v436 = v109;
    do
    {
      if (v105 == v109
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&__pa[8 * v105] + 8) + v108 - **(_QWORD **)&__pa[8 * v105]) >= 0x10000)
      {
        v111 = operator new(0xF8uLL);
        v111[1] = 0;
        v112 = v111 + 1;
        v111[2] = 0;
        *v111 = &off_1E42DFF40;
        v111[3] = &off_1E42B5748;
        v444 = (char *)(v111 + 3);
        v111[4] = 20;
        *((_DWORD *)v111 + 10) = 1;
        v111[6] = 0;
        v111[7] = 0;
        v111[8] = 0;
        v111[9] = 20 * v108;
        v113 = 0uLL;
        *((_OWORD *)v111 + 5) = 0u;
        *((_OWORD *)v111 + 6) = 0u;
        v111[14] = 0;
        v455 = (std::__shared_weak_count *)v111;
        if ((v114 & 1) == 0)
        {
          v113 = 0uLL;
          if (v181)
          {
            v182 = operator new();
            *(_QWORD *)(v182 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v182 + 24) = "GeoGL";
            *(_OWORD *)(v182 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v182 = &off_1E42B5668;
            *(_QWORD *)(v182 + 8) = "GeoGL";
            *(_OWORD *)(v182 + 72) = 0u;
            *(_OWORD *)(v182 + 88) = 0u;
            *(_OWORD *)(v182 + 104) = 0u;
            *(_OWORD *)(v182 + 120) = 0u;
            *(_OWORD *)(v182 + 136) = 0u;
            *(_OWORD *)(v182 + 152) = 0u;
            *(_OWORD *)(v182 + 168) = 0u;
            *(_OWORD *)(v182 + 184) = 0u;
            *(_OWORD *)(v182 + 200) = 0u;
            *(_OWORD *)(v182 + 216) = 0u;
            *(_OWORD *)(v182 + 232) = 0u;
            *(_QWORD *)(v182 + 248) = 0;
            *(_OWORD *)(v182 + 56) = 0u;
            v183 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v182 + 56), 0);
            if ((_DWORD)v183)
              geo::read_write_lock::logFailure(v183, (uint64_t)"initialization", v184);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v182 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v182 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v182;
            v113 = 0uLL;
          }
        }
        v111[15] = ggl::Allocator::instance(void)::alloc;
        v111[16] = 0;
        *((_OWORD *)v111 + 11) = v113;
        *((_OWORD *)v111 + 12) = v113;
        v111[26] = 0;
        v111[27] = -1;
        *((_OWORD *)v111 + 10) = v113;
        *((_OWORD *)v111 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v111 + 34) = 0;
        v111[3] = &off_1E42B7BE0;
        v111[29] = "BatchType/VData";
        v111[30] = &ggl::PatternedRibbon::defaultVboReflection;
        v111[28] = &unk_1E42B7C00;
        v115 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v115->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v115->__shared_owners_;
        v115->__shared_weak_owners_ = 0;
        v115[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v115->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v115[1].__shared_owners_ = 2;
        LODWORD(v115[1].__shared_weak_owners_) = 257;
        v115[2].__vftable = 0;
        v115[2].__shared_owners_ = 0;
        v115[2].__shared_weak_owners_ = 0;
        v115[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v107);
        v117 = (std::__shared_count)0;
        *(_OWORD *)&v115[3].__shared_owners_ = 0u;
        v115[4].std::__shared_count = 0u;
        v115[4].__shared_weak_owners_ = 0;
        if ((v118 & 1) == 0)
        {
          v117 = (std::__shared_count)0;
          if (v186)
          {
            v187 = operator new();
            *(_QWORD *)(v187 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v187 + 24) = "GeoGL";
            *(_OWORD *)(v187 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v187 = &off_1E42B5668;
            *(_QWORD *)(v187 + 8) = "GeoGL";
            *(_OWORD *)(v187 + 72) = 0u;
            *(_OWORD *)(v187 + 88) = 0u;
            *(_OWORD *)(v187 + 104) = 0u;
            *(_OWORD *)(v187 + 120) = 0u;
            *(_OWORD *)(v187 + 136) = 0u;
            *(_OWORD *)(v187 + 152) = 0u;
            *(_OWORD *)(v187 + 168) = 0u;
            *(_OWORD *)(v187 + 184) = 0u;
            *(_OWORD *)(v187 + 200) = 0u;
            *(_OWORD *)(v187 + 216) = 0u;
            *(_OWORD *)(v187 + 232) = 0u;
            *(_QWORD *)(v187 + 248) = 0;
            *(_OWORD *)(v187 + 56) = 0u;
            v188 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v187 + 56), 0);
            if ((_DWORD)v188)
              geo::read_write_lock::logFailure(v188, (uint64_t)"initialization", v189);
            v190 = malloc_create_zone(0, 0);
            *(_QWORD *)(v187 + 48) = v190;
            malloc_set_zone_name(v190, "GeoGL");
            *(_QWORD *)(v187 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v187;
            v117 = (std::__shared_count)0;
          }
        }
        v115[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v115[5].__shared_owners_ = 0;
        *((std::__shared_count *)v115 + 11) = v117;
        v115[8].std::__shared_count = v117;
        v115[8].__shared_weak_owners_ = 0;
        v115[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v115 + 10) = v117;
        v115[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v115[5].__shared_weak_owners_) = 0;
        LODWORD(v115[10].__vftable) = 0;
        v115[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v115[1].__shared_owners_ = 2;
        v115[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v115[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v119 = operator new();
        do
          v120 = __ldxr(v112);
        while (__stxr(v120 + 1, v112));
        do
          v121 = __ldxr(p_shared_owners);
        while (__stxr(v121 + 1, p_shared_owners));
        v123 = v455;
        if ((v122 & 1) == 0
        {
          if ((v191 & 1) == 0
          {
            ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PatternedRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE372C8 = 1;
          v123 = v455;
        }
        *(_QWORD *)(v119 + 32) = 0;
        *(_QWORD *)(v119 + 40) = 0;
        *(_DWORD *)(v119 + 48) = 0;
        *(_QWORD *)v119 = &off_1E42BBC08;
        *(_QWORD *)(v119 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v119 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v119 + 24) = 0;
        *(_QWORD *)(v119 + 56) = &ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v119 + 64) = 0;
        v124 = v119 + 64;
        *(_QWORD *)(v119 + 72) = 0;
        *(_QWORD *)(v119 + 80) = 0;
        if ((v125 & 1) == 0)
        {
          v124 = v119 + 64;
          if (v192)
          {
            v193 = operator new();
            *(_QWORD *)(v193 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v193 + 24) = "GeoGL";
            *(_OWORD *)(v193 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v193 = &off_1E42B5668;
            *(_QWORD *)(v193 + 8) = "GeoGL";
            *(_OWORD *)(v193 + 72) = 0u;
            *(_OWORD *)(v193 + 88) = 0u;
            *(_OWORD *)(v193 + 104) = 0u;
            *(_OWORD *)(v193 + 120) = 0u;
            *(_OWORD *)(v193 + 136) = 0u;
            *(_OWORD *)(v193 + 152) = 0u;
            *(_OWORD *)(v193 + 168) = 0u;
            *(_OWORD *)(v193 + 184) = 0u;
            *(_OWORD *)(v193 + 200) = 0u;
            *(_OWORD *)(v193 + 216) = 0u;
            *(_OWORD *)(v193 + 232) = 0u;
            *(_QWORD *)(v193 + 248) = 0;
            *(_OWORD *)(v193 + 56) = 0u;
            v194 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v193 + 56), 0);
            if ((_DWORD)v194)
              geo::read_write_lock::logFailure(v194, (uint64_t)"initialization", v195);
            v196 = malloc_create_zone(0, 0);
            *(_QWORD *)(v193 + 48) = v196;
            malloc_set_zone_name(v196, "GeoGL");
            *(_QWORD *)(v193 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v193;
            v124 = v119 + 64;
            v123 = v455;
          }
        }
        v126 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v119 + 120) = 0;
        *(_QWORD *)(v119 + 96) = 0;
        *(_QWORD *)(v119 + 104) = 0;
        *(_QWORD *)(v119 + 88) = v126;
        if ((v126 & 1) == 0)
        {
          v197 = v124;
          v124 = v197;
          if (v198)
          {
            v199 = operator new();
            *(_QWORD *)(v199 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v199 + 24) = "GeoGL";
            *(_OWORD *)(v199 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v199 = &off_1E42B5668;
            *(_QWORD *)(v199 + 8) = "GeoGL";
            *(_OWORD *)(v199 + 72) = 0u;
            *(_OWORD *)(v199 + 88) = 0u;
            *(_OWORD *)(v199 + 104) = 0u;
            *(_OWORD *)(v199 + 120) = 0u;
            *(_OWORD *)(v199 + 136) = 0u;
            *(_OWORD *)(v199 + 152) = 0u;
            *(_OWORD *)(v199 + 168) = 0u;
            *(_OWORD *)(v199 + 184) = 0u;
            *(_OWORD *)(v199 + 200) = 0u;
            *(_OWORD *)(v199 + 216) = 0u;
            *(_OWORD *)(v199 + 232) = 0u;
            *(_QWORD *)(v199 + 248) = 0;
            *(_OWORD *)(v199 + 56) = 0u;
            v200 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v199 + 56), 0);
            if ((_DWORD)v200)
              geo::read_write_lock::logFailure(v200, (uint64_t)"initialization", v201);
            v202 = malloc_create_zone(0, 0);
            *(_QWORD *)(v199 + 48) = v202;
            malloc_set_zone_name(v202, "GeoGL");
            *(_QWORD *)(v199 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v199;
            v124 = v197;
            v123 = v455;
          }
        }
        *(_QWORD *)(v119 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v119 + 136) = 0;
        *(_QWORD *)(v119 + 112) = v119 + 120;
        *(_QWORD *)v119 = &off_1E42BD878;
        *(_QWORD *)(v119 + 16) = &unk_1E42BD898;
        *(_QWORD *)&v462 = v444;
        *((_QWORD *)&v462 + 1) = v123;
        do
          v127 = __ldxr(v112);
        while (__stxr(v127 + 1, v112));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v124, (uint64_t *)&v462, v463, 1uLL);
        v128 = (std::__shared_weak_count *)*((_QWORD *)&v462 + 1);
        if (*((_QWORD *)&v462 + 1))
        {
          v129 = (unint64_t *)(*((_QWORD *)&v462 + 1) + 8);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        do
          v131 = __ldxr(p_shared_owners);
        while (__stxr(v131 + 1, p_shared_owners));
        v132 = *(std::__shared_weak_count **)(v119 + 104);
        *(_QWORD *)(v119 + 96) = v115 + 1;
        *(_QWORD *)(v119 + 104) = v115;
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        *(_QWORD *)v119 = &off_1E42B72A8;
        *(_QWORD *)(v119 + 16) = &unk_1E42B72C8;
        do
          v135 = __ldaxr(p_shared_owners);
        while (__stlxr(v135 - 1, p_shared_owners));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
        do
          v136 = __ldaxr(v112);
        while (__stlxr(v136 - 1, v112));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
        v138 = *(uint64_t **)(v411 + 40);
        v137 = *(_QWORD *)(v411 + 48);
        if ((unint64_t)v138 >= v137)
        {
          v140 = (uint64_t *)*v433;
          v141 = (char *)v138 - (_BYTE *)*v433;
          v142 = v141 >> 3;
          v143 = (v141 >> 3) + 1;
          if (v143 >> 61)
            abort();
          v144 = v137 - (_QWORD)v140;
          if (v144 >> 2 > v143)
            v143 = v144 >> 2;
          if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
            v145 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v145 = v143;
          if (v145)
          {
            v445 = (char *)v138 - (_BYTE *)*v433;
            if (v145 >> 61)
              goto LABEL_383;
            v146 = v141 >> 3;
            v147 = v145;
            v148 = operator new(8 * v145);
            v145 = v147;
            v142 = v146;
            v141 = v445;
          }
          else
          {
            v148 = 0;
          }
          v149 = (uint64_t *)&v148[8 * v142];
          *v149 = v119;
          v139 = v149 + 1;
          if (v138 == v140)
          {
            v140 = v138;
            v123 = v455;
          }
          else
          {
            v150 = (char *)(v138 - 1) - (char *)v140;
            v123 = v455;
            if (v150 < 0x58)
              goto LABEL_389;
            if ((unint64_t)((char *)v138 - &v148[v141]) < 0x20)
              goto LABEL_389;
            v151 = (v150 >> 3) + 1;
            v152 = &v148[8 * v142 - 16];
            v153 = v138 - 2;
            v154 = v151 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v155 = *(_OWORD *)v153;
              *(v152 - 1) = *((_OWORD *)v153 - 1);
              *v152 = v155;
              v152 -= 2;
              v153 -= 4;
              v154 -= 4;
            }
            while (v154);
            v149 -= v151 & 0x3FFFFFFFFFFFFFFCLL;
            v138 -= v151 & 0x3FFFFFFFFFFFFFFCLL;
            if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_389:
              do
              {
                v156 = *--v138;
                *--v149 = v156;
              }
              while (v138 != v140);
              v140 = (uint64_t *)*v433;
            }
          }
          *(_QWORD *)(v411 + 32) = v149;
          *(_QWORD *)(v411 + 40) = v139;
          *(_QWORD *)(v411 + 48) = &v148[8 * v145];
          if (v140)
            operator delete(v140);
        }
        else
        {
          *v138 = v119;
          v139 = v138 + 1;
        }
        *(_QWORD *)(v411 + 40) = v139;
        if (v104 < v105)
        {
          v157 = 0;
          v158 = v104;
          do
          {
            v159 = *(_QWORD *)&__pa[8 * v158];
            v160 = *(_QWORD *)(v159 + 32);
            v161 = v160 + v157;
            v162 = *(_QWORD *)(v159 + 40) + v157;
            *(_QWORD *)(v159 + 32) = v161;
            *(_QWORD *)(v159 + 40) = v162;
            v157 = v162 - v160;
            ++v158;
          }
          while (v105 != v158);
          v163 = 0;
          do
          {
            v164 = *(uint64_t **)&__pa[8 * v104];
            v165 = *v164;
            v166 = *v164 + v163;
            v167 = v164[1] + v163;
            *v164 = v166;
            v164[1] = v167;
            v168 = v164[2];
            v169 = v168 + v157;
            v170 = v164[3] + v157;
            v164[2] = v169;
            v164[3] = v170;
            v164[11] = v119;
            v171 = (_QWORD *)v164[7];
            v172 = (_QWORD *)v164[8];
            if (v171 != v172)
            {
              v173 = v164[4];
              do
              {
                v174 = (_QWORD *)*v171++;
                v175 = v174[2] - v174[1];
                v174[1] = v166;
                v166 += v175;
                v176 = v174[4] - v174[3];
                v174[2] = v166;
                v174[3] = v169;
                v169 += v176;
                v177 = v174[6] - v174[5];
                v174[4] = v169;
                v174[5] = v173;
                v173 += v177;
                v174[6] = v173;
              }
              while (v171 != v172);
            }
            v163 = v167 - v165;
            v157 = v170 - v168;
            ++v104;
          }
          while (v104 != v105);
        }
        do
          v178 = __ldaxr(p_shared_owners);
        while (__stlxr(v178 - 1, p_shared_owners));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
        a1 = v411;
        v109 = v436;
        do
          v179 = __ldaxr(v112);
        while (__stlxr(v179 - 1, v112));
        v110 = &off_19FFB1000;
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
        v108 = 0;
        v107 = 0;
        v104 = v105;
      }
      if (v105 < v109)
      {
        v180 = *(_QWORD **)&__pa[8 * v105];
        v108 = v180[1] + v108 - *v180;
        v107 = v180[3] + v107 + v180[5] - (v180[2] + v180[4]);
      }
      ++v105;
    }
    while (v105 <= v109);
    if (__pa)
      operator delete(__pa);
    v203 = a2;
    if (v457)
      operator delete(v457);
    *(_QWORD *)a1 = &off_1E428C820;
    *(_QWORD *)(a1 + 152) = *a4;
    v204 = a4[1];
    *(_QWORD *)(a1 + 160) = v204;
    if (v204)
    {
      v205 = (unint64_t *)(v204 + 8);
      do
        v206 = __ldxr(v205);
      while (__stxr(v206 + 1, v205));
    }
    *(_QWORD *)(a1 + 168) = *a5;
    v207 = a5[1];
    *(_QWORD *)(a1 + 176) = v207;
    if (v207)
    {
      v208 = (unint64_t *)(v207 + 8);
      do
        v209 = __ldxr(v208);
      while (__stxr(v209 + 1, v208));
    }
    *(_QWORD *)(a1 + 184) = 0;
    v210 = *(_QWORD *)(a1 + 8);
    v409 = *(_QWORD *)(a1 + 16);
    if (v210 == v409)
    {
LABEL_381:
      result = v411;
      *(_QWORD *)v411 = &off_1E428FBD0;
      *(_QWORD *)(v411 + 192) = 0;
      return result;
    }
    v211 = 1.0;
    while (1)
    {
      v410 = v210;
      v212 = *(_QWORD *)(*(_QWORD *)v210 + 888);
      v213 = *(_QWORD *)(*(_QWORD *)v210 + 896);
      v413 = v213;
      while (v212 != v213)
      {
        v214 = *(_QWORD **)v212;
        v215 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)v212 + 88) + 64);
        v216 = *(_QWORD *)(v215 + 8);
        v421 = v216 * **(_QWORD **)v212;
        v416 = v216 * *(_QWORD *)(*(_QWORD *)v212 + 8);
        v417 = v215;
        v414 = v212;
        if (v416 == v421)
        {
          v423 = 0;
        }
        else if (v203 && *(_BYTE *)(v215 + 17) != 2)
        {
          v423 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 56))(v203);
        }
        else
        {
          v423 = *(_QWORD *)(v215 + 72) + v421;
        }
        v217 = v214;
        v218 = v214[2];
        v220 = v217[4];
        v219 = v217[5];
        if (v219 == v220)
        {
          v219 = v217[3];
        }
        else
        {
          if (v220 < v218)
            v218 = v217[4];
          if (v217[3] > v219)
            v219 = v217[3];
        }
        v424 = v217;
        v419 = *(_QWORD *)(v217[11] + 96);
        v221 = *(_QWORD *)(v419 + 8);
        v420 = v221 * v218;
        v415 = v221 * v219;
        if (v221 * v219 == v221 * v218)
        {
          v422 = 0;
        }
        else if (v203 && *(_BYTE *)(v419 + 17) != 2)
        {
          v422 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v203 + 56))(v203, v419, v420);
        }
        else
        {
          v422 = *(_QWORD *)(v419 + 72) + v420;
        }
        v222 = v424[2];
        v223 = v424[4];
        v457 = 0;
        v458 = 0;
        v459 = 0;
        memset(&v456, 0, sizeof(v456));
        v224 = (uint64_t *)v424[7];
        v418 = v424 + 7;
        v225 = (uint64_t *)v424[8];
        if (v224 != v225)
        {
          v226 = v422 + 2 * v223 - 2 * v218;
          v227 = v422 + 2 * v222 - 2 * v218;
          v228 = v423;
          v425 = (uint64_t *)v424[8];
          while (1)
          {
            v230 = *v224;
            v231 = *(_QWORD *)(*v224 + 16);
            if (v231 != *(_QWORD *)(*v224 + 8))
              break;
            v229 = *(_QWORD *)(*v224 + 16);
LABEL_242:
            v228 += 20 * (v229 - v231);
            v227 += 2 * (*(_QWORD *)(v230 + 32) - *(_QWORD *)(v230 + 24));
            v226 += 2 * (*(_QWORD *)(v230 + 48) - *(_QWORD *)(v230 + 40));
            if (++v224 == v225)
              goto LABEL_349;
          }
          v430 = (_WORD *)v227;
          v461 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v230, (uint64_t)&v457, &v456, (uint64_t *)&v461);
          v432 = v228;
          v233 = v461;
          if (v461 >= 2)
          {
            v234 = v461 - 1;
            v235 = *v457;
            v434 = v457;
            if (v461 > 9)
            {
              v239 = v234 & 7;
              if ((v234 & 7) == 0)
                v239 = 8;
              v236 = v234 - v239;
              v232.u64[1] = (unint64_t)*v457;
              v240 = (int8x16_t)vdupq_lane_s32(v235, 0);
              v241 = (int32x4_t *)((char *)&v457[7] + 4);
              v242 = 0uLL;
              v243 = v236;
              v244 = 0uLL;
              do
              {
                i32 = (const float *)v241[-3].i32;
                v465 = vld3q_f32(i32);
                v247 = v241[1];
                v246 = v241[2];
                v248 = *v241;
                v241 += 6;
                v249.i64[0] = __PAIR64__(v248.u32[3], v248.u32[0]);
                v250 = (float32x4_t)vrev64q_s32(v247);
                v250.i32[0] = v248.i32[1];
                v249.i64[1] = __PAIR64__(v246.u32[1], v247.u32[2]);
                v250.i32[3] = v246.i32[2];
                v251 = vsubq_f32(v465.val[0], (float32x4_t)vextq_s8(v240, (int8x16_t)v465.val[0], 0xCuLL));
                v252 = vsubq_f32((float32x4_t)v249, (float32x4_t)vextq_s8((int8x16_t)v465.val[0], v249, 0xCuLL));
                v253 = vsubq_f32(v465.val[1], (float32x4_t)vextq_s8(v232, (int8x16_t)v465.val[1], 0xCuLL));
                v465.val[0] = vsubq_f32(v250, (float32x4_t)vextq_s8((int8x16_t)v465.val[1], (int8x16_t)v250, 0xCuLL));
                v242 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v251, v251), v253, v253)), v242);
                v244 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v252, v252), v465.val[0], v465.val[0])), v244);
                v232 = (int8x16_t)v250;
                v240 = v249;
                v243 -= 8;
              }
              while (v243);
              v238 = *(float32x2_t *)((char *)v246.i64 + 4);
              v254 = vaddq_f32(v244, v242);
              v237 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v254, v254));
            }
            else
            {
              v236 = 0;
              v237 = 0.0;
              v238 = (float32x2_t)*v457;
            }
            v255 = v236 + 1;
            v256 = (char *)&v457[1] + 12 * v236 + 4;
            do
            {
              v257 = *(float32x2_t *)v256;
              v256 += 12;
              v258 = vsub_f32(v257, v238);
              v237 = sqrtf(vaddv_f32(vmul_f32(v258, v258))) + v237;
              ++v255;
              v238 = v257;
            }
            while (v461 != v255);
            v259 = v237;
            v260 = v211 / v237;
            if (v259 <= 1.0e-10)
              v260 = 0.0;
            v438 = v260;
            v426 = (__int16 *)v226;
            v428 = v224;
            if (*(_BYTE *)(v230 + 96))
            {
              v261 = 0;
              v263 = *(float *)(v230 + 100);
              v262 = *(float *)(v230 + 104);
              v264 = 0.0;
              v266 = v432;
              v265 = v457;
              goto LABEL_258;
            }
            v312 = (float *)&v457[2];
            v264 = sqrtf((float)((float)(*(float *)&v457[1].i32[1] - *(float *)v235.i32)* (float)(*(float *)&v457[1].i32[1] - *(float *)v235.i32))+ (float)((float)(*(float *)v457[2].i32 - *(float *)&v235.i32[1])* (float)(*(float *)v457[2].i32 - *(float *)&v235.i32[1])));
            v313 = v461 - 1;
            do
            {
              v314 = *(v312 - 1);
              v315 = vabds_f32(*v312, *(float *)&v235.i32[1]);
              if (vabds_f32(v314, *(float *)v235.i32) >= 1.0e-10 || v315 >= 1.0e-10)
              {
                v317 = v314 - *(float *)v235.i32;
                v318 = *v312 - *(float *)&v235.i32[1];
                v319 = v211 / sqrtf((float)(v317 * v317) + (float)(v318 * v318));
                v263 = v319 * v317;
                v262 = v319 * v318;
                goto LABEL_300;
              }
              v312 += 3;
              --v313;
            }
            while (v313);
            v263 = 1.0;
            v262 = 0.0;
LABEL_300:
            v265 = v457;
            v320 = v457[1].i32[0];
            v460.__end_cap_.__value_ = 0;
            *(float *)v463 = -v262;
            *((float *)v463 + 1) = v263;
            *(float *)&v462 = -v262;
            *(_QWORD *)((char *)&v462 + 4) = __PAIR64__(LODWORD(v262), LODWORD(v263));
            *((float *)&v462 + 3) = -v263;
            *(_OWORD *)&v460.__begin_ = xmmword_19FFB2FB0;
            v321 = fmaxf(*(float *)v235.i32, 0.0);
            *(float *)v235.i32 = v321 >= v211 ? 65535.0 : v321 * 65535.0;
            v322 = (int)*(float *)v235.i32;
            v323 = fmaxf(*(float *)&v235.i32[1], 0.0);
            v324 = v323 >= v211 ? 65535.0 : v323 * 65535.0;
            v325 = (int)v324;
            *(_WORD *)v432 = v322;
            *(_WORD *)(v432 + 2) = (int)v324;
            v326.i64[0] = v462;
            v326.i64[1] = 0xBF80000000000000;
            v327.i64[0] = 0xBF000000BF000000;
            v327.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v432 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v327, (float32x4_t)xmmword_19FFB2FA0, v326)));
            *(_DWORD *)(v432 + 12) = v320;
            *(_DWORD *)(v432 + 16) = 0;
            *(_WORD *)(v432 + 20) = v322;
            *(_WORD *)(v432 + 22) = v325;
            v326.i64[0] = *((_QWORD *)&v462 + 1);
            v326.i64[1] = (uint64_t)v460.__end_;
            v327.i64[0] = 0xBF000000BF000000;
            v327.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v432 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v327, (float32x4_t)xmmword_19FFB2FA0, v326)));
            *(_DWORD *)(v432 + 32) = v320;
            *(_DWORD *)(v432 + 36) = 0;
            v266 = v432 + 40;
            v261 = 1;
            if (v234 > 1)
            {
LABEL_258:
              v267 = (uint64_t)&v265[2] + 12 * v261;
              v268 = v262;
              v269 = v263;
              do
              {
                v279 = (char *)v265 + 12 * v261;
                v280 = *(float *)v279;
                v281 = *((float *)v279 + 1);
                if (++v261 < v233)
                {
                  v282 = (float *)v267;
                  v283 = v261;
                  do
                  {
                    v284 = *(v282 - 1);
                    v285 = vabds_f32(*v282, v281);
                    if (vabds_f32(v284, v280) >= 1.0e-10 || v285 >= 1.0e-10)
                    {
                      v287 = v284 - v280;
                      v288 = *v282 - v281;
                      v289 = v211 / sqrtf((float)(v287 * v287) + (float)(v288 * v288));
                      v269 = v289 * v287;
                      v268 = v289 * v288;
                      goto LABEL_276;
                    }
                    ++v283;
                    v282 += 3;
                  }
                  while (v283 < v233);
                  v268 = v262;
                  v269 = v263;
                }
LABEL_276:
                __pb = *(float *)v279;
                v290 = v269 + v263;
                v291 = v268 + v262;
                v292 = (float)(v290 * v290) + (float)(v291 * v291);
                v293 = v262;
                v294 = v263;
                if (v292 > 0.0)
                {
                  v295 = v211 / sqrtf(v292);
                  v263 = -(float)(v291 * v295);
                  v293 = v295 * v290;
                }
                v442 = *((float *)v279 + 4);
                v296 = *((_DWORD *)v279 + 2);
                v440 = *((float *)v279 + 3);
                *(float *)&v460.__end_cap_.__value_ = v264;
                *((float *)&v460.__end_cap_.__value_ + 1) = v264 * v438;
                *(_OWORD *)&v460.__begin_ = xmmword_19FFB2FB0;
                v446 = v268;
                v448 = v269;
                v297 = atan2f(v268, v269);
                v298 = v297 - atan2f(v262, v294);
                v299 = v298;
                if (v298 <= *((double *)v110 + 322))
                {
                  v211 = 1.0;
                  v300 = __pb;
                  if (v299 < -3.14159265)
                    v298 = v299 + 6.28318531;
                }
                else
                {
                  v298 = v299 + -6.28318531;
                  v211 = 1.0;
                  v300 = __pb;
                }
                v301 = (unint64_t)fmaxf(ceilf(fabsf(v298) * 1.2732), v211);
                if (v301 <= 1)
                {
                  v269 = v448;
                  v268 = v446;
                  v270 = sqrtf(fmaxf(-(float)((float)((float)((float)(v263 * v448) + (float)(v293 * v446))* (float)((float)(v263 * v448) + (float)(v293 * v446)))+ -1.0), 0.1));
                  v463[0] = __PAIR64__(LODWORD(v293), LODWORD(v263));
                  *(float *)&v462 = v263 / v270;
                  *((float *)&v462 + 1) = v293 / v270;
                  *((float *)&v462 + 2) = -(float)(v263 / v270);
                  *((float *)&v462 + 3) = -(float)(v293 / v270);
                  v271 = fmaxf(v300, 0.0);
                  if (v271 >= v211)
                    v272 = 65535.0;
                  else
                    v272 = v271 * 65535.0;
                  v273 = (int)v272;
                  v274 = fmaxf(v281, 0.0);
                  if (v274 >= v211)
                    v275 = 65535.0;
                  else
                    v275 = v274 * 65535.0;
                  v276 = (int)v275;
                  *(_WORD *)v266 = v273;
                  *(_WORD *)(v266 + 2) = (int)v275;
                  v277.i64[0] = v462;
                  v277.i64[1] = (uint64_t)v460.__begin_;
                  v278.i64[0] = 0xBF000000BF000000;
                  v278.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v266 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v278, (float32x4_t)xmmword_19FFB2FA0, v277)));
                  *(_DWORD *)(v266 + 12) = v296;
                  *(float *)(v266 + 16) = v264;
                  *(_WORD *)(v266 + 20) = v273;
                  *(_WORD *)(v266 + 22) = v276;
                  v277.i64[0] = *((_QWORD *)&v462 + 1);
                  v277.i64[1] = (uint64_t)v460.__end_;
                  v278.i64[0] = 0xBF000000BF000000;
                  v278.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v266 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v278, (float32x4_t)xmmword_19FFB2FA0, v277)));
                  *(_DWORD *)(v266 + 32) = v296;
                  *(float *)(v266 + 36) = v264;
                  v266 += 40;
                }
                else
                {
                  v302 = 0;
                  v303 = fmaxf(v300, 0.0);
                  if (v303 >= v211)
                    v304 = 65535.0;
                  else
                    v304 = v303 * 65535.0;
                  v305 = (int)v304;
                  v306 = fmaxf(v281, 0.0);
                  if (v306 >= v211)
                    v307 = 65535.0;
                  else
                    v307 = v306 * 65535.0;
                  v308 = (int)v307;
                  do
                  {
                    v309 = __sincosf_stret((float)((float)((float)(int)v302 * (float)(1.0 / (float)((float)v301 + -1.0))) + -0.5)* v298);
                    *(float *)v463 = -(float)((float)(v309.__sinval * v293) - (float)(v309.__cosval * v263));
                    *((float *)v463 + 1) = (float)(v309.__sinval * v263) + (float)(v309.__cosval * v293);
                    *(_QWORD *)&v462 = v463[0];
                    *((float *)&v462 + 2) = -(float)((float)(v309.__cosval * v263) - (float)(v309.__sinval * v293));
                    *((float *)&v462 + 3) = -*((float *)v463 + 1);
                    *(_WORD *)v266 = v305;
                    *(_WORD *)(v266 + 2) = v308;
                    v310.i64[0] = v462;
                    v310.i64[1] = (uint64_t)v460.__begin_;
                    v311.i64[0] = 0xBF000000BF000000;
                    v311.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v266 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v311, (float32x4_t)xmmword_19FFB2FA0, v310)));
                    *(_DWORD *)(v266 + 12) = v296;
                    *(float *)(v266 + 16) = v264;
                    *(_WORD *)(v266 + 20) = v305;
                    *(_WORD *)(v266 + 22) = v308;
                    v310.i64[0] = *((_QWORD *)&v462 + 1);
                    v310.i64[1] = (uint64_t)v460.__end_;
                    v311.i64[0] = 0xBF000000BF000000;
                    v311.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v266 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v311, (float32x4_t)xmmword_19FFB2FA0, v310)));
                    *(_DWORD *)(v266 + 32) = v296;
                    *(float *)(v266 + 36) = v264;
                    v266 += 40;
                    ++v302;
                  }
                  while (v301 != v302);
                  v110 = &off_19FFB1000;
                  v211 = 1.0;
                  v265 = v434;
                  v269 = v448;
                  v268 = v446;
                  v300 = __pb;
                }
                v264 = sqrtf((float)((float)(v440 - v300) * (float)(v440 - v300))+ (float)((float)(v442 - v281) * (float)(v442 - v281)))+ v264;
                v267 += 12;
                v262 = v268;
                v263 = v269;
                v234 = v233 - 1;
              }
              while (v261 != v233 - 1);
            }
            else
            {
              v268 = v262;
              v269 = v263;
            }
            v328 = v265;
            v329 = (char *)v265 + 12 * v234;
            v330 = (char *)v328 + 12 * v233;
            v332 = *((float *)v330 - 6);
            v331 = v330 - 24;
            v333 = v332;
            v334 = *(float *)v329;
            if (vabds_f32(*(float *)v329, v332) >= 1.0e-10)
            {
              v336 = *((float *)v329 + 1);
              v337 = v336 - *((float *)v331 + 1);
LABEL_312:
              v338 = v334 - v333;
              v339 = v211 / sqrtf((float)(v338 * v338) + (float)(v337 * v337));
              v269 = v339 * v338;
              v268 = v339 * v337;
            }
            else
            {
              v335 = *((float *)v331 + 1);
              v336 = *((float *)v329 + 1);
              if (vabds_f32(v336, v335) >= 1.0e-10)
              {
                v337 = v336 - v335;
                goto LABEL_312;
              }
            }
            if (*(_BYTE *)(v230 + 97))
            {
              v449 = v336;
              __pc = *(float *)v329;
              v340 = *(float *)(v230 + 108);
              v341 = *(float *)(v230 + 112);
              v342 = v269 + v340;
              v343 = v268 + v341;
              v344 = (float)(v342 * v342) + (float)(v343 * v343);
              v345 = v269;
              v346 = v269;
              v347 = v268;
              v348 = v268;
              if (v344 > 0.0)
              {
                v349 = v211 / sqrtf(v344);
                v346 = -(float)(v343 * v349);
                v348 = v349 * v342;
              }
              v350 = atan2f(*(float *)(v230 + 112), *(float *)(v230 + 108));
              v351 = v350 - atan2f(v347, v345);
              v352 = v351;
              if (v351 <= *((double *)v110 + 322))
              {
                v211 = 1.0;
                v334 = __pc;
                v336 = v449;
                if (v352 < -3.14159265)
                  v351 = v352 + 6.28318531;
              }
              else
              {
                v351 = v352 + -6.28318531;
                v211 = 1.0;
                v334 = __pc;
                v336 = v449;
              }
              v353 = (unint64_t)fmaxf(ceilf(fabsf(v351) * 1.2732), v211);
              v354 = v346;
              v269 = v348;
              if (v353 <= 1)
              {
                v355 = sqrtf(fmaxf(-(float)((float)((float)((float)(v346 * v340) + (float)(v348 * v341))* (float)((float)(v346 * v340) + (float)(v348 * v341)))+ -1.0), 0.1));
                v354 = v346 / v355;
                v269 = v348 / v355;
              }
              *(_QWORD *)&v462 = __PAIR64__(LODWORD(v269), LODWORD(v354));
              v268 = -v354;
            }
            else
            {
              v346 = -v268;
              *(float *)&v462 = -v268;
              *((float *)&v462 + 1) = v269;
              v348 = v269;
            }
            *((float *)&v462 + 2) = v268;
            *((float *)&v462 + 3) = -v269;
            v356 = *((_DWORD *)v329 + 2);
            v463[0] = __PAIR64__(LODWORD(v348), LODWORD(v346));
            *(float *)&v460.__end_cap_.__value_ = v264;
            *((float *)&v460.__end_cap_.__value_ + 1) = v264 * v438;
            v357 = fmaxf(v334, 0.0);
            v358 = v357 >= v211 ? 65535.0 : v357 * 65535.0;
            v359 = (int)v358;
            v360 = fmaxf(v336, 0.0);
            v361 = v360 >= v211 ? 65535.0 : v360 * 65535.0;
            v362 = (int)v361;
            *(_WORD *)v266 = v359;
            *(_WORD *)(v266 + 2) = (int)v361;
            v363.i64[0] = v462;
            v363.i64[1] = (uint64_t)v460.__begin_;
            v364.i64[0] = 0xBF000000BF000000;
            v364.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v266 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v364, (float32x4_t)xmmword_19FFB2FA0, v363)));
            *(_DWORD *)(v266 + 12) = v356;
            *(float *)(v266 + 16) = v264;
            *(_WORD *)(v266 + 20) = v359;
            *(_WORD *)(v266 + 22) = v362;
            v363.i64[0] = *((_QWORD *)&v462 + 1);
            v363.i64[1] = (uint64_t)v460.__end_;
            v364.i64[0] = 0xBF000000BF000000;
            v364.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v266 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v364, (float32x4_t)xmmword_19FFB2FA0, v363)));
            *(_DWORD *)(v266 + 32) = v356;
            *(float *)(v266 + 36) = v264;
            v365 = *(_QWORD *)(v230 + 8);
            v366 = *(_QWORD *)(v230 + 16) - v365;
            v367.i64[0] = 0x1000100010001;
            v367.i64[1] = 0x1000100010001;
            v226 = (uint64_t)v426;
            v224 = v428;
            v225 = v425;
            if (v366 >= 4)
            {
              v368 = v366 >> 1;
              v369 = *(_QWORD *)(v230 + 8);
              v370 = (v366 >> 1) - 1;
              if (v366 >= 6)
              {
                v373 = 0;
                v374 = v370 & 0xFFFFFFFFFFFFFFFELL;
                v375 = v430 + 6;
                do
                {
                  v376 = v365 + 2 * v373;
                  *(v375 - 6) = v376;
                  *v375 = v376 + 2;
                  *(v375 - 5) = v376 + 1;
                  v375[1] = v376 + 3;
                  *(v375 - 4) = v376 + 2;
                  v375[2] = v376 + 4;
                  *(v375 - 3) = v376 + 1;
                  v375[3] = v376 + 3;
                  *(v375 - 2) = v376 + 3;
                  v375[4] = v376 + 5;
                  v373 += 2;
                  *(v375 - 1) = v376 + 2;
                  v375[5] = v376 + 4;
                  v375 += 12;
                }
                while (v374 != v373);
                if (v370 != v374)
                {
                  v371 = v370 | 1;
                  LODWORD(v369) = 2 * (v370 & 0xFFFFFFFE) + v365;
                  v372 = &v430[6 * (v370 & 0xFFFFFFFFFFFFFFFELL)];
                  goto LABEL_337;
                }
              }
              else
              {
                v371 = 1;
                v372 = v430;
LABEL_337:
                v377 = v368 - v371;
                do
                {
                  *v372 = v369;
                  v378 = v369 + 1;
                  v372[1] = v369 + 1;
                  v379 = v369 + 3;
                  LODWORD(v369) = v369 + 2;
                  v372[2] = v369;
                  v372[3] = v378;
                  v372[4] = v379;
                  v372[5] = v369;
                  v372 += 6;
                  --v377;
                }
                while (v377);
              }
              if (*(_QWORD *)(v230 + 48) != *(_QWORD *)(v230 + 40))
              {
                if (v366 >= 0x12)
                {
                  v382 = v370 & 0xFFFFFFFFFFFFFFF8;
                  v383 = (int64x2_t)xmmword_19FFB3420;
                  v384 = (int64x2_t)xmmword_19FFB3430;
                  v385 = (int64x2_t)xmmword_19FFB3440;
                  v386 = (int64x2_t)xmmword_19FFB2DB0;
                  v387 = v426;
                  v388 = v370 & 0xFFFFFFFFFFFFFFF8;
                  v389 = vdupq_n_s64(v365);
                  do
                  {
                    v464.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v389, vaddq_s64(v386, v386)), (int32x4_t)vaddq_s64(v389, vaddq_s64(v385, v385))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v389, vaddq_s64(v384, v384)), (int32x4_t)vaddq_s64(v389, vaddq_s64(v383, v383))));
                    v464.val[0] = vaddq_s16(v464.val[1], v367);
                    vst2q_s16(v387, v464);
                    v387 += 16;
                    v464.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v384 = vaddq_s64(v384, (int64x2_t)v464.val[0]);
                    v385 = vaddq_s64(v385, (int64x2_t)v464.val[0]);
                    v386 = vaddq_s64(v386, (int64x2_t)v464.val[0]);
                    v383 = vaddq_s64(v383, (int64x2_t)v464.val[0]);
                    v388 -= 8;
                  }
                  while (v388);
                  if (v370 != v382)
                  {
                    v380 = v382 | 1;
                    v381 = &v426[2 * (v370 & 0xFFFFFFFFFFFFFFF8)];
                    goto LABEL_346;
                  }
                }
                else
                {
                  v380 = 1;
                  v381 = v426;
LABEL_346:
                  v390 = v368 - v380;
                  v391 = v365 + 2 * v380;
                  do
                  {
                    *v381 = v391 - 2;
                    v381[1] = v391;
                    v391 += 2;
                    v381 += 2;
                    --v390;
                  }
                  while (v390);
                }
              }
            }
          }
          v230 = *v224;
          v231 = *(_QWORD *)(*v224 + 8);
          v229 = *(_QWORD *)(*v224 + 16);
          v227 = (uint64_t)v430;
          v228 = v432;
          goto LABEL_242;
        }
LABEL_349:
        {
          v404 = operator new();
          *(_QWORD *)(v404 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v404 + 24) = "VectorKitLabels";
          *(_OWORD *)(v404 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v404 = &off_1E42B5668;
          *(_QWORD *)(v404 + 8) = "VectorKitLabels";
          *(_OWORD *)(v404 + 72) = 0u;
          *(_OWORD *)(v404 + 88) = 0u;
          *(_OWORD *)(v404 + 104) = 0u;
          *(_OWORD *)(v404 + 120) = 0u;
          *(_OWORD *)(v404 + 136) = 0u;
          *(_OWORD *)(v404 + 152) = 0u;
          *(_OWORD *)(v404 + 168) = 0u;
          *(_OWORD *)(v404 + 184) = 0u;
          *(_OWORD *)(v404 + 200) = 0u;
          *(_OWORD *)(v404 + 216) = 0u;
          *(_OWORD *)(v404 + 232) = 0u;
          *(_QWORD *)(v404 + 248) = 0;
          *(_OWORD *)(v404 + 56) = 0u;
          v405 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v404 + 56), 0);
          if ((_DWORD)v405)
            geo::read_write_lock::logFailure(v405, (uint64_t)"initialization", v406);
          v407 = malloc_create_zone(0, 0);
          *(_QWORD *)(v404 + 48) = v407;
          malloc_set_zone_name(v407, "VectorKitLabels");
          *(_QWORD *)(v404 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v404;
        }
        v393 = v424 + 7;
        v394 = (_QWORD *)*v418;
        if (*v418)
        {
          v395 = (_QWORD *)v424[8];
          v396 = (_QWORD *)*v418;
          if (v395 != v394)
          {
            do
            {
              v399 = (void (***)(_QWORD, _QWORD *))*--v395;
              v398 = v399;
              *v395 = 0;
              if (v399)
              {
                (**v398)(v398, v396);
                {
                  v401 = operator new();
                  *(_QWORD *)(v401 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v401 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v401 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v401 = &off_1E42B5668;
                  *(_QWORD *)(v401 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v401 + 72) = 0u;
                  *(_OWORD *)(v401 + 88) = 0u;
                  *(_OWORD *)(v401 + 104) = 0u;
                  *(_OWORD *)(v401 + 120) = 0u;
                  *(_OWORD *)(v401 + 136) = 0u;
                  *(_OWORD *)(v401 + 152) = 0u;
                  *(_OWORD *)(v401 + 168) = 0u;
                  *(_OWORD *)(v401 + 184) = 0u;
                  *(_OWORD *)(v401 + 200) = 0u;
                  *(_OWORD *)(v401 + 216) = 0u;
                  *(_OWORD *)(v401 + 232) = 0u;
                  *(_QWORD *)(v401 + 248) = 0;
                  *(_OWORD *)(v401 + 56) = 0u;
                  v402 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v401 + 56), 0);
                  if ((_DWORD)v402)
                    geo::read_write_lock::logFailure(v402, (uint64_t)"initialization", v403);
                  v397 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v401 + 48) = v397;
                  malloc_set_zone_name(v397, "VectorKitLabels");
                  *(_QWORD *)(v401 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v401;
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v398, 120);
              }
            }
            while (v395 != v394);
            v393 = v424 + 7;
            v396 = (_QWORD *)*v418;
          }
          v424[8] = v394;
          (*(void (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)v424[10] + 40))(v424[10], v396, v424[9] - (_QWORD)v396);
          *v393 = 0;
          v393[1] = 0;
          v393[2] = 0;
        }
        *v393 = 0;
        v393[1] = 0;
        v393[2] = 0;
        v203 = a2;
        if (v456.__begin_)
          operator delete(v456.__begin_);
        if (v457)
          operator delete(v457);
        if (v422 && v415 != v420 && a2 && *(_BYTE *)(v419 + 17) != 2)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v422, v419, v420, v415, 1, 1);
        if (v423 && v416 != v421 && a2 && *(_BYTE *)(v417 + 17) != 2)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v423, v417, v421, v416, 1, 1);
        v212 = v414 + 8;
        v213 = v413;
      }
      v210 = v410 + 8;
      if (v410 + 8 == v409)
        goto LABEL_381;
    }
  }
  v427 = (const QuadTile *)(a1 + 120);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = (_QWORD *)*v17;
    v22[1] = v411;
    v23 = (_QWORD **)v22[111];
    v24 = (_QWORD **)v22[112];
    v437 = v17;
    v439 = v24;
    while (v23 != v24)
    {
      v441 = (unint64_t)v21;
      v443 = v23;
      v447 = v20;
      __p = v19;
      v25 = *v23;
      v25[1] = **v23;
      v25[3] = v25[2];
      v25[5] = v25[4];
      v462 = 0uLL;
      v463[0] = 0;
      memset(&v460, 0, sizeof(v460));
      v27 = (uint64_t *)v25[7];
      v26 = (uint64_t *)v25[8];
      if (v27 != v26)
      {
        v454 = (uint64_t *)v25[8];
        do
        {
          v32 = *v27;
          v456.__begin_ = (std::vector<unsigned int>::pointer)1;
          md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v32, (uint64_t)&v462, &v460, (uint64_t *)&v456);
          begin = v456.__begin_;
          if (v456.__begin_ >= (std::vector<unsigned int>::pointer)2)
          {
            v34 = v462;
            if (*(_BYTE *)(v32 + 96))
            {
              v35 = 0;
              v36 = 0;
              v37 = *(float *)(v32 + 100);
              v38 = *(float *)(v32 + 104);
            }
            else
            {
              v39 = (float *)(v462 + 12);
              v40 = *(float *)v462;
              v41 = (char *)v456.__begin_ - 1;
              while (1)
              {
                if (vabds_f32(*v39, v40) >= 1.0e-10)
                {
                  v44 = v39[1] - *(float *)(v462 + 4);
                  goto LABEL_32;
                }
                v42 = *(float *)(v462 + 4);
                v43 = v39[1];
                if (vabds_f32(v43, v42) >= 1.0e-10)
                  break;
                v39 += 3;
                if (!--v41)
                {
                  v38 = 0.0;
                  v37 = 1.0;
                  goto LABEL_33;
                }
              }
              v44 = v43 - v42;
LABEL_32:
              v45 = *v39 - v40;
              v46 = 1.0 / sqrtf((float)(v45 * v45) + (float)(v44 * v44));
              v37 = v46 * v45;
              v38 = v46 * v44;
LABEL_33:
              v35 = 2;
              v36 = 1;
            }
            v47 = (char *)v456.__begin_ - 1;
            if ((std::vector<unsigned int>::pointer)v36 < (std::vector<unsigned int>::pointer)((char *)v456.__begin_ - 1))
            {
              v48 = v462 + 12 * v36 + 16;
              do
              {
                v53 = v37;
                v54 = v38;
                v55 = v36++;
                if (v36 < (unint64_t)begin)
                {
                  v56 = (float *)(v34 + 12 * v55);
                  v57 = *v56;
                  v58 = v56[1];
                  v59 = (float *)v48;
                  v60 = v36;
                  while (1)
                  {
                    v61 = *(v59 - 1);
                    v62 = vabds_f32(*v59, v58);
                    v63 = vabds_f32(v61, v57) < 1.0e-10 && v62 < 1.0e-10;
                    if (!v63)
                      break;
                    ++v60;
                    v59 += 3;
                    if (v60 >= (unint64_t)begin)
                      goto LABEL_49;
                  }
                  v64 = v61 - v57;
                  v65 = *v59 - v58;
                  v66 = 1.0 / sqrtf((float)(v64 * v64) + (float)(v65 * v65));
                  v37 = v66 * v64;
                  v38 = v66 * v65;
                }
LABEL_49:
                v67 = atan2f(v38, v37);
                v50 = v67 - atan2f(v54, v53);
                v68 = v50;
                if (v50 > 3.14159265)
                {
                  v49 = v68 + -6.28318531;
                }
                else
                {
                  if (v68 >= -3.14159265)
                    goto LABEL_38;
                  v49 = v68 + 6.28318531;
                }
                v50 = v49;
LABEL_38:
                v51 = fmaxf(ceilf(fabsf(v50) * 1.2732), 1.0);
                v52 = 2;
                if ((unint64_t)v51 >= 2)
                  v52 = 2 * (unint64_t)v51;
                v35 += v52;
                v48 += 12;
              }
              while ((char *)v36 != v47);
            }
            v69 = v35 + 2;
            if ((unint64_t)(v35 + 2) < 0x10000)
            {
              v28 = 3 * v69 + *(_QWORD *)(v32 + 24);
              v29 = *(_QWORD *)(v32 + 8) + v69;
              v30 = v28 - 6;
            }
            else
            {
              v29 = *(_QWORD *)(v32 + 8);
              v30 = *(_QWORD *)(v32 + 24);
            }
            v26 = v454;
            *(_QWORD *)(v32 + 16) = v29;
            *(_QWORD *)(v32 + 32) = v30;
            *(_QWORD *)(v32 + 48) = *(_QWORD *)(v32 + 40);
          }
          v31 = (_QWORD *)*v27++;
          v25[1] = v31[2] + v25[1] - v31[1];
          v25[3] = v31[4] + v25[3] - v31[3];
          v25[5] = v31[6] + v25[5] - v31[5];
        }
        while (v27 != v26);
        if (v460.__begin_)
          operator delete(v460.__begin_);
      }
      if ((_QWORD)v462)
        operator delete((void *)v462);
      v70 = v443;
      v71 = *v443;
      v21 = (char *)v441;
      if ((unint64_t)v447 < v441)
      {
        *(_QWORD *)v447 = v71;
        v20 = v447 + 8;
        v19 = __p;
        goto LABEL_15;
      }
      v72 = (v447 - __p) >> 3;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61)
        abort();
      if ((uint64_t)(v441 - (_QWORD)__p) >> 2 > v73)
        v73 = (uint64_t)(v441 - (_QWORD)__p) >> 2;
      if (v441 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
      {
        if (v74 >> 61)
LABEL_383:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v75 = operator new(8 * v74);
      }
      else
      {
        v75 = 0;
      }
      v19 = &v75[8 * v72];
      *(_QWORD *)v19 = v71;
      v20 = v19 + 8;
      if (v447 != __p)
      {
        v76 = v447 - 8 - __p;
        if (v76 < 0x168)
        {
          v77 = v447;
          goto LABEL_72;
        }
        if (&v75[v447 - __p - 8 - (v76 & 0xFFFFFFFFFFFFFFF8)] > &v75[v447 - __p - 8])
        {
          v77 = v447;
          do
          {
LABEL_72:
            v78 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *((_QWORD *)v19 - 1) = v78;
            v19 -= 8;
          }
          while (v77 != __p);
          goto LABEL_73;
        }
        if (&v447[-(v76 & 0xFFFFFFFFFFFFFFF8) - 8] > v447 - 8)
        {
          v77 = v447;
          goto LABEL_72;
        }
        if ((unint64_t)(__p - v75) < 0x20)
        {
          v77 = v447;
          goto LABEL_72;
        }
        v79 = (v76 >> 3) + 1;
        v77 = &v447[-8 * (v79 & 0x3FFFFFFFFFFFFFFCLL)];
        v80 = &v75[8 * v72 - 16];
        v81 = v447 - 16;
        v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *(_OWORD *)v81;
          *(v80 - 1) = *((_OWORD *)v81 - 1);
          *v80 = v83;
          v80 -= 2;
          v81 -= 32;
          v82 -= 4;
        }
        while (v82);
        v19 -= 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_72;
      }
LABEL_73:
      v21 = &v75[8 * v74];
      if (__p)
        operator delete(__p);
      v70 = v443;
LABEL_15:
      v23 = (_QWORD **)(v70 + 1);
      v24 = v439;
    }
    v17 = v437 + 1;
  }
  while (v437 + 1 != v435);
  __pa = v19;
  a1 = v411;
  v18 = v427;
  if (!*(_BYTE *)(v411 + 104))
    goto LABEL_110;
LABEL_89:
  v84 = __pa;
  v85 = (gdc::GlobeTileGrid *)operator new();
  v86 = v85;
  if (*(_BYTE *)(a1 + 144))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v85, v18);
    v87 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v86;
    if (v87)
    {
      v88 = *(_QWORD *)(v87 + 2584);
      if (v88)
        MEMORY[0x1A1AF4DE8](v88, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v87, 0x1020C4007FF0C4BLL);
      v86 = *(gdc::GlobeTileGrid **)(a1 + 112);
    }
    *((_QWORD *)v86 + 323) = operator new[]();
    if (__pa != v20)
    {
      do
      {
        v89 = *(uint64_t **)(*(_QWORD *)v84 + 56);
        v90 = *(uint64_t **)(*(_QWORD *)v84 + 64);
        while (v89 != v90)
        {
          v91 = *v89;
          if (!*(_QWORD *)(*v89 + 80))
          {
            v92 = *(_QWORD *)(v91 + 88);
            if (v92)
            {
              v93 = *(_QWORD *)(v91 + 72);
              v94 = *(_QWORD *)(a1 + 112);
              v95 = *(_QWORD *)(v94 + 2584);
              v96 = (float *)(v93 + 4);
              v97 = 1;
              do
              {
                v98 = *(float *)(v94 + 2592) * v96[1];
                v99 = vcvts_n_u32_f32(*(v96 - 1), 2uLL);
                if (v99 >= 3)
                  v99 = 3;
                v100 = vcvts_n_u32_f32(*v96, 2uLL);
                if (v100 >= 3)
                  v100 = 3;
                v101 = (float *)(v95 + 8 * (v99 | (4 * v100)));
                v102 = fminf(v98, *v101);
                v103 = fmaxf(v101[1], v98);
                *v101 = v102;
                v101[1] = v103;
                v96 += 3;
                v63 = v92 > v97++;
              }
              while (v63);
            }
          }
          ++v89;
        }
        v84 += 8;
      }
      while (v84 != v20);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*(gdc::GlobeTileGrid **)(a1 + 112));
    goto LABEL_110;
  }
  result = std::__throw_bad_optional_access[abi:nn180100]();
  __break(1u);
  return result;
}

void sub_19FCEB9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;

  MEMORY[0x1A1AF4E00](v53, 0x1020C4007FF0C4BLL);
  if (__p)
    operator delete(__p);
  v56 = a14[14];
  a14[14] = 0;
  if (v56)
  {
    v57 = *(_QWORD *)(v56 + 2584);
    if (v57)
      MEMORY[0x1A1AF4DE8](v57, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v56, 0x1020C4007FF0C4BLL);
  }
  v58 = *a38;
  if (*a38)
  {
    a14[5] = v58;
    operator delete(v58);
    v59 = *a32;
    if (!*a32)
    {
LABEL_9:
      v60 = *(void **)(v54 - 248);
      if (!v60)
        goto LABEL_10;
      goto LABEL_13;
    }
  }
  else
  {
    v59 = *a32;
    if (!*a32)
      goto LABEL_9;
  }
  a14[2] = v59;
  operator delete(v59);
  v60 = *(void **)(v54 - 248);
  if (!v60)
LABEL_10:
    _Unwind_Resume(a1);
LABEL_13:
  operator delete(v60);
  _Unwind_Resume(a1);
}

void md::PolygonRound::smoothTwoSegments(float **a1, float *a2, float *a3)
{
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  __float2 v44;
  float v45;
  float v46;
  unint64_t v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  float *v55;
  float *v56;
  unint64_t v57;
  float *v58;
  uint64_t v59;
  _OWORD *v60;
  float *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a2;
  if (*a2 != 0.0)
  {
    v7 = a3[2];
    v8 = a3[3];
    v9 = v7 - *a3;
    v10 = v8 - a3[1];
    v11 = a3[4] - v7;
    v12 = a3[5] - v8;
    v13 = atan2f(v12, v11);
    v67 = v9;
    v14 = v13 - atan2f(v10, v9);
    if (v14 <= 3.1416)
    {
      if (v14 >= -3.1416)
      {
LABEL_7:
        v17 = fabsf(v14);
        if (v17 < a2[2] || v17 > a2[3])
          goto LABEL_13;
        v18 = v5 / tanf((float)(v17 * -0.5) + 1.5708);
        v19 = sqrtf((float)(v67 * v67) + (float)(v10 * v10));
        v20 = a2[4];
        v21 = v20 * sqrtf((float)(v11 * v11) + (float)(v12 * v12));
        if (v18 > (float)(v20 * v19) || v18 > v21)
          goto LABEL_13;
        v25 = vcvtas_u32_f32(v17 / a2[1]);
        if (v25 <= 1)
          v26 = 1;
        else
          v26 = v25;
        v27 = 1.0 / v19;
        v28 = v27 * v67;
        v65 = v27 * v67;
        v29 = v27 * v10;
        v66 = v27 * v10;
        v30 = -(float)(v27 * v10);
        v31 = -(float)(v27 * v67);
        if (v14 <= 0.0)
          v32 = v29;
        else
          v32 = v30;
        if (v14 <= 0.0)
          v33 = v31;
        else
          v33 = v28;
        v34 = v18;
        v35 = (float *)operator new(8 * v26 + 8);
        v36 = 0;
        *a1 = v35;
        a1[1] = v35;
        a1[2] = &v35[2 * v26 + 2];
        v37 = -(float)(v32 * v5);
        v38 = v33;
        v39 = -(float)(v33 * v5);
        v40 = (float)(v7 + (float)(v32 * v5)) - (float)(v34 * v65);
        v41 = (float)(v8 + (float)(v38 * v5)) - (float)(v34 * v66);
        while (1)
        {
          v44 = __sincosf_stret((float)(v14 * (float)v36) * (float)(1.0 / (float)v26));
          v45 = v40 - (float)((float)(v44.__sinval * v39) - (float)(v44.__cosval * v37));
          v46 = (float)(v41 + (float)(v44.__sinval * v37)) + (float)(v44.__cosval * v39);
          v47 = (unint64_t)a1[2];
          if ((unint64_t)v35 < v47)
          {
            *v35 = v45;
            v35[1] = v46;
            v42 = v35 + 2;
            goto LABEL_26;
          }
          v48 = *a1;
          v49 = (char *)v35 - (char *)*a1;
          v50 = v49 >> 3;
          v51 = (v49 >> 3) + 1;
          if (v51 >> 61)
            abort();
          v52 = v47 - (_QWORD)v48;
          if (v52 >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v54 = operator new(8 * v53);
          }
          else
          {
            v54 = 0;
          }
          v55 = (float *)&v54[8 * v50];
          v56 = (float *)&v54[8 * v53];
          *v55 = v45;
          v55[1] = v46;
          v42 = v55 + 2;
          if (v35 == v48)
          {
            *a1 = v55;
            a1[1] = v42;
            a1[2] = v56;
LABEL_54:
            operator delete(v35);
            goto LABEL_26;
          }
          v57 = (char *)(v35 - 2) - (char *)v48;
          if (v57 >= 0x168)
          {
            if (&v54[v49 - 8 - (v57 & 0xFFFFFFFFFFFFFFF8)] > &v54[v49 - 8])
            {
              v58 = v35;
            }
            else if ((float *)((char *)v35 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8) > v35 - 2)
            {
              v58 = v35;
            }
            else if ((unint64_t)((char *)v35 - &v54[v49]) >= 0x20)
            {
              v59 = (v57 >> 3) + 1;
              v58 = &v35[-2 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
              v60 = &v54[8 * v50 - 16];
              v61 = v35 - 4;
              v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v63 = *(_OWORD *)v61;
                *(v60 - 1) = *((_OWORD *)v61 - 1);
                *v60 = v63;
                v60 -= 2;
                v61 -= 8;
                v62 -= 4;
              }
              while (v62);
              v55 -= 2 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_53;
            }
            else
            {
              v58 = v35;
            }
          }
          else
          {
            v58 = v35;
          }
          do
          {
            v64 = *((_QWORD *)v58 - 1);
            v58 -= 2;
            *((_QWORD *)v55 - 1) = v64;
            v55 -= 2;
          }
          while (v58 != v48);
          v48 = *a1;
LABEL_53:
          *a1 = v55;
          a1[1] = v42;
          v35 = v48;
          a1[2] = v56;
          if (v48)
            goto LABEL_54;
LABEL_26:
          a1[1] = v42;
          v35 = v42;
          if (v36++ == v26)
            return;
        }
      }
      v15 = v14;
      v16 = 6.28318531;
    }
    else
    {
      v15 = v14;
      v16 = -6.28318531;
    }
    v14 = v15 + v16;
    goto LABEL_7;
  }
LABEL_13:
  v23 = (float *)operator new(8uLL);
  v24 = *((_QWORD *)a3 + 1);
  *a1 = v23;
  *(_QWORD *)v23 = v24;
  v23 += 2;
  a1[1] = v23;
  a1[2] = v23;
}

char *std::vector<geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<CAMediaTimingFunction * {__strong},geo::memory_management_mode const&>(void **a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  char *v11;
  id *v12;
  id *v13;
  void *v14;
  id *v15;
  id *v16;
  id *v17;
  void (**v18)(id *);
  BOOL v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  v10 = a2;
  *(_QWORD *)v8 = &off_1E42B4F30;
  *((_QWORD *)v8 + 1) = v10;
  v11 = v8 + 24;
  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v8 - 3) = &off_1E42B4F30;
    v8 -= 24;
    *((_QWORD *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    v14 = *(v12 - 2);
    *(v12 - 2) = 0;

    v12 -= 3;
  }
  while (v12 != v13);
  v12 = (id *)*a1;
  v15 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v15 != v12)
  {
    v16 = v15 - 3;
    v17 = v15 - 3;
    do
    {
      v18 = (void (**)(id *))*v17;
      v17 -= 3;
      (*v18)(v16);
      v19 = v16 == v12;
      v16 = v17;
    }
    while (!v19);
  }
  if (v12)
LABEL_18:
    operator delete(v12);
  return v11;
}

char *std::vector<md::AnimationData::LabelEntry>::__push_back_slow_path<md::AnimationData::LabelEntry const&>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v20 = v11;
  v21 = v11;
  v22 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v2 = *a1;
    v3 = a1[1];
    v11 = v20;
    v13 = v21;
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    v13 = v11;
  }
  v14 = v13 + 32;
  if (v3 == v2)
  {
    v17 = v2;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v3 - 4);
      v3 -= 32;
      *((_QWORD *)v11 - 4) = v15;
      v11 -= 32;
      v16 = *(_OWORD *)(v3 + 8);
      *((_QWORD *)v11 + 3) = *((_QWORD *)v3 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((_QWORD *)v3 + 2) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *((_QWORD *)v3 + 1) = 0;
    }
    while (v3 != v2);
    v17 = *a1;
    v2 = a1[1];
    v14 = v13 + 32;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v22;
  if (v2 == v17)
  {
    if (v2)
LABEL_20:
      operator delete(v2);
  }
  else
  {
    do
    {
      v19 = v2 - 32;
      if (*(v2 - 1) < 0)
        operator delete(*((void **)v2 - 3));
      v2 -= 32;
    }
    while (v19 != v17);
    v2 = v17;
    if (v17)
      goto LABEL_20;
  }
  return v14;
}

void sub_19FCEC398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::AnimationData::LabelEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<md::AnimationData::LabelEntry>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<md::AnimationData::LabelEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F30;

  return a1;
}

void geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F30;

  JUMPOUT(0x1A1AF4E00);
}

void std::vector<geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  id *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  void (**v14)(char *);
  BOOL v15;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    v4 = *(id **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - v2];
    if (v4 == (id *)v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[(char *)v4 - v2];
      do
      {
        *((_QWORD *)v9 - 3) = &off_1E42B4F30;
        v9 -= 24;
        *((_QWORD *)v9 + 1) = 0;
        objc_storeStrong((id *)v9 + 1, *(v4 - 2));
        v10 = *(v4 - 2);
        *(v4 - 2) = 0;

        v4 -= 3;
      }
      while (v4 != (id *)v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 24;
        v13 = v11 - 24;
        do
        {
          v14 = *(void (***)(char *))v13;
          v13 -= 24;
          (*v14)(v12);
          v15 = v12 == v2;
          v12 = v13;
        }
        while (!v15);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

void md::AnimationData::~AnimationData(md::AnimationData *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 12);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 13);
    v7 = (void *)*((_QWORD *)this + 12);
    if (v6 != v5)
    {
      v8 = v6 - 3;
      v9 = v6 - 3;
      do
      {
        v10 = *v9;
        v9 -= 3;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v5;
    operator delete(v7);
  }
  v12 = (void *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 10) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 7) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 3);
  if (v14)
  {
    *((_QWORD *)this + 4) = v14;
    operator delete(v14);
  }
  v15 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v15;
    operator delete(v15);
  }
}

double md::AnimationData::interpolateFrames(md::AnimationData *this, double a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  double v10;
  double v11;
  long double v12;
  double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double *v32;
  long double v33;
  long double v34;
  long double v35;
  double v36;
  long double v37;
  long double v38;
  long double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double *v43;
  long double v44;
  long double v45;
  long double v46;
  double result;
  double v48;

  *(int64x2_t *)this = vdupq_n_s64(0xC00921FB54442D18);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  if (v6 > a4 + 1)
    v7 = a4 + 1;
  else
    v7 = v6 - 1;
  v8 = a4;
  if (v7 == a4)
  {
    LODWORD(a2) = 1.0;
  }
  else
  {
    a2 = (a2 / *(double *)(a3 + 144) - *(double *)(*(_QWORD *)(a3 + 72) + 8 * a4))
       / (*(double *)(*(_QWORD *)(a3 + 72) + 8 * v7) - *(double *)(*(_QWORD *)(a3 + 72) + 8 * a4));
    *(float *)&a2 = a2;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a3 + 96) + 24 * a4 + 8), "_solveForInput:", a2);
  v10 = v9;
  if (*(_BYTE *)(a3 + 152))
  {
    v11 = *(double *)(*(_QWORD *)(a3 + 72) + 8 * v8)
        + (*(double *)(*(_QWORD *)(a3 + 72) + 8 * v7) - *(double *)(*(_QWORD *)(a3 + 72) + 8 * v8)) * v10;
    v12 = md::interpolateSpline(a3, (char **)(a3 + 72), v11);
    v14 = v13;
    v16 = v15;
    v17 = md::interpolateSpline(a3 + 48, (char **)(a3 + 72), v11);
    v19 = v18;
    v21 = v20;
    v48 = md::interpolateSpline(a3 + 24, (char **)(a3 + 72), v11);
    v22 = sqrt(v12 * v12 + v14 * v14);
    v23 = atan2(v16, v22 * 0.996647189);
    v24 = atan2(v14, v12);
    v25 = __sincos_stret(v23);
    v26 = atan2(v16 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v22 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
    v27 = __sincos_stret(v26);
    v28 = v22 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
  }
  else
  {
    v29 = 24 * v8;
    v30 = (double *)(*(_QWORD *)a3 + v29);
    v31 = *v30;
    v32 = (double *)(*(_QWORD *)a3 + 24 * v7);
    v33 = fmod(3.14159265 - *v30 + *v32, 6.28318531);
    v34 = fmod(v33 + 6.28318531, 6.28318531);
    v35 = fmod(v31 + 3.14159265 + (v34 + -3.14159265) * v10, 6.28318531);
    v26 = fmod(v35 + 6.28318531, 6.28318531) + -3.14159265;
    v36 = v30[1];
    v37 = fmod(3.14159265 - v36 + v32[1], 6.28318531);
    v38 = fmod(v37 + 6.28318531, 6.28318531);
    v39 = fmod(v36 + 3.14159265 + (v38 + -3.14159265) * v10, 6.28318531);
    v24 = fmod(v39 + 6.28318531, 6.28318531) + -3.14159265;
    v28 = v30[2] + (v32[2] - v30[2]) * v10;
    v48 = *(double *)(*(_QWORD *)(a3 + 24) + v29)
        + (*(double *)(*(_QWORD *)(a3 + 24) + 24 * v7) - *(double *)(*(_QWORD *)(a3 + 24) + v29)) * v10;
    v40 = *(_QWORD *)(a3 + 48);
    v41 = v40 + v29;
    v42 = *(double *)(v40 + v29);
    v43 = (double *)(v40 + 24 * v7);
    v44 = fmod(3.14159265 - v42 + *v43, 6.28318531);
    v45 = fmod(v44 + 6.28318531, 6.28318531);
    v46 = fmod(v42 + 3.14159265 + (v45 + -3.14159265) * v10, 6.28318531);
    v17 = fmod(v46 + 6.28318531, 6.28318531) + -3.14159265;
    v19 = *(double *)(v41 + 8) + (v43[1] - *(double *)(v41 + 8)) * v10;
    v21 = *(double *)(v41 + 16) + (v43[2] - *(double *)(v41 + 16)) * v10;
  }
  *(double *)this = v26;
  *((double *)this + 1) = v24;
  result = v48;
  *((double *)this + 2) = v28;
  *((double *)this + 3) = v48;
  *((double *)this + 4) = v19;
  *((double *)this + 5) = v17;
  *((double *)this + 6) = v21;
  return result;
}

double md::interpolateSpline(uint64_t a1, char **a2, double a3)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  char *v12;
  uint64_t v13;
  float64x2_t *v14;
  double *v15;
  double *v16;
  double *v17;
  float64x2_t *v18;
  float64x2_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  float64x2_t *v24;
  char *v25;
  char *v26;
  __int128 v27;
  double v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  double *v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  double *v40;
  uint64_t v41;
  __int128 v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  float64x2_t *v48;
  float64x2_t v49;
  unint64_t v50;
  float64x2_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  float64x2_t *v58;
  float64x2_t *v59;
  char *v60;
  size_t v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  float v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  double *v78;
  __int128 v79;
  _BOOL4 v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v87;
  float64x2_t *v88;
  double *v89;
  char *v90;
  char *v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  int32x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  double v109;
  double v110;
  double v111;
  float64x2_t *v112;
  double v113;
  float64x2_t *v114;
  double v115;
  float64x2_t v116;
  double v117;
  double *v118;
  float64x2_t v119;
  float64x2_t v120;
  double v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int32x2_t v126;
  double v127;
  double v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  float64x2_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  float64x2_t *v136;
  float64x2_t *v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  float64x2_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  double *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  float64x2_t *v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t *v162;
  float64x2_t *v163;
  uint64_t *v164;
  int v165;
  double v166;
  uint64_t v167;
  float64x2_t *v168;
  float64x2_t v169;
  float64x2_t *v170;
  float64_t *v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  float64x2_t v176;
  __int128 v177;
  double v178;
  double v179;
  uint64_t v180;
  unint64_t v181;
  float64_t v182;
  float64_t v183;
  unint64_t v184;
  double *v185;
  double v186;
  float64_t v187;
  char *v188;
  float64_t v189;
  char *v190;
  unint64_t v191;
  double v192;
  uint64_t v193;
  double v194;
  double v195;
  double v196;
  unint64_t v197;
  void *v198;
  void *v199;
  BOOL v200;
  unint64_t v201;
  unint64_t v203;
  double v204;
  double v205;
  double v206;
  uint64_t v207;
  double *v208;
  _BOOL4 v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  uint64_t v218;
  unint64_t v219;
  float64x2_t v220;
  int v221;
  unint64_t v222;
  float64x2_t v223;
  void *v224;
  _BYTE *v225;
  char *v226;
  void *v227;
  _BYTE *v228;
  char *v229;
  void *v230[2];
  __int128 v231;
  __int128 v232;
  void *__p[2];
  uint64_t v234;
  __int16 v235;
  char v236;
  double v237;
  __int128 v238;
  double *v239;
  double *v240;
  uint64_t v241;

  *(_OWORD *)v230 = 0u;
  v231 = 0u;
  v232 = 0u;
  *(_OWORD *)__p = 0u;
  v234 = 0;
  v238 = 0uLL;
  v237 = 0.0;
  v235 = 256;
  v236 = 1;
  v224 = operator new(0x18uLL);
  v225 = v224;
  v226 = (char *)v224 + 24;
  v227 = operator new(0x48uLL);
  v228 = v227;
  v229 = (char *)v227 + 72;
  if (&v227 != (void **)a1)
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v227, *(_QWORD *)a1, *(char **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  v236 = 1;
  if (&v224 != (void **)a2)
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(&v224, *a2, a2[1], (a2[1] - *a2) >> 3);
  v236 = 0;
  v6 = (unint64_t)(v225 - (_BYTE *)v224) >> 3;
  v7 = -1431655765 * ((unint64_t)(v228 - (_BYTE *)v227) >> 3);
  if ((int)v6 >= v7)
    v8 = v7;
  else
    v8 = v6;
  v218 = (v8 - 2);
  if ((int)v8 < 2)
    goto LABEL_293;
  v9 = (v8 - 1);
  v10 = (float64x2_t *)operator new(24 * v9);
  v11 = (float64x2_t *)operator new(8 * v9);
  v12 = (char *)v10 + 24 * v9;
  v13 = 1;
  v14 = v10;
  v15 = (double *)v11;
  v219 = (v8 - 1);
  v16 = &v11->f64[v219];
  v222 = v8;
  do
  {
    v18 = (float64x2_t *)((char *)v227 + 24 * v13);
    v19 = vsubq_f64(*v18, *(float64x2_t *)((char *)v18 - 24));
    v20 = v18[1].f64[0] - v18[-1].f64[1];
    if (v14 >= (float64x2_t *)v12)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v10) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v12 - (char *)v10) >> 3) > v21)
        v21 = 0x5555555555555556 * ((v12 - (char *)v10) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)v10) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      v220 = v19;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_326;
        v23 = (char *)operator new(24 * v22);
        v19 = v220;
      }
      else
      {
        v23 = 0;
      }
      v24 = (float64x2_t *)&v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      *v24 = v19;
      v24[1].f64[0] = v20;
      if (v14 == v10)
      {
        v26 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      }
      else
      {
        v25 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
        do
        {
          v26 = v25 - 24;
          v27 = *(__int128 *)((char *)&v14[-2] + 8);
          *((_QWORD *)v25 - 1) = *(_QWORD *)&v14[-1].f64[1];
          *(_OWORD *)(v25 - 24) = v27;
          v14 = (float64x2_t *)((char *)v14 - 24);
          v25 -= 24;
        }
        while (v14 != v10);
      }
      v12 = &v23[24 * v22];
      v14 = (float64x2_t *)((char *)v24 + 24);
      if (v10)
      {
        operator delete(v10);
        v19 = v220;
      }
      v10 = (float64x2_t *)v26;
      v8 = v222;
    }
    else
    {
      *v14 = v19;
      v14[1].f64[0] = v20;
      v14 = (float64x2_t *)((char *)v14 + 24);
    }
    v28 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)) + v20 * v20);
    if (v15 < v16)
    {
      *v15 = v28;
      v17 = v15 + 1;
      goto LABEL_11;
    }
    v29 = (char *)v15 - (char *)v11;
    v30 = ((char *)v15 - (char *)v11) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      abort();
    if (((char *)v16 - (char *)v11) >> 2 > v31)
      v31 = ((char *)v16 - (char *)v11) >> 2;
    if ((unint64_t)((char *)v16 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      if (v32 >> 61)
LABEL_326:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v33 = operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = (double *)&v33[8 * v30];
    *v34 = v28;
    v17 = v34 + 1;
    if (v15 != (double *)v11)
    {
      v35 = (char *)(v15 - 1) - (char *)v11;
      if (v35 >= 0x168)
      {
        if (&v33[v29 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[v29 - 8])
        {
          v36 = v15;
        }
        else if ((double *)((char *)v15 - (v35 & 0xFFFFFFFFFFFFFFF8) - 8) > v15 - 1)
        {
          v36 = v15;
        }
        else if ((unint64_t)((char *)v11 - v33) >= 0x20)
        {
          v38 = (v35 >> 3) + 1;
          v36 = &v15[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
          v39 = &v33[v29 - 16];
          v40 = v15 - 2;
          v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          v34 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
        else
        {
          v36 = v15;
        }
      }
      else
      {
        v36 = v15;
      }
      do
      {
        v37 = *((_QWORD *)v36-- - 1);
        *((_QWORD *)v34-- - 1) = v37;
      }
      while (v36 != (double *)v11);
    }
LABEL_47:
    v16 = (double *)&v33[8 * v32];
    if (v11)
      operator delete(v11);
    v11 = (float64x2_t *)v34;
    v8 = v222;
LABEL_11:
    ++v13;
    v15 = v17;
  }
  while (v13 != v8);
  v221 = HIBYTE(v235);
  if (HIBYTE(v235))
  {
    if (v8 > 4)
    {
      v47 = (v8 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v48 = v11 + 1;
      v49 = 0uLL;
      v50 = v47;
      v51 = 0uLL;
      do
      {
        v49 = vaddq_f64(v48[-1], v49);
        v51 = vaddq_f64(*v48, v51);
        v48 += 2;
        v50 -= 4;
      }
      while (v50);
      v43 = vaddvq_f64(vaddq_f64(v51, v49));
      v45 = v219;
      if (v8 - 1 != v47)
      {
        v44 = v47 | 1;
        goto LABEL_68;
      }
    }
    else
    {
      v43 = 0.0;
      v44 = 1;
      v45 = v219;
LABEL_68:
      v52 = v8 - v44;
      v53 = &v11->f64[v44 - 1];
      do
      {
        v54 = *v53++;
        v43 = v54 + v43;
        --v52;
      }
      while (v52);
    }
    v46 = v43 / (double)(int)v45;
  }
  else
  {
    v46 = 0.0;
    v45 = v219;
  }
  v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
  if (v8 <= v55)
  {
    if (v8 < v55)
      __p[1] = (char *)__p[0] + 24 * v8;
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append(__p, v8 - v55);
  }
  v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v232 - *((_QWORD *)&v231 + 1)) >> 3);
  if (v8 <= v56)
  {
    if (v8 < v56)
      *(_QWORD *)&v232 = *((_QWORD *)&v231 + 1) + 24 * v8;
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append((void **)&v231 + 1, v8 - v56);
  }
  v57 = v235;
  v58 = (float64x2_t *)operator new(24 * v8);
  v59 = v58;
  v60 = (char *)v58 + 24 * v8;
  v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v230[1] - (char *)v230[0]) >> 3);
  if (v61 == 0xAAAAAAAAAAAAAAABLL * ((v228 - (_BYTE *)v227) >> 3))
  {
    if (v221)
    {
      v62 = 0;
      v63 = (double *)v58;
      while (1)
      {
        v65 = (double *)((char *)v230[0] + 24 * v62);
        v66 = *v65;
        v67 = v65[1];
        v68 = v65[2];
        v69 = sqrt(v66 * v66 + v67 * v67 + v68 * v68);
        v70 = v69;
        if (v70 <= 1.0e-20)
          v70 = 1.0;
        v71 = v46 / v70;
        v72 = v71 * v66;
        v73 = v71 * v67;
        v74 = v71 * v68;
        if (v63 < (double *)v60)
        {
          *v63 = v72;
          v63[1] = v73;
          v64 = v63 + 3;
          v63[2] = v74;
        }
        else
        {
          v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v59) >> 3) + 1;
          if (v75 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v75)
            v75 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
            v76 = 0xAAAAAAAAAAAAAAALL;
          else
            v76 = v75;
          if (v76)
          {
            if (v76 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_326;
            v77 = (char *)operator new(24 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = (double *)&v77[8 * (((char *)v63 - (char *)v59) >> 3)];
          v60 = &v77[24 * v76];
          *v78 = v72;
          v78[1] = v73;
          v78[2] = v74;
          v64 = v78 + 3;
          if (v63 == (double *)v59)
            goto LABEL_100;
          do
          {
            v79 = *(_OWORD *)(v63 - 3);
            *(v78 - 1) = *(v63 - 1);
            *(_OWORD *)(v78 - 3) = v79;
            v78 -= 3;
            v63 -= 3;
          }
          while (v63 != (double *)v59);
          if (v59)
LABEL_100:
            operator delete(v59);
          v59 = (float64x2_t *)v78;
        }
        ++v62;
        v63 = v64;
        if (v62 == v222)
          goto LABEL_274;
      }
    }
    v167 = 0;
    v168 = v58;
    do
    {
      v171 = (float64_t *)((char *)v230[0] + 24 * v167);
      if (v168 < (float64x2_t *)v60)
      {
        v169 = *(float64x2_t *)v171;
        v168[1].f64[0] = v171[2];
        *v168 = v169;
        v170 = (float64x2_t *)((char *)v168 + 24);
      }
      else
      {
        v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v59) >> 3) + 1;
        if (v172 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v172)
          v172 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
          v173 = 0xAAAAAAAAAAAAAAALL;
        else
          v173 = v172;
        if (v173)
        {
          if (v173 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_326;
          v174 = (char *)operator new(24 * v173);
        }
        else
        {
          v174 = 0;
        }
        v175 = &v174[8 * (((char *)v168 - (char *)v59) >> 3)];
        v176 = *(float64x2_t *)v171;
        v60 = &v174[24 * v173];
        *((float64_t *)v175 + 2) = v171[2];
        *(float64x2_t *)v175 = v176;
        v170 = (float64x2_t *)(v175 + 24);
        if (v168 == v59)
          goto LABEL_272;
        do
        {
          v177 = *(__int128 *)((char *)&v168[-2] + 8);
          *((_QWORD *)v175 - 1) = *(_QWORD *)&v168[-1].f64[1];
          *(_OWORD *)(v175 - 24) = v177;
          v175 -= 24;
          v168 = (float64x2_t *)((char *)v168 - 24);
        }
        while (v168 != v59);
        if (v59)
LABEL_272:
          operator delete(v59);
        v59 = (float64x2_t *)v175;
      }
      ++v167;
      v168 = v170;
    }
    while (v167 != v222);
LABEL_274:
    v162 = (float64x2_t *)*((_QWORD *)&v231 + 1);
    v163 = (float64x2_t *)__p[0];
    v8 = v222;
    v45 = v219;
    v164 = &qword_19FFB2000;
    goto LABEL_275;
  }
  v239 = 0;
  v240 = 0;
  v241 = 0;
  if ((void *)((char *)v230[1] - (char *)v230[0]) == (void *)48)
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v239, (unint64_t)v230[0], (char *)v230[1], v61);
  v80 = 0;
  if ((int)v8 >= 3 && v57)
  {
    v81 = (uint64_t *)((char *)v227 + 24 * v45);
    v82 = *v81;
    v83 = v81[1];
    v84 = v81[2];
    v80 = *(_QWORD *)v227 == v82 && *((_QWORD *)v227 + 1) == v83 && *((_QWORD *)v227 + 2) == v84;
  }
  v87 = 0;
  if (v239 != v240)
    v80 = 1;
  v214 = v80;
  v223 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
  v88 = v59;
  while (2)
  {
    if (!v87)
    {
      v118 = v239;
      if (v239 != v240)
      {
        if (v221)
        {
          v119 = vsubq_f64(*(float64x2_t *)((char *)v227 + 8), *((float64x2_t *)v227 + 2));
          v120 = vmulq_f64(v119, v119);
          v121 = *v239;
          v122 = v239[2];
          v123.f64[0] = v239[1];
          v123.f64[1] = *(double *)v227 - *((double *)v227 + 3);
          v124 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120.f64[0], 0);
          v124.f64[0] = v121 * v121;
          v120.f64[0] = v122 * v122;
          v125 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v124, v123, v123), v120))));
          v126 = vmovn_s64(vcgtq_f64(v125, v223));
          v127 = v125.f64[1];
          if ((v126.i8[4] & 1) == 0)
            v127 = 1.0;
          if ((v126.i8[0] & 1) == 0)
            v125.f64[0] = 1.0;
          v128 = v127 / v125.f64[0];
          v102 = v128 * v121;
          v103 = v128 * v239[1];
          v104 = v128 * v122;
          if (v88 >= (float64x2_t *)v60)
          {
            v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v129 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v129)
              v129 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
              v130 = 0xAAAAAAAAAAAAAAALL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_326;
              v131 = (char *)operator new(24 * v130);
            }
            else
            {
              v131 = 0;
            }
            v151 = (double *)&v131[8 * (((char *)v88 - (char *)v59) >> 3)];
            v60 = &v131[24 * v130];
            *v151 = v102;
            v151[1] = v103;
            v151[2] = v104;
            v89 = v151 + 3;
            if (v88 != v59)
            {
              v45 = v219;
              do
              {
                v156 = *(__int128 *)((char *)&v88[-2] + 8);
                *(v151 - 1) = v88[-1].f64[1];
                *(_OWORD *)(v151 - 3) = v156;
                v151 -= 3;
                v88 = (float64x2_t *)((char *)v88 - 24);
              }
              while (v88 != v59);
LABEL_236:
              if (!v59)
              {
LABEL_240:
                v59 = (float64x2_t *)v151;
                goto LABEL_119;
              }
LABEL_239:
              operator delete(v59);
              goto LABEL_240;
            }
LABEL_238:
            v45 = v219;
            goto LABEL_239;
          }
          goto LABEL_118;
        }
        if (v88 < (float64x2_t *)v60)
          goto LABEL_184;
        v148 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v148 > 0xAAAAAAAAAAAAAAALL)
LABEL_332:
          abort();
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v148)
          v148 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
          v149 = 0xAAAAAAAAAAAAAAALL;
        else
          v149 = v148;
        if (v149)
        {
          if (v149 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_326;
          v150 = (char *)operator new(24 * v149);
        }
        else
        {
          v150 = 0;
        }
        v157 = (float64x2_t *)&v150[8 * (((char *)v88 - (char *)v59) >> 3)];
        v160 = *(float64x2_t *)v118;
        v60 = &v150[24 * v149];
        v157[1].f64[0] = v118[2];
        *v157 = v160;
        v89 = &v157[1].f64[1];
        if (v88 == v59)
          goto LABEL_249;
        do
        {
          v161 = *(float64x2_t *)((char *)v88 - 24);
          v157[-1].f64[1] = v88[-1].f64[1];
          *(float64x2_t *)((char *)v157 - 24) = v161;
          v157 = (float64x2_t *)((char *)v157 - 24);
          v88 = (float64x2_t *)((char *)v88 - 24);
        }
        while (v88 != v59);
LABEL_248:
        if (v59)
          goto LABEL_249;
        goto LABEL_250;
      }
    }
    if (v87 != v45 || v239 == v240)
    {
      if (v87)
      {
        v108 = v87 - 1;
        if (v87 < v45)
        {
          v109 = v11->f64[v108];
          v110 = v11->f64[v87];
          v111 = 1.0 / (v110 + v109);
          if (fabs(v110 + v109) <= 1.0e-20)
            v111 = 0.0;
          v112 = (float64x2_t *)((char *)v10 + 24 * v108);
          v113 = v111 * v110;
          v114 = (float64x2_t *)((char *)v10 + 24 * v87);
          v115 = v111 * v109;
          v116 = vmlaq_n_f64(vmulq_n_f64(*v112, v113), *v114, v115);
          v117 = v113 * v112[1].f64[0] + v114[1].f64[0] * v115;
          if (v88 >= (float64x2_t *)v60)
          {
            v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v142 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v142)
              v142 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
              v143 = 0xAAAAAAAAAAAAAAALL;
            else
              v143 = v142;
            if (v143)
            {
              v216 = v116;
              if (v143 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_326;
              v144 = (char *)operator new(24 * v143);
              v116 = v216;
            }
            else
            {
              v144 = 0;
            }
            v151 = (double *)&v144[8 * (((char *)v88 - (char *)v59) >> 3)];
            v60 = &v144[24 * v143];
            *(float64x2_t *)v151 = v116;
            v151[2] = v117;
            v89 = v151 + 3;
            if (v88 != v59)
            {
              v45 = v219;
              do
              {
                v153 = *(__int128 *)((char *)&v88[-2] + 8);
                *(v151 - 1) = v88[-1].f64[1];
                *(_OWORD *)(v151 - 3) = v153;
                v151 -= 3;
                v88 = (float64x2_t *)((char *)v88 - 24);
              }
              while (v88 != v59);
              goto LABEL_236;
            }
            goto LABEL_238;
          }
          *v88 = v116;
LABEL_172:
          v88[1].f64[0] = v117;
          v89 = &v88[1].f64[1];
          goto LABEL_119;
        }
        v136 = (float64x2_t *)((char *)v227 + 24 * v87);
        v137 = (float64x2_t *)((char *)v227 + 24 * v108);
        v132 = vsubq_f64(*v136, *v137);
        v117 = v136[1].f64[0] - v137[1].f64[0];
        if (v88 >= (float64x2_t *)v60)
        {
          v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v145 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v145)
            v145 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
            v146 = 0xAAAAAAAAAAAAAAALL;
          else
            v146 = v145;
          if (v146)
          {
            v217 = v132;
            if (v146 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_326;
            v147 = (char *)operator new(24 * v146);
            v132 = v217;
          }
          else
          {
            v147 = 0;
          }
          v151 = (double *)&v147[8 * (((char *)v88 - (char *)v59) >> 3)];
          v60 = &v147[24 * v146];
          *(float64x2_t *)v151 = v132;
          v151[2] = v117;
          v89 = v151 + 3;
          if (v88 != v59)
          {
            v45 = v219;
            do
            {
              v154 = *(__int128 *)((char *)&v88[-2] + 8);
              *(v151 - 1) = v88[-1].f64[1];
              *(_OWORD *)(v151 - 3) = v154;
              v151 -= 3;
              v88 = (float64x2_t *)((char *)v88 - 24);
            }
            while (v88 != v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      else
      {
        v132 = vsubq_f64(*(float64x2_t *)((char *)v227 + 24), *(float64x2_t *)v227);
        v117 = *((double *)v227 + 5) - *((double *)v227 + 2);
        if (v88 >= (float64x2_t *)v60)
        {
          v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v133 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v133)
            v133 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
            v134 = 0xAAAAAAAAAAAAAAALL;
          else
            v134 = v133;
          if (v134)
          {
            v215 = v132;
            if (v134 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_326;
            v135 = (char *)operator new(24 * v134);
            v132 = v215;
          }
          else
          {
            v135 = 0;
          }
          v151 = (double *)&v135[8 * (((char *)v88 - (char *)v59) >> 3)];
          v60 = &v135[24 * v134];
          *(float64x2_t *)v151 = v132;
          v151[2] = v117;
          v89 = v151 + 3;
          if (v88 != v59)
          {
            v45 = v219;
            do
            {
              v152 = *(__int128 *)((char *)&v88[-2] + 8);
              *(v151 - 1) = v88[-1].f64[1];
              *(_OWORD *)(v151 - 3) = v152;
              v151 -= 3;
              v88 = (float64x2_t *)((char *)v88 - 24);
            }
            while (v88 != v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      *v88 = v132;
      goto LABEL_172;
    }
    if (v221)
    {
      v90 = (char *)v227 + 24 * v45;
      v91 = (char *)v227 + 24 * v218;
      v92 = vsubq_f64(*(float64x2_t *)(v90 + 8), *(float64x2_t *)(v91 + 8));
      v93 = vmulq_f64(v92, v92);
      v94 = v239[3];
      v95 = v239[5];
      v96.f64[0] = v239[4];
      v96.f64[1] = *(double *)v90 - *(double *)v91;
      v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
      v97.f64[0] = v94 * v94;
      v93.f64[0] = v95 * v95;
      v98 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v97, v96, v96), v93))));
      v99 = vmovn_s64(vcgtq_f64(v98, v223));
      v100 = v98.f64[1];
      if ((v99.i8[4] & 1) == 0)
        v100 = 1.0;
      if ((v99.i8[0] & 1) == 0)
        v98.f64[0] = 1.0;
      v101 = v100 / v98.f64[0];
      v102 = v101 * v94;
      v103 = v101 * v239[4];
      v104 = v101 * v95;
      if (v88 >= (float64x2_t *)v60)
      {
        v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v105 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v105)
          v105 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
          v106 = 0xAAAAAAAAAAAAAAALL;
        else
          v106 = v105;
        if (v106)
        {
          if (v106 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_326;
          v107 = (char *)operator new(24 * v106);
        }
        else
        {
          v107 = 0;
        }
        v151 = (double *)&v107[8 * (((char *)v88 - (char *)v59) >> 3)];
        v60 = &v107[24 * v106];
        *v151 = v102;
        v151[1] = v103;
        v151[2] = v104;
        v89 = v151 + 3;
        if (v88 != v59)
        {
          v45 = v219;
          do
          {
            v155 = *(__int128 *)((char *)&v88[-2] + 8);
            *(v151 - 1) = v88[-1].f64[1];
            *(_OWORD *)(v151 - 3) = v155;
            v151 -= 3;
            v88 = (float64x2_t *)((char *)v88 - 24);
          }
          while (v88 != v59);
          goto LABEL_236;
        }
        goto LABEL_238;
      }
LABEL_118:
      v88->f64[0] = v102;
      v88->f64[1] = v103;
      v89 = &v88[1].f64[1];
      v88[1].f64[0] = v104;
      goto LABEL_119;
    }
    v118 = v239 + 3;
    if (v88 < (float64x2_t *)v60)
    {
LABEL_184:
      v141 = *(float64x2_t *)v118;
      v88[1].f64[0] = v118[2];
      *v88 = v141;
      v89 = &v88[1].f64[1];
      goto LABEL_119;
    }
    v138 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
    if (v138 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_332;
    if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v138)
      v138 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
      v139 = 0xAAAAAAAAAAAAAAALL;
    else
      v139 = v138;
    if (v139)
    {
      if (v139 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_326;
      v140 = (char *)operator new(24 * v139);
    }
    else
    {
      v140 = 0;
    }
    v157 = (float64x2_t *)&v140[8 * (((char *)v88 - (char *)v59) >> 3)];
    v158 = *(float64x2_t *)v118;
    v60 = &v140[24 * v139];
    v157[1].f64[0] = v118[2];
    *v157 = v158;
    v89 = &v157[1].f64[1];
    if (v88 != v59)
    {
      do
      {
        v159 = *(float64x2_t *)((char *)v88 - 24);
        v157[-1].f64[1] = v88[-1].f64[1];
        *(float64x2_t *)((char *)v157 - 24) = v159;
        v157 = (float64x2_t *)((char *)v157 - 24);
        v88 = (float64x2_t *)((char *)v88 - 24);
      }
      while (v88 != v59);
      goto LABEL_248;
    }
LABEL_249:
    operator delete(v59);
LABEL_250:
    v59 = v157;
    v45 = v219;
LABEL_119:
    ++v87;
    v88 = (float64x2_t *)v89;
    if (v87 != v8)
      continue;
    break;
  }
  if (v239)
    operator delete(v239);
  v162 = (float64x2_t *)*((_QWORD *)&v231 + 1);
  v163 = (float64x2_t *)__p[0];
  v164 = &qword_19FFB2000;
  v165 = v214;
  if (v214)
  {
LABEL_275:
    v178 = *((double *)v224 + v218);
    v179 = *((double *)v224 + 1) + 1.0 - v178;
    if (v179 <= *((double *)v164 + 360))
      v166 = 0.0;
    else
      v166 = (1.0 - v178 + *(double *)v224 + 1.0 - v178 + *(double *)v224) / v179;
    v165 = 1;
    goto LABEL_279;
  }
  v166 = 0.0;
LABEL_279:
  v180 = 0;
  v181 = 0;
  v182 = v59[1].f64[0] * v166;
  *v162 = vmulq_n_f64(*v59, v166);
  v162[1].f64[0] = v182;
  v183 = v59[1].f64[0] * v166;
  *v163 = vmulq_n_f64(*v59, v166);
  v163[1].f64[0] = v183;
  v184 = 1;
  v185 = (double *)v224;
  v186 = *((double *)v164 + 360);
  do
  {
    v191 = v184 + 1;
    v192 = 0.0;
    if (((v45 == v184) & ~v165) == 0)
    {
      v193 = (v184 + 1);
      v192 = 0.0;
      if (v184 >= v45)
        v194 = 1.0;
      else
        v194 = 0.0;
      if (v184 >= v45)
        v193 = 1;
      v195 = *(double *)((char *)v185 + (v180 >> 29));
      v196 = v185[v193] + v194 - v195;
      if (v196 > v186)
        v192 = (v185[v184] - v195 + v185[v184] - v195) / v196;
    }
    v187 = v59[2].f64[v181 / 8 + 1] * v192;
    v188 = (char *)v162 + v181;
    *(float64x2_t *)(v188 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v181 + 24), v192);
    *((float64_t *)v188 + 5) = v187;
    v189 = v59[2].f64[v181 / 8 + 1] * v192;
    v190 = (char *)v163 + v181;
    *(float64x2_t *)(v190 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v181 + 24), v192);
    *((float64_t *)v190 + 5) = v189;
    v181 += 24;
    v180 += 0x100000000;
    ++v184;
  }
  while (v8 != v191);
  operator delete(v59);
  if (v11)
    operator delete(v11);
  if (v10)
    operator delete(v10);
LABEL_293:
  v197 = 0xAAAAAAAAAAAAAAABLL * ((v228 - (_BYTE *)v227) >> 3);
  if ((v225 - (_BYTE *)v224) >> 3 < v197)
    v197 = (v225 - (_BYTE *)v224) >> 3;
  v198 = (void *)*((_QWORD *)&v231 + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v232 - *((_QWORD *)&v231 + 1)) >> 3) != v197)
  {
    v199 = __p[0];
    goto LABEL_309;
  }
  v199 = __p[0];
  if (v197)
    v200 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) == v197;
  else
    v200 = 0;
  if (v200)
  {
    v201 = 0;
    while (*((double *)v224 + v201) <= a3)
    {
      if (v197 == ++v201)
      {
        v201 = v197;
        break;
      }
    }
    if (v201)
    {
      if (v201 != v197)
      {
        v203 = v201 - 1;
        v204 = *((double *)v224 + v201 - 1);
        v205 = *((double *)v224 + v201) - v204;
        v206 = 0.0;
        if (v205 != 0.0)
          v206 = (a3 - v204) / v205;
        v207 = 24 * v201;
        v208 = (double *)(*((_QWORD *)&v231 + 1) + 24 * v203);
        __asm
        {
          FMOV            V17.2D, #2.0
          FMOV            V2.2D, #3.0
        }
        a3 = *((double *)v227 + 3 * v203)
           + *v208 * v206
           + (v237
            + *v208
            + (*((double *)v227 + 3 * v203) - *(double *)((char *)v227 + v207)) * 2.0
            + *(double *)((char *)__p[0] + v207))
           * (v206
            * v206
            * v206)
           + (v237
            - (*v208
             + *v208)
            + (*(double *)((char *)v227 + v207) - *((double *)v227 + 3 * v203)) * 3.0
            - *(double *)((char *)__p[0] + v207))
           * (v206
            * v206);
        goto LABEL_310;
      }
      a3 = *((double *)v227 + 3 * v197 - 3);
    }
    else
    {
      a3 = *(double *)v227;
    }
    if (!__p[0])
      goto LABEL_311;
LABEL_310:
    __p[1] = v199;
    operator delete(v199);
    v198 = (void *)*((_QWORD *)&v231 + 1);
    goto LABEL_311;
  }
LABEL_309:
  if (v199)
    goto LABEL_310;
LABEL_311:
  if (v198)
  {
    *(_QWORD *)&v232 = v198;
    operator delete(v198);
  }
  if (v230[0])
  {
    v230[1] = v230[0];
    operator delete(v230[0]);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  return a3;
}

void sub_19FCEDF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 176);
  if (v24)
  {
    operator delete(v24);
    if (!v21)
    {
LABEL_3:
      if (!v19)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!v21)
  {
    goto LABEL_3;
  }
  operator delete(v21);
  if (!v19)
  {
LABEL_4:
    if (!v20)
    {
LABEL_10:
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v19);
  if (!v20)
    goto LABEL_10;
  goto LABEL_9;
}

_QWORD *md::`anonymous namespace'::FlyoverSplineInterpolator<gm::Matrix<double,3,1>>::~FlyoverSplineInterpolator(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E426EE68;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void md::`anonymous namespace'::FlyoverSplineInterpolator<gm::Matrix<double,3,1>>::~FlyoverSplineInterpolator(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E426EE68;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1A1AF4E00);
}

md::AnimationData **std::unique_ptr<md::AnimationData>::~unique_ptr[abi:nn180100](md::AnimationData **a1)
{
  md::AnimationData *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::AnimationData::~AnimationData(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::VKFlyoverTour *md::VKFlyoverTour::VKFlyoverTour(md::VKFlyoverTour *this)
{
  int64x2_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = vdupq_n_s64(0xC00921FB54442D18);
  *((int64x2_t *)this + 1) = v2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(int64x2_t *)((char *)this + 72) = v2;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *((_DWORD *)this + 33) = 1060320051;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  v3 = (_QWORD *)operator new();
  v3[2] = 0;
  v3[1] = 0;
  *v3 = v3 + 1;
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = v3;
  if (v4)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v4 + 8));
    MEMORY[0x1A1AF4E00](v4, 0x1020C4062D53EE8);
  }
  return this;
}

void sub_19FCEE2B0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  md::AnimationData **v11;
  md::AnimationData *v12;
  uint64_t v13;

  v5 = (uint64_t *)v1[31];
  if (v5 == v1 + 28)
  {
    v6 = 4;
    v5 = v1 + 28;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)v1[27];
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v3 = (_QWORD *)v1[27];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_11:
  v9 = (_QWORD *)v1[23];
  if (v9 == v2)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_16;
    v10 = 5;
    v2 = (_QWORD *)v1[23];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v10))(v2);
LABEL_16:
  v11 = (md::AnimationData **)v1[1];
  v1[1] = 0;
  if (v11)
  {
    v12 = *v11;
    *v11 = 0;
    if (v12)
    {
      md::AnimationData::~AnimationData(v12);
      MEMORY[0x1A1AF4E00]();
    }
    MEMORY[0x1A1AF4E00](v11, 0x1020C40F7B62AD5);
  }
  v13 = *v1;
  *v1 = 0;
  if (v13)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v13 + 8));
    MEMORY[0x1A1AF4E00](v13, 0x1020C4062D53EE8);
  }
  _Unwind_Resume(exception_object);
}

void ggl::RouteLineTraffic::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLineTraffic::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::RouteLineTraffic::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLineTraffic::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::RouteLineTraffic::BasePipelineSetup::textureIsEnabled(ggl::RouteLineTraffic::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::RouteLineTraffic::BasePipelineSetup::BasePipelineSetup(ggl::RouteLineTraffic::BasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43E18 = 1;
    }
    ggl::RouteLineTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE39618 = &ggl::RouteLineTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1ECE39620 = 0;
    if ((v5 & 1) == 0
    {
      ggl::RouteLineTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE39650 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE39658 = (uint64_t)ggl::RouteLineTraffic::Style::reflection(void)::reflection;
    }
    qword_1ECE39628 = (uint64_t)&ggl::RouteLineTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
    unk_1ECE39630 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::RouteLineTraffic::BasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B8A30;
  return result;
}

void md::CrossFadeLabelPart::~CrossFadeLabelPart(md::CrossFadeLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::CrossFadeLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, this, 640);
}

uint64_t md::CrossFadeLabelPart::collidesWithItem(md::CrossFadeLabelPart *this, const md::LabelCollidableItem *a2)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::collidesWithObject(md::CrossFadeLabelPart *this, const md::CollisionObject *a2)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::reserveSpaceLabelPart(md::CrossFadeLabelPart *this, BOOL *a2)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::hitPartAtPixel(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 632))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8));
}

uint64_t md::CrossFadeLabelPart::isTextVisible(md::CrossFadeLabelPart *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 744))(*(_QWORD *)(*((_QWORD *)this + 72) + 8));
}

void md::CrossFadeLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "CrossFade");
}

void md::HardwareScalerFilter::~HardwareScalerFilter(md::HardwareScalerFilter *this)
{
  md::HardwareScalerFilter::~HardwareScalerFilter(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E4298EF8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
    free(v4);
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
    free(v5);
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
    free(v6);
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
    free(v7);
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
    free(v8);
}

void md::HardwareScalerFilter::coefficients(int a1, unsigned int a2, char a3, char a4, uint64_t a5, int a6, double a7)
{
  int v7;
  double v8;
  unsigned int v9;
  double v10;
  double v11;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  double *v25;
  double v26;
  uint64_t v27;
  double v28;
  double v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  double *v45;
  int v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  double v54;
  double *v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  double v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  double *v78;
  int v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int32x4_t v86;
  int32x4_t *v87;
  uint64_t v88;
  int32x4_t v89;
  uint64_t v90;
  _DWORD *v91;
  BOOL v92;
  uint64_t v93;
  double v94;
  unsigned int v95;
  double v96;
  unsigned int v98;
  double v99;
  double v100;
  _BYTE v102[256];
  _QWORD v103[450];

  v103[448] = *MEMORY[0x1E0C80C00];
  v7 = a1 - 1;
  if (a1 < 1)
    v7 = a1;
  v8 = (double)(v7 >> 1);
  v9 = llround(a7 * 8.0);
  v10 = v8 + 0.5;
  v11 = v8 + 1.5;
  if (v9 != 2)
    v11 = v8;
  if (v9 != 4)
    v10 = v11;
  if (a2)
  {
    v13 = v10 * a2;
    v98 = 1 << a4;
    if (a1)
    {
      v96 = 1.0 / (double)(int)a2;
      v95 = a1 & 0x80000001;
      v94 = -v10;
      v14 = (double)(unint64_t)(1 << a4);
      v15 = ~(-1 << (a4 + a3));
      v16 = a5 + 4 * v13;
      v93 = a2;
      v17 = a1;
      v18 = a1 & 0xFFFFFFFE;
      v20 = a1 == 1 || a2 != 1;
      v92 = v20;
      v21 = 0;
      if (a6)
      {
        v22 = floor(v8 * a7);
        v23 = (double)-vcvtmd_s64_f64(v8 * a7);
        v24 = (double *)v102;
        v25 = (double *)v103;
        v26 = 0.5;
        while (1)
        {
          v27 = 0;
          v28 = v96 * (double)v21;
          if (v28 >= v26 && v95 == 1)
            v28 = v28 + -1.0;
          v30 = v94 - v28;
          v31 = 0.0;
          v32 = v24;
          do
          {
            v36 = (v30 + (double)v27) * a7;
            v37 = v36 >= v22 || v36 <= v23;
            v35 = 0.0;
            if (!v37)
            {
              if (v36 == 0.0)
              {
                v35 = 1.0;
              }
              else
              {
                v33 = v36 * 3.14159265;
                v34 = sin(v36 * 3.14159265);
                v35 = sin(v33 * (1.0 / v22)) * v34 / (v33 * (1.0 / v22) * v33);
              }
            }
            *v32 = v35;
            v31 = v35 + v31;
            ++v27;
            v32 += 32;
          }
          while (v17 != v27);
          v38 = a5 + 4 * v21;
          v39 = 1.0 / v31;
          if (v92)
          {
            v40 = 0;
            v41 = 0;
            v26 = 0.5;
          }
          else
          {
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = v25;
            v26 = 0.5;
            do
            {
              v46 = (int)(*(v45 - 32) * v14 * v39 + 0.5) & v15;
              v47 = (int)(*v45 * v14 * v39 + 0.5) & v15;
              v48 = (_DWORD *)(v38 + 4 * (v42 & 0xFFFFFFFE));
              *v48 = v46;
              v48[1] = v47;
              v43 += v46;
              v44 += v47;
              v42 += 2;
              v45 += 64;
            }
            while (v18 != v42);
            v41 = v44 + v43;
            v40 = v18;
            if (v18 == v17)
              goto LABEL_17;
          }
          v49 = v17 - v40;
          v50 = a2 * v40;
          v51 = v40 << 8;
          do
          {
            v52 = (int)(v26 + *(double *)((char *)v24 + v51) * v14 * v39) & v15;
            *(_DWORD *)(v38 + 4 * v50) = v52;
            v41 += v52;
            v50 += a2;
            v51 += 256;
            --v49;
          }
          while (v49);
LABEL_17:
          *(_DWORD *)(v16 + 4 * v21++) += v98 - v41;
          ++v24;
          ++v25;
          if (v21 == v93)
            return;
        }
      }
      v99 = (double)a1 * -0.5;
      v100 = (double)a1 * 0.5;
      v54 = 1.0 / (double)a1;
      v55 = (double *)v102;
      v56 = (double *)v103;
      v57 = 0.5;
      while (1)
      {
        v58 = 0;
        v59 = v96 * (double)v21;
        if (v59 >= v57 && v95 == 1)
          v59 = v59 + -1.0;
        v61 = v94 - v59;
        v62 = 0.0;
        v63 = v55;
        do
        {
          v66 = (v61 + (double)v58) * a7;
          v67 = cos(v66 * 3.14159265 * v54);
          v65 = 1.0;
          if (v66 != 0.0)
          {
            v65 = 0.0;
            if (v100 > v66 && v99 < v66)
            {
              v69 = sin(v66 * 3.14159265);
              v70 = v67 * v67;
              if (a7 < 1.0)
                v64 = v70 * v70 * v69;
              else
                v64 = v67 * v69 * v70;
              v65 = v64 / (v66 * 3.14159265);
            }
          }
          *v63 = v65;
          v62 = v65 + v62;
          ++v58;
          v63 += 32;
        }
        while (v17 != v58);
        v71 = a5 + 4 * v21;
        v72 = 1.0 / v62;
        if (v92)
        {
          v73 = 0;
          v74 = 0;
          v57 = 0.5;
        }
        else
        {
          v75 = 0;
          v76 = 0;
          v77 = 0;
          v78 = v56;
          v57 = 0.5;
          do
          {
            v79 = (int)(*(v78 - 32) * v14 * v72 + 0.5) & v15;
            v80 = (int)(*v78 * v14 * v72 + 0.5) & v15;
            v81 = (_DWORD *)(v71 + 4 * (v75 & 0xFFFFFFFE));
            *v81 = v79;
            v81[1] = v80;
            v76 += v79;
            v77 += v80;
            v75 += 2;
            v78 += 64;
          }
          while (v18 != v75);
          v74 = v77 + v76;
          v73 = v18;
          if (v18 == v17)
            goto LABEL_43;
        }
        v82 = v17 - v73;
        v83 = a2 * v73;
        v84 = v73 << 8;
        do
        {
          v85 = (int)(v57 + *(double *)((char *)v55 + v84) * v14 * v72) & v15;
          *(_DWORD *)(v71 + 4 * v83) = v85;
          v74 += v85;
          v83 += a2;
          v84 += 256;
          --v82;
        }
        while (v82);
LABEL_43:
        *(_DWORD *)(v16 + 4 * v21++) += v98 - v74;
        ++v55;
        ++v56;
        if (v21 == v93)
          return;
      }
    }
    if (a2 <= 7)
    {
      v53 = 0;
LABEL_72:
      v90 = a2 - v53;
      v91 = (_DWORD *)(a5 + 4 * v53 + 4 * v13);
      do
      {
        *v91++ += v98;
        --v90;
      }
      while (v90);
      return;
    }
    v53 = a2 & 0xFFFFFFF8;
    v86 = vdupq_n_s32(v98);
    v87 = (int32x4_t *)(a5 + 4 * v13 + 16);
    v88 = v53;
    do
    {
      v89 = vaddq_s32(v86, *v87);
      v87[-1] = vaddq_s32(v86, v87[-1]);
      *v87 = v89;
      v87 += 2;
      v88 -= 8;
    }
    while (v88);
    if (v53 != a2)
      goto LABEL_72;
  }
}

void sub_19FCEEED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1060C409B8FB70ALL);
  _Unwind_Resume(a1);
}

void sub_19FCEEF44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1060C409B8FB70ALL);
  _Unwind_Resume(a1);
}

unsigned int *md::HardwareScaler::HardwareScaler(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  __CFRunLoop *Main;
  __CFRunLoopSource *RunLoopSource;
  uint64_t v13;
  unsigned int v14;
  const __CFDictionary *v15;
  const __CFNumber *Value;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char buffer[256];
  __int128 valuePtr;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  a1[4] = a2;
  a1[5] = a3;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  IOSurfaceAcceleratorCreate();
  v7 = v4(v5, v6);
  *a1 = v7;
  if (!v7)
  {
    *a1 = v8(v9, v10);
  }
  Main = CFRunLoopGetMain();
  RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
  CFRunLoopAddSource(Main, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E4298EF8;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_QWORD *)(v13 + 88) = 0;
  *((_QWORD *)a1 + 3) = v13;
  v14 = a1[5];
  CFStringGetCString(CFSTR("IOSurfaceAcceleratorFilterHorizontalTapsCount"), buffer, 256, 0x600u);
  Value = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("IOSurfaceAcceleratorFilterHorizontalTapsCount"));
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  CFStringGetCString(CFSTR("IOSurfaceAcceleratorFilterVerticalTapsCount"), buffer, 256, 0x600u);
  v17 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("IOSurfaceAcceleratorFilterVerticalTapsCount"));
  CFNumberGetValue(v17, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFStringGetCString(CFSTR("IOSurfaceAcceleratorFilterHorizontalPhasesCount"), buffer, 256, 0x600u);
  v18 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("IOSurfaceAcceleratorFilterHorizontalPhasesCount"));
  CFNumberGetValue(v18, kCFNumberSInt32Type, (char *)&valuePtr + 8);
  CFStringGetCString(CFSTR("IOSurfaceAcceleratorFilterVerticalPhasesCount"), buffer, 256, 0x600u);
  v19 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("IOSurfaceAcceleratorFilterVerticalPhasesCount"));
  CFNumberGetValue(v19, kCFNumberSInt32Type, (void *)((unint64_t)&valuePtr | 0xC));
  CFStringGetCString(CFSTR("IOSurfaceAcceleratorFilterCoefficientsPrePointBits"), buffer, 256, 0x600u);
  v20 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("IOSurfaceAcceleratorFilterCoefficientsPrePointBits"));
  CFNumberGetValue(v20, kCFNumberSInt32Type, v39);
  CFStringGetCString(CFSTR("IOSurfaceAcceleratorFilterCoefficientsPostPointBits"), buffer, 256, 0x600u);
  v21 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("IOSurfaceAcceleratorFilterCoefficientsPostPointBits"));
  CFNumberGetValue(v21, kCFNumberSInt32Type, (char *)v39 + 4);
  CFRelease(v15);
  *(_OWORD *)(v13 + 8) = valuePtr;
  *(_QWORD *)(v13 + 24) = v39[0];
  *(_DWORD *)(v13 + 32) = v14;
  v22 = *(void **)(v13 + 40);
  if (v22)
    free(v22);
  v23 = *(void **)(v13 + 48);
  if (v23)
    free(v23);
  v24 = *(void **)(v13 + 56);
  if (v24)
    free(v24);
  v25 = *(void **)(v13 + 64);
  if (v25)
    free(v25);
  v26 = *(void **)(v13 + 72);
  if (v26)
    free(v26);
  v27 = *(void **)(v13 + 80);
  if (v27)
    free(v27);
  v28 = *(void **)(v13 + 88);
  if (v28)
    free(v28);
  *(_QWORD *)(v13 + 40) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  *(_QWORD *)(v13 + 48) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  *(_QWORD *)(v13 + 56) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  *(_QWORD *)(v13 + 64) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  *(_QWORD *)(v13 + 72) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  *(_QWORD *)(v13 + 80) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  v29 = 0;
  *(_QWORD *)(v13 + 88) = malloc_type_malloc(4* (2* (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12)+ *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8))), 0x100004052888210uLL);
  do
  {
    v30 = *(_QWORD *)(v13 + 40 + 8 * v29);
    v31 = flt_1A007DD24[v29];
    md::HardwareScalerFilter::coefficients(*(_DWORD *)(v13 + 12), *(_DWORD *)(v13 + 20), *(_DWORD *)(v13 + 24), *(_DWORD *)(v13 + 28), v30, *(_DWORD *)(v13 + 32), v31);
    v32 = *(_DWORD *)(v13 + 12);
    v33 = *(_DWORD *)(v13 + 20);
    v34 = v30 + 4 * v33 * v32;
    md::HardwareScalerFilter::coefficients(v32, v33, *(_DWORD *)(v13 + 24), *(_DWORD *)(v13 + 28), v34, *(_DWORD *)(v13 + 32), v31);
    v35 = v34 + 4 * (*(_DWORD *)(v13 + 20) * *(_DWORD *)(v13 + 12));
    md::HardwareScalerFilter::coefficients(*(_DWORD *)(v13 + 8), *(_DWORD *)(v13 + 16), *(_DWORD *)(v13 + 24), *(_DWORD *)(v13 + 28), v35, *(_DWORD *)(v13 + 32), v31);
    md::HardwareScalerFilter::coefficients(*(_DWORD *)(v13 + 8), *(_DWORD *)(v13 + 16), *(_DWORD *)(v13 + 24), *(_DWORD *)(v13 + 28), v35 + 4 * (*(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 8)), *(_DWORD *)(v13 + 32), v31);
    ++v29;
  }
  while (v29 != 7);
  return a1;
}

__CFDictionary *`anonymous namespace'::SetAccelOptions(_anonymous_namespace_ *this)
{
  int v1;
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;
  const void *v5;
  CFNumberRef v6;
  int valuePtr;

  v1 = (int)this;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A340], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A248], v3);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A280], v3);
  v4 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v1)
    v5 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v5 = v3;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A328], v5);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A348], v4);
  valuePtr = 0;
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A228], v6);
  CFRelease(v6);
  return Mutable;
}

uint64_t md::HardwareScaler::scaleSync(int a1, IOSurfaceRef buffer)
{
  IOSurfaceGetWidth(buffer);
  IOSurfaceGetHeight(buffer);
  IOSurfaceAcceleratorSetCustomFilter();
  return IOSurfaceAcceleratorTransformSurface();
}

void md::RunLoopController::setNeedsLayoutContinously(md::RunLoopController *this, int a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (this && *((unsigned __int8 *)this + 1160) != a2)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = "True";
      if (*((_BYTE *)this + 1160))
        v6 = "True";
      else
        v6 = "False";
      if (!a2)
        v5 = "False";
      v7 = 136315394;
      v8 = v6;
      v9 = 2080;
      v10 = v5;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Layout Continuously changed from '%s' to '%s'", (uint8_t *)&v7, 0x16u);
    }

    *((_BYTE *)this + 1160) = a2;
  }
}

void md::LabelsExternalMeshLogic::~LabelsExternalMeshLogic(md::LabelsExternalMeshLogic *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E429ECC0;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E429ECC0;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

char *md::LabelsExternalMeshLogic::createDebugNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *result;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  char v19;

  strcpy((char *)a2, "LabelExternalMeshLogic");
  *(_BYTE *)(a2 + 23) = 22;
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  result = *(char **)(a1 + 120);
  if (result)
  {
    v5 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>((uint64_t)result);
    v6 = (_QWORD *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(*(_QWORD *)(a1 + 120));
    v19 = 15;
    strcpy((char *)&v18, "PendingRequests");
    v7 = *(_QWORD *)(v5 + 88) - *(_QWORD *)(v5 + 80);
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v14 = 0;
    v13 = (v7 >> 4);
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)&v18, (uint64_t)v12);
    v19 = 14;
    strcpy((char *)&v18, "ExternalMeshes");
    result = gdc::DebugTreeNode::createChildNode(a2, &v18);
    v8 = v6[7];
    v9 = v6[8];
    if (v8 != v9)
    {
      v10 = (uint64_t)result;
      v11 = v6[10];
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v11 + 4) == 1)
        {
          v19 = 15;
          strcpy((char *)&v18, "ARFeatureShadow");
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)v11 + 4))
            goto LABEL_6;
          v19 = 9;
          strcpy((char *)&v18, "ARArrival");
        }
        result = gdc::DebugTreeNode::createChildNode(v10, &v18);
LABEL_6:
        v11 += 16;
        v8 += 8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

void sub_19FCEFC68(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::LabelsExternalMeshContext]";
  v4[3] = 29;
  v4[4] = result;
  *v4 = &off_1E42B12E8;
  v4[1] = 0xF409241CDA31AF08;
  *a2 = v4;
  return result;
}

void sub_19FCEFD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xF409241CDA31AF08 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xA588623CD4116DAELL;
    if (*(_QWORD *)&v4 <= 0xA588623CD4116DAELL)
      v6 = 0xA588623CD4116DAELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0xA588623CD4116DAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xF409241CDA31AF08 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xA588623CD4116DAELL;
    if (*(_QWORD *)&v4 <= 0xA588623CD4116DAELL)
      v6 = 0xA588623CD4116DAELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0xA588623CD4116DAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xF409241CDA31AF08 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xA588623CD4116DAELL;
    if (*(_QWORD *)&v4 <= 0xA588623CD4116DAELL)
      v6 = 0xA588623CD4116DAELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0xA588623CD4116DAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xF409241CDA31AF08 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xA588623CD4116DAELL;
    if (*(_QWORD *)&v4 <= 0xA588623CD4116DAELL)
      v6 = 0xA588623CD4116DAELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0xA588623CD4116DAELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xF409241CDA31AF08 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xA588623CD4116DAELL;
    if (*(_QWORD *)&v5 <= 0xA588623CD4116DAELL)
      v7 = 0xA588623CD4116DAELL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0xA588623CD4116DAELL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0xA588623CD4116DAELL)
      {
        if (v9[2] == 0xA588623CD4116DAELL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0xA588623CD4116DAELL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0xA588623CD4116DAELL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0xA588623CD4116DAELL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::LabelsExternalMeshLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t *v7;
  int **v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  const double *v36;
  const double *v37;
  double *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  NSObject *v58;
  int v59;
  const char *v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::mutex *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  _OWORD *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  unint64_t *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 *v109;
  _OWORD *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t *v122;
  uint64_t *v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  _OWORD *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  NSObject *v133;
  int v134;
  const char *v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t *v138;
  uint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t *v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t *v150;
  uint64_t *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t *v181;
  uint64_t *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t *v187;
  uint64_t *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  _BYTE *v222;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  unint64_t **v236;
  unint64_t *v238;
  unint64_t *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t *v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unint64_t *v263;
  unint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t *v271;
  uint64_t *v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  NSObject *v286;
  int v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  __int128 v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t *v308;
  _QWORD *v309;
  char v310;
  uint64_t v311;
  __int128 v312;
  std::__shared_weak_count *v313;
  unint64_t *p_shared_owners;
  unint64_t v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t *v322;
  _QWORD *v323;
  char v324;
  uint64_t v325;
  _QWORD *k;
  uint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  size_t v345;
  char *v346;
  char *v347;
  unint64_t *v348;
  unint64_t v349;
  char *v350;
  __int128 v351;
  char *v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  char *v356;
  char *v357;
  _QWORD *m;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t *v364;
  _QWORD *v365;
  char v366;
  uint64_t v367;
  _QWORD *n;
  uint64_t v369;
  unint64_t v370;
  _BYTE *v371;
  uint64_t v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  size_t v377;
  char *v378;
  uint64_t v379;
  _QWORD *j;
  uint64_t v381;
  _QWORD *i;
  uint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t v391;
  uint8x8_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t *v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  char *v399;
  char *v400;
  _QWORD *ii;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v414;
  _BYTE *v415;
  uint64_t *v417;
  _QWORD *v418;
  char v419;
  _BYTE *v420;
  uint64_t v421;
  _QWORD *jj;
  uint64_t v423;
  unint64_t v424;
  _BYTE *v425;
  uint64_t v426;
  _BYTE *v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  size_t v431;
  char *v432;
  char *v433;
  unint64_t v434;
  _QWORD *v435;
  int v436;
  char *v437;
  __int128 *v438;
  unint64_t v439;
  __int128 v440;
  unint64_t v441;
  _BYTE *v442;
  char *v443;
  uint64_t *v444;
  uint64_t v445;
  char *v446;
  char v447;
  _QWORD *kk;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  BOOL v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t *v460;
  uint64_t *v461;
  uint64_t *v462;
  _QWORD *v463;
  char v464;
  _QWORD *v465;
  uint64_t v466;
  _QWORD *mm;
  uint64_t v468;
  unint64_t v469;
  char *v470;
  _QWORD *v471;
  char *v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  _BYTE *v477;
  _QWORD *v478;
  unint64_t v479;
  uint64_t v480;
  _OWORD *v481;
  char *v482;
  uint64_t v483;
  __int128 v484;
  uint64_t v485;
  _QWORD *nn;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t *v491;
  unint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v501;
  _BYTE *v502;
  uint64_t *v504;
  _QWORD *v505;
  char v506;
  _BYTE *v507;
  uint64_t v508;
  _QWORD *i1;
  uint64_t v510;
  unint64_t v511;
  _BYTE *v512;
  uint64_t v513;
  _BYTE *v514;
  unint64_t v515;
  uint64_t v516;
  unint64_t v517;
  size_t v518;
  char *v519;
  char *v520;
  unint64_t v521;
  uint64_t *v522;
  _QWORD *v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  char *v528;
  __int128 *v529;
  unint64_t v530;
  __int128 v531;
  unint64_t v532;
  _BYTE *v533;
  char *v534;
  uint64_t *v535;
  uint64_t v536;
  char *v537;
  char v538;
  _QWORD *i2;
  uint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  BOOL v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t *v551;
  _QWORD *v552;
  char v553;
  uint64_t v554;
  _QWORD *i21;
  uint64_t v556;
  unint64_t v557;
  _BYTE *v558;
  uint64_t v559;
  char *v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  size_t v564;
  char *v565;
  char *v566;
  char *v567;
  _QWORD *i22;
  uint64_t v569;
  uint64_t *v570;
  uint64_t *v571;
  _QWORD *v572;
  char v573;
  uint64_t v574;
  __int128 v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  unint64_t v579;
  char *v580;
  unint64_t *v581;
  unint64_t v582;
  char *v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  unint64_t v587;
  char *v588;
  char *v589;
  unint64_t *v590;
  unint64_t v591;
  char *v592;
  __int128 v593;
  char *v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  uint64_t v598;
  _QWORD *i4;
  uint64_t v600;
  _QWORD *i3;
  uint64_t v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  unint64_t v606;
  uint64_t *v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint8x8_t v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  double v616;
  uint64_t v617;
  __int128 v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  uint64_t *v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  uint64_t v629;
  __int128 v630;
  unint64_t *v631;
  unint64_t v632;
  uint64_t *v633;
  _QWORD *v634;
  char v635;
  uint64_t v636;
  __int128 v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t v641;
  char *v642;
  unint64_t *v643;
  unint64_t v644;
  char *v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  unint64_t v649;
  char *v650;
  char *v651;
  unint64_t *v652;
  unint64_t v653;
  char *v654;
  __int128 v655;
  char *v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  _QWORD *i6;
  uint64_t v662;
  _QWORD *i5;
  uint64_t v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  uint64_t *v668;
  _QWORD *v669;
  char v670;
  unint64_t *v671;
  uint64_t v672;
  _QWORD *i7;
  uint64_t v674;
  unint64_t v675;
  unint64_t *v676;
  _QWORD *v677;
  unint64_t *v678;
  uint64_t v679;
  unint64_t v680;
  uint64_t v681;
  unint64_t v682;
  char *v683;
  unint64_t *v684;
  unint64_t *v685;
  _QWORD *i8;
  uint64_t v687;
  uint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v698;
  uint64_t v700;
  unint64_t v701;
  _QWORD *v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  BOOL v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t *v713;
  unint64_t *v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t *v717;
  _QWORD *v718;
  char v719;
  uint64_t v720;
  void *v721;
  uint64_t v722;
  _QWORD *i19;
  uint64_t v724;
  unint64_t v725;
  _QWORD *v726;
  _QWORD *v727;
  _QWORD *v728;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  char *v732;
  char *v733;
  char *v734;
  char *v735;
  __int128 v736;
  _QWORD *v737;
  _QWORD *v738;
  _QWORD *v739;
  void *v740;
  void *v741;
  _QWORD *i20;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  _QWORD *v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  BOOL v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t v756;
  _QWORD *v757;
  unint64_t *v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t v762;
  unint64_t v763;
  _BYTE *v764;
  unint64_t *v765;
  unint64_t v766;
  unint64_t *v767;
  uint64_t v768;
  _OWORD *v769;
  unint64_t *v770;
  uint64_t v771;
  __int128 v772;
  unint64_t v773;
  _QWORD *v774;
  uint64_t v775;
  unint64_t v776;
  _QWORD *v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v785;
  size_t *v786;
  uint64_t v788;
  unsigned __int8 v789;
  unint64_t v790;
  uint64_t *v791;
  _QWORD *v792;
  char v793;
  uint64_t v794;
  uint64_t v795;
  _QWORD *i9;
  uint64_t v797;
  unint64_t v798;
  _BYTE *v799;
  _BYTE *v800;
  uint64_t v801;
  unint64_t v802;
  unint64_t v803;
  unint64_t v804;
  char *v805;
  char *v806;
  uint64_t v807;
  uint64_t v808;
  char v809;
  _QWORD *i10;
  uint64_t v811;
  uint64_t v812;
  _QWORD *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v822;
  uint64_t v824;
  unint64_t v825;
  _QWORD *v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  BOOL v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  unint64_t *v837;
  unint64_t *v838;
  uint64_t v839;
  unint64_t v840;
  uint64_t *v841;
  _QWORD *v842;
  char v843;
  uint64_t v844;
  void *v845;
  uint64_t v846;
  _QWORD *i17;
  uint64_t v848;
  unint64_t v849;
  _QWORD *v850;
  _QWORD *v851;
  _QWORD *v852;
  unint64_t v853;
  unint64_t v854;
  unint64_t v855;
  char *v856;
  char *v857;
  char *v858;
  __int128 v859;
  _QWORD *v860;
  _QWORD *v861;
  _QWORD *v862;
  void *v863;
  void *v864;
  _QWORD *i18;
  uint64_t v866;
  uint64_t v867;
  unint64_t v868;
  _QWORD *v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  BOOL v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  _QWORD *v880;
  unint64_t *v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  unint64_t v886;
  unint64_t v887;
  _BYTE *v888;
  unint64_t *v889;
  unint64_t v890;
  unint64_t *v891;
  uint64_t v892;
  _OWORD *v893;
  unint64_t *v894;
  uint64_t v895;
  __int128 v896;
  unint64_t v897;
  uint64_t v898;
  unint64_t v899;
  _QWORD *v900;
  uint64_t v901;
  uint64_t v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v908;
  size_t *v909;
  uint64_t v911;
  unsigned __int8 v912;
  unint64_t v913;
  uint64_t *v914;
  _QWORD *v915;
  char v916;
  uint64_t v917;
  uint64_t v918;
  _QWORD *i11;
  uint64_t v920;
  unint64_t v921;
  _BYTE *v922;
  _BYTE *v923;
  uint64_t v924;
  unint64_t v925;
  unint64_t v926;
  unint64_t v927;
  char *v928;
  char *v929;
  uint64_t v930;
  uint64_t v931;
  char v932;
  _QWORD *i12;
  uint64_t v934;
  uint64_t v935;
  _QWORD *v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v946;
  char *v947;
  uint64_t v949;
  unint64_t v950;
  _QWORD *v951;
  uint64_t v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  BOOL v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unint64_t *v962;
  unint64_t *v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t *v966;
  _QWORD *v967;
  uint64_t *v968;
  char v969;
  uint64_t v970;
  void *v971;
  uint64_t v972;
  uint64_t v973;
  _QWORD *i15;
  uint64_t v975;
  unint64_t v976;
  _QWORD *v977;
  _QWORD *v978;
  _QWORD *v979;
  unint64_t v980;
  unint64_t v981;
  unint64_t v982;
  char *v983;
  char *v984;
  char *v985;
  char *v986;
  __int128 v987;
  _QWORD *v988;
  _QWORD *v989;
  _QWORD *v990;
  void *v991;
  void *v992;
  _QWORD *i16;
  uint64_t v994;
  uint64_t v995;
  unint64_t v996;
  _QWORD *v997;
  uint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  BOOL v1004;
  uint64_t v1005;
  uint64_t v1006;
  unint64_t v1007;
  _QWORD *v1008;
  unint64_t *v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  _BYTE *v1015;
  unint64_t *v1016;
  unint64_t v1017;
  unint64_t *v1018;
  uint64_t v1019;
  _OWORD *v1020;
  unint64_t *v1021;
  uint64_t v1022;
  __int128 v1023;
  unint64_t v1024;
  _QWORD *v1025;
  uint64_t v1026;
  unint64_t v1027;
  _QWORD *v1028;
  uint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1036;
  size_t *v1037;
  uint64_t v1039;
  char v1040;
  unint64_t v1041;
  uint64_t *v1042;
  _QWORD *v1043;
  char v1044;
  uint64_t v1045;
  uint64_t v1046;
  _QWORD *i13;
  uint64_t v1048;
  unint64_t v1049;
  _BYTE *v1050;
  _BYTE *v1051;
  uint64_t v1052;
  unint64_t v1053;
  unint64_t v1054;
  unint64_t v1055;
  char *v1056;
  char *v1057;
  uint64_t v1058;
  uint64_t v1059;
  char v1060;
  _QWORD *i14;
  uint64_t v1062;
  unint64_t *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  NSObject *v1072;
  uint64_t v1073;
  NSObject *v1074;
  double v1075;
  uint64_t v1076;
  double v1077;
  void *v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t *v1081;
  __int128 v1082;
  unint64_t *v1083;
  unint64_t *v1084;
  unint64_t v1085;
  _QWORD *v1086;
  _QWORD *v1087;
  unint64_t v1088;
  unsigned int v1089;
  unsigned int v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned __int16 *v1094;
  _QWORD *v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  unint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  _QWORD *v1104;
  unint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1113;
  uint64_t v1115;
  uint64_t *v1116;
  uint64_t *v1117;
  _QWORD *v1118;
  uint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1126;
  float *v1127;
  float v1129;
  uint64_t *v1130;
  unint64_t *v1131;
  unint64_t *v1132;
  uint64_t v1133;
  unint64_t *v1134;
  unint64_t v1135;
  uint64_t v1136;
  char *v1137;
  char *v1138;
  uint64_t *v1139;
  uint64_t *v1140;
  unint64_t v1141;
  char *v1142;
  uint64_t v1143;
  uint64_t v1144;
  __int128 *v1145;
  _OWORD *v1146;
  uint64_t v1147;
  __int128 v1148;
  NSObject *v1149;
  int v1150;
  const char *v1151;
  unint64_t *v1152;
  unint64_t *v1153;
  unint64_t v1154;
  unint64_t v1155;
  int64_t v1157;
  _QWORD *v1158;
  uint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1166;
  unint64_t *v1167;
  uint64_t v1169;
  unint64_t v1170;
  _QWORD *v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  BOOL v1178;
  uint64_t v1179;
  uint64_t v1180;
  unint64_t *v1181;
  unint64_t *v1182;
  unint64_t v1183;
  char *v1184;
  unint64_t v1185;
  char *v1186;
  char *v1187;
  uint64_t v1188;
  uint64_t v1189;
  char *v1190;
  unint64_t v1191;
  int64_t v1192;
  uint64_t v1193;
  uint64_t *v1194;
  unint64_t v1195;
  char *v1196;
  unint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  BOOL v1200;
  char *v1201;
  uint64_t v1202;
  uint64_t v1203;
  _OWORD *v1204;
  __int128 *v1205;
  uint64_t v1206;
  __int128 v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  unint64_t v1211;
  char *v1212;
  char *v1213;
  char *v1214;
  char *v1215;
  unint64_t v1216;
  char *v1217;
  _BYTE *v1218;
  unint64_t v1219;
  uint64_t v1220;
  char *v1221;
  char *v1222;
  unint64_t v1223;
  uint64_t v1224;
  char *v1225;
  char *v1226;
  __int128 *v1227;
  uint64_t v1228;
  __int128 v1229;
  uint64_t v1230;
  _BYTE *v1231;
  uint64_t v1232;
  char *v1233;
  void *v1234;
  char *v1235;
  char *v1236;
  uint64_t v1237;
  unint64_t v1238;
  int64_t v1240;
  uint64_t *v1241;
  uint64_t v1242;
  uint64_t *v1243;
  uint64_t *v1244;
  _QWORD *v1245;
  uint64_t v1246;
  unint64_t v1247;
  _QWORD *v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  BOOL v1255;
  uint64_t v1256;
  BOOL v1257;
  unint64_t v1258;
  _QWORD *v1259;
  uint64_t v1260;
  uint64_t v1261;
  unint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  BOOL v1266;
  _QWORD *v1267;
  _QWORD *v1268;
  uint64_t v1269;
  uint64_t v1270;
  void *v1271;
  int v1272;
  void *v1273;
  float v1274;
  void *v1275;
  float v1276;
  void *v1277;
  int v1278;
  void *v1279;
  float v1280;
  void *v1281;
  float v1282;
  void *v1283;
  float v1284;
  void *v1285;
  float v1286;
  void *v1287;
  float v1288;
  float v1289;
  void *v1290;
  int v1291;
  int v1292;
  void *v1293;
  float v1294;
  float v1295;
  void *v1296;
  float v1297;
  float v1298;
  void *v1299;
  float v1300;
  float v1301;
  float v1302;
  uint64_t *JumpAndRotate;
  char v1304;
  uint64_t v1305;
  unint64_t *v1306;
  char v1307;
  unint64_t v1308;
  _QWORD *v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1318;
  float *v1319;
  float v1321;
  uint64_t *v1322;
  uint64_t v1323;
  _QWORD *v1324;
  uint64_t v1325;
  uint64_t v1326;
  unint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  BOOL v1331;
  uint64_t *v1332;
  _QWORD *v1333;
  uint64_t v1334;
  unint64_t *v1335;
  uint64_t v1336;
  unint64_t *v1337;
  unint64_t v1338;
  uint64_t v1339;
  char *v1340;
  char *v1341;
  uint64_t *v1342;
  uint64_t *v1343;
  unint64_t v1344;
  char *v1345;
  uint64_t v1346;
  uint64_t v1347;
  __int128 *v1348;
  _OWORD *v1349;
  uint64_t v1350;
  __int128 v1351;
  uint64_t v1352;
  uint64_t v1353;
  unint64_t *v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t *v1357;
  uint64_t v1358;
  unint64_t *v1359;
  uint64_t v1360;
  _QWORD *v1361;
  uint64_t *v1362;
  unint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  uint64_t v1371;
  unint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  BOOL v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t *v1381;
  unint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  unint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t *v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t *v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t *v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  void *v1404;
  std::__shared_weak_count *v1405;
  unint64_t *v1406;
  unint64_t v1407;
  uint64_t *v1408;
  unint64_t v1409;
  unint64_t v1410;
  uint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  uint64_t v1420;
  unint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  unint64_t v1429;
  uint64_t v1430;
  unint64_t v1431;
  uint64_t v1432;
  unint64_t v1433;
  uint64_t v1434;
  BOOL v1435;
  uint64_t *v1436;
  uint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  uint64_t *v1441;
  unint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1451;
  unint64_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  unint64_t v1457;
  uint64_t v1458;
  unint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  BOOL v1465;
  uint64_t *v1466;
  unint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  unint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  unint64_t v1482;
  uint64_t v1483;
  unint64_t v1485;
  unint64_t v1486;
  uint64_t v1487;
  unint64_t v1488;
  uint64_t v1489;
  BOOL v1490;
  uint64_t v1491;
  unint64_t v1492;
  unint64_t v1493;
  uint64_t v1494;
  unint64_t v1495;
  uint64_t v1496;
  unint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  uint64_t v1501;
  uint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  unint64_t v1512;
  uint64_t v1513;
  unint64_t v1514;
  uint64_t v1515;
  unint64_t v1516;
  uint64_t v1517;
  BOOL v1518;
  uint64_t *v1519;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t v1522;
  uint64_t v1524;
  unint64_t v1525;
  unint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1534;
  unint64_t v1535;
  uint64_t v1536;
  unint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  unint64_t v1540;
  uint64_t v1541;
  unint64_t v1543;
  unint64_t v1544;
  uint64_t v1545;
  unint64_t v1546;
  uint64_t v1547;
  BOOL v1548;
  uint64_t *v1549;
  unint64_t v1550;
  unint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  unint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1559;
  unint64_t v1560;
  uint64_t v1561;
  unint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  unint64_t v1565;
  uint64_t v1566;
  unint64_t v1568;
  unint64_t v1569;
  uint64_t v1570;
  unint64_t v1571;
  uint64_t v1572;
  BOOL v1573;
  unsigned __int8 *v1574;
  uint64_t v1575;
  float v1576;
  float v1578;
  float v1579;
  float v1580;
  int v1581;
  float v1582;
  float v1583;
  _QWORD *v1584;
  uint64_t v1585;
  float32x4_t v1586;
  _QWORD *v1587;
  int v1588;
  unint64_t *v1589;
  unint64_t *v1590;
  uint64_t v1591;
  unint64_t *v1592;
  uint64_t v1593;
  unint64_t v1594;
  unint64_t *v1595;
  int v1596;
  unint64_t v1597;
  char *v1598;
  __int128 v1600;
  __int128 v1601;
  unint64_t *v1602;
  unint64_t v1603;
  _BYTE v1604[32];
  unint64_t v1605;
  unint64_t v1606;
  _QWORD v1607[3];
  _QWORD *v1608;
  _QWORD v1609[3];
  _QWORD *v1610;
  _BYTE v1611[40];
  unint64_t v1612;
  _BYTE v1613[24];
  uint64_t v1614;
  uint8_t buf[24];
  uint64_t v1616;
  float64x2x2_t v1617;
  float64x2x2_t v1618;

  v1616 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 120))
    return;
  v3 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v3)
    return;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 168) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(v3 + 168) + 64));
  if (!v4)
    return;
  v1575 = v4;
  *(_QWORD *)v1611 = &v1611[32];
  *(_QWORD *)&v1611[8] = &v1611[32];
  *(_QWORD *)&v1611[16] = &v1611[32];
  *(_QWORD *)&v1611[24] = 4;
  *(_QWORD *)&v1601 = v1604;
  *((_QWORD *)&v1601 + 1) = v1604;
  v1602 = (unint64_t *)v1604;
  v1603 = 4;
  v5 = (_QWORD *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(*(_QWORD *)(a1 + 120));
  v6 = (unint64_t *)v5[7];
  v7 = (unint64_t *)v5[8];
  if (v6 != v7)
  {
    v8 = (int **)v5[10];
    while (1)
    {
      v9 = *v6;
      v10 = atomic_load((unsigned __int8 *)*v8 + 116);
      if ((v10 & 1) != 0)
        break;
LABEL_6:
      v8 += 2;
      if (++v6 == v7)
        goto LABEL_58;
    }
    v11 = (uint64_t *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(_QWORD *)(a1 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, v9);
    v12 = (_QWORD *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(_QWORD *)(a1 + 120));
    v13 = v12[4];
    if (v9 >> 39 < (v12[5] - v13) >> 3)
    {
      v14 = *(_QWORD *)(v13 + 8 * (v9 >> 39));
      if (v14)
      {
        v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v9) & 0x7F));
        v17 = v12[7];
        v16 = v12[8];
        if (v15 < (v16 - v17) >> 3)
        {
          v18 = v17 + 8 * v15;
          if (v18 != v16 && *(_DWORD *)(v18 + 4) == HIDWORD(v9))
          {
            v20 = v12[10];
            if (v20)
            {
              v21 = (uint64_t *)(v20 + 16 * v15);
              if (v21 != (uint64_t *)v12[11])
              {
                v22 = *v21;
                v23 = (uint64_t *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(_QWORD *)(a1 + 120));
                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v23, v22);
                v24 = *(_QWORD *)(v20 + 16 * v15 + 8);
                v25 = (uint64_t *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(_QWORD *)(a1 + 120));
                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v25, v24);
              }
            }
          }
        }
      }
    }
    v27 = *(char **)(a1 + 176);
    v26 = *(char **)(a1 + 184);
    if (v27 == v26)
    {
      v28 = *(char **)(a1 + 176);
    }
    else
    {
      v28 = *(char **)(a1 + 176);
      while (*v8 != *(int **)v28)
      {
        v28 += 16;
        if (v28 == v26)
          goto LABEL_34;
      }
    }
    if (v28 == v26)
    {
LABEL_34:
      v40 = *(_QWORD *)v1611;
      v39 = *(unint64_t **)&v1611[8];
      v41 = (uint64_t)(*(_QWORD *)&v1611[8] - *(_QWORD *)v1611) >> 3;
      if (*(_QWORD *)&v1611[24] >= (unint64_t)(v41 + 1))
      {
LABEL_52:
        *v39 = v9;
        *(_QWORD *)&v1611[8] += 8;
        if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
        v58 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
        {
          v59 = **v8;
          v60 = "ARFeatureShadow";
          if (!*((_BYTE *)*v8 + 4))
            v60 = "ARArrival";
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v59;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v60;
          _os_log_impl(&dword_19F029000, v58, OS_LOG_TYPE_INFO, "Queuing external mesh for deletion (id:%d type:%s)", buf, 0x12u);
        }
        goto LABEL_6;
      }
      v42 = *(_QWORD *)&v1611[16];
      v43 = (1 << -(char)__clz(*(_QWORD *)&v1611[24] + 1));
      if (*(_QWORD *)&v1611[24] >= 0xFFFFFFFFFFFFFFFELL)
        v43 = 1;
      if (v43 <= v41 + 1)
        v44 = v41 + 1;
      else
        v44 = v43;
      v45 = (char *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
      v46 = v45;
      v47 = *(uint64_t **)v1611;
      v48 = *(uint64_t **)&v1611[8];
      if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
      {
        v49 = *(_QWORD *)&v1611[8] - *(_QWORD *)v1611 - 8;
        if (v49 < 0x18)
        {
          v50 = v45;
        }
        else
        {
          v50 = v45;
          if ((unint64_t)&v45[-*(_QWORD *)v1611] >= 0x20)
          {
            v51 = (v49 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v50 = &v45[v52];
            v53 = (__int128 *)(*(_QWORD *)v1611 + 16);
            v54 = v45 + 16;
            v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *v53;
              *(v54 - 1) = *(v53 - 1);
              *v54 = v56;
              v53 += 2;
              v54 += 2;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_49;
            v47 = (uint64_t *)((char *)v47 + v52);
          }
        }
        do
        {
          v57 = *v47++;
          *(_QWORD *)v50 = v57;
          v50 += 8;
        }
        while (v47 != v48);
      }
LABEL_49:
      if (v40 != v42)
        free(*(void **)v1611);
      v39 = (unint64_t *)&v46[8 * v41];
      *(_QWORD *)v1611 = v46;
      *(_QWORD *)&v1611[8] = v39;
      *(_QWORD *)&v1611[24] = v44;
      goto LABEL_52;
    }
    v29 = v28 + 16;
    if (v28 + 16 != v26)
    {
      v30 = v26 - v28 - 32;
      if (v30 >= 0x30)
      {
        v31 = (v28 - v27) >> 4;
        v32 = (v30 >> 4) + 1;
        v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFCLL);
        v28 += v33;
        v34 = (double *)&v27[16 * v31 + 32];
        v35 = v32 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = v34 - 2;
          v1617 = vld2q_f64(v36);
          v37 = v34 + 2;
          v1618 = vld2q_f64(v37);
          v38 = v34 - 4;
          vst2q_f64(v38, v1617);
          vst2q_f64(v34, v1618);
          v34 += 8;
          v35 -= 4;
        }
        while (v35);
        if (v32 == (v32 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
        v29 += v33;
      }
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
        v28 += 16;
        v29 += 16;
      }
      while (v29 != v26);
    }
LABEL_33:
    *(_QWORD *)(a1 + 184) = v28;
    goto LABEL_34;
  }
LABEL_58:
  v61 = (_QWORD *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(*(_QWORD *)(a1 + 120));
  v62 = (unint64_t *)v61[7];
  v63 = (unint64_t *)v61[8];
  if (v62 != v63)
  {
    v64 = (uint64_t *)v61[10];
    while (1)
    {
      v65 = *v62;
      v66 = *v64;
      v67 = (std::mutex *)(*v64 + 96);
      std::mutex::lock(v67);
      LODWORD(v66) = *(unsigned __int8 *)(v66 + 176);
      std::mutex::unlock(v67);
      if ((_DWORD)v66 == 4)
        break;
LABEL_60:
      v64 += 2;
      if (++v62 == v63)
        goto LABEL_133;
    }
    v68 = (_QWORD *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(_QWORD *)(a1 + 120));
    v69 = v68[4];
    if (v65 >> 39 >= (v68[5] - v69) >> 3)
      goto LABEL_109;
    v70 = *(_QWORD *)(v69 + 8 * (v65 >> 39));
    if (!v70)
      goto LABEL_109;
    v71 = *(unsigned __int16 *)(v70 + 2 * (HIDWORD(v65) & 0x7F));
    v73 = v68[7];
    v72 = v68[8];
    if (v71 >= (v72 - v73) >> 3)
      goto LABEL_109;
    v74 = v73 + 8 * v71;
    v75 = v74 != v72 && *(_DWORD *)(v74 + 4) == HIDWORD(v65);
    if (!v75 || (v76 = v68[10]) == 0 || (v77 = (_QWORD *)(v76 + 16 * v71), v77 == (_QWORD *)v68[11]))
    {
LABEL_109:
      v114 = (char *)*((_QWORD *)&v1601 + 1);
      v115 = (unint64_t *)v1601;
      v116 = (uint64_t)(*((_QWORD *)&v1601 + 1) - v1601) >> 3;
      if (v1603 >= v116 + 1)
      {
LABEL_127:
        *(_QWORD *)v114 = v65;
        *((_QWORD *)&v1601 + 1) += 8;
        if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
        v133 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
        {
          v134 = *(_DWORD *)(*v64 + 8);
          v135 = "ARFeatureShadow";
          if (!*(_BYTE *)(*v64 + 12))
            v135 = "ARArrival";
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v134;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v135;
          _os_log_impl(&dword_19F029000, v133, OS_LOG_TYPE_INFO, "Dropping canceled mesh request (id:%d type:%s)", buf, 0x12u);
        }
        goto LABEL_60;
      }
      v117 = v1602;
      v118 = (1 << -(char)__clz(v1603 + 1));
      if (v1603 >= 0xFFFFFFFFFFFFFFFELL)
        v118 = 1;
      if (v118 <= v116 + 1)
        v119 = v116 + 1;
      else
        v119 = v118;
      v120 = (char *)malloc_type_malloc(8 * v119, 0x100004000313F17uLL);
      v121 = v120;
      v123 = (uint64_t *)*((_QWORD *)&v1601 + 1);
      v122 = (uint64_t *)v1601;
      if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
      {
        v124 = *((_QWORD *)&v1601 + 1) - v1601 - 8;
        if (v124 < 0x18)
        {
          v125 = v120;
        }
        else
        {
          v125 = v120;
          if ((unint64_t)&v120[-v1601] >= 0x20)
          {
            v126 = (v124 >> 3) + 1;
            v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            v125 = &v120[v127];
            v128 = (__int128 *)(v1601 + 16);
            v129 = v120 + 16;
            v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v131 = *v128;
              *(v129 - 1) = *(v128 - 1);
              *v129 = v131;
              v128 += 2;
              v129 += 2;
              v130 -= 4;
            }
            while (v130);
            if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_124;
            v122 = (uint64_t *)((char *)v122 + v127);
          }
        }
        do
        {
          v132 = *v122++;
          *(_QWORD *)v125 = v132;
          v125 += 8;
        }
        while (v122 != v123);
      }
LABEL_124:
      if (v115 != v117)
        free((void *)v1601);
      v114 = &v121[8 * v116];
      *(_QWORD *)&v1601 = v121;
      *((_QWORD *)&v1601 + 1) = v114;
      v1603 = v119;
      goto LABEL_127;
    }
    v78 = (char *)*((_QWORD *)&v1601 + 1);
    v79 = (unint64_t *)v1601;
    v80 = ((uint64_t)(*((_QWORD *)&v1601 + 1) - v1601) >> 3) + 1;
    if (v1603 >= v80)
    {
LABEL_90:
      *(_QWORD *)v78 = *v77;
      v96 = (unint64_t *)v1601;
      v97 = (char *)(*((_QWORD *)&v1601 + 1) + 8);
      *((_QWORD *)&v1601 + 1) = v97;
      v98 = (uint64_t)&v97[-v1601] >> 3;
      if (v1603 >= v98 + 1)
      {
LABEL_108:
        *(_QWORD *)v97 = *(_QWORD *)(v76 + 16 * v71 + 8);
        *((_QWORD *)&v1601 + 1) += 8;
        goto LABEL_109;
      }
      v1592 = v1602;
      v99 = (1 << -(char)__clz(v1603 + 1));
      if (v1603 >= 0xFFFFFFFFFFFFFFFELL)
        v99 = 1;
      if (v99 <= v98 + 1)
        v100 = v98 + 1;
      else
        v100 = v99;
      v101 = (char *)malloc_type_malloc(8 * v100, 0x100004000313F17uLL);
      v102 = v101;
      v104 = (uint64_t *)*((_QWORD *)&v1601 + 1);
      v103 = (uint64_t *)v1601;
      if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
      {
        v105 = *((_QWORD *)&v1601 + 1) - v1601 - 8;
        if (v105 < 0x18)
        {
          v106 = v101;
        }
        else
        {
          v106 = v101;
          if ((unint64_t)&v101[-v1601] >= 0x20)
          {
            v107 = (v105 >> 3) + 1;
            v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            v106 = &v101[v108];
            v109 = (__int128 *)(v1601 + 16);
            v110 = v101 + 16;
            v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v112 = *v109;
              *(v110 - 1) = *(v109 - 1);
              *v110 = v112;
              v109 += 2;
              v110 += 2;
              v111 -= 4;
            }
            while (v111);
            if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_105;
            v103 = (uint64_t *)((char *)v103 + v108);
          }
        }
        do
        {
          v113 = *v103++;
          *(_QWORD *)v106 = v113;
          v106 += 8;
        }
        while (v103 != v104);
      }
LABEL_105:
      if (v96 != v1592)
        free((void *)v1601);
      v97 = &v102[8 * v98];
      *(_QWORD *)&v1601 = v102;
      *((_QWORD *)&v1601 + 1) = v97;
      v1603 = v100;
      goto LABEL_108;
    }
    v1589 = v1602;
    v1591 = (uint64_t)(*((_QWORD *)&v1601 + 1) - v1601) >> 3;
    v81 = (1 << -(char)__clz(v1603 + 1));
    if (v1603 >= 0xFFFFFFFFFFFFFFFELL)
      v81 = 1;
    if (v81 <= v80)
      v82 = ((uint64_t)(*((_QWORD *)&v1601 + 1) - v1601) >> 3) + 1;
    else
      v82 = v81;
    v83 = (char *)malloc_type_malloc(8 * v82, 0x100004000313F17uLL);
    v84 = v83;
    v86 = (uint64_t *)*((_QWORD *)&v1601 + 1);
    v85 = (uint64_t *)v1601;
    if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
    {
      v87 = *((_QWORD *)&v1601 + 1) - v1601 - 8;
      if (v87 < 0x18)
      {
        v88 = v83;
      }
      else
      {
        v88 = v83;
        if ((unint64_t)&v83[-v1601] >= 0x20)
        {
          v89 = (v87 >> 3) + 1;
          v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
          v88 = &v83[v90];
          v91 = (__int128 *)(v1601 + 16);
          v92 = v83 + 16;
          v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v94 = *v91;
            *(v92 - 1) = *(v91 - 1);
            *v92 = v94;
            v91 += 2;
            v92 += 2;
            v93 -= 4;
          }
          while (v93);
          if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_87;
          v85 = (uint64_t *)((char *)v85 + v90);
        }
      }
      do
      {
        v95 = *v85++;
        *(_QWORD *)v88 = v95;
        v88 += 8;
      }
      while (v85 != v86);
    }
LABEL_87:
    if (v79 != v1589)
      free((void *)v1601);
    v78 = &v84[8 * v1591];
    *(_QWORD *)&v1601 = v84;
    *((_QWORD *)&v1601 + 1) = v78;
    v1603 = v82;
    goto LABEL_90;
  }
LABEL_133:
  v136 = *(_QWORD *)(a1 + 120);
  v137 = *(unint64_t **)v1611;
  v138 = *(unint64_t **)&v1611[8];
  if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
  {
    do
    {
      v139 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v136);
      v1606 = *v137;
      if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v139 + 4, HIDWORD(v1606)))
      {
        v140 = (_QWORD *)v139[28];
        if (v140)
        {
          v141 = v139[31];
          do
          {
            *(_QWORD *)buf = &v1606;
            *(_QWORD *)&buf[8] = 1;
            *(_QWORD *)&v1600 = v141;
            v142 = v140[6];
            if (!v142)
              goto LABEL_1837;
            (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v142 + 48))(v142, &v1600, buf);
            v140 = (_QWORD *)*v140;
          }
          while (v140);
        }
      }
      ++v137;
    }
    while (v137 != v138);
    v136 = *(_QWORD *)(a1 + 120);
    v143 = *(unint64_t **)v1611;
    v144 = *(unint64_t **)&v1611[8];
    if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
    {
      do
      {
        v145 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(v136);
        v1606 = *v143;
        if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v145 + 4, HIDWORD(v1606)))
        {
          v146 = (_QWORD *)v145[28];
          if (v146)
          {
            v147 = v145[31];
            do
            {
              *(_QWORD *)buf = &v1606;
              *(_QWORD *)&buf[8] = 1;
              *(_QWORD *)&v1600 = v147;
              v148 = v146[6];
              if (!v148)
                goto LABEL_1837;
              (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v148 + 48))(v148, &v1600, buf);
              v146 = (_QWORD *)*v146;
            }
            while (v146);
          }
        }
        ++v143;
      }
      while (v143 != v144);
      v136 = *(_QWORD *)(a1 + 120);
      v149 = *(unint64_t **)v1611;
      v150 = *(unint64_t **)&v1611[8];
      if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
      {
        do
        {
          v151 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(v136);
          v1606 = *v149;
          if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v151 + 4, HIDWORD(v1606)))
          {
            v152 = (_QWORD *)v151[28];
            if (v152)
            {
              v153 = v151[31];
              do
              {
                *(_QWORD *)buf = &v1606;
                *(_QWORD *)&buf[8] = 1;
                *(_QWORD *)&v1600 = v153;
                v154 = v152[6];
                if (!v154)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v154 + 48))(v154, &v1600, buf);
                v152 = (_QWORD *)*v152;
              }
              while (v152);
            }
          }
          ++v149;
        }
        while (v149 != v150);
        v136 = *(_QWORD *)(a1 + 120);
      }
    }
  }
  v155 = (unint64_t *)*((_QWORD *)&v1601 + 1);
  v156 = (unint64_t *)v1601;
  if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
  {
    do
    {
      v157 = *v156++;
      gdc::Registry::destroy(v136, v157);
    }
    while (v156 != v155);
    v156 = (unint64_t *)v1601;
  }
  if (v156 != v1602)
    free(v156);
  if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[16])
    free(*(void **)v1611);
  *(_QWORD *)v1611 = &v1611[32];
  *(_QWORD *)&v1611[8] = &v1611[32];
  *(_QWORD *)&v1611[16] = &v1611[32];
  *(_QWORD *)&v1611[24] = 4;
  *(_QWORD *)&v1601 = v1604;
  *((_QWORD *)&v1601 + 1) = v1604;
  v1602 = (unint64_t *)v1604;
  v1603 = 4;
  v158 = *(_QWORD *)(a1 + 120);
  v159 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsFailed>(v158);
  v160 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v158);
  v161 = (_QWORD *)v160;
  v162 = v160 + 32;
  v164 = v159[7];
  v163 = v159[8];
  if (*(_QWORD *)(v160 + 64) - *(_QWORD *)(v160 + 56) >= (unint64_t)(v163 - v164))
    v165 = v159 + 4;
  else
    v165 = (_QWORD *)(v160 + 32);
  if (v159 + 4 == v165)
  {
    *(_QWORD *)buf = &v1601;
    *(_QWORD *)&buf[8] = a1;
    while (v164 != v163)
    {
      v1363 = *(unsigned int *)(v164 + 4);
      v1364 = v161[4];
      v1365 = (v161[5] - v1364) >> 3;
      if (v1363 >> 7 < v1365)
      {
        v1366 = *(_QWORD *)(v1364 + 8 * (v1363 >> 7));
        if (v1366)
        {
          v1367 = *(unsigned __int16 *)(v1366 + 2 * (v1363 & 0x7F));
          v1369 = v161[7];
          v1368 = v161[8];
          v1370 = (v1368 - v1369) >> 3;
          if (v1370 > v1367)
          {
            v1371 = v1369 + 8 * v1367;
            if (v1371 != v1368 && *(_DWORD *)(v1371 + 4) == (_DWORD)v1363)
            {
              v1373 = *(_QWORD *)v164;
              v1374 = *(_QWORD *)v164 >> 39;
              if (v1374 < v1365
                && (v1375 = *(_QWORD *)(v1364 + 8 * v1374)) != 0
                && (v1376 = *(unsigned __int16 *)(v1375 + 2 * (HIDWORD(v1373) & 0x7F)), v1370 > v1376)
                && ((v1377 = v1369 + 8 * v1376, v1377 != v1368)
                  ? (v1378 = *(_DWORD *)(v1377 + 4) == HIDWORD(v1373))
                  : (v1378 = 0),
                    v1378))
              {
                v1362 = (uint64_t *)(v161[10] + 16 * v1376);
              }
              else
              {
                v1362 = (uint64_t *)v161[11];
              }
              md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_0::operator()((uint64_t **)buf, v1373, *v1362);
            }
          }
        }
      }
      v164 += 8;
    }
  }
  if ((_QWORD *)v162 == v165)
  {
    *(_QWORD *)buf = &v1601;
    *(_QWORD *)&buf[8] = a1;
    v1379 = v161[7];
    v1380 = v161[8];
    if (v1379 != v1380)
    {
      v1381 = (uint64_t *)v161[10];
      do
      {
        v1382 = *(unsigned int *)(v1379 + 4);
        v1383 = v159[4];
        if (v1382 >> 7 < (v159[5] - v1383) >> 3)
        {
          v1384 = *(_QWORD *)(v1383 + 8 * (v1382 >> 7));
          if (v1384)
          {
            v1385 = *(unsigned __int16 *)(v1384 + 2 * (v1382 & 0x7F));
            v1387 = v159[7];
            v1386 = v159[8];
            if (v1385 < (v1386 - v1387) >> 3)
            {
              v1388 = v1387 + 8 * v1385;
              if (v1388 != v1386 && *(_DWORD *)(v1388 + 4) == (_DWORD)v1382)
                md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_0::operator()((uint64_t **)buf, *(_QWORD *)v1379, *v1381);
            }
          }
        }
        v1381 += 2;
        v1379 += 8;
      }
      while (v1379 != v1380);
    }
  }
  v166 = *(_QWORD *)(a1 + 120);
  v168 = (unint64_t *)*((_QWORD *)&v1601 + 1);
  v167 = (unint64_t *)v1601;
  if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
  {
    do
    {
      v169 = *v167++;
      gdc::Registry::destroy(v166, v169);
    }
    while (v167 != v168);
    v167 = (unint64_t *)v1601;
    v166 = *(_QWORD *)(a1 + 120);
  }
  *((_QWORD *)&v1601 + 1) = v167;
  v170 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsCompleted>(v166);
  v171 = (_QWORD *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v166);
  v172 = gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(v166);
  v173 = (_QWORD *)v172;
  v174 = v172 + 32;
  v176 = v170[7];
  v175 = v170[8];
  if (v171[8] - v171[7] >= (unint64_t)(v175 - v176))
    v177 = v170 + 4;
  else
    v177 = v171 + 4;
  if (*(_QWORD *)(v172 + 64) - *(_QWORD *)(v172 + 56) >= v177[4] - v177[3])
    v178 = v177;
  else
    v178 = (_QWORD *)(v172 + 32);
  if (v170 + 4 == v178)
  {
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v1611;
    *(_QWORD *)&buf[16] = &v1601;
    while (1)
    {
      if (v176 == v175)
        goto LABEL_183;
      v1409 = *(unsigned int *)(v176 + 4);
      v1410 = v1409 >> 7;
      v1411 = v171[4];
      v1412 = (v171[5] - v1411) >> 3;
      if (v1409 >> 7 < v1412)
      {
        v1413 = *(_QWORD *)(v1411 + 8 * v1410);
        if (v1413)
        {
          v1414 = *(unsigned __int16 *)(v1413 + 2 * (v1409 & 0x7F));
          v1416 = v171[7];
          v1415 = v171[8];
          v1417 = (v1415 - v1416) >> 3;
          if (v1417 > v1414)
          {
            v1418 = v1416 + 8 * v1414;
            if (v1418 != v1415 && *(_DWORD *)(v1418 + 4) == (_DWORD)v1409)
            {
              v1420 = v173[4];
              v1421 = (v173[5] - v1420) >> 3;
              if (v1410 < v1421)
              {
                v1422 = *(_QWORD *)(v1420 + 8 * v1410);
                if (v1422)
                {
                  v1423 = *(unsigned __int16 *)(v1422 + 2 * (v1409 & 0x7F));
                  v1425 = v173[7];
                  v1424 = v173[8];
                  v1426 = (v1424 - v1425) >> 3;
                  if (v1426 > v1423)
                  {
                    v1427 = v1425 + 8 * v1423;
                    if (v1427 != v1424 && *(_DWORD *)(v1427 + 4) == (_DWORD)v1409)
                      break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_1624:
      v176 += 8;
    }
    v1429 = *(_QWORD *)v176;
    v1430 = HIDWORD(*(_QWORD *)v176);
    v1431 = *(_QWORD *)v176 >> 39;
    if (v1431 < v1412
      && (v1432 = *(_QWORD *)(v1411 + 8 * v1431)) != 0
      && (v1433 = *(unsigned __int16 *)(v1432 + 2 * (HIDWORD(v1429) & 0x7F)), v1417 > v1433)
      && ((v1434 = v1416 + 8 * v1433, v1434 != v1415) ? (v1435 = *(_DWORD *)(v1434 + 4) == (_DWORD)v1430) : (v1435 = 0),
          v1435))
    {
      v1436 = (uint64_t *)(v171[10] + 16 * v1433);
      if (v1431 >= v1421)
        goto LABEL_1622;
    }
    else
    {
      v1436 = (uint64_t *)v171[11];
      if (v1431 >= v1421)
        goto LABEL_1622;
    }
    v1437 = *(_QWORD *)(v1420 + 8 * v1431);
    if (v1437)
    {
      v1438 = *(unsigned __int16 *)(v1437 + 2 * (HIDWORD(v1429) & 0x7F));
      if (v1426 > v1438)
      {
        v1439 = v1425 + 8 * v1438;
        if (v1439 != v1424 && *(_DWORD *)(v1439 + 4) == (_DWORD)v1430)
        {
          v1408 = (uint64_t *)(v173[10] + 16 * v1438);
          goto LABEL_1623;
        }
      }
    }
LABEL_1622:
    v1408 = (uint64_t *)v173[11];
LABEL_1623:
    md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()((uint64_t **)buf, v1429, *v1436, v1408);
    goto LABEL_1624;
  }
LABEL_183:
  if (v171 + 4 == v178)
  {
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v1611;
    *(_QWORD *)&buf[16] = &v1601;
    v1390 = v171[7];
    v1391 = v171[8];
    if (v1390 != v1391)
    {
      v1392 = (uint64_t *)v171[10];
      do
      {
        v1442 = *(unsigned int *)(v1390 + 4);
        v1443 = v1442 >> 7;
        v1444 = v170[4];
        if (v1442 >> 7 < (v170[5] - v1444) >> 3)
        {
          v1445 = *(_QWORD *)(v1444 + 8 * v1443);
          if (v1445)
          {
            v1446 = *(unsigned __int16 *)(v1445 + 2 * (v1442 & 0x7F));
            v1448 = v170[7];
            v1447 = v170[8];
            if (v1446 < (v1447 - v1448) >> 3)
            {
              v1449 = v1448 + 8 * v1446;
              if (v1449 != v1447 && *(_DWORD *)(v1449 + 4) == (_DWORD)v1442)
              {
                v1451 = v173[4];
                v1452 = (v173[5] - v1451) >> 3;
                if (v1443 < v1452)
                {
                  v1453 = *(_QWORD *)(v1451 + 8 * v1443);
                  if (v1453)
                  {
                    v1454 = *(unsigned __int16 *)(v1453 + 2 * (v1442 & 0x7F));
                    v1456 = v173[7];
                    v1455 = v173[8];
                    v1457 = (v1455 - v1456) >> 3;
                    if (v1457 > v1454)
                    {
                      v1458 = v1456 + 8 * v1454;
                      if (v1458 != v1455 && *(_DWORD *)(v1458 + 4) == (_DWORD)v1442)
                      {
                        v1460 = *(_QWORD *)v1390;
                        v1461 = *(_QWORD *)v1390 >> 39;
                        if (v1461 < v1452
                          && (v1462 = *(_QWORD *)(v1451 + 8 * v1461)) != 0
                          && (v1463 = *(unsigned __int16 *)(v1462 + 2 * (HIDWORD(v1460) & 0x7F)), v1457 > v1463)
                          && ((v1464 = v1456 + 8 * v1463, v1464 != v1455)
                            ? (v1465 = *(_DWORD *)(v1464 + 4) == HIDWORD(v1460))
                            : (v1465 = 0),
                              v1465))
                        {
                          v1441 = (uint64_t *)(v173[10] + 16 * v1463);
                        }
                        else
                        {
                          v1441 = (uint64_t *)v173[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()((uint64_t **)buf, v1460, *v1392, v1441);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1392 += 2;
        v1390 += 8;
      }
      while (v1390 != v1391);
    }
  }
  if ((_QWORD *)v174 == v178)
  {
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v1611;
    *(_QWORD *)&buf[16] = &v1601;
    v1393 = v173[7];
    v1394 = v173[8];
    if (v1393 != v1394)
    {
      v1395 = (uint64_t *)v173[10];
      do
      {
        v1467 = *(unsigned int *)(v1393 + 4);
        v1468 = v1467 >> 7;
        v1469 = v170[4];
        if (v1467 >> 7 < (v170[5] - v1469) >> 3)
        {
          v1470 = *(_QWORD *)(v1469 + 8 * v1468);
          if (v1470)
          {
            v1471 = *(unsigned __int16 *)(v1470 + 2 * (v1467 & 0x7F));
            v1473 = v170[7];
            v1472 = v170[8];
            if (v1471 < (v1472 - v1473) >> 3)
            {
              v1474 = v1473 + 8 * v1471;
              if (v1474 != v1472 && *(_DWORD *)(v1474 + 4) == (_DWORD)v1467)
              {
                v1476 = v171[4];
                v1477 = (v171[5] - v1476) >> 3;
                if (v1468 < v1477)
                {
                  v1478 = *(_QWORD *)(v1476 + 8 * v1468);
                  if (v1478)
                  {
                    v1479 = *(unsigned __int16 *)(v1478 + 2 * (v1467 & 0x7F));
                    v1481 = v171[7];
                    v1480 = v171[8];
                    v1482 = (v1480 - v1481) >> 3;
                    if (v1482 > v1479)
                    {
                      v1483 = v1481 + 8 * v1479;
                      if (v1483 != v1480 && *(_DWORD *)(v1483 + 4) == (_DWORD)v1467)
                      {
                        v1485 = *(_QWORD *)v1393;
                        v1486 = *(_QWORD *)v1393 >> 39;
                        if (v1486 < v1477
                          && (v1487 = *(_QWORD *)(v1476 + 8 * v1486)) != 0
                          && (v1488 = *(unsigned __int16 *)(v1487 + 2 * (HIDWORD(v1485) & 0x7F)), v1482 > v1488)
                          && ((v1489 = v1481 + 8 * v1488, v1489 != v1480)
                            ? (v1490 = *(_DWORD *)(v1489 + 4) == HIDWORD(v1485))
                            : (v1490 = 0),
                              v1490))
                        {
                          v1466 = (uint64_t *)(v171[10] + 16 * v1488);
                        }
                        else
                        {
                          v1466 = (uint64_t *)v171[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()((uint64_t **)buf, v1485, *v1466, v1395);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1395 += 2;
        v1393 += 8;
      }
      while (v1393 != v1394);
    }
  }
  v179 = *(_QWORD *)(a1 + 120);
  v180 = *(unint64_t **)v1611;
  v181 = *(unint64_t **)&v1611[8];
  if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
  {
    do
    {
      v182 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v179);
      v1606 = *v180;
      if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v182 + 4, HIDWORD(v1606)))
      {
        v183 = (_QWORD *)v182[28];
        if (v183)
        {
          v184 = v182[31];
          do
          {
            *(_QWORD *)buf = &v1606;
            *(_QWORD *)&buf[8] = 1;
            *(_QWORD *)&v1600 = v184;
            v185 = v183[6];
            if (!v185)
              goto LABEL_1837;
            (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v185 + 48))(v185, &v1600, buf);
            v183 = (_QWORD *)*v183;
          }
          while (v183);
        }
      }
      ++v180;
    }
    while (v180 != v181);
    v179 = *(_QWORD *)(a1 + 120);
    v186 = *(unint64_t **)v1611;
    v187 = *(unint64_t **)&v1611[8];
    if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
    {
      do
      {
        v188 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(v179);
        v1606 = *v186;
        if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v188 + 4, HIDWORD(v1606)))
        {
          v189 = (_QWORD *)v188[28];
          if (v189)
          {
            v190 = v188[31];
            do
            {
              *(_QWORD *)buf = &v1606;
              *(_QWORD *)&buf[8] = 1;
              *(_QWORD *)&v1600 = v190;
              v191 = v189[6];
              if (!v191)
                goto LABEL_1837;
              (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v191 + 48))(v191, &v1600, buf);
              v189 = (_QWORD *)*v189;
            }
            while (v189);
          }
        }
        ++v186;
      }
      while (v186 != v187);
      v179 = *(_QWORD *)(a1 + 120);
    }
  }
  v192 = (unint64_t *)*((_QWORD *)&v1601 + 1);
  v193 = (unint64_t *)v1601;
  if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
  {
    do
    {
      v194 = *v193++;
      gdc::Registry::destroy(v179, v194);
    }
    while (v193 != v192);
    v193 = (unint64_t *)v1601;
  }
  if (v193 != v1602)
    free(v193);
  if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[16])
    free(*(void **)v1611);
  v195 = 0;
  v196 = 0xCBF29CE484222325;
  *(_QWORD *)v1611 = &v1611[32];
  *(_QWORD *)&v1611[8] = &v1611[32];
  *(_QWORD *)&v1611[16] = &v1611[32];
  *(_QWORD *)&v1611[24] = 4;
  *(_QWORD *)&v1601 = v1604;
  *((_QWORD *)&v1601 + 1) = v1604;
  v1602 = (unint64_t *)v1604;
  v1603 = 4;
  v197 = *(_QWORD *)(a1 + 120);
  do
    v196 = 0x100000001B3 * (v196 ^ aStdStringViewG_776[v195++ + 38]);
  while (v195 != 122);
  v198 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(*(_QWORD *)(a1 + 120), v196);
  v199 = (_QWORD *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(v197);
  v200 = gdc::Registry::storage<arComponents::Boundary>(v197);
  v201 = (_QWORD *)v200;
  v202 = v200 + 32;
  v204 = v198[7];
  v203 = v198[8];
  if (v199[8] - v199[7] >= (unint64_t)(v203 - v204))
    v205 = v198 + 4;
  else
    v205 = v199 + 4;
  if (*(_QWORD *)(v200 + 64) - *(_QWORD *)(v200 + 56) >= v205[4] - v205[3])
    v206 = v205;
  else
    v206 = (_QWORD *)(v200 + 32);
  if (v198 + 4 == v206)
  {
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v1611;
    for (*(_QWORD *)&buf[16] = &v1601; v204 != v203; v204 += 8)
    {
      v1492 = *(unsigned int *)(v204 + 4);
      v1493 = v1492 >> 7;
      v1494 = v199[4];
      v1495 = (v199[5] - v1494) >> 3;
      if (v1492 >> 7 >= v1495)
        continue;
      v1496 = *(_QWORD *)(v1494 + 8 * v1493);
      if (!v1496)
        continue;
      v1497 = *(unsigned __int16 *)(v1496 + 2 * (v1492 & 0x7F));
      v1499 = v199[7];
      v1498 = v199[8];
      v1500 = (v1498 - v1499) >> 3;
      if (v1500 <= v1497)
        continue;
      v1501 = v1499 + 8 * v1497;
      if (v1501 == v1498 || *(_DWORD *)(v1501 + 4) != (_DWORD)v1492)
        continue;
      v1503 = v201[4];
      v1504 = (v201[5] - v1503) >> 3;
      if (v1493 >= v1504)
        continue;
      v1505 = *(_QWORD *)(v1503 + 8 * v1493);
      if (!v1505)
        continue;
      v1506 = *(unsigned __int16 *)(v1505 + 2 * (v1492 & 0x7F));
      v1508 = v201[7];
      v1507 = v201[8];
      v1509 = (v1507 - v1508) >> 3;
      if (v1509 <= v1506)
        continue;
      v1510 = v1508 + 8 * v1506;
      if (v1510 == v1507 || *(_DWORD *)(v1510 + 4) != (_DWORD)v1492)
        continue;
      v1512 = *(_QWORD *)v204;
      v1513 = HIDWORD(*(_QWORD *)v204);
      v1514 = *(_QWORD *)v204 >> 39;
      if (v1514 < v1495
        && (v1515 = *(_QWORD *)(v1494 + 8 * v1514)) != 0
        && (v1516 = *(unsigned __int16 *)(v1515 + 2 * (HIDWORD(v1512) & 0x7F)), v1500 > v1516)
        && ((v1517 = v1499 + 8 * v1516, v1517 != v1498)
          ? (v1518 = *(_DWORD *)(v1517 + 4) == (_DWORD)v1513)
          : (v1518 = 0),
            v1518))
      {
        v1519 = (uint64_t *)(v199[10] + 16 * v1516);
        if (v1514 >= v1504)
          goto LABEL_1716;
      }
      else
      {
        v1519 = (uint64_t *)v199[11];
        if (v1514 >= v1504)
          goto LABEL_1716;
      }
      v1520 = *(_QWORD *)(v1503 + 8 * v1514);
      if (v1520)
      {
        v1521 = *(unsigned __int16 *)(v1520 + 2 * (HIDWORD(v1512) & 0x7F));
        if (v1509 > v1521)
        {
          v1522 = v1508 + 8 * v1521;
          if (v1522 != v1507 && *(_DWORD *)(v1522 + 4) == (_DWORD)v1513)
          {
            v1491 = v201[10] + 24 * v1521;
            goto LABEL_1717;
          }
        }
      }
LABEL_1716:
      v1491 = v201[11];
LABEL_1717:
      md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()((uint64_t **)buf, v1512, v1519, v1491);
    }
  }
  if (v199 + 4 == v206)
  {
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v1611;
    *(_QWORD *)&buf[16] = &v1601;
    v1396 = v199[7];
    v1397 = v199[8];
    if (v1396 != v1397)
    {
      v1398 = (uint64_t *)v199[10];
      do
      {
        v1525 = *(unsigned int *)(v1396 + 4);
        v1526 = v1525 >> 7;
        v1527 = v198[4];
        if (v1525 >> 7 < (v198[5] - v1527) >> 3)
        {
          v1528 = *(_QWORD *)(v1527 + 8 * v1526);
          if (v1528)
          {
            v1529 = *(unsigned __int16 *)(v1528 + 2 * (v1525 & 0x7F));
            v1531 = v198[7];
            v1530 = v198[8];
            if (v1529 < (v1530 - v1531) >> 3)
            {
              v1532 = v1531 + 8 * v1529;
              if (v1532 != v1530 && *(_DWORD *)(v1532 + 4) == (_DWORD)v1525)
              {
                v1534 = v201[4];
                v1535 = (v201[5] - v1534) >> 3;
                if (v1526 < v1535)
                {
                  v1536 = *(_QWORD *)(v1534 + 8 * v1526);
                  if (v1536)
                  {
                    v1537 = *(unsigned __int16 *)(v1536 + 2 * (v1525 & 0x7F));
                    v1539 = v201[7];
                    v1538 = v201[8];
                    v1540 = (v1538 - v1539) >> 3;
                    if (v1540 > v1537)
                    {
                      v1541 = v1539 + 8 * v1537;
                      if (v1541 != v1538 && *(_DWORD *)(v1541 + 4) == (_DWORD)v1525)
                      {
                        v1543 = *(_QWORD *)v1396;
                        v1544 = *(_QWORD *)v1396 >> 39;
                        if (v1544 < v1535
                          && (v1545 = *(_QWORD *)(v1534 + 8 * v1544)) != 0
                          && (v1546 = *(unsigned __int16 *)(v1545 + 2 * (HIDWORD(v1543) & 0x7F)), v1540 > v1546)
                          && ((v1547 = v1539 + 8 * v1546, v1547 != v1538)
                            ? (v1548 = *(_DWORD *)(v1547 + 4) == HIDWORD(v1543))
                            : (v1548 = 0),
                              v1548))
                        {
                          v1524 = v201[10] + 24 * v1546;
                        }
                        else
                        {
                          v1524 = v201[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()((uint64_t **)buf, v1543, v1398, v1524);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1398 += 2;
        v1396 += 8;
      }
      while (v1396 != v1397);
    }
  }
  if ((_QWORD *)v202 == v206)
  {
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v1611;
    *(_QWORD *)&buf[16] = &v1601;
    v1399 = v201[7];
    v1400 = v201[8];
    if (v1399 != v1400)
    {
      v1401 = v201[10];
      do
      {
        v1550 = *(unsigned int *)(v1399 + 4);
        v1551 = v1550 >> 7;
        v1552 = v198[4];
        if (v1550 >> 7 < (v198[5] - v1552) >> 3)
        {
          v1553 = *(_QWORD *)(v1552 + 8 * v1551);
          if (v1553)
          {
            v1554 = *(unsigned __int16 *)(v1553 + 2 * (v1550 & 0x7F));
            v1556 = v198[7];
            v1555 = v198[8];
            if (v1554 < (v1555 - v1556) >> 3)
            {
              v1557 = v1556 + 8 * v1554;
              if (v1557 != v1555 && *(_DWORD *)(v1557 + 4) == (_DWORD)v1550)
              {
                v1559 = v199[4];
                v1560 = (v199[5] - v1559) >> 3;
                if (v1551 < v1560)
                {
                  v1561 = *(_QWORD *)(v1559 + 8 * v1551);
                  if (v1561)
                  {
                    v1562 = *(unsigned __int16 *)(v1561 + 2 * (v1550 & 0x7F));
                    v1564 = v199[7];
                    v1563 = v199[8];
                    v1565 = (v1563 - v1564) >> 3;
                    if (v1565 > v1562)
                    {
                      v1566 = v1564 + 8 * v1562;
                      if (v1566 != v1563 && *(_DWORD *)(v1566 + 4) == (_DWORD)v1550)
                      {
                        v1568 = *(_QWORD *)v1399;
                        v1569 = *(_QWORD *)v1399 >> 39;
                        if (v1569 < v1560
                          && (v1570 = *(_QWORD *)(v1559 + 8 * v1569)) != 0
                          && (v1571 = *(unsigned __int16 *)(v1570 + 2 * (HIDWORD(v1568) & 0x7F)), v1565 > v1571)
                          && ((v1572 = v1564 + 8 * v1571, v1572 != v1563)
                            ? (v1573 = *(_DWORD *)(v1572 + 4) == HIDWORD(v1568))
                            : (v1573 = 0),
                              v1573))
                        {
                          v1549 = (uint64_t *)(v199[10] + 16 * v1571);
                        }
                        else
                        {
                          v1549 = (uint64_t *)v199[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()((uint64_t **)buf, v1568, v1549, v1401);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1401 += 24;
        v1399 += 8;
      }
      while (v1399 != v1400);
    }
  }
  v207 = *(unint64_t **)v1611;
  v208 = *(unint64_t **)&v1611[8];
  if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[8])
  {
    do
    {
      v209 = *v207;
      v210 = *(_QWORD *)(a1 + 120);
      v211 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v210);
      v212 = v209 >> 39;
      v213 = v211[4];
      if (v209 >> 39 < (v211[5] - v213) >> 3)
      {
        v214 = *(_QWORD *)(v213 + 8 * v212);
        if (v214)
        {
          v215 = HIDWORD(v209) & 0x7F;
          v216 = *(unsigned __int16 *)(v214 + 2 * v215);
          v218 = v211[7];
          v217 = v211[8];
          if (v216 < (v217 - v218) >> 3)
          {
            v219 = v218 + 8 * v216;
            if (v219 != v217 && *(_DWORD *)(v219 + 4) == HIDWORD(v209))
            {
              v221 = v211[10];
              v222 = (_BYTE *)(v221 + v216);
              if (v221 + v216 != v211[11] && v221 != 0)
              {
                v224 = (_QWORD *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(v210);
                gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::remove(v224, v209);
                gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(v210, v209, *v222);
                v225 = 0;
                *v222 = 0;
                v226 = 0xCBF29CE484222325;
                do
                  v226 = 0x100000001B3 * (v226 ^ aStdStringViewG_786[v225++ + 38]);
                while (v225 != 116);
                v227 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v210, v226);
                v228 = v227[4];
                if (v212 < (v227[5] - v228) >> 3)
                {
                  v229 = *(_QWORD *)(v228 + 8 * v212);
                  if (v229)
                  {
                    v230 = *(unsigned __int16 *)(v229 + 2 * v215);
                    v232 = v227[7];
                    v231 = v227[8];
                    if (v230 < (v231 - v232) >> 3)
                    {
                      v233 = v232 + 8 * v230;
                      if (v233 != v231 && *(_DWORD *)(v233 + 4) == HIDWORD(v209))
                      {
                        v235 = v227[10];
                        v236 = (unint64_t **)(v235 + 24 * v230);
                        if (v236 != (unint64_t **)v227[11] && v235 != 0)
                        {
                          v239 = *v236;
                          v238 = v236[1];
                          if (*v236 != v238)
                          {
                            do
                            {
                              v240 = 0;
                              v241 = *v239;
                              v242 = 0xCBF29CE484222325;
                              do
                                v242 = 0x100000001B3 * (v242 ^ aStdStringViewG_787[v240++ + 38]);
                              while (v240 != 112);
                              v243 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v210, v242);
                              v244 = v243[4];
                              if (v241 >> 39 < (v243[5] - v244) >> 3
                                && (v245 = *(_QWORD *)(v244 + 8 * (v241 >> 39))) != 0
                                && (v246 = *(unsigned __int16 *)(v245 + 2 * (HIDWORD(v241) & 0x7F)),
                                    v248 = v243[7],
                                    v247 = v243[8],
                                    v246 < (v247 - v248) >> 3)
                                && ((v249 = v248 + 8 * v246, v249 != v247)
                                  ? (v250 = *(_DWORD *)(v249 + 4) == HIDWORD(v241))
                                  : (v250 = 0),
                                    v250))
                              {
                                v251 = v243[11];
                                v252 = v243[10] + 12 * v246;
                              }
                              else
                              {
                                v251 = v243[11];
                                v252 = v251;
                              }
                              if (v252 == v251)
                                v252 = 0;
                              gdc::component::DataRequestObserver::updateStatusCounts(v210, v241, v209, *(unsigned __int8 *)(v252 + 8), 0);
                              v253 = 0;
                              v254 = 0xCBF29CE484222325;
                              do
                                v254 = 0x100000001B3 * (v254 ^ aStdStringViewG_787[v253++ + 38]);
                              while (v253 != 112);
                              v255 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v210, v254);
                              gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(v255, v241);
                              ++v239;
                            }
                            while (v239 != v238);
                          }
                          v256 = 0;
                          v257 = 0xCBF29CE484222325;
                          do
                            v257 = 0x100000001B3 * (v257 ^ aStdStringViewG_786[v256++ + 38]);
                          while (v256 != 116);
                          v258 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v210, v257);
                          v1606 = v209;
                          if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v258 + 4, HIDWORD(v209)))
                          {
                            v259 = (_QWORD *)v258[28];
                            if (v259)
                            {
                              v260 = v258[31];
                              do
                              {
                                *(_QWORD *)buf = &v1606;
                                *(_QWORD *)&buf[8] = 1;
                                *(_QWORD *)&v1600 = v260;
                                v261 = v259[6];
                                if (!v261)
                                  goto LABEL_1837;
                                (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v261 + 48))(v261, &v1600, buf);
                                v259 = (_QWORD *)*v259;
                              }
                              while (v259);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v262 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v210);
                gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::remove(v262, v209);
              }
            }
          }
        }
      }
      ++v207;
    }
    while (v207 != v208);
    v263 = *(unint64_t **)v1611;
    v264 = *(unint64_t **)&v1611[8];
    v265 = *(_QWORD *)(a1 + 120);
    if (*(_QWORD *)v1611 == *(_QWORD *)&v1611[8])
      goto LABEL_296;
    do
    {
      v266 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(v265);
      v1606 = *v263;
      if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v266 + 4, HIDWORD(v1606)))
      {
        v267 = (_QWORD *)v266[28];
        if (v267)
        {
          v268 = v266[31];
          do
          {
            *(_QWORD *)buf = &v1606;
            *(_QWORD *)&buf[8] = 1;
            *(_QWORD *)&v1600 = v268;
            v269 = v267[6];
            if (!v269)
              goto LABEL_1837;
            (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v269 + 48))(v269, &v1600, buf);
            v267 = (_QWORD *)*v267;
          }
          while (v267);
        }
      }
      ++v263;
    }
    while (v263 != v264);
    v265 = *(_QWORD *)(a1 + 120);
    v270 = *(unint64_t **)v1611;
    v271 = *(unint64_t **)&v1611[8];
    if (*(_QWORD *)v1611 == *(_QWORD *)&v1611[8])
      goto LABEL_296;
    do
    {
      v272 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(v265);
      v1606 = *v270;
      if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v272 + 4, HIDWORD(v1606)))
      {
        v273 = (_QWORD *)v272[28];
        if (v273)
        {
          v274 = v272[31];
          do
          {
            *(_QWORD *)buf = &v1606;
            *(_QWORD *)&buf[8] = 1;
            *(_QWORD *)&v1600 = v274;
            v275 = v273[6];
            if (!v275)
              goto LABEL_1837;
            (*(void (**)(uint64_t, __int128 *, uint8_t *))(*(_QWORD *)v275 + 48))(v275, &v1600, buf);
            v273 = (_QWORD *)*v273;
          }
          while (v273);
        }
      }
      ++v270;
    }
    while (v270 != v271);
  }
  v265 = *(_QWORD *)(a1 + 120);
LABEL_296:
  v276 = (unint64_t *)*((_QWORD *)&v1601 + 1);
  v277 = (unint64_t *)v1601;
  if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
  {
    do
    {
      v278 = *v277++;
      gdc::Registry::destroy(v265, v278);
    }
    while (v277 != v276);
    v277 = (unint64_t *)v1601;
  }
  if (v277 != v1602)
    free(v277);
  if (*(_QWORD *)v1611 != *(_QWORD *)&v1611[16])
    free(*(void **)v1611);
  memset(buf, 0, sizeof(buf));
  std::mutex::lock((std::mutex *)(v1575 + 64));
  v279 = *(_QWORD *)(v1575 + 56);
  *(_OWORD *)buf = *(_OWORD *)(v1575 + 40);
  *(_QWORD *)&buf[16] = v279;
  *(_QWORD *)(v1575 + 48) = 0;
  *(_QWORD *)(v1575 + 56) = 0;
  *(_QWORD *)(v1575 + 40) = 0;
  std::mutex::unlock((std::mutex *)(v1575 + 64));
  v280 = *(_QWORD **)buf;
  v281 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v1586 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    __asm { FMOV            V8.2S, #1.0 }
    v1584 = *(_QWORD **)&buf[8];
    while (1)
    {
      if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
      v286 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
      if (os_log_type_enabled(v286, OS_LOG_TYPE_INFO))
      {
        v287 = *(_DWORD *)(*v280 + 8);
        v288 = "ARFeatureShadow";
        if (!*(_BYTE *)(*v280 + 12))
          v288 = "ARArrival";
        *(_DWORD *)v1611 = 67109378;
        *(_DWORD *)&v1611[4] = v287;
        *(_WORD *)&v1611[8] = 2080;
        *(_QWORD *)&v1611[10] = v288;
        _os_log_impl(&dword_19F029000, v286, OS_LOG_TYPE_INFO, "Processing new request(id:%d) for external mesh type:%s", v1611, 0x12u);
      }

      v289 = *v280;
      if (!*(_BYTE *)(*v280 + 12))
        break;
      if (*(_BYTE *)(*v280 + 12) == 1)
      {
        v290 = v280[1];
        *(_QWORD *)&v1601 = *v280;
        *((_QWORD *)&v1601 + 1) = v290;
        if (v290)
        {
          v291 = (unint64_t *)(v290 + 8);
          do
            v292 = __ldxr(v291);
          while (__stxr(v292 + 1, v291));
        }
        v293 = gdc::Registry::create(*(gdc::Registry **)(a1 + 120));
        v294 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)v1611 = _D8;
        gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::addRequest(v294, v293, (uint64_t)v1611);
        v295 = *(_QWORD *)(a1 + 120);
        v296 = v280[1];
        *(_QWORD *)v1611 = *v280;
        *(_QWORD *)&v1611[8] = v296;
        if (v296)
        {
          v297 = (unint64_t *)(v296 + 8);
          do
            v298 = __ldxr(v297);
          while (__stxr(v298 + 1, v297));
        }
        v299 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(v295);
        gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v299, v293, v1611);
        v300 = *(std::__shared_weak_count **)&v1611[8];
        if (*(_QWORD *)&v1611[8])
        {
          v301 = (unint64_t *)(*(_QWORD *)&v1611[8] + 8);
          do
            v302 = __ldaxr(v301);
          while (__stlxr(v302 - 1, v301));
          if (!v302)
          {
            ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
            std::__shared_weak_count::__release_weak(v300);
          }
        }
        v303 = v280;
        v304 = *(_QWORD *)(a1 + 120);
        v305 = v1601;
        v1600 = v1601;
        if (*((_QWORD *)&v1601 + 1))
        {
          v306 = (unint64_t *)(*((_QWORD *)&v1601 + 1) + 8);
          do
            v307 = __ldxr(v306);
          while (__stxr(v307 + 1, v306));
        }
        v308 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(v304);
        v1605 = v293;
        v309 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v308 + 4, (uint64_t)&v1605);
        if ((v310 & 1) == 0)
        {
          v311 = v308[10] + 2 * ((_QWORD)v309 - v308[7]);
          v312 = v1600;
          v1600 = 0uLL;
          v313 = *(std::__shared_weak_count **)(v311 + 8);
          *(_OWORD *)v311 = v312;
          if (v313)
          {
            p_shared_owners = (unint64_t *)&v313->__shared_owners_;
            do
              v315 = __ldaxr(p_shared_owners);
            while (__stlxr(v315 - 1, p_shared_owners));
            if (!v315)
            {
              ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
              std::__shared_weak_count::__release_weak(v313);
            }
            v281 = v1584;
          }
          else
          {
            v281 = v1584;
          }
          goto LABEL_413;
        }
        v329 = (char *)v308[11];
        v328 = v308[12];
        if ((unint64_t)v329 < v328)
        {
          *(_OWORD *)v329 = v305;
          if (*((_QWORD *)&v305 + 1))
          {
            v330 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
            do
              v331 = __ldxr(v330);
            while (__stxr(v331 + 1, v330));
          }
          v311 = (uint64_t)(v329 + 16);
          v281 = v1584;
          goto LABEL_412;
        }
        v335 = (char *)v308[10];
        v336 = (v329 - v335) >> 4;
        v337 = v336 + 1;
        if ((unint64_t)(v336 + 1) >> 60)
          abort();
        v338 = v328 - (_QWORD)v335;
        if (v338 >> 3 > v337)
          v337 = v338 >> 3;
        if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF0)
          v339 = 0xFFFFFFFFFFFFFFFLL;
        else
          v339 = v337;
        if (v339)
        {
          if (v339 >> 60)
            goto LABEL_1819;
          v340 = (char *)operator new(16 * v339);
        }
        else
        {
          v340 = 0;
        }
        v347 = &v340[16 * v336];
        *(_OWORD *)v347 = v305;
        if (*((_QWORD *)&v305 + 1))
        {
          v348 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
          do
            v349 = __ldxr(v348);
          while (__stxr(v349 + 1, v348));
          v335 = (char *)v308[10];
          v329 = (char *)v308[11];
        }
        v350 = &v340[16 * v339];
        v311 = (uint64_t)(v347 + 16);
        if (v329 == v335)
        {
          v308[10] = (uint64_t)v347;
          v308[11] = v311;
          v308[12] = (uint64_t)v350;
          v280 = v303;
          v281 = v1584;
          goto LABEL_410;
        }
        do
        {
          v351 = *((_OWORD *)v329 - 1);
          v329 -= 16;
          *((_OWORD *)v347 - 1) = v351;
          v347 -= 16;
          *(_QWORD *)v329 = 0;
          *((_QWORD *)v329 + 1) = 0;
        }
        while (v329 != v335);
        v335 = (char *)v308[10];
        v352 = (char *)v308[11];
        v308[10] = (uint64_t)v347;
        v308[11] = v311;
        v308[12] = (uint64_t)v350;
        v280 = v303;
        if (v352 == v335)
        {
          v281 = v1584;
          if (v335)
            goto LABEL_411;
        }
        else
        {
          v281 = v1584;
          do
          {
            v353 = (std::__shared_weak_count *)*((_QWORD *)v352 - 1);
            if (v353)
            {
              v354 = (unint64_t *)&v353->__shared_owners_;
              do
                v355 = __ldaxr(v354);
              while (__stlxr(v355 - 1, v354));
              if (!v355)
              {
                ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                std::__shared_weak_count::__release_weak(v353);
              }
            }
            v352 -= 16;
          }
          while (v352 != v335);
LABEL_410:
          if (v335)
LABEL_411:
            operator delete(v335);
        }
LABEL_412:
        v308[11] = v311;
LABEL_413:
        v379 = v308[31];
        if (v311 == v308[11])
        {
          for (i = (_QWORD *)v308[22]; i; i = (_QWORD *)*i)
          {
            *(_QWORD *)v1611 = &v1605;
            *(_QWORD *)&v1611[8] = 1;
            v1606 = v379;
            v383 = i[6];
            if (!v383)
              goto LABEL_1837;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v383 + 48))(v383, &v1606, v1611);
          }
        }
        else
        {
          for (j = (_QWORD *)v308[16]; j; j = (_QWORD *)*j)
          {
            *(_QWORD *)v1611 = &v1605;
            *(_QWORD *)&v1611[8] = 1;
            v1606 = v379;
            v381 = j[6];
            if (!v381)
              goto LABEL_1837;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v381 + 48))(v381, &v1606, v1611);
          }
        }
        v384 = (std::__shared_weak_count *)*((_QWORD *)&v1600 + 1);
        if (*((_QWORD *)&v1600 + 1))
        {
          v385 = (unint64_t *)(*((_QWORD *)&v1600 + 1) + 8);
          do
            v386 = __ldaxr(v385);
          while (__stlxr(v386 - 1, v385));
          if (!v386)
          {
            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
            std::__shared_weak_count::__release_weak(v384);
          }
        }
        v387 = *(_QWORD *)(a1 + 120);
        v388 = v1601;
        *(_OWORD *)v1611 = *(_OWORD *)(v1601 + 16);
        *(_QWORD *)&v1611[16] = *(_QWORD *)(v1601 + 32);
        *(_OWORD *)&v1611[24] = *(_OWORD *)(v1601 + 40);
        v1612 = *(_QWORD *)(v1601 + 56);
        *(_QWORD *)v1613 = *(_QWORD *)(v1601 + 64);
        *(_OWORD *)&v1613[8] = *(_OWORD *)(v1601 + 72);
        v1614 = *(_QWORD *)(v1601 + 88);
        v389 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v387);
        gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v389, v293, (__int128 *)v1611);
        v390 = (uint64_t *)gdc::Registry::storage<arComponents::ShadowPipeline>(*(_QWORD *)(a1 + 120));
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v390, v293);
        v391 = *(_QWORD *)(a1 + 120);
        v392.i32[0] = *(_DWORD *)(v388 + 177);
        *(float32x4_t *)v1611 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v392))), v1586);
        v393 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(v391);
        gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v393, v293, (uint64_t)v1611);
        v394 = *(_QWORD *)(a1 + 120);
        *(_DWORD *)v1611 = 1065353216;
        v395 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v394);
        gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v395, v293, v1611);
        v396 = (std::__shared_weak_count *)*((_QWORD *)&v1601 + 1);
        if (!*((_QWORD *)&v1601 + 1))
          goto LABEL_305;
        v397 = (unint64_t *)(*((_QWORD *)&v1601 + 1) + 8);
        do
          v398 = __ldaxr(v397);
        while (__stlxr(v398 - 1, v397));
        goto LABEL_1249;
      }
LABEL_305:
      v280 += 2;
      if (v280 == v281)
        goto LABEL_1254;
    }
    v316 = v280[1];
    *(_QWORD *)&v1601 = *v280;
    *((_QWORD *)&v1601 + 1) = v316;
    if (v316)
    {
      v317 = (unint64_t *)(v316 + 8);
      do
        v318 = __ldxr(v317);
      while (__stxr(v318 + 1, v317));
    }
    v319 = gdc::Registry::create(*(gdc::Registry **)(a1 + 120));
    v320 = (uint64_t *)gdc::Registry::storage<arComponents::StandardPipeline>(*(_QWORD *)(a1 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v320, v319);
    v321 = (uint64_t *)gdc::Registry::storage<arComponents::RotateTowardsUser>(*(_QWORD *)(a1 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v321, v319);
    v322 = (uint64_t *)gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(*(_QWORD *)(a1 + 120));
    v1606 = v319;
    v323 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v322 + 4, (uint64_t)&v1606);
    if ((v324 & 1) != 0)
    {
      v333 = (_BYTE *)v322[11];
      v332 = v322[12];
      if ((unint64_t)v333 >= v332)
      {
        v341 = (char *)v322[10];
        v342 = v333 - v341;
        v343 = v333 - v341 + 1;
        if (v343 < 0)
          abort();
        v344 = v332 - (_QWORD)v341;
        if (2 * v344 > v343)
          v343 = 2 * v344;
        if (v344 >= 0x3FFFFFFFFFFFFFFFLL)
          v345 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v345 = v343;
        if (v345)
          v346 = (char *)operator new(v345);
        else
          v346 = 0;
        v356 = &v346[v345];
        v334 = (uint64_t)&v346[v342 + 1];
        v357 = (char *)(v341 - v333);
        if (v341 == v333)
          v357 = 0;
        v322[10] = (uint64_t)&v346[v342 + (_QWORD)v357];
        v322[11] = v334;
        v322[12] = (uint64_t)v356;
        if (v341)
          operator delete(v341);
      }
      else
      {
        v334 = (uint64_t)(v333 + 1);
      }
      v322[11] = v334;
      v325 = v322[31];
    }
    else
    {
      v325 = v322[31];
      if (v322[10] + (((uint64_t)v323 - v322[7]) >> 3) != v322[11])
      {
        for (k = (_QWORD *)v322[16]; k; k = (_QWORD *)*k)
        {
          *(_QWORD *)v1611 = &v1606;
          *(_QWORD *)&v1611[8] = 1;
          *(_QWORD *)&v1600 = v325;
          v327 = k[6];
          if (!v327)
            goto LABEL_1837;
          (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v327 + 48))(v327, &v1600, v1611);
        }
        goto LABEL_393;
      }
    }
    for (m = (_QWORD *)v322[22]; m; m = (_QWORD *)*m)
    {
      *(_QWORD *)v1611 = &v1606;
      *(_QWORD *)&v1611[8] = 1;
      *(_QWORD *)&v1600 = v325;
      v359 = m[6];
      if (!v359)
        goto LABEL_1837;
      (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v359 + 48))(v359, &v1600, v1611);
    }
LABEL_393:
    v360 = *(_QWORD *)(a1 + 120);
    *(_OWORD *)v1611 = *(_OWORD *)(v289 + 180);
    v361 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(v360);
    gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v361, v319, (uint64_t)v1611);
    v362 = *(_QWORD *)(a1 + 120);
    *(_OWORD *)v1611 = *(_OWORD *)(v289 + 16);
    *(_QWORD *)&v1611[16] = *(_QWORD *)(v289 + 32);
    *(_OWORD *)&v1611[24] = *(_OWORD *)(v289 + 40);
    v1612 = *(_QWORD *)(v289 + 56);
    *(_QWORD *)v1613 = *(_QWORD *)(v289 + 64);
    *(_OWORD *)&v1613[8] = *(_OWORD *)(v289 + 72);
    v1614 = *(_QWORD *)(v289 + 88);
    v363 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v362);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v363, v319, (__int128 *)v1611);
    v364 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsResolvedWorldTransform>(*(_QWORD *)(a1 + 120));
    v1606 = v319;
    v365 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v364 + 4, (uint64_t)&v1606);
    if ((v366 & 1) != 0)
    {
      v371 = (_BYTE *)v364[11];
      v370 = v364[12];
      if ((unint64_t)v371 >= v370)
      {
        v373 = (char *)v364[10];
        v374 = v371 - v373;
        v375 = v371 - v373 + 1;
        if (v375 < 0)
          abort();
        v376 = v370 - (_QWORD)v373;
        if (2 * v376 > v375)
          v375 = 2 * v376;
        if (v376 >= 0x3FFFFFFFFFFFFFFFLL)
          v377 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v377 = v375;
        if (v377)
          v378 = (char *)operator new(v377);
        else
          v378 = 0;
        v399 = &v378[v377];
        v372 = (uint64_t)&v378[v374 + 1];
        v400 = (char *)(v373 - v371);
        if (v373 == v371)
          v400 = 0;
        v364[10] = (uint64_t)&v378[v374 + (_QWORD)v400];
        v364[11] = v372;
        v364[12] = (uint64_t)v399;
        if (v373)
          operator delete(v373);
      }
      else
      {
        v372 = (uint64_t)(v371 + 1);
      }
      v364[11] = v372;
      v367 = v364[31];
    }
    else
    {
      v367 = v364[31];
      if (v364[10] + (((uint64_t)v365 - v364[7]) >> 3) != v364[11])
      {
        for (n = (_QWORD *)v364[16]; n; n = (_QWORD *)*n)
        {
          *(_QWORD *)v1611 = &v1606;
          *(_QWORD *)&v1611[8] = 1;
          *(_QWORD *)&v1600 = v367;
          v369 = n[6];
          if (!v369)
            goto LABEL_1837;
          (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v369 + 48))(v369, &v1600, v1611);
        }
        goto LABEL_439;
      }
    }
    for (ii = (_QWORD *)v364[22]; ii; ii = (_QWORD *)*ii)
    {
      *(_QWORD *)v1611 = &v1606;
      *(_QWORD *)&v1611[8] = 1;
      *(_QWORD *)&v1600 = v367;
      v402 = ii[6];
      if (!v402)
        goto LABEL_1837;
      (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v402 + 48))(v402, &v1600, v1611);
    }
LABEL_439:
    v1587 = v280;
    v403 = *(_QWORD *)(a1 + 120);
    *(_DWORD *)v1611 = 1065353216;
    v404 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v403);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v404, v319, v1611);
    v405 = *(_QWORD *)(a1 + 120);
    v406 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v405);
    v407 = v406[4];
    v1597 = v319 >> 39;
    if (v319 >> 39 < (v406[5] - v407) >> 3)
    {
      v408 = *(_QWORD *)(v407 + 8 * v1597);
      if (v408)
      {
        v409 = *(unsigned __int16 *)(v408 + 2 * (HIDWORD(v319) & 0x7F));
        v411 = v406[7];
        v410 = v406[8];
        if (v409 < (v410 - v411) >> 3)
        {
          v412 = v411 + 8 * v409;
          if (v412 != v410 && *(_DWORD *)(v412 + 4) == HIDWORD(v319))
          {
            v414 = v406[10];
            v415 = (_BYTE *)(v414 + v409);
            if (v414 + v409 != v406[11] && v414 != 0)
            {
              v435 = (_QWORD *)gdc::Registry::storage<arComponents::ExternalAssetRequestData>(v405);
              gdc::ComponentStorageWrapper<arComponents::ExternalAssetRequestData>::remove(v435, v319);
              gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::_removeStatusTag(v405, v319, *v415);
              v436 = 0;
              *v415 = 0;
              goto LABEL_503;
            }
          }
        }
      }
    }
    v417 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v405);
    v1606 = v319;
    v418 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v417 + 4, (uint64_t)&v1606);
    if ((v419 & 1) == 0)
    {
      v420 = (_BYTE *)(v417[10] + (((uint64_t)v418 - v417[7]) >> 3));
      *v420 = 0;
      v421 = v417[31];
      if (v420 != (_BYTE *)v417[11])
      {
        for (jj = (_QWORD *)v417[16]; jj; jj = (_QWORD *)*jj)
        {
          *(_QWORD *)v1611 = &v1606;
          *(_QWORD *)&v1611[8] = 1;
          *(_QWORD *)&v1600 = v421;
          v423 = jj[6];
          if (!v423)
            goto LABEL_1837;
          (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v423 + 48))(v423, &v1600, v1611);
        }
        goto LABEL_494;
      }
LABEL_491:
      for (kk = (_QWORD *)v417[22]; kk; kk = (_QWORD *)*kk)
      {
        *(_QWORD *)v1611 = &v1606;
        *(_QWORD *)&v1611[8] = 1;
        *(_QWORD *)&v1600 = v421;
        v449 = kk[6];
        if (!v449)
          goto LABEL_1837;
        (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v449 + 48))(v449, &v1600, v1611);
      }
LABEL_494:
      v450 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v405);
      v451 = v450[4];
      if (v1597 < (v450[5] - v451) >> 3
        && (v452 = *(_QWORD *)(v451 + 8 * v1597)) != 0
        && (v453 = *(unsigned __int16 *)(v452 + 2 * (HIDWORD(v319) & 0x7F)),
            v455 = v450[7],
            v454 = v450[8],
            v453 < (v454 - v455) >> 3)
        && ((v456 = v455 + 8 * v453, v456 != v454) ? (v457 = *(_DWORD *)(v456 + 4) == HIDWORD(v319)) : (v457 = 0), v457))
      {
        v415 = (_BYTE *)(v450[10] + v453);
      }
      else
      {
        v415 = (_BYTE *)v450[11];
      }
      v436 = *v415;
      if (v436 == 2)
      {
LABEL_506:
        v462 = (uint64_t *)gdc::Registry::storage<arComponents::ExternalAssetRequestData>(v405);
        v1606 = v319;
        v463 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v462 + 4, (uint64_t)&v1606);
        if ((v464 & 1) != 0)
        {
          v470 = (char *)v462[11];
          v469 = v462[12];
          if ((unint64_t)v470 >= v469)
          {
            v472 = (char *)v462[10];
            v473 = (v470 - v472) >> 3;
            v474 = v473 + 1;
            if ((unint64_t)(v473 + 1) >> 61)
LABEL_1821:
              abort();
            v475 = v469 - (_QWORD)v472;
            if (v475 >> 2 > v474)
              v474 = v475 >> 2;
            if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFF8)
              v476 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v476 = v474;
            if (v476)
            {
              if (v476 >> 61)
                goto LABEL_1819;
              v477 = operator new(8 * v476);
            }
            else
            {
              v477 = 0;
            }
            v478 = &v477[8 * v473];
            *v478 = 0x11080000000025B2;
            v471 = v478 + 1;
            if (v470 != v472)
            {
              v479 = v470 - v472 - 8;
              if (v479 < 0x58)
                goto LABEL_1840;
              if ((unint64_t)(v472 - v477) < 0x20)
                goto LABEL_1840;
              v480 = (v479 >> 3) + 1;
              v481 = &v477[8 * v473 - 16];
              v482 = v470 - 16;
              v483 = v480 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v484 = *(_OWORD *)v482;
                *(v481 - 1) = *((_OWORD *)v482 - 1);
                *v481 = v484;
                v481 -= 2;
                v482 -= 32;
                v483 -= 4;
              }
              while (v483);
              v478 -= v480 & 0x3FFFFFFFFFFFFFFCLL;
              v470 -= 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
              if (v480 != (v480 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1840:
                do
                {
                  v485 = *((_QWORD *)v470 - 1);
                  v470 -= 8;
                  *--v478 = v485;
                }
                while (v470 != v472);
              }
            }
            v462[10] = (uint64_t)v478;
            v462[11] = (uint64_t)v471;
            v462[12] = (uint64_t)&v477[8 * v476];
            if (v472)
              operator delete(v472);
          }
          else
          {
            *(_QWORD *)v470 = 0x11080000000025B2;
            v471 = v470 + 8;
          }
          v462[11] = (uint64_t)v471;
          v466 = v462[31];
        }
        else
        {
          v465 = (_QWORD *)((char *)v463 + v462[10] - v462[7]);
          *v465 = 0x11080000000025B2;
          v466 = v462[31];
          if (v465 != (_QWORD *)v462[11])
          {
            for (mm = (_QWORD *)v462[16]; mm; mm = (_QWORD *)*mm)
            {
              *(_QWORD *)v1611 = &v1606;
              *(_QWORD *)&v1611[8] = 1;
              *(_QWORD *)&v1600 = v466;
              v468 = mm[6];
              if (!v468)
                goto LABEL_1837;
              (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v468 + 48))(v468, &v1600, v1611);
            }
            goto LABEL_537;
          }
        }
        for (nn = (_QWORD *)v462[22]; nn; nn = (_QWORD *)*nn)
        {
          *(_QWORD *)v1611 = &v1606;
          *(_QWORD *)&v1611[8] = 1;
          *(_QWORD *)&v1600 = v466;
          v487 = nn[6];
          if (!v487)
            goto LABEL_1837;
          (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v487 + 48))(v487, &v1600, v1611);
        }
LABEL_537:
        v488 = *(_QWORD *)(a1 + 120);
        v489 = *(_QWORD *)(v289 + 200);
        v490 = *(_QWORD *)(v289 + 208);
        v1593 = v489;
        *(_QWORD *)&v1600 = v489;
        *((_QWORD *)&v1600 + 1) = v490;
        if (v490)
        {
          v491 = (unint64_t *)(v490 + 8);
          do
            v492 = __ldxr(v491);
          while (__stxr(v492 + 1, v491));
        }
        v493 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v488);
        v494 = v493[4];
        if (v1597 < (v493[5] - v494) >> 3)
        {
          v495 = *(_QWORD *)(v494 + 8 * v1597);
          if (v495)
          {
            v496 = *(unsigned __int16 *)(v495 + 2 * (HIDWORD(v319) & 0x7F));
            v498 = v493[7];
            v497 = v493[8];
            if (v496 < (v497 - v498) >> 3)
            {
              v499 = v498 + 8 * v496;
              if (v499 != v497 && *(_DWORD *)(v499 + 4) == HIDWORD(v319))
              {
                v501 = v493[10];
                v502 = (_BYTE *)(v501 + v496);
                if (v501 + v496 != v493[11] && v501 != 0)
                {
                  v522 = (uint64_t *)gdc::Registry::storage<arComponents::LabelIconRequestData>(v488);
                  v1605 = v319;
                  if (geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(v522 + 4, HIDWORD(v319)))
                  {
                    v524 = (_QWORD *)v522[28];
                    if (v524)
                    {
                      v525 = v522[31];
                      do
                      {
                        *(_QWORD *)v1611 = &v1605;
                        *(_QWORD *)&v1611[8] = 1;
                        v1606 = v525;
                        v526 = v524[6];
                        if (!v526)
                          goto LABEL_1837;
                        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v526 + 48))(v526, &v1606, v1611);
                        v524 = (_QWORD *)*v524;
                      }
                      while (v524);
                    }
                  }
                  gdc::component::DataRequest<arComponents::LabelIconRequestData>::_removeStatusTag(v488, v319, *v502);
                  v527 = 0;
                  *v502 = 0;
                  goto LABEL_609;
                }
              }
            }
          }
        }
        v504 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v488);
        v1605 = v319;
        v505 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v504 + 4, (uint64_t)&v1605);
        if ((v506 & 1) == 0)
        {
          v507 = (_BYTE *)(v504[10] + (((uint64_t)v505 - v504[7]) >> 3));
          *v507 = 0;
          v508 = v504[31];
          if (v507 != (_BYTE *)v504[11])
          {
            for (i1 = (_QWORD *)v504[16]; i1; i1 = (_QWORD *)*i1)
            {
              *(_QWORD *)v1611 = &v1605;
              *(_QWORD *)&v1611[8] = 1;
              v1606 = v508;
              v510 = i1[6];
              if (!v510)
                goto LABEL_1837;
              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v510 + 48))(v510, &v1606, v1611);
            }
            goto LABEL_600;
          }
LABEL_597:
          for (i2 = (_QWORD *)v504[22]; i2; i2 = (_QWORD *)*i2)
          {
            *(_QWORD *)v1611 = &v1605;
            *(_QWORD *)&v1611[8] = 1;
            v1606 = v508;
            v540 = i2[6];
            if (!v540)
              goto LABEL_1837;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v540 + 48))(v540, &v1606, v1611);
          }
LABEL_600:
          v541 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v488);
          v542 = v541[4];
          if (v1597 < (v541[5] - v542) >> 3
            && (v543 = *(_QWORD *)(v542 + 8 * v1597)) != 0
            && (v544 = *(unsigned __int16 *)(v543 + 2 * (HIDWORD(v319) & 0x7F)),
                v546 = v541[7],
                v545 = v541[8],
                v544 < (v545 - v546) >> 3)
            && ((v547 = v546 + 8 * v544, v547 != v545) ? (v548 = *(_DWORD *)(v547 + 4) == HIDWORD(v319)) : (v548 = 0),
                v548))
          {
            v502 = (_BYTE *)(v541[10] + v544);
          }
          else
          {
            v502 = (_BYTE *)v541[11];
          }
          v527 = *v502;
          if (v527 == 2)
          {
LABEL_638:
            v571 = (uint64_t *)gdc::Registry::storage<arComponents::LabelIconRequestData>(v488);
            v1605 = v319;
            v572 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v571 + 4, (uint64_t)&v1605);
            if ((v573 & 1) != 0)
            {
              v580 = (char *)v571[11];
              v579 = v571[12];
              if ((unint64_t)v580 >= v579)
              {
                v583 = (char *)v571[10];
                v584 = (v580 - v583) >> 4;
                v585 = v584 + 1;
                if ((unint64_t)(v584 + 1) >> 60)
LABEL_1820:
                  abort();
                v586 = v579 - (_QWORD)v583;
                if (v586 >> 3 > v585)
                  v585 = v586 >> 3;
                if ((unint64_t)v586 >= 0x7FFFFFFFFFFFFFF0)
                  v587 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v587 = v585;
                if (v587)
                {
                  if (v587 >> 60)
                    goto LABEL_1819;
                  v588 = (char *)operator new(16 * v587);
                }
                else
                {
                  v588 = 0;
                }
                v589 = &v588[16 * v584];
                *(_QWORD *)v589 = v1593;
                *((_QWORD *)v589 + 1) = v490;
                if (v490)
                {
                  v590 = (unint64_t *)(v490 + 8);
                  do
                    v591 = __ldxr(v590);
                  while (__stxr(v591 + 1, v590));
                  v583 = (char *)v571[10];
                  v580 = (char *)v571[11];
                }
                v592 = &v588[16 * v587];
                v574 = (uint64_t)(v589 + 16);
                if (v580 == v583)
                {
                  v571[10] = (uint64_t)v589;
                  v571[11] = v574;
                  v571[12] = (uint64_t)v592;
                }
                else
                {
                  do
                  {
                    v593 = *((_OWORD *)v580 - 1);
                    v580 -= 16;
                    *((_OWORD *)v589 - 1) = v593;
                    v589 -= 16;
                    *(_QWORD *)v580 = 0;
                    *((_QWORD *)v580 + 1) = 0;
                  }
                  while (v580 != v583);
                  v583 = (char *)v571[10];
                  v594 = (char *)v571[11];
                  v571[10] = (uint64_t)v589;
                  v571[11] = v574;
                  v571[12] = (uint64_t)v592;
                  while (v594 != v583)
                  {
                    v595 = (std::__shared_weak_count *)*((_QWORD *)v594 - 1);
                    if (v595)
                    {
                      v596 = (unint64_t *)&v595->__shared_owners_;
                      do
                        v597 = __ldaxr(v596);
                      while (__stlxr(v597 - 1, v596));
                      if (!v597)
                      {
                        ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                        std::__shared_weak_count::__release_weak(v595);
                      }
                    }
                    v594 -= 16;
                  }
                }
                if (v583)
                  operator delete(v583);
              }
              else
              {
                *(_QWORD *)v580 = v1593;
                *((_QWORD *)v580 + 1) = v490;
                if (v490)
                {
                  v581 = (unint64_t *)(v490 + 8);
                  do
                    v582 = __ldxr(v581);
                  while (__stxr(v582 + 1, v581));
                }
                v574 = (uint64_t)(v580 + 16);
              }
              v571[11] = v574;
            }
            else
            {
              v574 = v571[10] + 2 * ((_QWORD)v572 - v571[7]);
              v575 = v1600;
              v1600 = 0uLL;
              v576 = *(std::__shared_weak_count **)(v574 + 8);
              *(_OWORD *)v574 = v575;
              if (v576)
              {
                v577 = (unint64_t *)&v576->__shared_owners_;
                do
                  v578 = __ldaxr(v577);
                while (__stlxr(v578 - 1, v577));
                if (!v578)
                {
                  ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
                  std::__shared_weak_count::__release_weak(v576);
                }
              }
            }
            v598 = v571[31];
            if (v574 == v571[11])
            {
              for (i3 = (_QWORD *)v571[22]; i3; i3 = (_QWORD *)*i3)
              {
                *(_QWORD *)v1611 = &v1605;
                *(_QWORD *)&v1611[8] = 1;
                v1606 = v598;
                v602 = i3[6];
                if (!v602)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v602 + 48))(v602, &v1606, v1611);
              }
            }
            else
            {
              for (i4 = (_QWORD *)v571[16]; i4; i4 = (_QWORD *)*i4)
              {
                *(_QWORD *)v1611 = &v1605;
                *(_QWORD *)&v1611[8] = 1;
                v1606 = v598;
                v600 = i4[6];
                if (!v600)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v600 + 48))(v600, &v1606, v1611);
              }
            }
            v603 = (std::__shared_weak_count *)*((_QWORD *)&v1600 + 1);
            if (*((_QWORD *)&v1600 + 1))
            {
              v604 = (unint64_t *)(*((_QWORD *)&v1600 + 1) + 8);
              do
                v605 = __ldaxr(v604);
              while (__stlxr(v605 - 1, v604));
              if (!v605)
              {
                ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
                std::__shared_weak_count::__release_weak(v603);
              }
            }
            v606 = gdc::Registry::create(*(gdc::Registry **)(a1 + 120));
            v607 = (uint64_t *)gdc::Registry::storage<arComponents::ShadowPipeline>(*(_QWORD *)(a1 + 120));
            gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v607, v606);
            v608 = (uint64_t *)gdc::Registry::storage<arComponents::RotateTowardsUser>(*(_QWORD *)(a1 + 120));
            gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v608, v606);
            v609 = *(_QWORD *)(a1 + 120);
            v610 = v1601;
            v611.i32[0] = *(_DWORD *)(v1601 + 196);
            *(float32x4_t *)v1611 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v611))), v1586);
            v612 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(v609);
            gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v612, v606, (uint64_t)v1611);
            v613 = *(_QWORD *)(a1 + 120);
            *(_DWORD *)v1611 = 1065353216;
            v614 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v613);
            gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v614, v606, v1611);
            v615 = *(_QWORD *)(v610 + 88);
            v616 = *(double *)(v610 + 80) * 0.333333333;
            v617 = *(_QWORD *)(a1 + 120);
            v618 = *(_OWORD *)(v610 + 64);
            *(_OWORD *)v1611 = *(_OWORD *)(v610 + 16);
            *(_QWORD *)&v1611[16] = *(_QWORD *)(v610 + 32);
            *(_OWORD *)&v1611[24] = *(_OWORD *)(v610 + 40);
            v1612 = *(_QWORD *)(v610 + 56);
            *(_OWORD *)v1613 = v618;
            *(double *)&v1613[16] = v616;
            v1614 = v615;
            v619 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v617);
            gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v619, v606, (__int128 *)v1611);
            v620 = *(_QWORD *)(a1 + 120);
            *(_QWORD *)v1611 = _D8;
            gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::addRequest(v620, v606, (uint64_t)v1611);
            v1594 = gdc::Registry::create(*(gdc::Registry **)(a1 + 120));
            v621 = *(_QWORD *)(a1 + 120);
            v622 = v1587[1];
            *(_QWORD *)v1611 = *v1587;
            *(_QWORD *)&v1611[8] = v622;
            if (v622)
            {
              v623 = (unint64_t *)(v622 + 8);
              do
                v624 = __ldxr(v623);
              while (__stxr(v624 + 1, v623));
            }
            v625 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(v621);
            gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v625, v1594, v1611);
            v626 = *(std::__shared_weak_count **)&v1611[8];
            if (*(_QWORD *)&v1611[8])
            {
              v627 = (unint64_t *)(*(_QWORD *)&v1611[8] + 8);
              do
                v628 = __ldaxr(v627);
              while (__stlxr(v628 - 1, v627));
              if (!v628)
              {
                ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                std::__shared_weak_count::__release_weak(v626);
              }
            }
            v629 = *(_QWORD *)(a1 + 120);
            v630 = v1601;
            v1600 = v1601;
            if (*((_QWORD *)&v1601 + 1))
            {
              v631 = (unint64_t *)(*((_QWORD *)&v1601 + 1) + 8);
              do
                v632 = __ldxr(v631);
              while (__stxr(v632 + 1, v631));
            }
            v633 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v629);
            v1605 = v1594;
            v634 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v633 + 4, (uint64_t)&v1605);
            if ((v635 & 1) != 0)
            {
              v642 = (char *)v633[11];
              v641 = v633[12];
              if ((unint64_t)v642 >= v641)
              {
                v645 = (char *)v633[10];
                v646 = (v642 - v645) >> 4;
                v647 = v646 + 1;
                if ((unint64_t)(v646 + 1) >> 60)
                  abort();
                v648 = v641 - (_QWORD)v645;
                if (v648 >> 3 > v647)
                  v647 = v648 >> 3;
                if ((unint64_t)v648 >= 0x7FFFFFFFFFFFFFF0)
                  v649 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v649 = v647;
                if (v649)
                {
                  if (v649 >> 60)
                    goto LABEL_1819;
                  v650 = (char *)operator new(16 * v649);
                }
                else
                {
                  v650 = 0;
                }
                v651 = &v650[16 * v646];
                *(_OWORD *)v651 = v630;
                if (*((_QWORD *)&v630 + 1))
                {
                  v652 = (unint64_t *)(*((_QWORD *)&v630 + 1) + 8);
                  do
                    v653 = __ldxr(v652);
                  while (__stxr(v653 + 1, v652));
                  v645 = (char *)v633[10];
                  v642 = (char *)v633[11];
                }
                v654 = &v650[16 * v649];
                v636 = (uint64_t)(v651 + 16);
                if (v642 == v645)
                {
                  v633[10] = (uint64_t)v651;
                  v633[11] = v636;
                  v633[12] = (uint64_t)v654;
                }
                else
                {
                  do
                  {
                    v655 = *((_OWORD *)v642 - 1);
                    v642 -= 16;
                    *((_OWORD *)v651 - 1) = v655;
                    v651 -= 16;
                    *(_QWORD *)v642 = 0;
                    *((_QWORD *)v642 + 1) = 0;
                  }
                  while (v642 != v645);
                  v645 = (char *)v633[10];
                  v656 = (char *)v633[11];
                  v633[10] = (uint64_t)v651;
                  v633[11] = v636;
                  v633[12] = (uint64_t)v654;
                  while (v656 != v645)
                  {
                    v657 = (std::__shared_weak_count *)*((_QWORD *)v656 - 1);
                    if (v657)
                    {
                      v658 = (unint64_t *)&v657->__shared_owners_;
                      do
                        v659 = __ldaxr(v658);
                      while (__stlxr(v659 - 1, v658));
                      if (!v659)
                      {
                        ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
                        std::__shared_weak_count::__release_weak(v657);
                      }
                    }
                    v656 -= 16;
                  }
                }
                if (v645)
                  operator delete(v645);
              }
              else
              {
                *(_OWORD *)v642 = v630;
                if (*((_QWORD *)&v630 + 1))
                {
                  v643 = (unint64_t *)(*((_QWORD *)&v630 + 1) + 8);
                  do
                    v644 = __ldxr(v643);
                  while (__stxr(v644 + 1, v643));
                }
                v636 = (uint64_t)(v642 + 16);
              }
              v633[11] = v636;
            }
            else
            {
              v636 = v633[10] + 2 * ((_QWORD)v634 - v633[7]);
              v637 = v1600;
              v1600 = 0uLL;
              v638 = *(std::__shared_weak_count **)(v636 + 8);
              *(_OWORD *)v636 = v637;
              if (v638)
              {
                v639 = (unint64_t *)&v638->__shared_owners_;
                do
                  v640 = __ldaxr(v639);
                while (__stlxr(v640 - 1, v639));
                if (!v640)
                {
                  ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
                  std::__shared_weak_count::__release_weak(v638);
                }
              }
            }
            v660 = v633[31];
            if (v636 == v633[11])
            {
              for (i5 = (_QWORD *)v633[22]; i5; i5 = (_QWORD *)*i5)
              {
                *(_QWORD *)v1611 = &v1605;
                *(_QWORD *)&v1611[8] = 1;
                v1606 = v660;
                v664 = i5[6];
                if (!v664)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v664 + 48))(v664, &v1606, v1611);
              }
            }
            else
            {
              for (i6 = (_QWORD *)v633[16]; i6; i6 = (_QWORD *)*i6)
              {
                *(_QWORD *)v1611 = &v1605;
                *(_QWORD *)&v1611[8] = 1;
                v1606 = v660;
                v662 = i6[6];
                if (!v662)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v662 + 48))(v662, &v1606, v1611);
              }
            }
            v665 = (std::__shared_weak_count *)*((_QWORD *)&v1600 + 1);
            if (*((_QWORD *)&v1600 + 1))
            {
              v666 = (unint64_t *)(*((_QWORD *)&v1600 + 1) + 8);
              do
                v667 = __ldaxr(v666);
              while (__stlxr(v667 - 1, v666));
              if (!v667)
              {
                ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
                std::__shared_weak_count::__release_weak(v665);
              }
            }
            v668 = (uint64_t *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(_QWORD *)(a1 + 120));
            v1606 = v1594;
            v669 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v668 + 4, (uint64_t)&v1606);
            if ((v670 & 1) != 0)
            {
              v676 = (unint64_t *)v668[11];
              v675 = v668[12];
              if ((unint64_t)v676 >= v675)
              {
                v678 = (unint64_t *)v668[10];
                v679 = ((char *)v676 - (char *)v678) >> 4;
                v680 = v679 + 1;
                if ((unint64_t)(v679 + 1) >> 60)
                  abort();
                v681 = v675 - (_QWORD)v678;
                if (v681 >> 3 > v680)
                  v680 = v681 >> 3;
                if ((unint64_t)v681 >= 0x7FFFFFFFFFFFFFF0)
                  v682 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v682 = v680;
                if (v682)
                {
                  if (v682 >> 60)
                    goto LABEL_1819;
                  v683 = (char *)operator new(16 * v682);
                }
                else
                {
                  v683 = 0;
                }
                v684 = (unint64_t *)&v683[16 * v679];
                *v684 = v319;
                v684[1] = v606;
                v685 = v684;
                if (v676 != v678)
                {
                  do
                  {
                    *((_OWORD *)v685 - 1) = *((_OWORD *)v676 - 1);
                    v685 -= 2;
                    v676 -= 2;
                  }
                  while (v676 != v678);
                  v676 = (unint64_t *)v668[10];
                }
                v677 = v684 + 2;
                v668[10] = (uint64_t)v685;
                v668[11] = (uint64_t)(v684 + 2);
                v668[12] = (uint64_t)&v683[16 * v682];
                if (v676)
                  operator delete(v676);
              }
              else
              {
                *v676 = v319;
                v676[1] = v606;
                v677 = v676 + 2;
              }
              v668[11] = (uint64_t)v677;
              v672 = v668[31];
            }
            else
            {
              v671 = (unint64_t *)(v668[10] + 2 * ((_QWORD)v669 - v668[7]));
              *v671 = v319;
              v671[1] = v606;
              v672 = v668[31];
              if (v671 != (unint64_t *)v668[11])
              {
                for (i7 = (_QWORD *)v668[16]; i7; i7 = (_QWORD *)*i7)
                {
                  *(_QWORD *)v1611 = &v1606;
                  *(_QWORD *)&v1611[8] = 1;
                  *(_QWORD *)&v1600 = v672;
                  v674 = i7[6];
                  if (!v674)
                    goto LABEL_1837;
                  (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v674 + 48))(v674, &v1600, v1611);
                }
                goto LABEL_780;
              }
            }
            for (i8 = (_QWORD *)v668[22]; i8; i8 = (_QWORD *)*i8)
            {
              *(_QWORD *)v1611 = &v1606;
              *(_QWORD *)&v1611[8] = 1;
              *(_QWORD *)&v1600 = v672;
              v687 = i8[6];
              if (!v687)
                goto LABEL_1837;
              (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v687 + 48))(v687, &v1600, v1611);
            }
LABEL_780:
            v688 = *(_QWORD *)(a1 + 120);
            v689 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v688);
            v690 = v689[4];
            if (v1597 >= (v689[5] - v690) >> 3)
              goto LABEL_935;
            v691 = *(_QWORD *)(v690 + 8 * v1597);
            if (!v691)
              goto LABEL_935;
            v692 = HIDWORD(v319) & 0x7F;
            v693 = *(unsigned __int16 *)(v691 + 2 * v692);
            v695 = v689[7];
            v694 = v689[8];
            if (v693 >= (v694 - v695) >> 3)
              goto LABEL_935;
            v696 = v695 + 8 * v693;
            if (v696 == v694 || *(_DWORD *)(v696 + 4) != HIDWORD(v319))
              goto LABEL_935;
            v698 = v689[10];
            v1574 = (unsigned __int8 *)(v698 + v693);
            if (v698 + v693 == v689[11] || v698 == 0)
              goto LABEL_935;
            v700 = 0;
            v701 = 0xCBF29CE484222325;
            do
              v701 = 0x100000001B3 * (v701 ^ aStdStringViewG_782[v700++ + 38]);
            while (v700 != 118);
            v702 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(v688, v701);
            v703 = v702[4];
            if (v1597 < (v702[5] - v703) >> 3
              && (v704 = *(_QWORD *)(v703 + 8 * v1597)) != 0
              && (v705 = *(unsigned __int16 *)(v704 + 2 * v692),
                  v707 = v702[7],
                  v706 = v702[8],
                  v705 < (v706 - v707) >> 3)
              && ((v708 = v707 + 8 * v705, v708 != v706) ? (v709 = *(_DWORD *)(v708 + 4) == HIDWORD(v319)) : (v709 = 0),
                  v709))
            {
              v710 = v702[11];
              v711 = v702[10] + 24 * v705;
            }
            else
            {
              v710 = v702[11];
              v711 = v710;
            }
            if (v711 == v710)
              v712 = 0;
            else
              v712 = v711;
            if (v712)
            {
              v713 = *(unint64_t **)v712;
              v714 = *(unint64_t **)(v712 + 8);
              if (*(unint64_t **)v712 != v714)
              {
                while (__PAIR64__(*((unsigned __int16 *)v713 + 1), *(unsigned __int16 *)v713) != __PAIR64__(WORD1(v1594), (unsigned __int16)v1594)|| *((_DWORD *)v713 + 1) != HIDWORD(v1594))
                {
                  if (++v713 == v714)
                  {
                    v713 = *(unint64_t **)(v712 + 8);
                    break;
                  }
                }
              }
              if (v713 == v714)
              {
LABEL_866:
                v756 = *(_QWORD *)(v712 + 16);
                if ((unint64_t)v714 < v756)
                {
                  *v714 = v1594;
                  v757 = v714 + 1;
                  goto LABEL_890;
                }
                v758 = *(unint64_t **)v712;
                v759 = (uint64_t)v714 - *(_QWORD *)v712;
                v760 = v759 >> 3;
                v761 = (v759 >> 3) + 1;
                if (v761 >> 61)
                  goto LABEL_1831;
                v762 = v756 - (_QWORD)v758;
                if (v762 >> 2 > v761)
                  v761 = v762 >> 2;
                if ((unint64_t)v762 >= 0x7FFFFFFFFFFFFFF8)
                  v763 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v763 = v761;
                if (v763)
                {
                  if (v763 >> 61)
                    goto LABEL_1819;
                  v764 = operator new(8 * v763);
                }
                else
                {
                  v764 = 0;
                }
                v765 = (unint64_t *)&v764[8 * v760];
                *v765 = v1594;
                v757 = v765 + 1;
                if (v714 == v758)
                {
LABEL_888:
                  *(_QWORD *)v712 = v765;
                  *(_QWORD *)(v712 + 8) = v757;
                  *(_QWORD *)(v712 + 16) = &v764[8 * v763];
                  if (v714)
                  {
                    v774 = v757;
                    operator delete(v714);
                    v757 = v774;
                  }
LABEL_890:
                  v775 = 0;
                  *(_QWORD *)(v712 + 8) = v757;
                  v776 = 0xCBF29CE484222325;
                  do
                    v776 = 0x100000001B3 * (v776 ^ aStdStringViewG_783[v775++ + 38]);
                  while (v775 != 114);
                  v777 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(v688, v776);
                  v778 = v777[4];
                  if (v1594 >> 39 < (v777[5] - v778) >> 3)
                  {
                    v779 = *(_QWORD *)(v778 + 8 * (v1594 >> 39));
                    if (v779)
                    {
                      v780 = *(unsigned __int16 *)(v779 + 2 * (HIDWORD(v1594) & 0x7F));
                      v782 = v777[7];
                      v781 = v777[8];
                      if (v780 < (v781 - v782) >> 3)
                      {
                        v783 = v782 + 8 * v780;
                        if (v783 != v781 && *(_DWORD *)(v783 + 4) == HIDWORD(v1594))
                        {
                          v785 = v777[10];
                          v786 = (size_t *)(v785 + 12 * v780);
                          if (v786 != (size_t *)v777[11] && v785 != 0)
                            gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v688, *v786, v1594);
                        }
                      }
                    }
                  }
                  v788 = 0;
                  v789 = *v1574;
                  v790 = 0xCBF29CE484222325;
                  do
                    v790 = 0x100000001B3 * (v790 ^ aStdStringViewG_783[v788++ + 38]);
                  while (v788 != 114);
                  v791 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(v688, v790);
                  v1606 = v1594;
                  v792 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v791 + 4, (uint64_t)&v1606);
                  if ((v793 & 1) != 0)
                  {
                    v799 = (_BYTE *)v791[11];
                    v798 = v791[12];
                    if ((unint64_t)v799 >= v798)
                    {
                      v801 = v791[10];
                      v802 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v799[-v801] >> 2) + 1;
                      if (v802 > 0x1555555555555555)
                        goto LABEL_1831;
                      v803 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v798 - v801) >> 2);
                      if (2 * v803 > v802)
                        v802 = 2 * v803;
                      if (v803 >= 0xAAAAAAAAAAAAAAALL)
                        v804 = 0x1555555555555555;
                      else
                        v804 = v802;
                      if (v804)
                      {
                        if (v804 > 0x1555555555555555)
                          goto LABEL_1819;
                        v805 = (char *)operator new(12 * v804);
                      }
                      else
                      {
                        v805 = 0;
                      }
                      v806 = &v805[4 * ((uint64_t)&v799[-v801] >> 2)];
                      *(_QWORD *)v806 = v319;
                      v806[8] = v789;
                      v807 = (uint64_t)v806;
                      if (v799 != (_BYTE *)v801)
                      {
                        do
                        {
                          v808 = *(_QWORD *)(v799 - 12);
                          v799 -= 12;
                          v809 = v799[8];
                          *(_QWORD *)(v807 - 12) = v808;
                          v807 -= 12;
                          *(_BYTE *)(v807 + 8) = v809;
                        }
                        while (v799 != (_BYTE *)v801);
                        v799 = (_BYTE *)v791[10];
                      }
                      v800 = v806 + 12;
                      v791[10] = v807;
                      v791[11] = (uint64_t)(v806 + 12);
                      v791[12] = (uint64_t)&v805[12 * v804];
                      if (v799)
                        operator delete(v799);
                    }
                    else
                    {
                      *(_QWORD *)v799 = v319;
                      v799[8] = v789;
                      v800 = v799 + 12;
                    }
                    v791[11] = (uint64_t)v800;
                    v795 = v791[31];
                  }
                  else
                  {
                    v794 = v791[10] + 12 * (((uint64_t)v792 - v791[7]) >> 3);
                    *(_QWORD *)v794 = v319;
                    *(_BYTE *)(v794 + 8) = v789;
                    v795 = v791[31];
                    if (v794 != v791[11])
                    {
                      for (i9 = (_QWORD *)v791[16]; i9; i9 = (_QWORD *)*i9)
                      {
                        *(_QWORD *)v1611 = &v1606;
                        *(_QWORD *)&v1611[8] = 1;
                        *(_QWORD *)&v1600 = v795;
                        v797 = i9[6];
                        if (!v797)
                          goto LABEL_1837;
                        (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v797 + 48))(v797, &v1600, v1611);
                      }
LABEL_934:
                      gdc::component::DataRequestObserver::updateStatusCounts(v688, v1594, v319, 0, *v1574);
                      goto LABEL_935;
                    }
                  }
                  for (i10 = (_QWORD *)v791[22]; i10; i10 = (_QWORD *)*i10)
                  {
                    *(_QWORD *)v1611 = &v1606;
                    *(_QWORD *)&v1611[8] = 1;
                    *(_QWORD *)&v1600 = v795;
                    v811 = i10[6];
                    if (!v811)
                      goto LABEL_1837;
                    (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v811 + 48))(v811, &v1600, v1611);
                  }
                  goto LABEL_934;
                }
                v766 = (char *)v714 - (char *)v758 - 8;
                if (v766 >= 0x58)
                {
                  if ((unint64_t)((char *)v714 - v764 - v759) >= 0x20)
                  {
                    v768 = (v766 >> 3) + 1;
                    v767 = &v714[-(v768 & 0x3FFFFFFFFFFFFFFCLL)];
                    v769 = &v764[8 * v760 - 16];
                    v770 = v714 - 2;
                    v771 = v768 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v772 = *(_OWORD *)v770;
                      *(v769 - 1) = *((_OWORD *)v770 - 1);
                      *v769 = v772;
                      v769 -= 2;
                      v770 -= 4;
                      v771 -= 4;
                    }
                    while (v771);
                    v765 -= v768 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v768 == (v768 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_887;
                  }
                  else
                  {
                    v767 = v714;
                  }
                }
                else
                {
                  v767 = v714;
                }
                do
                {
                  v773 = *--v767;
                  *--v765 = v773;
                }
                while (v767 != v758);
LABEL_887:
                v714 = *(unint64_t **)v712;
                goto LABEL_888;
              }
LABEL_935:
              v812 = *(_QWORD *)(a1 + 120);
              v813 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v812);
              v814 = v813[4];
              if (v1597 >= (v813[5] - v814) >> 3)
                goto LABEL_1090;
              v815 = *(_QWORD *)(v814 + 8 * v1597);
              if (!v815)
                goto LABEL_1090;
              v816 = HIDWORD(v319) & 0x7F;
              v817 = *(unsigned __int16 *)(v815 + 2 * v816);
              v819 = v813[7];
              v818 = v813[8];
              if (v817 >= (v818 - v819) >> 3)
                goto LABEL_1090;
              v820 = v819 + 8 * v817;
              if (v820 == v818 || *(_DWORD *)(v820 + 4) != HIDWORD(v319))
                goto LABEL_1090;
              v822 = v813[10];
              v1574 = (unsigned __int8 *)(v822 + v817);
              if (v822 + v817 == v813[11] || v822 == 0)
                goto LABEL_1090;
              v824 = 0;
              v825 = 0xCBF29CE484222325;
              do
                v825 = 0x100000001B3 * (v825 ^ aStdStringViewG_784[v824++ + 38]);
              while (v824 != 114);
              v826 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v812, v825);
              v827 = v826[4];
              if (v1597 < (v826[5] - v827) >> 3
                && (v828 = *(_QWORD *)(v827 + 8 * v1597)) != 0
                && (v829 = *(unsigned __int16 *)(v828 + 2 * v816),
                    v831 = v826[7],
                    v830 = v826[8],
                    v829 < (v830 - v831) >> 3)
                && ((v832 = v831 + 8 * v829, v832 != v830)
                  ? (v833 = *(_DWORD *)(v832 + 4) == HIDWORD(v319))
                  : (v833 = 0),
                    v833))
              {
                v834 = v826[11];
                v835 = v826[10] + 24 * v829;
              }
              else
              {
                v834 = v826[11];
                v835 = v834;
              }
              if (v835 == v834)
                v836 = 0;
              else
                v836 = v835;
              if (v836)
              {
                v837 = *(unint64_t **)v836;
                v838 = *(unint64_t **)(v836 + 8);
                if (*(unint64_t **)v836 != v838)
                {
                  while (__PAIR64__(*((unsigned __int16 *)v837 + 1), *(unsigned __int16 *)v837) != __PAIR64__(WORD1(v1594), (unsigned __int16)v1594)
                       || *((_DWORD *)v837 + 1) != HIDWORD(v1594))
                  {
                    if (++v837 == v838)
                    {
                      v837 = *(unint64_t **)(v836 + 8);
                      break;
                    }
                  }
                }
                if (v837 == v838)
                {
LABEL_1021:
                  v879 = *(_QWORD *)(v836 + 16);
                  if ((unint64_t)v838 < v879)
                  {
                    *v838 = v1594;
                    v880 = v838 + 1;
                    goto LABEL_1045;
                  }
                  v881 = *(unint64_t **)v836;
                  v882 = (uint64_t)v838 - *(_QWORD *)v836;
                  v883 = v882 >> 3;
                  v884 = (v882 >> 3) + 1;
                  if (v884 >> 61)
                    goto LABEL_1831;
                  v885 = v879 - (_QWORD)v881;
                  if (v885 >> 2 > v884)
                    v884 = v885 >> 2;
                  if ((unint64_t)v885 >= 0x7FFFFFFFFFFFFFF8)
                    v886 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v886 = v884;
                  if (v886)
                  {
                    if (v886 >> 61)
                      goto LABEL_1819;
                    v887 = v886;
                    v888 = operator new(8 * v886);
                    v886 = v887;
                  }
                  else
                  {
                    v888 = 0;
                  }
                  v889 = (unint64_t *)&v888[8 * v883];
                  *v889 = v1594;
                  v880 = v889 + 1;
                  if (v838 == v881)
                  {
LABEL_1043:
                    *(_QWORD *)v836 = v889;
                    *(_QWORD *)(v836 + 8) = v880;
                    *(_QWORD *)(v836 + 16) = &v888[8 * v886];
                    if (v838)
                      operator delete(v838);
LABEL_1045:
                    v898 = 0;
                    *(_QWORD *)(v836 + 8) = v880;
                    v899 = 0xCBF29CE484222325;
                    do
                      v899 = 0x100000001B3 * (v899 ^ aStdStringViewG_785[v898++ + 38]);
                    while (v898 != 110);
                    v900 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v812, v899);
                    v901 = v900[4];
                    if (v1594 >> 39 < (v900[5] - v901) >> 3)
                    {
                      v902 = *(_QWORD *)(v901 + 8 * (v1594 >> 39));
                      if (v902)
                      {
                        v903 = *(unsigned __int16 *)(v902 + 2 * (HIDWORD(v1594) & 0x7F));
                        v905 = v900[7];
                        v904 = v900[8];
                        if (v903 < (v904 - v905) >> 3)
                        {
                          v906 = v905 + 8 * v903;
                          if (v906 != v904 && *(_DWORD *)(v906 + 4) == HIDWORD(v1594))
                          {
                            v908 = v900[10];
                            v909 = (size_t *)(v908 + 12 * v903);
                            if (v909 != (size_t *)v900[11] && v908 != 0)
                              gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v812, *v909, v1594);
                          }
                        }
                      }
                    }
                    v911 = 0;
                    v912 = *v1574;
                    v913 = 0xCBF29CE484222325;
                    do
                      v913 = 0x100000001B3 * (v913 ^ aStdStringViewG_785[v911++ + 38]);
                    while (v911 != 110);
                    v914 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v812, v913);
                    v1606 = v1594;
                    v915 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v914 + 4, (uint64_t)&v1606);
                    if ((v916 & 1) != 0)
                    {
                      v922 = (_BYTE *)v914[11];
                      v921 = v914[12];
                      if ((unint64_t)v922 >= v921)
                      {
                        v924 = v914[10];
                        v925 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v922[-v924] >> 2) + 1;
                        if (v925 > 0x1555555555555555)
                          goto LABEL_1831;
                        v926 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v921 - v924) >> 2);
                        if (2 * v926 > v925)
                          v925 = 2 * v926;
                        if (v926 >= 0xAAAAAAAAAAAAAAALL)
                          v927 = 0x1555555555555555;
                        else
                          v927 = v925;
                        if (v927)
                        {
                          if (v927 > 0x1555555555555555)
                            goto LABEL_1819;
                          v928 = (char *)operator new(12 * v927);
                        }
                        else
                        {
                          v928 = 0;
                        }
                        v929 = &v928[4 * ((uint64_t)&v922[-v924] >> 2)];
                        *(_QWORD *)v929 = v319;
                        v929[8] = v912;
                        v930 = (uint64_t)v929;
                        if (v922 != (_BYTE *)v924)
                        {
                          do
                          {
                            v931 = *(_QWORD *)(v922 - 12);
                            v922 -= 12;
                            v932 = v922[8];
                            *(_QWORD *)(v930 - 12) = v931;
                            v930 -= 12;
                            *(_BYTE *)(v930 + 8) = v932;
                          }
                          while (v922 != (_BYTE *)v924);
                          v922 = (_BYTE *)v914[10];
                        }
                        v923 = v929 + 12;
                        v914[10] = v930;
                        v914[11] = (uint64_t)(v929 + 12);
                        v914[12] = (uint64_t)&v928[12 * v927];
                        if (v922)
                          operator delete(v922);
                      }
                      else
                      {
                        *(_QWORD *)v922 = v319;
                        v922[8] = v912;
                        v923 = v922 + 12;
                      }
                      v914[11] = (uint64_t)v923;
                      v918 = v914[31];
                    }
                    else
                    {
                      v917 = v914[10] + 12 * (((uint64_t)v915 - v914[7]) >> 3);
                      *(_QWORD *)v917 = v319;
                      *(_BYTE *)(v917 + 8) = v912;
                      v918 = v914[31];
                      if (v917 != v914[11])
                      {
                        for (i11 = (_QWORD *)v914[16]; i11; i11 = (_QWORD *)*i11)
                        {
                          *(_QWORD *)v1611 = &v1606;
                          *(_QWORD *)&v1611[8] = 1;
                          *(_QWORD *)&v1600 = v918;
                          v920 = i11[6];
                          if (!v920)
                            goto LABEL_1837;
                          (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v920 + 48))(v920, &v1600, v1611);
                        }
LABEL_1089:
                        gdc::component::DataRequestObserver::updateStatusCounts(v812, v1594, v319, 0, *v1574);
                        goto LABEL_1090;
                      }
                    }
                    for (i12 = (_QWORD *)v914[22]; i12; i12 = (_QWORD *)*i12)
                    {
                      *(_QWORD *)v1611 = &v1606;
                      *(_QWORD *)&v1611[8] = 1;
                      *(_QWORD *)&v1600 = v918;
                      v934 = i12[6];
                      if (!v934)
                        goto LABEL_1837;
                      (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v934 + 48))(v934, &v1600, v1611);
                    }
                    goto LABEL_1089;
                  }
                  v890 = (char *)v838 - (char *)v881 - 8;
                  if (v890 >= 0x58)
                  {
                    if ((unint64_t)((char *)v838 - v888 - v882) >= 0x20)
                    {
                      v892 = (v890 >> 3) + 1;
                      v891 = &v838[-(v892 & 0x3FFFFFFFFFFFFFFCLL)];
                      v893 = &v888[8 * v883 - 16];
                      v894 = v838 - 2;
                      v895 = v892 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v896 = *(_OWORD *)v894;
                        *(v893 - 1) = *((_OWORD *)v894 - 1);
                        *v893 = v896;
                        v893 -= 2;
                        v894 -= 4;
                        v895 -= 4;
                      }
                      while (v895);
                      v889 -= v892 & 0x3FFFFFFFFFFFFFFCLL;
                      if (v892 == (v892 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_1042;
                    }
                    else
                    {
                      v891 = v838;
                    }
                  }
                  else
                  {
                    v891 = v838;
                  }
                  do
                  {
                    v897 = *--v891;
                    *--v889 = v897;
                  }
                  while (v891 != v881);
LABEL_1042:
                  v838 = *(unint64_t **)v836;
                  goto LABEL_1043;
                }
LABEL_1090:
                v935 = *(_QWORD *)(a1 + 120);
                v936 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v935);
                v937 = v606 >> 39;
                v938 = v936[4];
                if (v606 >> 39 >= (v936[5] - v938) >> 3)
                  goto LABEL_1246;
                v939 = *(_QWORD *)(v938 + 8 * v937);
                if (!v939)
                  goto LABEL_1246;
                v940 = HIDWORD(v606) & 0x7F;
                v941 = *(unsigned __int16 *)(v939 + 2 * v940);
                v943 = v936[7];
                v942 = v936[8];
                if (v941 >= (v942 - v943) >> 3)
                  goto LABEL_1246;
                v944 = v943 + 8 * v941;
                if (v944 == v942 || *(_DWORD *)(v944 + 4) != HIDWORD(v606))
                  goto LABEL_1246;
                v946 = v936[10];
                v947 = (char *)(v946 + v941);
                if (v946 + v941 == v936[11] || v946 == 0)
                  goto LABEL_1246;
                v949 = 0;
                v950 = 0xCBF29CE484222325;
                do
                  v950 = 0x100000001B3 * (v950 ^ aStdStringViewG_786[v949++ + 38]);
                while (v949 != 116);
                v951 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v935, v950);
                v952 = v951[4];
                if (v937 < (v951[5] - v952) >> 3
                  && (v953 = *(_QWORD *)(v952 + 8 * v937)) != 0
                  && (v954 = *(unsigned __int16 *)(v953 + 2 * v940),
                      v956 = v951[7],
                      v955 = v951[8],
                      v954 < (v955 - v956) >> 3)
                  && ((v957 = v956 + 8 * v954, v957 != v955)
                    ? (v958 = *(_DWORD *)(v957 + 4) == HIDWORD(v606))
                    : (v958 = 0),
                      v958))
                {
                  v959 = v951[11];
                  v960 = v951[10] + 24 * v954;
                }
                else
                {
                  v959 = v951[11];
                  v960 = v959;
                }
                if (v960 == v959)
                  v961 = 0;
                else
                  v961 = v960;
                if (v961)
                {
                  v962 = *(unint64_t **)v961;
                  v963 = *(unint64_t **)(v961 + 8);
                  if (*(unint64_t **)v961 != v963)
                  {
                    while (__PAIR64__(*((unsigned __int16 *)v962 + 1), *(unsigned __int16 *)v962) != __PAIR64__(WORD1(v1594), (unsigned __int16)v1594)
                         || *((_DWORD *)v962 + 1) != HIDWORD(v1594))
                    {
                      if (++v962 == v963)
                      {
                        v962 = *(unint64_t **)(v961 + 8);
                        break;
                      }
                    }
                  }
                  if (v962 == v963)
                  {
LABEL_1177:
                    v1007 = *(_QWORD *)(v961 + 16);
                    if ((unint64_t)v963 < v1007)
                    {
                      *v963 = v1594;
                      v1008 = v963 + 1;
                      goto LABEL_1201;
                    }
                    v1009 = *(unint64_t **)v961;
                    v1010 = (uint64_t)v963 - *(_QWORD *)v961;
                    v1011 = v1010 >> 3;
                    v1012 = (v1010 >> 3) + 1;
                    if (v1012 >> 61)
                      goto LABEL_1831;
                    v1013 = v1007 - (_QWORD)v1009;
                    if (v1013 >> 2 > v1012)
                      v1012 = v1013 >> 2;
                    if ((unint64_t)v1013 >= 0x7FFFFFFFFFFFFFF8)
                      v1014 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v1014 = v1012;
                    if (v1014)
                    {
                      if (v1014 >> 61)
                        goto LABEL_1819;
                      v1015 = operator new(8 * v1014);
                    }
                    else
                    {
                      v1015 = 0;
                    }
                    v1016 = (unint64_t *)&v1015[8 * v1011];
                    *v1016 = v1594;
                    v1008 = v1016 + 1;
                    if (v963 == v1009)
                    {
LABEL_1199:
                      *(_QWORD *)v961 = v1016;
                      *(_QWORD *)(v961 + 8) = v1008;
                      *(_QWORD *)(v961 + 16) = &v1015[8 * v1014];
                      if (v963)
                      {
                        v1025 = v1008;
                        operator delete(v963);
                        v1008 = v1025;
                      }
LABEL_1201:
                      v1026 = 0;
                      *(_QWORD *)(v961 + 8) = v1008;
                      v1027 = 0xCBF29CE484222325;
                      do
                        v1027 = 0x100000001B3 * (v1027 ^ aStdStringViewG_787[v1026++ + 38]);
                      while (v1026 != 112);
                      v1028 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v935, v1027);
                      v1029 = v1028[4];
                      if (v1594 >> 39 < (v1028[5] - v1029) >> 3)
                      {
                        v1030 = *(_QWORD *)(v1029 + 8 * (v1594 >> 39));
                        if (v1030)
                        {
                          v1031 = *(unsigned __int16 *)(v1030 + 2 * (HIDWORD(v1594) & 0x7F));
                          v1033 = v1028[7];
                          v1032 = v1028[8];
                          if (v1031 < (v1032 - v1033) >> 3)
                          {
                            v1034 = v1033 + 8 * v1031;
                            if (v1034 != v1032 && *(_DWORD *)(v1034 + 4) == HIDWORD(v1594))
                            {
                              v1036 = v1028[10];
                              v1037 = (size_t *)(v1036 + 12 * v1031);
                              if (v1037 != (size_t *)v1028[11] && v1036 != 0)
                                gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v935, *v1037, v1594);
                            }
                          }
                        }
                      }
                      v1039 = 0;
                      v1040 = *v947;
                      v1041 = 0xCBF29CE484222325;
                      do
                        v1041 = 0x100000001B3 * (v1041 ^ aStdStringViewG_787[v1039++ + 38]);
                      while (v1039 != 112);
                      v1042 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v935, v1041);
                      v1606 = v1594;
                      v1043 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v1042 + 4, (uint64_t)&v1606);
                      if ((v1044 & 1) != 0)
                      {
                        v1050 = (_BYTE *)v1042[11];
                        v1049 = v1042[12];
                        if ((unint64_t)v1050 >= v1049)
                        {
                          v1052 = v1042[10];
                          v1053 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v1050[-v1052] >> 2) + 1;
                          if (v1053 > 0x1555555555555555)
LABEL_1831:
                            abort();
                          v1054 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1049 - v1052) >> 2);
                          if (2 * v1054 > v1053)
                            v1053 = 2 * v1054;
                          if (v1054 >= 0xAAAAAAAAAAAAAAALL)
                            v1055 = 0x1555555555555555;
                          else
                            v1055 = v1053;
                          if (v1055)
                          {
                            if (v1055 > 0x1555555555555555)
LABEL_1819:
                              std::__throw_bad_array_new_length[abi:nn180100]();
                            v1056 = (char *)operator new(12 * v1055);
                          }
                          else
                          {
                            v1056 = 0;
                          }
                          v1057 = &v1056[4 * ((uint64_t)&v1050[-v1052] >> 2)];
                          *(_QWORD *)v1057 = v606;
                          v1057[8] = v1040;
                          v1058 = (uint64_t)v1057;
                          if (v1050 != (_BYTE *)v1052)
                          {
                            do
                            {
                              v1059 = *(_QWORD *)(v1050 - 12);
                              v1050 -= 12;
                              v1060 = v1050[8];
                              *(_QWORD *)(v1058 - 12) = v1059;
                              v1058 -= 12;
                              *(_BYTE *)(v1058 + 8) = v1060;
                            }
                            while (v1050 != (_BYTE *)v1052);
                            v1050 = (_BYTE *)v1042[10];
                          }
                          v1051 = v1057 + 12;
                          v1042[10] = v1058;
                          v1042[11] = (uint64_t)(v1057 + 12);
                          v1042[12] = (uint64_t)&v1056[12 * v1055];
                          if (v1050)
                            operator delete(v1050);
                        }
                        else
                        {
                          *(_QWORD *)v1050 = v606;
                          v1050[8] = v1040;
                          v1051 = v1050 + 12;
                        }
                        v1042[11] = (uint64_t)v1051;
                        v1046 = v1042[31];
                      }
                      else
                      {
                        v1045 = v1042[10] + 12 * (((uint64_t)v1043 - v1042[7]) >> 3);
                        *(_QWORD *)v1045 = v606;
                        *(_BYTE *)(v1045 + 8) = v1040;
                        v1046 = v1042[31];
                        if (v1045 != v1042[11])
                        {
                          for (i13 = (_QWORD *)v1042[16]; i13; i13 = (_QWORD *)*i13)
                          {
                            *(_QWORD *)v1611 = &v1606;
                            *(_QWORD *)&v1611[8] = 1;
                            *(_QWORD *)&v1600 = v1046;
                            v1048 = i13[6];
                            if (!v1048)
                              goto LABEL_1837;
                            (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v1048 + 48))(v1048, &v1600, v1611);
                          }
LABEL_1245:
                          gdc::component::DataRequestObserver::updateStatusCounts(v935, v1594, v606, 0, *v947);
                          goto LABEL_1246;
                        }
                      }
                      for (i14 = (_QWORD *)v1042[22]; i14; i14 = (_QWORD *)*i14)
                      {
                        *(_QWORD *)v1611 = &v1606;
                        *(_QWORD *)&v1611[8] = 1;
                        *(_QWORD *)&v1600 = v1046;
                        v1062 = i14[6];
                        if (!v1062)
                          goto LABEL_1837;
                        (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v1062 + 48))(v1062, &v1600, v1611);
                      }
                      goto LABEL_1245;
                    }
                    v1017 = (char *)v963 - (char *)v1009 - 8;
                    if (v1017 >= 0x58)
                    {
                      if ((unint64_t)((char *)v963 - v1015 - v1010) >= 0x20)
                      {
                        v1019 = (v1017 >> 3) + 1;
                        v1018 = &v963[-(v1019 & 0x3FFFFFFFFFFFFFFCLL)];
                        v1020 = &v1015[8 * v1011 - 16];
                        v1021 = v963 - 2;
                        v1022 = v1019 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v1023 = *(_OWORD *)v1021;
                          *(v1020 - 1) = *((_OWORD *)v1021 - 1);
                          *v1020 = v1023;
                          v1020 -= 2;
                          v1021 -= 4;
                          v1022 -= 4;
                        }
                        while (v1022);
                        v1016 -= v1019 & 0x3FFFFFFFFFFFFFFCLL;
                        if (v1019 == (v1019 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_1198;
                      }
                      else
                      {
                        v1018 = v963;
                      }
                    }
                    else
                    {
                      v1018 = v963;
                    }
                    do
                    {
                      v1024 = *--v1018;
                      *--v1016 = v1024;
                    }
                    while (v1018 != v1009);
LABEL_1198:
                    v963 = *(unint64_t **)v961;
                    goto LABEL_1199;
                  }
LABEL_1246:
                  v396 = (std::__shared_weak_count *)*((_QWORD *)&v1601 + 1);
                  v280 = v1587;
                  v281 = v1584;
                  if (*((_QWORD *)&v1601 + 1))
                  {
                    v1063 = (unint64_t *)(*((_QWORD *)&v1601 + 1) + 8);
                    do
                      v398 = __ldaxr(v1063);
                    while (__stlxr(v398 - 1, v1063));
LABEL_1249:
                    if (!v398)
                    {
                      ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                      std::__shared_weak_count::__release_weak(v396);
                    }
                    goto LABEL_305;
                  }
                  goto LABEL_305;
                }
                v1598 = v947;
                v964 = 0;
                v965 = 0xCBF29CE484222325;
                do
                  v965 = 0x100000001B3 * (v965 ^ aStdStringViewG_786[v964++ + 38]);
                while (v964 != 116);
                v966 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v935, v965);
                v1606 = v606;
                v967 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v966 + 4, (uint64_t)&v1606);
                v968 = v966;
                if ((v969 & 1) != 0)
                {
                  v976 = v966[12];
                  v977 = (_QWORD *)v966[11];
                  if ((unint64_t)v977 >= v976)
                  {
                    v979 = (_QWORD *)v966[10];
                    v980 = 0xAAAAAAAAAAAAAAABLL * (v977 - v979) + 1;
                    if (v980 > 0xAAAAAAAAAAAAAAALL)
                      abort();
                    v981 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v976 - (_QWORD)v979) >> 3);
                    if (2 * v981 > v980)
                      v980 = 2 * v981;
                    if (v981 >= 0x555555555555555)
                      v982 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v982 = v980;
                    *(_QWORD *)&v1611[32] = v966 + 12;
                    if (v982)
                    {
                      if (v982 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_1819;
                      v983 = (char *)operator new(24 * v982);
                    }
                    else
                    {
                      v983 = 0;
                    }
                    v984 = &v983[8 * (v977 - v979)];
                    *(_QWORD *)v1611 = v983;
                    *(_QWORD *)&v1611[8] = v984;
                    *((_QWORD *)v984 + 1) = 0;
                    *((_QWORD *)v984 + 2) = 0;
                    v985 = &v983[24 * v982];
                    *(_QWORD *)v984 = 0;
                    v978 = v984 + 24;
                    *(_QWORD *)&v1611[16] = v984 + 24;
                    *(_QWORD *)&v1611[24] = v985;
                    if (v977 == v979)
                    {
                      v968 = v966;
                      v966[10] = (uint64_t)v984;
                      v966[11] = (uint64_t)v978;
                      v966[12] = (uint64_t)v985;
                      v947 = v1598;
                    }
                    else
                    {
                      v968 = v966;
                      do
                      {
                        v986 = v984;
                        *((_QWORD *)v984 - 2) = 0;
                        *((_QWORD *)v984 - 1) = 0;
                        v987 = *(_OWORD *)(v977 - 3);
                        v977 -= 3;
                        *(_OWORD *)(v984 - 24) = v987;
                        v984 -= 24;
                        *((_QWORD *)v986 - 1) = v977[2];
                        *v977 = 0;
                        v977[1] = 0;
                        v977[2] = 0;
                      }
                      while (v977 != v979);
                      v977 = (_QWORD *)v966[10];
                      v988 = (_QWORD *)v966[11];
                      v966[10] = (uint64_t)v984;
                      v989 = *(_QWORD **)&v1611[16];
                      *(_OWORD *)(v966 + 11) = *(_OWORD *)&v1611[16];
                      v978 = v989;
                      v947 = v1598;
                      if (v988 != v977)
                      {
                        v990 = v988;
                        do
                        {
                          v992 = (void *)*(v990 - 3);
                          v990 -= 3;
                          v991 = v992;
                          if (v992)
                          {
                            *(v988 - 2) = v991;
                            operator delete(v991);
                          }
                          v988 = v990;
                        }
                        while (v990 != v977);
                      }
                    }
                    if (v977)
                      operator delete(v977);
                  }
                  else
                  {
                    *v977 = 0;
                    v977[1] = 0;
                    v977[2] = 0;
                    v978 = v977 + 3;
                    v966[11] = (uint64_t)(v977 + 3);
                    v947 = v1598;
                  }
                  v968[11] = (uint64_t)v978;
                  v973 = v968[31];
                }
                else
                {
                  v970 = v966[10] + 24 * (((uint64_t)v967 - v966[7]) >> 3);
                  v971 = *(void **)v970;
                  if (*(_QWORD *)v970)
                  {
                    *(_QWORD *)(v970 + 8) = v971;
                    operator delete(v971);
                    *(_QWORD *)v970 = 0;
                    *(_QWORD *)(v970 + 8) = 0;
                    *(_QWORD *)(v970 + 16) = 0;
                  }
                  *(_QWORD *)v970 = 0;
                  *(_QWORD *)(v970 + 8) = 0;
                  *(_QWORD *)(v970 + 16) = 0;
                  v972 = v966[11];
                  v973 = v966[31];
                  v947 = v1598;
                  if (v970 != v972)
                  {
                    for (i15 = (_QWORD *)v968[16]; i15; i15 = (_QWORD *)*i15)
                    {
                      *(_QWORD *)v1611 = &v1606;
                      *(_QWORD *)&v1611[8] = 1;
                      *(_QWORD *)&v1600 = v973;
                      v975 = i15[6];
                      if (!v975)
                        goto LABEL_1837;
                      (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v975 + 48))(v975, &v1600, v1611);
                    }
LABEL_1163:
                    v995 = 0;
                    v996 = 0xCBF29CE484222325;
                    do
                      v996 = 0x100000001B3 * (v996 ^ aStdStringViewG_786[v995++ + 38]);
                    while (v995 != 116);
                    v997 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v935, v996);
                    v998 = v997[4];
                    if (v937 < (v997[5] - v998) >> 3
                      && (v999 = *(_QWORD *)(v998 + 8 * v937)) != 0
                      && (v1000 = *(unsigned __int16 *)(v999 + 2 * v940),
                          v1002 = v997[7],
                          v1001 = v997[8],
                          v1000 < (v1001 - v1002) >> 3)
                      && ((v1003 = v1002 + 8 * v1000, v1003 != v1001)
                        ? (v1004 = *(_DWORD *)(v1003 + 4) == HIDWORD(v606))
                        : (v1004 = 0),
                          v1004))
                    {
                      v1005 = v997[11];
                      v961 = v997[10] + 24 * v1000;
                    }
                    else
                    {
                      v1005 = v997[11];
                      v961 = v1005;
                    }
                    if (v961 == v1005)
                      v1006 = 0;
                    else
                      v1006 = v961;
                    v963 = *(unint64_t **)(v1006 + 8);
                    goto LABEL_1177;
                  }
                }
                for (i16 = (_QWORD *)v968[22]; i16; i16 = (_QWORD *)*i16)
                {
                  *(_QWORD *)v1611 = &v1606;
                  *(_QWORD *)&v1611[8] = 1;
                  *(_QWORD *)&v1600 = v973;
                  v994 = i16[6];
                  if (!v994)
                    goto LABEL_1837;
                  (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v994 + 48))(v994, &v1600, v1611);
                }
                goto LABEL_1163;
              }
              v839 = 0;
              v840 = 0xCBF29CE484222325;
              do
                v840 = 0x100000001B3 * (v840 ^ aStdStringViewG_784[v839++ + 38]);
              while (v839 != 114);
              v841 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v812, v840);
              v1606 = v319;
              v842 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v841 + 4, (uint64_t)&v1606);
              if ((v843 & 1) != 0)
              {
                v849 = v841[12];
                v850 = (_QWORD *)v841[11];
                if ((unint64_t)v850 >= v849)
                {
                  v852 = (_QWORD *)v841[10];
                  v853 = 0xAAAAAAAAAAAAAAABLL * (v850 - v852) + 1;
                  if (v853 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  v854 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v849 - (_QWORD)v852) >> 3);
                  if (2 * v854 > v853)
                    v853 = 2 * v854;
                  if (v854 >= 0x555555555555555)
                    v855 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v855 = v853;
                  *(_QWORD *)&v1611[32] = v841 + 12;
                  if (v855)
                  {
                    if (v855 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_1819;
                    v856 = (char *)operator new(24 * v855);
                  }
                  else
                  {
                    v856 = 0;
                  }
                  v857 = &v856[8 * (v850 - v852)];
                  *(_QWORD *)v1611 = v856;
                  *(_QWORD *)&v1611[8] = v857;
                  *((_QWORD *)v857 + 1) = 0;
                  *((_QWORD *)v857 + 2) = 0;
                  *(_QWORD *)v857 = 0;
                  v851 = v857 + 24;
                  *(_QWORD *)&v1611[16] = v857 + 24;
                  *(_QWORD *)&v1611[24] = &v856[24 * v855];
                  if (v850 == v852)
                  {
                    v841[10] = (uint64_t)v857;
                    v841[11] = (uint64_t)v851;
                    v841[12] = (uint64_t)&v856[24 * v855];
                  }
                  else
                  {
                    do
                    {
                      v858 = v857;
                      *((_QWORD *)v857 - 2) = 0;
                      *((_QWORD *)v857 - 1) = 0;
                      v859 = *(_OWORD *)(v850 - 3);
                      v850 -= 3;
                      *(_OWORD *)(v857 - 24) = v859;
                      v857 -= 24;
                      *((_QWORD *)v858 - 1) = v850[2];
                      *v850 = 0;
                      v850[1] = 0;
                      v850[2] = 0;
                    }
                    while (v850 != v852);
                    v850 = (_QWORD *)v841[10];
                    v860 = (_QWORD *)v841[11];
                    v841[10] = (uint64_t)v857;
                    v861 = *(_QWORD **)&v1611[16];
                    *(_OWORD *)(v841 + 11) = *(_OWORD *)&v1611[16];
                    v851 = v861;
                    if (v860 != v850)
                    {
                      v862 = v860;
                      do
                      {
                        v864 = (void *)*(v862 - 3);
                        v862 -= 3;
                        v863 = v864;
                        if (v864)
                        {
                          *(v860 - 2) = v863;
                          operator delete(v863);
                        }
                        v860 = v862;
                      }
                      while (v862 != v850);
                    }
                  }
                  if (v850)
                    operator delete(v850);
                }
                else
                {
                  *v850 = 0;
                  v850[1] = 0;
                  v850[2] = 0;
                  v851 = v850 + 3;
                  v841[11] = (uint64_t)(v850 + 3);
                }
                v841[11] = (uint64_t)v851;
                v846 = v841[31];
              }
              else
              {
                v844 = v841[10] + 24 * (((uint64_t)v842 - v841[7]) >> 3);
                v845 = *(void **)v844;
                if (*(_QWORD *)v844)
                {
                  *(_QWORD *)(v844 + 8) = v845;
                  operator delete(v845);
                  *(_QWORD *)v844 = 0;
                  *(_QWORD *)(v844 + 8) = 0;
                  *(_QWORD *)(v844 + 16) = 0;
                }
                *(_QWORD *)v844 = 0;
                *(_QWORD *)(v844 + 8) = 0;
                *(_QWORD *)(v844 + 16) = 0;
                v846 = v841[31];
                if (v844 != v841[11])
                {
                  for (i17 = (_QWORD *)v841[16]; i17; i17 = (_QWORD *)*i17)
                  {
                    *(_QWORD *)v1611 = &v1606;
                    *(_QWORD *)&v1611[8] = 1;
                    *(_QWORD *)&v1600 = v846;
                    v848 = i17[6];
                    if (!v848)
                      goto LABEL_1837;
                    (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v848 + 48))(v848, &v1600, v1611);
                  }
LABEL_1007:
                  v867 = 0;
                  v868 = 0xCBF29CE484222325;
                  do
                    v868 = 0x100000001B3 * (v868 ^ aStdStringViewG_784[v867++ + 38]);
                  while (v867 != 114);
                  v869 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v812, v868);
                  v870 = v869[4];
                  if (v1597 < (v869[5] - v870) >> 3
                    && (v871 = *(_QWORD *)(v870 + 8 * v1597)) != 0
                    && (v872 = *(unsigned __int16 *)(v871 + 2 * v816),
                        v874 = v869[7],
                        v873 = v869[8],
                        v872 < (v873 - v874) >> 3)
                    && ((v875 = v874 + 8 * v872, v875 != v873)
                      ? (v876 = *(_DWORD *)(v875 + 4) == HIDWORD(v319))
                      : (v876 = 0),
                        v876))
                  {
                    v877 = v869[11];
                    v836 = v869[10] + 24 * v872;
                  }
                  else
                  {
                    v877 = v869[11];
                    v836 = v877;
                  }
                  if (v836 == v877)
                    v878 = 0;
                  else
                    v878 = v836;
                  v838 = *(unint64_t **)(v878 + 8);
                  goto LABEL_1021;
                }
              }
              for (i18 = (_QWORD *)v841[22]; i18; i18 = (_QWORD *)*i18)
              {
                *(_QWORD *)v1611 = &v1606;
                *(_QWORD *)&v1611[8] = 1;
                *(_QWORD *)&v1600 = v846;
                v866 = i18[6];
                if (!v866)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v866 + 48))(v866, &v1600, v1611);
              }
              goto LABEL_1007;
            }
            v715 = 0;
            v716 = 0xCBF29CE484222325;
            do
              v716 = 0x100000001B3 * (v716 ^ aStdStringViewG_782[v715++ + 38]);
            while (v715 != 118);
            v717 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(v688, v716);
            v1606 = v319;
            v718 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v717 + 4, (uint64_t)&v1606);
            if ((v719 & 1) != 0)
            {
              v725 = v717[12];
              v726 = (_QWORD *)v717[11];
              if ((unint64_t)v726 >= v725)
              {
                v728 = (_QWORD *)v717[10];
                v729 = 0xAAAAAAAAAAAAAAABLL * (v726 - v728) + 1;
                if (v729 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v730 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v725 - (_QWORD)v728) >> 3);
                if (2 * v730 > v729)
                  v729 = 2 * v730;
                if (v730 >= 0x555555555555555)
                  v731 = 0xAAAAAAAAAAAAAAALL;
                else
                  v731 = v729;
                *(_QWORD *)&v1611[32] = v717 + 12;
                if (v731)
                {
                  if (v731 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_1819;
                  v732 = (char *)operator new(24 * v731);
                }
                else
                {
                  v732 = 0;
                }
                v733 = &v732[8 * (v726 - v728)];
                *(_QWORD *)v1611 = v732;
                *(_QWORD *)&v1611[8] = v733;
                *((_QWORD *)v733 + 1) = 0;
                *((_QWORD *)v733 + 2) = 0;
                v734 = &v732[24 * v731];
                *(_QWORD *)v733 = 0;
                v727 = v733 + 24;
                *(_QWORD *)&v1611[16] = v733 + 24;
                *(_QWORD *)&v1611[24] = v734;
                if (v726 == v728)
                {
                  v717[10] = (uint64_t)v733;
                  v717[11] = (uint64_t)v727;
                  v717[12] = (uint64_t)v734;
                }
                else
                {
                  do
                  {
                    v735 = v733;
                    *((_QWORD *)v733 - 2) = 0;
                    *((_QWORD *)v733 - 1) = 0;
                    v736 = *(_OWORD *)(v726 - 3);
                    v726 -= 3;
                    *(_OWORD *)(v733 - 24) = v736;
                    v733 -= 24;
                    *((_QWORD *)v735 - 1) = v726[2];
                    *v726 = 0;
                    v726[1] = 0;
                    v726[2] = 0;
                  }
                  while (v726 != v728);
                  v726 = (_QWORD *)v717[10];
                  v737 = (_QWORD *)v717[11];
                  v717[10] = (uint64_t)v733;
                  v738 = *(_QWORD **)&v1611[16];
                  *(_OWORD *)(v717 + 11) = *(_OWORD *)&v1611[16];
                  v727 = v738;
                  if (v737 != v726)
                  {
                    v739 = v737;
                    do
                    {
                      v741 = (void *)*(v739 - 3);
                      v739 -= 3;
                      v740 = v741;
                      if (v741)
                      {
                        *(v737 - 2) = v740;
                        operator delete(v740);
                      }
                      v737 = v739;
                    }
                    while (v739 != v726);
                  }
                }
                if (v726)
                  operator delete(v726);
              }
              else
              {
                *v726 = 0;
                v726[1] = 0;
                v726[2] = 0;
                v727 = v726 + 3;
                v717[11] = (uint64_t)(v726 + 3);
              }
              v717[11] = (uint64_t)v727;
              v722 = v717[31];
            }
            else
            {
              v720 = v717[10] + 24 * (((uint64_t)v718 - v717[7]) >> 3);
              v721 = *(void **)v720;
              if (*(_QWORD *)v720)
              {
                *(_QWORD *)(v720 + 8) = v721;
                operator delete(v721);
                *(_QWORD *)v720 = 0;
                *(_QWORD *)(v720 + 8) = 0;
                *(_QWORD *)(v720 + 16) = 0;
              }
              *(_QWORD *)v720 = 0;
              *(_QWORD *)(v720 + 8) = 0;
              *(_QWORD *)(v720 + 16) = 0;
              v722 = v717[31];
              if (v720 != v717[11])
              {
                for (i19 = (_QWORD *)v717[16]; i19; i19 = (_QWORD *)*i19)
                {
                  *(_QWORD *)v1611 = &v1606;
                  *(_QWORD *)&v1611[8] = 1;
                  *(_QWORD *)&v1600 = v722;
                  v724 = i19[6];
                  if (!v724)
                    goto LABEL_1837;
                  (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v724 + 48))(v724, &v1600, v1611);
                }
LABEL_852:
                v744 = 0;
                v745 = 0xCBF29CE484222325;
                do
                  v745 = 0x100000001B3 * (v745 ^ aStdStringViewG_782[v744++ + 38]);
                while (v744 != 118);
                v746 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(v688, v745);
                v747 = v746[4];
                if (v1597 < (v746[5] - v747) >> 3
                  && (v748 = *(_QWORD *)(v747 + 8 * v1597)) != 0
                  && (v749 = *(unsigned __int16 *)(v748 + 2 * v692),
                      v751 = v746[7],
                      v750 = v746[8],
                      v749 < (v750 - v751) >> 3)
                  && ((v752 = v751 + 8 * v749, v752 != v750)
                    ? (v753 = *(_DWORD *)(v752 + 4) == HIDWORD(v319))
                    : (v753 = 0),
                      v753))
                {
                  v754 = v746[11];
                  v712 = v746[10] + 24 * v749;
                }
                else
                {
                  v754 = v746[11];
                  v712 = v754;
                }
                if (v712 == v754)
                  v755 = 0;
                else
                  v755 = v712;
                v714 = *(unint64_t **)(v755 + 8);
                goto LABEL_866;
              }
            }
            for (i20 = (_QWORD *)v717[22]; i20; i20 = (_QWORD *)*i20)
            {
              *(_QWORD *)v1611 = &v1606;
              *(_QWORD *)&v1611[8] = 1;
              *(_QWORD *)&v1600 = v722;
              v743 = i20[6];
              if (!v743)
                goto LABEL_1837;
              (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v743 + 48))(v743, &v1600, v1611);
            }
            goto LABEL_852;
          }
LABEL_609:
          gdc::component::DataRequest<arComponents::LabelIconRequestData>::_removeStatusTag(v488, v319, v527);
          v549 = 0;
          v550 = 0xCBF29CE484222325;
          do
            v550 = 0x100000001B3 * (v550 ^ aStdStringViewG_780[v549++ + 38]);
          while (v549 != 120);
          v551 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(v488, v550);
          v1605 = v319;
          v552 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v551 + 4, (uint64_t)&v1605);
          if ((v553 & 1) != 0)
          {
            v558 = (_BYTE *)v551[11];
            v557 = v551[12];
            if ((unint64_t)v558 >= v557)
            {
              v560 = (char *)v551[10];
              v561 = v558 - v560;
              v562 = v558 - v560 + 1;
              if (v562 < 0)
                goto LABEL_1820;
              v563 = v557 - (_QWORD)v560;
              if (2 * v563 > v562)
                v562 = 2 * v563;
              if (v563 >= 0x3FFFFFFFFFFFFFFFLL)
                v564 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v564 = v562;
              if (v564)
                v565 = (char *)operator new(v564);
              else
                v565 = 0;
              v566 = &v565[v564];
              v559 = (uint64_t)&v565[v561 + 1];
              v567 = (char *)(v560 - v558);
              if (v560 == v558)
                v567 = 0;
              v551[10] = (uint64_t)&v565[v561 + (_QWORD)v567];
              v551[11] = v559;
              v551[12] = (uint64_t)v566;
              if (v560)
                operator delete(v560);
            }
            else
            {
              v559 = (uint64_t)(v558 + 1);
            }
            v551[11] = v559;
            v554 = v551[31];
          }
          else
          {
            v554 = v551[31];
            if (v551[10] + (((uint64_t)v552 - v551[7]) >> 3) != v551[11])
            {
              for (i21 = (_QWORD *)v551[16]; i21; i21 = (_QWORD *)*i21)
              {
                *(_QWORD *)v1611 = &v1605;
                *(_QWORD *)&v1611[8] = 1;
                v1606 = v554;
                v556 = i21[6];
                if (!v556)
                  goto LABEL_1837;
                (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v556 + 48))(v556, &v1606, v1611);
              }
LABEL_637:
              *v502 = 2;
              v570 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(v488);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v570, v319);
              goto LABEL_638;
            }
          }
          for (i22 = (_QWORD *)v551[22]; i22; i22 = (_QWORD *)*i22)
          {
            *(_QWORD *)v1611 = &v1605;
            *(_QWORD *)&v1611[8] = 1;
            v1606 = v554;
            v569 = i22[6];
            if (!v569)
              goto LABEL_1837;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v569 + 48))(v569, &v1606, v1611);
          }
          goto LABEL_637;
        }
        v512 = (_BYTE *)v504[11];
        v511 = v504[12];
        if ((unint64_t)v512 < v511)
        {
          *v512 = 0;
          v513 = (uint64_t)(v512 + 1);
LABEL_596:
          v504[11] = v513;
          v508 = v504[31];
          goto LABEL_597;
        }
        v514 = (_BYTE *)v504[10];
        v515 = v512 - v514;
        v516 = v512 - v514 + 1;
        if (v516 < 0)
          goto LABEL_1820;
        v517 = v511 - (_QWORD)v514;
        if (2 * v517 > v516)
          v516 = 2 * v517;
        if (v517 >= 0x3FFFFFFFFFFFFFFFLL)
          v518 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v518 = v516;
        if (v518)
          v519 = (char *)operator new(v518);
        else
          v519 = 0;
        v520 = &v519[v515];
        v519[v515] = 0;
        v513 = (uint64_t)&v519[v515 + 1];
        if (v512 == v514)
        {
LABEL_594:
          v504[10] = (uint64_t)v520;
          v504[11] = v513;
          v504[12] = (uint64_t)&v519[v518];
          if (v514)
            operator delete(v514);
          goto LABEL_596;
        }
        if (v515 < 8 || (unint64_t)(v514 - v519) < 0x20)
          goto LABEL_591;
        if (v515 >= 0x20)
        {
          v521 = v515 & 0xFFFFFFFFFFFFFFE0;
          v528 = &v519[v515 - 16];
          v529 = (__int128 *)(v512 - 16);
          v530 = v515 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v531 = *v529;
            *((_OWORD *)v528 - 1) = *(v529 - 1);
            *(_OWORD *)v528 = v531;
            v528 -= 32;
            v529 -= 2;
            v530 -= 32;
          }
          while (v530);
          if (v515 == v521)
            goto LABEL_593;
          if ((v515 & 0x18) == 0)
          {
            v520 -= v521;
            v512 -= v521;
            goto LABEL_591;
          }
        }
        else
        {
          v521 = 0;
        }
        v532 = v521 - (v515 & 0xFFFFFFFFFFFFFFF8);
        v533 = &v512[-v521];
        v534 = &v519[&v512[-v521] - v514 - 8];
        v535 = (uint64_t *)(v533 - 8);
        do
        {
          v536 = *v535--;
          *(_QWORD *)v534 = v536;
          v534 -= 8;
          v532 += 8;
        }
        while (v532);
        if (v515 == (v515 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_593;
        v520 -= v515 & 0xFFFFFFFFFFFFFFF8;
        v512 -= v515 & 0xFFFFFFFFFFFFFFF8;
LABEL_591:
        v537 = v520 - 1;
        do
        {
          v538 = *--v512;
          *v537-- = v538;
        }
        while (v512 != v514);
LABEL_593:
        v520 = v519;
        goto LABEL_594;
      }
LABEL_503:
      gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::_removeStatusTag(v405, v319, v436);
      v458 = 0;
      v459 = 0xCBF29CE484222325;
      do
        v459 = 0x100000001B3 * (v459 ^ aStdStringViewG_779[v458++ + 38]);
      while (v458 != 124);
      v460 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(v405, v459);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v460, v319);
      *v415 = 2;
      v461 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>(v405);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v461, v319);
      goto LABEL_506;
    }
    v425 = (_BYTE *)v417[11];
    v424 = v417[12];
    if ((unint64_t)v425 < v424)
    {
      *v425 = 0;
      v426 = (uint64_t)(v425 + 1);
LABEL_490:
      v417[11] = v426;
      v421 = v417[31];
      goto LABEL_491;
    }
    v427 = (_BYTE *)v417[10];
    v428 = v425 - v427;
    v429 = v425 - v427 + 1;
    if (v429 < 0)
      goto LABEL_1821;
    v430 = v424 - (_QWORD)v427;
    if (2 * v430 > v429)
      v429 = 2 * v430;
    if (v430 >= 0x3FFFFFFFFFFFFFFFLL)
      v431 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v431 = v429;
    if (v431)
      v432 = (char *)operator new(v431);
    else
      v432 = 0;
    v433 = &v432[v428];
    v432[v428] = 0;
    v426 = (uint64_t)&v432[v428 + 1];
    if (v425 == v427)
    {
LABEL_488:
      v417[10] = (uint64_t)v433;
      v417[11] = v426;
      v417[12] = (uint64_t)&v432[v431];
      if (v427)
        operator delete(v427);
      goto LABEL_490;
    }
    if (v428 < 8 || (unint64_t)(v427 - v432) < 0x20)
      goto LABEL_485;
    if (v428 >= 0x20)
    {
      v434 = v428 & 0xFFFFFFFFFFFFFFE0;
      v437 = &v432[v428 - 16];
      v438 = (__int128 *)(v425 - 16);
      v439 = v428 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v440 = *v438;
        *((_OWORD *)v437 - 1) = *(v438 - 1);
        *(_OWORD *)v437 = v440;
        v437 -= 32;
        v438 -= 2;
        v439 -= 32;
      }
      while (v439);
      if (v428 == v434)
        goto LABEL_487;
      if ((v428 & 0x18) == 0)
      {
        v433 -= v434;
        v425 -= v434;
        goto LABEL_485;
      }
    }
    else
    {
      v434 = 0;
    }
    v441 = v434 - (v428 & 0xFFFFFFFFFFFFFFF8);
    v442 = &v425[-v434];
    v443 = &v432[&v425[-v434] - v427 - 8];
    v444 = (uint64_t *)(v442 - 8);
    do
    {
      v445 = *v444--;
      *(_QWORD *)v443 = v445;
      v443 -= 8;
      v441 += 8;
    }
    while (v441);
    if (v428 == (v428 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_487;
    v433 -= v428 & 0xFFFFFFFFFFFFFFF8;
    v425 -= v428 & 0xFFFFFFFFFFFFFFF8;
LABEL_485:
    v446 = v433 - 1;
    do
    {
      v447 = *--v425;
      *v446-- = v447;
    }
    while (v425 != v427);
LABEL_487:
    v433 = v432;
    goto LABEL_488;
  }
LABEL_1254:
  v1064 = a1;
  v1065 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(*(_QWORD *)(a1 + 120));
  v1067 = *(_QWORD *)(v1065 + 80);
  v1066 = *(_QWORD *)(v1065 + 88);
  v1068 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(*(_QWORD *)(a1 + 120));
  v1069 = (v1066 - v1067) >> 4;
  v1071 = *(_QWORD *)(v1068 + 80);
  v1070 = *(_QWORD *)(v1068 + 88);
  if (*(_QWORD *)(a1 + 208) != v1069)
  {
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
    v1072 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled(v1072, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v1611 = 134217984;
      *(_QWORD *)&v1611[4] = v1069;
      _os_log_impl(&dword_19F029000, v1072, OS_LOG_TYPE_INFO, "%lu pending Arrival requests", v1611, 0xCu);
    }

    v1064 = a1;
    *(_QWORD *)(a1 + 208) = v1069;
  }
  v1073 = (v1070 - v1071) >> 4;
  if (*(_QWORD *)(v1064 + 200) != v1073)
  {
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
    v1074 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled(v1074, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v1611 = 134217984;
      *(_QWORD *)&v1611[4] = (v1070 - v1071) >> 4;
      _os_log_impl(&dword_19F029000, v1074, OS_LOG_TYPE_INFO, "%lu pending Shadow requests", v1611, 0xCu);
    }

    *(_QWORD *)(a1 + 200) = v1073;
  }
  *(float *)&v1075 = md::LayoutContext::frameState(a2);
  v1077 = *(double *)(v1076 + 88);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v1075);
  v1078 = (void *)objc_claimAutoreleasedReturnValue();
  v1588 = objc_msgSend(v1078, "arIsArrivalAnimationEnabled");

  v1079 = *(_QWORD *)(a1 + 128);
  v1080 = *(_QWORD *)(a1 + 144);
  v1081 = *(uint64_t **)(a1 + 152);
  *(_QWORD *)(a1 + 128) = v1081;
  v1082 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 136) = v1082;
  *(_QWORD *)(a1 + 160) = v1079;
  *(_QWORD *)(a1 + 168) = v1080;
  *(_QWORD *)(a1 + 152) = v1079;
  *(_QWORD *)&v1601 = v1604;
  *((_QWORD *)&v1601 + 1) = v1604;
  v1602 = (unint64_t *)v1604;
  v1603 = 2;
  v1083 = *(unint64_t **)(v1575 + 8);
  v1084 = *(unint64_t **)(v1575 + 16);
  if (v1083 == v1084)
  {
    v1354 = (unint64_t *)v1082;
    if (v1081 == (uint64_t *)v1082)
      goto LABEL_1607;
LABEL_1555:
    v1355 = *(_QWORD *)(a1 + 120);
    do
    {
      v1356 = *v1081;
      v1357 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(v1355);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1357, v1356);
      ++v1081;
    }
    while (v1081 != (uint64_t *)v1354);
    v1358 = a1;
    v1354 = *(unint64_t **)(a1 + 128);
    v1359 = *(unint64_t **)(a1 + 136);
    if (v1354 != v1359)
    {
      v1360 = *(_QWORD *)(a1 + 120);
      do
      {
        v1361 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(v1360);
        gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(v1361, *v1354++);
      }
      while (v1354 != v1359);
      v1358 = a1;
      v1354 = *(unint64_t **)(a1 + 128);
    }
LABEL_1608:
    *(_QWORD *)(v1358 + 136) = v1354;
    if ((unint64_t *)v1601 != v1602)
      free((void *)v1601);
    v1402 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v1403 = *(_QWORD *)&buf[8];
      v1404 = *(void **)buf;
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
      {
        do
        {
          v1405 = *(std::__shared_weak_count **)(v1403 - 8);
          if (v1405)
          {
            v1406 = (unint64_t *)&v1405->__shared_owners_;
            do
              v1407 = __ldaxr(v1406);
            while (__stlxr(v1407 - 1, v1406));
            if (!v1407)
            {
              ((void (*)(std::__shared_weak_count *))v1405->__on_zero_shared)(v1405);
              std::__shared_weak_count::__release_weak(v1405);
            }
          }
          v1403 -= 16;
        }
        while (v1403 != v1402);
        v1404 = *(void **)buf;
      }
      *(_QWORD *)&buf[8] = v1402;
      operator delete(v1404);
    }
    return;
  }
  v1585 = (uint64_t)(v1077 * 1000.0);
  v1590 = *(unint64_t **)(v1575 + 16);
  while (1)
  {
    v1085 = *v1083;
    *((_QWORD *)&v1601 + 1) = v1601;
    v1086 = *(_QWORD **)(a1 + 176);
    v1087 = *(_QWORD **)(a1 + 184);
    if (v1086 != v1087)
    {
      while (v1085 != *v1086)
      {
        v1086 += 2;
        if (v1086 == v1087)
          goto LABEL_1277;
      }
    }
    if (v1086 == v1087)
    {
LABEL_1277:
      v1090 = 0;
      v1089 = 0;
      v1091 = 0xFFFFFFFFLL;
    }
    else
    {
      v1088 = v1086[1];
      v1089 = (unsigned __int16)v1088;
      v1090 = WORD1(v1088);
      v1091 = HIDWORD(v1088);
      if ((_WORD)v1088)
        break;
    }
    if (v1090 || v1091 != 0xFFFFFFFF)
      break;
LABEL_1334:
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
    v1149 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v1150 = *(_DWORD *)v1085;
      v1151 = "ARFeatureShadow";
      if (!*(_BYTE *)(v1085 + 4))
        v1151 = "ARArrival";
      *(_DWORD *)v1611 = 67109378;
      *(_DWORD *)&v1611[4] = v1150;
      *(_WORD *)&v1611[8] = 2080;
      *(_QWORD *)&v1611[10] = v1151;
      _os_log_impl(&dword_19F029000, v1149, OS_LOG_TYPE_ERROR, "Labels is still tracking a deleted external mesh entity (id:%d type:%s)", v1611, 0x12u);
    }
    v1153 = *(unint64_t **)(a1 + 128);
    v1152 = *(unint64_t **)(a1 + 136);
    if (v1153 != v1152)
    {
      v1154 = ((unint64_t)v1090 << 16) | (v1091 << 32) | v1089;
      while (1)
      {
        v1155 = *v1153;
        if (*v1153 == v1154)
          break;
        ++v1153;
        if (v1154 < v1155 || v1153 == v1152)
          goto LABEL_1269;
      }
    }
    if (v1153 != v1152)
    {
      v1157 = (char *)v1152 - (char *)(v1153 + 1);
      if (v1152 != v1153 + 1)
        memmove(v1153, v1153 + 1, (char *)v1152 - (char *)(v1153 + 1));
      *(_QWORD *)(a1 + 136) = (char *)v1153 + v1157;
    }
LABEL_1269:
    if (++v1083 == v1084)
    {
      v1081 = *(uint64_t **)(a1 + 128);
      v1354 = *(unint64_t **)(a1 + 136);
      if (v1081 != (uint64_t *)v1354)
        goto LABEL_1555;
LABEL_1607:
      v1358 = a1;
      goto LABEL_1608;
    }
  }
  v1092 = *(_QWORD *)(a1 + 120);
  if (v1089 != *(unsigned __int16 *)(v1092 + 40))
    goto LABEL_1334;
  v1093 = *(_QWORD *)(v1092 + 48);
  if (v1091 >= (*(_QWORD *)(v1092 + 56) - v1093) >> 3)
    goto LABEL_1334;
  v1094 = (unsigned __int16 *)(v1093 + 8 * v1091);
  if (*v1094 != v1089 || v1094[1] != v1090 || *((_DWORD *)v1094 + 1) != v1091)
    goto LABEL_1334;
  v1095 = (_QWORD *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1092);
  v1096 = v1091 >> 7;
  v1097 = v1095[4];
  if (v1091 >> 7 < (v1095[5] - v1097) >> 3)
  {
    v1098 = *(_QWORD *)(v1097 + 8 * v1096);
    if (v1098)
    {
      v1099 = *(unsigned __int16 *)(v1098 + 2 * (v1091 & 0x7F));
      v1101 = v1095[7];
      v1100 = v1095[8];
      if (v1099 < (v1100 - v1101) >> 3)
      {
        v1102 = v1101 + 8 * v1099;
        if (v1102 != v1100 && *(_DWORD *)(v1102 + 4) == v1091)
          goto LABEL_1334;
      }
    }
  }
  if (*(_BYTE *)(v1085 + 4))
  {
    if (*(_BYTE *)(v1085 + 4) == 1)
    {
      v1104 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(*(_QWORD *)(a1 + 120));
      v1105 = v1089 | ((unint64_t)v1090 << 16) | (v1091 << 32);
      v1106 = v1104[4];
      if (v1096 < (v1104[5] - v1106) >> 3)
      {
        v1107 = *(_QWORD *)(v1106 + 8 * v1096);
        if (v1107)
        {
          v1108 = *(unsigned __int16 *)(v1107 + 2 * (v1091 & 0x7F));
          v1110 = v1104[7];
          v1109 = v1104[8];
          if (v1108 < (v1109 - v1110) >> 3)
          {
            v1111 = v1110 + 8 * v1108;
            if (v1111 != v1109 && *(_DWORD *)(v1111 + 4) == v1091)
            {
              v1113 = v1104[10];
              if (v1113 + 80 * v1108 != v1104[11] && v1113 != 0)
              {
                v1115 = *(_QWORD *)(a1 + 120);
                *(_OWORD *)v1611 = *(_OWORD *)(v1085 + 32);
                *(_QWORD *)&v1611[16] = *(_QWORD *)(v1085 + 48);
                *(_OWORD *)&v1611[24] = *(_OWORD *)(v1085 + 56);
                v1612 = *(_QWORD *)(v1085 + 72);
                *(_QWORD *)v1613 = *(_QWORD *)(v1085 + 80);
                *(_OWORD *)&v1613[8] = *(_OWORD *)(v1085 + 88);
                v1614 = *(_QWORD *)(v1085 + 104);
                v1116 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v1115);
                gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1116, v1089 | ((unint64_t)v1090 << 16) | (v1091 << 32), (__int128 *)v1611);
                v1117 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(_QWORD *)(a1 + 120));
                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1117, v1089 | ((unint64_t)v1090 << 16) | (v1091 << 32));
              }
            }
          }
        }
      }
      v1118 = (_QWORD *)gdc::Registry::storage<arComponents::VisibilityAlpha>(*(_QWORD *)(a1 + 120));
      v1119 = v1118[4];
      if (v1096 < (v1118[5] - v1119) >> 3)
      {
        v1120 = *(_QWORD *)(v1119 + 8 * v1096);
        if (v1120)
        {
          v1121 = *(unsigned __int16 *)(v1120 + 2 * (v1091 & 0x7F));
          v1123 = v1118[7];
          v1122 = v1118[8];
          if (v1121 < (v1122 - v1123) >> 3)
          {
            v1124 = v1123 + 8 * v1121;
            if (v1124 != v1122 && *(_DWORD *)(v1124 + 4) == v1091)
            {
              v1126 = v1118[10];
              v1127 = (float *)(v1126 + 4 * v1121);
              if (v1127 != (float *)v1118[11] && v1126 != 0)
              {
                v1129 = *(float *)(v1085 + 112);
                if (vabds_f32(*v1127, v1129) > 0.001)
                {
                  *v1127 = v1129;
                  v1130 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(*(_QWORD *)(a1 + 120));
                  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1130, v1089 | ((unint64_t)v1090 << 16) | (v1091 << 32));
                }
              }
            }
          }
        }
      }
      v1131 = (unint64_t *)*((_QWORD *)&v1601 + 1);
      v1132 = (unint64_t *)v1601;
      v1133 = (uint64_t)(*((_QWORD *)&v1601 + 1) - v1601) >> 3;
      if (v1603 < v1133 + 1)
      {
        v1134 = v1602;
        v1135 = (1 << -(char)__clz(v1603 + 1));
        if (v1603 >= 0xFFFFFFFFFFFFFFFELL)
          v1135 = 1;
        if (v1135 <= v1133 + 1)
          v1136 = v1133 + 1;
        else
          v1136 = v1135;
        v1137 = (char *)malloc_type_malloc(8 * v1136, 0x100004000313F17uLL);
        v1138 = v1137;
        v1140 = (uint64_t *)*((_QWORD *)&v1601 + 1);
        v1139 = (uint64_t *)v1601;
        if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
        {
          v1141 = *((_QWORD *)&v1601 + 1) - v1601 - 8;
          if (v1141 < 0x18)
          {
            v1142 = v1137;
            goto LABEL_1377;
          }
          v1142 = v1137;
          if ((unint64_t)&v1137[-v1601] < 0x20)
          {
            do
            {
LABEL_1377:
              v1180 = *v1139++;
              *(_QWORD *)v1142 = v1180;
              v1142 += 8;
            }
            while (v1139 != v1140);
          }
          else
          {
            v1143 = (v1141 >> 3) + 1;
            v1144 = 8 * (v1143 & 0x3FFFFFFFFFFFFFFCLL);
            v1142 = &v1137[v1144];
            v1145 = (__int128 *)(v1601 + 16);
            v1146 = v1137 + 16;
            v1147 = v1143 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1148 = *v1145;
              *(v1146 - 1) = *(v1145 - 1);
              *v1146 = v1148;
              v1145 += 2;
              v1146 += 2;
              v1147 -= 4;
            }
            while (v1147);
            if (v1143 != (v1143 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v1139 = (uint64_t *)((char *)v1139 + v1144);
              goto LABEL_1377;
            }
          }
        }
        if (v1132 != v1134)
          free((void *)v1601);
        v1131 = (unint64_t *)&v1138[8 * v1133];
        *(_QWORD *)&v1601 = v1138;
        *((_QWORD *)&v1601 + 1) = v1131;
        v1603 = v1136;
      }
      *v1131 = v1105;
      *((_QWORD *)&v1601 + 1) += 8;
    }
LABEL_1382:
    v1181 = (unint64_t *)*((_QWORD *)&v1601 + 1);
    v1595 = (unint64_t *)*((_QWORD *)&v1601 + 1);
    v1182 = (unint64_t *)v1601;
    while (2)
    {
      if (v1182 == v1181)
        goto LABEL_1269;
      v1183 = *v1182;
      *(_QWORD *)v1611 = *v1182;
      v1185 = *(_QWORD *)(a1 + 152);
      v1184 = *(char **)(a1 + 160);
      v1186 = (char *)v1185;
      if ((char *)v1185 == v1184)
      {
LABEL_1391:
        v1187 = *(char **)(a1 + 160);
        if (v1186 == v1184)
          goto LABEL_1393;
        v1187 = v1186;
        if (v1183 != *(_QWORD *)v1186)
          goto LABEL_1393;
LABEL_1453:
        v1236 = *(char **)(a1 + 128);
        v1235 = *(char **)(a1 + 136);
        if (v1236 != v1235)
        {
          v1237 = *(_QWORD *)v1611;
          while (1)
          {
            v1238 = *(_QWORD *)v1236;
            if (*(_QWORD *)v1236 == *(_QWORD *)v1611)
              break;
            v1236 += 8;
            if (*(_QWORD *)v1611 < v1238 || v1236 == v1235)
              goto LABEL_1466;
          }
        }
        if (v1236 == v1235)
        {
          v1237 = *(_QWORD *)v1611;
LABEL_1466:
          v1241 = (uint64_t *)gdc::Registry::storage<arComponents::IsVisible>(*(_QWORD *)(a1 + 120));
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1241, v1237);
          v1242 = *(_QWORD *)v1611;
          v1243 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(*(_QWORD *)(a1 + 120));
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1243, v1242);
        }
        else
        {
          v1240 = v1235 - (v1236 + 8);
          if (v1235 != v1236 + 8)
            memmove(v1236, v1236 + 8, v1235 - (v1236 + 8));
          *(_QWORD *)(a1 + 136) = &v1236[v1240];
        }
        ++v1182;
        v1181 = v1595;
        continue;
      }
      break;
    }
    v1186 = *(char **)(a1 + 152);
    do
    {
      if (*(_QWORD *)v1186 >= v1183)
        goto LABEL_1391;
      v1186 += 8;
    }
    while (v1186 != v1184);
    v1187 = *(char **)(a1 + 160);
LABEL_1393:
    v1188 = (uint64_t)&v1187[-v1185];
    v1189 = (uint64_t)&v1187[-v1185] >> 3;
    v1190 = (char *)(v1185 + ((unint64_t)&v1187[-v1185] & 0xFFFFFFFFFFFFFFF8));
    v1191 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v1184 < v1191)
    {
      if (v1190 == v1184)
      {
        *(_QWORD *)v1184 = v1183;
        *(_QWORD *)(a1 + 160) = v1184 + 8;
      }
      else
      {
        v1192 = v1184 - (v1190 + 8);
        v1193 = v1192 >> 3;
        v1194 = (uint64_t *)(v1184 - 8);
        if ((unint64_t)v1184 < 8)
        {
          v1201 = *(char **)(a1 + 160);
        }
        else
        {
          v1195 = (v1188 & 0xFFFFFFFFFFFFFFF8) + v1192;
          v1196 = (char *)(v1195 + v1185);
          v1197 = v1195 + v1185 + 8;
          if ((unint64_t)v1184 > v1197)
            v1197 = *(_QWORD *)(a1 + 160);
          v1198 = v1197 + ~v1185 - v1195;
          v1199 = v1184 - v1196;
          v1200 = v1198 >= 0x58 && v1199 > 0x1F;
          v1201 = *(char **)(a1 + 160);
          if (!v1200)
            goto LABEL_1841;
          v1202 = (v1198 >> 3) + 1;
          v1203 = 8 * (v1202 & 0x3FFFFFFFFFFFFFFCLL);
          v1194 = (uint64_t *)((char *)v1194 + v1203);
          v1204 = v1184 + 16;
          v1205 = (__int128 *)(v1185 + 8 * v1193 + 8 * v1189 + 16);
          v1206 = v1202 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1207 = *v1205;
            *(v1204 - 1) = *(v1205 - 1);
            *v1204 = v1207;
            v1204 += 2;
            v1205 += 2;
            v1206 -= 4;
          }
          while (v1206);
          v1201 = &v1184[v1203];
          if (v1202 != (v1202 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1841:
            do
            {
              v1208 = *v1194++;
              *(_QWORD *)v1201 = v1208;
              v1201 += 8;
            }
            while (v1194 < (uint64_t *)v1184);
          }
        }
        *(_QWORD *)(a1 + 160) = v1201;
        if (v1184 != v1190 + 8)
          memmove(&v1184[-8 * v1193], (const void *)(v1185 + ((unint64_t)&v1187[-v1185] & 0xFFFFFFFFFFFFFFF8)), v1192);
        v1218 = v1611;
        if (v1190 <= v1611)
          v1218 = &v1611[8 * (*(_QWORD *)(a1 + 160) > (unint64_t)v1611)];
        *(_QWORD *)v1190 = *(_QWORD *)v1218;
      }
      goto LABEL_1453;
    }
    v1209 = ((uint64_t)&v1184[-v1185] >> 3) + 1;
    if (v1209 >> 61)
      abort();
    v1210 = v1191 - v1185;
    if (v1210 >> 2 > v1209)
      v1209 = v1210 >> 2;
    if ((unint64_t)v1210 >= 0x7FFFFFFFFFFFFFF8)
      v1211 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v1211 = v1209;
    if (v1211)
    {
      if (v1211 >> 61)
        goto LABEL_1819;
      v1212 = (char *)operator new(8 * v1211);
      v1189 = (uint64_t)&v1187[-v1185] >> 3;
    }
    else
    {
      v1212 = 0;
    }
    v1213 = &v1212[8 * v1189];
    v1214 = &v1212[8 * v1211];
    if (v1189 == v1211)
    {
      v1215 = (char *)(v1185 + ((unint64_t)&v1187[-v1185] & 0xFFFFFFFFFFFFFFF8));
      if (v1188 < 1)
      {
        if ((char *)v1185 == v1187)
          v1219 = 1;
        else
          v1219 = v1188 >> 2;
        if (v1219 >> 61)
          goto LABEL_1819;
        v1220 = v1189;
        v1213 = (char *)operator new(8 * v1219);
        v1214 = &v1213[8 * v1219];
        if (v1212)
        {
          operator delete(v1212);
          v1214 = &v1213[8 * v1219];
          v1217 = *(char **)(a1 + 152);
          v1183 = *(_QWORD *)v1611;
        }
        else
        {
          v1217 = (char *)v1185;
        }
        v1189 = v1220;
      }
      else
      {
        v1216 = v1189 + 2;
        if (v1189 >= -1)
          v1216 = v1189 + 1;
        v1213 -= 8 * (v1216 >> 1);
        v1217 = (char *)v1185;
      }
    }
    else
    {
      v1217 = (char *)v1185;
      v1215 = (char *)(v1185 + ((unint64_t)&v1187[-v1185] & 0xFFFFFFFFFFFFFFF8));
    }
    *(_QWORD *)v1213 = v1183;
    v1221 = v1213 + 8;
    if (v1217 != v1215)
    {
      v1222 = (char *)((v1188 & 0xFFFFFFFFFFFFFFF8) + v1185);
      v1223 = v1222 - v1217 - 8;
      if (v1223 < 0x58)
      {
        v1225 = v1215;
      }
      else if ((unint64_t)(v1222 - v1213) < 0x20)
      {
        v1225 = v1215;
      }
      else
      {
        v1224 = (v1223 >> 3) + 1;
        v1225 = &v1215[-8 * (v1224 & 0x3FFFFFFFFFFFFFFCLL)];
        v1226 = v1213 - 16;
        v1227 = (__int128 *)(v1185 + 8 * v1189 - 16);
        v1228 = v1224 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1229 = *v1227;
          *((_OWORD *)v1226 - 1) = *(v1227 - 1);
          *(_OWORD *)v1226 = v1229;
          v1226 -= 32;
          v1227 -= 2;
          v1228 -= 4;
        }
        while (v1228);
        v1213 -= 8 * (v1224 & 0x3FFFFFFFFFFFFFFCLL);
        if (v1224 == (v1224 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1449;
      }
      do
      {
        v1230 = *((_QWORD *)v1225 - 1);
        v1225 -= 8;
        *((_QWORD *)v1213 - 1) = v1230;
        v1213 -= 8;
      }
      while (v1225 != v1217);
    }
LABEL_1449:
    v1231 = *(_BYTE **)(a1 + 160);
    v1232 = v1231 - v1215;
    if (v1231 != v1215)
    {
      v1233 = v1214;
      memmove(v1221, v1215, v1231 - v1215);
      v1214 = v1233;
    }
    v1234 = *(void **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v1213;
    *(_QWORD *)(a1 + 160) = &v1221[v1232];
    *(_QWORD *)(a1 + 168) = v1214;
    v1084 = v1590;
    if (v1234)
      operator delete(v1234);
    goto LABEL_1453;
  }
  v1605 = v1085;
  v1158 = (_QWORD *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(_QWORD *)(a1 + 120));
  v1159 = v1158[4];
  if (v1096 >= (v1158[5] - v1159) >> 3)
    goto LABEL_1382;
  v1160 = *(_QWORD *)(v1159 + 8 * v1096);
  if (!v1160)
    goto LABEL_1382;
  v1161 = *(unsigned __int16 *)(v1160 + 2 * (v1091 & 0x7F));
  v1163 = v1158[7];
  v1162 = v1158[8];
  if (v1161 >= (v1162 - v1163) >> 3)
    goto LABEL_1382;
  v1164 = v1163 + 8 * v1161;
  if (v1164 == v1162 || *(_DWORD *)(v1164 + 4) != v1091)
    goto LABEL_1382;
  v1166 = v1158[10];
  v1167 = (unint64_t *)(v1166 + 16 * v1161);
  if (v1167 == (unint64_t *)v1158[11] || v1166 == 0)
    goto LABEL_1382;
  v1169 = *(_QWORD *)(a1 + 120);
  v1170 = *v1167;
  v1609[0] = &off_1E42D1AB0;
  v1609[1] = &v1605;
  v1610 = v1609;
  v1171 = (_QWORD *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v1169);
  v1172 = v1171[4];
  if (v1170 >> 39 >= (v1171[5] - v1172) >> 3
    || (v1173 = *(_QWORD *)(v1172 + 8 * (v1170 >> 39))) == 0
    || (v1174 = *(unsigned __int16 *)(v1173 + 2 * (HIDWORD(v1170) & 0x7F)),
        v1176 = v1171[7],
        v1175 = v1171[8],
        v1174 >= (v1175 - v1176) >> 3)
    || ((v1177 = v1176 + 8 * v1174, v1177 != v1175) ? (v1178 = *(_DWORD *)(v1177 + 4) == HIDWORD(v1170)) : (v1178 = 0),
        !v1178 || (v1179 = v1171[10]) == 0 || v1179 + 8 * v1174 == v1171[11]))
  {
    *(_QWORD *)v1611 = 0;
    LOBYTE(v1600) = 1;
    if (!v1610)
      goto LABEL_1837;
    (*(void (**)(_QWORD *, _BYTE *, __int128 *))(*v1610 + 48))(v1610, v1611, &v1600);
    *(_QWORD *)&v1600 = *(_QWORD *)v1611;
    v1244 = (uint64_t *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v1169);
    gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v1244, v1170, &v1600);
LABEL_1469:
    v1245 = v1610;
    if (v1610 == v1609)
    {
      v1245 = v1609;
      v1246 = 4;
    }
    else
    {
      if (!v1610)
      {
LABEL_1474:
        v1247 = *v1167;
        v1248 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)1>>(*(_QWORD *)(a1 + 120));
        v1249 = v1248[4];
        if (v1247 >> 39 >= (v1248[5] - v1249) >> 3)
          goto LABEL_1487;
        v1250 = *(_QWORD *)(v1249 + 8 * (v1247 >> 39));
        if (!v1250)
          goto LABEL_1487;
        v1251 = *(unsigned __int16 *)(v1250 + 2 * (HIDWORD(v1247) & 0x7F));
        v1253 = v1248[7];
        v1252 = v1248[8];
        if (v1251 >= (v1252 - v1253) >> 3)
          goto LABEL_1487;
        v1254 = v1253 + 8 * v1251;
        v1255 = v1254 != v1252 && *(_DWORD *)(v1254 + 4) == HIDWORD(v1247);
        if (!v1255 || ((v1256 = v1248[10], v1256 + 8 * v1251 != v1248[11]) ? (v1257 = v1256 == 0) : (v1257 = 1), v1257))
        {
LABEL_1487:
          v1258 = *v1167;
          v1259 = (_QWORD *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)3>>(*(_QWORD *)(a1 + 120));
          v1260 = v1259[4];
          if (v1258 >> 39 < (v1259[5] - v1260) >> 3
            && (v1261 = *(_QWORD *)(v1260 + 8 * (v1258 >> 39))) != 0
            && (v1262 = *(unsigned __int16 *)(v1261 + 2 * (HIDWORD(v1258) & 0x7F)),
                v1264 = v1259[7],
                v1263 = v1259[8],
                v1262 < (v1263 - v1264) >> 3)
            && ((v1265 = v1264 + 8 * v1262, v1265 != v1263)
              ? (v1266 = *(_DWORD *)(v1265 + 4) == HIDWORD(v1258))
              : (v1266 = 0),
                v1266))
          {
            v1267 = (_QWORD *)v1259[11];
            v1268 = (_QWORD *)(v1259[10] + 8 * v1262);
          }
          else
          {
            v1267 = (_QWORD *)v1259[11];
            v1268 = v1267;
          }
          if (v1268 == v1267)
            v1268 = 0;
          if (v1588 && (!v1268 || v1585 - *v1268 >= 1001))
          {
            v1269 = *(_QWORD *)(a1 + 120);
            v1270 = *v1167;
            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v1574);
            v1271 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1271, "arJumpOffset");
            v1596 = v1272;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1273 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1273, "arJumpDuration");
            v1583 = v1274;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1275 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1275, "arJumpStart");
            v1582 = v1276;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1277 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1277, "arFallOffset");
            v1581 = v1278;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1279 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1279, "arFallDuration");
            v1580 = v1280;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1281 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1281, "arFallStart");
            v1579 = v1282;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1283 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1283, "arRotateOffset");
            v1578 = v1284;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1285 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1285, "arRotateDuration");
            v1576 = v1286;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1287 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1287, "arRotateStart");
            v1289 = v1288;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1290 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1290, "arPulseOffset");
            v1292 = v1291;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1293 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1293, "arPulseDuration");
            v1295 = v1294;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1296 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1296, "arPulseStart");
            v1298 = v1297;

            +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
            v1299 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1299, "arPulseNumberOfRepeats");
            v1301 = v1300;

            *(float *)v1611 = fmaxf(fmaxf(fmaxf(fmaxf(v1582 + v1583, 0.0), v1580 + (float)(v1582 + v1583)), v1289 + v1576), v1298 + (float)((float)(v1295 + v1295) * v1301))- fminf(v1298, fminf(v1289, fminf(v1579, fminf(v1582, 0.0))));
            *(_DWORD *)&v1611[4] = v1596;
            *(float *)&v1611[8] = v1583;
            *(float *)&v1611[12] = v1582;
            *(_DWORD *)&v1611[20] = v1581;
            *(float *)&v1611[24] = v1580;
            v1302 = v1578 * 3.14159265;
            *(float *)&v1611[28] = v1579;
            *(float *)&v1611[36] = v1302;
            v1612 = __PAIR64__(LODWORD(v1289), LODWORD(v1576));
            *(_DWORD *)&v1613[4] = v1292;
            *(float *)&v1613[8] = v1295;
            *(float *)&v1613[12] = v1298;
            *(_DWORD *)&v1613[20] = (int)v1301;
            JumpAndRotate = (uint64_t *)gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>(v1269);
            gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::emplace(JumpAndRotate, v1270, (uint64_t)v1611);
            v1084 = v1590;
          }
        }
        v1304 = 0;
        v1305 = 0;
        *(_OWORD *)v1611 = *(_OWORD *)v1167;
        while (1)
        {
          v1307 = v1304;
          v1308 = *(_QWORD *)&v1611[8 * v1305];
          v1309 = (_QWORD *)gdc::Registry::storage<arComponents::VisibilityAlpha>(*(_QWORD *)(a1 + 120));
          v1310 = v1308 >> 39;
          v1311 = v1309[4];
          if (v1308 >> 39 < (v1309[5] - v1311) >> 3)
          {
            v1312 = *(_QWORD *)(v1311 + 8 * v1310);
            if (v1312)
            {
              v1313 = *(unsigned __int16 *)(v1312 + 2 * (HIDWORD(v1308) & 0x7F));
              v1315 = v1309[7];
              v1314 = v1309[8];
              if (v1313 < (v1314 - v1315) >> 3)
              {
                v1316 = v1315 + 8 * v1313;
                if (v1316 != v1314 && *(_DWORD *)(v1316 + 4) == HIDWORD(v1308))
                {
                  v1318 = v1309[10];
                  v1319 = (float *)(v1318 + 4 * v1313);
                  if (v1319 != (float *)v1309[11] && v1318 != 0)
                  {
                    v1321 = *(float *)(v1085 + 112);
                    if (vabds_f32(*v1319, v1321) > 0.001)
                    {
                      *v1319 = v1321;
                      v1322 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(*(_QWORD *)(a1 + 120));
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1322, v1308);
                    }
                  }
                }
              }
            }
          }
          v1323 = *(_QWORD *)(a1 + 120);
          v1607[0] = &off_1E42D1AF8;
          v1607[1] = &v1605;
          v1608 = v1607;
          v1324 = (_QWORD *)gdc::Registry::storage<arComponents::ScaleToApply>(v1323);
          v1325 = v1324[4];
          if (v1310 < (v1324[5] - v1325) >> 3
            && (v1326 = *(_QWORD *)(v1325 + 8 * v1310)) != 0
            && (v1327 = *(unsigned __int16 *)(v1326 + 2 * (HIDWORD(v1308) & 0x7F)),
                v1329 = v1324[7],
                v1328 = v1324[8],
                v1327 < (v1328 - v1329) >> 3)
            && ((v1330 = v1329 + 8 * v1327, v1330 != v1328)
              ? (v1331 = *(_DWORD *)(v1330 + 4) == HIDWORD(v1308))
              : (v1331 = 0),
                v1331 && (v1352 = v1324[10]) != 0 && v1352 + 8 * v1327 != v1324[11]))
          {
            LOBYTE(v1600) = 0;
            if (!v1608)
              goto LABEL_1837;
            (*(void (**)(_QWORD *))(*v1608 + 48))(v1608);
          }
          else
          {
            *(_QWORD *)&v1600 = 0x3FF0000000000000;
            LOBYTE(v1606) = 1;
            if (!v1608)
              goto LABEL_1837;
            (*(void (**)(_QWORD *, __int128 *, unint64_t *))(*v1608 + 48))(v1608, &v1600, &v1606);
            v1606 = v1600;
            v1332 = (uint64_t *)gdc::Registry::storage<arComponents::ScaleToApply>(v1323);
            gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v1332, v1308, &v1606);
          }
          v1333 = v1608;
          if (v1608 == v1607)
          {
            v1333 = v1607;
            v1334 = 4;
          }
          else
          {
            if (!v1608)
              goto LABEL_1532;
            v1334 = 5;
          }
          (*(void (**)(void))(*v1333 + 8 * v1334))();
LABEL_1532:
          v1306 = (unint64_t *)*((_QWORD *)&v1601 + 1);
          v1335 = (unint64_t *)v1601;
          v1336 = (uint64_t)(*((_QWORD *)&v1601 + 1) - v1601) >> 3;
          if (v1603 < v1336 + 1)
          {
            v1337 = v1602;
            v1338 = (1 << -(char)__clz(v1603 + 1));
            if (v1603 >= 0xFFFFFFFFFFFFFFFELL)
              v1338 = 1;
            if (v1338 <= v1336 + 1)
              v1339 = v1336 + 1;
            else
              v1339 = v1338;
            v1340 = (char *)malloc_type_malloc(8 * v1339, 0x100004000313F17uLL);
            v1341 = v1340;
            v1343 = (uint64_t *)*((_QWORD *)&v1601 + 1);
            v1342 = (uint64_t *)v1601;
            if ((_QWORD)v1601 != *((_QWORD *)&v1601 + 1))
            {
              v1344 = *((_QWORD *)&v1601 + 1) - v1601 - 8;
              if (v1344 < 0x18)
              {
                v1345 = v1340;
                goto LABEL_1550;
              }
              v1345 = v1340;
              if ((unint64_t)&v1340[-v1601] < 0x20)
              {
                do
                {
LABEL_1550:
                  v1353 = *v1342++;
                  *(_QWORD *)v1345 = v1353;
                  v1345 += 8;
                }
                while (v1342 != v1343);
              }
              else
              {
                v1346 = (v1344 >> 3) + 1;
                v1347 = 8 * (v1346 & 0x3FFFFFFFFFFFFFFCLL);
                v1345 = &v1340[v1347];
                v1348 = (__int128 *)(v1601 + 16);
                v1349 = v1340 + 16;
                v1350 = v1346 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1351 = *v1348;
                  *(v1349 - 1) = *(v1348 - 1);
                  *v1349 = v1351;
                  v1348 += 2;
                  v1349 += 2;
                  v1350 -= 4;
                }
                while (v1350);
                if (v1346 != (v1346 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v1342 = (uint64_t *)((char *)v1342 + v1347);
                  goto LABEL_1550;
                }
              }
            }
            if (v1335 != v1337)
              free((void *)v1601);
            v1306 = (unint64_t *)&v1341[8 * v1336];
            *(_QWORD *)&v1601 = v1341;
            *((_QWORD *)&v1601 + 1) = v1306;
            v1603 = v1339;
          }
          *v1306 = v1308;
          *((_QWORD *)&v1601 + 1) += 8;
          v1304 = 1;
          v1305 = 1;
          if ((v1307 & 1) != 0)
            goto LABEL_1382;
        }
      }
      v1246 = 5;
    }
    (*(void (**)(void))(*v1245 + 8 * v1246))();
    goto LABEL_1474;
  }
  v1611[0] = 0;
  if (v1610)
  {
    (*(void (**)(_QWORD *))(*v1610 + 48))(v1610);
    goto LABEL_1469;
  }
LABEL_1837:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FCF6CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51)
{
  void *v51;
  uint64_t v52;

  if (a31 != a33)
    free(a31);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v52 - 192));
  _Unwind_Resume(a1);
}

void md::LabelsExternalMeshLogic::runAfterLayout(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE v29[32];

  v26 = (unint64_t *)v29;
  v27 = (unint64_t *)v29;
  v28 = 4;
  v2 = gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(_QWORD *)(a1 + 120));
  v3 = *(unint64_t **)(v2 + 56);
  v4 = *(unint64_t **)(v2 + 64);
  v5 = (unint64_t *)v29;
  if (v3 != v4)
  {
    while (1)
    {
      v6 = *v3;
      v7 = v5 - v26;
      if (v28 < v7 + 1)
        break;
LABEL_4:
      *v5 = v6;
      v5 = ++v27;
      if (++v3 == v4)
        goto LABEL_23;
    }
    v8 = (1 << -(char)__clz(v28 + 1));
    if (v28 >= 0xFFFFFFFFFFFFFFFELL)
      v9 = 1;
    else
      v9 = v8;
    if (v9 <= v7 + 1)
      v10 = v7 + 1;
    else
      v10 = v9;
    v11 = (char *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
    v12 = (unint64_t *)v11;
    v13 = v26;
    if (v26 != v27)
    {
      v14 = (char *)v27 - (char *)v26 - 8;
      if (v14 < 0x18)
      {
        v15 = v11;
      }
      else
      {
        v15 = v11;
        if ((unint64_t)(v11 - (char *)v26) >= 0x20)
        {
          v16 = (v14 >> 3) + 1;
          v17 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          v15 = &v11[v17 * 8];
          v18 = (__int128 *)(v26 + 2);
          v19 = v11 + 16;
          v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v21 = *v18;
            *(v19 - 1) = *(v18 - 1);
            *v19 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 4;
          }
          while (v20);
          if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_21;
          v13 = &v26[v17];
        }
      }
      do
      {
        v22 = *v13++;
        *(_QWORD *)v15 = v22;
        v15 += 8;
      }
      while (v13 != v27);
    }
LABEL_21:
    if (v26 != (unint64_t *)v29)
      free(v26);
    v5 = &v12[v7];
    v26 = v12;
    v27 = v5;
    v28 = v10;
    goto LABEL_4;
  }
LABEL_23:
  v23 = v26;
  if (v26 != v5)
  {
    v24 = *(_QWORD *)(a1 + 120);
    do
    {
      v25 = *v23++;
      gdc::Registry::destroy(v24, v25);
    }
    while (v23 != v5);
    v5 = v26;
  }
  if (v5 != (unint64_t *)v29)
    free(v5);
}

void sub_19FCF7224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11)
{
  if (a9 != a11)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelsExternalMeshLogic::debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  unint64_t v41;
  const void **v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v4
    || (v5 = result,
        (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 168) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(v4 + 168) + 64))) == 0))
  {
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v48);
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(*(_QWORD *)(v5 + 120));
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(*(_QWORD *)(v5 + 120));
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(*(_QWORD *)(v5 + 120));
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(*(_QWORD *)(v5 + 120));
  v6 = *(_QWORD *)(v5 + 120);
  v7 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v6);
  v8 = gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v6);
  v9 = v8;
  v10 = (_QWORD *)(v8 + 32);
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) >= (unint64_t)(v7[8] - v7[7]))
    v11 = (uint64_t)(v7 + 4);
  else
    v11 = v8 + 32;
  gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(&v60, v11, v7 + 4, v10, *(_QWORD *)(v11 + 24));
  if (*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56) >= (unint64_t)(v7[8] - v7[7]))
    v12 = (uint64_t)(v7 + 4);
  else
    v12 = (uint64_t)v10;
  gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(v58, v12, v7 + 4, v10, *(_QWORD *)(v12 + 32));
  v13 = v63;
  if (v59 != v63)
  {
    v14 = 0;
    v15 = *(_QWORD *)(v60 + 32);
    do
    {
      v63 = v13 + 8;
      v16 = v15;
      if (v13 + 8 != v15)
      {
        v17 = *v61;
        v18 = (v61[1] - *v61) >> 3;
        v19 = v13 + 16;
        while (1)
        {
          v20 = *(unsigned int *)(v19 - 4);
          v21 = v20 >> 7;
          if (v20 >> 7 < v18)
          {
            v22 = *(_QWORD *)(v17 + 8 * v21);
            if (v22)
            {
              v23 = *(unsigned __int16 *)(v22 + 2 * (v20 & 0x7F));
              v25 = v61[3];
              v24 = v61[4];
              if (v23 < (v24 - v25) >> 3)
              {
                v26 = v25 + 8 * v23;
                v27 = v26 != v24 && *(_DWORD *)(v26 + 4) == (_DWORD)v20;
                if (v27 && v21 < (uint64_t)(v62[1] - *v62) >> 3)
                {
                  v28 = *(_QWORD *)(*v62 + 8 * v21);
                  if (v28)
                  {
                    v29 = *(unsigned __int16 *)(v28 + 2 * (v20 & 0x7F));
                    v30 = v62[3];
                    v31 = v62[4];
                    if (v29 < (v31 - v30) >> 3)
                    {
                      v32 = v30 + 8 * v29;
                      if (v32 != v31 && *(_DWORD *)(v32 + 4) == (_DWORD)v20)
                        break;
                    }
                  }
                }
              }
            }
          }
          v63 = v19;
          v27 = v19 == v15;
          v19 += 8;
          if (v27)
          {
            v16 = v15;
            goto LABEL_12;
          }
        }
        v16 = v19 - 8;
      }
LABEL_12:
      ++v14;
      v13 = v16;
    }
    while (v59 != v16);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Pending Arrival Requests:", 25);
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Pending Shadow Requests:", 24);
  v35 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Arrival Features:", 17);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Shadow Features:", 16);
  v37 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Visible Features:", 17);
  v38 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Awaiting Deletion:", 18);
  v39 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"\n", 1);
  if ((v56 & 0x10) != 0)
  {
    v41 = v55;
    if (v55 < v52)
    {
      v55 = v52;
      v41 = v52;
    }
    v42 = (const void **)&v51;
  }
  else
  {
    if ((v56 & 8) == 0)
    {
      v40 = 0;
      a3[23] = 0;
      goto LABEL_49;
    }
    v42 = (const void **)v50;
    v41 = v50[2];
  }
  v43 = *v42;
  v40 = v41 - (_QWORD)*v42;
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v40 >= 0x17)
  {
    v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v44 = v40 | 7;
    v45 = v44 + 1;
    v46 = operator new(v44 + 1);
    *((_QWORD *)a3 + 1) = v40;
    *((_QWORD *)a3 + 2) = v45 | 0x8000000000000000;
    *(_QWORD *)a3 = v46;
    a3 = v46;
  }
  else
  {
    a3[23] = v40;
    if (!v40)
      goto LABEL_49;
  }
  memmove(a3, v43, v40);
LABEL_49:
  a3[v40] = 0;
  v48[0] = *MEMORY[0x1E0DE4F50];
  v47 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v48 + *(_QWORD *)(v48[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v49[0] = v47;
  v49[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v57);
}

void sub_19FCF76F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x38E94766143C6BD3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x38E94766143C6BD3;
      if (*(_QWORD *)&v3 <= 0x38E94766143C6BD3uLL)
        v5 = 0x38E94766143C6BD3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x38E94766143C6BD3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x38E94766143C6BD3)
            {
              if (v7[2] == 0x38E94766143C6BD3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x38E94766143C6BD3)
          {
            if (v7[2] == 0x38E94766143C6BD3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B27A8;
  *(_QWORD *)(v11 + 8) = 0x38E94766143C6BD3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x38E94766143C6BD3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x38E94766143C6BD3;
  v15[1] = "arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0x38E94766143C6BD3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF7924(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x152DC0B81456FF96;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x152DC0B81456FF96;
      if (*(_QWORD *)&v3 <= 0x152DC0B81456FF96uLL)
        v5 = 0x152DC0B81456FF96uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x152DC0B81456FF96;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x152DC0B81456FF96)
            {
              if (v7[2] == 0x152DC0B81456FF96)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x152DC0B81456FF96)
          {
            if (v7[2] == 0x152DC0B81456FF96)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B27D8;
  *(_QWORD *)(v11 + 8) = 0x152DC0B81456FF96;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x152DC0B81456FF96uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x152DC0B81456FF96;
  v15[1] = "arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0x152DC0B81456FF96, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF7B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDC141A54284D3B32;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDC141A54284D3B32;
      if (*(_QWORD *)&v3 <= 0xDC141A54284D3B32)
        v5 = 0xDC141A54284D3B32 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDC141A54284D3B32;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDC141A54284D3B32)
            {
              if (v7[2] == 0xDC141A54284D3B32)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDC141A54284D3B32)
          {
            if (v7[2] == 0xDC141A54284D3B32)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>]";
  *(_QWORD *)(v11 + 24) = 62;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2718;
  *(_QWORD *)(v11 + 8) = 0xDC141A54284D3B32;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDC141A54284D3B32, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDC141A54284D3B32;
  v15[1] = "arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>]";
  v15[2] = 62;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDC141A54284D3B32, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF7D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x29581258A69F7265;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x29581258A69F7265;
      if (*(_QWORD *)&v3 <= 0x29581258A69F7265uLL)
        v5 = 0x29581258A69F7265uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x29581258A69F7265;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x29581258A69F7265)
            {
              if (v7[2] == 0x29581258A69F7265)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x29581258A69F7265)
          {
            if (v7[2] == 0x29581258A69F7265)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2778;
  *(_QWORD *)(v11 + 8) = 0x29581258A69F7265;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x29581258A69F7265uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x29581258A69F7265;
  v15[1] = "arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0x29581258A69F7265, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF7F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::addRequest(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE *v16;
  uint64_t *v18;
  _QWORD *v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *i;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  __int128 *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  _QWORD *j;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  _QWORD *v82;
  char v83;
  _DWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;

  v6 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  v7 = a2 >> 39;
  v8 = v6[4];
  if (a2 >> 39 < (v6[5] - v8) >> 3)
  {
    v9 = *(_QWORD *)(v8 + 8 * v7);
    if (v9)
    {
      v10 = *(unsigned __int16 *)(v9 + 2 * (HIDWORD(a2) & 0x7F));
      v12 = v6[7];
      v11 = v6[8];
      if (v10 < (v11 - v12) >> 3)
      {
        v13 = v12 + 8 * v10;
        if (v13 != v11 && *(_DWORD *)(v13 + 4) == HIDWORD(a2))
        {
          v15 = v6[10];
          v16 = (_BYTE *)(v15 + v10);
          if (v15 + v10 != v6[11] && v15 != 0)
          {
            v37 = (_QWORD *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(a1);
            gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::remove(v37, a2);
            gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(a1, a2, *v16);
            v38 = 0;
            *v16 = 0;
            goto LABEL_63;
          }
        }
      }
    }
  }
  v18 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  v107 = a2;
  v19 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v18 + 4, (uint64_t)&v107);
  if ((v20 & 1) != 0)
  {
    v26 = (_BYTE *)v18[11];
    v25 = v18[12];
    if ((unint64_t)v26 < v25)
    {
      *v26 = 0;
      v27 = (uint64_t)(v26 + 1);
LABEL_50:
      v18[11] = v27;
      v22 = v18[31];
LABEL_51:
      v49 = (_QWORD *)v18[22];
      if (v49)
      {
        while (1)
        {
          v109 = &v107;
          v110 = 1;
          v108 = v22;
          v50 = v49[6];
          if (!v50)
            goto LABEL_125;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v50 + 48))(v50, &v108, &v109);
          v49 = (_QWORD *)*v49;
          if (!v49)
            goto LABEL_54;
        }
      }
      goto LABEL_54;
    }
    v28 = (_BYTE *)v18[10];
    v29 = v26 - v28;
    v30 = v26 - v28 + 1;
    if (v30 < 0)
      goto LABEL_126;
    v31 = v25 - (_QWORD)v28;
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
      v33 = (char *)operator new(v32);
    else
      v33 = 0;
    v34 = &v33[v29];
    v35 = &v33[v32];
    v33[v29] = 0;
    v27 = (uint64_t)&v33[v29 + 1];
    if (v26 == v28)
    {
LABEL_48:
      v18[10] = (uint64_t)v34;
      v18[11] = v27;
      v18[12] = (uint64_t)v35;
      if (v28)
        operator delete(v28);
      goto LABEL_50;
    }
    if (v29 < 8 || (unint64_t)(v28 - v33) < 0x20)
      goto LABEL_45;
    if (v29 >= 0x20)
    {
      v36 = v29 & 0xFFFFFFFFFFFFFFE0;
      v39 = (__int128 *)(v26 - 16);
      v40 = &v33[v26 - 16 - v28];
      v41 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v42 = *v39;
        *((_OWORD *)v40 - 1) = *(v39 - 1);
        *(_OWORD *)v40 = v42;
        v40 -= 32;
        v39 -= 2;
        v41 -= 32;
      }
      while (v41);
      if (v29 == v36)
        goto LABEL_47;
      if ((v29 & 0x18) == 0)
      {
        v34 -= v36;
        v26 -= v36;
        goto LABEL_45;
      }
    }
    else
    {
      v36 = 0;
    }
    v43 = v36 - (v29 & 0xFFFFFFFFFFFFFFF8);
    v44 = &v26[-v36 - 8];
    v45 = v44 - v28;
    do
    {
      v46 = *(_QWORD *)v44;
      v44 -= 8;
      *(_QWORD *)&v33[v45] = v46;
      v45 -= 8;
      v43 += 8;
    }
    while (v43);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_47;
    v34 -= v29 & 0xFFFFFFFFFFFFFFF8;
    v26 -= v29 & 0xFFFFFFFFFFFFFFF8;
LABEL_45:
    v47 = v34 - 1;
    do
    {
      v48 = *--v26;
      *v47-- = v48;
    }
    while (v26 != v28);
LABEL_47:
    v34 = v33;
    goto LABEL_48;
  }
  v21 = (_BYTE *)(v18[10] + (((uint64_t)v19 - v18[7]) >> 3));
  *v21 = 0;
  v22 = v18[31];
  if (v21 == (_BYTE *)v18[11])
    goto LABEL_51;
  for (i = (_QWORD *)v18[16]; i; i = (_QWORD *)*i)
  {
    v109 = &v107;
    v110 = 1;
    v108 = v22;
    v24 = i[6];
    if (!v24)
      goto LABEL_125;
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v24 + 48))(v24, &v108, &v109);
  }
LABEL_54:
  v51 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  v52 = v51[4];
  if (v7 < (v51[5] - v52) >> 3
    && (v53 = *(_QWORD *)(v52 + 8 * v7)) != 0
    && (v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(a2) & 0x7F)), v56 = v51[7], v55 = v51[8], v54 < (v55 - v56) >> 3)
    && ((v57 = v56 + 8 * v54, v57 != v55) ? (v58 = *(_DWORD *)(v57 + 4) == HIDWORD(a2)) : (v58 = 0), v58))
  {
    v16 = (_BYTE *)(v51[10] + v54);
  }
  else
  {
    v16 = (_BYTE *)v51[11];
  }
  v38 = *v16;
  if (v38 != 2)
  {
LABEL_63:
    gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(a1, a2, v38);
    v59 = 0;
    v60 = 0xCBF29CE484222325;
    do
      v60 = 0x100000001B3 * (v60 ^ aStdStringViewG_775[v59++ + 38]);
    while (v59 != 122);
    v61 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(a1, v60);
    v107 = a2;
    v62 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v61 + 4, (uint64_t)&v107);
    if ((v63 & 1) != 0)
    {
      v68 = (_BYTE *)v61[11];
      v67 = v61[12];
      if ((unint64_t)v68 >= v67)
      {
        v70 = (char *)v61[10];
        v71 = v68 - v70;
        v72 = v68 - v70 + 1;
        if (v72 < 0)
          goto LABEL_126;
        v73 = v67 - (_QWORD)v70;
        if (2 * v73 > v72)
          v72 = 2 * v73;
        if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
          v74 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
          v75 = (char *)operator new(v74);
        else
          v75 = 0;
        v76 = &v75[v74];
        v69 = (uint64_t)&v75[v71 + 1];
        v77 = (char *)(v70 - v68);
        if (v70 == v68)
          v77 = 0;
        v61[10] = (uint64_t)&v75[v71 + (_QWORD)v77];
        v61[11] = v69;
        v61[12] = (uint64_t)v76;
        if (v70)
          operator delete(v70);
      }
      else
      {
        v69 = (uint64_t)(v68 + 1);
      }
      v61[11] = v69;
      v64 = v61[31];
    }
    else
    {
      v64 = v61[31];
      if (v61[10] + (((uint64_t)v62 - v61[7]) >> 3) != v61[11])
      {
        v65 = (_QWORD *)v61[16];
        if (v65)
        {
          while (1)
          {
            v109 = &v107;
            v110 = 1;
            v108 = v64;
            v66 = v65[6];
            if (!v66)
              goto LABEL_125;
            (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v66 + 48))(v66, &v108, &v109);
            v65 = (_QWORD *)*v65;
            if (!v65)
              goto LABEL_91;
          }
        }
        goto LABEL_91;
      }
    }
    for (j = (_QWORD *)v61[22]; j; j = (_QWORD *)*j)
    {
      v109 = &v107;
      v110 = 1;
      v108 = v64;
      v79 = j[6];
      if (!v79)
        goto LABEL_125;
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v79 + 48))(v79, &v108, &v109);
    }
LABEL_91:
    *v16 = 2;
    v80 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(a1);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v80, a2);
  }
  v81 = (uint64_t *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(a1);
  v107 = a2;
  v82 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v81 + 4, (uint64_t)&v107);
  if ((v83 & 1) != 0)
  {
    v89 = (char *)v81[11];
    v88 = v81[12];
    if ((unint64_t)v89 >= v88)
    {
      v91 = (char *)v81[10];
      v92 = (v89 - v91) >> 3;
      v93 = v92 + 1;
      if ((unint64_t)(v92 + 1) >> 61)
        goto LABEL_126;
      v94 = v88 - (_QWORD)v91;
      if (v94 >> 2 > v93)
        v93 = v94 >> 2;
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
        v95 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v95 = v93;
      if (v95)
      {
        if (v95 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v96 = (char *)operator new(8 * v95);
      }
      else
      {
        v96 = 0;
      }
      v97 = &v96[8 * v92];
      *(_QWORD *)v97 = *(_QWORD *)a3;
      v90 = v97 + 8;
      if (v89 != v91)
      {
        v98 = v89 - v91 - 8;
        if (v98 < 0x58)
          goto LABEL_130;
        if ((unint64_t)(v91 - v96) < 0x20)
          goto LABEL_130;
        v99 = (v98 >> 3) + 1;
        v100 = &v96[8 * v92 - 16];
        v101 = (__int128 *)(v89 - 16);
        v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v103 = *v101;
          *((_OWORD *)v100 - 1) = *(v101 - 1);
          *(_OWORD *)v100 = v103;
          v100 -= 32;
          v101 -= 2;
          v102 -= 4;
        }
        while (v102);
        v97 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
        v89 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
        if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_130:
          do
          {
            v104 = *((_QWORD *)v89 - 1);
            v89 -= 8;
            *((_QWORD *)v97 - 1) = v104;
            v97 -= 8;
          }
          while (v89 != v91);
        }
        v89 = (char *)v81[10];
      }
      v81[10] = (uint64_t)v97;
      v81[11] = (uint64_t)v90;
      v81[12] = (uint64_t)&v96[8 * v95];
      if (v89)
        operator delete(v89);
    }
    else
    {
      *(_QWORD *)v89 = *(_QWORD *)a3;
      v90 = v89 + 8;
    }
    v81[11] = (uint64_t)v90;
    v85 = v81[31];
  }
  else
  {
    v84 = (_DWORD *)((char *)v82 + v81[10] - v81[7]);
    *v84 = *(_DWORD *)a3;
    v84[1] = *(_DWORD *)(a3 + 4);
    v85 = v81[31];
    if (v84 != (_DWORD *)v81[11])
    {
      v86 = (_QWORD *)v81[16];
      if (v86)
      {
        while (1)
        {
          v109 = &v107;
          v110 = 1;
          v108 = v85;
          v87 = v86[6];
          if (!v87)
            break;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v87 + 48))(v87, &v108, &v109);
          v86 = (_QWORD *)*v86;
          if (!v86)
            return;
        }
LABEL_125:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_126:
        abort();
      }
      return;
    }
  }
  v105 = (_QWORD *)v81[22];
  if (v105)
  {
    while (1)
    {
      v109 = &v107;
      v110 = 1;
      v108 = v85;
      v106 = v105[6];
      if (!v106)
        break;
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v106 + 48))(v106, &v108, &v109);
      v105 = (_QWORD *)*v105;
      if (!v105)
        return;
    }
    goto LABEL_125;
  }
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB1DB1DACA18D5329;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB1DB1DACA18D5329;
      if (*(_QWORD *)&v3 <= 0xB1DB1DACA18D5329)
        v5 = 0xB1DB1DACA18D5329 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB1DB1DACA18D5329;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB1DB1DACA18D5329)
            {
              if (v7[2] == 0xB1DB1DACA18D5329)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB1DB1DACA18D5329)
          {
            if (v7[2] == 0xB1DB1DACA18D5329)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>]";
  *(_QWORD *)(v11 + 24) = 65;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2748;
  *(_QWORD *)(v11 + 8) = 0xB1DB1DACA18D5329;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB1DB1DACA18D5329, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB1DB1DACA18D5329;
  v15[1] = "arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>]";
  v15[2] = 65;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB1DB1DACA18D5329, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF8E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x757F6D4F9C7E65A8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x757F6D4F9C7E65A8;
      if (*(_QWORD *)&v3 <= 0x757F6D4F9C7E65A8uLL)
        v5 = 0x757F6D4F9C7E65A8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x757F6D4F9C7E65A8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x757F6D4F9C7E65A8)
            {
              if (v7[2] == 0x757F6D4F9C7E65A8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x757F6D4F9C7E65A8)
          {
            if (v7[2] == 0x757F6D4F9C7E65A8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::LabelFeatureArrivalModel]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2298;
  *(_QWORD *)(v11 + 8) = 0x757F6D4F9C7E65A8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x757F6D4F9C7E65A8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x757F6D4F9C7E65A8;
  v15[1] = "arComponents::LabelFeatureArrivalModel]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x757F6D4F9C7E65A8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF9084(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x347DBF5108282558;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x347DBF5108282558;
      if (*(_QWORD *)&v3 <= 0x347DBF5108282558uLL)
        v5 = 0x347DBF5108282558uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x347DBF5108282558;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x347DBF5108282558)
            {
              if (v7[2] == 0x347DBF5108282558)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x347DBF5108282558)
          {
            if (v7[2] == 0x347DBF5108282558)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>]";
  *(_QWORD *)(v11 + 24) = 66;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B24D8;
  *(_QWORD *)(v11 + 8) = 0x347DBF5108282558;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x347DBF5108282558uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x347DBF5108282558;
  v15[1] = "arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>]";
  v15[2] = 66;
  gdc::Registry::_registerStorageDataSignals(a1, 0x347DBF5108282558, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF92AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x32AFEAA002EF563ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x32AFEAA002EF563ELL;
      if (*(_QWORD *)&v3 <= 0x32AFEAA002EF563EuLL)
        v5 = 0x32AFEAA002EF563EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x32AFEAA002EF563ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x32AFEAA002EF563ELL)
            {
              if (v7[2] == 0x32AFEAA002EF563ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x32AFEAA002EF563ELL)
          {
            if (v7[2] == 0x32AFEAA002EF563ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>]";
  *(_QWORD *)(v11 + 24) = 71;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B23E8;
  *(_QWORD *)(v11 + 8) = 0x32AFEAA002EF563ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x32AFEAA002EF563EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x32AFEAA002EF563ELL;
  v15[1] = "arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>]";
  v15[2] = 71;
  gdc::Registry::_registerStorageDataSignals(a1, 0x32AFEAA002EF563ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF94D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE77D1752D79CE08ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE77D1752D79CE08ELL;
      if (*(_QWORD *)&v3 <= 0xE77D1752D79CE08ELL)
        v5 = 0xE77D1752D79CE08ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE77D1752D79CE08ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE77D1752D79CE08ELL)
            {
              if (v7[2] == 0xE77D1752D79CE08ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE77D1752D79CE08ELL)
          {
            if (v7[2] == 0xE77D1752D79CE08ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2418;
  *(_QWORD *)(v11 + 8) = 0xE77D1752D79CE08ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE77D1752D79CE08ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE77D1752D79CE08ELL;
  v15[1] = "arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE77D1752D79CE08ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCF96FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v33 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v33);
  if ((v6 & 1) != 0)
  {
    v15 = (char *)a1[11];
    v14 = a1[12];
    if ((unint64_t)v15 >= v14)
    {
      v20 = (char *)a1[10];
      v21 = 0x8E38E38E38E38E39 * ((v15 - v20) >> 3) + 1;
      if (v21 > 0x38E38E38E38E38ELL)
        goto LABEL_30;
      v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v14 - (_QWORD)v20) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x1C71C71C71C71C7)
        v23 = 0x38E38E38E38E38ELL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0x38E38E38E38E38ELL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = (char *)operator new(72 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * ((v15 - v20) >> 3)];
      v26 = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v25 + 2) = *(_OWORD *)(a3 + 32);
      *((_OWORD *)v25 + 3) = v26;
      *((_QWORD *)v25 + 8) = *(_QWORD *)(a3 + 64);
      v27 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v25 = *(_OWORD *)a3;
      *((_OWORD *)v25 + 1) = v27;
      v19 = v25 + 72;
      if (v15 != v20)
      {
        do
        {
          *(_OWORD *)(v25 - 72) = *(_OWORD *)(v15 - 72);
          v28 = *(_OWORD *)(v15 - 56);
          v29 = *(_OWORD *)(v15 - 40);
          v30 = *(_OWORD *)(v15 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v25 - 24) = v30;
          *(_OWORD *)(v25 - 40) = v29;
          *(_OWORD *)(v25 - 56) = v28;
          v25 -= 72;
          v15 -= 72;
        }
        while (v15 != v20);
        v15 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v25;
      a1[11] = (uint64_t)v19;
      a1[12] = (uint64_t)&v24[72 * v23];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)a3;
      v16 = *(_OWORD *)(a3 + 16);
      v17 = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a3 + 48);
      *((_QWORD *)v15 + 8) = *(_QWORD *)(a3 + 64);
      *((_OWORD *)v15 + 2) = v17;
      *((_OWORD *)v15 + 3) = v18;
      *((_OWORD *)v15 + 1) = v16;
      v19 = v15 + 72;
    }
    a1[11] = (uint64_t)v19;
    v11 = a1[31];
  }
  else
  {
    v7 = a1[10] + 72 * (((uint64_t)v5 - a1[7]) >> 3);
    v9 = *(_OWORD *)(a3 + 32);
    v8 = *(_OWORD *)(a3 + 48);
    v10 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(a3 + 64);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v8;
    *(_OWORD *)(v7 + 16) = v10;
    *(_OWORD *)v7 = *(_OWORD *)a3;
    v11 = a1[31];
    if (v7 != a1[11])
    {
      v12 = (_QWORD *)a1[16];
      if (v12)
      {
        while (1)
        {
          v35 = &v33;
          v36 = 1;
          v34 = v11;
          v13 = v12[6];
          if (!v13)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v13 + 48))(v13, &v34, &v35);
          v12 = (_QWORD *)*v12;
          if (!v12)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v31 = (_QWORD *)a1[22];
  if (v31)
  {
    while (1)
    {
      v35 = &v33;
      v36 = 1;
      v34 = v11;
      v32 = v31[6];
      if (!v32)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v32 + 48))(v32, &v34, &v35);
      v31 = (_QWORD *)*v31;
      if (!v31)
        return;
    }
    goto LABEL_29;
  }
}

void _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1AF8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1AF8;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEEclESO_Ob(uint64_t a1, double *a2)
{
  double result;

  result = *a2 * *(float *)(**(_QWORD **)(a1 + 8) + 168);
  *a2 = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1AB0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1AB0;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEEclESO_Ob(uint64_t a1, double *a2)
{
  double result;

  result = *a2 + *(double *)(**(_QWORD **)(a1 + 8) + 120) * 0.0000000249532021;
  *a2 = result;
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(uint64_t a1, size_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int16 **v18;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t i;
  _QWORD *v44;
  size_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_786[v6++ + 38]);
  while (v6 != 116);
  result = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v8);
  v10 = result[4];
  if (a2 >> 39 < (result[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = result[7];
      v13 = result[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
        {
          v17 = result[10];
          v18 = (unsigned __int16 **)(v17 + 24 * v12);
          if (v18 != (unsigned __int16 **)result[11] && v17 != 0)
          {
            v20 = HIDWORD(a3);
            v22 = *v18;
            v21 = v18[1];
            v23 = *v18;
            if (*v18 != v21)
            {
              while (__PAIR64__(v23[1], *v23) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                   || *((_DWORD *)v23 + 1) != HIDWORD(a3))
              {
                v23 += 4;
                if (v23 == v21)
                {
                  v23 = v18[1];
                  break;
                }
              }
            }
            if (v23 != v21)
            {
              v24 = v23 + 4;
              if (v23 + 4 != v21)
              {
                do
                {
                  if (__PAIR64__(v24[1], *v24) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                    || *((_DWORD *)v24 + 1) != HIDWORD(a3))
                  {
                    *(_QWORD *)v23 = *(_QWORD *)v24;
                    v23 += 4;
                  }
                  v24 += 4;
                }
                while (v24 != v21);
                v22 = *v18;
                v21 = v18[1];
              }
              if (v23 != v21)
              {
                v25 = (char *)v21 - (char *)(v23 + 4);
                if (v21 != v23 + 4)
                {
                  memmove(v23, v23 + 4, (char *)v21 - (char *)(v23 + 4));
                  v22 = *v18;
                }
                v21 = (unsigned __int16 *)((char *)v23 + v25);
                v18[1] = (unsigned __int16 *)((char *)v23 + v25);
                v20 = HIDWORD(a3);
              }
            }
            if (v22 != v21)
              goto LABEL_43;
            v26 = 0;
            v27 = 0xCBF29CE484222325;
            do
              v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_786[v26++ + 38]);
            while (v26 != 116);
            v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v27);
            v45 = a2;
            if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v28 + 4, HIDWORD(a2))&& (v29 = (_QWORD *)v28[28]) != 0)
            {
              v30 = v28[31];
              while (1)
              {
                v47[0] = &v45;
                v47[1] = 1;
                v46 = v30;
                v31 = v29[6];
                if (!v31)
                  break;
                (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v31 + 48))(v31, &v46, v47);
                v29 = (_QWORD *)*v29;
                if (!v29)
                  goto LABEL_43;
              }
              std::__throw_bad_function_call[abi:nn180100]();
              return (_QWORD *)gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::LabelIconRequestData>>();
            }
            else
            {
LABEL_43:
              v32 = 0;
              v33 = 0xCBF29CE484222325;
              do
                v33 = 0x100000001B3 * (v33 ^ aStdStringViewG_787[v32++ + 38]);
              while (v32 != 112);
              result = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v33);
              v34 = result[4];
              if (a3 >> 39 < (result[5] - v34) >> 3)
              {
                v35 = *(_QWORD *)(v34 + 8 * (a3 >> 39));
                if (v35)
                {
                  v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(a3) & 0x7F));
                  v38 = result[7];
                  v37 = result[8];
                  if (v36 < (v37 - v38) >> 3)
                  {
                    v39 = v38 + 8 * v36;
                    if (v39 != v37 && *(_DWORD *)(v39 + 4) == (_DWORD)v20)
                    {
                      v41 = result[10];
                      if (v41 + 12 * v36 != result[11] && v41 != 0)
                      {
                        gdc::component::DataRequestObserver::updateStatusCounts(a1, a3, a2, *(unsigned __int8 *)(v41 + 12 * v36 + 8), 0);
                        for (i = 0; i != 112; ++i)
                          v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_787[i + 38]);
                        v44 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v7);
                        return (_QWORD *)gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(v44, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(uint64_t a1, size_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int16 **v18;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t i;
  _QWORD *v44;
  size_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_784[v6++ + 38]);
  while (v6 != 114);
  result = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v8);
  v10 = result[4];
  if (a2 >> 39 < (result[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = result[7];
      v13 = result[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
        {
          v17 = result[10];
          v18 = (unsigned __int16 **)(v17 + 24 * v12);
          if (v18 != (unsigned __int16 **)result[11] && v17 != 0)
          {
            v20 = HIDWORD(a3);
            v22 = *v18;
            v21 = v18[1];
            v23 = *v18;
            if (*v18 != v21)
            {
              while (__PAIR64__(v23[1], *v23) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                   || *((_DWORD *)v23 + 1) != HIDWORD(a3))
              {
                v23 += 4;
                if (v23 == v21)
                {
                  v23 = v18[1];
                  break;
                }
              }
            }
            if (v23 != v21)
            {
              v24 = v23 + 4;
              if (v23 + 4 != v21)
              {
                do
                {
                  if (__PAIR64__(v24[1], *v24) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                    || *((_DWORD *)v24 + 1) != HIDWORD(a3))
                  {
                    *(_QWORD *)v23 = *(_QWORD *)v24;
                    v23 += 4;
                  }
                  v24 += 4;
                }
                while (v24 != v21);
                v22 = *v18;
                v21 = v18[1];
              }
              if (v23 != v21)
              {
                v25 = (char *)v21 - (char *)(v23 + 4);
                if (v21 != v23 + 4)
                {
                  memmove(v23, v23 + 4, (char *)v21 - (char *)(v23 + 4));
                  v22 = *v18;
                }
                v21 = (unsigned __int16 *)((char *)v23 + v25);
                v18[1] = (unsigned __int16 *)((char *)v23 + v25);
                v20 = HIDWORD(a3);
              }
            }
            if (v22 != v21)
              goto LABEL_43;
            v26 = 0;
            v27 = 0xCBF29CE484222325;
            do
              v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_784[v26++ + 38]);
            while (v26 != 114);
            v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v27);
            v45 = a2;
            if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v28 + 4, HIDWORD(a2))&& (v29 = (_QWORD *)v28[28]) != 0)
            {
              v30 = v28[31];
              while (1)
              {
                v47[0] = &v45;
                v47[1] = 1;
                v46 = v30;
                v31 = v29[6];
                if (!v31)
                  break;
                (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v31 + 48))(v31, &v46, v47);
                v29 = (_QWORD *)*v29;
                if (!v29)
                  goto LABEL_43;
              }
              std::__throw_bad_function_call[abi:nn180100]();
              return (_QWORD *)gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>();
            }
            else
            {
LABEL_43:
              v32 = 0;
              v33 = 0xCBF29CE484222325;
              do
                v33 = 0x100000001B3 * (v33 ^ aStdStringViewG_785[v32++ + 38]);
              while (v32 != 110);
              result = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v33);
              v34 = result[4];
              if (a3 >> 39 < (result[5] - v34) >> 3)
              {
                v35 = *(_QWORD *)(v34 + 8 * (a3 >> 39));
                if (v35)
                {
                  v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(a3) & 0x7F));
                  v38 = result[7];
                  v37 = result[8];
                  if (v36 < (v37 - v38) >> 3)
                  {
                    v39 = v38 + 8 * v36;
                    if (v39 != v37 && *(_DWORD *)(v39 + 4) == (_DWORD)v20)
                    {
                      v41 = result[10];
                      if (v41 + 12 * v36 != result[11] && v41 != 0)
                      {
                        gdc::component::DataRequestObserver::updateStatusCounts(a1, a3, a2, *(unsigned __int8 *)(v41 + 12 * v36 + 8), 0);
                        for (i = 0; i != 110; ++i)
                          v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_785[i + 38]);
                        v44 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v7);
                        return (_QWORD *)gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::remove(v44, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(uint64_t a1, size_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int16 **v18;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t i;
  _QWORD *v44;
  size_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_782[v6++ + 38]);
  while (v6 != 118);
  result = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v8);
  v10 = result[4];
  if (a2 >> 39 < (result[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = result[7];
      v13 = result[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
        {
          v17 = result[10];
          v18 = (unsigned __int16 **)(v17 + 24 * v12);
          if (v18 != (unsigned __int16 **)result[11] && v17 != 0)
          {
            v20 = HIDWORD(a3);
            v22 = *v18;
            v21 = v18[1];
            v23 = *v18;
            if (*v18 != v21)
            {
              while (__PAIR64__(v23[1], *v23) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                   || *((_DWORD *)v23 + 1) != HIDWORD(a3))
              {
                v23 += 4;
                if (v23 == v21)
                {
                  v23 = v18[1];
                  break;
                }
              }
            }
            if (v23 != v21)
            {
              v24 = v23 + 4;
              if (v23 + 4 != v21)
              {
                do
                {
                  if (__PAIR64__(v24[1], *v24) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                    || *((_DWORD *)v24 + 1) != HIDWORD(a3))
                  {
                    *(_QWORD *)v23 = *(_QWORD *)v24;
                    v23 += 4;
                  }
                  v24 += 4;
                }
                while (v24 != v21);
                v22 = *v18;
                v21 = v18[1];
              }
              if (v23 != v21)
              {
                v25 = (char *)v21 - (char *)(v23 + 4);
                if (v21 != v23 + 4)
                {
                  memmove(v23, v23 + 4, (char *)v21 - (char *)(v23 + 4));
                  v22 = *v18;
                }
                v21 = (unsigned __int16 *)((char *)v23 + v25);
                v18[1] = (unsigned __int16 *)((char *)v23 + v25);
                v20 = HIDWORD(a3);
              }
            }
            if (v22 != v21)
              goto LABEL_43;
            v26 = 0;
            v27 = 0xCBF29CE484222325;
            do
              v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_782[v26++ + 38]);
            while (v26 != 118);
            v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v27);
            v45 = a2;
            if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v28 + 4, HIDWORD(a2))&& (v29 = (_QWORD *)v28[28]) != 0)
            {
              v30 = v28[31];
              while (1)
              {
                v47[0] = &v45;
                v47[1] = 1;
                v46 = v30;
                v31 = v29[6];
                if (!v31)
                  break;
                (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v31 + 48))(v31, &v46, v47);
                v29 = (_QWORD *)*v29;
                if (!v29)
                  goto LABEL_43;
              }
              std::__throw_bad_function_call[abi:nn180100]();
              return (_QWORD *)gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::~ComponentStorageWrapper();
            }
            else
            {
LABEL_43:
              v32 = 0;
              v33 = 0xCBF29CE484222325;
              do
                v33 = 0x100000001B3 * (v33 ^ aStdStringViewG_783[v32++ + 38]);
              while (v32 != 114);
              result = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v33);
              v34 = result[4];
              if (a3 >> 39 < (result[5] - v34) >> 3)
              {
                v35 = *(_QWORD *)(v34 + 8 * (a3 >> 39));
                if (v35)
                {
                  v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(a3) & 0x7F));
                  v38 = result[7];
                  v37 = result[8];
                  if (v36 < (v37 - v38) >> 3)
                  {
                    v39 = v38 + 8 * v36;
                    if (v39 != v37 && *(_DWORD *)(v39 + 4) == (_DWORD)v20)
                    {
                      v41 = result[10];
                      if (v41 + 12 * v36 != result[11] && v41 != 0)
                      {
                        gdc::component::DataRequestObserver::updateStatusCounts(a1, a3, a2, *(unsigned __int8 *)(v41 + 12 * v36 + 8), 0);
                        for (i = 0; i != 114; ++i)
                          v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_783[i + 38]);
                        v44 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v7);
                        return (_QWORD *)gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::remove(v44, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ___ZL40GEOGetVectorKitLabelExternalMeshLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelExternalMeshLogic");
  v1 = (void *)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  GEOGetVectorKitLabelExternalMeshLogicLog(void)::log = (uint64_t)v0;

}

void md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()(uint64_t **a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  int v34;
  const char *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  __int128 v90;
  char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *i;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t *v116;
  char *v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  _OWORD *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  NSObject *v127;
  int v128;
  char v129;
  const char *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  uint64_t v138;
  uint8_t buf[8];
  _BYTE v140[10];
  __int16 v141;
  const char *v142;
  __int16 v143;
  const char *v144;
  __int16 v145;
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = (_QWORD *)gdc::Registry::storage<arComponents::XYPlaneMeshRequest>((*a1)[15]);
  v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = v9[7];
      v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
          return;
      }
    }
  }
  v17 = *a3;
  v18 = (std::__shared_weak_count *)operator new(0x98uLL);
  v18->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD540;
  LODWORD(v18[1].__vftable) = *(_DWORD *)(v17 + 8);
  BYTE4(v18[1].__vftable) = 1;
  *(_OWORD *)&v18[1].__shared_owners_ = *(_OWORD *)a4;
  v18[2].__vftable = *(std::__shared_weak_count_vtbl **)(a4 + 16);
  v20 = *(_OWORD *)(v17 + 16);
  v18[3].__vftable = *(std::__shared_weak_count_vtbl **)(v17 + 32);
  *(_OWORD *)&v18[2].__shared_owners_ = v20;
  v21 = *(_OWORD *)(v17 + 40);
  v18[4].__vftable = *(std::__shared_weak_count_vtbl **)(v17 + 56);
  *(_OWORD *)&v18[3].__shared_owners_ = v21;
  v18[4].__shared_owners_ = *(_QWORD *)(v17 + 64);
  v22 = *(_QWORD *)(v17 + 88);
  *(_OWORD *)&v18[4].__shared_weak_owners_ = *(_OWORD *)(v17 + 72);
  v18[5].__shared_owners_ = v22;
  LODWORD(v18[5].__shared_weak_owners_) = 1065353216;
  BYTE4(v18[5].__shared_weak_owners_) = 0;
  *(_DWORD *)((char *)&v18[5].__shared_weak_owners_ + 5) = *(_DWORD *)(v17 + 177);
  *(_QWORD *)&v136 = v18 + 1;
  *((_QWORD *)&v136 + 1) = v18;
  *(_QWORD *)buf = v18 + 1;
  *(_QWORD *)v140 = v18;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  std::mutex::lock((std::mutex *)(v17 + 96));
  if (*(_BYTE *)(v17 + 176) == 4)
  {
    std::mutex::unlock((std::mutex *)(v17 + 96));
    v24 = 0;
  }
  else
  {
    if (BYTE4(v18[1].__vftable) == *(unsigned __int8 *)(v17 + 12))
    {
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      v26 = *(std::__shared_weak_count **)(v17 + 168);
      *(_QWORD *)(v17 + 160) = v18 + 1;
      *(_QWORD *)(v17 + 168) = v18;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    v29 = *(_QWORD *)(v17 + 160);
    v24 = v29 != 0;
    if (v29)
      v30 = 2;
    else
      v30 = 3;
    *(_BYTE *)(v17 + 176) = v30;
    v18 = *(std::__shared_weak_count **)v140;
    std::mutex::unlock((std::mutex *)(v17 + 96));
    if (!*(_QWORD *)v140)
    {
LABEL_26:
      if (v24)
        goto LABEL_27;
      goto LABEL_40;
    }
  }
  v31 = (unint64_t *)&v18->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
    goto LABEL_26;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (v24)
  {
LABEL_27:
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
    v33 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v34 = *(_DWORD *)(v17 + 8);
      v35 = "ARFeatureShadow";
      if (!*(_BYTE *)(v17 + 12))
        v35 = "ARArrival";
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)v140 = 2080;
      *(_QWORD *)&v140[2] = v35;
      _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_INFO, "Fulfilled request(%d) for external mesh type:%s", buf, 0x12u);
    }
    v36 = v8[15];
    if (*((_QWORD *)&v136 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      *(_QWORD *)v140 = *((_QWORD *)&v136 + 1);
      do
        v39 = __ldxr(v37);
      while (__stxr(v39 + 1, v37));
    }
    else
    {
      *(_QWORD *)v140 = 0;
    }
    *(_QWORD *)buf = v136;
    v60 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v36);
    gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v60, a2, buf);
    v61 = *(std::__shared_weak_count **)v140;
    if (*(_QWORD *)v140)
    {
      v62 = (unint64_t *)(*(_QWORD *)v140 + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (*((_QWORD *)&v136 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
      }
    }
    v66 = v8[15];
    *((_QWORD *)&v135 + 1) = *((_QWORD *)&v136 + 1);
    if (*((_QWORD *)&v136 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(v66);
    v137 = a2;
    v70 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v69 + 4, (uint64_t)&v137);
    if ((v71 & 1) != 0)
    {
      v77 = (char *)v69[11];
      v76 = v69[12];
      if ((unint64_t)v77 >= v76)
      {
        v80 = (char *)v69[10];
        v81 = (v77 - v80) >> 4;
        v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 60)
          abort();
        v83 = v76 - (_QWORD)v80;
        if (v83 >> 3 > v82)
          v82 = v83 >> 3;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0)
          v84 = 0xFFFFFFFFFFFFFFFLL;
        else
          v84 = v82;
        if (v84)
        {
          if (v84 >> 60)
            goto LABEL_165;
          v85 = (char *)operator new(16 * v84);
        }
        else
        {
          v85 = 0;
        }
        v86 = &v85[16 * v81];
        *(_OWORD *)v86 = v136;
        if (*((_QWORD *)&v136 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
          v80 = (char *)v69[10];
          v77 = (char *)v69[11];
        }
        v89 = &v85[16 * v84];
        v72 = (uint64_t)(v86 + 16);
        if (v77 == v80)
        {
          v69[10] = (uint64_t)v86;
          v69[11] = v72;
          v69[12] = (uint64_t)v89;
        }
        else
        {
          do
          {
            v90 = *((_OWORD *)v77 - 1);
            v77 -= 16;
            *((_OWORD *)v86 - 1) = v90;
            v86 -= 16;
            *(_QWORD *)v77 = 0;
            *((_QWORD *)v77 + 1) = 0;
          }
          while (v77 != v80);
          v80 = (char *)v69[10];
          v91 = (char *)v69[11];
          v69[10] = (uint64_t)v86;
          v69[11] = v72;
          v69[12] = (uint64_t)v89;
          while (v91 != v80)
          {
            v92 = (std::__shared_weak_count *)*((_QWORD *)v91 - 1);
            if (v92)
            {
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v91 -= 16;
          }
        }
        if (v80)
          operator delete(v80);
      }
      else
      {
        *(_OWORD *)v77 = v136;
        if (*((_QWORD *)&v136 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        v72 = (uint64_t)(v77 + 16);
      }
      v69[11] = v72;
    }
    else
    {
      v72 = v69[10] + 2 * ((_QWORD)v70 - v69[7]);
      v135 = 0uLL;
      v73 = *(std::__shared_weak_count **)(v72 + 8);
      *(_OWORD *)v72 = v136;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }
    v95 = v69[31];
    if (v72 == v69[11])
    {
      for (i = (_QWORD *)v69[22]; i; i = (_QWORD *)*i)
      {
        *(_QWORD *)buf = &v137;
        *(_QWORD *)v140 = 1;
        v138 = v95;
        v99 = i[6];
        if (!v99)
          goto LABEL_163;
        (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v99 + 48))(v99, &v138, buf);
      }
    }
    else
    {
      v96 = (_QWORD *)v69[16];
      if (v96)
      {
        while (1)
        {
          *(_QWORD *)buf = &v137;
          *(_QWORD *)v140 = 1;
          v138 = v95;
          v97 = v96[6];
          if (!v97)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v97 + 48))(v97, &v138, buf);
          v96 = (_QWORD *)*v96;
          if (!v96)
            goto LABEL_114;
        }
LABEL_163:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_165:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
    }
LABEL_114:
    if (*((_QWORD *)&v135 + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
      }
    }
    v102 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v8[15]);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v102, a2);
    v103 = (char *)v8[22];
    v104 = (char *)v8[23];
    v105 = (uint64_t)(v8 + 22);
    if (v103 != v104)
    {
      while ((_QWORD)v136 != *(_QWORD *)v103)
      {
        v103 += 16;
        if (v103 == v104)
          goto LABEL_124;
      }
    }
    if (v103 == v104)
    {
LABEL_124:
      *(_QWORD *)buf = v136;
      *(_QWORD *)v140 = 0xFFFFFFFF00000000;
      v103 = geo::linear_map<md::LabelExternalMesh *,gdc::Entity,std::equal_to<md::LabelExternalMesh *>,std::allocator<std::pair<md::LabelExternalMesh *,gdc::Entity>>,std::vector<std::pair<md::LabelExternalMesh *,gdc::Entity>>>::insert(v105, buf);
    }
    *((_QWORD *)v103 + 1) = a2;
    v106 = a1[1];
    v108 = (_QWORD *)*v106;
    v107 = (unint64_t *)v106[1];
    v109 = ((uint64_t)v107 - *v106) >> 3;
    v110 = v106[3];
    if (v110 >= v109 + 1)
    {
LABEL_157:
      *v107 = a2;
      v106[1] += 8;
      v131 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
      if (!*((_QWORD *)&v136 + 1))
        return;
      goto LABEL_158;
    }
    v111 = (_QWORD *)v106[2];
    v112 = (1 << -(char)__clz(v110 + 1));
    if (v110 >= 0xFFFFFFFFFFFFFFFELL)
      v112 = 1;
    if (v112 <= v109 + 1)
      v113 = v109 + 1;
    else
      v113 = v112;
    v114 = (char *)malloc_type_malloc(8 * v113, 0x100004000313F17uLL);
    v115 = v114;
    v116 = (uint64_t *)*v106;
    v117 = (char *)v106[1];
    if ((char *)*v106 != v117)
    {
      v118 = v117 - (char *)v116 - 8;
      if (v118 < 0x18)
      {
        v119 = v114;
      }
      else
      {
        v119 = v114;
        if ((unint64_t)(v114 - (char *)v116) >= 0x20)
        {
          v120 = (v118 >> 3) + 1;
          v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
          v119 = &v114[v121];
          v122 = (__int128 *)(v116 + 2);
          v123 = v114 + 16;
          v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v125 = *v122;
            *(v123 - 1) = *(v122 - 1);
            *v123 = v125;
            v122 += 2;
            v123 += 2;
            v124 -= 4;
          }
          while (v124);
          if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_154;
          v116 = (uint64_t *)((char *)v116 + v121);
        }
      }
      do
      {
        v132 = *v116++;
        *(_QWORD *)v119 = v132;
        v119 += 8;
      }
      while (v116 != (uint64_t *)v117);
    }
LABEL_154:
    if (v108 != v111)
      free((void *)*v106);
    v107 = (unint64_t *)&v115[8 * v109];
    *v106 = (uint64_t)v115;
    v106[1] = (uint64_t)v107;
    v106[3] = v113;
    goto LABEL_157;
  }
LABEL_40:
  v40 = a1[2];
  v42 = (_QWORD *)*v40;
  v41 = (unint64_t *)v40[1];
  v43 = ((uint64_t)v41 - *v40) >> 3;
  v44 = v40[3];
  if (v44 >= v43 + 1)
    goto LABEL_143;
  v45 = (_QWORD *)v40[2];
  v46 = (1 << -(char)__clz(v44 + 1));
  if (v44 >= 0xFFFFFFFFFFFFFFFELL)
    v46 = 1;
  if (v46 <= v43 + 1)
    v47 = v43 + 1;
  else
    v47 = v46;
  v48 = (char *)malloc_type_malloc(8 * v47, 0x100004000313F17uLL);
  v49 = v48;
  v50 = (uint64_t *)*v40;
  v51 = (char *)v40[1];
  if ((char *)*v40 != v51)
  {
    v52 = v51 - (char *)v50 - 8;
    if (v52 < 0x18)
    {
      v53 = v48;
    }
    else
    {
      v53 = v48;
      if ((unint64_t)(v48 - (char *)v50) >= 0x20)
      {
        v54 = (v52 >> 3) + 1;
        v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v53 = &v48[v55];
        v56 = (__int128 *)(v50 + 2);
        v57 = v48 + 16;
        v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *v56;
          *(v57 - 1) = *(v56 - 1);
          *v57 = v59;
          v56 += 2;
          v57 += 2;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_140;
        v50 = (uint64_t *)((char *)v50 + v55);
      }
    }
    do
    {
      v126 = *v50++;
      *(_QWORD *)v53 = v126;
      v53 += 8;
    }
    while (v50 != (uint64_t *)v51);
  }
LABEL_140:
  if (v42 != v45)
    free((void *)*v40);
  v41 = (unint64_t *)&v49[8 * v43];
  *v40 = (uint64_t)v49;
  v40[1] = (uint64_t)v41;
  v40[3] = v47;
LABEL_143:
  *v41 = a2;
  v40[1] += 8;
  if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
  v127 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
  {
    v128 = *(_DWORD *)(v17 + 8);
    std::mutex::lock((std::mutex *)(v17 + 96));
    v129 = *(_BYTE *)(v17 + 176);
    std::mutex::unlock((std::mutex *)(v17 + 96));
    if ((v129 - 1) > 3u)
      v130 = "None";
    else
      v130 = off_1E42F6C00[(v129 - 1)];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v128;
    *(_WORD *)v140 = 2080;
    *(_QWORD *)&v140[2] = v130;
    v141 = 2080;
    v142 = "false";
    v143 = 2080;
    v144 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelsExternalMeshLogic.mm";
    v145 = 1024;
    v146 = 408;
    _os_log_impl(&dword_19F029000, v127, OS_LOG_TYPE_ERROR, "Failed to fulfill request (id:%d status:%s): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x2Cu);
  }

  v131 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
LABEL_158:
    v133 = (unint64_t *)&v131->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
}

void sub_19FCFB680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *geo::linear_map<md::LabelExternalMesh *,gdc::Entity,std::equal_to<md::LabelExternalMesh *>,std::allocator<std::pair<md::LabelExternalMesh *,gdc::Entity>>,std::vector<std::pair<md::LabelExternalMesh *,gdc::Entity>>>::insert(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *result;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  result = v4;
  if (v4 != v5)
  {
    result = v4;
    while (*a2 != *(_QWORD *)result)
    {
      result += 16;
      if (result == v5)
        goto LABEL_7;
    }
  }
  if (result == v5)
  {
LABEL_7:
    v7 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      v9 = (v5 - v4) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v11 = v7 - (_QWORD)v4;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      *(_OWORD *)v14 = *(_OWORD *)a2;
      v8 = v14 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        v4 = *(char **)a1;
      }
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = &v13[16 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      v8 = v5 + 16;
    }
    *(_QWORD *)(a1 + 8) = v8;
    return (char *)(v8 - 1);
  }
  return result;
}

void std::__shared_ptr_emplace<md::ARFeatureShadowExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARFeatureShadowExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::IsFailed>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBD48D0FDFECFEB54;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBD48D0FDFECFEB54;
      if (*(_QWORD *)&v3 <= 0xBD48D0FDFECFEB54)
        v5 = 0xBD48D0FDFECFEB54 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBD48D0FDFECFEB54;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBD48D0FDFECFEB54)
            {
              if (v7[2] == 0xBD48D0FDFECFEB54)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBD48D0FDFECFEB54)
          {
            if (v7[2] == 0xBD48D0FDFECFEB54)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequestObserver::IsFailed]";
  *(_QWORD *)(v11 + 24) = 45;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B4368;
  *(_QWORD *)(v11 + 8) = 0xBD48D0FDFECFEB54;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBD48D0FDFECFEB54, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBD48D0FDFECFEB54;
  v15[1] = "gdc::component::DataRequestObserver::IsFailed]";
  v15[2] = 45;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBD48D0FDFECFEB54, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCFBA7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_0::operator()(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::mutex *v7;
  uint64_t v8;
  int v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  _QWORD *v40;
  char **v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char **v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  NSObject *v84;
  int v85;
  char *v86;
  uint8_t buf[4];
  int v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  v7 = (std::mutex *)(a3 + 96);
  std::mutex::lock((std::mutex *)(a3 + 96));
  v8 = *(_QWORD *)(a3 + 160);
  if (v8)
    atomic_store(1u, (unsigned __int8 *)(v8 + 116));
  std::mutex::lock(v7);
  v9 = *(unsigned __int8 *)(a3 + 176);
  std::mutex::unlock(v7);
  if (v9 != 4)
    *(_BYTE *)(a3 + 176) = 3;
  std::mutex::unlock(v7);
  v10 = (char **)*a1;
  v12 = **a1;
  v11 = (char *)(*a1)[1];
  v13 = (uint64_t)&v11[-v12] >> 3;
  v14 = (*a1)[3];
  if (v14 < v13 + 1)
  {
    v15 = v10[2];
    v16 = (1 << -(char)__clz(v14 + 1));
    if (v14 >= 0xFFFFFFFFFFFFFFFELL)
      v16 = 1;
    if (v16 <= v13 + 1)
      v17 = v13 + 1;
    else
      v17 = v16;
    v18 = (char *)malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
    v19 = v18;
    v20 = *v10;
    v21 = v10[1];
    if (*v10 == v21)
      goto LABEL_20;
    v22 = v21 - v20 - 8;
    if (v22 < 0x18)
    {
      v23 = v18;
    }
    else
    {
      v23 = v18;
      if ((unint64_t)(v18 - v20) >= 0x20)
      {
        v24 = (v22 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v18[v25];
        v26 = (__int128 *)(v20 + 16);
        v27 = v18 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_20;
        v20 += v25;
      }
    }
    do
    {
      v30 = *(_QWORD *)v20;
      v20 += 8;
      *(_QWORD *)v23 = v30;
      v23 += 8;
    }
    while (v20 != v21);
LABEL_20:
    if ((char *)v12 != v15)
      free(*v10);
    v11 = &v19[8 * v13];
    *v10 = v19;
    v10[1] = v11;
    v10[3] = (char *)v17;
  }
  *(_QWORD *)v11 = a2;
  v10[1] += 8;
  v31 = (_QWORD *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(v6[15]);
  v32 = v31[4];
  if (a2 >> 39 < (v31[5] - v32) >> 3)
  {
    v33 = *(_QWORD *)(v32 + 8 * (a2 >> 39));
    if (v33)
    {
      v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(a2) & 0x7F));
      v36 = v31[7];
      v35 = v31[8];
      if (v34 < (v35 - v36) >> 3)
      {
        v37 = v36 + 8 * v34;
        if (v37 != v35 && *(_DWORD *)(v37 + 4) == HIDWORD(a2))
        {
          v39 = v31[10];
          v40 = (_QWORD *)(v39 + 16 * v34);
          if (v40 != (_QWORD *)v31[11] && v39 != 0)
          {
            v42 = (char **)*a1;
            v44 = **a1;
            v43 = (char *)(*a1)[1];
            v45 = (uint64_t)&v43[-v44] >> 3;
            v46 = (*a1)[3];
            if (v46 >= v45 + 1)
              goto LABEL_53;
            v86 = v42[2];
            v47 = (1 << -(char)__clz(v46 + 1));
            if (v46 >= 0xFFFFFFFFFFFFFFFELL)
              v47 = 1;
            if (v47 <= v45 + 1)
              v48 = v45 + 1;
            else
              v48 = v47;
            v49 = (char *)malloc_type_malloc(8 * v48, 0x100004000313F17uLL);
            v50 = v49;
            v51 = *v42;
            v52 = v42[1];
            if (*v42 != v52)
            {
              v53 = v52 - v51 - 8;
              if (v53 < 0x18)
              {
                v54 = v49;
              }
              else
              {
                v54 = v49;
                if ((unint64_t)(v49 - v51) >= 0x20)
                {
                  v55 = (v53 >> 3) + 1;
                  v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
                  v54 = &v49[v56];
                  v57 = (__int128 *)(v51 + 16);
                  v58 = v49 + 16;
                  v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v60 = *v57;
                    *(v58 - 1) = *(v57 - 1);
                    *v58 = v60;
                    v57 += 2;
                    v58 += 2;
                    v59 -= 4;
                  }
                  while (v59);
                  if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_50;
                  v51 += v56;
                }
              }
              do
              {
                v61 = *(_QWORD *)v51;
                v51 += 8;
                *(_QWORD *)v54 = v61;
                v54 += 8;
              }
              while (v51 != v52);
            }
LABEL_50:
            if ((char *)v44 != v86)
              free(*v42);
            v43 = &v50[8 * v45];
            *v42 = v50;
            v42[1] = v43;
            v42[3] = (char *)v48;
LABEL_53:
            *(_QWORD *)v43 = *v40;
            v42[1] += 8;
            v62 = (char **)*a1;
            v63 = (_QWORD *)(v39 + 16 * v34 + 8);
            v65 = **a1;
            v64 = (char *)(*a1)[1];
            v66 = (uint64_t)&v64[-v65] >> 3;
            v67 = (*a1)[3];
            if (v67 >= v66 + 1)
            {
LABEL_71:
              *(_QWORD *)v64 = *v63;
              v62[1] += 8;
              goto LABEL_72;
            }
            v68 = v62[2];
            v69 = (1 << -(char)__clz(v67 + 1));
            if (v67 >= 0xFFFFFFFFFFFFFFFELL)
              v69 = 1;
            if (v69 <= v66 + 1)
              v70 = v66 + 1;
            else
              v70 = v69;
            v71 = (char *)malloc_type_malloc(8 * v70, 0x100004000313F17uLL);
            v72 = v71;
            v73 = *v62;
            v74 = v62[1];
            if (*v62 != v74)
            {
              v75 = v74 - v73 - 8;
              if (v75 < 0x18)
              {
                v76 = v71;
              }
              else
              {
                v76 = v71;
                if ((unint64_t)(v71 - v73) >= 0x20)
                {
                  v77 = (v75 >> 3) + 1;
                  v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                  v76 = &v71[v78];
                  v79 = (__int128 *)(v73 + 16);
                  v80 = v71 + 16;
                  v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v82 = *v79;
                    *(v80 - 1) = *(v79 - 1);
                    *v80 = v82;
                    v79 += 2;
                    v80 += 2;
                    v81 -= 4;
                  }
                  while (v81);
                  if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_68;
                  v73 += v78;
                }
              }
              do
              {
                v83 = *(_QWORD *)v73;
                v73 += 8;
                *(_QWORD *)v76 = v83;
                v76 += 8;
              }
              while (v73 != v74);
            }
LABEL_68:
            if ((char *)v65 != v68)
              free(*v62);
            v64 = &v72[8 * v66];
            *v62 = v72;
            v62[1] = v64;
            v62[3] = (char *)v70;
            goto LABEL_71;
          }
        }
      }
    }
  }
LABEL_72:
  if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
  v84 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_ERROR))
  {
    v85 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)buf = 67109890;
    v88 = v85;
    v89 = 2080;
    v90 = "false";
    v91 = 2080;
    v92 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelsExternalMeshLogic.mm";
    v93 = 1024;
    v94 = 440;
    _os_log_impl(&dword_19F029000, v84, OS_LOG_TYPE_ERROR, "Failed to fulfill request (id:%d): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x22u);
  }
}

void sub_19FCFBFD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::IsCompleted>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB369A71FEF0EAB72;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB369A71FEF0EAB72;
      if (*(_QWORD *)&v3 <= 0xB369A71FEF0EAB72)
        v5 = 0xB369A71FEF0EAB72 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB369A71FEF0EAB72;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB369A71FEF0EAB72)
            {
              if (v7[2] == 0xB369A71FEF0EAB72)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB369A71FEF0EAB72)
          {
            if (v7[2] == 0xB369A71FEF0EAB72)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequestObserver::IsCompleted]";
  *(_QWORD *)(v11 + 24) = 48;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B4248;
  *(_QWORD *)(v11 + 8) = 0xB369A71FEF0EAB72;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB369A71FEF0EAB72, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB369A71FEF0EAB72;
  v15[1] = "gdc::component::DataRequestObserver::IsCompleted]";
  v15[2] = 48;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB369A71FEF0EAB72, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FCFC1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  char *v22;
  _BOOL4 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  int v34;
  const char *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t *v109;
  char *v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  _OWORD *v116;
  uint64_t v117;
  __int128 v118;
  char *v119;
  unint64_t *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  NSObject *v128;
  int v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  std::__shared_weak_count *v134;
  uint8_t buf[8];
  _BYTE v136[10];
  __int16 v137;
  const char *v138;
  __int16 v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v133 = 0;
  v134 = 0;
  v9 = *a4;
  v10 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>((*a1)[15]);
  v11 = v10[4];
  if (v9 >> 39 >= (v10[5] - v11) >> 3)
    goto LABEL_14;
  v12 = *(_QWORD *)(v11 + 8 * (v9 >> 39));
  if (!v12)
    goto LABEL_14;
  v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(v9) & 0x7F));
  v15 = v10[7];
  v14 = v10[8];
  if (v13 >= (v14 - v15) >> 3)
    goto LABEL_14;
  v16 = v15 + 8 * v13;
  v17 = v16 != v14 && *(_DWORD *)(v16 + 4) == HIDWORD(v9);
  if (v17
    && ((v18 = v10[10], v19 = v18 + 24 * v13, v19 != v10[11]) ? (v20 = v18 == 0) : (v20 = 1), !v20))
  {
    v119 = (char *)operator new(0xC8uLL);
    v21 = v119;
    *((_QWORD *)v119 + 1) = 0;
    v120 = (unint64_t *)(v119 + 8);
    *((_QWORD *)v119 + 2) = 0;
    *(_QWORD *)v119 = &off_1E42DC660;
    *((_DWORD *)v119 + 6) = *(_DWORD *)(a3 + 8);
    v22 = v119 + 24;
    v119[28] = 0;
    v121 = *(_QWORD *)(v19 + 16);
    *((_OWORD *)v119 + 2) = *(_OWORD *)v19;
    *((_QWORD *)v119 + 6) = v121;
    *(_OWORD *)(v119 + 56) = *(_OWORD *)(a3 + 16);
    *((_QWORD *)v119 + 9) = *(_QWORD *)(a3 + 32);
    *((_OWORD *)v119 + 5) = *(_OWORD *)(a3 + 40);
    *((_QWORD *)v119 + 12) = *(_QWORD *)(a3 + 56);
    *((_QWORD *)v119 + 13) = *(_QWORD *)(a3 + 64);
    v122 = *(_OWORD *)(a3 + 72);
    *((_QWORD *)v119 + 16) = *(_QWORD *)(a3 + 88);
    *((_OWORD *)v119 + 7) = v122;
    *((_DWORD *)v119 + 34) = 1065353216;
    v119[140] = 0;
    *((_QWORD *)v119 + 18) = 0;
    *(_OWORD *)(v119 + 152) = *(_OWORD *)(a3 + 180);
    *((_DWORD *)v119 + 42) = *(_DWORD *)(a3 + 196);
    v123 = *(_QWORD *)(a3 + 208);
    *((_QWORD *)v119 + 22) = *(_QWORD *)(a3 + 200);
    *((_QWORD *)v119 + 23) = v123;
    if (v123)
    {
      v124 = (unint64_t *)(v123 + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    *((_DWORD *)v119 + 48) = 1065353216;
    v133 = v119 + 24;
    v134 = (std::__shared_weak_count *)v119;
    *(_QWORD *)buf = v119 + 24;
    *(_QWORD *)v136 = v119;
    do
      v126 = __ldxr(v120);
    while (__stxr(v126 + 1, v120));
  }
  else
  {
LABEL_14:
    v21 = 0;
    v22 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)v136 = 0;
  }
  std::mutex::lock((std::mutex *)(a3 + 96));
  if (*(_BYTE *)(a3 + 176) == 4)
  {
    v23 = 0;
  }
  else
  {
    if (!v22 || v22[4] == *(_BYTE *)(a3 + 12))
    {
      if (v21)
      {
        v24 = (unint64_t *)(v21 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(std::__shared_weak_count **)(a3 + 168);
      *(_QWORD *)(a3 + 160) = v22;
      *(_QWORD *)(a3 + 168) = v21;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    v29 = *(_QWORD *)(a3 + 160);
    v23 = v29 != 0;
    if (v29)
      v30 = 2;
    else
      v30 = 3;
    *(_BYTE *)(a3 + 176) = v30;
  }
  std::mutex::unlock((std::mutex *)(a3 + 96));
  if (!*(_QWORD *)v136)
    goto LABEL_35;
  v31 = (unint64_t *)(*(_QWORD *)v136 + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v136 + 16))(*(_QWORD *)v136);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v136);
    if (v23)
    {
LABEL_36:
      if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
      v33 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
      {
        v34 = *(_DWORD *)(a3 + 8);
        v35 = "ARFeatureShadow";
        if (!*(_BYTE *)(a3 + 12))
          v35 = "ARArrival";
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v34;
        *(_WORD *)v136 = 2080;
        *(_QWORD *)&v136[2] = v35;
        _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_INFO, "Fulfilled request(id:%d) for external mesh type:%s", buf, 0x12u);
      }
      v36 = v8[15];
      if (v134)
      {
        v37 = (unint64_t *)&v134->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        *(_QWORD *)v136 = v134;
        do
          v39 = __ldxr(v37);
        while (__stxr(v39 + 1, v37));
      }
      else
      {
        *(_QWORD *)v136 = 0;
      }
      *(_QWORD *)buf = v133;
      v60 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v36);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v60, a2, buf);
      v61 = *(std::__shared_weak_count **)v136;
      if (*(_QWORD *)v136)
      {
        v62 = (unint64_t *)(*(_QWORD *)v136 + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (v134)
      {
        v64 = (unint64_t *)&v134->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v66 = v8[15];
      *(_QWORD *)buf = v133;
      *(_QWORD *)v136 = v134;
      if (v134)
      {
        v67 = (unint64_t *)&v134->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(v66);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v69, a2, buf);
      v70 = *(std::__shared_weak_count **)v136;
      if (*(_QWORD *)v136)
      {
        v71 = (unint64_t *)(*(_QWORD *)v136 + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v8[15];
      v74 = *a4;
      if (v134)
      {
        v75 = (unint64_t *)&v134->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
        *(_QWORD *)v136 = v134;
        do
          v77 = __ldxr(v75);
        while (__stxr(v77 + 1, v75));
      }
      else
      {
        *(_QWORD *)v136 = 0;
      }
      *(_QWORD *)buf = v133;
      v78 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v73);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v78, v74, buf);
      v79 = *(std::__shared_weak_count **)v136;
      if (*(_QWORD *)v136)
      {
        v80 = (unint64_t *)(*(_QWORD *)v136 + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (v134)
      {
        v82 = (unint64_t *)&v134->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v84 = v8[15];
      v85 = *a4;
      *(_QWORD *)buf = v133;
      *(_QWORD *)v136 = v134;
      if (v134)
      {
        v86 = (unint64_t *)&v134->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v88 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(v84);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v88, v85, buf);
      v89 = *(std::__shared_weak_count **)v136;
      if (*(_QWORD *)v136)
      {
        v90 = (unint64_t *)(*(_QWORD *)v136 + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = *a4;
      v93 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v8[15]);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v93, v92);
      v94 = a4[1];
      v95 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v8[15]);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v95, v94);
      v96 = (char *)v8[22];
      v97 = (char *)v8[23];
      v98 = (uint64_t)(v8 + 22);
      if (v96 != v97)
      {
        while (v133 != *(char **)v96)
        {
          v96 += 16;
          if (v96 == v97)
            goto LABEL_111;
        }
      }
      if (v96 == v97)
      {
LABEL_111:
        *(_QWORD *)buf = v133;
        *(_QWORD *)v136 = 0xFFFFFFFF00000000;
        v96 = geo::linear_map<md::LabelExternalMesh *,gdc::Entity,std::equal_to<md::LabelExternalMesh *>,std::allocator<std::pair<md::LabelExternalMesh *,gdc::Entity>>,std::vector<std::pair<md::LabelExternalMesh *,gdc::Entity>>>::insert(v98, buf);
      }
      *((_QWORD *)v96 + 1) = a2;
      v99 = a1[1];
      v101 = (_QWORD *)*v99;
      v100 = (uint64_t *)v99[1];
      v102 = ((uint64_t)v100 - *v99) >> 3;
      v103 = v99[3];
      if (v103 >= v102 + 1)
        goto LABEL_145;
      v104 = (_QWORD *)v99[2];
      v105 = (1 << -(char)__clz(v103 + 1));
      if (v103 >= 0xFFFFFFFFFFFFFFFELL)
        v105 = 1;
      if (v105 <= v102 + 1)
        v106 = v102 + 1;
      else
        v106 = v105;
      v107 = (char *)malloc_type_malloc(8 * v106, 0x100004000313F17uLL);
      v108 = v107;
      v109 = (uint64_t *)*v99;
      v110 = (char *)v99[1];
      if ((char *)*v99 != v110)
      {
        v111 = v110 - (char *)v109 - 8;
        if (v111 < 0x18)
        {
          v112 = v107;
        }
        else
        {
          v112 = v107;
          if ((unint64_t)(v107 - (char *)v109) >= 0x20)
          {
            v113 = (v111 >> 3) + 1;
            v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
            v112 = &v107[v114];
            v115 = (__int128 *)(v109 + 2);
            v116 = v107 + 16;
            v117 = v113 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v118 = *v115;
              *(v116 - 1) = *(v115 - 1);
              *v116 = v118;
              v115 += 2;
              v116 += 2;
              v117 -= 4;
            }
            while (v117);
            if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_142;
            v109 = (uint64_t *)((char *)v109 + v114);
          }
        }
        do
        {
          v130 = *v109++;
          *(_QWORD *)v112 = v130;
          v112 += 8;
        }
        while (v109 != (uint64_t *)v110);
      }
LABEL_142:
      if (v101 != v104)
        free((void *)*v99);
      v100 = (uint64_t *)&v108[8 * v102];
      *v99 = (uint64_t)v108;
      v99[1] = (uint64_t)v100;
      v99[3] = v106;
LABEL_145:
      *v100 = a2;
      v99[1] += 8;
      goto LABEL_146;
    }
  }
  else
  {
LABEL_35:
    if (v23)
      goto LABEL_36;
  }
  v40 = a1[2];
  v42 = (_QWORD *)*v40;
  v41 = (uint64_t *)v40[1];
  v43 = ((uint64_t)v41 - *v40) >> 3;
  v44 = v40[3];
  if (v44 < v43 + 1)
  {
    v45 = (_QWORD *)v40[2];
    v46 = (1 << -(char)__clz(v44 + 1));
    if (v44 >= 0xFFFFFFFFFFFFFFFELL)
      v46 = 1;
    if (v46 <= v43 + 1)
      v47 = v43 + 1;
    else
      v47 = v46;
    v48 = (char *)malloc_type_malloc(8 * v47, 0x100004000313F17uLL);
    v49 = v48;
    v50 = (uint64_t *)*v40;
    v51 = (char *)v40[1];
    if ((char *)*v40 == v51)
      goto LABEL_133;
    v52 = v51 - (char *)v50 - 8;
    if (v52 < 0x18)
    {
      v53 = v48;
    }
    else
    {
      v53 = v48;
      if ((unint64_t)(v48 - (char *)v50) >= 0x20)
      {
        v54 = (v52 >> 3) + 1;
        v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v53 = &v48[v55];
        v56 = (__int128 *)(v50 + 2);
        v57 = v48 + 16;
        v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *v56;
          *(v57 - 1) = *(v56 - 1);
          *v57 = v59;
          v56 += 2;
          v57 += 2;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_133;
        v50 = (uint64_t *)((char *)v50 + v55);
      }
    }
    do
    {
      v127 = *v50++;
      *(_QWORD *)v53 = v127;
      v53 += 8;
    }
    while (v50 != (uint64_t *)v51);
LABEL_133:
    if (v42 != v45)
      free((void *)*v40);
    v41 = (uint64_t *)&v49[8 * v43];
    *v40 = (uint64_t)v49;
    v40[1] = (uint64_t)v41;
    v40[3] = v47;
  }
  *v41 = a2;
  v40[1] += 8;
  if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_30159);
  v128 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_ERROR))
  {
    v129 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v129;
    *(_WORD *)v136 = 2080;
    *(_QWORD *)&v136[2] = "false";
    v137 = 2080;
    v138 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelsExternalMeshLogic.mm";
    v139 = 1024;
    v140 = 480;
    _os_log_impl(&dword_19F029000, v128, OS_LOG_TYPE_ERROR, "Failed to fulfill request (id:%d): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x22u);
  }
LABEL_146:
  if (v134)
  {
    v131 = (unint64_t *)&v134->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_19FCFCB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMesh>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 184);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::contains(v17, v18);
}

