void sub_19F40CA74(_Unwind_Exception *a1)
{
  uint64_t v1;
  geo::read_write_lock *v3;
  const char *v4;
  geo::read_write_lock *v5;
  const char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  *(_QWORD *)(v1 + 568) = &off_1E42B4D10;

  std::unordered_map<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,std::allocator<std::pair<md::TextureManager::TextureKey const,std::shared_ptr<md::SharedTextureCube>>>>::~unordered_map[abi:nn180100](v1 + 528);
  std::unordered_map<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,std::allocator<std::pair<md::TextureManager::TextureKey const,std::shared_ptr<md::SharedTextureCube>>>>::~unordered_map[abi:nn180100](v1 + 488);
  v3 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(v1 + 288));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"destruction", v4);
  v5 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(v1 + 88));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"destruction", v6);
  v7 = *(std::__shared_weak_count **)(v1 + 80);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)(v1 + 64);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)(v1 + 48);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)(v1 + 32);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<-[VKSharedResources undulationModel]::$_0 &&>>(uint64_t ****a1)
{
  uint64_t **v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  _WORD *v24;
  unint64_t v25;
  _BOOL4 v26;
  _WORD *v27;
  _WORD *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v1 = **a1;
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VectorKit"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc(MEMORY[0x1E0C99D50]);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "egm96");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "bin");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathForResource:ofType:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v4, "initWithContentsOfFile:", v7);

  v9 = objc_retainAutorelease(v8);
  v10 = objc_msgSend(v9, "bytes");
  v11 = objc_msgSend(v9, "length");
  if (v11 >= 0x30 && *(_DWORD *)v10 == 1146242888 && *(_DWORD *)(v10 + 4) == 1)
  {
    v13 = *(float *)(v10 + 8);
    *(float *)(v2 + 32) = v13;
    v14 = *(float *)(v10 + 12);
    *(float *)(v2 + 36) = v14;
    v15 = *(float *)(v10 + 16);
    *(float *)(v2 + 48) = v15;
    v16 = *(float *)(v10 + 20);
    *(float *)(v2 + 40) = v16;
    v17 = *(float *)(v10 + 24);
    *(float *)(v2 + 44) = v17;
    v18 = *(float *)(v10 + 28);
    *(float *)(v2 + 52) = v18;
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(v10 + 32);
    *(_DWORD *)(v2 + 60) = *(_DWORD *)(v10 + 36);
    v19 = (float)((float)(v14 - v13) / v15) + 1;
    v20 = (float)((float)(v17 - v16) / v18) + 1;
    *(_DWORD *)(v2 + 24) = v19;
    *(_DWORD *)(v2 + 28) = v20;
    v21 = *(unsigned int *)(v10 + 44);
    if (v11 >= (v21 + 48))
    {
      v22 = v20 * v19;
      if (*(_DWORD *)(v10 + 40))
      {
        v23 = (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 1;
        if (v22 <= v23)
        {
          if (v22 < v23)
            *(_QWORD *)(v2 + 8) = *(_QWORD *)v2 + 2 * v22;
        }
        else
        {
          std::vector<md::TileSelectionTileSetType>::__append(v2, v22 - v23);
        }
        v26 = lzma_decompress_bytes();
        v27 = *(_WORD **)v2;
        if (v26)
        {
          v28 = *(_WORD **)(v2 + 8);
          if (v27 != v28)
          {
            v29 = 0;
            do
            {
              v29 += *v27;
              *v27++ = v29;
            }
            while (v27 != v28);
          }
        }
        else
        {
          *(_QWORD *)(v2 + 8) = v27;
        }
      }
      else if (v21 == 2 * v22)
      {
        v24 = *(_WORD **)v2;
        v25 = (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 1;
        if (v22 <= v25)
        {
          if (v22 < v25)
            *(_QWORD *)(v2 + 8) = &v24[v22];
        }
        else
        {
          std::vector<md::TileSelectionTileSetType>::__append(v2, v22 - v25);
          v24 = *(_WORD **)v2;
        }
        memcpy(v24, (const void *)(v10 + 48), v21);
      }
    }
  }

  v30 = **v1;
  v31 = *(_QWORD *)(v30 + 168);
  *(_QWORD *)(v30 + 168) = v2;
  if (v31)
  {
    v32 = *(void **)v31;
    if (*(_QWORD *)v31)
    {
      *(_QWORD *)(v31 + 8) = v32;
      operator delete(v32);
    }
    JUMPOUT(0x1A1AF4E00);
  }
}

void sub_19F40CE94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;

  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  MEMORY[0x1A1AF4E00](v1, 0x1010C4028866157);
  _Unwind_Resume(a1);
}

void sub_19F40CFC0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F40D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::RegionalResourceLayerDataSource::~RegionalResourceLayerDataSource(md::RegionalResourceLayerDataSource *this)
{
  *(_QWORD *)this = &off_1E42A8BE0;
  *((_QWORD *)this + 96) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  *(_QWORD *)this = &off_1E42A8BE0;
  *((_QWORD *)this + 96) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::LayerDataSource::getTileRequestLimit(gdc::LayerDataSource *this)
{
  return -1;
}

void md::RegionalResourceLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::RegionalResourceTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RegionalResourceTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RegionalResourceTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::ResourceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ResourceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ResourceInfo>::__on_zero_shared(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = (void (***)(_QWORD))a1[6];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      v5 = v3 - 3;
      v6 = v3 - 3;
      do
      {
        v7 = *v6;
        v6 -= 3;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = (void *)a1[3];
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = (void *)a1[3];
    }
    a1[4] = v9;
    operator delete(v11);
  }
}

uint64_t geo::_retain_ptr<VKSharedResources * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D50;

  return a1;
}

void geo::_retain_ptr<VKSharedResources * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D50;

  JUMPOUT(0x1A1AF4E00);
}

void altitude::ManifestManager::~ManifestManager(altitude::ManifestManager *this)
{
  altitude::ManifestManager::~ManifestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  altitude::ManifestManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)this = &off_1E42C4558;
  v2 = (void **)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = (void **)*v2;
    if (*v2)
    {
      v4 = (void **)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  v6 = (altitude::ManifestManager *)*((_QWORD *)this + 18);
  if (v6 == (altitude::ManifestManager *)((char *)this + 120))
  {
    v7 = 4;
    v6 = (altitude::ManifestManager *)((char *)this + 120);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 10));
  v8 = *((_QWORD *)this + 10);
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 10) = 0;
  std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(*((char **)this + 8));
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = *((_QWORD *)this + 5);
    v11 = (void *)*((_QWORD *)this + 4);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v9;
    operator delete(v11);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t altitude::ManifestManager::registerListener(uint64_t a1, const void **a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v19;
  uint64_t *v20;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
  v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  if ((uint64_t *)(a1 + 64) == v6)
  {
    v19 = 0;
    v20 = 0;
    v7 = std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), a2, (uint64_t)a2);
    v8 = (uint64_t *)(v7 + 8);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v7[8]);
    v9 = v19;
    v7[7] = (uint64_t *)&v19;
    v7[8] = v9;
    v10 = v20;
    v7[9] = v20;
    if (v10)
    {
      v9[2] = (uint64_t)v8;
      v19 = 0;
      v20 = 0;
      v9 = 0;
    }
    else
    {
      v7[7] = v8;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
    v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  }
  v12 = (uint64_t **)(v6 + 8);
  v11 = (uint64_t *)v6[8];
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v11;
        v14 = v11[4];
        if (v14 <= a3)
          break;
        v11 = *v13;
        v12 = v13;
        if (!*v13)
          goto LABEL_13;
      }
      if (v14 >= a3)
        break;
      v11 = v13[1];
      if (!v11)
      {
        v12 = v13 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v13 = (uint64_t **)(v6 + 8);
LABEL_13:
    v15 = (uint64_t *)operator new(0x28uLL);
    v15[4] = a3;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v13;
    *v12 = v15;
    v16 = *(_QWORD *)v6[7];
    if (v16)
    {
      v6[7] = v16;
      v17 = *v12;
    }
    else
    {
      v17 = v15;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[8], v17);
    ++v6[9];
  }
  if (*(_BYTE *)(a1 + 153) || *(_BYTE *)(a1 + 152) || *(_BYTE *)(a1 + 154))
    altitude::ManifestManager::parseManifest((altitude::ManifestManager *)a1);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v21 = (std::string *)(v20 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[9] = 0;
  v20[8] = 0;
  v20[7] = v20 + 8;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void altitude::ManifestManager::parseManifest(altitude::ManifestManager *this)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  const xmlDoc *v5;
  xmlNodePtr RootElement;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  _xmlNode *children;
  const char *name;
  size_t v15;
  const void *v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  void *__p;
  char *v64;
  _QWORD *v65;
  const void *__dst[2];
  unint64_t v67;
  _BYTE v68[24];
  void *v69[2];
  uint64_t v70;

  v2 = (uint64_t **)((char *)this + 56);
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  v4 = (uint64_t *)((char *)this + 64);
  if (v3 != (uint64_t *)((char *)this + 64))
  {
    do
    {
      v7 = (uint64_t *)v3[7];
      if (v7 != v3 + 8)
      {
        do
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7[4] + 16))(v7[4]);
          v10 = (uint64_t *)v7[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (uint64_t *)v7[2];
              v12 = *v11 == (_QWORD)v7;
              v7 = v11;
            }
            while (!v12);
          }
          v7 = v11;
        }
        while (v11 != v3 + 8);
      }
      v8 = (uint64_t *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v3[2];
          v12 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v12);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  v5 = (const xmlDoc *)*((_QWORD *)this + 2);
  if (v5)
  {
    RootElement = xmlDocGetRootElement(v5);
    *((_QWORD *)this + 1) = RootElement;
    if (!RootElement)
      goto LABEL_98;
  }
  else
  {
    RootElement = (xmlNodePtr)*((_QWORD *)this + 1);
    if (!RootElement)
      goto LABEL_98;
  }
  children = RootElement->children;
  if (children)
  {
    while (children->type != XML_ELEMENT_NODE)
    {
      children = children->next;
      if (!children)
        goto LABEL_24;
    }
    *(_QWORD *)v68 = children;
    *(_OWORD *)&v68[8] = 0u;
    *(_OWORD *)v69 = 0u;
    v70 = 0;
    while (1)
    {
      if (!*(_QWORD *)&v68[8] || (name = *(const char **)(*(_QWORD *)&v68[8] + 16)) == 0)
        name = (const char *)children->name;
      v15 = strlen(name);
      if (v15 >= 0x7FFFFFFFFFFFFFF8)
LABEL_115:
        abort();
      v16 = (const void *)v15;
      if (v15 >= 0x17)
      {
        v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v18 = v15 | 7;
        v19 = v18 + 1;
        v17 = (const void **)operator new(v18 + 1);
        __dst[1] = v16;
        v67 = v19 | 0x8000000000000000;
        __dst[0] = v17;
      }
      else
      {
        HIBYTE(v67) = v15;
        v17 = __dst;
        if (!v15)
          goto LABEL_38;
      }
      memmove(v17, name, (size_t)v16);
LABEL_38:
      *((_BYTE *)v16 + (_QWORD)v17) = 0;
      v20 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)v2, __dst);
      if (v4 != v20)
      {
        v21 = (uint64_t *)v20[7];
        v22 = v20 + 8;
        if (v21 != v20 + 8)
        {
          do
          {
            v24 = v21[4];
            v61 = *(_OWORD *)v68;
            v62 = *(std::__shared_weak_count **)&v68[16];
            if (*(_QWORD *)&v68[16])
            {
              v25 = (unint64_t *)(*(_QWORD *)&v68[16] + 8);
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            __p = 0;
            v64 = 0;
            v65 = 0;
            v27 = v69[0];
            v28 = v69[1];
            v29 = (char *)v69[1] - (char *)v69[0];
            if (v69[1] != v69[0])
            {
              if (v29 < 0)
                goto LABEL_115;
              v30 = v29 >> 4;
              v31 = operator new(v29);
              __p = v31;
              v64 = (char *)v31;
              v65 = &v31[2 * v30];
              do
              {
                *v31 = *v27;
                v32 = v27[1];
                v31[1] = v32;
                if (v32)
                {
                  v33 = (unint64_t *)(v32 + 8);
                  do
                    v34 = __ldxr(v33);
                  while (__stxr(v34 + 1, v33));
                }
                v27 += 2;
                v31 += 2;
              }
              while (v27 != v28);
              v64 = (char *)v31;
            }
            (*(void (**)(uint64_t, const void **, __int128 *))(*(_QWORD *)v24 + 24))(v24, __dst, &v61);
            v35 = (char *)__p;
            if (__p)
            {
              v36 = v64;
              v37 = __p;
              if (v64 != __p)
              {
                do
                {
                  v38 = (std::__shared_weak_count *)*((_QWORD *)v36 - 1);
                  if (v38)
                  {
                    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
                    do
                      v40 = __ldaxr(p_shared_owners);
                    while (__stlxr(v40 - 1, p_shared_owners));
                    if (!v40)
                    {
                      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                      std::__shared_weak_count::__release_weak(v38);
                    }
                  }
                  v36 -= 16;
                }
                while (v36 != v35);
                v37 = __p;
              }
              v64 = v35;
              operator delete(v37);
            }
            v41 = v62;
            if (!v62)
              goto LABEL_71;
            v42 = (unint64_t *)&v62->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
              v44 = (uint64_t *)v21[1];
              if (!v44)
              {
                do
                {
LABEL_75:
                  v45 = (uint64_t *)v21[2];
                  v12 = *v45 == (_QWORD)v21;
                  v21 = v45;
                }
                while (!v12);
                goto LABEL_43;
              }
            }
            else
            {
LABEL_71:
              v44 = (uint64_t *)v21[1];
              if (!v44)
                goto LABEL_75;
            }
            do
            {
              v45 = v44;
              v44 = (uint64_t *)*v44;
            }
            while (v44);
LABEL_43:
            v21 = v45;
          }
          while (v45 != v22);
        }
      }
      if (SHIBYTE(v67) < 0)
      {
        operator delete((void *)__dst[0]);
        v23 = *(_QWORD *)v68;
        if (*(_QWORD *)v68)
        {
          do
LABEL_79:
            v23 = *(_QWORD *)(v23 + 48);
          while (v23 && *(_DWORD *)(v23 + 8) != 1);
        }
      }
      else
      {
        v23 = *(_QWORD *)v68;
        if (*(_QWORD *)v68)
          goto LABEL_79;
      }
      XmlNodeWrapper::operator=(v68, v23);
      children = *(_xmlNode **)v68;
      if (!*(_QWORD *)v68)
      {
        v46 = (char *)v69[0];
        if (v69[0])
        {
          v47 = (char *)v69[1];
          v48 = v69[0];
          if (v69[1] != v69[0])
          {
            do
            {
              v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v47 -= 16;
            }
            while (v47 != v46);
            v48 = v69[0];
          }
          v69[1] = v46;
          operator delete(v48);
        }
        goto LABEL_93;
      }
    }
  }
LABEL_24:
  memset(v68, 0, sizeof(v68));
  *(_OWORD *)v69 = 0u;
  v70 = 0;
LABEL_93:
  v52 = *(std::__shared_weak_count **)&v68[16];
  if (*(_QWORD *)&v68[16])
  {
    v53 = (unint64_t *)(*(_QWORD *)&v68[16] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
LABEL_98:
  v55 = *v2;
  if (v55 != v4)
  {
    do
    {
      v56 = (uint64_t *)v55[7];
      if (v56 != v55 + 8)
      {
        do
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v56[4] + 32))(v56[4]);
          v59 = (uint64_t *)v56[1];
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (uint64_t *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (uint64_t *)v56[2];
              v12 = *v60 == (_QWORD)v56;
              v56 = v60;
            }
            while (!v12);
          }
          v56 = v60;
        }
        while (v60 != v55 + 8);
      }
      v57 = (uint64_t *)v55[1];
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = (uint64_t *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (uint64_t *)v55[2];
          v12 = *v58 == (_QWORD)v55;
          v55 = v58;
        }
        while (!v12);
      }
      v55 = v58;
    }
    while (v58 != v4);
  }
}

_QWORD *XmlNodeWrapper::operator=(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)a1[2];
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)(a1 + 3), 0, 0, 0);
  return a1;
}

void std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz <= (v8 - *(_QWORD *)a1) >> 4)
  {
    v15 = *(char **)(a1 + 8);
    v16 = (v15 - v9) >> 4;
    if (v16 >= __sz)
    {
      if (a2 != a3)
      {
        do
        {
          v26 = *v6;
          v25 = v6[1];
          if (v25)
          {
            v27 = (unint64_t *)(v25 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v26;
          *((_QWORD *)v9 + 1) = v25;
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != a3);
        v15 = *(char **)(a1 + 8);
      }
      while (v15 != v9)
      {
        v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v15 -= 16;
      }
      *(_QWORD *)(a1 + 8) = v9;
    }
    else
    {
      v17 = &a2[2 * v16];
      if (v15 != v9)
      {
        do
        {
          v19 = *v6;
          v18 = v6[1];
          if (v18)
          {
            v20 = (unint64_t *)(v18 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v19;
          *((_QWORD *)v9 + 1) = v18;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != v17);
        v9 = *(char **)(a1 + 8);
      }
      v40 = v9;
      if (v17 != a3)
      {
        v40 = v9;
        do
        {
          v41 = v17[1];
          *(_QWORD *)v40 = *v17;
          *((_QWORD *)v40 + 1) = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v17 += 2;
          v40 += 16;
        }
        while (v17 != a3);
      }
      *(_QWORD *)(a1 + 8) = v40;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v32 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v32 = __sz;
    v33 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v34 = 0xFFFFFFFFFFFFFFFLL;
    if (!v33)
      v34 = v32;
    if (v34 >> 60)
LABEL_68:
      abort();
    v35 = 2 * v34;
    v36 = operator new(16 * v34);
    *(_QWORD *)a1 = v36;
    *(_QWORD *)(a1 + 8) = v36;
    *(_QWORD *)(a1 + 16) = &v36[v35];
    while (v6 != a3)
    {
      v37 = v6[1];
      *v36 = *v6;
      v36[1] = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v6 += 2;
      v36 += 2;
    }
    *(_QWORD *)(a1 + 8) = v36;
  }
}

uint64_t altitude::ManifestManager::unregisterListener(uint64_t a1, const void **a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t *v22;
  uint64_t *v23;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
  v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  if ((uint64_t *)(a1 + 64) == v6)
  {
    v22 = 0;
    v23 = 0;
    v7 = std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), a2, (uint64_t)a2);
    v8 = (uint64_t *)(v7 + 8);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v7[8]);
    v9 = v22;
    v7[7] = (uint64_t *)&v22;
    v7[8] = v9;
    v10 = v23;
    v7[9] = v23;
    if (v10)
    {
      v9[2] = (uint64_t)v8;
      v22 = 0;
      v23 = 0;
      v9 = 0;
    }
    else
    {
      v7[7] = v8;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
    v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  }
  v11 = (uint64_t *)v6[8];
  if (v11)
  {
    v12 = v6 + 8;
    v13 = (_QWORD *)v6[8];
    do
    {
      v14 = v13[4];
      v15 = v14 >= a3;
      if (v14 >= a3)
        v16 = v13;
      else
        v16 = v13 + 1;
      if (v15)
        v12 = v13;
      v13 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v12 != v6 + 8 && v12[4] <= a3)
    {
      v17 = (uint64_t *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        v19 = v12;
        do
        {
          v18 = (uint64_t *)v19[2];
          v20 = *v18 == (_QWORD)v19;
          v19 = v18;
        }
        while (!v20);
      }
      if ((uint64_t *)v6[7] == v12)
        v6[7] = (uint64_t)v18;
      --v6[9];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v12);
      operator delete(v12);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_50;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_50:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_26:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_40:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_26;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_40;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_40;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      abort();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
      abort();
    v10 = v7 - 1;
    v11 = a1;
    if ((v6 & 0x8000000000000000) != 0)
      v11 = *a1;
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      v12 = 2 * v10;
      if (__len > 2 * v10)
        v12 = __len;
      v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v13 = v12 | 7;
      if (v12 >= 0x17)
        v9 = v13 + 1;
      else
        v9 = 23;
    }
    v14 = operator new(v9);
    v8 = v14;
    if (__len)
      memcpy(v14, __src, __len);
    if (v10 != 22)
      operator delete(v11);
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
  }
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t md::realistic::RealisticRenderLayer::RealisticRenderLayer(uint64_t a1, char a2, uint64_t a3, const void *a4, uint64_t a5)
{
  size_t v10;
  void *v11;
  char *v12;
  char *v13;

  if (!a5)
  {
    *(_QWORD *)a1 = off_1E428C468;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 34) = a2;
    goto LABEL_8;
  }
  if (a5 < 0)
    goto LABEL_9;
  v10 = 2 * a5;
  v11 = operator new(2 * a5);
  memmove(v11, a4, 2 * a5);
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      v12 = (char *)operator new(2 * a5);
      *(_QWORD *)(a1 + 8) = v12;
      v13 = &v12[2 * ((2 * a5) >> 1)];
      *(_QWORD *)(a1 + 24) = v13;
      memcpy(v12, v11, v10);
      *(_QWORD *)(a1 + 16) = v13;
      goto LABEL_6;
    }
LABEL_9:
    abort();
  }
LABEL_6:
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = a2;
  operator delete(v11);
LABEL_8:
  *(_QWORD *)a1 = off_1E42B01F0;
  *(_QWORD *)(a1 + 40) = a3;
  return a1;
}

void geo::TaskQueue::async(std::__shared_weak_count_vtbl **a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  char v31;

  v6 = (std::__shared_weak_count *)operator new(0x40uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE308;
  v8 = (std::__shared_weak_count_vtbl *)&v6[1];
  v9 = a3[3];
  if (v9)
  {
    if ((_QWORD *)v9 == a3)
    {
      v6[2].__vftable = v8;
      (*(void (**)(_QWORD *, std::__shared_weak_count_vtbl *))(*a3 + 24))(a3, v8);
      goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v6[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
LABEL_6:
  LOWORD(v6[2].__shared_owners_) = 0;
  *a1 = v8;
  a1[1] = (std::__shared_weak_count_vtbl *)v6;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  if (*(_BYTE *)(a2 + 58))
    v11 = *(id *)(a2 + 72);
  else
    v11 = 0;
  v12 = *(_BYTE *)(a2 + 56);
  v13 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke;
  v26[3] = &unk_1E42E9BF0;
  v14 = v11;
  v31 = v12;
  v27 = v14;
  v29 = v6 + 1;
  v30 = v6;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v28 = 0;
  v16 = (void *)MEMORY[0x1A1AF5730](v26);
  if (*(_BYTE *)(a2 + 56))
  {
    v22[0] = v13;
    v22[1] = 3221225472;
    v22[2] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke_2;
    v22[3] = &unk_1E42F9FF0;
    v25 = a2;
    v23 = v14;
    v24 = v16;
    v17 = (void *)MEMORY[0x1A1AF5730](v22);
    dispatch_async(*(dispatch_queue_t *)(a2 + 40), v17);

  }
  else
  {
    dispatch_async(*(dispatch_queue_t *)(a2 + 16), v16);
  }

  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19F40EC50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_async(*(dispatch_queue_t *)(v2 + 16), *(dispatch_block_t *)(a1 + 40));
}

void std::__shared_ptr_emplace<geo::Task>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::Task>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D5770;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5770;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  _BYTE *v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  os_signpost_id_t v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v2 = (_BYTE *)a1[1];
  md::RenderLayer::clearCommandBuffers((uint64_t)v2, a1[3], a1[2]);
  if (v2[32])
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v3 = (id)GEOGetVectorKitPerformanceLog_log;
    v4 = v3;
    v5 = v2[34];
    if (v2[34] && os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "RenderLayerLayout", (const char *)&unk_1A0189141, buf, 2u);
    }

    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v2 + 16))(v2, a1[2]);
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v6 = (id)GEOGetVectorKitPerformanceLog_log;
    v7 = v6;
    v8 = v2[34];
    if (v2[34] && os_signpost_enabled(v6))
    {
      *(_WORD *)v9 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v7, OS_SIGNPOST_INTERVAL_END, v8, "RenderLayerLayout", (const char *)&unk_1A0189141, v9, 2u);
    }

  }
  md::RenderLayer::unlock((uint64_t)v2, a1[3], a1[2]);
}

uint64_t md::realistic::RealisticRenderLayer::createRibbonTexture(md::realistic::RealisticRenderLayer *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  float v20;
  float32x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float v25;
  float v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int shared_owners_high;
  int shared_owners;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;

  v1 = (std::__shared_weak_count *)operator new(0x60uLL);
  v1->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  v1->__shared_weak_owners_ = 0;
  v1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v41 = v1;
  v3 = &v1[1].__vftable;
  ggl::TextureData2D::TextureData2D((uint64_t)&v1[1], 256, 256, 9u, 2, 0);
  v4 = 0;
  __asm
  {
    FMOV            V3.2D, #-1.0
    FMOV            V4.2D, #1.0
    FMOV            V5.2D, #0.5
    FMOV            V6.2D, #-2.0
    FMOV            V7.2D, #3.0
  }
  v45 = _Q4;
  v46 = _Q3;
  v43 = _Q6;
  v44 = _Q5;
  v42 = _Q7;
  do
  {
    v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, v4);
    if (v4 <= 8)
    {
      v15 = v14;
      v16 = 0;
      v17 = 0x100u >> v4;
      v18 = fminf(fmaxf((float)((float)v17 * 0.5) + -1.5, 0.0), 102.4 / (float)(1 << v4));
      do
      {
        v19 = 0;
        do
        {
          v20 = hypotf((float)((float)((float)((float)v19 + 0.5) * (float)(1.0 / (float)v17)) + -0.5)* (float)v17, (float)((float)((float)((float)v16 + 0.5) * (float)(1.0 / (float)v17)) + -0.5)* (float)v17);
          v21.f32[0] = v20 + v18;
          v21.f32[1] = v20 - v18;
          v22 = vmaxnmq_f64(vcvtq_f64_f32(v21), v46);
          v23 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v22, v45), (int8x16_t)v45, (int8x16_t)vmlaq_f64(v44, v44, v22));
          v24 = vmulq_f64(vmulq_f64(v23, v23), vmlaq_f64(v42, v43, v23));
          *(float *)v24.f64 = vsubq_f64(v24, (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1)).f64[0];
          v25 = fmaxf(*(float *)v24.f64, 0.0);
          if (v25 <= 1.0)
            v26 = v25 * 255.0;
          else
            v26 = 255.0;
          *(_BYTE *)(v15 + v19++) = llroundf(v26);
        }
        while (v17 != v19);
        ++v16;
        v15 += v17;
      }
      while (v16 != v17);
    }
    ++v4;
  }
  while (v4 != 9);
  v27 = (std::__shared_weak_count *)operator new(0x58uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v27[1].__shared_weak_owners_ = 0;
  v27[2].__vftable = 0;
  v27[1].__shared_owners_ = 0;
  LODWORD(v27[2].__shared_owners_) = 0;
  *(_OWORD *)((char *)&v27[2].__shared_owners_ + 4) = xmmword_19FFB2E70;
  *(std::__shared_weak_count_vtbl **)((char *)&v27[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v27[3].__shared_owners_) = 0;
  v29 = operator new();
  v30 = v29;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 56) = 0x100000001;
  shared_owners = v41[1].__shared_owners_;
  shared_owners_high = HIDWORD(v41[1].__shared_owners_);
  *(_DWORD *)(v29 + 64) = 0;
  *(_DWORD *)(v29 + 68) = shared_owners_high;
  *(_QWORD *)(v29 + 72) = 0x100000001;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 96) = 0;
  *(_QWORD *)v29 = &off_1E42BE438;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v29 + 48) = "";
  *(_DWORD *)(v29 + 104) = shared_owners;
  *(_QWORD *)(v29 + 112) = v3;
  *(_QWORD *)(v29 + 120) = v41;
  do
    v34 = __ldxr(p_shared_owners);
  while (__stxr(v34 + 1, p_shared_owners));
  *(_WORD *)(v29 + 128) = 0;
  *(_BYTE *)(v29 + 130) = 1;
  *(_QWORD *)(v29 + 136) = v27 + 1;
  *(_QWORD *)(v29 + 144) = v27;
  do
    v35 = __ldxr(v28);
  while (__stxr(v35 + 1, v28));
  *(_QWORD *)(v29 + 80) = v41[1].__shared_weak_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v27)
  {
    v37 = (unint64_t *)&v27->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  do
    v39 = __ldaxr(p_shared_owners);
  while (__stlxr(v39 - 1, p_shared_owners));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  return v30;
}

void sub_19F40F268(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  unint64_t *v14;
  unint64_t v16;
  va_list va;

  va_start(va, a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ggl::Texture2D::~Texture2D(ggl::Texture2D *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *((_QWORD *)this - 5) = &off_1E42BE438;
  *(_QWORD *)this = &unk_1E42BE458;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this - 5) = &off_1E42BA510;
  *(_QWORD *)this = &unk_1E42BA530;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v11 = *((_QWORD *)this - 4);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *((_QWORD *)this - 5) = &off_1E42BE438;
  *(_QWORD *)this = &unk_1E42BE458;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this - 5) = &off_1E42BA510;
  *(_QWORD *)this = &unk_1E42BA530;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v11 = *((_QWORD *)this - 4);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Texture2DAbstract::~Texture2DAbstract(ggl::Texture2DAbstract *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Texture2DAbstract::~Texture2DAbstract(ggl::Texture2DAbstract *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this - 5) = &off_1E42BA510;
  *(_QWORD *)this = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v5 = *((_QWORD *)this - 4);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this - 5) = &off_1E42BA510;
  *(_QWORD *)this = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v5 = *((_QWORD *)this - 4);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::SamplerState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SamplerState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TextureData2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureData2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RouteAnnotationDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD8C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteAnnotationDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD8C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RouteAnnotationDedupingGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t geo::_retain_ptr<NSArray * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B53F0;

  return a1;
}

void geo::_retain_ptr<NSArray * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B53F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::vector<VKTrafficFeature * {__strong},geo::StdAllocator<VKTrafficFeature * {__strong},mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * const {__strong}&>(uint64_t a1, id *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v11 = v9 + v8;
    if (v9)
      *v10 = *a2;
  }
  else
  {
    v11 = 0;
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(_QWORD **)a1;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 == *(_QWORD *)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v11;
    if (!v14)
      return v12;
    goto LABEL_26;
  }
  v15 = v14 - *(_QWORD *)a1 - 8;
  if (v15 <= 0x57
    || ((v16 = ((unint64_t)v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = v14 + v16,
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = (unint64_t)v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(_QWORD **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *--v21;
      *v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = (_QWORD *)(v14 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
  v22 = v10 - 2;
  v23 = (__int128 *)(v14 - 32);
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *v23;
    v25 = v23[1];
    *v23 = 0uLL;
    v23[1] = 0uLL;
    v23 -= 2;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(_QWORD *)a1;
  v28 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  while (v28 != v14)
  {
    v30 = *(void **)(v28 - 8);
    v28 -= 8;

  }
  if (v14)
LABEL_26:
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - v14);
  return v12;
}

_QWORD *std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::find<VKTrafficFeature * {__strong}>(_QWORD *a1, id *a2)
{
  void *v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  objc_msgSend(*a2, "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hash");

  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v8 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    v11 = *a2;
    if (v7.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v6 - 1;
      while (1)
      {
        v14 = result[1];
        if (v14 == v5)
        {
          if ((id)result[2] == v11)
            return result;
        }
        else if ((v14 & v12) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v13 = result[1];
      if (v13 == v5)
      {
        if ((id)result[2] == v11)
          return result;
      }
      else
      {
        if (v13 >= *(_QWORD *)&v6)
          v13 %= *(_QWORD *)&v6;
        if (v13 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_19F40FD28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7)
  {
    v9 = 16 * v7;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v7, 8);
    v11 = (_OWORD *)(v10 + 16 * v2);
    v7 = v10 + v9;
    if (v10)
    {
      *v11 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  else
  {
    v11 = (_OWORD *)(16 * v2);
  }
  v12 = v11 + 1;
  v13 = *(_QWORD **)a1;
  v14 = *(_QWORD **)(a1 + 8);
  if (v14 == *(_QWORD **)a1)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v14 - 1);
      v14 -= 2;
      *--v11 = v15;
      *v14 = 0;
      v14[1] = 0;
    }
    while (v14 != v13);
    v14 = *(_QWORD **)a1;
    v16 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    while (v16 != v14)
    {
      v18 = (std::__shared_weak_count *)*(v16 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 -= 2;
    }
  }
  if (v14)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v17 - (_QWORD)v14);
  return v12;
}

_QWORD *std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__emplace_unique_key_args<VKTrafficFeature * {__strong},std::piecewise_construct_t const&,std::tuple<VKTrafficFeature * const {__strong}&>,std::tuple<>>(uint64_t a1, id *a2, id **a3)
{
  unint64_t v3;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  objc_msgSend(*a2, "uniqueIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hash");

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if ((id)v12[2] == v13)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if ((id)v12[2] == v13)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 32, 8);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = **a3;
  v12[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v17 = *(float *)(a1 + 48);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_34;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_34:
        std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *v12 = *v26;
LABEL_58:
    *v26 = v12;
    goto LABEL_59;
  }
  *v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*v12)
  {
    v27 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 40);
  return v12;
}

void sub_19F4101B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19F4101C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<int,std::vector<VKTrafficFeature * {__strong}>,std::hash<int>,std::equal_to<int>,geo::StdAllocator<std::pair<int const,std::vector<VKTrafficFeature * {__strong}>>,mdm::Allocator>>::~unordered_map[abi:nn180100](uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      if (v6)
      {
        v7 = v2[4];
        v8 = (void *)v2[3];
        if (v7 != v6)
        {
          do
          {
            v9 = *(void **)(v7 - 8);
            v7 -= 8;

          }
          while (v7 != v6);
          v8 = (void *)v2[3];
        }
        v2[4] = v6;
        operator delete(v8);
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 48);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  return a1;
}

void std::__shared_ptr_emplace<md::RouteAnnotationLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD6C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteAnnotationLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD6C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RouteAnnotationLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))

    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 32);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 32);
        v5 = *(void **)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v6 = *(void **)(v4 - 8);
            v4 -= 8;

          }
          while (v4 != v3);
          v5 = *(void **)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        operator delete(v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 48);
  }
  return a1;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(id *a1, void **a2, void **a3)
{
  id *v4;
  id *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = objc_msgSend(v6, "routeOffset");
  v9 = objc_msgSend(v7, "routeOffset");
  if (v8 < v9)
  {

LABEL_9:
    v15 = *a3;
    v16 = *v4;
    v17 = objc_msgSend(v15, "routeOffset");
    v18 = objc_msgSend(v16, "routeOffset");
    if (v17 < v18)
    {
LABEL_10:
      v4 = a3;
LABEL_11:

LABEL_15:
      v19 = *v5;
      *v5 = 0;
      v20 = *v4;
      *v4 = 0;
      v21 = *v5;
      *v5 = v20;

      v22 = *v4;
      *v4 = v19;

      return;
    }

    if ((_DWORD)v17 == (_DWORD)v18 && *((float *)&v17 + 1) < *((float *)&v18 + 1))
    {
      v4 = a3;
      goto LABEL_15;
    }
    v23 = *v5;
    *v5 = 0;
    v24 = *v4;
    *v4 = 0;
    v25 = *v5;
    *v5 = v24;

    v26 = *v4;
    *v4 = v23;

    v27 = *a3;
    v16 = *v4;
    v28 = objc_msgSend(v27, "routeOffset");
    v29 = objc_msgSend(v16, "routeOffset");
    if (v28 < v29)
    {
      v5 = v4;
      goto LABEL_10;
    }

    if ((_DWORD)v28 == (_DWORD)v29)
    {
      v10 = *((float *)&v28 + 1) < *((float *)&v29 + 1);
      v5 = v4;
      v4 = a3;
      if (v10)
        goto LABEL_15;
    }
    return;
  }

  v10 = (_DWORD)v8 == (_DWORD)v9 && *((float *)&v8 + 1) < *((float *)&v9 + 1);
  if (v10)
    goto LABEL_9;
  v11 = *a3;
  v12 = *v4;
  v13 = objc_msgSend(v11, "routeOffset");
  v14 = objc_msgSend(v12, "routeOffset");
  if (v13 >= v14)
  {

    if ((_DWORD)v13 != (_DWORD)v14 || *((float *)&v13 + 1) >= *((float *)&v14 + 1))
      return;
  }
  else
  {

  }
  v30 = *v4;
  *v4 = 0;
  v31 = *a3;
  *a3 = 0;
  v32 = *v4;
  *v4 = v31;

  v33 = *a3;
  *a3 = v30;

  v34 = *v4;
  v16 = *v5;
  v35 = objc_msgSend(v34, "routeOffset");
  v36 = objc_msgSend(v16, "routeOffset");
  if (v35 < v36)
    goto LABEL_11;

  if ((_DWORD)v35 == (_DWORD)v36 && *((float *)&v35 + 1) < *((float *)&v36 + 1))
    goto LABEL_15;
}

void sub_19F41065C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(id *a1, void **a2, void **a3, void **a4)
{
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = objc_msgSend(v8, "routeOffset");
  v11 = objc_msgSend(v9, "routeOffset");
  if (v10 >= v11)
  {

    if ((_DWORD)v10 != (_DWORD)v11 || *((float *)&v10 + 1) >= *((float *)&v11 + 1))
      return;
  }
  else
  {

  }
  v13 = *a3;
  *a3 = 0;
  v14 = *a4;
  *a4 = 0;
  v15 = *a3;
  *a3 = v14;

  v16 = *a4;
  *a4 = v13;

  v17 = *a3;
  v18 = *a2;
  v19 = objc_msgSend(v17, "routeOffset");
  v20 = objc_msgSend(v18, "routeOffset");
  if (v19 >= v20)
  {

    if ((_DWORD)v19 != (_DWORD)v20 || *((float *)&v19 + 1) >= *((float *)&v20 + 1))
      return;
  }
  else
  {

  }
  v21 = *a2;
  *a2 = 0;
  v22 = *a3;
  *a3 = 0;
  v23 = *a2;
  *a2 = v22;

  v24 = *a3;
  *a3 = v21;

  v25 = *a2;
  v26 = *a1;
  v27 = objc_msgSend(v25, "routeOffset");
  v28 = objc_msgSend(v26, "routeOffset");
  if (v27 < v28)
  {

LABEL_16:
    v29 = *a1;
    *a1 = 0;
    v30 = *a2;
    *a2 = 0;
    v31 = *a1;
    *a1 = v30;

    v32 = *a2;
    *a2 = v29;

    return;
  }

  if ((_DWORD)v27 == (_DWORD)v28 && *((float *)&v27 + 1) < *((float *)&v28 + 1))
    goto LABEL_16;
}

void sub_19F41087C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,0>(id *a1, void **a2, void **a3, void **a4, void **a5)
{
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  void *v42;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = objc_msgSend(v10, "routeOffset");
  v13 = objc_msgSend(v11, "routeOffset");
  if (v12 >= v13)
  {

    if ((_DWORD)v12 != (_DWORD)v13 || *((float *)&v12 + 1) >= *((float *)&v13 + 1))
      return;
  }
  else
  {

  }
  v15 = *a4;
  *a4 = 0;
  v16 = *a5;
  *a5 = 0;
  v17 = *a4;
  *a4 = v16;

  v18 = *a5;
  *a5 = v15;

  v19 = *a4;
  v20 = *a3;
  v21 = objc_msgSend(v19, "routeOffset");
  v22 = objc_msgSend(v20, "routeOffset");
  if (v21 >= v22)
  {

    if ((_DWORD)v21 != (_DWORD)v22 || *((float *)&v21 + 1) >= *((float *)&v22 + 1))
      return;
  }
  else
  {

  }
  v23 = *a3;
  *a3 = 0;
  v24 = *a4;
  *a4 = 0;
  v25 = *a3;
  *a3 = v24;

  v26 = *a4;
  *a4 = v23;

  v27 = *a3;
  v28 = *a2;
  v29 = objc_msgSend(v27, "routeOffset");
  v30 = objc_msgSend(v28, "routeOffset");
  if (v29 >= v30)
  {

    if ((_DWORD)v29 != (_DWORD)v30 || *((float *)&v29 + 1) >= *((float *)&v30 + 1))
      return;
  }
  else
  {

  }
  v31 = *a2;
  *a2 = 0;
  v32 = *a3;
  *a3 = 0;
  v33 = *a2;
  *a2 = v32;

  v34 = *a3;
  *a3 = v31;

  v35 = *a2;
  v36 = *a1;
  v37 = objc_msgSend(v35, "routeOffset");
  v38 = objc_msgSend(v36, "routeOffset");
  if (v37 < v38)
  {

LABEL_20:
    v39 = *a1;
    *a1 = 0;
    v40 = *a2;
    *a2 = 0;
    v41 = *a1;
    *a1 = v40;

    v42 = *a2;
    *a2 = v39;

    return;
  }

  if ((_DWORD)v37 == (_DWORD)v38 && *((float *)&v37 + 1) < *((float *)&v38 + 1))
    goto LABEL_20;
}

void sub_19F410B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(id *a1, id *a2)
{
  id *v2;
  uint64_t v4;
  _BOOL8 result;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  void **v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id *v36;

  v2 = a2;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = objc_msgSend(v6, "routeOffset");
      v9 = objc_msgSend(v7, "routeOffset");
      if (v8 < v9)
      {

LABEL_35:
        v32 = *a1;
        *a1 = 0;
        v33 = *(v2 - 1);
        *(v2 - 1) = 0;
        v34 = *a1;
        *a1 = v33;

        v35 = *(v2 - 1);
        *(v2 - 1) = v32;

        return 1;
      }

      if ((_DWORD)v8 == (_DWORD)v9 && *((float *)&v8 + 1) < *((float *)&v9 + 1))
        goto LABEL_35;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v12 = 0;
      v13 = 0;
      v36 = v2;
      while (2)
      {
        v16 = *v11;
        v17 = *v10;
        v18 = objc_msgSend(v16, "routeOffset");
        v19 = objc_msgSend(v17, "routeOffset");
        if (v18 >= v19)
        {

          if ((_DWORD)v18 != (_DWORD)v19 || *((float *)&v18 + 1) >= *((float *)&v19 + 1))
            goto LABEL_10;
        }
        else
        {

        }
        v21 = *v11;
        v22 = *v10;
        *v10 = 0;
        *v11 = v22;
        v14 = a1;
        if (v10 == a1)
          goto LABEL_9;
        v23 = v12;
        while (2)
        {
          v26 = (char *)a1 + v23;
          v27 = *(id *)((char *)a1 + v23 + 8);
          v28 = objc_msgSend(v21, "routeOffset");
          v29 = objc_msgSend(v27, "routeOffset");
          if (v28 < v29)
          {

            goto LABEL_21;
          }

          if ((_DWORD)v28 == (_DWORD)v29 && *((float *)&v28 + 1) < *((float *)&v29 + 1))
          {
LABEL_21:
            v24 = *((_QWORD *)v26 + 1);
            v25 = (void *)*((_QWORD *)v26 + 2);
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = v24;

            v23 -= 8;
            if (v23 == -16)
            {
              v14 = a1;
              goto LABEL_8;
            }
            continue;
          }
          break;
        }
        v14 = (id *)((char *)a1 + v23 + 16);
LABEL_8:
        v2 = v36;
LABEL_9:
        v15 = *v14;
        *v14 = v21;

        if (++v13 == 8)
          return v11 + 1 == v2;
LABEL_10:
        v10 = v11;
        v12 += 8;
        if (++v11 != v2)
          continue;
        return 1;
      }
  }
}

void sub_19F410DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::crc32::compute<37ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  v32 = ggl::crc32::crc32Table[v31 ^ a1[33]] ^ (v31 >> 8);
  v33 = ggl::crc32::crc32Table[v32 ^ a1[34]] ^ (v32 >> 8);
  return ggl::crc32::crc32Table[v33 ^ a1[35]] ^ ~(v33 >> 8);
}

void ggl::ColorGlyphWithNormalHalo::DefaultPipelineState::~DefaultPipelineState(ggl::ColorGlyphWithNormalHalo::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PipelineState::~PipelineState(ggl::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::constantDataIsEnabled(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::textureIsEnabled(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void md::RouteOverlayLogic::~RouteOverlayLogic(md::RouteOverlayLogic *this)
{
  md::RouteOverlayLogic::~RouteOverlayLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42934F0;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }

  *((_QWORD *)this + 19) = &off_1E42B4B90;
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x13043386C0978CC2 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void geo::ScopedFunctions::~ScopedFunctions(geo::ScopedFunctions *this)
{
  uint64_t v2;
  geo::ScopedFunctions *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (geo::ScopedFunctions *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

void sub_19F411640(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

__n128 std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::insert_iterator<std::set<objc_object  {objcproto14VKRouteOverlay}*>> &>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD **a6)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v12;
  unint64_t v15;
  unint64_t v16;
  _QWORD **v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD **v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  __n128 result;
  uint64_t v48;
  uint64_t v49;

  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
    goto LABEL_58;
  v12 = *(_QWORD **)a4;
  if (*(_QWORD *)a4 == *a5)
  {
LABEL_39:
    v37 = (_QWORD **)*a6;
    v36 = a6[1];
    if (v8 == v9)
      goto LABEL_60;
    while (1)
    {
      v38 = (uint64_t **)std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__find_equal<objc_object  {objcproto14VKRouteOverlay}*>(v37, v36, &v49, &v48, v8[4]);
      v39 = *v38;
      if (*v38)
      {
        v40 = (uint64_t *)v39[1];
        if (!v40)
          goto LABEL_50;
      }
      else
      {
        v41 = v38;
        v39 = (uint64_t *)operator new(0x28uLL);
        v39[4] = v8[4];
        v42 = v49;
        *v39 = 0;
        v39[1] = 0;
        v39[2] = v42;
        *v41 = v39;
        v43 = (_QWORD *)**v37;
        v44 = v39;
        if (v43)
        {
          *v37 = v43;
          v44 = *v41;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v37[1], v44);
        v37[2] = (_QWORD *)((char *)v37[2] + 1);
        v40 = (uint64_t *)v39[1];
        if (!v40)
        {
          do
          {
LABEL_50:
            v36 = (uint64_t *)v39[2];
            v26 = *v36 == (_QWORD)v39;
            v39 = v36;
          }
          while (!v26);
          goto LABEL_52;
        }
      }
      do
      {
        v36 = v40;
        v40 = (uint64_t *)*v40;
      }
      while (v40);
LABEL_52:
      v45 = (_QWORD *)v8[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v8[2];
          v26 = *v46 == (_QWORD)v8;
          v8 = v46;
        }
        while (!v26);
      }
      v8 = v46;
      if (v46 == v9)
      {
        v8 = v9;
        goto LABEL_60;
      }
    }
  }
  while (1)
  {
    v15 = v8[4];
    v16 = v12[4];
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        v32 = (_QWORD *)v8[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v8[2];
            v26 = *v33 == (_QWORD)v8;
            v8 = v33;
          }
          while (!v26);
        }
        *(_QWORD *)a2 = v33;
        v34 = *(_QWORD **)a4;
        v35 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v35)
        {
          do
          {
            v31 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v34[2];
            v26 = *v31 == (_QWORD)v34;
            v34 = v31;
          }
          while (!v26);
        }
      }
      else
      {
        v30 = (_QWORD *)v12[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v12[2];
            v26 = *v31 == (_QWORD)v12;
            v12 = v31;
          }
          while (!v26);
        }
      }
      *(_QWORD *)a4 = v31;
    }
    else
    {
      v17 = (_QWORD **)*a6;
      v18 = (uint64_t **)std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__find_equal<objc_object  {objcproto14VKRouteOverlay}*>(*a6, a6[1], &v49, &v48, v15);
      v19 = *v18;
      if (!*v18)
      {
        v20 = v18;
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v8[4];
        v21 = v49;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = v21;
        *v20 = v19;
        v22 = (_QWORD *)**v17;
        v23 = v19;
        if (v22)
        {
          *v17 = v22;
          v23 = *v20;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v17[1], v23);
        v17[2] = (_QWORD *)((char *)v17[2] + 1);
      }
      a6[1] = v19;
      v24 = (uint64_t *)v19[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v19[2];
          v26 = *v25 == (_QWORD)v19;
          v19 = v25;
        }
        while (!v26);
      }
      a6[1] = v25;
      v27 = *(_QWORD **)a2;
      v28 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v27[2];
          v26 = *v29 == (_QWORD)v27;
          v27 = v29;
        }
        while (!v26);
      }
      *(_QWORD *)a2 = v29;
    }
    v8 = *(_QWORD **)a2;
    v9 = (_QWORD *)*a3;
    if (*(_QWORD *)a2 == *a3)
      break;
    v12 = *(_QWORD **)a4;
    if (*(_QWORD *)a4 == *a5)
      goto LABEL_39;
  }
LABEL_58:
  v37 = (_QWORD **)*a6;
  v36 = a6[1];
LABEL_60:
  result.n128_u64[0] = (unint64_t)v37;
  result.n128_u64[1] = (unint64_t)v36;
  *(_QWORD *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

_QWORD *std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__find_equal<objc_object  {objcproto14VKRouteOverlay}*>(v7, v8, v18, &v17, v6[4]);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

char *std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<objc_object  {objcproto14VKRouteOverlay}*&,geo::memory_management_mode const&>(void **a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  char *v11;
  id *v12;
  id *v13;
  void *v14;
  id *v15;
  id *v16;
  id *v17;
  void (**v18)(id *);
  BOOL v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  v10 = a2;
  *(_QWORD *)v8 = &off_1E42B5510;
  *((_QWORD *)v8 + 1) = v10;
  v11 = v8 + 24;
  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v8 - 3) = &off_1E42B5510;
    v8 -= 24;
    *((_QWORD *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    v14 = *(v12 - 2);
    *(v12 - 2) = 0;

    v12 -= 3;
  }
  while (v12 != v13);
  v12 = (id *)*a1;
  v15 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v15 != v12)
  {
    v16 = v15 - 3;
    v17 = v15 - 3;
    do
    {
      v18 = (void (**)(id *))*v17;
      v17 -= 3;
      (*v18)(v16);
      v19 = v16 == v12;
      v16 = v17;
    }
    while (!v19);
  }
  if (v12)
LABEL_18:
    operator delete(v12);
  return v11;
}

void ___ZL35GEOGetVectorKitRouteOverlayLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "RouteOverlayLogic");
  v1 = (void *)GEOGetVectorKitRouteOverlayLogicLog(void)::log;
  GEOGetVectorKitRouteOverlayLogicLog(void)::log = (uint64_t)v0;

}

uint64_t geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5510;

  return a1;
}

void geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5510;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__find_equal<objc_object  {objcproto14VKRouteOverlay}*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = a2[4], v6 > a5))
  {
    v7 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (_QWORD *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (v9[4] < a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v18 <= a5)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_41;
        }
        if (v18 >= a5)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
      goto LABEL_41;
    }
LABEL_20:
    v17 = a1 + 1;
LABEL_41:
    *a3 = v17;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (_QWORD *)a2[1];
    do
    {
      v12 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (_QWORD *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && v12[4] <= a5)
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[4];
          if (v21 <= a5)
            break;
          v20 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_41;
        }
        if (v21 >= a5)
          break;
        v5 = v17 + 1;
        v20 = (_QWORD *)v17[1];
      }
      while (v20);
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEC00;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEBB8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEBB8;
  a2[1] = v2;
  return result;
}

void md::RouteOverlayContext::~RouteOverlayContext(md::RouteOverlayContext *this)
{
  void *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;

  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 20));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 17));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 14));

  v3 = (void (***)(_QWORD))*((_QWORD *)this + 9);
  if (v3)
  {
    v4 = (void (***)(_QWORD))*((_QWORD *)this + 10);
    v5 = (void *)*((_QWORD *)this + 9);
    if (v4 != v3)
    {
      v6 = v4 - 3;
      v7 = v4 - 3;
      do
      {
        v8 = *v7;
        v7 -= 3;
        (*v8)(v6);
        v9 = v6 == v3;
        v6 = v7;
      }
      while (!v9);
      v5 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v3;
    operator delete(v5);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 1));
}

_QWORD *gdc::ManagedObjectHolder<md::RouteOverlayContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::RouteOverlayContext *v2;

  *a1 = &off_1E42B0FC8;
  v2 = (md::RouteOverlayContext *)a1[4];
  if (v2)
  {
    md::RouteOverlayContext::~RouteOverlayContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::RouteOverlayContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::RouteOverlayContext *v1;

  *a1 = &off_1E42B0FC8;
  v1 = (md::RouteOverlayContext *)a1[4];
  if (v1)
  {
    md::RouteOverlayContext::~RouteOverlayContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::RouteOverlayContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B90;

  return a1;
}

void geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B90;

  JUMPOUT(0x1A1AF4E00);
}

void md::MuninJunctionIntersection::~MuninJunctionIntersection(md::MuninJunctionIntersection *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E42991D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E42991D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninJunctionIntersection::mercatorPosition(md::MuninJunctionIntersection *this)
{
  return (uint64_t)this + 48;
}

void md::MuninJunctionIntersection::createLabels(md::MuninJunctionIntersection *this, double **a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  long double v10;
  double v11;
  long double v12;
  double v13;
  __double2 v14;
  __double2 v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  std::__shared_weak_count *v44;
  double v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  float v48;
  float v49;
  float v50;
  __n128 *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  double v67;
  unint64_t v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  __int16 v80;
  char v81;
  float v82;
  float v83;
  float v84;
  int v85;
  char v86;
  __int16 v87;

  v4 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*((_QWORD *)*a2 + 42) + 200));
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[3];
  *((double *)this + 6) = v6;
  *((double *)this + 7) = v7;
  *((double *)this + 8) = v8;
  v9 = v6 * 6.28318531;
  v10 = exp(v7 * 6.28318531 + -3.14159265);
  v11 = atan(v10) * 2.0 + -1.57079633;
  v12 = fmod(v9, 6.28318531);
  v13 = fmod(v12 + 6.28318531, 6.28318531) + -3.14159265;
  v14 = __sincos_stret(v11);
  v15 = __sincos_stret(v13);
  v16 = a2[6];
  v18 = v16[17];
  v17 = v16[18];
  v19 = v16[19];
  v85 = 0;
  v87 = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v81 = 2;
  v20 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  if (v20)
    v21 = *(uint64_t **)(v20 + 8);
  else
    v21 = 0;
  v22 = atomic_load((unsigned __int8 *)*a2 + 3392);
  v23 = operator new(0x70uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E42DB780;
  v24 = md::MuninRoadFeature::MuninRoadFeature((uint64_t)(v23 + 3), v21, v22 & 1);
  v25 = 6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
  v26 = (v25 + v8) * v14.__cosval;
  v27 = v26 * v15.__cosval;
  v28 = v26 * v15.__sinval;
  v29 = v18 - v26 * v15.__cosval;
  v30 = (v8 + v25 * 0.99330562) * v14.__sinval;
  v31 = 1.0 / sqrt(v27 * v27 + v28 * v28 + v30 * v30);
  v32 = 1.0 / sqrt(v29 * v29 + (v17 - v28) * (v17 - v28) + (v19 - v30) * (v19 - v30));
  v33 = v31 * v27;
  v34 = v31 * v28;
  v35 = v31 * v30;
  v36 = v32 * v29;
  v37 = v32 * (v17 - v28);
  v38 = v32 * (v19 - v30);
  v39 = -(v37 * v35 - v38 * v34);
  v40 = -(v38 * v33 - v36 * v35);
  v41 = -(v36 * v34 - v37 * v33);
  v42 = -(v41 * v34 - v40 * v35);
  v43 = -(v39 * v35 - v41 * v33);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  v45 = -(v40 * v33 - v39 * v34);
  *(_QWORD *)&v70 = v24;
  *((_QWORD *)&v70 + 1) = v23;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      v67 = -(v41 * v34 - v40 * v35);
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v42 = v67;
    }
  }
  v73 = v27;
  v74 = v28;
  v75 = v30;
  v76 = *(float *)(v4 + 32);
  v77 = v39;
  v78 = v40;
  v79 = v41;
  v48 = v42;
  v49 = v43;
  v50 = v45;
  v82 = v48;
  v83 = v49;
  v84 = v50;
  v80 = 2049;
  v86 = *(_BYTE *)v4;
  md::MuninRoadLabelGenerator::createLabel((md::MuninRoadLabelGenerator *)&v69, *((md::MuninRoadLabelCreationParams **)a2[1] + 3), (uint64_t *)&v70);
  if (!v69.n128_u64[0])
  {
    v52 = (std::__shared_weak_count *)v69.n128_u64[1];
    if (!v69.n128_u64[1])
      goto LABEL_23;
    goto LABEL_19;
  }
  v51 = (__n128 *)*((_QWORD *)this + 3);
  if ((unint64_t)v51 >= *((_QWORD *)this + 4))
  {
    v68 = v69.n128_u64[1];
    v55 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 16, v69);
    v52 = (std::__shared_weak_count *)v68;
  }
  else
  {
    v51->n128_u64[0] = v69.n128_u64[0];
    v52 = (std::__shared_weak_count *)v69.n128_u64[1];
    v51->n128_u64[1] = v69.n128_u64[1];
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = v51 + 1;
  }
  *((_QWORD *)this + 3) = v55;
  if (v52)
  {
LABEL_19:
    v56 = (unint64_t *)&v52->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
LABEL_23:
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (!*((_QWORD *)&v71 + 1))
    goto LABEL_32;
  v62 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (!*((_QWORD *)&v70 + 1))
      return;
  }
  else
  {
LABEL_32:
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (!*((_QWORD *)&v70 + 1))
      return;
  }
  v65 = (unint64_t *)&v64->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
}

void sub_19F41271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)va1);
  _Unwind_Resume(a1);
}

__n128 *std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(uint64_t a1, __n128 a2)
{
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  __n128 *v14;
  __n128 v15;
  __n128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *(__n128 **)a1;
  v3 = *(__n128 **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v8 = 16 * v5;
  v9 = (char *)operator new(16 * v5);
  v10 = (__n128 *)&v9[16 * v4];
  *v10 = a2;
  if (a2.n128_u64[1])
  {
    v11 = (unint64_t *)(a2.n128_u64[1] + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v2 = *(__n128 **)a1;
    v3 = *(__n128 **)(a1 + 8);
  }
  v13 = &v9[v8];
  v14 = v10 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
  }
  else
  {
    do
    {
      v15 = v3[-1];
      --v3;
      v10[-1] = v15;
      --v10;
      v3->n128_u64[0] = 0;
      v3->n128_u64[1] = 0;
    }
    while (v3 != v2);
    v2 = *(__n128 **)a1;
    v16 = *(__n128 **)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    while (v16 != v2)
    {
      v17 = (std::__shared_weak_count *)v16[-1].n128_u64[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      --v16;
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

void md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams(md::MuninRoadLabelCreationParams *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::__shared_ptr_emplace<md::MuninRoadFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninRoadFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::MuninRoadFeature>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64) & 0x7FFFFFFFFFFFFFFFLL);
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2)
      return;
    goto LABEL_7;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    return;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void altitude::TileManager::~TileManager(altitude::TileManager *this)
{
  altitude::TileManager::~TileManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  altitude::RootTileData *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)this = &off_1E42C3CF8;
  *((_QWORD *)this + 5) = &unk_1E42C3D50;
  v3 = *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 10);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 8 * v4) + 32))
      {
        (*(void (**)(altitude::TileManager *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
        v3 = *((_QWORD *)this + 9);
        v2 = *((_QWORD *)this + 10);
      }
      v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 9);
  v7 = *((_QWORD *)this + 10);
  if (v7 == v6)
  {
    v6 = *((_QWORD *)this + 10);
  }
  else
  {
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = *(altitude::RootTileData **)(v6 + 8 * v8);
      if (v10)
      {
        altitude::RootTileData::~RootTileData(v10);
        MEMORY[0x1A1AF4E00]();
        v6 = *((_QWORD *)this + 9);
        v7 = *((_QWORD *)this + 10);
      }
      v8 = v9++;
    }
    while (v8 < (v7 - v6) >> 3);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 10) = v6;
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v11);
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v12 = (_QWORD *)*((_QWORD *)this + 27);
  if (v12)
  {
    *((_QWORD *)this + 28) = v12;
    operator delete(v12);
    v12 = (_QWORD *)*((_QWORD *)this + 22);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v12);
  v13 = (void *)*((_QWORD *)this + 18);
  if (v13)
  {
    *((_QWORD *)this + 19) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 15);
  if (v14)
  {
    *((_QWORD *)this + 16) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 12);
  if (v15)
  {
    *((_QWORD *)this + 13) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 9);
  if (v16)
  {
    *((_QWORD *)this + 10) = v16;
    operator delete(v16);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t altitude::TileManager::onTileComponentDataLoaded(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  ++*(_DWORD *)(result + 196);
  v4 = *(_QWORD *)(result + 144);
  if (*(_QWORD *)(result + 152) != v4)
  {
    v8 = result;
    v9 = 0;
    v10 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 16))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      v9 = v10;
      v4 = *(_QWORD *)(v8 + 144);
      ++v10;
    }
    while (v9 < (*(_QWORD *)(v8 + 152) - v4) >> 3);
  }
  return result;
}

uint64_t altitude::TileManager::onTileComponentDataRelease(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  ++*(_DWORD *)(result + 196);
  v4 = *(_QWORD *)(result + 144);
  if (*(_QWORD *)(result + 152) != v4)
  {
    v8 = result;
    v9 = 0;
    v10 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 24))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      v9 = v10;
      v4 = *(_QWORD *)(v8 + 144);
      ++v10;
    }
    while (v9 < (*(_QWORD *)(v8 + 152) - v4) >> 3);
  }
  return result;
}

uint64_t altitude::TileManager::onChildTileAdded(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unsigned int v8;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 144);
    if (*(_QWORD *)(result + 152) != v4)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v7) + 32))(*(_QWORD *)(v4 + 8 * v7), a2, a3);
        v7 = v8;
        v4 = *(_QWORD *)(v3 + 144);
        ++v8;
      }
      while (v7 < (*(_QWORD *)(v3 + 152) - v4) >> 3);
    }
  }
  return result;
}

uint64_t altitude::TileManager::onChildTileRemoved(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v3 = *(_QWORD *)(result + 144);
  if (*(_QWORD *)(result + 152) != v3)
  {
    v6 = result;
    v7 = 0;
    v8 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 40))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      v7 = v8;
      v3 = *(_QWORD *)(v6 + 144);
      ++v8;
    }
    while (v7 < (*(_QWORD *)(v6 + 152) - v3) >> 3);
  }
  return result;
}

uint64_t altitude::TileManager::updateSceneGraph(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  *(_DWORD *)(this + 192) = a2;
  v2 = *(_QWORD *)(this + 120);
  if (*(_QWORD *)(this + 128) != v2)
  {
    v4 = this;
    v5 = 0;
    v6 = 1;
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 24))(*(_QWORD *)(v2 + 8 * v5), a2);
      v5 = v6;
      v2 = *(_QWORD *)(v4 + 120);
      ++v6;
    }
    while (v5 < (*(_QWORD *)(v4 + 128) - v2) >> 3);
  }
  return this;
}

uint64_t altitude::TileManager::preRenderUpdate(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)(this + 120);
  if (*(_QWORD *)(this + 128) != v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 1;
    do
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3));
      v3 = v4;
      v1 = *(_QWORD *)(v2 + 120);
      ++v4;
    }
    while (v3 < (*(_QWORD *)(v2 + 128) - v1) >> 3);
  }
  return this;
}

void `non-virtual thunk to'altitude::TileManager::~TileManager(altitude::TileManager *this)
{
  altitude::TileManager::~TileManager((altitude::TileManager *)((char *)this - 40));
}

{
  altitude::TileManager::~TileManager((altitude::TileManager *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t `non-virtual thunk to'altitude::TileManager::onTileComponentDataLoaded(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  ++*(_DWORD *)(result + 156);
  v4 = *(_QWORD *)(result + 104);
  if (*(_QWORD *)(result + 112) != v4)
  {
    v8 = result;
    v9 = 0;
    v10 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 16))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      v9 = v10;
      v4 = *(_QWORD *)(v8 + 104);
      ++v10;
    }
    while (v9 < (*(_QWORD *)(v8 + 112) - v4) >> 3);
  }
  return result;
}

uint64_t `non-virtual thunk to'altitude::TileManager::onTileComponentDataRelease(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  ++*(_DWORD *)(result + 156);
  v4 = *(_QWORD *)(result + 104);
  if (*(_QWORD *)(result + 112) != v4)
  {
    v8 = result;
    v9 = 0;
    v10 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 24))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      v9 = v10;
      v4 = *(_QWORD *)(v8 + 104);
      ++v10;
    }
    while (v9 < (*(_QWORD *)(v8 + 112) - v4) >> 3);
  }
  return result;
}

uint64_t `non-virtual thunk to'altitude::TileManager::onChildTileAdded(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unsigned int v8;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 104);
    if (*(_QWORD *)(result + 112) != v4)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v7) + 32))(*(_QWORD *)(v4 + 8 * v7), a2, a3);
        v7 = v8;
        v4 = *(_QWORD *)(v3 + 104);
        ++v8;
      }
      while (v7 < (*(_QWORD *)(v3 + 112) - v4) >> 3);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'altitude::TileManager::onChildTileRemoved(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v3 = *(_QWORD *)(result + 104);
  if (*(_QWORD *)(result + 112) != v3)
  {
    v6 = result;
    v7 = 0;
    v8 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 40))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      v7 = v8;
      v3 = *(_QWORD *)(v6 + 104);
      ++v8;
    }
    while (v7 < (*(_QWORD *)(v6 + 112) - v3) >> 3);
  }
  return result;
}

uint64_t altitude::TileManager::needsUpdate(altitude::TileManager *this)
{
  uint64_t v1;
  unint64_t v3;
  unsigned int v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 15);
  if (*((_QWORD *)this + 16) == v1)
    return 0;
  v3 = 0;
  v4 = 1;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 40))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    v3 = v4;
    v1 = *((_QWORD *)this + 15);
    ++v4;
  }
  while (v3 < (*((_QWORD *)this + 16) - v1) >> 3);
  return result;
}

void altitude::TileManager::clear(altitude::TileManager *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  altitude::RootTileData *v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 10);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 8 * v4) + 32))
      {
        (*(void (**)(altitude::TileManager *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
        v3 = *((_QWORD *)this + 9);
        v2 = *((_QWORD *)this + 10);
      }
      v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = *((_QWORD *)this + 15);
  if (*((_QWORD *)this + 16) != v6)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 48))(*(_QWORD *)(v6 + 8 * v7));
      v7 = v8;
      v6 = *((_QWORD *)this + 15);
      ++v8;
    }
    while (v7 < (*((_QWORD *)this + 16) - v6) >> 3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  v10 = *((_QWORD *)this + 10);
  if (v10 == v9)
  {
    v9 = *((_QWORD *)this + 10);
  }
  else
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = *(altitude::RootTileData **)(v9 + 8 * v11);
      if (v13)
      {
        altitude::RootTileData::~RootTileData(v13);
        MEMORY[0x1A1AF4E00]();
        v9 = *((_QWORD *)this + 9);
        v10 = *((_QWORD *)this + 10);
      }
      v11 = v12++;
    }
    while (v11 < (v10 - v9) >> 3);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 22);
  v14 = (_QWORD *)((char *)this + 176);
  *(v14 - 12) = v9;
  *(v14 - 9) = *(v14 - 10);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v15);
  *(v14 - 1) = v14;
  *v14 = 0;
  v14[1] = 0;
}

void altitude::TileManager::addRootTileData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t **v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;

  *(_QWORD *)a2 = a1;
  v5 = *(char **)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)(a1 + 72);
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_103;
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        goto LABEL_104;
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_107;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_107;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_107:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = *(char **)(a1 + 72);
      }
    }
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 88) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  *(_QWORD *)(a1 + 80) = v7;
  if (!*(_BYTE *)(a2 + 164))
    goto LABEL_48;
  v23 = (_OWORD *)(a2 + 8);
  v25 = (uint64_t **)(a1 + 56);
  v24 = *(uint64_t **)(a1 + 56);
  if (!v24)
  {
    v30 = (uint64_t *)(a1 + 56);
LABEL_40:
    v35 = operator new(0x38uLL);
    v35[2] = *v23;
    *((_QWORD *)v35 + 6) = 0;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = v30;
    *v25 = (uint64_t *)v35;
    v36 = **(_QWORD **)(a1 + 48);
    v37 = (uint64_t *)v35;
    if (v36)
    {
      *(_QWORD *)(a1 + 48) = v36;
      v37 = *v25;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v37);
    ++*(_QWORD *)(a1 + 64);
    v38 = *(unsigned __int8 *)(a2 + 164);
    *((_QWORD *)v35 + 6) = a2;
    if (v38)
      goto LABEL_43;
LABEL_48:
    v46 = *(char **)(a1 + 104);
    v45 = *(_QWORD *)(a1 + 112);
    if ((unint64_t)v46 < v45)
    {
      *(_QWORD *)v46 = a2;
      v47 = v46 + 8;
LABEL_83:
      *(_QWORD *)(a1 + 104) = v47;
      return;
    }
    v48 = *(char **)(a1 + 96);
    v49 = (v46 - v48) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - (_QWORD)v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 61)
          goto LABEL_104;
        v53 = operator new(8 * v52);
      }
      else
      {
        v53 = 0;
      }
      v60 = &v53[8 * v49];
      v61 = &v53[8 * v52];
      *v60 = a2;
      v47 = v60 + 1;
      if (v46 == v48)
      {
        v48 = v46;
      }
      else
      {
        v62 = v46 - v48 - 8;
        if (v62 < 0x58)
          goto LABEL_108;
        if ((unint64_t)(v48 - v53) < 0x20)
          goto LABEL_108;
        v63 = (v62 >> 3) + 1;
        v64 = &v53[8 * v49 - 16];
        v65 = v46 - 16;
        v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *(_OWORD *)v65;
          *(v64 - 1) = *((_OWORD *)v65 - 1);
          *v64 = v67;
          v64 -= 2;
          v65 -= 32;
          v66 -= 4;
        }
        while (v66);
        v60 -= v63 & 0x3FFFFFFFFFFFFFFCLL;
        v46 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_108:
          do
          {
            v68 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *--v60 = v68;
          }
          while (v46 != v48);
          v48 = *(char **)(a1 + 96);
        }
      }
      *(_QWORD *)(a1 + 96) = v60;
      *(_QWORD *)(a1 + 104) = v47;
      *(_QWORD *)(a1 + 112) = v61;
      if (v48)
        operator delete(v48);
      goto LABEL_83;
    }
LABEL_103:
    abort();
  }
  v26 = *(_DWORD *)(a2 + 8);
  v27 = *(_DWORD *)(a2 + 12);
  v28 = *(_DWORD *)(a2 + 16);
  v29 = *(_DWORD *)(a2 + 20);
  while (1)
  {
    while (1)
    {
      v30 = v24;
      v31 = *((_DWORD *)v24 + 8);
      if (v26 < v31)
        goto LABEL_27;
      if (v26 <= v31)
        break;
LABEL_32:
      v24 = (uint64_t *)v30[1];
      if (!v24)
      {
        v25 = (uint64_t **)(v30 + 1);
        goto LABEL_40;
      }
    }
    v32 = *((_DWORD *)v30 + 9);
    if (v27 >= v32)
    {
      if (v27 > v32)
        goto LABEL_32;
      v33 = *((_DWORD *)v30 + 10);
      if (v28 >= v33)
      {
        if (v28 > v33)
          goto LABEL_32;
        v34 = *((_DWORD *)v30 + 11);
        if (v29 >= v34)
          break;
      }
    }
LABEL_27:
    v24 = (uint64_t *)*v30;
    v25 = (uint64_t **)v30;
    if (!*v30)
      goto LABEL_40;
  }
  if (v34 < v29)
    goto LABEL_32;
  v30[6] = a2;
LABEL_43:
  v39 = *(char **)(a1 + 96);
  v40 = *(char **)(a1 + 104);
  v41 = (v40 - v39) >> 3;
  if (v40 != v39)
  {
    v42 = 0;
    v43 = 1;
    while (1)
    {
      v44 = *(_QWORD *)&v39[8 * v42];
      if (*(_BYTE *)(v44 + 164))
        break;
      v42 = v43++;
      if (v41 <= v42)
        goto LABEL_60;
    }
    v54 = *(_DWORD *)(v44 + 8);
    if (*(_DWORD *)v23 != v54)
    {
      if (*(_DWORD *)v23 < v54)
      {
        v69 = 0;
        v70 = 1;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)&v39[8 * v69] + 164))
          {
            *(_QWORD *)&v39[8 * v69] = a2;
            v39 = *(char **)(a1 + 96);
            v40 = *(char **)(a1 + 104);
          }
          v69 = v70++;
        }
        while (v69 < (v40 - v39) >> 3);
      }
      return;
    }
  }
LABEL_60:
  v55 = *(_QWORD *)(a1 + 112);
  if ((unint64_t)v40 < v55)
  {
    *(_QWORD *)v40 = a2;
    *(_QWORD *)(a1 + 104) = v40 + 8;
    return;
  }
  v56 = v41 + 1;
  if ((v41 + 1) >> 61)
    goto LABEL_103;
  v57 = v55 - (_QWORD)v39;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_90;
    }
LABEL_104:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v59 = 0;
LABEL_90:
  v71 = &v59[8 * v41];
  v72 = &v59[8 * v58];
  *v71 = a2;
  v73 = v71 + 1;
  if (v40 == v39)
  {
    v39 = v40;
  }
  else
  {
    v74 = v40 - v39 - 8;
    if (v74 < 0x58)
      goto LABEL_109;
    if (v40 - v59 - ((v40 - v39) & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_109;
    v75 = (v74 >> 3) + 1;
    v76 = &v59[8 * v41 - 16];
    v77 = v40 - 16;
    v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      *v76 = v79;
      v76 -= 2;
      v77 -= 32;
      v78 -= 4;
    }
    while (v78);
    v71 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
    v40 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
    if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        v80 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v71 = v80;
      }
      while (v40 != v39);
      v39 = *(char **)(a1 + 96);
    }
  }
  *(_QWORD *)(a1 + 96) = v71;
  *(_QWORD *)(a1 + 104) = v73;
  *(_QWORD *)(a1 + 112) = v72;
  if (v39)
    operator delete(v39);
  *(_QWORD *)(a1 + 104) = v73;
}

void altitude::TileManager::registerTileListener(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v4 = (char *)a1[18];
  v5 = (char *)a1[19];
  v6 = v5;
  v7 = v4;
  if (v4 != v5)
  {
    while (*(_QWORD *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v5)
      {
        v7 = (char *)a1[19];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    v8 = a1[20];
    if ((unint64_t)v5 >= v8)
    {
      v10 = v5 - v4;
      v11 = (v5 - v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        abort();
      v13 = v8 - (_QWORD)v4;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = a2;
      v9 = v16 + 1;
      if (v4 != v5)
      {
        if ((unint64_t)(v10 - 8) < 0x58)
          goto LABEL_34;
        if ((unint64_t)(v4 - v15) < 0x20)
          goto LABEL_34;
        v18 = ((unint64_t)(v10 - 8) >> 3) + 1;
        v6 = &v5[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
        v19 = &v15[8 * v11 - 16];
        v20 = v5 - 16;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v16 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            v23 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v23;
          }
          while (v6 != v4);
          v4 = (char *)a1[18];
        }
      }
      a1[18] = v16;
      a1[19] = v9;
      a1[20] = v17;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v5 = a2;
      v9 = v5 + 8;
    }
    a1[19] = v9;
  }
}

void altitude::TileManager::unregisterTileListener(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;

  v3 = *(_QWORD **)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152) - (_QWORD)v3;
  v5 = v4 >> 3;
  v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0)
    goto LABEL_21;
  v7 = 0;
  while (v3[v7] != a2)
  {
    if (v6 == ++v7)
      goto LABEL_21;
  }
  v6 = (v5 - 1);
  v3[v7] = v3[v6];
  v3 = *(_QWORD **)(a1 + 144);
  v8 = *(_BYTE **)(a1 + 152);
  v5 = (v8 - (_BYTE *)v3) >> 3;
  v9 = v6 - v5;
  if (v6 <= v5)
  {
LABEL_21:
    if (v5 <= v6)
      return;
    v23 = (char *)&v3[v6];
    goto LABEL_23;
  }
  v10 = *(_QWORD *)(a1 + 160);
  if (v9 <= (v10 - (uint64_t)v8) >> 3)
  {
    bzero(*(void **)(a1 + 152), 8 * v9);
    v23 = &v8[8 * v9];
LABEL_23:
    *(_QWORD *)(a1 + 152) = v23;
    return;
  }
  v11 = v10 - (_QWORD)v3;
  if (v11 >> 2 > v6)
    v6 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (v6 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = 8 * v6;
  v13 = operator new(8 * v6);
  v14 = &v13[8 * v5];
  bzero(v14, 8 * v9);
  v15 = &v14[8 * v9];
  if (v8 == (_BYTE *)v3)
  {
    v3 = v8;
  }
  else
  {
    v16 = v8 - (_BYTE *)v3 - 8;
    if (v16 < 0x58)
      goto LABEL_32;
    if ((unint64_t)((char *)v3 - v13) < 0x20)
      goto LABEL_32;
    v17 = (v16 >> 3) + 1;
    v18 = &v13[8 * v5 - 16];
    v19 = (__int128 *)(v8 - 16);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v14 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v8 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v22 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v14 - 1) = v22;
        v14 -= 8;
      }
      while (v8 != (_BYTE *)v3);
      v3 = *(_QWORD **)(a1 + 144);
    }
  }
  *(_QWORD *)(a1 + 144) = v14;
  *(_QWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 160) = &v13[v12];
  if (v3)
    operator delete(v3);
}

void md::ExternalMeshLabelPart::~ExternalMeshLabelPart(md::ExternalMeshLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::ExternalMeshLabelPart::~ExternalMeshLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ExternalMeshLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 40))(mdm::Allocator::instance(void)::alloc, this, 608);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E429AD10;
  v2 = *((_QWORD *)this + 72);
  if (v2)
  {
    atomic_store(1u, (unsigned __int8 *)(v2 + 116));
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
    if (!v3)
      goto LABEL_11;
    goto LABEL_7;
  }
  v4 = *((_QWORD *)this + 74);
  std::mutex::lock((std::mutex *)(v4 + 96));
  *(_BYTE *)(v4 + 176) = 4;
  v5 = *(_QWORD *)(v4 + 160);
  if (v5)
    atomic_store(1u, (unsigned __int8 *)(v5 + 116));
  std::mutex::unlock((std::mutex *)(v4 + 96));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  if (v3)
  {
LABEL_7:
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

uint64_t md::LabelPart::setPreviousStagingModelChainMatrix(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t md::LabelPart::setPreviousModelChainMatrix(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t md::LabelPart::setPreviousStagingModelChainTransform(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t md::LabelPart::setPreviousModelChainTransform(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 64) = a2;
  return result;
}

uint64_t md::LabelPart::setInWorldSpace(uint64_t this, char a2, char a3)
{
  *(_BYTE *)(this + 565) = a2;
  *(_BYTE *)(this + 566) = a3;
  return this;
}

uint64_t md::ExternalMeshLabelPart::layoutForStaging(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::mutex *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v14;

  v1 = a1[74];
  v2 = a1[72];
  if (!v1)
  {
    if (v2)
      return 37;
    return 26;
  }
  if (v2)
    return 37;
  v4 = (std::mutex *)(v1 + 96);
  std::mutex::lock((std::mutex *)(v1 + 96));
  v5 = *(unsigned __int8 *)(v1 + 176);
  std::mutex::unlock(v4);
  if (v5 < 2)
    return 25;
  if (v5 - 3 < 2)
    return 26;
  if (v5 != 2)
    return 37;
  v6 = a1[74];
  std::mutex::lock((std::mutex *)(v6 + 96));
  v7 = *(_OWORD *)(v6 + 160);
  v14 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::mutex::unlock((std::mutex *)(v6 + 96));
  v10 = (std::__shared_weak_count *)a1[73];
  *((_OWORD *)a1 + 36) = v14;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a1[72])
    return 37;
  else
    return 26;
}

uint64_t md::ExternalMeshLabelPart::layoutForDisplay(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 576))
    return 37;
  else
    return 26;
}

uint64_t md::ExternalMeshLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(result + 576);
  if (v3)
  {
    *(float *)(v3 + 112) = a3;
    *(float *)(result + 552) = fmaxf(fminf(a3, 1.0), 0.0);
    v5 = *(_QWORD **)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 56);
    if ((unint64_t)v5 < v6)
    {
      if (v5)
        *v5 = v3;
      v7 = v5 + 1;
LABEL_28:
      *(_QWORD *)(a2 + 48) = v7;
      return result;
    }
    v8 = *(_QWORD *)(a2 + 40);
    v9 = ((uint64_t)v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v6 - v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    if (v10)
    {
      v12 = 8 * v10;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 16))(*(_QWORD *)(a2 + 64), 8 * v10, 8);
      v13 = (_QWORD *)(result + 8 * v9);
      v10 = result + v12;
      if (result)
        *v13 = v3;
    }
    else
    {
      v13 = (_QWORD *)(8 * v9);
    }
    v7 = v13 + 1;
    v15 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    if (v14 == v15)
    {
LABEL_26:
      *(_QWORD *)(a2 + 40) = v13;
      *(_QWORD *)(a2 + 48) = v7;
      v24 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 56) = v10;
      if (v14)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), v14, v24 - v14);
      goto LABEL_28;
    }
    v16 = v14 - v15 - 8;
    if (v16 < 0x38)
    {
      v18 = *(_QWORD *)(a2 + 48);
    }
    else if ((unint64_t)(v14 - (_QWORD)v13) < 0x20)
    {
      v18 = *(_QWORD *)(a2 + 48);
    }
    else
    {
      v17 = (v16 >> 3) + 1;
      v18 = v14 - 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = v13 - 2;
      v20 = (__int128 *)(v14 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v13 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_25;
    }
    do
    {
      v23 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *--v13 = v23;
    }
    while (v18 != v15);
LABEL_25:
    v14 = *(_QWORD *)(a2 + 40);
    goto LABEL_26;
  }
  return result;
}

uint64_t md::LabelPart::stagingModelMatrix(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::modelMatrix(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::setContentType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 562) = a2;
  return result;
}

uint64_t md::LabelPart::clearLabelAnimationIDs(uint64_t this)
{
  *(_BYTE *)(this + 564) = -1;
  return this;
}

uint64_t md::LabelPart::partType(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isVisuallySimilar(md::LabelPart *this, const md::LabelPart *a2)
{
  return 0;
}

float md::LabelPart::pixelBoundsForDisplay(md::LabelPart *this)
{
  return *(float *)(*((_QWORD *)this + 3) + 360);
}

float md::LabelPart::pixelBoundsForStaging(md::LabelPart *this)
{
  return *(float *)(*((_QWORD *)this + 3) + 120);
}

float md::LabelPart::localBoundsOffset()
{
  return 0.0;
}

float md::LabelPart::topLayoutMargin()
{
  return 0.0;
}

float md::LabelPart::bottomLayoutMargin()
{
  return 0.0;
}

float md::LabelPart::topLeftAlignInset()
{
  return 0.0;
}

float md::LabelPart::topRightAlignInset()
{
  return 0.0;
}

float md::LabelPart::bottomAlignInset()
{
  return 0.0;
}

float md::LabelPart::hikerWidth()
{
  return 0.0;
}

uint64_t md::LabelPart::checkResourcesReady(md::LabelPart *this, LabelManager *a2)
{
  return 37;
}

uint64_t md::LabelPart::setPartRotation(uint64_t result, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = *a2;
  *(float *)(result + 288) = *a2;
  v3 = a2[1];
  *(float *)(result + 292) = v3;
  v4 = *(float *)(result + 296);
  v5 = *(float *)(result + 300);
  v6 = v4 * v3;
  v7 = -(float)((float)(v5 * v3) - (float)(v4 * v2));
  *(float *)(result + 88) = v7;
  *(float *)(result + 92) = v6 + (float)(v5 * v2);
  *(_BYTE *)(result + 268) = fabsf(v7 + -1.0) > 0.000001;
  v8 = *a2;
  *(float *)(result + 528) = *a2;
  v9 = a2[1];
  *(float *)(result + 532) = v9;
  v10 = *(float *)(result + 536);
  v11 = *(float *)(result + 540);
  v12 = v10 * v9;
  v13 = -(float)((float)(v11 * v9) - (float)(v10 * v8));
  *(float *)(result + 328) = v13;
  *(float *)(result + 332) = v12 + (float)(v11 * v8);
  *(_BYTE *)(result + 508) = fabsf(v13 + -1.0) > 0.000001;
  return result;
}

uint64_t md::LabelPart::optionalTextHidden(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::reserveSpaceLabelPart(md::LabelPart *this, BOOL *a2)
{
  return 0;
}

uint64_t md::LabelPart::supportsAlternatePlacements()
{
  return 0;
}

uint64_t md::LabelPart::snapToDefaultPlacement()
{
  return 0;
}

uint64_t md::LabelPart::findAlternatePlacement()
{
  return 0;
}

void md::LabelPart::transferResource(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::LabelPart::isInterruptibleAnimation(md::LabelPart *this)
{
  return 1;
}

uint64_t md::LabelPart::hasSelectableParts(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isSelectable(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::selectionBehavior(md::LabelPart *this)
{
  return 0;
}

float md::LabelPart::calloutAnchorRect(md::LabelPart *this)
{
  return 3.4028e38;
}

uint64_t md::LabelPart::isTextRTL(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isCrossFadeNode(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isCrossFading(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isNullLabelPart(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::visible()
{
  return 1;
}

uint64_t md::LabelPart::isTextVisible(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isTextRequired(md::LabelPart *this)
{
  return 0;
}

void md::ExternalMeshLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "ExternalMeshLabelPart");
}

uint64_t md::LabelPart::setRenderPass(uint64_t result, char a2)
{
  *(_BYTE *)(result + 557) = a2;
  return result;
}

uint64_t md::LabelPart::setRenderOrder(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 558) = a2;
  return this;
}

uint64_t md::ExternalMeshLabelPart::publicName(md::ExternalMeshLabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::partCollidesWithDisplayObject(md::LabelPart *this, const md::CollisionObject *a2)
{
  float *v2;

  v2 = (float *)*((_QWORD *)this + 3);
  if (v2[100] <= *((float *)a2 + 20)
    || v2[98] >= *((float *)a2 + 22)
    || v2[101] <= *((float *)a2 + 21)
    || v2[99] >= *((float *)a2 + 23))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(md::LabelPart *))(*(_QWORD *)this + 472))(this);
  }
}

uint64_t md::LabelPart::partIntersectsStagingFrustum(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(a1[3] + 72), a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 480))(a1, a2);
  return result;
}

uint64_t md::LabelPart::partIntersectsDisplayFrustum(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(a1[3] + 312), a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 488))(a1, a2);
  return result;
}

uint64_t md::LabelPart::featureID(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::clone(md::LabelPart *this)
{
  return 0;
}

uint64_t md::CollisionObject::intersectsWorldFrustum(float32x2_t *a1, uint64_t a2)
{
  int64x2_t v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  float64_t v17;
  double v18;
  double v19;
  double v20;
  float64_t v21;
  double v22;
  double v23;
  double v24;
  float64_t v25;
  double v26;
  double v27;
  double v28;
  float64_t v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float32x2_t v54;
  float64x2_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float64x2_t v61;
  __n128 v62;
  double *v63;
  uint64_t v64;
  float32x2_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v88;
  float v89;
  double v90;
  double v91;
  __int128 v92;
  __int128 v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  __int128 v123;
  float64x2_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  float64x2_t v128;
  __int128 v129;
  double v130[3];
  float64x2_t v131;
  float64x2_t v132;
  float64_t v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  _BYTE v150[56];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  int64x2_t v156;
  _BYTE v157[32];
  double v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  double v167[3];
  double *v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)&a1[14] && !*(_QWORD *)&a1[15])
    return 0;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 40);
  v7 = *(double *)(a2 + 64);
  v8 = *(double *)(a2 + 72);
  v9 = *(double *)(a2 + 96);
  v10 = *(double *)(a2 + 104);
  v11 = *(double *)(a2 + 16);
  v12 = *(double *)(a2 + 24);
  v2.i64[0] = *(_QWORD *)(a2 + 48);
  v13.f64[0] = *(float64_t *)(a2 + 56);
  v14 = *(double *)(a2 + 88);
  v15 = *(double *)(a2 + 120);
  v16 = v12 + *(double *)a2;
  v17 = v13.f64[0] + v5;
  v18 = v14 + v7;
  v19 = v15 + v9;
  v20 = v12 - *(double *)a2;
  v21 = v13.f64[0] - v5;
  v22 = v14 - v7;
  v23 = v15 - v9;
  v24 = v12 + v4;
  v25 = v13.f64[0] + v6;
  v26 = v14 + v8;
  v27 = v15 + v10;
  v28 = v12 - v4;
  v29 = v13.f64[0] - v6;
  v30 = v14 - v8;
  v31 = v15 - v10;
  v32 = v12 - v11;
  v33.f64[0] = v11;
  v33.f64[1] = v32;
  v34 = v15 - *(double *)(a2 + 112);
  v35 = vmulq_f64(v33, v33);
  v33.f64[0] = *(float64_t *)(a2 + 112);
  v13.f64[1] = v14;
  *(_QWORD *)&v36.f64[0] = v2.i64[0];
  v36.f64[1] = *(float64_t *)(a2 + 80);
  v37 = vsubq_f64(v13, v36);
  v38 = (float64x2_t)vzip1q_s64(v2, (int64x2_t)v37);
  v39 = vmlaq_f64(v35, v38, v38);
  v38.f64[1] = v37.f64[1];
  v38.f64[0] = *(float64_t *)(a2 + 80);
  __asm { FMOV            V27.2D, #1.0 }
  v45 = vdivq_f64(_Q27, vsqrtq_f64(vmlaq_f64(v39, v38, v38)));
  v46 = *(double *)(a2 + 80) * v45.f64[0];
  v130[0] = v11 * v45.f64[0];
  v130[1] = *(double *)v2.i64 * v45.f64[0];
  v47 = vmulq_f64(v45, v33);
  v48 = vmulq_laneq_f64(v37, v45, 1);
  v37.f64[0] = vmuld_lane_f64(v34, v45, 1);
  v131 = v47;
  v132 = v48;
  v130[2] = v46;
  v49 = 1.0 / sqrt(v24 * v24 + v25 * v25 + v26 * v26);
  v50 = v49 * v27;
  v133 = v37.f64[0];
  v134 = v49 * v24;
  v135 = v49 * v25;
  v136 = v49 * v26;
  v51 = 1.0 / sqrt(v28 * v28 + v29 * v29 + v30 * v30);
  v137 = v50;
  v138 = v51 * v28;
  v139 = v51 * v29;
  v140 = v51 * v30;
  v52 = 1.0 / sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  v141 = v51 * v31;
  v142 = v52 * v16;
  v143 = v52 * v17;
  v144 = v52 * v18;
  v53 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  v145 = v52 * v19;
  v146 = v53 * v20;
  v147 = v53 * v21;
  v148 = v53 * v22;
  v149 = v53 * v23;
  geo::Frustum<double>::calculateCorners(v130, (double *)a2, 0.0);
  v54 = a1[14];
  if (v54)
  {
    v55 = *(float64x2_t *)*(_QWORD *)&v54;
    v56 = *(_OWORD *)(*(_QWORD *)&v54 + 16);
    v57 = *(_OWORD *)(*(_QWORD *)&v54 + 48);
    v124 = *(float64x2_t *)(*(_QWORD *)&v54 + 32);
    v125 = v57;
    v122 = v55;
    v123 = v56;
    v58 = *(_OWORD *)(*(_QWORD *)&v54 + 64);
    v59 = *(_OWORD *)(*(_QWORD *)&v54 + 80);
    v60 = *(_OWORD *)(*(_QWORD *)&v54 + 112);
    v128 = *(float64x2_t *)(*(_QWORD *)&v54 + 96);
    v129 = v60;
    v126 = v58;
    v127 = v59;
    if (a1[19].i8[0])
      goto LABEL_5;
LABEL_9:
    v83 = 25;
    if (!a1[24].i8[7])
      v83 = 24;
    v84 = a1[1].f32[0];
    v85 = a1->f32[0];
    if (v84 >= a1->f32[0])
    {
      v86 = a1[1].f32[1];
      v88 = a1->f32[1];
      if (v86 >= v88)
      {
        v89 = a1->f32[v83];
        v85 = v85 - v89;
        v84 = v84 + v89;
        v118 = v88 - v89;
        v86 = v86 + v89;
      }
      else
      {
        v118 = a1->f32[1];
      }
    }
    else
    {
      v118 = a1->f32[1];
      v86 = a1[1].f32[1];
    }
    v90 = v84;
    v91 = v86;
    v92 = v125;
    v113 = *(double *)&v123 * v90;
    v93 = v129;
    v94 = *(double *)&v125 * v91 + *(double *)&v123 * v90 + *(double *)&v129;
    v112 = *((double *)&v123 + 1) * v90;
    v95 = 1.0 / (*((double *)&v125 + 1) * v91 + *((double *)&v123 + 1) * v90 + *((double *)&v129 + 1));
    v96 = vmulq_n_f64(v122, v90);
    v116 = v124;
    v97 = vmulq_n_f64(v124, v91);
    v111 = v96;
    v98 = v95 * v94;
    *(_QWORD *)v150 = 0;
    v167[0] = 0.0;
    v99 = v85;
    v100 = *(double *)&v123 * v99;
    v101 = *((double *)&v123 + 1) * v99;
    v102 = 1.0 / (*((double *)&v125 + 1) * v91 + *((double *)&v123 + 1) * v99 + *((double *)&v129 + 1));
    v114 = vmulq_n_f64(v122, v99);
    v120 = v128;
    v103 = v102 * (*(double *)&v125 * v91 + *(double *)&v123 * v99 + *(double *)&v129);
    v115 = vmulq_n_f64(vaddq_f64(vaddq_f64(v97, v114), v128), v102);
    v110 = vmulq_n_f64(vaddq_f64(vaddq_f64(v97, v96), v128), v95);
    v156 = (int64x2_t)v110;
    *(float64x2_t *)&v157[8] = vsubq_f64(v115, v110);
    *(double *)v157 = v95 * v94;
    *(double *)&v157[24] = v103 - v95 * v94;
    if ((geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v130, (double *)v156.i64, 2u, (double *)v150, v167) & 1) == 0)
    {
      v104 = *(double *)&v92 * v118;
      v105 = *((double *)&v92 + 1) * v118;
      v106 = 1.0 / (v105 + v101 + *((double *)&v93 + 1));
      v117 = vmulq_n_f64(v116, v118);
      v107 = v106 * (v104 + v100 + *(double *)&v93);
      v119 = vmulq_n_f64(vaddq_f64(vaddq_f64(v117, v114), v120), v106);
      v156 = (int64x2_t)v115;
      *(float64x2_t *)&v157[8] = vsubq_f64(v119, v115);
      *(double *)v157 = v103;
      *(double *)&v157[24] = v107 - v103;
      if ((geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v130, (double *)v156.i64, 2u, (double *)v150, v167) & 1) == 0)
      {
        v108 = 1.0 / (v105 + v112 + *((double *)&v93 + 1));
        v109 = v108 * (v104 + v113 + *(double *)&v93);
        v121 = vmulq_n_f64(vaddq_f64(vaddq_f64(v117, v111), v120), v108);
        v156 = (int64x2_t)v119;
        *(float64x2_t *)&v157[8] = vsubq_f64(v121, v119);
        *(double *)v157 = v107;
        *(double *)&v157[24] = v109 - v107;
        if ((geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v130, (double *)v156.i64, 2u, (double *)v150, v167) & 1) == 0)
        {
          v156 = (int64x2_t)v121;
          *(float64x2_t *)&v157[8] = vsubq_f64(v110, v121);
          *(double *)v157 = v109;
          *(double *)&v157[24] = v98 - v109;
          if (!geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v130, (double *)v156.i64, 2u, (double *)v150, v167))return 0;
        }
      }
    }
    return 1;
  }
  v65 = a1[15];
  v66 = *(double *)(*(_QWORD *)&v65 + 24);
  v67 = *(double *)(*(_QWORD *)&v65 + 32);
  v68 = *(double *)(*(_QWORD *)&v65 + 40);
  v69 = *(double *)(*(_QWORD *)&v65 + 48);
  v70 = v67 + v67;
  v71 = (v67 + v67) * v67;
  v72 = (v68 + v68) * v68;
  v73 = v66 + v66;
  v74 = (v66 + v66) * v67;
  v75 = (v68 + v68) * v69;
  v76 = v68 * (v66 + v66);
  v77 = v69 * v70;
  v78 = v69 * v70 + v76;
  v79 = 1.0 - (v66 + v66) * v66;
  v80 = v70 * v68;
  v81 = v69 * v73;
  *(double *)v156.i64 = 1.0 - (v71 + v72);
  *(double *)&v156.i64[1] = v75 + v74;
  *(double *)&v157[16] = v74 - v75;
  *(double *)&v157[24] = v79 - v72;
  v160 = v78;
  v161 = v80 - v81;
  *(double *)v157 = v76 - v77;
  v158 = v81 + v80;
  v162 = v79 - v71;
  *(_QWORD *)&v157[8] = 0;
  v159 = 0;
  v163 = 0;
  v164 = *(_OWORD *)*(_QWORD *)&v65;
  v165 = *(_QWORD *)(*(_QWORD *)&v65 + 16);
  v166 = 0x3FF0000000000000;
  *(_OWORD *)&v150[40] = 0u;
  v152 = 0u;
  v154 = 0u;
  v153 = 0u;
  v151 = 0u;
  memset(&v150[8], 0, 32);
  v155 = 0x3FF0000000000000;
  v82 = *(_QWORD *)(*(_QWORD *)&v65 + 64);
  *(_QWORD *)v150 = *(_QWORD *)(*(_QWORD *)&v65 + 56);
  *(_QWORD *)&v150[40] = v82;
  *((_QWORD *)&v152 + 1) = *(_QWORD *)(*(_QWORD *)&v65 + 72);
  gm::operator*<double,4,4,4>(v122.f64, (double *)v156.i64, (double *)v150);
  if (!a1[19].i8[0])
    goto LABEL_9;
LABEL_5:
  v61 = vcvtq_f64_f32(a1[17]);
  *(float64x2_t *)v150 = vcvtq_f64_f32(a1[16]);
  *(float64x2_t *)&v150[16] = v61;
  *(float64x2_t *)&v150[32] = vcvtq_f64_f32(a1[18]);
  v156 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)v157 = xmmword_19FFB2E00;
  *(int64x2_t *)&v157[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)&v167[0] = &off_1E42D8A68;
  *(_QWORD *)&v167[1] = &v156;
  *(_QWORD *)&v167[2] = &v122;
  v168 = v167;
  v62.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v150, (uint64_t)v167);
  v63 = v168;
  if (v168 == v167)
  {
    v64 = 4;
    v63 = v167;
  }
  else
  {
    if (!v168)
      return geo::Intersect::encloses<double>(v130, (double *)v156.i64) != 0;
    v64 = 5;
  }
  (*(void (**)(__n128))(*(_QWORD *)v63 + 8 * v64))(v62);
  return geo::Intersect::encloses<double>(v130, (double *)v156.i64) != 0;
}

uint64_t geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(double *a1, double *a2, unsigned int a3, double *a4, double *a5)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  BOOL v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  BOOL v47;
  double v48;

  v5 = 8 * a3;
  v6 = *(double *)((char *)&unk_19FFB8418 + v5);
  *a4 = *(double *)((char *)&unk_19FFB8400 + v5);
  *a5 = v6;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a2[3] * *a1 + a2[4] * v7 + a2[5] * v8;
  v10 = a1[3] + *a2 * *a1 + a2[1] * v7 + a2[2] * v8;
  v11 = v9 <= 0.0;
  if (v9 == 0.0)
  {
    if (v10 < 0.0)
      return 0;
  }
  else
  {
    v12 = -v10 / v9;
    if (v11)
    {
      v6 = fmin(v12, v6);
      *a5 = v6;
    }
    else
    {
      *a4 = fmax(*a4, v12);
      v6 = *a5;
    }
  }
  v13 = *a4;
  if (*a4 <= v6)
  {
    v14 = a1[4];
    v15 = a1[5];
    v16 = a1[6];
    v17 = a2[3] * v14 + a2[4] * v15 + a2[5] * v16;
    v18 = a1[7] + *a2 * v14 + a2[1] * v15 + a2[2] * v16;
    v19 = v17 <= 0.0;
    if (v17 == 0.0)
    {
      if (v18 < 0.0)
        return 0;
    }
    else
    {
      v20 = -v18 / v17;
      if (v19)
      {
        v6 = fmin(v20, v6);
        *a5 = v6;
        v13 = *a4;
        if (*a4 > v6)
          return 0;
LABEL_16:
        v21 = a1[8];
        v22 = a1[9];
        v23 = a1[10];
        v24 = a2[3] * v21 + a2[4] * v22 + a2[5] * v23;
        v25 = a1[11] + *a2 * v21 + a2[1] * v22 + a2[2] * v23;
        v26 = v24 <= 0.0;
        if (v24 == 0.0)
        {
          if (v25 < 0.0)
            return 0;
        }
        else
        {
          v27 = -v25 / v24;
          if (v26)
          {
            v6 = fmin(v27, v6);
            *a5 = v6;
            v13 = *a4;
            if (*a4 > v6)
              return 0;
            goto LABEL_24;
          }
          v13 = fmax(v13, v27);
          *a4 = v13;
          v6 = *a5;
        }
        if (v13 > v6)
          return 0;
LABEL_24:
        v28 = a1[12];
        v29 = a1[13];
        v30 = a1[14];
        v31 = a2[3] * v28 + a2[4] * v29 + a2[5] * v30;
        v32 = a1[15] + *a2 * v28 + a2[1] * v29 + a2[2] * v30;
        v33 = v31 <= 0.0;
        if (v31 == 0.0)
        {
          if (v32 < 0.0)
            return 0;
        }
        else
        {
          v34 = -v32 / v31;
          if (v33)
          {
            v6 = fmin(v34, v6);
            *a5 = v6;
            v13 = *a4;
          }
          else
          {
            v13 = fmax(v13, v34);
            *a4 = v13;
            v6 = *a5;
          }
        }
        if (v13 <= v6)
        {
          v35 = a1[16];
          v36 = a1[17];
          v37 = a1[18];
          v38 = a2[3] * v35 + a2[4] * v36 + a2[5] * v37;
          v39 = a1[19] + *a2 * v35 + a2[1] * v36 + a2[2] * v37;
          v40 = v38 <= 0.0;
          if (v38 == 0.0)
          {
            if (v39 < 0.0)
              return 0;
          }
          else
          {
            v41 = -v39 / v38;
            if (v40)
            {
              v6 = fmin(v41, v6);
              *a5 = v6;
              v13 = *a4;
            }
            else
            {
              v13 = fmax(v13, v41);
              *a4 = v13;
              v6 = *a5;
            }
          }
          if (v13 <= v6)
          {
            v42 = a1[20];
            v43 = a1[21];
            v44 = a1[22];
            v45 = a2[3] * v42 + a2[4] * v43 + a2[5] * v44;
            v46 = a1[23] + *a2 * v42 + a2[1] * v43 + a2[2] * v44;
            v47 = v45 <= 0.0;
            if (v45 == 0.0)
            {
              if (v46 < 0.0)
                return 0;
            }
            else
            {
              v48 = -v46 / v45;
              if (v47)
              {
                v6 = fmin(v48, v6);
                *a5 = v6;
                v13 = *a4;
              }
              else
              {
                v13 = fmax(v13, v48);
                *a4 = v13;
                v6 = *a5;
              }
            }
            if (v13 <= v6)
              return 1;
          }
        }
        return 0;
      }
      v13 = fmax(v13, v20);
      *a4 = v13;
      v6 = *a5;
    }
    if (v13 > v6)
      return 0;
    goto LABEL_16;
  }
  return 0;
}

void sub_19F414DB0(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  md::LabelPart::~LabelPart(v1);
  _Unwind_Resume(a1);
}

void md::LabelPart::~LabelPart(void **this)
{
  *this = off_1E42AF8C0;
  free(this[59]);
  free(this[60]);
  free(this[62]);
  free(this[29]);
  free(this[30]);
  free(this[32]);
}

void std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D9200;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9200;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::operator()(uint64_t a1, double *a2)
{
  float64x2_t *v2;
  uint64_t v3;
  int32x2_t v4;
  int8x8_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float result;

  v2 = *(float64x2_t **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (int32x2_t)vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v2[60], v2[54], *a2), v2[56], a2[1]), v2[58], a2[2]), 1.0 / (v2[61].f64[1] + v2[55].f64[1] * *a2 + v2[57].f64[1] * a2[1] + v2[59].f64[1] * a2[2])));
  *(float *)v3 = fminf(*(float *)v4.i32, *(float *)v3);
  v5 = (int8x8_t)vrev64_s32(v4);
  v6.i32[0] = v5.i32[0];
  v6.i32[1] = HIDWORD(*(_QWORD *)(v3 + 4));
  v7.i32[1] = v5.i32[1];
  v7.i32[0] = *(_QWORD *)(v3 + 4);
  *(int8x8_t *)(v3 + 4) = vbsl_s8((int8x8_t)vcgt_f32(v7, v6), v5, *(int8x8_t *)(v3 + 4));
  result = fmaxf(*(float *)(v3 + 12), *(float *)&v4.i32[1]);
  *(float *)(v3 + 12) = result;
  return result;
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEEA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEEA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ManeuverPoint::Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BufferData::~BufferData(std::mutex *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E13D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E13D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::ConstantDataTyped<ggl::Tile::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::IndexDataTyped<unsigned short>::~IndexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::IndexDataTyped<unsigned short>::~IndexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::IndexDataTyped<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::IndexDataTyped<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gss::QueryOverrides::~QueryOverrides(gss::QueryOverrides *this)
{
  uint64_t v2;

  if (!*((_BYTE *)this + 14))
  {
    if (*(_QWORD *)this)
    {
      v2 = gss::Allocator::instance(this);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)this, *((unsigned __int16 *)this + 6));
      *(_QWORD *)this = 0;
    }
  }
}

gss::StyleKey *gss::StyleKey::StyleKey(gss::StyleKey *this, const gss::FeatureAttributeSet *a2, const gss::QueryOverrides *a3)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = gss::Allocator::instance(this);
  if (this != a2)
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)this, *(_QWORD *)a2, *((_QWORD **)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 39) = 0;
  *((_BYTE *)this + 47) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)this + 4, (uint64_t)a3);
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::shrink_to_fit((uint64_t)this + 32);
  return this;
}

void sub_19F415890(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_weak_ptr[abi:nn180100]()
{
  gss::StyleKey *v0;

  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  gss::StyleKey::~StyleKey(v0);
}

void gss::StyleKey::~StyleKey(gss::StyleKey *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 46) && *((_QWORD *)this + 4))
  {
    v2 = gss::Allocator::instance(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 4), *((unsigned __int16 *)this + 22));
    *((_QWORD *)this + 4) = 0;
  }
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v3, *((_QWORD *)this + 2) - v3);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,gss::Allocator>>>::reset[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  if (v1)
  {
    v2 = result;
    if (*(_BYTE *)(result + 16))
    {
      v3 = *(std::__shared_weak_count **)(v1 + 72);
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
      if (!*(_BYTE *)(v1 + 62) && *(_QWORD *)(v1 + 48))
      {
        v4 = gss::Allocator::instance((gss::Allocator *)v3);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v1 + 48), *(unsigned __int16 *)(v1 + 60));
        *(_QWORD *)(v1 + 48) = 0;
      }
      v5 = *(_QWORD *)(v1 + 16);
      if (v5)
      {
        *(_QWORD *)(v1 + 24) = v5;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 40) + 40))(*(_QWORD *)(v1 + 40), v5, *(_QWORD *)(v1 + 32) - v5);
      }
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(v2 + 8) + 40))(**(_QWORD **)(v2 + 8), v1, 80);
  }
  return result;
}

uint64_t std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t i;

  v8 = a1[2];
  v9 = *a1;
  if (a4 <= (v8 - *a1) >> 3)
  {
    v16 = a1 + 1;
    result = a1[1];
    v17 = (result - v9) >> 3;
    if (v17 >= a4)
    {
      for (i = v9; (_QWORD *)a2 != a3; a2 += 8)
      {
        *(_DWORD *)i = *(_DWORD *)a2;
        *(_WORD *)(i + 4) = *(_WORD *)(a2 + 4);
        i += 8;
      }
      v20 = (char *)(i - v9);
      result = v9;
    }
    else
    {
      v18 = (_QWORD *)(a2 + 8 * v17);
      if (result != v9)
      {
        do
        {
          *(_DWORD *)v9 = *(_DWORD *)a2;
          *(_WORD *)(v9 + 4) = *(_WORD *)(a2 + 4);
          a2 += 8;
          v9 += 8;
        }
        while ((_QWORD *)a2 != v18);
      }
      v19 = (_QWORD *)result;
      while (v18 != a3)
      {
        if (v19)
          *v19 = *v18;
        ++v18;
        ++v19;
      }
      v20 = (char *)v19 - result;
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      (*(void (**)(uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3]);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_29;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_29:
      abort();
    v13 = 8 * v12;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 8 * v12, 4);
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v13;
    v15 = (_QWORD *)result;
    if ((_QWORD *)a2 != a3)
    {
      v15 = (_QWORD *)result;
      do
      {
        if (v15)
          *v15 = *(_QWORD *)a2;
        a2 += 8;
        ++v15;
      }
      while ((_QWORD *)a2 != a3);
    }
    v20 = (char *)v15 - result;
    v16 = a1 + 1;
  }
  *v16 = &v20[result];
  return result;
}

void std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = a1 + 64;
  if (!*(_BYTE *)(a1 + 76) && *(_QWORD *)v2)
    operator delete(*(void **)v2);
  *(_QWORD *)(v2 + 5) = 0;
  *(_QWORD *)v2 = 0;
  v3 = (void **)(a1 + 48);
  if (!*(_BYTE *)(a1 + 60) && *v3)
    operator delete(*v3);
  *(_QWORD *)(a1 + 53) = 0;
  *v3 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v7)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v7 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v7)
      goto LABEL_17;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  JUMPOUT(0x1A1AF4E00);
}

void gss::Queryable<gss::PropertyID>::~Queryable(uint64_t a1)
{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42C2A28;
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x1A1AF4E00);
}

void gss::Queryable<gss::PropertyID>::sourceCartoStyle(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void gss::Queryable<gss::PropertyID>::targetCartoStyle(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

gss::Allocator *gss::StylePropertySet<gss::PropertyID>::shrink_to_fit(gss::Allocator *result)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  gss::Allocator *v6;
  gss::Allocator *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  gss::Allocator *v13;
  gss::Allocator *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  uint64_t v19;
  gss::Allocator *v20;
  gss::Allocator *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int16 v25;
  uint64_t v26;
  gss::Allocator *v27;
  gss::Allocator *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  uint64_t v33;
  gss::Allocator *v34;
  const void *v35;
  unint64_t v36;
  _OWORD *v37;
  int32x4_t *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  int32x4_t v43;
  int32x4_t *v44;
  int32x4_t v45;
  int32x4_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;

  v1 = (uint64_t)result;
  if (!*((_BYTE *)result + 14))
  {
    v2 = *((unsigned __int16 *)result + 5);
    v3 = *((unsigned __int8 *)result + 15);
    if (v2 != *((unsigned __int16 *)result + 6) || !*((_BYTE *)result + 15))
    {
      v4 = (2 * v2) | 1;
      v5 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 16))(v5, (unsigned __int16)(v4 + v2), 1);
      v6 = result;
      if (*(_QWORD *)v1)
      {
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1, result, (_BYTE *)result + v4, v3 == 0);
        v8 = gss::Allocator::instance(v7);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)v1, *(unsigned __int16 *)(v1 + 12));
      }
      *(_WORD *)(v1 + 12) = v2;
      *(_QWORD *)v1 = v6;
      *(_WORD *)(v1 + 8) = v4;
    }
  }
  if (!*(_BYTE *)(v1 + 30))
  {
    v9 = *(unsigned __int16 *)(v1 + 26);
    v10 = *(unsigned __int8 *)(v1 + 31);
    if (v9 != *(unsigned __int16 *)(v1 + 28) || !*(_BYTE *)(v1 + 31))
    {
      v11 = (2 * v9) | 1;
      v12 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, (unsigned __int16)(v11 + v9), 1);
      v13 = result;
      if (*(_QWORD *)(v1 + 16))
      {
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1 + 16, result, (_BYTE *)result + v11, v10 == 0);
        v15 = gss::Allocator::instance(v14);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v1 + 16), *(unsigned __int16 *)(v1 + 28));
      }
      *(_WORD *)(v1 + 28) = v9;
      *(_QWORD *)(v1 + 16) = v13;
      *(_WORD *)(v1 + 24) = v11;
    }
  }
  if (!*(_BYTE *)(v1 + 46))
  {
    v16 = *(unsigned __int16 *)(v1 + 42);
    v17 = *(unsigned __int8 *)(v1 + 47);
    if (v16 != *(unsigned __int16 *)(v1 + 44) || !*(_BYTE *)(v1 + 47))
    {
      v18 = ((2 * v16) & 0xFFFC) + 4;
      v19 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 16))(v19, (unsigned __int16)(v18 + 4 * v16) & 0xFFFC, 1);
      v20 = result;
      if (*(_QWORD *)(v1 + 32))
      {
        geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1 + 32, result, (gss::Allocator *)((char *)result + v18), v17 == 0);
        v22 = gss::Allocator::instance(v21);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 40))(v22, *(_QWORD *)(v1 + 32), *(unsigned __int16 *)(v1 + 44));
      }
      *(_WORD *)(v1 + 44) = v16;
      *(_QWORD *)(v1 + 32) = v20;
      *(_WORD *)(v1 + 40) = v18;
    }
  }
  if (!*(_BYTE *)(v1 + 62))
  {
    v23 = *(unsigned __int16 *)(v1 + 58);
    v24 = *(unsigned __int8 *)(v1 + 63);
    if (v23 != *(unsigned __int16 *)(v1 + 60) || !*(_BYTE *)(v1 + 63))
    {
      v25 = ((2 * v23) & 0xFFF8) + 8;
      v26 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 16))(v26, (unsigned __int16)(v25 + 8 * v23) & 0xFFF8, 1);
      v27 = result;
      if (*(_QWORD *)(v1 + 48))
      {
        geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1 + 48, result, (gss::Allocator *)((char *)result + v25), v24 == 0);
        v29 = gss::Allocator::instance(v28);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v1 + 48), *(unsigned __int16 *)(v1 + 60));
      }
      *(_WORD *)(v1 + 60) = v23;
      *(_QWORD *)(v1 + 48) = v27;
      *(_WORD *)(v1 + 56) = v25;
    }
  }
  if (!*(_BYTE *)(v1 + 78))
  {
    v30 = *(unsigned __int16 *)(v1 + 74);
    v31 = *(unsigned __int8 *)(v1 + 79);
    if (v30 != *(unsigned __int16 *)(v1 + 76) || !*(_BYTE *)(v1 + 79))
    {
      v32 = ((2 * v30) & 0xFFF8) + 8;
      v33 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v33 + 16))(v33, (unsigned __int16)(v32 + 16 * v30) & 0xFFF8, 1);
      v34 = result;
      v35 = *(const void **)(v1 + 64);
      if (!v35)
      {
LABEL_45:
        *(_WORD *)(v1 + 76) = v30;
        *(_QWORD *)(v1 + 64) = v34;
        *(_WORD *)(v1 + 72) = v32;
        return result;
      }
      v36 = *(unsigned __int16 *)(v1 + 74);
      if (!*(_WORD *)(v1 + 74))
      {
LABEL_44:
        v51 = gss::Allocator::instance(result);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, *(_QWORD *)(v1 + 64), *(unsigned __int16 *)(v1 + 76));
        goto LABEL_45;
      }
      v37 = (_OWORD *)((char *)result + v32);
      if (v31)
      {
        result = (gss::Allocator *)memmove(result, v35, 2 * v36);
        if (*(_WORD *)(v1 + 74))
          result = (gss::Allocator *)memmove((char *)v34 + v32, (const void *)(*(_QWORD *)(v1 + 64) + *(unsigned __int16 *)(v1 + 72)), 16 * *(unsigned __int16 *)(v1 + 74));
        goto LABEL_44;
      }
      v38 = (int32x4_t *)operator new(4 * v36);
      bzero(v38, 4 * v36);
      v39 = (unsigned int *)v38 + v36;
      if (4 * v36 - 4 >= 0x1C)
      {
        v42 = ((4 * v36 - 4) >> 2) + 1;
        v40 = v42 & 0x7FFFFFFFFFFFFFF8;
        v43 = (int32x4_t)xmmword_19FFB2E90;
        v44 = v38 + 1;
        v45.i64[0] = 0x400000004;
        v45.i64[1] = 0x400000004;
        v46.i64[0] = 0x800000008;
        v46.i64[1] = 0x800000008;
        v47 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v44[-1] = v43;
          *v44 = vaddq_s32(v43, v45);
          v43 = vaddq_s32(v43, v46);
          v44 += 2;
          v47 -= 8;
        }
        while (v47);
        if (v42 == v40)
          goto LABEL_40;
        v41 = (unsigned int *)v38 + (v42 & 0x7FFFFFFFFFFFFFF8);
      }
      else
      {
        LODWORD(v40) = 0;
        v41 = (unsigned int *)v38;
      }
      do
      {
        *v41++ = v40;
        LODWORD(v40) = v40 + 1;
      }
      while (v41 != v39);
LABEL_40:
      v52 = (uint64_t *)(v1 + 64);
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v38, v39, &v52, 126 - 2 * __clz(v36), 1);
      if (*(_WORD *)(v1 + 74))
      {
        v48 = 0;
        do
        {
          v49 = v38->u32[v48];
          v50 = *(_QWORD *)(v1 + 64);
          *((_WORD *)v34 + v48) = *(_WORD *)(v50 + 2 * v49);
          *v37++ = *(_OWORD *)(v50 + *(unsigned __int16 *)(v1 + 72) + 16 * v49);
          ++v48;
        }
        while (v48 < *(unsigned __int16 *)(v1 + 74));
      }
      *(_BYTE *)(v1 + 79) = 1;
      operator delete(v38);
      goto LABEL_44;
    }
  }
  return result;
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::__unordered_map_hasher<gss::StylePropertySet<gss::PropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::hash<gss::StylePropertySet<gss::PropertyID>>,std::equal_to<gss::StylePropertySet<gss::PropertyID>>,true>,std::__unordered_map_equal<gss::StylePropertySet<gss::PropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::equal_to<gss::StylePropertySet<gss::PropertyID>>,std::hash<gss::StylePropertySet<gss::PropertyID>>,true>,std::allocator<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>>>::__emplace_unique_key_args<gss::StylePropertySet<gss::PropertyID>,gss::StylePropertySet<gss::PropertyID>,unsigned char &>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  unint64_t v45;
  float *v46;
  float *i;
  float v48;
  uint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  unsigned __int16 **v52;
  unsigned __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  size_t prime;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _QWORD *j;
  size_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  _QWORD *v84;
  unint64_t v85;
  void *v87;
  _QWORD *v90;

  v9 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10))
  {
    v10 = 0;
    v14 = *(unsigned __int16 *)(a2 + 26);
    if (!*(_WORD *)(a2 + 26))
      goto LABEL_19;
    goto LABEL_12;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    if (v12 < v9)
      v11 = (unsigned __int16 *)(*(_QWORD *)a2 + 2 * v12);
    v4 = (_QWORD *)((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2));
    v10 ^= (unint64_t)v4 + *v11;
    v13 = v12 + 1;
    if (v12 + 1 < v9)
      ++v12;
    else
      v12 = *(unsigned __int16 *)(a2 + 10);
  }
  while (v13 < v9);
  v14 = *(unsigned __int16 *)(a2 + 26);
  if (*(_WORD *)(a2 + 26))
  {
LABEL_12:
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v16 < v14)
      {
        v15 = (unsigned __int16 *)(v17 + 2 * v16);
        v4 = (_QWORD *)(v17 + *(unsigned __int16 *)(a2 + 24) + v16);
      }
      v18 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v15) ^ v10;
      v10 = (*(unsigned __int8 *)v4 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
      v19 = v16 + 1;
      if (v16 + 1 < v14)
        ++v16;
      else
        v16 = v14;
    }
    while (v19 < v14);
  }
LABEL_19:
  v20 = *(unsigned __int16 *)(a2 + 42);
  if (*(_WORD *)(a2 + 42))
  {
    v21 = 0;
    v22 = 0;
    v23 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v22 < v20)
      {
        v21 = (unsigned __int16 *)(v23 + 2 * v22);
        v4 = (_QWORD *)(v23 + *(unsigned __int16 *)(a2 + 40) + 4 * v22);
      }
      v24 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v21) ^ v10;
      v10 = (*(unsigned int *)v4 - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
      v25 = v22 + 1;
      if (v22 + 1 < v20)
        ++v22;
      else
        v22 = *(unsigned __int16 *)(a2 + 42);
    }
    while (v25 < v20);
  }
  v26 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    v27 = 0;
    v28 = 0;
    v29 = *(_QWORD *)(a2 + 48);
    do
    {
      if (v28 < v26)
      {
        v27 = (unsigned __int16 *)(v29 + 2 * v28);
        v4 = (_QWORD *)(v29 + *(unsigned __int16 *)(a2 + 56) + 8 * v28);
      }
      v30 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v27) ^ v10;
      v10 = (*v4 - 0x61C8864680B583EBLL + (v30 << 6) + (v30 >> 2)) ^ v30;
      v31 = v28 + 1;
      if (v28 + 1 < v26)
        ++v28;
      else
        v28 = *(unsigned __int16 *)(a2 + 58);
    }
    while (v31 < v26);
  }
  v32 = *(unsigned __int16 *)(a2 + 74);
  if (*(_WORD *)(a2 + 74))
  {
    LODWORD(v6) = 0;
    v33 = 0;
    v34 = *(_QWORD *)(a2 + 64);
    v35 = v34 + *(unsigned __int16 *)(a2 + 72);
    do
    {
      if (v6 < v32)
      {
        v5 = (unsigned __int8 *)(v35 + 16 * v6);
        v33 = (unsigned __int16 *)(v34 + 2 * v6);
      }
      v10 ^= (v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v33;
      v38 = *v5;
      if (v38 == 2)
      {
        v43 = *((_QWORD *)v5 + 1);
        v44 = *(float *)(v43 + 32);
        v45 = (LODWORD(v44) - 0x61C8864680B57FA7) ^ 0x11;
        if (v44 == 0.0)
          v45 = 0x9E3779B97F4A8048;
        v46 = *(float **)v43;
        for (i = *(float **)(v43 + 8); v46 != i; v45 ^= (v45 >> 2) + (v45 << 6) + v49)
        {
          v48 = *v46++;
          v49 = LODWORD(v48) - 0x61C8864680B583EBLL;
          if (v48 == 0.0)
            v49 = 0x9E3779B97F4A7C15;
        }
        v36 = (v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + v45;
      }
      else
      {
        if (v38 != 1)
          goto LABEL_39;
        v39 = *((_QWORD *)v5 + 1);
        v40 = *(char *)(v39 + 23);
        if (v40 >= 0)
          v41 = (uint64_t *)*((_QWORD *)v5 + 1);
        else
          v41 = *(uint64_t **)v39;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(v39 + 23);
        else
          v42 = *(_QWORD *)(v39 + 8);
        v36 = (v10 << 6)
            - 0x61C8864680B583EBLL
            + (v10 >> 2)
            + std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v41, v42);
      }
      v10 ^= v36;
LABEL_39:
      v37 = v6 + 1;
      if ((int)v6 + 1 < v32)
        v6 = (v6 + 1);
      else
        v6 = v32;
    }
    while (v37 < v32);
  }
  v50 = *(_QWORD *)(a1 + 8);
  if (v50)
  {
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      v6 = v10;
      if (v10 >= v50)
        v6 = v10 % v50;
    }
    else
    {
      v6 = (v50 - 1) & v10;
    }
    v52 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v6);
    if (v52)
    {
      v53 = *v52;
      if (*v52)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            v55 = *((_QWORD *)v53 + 1);
            if (v55 == v10)
            {
              if ((gss::StylePropertySet<gss::PropertyID>::operator==((unsigned __int16 **)v53 + 2, (unsigned __int16 **)a2) & 1) != 0)return v53;
            }
            else if ((v55 & (v50 - 1)) != v6)
            {
              goto LABEL_83;
            }
            v53 = *(unsigned __int16 **)v53;
            if (!v53)
              goto LABEL_83;
          }
        }
        do
        {
          v54 = *((_QWORD *)v53 + 1);
          if (v54 == v10)
          {
            if ((gss::StylePropertySet<gss::PropertyID>::operator==((unsigned __int16 **)v53 + 2, (unsigned __int16 **)a2) & 1) != 0)return v53;
          }
          else
          {
            if (v54 >= v50)
              v54 %= v50;
            if (v54 != v6)
              break;
          }
          v53 = *(unsigned __int16 **)v53;
        }
        while (v53);
      }
    }
  }
LABEL_83:
  v56 = (_QWORD *)(a1 + 16);
  v90 = operator new(0x68uLL);
  *v90 = 0;
  v90[1] = v10;
  v57 = *(_QWORD *)(a3 + 8);
  v90[2] = *(_QWORD *)a3;
  *((_DWORD *)v90 + 6) = v57;
  *((_WORD *)v90 + 14) = WORD2(v57);
  *((_WORD *)v90 + 15) = *(_WORD *)(a3 + 14);
  *(_QWORD *)(a3 + 7) = 0;
  *(_QWORD *)a3 = 0;
  v58 = *(_QWORD *)(a3 + 24);
  v90[4] = *(_QWORD *)(a3 + 16);
  *((_DWORD *)v90 + 10) = v58;
  *((_WORD *)v90 + 22) = WORD2(v58);
  *((_WORD *)v90 + 23) = *(_WORD *)(a3 + 30);
  v59 = *(_QWORD *)(a3 + 40);
  v90[6] = *(_QWORD *)(a3 + 32);
  *((_DWORD *)v90 + 14) = v59;
  *((_WORD *)v90 + 30) = WORD2(v59);
  *((_WORD *)v90 + 31) = *(_WORD *)(a3 + 46);
  v60 = *(_QWORD *)(a3 + 56);
  v90[8] = *(_QWORD *)(a3 + 48);
  *((_DWORD *)v90 + 18) = v60;
  *((_WORD *)v90 + 38) = WORD2(v60);
  *((_BYTE *)v90 + 78) = *(_BYTE *)(a3 + 62);
  *((_BYTE *)v90 + 79) = *(_BYTE *)(a3 + 63);
  v61 = *(_QWORD *)(a3 + 72);
  v90[10] = *(_QWORD *)(a3 + 64);
  *(_BYTE *)(a3 + 15) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 23) = 0;
  *(_BYTE *)(a3 + 31) = 1;
  *(_QWORD *)(a3 + 39) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 47) = 1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 55) = 0;
  *(_BYTE *)(a3 + 63) = 1;
  *((_DWORD *)v90 + 22) = v61;
  *((_WORD *)v90 + 46) = WORD2(v61);
  *((_BYTE *)v90 + 94) = *(_BYTE *)(a3 + 78);
  *((_BYTE *)v90 + 95) = *(_BYTE *)(a3 + 79);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 71) = 0;
  *(_BYTE *)(a3 + 79) = 1;
  *((_BYTE *)v90 + 96) = *a4;
  v62 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v63 = *(float *)(a1 + 32);
  if (!v50 || (float)(v63 * (float)v50) < v62)
  {
    v64 = v50 < 3 || (v50 & (v50 - 1)) != 0;
    v65 = v64 | (2 * v50);
    v66 = vcvtps_u32_f32(v62 / v63);
    if (v65 <= v66)
      prime = v66;
    else
      prime = v65;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v50 = *(_QWORD *)(a1 + 8);
    if (prime <= v50)
    {
      if (prime >= v50)
        goto LABEL_121;
      v78 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v50 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
      {
        v78 = std::__next_prime(v78);
      }
      else
      {
        v80 = 1 << -(char)__clz(v78 - 1);
        if (v78 >= 2)
          v78 = v80;
      }
      if (prime <= v78)
        prime = v78;
      if (prime >= v50)
      {
        v50 = *(_QWORD *)(a1 + 8);
LABEL_121:
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v10 >= v50)
            v6 = v10 % v50;
          else
            v6 = v10;
        }
        else
        {
          v6 = (v50 - 1) & v10;
        }
        goto LABEL_134;
      }
      if (!prime)
      {
        v87 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v87)
          operator delete(v87);
        v50 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_121;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v68 = operator new(8 * prime);
    v69 = *(void **)a1;
    *(_QWORD *)a1 = v68;
    if (v69)
      operator delete(v69);
    v70 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v70++) = 0;
    while (prime != v70);
    v71 = (_QWORD *)*v56;
    if (!*v56)
    {
LABEL_120:
      v50 = prime;
      goto LABEL_121;
    }
    v72 = v71[1];
    v73 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v74 = v72 & v73;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v74) = v56;
      for (j = (_QWORD *)*v71; *v71; j = (_QWORD *)*v71)
      {
        v76 = j[1] & v73;
        if (v76 == v74)
        {
          v71 = j;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v76))
        {
          *v71 = *j;
          v77 = 8 * v76;
          *j = **(_QWORD **)(*(_QWORD *)a1 + v77);
          **(_QWORD **)(*(_QWORD *)a1 + v77) = j;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = v71;
          v71 = j;
          v74 = v76;
        }
      }
      goto LABEL_120;
    }
    if (v72 >= prime)
      v72 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v72) = v56;
    v81 = (_QWORD *)*v71;
    if (!*v71)
      goto LABEL_120;
    while (1)
    {
      v83 = v81[1];
      if (v83 >= prime)
        v83 %= prime;
      if (v83 != v72)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v83))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v83) = v71;
          goto LABEL_125;
        }
        *v71 = *v81;
        v82 = 8 * v83;
        *v81 = **(_QWORD **)(*(_QWORD *)a1 + v82);
        **(_QWORD **)(*(_QWORD *)a1 + v82) = v81;
        v81 = v71;
      }
      v83 = v72;
LABEL_125:
      v71 = v81;
      v81 = (_QWORD *)*v81;
      v72 = v83;
      if (!v81)
        goto LABEL_120;
    }
  }
LABEL_134:
  v84 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  v53 = (unsigned __int16 *)v90;
  if (v84)
  {
    *v90 = *v84;
LABEL_142:
    *v84 = v90;
    goto LABEL_143;
  }
  *v90 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v90;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v56;
  if (*v90)
  {
    v85 = *(_QWORD *)(*v90 + 8);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v85 >= v50)
        v85 %= v50;
    }
    else
    {
      v85 &= v50 - 1;
    }
    v84 = (_QWORD *)(*(_QWORD *)a1 + 8 * v85);
    goto LABEL_142;
  }
LABEL_143:
  ++*(_QWORD *)(a1 + 24);
  return v53;
}

void sub_19F4169EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gss::StylePropertySet<gss::PropertyID>::~StylePropertySet(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1;
  if (!*(_BYTE *)(a1 + 78) && *(_QWORD *)(a1 + 64))
  {
    v2 = gss::Allocator::instance((gss::Allocator *)a1);
    a1 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(v1 + 64), *(unsigned __int16 *)(v1 + 76));
    *(_QWORD *)(v1 + 64) = 0;
  }
  if (!*(_BYTE *)(v1 + 62) && *(_QWORD *)(v1 + 48))
  {
    v3 = gss::Allocator::instance((gss::Allocator *)a1);
    a1 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v1 + 48), *(unsigned __int16 *)(v1 + 60));
    *(_QWORD *)(v1 + 48) = 0;
  }
  if (!*(_BYTE *)(v1 + 46) && *(_QWORD *)(v1 + 32))
  {
    v4 = gss::Allocator::instance((gss::Allocator *)a1);
    a1 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v1 + 32), *(unsigned __int16 *)(v1 + 44));
    *(_QWORD *)(v1 + 32) = 0;
  }
  if (!*(_BYTE *)(v1 + 30) && *(_QWORD *)(v1 + 16))
  {
    v5 = gss::Allocator::instance((gss::Allocator *)a1);
    a1 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v1 + 16), *(unsigned __int16 *)(v1 + 28));
    *(_QWORD *)(v1 + 16) = 0;
  }
  if (!*(_BYTE *)(v1 + 14) && *(_QWORD *)v1)
  {
    v6 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)v1, *(unsigned __int16 *)(v1 + 12));
    *(_QWORD *)v1 = 0;
  }
  return v1;
}

gss::Allocator *geo::intern_vector<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::reallocate(gss::Allocator **a1, uint64_t a2)
{
  uint64_t v4;
  gss::Allocator *result;
  gss::Allocator *v6;
  gss::Allocator *v7;
  _WORD *v8;
  __int16 v9;
  int v10;
  gss::Allocator *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 80 * a2, 8);
  v6 = result;
  v7 = *a1;
  if (*a1)
  {
    v8 = a1 + 1;
    v9 = *((_WORD *)a1 + 4);
    if (v9)
    {
      v10 = *((unsigned __int16 *)a1 + 4);
      v11 = result;
      do
      {
        *(_QWORD *)((char *)v11 + 7) = 0;
        *(_QWORD *)v11 = 0;
        *((_BYTE *)v11 + 15) = 1;
        v12 = *(_QWORD *)v7;
        v13 = *((_QWORD *)v7 + 1);
        *((_DWORD *)v11 + 2) = v13;
        *((_WORD *)v11 + 6) = WORD2(v13);
        *(_QWORD *)v11 = v12;
        *((_BYTE *)v11 + 14) = *((_BYTE *)v7 + 14);
        *((_BYTE *)v11 + 15) = *((_BYTE *)v7 + 15);
        *(_QWORD *)((char *)v7 + 7) = 0;
        *(_QWORD *)v7 = 0;
        *((_BYTE *)v7 + 15) = 1;
        *(_QWORD *)((char *)v11 + 23) = 0;
        *((_QWORD *)v11 + 2) = 0;
        *((_BYTE *)v11 + 31) = 1;
        v14 = *((_QWORD *)v7 + 2);
        v15 = *((_QWORD *)v7 + 3);
        *((_DWORD *)v11 + 6) = v15;
        *((_WORD *)v11 + 14) = WORD2(v15);
        *((_QWORD *)v11 + 2) = v14;
        *((_BYTE *)v11 + 30) = *((_BYTE *)v7 + 30);
        *((_BYTE *)v11 + 31) = *((_BYTE *)v7 + 31);
        *(_QWORD *)((char *)v7 + 23) = 0;
        *((_QWORD *)v7 + 2) = 0;
        *((_BYTE *)v7 + 31) = 1;
        *(_QWORD *)((char *)v11 + 39) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_BYTE *)v11 + 47) = 1;
        v16 = *((_QWORD *)v7 + 4);
        v17 = *((_QWORD *)v7 + 5);
        *((_DWORD *)v11 + 10) = v17;
        *((_WORD *)v11 + 22) = WORD2(v17);
        *((_QWORD *)v11 + 4) = v16;
        *((_BYTE *)v11 + 46) = *((_BYTE *)v7 + 46);
        *((_BYTE *)v11 + 47) = *((_BYTE *)v7 + 47);
        *(_QWORD *)((char *)v7 + 39) = 0;
        *((_QWORD *)v7 + 4) = 0;
        *((_BYTE *)v7 + 47) = 1;
        *(_QWORD *)((char *)v11 + 55) = 0;
        *((_QWORD *)v11 + 6) = 0;
        *((_BYTE *)v11 + 63) = 1;
        v18 = *((_QWORD *)v7 + 6);
        v19 = *((_QWORD *)v7 + 7);
        *((_DWORD *)v11 + 14) = v19;
        *((_WORD *)v11 + 30) = WORD2(v19);
        *((_QWORD *)v11 + 6) = v18;
        *((_BYTE *)v11 + 62) = *((_BYTE *)v7 + 62);
        *((_BYTE *)v11 + 63) = *((_BYTE *)v7 + 63);
        *(_QWORD *)((char *)v7 + 55) = 0;
        *((_QWORD *)v7 + 6) = 0;
        *((_BYTE *)v7 + 63) = 1;
        *(_QWORD *)((char *)v11 + 71) = 0;
        *((_QWORD *)v11 + 8) = 0;
        v20 = *((_QWORD *)v7 + 8);
        v21 = *((_QWORD *)v7 + 9);
        *((_DWORD *)v11 + 18) = v21;
        *((_WORD *)v11 + 38) = WORD2(v21);
        *((_BYTE *)v11 + 79) = 1;
        *((_QWORD *)v11 + 8) = v20;
        *((_BYTE *)v11 + 78) = *((_BYTE *)v7 + 78);
        *((_BYTE *)v11 + 79) = *((_BYTE *)v7 + 79);
        *(_QWORD *)((char *)v7 + 71) = 0;
        --v10;
        v11 = (gss::Allocator *)((char *)v11 + 80);
        *((_QWORD *)v7 + 8) = 0;
        *((_BYTE *)v7 + 79) = 1;
        v7 = (gss::Allocator *)((char *)v7 + 80);
      }
      while ((_WORD)v10);
    }
    if (!*((_BYTE *)a1 + 12))
    {
      result = *a1;
      if (*a1)
      {
        if (*v8)
        {
          v22 = 80 * (unsigned __int16)*v8;
          do
          {
            result = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)result) + 80);
            v22 -= 80;
          }
          while (v22);
        }
        v23 = gss::Allocator::instance(result);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, gss::Allocator *, uint64_t))(*(_QWORD *)v23 + 40))(v23, *a1, 80 * *((unsigned __int16 *)a1 + 5));
      }
    }
    *(_DWORD *)v8 = 0;
    *((_BYTE *)a1 + 12) = 0;
    *v8 = v9;
  }
  *((_WORD *)a1 + 5) = a2;
  *a1 = v6;
  return result;
}

uint64_t std::unordered_map<gss::StylePropertySet<gss::PropertyID>,unsigned char>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_DWORD *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v7 = *result;
  v8 = *(unsigned __int16 *)(a6 + 2 * v6);
  v9 = *(unsigned __int16 *)(a6 + 2 * v7);
  v10 = *a3;
  v11 = *(unsigned __int16 *)(a6 + 2 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      v7 = *a3;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *result;
    if (*(unsigned __int16 *)(a6 + 2 * v12) >= *(unsigned __int16 *)(a6 + 2 * v13))
    {
      v7 = v6;
      v10 = v6;
      goto LABEL_14;
    }
    *result = v12;
    *a2 = v13;
    v7 = *a3;
  }
  else
  {
    if (v11 >= v8)
    {
      *result = v6;
      *a2 = v7;
      v10 = *a3;
      if (*(unsigned __int16 *)(a6 + 2 * *a3) >= v9)
      {
        v7 = *a3;
        goto LABEL_14;
      }
      *a2 = v10;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
  }
  v10 = v7;
LABEL_14:
  v14 = *a4;
  if (*(unsigned __int16 *)(a6 + 2 * v14) < *(unsigned __int16 *)(a6 + 2 * v7))
  {
    *a3 = v14;
    *a4 = v10;
    v15 = *a3;
    v16 = *a2;
    if (*(unsigned __int16 *)(a6 + 2 * v15) < *(unsigned __int16 *)(a6 + 2 * v16))
    {
      *a2 = v15;
      *a3 = v16;
      v17 = *a2;
      v18 = *result;
      if (*(unsigned __int16 *)(a6 + 2 * v17) < *(unsigned __int16 *)(a6 + 2 * v18))
      {
        *result = v17;
        *a2 = v18;
      }
    }
  }
  v19 = *a5;
  v20 = *a4;
  if (*(unsigned __int16 *)(a6 + 2 * v19) < *(unsigned __int16 *)(a6 + 2 * v20))
  {
    *a4 = v19;
    *a5 = v20;
    v21 = *a4;
    v22 = *a3;
    if (*(unsigned __int16 *)(a6 + 2 * v21) < *(unsigned __int16 *)(a6 + 2 * v22))
    {
      *a3 = v21;
      *a4 = v22;
      v23 = *a3;
      v24 = *a2;
      if (*(unsigned __int16 *)(a6 + 2 * v23) < *(unsigned __int16 *)(a6 + 2 * v24))
      {
        *a2 = v23;
        *a3 = v24;
        v25 = *a2;
        v26 = *result;
        if (*(unsigned __int16 *)(a6 + 2 * v25) < *(unsigned __int16 *)(a6 + 2 * v26))
        {
          *result = v25;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  uint64_t i;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int16 *)(*a3 + 2 * v4) < *(unsigned __int16 *)(*a3 + 2 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int16 *)(*a3 + 2 * v17);
      v20 = *(unsigned __int16 *)(*a3 + 2 * v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int16 *)(*a3 + 2 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v46 = *a1;
          v45 = a1[1];
          if (*(unsigned __int16 *)(v18 + 2 * v45) < *(unsigned __int16 *)(v18 + 2 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v47 = *(a2 - 1);
        if (*(unsigned __int16 *)(v18 + 2 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a1;
      v28 = *a3;
      v29 = *(unsigned __int16 *)(*a3 + 2 * v24);
      v30 = *(unsigned __int16 *)(*a3 + 2 * v27);
      v31 = v26;
      v32 = *(unsigned __int16 *)(*a3 + 2 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          v33 = a1;
          *v23 = v26;
          *v25 = v24;
          v34 = a1 + 1;
          v35 = v24;
          v26 = v24;
          if (v32 >= v30)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *v33 = v31;
          *v34 = v27;
          v26 = v35;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        v34 = a1 + 2;
        v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30)
          goto LABEL_37;
      }
      LODWORD(v24) = v26;
LABEL_39:
      v48 = *(a2 - 1);
      if (*(unsigned __int16 *)(v28 + 2 * v48) < *(unsigned __int16 *)(v28 + 2 * v26))
      {
        *v25 = v48;
        *(a2 - 1) = v24;
        v49 = *v25;
        v50 = *v23;
        v51 = *(unsigned __int16 *)(v28 + 2 * v49);
        if (v51 < *(unsigned __int16 *)(v28 + 2 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          v52 = *a1;
          if (v51 < *(unsigned __int16 *)(v28 + 2 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int16 *)(*a3 + 2 * v8);
      v11 = *a1;
      v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      v13 = *(unsigned __int16 *)(v9 + 2 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v36 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v37 = 0;
      for (i = 12; ; i += 4)
      {
        v40 = *v36;
        v41 = *v7;
        v42 = *(unsigned __int16 *)(v9 + 2 * v40);
        if (v42 < *(unsigned __int16 *)(v9 + 2 * v41))
        {
          v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            v44 = v43 - 4;
            if (v43 == 4)
            {
              v39 = a1;
              goto LABEL_21;
            }
            v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(unsigned __int16 *)(v9 + 2 * v41));
          v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *v39 = v40;
          if (++v37 == 8)
            break;
        }
        v7 = v36++;
        if (v36 == a2)
          return 1;
      }
      return v36 + 1 == a2;
  }
}

char *std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>(char **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
LABEL_40:
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v2];
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)v8 = v9;
  v10 = (uint64_t *)a2[4];
  if (v10)
  {
    if (v10 == a2 + 1)
    {
      *((_QWORD *)v8 + 4) = v8 + 8;
      (*(void (**)(uint64_t *))(*v10 + 24))(v10);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v10;
      a2[4] = 0;
    }
  }
  else
  {
    *((_QWORD *)v8 + 4) = 0;
  }
  v11 = &v7[40 * v6];
  v12 = v8 + 40;
  v14 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v15 = a1[1];
    do
    {
      v16 = v8;
      v17 = *((_QWORD *)v15 - 5);
      v15 -= 40;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v8 - 5) = v17;
      v8 -= 40;
      v18 = (char *)*((_QWORD *)v15 + 4);
      if (v18)
      {
        if (v13 - 32 == v18)
        {
          *((_QWORD *)v16 - 1) = v8 + 8;
          (*(void (**)(_QWORD))(**((_QWORD **)v13 - 1) + 24))(*((_QWORD *)v13 - 1));
        }
        else
        {
          *((_QWORD *)v16 - 1) = v18;
          *((_QWORD *)v13 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v16 - 1) = 0;
      }
      v13 = v15;
    }
    while (v15 != v14);
    v13 = *a1;
    v19 = a1[1];
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
    if (v19 != v13)
    {
      v20 = v19;
      do
      {
        v24 = *((_QWORD *)v20 - 5);
        v20 -= 40;
        v23 = v24;
        *(_QWORD *)v20 = 0;
        if (v24)
        {
          v27 = v23;
          v25 = *((_QWORD *)v19 - 1);
          if (!v25)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_40;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v27);
        }
        v21 = (char *)*((_QWORD *)v19 - 1);
        if (v19 - 32 == v21)
        {
          v21 = v19 - 32;
          v22 = 4;
        }
        else
        {
          if (!v21)
            goto LABEL_28;
          v22 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_28:
        v19 = v20;
      }
      while (v20 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v12;
}

uint64_t *std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x19F4174C8);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &unk_1E42D5CC8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v3, a1[2]);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  uint64_t i;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int16 *)(*a3 + 2 * v4) < *(unsigned __int16 *)(*a3 + 2 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int16 *)(*a3 + 2 * v17);
      v20 = *(unsigned __int16 *)(*a3 + 2 * v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int16 *)(*a3 + 2 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v46 = *a1;
          v45 = a1[1];
          if (*(unsigned __int16 *)(v18 + 2 * v45) < *(unsigned __int16 *)(v18 + 2 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v47 = *(a2 - 1);
        if (*(unsigned __int16 *)(v18 + 2 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a1;
      v28 = *a3;
      v29 = *(unsigned __int16 *)(*a3 + 2 * v24);
      v30 = *(unsigned __int16 *)(*a3 + 2 * v27);
      v31 = v26;
      v32 = *(unsigned __int16 *)(*a3 + 2 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          v33 = a1;
          *v23 = v26;
          *v25 = v24;
          v34 = a1 + 1;
          v35 = v24;
          v26 = v24;
          if (v32 >= v30)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *v33 = v31;
          *v34 = v27;
          v26 = v35;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        v34 = a1 + 2;
        v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30)
          goto LABEL_37;
      }
      LODWORD(v24) = v26;
LABEL_39:
      v48 = *(a2 - 1);
      if (*(unsigned __int16 *)(v28 + 2 * v48) < *(unsigned __int16 *)(v28 + 2 * v26))
      {
        *v25 = v48;
        *(a2 - 1) = v24;
        v49 = *v25;
        v50 = *v23;
        v51 = *(unsigned __int16 *)(v28 + 2 * v49);
        if (v51 < *(unsigned __int16 *)(v28 + 2 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          v52 = *a1;
          if (v51 < *(unsigned __int16 *)(v28 + 2 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int16 *)(*a3 + 2 * v8);
      v11 = *a1;
      v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      v13 = *(unsigned __int16 *)(v9 + 2 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v36 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v37 = 0;
      for (i = 12; ; i += 4)
      {
        v40 = *v36;
        v41 = *v7;
        v42 = *(unsigned __int16 *)(v9 + 2 * v40);
        if (v42 < *(unsigned __int16 *)(v9 + 2 * v41))
        {
          v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            v44 = v43 - 4;
            if (v43 == 4)
            {
              v39 = a1;
              goto LABEL_21;
            }
            v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(unsigned __int16 *)(v9 + 2 * v41));
          v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *v39 = v40;
          if (++v37 == 8)
            break;
        }
        v7 = v36++;
        if (v36 == a2)
          return 1;
      }
      return v36 + 1 == a2;
  }
}

void std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D5C80;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v3, a1[2]);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  uint64_t i;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int16 *)(*a3 + 2 * v4) < *(unsigned __int16 *)(*a3 + 2 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int16 *)(*a3 + 2 * v17);
      v20 = *(unsigned __int16 *)(*a3 + 2 * v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int16 *)(*a3 + 2 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v46 = *a1;
          v45 = a1[1];
          if (*(unsigned __int16 *)(v18 + 2 * v45) < *(unsigned __int16 *)(v18 + 2 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v47 = *(a2 - 1);
        if (*(unsigned __int16 *)(v18 + 2 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a1;
      v28 = *a3;
      v29 = *(unsigned __int16 *)(*a3 + 2 * v24);
      v30 = *(unsigned __int16 *)(*a3 + 2 * v27);
      v31 = v26;
      v32 = *(unsigned __int16 *)(*a3 + 2 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          v33 = a1;
          *v23 = v26;
          *v25 = v24;
          v34 = a1 + 1;
          v35 = v24;
          v26 = v24;
          if (v32 >= v30)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *v33 = v31;
          *v34 = v27;
          v26 = v35;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        v34 = a1 + 2;
        v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30)
          goto LABEL_37;
      }
      LODWORD(v24) = v26;
LABEL_39:
      v48 = *(a2 - 1);
      if (*(unsigned __int16 *)(v28 + 2 * v48) < *(unsigned __int16 *)(v28 + 2 * v26))
      {
        *v25 = v48;
        *(a2 - 1) = v24;
        v49 = *v25;
        v50 = *v23;
        v51 = *(unsigned __int16 *)(v28 + 2 * v49);
        if (v51 < *(unsigned __int16 *)(v28 + 2 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          v52 = *a1;
          if (v51 < *(unsigned __int16 *)(v28 + 2 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int16 *)(*a3 + 2 * v8);
      v11 = *a1;
      v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      v13 = *(unsigned __int16 *)(v9 + 2 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v36 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v37 = 0;
      for (i = 12; ; i += 4)
      {
        v40 = *v36;
        v41 = *v7;
        v42 = *(unsigned __int16 *)(v9 + 2 * v40);
        if (v42 < *(unsigned __int16 *)(v9 + 2 * v41))
        {
          v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            v44 = v43 - 4;
            if (v43 == 4)
            {
              v39 = a1;
              goto LABEL_21;
            }
            v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(unsigned __int16 *)(v9 + 2 * v41));
          v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *v39 = v40;
          if (++v37 == 8)
            break;
        }
        v7 = v36++;
        if (v36 == a2)
          return 1;
      }
      return v36 + 1 == a2;
  }
}

void std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D5C38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v3, a1[2]);
}

_QWORD *geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v4;
  char v5;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = result;
  if (*(_BYTE *)(a2 + 14))
  {
    *result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 10);
    if (!*((_BYTE *)result + 14) && *((unsigned __int16 *)result + 6) < v6)
    {
      v7 = (2 * v6) | 1;
      v8 = gss::Allocator::instance((gss::Allocator *)result);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v7 + v6), 1);
      v9 = result;
      if (*v4)
      {
        if (*((_WORD *)v4 + 5))
        {
          result = memmove(result, (const void *)*v4, 2 * *((unsigned __int16 *)v4 + 5));
          if (*((_WORD *)v4 + 5))
            result = memmove((char *)v9 + v7, (const void *)(*v4 + *((unsigned __int16 *)v4 + 4)), *((unsigned __int16 *)v4 + 5));
        }
        v10 = gss::Allocator::instance((gss::Allocator *)result);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *v4, *((unsigned __int16 *)v4 + 6));
      }
      *((_WORD *)v4 + 6) = v6;
      *v4 = v9;
      *((_WORD *)v4 + 4) = v7;
      v6 = *(unsigned __int16 *)(a2 + 10);
    }
    v11 = 0;
    v12 = 0;
    LOWORD(v13) = v6;
    while (v12 != v6)
    {
      v16 = *((unsigned __int16 *)v4 + 5);
      if (v16 == *((unsigned __int16 *)v4 + 6))
      {
        if (v16 == 0xFFFF)
          break;
        if (2 * (v16 & 0x7FFFu) <= 4)
          v17 = 4;
        else
          v17 = 2 * (v16 & 0x7FFF);
        v18 = (4 * (v17 >> 1)) | 1;
        v19 = gss::Allocator::instance((gss::Allocator *)result);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 16))(v19, (unsigned __int16)(v18 + v17), 1);
        v20 = result;
        if (*v4)
        {
          if (*((_WORD *)v4 + 5))
          {
            result = memmove(result, (const void *)*v4, 2 * *((unsigned __int16 *)v4 + 5));
            if (*((_WORD *)v4 + 5))
              result = memmove((char *)v20 + v18, (const void *)(*v4 + *((unsigned __int16 *)v4 + 4)), *((unsigned __int16 *)v4 + 5));
          }
          v21 = gss::Allocator::instance((gss::Allocator *)result);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 40))(v21, *v4, *((unsigned __int16 *)v4 + 6));
        }
        *((_WORD *)v4 + 6) = v17;
        *v4 = v20;
        *((_WORD *)v4 + 4) = v18;
        LOWORD(v13) = *(_WORD *)(a2 + 10);
      }
      if (v12 < (unsigned __int16)v13)
      {
        v11 = (_WORD *)(*(_QWORD *)a2 + 2 * v12);
        v2 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + v12);
      }
      v14 = *((unsigned __int16 *)v4 + 5);
      v15 = (_BYTE *)*v4;
      *(_WORD *)(*v4 + 2 * v14) = *v11;
      v15[*((unsigned __int16 *)v4 + 4) + v14] = *v2;
      ++*((_WORD *)v4 + 5);
      v13 = *(unsigned __int16 *)(a2 + 10);
      if (v12 + 1 < v13)
        ++v12;
      else
        v12 = *(unsigned __int16 *)(a2 + 10);
    }
    v5 = *(_BYTE *)(a2 + 14);
  }
  *((_BYTE *)v4 + 14) = v5;
  *((_BYTE *)v4 + 15) = *(_BYTE *)(a2 + 15);
  return result;
}

uint64_t gss::StylePropertySet<gss::PropertyID>::operator==(unsigned __int16 **a1, unsigned __int16 **a2)
{
  char *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unsigned __int16 *v46;
  char *v47;
  uint64_t result;
  unsigned int v49;
  unsigned __int16 *v50;
  int v51;
  unsigned __int8 *v52;
  unsigned __int8 **v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  float *v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;

  v4 = *((unsigned __int16 *)a1 + 5);
  if ((_DWORD)v4 != *((unsigned __int16 *)a2 + 5))
    return 0;
  if (*((_WORD *)a1 + 5))
  {
    v6 = (uint64_t)*a1;
    v7 = (uint64_t)*a2;
    if (**a1 != **a2)
      return 0;
    v8 = *((unsigned __int16 *)a2 + 4);
    v9 = *((unsigned __int16 *)a1 + 4);
    if (*(unsigned __int8 *)(v6 + v9) != *(unsigned __int8 *)(v7 + v8))
      return 0;
    v10 = v6 + v9;
    v11 = v7 + v8;
    v12 = 1;
    while (v4 != v12)
    {
      v13 = v12;
      if (*(unsigned __int16 *)(v6 + 2 * v12) == *(unsigned __int16 *)(v7 + 2 * v12))
      {
        ++v12;
        if (*(unsigned __int8 *)(v10 + v13) == *(unsigned __int8 *)(v11 + v13))
          continue;
      }
      if (v13 < v4)
        return 0;
      break;
    }
  }
  v14 = *((unsigned __int16 *)a1 + 13);
  if ((_DWORD)v14 == *((unsigned __int16 *)a2 + 13))
  {
    if (*((_WORD *)a1 + 13))
    {
      v15 = a1[2];
      v16 = a2[2];
      if (*v15 != *v16)
        return 0;
      v17 = *((unsigned __int16 *)a2 + 12);
      v18 = *((unsigned __int16 *)a1 + 12);
      if (*((unsigned __int8 *)v15 + v18) != *((unsigned __int8 *)v16 + v17))
        return 0;
      v19 = (char *)v15 + v18;
      v20 = (char *)v16 + v17;
      v21 = 1;
      while (v14 != v21)
      {
        v22 = v21;
        if (v15[v21] == v16[v21])
        {
          ++v21;
          if (v19[v22] == v20[v22])
            continue;
        }
        if (v22 < v14)
          return 0;
        break;
      }
    }
    v23 = *((unsigned __int16 *)a1 + 21);
    if ((_DWORD)v23 == *((unsigned __int16 *)a2 + 21))
    {
      if (*((_WORD *)a1 + 21))
      {
        v24 = a1[4];
        v25 = a2[4];
        if (*v24 != *v25)
          return 0;
        v26 = *((unsigned __int16 *)a2 + 20);
        v27 = *((unsigned __int16 *)a1 + 20);
        if (*(_DWORD *)((char *)v24 + v27) != *(_DWORD *)((char *)v25 + v26))
          return 0;
        v28 = 0;
        v29 = v24 + 1;
        v30 = v25 + 1;
        v31 = (uint64_t)v24 + v27 + 4;
        v32 = (uint64_t)v25 + v26 + 4;
        while (v23 - 1 != v28)
        {
          if (v29[v28] != v30[v28])
          {
            ++v28;
LABEL_29:
            if (v28 < v23)
              return 0;
            break;
          }
          v33 = *(_DWORD *)(v31 + 4 * v28);
          v34 = *(_DWORD *)(v32 + 4 * v28++);
          if (v33 != v34)
            goto LABEL_29;
        }
      }
      v35 = *((unsigned __int16 *)a1 + 29);
      if ((_DWORD)v35 == *((unsigned __int16 *)a2 + 29))
      {
        if (*((_WORD *)a1 + 29))
        {
          v36 = a1[6];
          v37 = a2[6];
          if (*v36 != *v37)
            return 0;
          v38 = (_QWORD *)((char *)v37 + *((unsigned __int16 *)a2 + 28));
          v39 = (_QWORD *)((char *)v36 + *((unsigned __int16 *)a1 + 28));
          if (*v39 != *v38)
            return 0;
          v40 = 0;
          while (++v40 != v35)
          {
            if (v36[v40] != v37[v40] || v39[v40] != v38[v40])
            {
              if (v40 < v35)
                return 0;
              break;
            }
          }
        }
        v41 = *((unsigned __int16 *)a1 + 37);
        if (v41 == *((unsigned __int16 *)a2 + 37))
        {
          if (!*((_WORD *)a1 + 37))
            return 1;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = a2[8];
          v47 = (char *)v46 + *((unsigned __int16 *)a2 + 36);
          while (1)
          {
            if (v43 < v41)
            {
              v50 = a1[8];
              v42 = &v50[v43];
              v3 = (unsigned __int8 *)&v50[8 * v43] + *((unsigned __int16 *)a1 + 36);
            }
            if (v45 < v41)
            {
              v44 = &v46[v45];
              v2 = &v47[16 * v45];
            }
            if (*v42 != *v44)
              break;
            v51 = *v3;
            if (v51 != *v2)
              break;
            if (v51 == 2)
            {
              v59 = (float *)*((_QWORD *)v3 + 1);
              v60 = (float *)*((_QWORD *)v2 + 1);
              if (v59[8] != v60[8])
                return 0;
              v61 = *(_QWORD *)v59;
              v62 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 8);
              v63 = (v62 - v61) >> 2;
              v64 = *(_QWORD *)v60;
              if (v63 != (*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) - v64) >> 2)
                return 0;
              if (v62 != v61)
              {
                v65 = 0;
                v66 = 1;
                while (vabds_f32(*(float *)(v61 + 4 * v65), *(float *)(v64 + 4 * v65)) <= 0.00000011921)
                {
                  v65 = v66++;
                  if (v63 <= v65)
                    goto LABEL_44;
                }
                return 0;
              }
            }
            else if (v51 == 1)
            {
              v52 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
              v53 = (unsigned __int8 **)*((_QWORD *)v2 + 1);
              v54 = v52[23];
              if ((v54 & 0x80u) == 0)
                v55 = (unsigned __int8 *)v52[23];
              else
                v55 = (unsigned __int8 *)*((_QWORD *)v52 + 1);
              v56 = (unsigned __int8 *)*((unsigned __int8 *)v53 + 23);
              v57 = (char)v56;
              if ((char)v56 < 0)
                v56 = v53[1];
              if (v55 != v56)
                return 0;
              if (v57 >= 0)
                v58 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
              else
                v58 = *v53;
              if ((v54 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v52, v58, *((_QWORD *)v52 + 1)))
                  return 0;
              }
              else if (v52[23])
              {
                while (*v52 == *v58)
                {
                  ++v52;
                  ++v58;
                  if (!--v54)
                    goto LABEL_44;
                }
                return 0;
              }
            }
LABEL_44:
            v49 = v43 + 1;
            if (v45 + 1 < v41)
              ++v45;
            else
              v45 = v41;
            result = 1;
            if (v49 < v41)
              ++v43;
            else
              v43 = v41;
            if (v49 >= v41)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v32 = 0x9DDFEA08EB382D69;
    v33 = *(uint64_t *)((char *)a1 + a2 - 48);
    v34 = *(uint64_t *)((char *)a1 + a2 - 40);
    v35 = *(uint64_t *)((char *)a1 + a2 - 24);
    v37 = *(uint64_t *)((char *)a1 + a2 - 64);
    v36 = *(uint64_t *)((char *)a1 + a2 - 56);
    v38 = *(uint64_t *)((char *)a1 + a2 - 16);
    v39 = *(uint64_t *)((char *)a1 + a2 - 8);
    v40 = v36 + v38;
    v41 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))));
    v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    v43 = v37 + a2 + v36 + v33;
    v44 = v43 + v34;
    v45 = __ROR8__(v43, 44) + v37 + a2 + __ROR8__(v34 + v37 + a2 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 21);
    v46 = v36 + v38 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v47 = v46 + v35 + v38;
    v48 = __ROR8__(v47, 44);
    v49 = v47 + v39;
    v50 = v48 + v46 + __ROR8__(v46 + v34 + v39, 21);
    v52 = *a1;
    v51 = a1 + 4;
    v53 = v52 - 0x4B6D499041670D8DLL * v34;
    v54 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v55 = *(v51 - 3);
      v56 = v53 + v44 + v40 + v55;
      v57 = v51[2];
      v58 = v51[3];
      v59 = v51[1];
      v40 = v59 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v40 + v45 + v57, 42);
      v60 = v42 + v49;
      v61 = *(v51 - 2);
      v62 = *(v51 - 1);
      v63 = *(v51 - 4) - 0x4B6D499041670D8DLL * v45;
      v64 = v63 + v49 + v62;
      v65 = v63 + v55 + v61;
      v44 = v65 + v62;
      v66 = __ROR8__(v65, 44) + v63;
      v67 = (0xB492B66FBE98F273 * __ROR8__(v56, 37)) ^ v50;
      v53 = 0xB492B66FBE98F273 * __ROR8__(v60, 33);
      v45 = v66 + __ROR8__(v64 + v67, 21);
      v68 = v53 + v50 + *v51;
      v49 = v68 + v59 + v57 + v58;
      v50 = __ROR8__(v68 + v59 + v57, 44) + v68 + __ROR8__(v40 + v61 + v68 + v58, 21);
      v51 += 8;
      v42 = v67;
      v54 += 64;
    }
    while (v54);
    v69 = v53
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) >> 47));
    v70 = 0x9DDFEA08EB382D69
        * (v69 ^ (v67
                - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47))));
    v71 = 0x9DDFEA08EB382D69 * (v69 ^ (v70 >> 47) ^ v70);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * ((v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v29);
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 >= 9)
  {
    v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 >= 4)
  {
    v72 = *(unsigned int *)((char *)a1 + a2 - 4);
    v23 = 0x9DDFEA08EB382D69;
    v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
    v31 = v72 ^ (v73 >> 47) ^ v73;
    goto LABEL_8;
  }
  v32 = 0x9AE16A3B2F90404FLL;
  if (a2)
  {
    v71 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v32 *= v71 ^ (v71 >> 47);
  }
  return v32;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t *v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t *v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int16 *)(**a3 + 2 * v89) < *(unsigned __int16 *)(**a3 + 2 * v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int16 *)(v93 + 2 * v92);
        v95 = *(unsigned __int16 *)(v93 + 2 * v91);
        v96 = *v10;
        v97 = *(unsigned __int16 *)(v93 + 2 * v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v133 = *v11;
            v132 = v11[1];
            if (*(unsigned __int16 *)(v93 + 2 * v132) < *(unsigned __int16 *)(v93 + 2 * v133))
            {
              *v11 = v132;
              v11[1] = v133;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v158 = *v10;
          if (*(unsigned __int16 *)(v93 + 2 * v158) < v95)
          {
            v11[1] = v158;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = *v11;
        v103 = **a3;
        v104 = *(unsigned __int16 *)(v103 + 2 * v99);
        v105 = *(unsigned __int16 *)(v103 + 2 * v102);
        v106 = v101;
        v107 = *(unsigned __int16 *)(v103 + 2 * v101);
        if (v104 >= v105)
        {
          if (v107 < v104)
          {
            v108 = v11;
            *v98 = v101;
            *v100 = v99;
            result = (uint64_t)(v11 + 1);
            v109 = v99;
            v101 = v99;
            if (v107 >= v105)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v109 = *v11;
            LODWORD(v99) = *v11;
LABEL_169:
            *v108 = v106;
            *(_DWORD *)result = v102;
            v101 = v109;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v102;
          result = (uint64_t)(v11 + 2);
          v109 = v102;
          LODWORD(v99) = v102;
          if (v107 < v105)
            goto LABEL_169;
        }
        LODWORD(v99) = v101;
LABEL_171:
        v159 = *v10;
        if (*(unsigned __int16 *)(v103 + 2 * v159) < *(unsigned __int16 *)(v103 + 2 * v101))
        {
          *v100 = v159;
          *v10 = v99;
          v160 = *v100;
          v161 = *v98;
          v162 = *(unsigned __int16 *)(v103 + 2 * v160);
          if (v162 < *(unsigned __int16 *)(v103 + 2 * v161))
          {
            v11[1] = v160;
            v11[2] = v161;
            v163 = *v11;
            if (v162 < *(unsigned __int16 *)(v103 + 2 * v163))
            {
              *v11 = v160;
              v11[1] = v163;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = *a3;
              v122 = v120;
              do
              {
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = &v11[v124];
                  v126 = *v125;
                  if (2 * v122 + 2 >= v13)
                  {
                    v127 = *v121;
                  }
                  else
                  {
                    v127 = *v121;
                    if (*(unsigned __int16 *)(*v121 + 2 * v126) < *(unsigned __int16 *)(*v121 + 2 * v125[1]))
                    {
                      LODWORD(v126) = v125[1];
                      ++v125;
                      v124 = 2 * v122 + 2;
                    }
                  }
                  v128 = &v11[v122];
                  v129 = *v128;
                  result = *(unsigned __int16 *)(v127 + 2 * v129);
                  if (*(unsigned __int16 *)(v127 + 2 * v126) >= result)
                  {
                    do
                    {
                      v130 = v125;
                      *v128 = v126;
                      if (v120 < v124)
                        break;
                      v131 = (2 * v124) | 1;
                      v125 = &v11[v131];
                      v124 = 2 * v124 + 2;
                      v126 = *v125;
                      if (v124 < v13)
                      {
                        if (*(unsigned __int16 *)(v127 + 2 * v126) >= *(unsigned __int16 *)(v127 + 2 * v125[1]))
                        {
                          v124 = v131;
                        }
                        else
                        {
                          LODWORD(v126) = v125[1];
                          ++v125;
                        }
                      }
                      else
                      {
                        v124 = v131;
                      }
                      v128 = v130;
                    }
                    while (*(unsigned __int16 *)(v127 + 2 * v126) >= result);
                    *v130 = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v140 = (unint64_t)v12 >> 2;
              do
              {
                v141 = 0;
                v142 = *v11;
                v143 = *a3;
                v144 = v11;
                do
                {
                  v147 = &v144[v141];
                  v148 = v147[1];
                  v146 = v147 + 1;
                  v145 = v148;
                  v149 = (2 * v141) | 1;
                  v141 = 2 * v141 + 2;
                  if (v141 < v140)
                  {
                    result = v146[1];
                    if (*(unsigned __int16 *)(*v143 + 2 * v145) >= *(unsigned __int16 *)(*v143 + 2 * result))
                    {
                      v141 = v149;
                    }
                    else
                    {
                      LODWORD(v145) = v146[1];
                      ++v146;
                    }
                  }
                  else
                  {
                    v141 = v149;
                  }
                  *v144 = v145;
                  v144 = v146;
                }
                while (v141 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v146 == --a2)
                {
                  *v146 = v142;
                }
                else
                {
                  *v146 = *a2;
                  *a2 = v142;
                  v150 = (char *)v146 - (char *)v11 + 4;
                  if (v150 >= 5)
                  {
                    v151 = (((unint64_t)v150 >> 2) - 2) >> 1;
                    v152 = &v11[v151];
                    v153 = *v152;
                    v154 = *v146;
                    v155 = *v143;
                    v156 = *(unsigned __int16 *)(v155 + 2 * v154);
                    if (*(unsigned __int16 *)(v155 + 2 * v153) < v156)
                    {
                      do
                      {
                        v157 = v152;
                        *v146 = v153;
                        if (!v151)
                          break;
                        v151 = (v151 - 1) >> 1;
                        v152 = &v11[v151];
                        v153 = *v152;
                        v146 = v157;
                      }
                      while (*(unsigned __int16 *)(v155 + 2 * v153) < v156);
                      *v157 = v154;
                    }
                  }
                }
                v123 = v140-- <= 2;
              }
              while (!v123);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int16 *)(v16 + 2 * v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int16 *)(v16 + 2 * v19);
            v22 = *(unsigned __int16 *)(v16 + 2 * v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int16 *)(v16 + 2 * v27) < *(unsigned __int16 *)(v16 + 2 * v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int16 *)(v16 + 2 * v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int16 *)(v16 + 2 * v35);
            v38 = *(unsigned __int16 *)(v16 + 2 * v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int16 *)(v16 + 2 * v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int16 *)(v16 + 2 * v41) < *(unsigned __int16 *)(v16 + 2 * v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int16 *)(v16 + 2 * v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int16 *)(v16 + 2 * v48);
            v51 = *(unsigned __int16 *)(v16 + 2 * v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int16 *)(v16 + 2 * v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int16 *)(v16 + 2 * v54) < *(unsigned __int16 *)(v16 + 2 * v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int16 *)(v16 + 2 * v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int16 *)(v16 + 2 * v57);
            v60 = *(unsigned __int16 *)(v16 + 2 * v58);
            v61 = *v46;
            v62 = *(unsigned __int16 *)(v16 + 2 * v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int16 *)(v16 + 2 * v23);
          v26 = *(unsigned __int16 *)(v16 + 2 * v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int16 *)(v16 + 2 * v29) < *(unsigned __int16 *)(v16 + 2 * v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int16 *)(v16 + 2 * v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int16 *)(v16 + 2 * v64);
            if (*(unsigned __int16 *)(v16 + 2 * *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int16 *)(v16 + 2 * *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int16 *)(v16 + 2 * v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int16 *)(v16 + 2 * v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int16 *)(v16 + 2 * v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int16 *)(v16 + 2 * v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int16 *)(v16 + 2 * v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int16 *)(v16 + 2 * v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int16 *)(v16 + 2 * v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v110 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v111 = **a3;
              v112 = 4;
              v113 = v11;
              do
              {
                v116 = *v113;
                v115 = v113[1];
                v113 = v110;
                v117 = *(unsigned __int16 *)(v111 + 2 * v115);
                if (v117 < *(unsigned __int16 *)(v111 + 2 * v116))
                {
                  v118 = v112;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v118) = v116;
                    v119 = v118 - 4;
                    if (v118 == 4)
                    {
                      v114 = v11;
                      goto LABEL_110;
                    }
                    v116 = *(unsigned int *)((char *)v11 + v118 - 8);
                    v118 -= 4;
                  }
                  while (v117 < *(unsigned __int16 *)(v111 + 2 * v116));
                  v114 = (unsigned int *)((char *)v11 + v119);
LABEL_110:
                  *v114 = v115;
                }
                v110 = v113 + 1;
                v112 += 4;
              }
              while (v113 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v134 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v135 = **a3;
            do
            {
              v137 = *v9;
              v136 = v9[1];
              v9 = v134;
              v138 = *(unsigned __int16 *)(v135 + 2 * v136);
              if (v138 < *(unsigned __int16 *)(v135 + 2 * v137))
              {
                v139 = v9;
                do
                {
                  *v139 = v137;
                  v137 = *(v139 - 2);
                  --v139;
                }
                while (v138 < *(unsigned __int16 *)(v135 + 2 * v137));
                *v139 = v136;
              }
              v134 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(unsigned __int16 *)(**a3 + 2 * v20) < *(unsigned __int16 *)(**a3 + 2 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(unsigned __int16 *)(**a3 + 2 * *(v9 - 1)) >= *(unsigned __int16 *)(**a3 + 2 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  uint64_t i;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int16 *)(*a3 + 2 * v4) < *(unsigned __int16 *)(*a3 + 2 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int16 *)(*a3 + 2 * v17);
      v20 = *(unsigned __int16 *)(*a3 + 2 * v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int16 *)(*a3 + 2 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v46 = *a1;
          v45 = a1[1];
          if (*(unsigned __int16 *)(v18 + 2 * v45) < *(unsigned __int16 *)(v18 + 2 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v47 = *(a2 - 1);
        if (*(unsigned __int16 *)(v18 + 2 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a1;
      v28 = *a3;
      v29 = *(unsigned __int16 *)(*a3 + 2 * v24);
      v30 = *(unsigned __int16 *)(*a3 + 2 * v27);
      v31 = v26;
      v32 = *(unsigned __int16 *)(*a3 + 2 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          v33 = a1;
          *v23 = v26;
          *v25 = v24;
          v34 = a1 + 1;
          v35 = v24;
          v26 = v24;
          if (v32 >= v30)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *v33 = v31;
          *v34 = v27;
          v26 = v35;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        v34 = a1 + 2;
        v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30)
          goto LABEL_37;
      }
      LODWORD(v24) = v26;
LABEL_39:
      v48 = *(a2 - 1);
      if (*(unsigned __int16 *)(v28 + 2 * v48) < *(unsigned __int16 *)(v28 + 2 * v26))
      {
        *v25 = v48;
        *(a2 - 1) = v24;
        v49 = *v25;
        v50 = *v23;
        v51 = *(unsigned __int16 *)(v28 + 2 * v49);
        if (v51 < *(unsigned __int16 *)(v28 + 2 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          v52 = *a1;
          if (v51 < *(unsigned __int16 *)(v28 + 2 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int16 *)(*a3 + 2 * v8);
      v11 = *a1;
      v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      v13 = *(unsigned __int16 *)(v9 + 2 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v36 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v37 = 0;
      for (i = 12; ; i += 4)
      {
        v40 = *v36;
        v41 = *v7;
        v42 = *(unsigned __int16 *)(v9 + 2 * v40);
        if (v42 < *(unsigned __int16 *)(v9 + 2 * v41))
        {
          v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            v44 = v43 - 4;
            if (v43 == 4)
            {
              v39 = a1;
              goto LABEL_21;
            }
            v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(unsigned __int16 *)(v9 + 2 * v41));
          v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *v39 = v40;
          if (++v37 == 8)
            break;
        }
        v7 = v36++;
        if (v36 == a2)
          return 1;
      }
      return v36 + 1 == a2;
  }
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E58F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E58F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

gss::Allocator *std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared(gss::Allocator *result)
{
  _BYTE *v1;
  gss::Allocator *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (char *)result + 32;
  if (!*((_BYTE *)result + 44))
  {
    v2 = result;
    result = *(gss::Allocator **)v1;
    if (*(_QWORD *)v1)
    {
      if (*((_WORD *)v2 + 20))
      {
        v3 = 80 * *((unsigned __int16 *)v2 + 20);
        do
        {
          result = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)result) + 80);
          v3 -= 80;
        }
        while (v3);
      }
      v4 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)v2 + 4), 80 * *((unsigned __int16 *)v2 + 21));
    }
  }
  *(_QWORD *)(v1 + 5) = 0;
  *(_QWORD *)v1 = 0;
  return result;
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 72);
}

void gss::StylesheetQuery<gss::PropertyID>::~StylesheetQuery(uint64_t a1)
{
  gss::StylesheetQuery<gss::PropertyID>::~StylesheetQuery(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short> const*>>(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = a3;
  v10 = *a1;
  v9 = a1[1];
  v11 = a2 - *a1;
  v12 = v11 >> 3;
  v13 = *a1 + (v11 & 0xFFFFFFFFFFFFFFF8);
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v9) >> 3)
  {
    v15 = a5 + ((uint64_t)(v9 - v10) >> 3);
    if (v15 >> 61)
      abort();
    v16 = v14 - v10;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v31 = &v18[8 * v12];
    v32 = &v31[8 * a5];
    v33 = v5 & 0x1FFFFFFFFFFFFFFFLL;
    v34 = v31;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) >= 7)
    {
      v34 = &v18[8 * v12];
      if ((unint64_t)(&v18[v11 & 0xFFFFFFFFFFFFFFF8] - (char *)v7) >= 0x20)
      {
        v35 = v10;
        v36 = (v33 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v34 = &v31[8 * v36];
        v37 = (__int128 *)(v7 + 2);
        v38 = &v18[8 * v12 + 16];
        v39 = v36;
        do
        {
          v40 = *v37;
          *((_OWORD *)v38 - 1) = *(v37 - 1);
          *(_OWORD *)v38 = v40;
          v37 += 2;
          v38 += 32;
          v39 -= 4;
        }
        while (v39);
        if (v33 + 1 == v36)
          goto LABEL_30;
        v7 += v36;
      }
    }
    do
    {
      v41 = *v7++;
      *(_QWORD *)v34 = v41;
      v34 += 8;
    }
    while (v34 != v32);
    v35 = *a1;
LABEL_30:
    if (v35 != v13)
    {
      v42 = (char *)((v11 & 0xFFFFFFFFFFFFFFF8) + v10);
      v43 = (unint64_t)&v42[-v35 - 8];
      if (v43 >= 0x68)
      {
        v44 = v13;
        if ((unint64_t)(v42 - &v18[v11 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v45 = (v43 >> 3) + 1;
          v44 = v13 - 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = 8 * v12 - 16;
          v47 = (__int128 *)(v10 + v46);
          v48 = &v18[v46];
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v47;
            *((_OWORD *)v48 - 1) = *(v47 - 1);
            *(_OWORD *)v48 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 4;
          }
          while (v49);
          v31 -= 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_39;
        }
      }
      else
      {
        v44 = v13;
      }
      do
      {
        v51 = *(_QWORD *)(v44 - 8);
        v44 -= 8;
        *((_QWORD *)v31 - 1) = v51;
        v31 -= 8;
      }
      while (v44 != v35);
      v9 = a1[1];
    }
LABEL_39:
    v52 = &v18[8 * v17];
    if (v9 != v13)
    {
      v53 = (char *)((v11 & 0xFFFFFFFFFFFFFFF8) + v10);
      v54 = v9 - (_QWORD)v53 - 8;
      if (v54 < 0x68)
        goto LABEL_74;
      if ((unint64_t)(&v18[8 * a5 + (v11 & 0xFFFFFFFFFFFFFFF8)] - v53) < 0x20)
        goto LABEL_74;
      v55 = (v54 >> 3) + 1;
      v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v13 += v56;
      v57 = &v18[8 * v12 + 16 + 8 * a5];
      v58 = (__int128 *)(8 * v12 + v10 + 16);
      v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *v58;
        *((_OWORD *)v57 - 1) = *(v58 - 1);
        *(_OWORD *)v57 = v60;
        v57 += 32;
        v58 += 2;
        v59 -= 4;
      }
      while (v59);
      v32 += v56;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_74:
        do
        {
          v61 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v32 = v61;
          v32 += 8;
        }
        while (v13 != v9);
      }
    }
    v62 = (void *)*a1;
    *a1 = (unint64_t)v31;
    a1[1] = (unint64_t)v32;
    a1[2] = (unint64_t)v52;
    if (v62)
      operator delete(v62);
    return;
  }
  v19 = v9 - v13;
  v20 = (uint64_t)(v9 - v13) >> 3;
  if (v20 < a5)
  {
    v21 = &a3[v20];
    if (v21 == a4)
    {
      v24 = (char *)a1[1];
      goto LABEL_51;
    }
    v22 = (char *)a4 - ((char *)a3 + v19) - 8;
    if (v22 < 0x38)
    {
      v23 = &a3[v20];
      v24 = (char *)a1[1];
    }
    else
    {
      v23 = &a3[v20];
      v24 = (char *)a1[1];
      if (v13 - (unint64_t)a3 >= 0x20)
      {
        v25 = (v22 >> 3) + 1;
        v26 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        v23 = &v21[v26];
        v27 = (_OWORD *)(v9 + 16);
        v28 = (__int128 *)&a3[v20 + 2];
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *v28;
          *(v27 - 1) = *(v28 - 1);
          *v27 = v30;
          v27 += 2;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
        v24 = (char *)(v9 + v26 * 8);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          a1[1] = (unint64_t)v24;
          if (v19 < 1)
            return;
          goto LABEL_52;
        }
      }
    }
    do
    {
      v63 = *v23++;
      *(_QWORD *)v24 = v63;
      v24 += 8;
    }
    while (v23 != a4);
    goto LABEL_51;
  }
  v21 = &a3[a5];
  v24 = (char *)a1[1];
LABEL_52:
  v64 = (char *)(v13 + 8 * a5);
  v65 = (v24 - v64) >> 3;
  v66 = (uint64_t *)&v24[-8 * a5];
  v67 = v24;
  if ((unint64_t)v66 < v9)
  {
    v68 = (v11 & 0xFFFFFFFFFFFFFFF8) + v24 - v64;
    v69 = (char *)(v68 + v10);
    v70 = v68 + v10 + 8;
    if (v9 > v70)
      v70 = v9;
    v71 = v70 + ~v10 - v68;
    v72 = v24 - v69;
    v73 = v71 >= 0x58 && v72 > 0x1F;
    v67 = v24;
    if (!v73)
      goto LABEL_75;
    v74 = (v71 >> 3) + 1;
    v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
    v66 = (uint64_t *)((char *)v66 + v75);
    v76 = v24 + 16;
    v77 = (__int128 *)(8 * v65 + 8 * v12 + v10 + 16);
    v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v79 = *v77;
      *(v76 - 1) = *(v77 - 1);
      *v76 = v79;
      v76 += 2;
      v77 += 2;
      v78 -= 4;
    }
    while (v78);
    v67 = &v24[v75];
    if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_75:
      do
      {
        v80 = *v66++;
        *(_QWORD *)v67 = v80;
        v67 += 8;
      }
      while ((unint64_t)v66 < v9);
    }
  }
  a1[1] = (unint64_t)v67;
  if (v24 != v64)
  {
    v81 = v24 - 4;
    v82 = 8 * v65;
    do
    {
      *((_DWORD *)v81 - 1) = *(_DWORD *)(v13 + v82 - 8);
      *(_WORD *)v81 = *(_WORD *)(v13 + v82 - 4);
      v81 -= 8;
      v82 -= 8;
    }
    while (v82);
  }
  if (v21 != a3)
  {
    do
    {
      *(_DWORD *)v13 = *(_DWORD *)v7;
      *(_WORD *)(v13 + 4) = *((_WORD *)v7++ + 2);
      v13 += 8;
    }
    while (v7 != v21);
  }
}

void std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__insert_with_size[abi:nn180100]<geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>(unint64_t *a1, void *a2, _DWORD *a3, uint64_t a4, int a5, uint64_t a6)
{
  _WORD *v6;
  _WORD *v7;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _WORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  _DWORD *v82;
  _DWORD *v83;
  unsigned int v84;
  _DWORD *v85;
  _DWORD *v86;

  if (a6 < 1)
    return;
  v13 = *a1;
  v12 = a1[1];
  v14 = (uint64_t)a2 - *a1;
  v15 = v14 >> 3;
  v16 = *a1 + (v14 & 0xFFFFFFFFFFFFFFF8);
  v17 = a1[2];
  if (a6 > (uint64_t)(v17 - v12) >> 3)
  {
    v18 = a6 + ((uint64_t)(v12 - v13) >> 3);
    if (v18 >> 61)
      abort();
    v19 = v17 - v13;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v32 = 0;
    v33 = &v21[8 * v15];
    v34 = *(_QWORD *)a3;
    v35 = a3[2];
    v36 = &v33[8 * a6];
    v37 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
    v38 = v33;
    do
    {
      if (v35 < v37)
      {
        v32 = (_DWORD *)(*(_QWORD *)v34 + 4 * v35);
        v6 = (_WORD *)(*(_QWORD *)v34 + *(unsigned __int16 *)(v34 + 8) + 2 * v35);
      }
      *(_DWORD *)v38 = *v32;
      *((_WORD *)v38 + 2) = *v6;
      if (v35 + 1 < v37)
        ++v35;
      else
        v35 = v37;
      v38 += 8;
    }
    while (v38 != v36);
    if ((void *)v13 == a2)
      goto LABEL_47;
    if ((unint64_t)(v14 - 8) >= 0x68)
    {
      v39 = v16;
      if ((v14 & 0xFFFFFFFFFFFFFFF8) + v13 - (unint64_t)&v21[v14 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v40 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v39 = v16 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = 8 * v15 - 16;
        v42 = (__int128 *)(v13 + v41);
        v43 = &v21[v41];
        v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *v42;
          *((_OWORD *)v43 - 1) = *(v42 - 1);
          *(_OWORD *)v43 = v45;
          v42 -= 2;
          v43 -= 32;
          v44 -= 4;
        }
        while (v44);
        v33 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
    }
    else
    {
      v39 = v16;
    }
    do
    {
      v46 = *(_QWORD *)(v39 - 8);
      v39 -= 8;
      *((_QWORD *)v33 - 1) = v46;
      v33 -= 8;
    }
    while (v39 != v13);
LABEL_47:
    v47 = &v21[8 * v20];
    v48 = a1[1];
    if (v48 != v16)
    {
      v49 = (char *)((v14 & 0xFFFFFFFFFFFFFFF8) + v13);
      v50 = v48 - (_QWORD)v49 - 8;
      if (v50 < 0x68)
        goto LABEL_112;
      if ((unint64_t)(&v21[8 * a6 + (v14 & 0xFFFFFFFFFFFFFFF8)] - v49) < 0x20)
        goto LABEL_112;
      v51 = (v50 >> 3) + 1;
      v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
      v16 += v52;
      v53 = &v21[8 * v15 + 16 + 8 * a6];
      v54 = (__int128 *)(8 * v15 + v13 + 16);
      v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v56 = *v54;
        *((_OWORD *)v53 - 1) = *(v54 - 1);
        *(_OWORD *)v53 = v56;
        v53 += 32;
        v54 += 2;
        v55 -= 4;
      }
      while (v55);
      v36 += v52;
      if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          v57 = *(_QWORD *)v16;
          v16 += 8;
          *(_QWORD *)v36 = v57;
          v36 += 8;
        }
        while (v16 != v48);
      }
    }
    v58 = (void *)*a1;
    *a1 = (unint64_t)v33;
    a1[1] = (unint64_t)v36;
    a1[2] = (unint64_t)v47;
    if (v58)
      operator delete(v58);
    return;
  }
  v22 = *(_QWORD *)a3;
  v23 = a3[2];
  v24 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v23 + 1 < v24)
    v25 = v23 + 1;
  else
    v25 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  v26 = v25;
  if ((unint64_t)a6 >= 2)
  {
    v27 = a6 + 1;
    v26 = v25;
    do
    {
      if (v26 + 1 < v24)
        ++v26;
      else
        v26 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
      --v27;
    }
    while (v27 > 2);
  }
  v28 = v12 - v16;
  v29 = (uint64_t)(v12 - v16) >> 3;
  if (v29 >= a6)
  {
    v31 = a1[1];
    v25 = v26;
LABEL_60:
    v59 = v16 + 8 * a6;
    v60 = (uint64_t)(v31 - v59) >> 3;
    v61 = (uint64_t *)(v31 - 8 * a6);
    v62 = (_QWORD *)v31;
    if ((unint64_t)v61 < v12)
    {
      v63 = (v14 & 0xFFFFFFFFFFFFFFF8) + v31 - v59;
      v64 = (char *)(v63 + v13);
      v65 = v63 + v13 + 8;
      if (v12 > v65)
        v65 = v12;
      v66 = v65 + ~v13 - v63;
      v67 = v31 - (_QWORD)v64;
      v68 = v66 >= 0x58 && v67 > 0x1F;
      v62 = (_QWORD *)v31;
      if (!v68)
        goto LABEL_113;
      v69 = (v66 >> 3) + 1;
      v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
      v61 = (uint64_t *)((char *)v61 + v70);
      v71 = (_OWORD *)(v31 + 16);
      v72 = (__int128 *)(8 * v60 + 8 * v15 + v13 + 16);
      v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v74 = *v72;
        *(v71 - 1) = *(v72 - 1);
        *v71 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 4;
      }
      while (v73);
      v62 = (_QWORD *)(v31 + v70);
      if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_113:
        do
        {
          v75 = *v61++;
          *v62++ = v75;
        }
        while ((unint64_t)v61 < v12);
      }
    }
    a1[1] = (unint64_t)v62;
    if (v31 != v59)
    {
      v76 = (_WORD *)(v31 - 4);
      v77 = 8 * v60;
      do
      {
        v59 = *(unsigned int *)(v16 + v77 - 8);
        *((_DWORD *)v76 - 1) = v59;
        *v76 = *(_WORD *)(v16 + v77 - 4);
        v76 -= 4;
        v77 -= 8;
      }
      while (v77);
    }
    v78 = *(_QWORD *)a3;
    v79 = a3[2];
    v80 = *(_QWORD *)a3 == v22;
    if (*(_QWORD *)a3 != v22 || v79 != v25)
    {
      v81 = *(unsigned __int16 *)(v78 + 10);
      if ((v80 & 1) == 0)
      {
        v85 = 0;
        while (1)
        {
          if (v79 < v81)
          {
            v85 = (_DWORD *)(*(_QWORD *)v78 + 4 * v79);
            v80 = *(_QWORD *)v78 + *(unsigned __int16 *)(v78 + 8) + 2 * v79;
          }
          *(_DWORD *)v16 = *v85;
          *(_WORD *)(v16 + 4) = *(_WORD *)v80;
          if (v79 + 1 < v81)
            ++v79;
          else
            v79 = v81;
          v16 += 8;
        }
      }
      v82 = 0;
      do
      {
        if (v79 < v81)
        {
          v82 = (_DWORD *)(*(_QWORD *)v78 + 4 * v79);
          v59 = *(_QWORD *)v78 + *(unsigned __int16 *)(v78 + 8) + 2 * v79;
        }
        *(_DWORD *)v16 = *v82;
        *(_WORD *)(v16 + 4) = *(_WORD *)v59;
        if (v79 + 1 < v81)
          ++v79;
        else
          v79 = v81;
        v16 += 8;
      }
      while (v79 != v25);
    }
    return;
  }
  if (v28 < 1)
  {
    v25 = a3[2];
  }
  else if ((unint64_t)v28 >= 9)
  {
    v30 = v29 + 1;
    do
    {
      if (v25 + 1 < v24)
        ++v25;
      else
        v25 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
      --v30;
    }
    while (v30 > 2);
  }
  if (v22 != a4 || (v31 = a1[1], v25 != a5))
  {
    if (v22 != a4)
    {
      v86 = 0;
      while (1)
      {
        if (v25 < v24)
        {
          v86 = (_DWORD *)(*(_QWORD *)v22 + 4 * v25);
          v29 = *(_QWORD *)v22 + *(unsigned __int16 *)(v22 + 8) + 2 * v25;
        }
        *(_DWORD *)v12 = *v86;
        *(_WORD *)(v12 + 4) = *(_WORD *)v29;
        if (v25 + 1 < v24)
          ++v25;
        else
          v25 = v24;
        v12 += 8;
      }
    }
    v83 = 0;
    v31 = a1[1];
    v84 = v25;
    do
    {
      if (v84 < v24)
      {
        v83 = (_DWORD *)(*(_QWORD *)v22 + 4 * v84);
        v7 = (_WORD *)(*(_QWORD *)v22 + *(unsigned __int16 *)(v22 + 8) + 2 * v84);
      }
      *(_DWORD *)v31 = *v83;
      *(_WORD *)(v31 + 4) = *v7;
      if (v84 + 1 < v24)
        ++v84;
      else
        v84 = v24;
      v31 += 8;
    }
    while (v84 != a5);
  }
  a1[1] = v31;
  if (v29 >= 1)
    goto LABEL_60;
}

gss::Allocator *std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,gss::Allocator>>>::~unique_ptr[abi:nn180100](gss::Allocator *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 40);
      if (!v3)
        goto LABEL_16;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!*(_BYTE *)(v2 + 30))
          goto LABEL_10;
      }
      else
      {
LABEL_16:
        if (!*(_BYTE *)(v2 + 30))
        {
LABEL_10:
          if (*(_QWORD *)(v2 + 16))
          {
            v6 = gss::Allocator::instance(a1);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v2 + 16), *(unsigned __int16 *)(v2 + 28));
            *(_QWORD *)(v2 + 16) = 0;
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)a1 + 1) + 40))(**((_QWORD **)a1 + 1), v2, 48);
  }
  return a1;
}

_DWORD *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v7 = *result;
  v8 = *(_DWORD *)(a6 + 4 * v6);
  v9 = *(_DWORD *)(a6 + 4 * v7);
  v10 = *a3;
  v11 = *(_DWORD *)(a6 + 4 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      v7 = *a3;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *result;
    if (*(_DWORD *)(a6 + 4 * v12) >= *(_DWORD *)(a6 + 4 * v13))
    {
      v7 = v6;
      v10 = v6;
      goto LABEL_14;
    }
    *result = v12;
    *a2 = v13;
    v7 = *a3;
  }
  else
  {
    if (v11 >= v8)
    {
      *result = v6;
      *a2 = v7;
      v10 = *a3;
      if (*(_DWORD *)(a6 + 4 * *a3) >= v9)
      {
        v7 = *a3;
        goto LABEL_14;
      }
      *a2 = v10;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
  }
  v10 = v7;
LABEL_14:
  v14 = *a4;
  if (*(_DWORD *)(a6 + 4 * v14) < *(_DWORD *)(a6 + 4 * v7))
  {
    *a3 = v14;
    *a4 = v10;
    v15 = *a3;
    v16 = *a2;
    if (*(_DWORD *)(a6 + 4 * v15) < *(_DWORD *)(a6 + 4 * v16))
    {
      *a2 = v15;
      *a3 = v16;
      v17 = *a2;
      v18 = *result;
      if (*(_DWORD *)(a6 + 4 * v17) < *(_DWORD *)(a6 + 4 * v18))
      {
        *result = v17;
        *a2 = v18;
      }
    }
  }
  v19 = *a5;
  v20 = *a4;
  if (*(_DWORD *)(a6 + 4 * v19) < *(_DWORD *)(a6 + 4 * v20))
  {
    *a4 = v19;
    *a5 = v20;
    v21 = *a4;
    v22 = *a3;
    if (*(_DWORD *)(a6 + 4 * v21) < *(_DWORD *)(a6 + 4 * v22))
    {
      *a3 = v21;
      *a4 = v22;
      v23 = *a3;
      v24 = *a2;
      if (*(_DWORD *)(a6 + 4 * v23) < *(_DWORD *)(a6 + 4 * v24))
      {
        *a2 = v23;
        *a3 = v24;
        v25 = *a2;
        v26 = *result;
        if (*(_DWORD *)(a6 + 4 * v25) < *(_DWORD *)(a6 + 4 * v26))
        {
          *result = v25;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  uint64_t i;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(_DWORD *)(*a3 + 4 * v4) < *(_DWORD *)(*a3 + 4 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(_DWORD *)(*a3 + 4 * v17);
      v20 = *(_DWORD *)(*a3 + 4 * v16);
      v21 = *(a2 - 1);
      v22 = *(_DWORD *)(*a3 + 4 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v46 = *a1;
          v45 = a1[1];
          if (*(_DWORD *)(v18 + 4 * v45) < *(_DWORD *)(v18 + 4 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v47 = *(a2 - 1);
        if (*(_DWORD *)(v18 + 4 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a1;
      v28 = *a3;
      v29 = *(_DWORD *)(*a3 + 4 * v24);
      v30 = *(_DWORD *)(*a3 + 4 * v27);
      v31 = v26;
      v32 = *(_DWORD *)(*a3 + 4 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          v33 = a1;
          *v23 = v26;
          *v25 = v24;
          v34 = a1 + 1;
          v35 = v24;
          v26 = v24;
          if (v32 >= v30)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *v33 = v31;
          *v34 = v27;
          v26 = v35;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        v34 = a1 + 2;
        v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30)
          goto LABEL_37;
      }
      LODWORD(v24) = v26;
LABEL_39:
      v48 = *(a2 - 1);
      if (*(_DWORD *)(v28 + 4 * v48) < *(_DWORD *)(v28 + 4 * v26))
      {
        *v25 = v48;
        *(a2 - 1) = v24;
        v49 = *v25;
        v50 = *v23;
        v51 = *(_DWORD *)(v28 + 4 * v49);
        if (v51 < *(_DWORD *)(v28 + 4 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          v52 = *a1;
          if (v51 < *(_DWORD *)(v28 + 4 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(_DWORD *)(*a3 + 4 * v8);
      v11 = *a1;
      v12 = *(_DWORD *)(v9 + 4 * v11);
      v13 = *(_DWORD *)(v9 + 4 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v36 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v37 = 0;
      for (i = 12; ; i += 4)
      {
        v40 = *v36;
        v41 = *v7;
        v42 = *(_DWORD *)(v9 + 4 * v40);
        if (v42 < *(_DWORD *)(v9 + 4 * v41))
        {
          v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            v44 = v43 - 4;
            if (v43 == 4)
            {
              v39 = a1;
              goto LABEL_21;
            }
            v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(_DWORD *)(v9 + 4 * v41));
          v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *v39 = v40;
          if (++v37 == 8)
            break;
        }
        v7 = v36++;
        if (v36 == a2)
          return 1;
      }
      return v36 + 1 == a2;
  }
}

uint64_t gss::StylesheetQuery<gss::PropertyID>::~StylesheetQuery(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = &off_1E42C28D0;
  v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 296);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (!*(_BYTE *)(a1 + 286) && *(_QWORD *)(a1 + 272))
  {
    v4 = gss::Allocator::instance((gss::Allocator *)v3);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 272), *(unsigned __int16 *)(a1 + 284));
    *(_QWORD *)(a1 + 272) = 0;
  }
  v5 = *(_QWORD *)(a1 + 240);
  if (v5)
  {
    *(_QWORD *)(a1 + 248) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 264) + 40))(*(_QWORD *)(a1 + 264), v5, *(_QWORD *)(a1 + 256) - v5);
  }
  *(_QWORD *)a1 = &off_1E42C2A28;
  v6 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"destruction", v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::MeshRenderableBuilder::MeshRenderableBuilder(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;

  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    v5 = (unint64_t *)(a3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a4[1];
  a1[2] = *a4;
  a1[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E42DED18;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_DWORD *)v10 + 14) = 0;
  *((_QWORD *)v10 + 3) = &off_1E42B63B0;
  *(_OWORD *)(v10 + 60) = xmmword_19FFB2EA0;
  *(_QWORD *)(v10 + 76) = 0x100000001;
  *((_DWORD *)v10 + 21) = 0;
  a1[4] = v10 + 24;
  a1[5] = v10;
  return a1;
}

void sub_19F41A738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::MeshRenderableBuilder::buildRenderable(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, uint64_t *a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, uint64_t *a17, uint64_t a18, char a19)
{
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  _QWORD *v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  __n128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  _QWORD *v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  _QWORD *v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __n128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *p_shared_weak_owners;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  float v94;
  _QWORD *v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  _QWORD *v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  BOOL v101;
  char v102;
  uint64_t v103;
  float v104;
  _QWORD *v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  _QWORD *v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  BOOL v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _OWORD *v159;
  char v160;
  uint64_t v161;
  float v162;
  _QWORD *v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  _QWORD *v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  __n128 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  char v185;
  __n128 v186;
  unint64_t v187[2];

  v187[0] = a5;
  *(_QWORD *)a1 = &off_1E428F838;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 32) = v25;
  v26 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 40) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = (__n128 *)(a1 + 280);
  v30 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a1 + 128) = v30;
  *(_QWORD *)(a1 + 142) = *(_QWORD *)(a3 + 142);
  v31 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 64) = v31;
  v32 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = v32;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a3 + 176))
  {
    v33 = *(_QWORD *)(a3 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 152);
    *(_QWORD *)(a1 + 160) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a3 + 168);
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a3 + 184);
  *(_WORD *)(a1 + 192) = 0;
  if (*(_BYTE *)(a3 + 193))
  {
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a3 + 192);
    *(_BYTE *)(a1 + 193) = 1;
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a3 + 196);
  *(_QWORD *)a1 = &off_1E4294DD0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 1;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *v29 = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_BYTE *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 376) = 3;
  *(_BYTE *)(a1 + 380) = 0;
  *(_BYTE *)(a1 + 396) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  v36 = *a4;
  v37 = **(float **)(*a4 + 48);
  v38 = *(_QWORD **)(*a4 + 16);
  if (!v38
    || ((v39 = gms::_Material<ggl::Texture2D>::zoomable(v38, 3u), v37 < 1.0) ? (v40 = v39) : (v40 = 0),
        (v40 & 1) == 0))
  {
    v41 = *(_QWORD **)(v36 + 32);
    if (!v41
      || ((v42 = gms::_Material<ggl::Texture2D>::zoomable(v41, 3u), v37 > 0.0)
        ? (v43 = v42)
        : (v43 = 0),
          (v43 & 1) == 0))
    {
      v44 = *(_QWORD *)(a2 + 16);
      v185 = 3;
      v45 = *(std::__shared_weak_count **)(a2 + 40);
      v184 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(p_shared_owners);
        while (__stxr(v47 + 1, p_shared_owners));
      }
      md::MaterialTextureManager::textureFromMaterial(&v186, v44, (uint64_t)a4, v187, &v185, 0);
      v48 = v186;
      v186 = 0uLL;
      v49 = *(std::__shared_weak_count **)(a1 + 288);
      *v29 = v48;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count *)v186.n128_u64[1];
      if (v186.n128_u64[1])
      {
        v53 = (unint64_t *)(v186.n128_u64[1] + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v184)
      {
        v55 = (unint64_t *)&v184->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
    }
  }
  v57 = *a4;
  v58 = **(float **)(*a4 + 48);
  v59 = *(_QWORD **)(*a4 + 16);
  if (v59)
  {
    v60 = gms::_Material<ggl::Texture2D>::zoomable(v59, 4u);
    v61 = v58 < 1.0 ? v60 : 0;
    if ((v61 & 1) != 0)
      goto LABEL_66;
  }
  v62 = *(_QWORD **)(v57 + 32);
  if (v62)
  {
    v63 = gms::_Material<ggl::Texture2D>::zoomable(v62, 4u);
    v64 = v58 > 0.0 ? v63 : 0;
    if ((v64 & 1) != 0)
      goto LABEL_66;
  }
  v65 = *(_QWORD *)(a2 + 16);
  v185 = 4;
  v66 = *(std::__shared_weak_count **)(a2 + 40);
  v183 = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  md::MaterialTextureManager::textureFromMaterial(&v186, v65, (uint64_t)a4, v187, &v185, 0);
  v69 = v186;
  v186 = 0uLL;
  v70 = *(std::__shared_weak_count **)(a1 + 304);
  *(__n128 *)(a1 + 296) = v69;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v74 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (!v183)
    goto LABEL_66;
  v76 = (unint64_t *)&v183->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_66:
    v78 = *a6;
    if (*a6)
    {
LABEL_67:
      v79 = (std::__shared_weak_count *)operator new(0x48uLL);
      v80 = v79;
      v79->__shared_owners_ = 0;
      v81 = (unint64_t *)&v79->__shared_owners_;
      v79->__shared_weak_owners_ = 0;
      v79->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
      v82 = v79 + 1;
      v79[1].__shared_weak_owners_ = 0;
      LODWORD(v79[2].__vftable) = 0;
      v83 = a6[1];
      v79[2].__shared_owners_ = v78;
      v79[2].__shared_weak_owners_ = v83;
      if (v83)
      {
        v84 = (unint64_t *)(v83 + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      do
        v86 = __ldxr(v81);
      while (__stxr(v86 + 1, v81));
      p_shared_weak_owners = (unint64_t *)&v79->__shared_weak_owners_;
      do
        v88 = __ldxr(p_shared_weak_owners);
      while (__stxr(v88 + 1, p_shared_weak_owners));
      v79[1].__vftable = (std::__shared_weak_count_vtbl *)&v79[1];
      v79[1].__shared_owners_ = (uint64_t)v79;
      do
        v89 = __ldaxr(v81);
      while (__stlxr(v89 - 1, v81));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v80);
      }
      v90 = *(std::__shared_weak_count **)(a1 + 264);
      *(_QWORD *)(a1 + 256) = v82;
      *(_QWORD *)(a1 + 264) = v80;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      *(_BYTE *)(a1 + 272) = 1;
      goto LABEL_83;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
    v78 = *a6;
    if (*a6)
      goto LABEL_67;
  }
  v161 = *a4;
  v162 = **(float **)(*a4 + 48);
  v163 = *(_QWORD **)(*a4 + 16);
  if (!v163
    || ((v164 = gms::_Material<ggl::Texture2D>::zoomable(v163, 1u), v162 < 1.0)
      ? (v165 = v164)
      : (v165 = 0),
        (v165 & 1) == 0))
  {
    v166 = *(_QWORD **)(v161 + 32);
    if (!v166
      || ((v167 = gms::_Material<ggl::Texture2D>::zoomable(v166, 1u), v162 > 0.0)
        ? (v168 = v167)
        : (v168 = 0),
          (v168 & 1) == 0))
    {
      v169 = *(_QWORD *)(a2 + 16);
      v185 = 1;
      v170 = *(std::__shared_weak_count **)(a2 + 40);
      v182 = v170;
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
      }
      md::MaterialTextureManager::textureFromMaterial(&v186, v169, (uint64_t)a4, v187, &v185, 0);
      v173 = v186;
      v186 = 0uLL;
      v174 = *(std::__shared_weak_count **)(a1 + 264);
      *(__n128 *)(a1 + 256) = v173;
      if (v174)
      {
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = (std::__shared_weak_count *)v186.n128_u64[1];
      if (v186.n128_u64[1])
      {
        v178 = (unint64_t *)(v186.n128_u64[1] + 8);
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      if (v182)
      {
        v180 = (unint64_t *)&v182->__shared_owners_;
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
    }
  }
LABEL_83:
  v93 = *a4;
  v94 = **(float **)(*a4 + 48);
  v95 = *(_QWORD **)(*a4 + 16);
  if (!v95
    || ((v96 = gms::_Material<ggl::Texture2D>::zoomable(v95, 0xBu), v94 < 1.0)
      ? (v97 = v96)
      : (v97 = 0),
        (v97 & 1) == 0))
  {
    v98 = *(_QWORD **)(v93 + 32);
    if (!v98
      || ((v99 = gms::_Material<ggl::Texture2D>::zoomable(v98, 0xBu), v94 > 0.0)
        ? (v100 = v99)
        : (v100 = 0),
          (v100 & 1) == 0))
    {
      (*(void (**)(__n128 *__return_ptr, float))(*(_QWORD *)*a4 + 352))(&v186, 0.0);
      if (v186.n128_u8[0])
        v101 = v186.n128_u8[1] == 0;
      else
        v101 = 0;
      v102 = !v101;
      *(_BYTE *)(a1 + 248) = v102;
    }
  }
  v103 = *a4;
  v104 = **(float **)(*a4 + 48);
  v105 = *(_QWORD **)(*a4 + 16);
  if (!v105
    || ((v106 = gms::_Material<ggl::Texture2D>::zoomable(v105, 0x10u), v104 < 1.0)
      ? (v107 = v106)
      : (v107 = 0),
        (v107 & 1) == 0))
  {
    v108 = *(_QWORD **)(v103 + 32);
    if (!v108
      || ((v109 = gms::_Material<ggl::Texture2D>::zoomable(v108, 0x10u), v104 > 0.0)
        ? (v110 = v109)
        : (v110 = 0),
          (v110 & 1) == 0))
    {
      (*(void (**)(__n128 *__return_ptr, float))(*(_QWORD *)*a4 + 552))(&v186, 0.0);
      if (v186.n128_u8[0])
        v111 = v186.n128_u8[1] == 0;
      else
        v111 = 0;
      v112 = !v111;
      *(_BYTE *)(a1 + 146) = v112;
    }
  }
  if (*(unsigned __int8 *)(a1 + 368) == *((unsigned __int8 *)a17 + 56))
  {
    if (*(_BYTE *)(a1 + 368))
    {
      v114 = *a17;
      v113 = a17[1];
      if (v113)
      {
        v115 = (unint64_t *)(v113 + 8);
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      v117 = *(std::__shared_weak_count **)(a1 + 320);
      *(_QWORD *)(a1 + 312) = v114;
      *(_QWORD *)(a1 + 320) = v113;
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      *(_BYTE *)(a1 + 328) = *((_BYTE *)a17 + 16);
      v121 = a17[3];
      v120 = a17[4];
      if (v120)
      {
        v122 = (unint64_t *)(v120 + 8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v124 = *(std::__shared_weak_count **)(a1 + 344);
      *(_QWORD *)(a1 + 336) = v121;
      *(_QWORD *)(a1 + 344) = v120;
      if (v124)
      {
        v125 = (unint64_t *)&v124->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      v128 = a17[5];
      v127 = a17[6];
      if (v127)
      {
        v129 = (unint64_t *)(v127 + 8);
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
      }
      v131 = *(std::__shared_weak_count **)(a1 + 360);
      *(_QWORD *)(a1 + 352) = v128;
      *(_QWORD *)(a1 + 360) = v127;
      if (v131)
      {
        v132 = (unint64_t *)&v131->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 368))
  {
    v134 = *(std::__shared_weak_count **)(a1 + 360);
    if (v134)
    {
      v135 = (unint64_t *)&v134->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    v137 = *(std::__shared_weak_count **)(a1 + 344);
    if (v137)
    {
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = *(std::__shared_weak_count **)(a1 + 320);
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    *(_BYTE *)(a1 + 368) = 0;
  }
  else
  {
    v143 = a17[1];
    *(_QWORD *)(a1 + 312) = *a17;
    *(_QWORD *)(a1 + 320) = v143;
    if (v143)
    {
      v144 = (unint64_t *)(v143 + 8);
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    *(_BYTE *)(a1 + 328) = *((_BYTE *)a17 + 16);
    v146 = a17[4];
    *(_QWORD *)(a1 + 336) = a17[3];
    *(_QWORD *)(a1 + 344) = v146;
    if (v146)
    {
      v147 = (unint64_t *)(v146 + 8);
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
    }
    v149 = a17[6];
    *(_QWORD *)(a1 + 352) = a17[5];
    *(_QWORD *)(a1 + 360) = v149;
    if (v149)
    {
      v150 = (unint64_t *)(v149 + 8);
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
    }
    *(_BYTE *)(a1 + 368) = 1;
  }
  *(_QWORD *)(a1 + 240) = v187[0];
  v152 = *a4;
  v153 = a4[1];
  if (v153)
  {
    v154 = (unint64_t *)(v153 + 8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = *(std::__shared_weak_count **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v152;
  *(_QWORD *)(a1 + 232) = v153;
  if (v156)
  {
    v157 = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = (_OWORD *)(a1 + 380);
  if (*(_BYTE *)(a1 + 248))
    v160 = a7;
  else
    v160 = 0;
  *(_BYTE *)(a1 + 144) = v160;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a18;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a18 + 16);
  *(_BYTE *)(a1 + 145) = a8;
  *(_BYTE *)(a1 + 376) = a9;
  *(_BYTE *)(a1 + 147) = a10 ^ 1;
  if (*(unsigned __int8 *)(a1 + 396) == *(unsigned __int8 *)(a12 + 16))
  {
    if (*(_BYTE *)(a1 + 396))
      *v159 = *(_OWORD *)a12;
  }
  else if (*(_BYTE *)(a1 + 396))
  {
    *(_BYTE *)(a1 + 396) = 0;
  }
  else
  {
    *v159 = *(_OWORD *)a12;
    *(_BYTE *)(a1 + 396) = 1;
  }
  *(_DWORD *)(a1 + 196) = a13;
  *(_BYTE *)(a1 + 200) = a14;
  *(_BYTE *)(a1 + 149) = a16;
  *(_BYTE *)(a1 + 377) = a11;
  *(_BYTE *)(a1 + 400) = a19;
  if (*(_BYTE *)(a1 + 368))
    *(_BYTE *)(a1 + 146) = 0;
}

void sub_19F41B254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  md::MaterialRenderable *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  md::MaterialRenderable::~MaterialRenderable(v2);
  _Unwind_Resume(a1);
}

_QWORD *gms::_Material<ggl::Texture2D>::zoomable(_QWORD *result, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  while (1)
  {
    v2 = result[2];
    if (v2)
    {
      v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.u32[0] > 1uLL)
      {
        v4 = a2;
        if (v2 <= a2)
          v4 = a2 % v2;
      }
      else
      {
        v4 = ((_DWORD)v2 - 1) & a2;
      }
      v5 = result[1];
      v6 = *(uint64_t ****)(v5 + 8 * v4);
      if (v6)
      {
        v7 = *v6;
        if (*v6)
          break;
      }
    }
LABEL_2:
    result = (_QWORD *)result[9];
    if (!result)
      return result;
  }
  v8 = v2 - 1;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == (uint64_t *)a2)
      {
        if (*((unsigned __int8 *)v7 + 16) == a2)
          goto LABEL_24;
      }
      else if (((unint64_t)v9 & v8) != v4)
      {
        goto LABEL_2;
      }
      v7 = (uint64_t **)*v7;
      if (!v7)
        goto LABEL_2;
    }
  }
  while (1)
  {
    v10 = (unint64_t)v7[1];
    if (v10 == a2)
      break;
    if (v10 >= v2)
      v10 %= v2;
    if (v10 != v4)
      goto LABEL_2;
LABEL_18:
    v7 = (uint64_t **)*v7;
    if (!v7)
      goto LABEL_2;
  }
  if (*((unsigned __int8 *)v7 + 16) != a2)
    goto LABEL_18;
LABEL_24:
  if (v3.u32[0] > 1uLL)
  {
    v11 = a2;
    if (v2 <= a2)
      v11 = a2 % v2;
  }
  else
  {
    v11 = ((_DWORD)v2 - 1) & a2;
  }
  v12 = *(uint64_t ***)(v5 + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
LABEL_45:
    abort();
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v14 = v13[1];
      if (v14 == a2)
      {
        if (*((unsigned __int8 *)v13 + 16) == a2)
          return (_QWORD *)(*((_BYTE *)v13 + 17) != 0);
      }
      else if ((v14 & v8) != v11)
      {
        goto LABEL_45;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_45;
    }
  }
  while (2)
  {
    v15 = v13[1];
    if (v15 != a2)
    {
      if (v15 >= v2)
        v15 %= v2;
      if (v15 != v11)
        goto LABEL_45;
      goto LABEL_39;
    }
    if (*((unsigned __int8 *)v13 + 16) != a2)
    {
LABEL_39:
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_45;
      continue;
    }
    return (_QWORD *)(*((_BYTE *)v13 + 17) != 0);
  }
}

void std::__shared_ptr_emplace<md::SharedTexture2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::SharedTexture2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::SharedTexture2D>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

unint64_t md::MaterialRenderable::hash2(md::MaterialRenderable *this)
{
  unint64_t v2;

  v2 = md::MeshRenderable::hash(this);
  return (*((_QWORD *)this + 30) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583EBLL) ^ v2;
}

unint64_t md::MeshRenderable::hash(md::MeshRenderable *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v1 = (*((_QWORD *)this + 2)
      + ((unint64_t)*((unsigned __int8 *)this + 8) << 6)
      + ((unint64_t)*((unsigned __int8 *)this + 8) >> 2)
      - 0x61C8864680B583EBLL) ^ *((unsigned __int8 *)this + 8);
  v2 = (*((_QWORD *)this + 3) + (v1 << 6) + (v1 >> 2) - 0x61C8864680B583EBLL) ^ v1;
  v3 = *((_QWORD *)this + 4);
  v4 = HIDWORD(v3);
  v5 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
  v6 = ((v2 << 6)
      + (v2 >> 2)
      - 0x622015F714C7D297
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47))
      - 0x61C8864680B583EBLL) ^ v2;
  v7 = ((*((unsigned __int8 *)this + 64) | (v6 << 6)) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  if (*((_BYTE *)this + 64))
  {
    v8 = (*((_QWORD *)this + 6)
        - 0x61C8864680B583EBLL
        + (*((_QWORD *)this + 6) >> 34)
        + (HIDWORD(*((_QWORD *)this + 6)) << 6)) ^ HIDWORD(*((_QWORD *)this + 6));
    v7 ^= (v7 << 6)
        - 0x61C8864680B583EBLL
        + (v7 >> 2)
        + ((*((unsigned __int8 *)this + 56) - 0x61C8864680B583EBLL + (v8 << 6) + (v8 >> 2)) ^ v8);
  }
  v9 = *((float *)this + 19);
  v10 = *((float *)this + 20);
  v11 = LODWORD(v9) - 0x61C8864680B583EBLL;
  if (v9 == 0.0)
    v11 = 0x9E3779B97F4A7C15;
  v12 = LODWORD(v10) - 0x61C8864680B583EBLL;
  if (v10 == 0.0)
    v12 = 0x9E3779B97F4A7C15;
  v13 = *((float *)this + 21);
  v14 = *((float *)this + 22);
  v15 = LODWORD(v13) - 0x61C8864680B583EBLL;
  if (v13 == 0.0)
    v15 = 0x9E3779B97F4A7C15;
  v16 = LODWORD(v14) - 0x61C8864680B583EBLL;
  if (v14 == 0.0)
    v16 = 0x9E3779B97F4A7C15;
  v17 = *((float *)this + 23);
  v18 = *((float *)this + 24);
  v19 = ((v7 << 6) - 0x61C8864680B583EBLL + (v7 >> 2) + *((unsigned __int8 *)this + 72)) ^ v7;
  v20 = ((v19 << 6)
       - 0x61C8864680B583EBLL
       + (v19 >> 2)
       + ((v15 + ((((v11 >> 2) + (v11 << 6) + v12) ^ v11) << 6) + ((((v11 >> 2) + (v11 << 6) + v12) ^ v11) >> 2)) ^ ((v11 >> 2) + (v11 << 6) + v12) ^ v11)) ^ v19;
  v21 = LODWORD(v17) - 0x61C8864680B583EBLL;
  if (v17 == 0.0)
    v21 = 0x9E3779B97F4A7C15;
  v22 = ((v16 >> 2) + (v16 << 6) + v21) ^ v16;
  v23 = LODWORD(v18) - 0x61C8864680B583EBLL;
  if (v18 == 0.0)
    v23 = 0x9E3779B97F4A7C15;
  v24 = ((v20 << 6) - 0x61C8864680B583EBLL + (v20 >> 2) + ((v23 + (v22 << 6) + (v22 >> 2)) ^ v22)) ^ v20;
  v25 = (*((unsigned __int8 *)this + 144) - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
  v26 = (*((unsigned __int8 *)this + 145) - 0x61C8864680B583EBLL + (v25 << 6) + (v25 >> 2)) ^ v25;
  v27 = (*((unsigned __int8 *)this + 146) - 0x61C8864680B583EBLL + (v26 << 6) + (v26 >> 2)) ^ v26;
  v28 = (*((unsigned __int8 *)this + 147) - 0x61C8864680B583EBLL + (v27 << 6) + (v27 >> 2)) ^ v27;
  v29 = *((_QWORD *)this + 27);
  v30 = HIDWORD(v29);
  v31 = 0x9DDFEA08EB382D69 * (((8 * v29) + 8) ^ HIDWORD(v29));
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v30 ^ (v31 >> 47) ^ v31)) ^ ((0x9DDFEA08EB382D69 * (v30 ^ (v31 >> 47) ^ v31)) >> 47))
        - 0x61C8864680B583EBLL
        + (v28 << 6)
        + (v28 >> 2)) ^ v28;
}

__n128 md::MeshRenderableBuilder::buildRenderable(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __n128 result;

  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1E428F838;
  *(_OWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 142) = *(_QWORD *)(a2 + 142);
  v13 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v13;
  v14 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    v15 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_WORD *)(a1 + 192) = 0;
  if (*(_BYTE *)(a2 + 193))
  {
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_BYTE *)(a1 + 193) = 1;
  }
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  v18 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)a1 = &off_1E4296560;
  *(_OWORD *)(a1 + 208) = v18;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  v20 = *a3;
  v19 = a3[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 224) = v20;
  *(_QWORD *)(a1 + 232) = v19;
  v23 = a1 + 240;
  if ((uint64_t **)(a1 + 240) != a4)
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(v23, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  v24 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 280) = v24;
  result = *(__n128 *)(a5 + 32);
  *(__n128 *)(a1 + 296) = result;
  *(_WORD *)(a1 + 144) = 1;
  *(_BYTE *)(a1 + 147) = 1;
  return result;
}

void sub_19F41B914(_Unwind_Exception *a1)
{
  md::TexturedRenderable *v1;

  md::TexturedRenderable::~TexturedRenderable(v1);
  _Unwind_Resume(a1);
}

void md::TexturedRenderable::~TexturedRenderable(md::TexturedRenderable *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E4296560;
  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    v3 = *((_QWORD *)this + 31);
    v4 = (void *)*((_QWORD *)this + 30);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E4296560;
  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    v3 = *((_QWORD *)this + 31);
    v4 = (void *)*((_QWORD *)this + 30);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TexturedRenderable::hash(md::TexturedRenderable *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t md::TexturedRenderable::hash2(md::TexturedRenderable *this)
{
  return (*(uint64_t (**)(md::TexturedRenderable *))(*(_QWORD *)this + 16))(this);
}

void md::DaVinciMaterialResourceFetcher::~DaVinciMaterialResourceFetcher(md::DaVinciMaterialResourceFetcher *this)
{
  md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciMaterialResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::RenderQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE9D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RenderQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE9D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void karo::media::Image::mipmapAndCompress(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint32x2_t *v5;
  uint32x2_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int8x16_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  const void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  NSObject *v44;
  unsigned int v45;
  uint64_t v46;
  uint32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint64x2_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  uint64_t v80;
  char v81;
  char v82;
  int v83;
  unsigned int v84;
  __int32 v85;
  __int32 v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int8x16_t *v94;
  uint64_t v95;
  int v96;
  signed int v97;
  int v98;
  int v99;
  int v100;
  int8x16_t *v101;
  char *v102;
  char *v103;
  char *v104;
  int8x16_t *v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  signed int v127;
  int v128;
  int8x16_t *v129;
  uint64_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int v133;
  signed int v134;
  int8x16_t *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  uint64_t m;
  uint64_t v145;
  uint8x16_t *v146;
  uint8x16_t *v147;
  uint8x16_t *v148;
  uint8x16_t *v149;
  int8x16_t *v150;
  uint64_t v151;
  uint8x16_t v152;
  uint8x16_t v153;
  uint8x16_t v154;
  uint8x8_t v155;
  uint16x8_t v156;
  uint8x16_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint8x16_t v160;
  unsigned int v161;
  unint64_t v162;
  BOOL v163;
  char *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *p_shared_owners;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  int16x8_t v193;
  int32x4_t v194;
  int8x16_t v195;
  uint32x4_t v196;
  uint32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  char v204;
  unsigned int v205;
  int8x16_t v206;
  int8x16_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t j;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  int v216;
  unsigned __int8 *v217;
  int v218;
  unsigned int v219;
  unsigned __int8 *v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint8x8_t v233;
  unsigned int v234;
  unsigned int v235;
  uint8x8_t v236;
  unsigned int v237;
  unsigned int v238;
  uint8x8_t v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  __int16 v261;
  __int16 v262;
  __int16 v263;
  unsigned __int8 v264;
  __int16 v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  uint32x4_t v273;
  uint32x4_t v274;
  uint32x4_t v275;
  uint32x4_t v276;
  uint32x4_t v277;
  uint32x4_t v278;
  uint32x4_t v279;
  uint32x4_t v280;
  uint32x4_t v281;
  uint32x4_t v282;
  uint32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int8x16_t v286;
  uint64_t v287;
  int8x16_t v288;
  uint32x4_t v289;
  uint32x4_t v290;
  uint32x4_t v291;
  uint32x4_t v292;
  uint32x4_t v293;
  uint32x4_t v294;
  uint32x4_t v295;
  uint32x4_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x8_t v301;
  uint32x4_t v302;
  uint32x4_t v303;
  int8x16_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t k;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  int v311;
  unsigned __int8 *v312;
  int v313;
  unsigned int v314;
  unsigned __int8 *v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  uint8x8_t v328;
  unsigned int v329;
  unsigned int v330;
  uint8x8_t v331;
  unsigned int v332;
  unsigned int v333;
  uint8x8_t v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  int v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  __int16 v356;
  __int16 v357;
  __int16 v358;
  unsigned __int8 v359;
  __int16 v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  uint32x4_t v368;
  uint32x4_t v369;
  uint32x4_t v370;
  uint32x4_t v371;
  uint32x4_t v372;
  uint32x4_t v373;
  uint32x4_t v374;
  uint32x4_t v375;
  uint32x4_t v376;
  uint32x4_t v377;
  uint32x4_t v378;
  int8x16_t v379;
  uint64_t v380;
  int8x16_t v381;
  int32x4_t v382;
  int32x4_t v383;
  uint32x4_t v384;
  uint32x4_t v385;
  uint32x4_t v386;
  uint32x4_t v387;
  uint32x4_t v388;
  uint32x4_t v389;
  uint32x4_t v390;
  uint32x4_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x8_t v396;
  uint32x4_t v397;
  uint32x4_t v398;
  int8x16_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t i;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  int v406;
  unsigned __int8 *v407;
  int v408;
  unsigned int v409;
  unsigned __int8 *v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  uint8x8_t v423;
  unsigned int v424;
  unsigned int v425;
  uint8x8_t v426;
  unsigned int v427;
  unsigned int v428;
  uint8x8_t v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  int v443;
  int v444;
  int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  __int16 v451;
  __int16 v452;
  __int16 v453;
  unsigned __int8 v454;
  __int16 v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  uint32x4_t v463;
  uint32x4_t v464;
  uint32x4_t v465;
  uint32x4_t v466;
  uint32x4_t v467;
  uint32x4_t v468;
  uint32x4_t v469;
  uint32x4_t v470;
  uint32x4_t v471;
  uint32x4_t v472;
  uint32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int8x16_t v476;
  uint64_t v477;
  int8x16_t v478;
  uint32x4_t v479;
  uint32x4_t v480;
  uint32x4_t v481;
  uint32x4_t v482;
  uint32x4_t v483;
  uint32x4_t v484;
  uint32x4_t v485;
  uint32x4_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x8_t v491;
  uint32x4_t v492;
  uint32x4_t v493;
  int8x16_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  int v507;
  int64_t v508;
  int v509;
  uint64_t v510;
  _BYTE *v511;
  uint64_t v512;
  int v513;
  signed int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  _BYTE *v519;
  unsigned __int8 *v520;
  unsigned __int8 *v521;
  unsigned __int8 *v522;
  _BYTE *v523;
  uint64_t v524;
  unsigned __int8 *v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  int64x2_t v537;
  int v538;
  int v539;
  int8x16_t *v540;
  uint64_t v541;
  int64x2_t v542;
  int64x2_t v543;
  unint64_t v544;
  signed int v545;
  int v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t v553;
  int64x2_t v554;
  uint64x2_t v555;
  uint64x2_t v556;
  uint64x2_t v557;
  uint64_t v558;
  uint64_t v559;
  uint8x16_t *v560;
  uint8x16_t *v561;
  uint8x16_t *v562;
  uint8x16_t *v563;
  int8x16_t *v564;
  uint64_t v565;
  uint8x16_t v566;
  uint8x16_t v567;
  uint8x16_t v568;
  uint8x8_t v569;
  uint16x8_t v570;
  uint8x16_t v571;
  uint16x8_t v572;
  uint16x8_t v573;
  uint8x16_t v574;
  unint64_t *v575;
  unint64_t v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  uint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  uint64_t v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  ggl::Data *v590;
  unsigned int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t shared_owners;
  unint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  unsigned int v599;
  int8x16_t v600;
  int8x16_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int v604;
  unsigned int v605;
  __int16 v606;
  int v607;
  __int16 v608;
  __int16 v609;
  int v610;
  BOOL v611;
  BOOL v612;
  BOOL v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  unint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  BOOL v626;
  BOOL v627;
  BOOL v628;
  unsigned int v630;
  unsigned int v631;
  uint64_t v632;
  const __int16 *v633;
  uint16x4_t v634;
  uint16x4_t v635;
  int8x16_t v636;
  int8x16_t v637;
  uint16x4_t v638;
  int8x16_t v639;
  int8x16_t v640;
  uint16x4_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int8x16_t v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  unint64_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  float64x2_t v657;
  std::__shared_weak_count *v658;
  float64x2_t v659;
  uint64_t v660;
  unint64_t v661;
  int64x2_t v662;
  unsigned int v663;
  uint64x2_t v664;
  unsigned int v665;
  int64x2_t v666;
  unsigned int v667;
  uint64_t v668;
  unsigned int v669;
  uint32x2_t v670;
  _QWORD *v671;
  unint64_t v672;
  void *__dst;
  unint64_t __dsta;
  std::__shared_weak_count *v676;
  size_t __n;
  uint64_t v678;
  _QWORD *v679;
  int v680;
  unint64_t *v681;
  std::__shared_weak_count *v682;
  unint64_t v683;
  uint64_t v684;
  int8x16_t v685;
  uint64_t v686;
  int8x16_t *v687;
  int8x16_t v688;
  uint64_t v689;
  int v690;
  int8x16_t v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  unsigned int v697;
  signed int v698;
  int v699;
  unsigned int v700;
  int v701;
  int v702;
  int v703;
  int v704;
  unsigned int v705;
  std::__shared_weak_count *v706;
  __int32 v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint8_t buf[4];
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  unsigned int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  unsigned int v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int v722;
  unsigned int v723;
  unsigned int v724;
  unsigned int v725;
  unsigned int v726;
  uint64_t v727;
  int16x8x2_t v728;

  v727 = *MEMORY[0x1E0C80C00];
  if (a2 > 0xE)
    return;
  v2 = a1;
  if (((1 << a2) & 0x177) == 0)
  {
    if (a2 != 13)
    {
      if (a2 != 14)
        return;
      if (*(_DWORD *)(a1 + 16) == 14)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (v7)
        {
          v8 = *(_DWORD *)v7;
          v9 = *(_DWORD *)(v7 + 4);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        if (v8 <= v9)
          v172 = v9;
        else
          v172 = v8;
        v173 = 1;
        if (v172 >= 2)
        {
          do
          {
            ++v173;
            v163 = v172 > 3;
            v172 >>= 1;
          }
          while (v163);
        }
        if (v7)
        {
          v174 = *(_QWORD *)(v7 + 16);
          v175 = *(_QWORD *)(v7 + 24);
          v176 = (v175 - v174) >> 4;
          v177 = v173 - v176;
          if (v173 <= v176)
          {
            if (v173 < v176)
            {
              v182 = v174 + 16 * v173;
              while (v175 != v182)
              {
                v183 = *(std::__shared_weak_count **)(v175 - 8);
                if (v183)
                {
                  p_shared_owners = (unint64_t *)&v183->__shared_owners_;
                  do
                    v185 = __ldaxr(p_shared_owners);
                  while (__stlxr(v185 - 1, p_shared_owners));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *, unint64_t))v183->__on_zero_shared)(v183, v177);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
                v175 -= 16;
              }
              *(_QWORD *)(v7 + 24) = v182;
            }
          }
          else
          {
            std::vector<std::shared_ptr<ggl::Data>>::__append(v7 + 16, v177);
          }
        }
        if (v173 < 2)
          return;
        v694 = v173;
        v577 = 1;
        v688 = (int8x16_t)vdupq_n_s32(0x1F80u);
        v691 = (int8x16_t)vdupq_n_s32(0x7E0u);
        v685 = (int8x16_t)vdupq_n_s32(0x3E000u);
        v700 = v8;
        v697 = v9;
LABEL_654:
        if (v8 >> (v577 - 1) <= 1)
          v578 = 1;
        else
          v578 = v8 >> (v577 - 1);
        if (v8 >> v577 <= 1)
          v579 = 1;
        else
          v579 = v8 >> v577;
        if (v9 >> v577 <= 1)
          v580 = 1;
        else
          v580 = v9 >> v577;
        v581 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + 16 * (v577 - 1));
        v582 = *v581;
        v583 = (std::__shared_weak_count *)v581[1];
        v710 = v577;
        if (v583)
        {
          v584 = (unint64_t *)&v583->__shared_owners_;
          do
            v585 = __ldxr(v584);
          while (__stxr(v585 + 1, v584));
          v586 = *(_QWORD *)(v582 + 8);
          do
            v587 = __ldaxr(v584);
          while (__stlxr(v587 - 1, v584));
          if (!v587)
          {
            ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
            std::__shared_weak_count::__release_weak(v583);
          }
        }
        else
        {
          v586 = *(_QWORD *)(v582 + 8);
        }
        v588 = (std::__shared_weak_count *)operator new(0x30uLL);
        v588->__shared_owners_ = 0;
        v589 = (unint64_t *)&v588->__shared_owners_;
        v588->__shared_weak_owners_ = 0;
        v588->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
        v590 = ggl::Data::Data((ggl::Data *)&v588[1], (2 * v580 * v579));
        v591 = 0;
        v592 = 0;
        v593 = 0;
        v706 = v588;
        shared_owners = v588[1].__shared_owners_;
        v595 = v579 - 1;
        v596 = 2 * v578;
        v597 = v586 + 4 * v579;
        v598 = v597 - 2;
        v599 = 2 * (v579 - 1);
        v600.i64[0] = 0xF8000000F800;
        v600.i64[1] = 0xF8000000F800;
        v601.i64[0] = 0x1F0000001FLL;
        v601.i64[1] = 0x1F0000001FLL;
        while (1)
        {
          if (v579 > 0xF)
          {
            v602 = 0;
            v610 = v596 * v593;
            v611 = __CFADD__(v579 * v593, (_DWORD)v595);
            v612 = __CFADD__(v610, v599);
            v613 = __CFADD__(v578 + v596 * v593, v599);
            if (!__CFADD__(v578 + 1 + v596 * v593, v599)
              && !v613
              && (v610 ^ 0xFFFFFFFE) >= v599
              && !v611
              && !v612
              && !(v595 >> 31))
            {
              v602 = 0;
              v614 = 2 * (v579 * v593);
              v615 = shared_owners + v614;
              v616 = shared_owners + 2 * v579 + v614;
              v617 = 2 * (v578 + 1 + v596 * v593);
              v618 = v586 + v617;
              v619 = v598 + v617;
              v620 = 2 * (v578 + v596 * v593);
              v621 = v586 + v620;
              v622 = 2 * (v596 * v593);
              _CF = v615 >= v598 + v620;
              v623 = v586 + v622;
              v624 = v597 + v622;
              _CF = _CF || v621 >= v616;
              v626 = !_CF;
              v627 = v615 >= v624 || v623 >= v616;
              v628 = !v627;
              if ((v618 >= v616 || v615 >= v619) && !v626 && !v628)
              {
                v630 = v591;
                v631 = v592;
                v632 = v579 & 0xFFFFFFF8;
                do
                {
                  v633 = (const __int16 *)(v586 + 2 * v630);
                  v728 = vld2q_s16(v633);
                  v634.i16[0] = *(_WORD *)(v586 + 2 * (v578 + v630));
                  v634.i16[1] = *(_WORD *)(v586 + 2 * (v578 + v630 + 2));
                  v635.i16[0] = *(_WORD *)(v586 + 2 * (v578 + v630 + 8));
                  v634.i16[2] = *(_WORD *)(v586 + 2 * (v578 + v630 + 4));
                  v635.i16[1] = *(_WORD *)(v586 + 2 * (v578 + v630 + 10));
                  v635.i16[2] = *(_WORD *)(v586 + 2 * (v578 + v630 + 12));
                  v634.i16[3] = *(_WORD *)(v586 + 2 * (v578 + v630 + 6));
                  v635.i16[3] = *(_WORD *)(v586 + 2 * (v578 + v630 + 14));
                  v636 = (int8x16_t)vmovl_high_u16((uint16x8_t)v728.val[0]);
                  v637 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v728.val[0].i8);
                  v638.i16[0] = *(_WORD *)(v586 + 2 * (v578 + v630 + 9));
                  v639 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v728.val[1].i8);
                  v638.i16[1] = *(_WORD *)(v586 + 2 * (v578 + v630 + 11));
                  v638.i16[2] = *(_WORD *)(v586 + 2 * (v578 + v630 + 13));
                  v640 = (int8x16_t)vmovl_high_u16((uint16x8_t)v728.val[1]);
                  v638.i16[3] = *(_WORD *)(v586 + 2 * (v578 + v630 + 15));
                  v641.i16[0] = *(_WORD *)(v586 + 2 * (v578 + v630 + 1));
                  v642 = (int8x16_t)vmovl_u16(v634);
                  v641.i16[1] = *(_WORD *)(v586 + 2 * (v578 + v630 + 3));
                  v641.i16[2] = *(_WORD *)(v586 + 2 * (v578 + v630 + 5));
                  v643 = (int8x16_t)vmovl_u16(v635);
                  v644 = (int8x16_t)vmovl_u16(v638);
                  v641.i16[3] = *(_WORD *)(v586 + 2 * (v578 + v630 + 7));
                  v645 = (int8x16_t)vmovl_u16(v641);
                  *(int16x8_t *)(shared_owners + 2 * v631) = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v639, v601), (int32x4_t)vandq_s8(v637, v601)), (int32x4_t)vandq_s8(v642, v601)), (int32x4_t)vandq_s8(v645, v601)), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v639, v691), (int32x4_t)vandq_s8(v637, v691)), (int32x4_t)vandq_s8(v642, v691)), (int32x4_t)vandq_s8(v645, v691)), v688)),
                                                                                vandq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vandq_s8(v637, v600), *(uint16x4_t *)v728.val[1].i8), (int32x4_t)vandq_s8(v642, v600)), (int32x4_t)vandq_s8(v645, v600)), v685)), 2uLL), (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v640, v601), (int32x4_t)vandq_s8(v636, v601)), (int32x4_t)vandq_s8(v643, v601)), (int32x4_t)vandq_s8(v644, v601)), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(
                                                                                                 vaddq_s32((int32x4_t)vandq_s8(v640, v691), (int32x4_t)vandq_s8(v636, v691)), (int32x4_t)vandq_s8(v643, v691)), (int32x4_t)vandq_s8(v644, v691)), v688)), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vandq_s8(v636, v600), (uint16x8_t)v728.val[1]), (int32x4_t)vandq_s8(v643, v600)), (int32x4_t)vandq_s8(v644, v600)), v685)), 2uLL);
                  v631 += 8;
                  v630 += 16;
                  v632 -= 8;
                }
                while (v632);
                v602 = v579 & 0xFFFFFFF8;
                if (v602 == v579)
                  goto LABEL_676;
              }
            }
          }
          else
          {
            v602 = 0;
          }
          v603 = v579 - v602;
          v604 = v592 + v602;
          v605 = v591 + 2 * v602;
          do
          {
            v606 = *(_WORD *)(v586 + 2 * v605);
            v607 = *(unsigned __int16 *)(v586 + 2 * (v605 + 1));
            v608 = *(_WORD *)(v586 + 2 * (v578 + v605));
            v609 = *(_WORD *)(v586 + 2 * (v578 + v605 + 1));
            *(_WORD *)(shared_owners + 2 * v604++) = (((v607 & 0x1F) + (v606 & 0x1F) + (v608 & 0x1F) + (v609 & 0x1F)) | ((v606 & 0xF800) + v607 + (v608 & 0xF800) + (v609 & 0xF800)) & 0x3E000 | ((v607 & 0x7E0) + (v606 & 0x7E0) + (v608 & 0x7E0) + (v609 & 0x7E0)) & 0x1F80u) >> 2;
            v605 += 2;
            --v603;
          }
          while (v603);
LABEL_676:
          ++v593;
          v592 += v579;
          v591 += v596;
          if (v593 == v580)
          {
            v2 = a1;
            v646 = *(_QWORD *)(a1 + 8);
            v8 = v700;
            v9 = v697;
            if (v646)
            {
              v647 = *(_QWORD *)(v646 + 16);
              do
                v648 = __ldxr(v589);
              while (__stxr(v648 + 1, v589));
              *(_QWORD *)(v647 + 16 * v710) = v590;
              v649 = v647 + 16 * v710;
              v650 = *(std::__shared_weak_count **)(v649 + 8);
              *(_QWORD *)(v649 + 8) = v706;
              if (v650)
              {
                v651 = (unint64_t *)&v650->__shared_owners_;
                do
                  v652 = __ldaxr(v651);
                while (__stlxr(v652 - 1, v651));
                if (!v652)
                {
                  ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
                  std::__shared_weak_count::__release_weak(v650);
                }
              }
            }
            do
              v653 = __ldaxr(v589);
            while (__stlxr(v653 - 1, v589));
            if (!v653)
            {
              ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
              std::__shared_weak_count::__release_weak(v706);
            }
            v577 = v710 + 1;
            if (v710 + 1 == v694)
              return;
            goto LABEL_654;
          }
        }
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v44 = GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        return;
      v161 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)buf = 67109120;
      v712 = v161;
LABEL_175:
      _os_log_impl(&dword_19F029000, v44, OS_LOG_TYPE_ERROR, "Unsupported pixel format: %d", buf, 8u);
      return;
    }
    v39 = *(_DWORD *)(a1 + 16);
    if (v39 == 6)
    {
      karo::media::Image::convertToFormat(a1, 1);
      v39 = *(_DWORD *)(v2 + 16);
    }
    if (v39 > 4 || ((1 << v39) & 0x13) == 0)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v44 = GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        return;
      v171 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)buf = 67109120;
      v712 = v171;
      goto LABEL_175;
    }
    v41 = *(unsigned int **)(v2 + 8);
    if (v41)
    {
      v42 = *v41;
      v43 = v41[1];
    }
    else
    {
      v42 = 0;
      v43 = 0;
    }
    LODWORD(v162) = 0;
    do
    {
      v162 = (v162 + 1);
      v163 = v42 >> v162 >= 5 && v43 >> v162 > 4;
    }
    while (v163);
    if (!v41)
    {
      v667 = v39;
      v660 = 0;
      v658 = 0;
      goto LABEL_205;
    }
    v164 = (char *)*((_QWORD *)v41 + 2);
    v165 = (std::__shared_weak_count *)*((_QWORD *)v164 + 1);
    v660 = *(_QWORD *)v164;
    v658 = v165;
    if (v165)
    {
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
      v39 = *(_DWORD *)(v2 + 16);
      v41 = *(unsigned int **)(v2 + 8);
      if (!v41)
      {
        v667 = *(_DWORD *)(v2 + 16);
        goto LABEL_205;
      }
      v164 = (char *)*((_QWORD *)v41 + 2);
    }
    *v41 = v42;
    v41[1] = v43;
    v168 = (char *)*((_QWORD *)v41 + 3);
    v169 = (v168 - v164) >> 4;
    v170 = v162 - v169;
    v667 = v39;
    if (v162 <= v169)
    {
      if (v162 < v169)
      {
        v178 = &v164[16 * v162];
        while (v168 != v178)
        {
          v179 = (std::__shared_weak_count *)*((_QWORD *)v168 - 1);
          if (v179)
          {
            v180 = (unint64_t *)&v179->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v179->__on_zero_shared)(v179, v170);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          v168 -= 16;
        }
        *((_QWORD *)v41 + 3) = v178;
      }
    }
    else
    {
      std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)(v41 + 4), v170);
    }
LABEL_205:
    v186 = 0;
    v665 = v42;
    v663 = v43;
    v661 = v162;
    while (1)
    {
      v187 = v42 >> v186;
      v188 = v43 >> v186;
      v189 = v187 >> 2;
      if ((v187 & 3) != 0)
        LODWORD(v189) = v189 + 1;
      _ZF = (v188 & 3) == 0;
      v709 = v43 >> v186;
      v190 = v188 >> 2;
      if (!_ZF)
        LODWORD(v190) = v190 + 1;
      v191 = 8 * v189 * (unint64_t)v190;
      v192 = (std::__shared_weak_count *)operator new(0x30uLL);
      v192->__shared_owners_ = 0;
      v681 = (unint64_t *)&v192->__shared_owners_;
      v192->__shared_weak_owners_ = 0;
      v192->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
      v679 = &v192[1].__vftable;
      ggl::Data::Data((ggl::Data *)&v192[1], v191);
      v682 = v192;
      v684 = v186;
      v200 = v192[1].__shared_owners_;
      if (v186)
      {
        v201 = *(_QWORD *)(a1 + 8);
        if (v201)
          break;
      }
LABEL_214:
      v206.i64[0] = 0x100000001;
      v206.i64[1] = 0x100000001;
      v207.i64[0] = 0x200000002;
      v207.i64[1] = 0x200000002;
      if (v667)
      {
        v208 = a1;
        v209 = v684;
        if (v667 == 4)
        {
          if ((int)v709 >= 1 && (int)v187 >= 1)
          {
            v400 = 0;
            v401 = *(_QWORD *)(v660 + 8);
            v402 = 4 * (int)v187 - 16;
            do
            {
              v704 = v400;
              for (i = 0; i < v187; i += 4)
              {
                v404 = (unsigned __int8 *)(v401 + 4 * i);
                *(_DWORD *)buf = (v404[1] << 8) | (*v404 << 16) | v404[2] | 0xFF000000;
                v712 = (v404[5] << 8) | (v404[4] << 16) | v404[6] | 0xFF000000;
                v713 = (v404[9] << 8) | (v404[8] << 16) | v404[10] | 0xFF000000;
                v714 = (v404[13] << 8) | (v404[12] << 16) | v404[14] | 0xFF000000;
                v405 = &v404[v402];
                v406 = v405[16];
                v405 += 16;
                v715 = (v405[1] << 8) | (v406 << 16) | v405[2] | 0xFF000000;
                v716 = (v405[5] << 8) | (v405[4] << 16) | v405[6] | 0xFF000000;
                v717 = (v405[9] << 8) | (v405[8] << 16) | v405[10] | 0xFF000000;
                v718 = (v405[13] << 8) | (v405[12] << 16) | v405[14] | 0xFF000000;
                v407 = &v405[v402];
                v408 = v407[16];
                v407 += 16;
                v719 = (v407[1] << 8) | (v408 << 16) | v407[2] | 0xFF000000;
                v720 = (v407[5] << 8) | (v407[4] << 16) | v407[6] | 0xFF000000;
                v721 = (v407[9] << 8) | (v407[8] << 16) | v407[10] | 0xFF000000;
                v409 = v407[14];
                v722 = (v407[13] << 8) | (v407[12] << 16) | v409 | 0xFF000000;
                v410 = &v407[v402];
                v411 = v407[v402 + 16];
                v412 = v407[v402 + 17];
                v413 = v407[v402 + 18];
                v723 = v413 | (v411 << 16) | (v412 << 8) | 0xFF000000;
                v414 = v407[v402 + 20];
                v415 = v407[v402 + 21];
                v416 = v407[v402 + 22];
                v724 = v416 | (v414 << 16) | (v415 << 8) | 0xFF000000;
                v417 = v407[v402 + 24];
                v418 = v407[v402 + 25];
                v419 = v407[v402 + 26];
                v725 = v419 | (v417 << 16) | (v418 << 8) | 0xFF000000;
                v420 = v407[v402 + 28];
                v421 = v410[29];
                v422 = v410[30];
                *(int8x8x4_t *)v429.i8 = vld4_s8((const char *)buf);
                v726 = v422 | (v420 << 16) | (v421 << 8) | 0xFF000000;
                v193.i8[0] = vminv_u8(v423);
                v424 = v193.i32[0];
                v193.i8[0] = vminv_u8(v429);
                v425 = v193.i32[0];
                v193.i8[0] = vminv_u8(v426);
                v427 = v193.i32[0];
                v193.i8[0] = vmaxv_u8(v426);
                v428 = v193.i32[0];
                v193.i8[0] = vmaxv_u8(v423);
                v429.i8[0] = vmaxv_u8(v429);
                v430 = v429.i32[0];
                if (v719 < v425)
                  v425 = v719;
                v431 = BYTE1(v719);
                if (BYTE1(v719) < v424)
                  v424 = BYTE1(v719);
                v432 = BYTE2(v719);
                if (BYTE2(v719) < v427)
                  v427 = BYTE2(v719);
                if (v719 > v429.i32[0])
                  v430 = v719;
                if (BYTE1(v719) <= v193.i32[0])
                  v431 = v193.i32[0];
                if (BYTE2(v719) <= v428)
                  v432 = v428;
                v433 = v720;
                if (v720 < v425)
                  v425 = v720;
                if (BYTE1(v720) < v424)
                  v424 = BYTE1(v720);
                if (BYTE2(v720) < v427)
                  v427 = BYTE2(v720);
                if (v720 <= v430)
                  v433 = v430;
                if (BYTE1(v720) > v431)
                  v431 = BYTE1(v720);
                if (BYTE2(v720) > v432)
                  v432 = BYTE2(v720);
                if (v721 < v425)
                  v425 = v721;
                if (BYTE1(v721) < v424)
                  v424 = BYTE1(v721);
                if (BYTE2(v721) < v427)
                  v427 = BYTE2(v721);
                if (v721 > v433)
                  v433 = v721;
                if (BYTE1(v721) > v431)
                  v431 = BYTE1(v721);
                if (BYTE2(v721) > v432)
                  v432 = BYTE2(v721);
                if (v409 < v425)
                  v425 = v409;
                if (BYTE1(v722) < v424)
                  v424 = BYTE1(v722);
                if (BYTE2(v722) < v427)
                  v427 = BYTE2(v722);
                if (v409 <= v433)
                  v409 = v433;
                if (BYTE1(v722) > v431)
                  v431 = BYTE1(v722);
                if (BYTE2(v722) > v432)
                  v432 = BYTE2(v722);
                if (v413 < v425)
                  v425 = v413;
                if (v412 < v424)
                  v424 = v412;
                if (v411 < v427)
                  v427 = v411;
                if (v413 <= v409)
                  v413 = v409;
                if (v412 > v431)
                  v431 = v412;
                if (v411 > v432)
                  v432 = v411;
                if (v416 >= v425)
                  v434 = v425;
                else
                  v434 = v416;
                if (v415 >= v424)
                  v435 = v424;
                else
                  v435 = v415;
                if (v414 >= v427)
                  v436 = v427;
                else
                  v436 = v414;
                if (v416 <= v413)
                  v416 = v413;
                if (v415 > v431)
                  v431 = v415;
                if (v414 > v432)
                  v432 = v414;
                if (v419 >= v434)
                  v437 = v434;
                else
                  v437 = v419;
                if (v418 >= v435)
                  v438 = v435;
                else
                  v438 = v418;
                if (v417 >= v436)
                  v439 = v436;
                else
                  v439 = v417;
                if (v419 <= v416)
                  v419 = v416;
                if (v418 > v431)
                  v431 = v418;
                if (v417 > v432)
                  v432 = v417;
                if (v422 >= v437)
                  v440 = v437;
                else
                  v440 = v422;
                if (v421 >= v438)
                  v441 = v438;
                else
                  v441 = v421;
                if (v420 >= v439)
                  v442 = v439;
                else
                  v442 = v420;
                if (v422 <= v419)
                  v422 = v419;
                if (v421 > v431)
                  v431 = v421;
                if (v420 > v432)
                  v432 = v420;
                v443 = (int)(v422 - v440) >> 4;
                v444 = (int)(v431 - v441) >> 4;
                v445 = (int)(v432 - v442) >> 4;
                v446 = v443;
                v447 = v443 + v440;
                if (v447 >= 0x100)
                  v447 = -1;
                v448 = ((int)(v431 - v441) >> 4);
                v449 = v448 + v441;
                if (v449 >= 0x100)
                  v449 = -1;
                v450 = ((int)(v432 - v442) >> 4) + v442;
                if (v450 >= 0x100)
                  LOBYTE(v450) = -1;
                v451 = v422 - v443;
                if (v446 > v422)
                  v451 = 0;
                v452 = v431 - v444;
                if (v448 <= v431)
                  v453 = v452;
                else
                  v453 = 0;
                v454 = v432 - v445;
                v455 = 8 * v453;
                if (v445 > v432)
                  v454 = 0;
                *(_BYTE *)v200 = v455 & 0xE0 | (v454 >> 3);
                *(_BYTE *)(v200 + 1) = (unsigned __int16)((v451 << 8) & 0xF800 | v455 & 0x7FF) >> 8;
                *(_BYTE *)(v200 + 2) = (8 * v449) & 0xE0 | (v450 >> 3);
                v456 = ((v447 << 8) & 0xFFFFF800 | (8 * v449) & 0x7FF) >> 8;
                v457 = v450 & 0xF8 | (v450 >> 5);
                v458 = v454 & 0xF8 | (v454 >> 5);
                v459 = v449 & 0xFC | (v449 >> 6);
                v460 = v453 & 0xFC | (v453 >> 6);
                v461 = v447 & 0xF8 | (v447 >> 5);
                v462 = v451 & 0xF8 | (v451 >> 5);
                v463 = (uint32x4_t)vdupq_n_s32(v462);
                v464 = (uint32x4_t)vdupq_n_s32(v460);
                v465 = (uint32x4_t)vdupq_n_s32(v458);
                v466 = (uint32x4_t)vdupq_n_s32(v461);
                v193 = (int16x8_t)vdupq_n_s32(v459);
                v467 = (uint32x4_t)vdupq_n_s32(v457);
                v468 = (uint32x4_t)vdupq_n_s32((21846 * (v461 + 2 * v462)) >> 16);
                v469 = (uint32x4_t)vdupq_n_s32((21846 * (v459 + 2 * v460)) >> 16);
                v470 = (uint32x4_t)vdupq_n_s32((21846 * (v457 + 2 * v458)) >> 16);
                v471 = (uint32x4_t)vdupq_n_s32((21846 * (v462 + 2 * v461)) >> 16);
                v472 = (uint32x4_t)vdupq_n_s32((21846 * (v460 + 2 * v459)) >> 16);
                v473 = (uint32x4_t)vdupq_n_s32((21846 * (v458 + 2 * v457)) >> 16);
                *(_BYTE *)(v200 + 3) = v456;
                v474 = (int32x4_t)xmmword_19FFB2F30;
                v475 = (int32x4_t)xmmword_19FFB2F40;
                v476 = 0uLL;
                v477 = 32;
                v478 = 0uLL;
                do
                {
                  v194.i8[0] = *((_BYTE *)&v718 + v477);
                  v194.i8[4] = *((_BYTE *)&v717 + v477);
                  v194.i8[8] = *((_BYTE *)&v716 + v477);
                  v195.i8[0] = *((_BYTE *)&v714 + v477);
                  v195.i8[4] = *((_BYTE *)&v713 + v477);
                  v194.i8[12] = *((_BYTE *)&v715 + v477);
                  v195.i8[8] = buf[v477 + 4];
                  v195.i8[12] = buf[v477];
                  v196.i8[0] = *((_BYTE *)&v714 + v477 + 1);
                  v196.i8[4] = *((_BYTE *)&v713 + v477 + 1);
                  v196.i8[8] = *((_BYTE *)&v712 + v477 + 1);
                  v197.i8[0] = *((_BYTE *)&v718 + v477 + 1);
                  v197.i8[4] = *((_BYTE *)&v717 + v477 + 1);
                  v197.i8[8] = *((_BYTE *)&v716 + v477 + 1);
                  v198.i8[0] = *((_BYTE *)&v718 + v477 + 2);
                  v197.i8[12] = *((_BYTE *)&v715 + v477 + 1);
                  v198.i8[4] = *((_BYTE *)&v717 + v477 + 2);
                  v198.i8[8] = *((_BYTE *)&v716 + v477 + 2);
                  v196.i8[12] = buf[v477 + 1];
                  v199.i8[0] = *((_BYTE *)&v714 + v477 + 2);
                  v199.i8[4] = *((_BYTE *)&v713 + v477 + 2);
                  v198.i8[12] = *((_BYTE *)&v715 + v477 + 2);
                  v199.i8[8] = *((_BYTE *)&v712 + v477 + 2);
                  v199.i8[12] = buf[v477 + 2];
                  v479 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v464), (uint32x4_t)v194, v463), (uint32x4_t)v198, v465);
                  v480 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v464), (uint32x4_t)v195, v463), (uint32x4_t)v199, v465);
                  v481 = vabaq_u32(vabaq_u32(vabdq_u32(v197, (uint32x4_t)v193), (uint32x4_t)v194, v466), (uint32x4_t)v198, v467);
                  v482 = vabaq_u32(vabaq_u32(vabdq_u32(v196, (uint32x4_t)v193), (uint32x4_t)v195, v466), (uint32x4_t)v199, v467);
                  v483 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v469), (uint32x4_t)v194, v468), (uint32x4_t)v198, v470);
                  v484 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v469), (uint32x4_t)v195, v468), (uint32x4_t)v199, v470);
                  v485 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v472), (uint32x4_t)v195, v471), (uint32x4_t)v199, v473);
                  v486 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v472), (uint32x4_t)v194, v471), (uint32x4_t)v198, v473);
                  v487 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v479, v486), (int16x8_t)vcgtq_u32(v480, v485));
                  v198 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v479, v483), (int16x8_t)vcgtq_u32(v480, v484));
                  v199 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v481, v486), (int16x8_t)vcgtq_u32(v482, v485));
                  v488 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v483, v486), (int16x8_t)vcgtq_u32(v484, v485));
                  v489 = vandq_s8(v487, v199);
                  *(int8x8_t *)v487.i8 = vmovn_s16((int16x8_t)vandq_s8(v487, v488));
                  v490 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v487.i8, *(int8x8_t *)v463.i8)), v206);
                  v491 = vmovn_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v481, v483), (int16x8_t)vcgtq_u32(v482, v484)), v198), v489));
                  v492 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v491, *(int8x8_t *)v463.i8)), 0x1FuLL)), v207), vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v487.i8, *(int8x8_t *)v463.i8)), v206));
                  v493 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v491, *(int8x8_t *)v463.i8)), 0x1FuLL)), v207), v490);
                  v196 = (uint32x4_t)vaddq_s32(v474, v474);
                  v197 = (uint32x4_t)vaddq_s32(v475, v475);
                  v195 = (int8x16_t)vshlq_u32(v493, v197);
                  v478 = vorrq_s8((int8x16_t)vshlq_u32(v492, v196), v478);
                  v194.i64[0] = 0x700000007;
                  v194.i64[1] = 0x700000007;
                  v476 = vorrq_s8(v195, v476);
                  v475 = vaddq_s32(v475, v194);
                  v474 = vaddq_s32(v474, v194);
                  v477 -= 32;
                }
                while (v477 != -32);
                v494 = vorrq_s8(v476, v478);
                *(int8x8_t *)v494.i8 = vorr_s8(*(int8x8_t *)v494.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v494, v494, 8uLL));
                *(_DWORD *)(v200 + 4) = v494.i32[0] | v494.i32[1];
                v200 += 8;
              }
              v400 = v704 + 4;
              v401 += 16 * (int)v187;
            }
            while (v704 + 4 < (int)v709);
          }
        }
        else
        {
          if (v667 != 1)
            goto LABEL_601;
          if ((int)v709 >= 1 && (int)v187 >= 1)
          {
            v210 = 0;
            v211 = *(_QWORD *)(v660 + 8);
            v212 = 4 * (int)v187 - 16;
            do
            {
              v702 = v210;
              for (j = 0; j < v187; j += 4)
              {
                v214 = (unsigned __int8 *)(v211 + 4 * j);
                *(_DWORD *)buf = (v214[1] << 8) | (v214[2] << 16) | *v214 | 0xFF000000;
                v712 = (v214[5] << 8) | (v214[6] << 16) | v214[4] | 0xFF000000;
                v713 = (v214[9] << 8) | (v214[10] << 16) | v214[8] | 0xFF000000;
                v714 = (v214[13] << 8) | (v214[14] << 16) | v214[12] | 0xFF000000;
                v215 = &v214[v212];
                v216 = v215[16];
                v215 += 16;
                v715 = (v215[1] << 8) | (v215[2] << 16) | v216 | 0xFF000000;
                v716 = (v215[5] << 8) | (v215[6] << 16) | v215[4] | 0xFF000000;
                v717 = (v215[9] << 8) | (v215[10] << 16) | v215[8] | 0xFF000000;
                v718 = (v215[13] << 8) | (v215[14] << 16) | v215[12] | 0xFF000000;
                v217 = &v215[v212];
                v218 = v217[16];
                v217 += 16;
                v719 = (v217[1] << 8) | (v217[2] << 16) | v218 | 0xFF000000;
                v720 = (v217[5] << 8) | (v217[6] << 16) | v217[4] | 0xFF000000;
                v721 = (v217[9] << 8) | (v217[10] << 16) | v217[8] | 0xFF000000;
                v219 = v217[12];
                v722 = (v217[13] << 8) | (v217[14] << 16) | v219 | 0xFF000000;
                v220 = &v217[v212];
                v221 = v217[v212 + 18];
                v222 = v217[v212 + 17];
                v223 = v217[v212 + 16];
                v723 = v223 | (v221 << 16) | (v222 << 8) | 0xFF000000;
                v224 = v217[v212 + 22];
                v225 = v217[v212 + 21];
                v226 = v217[v212 + 20];
                v724 = v226 | (v224 << 16) | (v225 << 8) | 0xFF000000;
                v227 = v217[v212 + 26];
                v228 = v217[v212 + 25];
                v229 = v217[v212 + 24];
                v725 = v229 | (v227 << 16) | (v228 << 8) | 0xFF000000;
                v230 = v217[v212 + 30];
                v231 = v220[29];
                v232 = v220[28];
                *(int8x8x4_t *)v239.i8 = vld4_s8((const char *)buf);
                v726 = v232 | (v230 << 16) | (v231 << 8) | 0xFF000000;
                v193.i8[0] = vminv_u8(v233);
                v234 = v193.i32[0];
                v193.i8[0] = vminv_u8(v239);
                v235 = v193.i32[0];
                v193.i8[0] = vminv_u8(v236);
                v237 = v193.i32[0];
                v193.i8[0] = vmaxv_u8(v236);
                v238 = v193.i32[0];
                v193.i8[0] = vmaxv_u8(v233);
                v239.i8[0] = vmaxv_u8(v239);
                v240 = v719;
                if (v719 < v235)
                  v235 = v719;
                v241 = BYTE1(v719);
                if (BYTE1(v719) < v234)
                  v234 = BYTE1(v719);
                v242 = BYTE2(v719);
                if (BYTE2(v719) < v237)
                  v237 = BYTE2(v719);
                if (v719 <= v239.i32[0])
                  v240 = v239.i32[0];
                if (BYTE1(v719) <= v193.i32[0])
                  v241 = v193.i32[0];
                if (BYTE2(v719) <= v238)
                  v242 = v238;
                if (v720 < v235)
                  v235 = v720;
                if (BYTE1(v720) < v234)
                  v234 = BYTE1(v720);
                if (BYTE2(v720) < v237)
                  v237 = BYTE2(v720);
                if (v720 > v240)
                  v240 = v720;
                if (BYTE1(v720) > v241)
                  v241 = BYTE1(v720);
                if (BYTE2(v720) > v242)
                  v242 = BYTE2(v720);
                if (v721 < v235)
                  v235 = v721;
                if (BYTE1(v721) < v234)
                  v234 = BYTE1(v721);
                if (BYTE2(v721) < v237)
                  v237 = BYTE2(v721);
                if (v721 > v240)
                  v240 = v721;
                if (BYTE1(v721) > v241)
                  v241 = BYTE1(v721);
                if (BYTE2(v721) > v242)
                  v242 = BYTE2(v721);
                if (v219 < v235)
                  v235 = v219;
                if (BYTE1(v722) < v234)
                  v234 = BYTE1(v722);
                if (BYTE2(v722) < v237)
                  v237 = BYTE2(v722);
                if (v219 > v240)
                  v240 = v219;
                if (BYTE1(v722) > v241)
                  v241 = BYTE1(v722);
                if (BYTE2(v722) > v242)
                  v242 = BYTE2(v722);
                if (v223 >= v235)
                  v243 = v235;
                else
                  v243 = v223;
                if (v222 < v234)
                  v234 = v222;
                if (v221 >= v237)
                  v244 = v237;
                else
                  v244 = v221;
                if (v223 > v240)
                  v240 = v223;
                if (v222 > v241)
                  v241 = v222;
                if (v221 <= v242)
                  v221 = v242;
                if (v226 >= v243)
                  v245 = v243;
                else
                  v245 = v226;
                if (v225 >= v234)
                  v246 = v234;
                else
                  v246 = v225;
                if (v224 >= v244)
                  v247 = v244;
                else
                  v247 = v224;
                if (v226 > v240)
                  v240 = v226;
                if (v225 > v241)
                  v241 = v225;
                if (v224 <= v221)
                  v224 = v221;
                if (v229 >= v245)
                  v248 = v245;
                else
                  v248 = v229;
                if (v228 >= v246)
                  v249 = v246;
                else
                  v249 = v228;
                if (v227 >= v247)
                  v250 = v247;
                else
                  v250 = v227;
                if (v229 > v240)
                  v240 = v229;
                if (v228 > v241)
                  v241 = v228;
                if (v227 <= v224)
                  v227 = v224;
                if (v232 >= v248)
                  v251 = v248;
                else
                  v251 = v232;
                if (v231 >= v249)
                  v252 = v249;
                else
                  v252 = v231;
                if (v230 >= v250)
                  v253 = v250;
                else
                  v253 = v230;
                if (v232 > v240)
                  v240 = v232;
                if (v231 > v241)
                  v241 = v231;
                if (v230 <= v227)
                  v230 = v227;
                v254 = (int)(v240 - v251) >> 4;
                v255 = (int)(v241 - v252) >> 4;
                v256 = (int)(v230 - v253) >> 4;
                v257 = v254;
                v258 = v254 + v251;
                if (v258 >= 0x100)
                  v258 = -1;
                v259 = ((int)(v241 - v252) >> 4) + v252;
                if (v259 >= 0x100)
                  v259 = -1;
                v260 = ((int)(v230 - v253) >> 4) + v253;
                if (v260 >= 0x100)
                  LOBYTE(v260) = -1;
                v261 = v240 - v254;
                if (v257 <= v240)
                  v262 = v261;
                else
                  v262 = 0;
                if (v255 <= v241)
                  v263 = v241 - v255;
                else
                  v263 = 0;
                v264 = v230 - v256;
                v265 = 8 * v263;
                if (v256 > v230)
                  v264 = 0;
                *(_BYTE *)v200 = v265 & 0xE0 | (v264 >> 3);
                *(_BYTE *)(v200 + 1) = (unsigned __int16)((v262 << 8) & 0xF800 | v265 & 0x7FF) >> 8;
                *(_BYTE *)(v200 + 2) = (8 * v259) & 0xE0 | (v260 >> 3);
                v266 = ((v258 << 8) & 0xFFFFF800 | (8 * v259) & 0x7FF) >> 8;
                v267 = v260 & 0xF8 | (v260 >> 5);
                v268 = v264 & 0xF8 | (v264 >> 5);
                v269 = v259 & 0xFC | (v259 >> 6);
                v270 = v263 & 0xFC | (v263 >> 6);
                v271 = v258 & 0xF8 | (v258 >> 5);
                v272 = v262 & 0xF8 | (v262 >> 5);
                v273 = (uint32x4_t)vdupq_n_s32(v272);
                v274 = (uint32x4_t)vdupq_n_s32(v270);
                v275 = (uint32x4_t)vdupq_n_s32(v268);
                v276 = (uint32x4_t)vdupq_n_s32(v271);
                v193 = (int16x8_t)vdupq_n_s32(v269);
                v277 = (uint32x4_t)vdupq_n_s32(v267);
                v278 = (uint32x4_t)vdupq_n_s32((21846 * (v271 + 2 * v272)) >> 16);
                v279 = (uint32x4_t)vdupq_n_s32((21846 * (v269 + 2 * v270)) >> 16);
                v280 = (uint32x4_t)vdupq_n_s32((21846 * (v267 + 2 * v268)) >> 16);
                v281 = (uint32x4_t)vdupq_n_s32((21846 * (v272 + 2 * v271)) >> 16);
                v282 = (uint32x4_t)vdupq_n_s32((21846 * (v270 + 2 * v269)) >> 16);
                v283 = (uint32x4_t)vdupq_n_s32((21846 * (v268 + 2 * v267)) >> 16);
                *(_BYTE *)(v200 + 3) = v266;
                v284 = (int32x4_t)xmmword_19FFB2F30;
                v285 = (int32x4_t)xmmword_19FFB2F40;
                v286 = 0uLL;
                v287 = 32;
                v288 = 0uLL;
                do
                {
                  v194.i8[0] = *((_BYTE *)&v718 + v287);
                  v194.i8[4] = *((_BYTE *)&v717 + v287);
                  v194.i8[8] = *((_BYTE *)&v716 + v287);
                  v195.i8[0] = *((_BYTE *)&v714 + v287);
                  v195.i8[4] = *((_BYTE *)&v713 + v287);
                  v194.i8[12] = *((_BYTE *)&v715 + v287);
                  v195.i8[8] = buf[v287 + 4];
                  v195.i8[12] = buf[v287];
                  v196.i8[0] = *((_BYTE *)&v714 + v287 + 1);
                  v196.i8[4] = *((_BYTE *)&v713 + v287 + 1);
                  v196.i8[8] = *((_BYTE *)&v712 + v287 + 1);
                  v197.i8[0] = *((_BYTE *)&v718 + v287 + 1);
                  v197.i8[4] = *((_BYTE *)&v717 + v287 + 1);
                  v197.i8[8] = *((_BYTE *)&v716 + v287 + 1);
                  v198.i8[0] = *((_BYTE *)&v718 + v287 + 2);
                  v197.i8[12] = *((_BYTE *)&v715 + v287 + 1);
                  v198.i8[4] = *((_BYTE *)&v717 + v287 + 2);
                  v198.i8[8] = *((_BYTE *)&v716 + v287 + 2);
                  v196.i8[12] = buf[v287 + 1];
                  v199.i8[0] = *((_BYTE *)&v714 + v287 + 2);
                  v199.i8[4] = *((_BYTE *)&v713 + v287 + 2);
                  v198.i8[12] = *((_BYTE *)&v715 + v287 + 2);
                  v199.i8[8] = *((_BYTE *)&v712 + v287 + 2);
                  v199.i8[12] = buf[v287 + 2];
                  v289 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v274), (uint32x4_t)v194, v273), (uint32x4_t)v198, v275);
                  v290 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v274), (uint32x4_t)v195, v273), (uint32x4_t)v199, v275);
                  v291 = vabaq_u32(vabaq_u32(vabdq_u32(v197, (uint32x4_t)v193), (uint32x4_t)v194, v276), (uint32x4_t)v198, v277);
                  v292 = vabaq_u32(vabaq_u32(vabdq_u32(v196, (uint32x4_t)v193), (uint32x4_t)v195, v276), (uint32x4_t)v199, v277);
                  v293 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v279), (uint32x4_t)v194, v278), (uint32x4_t)v198, v280);
                  v294 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v279), (uint32x4_t)v195, v278), (uint32x4_t)v199, v280);
                  v295 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v282), (uint32x4_t)v195, v281), (uint32x4_t)v199, v283);
                  v296 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v282), (uint32x4_t)v194, v281), (uint32x4_t)v198, v283);
                  v297 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v289, v296), (int16x8_t)vcgtq_u32(v290, v295));
                  v198 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v289, v293), (int16x8_t)vcgtq_u32(v290, v294));
                  v199 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v291, v296), (int16x8_t)vcgtq_u32(v292, v295));
                  v298 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v293, v296), (int16x8_t)vcgtq_u32(v294, v295));
                  v299 = vandq_s8(v297, v199);
                  *(int8x8_t *)v297.i8 = vmovn_s16((int16x8_t)vandq_s8(v297, v298));
                  v300 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v273.i8)), v206);
                  v301 = vmovn_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v291, v293), (int16x8_t)vcgtq_u32(v292, v294)), v198), v299));
                  v302 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v301, *(int8x8_t *)v273.i8)), 0x1FuLL)), v207), vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v273.i8)), v206));
                  v303 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v301, *(int8x8_t *)v273.i8)), 0x1FuLL)), v207), v300);
                  v196 = (uint32x4_t)vaddq_s32(v284, v284);
                  v197 = (uint32x4_t)vaddq_s32(v285, v285);
                  v195 = (int8x16_t)vshlq_u32(v303, v197);
                  v288 = vorrq_s8((int8x16_t)vshlq_u32(v302, v196), v288);
                  v194.i64[0] = 0x700000007;
                  v194.i64[1] = 0x700000007;
                  v286 = vorrq_s8(v195, v286);
                  v285 = vaddq_s32(v285, v194);
                  v284 = vaddq_s32(v284, v194);
                  v287 -= 32;
                }
                while (v287 != -32);
                v304 = vorrq_s8(v286, v288);
                *(int8x8_t *)v304.i8 = vorr_s8(*(int8x8_t *)v304.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v304, v304, 8uLL));
                *(_DWORD *)(v200 + 4) = v304.i32[0] | v304.i32[1];
                v200 += 8;
              }
              v210 = v702 + 4;
              v211 += 16 * (int)v187;
            }
            while (v702 + 4 < (int)v709);
          }
        }
      }
      else if ((int)v709 >= 1 && (int)v187 >= 1)
      {
        v305 = 0;
        v306 = *(_QWORD *)(v660 + 8);
        v307 = 3 * (int)v187 - 12;
        do
        {
          v703 = v305;
          for (k = 0; k < v187; k += 4)
          {
            v309 = (unsigned __int8 *)(v306 + 3 * k);
            *(_DWORD *)buf = (v309[1] << 8) | (v309[2] << 16) | *v309 | 0xFF000000;
            v712 = (v309[4] << 8) | (v309[5] << 16) | v309[3] | 0xFF000000;
            v713 = (v309[7] << 8) | (v309[8] << 16) | v309[6] | 0xFF000000;
            v714 = (v309[10] << 8) | (v309[11] << 16) | v309[9] | 0xFF000000;
            v310 = &v309[v307];
            v311 = v310[12];
            v310 += 12;
            v715 = (v310[1] << 8) | (v310[2] << 16) | v311 | 0xFF000000;
            v716 = (v310[4] << 8) | (v310[5] << 16) | v310[3] | 0xFF000000;
            v717 = (v310[7] << 8) | (v310[8] << 16) | v310[6] | 0xFF000000;
            v718 = (v310[10] << 8) | (v310[11] << 16) | v310[9] | 0xFF000000;
            v312 = &v310[v307];
            v313 = v312[12];
            v312 += 12;
            v719 = (v312[1] << 8) | (v312[2] << 16) | v313 | 0xFF000000;
            v720 = (v312[4] << 8) | (v312[5] << 16) | v312[3] | 0xFF000000;
            v721 = (v312[7] << 8) | (v312[8] << 16) | v312[6] | 0xFF000000;
            v314 = v312[9];
            v722 = (v312[10] << 8) | (v312[11] << 16) | v314 | 0xFF000000;
            v315 = &v312[v307];
            v316 = v312[v307 + 14];
            v317 = v312[v307 + 13];
            v318 = v312[v307 + 12];
            v723 = v318 | (v316 << 16) | (v317 << 8) | 0xFF000000;
            v319 = v312[v307 + 17];
            v320 = v312[v307 + 16];
            v321 = v312[v307 + 15];
            v724 = v321 | (v319 << 16) | (v320 << 8) | 0xFF000000;
            v322 = v312[v307 + 20];
            v323 = v312[v307 + 19];
            v324 = v312[v307 + 18];
            v725 = v324 | (v322 << 16) | (v323 << 8) | 0xFF000000;
            v325 = v312[v307 + 23];
            v326 = v315[22];
            v327 = v315[21];
            *(int8x8x4_t *)v334.i8 = vld4_s8((const char *)buf);
            v726 = v327 | (v325 << 16) | (v326 << 8) | 0xFF000000;
            v193.i8[0] = vminv_u8(v328);
            v329 = v193.i32[0];
            v193.i8[0] = vminv_u8(v334);
            v330 = v193.i32[0];
            v193.i8[0] = vminv_u8(v331);
            v332 = v193.i32[0];
            v193.i8[0] = vmaxv_u8(v331);
            v333 = v193.i32[0];
            v193.i8[0] = vmaxv_u8(v328);
            v334.i8[0] = vmaxv_u8(v334);
            v335 = v334.i32[0];
            if (v719 < v330)
              v330 = v719;
            v336 = BYTE1(v719);
            if (BYTE1(v719) < v329)
              v329 = BYTE1(v719);
            v337 = BYTE2(v719);
            if (BYTE2(v719) < v332)
              v332 = BYTE2(v719);
            if (v719 > v334.i32[0])
              v335 = v719;
            if (BYTE1(v719) <= v193.i32[0])
              v336 = v193.i32[0];
            if (BYTE2(v719) <= v333)
              v337 = v333;
            v338 = v720;
            if (v720 < v330)
              v330 = v720;
            if (BYTE1(v720) < v329)
              v329 = BYTE1(v720);
            if (BYTE2(v720) < v332)
              v332 = BYTE2(v720);
            if (v720 <= v335)
              v338 = v335;
            if (BYTE1(v720) > v336)
              v336 = BYTE1(v720);
            if (BYTE2(v720) > v337)
              v337 = BYTE2(v720);
            if (v721 < v330)
              v330 = v721;
            if (BYTE1(v721) < v329)
              v329 = BYTE1(v721);
            if (BYTE2(v721) < v332)
              v332 = BYTE2(v721);
            if (v721 > v338)
              v338 = v721;
            if (BYTE1(v721) > v336)
              v336 = BYTE1(v721);
            if (BYTE2(v721) > v337)
              v337 = BYTE2(v721);
            if (v314 < v330)
              v330 = v314;
            if (BYTE1(v722) < v329)
              v329 = BYTE1(v722);
            if (BYTE2(v722) < v332)
              v332 = BYTE2(v722);
            if (v314 <= v338)
              v314 = v338;
            if (BYTE1(v722) > v336)
              v336 = BYTE1(v722);
            if (BYTE2(v722) > v337)
              v337 = BYTE2(v722);
            if (v318 < v330)
              v330 = v318;
            if (v317 < v329)
              v329 = v317;
            if (v316 < v332)
              v332 = v316;
            if (v318 <= v314)
              v318 = v314;
            if (v317 > v336)
              v336 = v317;
            if (v316 > v337)
              v337 = v316;
            if (v321 >= v330)
              v339 = v330;
            else
              v339 = v321;
            if (v320 >= v329)
              v340 = v329;
            else
              v340 = v320;
            if (v319 >= v332)
              v341 = v332;
            else
              v341 = v319;
            if (v321 <= v318)
              v321 = v318;
            if (v320 > v336)
              v336 = v320;
            if (v319 > v337)
              v337 = v319;
            if (v324 >= v339)
              v342 = v339;
            else
              v342 = v324;
            if (v323 >= v340)
              v343 = v340;
            else
              v343 = v323;
            if (v322 >= v341)
              v344 = v341;
            else
              v344 = v322;
            if (v324 <= v321)
              v324 = v321;
            if (v323 > v336)
              v336 = v323;
            if (v322 > v337)
              v337 = v322;
            if (v327 >= v342)
              v345 = v342;
            else
              v345 = v327;
            if (v326 >= v343)
              v346 = v343;
            else
              v346 = v326;
            if (v325 >= v344)
              v347 = v344;
            else
              v347 = v325;
            if (v327 <= v324)
              v327 = v324;
            if (v326 > v336)
              v336 = v326;
            if (v325 > v337)
              v337 = v325;
            v348 = (int)(v327 - v345) >> 4;
            v349 = (int)(v336 - v346) >> 4;
            v350 = (int)(v337 - v347) >> 4;
            v351 = v348;
            v352 = v348 + v345;
            if (v352 >= 0x100)
              v352 = -1;
            v353 = ((int)(v336 - v346) >> 4);
            v354 = v353 + v346;
            if (v354 >= 0x100)
              v354 = -1;
            v355 = ((int)(v337 - v347) >> 4) + v347;
            if (v355 >= 0x100)
              LOBYTE(v355) = -1;
            v356 = v327 - v348;
            if (v351 > v327)
              v356 = 0;
            v357 = v336 - v349;
            if (v353 <= v336)
              v358 = v357;
            else
              v358 = 0;
            v359 = v337 - v350;
            v360 = 8 * v358;
            if (v350 > v337)
              v359 = 0;
            *(_BYTE *)v200 = v360 & 0xE0 | (v359 >> 3);
            *(_BYTE *)(v200 + 1) = (unsigned __int16)((v356 << 8) & 0xF800 | v360 & 0x7FF) >> 8;
            *(_BYTE *)(v200 + 2) = (8 * v354) & 0xE0 | (v355 >> 3);
            v361 = ((v352 << 8) & 0xFFFFF800 | (8 * v354) & 0x7FF) >> 8;
            v362 = v355 & 0xF8 | (v355 >> 5);
            v363 = v359 & 0xF8 | (v359 >> 5);
            v364 = v354 & 0xFC | (v354 >> 6);
            v365 = v358 & 0xFC | (v358 >> 6);
            v366 = v352 & 0xF8 | (v352 >> 5);
            v367 = v356 & 0xF8 | (v356 >> 5);
            v368 = (uint32x4_t)vdupq_n_s32(v367);
            v369 = (uint32x4_t)vdupq_n_s32(v365);
            v370 = (uint32x4_t)vdupq_n_s32(v363);
            v371 = (uint32x4_t)vdupq_n_s32(v366);
            v193 = (int16x8_t)vdupq_n_s32(v364);
            v372 = (uint32x4_t)vdupq_n_s32(v362);
            v373 = (uint32x4_t)vdupq_n_s32((21846 * (v366 + 2 * v367)) >> 16);
            v374 = (uint32x4_t)vdupq_n_s32((21846 * (v364 + 2 * v365)) >> 16);
            v375 = (uint32x4_t)vdupq_n_s32((21846 * (v362 + 2 * v363)) >> 16);
            v376 = (uint32x4_t)vdupq_n_s32((21846 * (v367 + 2 * v366)) >> 16);
            v377 = (uint32x4_t)vdupq_n_s32((21846 * (v365 + 2 * v364)) >> 16);
            v378 = (uint32x4_t)vdupq_n_s32((21846 * (v363 + 2 * v362)) >> 16);
            *(_BYTE *)(v200 + 3) = v361;
            v379 = 0uLL;
            v380 = 32;
            v381 = 0uLL;
            v382 = (int32x4_t)xmmword_19FFB2F40;
            v383 = (int32x4_t)xmmword_19FFB2F30;
            do
            {
              v194.i8[0] = *((_BYTE *)&v718 + v380);
              v194.i8[4] = *((_BYTE *)&v717 + v380);
              v194.i8[8] = *((_BYTE *)&v716 + v380);
              v195.i8[0] = *((_BYTE *)&v714 + v380);
              v195.i8[4] = *((_BYTE *)&v713 + v380);
              v194.i8[12] = *((_BYTE *)&v715 + v380);
              v195.i8[8] = buf[v380 + 4];
              v195.i8[12] = buf[v380];
              v196.i8[0] = *((_BYTE *)&v714 + v380 + 1);
              v196.i8[4] = *((_BYTE *)&v713 + v380 + 1);
              v196.i8[8] = *((_BYTE *)&v712 + v380 + 1);
              v197.i8[0] = *((_BYTE *)&v718 + v380 + 1);
              v197.i8[4] = *((_BYTE *)&v717 + v380 + 1);
              v197.i8[8] = *((_BYTE *)&v716 + v380 + 1);
              v198.i8[0] = *((_BYTE *)&v718 + v380 + 2);
              v197.i8[12] = *((_BYTE *)&v715 + v380 + 1);
              v198.i8[4] = *((_BYTE *)&v717 + v380 + 2);
              v198.i8[8] = *((_BYTE *)&v716 + v380 + 2);
              v196.i8[12] = buf[v380 + 1];
              v199.i8[0] = *((_BYTE *)&v714 + v380 + 2);
              v199.i8[4] = *((_BYTE *)&v713 + v380 + 2);
              v198.i8[12] = *((_BYTE *)&v715 + v380 + 2);
              v199.i8[8] = *((_BYTE *)&v712 + v380 + 2);
              v199.i8[12] = buf[v380 + 2];
              v384 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v369), (uint32x4_t)v194, v368), (uint32x4_t)v198, v370);
              v385 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v369), (uint32x4_t)v195, v368), (uint32x4_t)v199, v370);
              v386 = vabaq_u32(vabaq_u32(vabdq_u32(v197, (uint32x4_t)v193), (uint32x4_t)v194, v371), (uint32x4_t)v198, v372);
              v387 = vabaq_u32(vabaq_u32(vabdq_u32(v196, (uint32x4_t)v193), (uint32x4_t)v195, v371), (uint32x4_t)v199, v372);
              v388 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v374), (uint32x4_t)v194, v373), (uint32x4_t)v198, v375);
              v389 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v374), (uint32x4_t)v195, v373), (uint32x4_t)v199, v375);
              v390 = vabaq_u32(vabaq_u32(vabdq_u32(v196, v377), (uint32x4_t)v195, v376), (uint32x4_t)v199, v378);
              v391 = vabaq_u32(vabaq_u32(vabdq_u32(v197, v377), (uint32x4_t)v194, v376), (uint32x4_t)v198, v378);
              v392 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v384, v391), (int16x8_t)vcgtq_u32(v385, v390));
              v198 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v384, v388), (int16x8_t)vcgtq_u32(v385, v389));
              v199 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v386, v391), (int16x8_t)vcgtq_u32(v387, v390));
              v393 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v388, v391), (int16x8_t)vcgtq_u32(v389, v390));
              v394 = vandq_s8(v392, v199);
              *(int8x8_t *)v392.i8 = vmovn_s16((int16x8_t)vandq_s8(v392, v393));
              v395 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v392.i8, *(int8x8_t *)v368.i8)), v206);
              v396 = vmovn_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v386, v388), (int16x8_t)vcgtq_u32(v387, v389)), v198), v394));
              v397 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v396, *(int8x8_t *)v368.i8)), 0x1FuLL)), v207), vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v392.i8, *(int8x8_t *)v368.i8)), v206));
              v398 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v396, *(int8x8_t *)v368.i8)), 0x1FuLL)), v207), v395);
              v196 = (uint32x4_t)vaddq_s32(v383, v383);
              v197 = (uint32x4_t)vaddq_s32(v382, v382);
              v195 = (int8x16_t)vshlq_u32(v398, v197);
              v381 = vorrq_s8((int8x16_t)vshlq_u32(v397, v196), v381);
              v194.i64[0] = 0x700000007;
              v194.i64[1] = 0x700000007;
              v379 = vorrq_s8(v195, v379);
              v382 = vaddq_s32(v382, v194);
              v383 = vaddq_s32(v383, v194);
              v380 -= 32;
            }
            while (v380 != -32);
            v399 = vorrq_s8(v379, v381);
            *(int8x8_t *)v399.i8 = vorr_s8(*(int8x8_t *)v399.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v399, v399, 8uLL));
            *(_DWORD *)(v200 + 4) = v399.i32[0] | v399.i32[1];
            v200 += 8;
          }
          v305 = v703 + 4;
          v306 += 12 * (int)v187;
        }
        while (v703 + 4 < (int)v709);
      }
      v208 = a1;
      v209 = v684;
LABEL_601:
      v495 = *(_QWORD *)(v208 + 8);
      v42 = v665;
      v43 = v663;
      if (v495)
      {
        v496 = *(_QWORD *)(v495 + 16);
        do
          v497 = __ldxr(v681);
        while (__stxr(v497 + 1, v681));
        *(_QWORD *)(v496 + 16 * v209) = v679;
        v498 = v496 + 16 * v209;
        v499 = *(std::__shared_weak_count **)(v498 + 8);
        *(_QWORD *)(v498 + 8) = v682;
        if (v499)
        {
          v500 = (unint64_t *)&v499->__shared_owners_;
          do
            v501 = __ldaxr(v500);
          while (__stlxr(v501 - 1, v500));
          if (!v501)
          {
            ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
            std::__shared_weak_count::__release_weak(v499);
          }
        }
      }
      do
        v502 = __ldaxr(v681);
      while (__stlxr(v502 - 1, v681));
      if (!v502)
      {
        ((void (*)(std::__shared_weak_count *))v682->__on_zero_shared)(v682);
        std::__shared_weak_count::__release_weak(v682);
      }
      v186 = v209 + 1;
      if (v186 == v661)
      {
        *(_DWORD *)(v208 + 16) = 13;
        *(_DWORD *)(*(_QWORD *)(v208 + 8) + 8) = 22;
        if (v658)
        {
          v575 = (unint64_t *)&v658->__shared_owners_;
          do
            v576 = __ldaxr(v575);
          while (__stlxr(v576 - 1, v575));
          if (!v576)
          {
            ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
            std::__shared_weak_count::__release_weak(v658);
          }
        }
        return;
      }
    }
    v202 = *(_QWORD *)(v660 + 8);
    v203 = 1;
    v204 = 1;
    v205 = 1;
    switch(*(_DWORD *)(v201 + 8))
    {
      case 0:
      case 0x16:
      case 0x17:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
        goto LABEL_214;
      case 1:
      case 2:
      case 0x19:
        goto LABEL_617;
      case 3:
      case 4:
      case 6:
      case 0x13:
      case 0x18:
      case 0x1B:
      case 0x2A:
      case 0x2B:
        v205 = 2;
        goto LABEL_617;
      case 5:
      case 7:
      case 8:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x14:
      case 0x1A:
        v205 = 4;
        goto LABEL_617;
      case 9:
      case 0x10:
      case 0x11:
        v203 = 0;
        v205 = 8;
        goto LABEL_617;
      case 0xA:
      case 0xB:
        v205 = 3;
        goto LABEL_617;
      case 0x12:
      case 0x15:
        v203 = 0;
        v204 = 0;
        v205 = 16;
        goto LABEL_617;
      default:
        v204 = 1;
        v205 = 1;
LABEL_617:
        if ((int)v709 < 1 || (int)v187 < 1)
          goto LABEL_214;
        v503 = v205;
        v504 = 4 * v205 * v187;
        v505 = 2 * v205;
        v506 = 2 * v205 * v187;
        v507 = (2 * v187) | 1;
        v508 = v205 * v507;
        if (v203)
        {
          v509 = 0;
          v510 = 0;
          v511 = *(_BYTE **)(v660 + 8);
          do
          {
            v512 = 0;
            v513 = v509;
            v514 = v205;
            v515 = v506;
            v516 = v506;
            v517 = v508;
            v518 = v508;
            v519 = v511;
            do
            {
              v520 = (unsigned __int8 *)(v202 + v518);
              v521 = (unsigned __int8 *)(v202 + v516);
              v522 = (unsigned __int8 *)(v202 + v514);
              v523 = v519;
              v524 = v503;
              v525 = (unsigned __int8 *)(v202 + v513);
              do
              {
                v527 = *v525++;
                v526 = v527;
                v528 = *v522++;
                v529 = v528 + v526;
                v531 = *v521++;
                v530 = v531;
                v532 = *v520++;
                *v523++ = (v529 + v530 + v532) >> 2;
                --v524;
              }
              while (v524);
              ++v512;
              v519 += v503;
              v518 += v505;
              v516 += v505;
              v514 += v505;
              v513 += v505;
            }
            while (v512 != v187);
            ++v510;
            v511 += v503 * (unint64_t)v187;
            LODWORD(v508) = v517 + v504;
            LODWORD(v506) = v515 + v504;
            v205 += v504;
            v509 += v504;
          }
          while (v510 != v709);
          goto LABEL_214;
        }
        v533 = 0;
        v534 = 0;
        v672 = v187 * (unint64_t)v205;
        v535 = 2 * v205;
        v536 = v205 & 0x18;
        v537 = vdupq_n_s64(v202);
        v538 = v205 + v205 * 2 * v187;
        v669 = 4 * v205 * v187;
        v539 = v505 * v187;
        v540 = *(int8x16_t **)(v660 + 8);
        __dsta = v205 * v507;
        break;
    }
LABEL_629:
    v541 = 0;
    v542.i64[0] = v534 * v504 + v506;
    v542.i64[1] = v534 * v504 + v508;
    v543.i64[0] = v534 * v504 + v503;
    v543.i64[1] = v534 * v504;
    v696 = v534;
    v544 = v202 + v672 * v534;
    v699 = v533;
    v705 = v205;
    v545 = v205;
    v690 = v539;
    v546 = v539;
    v693 = v538;
    v687 = v540;
    while (1)
    {
      v547 = v202 + v538;
      v548 = v202 + v546;
      v549 = v202 + v545;
      v550 = v202 + v533;
      v551 = (int64x2_t)vdupq_n_s32(v535 * (int)v541);
      v552 = vsraq_n_s64(v537, vshlq_n_s64(vaddq_s64(v542, v551), 0x20uLL), 0x20uLL);
      v553 = vsraq_n_s64(v537, vshlq_n_s64(vaddq_s64(v543, v551), 0x20uLL), 0x20uLL);
      v554 = vdupq_n_s64(v544 + v541 * v503);
      v555 = (uint64x2_t)vsubq_s64(v554, v553);
      v556 = (uint64x2_t)vsubq_s64(v554, v552);
      v557 = (uint64x2_t)vdupq_n_s64(0x10uLL);
      v193 = (int16x8_t)vcgtq_u64(v557, v555);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)v193, (int32x4_t)vcgtq_u64(v557, v556)))) & 1) != 0)
      {
        v558 = 0;
      }
      else
      {
        if ((v204 & 1) != 0)
        {
          v559 = 0;
          do
          {
LABEL_641:
            v193.i64[0] = *(_QWORD *)(v547 + v559);
            *(int8x8_t *)&v540->i8[v559] = vshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)(v549 + v559), *(uint8x8_t *)(v550 + v559)), *(uint8x8_t *)(v548 + v559)), *(uint8x8_t *)v193.i8), 2uLL);
            v559 += 8;
          }
          while (v536 != v559);
          v558 = v503 & 0x18;
          if (v536 == v503)
            goto LABEL_630;
          goto LABEL_633;
        }
        v560 = (uint8x16_t *)(v202 + v533);
        v561 = (uint8x16_t *)(v202 + v545);
        v562 = (uint8x16_t *)(v202 + v546);
        v563 = (uint8x16_t *)(v202 + v538);
        v564 = v540;
        v565 = v503 & 0x10;
        do
        {
          v566 = *v560++;
          v567 = v566;
          v568 = *v561++;
          v569 = *(uint8x8_t *)v568.i8;
          v570 = vaddl_high_u8(v568, v567);
          v571 = *v562++;
          v572 = vaddw_u8(vaddl_u8(v569, *(uint8x8_t *)v567.i8), *(uint8x8_t *)v571.i8);
          v573 = vaddw_high_u8(v570, v571);
          v574 = *v563++;
          v193 = (int16x8_t)vaddw_high_u8(v573, v574);
          *v564++ = vshrn_high_n_s16(vshrn_n_s16((int16x8_t)vaddw_u8(v572, *(uint8x8_t *)v574.i8), 2uLL), v193, 2uLL);
          v565 -= 16;
        }
        while (v565);
        if ((v503 & 0x10) == v503)
          goto LABEL_630;
        v559 = v503 & 0x10;
        v558 = v559;
        if ((v503 & 8) != 0)
          goto LABEL_641;
      }
      do
      {
LABEL_633:
        v540->i8[v558] = (*(unsigned __int8 *)(v549 + v558)
                        + *(unsigned __int8 *)(v550 + v558)
                        + *(unsigned __int8 *)(v548 + v558)
                        + *(unsigned __int8 *)(v547 + v558)) >> 2;
        ++v558;
      }
      while (v503 != v558);
LABEL_630:
      ++v541;
      v540 = (int8x16_t *)((char *)v540 + v503);
      v538 += v505;
      v546 += v505;
      v545 += v505;
      v533 += v505;
      if (v541 == v187)
      {
        v534 = v696 + 1;
        v540 = (int8x16_t *)((char *)v687 + v503 * (unint64_t)v187);
        v538 = v693 + v669;
        v539 = v690 + v669;
        v205 = v705 + v669;
        v533 = v699 + v669;
        v506 = (v505 * v187);
        v504 = v669;
        v508 = __dsta;
        if (v696 + 1 == v709)
          goto LABEL_214;
        goto LABEL_629;
      }
    }
  }
  v3 = *(_DWORD *)(a1 + 16);
  _ZF = v3 > 8 || ((1 << v3) & 0x177) == 0;
  if (_ZF)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v44 = GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      return;
    v45 = *(_DWORD *)(v2 + 16);
    *(_DWORD *)buf = 67109120;
    v712 = v45;
    goto LABEL_175;
  }
  if (v3 == a2 || karo::media::Image::convertToFormat(a1, a2))
  {
    v5 = *(uint32x2_t **)(v2 + 8);
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    v10 = v6.i32[0];
    if (v6.i32[0] <= (unsigned __int32)v6.i32[1])
      v10 = v6.u32[1];
    v11 = 1;
    if (v10 >= 2)
    {
      do
      {
        ++v11;
        v163 = v10 > 3;
        v10 >>= 1;
      }
      while (v163);
    }
    v12 = *(std::__shared_weak_count **)(*(_QWORD *)&v5[2] + 8);
    v670 = v6;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v15 = (int8x16_t *)operator new[]();
      do
        v16 = __ldaxr(v13);
      while (__stlxr(v16 - 1, v13));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      v15 = (int8x16_t *)operator new[]();
    }
    v17 = *(uint64_t **)(*(_QWORD *)(v2 + 8) + 16);
    v18 = *v17;
    v19 = (std::__shared_weak_count *)v17[1];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(uint64_t **)(*(_QWORD *)(v2 + 8) + 16);
      v23 = *v22;
      v24 = (std::__shared_weak_count *)v22[1];
      v25 = *(const void **)(v18 + 8);
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        memcpy(v15, v25, *(_QWORD *)(v23 + 16));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      else
      {
        memcpy(v15, v25, *(_QWORD *)(v23 + 16));
      }
      do
        v29 = __ldaxr(v20);
      while (__stlxr(v29 - 1, v20));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      memcpy(v15, *(const void **)(v18 + 8), *(_QWORD *)(v18 + 16));
    }
    v30 = *(_QWORD *)(v2 + 8);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(_QWORD *)(v30 + 24);
      v33 = (v32 - v31) >> 4;
      v34 = v11 - v33;
      if (v11 <= v33)
      {
        if (v11 < v33)
        {
          v35 = v31 + 16 * v11;
          while (v32 != v35)
          {
            v36 = *(std::__shared_weak_count **)(v32 - 8);
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v36->__on_zero_shared)(v36, v34);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v32 -= 16;
          }
          *(_QWORD *)(v30 + 24) = v35;
        }
      }
      else
      {
        std::vector<std::shared_ptr<ggl::Data>>::__append(v30 + 16, v34);
      }
    }
    if (v11 < 2)
LABEL_728:
      JUMPOUT(0x1A1AF4DE8);
    v668 = v11;
    v46 = 1;
    v664 = (uint64x2_t)vdupq_n_s64(0x10uLL);
    v666 = vdupq_n_s64((unint64_t)v15);
    __asm { FMOV            V0.2D, #0.25 }
    v657 = _Q0;
    v656 = vdupq_n_s64(0x3FC999999999999AuLL);
    v655 = vdupq_n_s64(0x3FB999999999999AuLL);
    v654 = vdupq_n_s64(0x3FB5555555555555uLL);
    v662 = vdupq_n_s64(0x3FC5555555555555uLL);
    __asm { FMOV            V0.2D, #0.125 }
    v659 = _Q0;
    while (1)
    {
      v51 = vmax_u32(vshl_u32(v670, (uint32x2_t)vneg_s32(vdup_n_s32(v46))), (uint32x2_t)0x100000001);
      v52 = *(_QWORD *)(v2 + 8);
      if (v52)
      {
        v53 = 0;
        v54 = *(_DWORD *)(v52 + 8);
        v55.i64[0] = v51.u32[0];
        v55.i64[1] = v51.u32[1];
        v56 = v55;
        v57 = v51.u32[1];
        v58 = v51.u32[0];
        switch(v54)
        {
          case 1:
          case 2:
          case 25:
            v53 = v51.u32[1] * (unint64_t)v51.u32[0];
            break;
          case 3:
          case 4:
          case 6:
          case 19:
          case 24:
          case 27:
            v53 = 2 * v51.u32[1] * (unint64_t)v51.u32[0];
            break;
          case 5:
          case 7:
          case 8:
          case 12:
          case 13:
          case 14:
          case 15:
          case 20:
          case 21:
          case 26:
            v53 = 4 * v51.u32[1] * (unint64_t)v51.u32[0];
            break;
          case 9:
          case 16:
          case 17:
            v53 = 8 * v51.u32[1] * (unint64_t)v51.u32[0];
            break;
          case 10:
          case 11:
            v53 = 3 * v51.u32[1] * (unint64_t)v51.u32[0];
            break;
          case 18:
            v72 = v51.u32[1] * (unint64_t)v51.u32[0];
            goto LABEL_106;
          case 22:
            v73 = (unint64_t)v51.u32[0] >> 2;
            if ((v51.i8[0] & 3) != 0)
              LODWORD(v73) = v73 + 1;
            v74 = (unint64_t)v51.u32[1] >> 2;
            if ((v51.i8[4] & 3) != 0)
              LODWORD(v74) = v74 + 1;
            v53 = 8 * v73 * (unint64_t)v74;
            break;
          case 28:
          case 44:
            v68.i64[0] = v51.u32[0];
            v68.i64[1] = v51.u32[1];
            v60 = vcvtq_f64_u64(v68);
            v61 = v657;
            goto LABEL_104;
          case 29:
          case 45:
            v69.i64[0] = v51.u32[0];
            v69.i64[1] = v51.u32[1];
            v60 = vcvtq_f64_u64(v69);
            v61 = (float64x2_t)xmmword_19FFB2F20;
            goto LABEL_104;
          case 30:
          case 46:
            v70.i64[0] = v51.u32[0];
            v70.i64[1] = v51.u32[1];
            v60 = vcvtq_f64_u64(v70);
            v61 = (float64x2_t)v656;
            goto LABEL_104;
          case 31:
          case 47:
            v71.i64[0] = v51.u32[0];
            v71.i64[1] = v51.u32[1];
            v60 = vcvtq_f64_u64(v71);
            v61 = (float64x2_t)xmmword_19FFB2F10;
            goto LABEL_104;
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            switch(v54 & 0xFFFFFFEF)
            {
              case ' ':
                v59.i64[0] = v51.u32[0];
                v59.i64[1] = v51.u32[1];
                v60 = vcvtq_f64_u64(v59);
                v61 = (float64x2_t)v662;
                break;
              case '!':
                v63.i64[0] = v51.u32[0];
                v63.i64[1] = v51.u32[1];
                v60 = vcvtq_f64_u64(v63);
                v61 = (float64x2_t)xmmword_19FFB2EE0;
                break;
              case '"':
                v64.i64[0] = v51.u32[0];
                v64.i64[1] = v51.u32[1];
                v60 = vcvtq_f64_u64(v64);
                v61 = (float64x2_t)xmmword_19FFB2ED0;
                break;
              case '#':
                v65.i64[0] = v51.u32[0];
                v65.i64[1] = v51.u32[1];
                v60 = vcvtq_f64_u64(v65);
                v61 = v659;
                break;
              case '$':
                v66.i64[0] = v51.u32[0];
                v66.i64[1] = v51.u32[1];
                v60 = vcvtq_f64_u64(v66);
                v61 = (float64x2_t)xmmword_19FFB2EC0;
                break;
              case '%':
                v67.i64[0] = v51.u32[0];
                v67.i64[1] = v51.u32[1];
                v60 = vcvtq_f64_u64(v67);
                v61 = (float64x2_t)xmmword_19FFB2EB0;
                break;
              default:
                switch(v54 & 0xFFFFFFEF)
                {
                  case '&':
                    v62.i64[0] = v51.u32[0];
                    v62.i64[1] = v51.u32[1];
                    v60 = vcvtq_f64_u64(v62);
                    v61 = (float64x2_t)xmmword_19FFB2F00;
                    goto LABEL_104;
                  case '\'':
                    v75.i64[0] = v51.u32[0];
                    v75.i64[1] = v51.u32[1];
                    v60 = vcvtq_f64_u64(v75);
                    v61 = (float64x2_t)v655;
                    goto LABEL_104;
                  case '(':
                    v76.i64[0] = v51.u32[0];
                    v76.i64[1] = v51.u32[1];
                    v60 = vcvtq_f64_u64(v76);
                    v61 = (float64x2_t)xmmword_19FFB2EF0;
                    goto LABEL_104;
                  case ')':
                    v77.i64[0] = v51.u32[0];
                    v77.i64[1] = v51.u32[1];
                    v60 = vcvtq_f64_u64(v77);
                    v61 = (float64x2_t)v654;
                    goto LABEL_104;
                  default:
                    goto LABEL_105;
                }
            }
LABEL_104:
            v56 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(v60, v61)));
LABEL_105:
            v72 = v56.i64[0] * v56.i64[1];
LABEL_106:
            v53 = 16 * v72;
            break;
          case 42:
          case 43:
            v53 = 24 * v51.u32[1] * (unint64_t)v51.u32[0];
            break;
          case 58:
            v53 = 4;
            break;
          default:
            break;
        }
      }
      else
      {
        v53 = 0;
        v58 = v51.u32[0];
        v57 = v51.u32[1];
      }
      v707 = v51.i32[0];
      v678 = v46;
      v78 = (std::__shared_weak_count *)operator new(0x30uLL);
      v78->__shared_owners_ = 0;
      v79 = (unint64_t *)&v78->__shared_owners_;
      v78->__shared_weak_owners_ = 0;
      v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
      v671 = &v78[1].__vftable;
      __n = v53;
      ggl::Data::Data((ggl::Data *)&v78[1], v53);
      __dst = (void *)v78[1].__shared_owners_;
      v676 = v78;
      v80 = *(_QWORD *)(v2 + 8);
      if (!v80)
        goto LABEL_121;
      v81 = 1;
      v83 = *(_DWORD *)(v80 + 8);
      v82 = 1;
      v84 = 1;
      switch(v83)
      {
        case 0:
        case 22:
        case 23:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
          goto LABEL_121;
        case 1:
        case 2:
        case 25:
          goto LABEL_114;
        case 3:
        case 4:
        case 6:
        case 19:
        case 24:
        case 27:
        case 42:
        case 43:
          v84 = 2;
          goto LABEL_114;
        case 5:
        case 7:
        case 8:
        case 12:
        case 13:
        case 14:
        case 15:
        case 20:
        case 26:
          v84 = 4;
          goto LABEL_114;
        case 9:
        case 16:
        case 17:
          v81 = 0;
          v84 = 8;
          goto LABEL_114;
        case 10:
        case 11:
          v84 = 3;
          goto LABEL_114;
        case 18:
        case 21:
          v81 = 0;
          v82 = 0;
          v84 = 16;
          goto LABEL_114;
        default:
          v82 = 1;
          v84 = 1;
LABEL_114:
          v85 = v707;
          v86 = v707;
          v87 = 2 * v707;
          v88 = v84;
          v708 = 4 * v84 * v707;
          v89 = 2 * v84;
          v90 = 2 * v84 * v85;
          v91 = v84 * (v87 | 1);
          if ((v81 & 1) == 0)
          {
            v123 = 0;
            v124 = 0;
            v683 = v58 * (unint64_t)v84;
            v125 = 2 * v84;
            v126 = v84 & 0x18;
            v127 = v84 + v84 * v87;
            v680 = 4 * v86 * v84;
            v128 = 2 * v86 * v84;
            v129 = v15;
            v692 = v57;
            v689 = (v89 * v85);
            v686 = v84 * (v87 | 1);
            while (1)
            {
              v130 = 0;
              v131.i64[0] = v124 * v708 + v90;
              v131.i64[1] = v124 * v708 + v91;
              v701 = v123;
              v133 = v123;
              v134 = v84;
              v695 = v128;
              v698 = v127;
              v135 = v129;
              do
              {
                v136 = &v15->i8[v127];
                v137 = &v15->i8[v128];
                v138 = &v15->i8[v134];
                v139 = &v15->i8[v133];
                v140 = (int64x2_t)vdupq_n_s32(v125 * (int)v130);
                v141 = vsraq_n_s64(v666, vshlq_n_s64(vaddq_s64(v131, v140), 0x20uLL), 0x20uLL);
                v132.i64[1] = v124 * v708;
                v132.i64[0] = v124 * v708 + v88;
                v142 = vsraq_n_s64(v666, vshlq_n_s64(vaddq_s64(v132, v140), 0x20uLL), 0x20uLL);
                v143 = vdupq_n_s64((unint64_t)v15->u64 + v683 * v124 + v130 * v88);
                if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_u64(v664, (uint64x2_t)vsubq_s64(v143, v142)), (int32x4_t)vcgtq_u64(v664, (uint64x2_t)vsubq_s64(v143, v141))))) & 1) != 0)
                {
                  for (m = 0; m != v88; ++m)
LABEL_138:
                    v135->i8[m] = (v138[m]
                                 + v139[m]
                                 + v137[m]
                                 + v136[m]) >> 2;
                  goto LABEL_135;
                }
                if ((v82 & 1) != 0)
                {
                  v145 = 0;
                }
                else
                {
                  v146 = (uint8x16_t *)&v15->i8[v133];
                  v147 = (uint8x16_t *)&v15->i8[v134];
                  v148 = (uint8x16_t *)&v15->i8[v128];
                  v149 = (uint8x16_t *)&v15->i8[v127];
                  v150 = v135;
                  v151 = v88 & 0x10;
                  do
                  {
                    v152 = *v146++;
                    v153 = v152;
                    v154 = *v147++;
                    v155 = *(uint8x8_t *)v154.i8;
                    v156 = vaddl_high_u8(v154, v153);
                    v157 = *v148++;
                    v158 = vaddw_u8(vaddl_u8(v155, *(uint8x8_t *)v153.i8), *(uint8x8_t *)v157.i8);
                    v159 = vaddw_high_u8(v156, v157);
                    v160 = *v149++;
                    *v150++ = vshrn_high_n_s16(vshrn_n_s16((int16x8_t)vaddw_u8(v158, *(uint8x8_t *)v160.i8), 2uLL), (int16x8_t)vaddw_high_u8(v159, v160), 2uLL);
                    v151 -= 16;
                  }
                  while (v151);
                  if ((v88 & 0x10) == v88)
                    goto LABEL_135;
                  v145 = v88 & 0x10;
                  m = v145;
                  if ((v88 & 8) == 0)
                    goto LABEL_138;
                }
                do
                {
                  *(int8x8_t *)&v135->i8[v145] = vshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)&v138[v145], *(uint8x8_t *)&v139[v145]), *(uint8x8_t *)&v137[v145]), *(uint8x8_t *)&v136[v145]), 2uLL);
                  v145 += 8;
                }
                while (v126 != v145);
                m = v88 & 0x18;
                if (v126 != v88)
                  goto LABEL_138;
LABEL_135:
                ++v130;
                v135 = (int8x16_t *)((char *)v135 + v88);
                v127 += v89;
                v128 += v89;
                v134 += v89;
                v133 += v89;
              }
              while (v130 != v58);
              ++v124;
              v129 = (int8x16_t *)((char *)v129 + v58 * (unint64_t)v88);
              v127 = v698 + v680;
              v128 = v695 + v680;
              v84 += v680;
              v123 = v701 + v680;
              v90 = v689;
              v91 = v686;
              if (v124 == v692)
                goto LABEL_121;
            }
          }
          v92 = 0;
          v93 = 0;
          v94 = v15;
          do
          {
            v95 = 0;
            v96 = v92;
            v97 = v84;
            v98 = v90;
            v99 = v91;
            v100 = v91;
            v101 = v94;
            do
            {
              v102 = &v15->i8[v100];
              v103 = &v15->i8[(int)v90];
              v104 = &v15->i8[v97];
              v105 = v101;
              v106 = v88;
              v107 = &v15->i8[v96];
              do
              {
                v109 = *v107++;
                v108 = v109;
                v110 = *v104++;
                v111 = v110 + v108;
                v113 = *v103++;
                v112 = v113;
                v114 = *v102++;
                v105->i8[0] = (v111 + v112 + v114) >> 2;
                v105 = (int8x16_t *)((char *)v105 + 1);
                --v106;
              }
              while (v106);
              ++v95;
              v101 = (int8x16_t *)((char *)v101 + v88);
              v100 += v89;
              LODWORD(v90) = v90 + v89;
              v97 += v89;
              v96 += v89;
            }
            while (v95 != v58);
            ++v93;
            v94 = (int8x16_t *)((char *)v94 + v58 * (unint64_t)v88);
            LODWORD(v91) = v99 + v708;
            LODWORD(v90) = v98 + v708;
            v84 += v708;
            v92 += v708;
          }
          while (v93 != v57);
LABEL_121:
          memcpy(__dst, v15, __n);
          v2 = a1;
          v115 = *(_QWORD *)(a1 + 8);
          if (v115)
          {
            v116 = *(_QWORD *)(v115 + 16);
            do
              v117 = __ldxr(v79);
            while (__stxr(v117 + 1, v79));
            *(_QWORD *)(v116 + 16 * v678) = v671;
            v118 = v116 + 16 * v678;
            v119 = *(std::__shared_weak_count **)(v118 + 8);
            *(_QWORD *)(v118 + 8) = v676;
            if (v119)
            {
              v120 = (unint64_t *)&v119->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
          }
          do
            v122 = __ldaxr(v79);
          while (__stlxr(v122 - 1, v79));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
            std::__shared_weak_count::__release_weak(v676);
          }
          v46 = v678 + 1;
          if (v678 + 1 == v668)
            goto LABEL_728;
          break;
      }
    }
  }
}

uint64_t ggl::crc32::compute<20ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  return ggl::crc32::crc32Table[v16 ^ a1[18]] ^ ~(v16 >> 8);
}

uint64_t ggl::crc32::compute<22ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  return ggl::crc32::crc32Table[v18 ^ a1[20]] ^ ~(v18 >> 8);
}

uint64_t ggl::crc32::compute<32ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  return ggl::crc32::crc32Table[v28 ^ a1[30]] ^ ~(v28 >> 8);
}

uint64_t ggl::crc32::compute<34ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  return ggl::crc32::crc32Table[v30 ^ a1[32]] ^ ~(v30 >> 8);
}

uint64_t ggl::crc32::compute<36ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  v32 = ggl::crc32::crc32Table[v31 ^ a1[33]] ^ (v31 >> 8);
  return ggl::crc32::crc32Table[v32 ^ a1[34]] ^ ~(v32 >> 8);
}

uint64_t ggl::crc32::compute<38ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  v28 = ggl::crc32::crc32Table[v27 ^ a1[29]] ^ (v27 >> 8);
  v29 = ggl::crc32::crc32Table[v28 ^ a1[30]] ^ (v28 >> 8);
  v30 = ggl::crc32::crc32Table[v29 ^ a1[31]] ^ (v29 >> 8);
  v31 = ggl::crc32::crc32Table[v30 ^ a1[32]] ^ (v30 >> 8);
  v32 = ggl::crc32::crc32Table[v31 ^ a1[33]] ^ (v31 >> 8);
  v33 = ggl::crc32::crc32Table[v32 ^ a1[34]] ^ (v32 >> 8);
  v34 = ggl::crc32::crc32Table[v33 ^ a1[35]] ^ (v33 >> 8);
  return ggl::crc32::crc32Table[v34 ^ a1[36]] ^ ~(v34 >> 8);
}

uint64_t ggl::crc32::compute<28ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  return ggl::crc32::crc32Table[v24 ^ a1[26]] ^ ~(v24 >> 8);
}

uint64_t ggl::crc32::compute<30ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  return ggl::crc32::crc32Table[v26 ^ a1[28]] ^ ~(v26 >> 8);
}

void ggl::Glyph3d::DefaultPipelineState::~DefaultPipelineState(ggl::Glyph3d::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glyph3d::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::Glyph3d::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Glyph3d::DefaultPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::Glyph3d::DefaultPipelineSetup::textureIsEnabled(ggl::Glyph3d::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Glyph3d::LowPrecisionPipelineState::~LowPrecisionPipelineState(ggl::Glyph3d::LowPrecisionPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glyph3d::LowPrecisionPipelineSetup::~LowPrecisionPipelineSetup(ggl::Glyph3d::LowPrecisionPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Glyph3d::LowPrecisionPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::LowPrecisionPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::Glyph3d::LowPrecisionPipelineSetup::textureIsEnabled(ggl::Glyph3d::LowPrecisionPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Glyph3d::LowPrecisionHaloPipelineState::~LowPrecisionHaloPipelineState(ggl::Glyph3d::LowPrecisionHaloPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glyph3d::LowPrecisionHaloPipelineSetup::~LowPrecisionHaloPipelineSetup(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Glyph3d::LowPrecisionHaloPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::Glyph3d::LowPrecisionHaloPipelineSetup::textureIsEnabled(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Glyph3d::RaymarchPipelineState::~RaymarchPipelineState(ggl::Glyph3d::RaymarchPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glyph3d::RaymarchPipelineSetup::~RaymarchPipelineSetup(ggl::Glyph3d::RaymarchPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Glyph3d::RaymarchPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::RaymarchPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::Glyph3d::RaymarchPipelineSetup::textureIsEnabled(ggl::Glyph3d::RaymarchPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void md::DaVinciTrafficLayerDataSource::~DaVinciTrafficLayerDataSource(md::DaVinciTrafficLayerDataSource *this)
{
  md::DaVinciTrafficLayerDataSource::~DaVinciTrafficLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E42A6A68;
  v2 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40509EF904);
  }

  *(_QWORD *)this = off_1E429DEE0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::DaVinciTrafficLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *i;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  gss::Allocator *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  int32x2_t *v52;
  __int32 v53;
  unsigned __int8 *v54;
  unsigned __int8 v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  double v59;
  double v60;
  double v61;
  long double v62;
  long double v63;
  long double v64;
  long double v65;
  long double v66;
  uint64_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  int v70;
  int32x4_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  int *v89;
  char *v90;
  int *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  double v117;
  long double v118;
  long double v119;
  long double v120;
  long double v121;
  long double v122;
  long double v123;
  long double v124;
  double v125;
  long double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  void *v136;
  uint64_t v137;
  double *v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  int32x2_t *v143;
  __int32 v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int32x2_t *v153;
  __int32 v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  __int128 *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  void *v174;
  _QWORD *v175;
  _QWORD *v176;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  gss::Allocator *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  float v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  char *v228;
  char *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  char v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  long double v242;
  int *v243;
  long double v244;
  int *j;
  long double v246;
  int *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  _QWORD v250[11];
  std::__shared_weak_count *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  uint64_t v254[2];
  _OWORD v255[2];
  uint64_t v256[2];
  _OWORD v257[2];
  _QWORD v258[10];
  _QWORD *v259;
  _QWORD *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  int32x4_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t (*v268)(uint64_t, _QWORD *);
  void (*v269)(uint64_t);
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  int v273;
  double v274;
  double *v275;
  uint64_t v276;
  uint64_t (*v277)(uint64_t, _QWORD *);
  void (*v278)(uint64_t);
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  __n128 (*v286)(uint64_t, uint64_t);
  void (*v287)(uint64_t);
  const char *v288;
  void *v289[2];
  void *v290[2];
  __int128 v291;
  void *v292[2];
  void *v293[2];
  __int128 v294;
  char v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  int v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  unint64_t v304;
  double v305;
  double v306;
  double v307;
  __int16 v308;
  __int128 v309;
  uint64_t v310;
  __n128 (*v311)(uint64_t, uint64_t);
  void (*v312)(uint64_t);
  const char *v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  char v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  int v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  unint64_t v329;
  __int16 v330;
  void *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  __n128 (*v339)(__n128 *, __n128 *);
  void (*v340)(uint64_t);
  const char *v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  __n128 (*v347)(uint64_t, uint64_t);
  uint64_t (*v348)();
  uint64_t v349;
  char v350;
  char v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  double (*v363)(uint64_t, uint64_t);
  uint64_t (*v364)();
  const char *v365;
  char v366;
  char v367;
  int32x2_t v368;
  int32x4_t __b;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374[3];
  uint64_t v375;
  std::__shared_weak_count *v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  _QWORD *v382;
  _QWORD *v383;
  uint64_t v384;
  int8x8_t *v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  __int128 v389;
  __int128 *v390;
  uint64_t v391;

  v391 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 788))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v10 = *((_QWORD *)v8 + 3);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_16:
    v387 = v11;
    v388 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v387 = v11;
  v388 = v12;
  v15 = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  v18 = *a3;
  v19 = a3[1];
  if (*a3 != v19)
  {
    while (*(_WORD *)v18 != 16)
    {
      v18 += 48;
      if (v18 == v19)
        goto LABEL_32;
    }
  }
  if (v18 == v19)
  {
LABEL_32:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_283;
  }
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(int8x8_t **)(v20 + 112);
  v22 = *(std::__shared_weak_count **)(v20 + 120);
  v385 = v21;
  v386 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (v387)
    v25 = v21 == 0;
  else
    v25 = 1;
  if (v25)
  {
    *a4 = 0;
    a4[1] = 0;
    if (!v22)
      goto LABEL_283;
    goto LABEL_279;
  }
  v382 = 0;
  v383 = 0;
  v384 = 0;
  for (i = *(_QWORD **)(v18 + 24); i; i = (_QWORD *)*i)
  {
    v40 = (std::__shared_weak_count *)i[15];
    *(_QWORD *)&v309 = i[14];
    *((_QWORD *)&v309 + 1) = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    md::DynamicTrafficTileList::addDynamicTile((uint64_t)&v382, &v309);
    if (v40)
    {
      v43 = (unint64_t *)&v40->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
  std::__sp_mut::lock(sp_mut);
  v28 = *(std::__shared_weak_count **)(a1 + 768);
  v380 = *(_QWORD *)(a1 + 760);
  v381 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  std::__sp_mut::unlock(sp_mut);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(*(id *)(a1 + 776), "gglDevice") + 24))(&v379);
  v31 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v32 = ggl::BufferData::BufferData((uint64_t)&v31[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v31[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v377 = v32;
  v378 = v31;
  v33 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v34 = ggl::BufferData::BufferData((uint64_t)&v33[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v33[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v33[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v375 = v34;
  v376 = v33;
  memset(v374, 0, sizeof(v374));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v374);
  v371 = 0;
  v370 = 0;
  v372 = 0;
  v36 = gss::Allocator::instance(v35);
  v373 = v36;
  v37 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, 8, 4);
  v38 = v37;
  v239 = a4;
  if (v37)
  {
    *v37 = 0xA00000005;
    v39 = (uint64_t)(v37 + 1);
    v372 = (uint64_t)(v37 + 1);
    v370 = v37;
    v371 = (uint64_t)(v37 + 1);
  }
  else
  {
    v39 = 8;
    v372 = 8;
    v370 = 0;
    v371 = 8;
  }
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, 16, 4);
  v46 = (_QWORD *)(v45 + 8);
  if (v45)
    *v46 = 65543;
  v47 = v45 + 16;
  do
  {
    v48 = *(_QWORD *)(v39 - 8);
    v39 -= 8;
    *--v46 = v48;
  }
  while ((_QWORD *)v39 != v38);
  v49 = v370;
  v50 = v372;
  v370 = v46;
  v371 = v45 + 16;
  v372 = v45 + 16;
  if (v49)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v373 + 40))(v373, v49, v50 - (_QWORD)v49);
  v371 = v47;
  memset_pattern16(&__b, &unk_19FFB6390, 0x10uLL);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v241 = a1;
  v238 = objc_msgSend(v51, "loadGreenTraffic");

  v360 = 0;
  v361 = &v360;
  v362 = 0x4812000000;
  v363 = __Block_byref_object_copy_;
  v364 = __Block_byref_object_dispose_;
  v365 = "";
  v52 = *(int32x2_t **)(a2 + 16);
  v53 = v52[1].i32[0];
  v366 = v52[1].i32[1];
  v367 = v53;
  v368 = vrev64_s32(*v52);
  v356 = 0;
  v357 = &v356;
  v358 = 0x2020000000;
  v359 = 0;
  v352 = 0;
  v353 = &v352;
  v354 = 0x2020000000;
  v355 = 0;
  v344 = 0;
  v345 = &v344;
  v346 = 0x5012000000;
  v347 = __Block_byref_object_copy__5;
  v348 = __Block_byref_object_dispose__6;
  v349 = 0;
  v350 = 0;
  v351 = 0;
  v336 = 0;
  v337 = &v336;
  v338 = 0x4012000000;
  v339 = __Block_byref_object_copy__7;
  v340 = __Block_byref_object_dispose__8;
  v341 = "";
  v54 = *(unsigned __int8 **)(a1 + 792);
  if (v54)
  {
    md::ElevationRequestUpdater::getDsmResource(&v342, v54, a3);
  }
  else
  {
    v342 = 0;
    v343 = 0;
  }
  v55 = atomic_load((unsigned __int8 *)(a1 + 786));
  if ((v55 & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 776), "undulationModel"))
    {
      v56 = v361;
      v57 = objc_msgSend(*(id *)(a1 + 776), "undulationModel");
      v58 = 1 << *((_BYTE *)v56 + 49);
      v59 = (double)*((int *)v56 + 14);
      v60 = (double)(v58 + ~*((_DWORD *)v56 + 13));
      v61 = 6.28318531 / (double)v58;
      v62 = exp(v61 * v60 + -3.14159265);
      v246 = atan(v62);
      v63 = fmod(v61 * v59, 6.28318531);
      v244 = fmod(v63 + 6.28318531, 6.28318531);
      v64 = exp((v60 + 1.0) * v61 + -3.14159265);
      v242 = atan(v64);
      v65 = fmod(v61 + v59 * v61, 6.28318531);
      v66 = fmod(v65 + 6.28318531, 6.28318531);
      v67 = v345;
      v69.f64[0] = v244;
      v68.f64[0] = v246;
      v69.f64[1] = v66;
      v70 = *((unsigned __int8 *)v345 + 72);
      v68.f64[1] = v242;
      v345[6] = v57;
      *(float32x4_t *)(v67 + 7) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64((float64x2_t)vdupq_n_s64(0xC066800000000000), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL), v69)), vmlaq_f64((float64x2_t)vdupq_n_s64(0xC056800000000000), (float64x2_t)vdupq_n_s64(0x405CA5DC1A63C1F8uLL), v68));
      if (!v70)
        *((_BYTE *)v67 + 72) = 1;
    }
  }
  v71.i64[0] = 0x500000005;
  v71.i64[1] = 0x500000005;
  v240 = a2;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(__b, v71)))) & 1) != 0)
  {
    v73 = *(_QWORD *)(v387 + 144);
    v72 = *(std::__shared_weak_count **)(v387 + 152);
    v334 = v73;
    v335 = v72;
    if (v72)
    {
      v74 = (unint64_t *)&v72->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    v76 = *(char **)(v73 + 2920);
    v77 = *(char **)(v73 + 2928);
    if (v76 == v77)
      goto LABEL_76;
    v78 = v77 - v76 - 40;
    if (v78 > 0x27)
    {
      v80 = 0;
      v81 = 0;
      v82 = v78 / 0x28 + 1;
      v83 = v76 + 56;
      v84 = v82 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v80 += (*(v83 - 5) - *(v83 - 6)) >> 5;
        v81 += (*v83 - *(v83 - 1)) >> 5;
        v83 += 10;
        v84 -= 2;
      }
      while (v84);
      v79 = v81 + v80;
      if (v82 == (v82 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_74:
        if (v79)
        {
          v85 = v79;
          v86 = (char *)operator new(40 * v79);
          v87 = &v86[40 * v85];
LABEL_77:
          v332 = 0;
          v331 = 0;
          v333 = 0;
          std::vector<BOOL>::reserve((uint64_t)&v331, v85);
          v88 = *(int **)(v73 + 2920);
          v89 = *(int **)(v73 + 2928);
          v243 = v89;
          v90 = v86;
          while (v88 != v89)
          {
            v91 = (int *)*((_QWORD *)v88 + 1);
            v247 = (int *)*((_QWORD *)v88 + 2);
            for (j = v88; v91 != v247; v91 += 8)
            {
              v93 = *v88;
              v94 = v88[1];
              v96 = *v91;
              v95 = v91[1];
              v97 = *((_QWORD *)v91 + 1);
              v98 = *((unsigned __int8 *)v91 + 24);
              v100 = v91[4];
              v99 = v91[5];
              if (*((_BYTE *)v91 + 27))
                v101 = 3;
              else
                v101 = 4;
              if (v90 >= v87)
              {
                v102 = 0xCCCCCCCCCCCCCCCDLL * ((v90 - v86) >> 3) + 1;
                if (v102 > 0x666666666666666)
                  abort();
                if (0x999999999999999ALL * ((v87 - v86) >> 3) > v102)
                  v102 = 0x999999999999999ALL * ((v87 - v86) >> 3);
                if (0xCCCCCCCCCCCCCCCDLL * ((v87 - v86) >> 3) >= 0x333333333333333)
                  v103 = 0x666666666666666;
                else
                  v103 = v102;
                if (v103)
                {
                  if (v103 > 0x666666666666666)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v104 = (char *)operator new(40 * v103);
                }
                else
                {
                  v104 = 0;
                }
                v105 = &v104[8 * ((v90 - v86) >> 3)];
                *(_DWORD *)v105 = v93;
                *((_DWORD *)v105 + 1) = v94;
                *((_DWORD *)v105 + 2) = v96;
                *((_DWORD *)v105 + 3) = v95;
                *((_QWORD *)v105 + 2) = v97;
                *((_DWORD *)v105 + 6) = v98;
                *((_DWORD *)v105 + 7) = v100;
                *((_DWORD *)v105 + 8) = v99;
                *((_DWORD *)v105 + 9) = v101;
                if (v90 == v86)
                {
                  v109 = &v104[8 * ((v90 - v86) >> 3)];
                }
                else
                {
                  v106 = &v104[8 * ((v90 - v86) >> 3)];
                  do
                  {
                    v107 = *(_OWORD *)(v90 - 40);
                    v108 = *(_OWORD *)(v90 - 24);
                    v109 = v106 - 40;
                    *((_QWORD *)v106 - 1) = *((_QWORD *)v90 - 1);
                    *(_OWORD *)(v106 - 24) = v108;
                    *(_OWORD *)(v106 - 40) = v107;
                    v90 -= 40;
                    v106 -= 40;
                  }
                  while (v90 != v86);
                }
                v87 = &v104[40 * v103];
                v90 = v105 + 40;
                if (v86)
                  operator delete(v86);
                v86 = v109;
                v88 = j;
              }
              else
              {
                *(_DWORD *)v90 = v93;
                *((_DWORD *)v90 + 1) = v94;
                *((_DWORD *)v90 + 2) = v96;
                *((_DWORD *)v90 + 3) = v95;
                *((_QWORD *)v90 + 2) = v97;
                *((_DWORD *)v90 + 6) = v98;
                *((_DWORD *)v90 + 7) = v100;
                *((_DWORD *)v90 + 8) = v99;
                *((_DWORD *)v90 + 9) = v101;
                v90 += 40;
              }
              v110 = *((unsigned __int8 *)v91 + 25);
              v111 = v332;
              if (v332 == v333 << 6)
              {
                if ((uint64_t)(v332 + 1) < 0)
                  abort();
                v112 = v333 << 7;
                if (v333 << 7 <= (v332 & 0xFFFFFFFFFFFFFFC0) + 64)
                  v112 = (v332 & 0xFFFFFFFFFFFFFFC0) + 64;
                if (v332 <= 0x3FFFFFFFFFFFFFFELL)
                  v113 = v112;
                else
                  v113 = 0x7FFFFFFFFFFFFFFFLL;
                std::vector<BOOL>::reserve((uint64_t)&v331, v113);
                v111 = v332;
                v88 = j;
              }
              v332 = v111 + 1;
              v114 = v111 >> 6;
              v115 = 1 << v111;
              if (v110)
                v92 = *((_QWORD *)v331 + v114) | v115;
              else
                v92 = *((_QWORD *)v331 + v114) & ~v115;
              *((_QWORD *)v331 + v114) = v92;
            }
            v88 += 10;
            v89 = v243;
          }
          *(_QWORD *)&v309 = 0;
          *((_QWORD *)&v309 + 1) = &v309;
          v310 = 0x11812000000;
          v311 = __Block_byref_object_copy__10;
          v312 = __Block_byref_object_dispose__11;
          v313 = "";
          v314 = 0u;
          v315 = 0u;
          v316 = 0u;
          v317 = 0u;
          v318 = 0u;
          v319 = 0u;
          v320 = 3;
          v321 = 0;
          v322 = 0xC120000000000000;
          v323 = 0;
          v324 = 0xFFFFFFF6FFFFFFFFLL;
          v325 = -1054867456;
          v326 = 0u;
          v327 = 0u;
          v328 = 0;
          v329 = 0xFFFFFFFF00000000;
          v330 = 0;
          v283 = 0;
          v284 = &v283;
          v285 = 0x11812000000;
          v286 = __Block_byref_object_copy__10;
          v287 = __Block_byref_object_dispose__11;
          v288 = "";
          *(_OWORD *)v293 = 0u;
          v294 = 0u;
          v291 = 0u;
          *(_OWORD *)v292 = 0u;
          *(_OWORD *)v289 = 0u;
          *(_OWORD *)v290 = 0u;
          v295 = 3;
          v296 = 0;
          v297 = 0xC120000000000000;
          v298 = 0;
          v299 = 0xFFFFFFF6FFFFFFFFLL;
          v300 = -1054867456;
          v301 = 0u;
          v302 = 0u;
          v303 = 0;
          v304 = 0xFFFFFFFF00000000;
          v308 = 0;
          v116 = *((_BYTE *)v361 + 49);
          v117 = 1.0 / (double)(1 << v116);
          v118 = exp(v117 * 6.28318531 * ((double)((1 << v116) + ~*((_DWORD *)v361 + 13)) + 0.5) + -3.14159265);
          v119 = atan(v118) * 114.591559 + -90.0;
          v120 = cos(v119 * 0.034906585) * -559.82 + 111132.92;
          v121 = v120 + cos(v119 * 0.0698131701) * 1.175;
          v122 = v121 + cos(v119 * 0.104719755) * -0.0023;
          v123 = v119 * 0.00872664626;
          v124 = tan(v119 * 0.00872664626 + 0.78103484);
          v125 = log(v124);
          v126 = tan(v123 + 0.789761487);
          v127 = fabs((log(v126) - v125) * 0.159154943) / (v122 * v117);
          __powidf2();
          v129 = v128 * 0.0000000249532021;
          v130 = *((_QWORD *)&v309 + 1);
          *(double *)(*((_QWORD *)&v309 + 1) + 248) = v127;
          *(double *)(v130 + 256) = v127;
          *(double *)(v130 + 264) = v129;
          v305 = v127;
          v306 = v127;
          v307 = v129;
          v274 = 0.0;
          v275 = &v274;
          v276 = 0x5812000000;
          v277 = __Block_byref_object_copy__14;
          v278 = __Block_byref_object_dispose__15;
          v279 = 0u;
          v280 = 0u;
          v281 = 0;
          v282 = 1065353216;
          v265 = 0;
          v266 = &v265;
          v267 = 0x5812000000;
          v268 = __Block_byref_object_copy__14;
          v269 = __Block_byref_object_dispose__15;
          v270 = 0u;
          v271 = 0u;
          v272 = 0;
          v273 = 1065353216;
          v131 = MEMORY[0x1E0C809B0];
          v258[0] = MEMORY[0x1E0C809B0];
          v258[1] = 3321888768;
          v258[2] = ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke;
          v258[3] = &unk_1E428A720;
          v259 = 0;
          v260 = 0;
          v261 = 0;
          v262 = v373;
          v132 = v370;
          v133 = (_QWORD *)v371;
          v134 = v371 - (_QWORD)v370;
          if ((_QWORD *)v371 != v370)
          {
            if (v134 < 0)
              abort();
            v135 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v373 + 16))();
            v259 = v135;
            v260 = v135;
            v261 = (char *)&v135[v134 >> 3];
            do
            {
              if (v135)
                *v135 = *v132;
              ++v132;
              ++v135;
            }
            while (v132 != v133);
            v260 = v135;
          }
          v258[4] = &v309;
          v258[5] = &v274;
          v258[6] = &v283;
          v258[7] = &v265;
          v264 = __b;
          v258[8] = &v344;
          v258[9] = &v336;
          v263 = v240;
          v136 = (void *)MEMORY[0x1A1AF5730](v258);
          md::buildTrafficMesh(v387, (uint64_t)&__b, v387, (uint64_t)v86, &v331, 0xCCCCCCCCCCCCCCCDLL * ((v90 - v86) >> 3), v385, v136, &v380, v238, 4 * (*(_BYTE *)(v241 + 785) == 0));
          v137 = *((_QWORD *)&v309 + 1);
          v138 = v275;
          v139 = *((_OWORD *)v345 + 4);
          v257[0] = *((_OWORD *)v345 + 3);
          v257[1] = v139;
          v140 = (std::__shared_weak_count *)v337[7];
          v256[0] = v337[6];
          v256[1] = (uint64_t)v140;
          if (v140)
          {
            v141 = (unint64_t *)&v140->__shared_owners_;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
          }
          v143 = *(int32x2_t **)(v240 + 16);
          v144 = v143[1].i32[0];
          LOBYTE(v389) = v143[1].i32[1];
          BYTE1(v389) = v144;
          *(int32x2_t *)((char *)&v389 + 4) = vrev64_s32(*v143);
          md::TrafficAccum::flushToRibbonCollection((unint64_t *)(v137 + 48), (uint64_t *)v138 + 6, (uint64_t)v257, v256, (unsigned __int8 *)&v389);
          if (v140)
          {
            v145 = (unint64_t *)&v140->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          v147 = v284;
          v148 = v266;
          v149 = *((_OWORD *)v345 + 4);
          v255[0] = *((_OWORD *)v345 + 3);
          v255[1] = v149;
          v150 = (std::__shared_weak_count *)v337[7];
          v254[0] = v337[6];
          v254[1] = (uint64_t)v150;
          if (v150)
          {
            v151 = (unint64_t *)&v150->__shared_owners_;
            do
              v152 = __ldxr(v151);
            while (__stxr(v152 + 1, v151));
          }
          v153 = *(int32x2_t **)(v240 + 16);
          v154 = v153[1].i32[0];
          LOBYTE(v389) = v153[1].i32[1];
          BYTE1(v389) = v154;
          *(int32x2_t *)((char *)&v389 + 4) = vrev64_s32(*v153);
          md::TrafficAccum::flushToRibbonCollection((unint64_t *)v147 + 6, v148 + 6, (uint64_t)v255, v254, (unsigned __int8 *)&v389);
          if (v150)
          {
            v155 = (unint64_t *)&v150->__shared_owners_;
            do
              v156 = __ldaxr(v155);
            while (__stlxr(v156 - 1, v155));
            if (!v156)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          v250[0] = v131;
          v250[1] = 3321888768;
          v250[2] = ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_17;
          v250[3] = &unk_1E42E9080;
          v250[4] = &v356;
          v250[5] = &v274;
          v250[9] = v241;
          v250[10] = v377;
          v251 = v378;
          if (v378)
          {
            v157 = (unint64_t *)&v378->__shared_owners_;
            do
              v158 = __ldxr(v157);
            while (__stxr(v158 + 1, v157));
          }
          v252 = v375;
          v253 = v376;
          if (v376)
          {
            v159 = (unint64_t *)&v376->__shared_owners_;
            do
              v160 = __ldxr(v159);
            while (__stxr(v160 + 1, v159));
          }
          v250[6] = &v360;
          v250[7] = &v352;
          v250[8] = &v265;
          v390 = 0;
          *(_QWORD *)&v389 = &off_1E42C7118;
          *((_QWORD *)&v389 + 1) = MEMORY[0x1A1AF5730](v250);
          v390 = &v389;
          v248 = 0;
          v249 = 0;
          (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v379 + 16))(v379, &v389, &v248);
          v161 = v249;
          if (v249)
          {
            v162 = (unint64_t *)&v249->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          v164 = v390;
          if (v390 == &v389)
          {
            v165 = 4;
            v164 = &v389;
          }
          else
          {
            if (!v390)
              goto LABEL_156;
            v165 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v164 + 8 * v165))();
LABEL_156:
          v166 = v253;
          if (v253)
          {
            v167 = (unint64_t *)&v253->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          v169 = v251;
          if (v251)
          {
            v170 = (unint64_t *)&v251->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }

          if (v259)
          {
            v260 = v259;
            (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v262 + 40))(v262, v259, v261 - (char *)v259);
          }
          _Block_object_dispose(&v265, 8);
          v172 = (_QWORD *)*((_QWORD *)&v271 + 1);
          if (*((_QWORD *)&v271 + 1))
          {
            do
            {
              v173 = (_QWORD *)*v172;
              std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v172 + 2));
              operator delete(v172);
              v172 = v173;
            }
            while (v173);
          }
          v174 = (void *)*((_QWORD *)&v270 + 1);
          *((_QWORD *)&v270 + 1) = 0;
          if (v174)
            operator delete(v174);
          _Block_object_dispose(&v274, 8);
          v175 = (_QWORD *)*((_QWORD *)&v280 + 1);
          if (*((_QWORD *)&v280 + 1))
          {
            do
            {
              v176 = (_QWORD *)*v175;
              std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v175 + 2));
              operator delete(v175);
              v175 = v176;
            }
            while (v176);
          }
          v177 = (void *)*((_QWORD *)&v279 + 1);
          *((_QWORD *)&v279 + 1) = 0;
          if (v177)
            operator delete(v177);
          _Block_object_dispose(&v283, 8);
          v178 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
          if (*((_QWORD *)&v302 + 1))
          {
            v179 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          v181 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
          if (*((_QWORD *)&v301 + 1))
          {
            v182 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          if (v293[1])
          {
            *(void **)&v294 = v293[1];
            operator delete(v293[1]);
          }
          if (v292[0])
          {
            v292[1] = v292[0];
            operator delete(v292[0]);
          }
          if (v290[1])
          {
            *(void **)&v291 = v290[1];
            operator delete(v290[1]);
          }
          if (v289[0])
          {
            v289[1] = v289[0];
            operator delete(v289[0]);
          }
          _Block_object_dispose(&v309, 8);
          v184 = (std::__shared_weak_count *)*((_QWORD *)&v327 + 1);
          if (*((_QWORD *)&v327 + 1))
          {
            v185 = (unint64_t *)(*((_QWORD *)&v327 + 1) + 8);
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
          v187 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
          if (*((_QWORD *)&v326 + 1))
          {
            v188 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          if (*((_QWORD *)&v318 + 1))
          {
            *(_QWORD *)&v319 = *((_QWORD *)&v318 + 1);
            operator delete(*((void **)&v318 + 1));
          }
          if ((_QWORD)v317)
          {
            *((_QWORD *)&v317 + 1) = v317;
            operator delete((void *)v317);
          }
          if (*((_QWORD *)&v315 + 1))
          {
            *(_QWORD *)&v316 = *((_QWORD *)&v315 + 1);
            operator delete(*((void **)&v315 + 1));
          }
          if ((_QWORD)v314)
          {
            *((_QWORD *)&v314 + 1) = v314;
            operator delete((void *)v314);
          }
          if (v331)
            operator delete(v331);
          if (v86)
            operator delete(v86);
          v190 = v335;
          if (v335)
          {
            v191 = (unint64_t *)&v335->__shared_owners_;
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
          goto LABEL_221;
        }
LABEL_76:
        v85 = 0;
        v87 = 0;
        v86 = 0;
        goto LABEL_77;
      }
      v76 += 40 * (v82 & 0xFFFFFFFFFFFFFFELL);
    }
    else
    {
      v79 = 0;
    }
    do
    {
      v79 += (*((_QWORD *)v76 + 2) - *((_QWORD *)v76 + 1)) >> 5;
      v76 += 40;
    }
    while (v76 != v77);
    goto LABEL_74;
  }
LABEL_221:
  v193 = v357[3];
  v194 = v353[3];
  v195 = (char *)operator new(0x350uLL);
  *((_QWORD *)v195 + 1) = 0;
  *((_QWORD *)v195 + 2) = 0;
  *(_QWORD *)v195 = &off_1E42DC970;
  gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v309, (uint64_t)&v370);
  v284 = 0;
  v283 = 0;
  v196 = (gss::Allocator *)md::MapTileData::MapTileData((uint64_t)(v195 + 24), v240, (uint64_t)v374, (uint64_t)&v283, 1);
  v197 = v377;
  v198 = v378;
  *((_QWORD *)v195 + 3) = &off_1E429CBB8;
  *((_QWORD *)v195 + 82) = &unk_1E429CBF8;
  *((_QWORD *)v195 + 93) = v197;
  *((_QWORD *)v195 + 94) = v198;
  if (v198)
  {
    v199 = (unint64_t *)&v198->__shared_owners_;
    do
      v200 = __ldxr(v199);
    while (__stxr(v200 + 1, v199));
  }
  v201 = v376;
  *((_QWORD *)v195 + 95) = v375;
  *((_QWORD *)v195 + 96) = v201;
  if (v201)
  {
    v202 = (unint64_t *)&v201->__shared_owners_;
    do
      v203 = __ldxr(v202);
    while (__stxr(v203 + 1, v202));
  }
  *((_QWORD *)v195 + 97) = v193;
  *((_QWORD *)v195 + 98) = v194;
  *((_QWORD *)v195 + 99) = 0;
  *((_QWORD *)v195 + 101) = 0;
  *((_QWORD *)v195 + 100) = 0;
  *((_QWORD *)v195 + 102) = gss::Allocator::instance(v196);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)v195 + 99, v309, *((_QWORD **)&v309 + 1), (uint64_t)(*((_QWORD *)&v309 + 1) - v309) >> 3);
  *((_QWORD *)v195 + 105) = 0;
  *(_OWORD *)(v195 + 824) = 0u;
  v204 = v382;
  v205 = v383;
  v206 = (char *)v383 - (char *)v382;
  if (v383 != v382)
  {
    if (v206 < 0)
      abort();
    v207 = operator new((char *)v383 - (char *)v382);
    *((_QWORD *)v195 + 103) = v207;
    *((_QWORD *)v195 + 104) = v207;
    *((_QWORD *)v195 + 105) = &v207[2 * (v206 >> 4)];
    do
    {
      *v207 = *v204;
      v208 = v204[1];
      v207[1] = v208;
      if (v208)
      {
        v209 = (unint64_t *)(v208 + 8);
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      v204 += 2;
      v207 += 2;
    }
    while (v204 != v205);
    *((_QWORD *)v195 + 104) = v207;
  }
  v211 = *((float *)v195 + 162);
  v283 = 0;
  v274 = 1.0 / v211;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)v195 + 192, (double *)&v283, &v274);
  if ((_QWORD)v309)
  {
    *((_QWORD *)&v309 + 1) = v309;
    (*(void (**)(__n128 (*)(uint64_t, uint64_t), _QWORD, _QWORD))(*(_QWORD *)v311 + 40))(v311, v309, v310 - v309);
  }
  *v239 = v195 + 24;
  v239[1] = v195;
  _Block_object_dispose(&v336, 8);
  v212 = v343;
  if (v343)
  {
    v213 = (unint64_t *)&v343->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  _Block_object_dispose(&v344, 8);
  _Block_object_dispose(&v352, 8);
  _Block_object_dispose(&v356, 8);
  _Block_object_dispose(&v360, 8);
  if (v370)
  {
    v371 = (uint64_t)v370;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v373 + 40))(v373, v370, v372 - (_QWORD)v370);
  }
  if (v374[0])
    operator delete(v374[0]);
  v215 = v376;
  if (v376)
  {
    v216 = (unint64_t *)&v376->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = v378;
  if (v378)
  {
    v219 = (unint64_t *)&v378->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  if (v379)
  {
    v221 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v379 + 24))(v379);
    v222 = v379;
    v379 = 0;
    *(_QWORD *)&v309 = v222;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v221 + 48))(v221, &v309);
    v223 = v309;
    *(_QWORD *)&v309 = 0;
    if (v223)
      (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
    v224 = v379;
    v379 = 0;
    if (v224)
      (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  }
  v225 = v381;
  if (v381)
  {
    v226 = (unint64_t *)&v381->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = (char *)v382;
  if (v382)
  {
    v229 = (char *)v383;
    if (v383 != v382)
    {
      do
      {
        v230 = (std::__shared_weak_count *)*((_QWORD *)v229 - 1);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v229 -= 16;
      }
      while (v229 != v228);
      v228 = (char *)v382;
    }
    operator delete(v228);
  }
  v22 = v386;
  if (v386)
  {
LABEL_279:
    v233 = (unint64_t *)&v22->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_283:
  v235 = v388;
  if (v388)
  {
    v236 = (unint64_t *)&v388->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
}

void sub_19F422460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t v14;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4D8]);
  _Block_object_dispose(&STACK[0x4E8], 8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  _Block_object_dispose(&STACK[0x528], 8);
  _Block_object_dispose(&STACK[0x578], 8);
  _Block_object_dispose(&STACK[0x598], 8);
  _Block_object_dispose(&STACK[0x5B8], 8);
  v14 = STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = v14;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x628] + 40))(STACK[0x628], v14, STACK[0x620] - v14);
  }
  if (STACK[0x630])
    operator delete((void *)STACK[0x630]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x648]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x658]);
  ggl::Loader::~Loader((ggl::Loader *)&STACK[0x668]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 - 256);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v12 - 240));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 - 216);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 - 200);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciTrafficLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, unsigned __int16 **a4)
{
  char *v4;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  _WORD *v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  int32x2_t *v26;
  __int32 v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  int v50;
  uint64_t v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char v56[32];
  unint64_t v57;
  uint64_t v58;
  void *__p;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 v62[4];
  int32x2_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  int v67;
  char v68[8];

  v4 = *a2;
  if (*(unsigned __int8 *)(*((_QWORD *)*a2 + 2) + 8) < 7u)
    return 0;
  v7 = *a4;
  v8 = a4[1];
  if (*a4 != v8)
  {
    while (*v7 != 16)
    {
      v7 += 24;
      if (v7 == v8)
        goto LABEL_7;
    }
  }
  if (v7 != v8)
    return 0;
LABEL_7:
  v9 = (_WORD *)*((_QWORD *)v4 + 15);
  v10 = (_WORD *)*((_QWORD *)v4 + 16);
  if (v9 != v10)
  {
    v11 = v9;
    while (*v11 != 16)
    {
      v11 += 24;
      if (v11 == v10)
        goto LABEL_17;
    }
    if (v11 != v10)
    {
      while (*v9 != 16)
      {
        v9 += 24;
        if (v9 == v10)
        {
          v9 = v10;
          break;
        }
      }
      if (*((_QWORD *)v9 + 4))
        return 0;
    }
  }
LABEL_17:
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(&v66, v12, 16);
  v13 = (_BYTE)v66 != 0;
  if (!(_BYTE)v66)
    return v13;
  v14 = HIDWORD(v66);
  v15 = *a4;
  v16 = a4[1];
  if (*a4 != v16)
  {
    while (*v15 != *(unsigned __int16 *)(a1 + 788))
    {
      v15 += 24;
      if (v15 == v16)
        goto LABEL_35;
    }
  }
  if (v15 == v16 || *((_QWORD *)v15 + 4) != 1)
  {
LABEL_35:
    v19 = 0;
  }
  else
  {
    v18 = *((_QWORD *)v15 + 3);
    v19 = *(_QWORD *)(v18 + 112);
    v20 = *(std::__shared_weak_count **)(v18 + 120);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      v64 = v19;
      v65 = v20;
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      goto LABEL_37;
    }
  }
  v64 = v19;
  v65 = 0;
LABEL_37:
  v26 = *(int32x2_t **)(v64 + 8);
  v27 = v26[1].i32[0];
  v62[0] = v26[1].i32[1];
  v62[1] = v27;
  v63 = vrev64_s32(*v26);
  v48 = **a2;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(&v51, *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 788));
  v28 = HIDWORD(v51);
  __p = 0;
  v60 = 0;
  v61 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(&v51, *(_QWORD *)(a1 + 24), 16);
  v29 = 0;
  if ((_DWORD)v28)
  {
    v30 = HIDWORD(v51);
    if (HIDWORD(v51))
    {
      if (v28 >= HIDWORD(v51))
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          ++v29;
          v28 *= 2;
        }
        while (v28 < HIDWORD(v51));
      }
      while (v28 > v30)
      {
        --v29;
        v30 *= 2;
      }
    }
  }
  v47 = (uint64_t)a4;
  if (v29 + v27 >= v14)
    v31 = -v29;
  else
    v31 = v27 - v14;
  md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v31, 16, *(_QWORD *)(a1 + 24), v62, 0, (uint64_t *)&__p);
  v33 = (unsigned __int8 *)__p;
  v32 = v60;
  if (__p != v60)
  {
    do
    {
      v34 = *a2;
      v35 = *((_QWORD *)*a2 + 14);
      v36 = *(_QWORD *)(v33 + 4);
      v50 = v36;
      v37 = v33[1];
      v38 = *v33;
      LOBYTE(v51) = v48;
      WORD1(v51) = 16;
      HIDWORD(v51) = 2147483646;
      v52 = v56;
      v53 = v56;
      v54 = v56;
      v55 = 32;
      v57 = 0;
      v67 = HIDWORD(v36);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, v56, (char *)&v67, v68);
      v67 = v50;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, v53, (char *)&v67, v68);
      v67 = v37;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, v53, (char *)&v67, v68);
      v67 = v38;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, v53, (char *)&v67, v68);
      v39 = (unsigned __int8 *)v52;
      v40 = v53 - (_BYTE *)v52;
      if (v53 == v52)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        if (v40 <= 1)
          v40 = 1;
        do
        {
          v42 = *v39++;
          v41 ^= (v41 << 6) + (v41 >> 2) - 0x61C8864680B583EBLL + v42;
          --v40;
        }
        while (v40);
      }
      v57 = v41;
      v58 = v35;
      gdc::LayerDataRequest::request((uint64_t)v34, (uint64_t)&v51, 0);
      if (v52 != v54)
        free(v52);
      v33 += 24;
    }
    while (v33 != v32);
  }
  v43 = *(_QWORD *)(a1 + 792);
  if (v43)
    md::ElevationRequestUpdater::updateRequest(v43, a2, v47);
  v13 = v13;
  if (__p)
  {
    v60 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
  v44 = v65;
  if (v65)
  {
    v45 = (unint64_t *)&v65->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return v13;
}

void sub_19F422C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v31 - 120);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciTrafficLayerDataSource::useOptionalResources(md::DaVinciTrafficLayerDataSource *this)
{
  return 0;
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v2 = *(_OWORD *)(a2 + 144);
  v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  result = *(__n128 *)(a2 + 224);
  v5 = *(_OWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v5;
  *(_OWORD *)(a1 + 256) = v6;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

void ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6, uint64_t *a7, int a8, float a9, float a10, char *a11, char *a12, uint64_t a13, int a14, unsigned __int8 a15, float *a16, char a17)
{
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  gss::Allocator *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  float v44;
  _BOOL4 v45;
  BOOL v46;
  unsigned int v47;
  double v48;
  int8x16_t v49;
  float v50;
  _BOOL4 v51;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int32x2_t *v66;
  __int32 v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  float v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t v93;
  uint64_t *v94;
  __int128 v96;
  __int128 v97;
  uint64_t v98[2];
  _OWORD v99[2];
  __int128 v100;
  _QWORD v101[2];
  unsigned __int8 v102;
  __int128 v103;
  uint64_t v104[3];
  uint64_t v105;
  char v106[9];

  if (vabds_f32(a10, a9) < 1.0e-10)
    return;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)(*a7 + 240), (unsigned int **)(a1 + 80), v104);
  v26 = *a7;
  v97 = 0uLL;
  v27 = *(std::__shared_weak_count **)(v26 + 16);
  if (!v27)
  {
    v28 = 0;
    goto LABEL_6;
  }
  v28 = std::__shared_weak_count::lock(v27);
  *((_QWORD *)&v97 + 1) = v28;
  if (!v28)
  {
LABEL_6:
    v29 = 0;
    goto LABEL_7;
  }
  v29 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)&v97 = v29;
LABEL_7:
  *(_QWORD *)((char *)&v100 + 7) = 0;
  *(_QWORD *)&v100 = 0;
  HIBYTE(v100) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v103, v29, (gss::FeatureAttributeSet *)v104, (gss::QueryOverrides *)&v100);
  if (!BYTE14(v100) && (_QWORD)v100)
  {
    v31 = gss::Allocator::instance(v30);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v31 + 40))(v31, v100, WORD6(v100));
  }
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  v34 = v103;
  v97 = v103;
  if (*((_QWORD *)&v103 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    *((_QWORD *)&v100 + 1) = v35;
    do
      v38 = __ldxr(v36);
    while (__stxr(v38 + 1, v36));
  }
  else
  {
    *((_QWORD *)&v100 + 1) = 0;
  }
  v101[0] = 0;
  v101[1] = 0;
  *(_QWORD *)&v100 = v34;
  v102 = 0;
  if (v34)
    LODWORD(v34) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v34 + 48))(v34, v101);
  v102 = v34;
  if (v35)
  {
    v39 = (unint64_t *)&v35->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    LODWORD(v34) = v102;
  }
  if (!(_DWORD)v34 || !md::trafficVisibleAtSpeed((uint64_t)&v100, a8))
    goto LABEL_95;
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48;
  v94 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  v42 = *(_QWORD *)(v100 + 24);
  v43 = *(float **)v42;
  if (!*(_QWORD *)v42)
  {
    v45 = 0;
    goto LABEL_41;
  }
  v44 = *v43;
  v45 = *v43 == 1.0;
  if (!*(_BYTE *)(v42 + 10) || (v44 != 0.0 ? (v46 = v44 == 1.0) : (v46 = 1), v46))
  {
LABEL_41:
    v47 = *(unsigned __int8 *)(v42 + v45 + 11);
    if (v47 != 2)
      goto LABEL_44;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v100 + 24), 0x1C3u, 0) & 1) != 0)
    goto LABEL_45;
  v47 = 1;
LABEL_44:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v42, 0x1C3u, v47))
    goto LABEL_60;
LABEL_45:
  if (v43)
  {
    v50 = *v43;
    v51 = *v43 == 1.0;
    if (*(_BYTE *)(v42 + 10))
    {
      if (v50 != 0.0 && v50 != 1.0)
      {
LABEL_55:
        LOBYTE(v97) = 1;
        v106[0] = 1;
        v54 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v42, 0x1C3u, 0, &v97);
        v55 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v42, 0x1C3u, 1u, v106);
        if (v50 >= 1.0)
          v56 = (_DWORD *)v55;
        else
          v56 = (_DWORD *)v54;
        if (!*v56)
          goto LABEL_59;
        goto LABEL_60;
      }
    }
  }
  else
  {
    v51 = 0;
  }
  v53 = *(unsigned __int8 *)(v42 + v51 + 11);
  v50 = 0.0;
  if (v53 == 2)
    goto LABEL_55;
  if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v42, 0x1C3u, v53, 0))
  {
LABEL_59:
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48;
    v94 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
  }
LABEL_60:
  v57 = fminf(a9, a10);
  if ((a17 & 1) != 0)
    goto LABEL_70;
  if (*(unsigned __int8 *)(v41 + 96) != a8)
    goto LABEL_70;
  if (*(_DWORD *)(v41 + 100) != a5)
    goto LABEL_70;
  if (*(unsigned __int8 *)(v41 + 224) != a15)
    goto LABEL_70;
  if (*(_DWORD *)(v41 + 104) != a6)
    goto LABEL_70;
  v58 = *(_QWORD *)(v41 + 120);
  if (v58)
  {
    if (*(unsigned __int8 *)(a2 + 153) != *(unsigned __int8 *)(v58 + 153))
      goto LABEL_70;
  }
  if (*(_BYTE *)(v41 + 225) && *a7 != *(_QWORD *)(v41 + 144) || (_QWORD)v103 != *(_QWORD *)(v41 + 160))
    goto LABEL_70;
  v85 = *(_QWORD *)(v41 + 8);
  if (*(_QWORD *)v41 != v85)
  {
    if (v58 == a2 && *(_DWORD *)(v41 + 132) == (unint64_t)a4)
    {
      v86 = *(float *)(v41 + 136);
      if (a6 < 0)
      {
        if (v86 >= v57)
        {
          v87 = v86 - v57;
          goto LABEL_113;
        }
      }
      else if (v86 <= v57)
      {
        v87 = v57 - v86;
LABEL_113:
        if (v87 <= 1.0)
        {
          v88 = ceilf(v57);
          v89 = floorf(v57);
          if (a6 <= 0)
            v88 = v89;
          v48 = vabds_f32(v88, v57);
          v90 = *(_QWORD *)(v41 + 176);
          v49.i64[0] = 0x3F847AE147AE147BLL;
          if (v48 <= 0.01)
          {
            v92 = *(float32x2_t *)(v90 + 8 * (int)v88);
          }
          else
          {
            v91 = (float32x2_t *)(v90 + 8 * (int)v89);
            v48 = COERCE_DOUBLE(vsub_f32(v91[1], *v91));
            v92 = vmla_n_f32(*v91, *(float32x2_t *)&v48, v57 - v89);
          }
          v93 = vsub_f32(*(float32x2_t *)(v85 - 8), v92);
          if (vaddv_f32(vmul_f32(v93, v93)) < 0.0001)
            goto LABEL_94;
        }
      }
    }
LABEL_70:
    v59 = *(_QWORD *)(a1 + 72);
    v60 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v61 = *(_OWORD *)(v60 + 64);
    v99[0] = *(_OWORD *)(v60 + 48);
    v99[1] = v61;
    v62 = *(_QWORD *)(v59 + 8);
    v63 = *(std::__shared_weak_count **)(v62 + 56);
    v98[0] = *(_QWORD *)(v62 + 48);
    v98[1] = (uint64_t)v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v66 = *(int32x2_t **)(*(_QWORD *)(a1 + 112) + 16);
    v67 = v66[1].i32[0];
    LOBYTE(v97) = v66[1].i32[1];
    BYTE1(v97) = v67;
    *(int32x2_t *)((char *)&v97 + 4) = vrev64_s32(*v66);
    md::TrafficAccum::flushToRibbonCollection((unint64_t *)v41, v94, (uint64_t)v99, v98, (unsigned __int8 *)&v97);
    if (v63)
    {
      v68 = (unint64_t *)&v63->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v70 = *a7;
    v71 = (std::__shared_weak_count *)a7[1];
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    v96 = v103;
    if (*((_QWORD *)&v103 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
      md::TrafficAccum::reset(v41, a2, a3, a8, a5, a6, v70, (uint64_t)v71, (uint64_t *)&v96, *(_DWORD *)(v41 + 196), a15);
      v77 = (unint64_t *)&v74->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    else
    {
      md::TrafficAccum::reset(v41, a2, a3, a8, a5, a6, v70, (uint64_t)v71, (uint64_t *)&v96, *(_DWORD *)(v41 + 196), a15);
    }
    if (v71)
    {
      v79 = (unint64_t *)&v71->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
LABEL_94:
  v81 = fmaxf(a9, a10);
  *(_QWORD *)(v41 + 120) = a2;
  *(_DWORD *)(v41 + 128) = a3;
  *(_DWORD *)(v41 + 132) = a4;
  *(float *)(v41 + 136) = v81;
  md::TrafficAccum::addPoints((float32x2_t **)v41, a11, a12, a13, a14, a16, v57, v81, v48, v49);
LABEL_95:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v100);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v104[0])
  {
    v104[1] = v104[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v105 + 40))(v105, v104[0], v104[2] - v104[0]);
  }
}

void sub_19F4235D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a26);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v33 = *(_QWORD *)(v31 - 160);
  if (v33)
  {
    *(_QWORD *)(v31 - 152) = v33;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 - 136) + 40))(*(_QWORD *)(v31 - 136), v33, *(_QWORD *)(v31 - 144) - v33);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_17(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  char v14[4];
  uint64_t v15;
  char v16;

  v4 = a1[9];
  v5 = operator new();
  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(unsigned __int8 *)(v4 + 784);
  *(_WORD *)v14 = *(_WORD *)(v7 + 48);
  v15 = *(_QWORD *)(v7 + 52);
  v16 = 1;
  md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::RibbonLayer((_QWORD *)v5, a2, *(uint64_t **)(v6 + 64), a1 + 10, a1 + 12, v14, v8);
  *(_QWORD *)v5 = &off_1E4297080;
  *(_QWORD *)(v5 + 152) = 0;
  *(_BYTE *)(v5 + 160) = 0;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v5;
  v9 = operator new();
  v10 = *(_QWORD *)(a1[8] + 8);
  v11 = *(_QWORD *)(a1[6] + 8);
  v12 = *(unsigned __int8 *)(v4 + 784);
  *(_WORD *)v14 = *(_WORD *)(v11 + 48);
  v15 = *(_QWORD *)(v11 + 52);
  v16 = 1;
  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::RibbonLayer((_QWORD *)v9, a2, *(uint64_t **)(v10 + 64), a1 + 10, a1 + 12, v14, v12);
  *(_QWORD *)v9 = &off_1E4297080;
  *(_QWORD *)(v9 + 152) = 0;
  *(_BYTE *)(v9 + 160) = 0;
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v9;
  return result;
}

void sub_19F4237F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C408A8CA7F7);
  _Unwind_Resume(a1);
}

uint64_t std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *zone;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v19;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        v7 = (void (***)(_QWORD, uint64_t))*--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          (**v6)(v6, v4);
          {
            v19 = v2;
            v9 = operator new();
            *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v9 + 24) = "VectorKitLabels";
            *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v9 = &off_1E42B5668;
            *(_QWORD *)(v9 + 8) = "VectorKitLabels";
            *(_OWORD *)(v9 + 72) = 0u;
            *(_OWORD *)(v9 + 88) = 0u;
            *(_OWORD *)(v9 + 104) = 0u;
            *(_OWORD *)(v9 + 120) = 0u;
            *(_OWORD *)(v9 + 136) = 0u;
            *(_OWORD *)(v9 + 152) = 0u;
            *(_OWORD *)(v9 + 168) = 0u;
            *(_OWORD *)(v9 + 184) = 0u;
            *(_OWORD *)(v9 + 200) = 0u;
            *(_OWORD *)(v9 + 216) = 0u;
            *(_OWORD *)(v9 + 232) = 0u;
            *(_QWORD *)(v9 + 248) = 0;
            *(_OWORD *)(v9 + 56) = 0u;
            v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
            if ((_DWORD)v10)
              geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v9 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v9;
            v2 = v19;
          }
          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
        }
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v4, *(_QWORD *)(a1 + 64) - v4);
  }
  v12 = *(std::__shared_weak_count **)(a1 + 24);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 8);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

uint64_t std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void md::TrafficAccum::~TrafficAccum(md::TrafficAccum *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 4) = v10;
    operator delete(v10);
  }
  v11 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v11;
    operator delete(v11);
  }
}

void md::DynamicTrafficTileList::~DynamicTrafficTileList(md::DynamicTrafficTileList *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::DaVinciTrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciTrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciTrafficTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_1E42C7118;
  result = MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

_QWORD *__copy_helper_block_ea8_80c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE96c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[11];
  result[10] = a2[10];
  result[11] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_80c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE96c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::RibbonLayer(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char *a6, int a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int v19;
  __int32 *v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  unint64_t v31;
  float *v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  size_t prime;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD **v51;
  size_t v52;
  size_t v53;
  size_t v54;
  _QWORD *i;
  size_t v56;
  uint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  size_t v63;
  uint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  __int128 v100;
  unsigned __int8 v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned __int8 v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  uint64_t *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  _OWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t *v161;
  std::vector<unsigned int>::pointer begin;
  uint64_t *v163;
  int64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _OWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  _QWORD *v188;
  void (***v189)(_QWORD, uint64_t);
  void (***v190)(_QWORD, uint64_t);
  unsigned __int8 v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unsigned __int8 v197;
  uint64_t v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 v203;
  std::vector<unsigned int>::pointer v204;
  uint64_t *v205;
  int64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t *v213;
  int64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  char *v222;
  uint64_t *v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  malloc_zone_t *v232;
  void (***v233)(_QWORD, uint64_t);
  void (***v234)(_QWORD, uint64_t);
  unsigned __int8 v235;
  uint64_t v236;
  geo::read_write_lock *v237;
  const char *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  void (***v242)(_QWORD, uint64_t);
  void (***v243)(_QWORD, uint64_t);
  unsigned __int8 v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  uint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  unint64_t *v265;
  __int128 *v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  unint64_t v270;
  _QWORD *v271;
  void (***v272)(_QWORD);
  void (***v273)(_QWORD);
  unsigned __int8 v274;
  uint64_t v275;
  unsigned __int8 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int8x16_t *v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  uint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  unint64_t *v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  unint64_t *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v302;
  char *v303;
  __int128 *v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  _QWORD *v314;
  _QWORD *v315;
  void (***v316)(_QWORD, uint64_t);
  void (***v317)(_QWORD, uint64_t);
  unsigned __int8 v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned __int8 v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  unint64_t v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  geo::read_write_lock *v337;
  const char *v338;
  malloc_zone_t *zone;
  unsigned __int8 v340;
  unsigned __int8 v341;
  unsigned __int8 v342;
  int v343;
  char v344;
  int64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  char *v348;
  _QWORD *v349;
  const QuadTile *v350;
  char *v351;
  char *v352;
  _QWORD *v353;
  _QWORD *v354;
  _QWORD **v355;
  _QWORD **v356;
  _QWORD *v357;
  _QWORD **v358;
  _QWORD **v359;
  uint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  float *v366;
  float v367;
  uint64_t v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  uint64_t v376;
  float *v377;
  uint64_t v378;
  uint64_t v379;
  double v380;
  float v381;
  float v382;
  unint64_t v383;
  float v384;
  float v385;
  uint64_t v386;
  float *v387;
  float v388;
  float v389;
  float *v390;
  uint64_t v391;
  float v392;
  float v393;
  BOOL v394;
  float v395;
  float v396;
  float v397;
  float v398;
  double v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  _BYTE *v407;
  char *v408;
  unint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  _OWORD *v413;
  char *v414;
  uint64_t v415;
  __int128 v416;
  gdc::GlobeTileGrid *v417;
  gdc::GlobeTileGrid *v418;
  gdc::GlobeTileGrid *v419;
  uint64_t v420;
  char *v421;
  uint64_t *v422;
  uint64_t *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  gdc::GlobeTileGrid *v427;
  uint64_t v428;
  float *v429;
  unsigned int v430;
  float v431;
  unsigned int v432;
  unsigned int v433;
  float *v434;
  float v435;
  float v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  char *v442;
  unint64_t *v443;
  __int128 v444;
  unsigned __int8 v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  std::__shared_weak_count *v448;
  std::__shared_count v449;
  unsigned __int8 v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unsigned __int8 v454;
  uint64_t v455;
  unsigned __int8 v456;
  uint64_t v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  uint64_t *v469;
  _QWORD *v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  _BYTE *v477;
  uint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t v481;
  _OWORD *v482;
  uint64_t *v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _QWORD *v501;
  _QWORD *v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  std::__shared_weak_count *end;
  unint64_t *v512;
  unint64_t v513;
  _QWORD *v514;
  int v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  unsigned __int8 v519;
  int v520;
  uint64_t v521;
  geo::read_write_lock *v522;
  const char *v523;
  malloc_zone_t *v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  geo::read_write_lock *v528;
  const char *v529;
  malloc_zone_t *v530;
  _QWORD *v531;
  uint64_t v532;
  unint64_t *v533;
  unint64_t v534;
  uint64_t v535;
  unint64_t *v536;
  unint64_t v537;
  uint64_t v538;
  float v539;
  float32x2_t v540;
  _QWORD **v541;
  _QWORD **v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  __int128 v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unsigned int *v559;
  unsigned int *v560;
  __int128 v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t *v565;
  float32x2_t *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int8x16_t v573;
  unint64_t v574;
  float *v575;
  float32x2_t v576;
  unint64_t v577;
  float v578;
  float32x2_t v579;
  uint64_t v580;
  int8x16_t v581;
  int32x4_t *v582;
  float32x4_t v583;
  unint64_t v584;
  float32x4_t v585;
  const float *i32;
  int32x4_t v587;
  int32x4_t v588;
  int32x4_t v589;
  int8x16_t v590;
  float32x4_t v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  unint64_t v596;
  _QWORD *v597;
  float32x2_t v598;
  float32x2_t v599;
  double v600;
  float v601;
  float32x2_t *v602;
  float v603;
  uint64_t v604;
  int32x2_t v605;
  float32x2_t v606;
  float32x2_t v607;
  uint64_t v608;
  __int32 v609;
  float32x2_t v610;
  float32x4_t v612;
  float32x2_t v616;
  uint64_t v617;
  float32x2_t v620;
  float32x4_t v621;
  float32x2_t v622;
  float32x2_t v623;
  uint64_t v624;
  float32x4_t v627;
  uint64_t v628;
  float32x2_t v631;
  float32x4_t v632;
  float32x2_t v633;
  uint64_t v634;
  float32x2_t *v636;
  float *v637;
  unint64_t v638;
  uint64_t v639;
  float *v640;
  float v641;
  float v642;
  uint64_t v643;
  float *v644;
  unint64_t v645;
  float v646;
  float v647;
  float v649;
  float v650;
  float v651;
  float v652;
  unsigned int v653;
  unint64_t v654;
  float32x2_t v655;
  float v656;
  float v657;
  float v658;
  float v659;
  float v660;
  float v661;
  uint64_t v662;
  float v663;
  __int32 v664;
  float v665;
  float v666;
  double v667;
  float v668;
  float v669;
  float32x2_t v670;
  float v671;
  float v672;
  unint64_t v673;
  float32x4_t v675;
  float32x2_t v676;
  uint64_t v677;
  float v678;
  float32x2_t v681;
  float32x4_t v682;
  float32x2_t v683;
  uint64_t v684;
  float v686;
  uint64_t v687;
  float32x2_t v688;
  __float2 v689;
  float32x4_t v691;
  float32x2_t v692;
  uint64_t v693;
  float32x2_t v696;
  float32x4_t v697;
  float32x2_t v698;
  uint64_t v699;
  __float2 v701;
  float32x4_t v703;
  float32x2_t v704;
  uint64_t v705;
  float32x2_t v708;
  float32x4_t v709;
  float32x2_t v710;
  uint64_t v711;
  __float2 v713;
  float32x4_t v715;
  float32x2_t v716;
  uint64_t v717;
  float32x2_t v720;
  float32x4_t v721;
  float32x2_t v722;
  uint64_t v723;
  float *v725;
  float *v726;
  float v727;
  float v728;
  float v729;
  int16x8_t v730;
  float v731;
  float v732;
  float v733;
  float v734;
  uint64_t v735;
  __int32 v736;
  float32x4_t v738;
  float32x2_t v739;
  uint64_t v740;
  float32x2_t v743;
  float32x4_t v744;
  float32x2_t v745;
  float32x2_t v746;
  uint64_t v747;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  __int128 v753;
  uint64_t v754;
  float32x2_t v757;
  float32x4_t v758;
  float32x2_t v759;
  uint64_t v760;
  unint64_t v762;
  unint64_t v763;
  unint64_t v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  _WORD *v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  _WORD *v772;
  __int16 v773;
  unint64_t v774;
  __int16 v775;
  __int16 v776;
  unint64_t v777;
  uint64_t v778;
  _WORD *v779;
  unint64_t v780;
  int64x2_t v781;
  int64x2_t v782;
  int64x2_t v783;
  int64x2_t v784;
  __int16 *v785;
  unint64_t v786;
  int64x2_t v787;
  unint64_t v788;
  unint64_t v789;
  unsigned __int8 v790;
  _QWORD *v791;
  _QWORD *v792;
  _QWORD *v793;
  void (***v794)(_QWORD, _QWORD *);
  void (***v795)(_QWORD, _QWORD *);
  unsigned __int8 v796;
  uint64_t v797;
  unsigned int *value;
  unsigned int *v799;
  std::vector<unsigned int>::pointer v800;
  int v801;
  int v802;
  unsigned int *v803;
  unsigned int *v804;
  unint64_t v805;
  unint64_t v806;
  _QWORD *v807;
  int v808;
  int v809;
  unint64_t v810;
  unint64_t v811;
  uint64_t v812;
  uint64_t result;
  uint64_t v814;
  uint64_t v815;
  _QWORD **v816;
  _QWORD *v818;
  _QWORD **v819;
  _QWORD *v820;
  float32x2_t v821;
  uint64_t *v822;
  uint64_t v823;
  uint64_t *v824;
  float32x2_t *v825;
  unint64_t v827;
  _WORD *v828;
  float *v829;
  float v830;
  unint64_t v831;
  const QuadTile *v832;
  std::vector<unsigned int>::pointer v833;
  void **v834;
  float v835;
  _QWORD *v837;
  float v838;
  float v840;
  unint64_t v842;
  uint64_t *v843;
  _QWORD *v844;
  uint64_t v845;
  float v846;
  uint64_t *v847;
  gdc::GlobeTileGrid **v848;
  _QWORD **v850;
  char *v851;
  unint64_t v852;
  char *v853;
  uint64_t *v854;
  _QWORD *v855;
  float v856;
  float v857;
  uint64_t *v858;
  char *v859;
  char *v860;
  float v861;
  __int32 v862;
  uint64_t v863;
  uint64_t *v864;
  _QWORD **v865;
  uint64_t v866;
  _QWORD *v867;
  unint64_t v868;
  uint64_t *v869;
  uint64_t *v870;
  void *v871;
  uint64_t *v872;
  uint64_t v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t *v876;
  int8x8_t v877;
  std::vector<unsigned int> v878;
  void *v879[3];
  std::vector<unsigned int> __p;
  unsigned int *v881;
  __int16 v882;
  uint64_t v883;
  _BYTE v884[32];
  __int128 v885;
  uint64_t v886;
  float32x4_t v887;
  float32x2_t v888;
  unint64_t v889;
  __int128 v890;
  unint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  float v895;
  uint64_t v896;
  int16x8x2_t v897;
  float32x4x3_t v898;

  v10 = a7;
  v896 = *MEMORY[0x1E0C80C00];
  v847 = a3;
  v11 = 0;
  if (!a3)
  {
    v854 = 0;
    goto LABEL_487;
  }
  v843 = 0;
  v854 = 0;
  while (2)
  {
    v890 = 0uLL;
    {
      v333 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v333, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v891 = mdm::Allocator::instance(void)::alloc;
    v892 = 0;
    {
      v334 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v334, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v893 = mdm::Allocator::instance(void)::alloc;
    v894 = 0;
    v895 = 1.0;
    v7 = v847[8];
    v14 = v847[9];
    while (v7 != v14)
    {
      v16 = *(_QWORD *)(*(_QWORD *)v7 + 88);
      v17 = *(_QWORD **)(*(_QWORD *)v7 + 72);
      if (v10)
      {
        if (v16)
        {
          if (v16 >= 8)
          {
            v18 = v16 & 0xFFFFFFFFFFFFFFF8;
            v20 = (__int32 *)(v17 + 6);
            v21 = 0uLL;
            v22 = v16 & 0xFFFFFFFFFFFFFFF8;
            v23 = 0uLL;
            v24.i64[0] = 0x300000003;
            v24.i64[1] = 0x300000003;
            v25.i64[0] = 0x100000001;
            v25.i64[1] = 0x100000001;
            do
            {
              v26.i32[0] = *(v20 - 12);
              v27.i32[0] = *(v20 - 11);
              v26.i32[1] = *(v20 - 9);
              v26.i32[2] = *(v20 - 6);
              v26.i32[3] = *(v20 - 3);
              v28.i32[0] = *v20;
              v29.i32[0] = v20[1];
              v28.i32[1] = v20[3];
              v28.i32[2] = v20[6];
              v28.i32[3] = v20[9];
              v27.i32[1] = *(v20 - 8);
              v27.i32[2] = *(v20 - 5);
              v27.i32[3] = *(v20 - 2);
              v29.i32[1] = v20[4];
              v29.i32[2] = v20[7];
              v29.i32[3] = v20[10];
              v21 = vorrq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v27, 2uLL), v24), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v26, 2uLL), v24))), v21);
              v23 = vorrq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v29, 2uLL), v24), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v28, 2uLL), v24))), v23);
              v20 += 24;
              v22 -= 8;
            }
            while (v22);
            v30 = vorrq_s8(v23, v21);
            *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
            v19 = v30.i32[0] | v30.i32[1];
            if (v16 == v18)
              goto LABEL_26;
          }
          else
          {
            v18 = 0;
            v19 = 0;
          }
          v31 = v16 - v18;
          v32 = (float *)v17 + 3 * v18 + 1;
          do
          {
            v33 = vcvts_n_u32_f32(*(v32 - 1), 2uLL);
            if (v33 >= 3)
              LOBYTE(v33) = 3;
            v34 = *v32;
            v32 += 3;
            v35 = vcvts_n_u32_f32(v34, 2uLL);
            if (v35 >= 3)
              LOBYTE(v35) = 3;
            v19 |= 1 << (v33 | (4 * v35));
            --v31;
          }
          while (v31);
        }
        else
        {
          v19 = 0;
        }
      }
      else
      {
        v19 = ggl::CullingGrid::intersectedCellsForRibbon(v16, v17);
      }
LABEL_26:
      v36 = *((_QWORD *)&v890 + 1);
      if (*((_QWORD *)&v890 + 1))
      {
        v37 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v890 + 8));
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          v8 = v19;
          if (*((_QWORD *)&v890 + 1) <= (unint64_t)v19)
            v8 = (unint64_t)v19 % *((_QWORD *)&v890 + 1);
        }
        else
        {
          v8 = (DWORD2(v890) - 1) & v19;
        }
        v38 = *(uint64_t **)(v890 + 8 * v8);
        if (v38)
        {
          v39 = *v38;
          if (*v38)
          {
            if (v37.u32[0] < 2uLL)
            {
              while (1)
              {
                v41 = *(_QWORD *)(v39 + 8);
                if (v41 == v19)
                {
                  if (*(_DWORD *)(v39 + 16) == v19)
                    goto LABEL_106;
                }
                else if ((v41 & (*((_QWORD *)&v890 + 1) - 1)) != v8)
                {
                  goto LABEL_46;
                }
                v39 = *(_QWORD *)v39;
                if (!v39)
                  goto LABEL_46;
              }
            }
            do
            {
              v40 = *(_QWORD *)(v39 + 8);
              if (v40 == v19)
              {
                if (*(_DWORD *)(v39 + 16) == v19)
                  goto LABEL_106;
              }
              else
              {
                if (v40 >= *((_QWORD *)&v890 + 1))
                  v40 %= *((_QWORD *)&v890 + 1);
                if (v40 != v8)
                  break;
              }
              v39 = *(_QWORD *)v39;
            }
            while (v39);
          }
        }
      }
LABEL_46:
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v893 + 16))(v893, 56, 8);
      __p.__begin_ = (std::vector<unsigned int>::pointer)v39;
      __p.__end_ = (std::vector<unsigned int>::pointer)&v893;
      *(_QWORD *)v39 = 0;
      *(_QWORD *)(v39 + 8) = v19;
      *(_DWORD *)(v39 + 16) = v19;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 24) = 0;
      {
        v97 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v97, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v39 + 48) = mdm::Allocator::instance(void)::alloc;
      LOBYTE(__p.__end_cap_.__value_) = 1;
      v43 = (float)(v894 + 1);
      if (!v36 || (float)(v895 * (float)v36) < v43)
      {
        v44 = (v36 & (v36 - 1)) != 0;
        if (v36 < 3)
          v44 = 1;
        v45 = v44 | (2 * v36);
        v46 = vcvtps_u32_f32(v43 / v895);
        if (v45 <= v46)
          prime = v46;
        else
          prime = v45;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v36 = *((_QWORD *)&v890 + 1);
        if (prime <= *((_QWORD *)&v890 + 1))
        {
          if (prime < *((_QWORD *)&v890 + 1))
          {
            v58 = vcvtps_u32_f32((float)v894 / v895);
            if (*((_QWORD *)&v890 + 1) < 3uLL
              || (v59 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v890 + 8)),
                  v59.i16[0] = vaddlv_u8(v59),
                  v59.u32[0] > 1uLL))
            {
              v58 = std::__next_prime(v58);
            }
            else
            {
              v60 = 1 << -(char)__clz(v58 - 1);
              if (v58 >= 2)
                v58 = v60;
            }
            if (prime <= v58)
              prime = v58;
            if (prime >= v36)
            {
              v36 = *((_QWORD *)&v890 + 1);
            }
            else
            {
              if (prime)
                goto LABEL_59;
              v96 = v890;
              *(_QWORD *)&v890 = 0;
              if (v96)
                (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v891 + 40))(v891, v96, 8 * *((_QWORD *)&v890 + 1));
              v36 = 0;
              *((_QWORD *)&v890 + 1) = 0;
            }
          }
LABEL_83:
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v36 <= v19)
              v8 = v19 % v36;
            else
              v8 = v19;
          }
          else
          {
            v8 = ((_DWORD)v36 - 1) & v19;
          }
          goto LABEL_96;
        }
LABEL_59:
        v48 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(*(_QWORD *)v891 + 16))(v891, 8 * prime, 8);
        v49 = v890;
        *(_QWORD *)&v890 = v48;
        if (v49)
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v891 + 40))(v891, v49, 8 * *((_QWORD *)&v890 + 1));
        v50 = 0;
        *((_QWORD *)&v890 + 1) = prime;
        do
          *(_QWORD *)(v890 + 8 * v50++) = 0;
        while (prime != v50);
        v51 = (_QWORD **)v892;
        if (!v892)
          goto LABEL_82;
        v52 = *(_QWORD *)(v892 + 8);
        v53 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v54 = v52 & v53;
          *(_QWORD *)(v890 + 8 * v54) = &v892;
          for (i = *v51; *v51; i = *v51)
          {
            v56 = i[1] & v53;
            if (v56 == v54)
            {
              v51 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v890 + 8 * v56))
            {
              *v51 = (_QWORD *)*i;
              v57 = 8 * v56;
              *i = **(_QWORD **)(v890 + v57);
              **(_QWORD **)(v890 + v57) = i;
            }
            else
            {
              *(_QWORD *)(v890 + 8 * v56) = v51;
              v51 = (_QWORD **)i;
              v54 = v56;
            }
          }
          goto LABEL_82;
        }
        if (v52 >= prime)
          v52 %= prime;
        *(_QWORD *)(v890 + 8 * v52) = &v892;
        v61 = *v51;
        if (!*v51)
        {
LABEL_82:
          v36 = prime;
          goto LABEL_83;
        }
        while (2)
        {
          v63 = v61[1];
          if (v63 >= prime)
            v63 %= prime;
          if (v63 != v52)
          {
            if (!*(_QWORD *)(v890 + 8 * v63))
            {
              *(_QWORD *)(v890 + 8 * v63) = v51;
LABEL_87:
              v51 = (_QWORD **)v61;
              v61 = (_QWORD *)*v61;
              v52 = v63;
              if (!v61)
                goto LABEL_82;
              continue;
            }
            *v51 = (_QWORD *)*v61;
            v62 = 8 * v63;
            *v61 = **(_QWORD **)(v890 + v62);
            **(_QWORD **)(v890 + v62) = v61;
            v61 = v51;
          }
          break;
        }
        v63 = v52;
        goto LABEL_87;
      }
LABEL_96:
      v64 = *(uint64_t **)(v890 + 8 * v8);
      if (v64)
      {
        *(_QWORD *)v39 = *v64;
LABEL_104:
        *v64 = v39;
        goto LABEL_105;
      }
      *(_QWORD *)v39 = v892;
      v892 = v39;
      *(_QWORD *)(v890 + 8 * v8) = &v892;
      if (*(_QWORD *)v39)
      {
        v65 = *(_QWORD *)(*(_QWORD *)v39 + 8);
        if ((v36 & (v36 - 1)) != 0)
        {
          if (v65 >= v36)
            v65 %= v36;
        }
        else
        {
          v65 &= v36 - 1;
        }
        v64 = (uint64_t *)(v890 + 8 * v65);
        goto LABEL_104;
      }
LABEL_105:
      ++v894;
LABEL_106:
      v66 = *(_QWORD **)(v39 + 32);
      v67 = *(_QWORD *)(v39 + 40);
      if ((unint64_t)v66 < v67)
      {
        if (v66)
        {
          v68 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          *v66 = v68;
        }
        v15 = v66 + 1;
        goto LABEL_9;
      }
      v69 = *(_QWORD *)(v39 + 24);
      v70 = ((uint64_t)v66 - v69) >> 3;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 61)
        abort();
      v72 = v67 - v69;
      if (v72 >> 2 > v71)
        v71 = v72 >> 2;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        v74 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 + 48) + 16))(*(_QWORD *)(v39 + 48), 8 * v73, 8);
        v75 = (_QWORD *)(v74 + 8 * v70);
        v76 = v74 + 8 * v73;
        if (v74)
        {
          v77 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          *v75 = v77;
        }
      }
      else
      {
        v76 = 0;
        v75 = (_QWORD *)(8 * v70);
      }
      v15 = v75 + 1;
      v78 = *(_QWORD **)(v39 + 24);
      v79 = *(_QWORD *)(v39 + 32);
      if ((_QWORD *)v79 == v78)
      {
        *(_QWORD *)(v39 + 24) = v75;
        *(_QWORD *)(v39 + 32) = v15;
        v85 = *(_QWORD *)(v39 + 40);
        *(_QWORD *)(v39 + 40) = v76;
        if (!v79)
          goto LABEL_9;
LABEL_135:
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v39 + 48) + 40))(*(_QWORD *)(v39 + 48), v79, v85 - v79);
        goto LABEL_9;
      }
      v80 = v79 - (_QWORD)v78 - 8;
      if (v80 > 0x47
        && ((v81 = v80 >> 3, v79 - 8 * v81 - 8 >= (unint64_t)v75) || (unint64_t)&v75[-v81 - 1] >= v79))
      {
        v89 = v81 + 1;
        v90 = (v81 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v82 = (_QWORD *)(v79 - 8 * v90);
        v91 = v75 - 2;
        v92 = (__int128 *)(v79 - 32);
        v93 = v90;
        do
        {
          v95 = *v92;
          v94 = v92[1];
          *v92 = 0uLL;
          v92[1] = 0uLL;
          v92 -= 2;
          *(v91 - 1) = v95;
          *v91 = v94;
          v91 -= 2;
          v93 -= 4;
        }
        while (v93);
        v75 -= v90;
        if (v89 == v90)
          goto LABEL_125;
      }
      else
      {
        v82 = *(_QWORD **)(v39 + 32);
      }
      do
      {
        v83 = *--v82;
        *v82 = 0;
        *--v75 = v83;
      }
      while (v82 != v78);
LABEL_125:
      v79 = *(_QWORD *)(v39 + 24);
      v84 = *(_QWORD **)(v39 + 32);
      *(_QWORD *)(v39 + 24) = v75;
      *(_QWORD *)(v39 + 32) = v15;
      v85 = *(_QWORD *)(v39 + 40);
      *(_QWORD *)(v39 + 40) = v76;
      while (v84 != (_QWORD *)v79)
      {
        v86 = *--v84;
        v8 = v86;
        *v84 = 0;
        if (v86)
        {
          (**(void (***)(unint64_t))v8)(v8);
          {
            v88 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v88, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
        }
      }
      v10 = a7;
      if (v79)
        goto LABEL_135;
LABEL_9:
      *(_QWORD *)(v39 + 32) = v15;
      v7 += 8;
    }
    v98 = v854;
    v99 = operator new();
    v100 = 0uLL;
    *(_OWORD *)(v99 + 144) = 0u;
    *(_QWORD *)v99 = &off_1E42AF1A8;
    *(_QWORD *)(v99 + 8) = 0;
    *(_QWORD *)(v99 + 64) = 0;
    *(_QWORD *)(v99 + 40) = 0;
    *(_QWORD *)(v99 + 48) = 0;
    *(_QWORD *)(v99 + 32) = "";
    *(_DWORD *)(v99 + 56) = 0;
    *(_DWORD *)(v99 + 72) = 1065353216;
    *(_OWORD *)(v99 + 80) = 0u;
    *(_OWORD *)(v99 + 96) = 0u;
    *(int64x2_t *)(v99 + 112) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v99 + 128) = 0;
    *(_QWORD *)(v99 + 16) = &off_1E42AF548;
    *(_BYTE *)(v99 + 136) = 1;
    *(_OWORD *)(v99 + 160) = 0u;
    *(_OWORD *)(v99 + 176) = 0u;
    if ((v101 & 1) == 0)
    {
      v100 = 0uLL;
      if (v335)
      {
        v336 = operator new();
        *(_QWORD *)(v336 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v336 + 24) = "GeoGL";
        *(_OWORD *)(v336 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v336 = &off_1E42B5668;
        *(_QWORD *)(v336 + 8) = "GeoGL";
        *(_OWORD *)(v336 + 72) = 0u;
        *(_OWORD *)(v336 + 88) = 0u;
        *(_OWORD *)(v336 + 104) = 0u;
        *(_OWORD *)(v336 + 120) = 0u;
        *(_OWORD *)(v336 + 136) = 0u;
        *(_OWORD *)(v336 + 152) = 0u;
        *(_OWORD *)(v336 + 168) = 0u;
        *(_OWORD *)(v336 + 184) = 0u;
        *(_OWORD *)(v336 + 200) = 0u;
        *(_OWORD *)(v336 + 216) = 0u;
        *(_OWORD *)(v336 + 232) = 0u;
        *(_QWORD *)(v336 + 248) = 0;
        *(_OWORD *)(v336 + 56) = 0u;
        v337 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v336 + 56), 0);
        if ((_DWORD)v337)
          geo::read_write_lock::logFailure(v337, (uint64_t)"initialization", v338);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v336 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v336 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v336;
        v100 = 0uLL;
        v98 = v854;
      }
    }
    *(_QWORD *)(v99 + 192) = ggl::Allocator::instance(void)::alloc;
    *(_OWORD *)(v99 + 200) = v100;
    *(_OWORD *)(v99 + 216) = v100;
    *(_QWORD *)(v99 + 232) = 0;
    *(_QWORD *)(v99 + 240) = 32;
    v102 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v102 = 0;
    v102[1] = 0;
    *(_QWORD *)(v99 + 224) = v102;
    *(_QWORD *)(v99 + 232) = v102;
    *(_QWORD *)(v99 + 256) = 0;
    *(_QWORD *)(v99 + 264) = 0;
    *(_QWORD *)(v99 + 248) = 0;
    *(_BYTE *)(v99 + 272) = 1;
    *(_QWORD *)v99 = &off_1E428C760;
    *(_QWORD *)(v99 + 280) = v847[2];
    v103 = v847[3];
    *(_QWORD *)(v99 + 288) = v103;
    if (v103)
    {
      v104 = (unint64_t *)(v103 + 8);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    *(_QWORD *)(v99 + 296) = v847[4];
    v106 = v847[5];
    *(_QWORD *)(v99 + 304) = v106;
    if (v106)
    {
      v107 = (unint64_t *)(v106 + 8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    v109 = v847[6];
    *(_BYTE *)(v99 + 320) = *((_BYTE *)v847 + 56);
    *(_QWORD *)(v99 + 312) = v109;
    *(_QWORD *)v99 = &off_1E4297060;
    *(_QWORD *)(v99 + 328) = 0;
    v110 = (_QWORD *)operator new();
    if ((v111 & 1) == 0
    {
      if ((v340 & 1) == 0
      {
        if ((v342 & 1) == 0
        {
          ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinciTraffic::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::attributesReflection(void)::r;
        *(_QWORD *)algn_1EE585290 = 1;
      }
      ggl::DaVinciTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::typedReflection(void)::r;
      unk_1EE585210 = &ggl::DaVinciTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
      qword_1EE585218 = 0;
      if ((v341 & 1) == 0
      {
        ggl::DaVinciTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(_QWORD *)algn_1EE585258 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1EE585260 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
        unk_1EE585268 = ggl::DaVinciTraffic::Style::reflection(void)::reflection;
      }
      qword_1EE585220 = (uint64_t)&ggl::DaVinciTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
      unk_1EE585228 = xmmword_19FFB2F50;
      v98 = v854;
    }
    ggl::PipelineSetup::PipelineSetup((uint64_t)v110, (uint64_t)&ggl::DaVinciTraffic::BasePipelineSetup::typedReflection(void)::ref);
    *v110 = &off_1E42B69F8;
    v112 = *(_QWORD *)(v99 + 328);
    *(_QWORD *)(v99 + 328) = v110;
    if (v112)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
      v110 = *(_QWORD **)(v99 + 328);
    }
    v8 = (unint64_t)operator new(0xE8uLL);
    *(_QWORD *)(v8 + 8) = 0;
    v113 = (unint64_t *)(v8 + 8);
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = &off_1E42E14B0;
    v114 = ggl::BufferData::BufferData(v8 + 24, qword_1EE5554D0, 2, 1, 6, 1);
    *(_QWORD *)(v8 + 224) = ggl::DaVinciTraffic::Style::reflection(void)::reflection;
    *(_QWORD *)(v8 + 24) = &off_1E42B8F70;
    v115 = v110[8];
    *(_QWORD *)(v115 + 48) = v114;
    *(_QWORD *)(v115 + 56) = 0;
    v116 = v110[20];
    do
      v117 = __ldxr(v113);
    while (__stxr(v117 + 1, v113));
    v118 = *(std::__shared_weak_count **)(v116 + 56);
    *(_QWORD *)(v116 + 48) = v114;
    *(_QWORD *)(v116 + 56) = v8;
    if (v118)
    {
      p_shared_owners = (unint64_t *)&v118->__shared_owners_;
      do
        v120 = __ldaxr(p_shared_owners);
      while (__stlxr(v120 - 1, p_shared_owners));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    do
      v121 = __ldaxr(v113);
    while (__stlxr(v121 - 1, v113));
    if (!v121)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v8 + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
    v122 = *(_QWORD *)(v99 + 328);
    v123 = *(uint64_t **)(v122 + 64);
    v123[1] = 0;
    v124 = *a4;
    *v123 = *a4;
    v125 = *(_QWORD **)(v122 + 160);
    v126 = a4[1];
    if (v126)
    {
      v127 = (unint64_t *)(v126 + 8);
      do
        v128 = __ldxr(v127);
      while (__stxr(v128 + 1, v127));
    }
    v129 = (std::__shared_weak_count *)v125[1];
    *v125 = v124;
    v125[1] = v126;
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = *(_QWORD *)(v99 + 328);
    v133 = *(_QWORD *)(v132 + 64);
    *(_QWORD *)(v133 + 24) = 0;
    v134 = *a5;
    *(_QWORD *)(v133 + 16) = *a5;
    v135 = *(_QWORD *)(v132 + 160);
    v136 = a5[1];
    if (v136)
    {
      v137 = (unint64_t *)(v136 + 8);
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    v139 = *(std::__shared_weak_count **)(v135 + 24);
    *(_QWORD *)(v135 + 16) = v134;
    *(_QWORD *)(v135 + 24) = v136;
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    *(_QWORD *)(v99 + 48) = *(_QWORD *)(v99 + 328);
    if (v98 < v843)
    {
      *v98 = v99;
      v142 = v98 + 1;
      goto LABEL_211;
    }
    v8 = (char *)v98 - (char *)v11;
    v7 = v98 - v11;
    v143 = v7 + 1;
    if ((v7 + 1) >> 61)
      abort();
    if (((char *)v843 - (char *)v11) >> 2 > v143)
      v143 = ((char *)v843 - (char *)v11) >> 2;
    if ((unint64_t)((char *)v843 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
    {
      if (v144 >> 61)
        goto LABEL_887;
      v145 = operator new(8 * v144);
    }
    else
    {
      v145 = 0;
    }
    v146 = (uint64_t *)&v145[8 * v7];
    *v146 = v99;
    v147 = v146 + 1;
    if (v98 != v11)
    {
      v148 = (char *)(v98 - 1) - (char *)v11;
      if (v148 < 0x58)
      {
        v149 = v98;
        goto LABEL_207;
      }
      if ((unint64_t)((char *)v11 - v145) < 0x20)
      {
        v149 = v98;
        goto LABEL_207;
      }
      v150 = (v148 >> 3) + 1;
      v149 = &v98[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
      v151 = &v145[8 * v7 - 16];
      v152 = v98 - 2;
      v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v154 = *(_OWORD *)v152;
        *(v151 - 1) = *((_OWORD *)v152 - 1);
        *v151 = v154;
        v151 -= 2;
        v152 -= 4;
        v153 -= 4;
      }
      while (v153);
      v146 -= v150 & 0x3FFFFFFFFFFFFFFCLL;
      if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_207:
          v155 = *--v149;
          *--v146 = v155;
        }
        while (v149 != v11);
      }
    }
    v843 = (uint64_t *)&v145[8 * v144];
    if (v11)
      operator delete(v11);
    v11 = v146;
    v142 = v147;
LABEL_211:
    v854 = v142;
    v869 = v11;
    v866 = v892;
    if (v892)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      while (1)
      {
        v159 = operator new();
        *(_QWORD *)(v159 + 96) = 0;
        *(_OWORD *)(v159 + 64) = 0u;
        *(_OWORD *)(v159 + 80) = 0u;
        *(_OWORD *)(v159 + 32) = 0u;
        *(_OWORD *)(v159 + 48) = 0u;
        *(_OWORD *)v159 = 0u;
        *(_OWORD *)(v159 + 16) = 0u;
        *(_BYTE *)(v159 + 48) = 1;
        *(_QWORD *)(v159 + 56) = 0;
        *(_QWORD *)(v159 + 64) = 0;
        *(_QWORD *)(v159 + 72) = 0;
        {
          v279 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v279, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v159 + 80) = mdm::Allocator::instance(void)::alloc;
        *(_DWORD *)(v159 + 96) = 0;
        __p.__begin_ = (std::vector<unsigned int>::pointer)v159;
        if (v158 < v157)
        {
          __p.__begin_ = 0;
          *v158 = v159;
          v161 = v158 + 1;
          begin = __p.__begin_;
          if (!__p.__begin_)
            goto LABEL_270;
LABEL_258:
          v193 = (_QWORD *)*((_QWORD *)begin + 7);
          if (v193)
          {
            v194 = (_QWORD *)*((_QWORD *)begin + 8);
            v195 = *((_QWORD *)begin + 7);
            if (v194 != v193)
            {
              do
              {
                v196 = *--v194;
                v8 = v196;
                *v194 = 0;
                if (v196)
                {
                  (**(void (***)(unint64_t, uint64_t))v8)(v8, v195);
                  if ((v197 & 1) == 0
                  {
                    v198 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
                }
              }
              while (v194 != v193);
              v195 = *((_QWORD *)begin + 7);
            }
            *((_QWORD *)begin + 8) = v193;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)begin + 10) + 40))(*((_QWORD *)begin + 10), v195, *((_QWORD *)begin + 9) - v195);
          }
          MEMORY[0x1A1AF4E00](begin, 0x1020C4010FC18DELL);
          goto LABEL_270;
        }
        v163 = v157;
        v164 = (char *)v158 - (char *)v156;
        v165 = v158 - v156;
        v166 = v165 + 1;
        if ((unint64_t)(v165 + 1) >> 61)
          abort();
        v167 = (char *)v163 - (char *)v156;
        v168 = ((char *)v163 - (char *)v156) >> 2;
        if (v168 > v166)
          v166 = v168;
        v169 = v167 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v166;
        if (v169)
        {
          if (v169 >> 61)
            goto LABEL_887;
          v8 = (unint64_t)operator new(8 * v169);
        }
        else
        {
          v8 = 0;
        }
        v7 = v8 + 8 * v165;
        __p.__begin_ = 0;
        *(_QWORD *)v7 = v159;
        v161 = (uint64_t *)(v7 + 8);
        v170 = (char *)v158 - (char *)v156;
        if (v158 != v156)
          break;
LABEL_255:
        v157 = (uint64_t *)(v8 + 8 * v169);
        if (v156)
          operator delete(v156);
        v156 = (uint64_t *)v7;
        begin = __p.__begin_;
        if (__p.__begin_)
          goto LABEL_258;
LABEL_270:
        *(_DWORD *)(*(v161 - 1) + 96) = *(_DWORD *)(v866 + 16);
        v199 = *(unint64_t **)(v866 + 24);
        v875 = *(unint64_t **)(v866 + 32);
        if (v199 != v875)
        {
          v200 = 0;
          while (1)
          {
            v8 = *v199;
            v201 = *(_QWORD *)(*v199 + 88);
            if ((unint64_t)(v201 + v200) <= 0x5999)
            {
              v7 = *(v161 - 1);
              goto LABEL_335;
            }
            v202 = operator new();
            *(_QWORD *)(v202 + 96) = 0;
            *(_OWORD *)(v202 + 64) = 0u;
            *(_OWORD *)(v202 + 80) = 0u;
            *(_OWORD *)(v202 + 32) = 0u;
            *(_OWORD *)(v202 + 48) = 0u;
            *(_OWORD *)v202 = 0u;
            *(_OWORD *)(v202 + 16) = 0u;
            *(_BYTE *)(v202 + 48) = 1;
            *(_QWORD *)(v202 + 56) = 0;
            *(_QWORD *)(v202 + 64) = 0;
            *(_QWORD *)(v202 + 72) = 0;
            {
              v278 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v278, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v202 + 80) = mdm::Allocator::instance(void)::alloc;
            *(_DWORD *)(v202 + 96) = 0;
            __p.__begin_ = (std::vector<unsigned int>::pointer)v202;
            if (v161 >= v157)
              break;
            __p.__begin_ = 0;
            *v161++ = v202;
            v204 = __p.__begin_;
            if (__p.__begin_)
              goto LABEL_322;
LABEL_334:
            v200 = 0;
            v7 = *(v161 - 1);
            *(_DWORD *)(v7 + 96) = *(_DWORD *)(v866 + 16);
            v8 = *v199;
            v201 = *(_QWORD *)(*v199 + 88);
LABEL_335:
            *v199 = 0;
            v246 = *(unint64_t **)(v7 + 64);
            v247 = *(_QWORD *)(v7 + 72);
            if ((unint64_t)v246 < v247)
            {
              if (v246)
              {
                *v246 = v8;
                v8 = 0;
              }
              v248 = v246 + 1;
              goto LABEL_372;
            }
            v249 = *(_QWORD *)(v7 + 56);
            v250 = ((uint64_t)v246 - v249) >> 3;
            v251 = v250 + 1;
            if ((unint64_t)(v250 + 1) >> 61)
              abort();
            v252 = v247 - v249;
            if (v252 >> 2 > v251)
              v251 = v252 >> 2;
            if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF8)
              v253 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v253 = v251;
            if (v253)
            {
              v254 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 80) + 16))(*(_QWORD *)(v7 + 80), 8 * v253, 8);
              v255 = (unint64_t *)(v254 + 8 * v250);
              v256 = v254 + 8 * v253;
              if (v254)
              {
                *v255 = v8;
                v8 = 0;
              }
            }
            else
            {
              v256 = 0;
              v255 = (unint64_t *)(8 * v250);
            }
            v248 = v255 + 1;
            v257 = *(_QWORD **)(v7 + 56);
            v258 = *(_QWORD *)(v7 + 64);
            if ((_QWORD *)v258 == v257)
            {
              *(_QWORD *)(v7 + 56) = v255;
              *(_QWORD *)(v7 + 64) = v248;
              v873 = *(_QWORD *)(v7 + 72);
              *(_QWORD *)(v7 + 72) = v256;
              if (!v258)
                goto LABEL_372;
              goto LABEL_371;
            }
            v259 = v258 - (_QWORD)v257 - 8;
            v864 = v156;
            if (v259 <= 0x47
              || ((v260 = v259 >> 3, v258 - 8 * v260 - 8 < (unint64_t)v255)
                ? (_CF = (unint64_t)&v255[-v260 - 1] >= v258)
                : (_CF = 1),
                  !_CF))
            {
              v264 = *(_QWORD **)(v7 + 64);
              do
              {
LABEL_361:
                v270 = *--v264;
                *v264 = 0;
                *--v255 = v270;
              }
              while (v264 != v257);
              goto LABEL_362;
            }
            v262 = v260 + 1;
            v263 = (v260 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v264 = (_QWORD *)(v258 - 8 * v263);
            v265 = v255 - 2;
            v266 = (__int128 *)(v258 - 32);
            v267 = v263;
            do
            {
              v269 = *v266;
              v268 = v266[1];
              *v266 = 0uLL;
              v266[1] = 0uLL;
              v266 -= 2;
              *((_OWORD *)v265 - 1) = v269;
              *(_OWORD *)v265 = v268;
              v265 -= 4;
              v267 -= 4;
            }
            while (v267);
            v255 -= v263;
            if (v262 != v263)
              goto LABEL_361;
LABEL_362:
            v258 = *(_QWORD *)(v7 + 56);
            v271 = *(_QWORD **)(v7 + 64);
            *(_QWORD *)(v7 + 56) = v255;
            *(_QWORD *)(v7 + 64) = v248;
            v873 = *(_QWORD *)(v7 + 72);
            *(_QWORD *)(v7 + 72) = v256;
            if (v271 == (_QWORD *)v258)
            {
              v156 = v864;
              if (!v258)
                goto LABEL_372;
            }
            else
            {
              v858 = v157;
              do
              {
                v273 = (void (***)(_QWORD))*--v271;
                v272 = v273;
                *v271 = 0;
                if (v273)
                {
                  (**v272)(v272);
                  if ((v274 & 1) == 0
                  {
                    v275 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v275, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v272, 128);
                }
              }
              while (v271 != (_QWORD *)v258);
              v156 = v864;
              v157 = v858;
              if (!v258)
                goto LABEL_372;
            }
LABEL_371:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v7 + 80) + 40))(*(_QWORD *)(v7 + 80), v258, v873 - v258);
LABEL_372:
            *(_QWORD *)(v7 + 64) = v248;
            if (v8)
            {
              (**(void (***)(unint64_t))v8)(v8);
              {
                v277 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v277, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
            }
            v200 += v201;
            if (++v199 == v875)
              goto LABEL_213;
          }
          v205 = v157;
          v206 = (char *)v161 - (char *)v156;
          v207 = v161 - v156;
          v208 = v207 + 1;
          if ((unint64_t)(v207 + 1) >> 61)
            abort();
          v209 = (char *)v205 - (char *)v156;
          v210 = ((char *)v205 - (char *)v156) >> 2;
          if (v210 > v208)
            v208 = v210;
          if (v209 >= 0x7FFFFFFFFFFFFFF8)
            v211 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v211 = v208;
          if (v211)
          {
            if (v211 >> 61)
              goto LABEL_887;
            v212 = (char *)operator new(8 * v211);
          }
          else
          {
            v212 = 0;
          }
          v213 = (uint64_t *)&v212[8 * v207];
          __p.__begin_ = 0;
          *v213 = v202;
          v872 = v213 + 1;
          v214 = (char *)v161 - (char *)v156;
          if (v161 != v156)
          {
            v215 = v214 - 8;
            if ((unint64_t)(v214 - 8) < 0x138)
            {
              v216 = v161;
              goto LABEL_293;
            }
            v218 = v215 & 0xFFFFFFFFFFFFFFF8;
            if ((uint64_t *)((char *)v161 - (v215 & 0xFFFFFFFFFFFFFFF8) - 8) > v161 - 1)
            {
              v216 = v161;
              goto LABEL_293;
            }
            if (&v212[v206 - 8 - v218] > &v212[v206 - 8])
            {
              v216 = v161;
              goto LABEL_293;
            }
            v219 = v215 >> 3;
            if (&v161[-v219 - 1] < v213)
            {
              v220 = (unint64_t)&v212[v206 - v218 - 8];
              v216 = v161;
              if (v220 < (unint64_t)v161)
                goto LABEL_898;
            }
            v221 = v219 + 1;
            v216 = &v161[-(v221 & 0x3FFFFFFFFFFFFFFCLL)];
            v222 = &v212[8 * v207 - 16];
            v223 = v161 - 4;
            v224 = v221 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v226 = *(_OWORD *)v223;
              v225 = *((_OWORD *)v223 + 1);
              *(_OWORD *)v223 = 0uLL;
              *((_OWORD *)v223 + 1) = 0uLL;
              v223 -= 4;
              *((_OWORD *)v222 - 1) = v226;
              *(_OWORD *)v222 = v225;
              v222 -= 32;
              v224 -= 4;
            }
            while (v224);
            v213 -= v221 & 0x3FFFFFFFFFFFFFFCLL;
            if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_898:
              do
              {
LABEL_293:
                v217 = *--v216;
                *v216 = 0;
                *--v213 = v217;
              }
              while (v216 != v156);
            }
            do
            {
              v229 = *--v161;
              v228 = v229;
              *v161 = 0;
              if (v229)
              {
                v230 = *(_QWORD **)(v228 + 56);
                if (v230)
                {
                  v231 = *(_QWORD **)(v228 + 64);
                  v227 = *(_QWORD *)(v228 + 56);
                  if (v231 != v230)
                  {
                    do
                    {
                      v234 = (void (***)(_QWORD, uint64_t))*--v231;
                      v233 = v234;
                      *v231 = 0;
                      if (v234)
                      {
                        (**v233)(v233, v227);
                        if ((v235 & 1) == 0
                        {
                          v236 = operator new();
                          *(_QWORD *)(v236 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v236 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v236 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v236 = &off_1E42B5668;
                          *(_QWORD *)(v236 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v236 + 72) = 0u;
                          *(_OWORD *)(v236 + 88) = 0u;
                          *(_OWORD *)(v236 + 104) = 0u;
                          *(_OWORD *)(v236 + 120) = 0u;
                          *(_OWORD *)(v236 + 136) = 0u;
                          *(_OWORD *)(v236 + 152) = 0u;
                          *(_OWORD *)(v236 + 168) = 0u;
                          *(_OWORD *)(v236 + 184) = 0u;
                          *(_OWORD *)(v236 + 200) = 0u;
                          *(_OWORD *)(v236 + 216) = 0u;
                          *(_OWORD *)(v236 + 232) = 0u;
                          *(_QWORD *)(v236 + 248) = 0;
                          v863 = v236;
                          *(_OWORD *)(v236 + 56) = 0u;
                          v237 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v236 + 56), 0);
                          if ((_DWORD)v237)
                            geo::read_write_lock::logFailure(v237, (uint64_t)"initialization", v238);
                          v232 = malloc_create_zone(0, 0);
                          *(_QWORD *)(v863 + 48) = v232;
                          malloc_set_zone_name(v232, "VectorKitLabels");
                          *(_QWORD *)(v863 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v863;
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v233, 128);
                      }
                    }
                    while (v231 != v230);
                    v227 = *(_QWORD *)(v228 + 56);
                  }
                  *(_QWORD *)(v228 + 64) = v230;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v228 + 80) + 40))(*(_QWORD *)(v228 + 80), v227, *(_QWORD *)(v228 + 72) - v227);
                }
                MEMORY[0x1A1AF4E00](v228, 0x1020C4010FC18DELL);
              }
            }
            while (v161 != v156);
          }
          v157 = (uint64_t *)&v212[8 * v211];
          if (v156)
            operator delete(v156);
          v156 = v213;
          v161 = v872;
          v204 = __p.__begin_;
          if (!__p.__begin_)
            goto LABEL_334;
LABEL_322:
          v239 = (_QWORD *)*((_QWORD *)v204 + 7);
          if (v239)
          {
            v240 = (_QWORD *)*((_QWORD *)v204 + 8);
            v241 = *((_QWORD *)v204 + 7);
            if (v240 != v239)
            {
              do
              {
                v243 = (void (***)(_QWORD, uint64_t))*--v240;
                v242 = v243;
                *v240 = 0;
                if (v243)
                {
                  (**v242)(v242, v241);
                  if ((v244 & 1) == 0
                  {
                    v245 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v245, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v242, 128);
                }
              }
              while (v240 != v239);
              v241 = *((_QWORD *)v204 + 7);
            }
            *((_QWORD *)v204 + 8) = v239;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v204 + 10) + 40))(*((_QWORD *)v204 + 10), v241, *((_QWORD *)v204 + 9) - v241);
          }
          MEMORY[0x1A1AF4E00](v204, 0x1020C4010FC18DELL);
          goto LABEL_334;
        }
LABEL_213:
        v158 = v161;
        v11 = v869;
        v866 = *(_QWORD *)v866;
        if (!v866)
          goto LABEL_389;
      }
      v171 = v170 - 8;
      if ((unint64_t)(v170 - 8) >= 0x138)
      {
        v174 = v171 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v158 - (v171 & 0xFFFFFFFFFFFFFFF8) - 8) > v158 - 1)
        {
          v172 = v158;
        }
        else if (v8 - 8 + v164 - v174 > v8 - 8 + v164)
        {
          v172 = v158;
        }
        else
        {
          v175 = v171 >> 3;
          if ((unint64_t)&v158[-v175 - 1] >= v7
            || (v176 = v8 - 8 + v164 - v174, v172 = v158, v176 >= (unint64_t)v158))
          {
            v177 = v175 + 1;
            v172 = &v158[-(v177 & 0x3FFFFFFFFFFFFFFCLL)];
            v178 = (_OWORD *)(v8 + 8 * v165 - 16);
            v179 = v158 - 4;
            v180 = v177 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v182 = *(_OWORD *)v179;
              v181 = *((_OWORD *)v179 + 1);
              *(_OWORD *)v179 = 0uLL;
              *((_OWORD *)v179 + 1) = 0uLL;
              v179 -= 4;
              *(v178 - 1) = v182;
              *v178 = v181;
              v178 -= 2;
              v180 -= 4;
            }
            while (v180);
            v7 -= 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
            if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_245:
                v185 = *--v158;
                v184 = v185;
                *v158 = 0;
                if (v185)
                {
                  v186 = *(_QWORD **)(v184 + 56);
                  if (v186)
                  {
                    v187 = v156;
                    v188 = *(_QWORD **)(v184 + 64);
                    v183 = *(_QWORD *)(v184 + 56);
                    if (v188 != v186)
                    {
                      do
                      {
                        v190 = (void (***)(_QWORD, uint64_t))*--v188;
                        v189 = v190;
                        *v188 = 0;
                        if (v190)
                        {
                          (**v189)(v189, v183);
                          if ((v191 & 1) == 0
                          {
                            v192 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v192, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v189, 128);
                        }
                      }
                      while (v188 != v186);
                      v183 = *(_QWORD *)(v184 + 56);
                    }
                    *(_QWORD *)(v184 + 64) = v186;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v184 + 80) + 40))(*(_QWORD *)(v184 + 80), v183, *(_QWORD *)(v184 + 72) - v183);
                    v156 = v187;
                  }
                  MEMORY[0x1A1AF4E00](v184, 0x1020C4010FC18DELL);
                }
              }
              while (v158 != v156);
              goto LABEL_255;
            }
          }
        }
      }
      else
      {
        v172 = v158;
      }
      do
      {
        v173 = *--v172;
        *v172 = 0;
        *(_QWORD *)(v7 - 8) = v173;
        v7 -= 8;
      }
      while (v172 != v156);
      goto LABEL_245;
    }
    v161 = 0;
    v156 = 0;
LABEL_389:
    v280 = *(v854 - 1);
    v281 = *(_QWORD *)(v280 + 248);
    v282 = *(int8x16_t **)(v280 + 256);
    v283 = 126 - 2 * __clz(((uint64_t)v282->i64 - v281) >> 3);
    if (v282 == (int8x16_t *)v281)
      v284 = 0;
    else
      v284 = v283;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v281, v282, v284, 1);
    v285 = (unint64_t *)v156;
    if (v156 == v161)
    {
      if (!v161)
        goto LABEL_4;
LABEL_3:
      operator delete(v156);
      goto LABEL_4;
    }
    do
    {
      v287 = (_QWORD *)*(v854 - 1);
      v8 = *v285;
      *v285 = 0;
      *(_QWORD *)v884 = v8;
      v289 = (unint64_t *)v287[32];
      v288 = v287[33];
      if ((unint64_t)v289 < v288)
      {
        *(_QWORD *)v884 = 0;
        *v289 = v8;
        v7 = (unint64_t)(v289 + 1);
        goto LABEL_439;
      }
      v290 = v287[31];
      v291 = (char *)v289 - v290;
      v292 = ((uint64_t)v289 - v290) >> 3;
      if ((unint64_t)(v292 + 1) >> 61)
        abort();
      v293 = v288 - v290;
      v294 = v293 >> 2;
      if (v293 >> 2 <= (unint64_t)(v292 + 1))
        v294 = v292 + 1;
      if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
        v295 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v295 = v294;
      if (v295)
      {
        if (v295 >> 61)
          goto LABEL_887;
        v296 = (char *)operator new(8 * v295);
      }
      else
      {
        v296 = 0;
      }
      v297 = (unint64_t *)&v296[8 * v292];
      v298 = &v296[8 * v295];
      *(_QWORD *)v884 = 0;
      *v297 = v8;
      v7 = (unint64_t)(v297 + 1);
      v299 = v287[31];
      v8 = v287[32];
      if (v8 == v299)
      {
        v287[31] = v297;
        v287[32] = v7;
        v287[33] = v298;
        if (v8)
          goto LABEL_438;
      }
      else
      {
        v300 = v8 - v299 - 8;
        v876 = v285;
        if (v300 <= 0x77)
          goto LABEL_899;
        if (v8 - (v300 & 0xFFFFFFFFFFFFFFF8) - 8 < (unint64_t)v297
          && &v291[(_QWORD)v296 - (v300 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v8)
        {
          goto LABEL_899;
        }
        v302 = (v300 >> 3) + 1;
        v303 = &v296[8 * v292 - 16];
        v304 = (__int128 *)(v8 - 32);
        v305 = v302 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v307 = *v304;
          v306 = v304[1];
          *v304 = 0uLL;
          v304[1] = 0uLL;
          v304 -= 2;
          *((_OWORD *)v303 - 1) = v307;
          *(_OWORD *)v303 = v306;
          v303 -= 32;
          v305 -= 4;
        }
        while (v305);
        v297 -= v302 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
        if (v302 != (v302 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_899:
          do
          {
            v308 = *(_QWORD *)(v8 - 8);
            v8 -= 8;
            *(_QWORD *)v8 = 0;
            *--v297 = v308;
          }
          while (v8 != v299);
        }
        v8 = v287[31];
        v309 = (_QWORD *)v287[32];
        v287[31] = v297;
        v287[32] = v7;
        v287[33] = v298;
        while (v309 != (_QWORD *)v8)
        {
          v312 = *--v309;
          v311 = v312;
          *v309 = 0;
          if (v312)
          {
            v313 = v156;
            v314 = *(_QWORD **)(v311 + 56);
            if (v314)
            {
              v315 = *(_QWORD **)(v311 + 64);
              v310 = *(_QWORD *)(v311 + 56);
              if (v315 != v314)
              {
                do
                {
                  v317 = (void (***)(_QWORD, uint64_t))*--v315;
                  v316 = v317;
                  *v315 = 0;
                  if (v317)
                  {
                    (**v316)(v316, v310);
                    if ((v318 & 1) == 0
                    {
                      v319 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v319, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v316, 128);
                  }
                }
                while (v315 != v314);
                v310 = *(_QWORD *)(v311 + 56);
              }
              *(_QWORD *)(v311 + 64) = v314;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v311 + 80) + 40))(*(_QWORD *)(v311 + 80), v310, *(_QWORD *)(v311 + 72) - v310);
              v11 = v869;
            }
            MEMORY[0x1A1AF4E00](v311, 0x1020C4010FC18DELL);
            v156 = v313;
          }
        }
        v285 = v876;
        if (v8)
LABEL_438:
          operator delete((void *)v8);
      }
LABEL_439:
      v287[32] = v7;
      v320 = *(_QWORD *)v884;
      *(_QWORD *)v884 = 0;
      if (v320)
      {
        v321 = *(_QWORD *)(v320 + 56);
        if (v321)
        {
          v7 = *(_QWORD *)(v320 + 64);
          v286 = *(_QWORD *)(v320 + 56);
          if (v7 != v321)
          {
            do
            {
              v322 = *(_QWORD *)(v7 - 8);
              v7 -= 8;
              v8 = v322;
              *(_QWORD *)v7 = 0;
              if (v322)
              {
                (**(void (***)(unint64_t, uint64_t))v8)(v8, v286);
                {
                  v324 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v324, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
              }
            }
            while (v7 != v321);
            v286 = *(_QWORD *)(v320 + 56);
          }
          *(_QWORD *)(v320 + 64) = v321;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v320 + 80) + 40))(*(_QWORD *)(v320 + 80), v286, *(_QWORD *)(v320 + 72) - v286);
        }
        MEMORY[0x1A1AF4E00](v320, 0x1020C4010FC18DELL);
      }
      ++v285;
    }
    while (v285 != (unint64_t *)v161);
    if (v156)
    {
      do
      {
        v327 = *--v161;
        v326 = v327;
        *v161 = 0;
        if (v327)
        {
          v328 = *(_QWORD **)(v326 + 56);
          if (v328)
          {
            v329 = *(_QWORD **)(v326 + 64);
            v325 = *(_QWORD *)(v326 + 56);
            if (v329 != v328)
            {
              do
              {
                v330 = *--v329;
                v8 = v330;
                *v329 = 0;
                if (v330)
                {
                  (**(void (***)(unint64_t, uint64_t))v8)(v8, v325);
                  if ((v331 & 1) == 0
                  {
                    v332 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v332, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
                }
              }
              while (v329 != v328);
              v325 = *(_QWORD *)(v326 + 56);
            }
            *(_QWORD *)(v326 + 64) = v328;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v326 + 80) + 40))(*(_QWORD *)(v326 + 80), v325, *(_QWORD *)(v326 + 72) - v325);
          }
          MEMORY[0x1A1AF4E00](v326, 0x1020C4010FC18DELL);
        }
      }
      while (v161 != v156);
      goto LABEL_3;
    }
LABEL_4:
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v890);
    v10 = a7;
    v847 = (uint64_t *)*v847;
    if (v847)
      continue;
    break;
  }
LABEL_487:
  v343 = a6[24];
  if (a6[24])
  {
    LOBYTE(v7) = a6[1];
    v344 = *a6;
    v9 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v344 = 0;
  }
  *a1 = &off_1E42AF3E8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v345 = (char *)v854 - (char *)v11;
  if (v854 == v11)
  {
    v837 = 0;
    v349 = 0;
    v347 = a1;
  }
  else
  {
    if (v345 < 0)
      abort();
    v346 = operator new((char *)v854 - (char *)v11);
    v347 = a1;
    a1[1] = v346;
    a1[2] = v346;
    v348 = (char *)&v346[v345 >> 3];
    a1[3] = v348;
    v349 = v346;
    memcpy(v346, v11, v345);
    v837 = v348;
    a1[2] = v348;
  }
  *((_OWORD *)v347 + 2) = 0u;
  *((_OWORD *)v347 + 3) = 0u;
  *((_BYTE *)v347 + 64) = v10;
  v347[9] = 0;
  v848 = (gdc::GlobeTileGrid **)(v347 + 9);
  *((_BYTE *)v347 + 80) = 0;
  v350 = (const QuadTile *)(v347 + 10);
  v834 = (void **)(v347 + 4);
  *((_BYTE *)v347 + 104) = 0;
  if (v343)
  {
    *((_BYTE *)v347 + 80) = v344;
    *((_BYTE *)v347 + 81) = v7;
    *(_QWORD *)((char *)v347 + 84) = v9;
    *((_BYTE *)v347 + 104) = 1;
  }
  v870 = v11;
  if (v349 == v837)
  {
    v352 = 0;
    v351 = 0;
    v353 = a1;
    v860 = 0;
    if (!v10)
      goto LABEL_594;
    goto LABEL_573;
  }
  v832 = (const QuadTile *)(v347 + 10);
  v351 = 0;
  v352 = 0;
  v851 = 0;
  v353 = a1;
  while (2)
  {
    v844 = v349;
    v354 = (_QWORD *)*v349;
    v354[1] = v353;
    v356 = (_QWORD **)v354[31];
    v355 = (_QWORD **)v354[32];
    v850 = v355;
LABEL_502:
    if (v356 != v355)
    {
      v853 = v352;
      v855 = v356;
      v859 = v351;
      v357 = *v356;
      v357[1] = **v356;
      v357[3] = v357[2];
      v357[5] = v357[4];
      v890 = 0uLL;
      v891 = 0;
      memset(&__p, 0, sizeof(__p));
      v359 = (_QWORD **)v357[7];
      v358 = (_QWORD **)v357[8];
      if (v359 == v358)
        goto LABEL_540;
      v867 = v357;
      v865 = (_QWORD **)v357[8];
LABEL_508:
      v362 = *v359;
      *(_QWORD *)v884 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates((uint64_t)v362, (uint64_t)&v890, &__p, (uint64_t *)v884);
      v363 = *(_QWORD *)v884;
      v364 = *(_QWORD *)v884 - 2;
      if (*(_QWORD *)v884 < 2uLL)
        goto LABEL_507;
      v365 = v890;
      v366 = (float *)(v890 + 12);
      v367 = *(float *)v890;
      v368 = 1;
      while (1)
      {
        if (vabds_f32(*v366, v367) >= 1.0e-10)
        {
          v373 = v366[1] - *(float *)(v890 + 4);
          goto LABEL_516;
        }
        v369 = *(float *)(v890 + 4);
        v370 = v366[1];
        if (vabds_f32(v370, v369) >= 1.0e-10)
          break;
        ++v368;
        v366 += 3;
        if (*(_QWORD *)v884 == v368)
        {
          v371 = 0.0;
          v372 = 1.0;
          goto LABEL_517;
        }
      }
      v373 = v370 - v369;
LABEL_516:
      v374 = *v366 - v367;
      v375 = 1.0 / sqrtf((float)(v374 * v374) + (float)(v373 * v373));
      v372 = v375 * v374;
      v371 = v375 * v373;
LABEL_517:
      v376 = *(_QWORD *)v884 - 1;
      if ((unint64_t)(*(_QWORD *)v884 - 1) < 2)
      {
        v400 = 8;
        goto LABEL_537;
      }
      v377 = (float *)(v890 + 28);
      v378 = 1;
      v379 = 2;
      while (1)
      {
        v384 = v372;
        v385 = v371;
        v386 = v378 + 1;
        if (v378 + 1 < v363)
        {
          v387 = (float *)(v365 + 12 * v378);
          v388 = *v387;
          v389 = v387[1];
          v390 = v377;
          v391 = v364;
          while (1)
          {
            v392 = *(v390 - 1);
            v393 = vabds_f32(*v390, v389);
            v394 = vabds_f32(v392, v388) < 1.0e-10 && v393 < 1.0e-10;
            if (!v394)
              break;
            v390 += 3;
            if (!--v391)
              goto LABEL_532;
          }
          v395 = v392 - v388;
          v396 = *v390 - v389;
          v397 = 1.0 / sqrtf((float)(v395 * v395) + (float)(v396 * v396));
          v372 = v397 * v395;
          v371 = v397 * v396;
        }
LABEL_532:
        v398 = atan2f(v371, v372);
        v381 = v398 - atan2f(v385, v384);
        v399 = v381;
        if (v381 > 3.14159265)
        {
          v380 = -6.28318531;
        }
        else
        {
          if (v399 >= -3.14159265)
            goto LABEL_521;
          v380 = 6.28318531;
        }
        v381 = v399 + v380;
LABEL_521:
        v382 = fmaxf(ceilf(fabsf(v381) * 1.2732), 1.0);
        v383 = 2;
        if ((unint64_t)v382 >= 2)
          v383 = 2 * (unint64_t)v382;
        v379 += v383;
        --v364;
        v377 += 3;
        v378 = v386;
        if (v386 == v376)
        {
          v400 = v379 + 6;
          _CF = (unint64_t)(v379 + 6) >= 0x10000;
          v357 = v867;
          v358 = v865;
          if (_CF)
          {
            v362[2] = v362[1];
            v360 = v362[3];
          }
          else
          {
LABEL_537:
            v401 = 3 * v400 + v362[3];
            v362[2] = v362[1] + v400;
            v360 = v401 - 6;
          }
          v353 = a1;
          v362[4] = v360;
          v362[6] = v362[5];
LABEL_507:
          v361 = *v359++;
          v357[1] = v361[2] + v357[1] - v361[1];
          v357[3] = v361[4] + v357[3] - v361[3];
          v357[5] = v361[6] + v357[5] - v361[5];
          if (v359 != v358)
            goto LABEL_508;
          if (__p.__begin_)
            operator delete(__p.__begin_);
LABEL_540:
          if ((_QWORD)v890)
            operator delete((void *)v890);
          v402 = v855;
          v403 = *v855;
          if (v853 < v851)
          {
            *(_QWORD *)v853 = v403;
            v352 = v853 + 8;
            v351 = v859;
          }
          else
          {
            v404 = (v853 - v859) >> 3;
            v405 = v404 + 1;
            if ((unint64_t)(v404 + 1) >> 61)
              abort();
            if ((v851 - v859) >> 2 > v405)
              v405 = (v851 - v859) >> 2;
            if ((unint64_t)(v851 - v859) >= 0x7FFFFFFFFFFFFFF8)
              v406 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v406 = v405;
            if (v406)
            {
              if (!(v406 >> 61))
              {
                v407 = operator new(8 * v406);
                goto LABEL_553;
              }
LABEL_887:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v407 = 0;
LABEL_553:
            v408 = &v407[8 * v404];
            *(_QWORD *)v408 = v403;
            v352 = v408 + 8;
            if (v853 != v859)
            {
              v409 = v853 - 8 - v859;
              if (v409 < 0x168)
              {
                v410 = v853;
                goto LABEL_556;
              }
              if (&v407[v853 - v859 - 8 - (v409 & 0xFFFFFFFFFFFFFFF8)] > &v407[v853 - v859 - 8])
              {
                v410 = v853;
                goto LABEL_556;
              }
              if (&v853[-(v409 & 0xFFFFFFFFFFFFFFF8) - 8] > v853 - 8)
              {
                v410 = v853;
                goto LABEL_556;
              }
              if ((unint64_t)(v859 - v407) < 0x20)
              {
                v410 = v853;
                goto LABEL_556;
              }
              v412 = (v409 >> 3) + 1;
              v410 = &v853[-8 * (v412 & 0x3FFFFFFFFFFFFFFCLL)];
              v413 = &v407[8 * v404 - 16];
              v414 = v853 - 16;
              v415 = v412 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v416 = *(_OWORD *)v414;
                *(v413 - 1) = *((_OWORD *)v414 - 1);
                *v413 = v416;
                v413 -= 2;
                v414 -= 32;
                v415 -= 4;
              }
              while (v415);
              v408 -= 8 * (v412 & 0x3FFFFFFFFFFFFFFCLL);
              if (v412 != (v412 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_556:
                  v411 = *((_QWORD *)v410 - 1);
                  v410 -= 8;
                  *((_QWORD *)v408 - 1) = v411;
                  v408 -= 8;
                }
                while (v410 != v859);
              }
            }
            v851 = &v407[8 * v406];
            if (v859)
              operator delete(v859);
            v351 = v408;
            v353 = a1;
            v402 = v855;
          }
          v356 = (_QWORD **)(v402 + 1);
          v355 = v850;
          goto LABEL_502;
        }
      }
    }
    v349 = v844 + 1;
    if (v844 + 1 != v837)
      continue;
    break;
  }
  v11 = v870;
  v350 = v832;
  v860 = v351;
  if (!*((_BYTE *)v353 + 64))
    goto LABEL_594;
LABEL_573:
  v417 = (gdc::GlobeTileGrid *)operator new();
  v418 = v417;
  if (*((_BYTE *)v353 + 104))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v417, v350);
    v419 = *v848;
    *v848 = v418;
    if (v419)
    {
      v420 = *((_QWORD *)v419 + 323);
      if (v420)
        MEMORY[0x1A1AF4DE8](v420, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v419, 0x1020C4007FF0C4BLL);
      v418 = *v848;
    }
    v351 = v860;
    *((_QWORD *)v418 + 323) = operator new[]();
    if (v860 != v352)
    {
      v421 = v860;
      do
      {
        v422 = *(uint64_t **)(*(_QWORD *)v421 + 56);
        v423 = *(uint64_t **)(*(_QWORD *)v421 + 64);
        while (v422 != v423)
        {
          v424 = *v422;
          if (!*(_QWORD *)(*v422 + 80))
          {
            v425 = *(_QWORD *)(v424 + 88);
            if (v425)
            {
              v426 = *(_QWORD *)(v424 + 72);
              v427 = *v848;
              v428 = *((_QWORD *)*v848 + 323);
              v429 = (float *)(v426 + 4);
              v430 = 1;
              do
              {
                v431 = *((float *)v427 + 648) * v429[1];
                v432 = vcvts_n_u32_f32(*(v429 - 1), 2uLL);
                if (v432 >= 3)
                  v432 = 3;
                v433 = vcvts_n_u32_f32(*v429, 2uLL);
                if (v433 >= 3)
                  v433 = 3;
                v434 = (float *)(v428 + 8 * (v432 | (4 * v433)));
                v435 = fminf(v431, *v434);
                v436 = fmaxf(v434[1], v431);
                *v434 = v435;
                v434[1] = v436;
                v429 += 3;
                v394 = v425 > v430++;
              }
              while (v394);
            }
          }
          ++v422;
        }
        v421 += 8;
      }
      while (v421 != v352);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v848);
LABEL_594:
    v437 = 0;
    v438 = 0;
    v439 = 0;
    v440 = 0;
    v441 = (v352 - v351) >> 3;
    v852 = v441;
    while (2)
    {
      if (v438 == v441
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v860[8 * v438] + 8) + v440 - **(_QWORD **)&v860[8 * v438]) >= 0x10000)
      {
        v442 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v442 + 1) = 0;
        v443 = (unint64_t *)(v442 + 8);
        *((_QWORD *)v442 + 2) = 0;
        *((_QWORD *)v442 + 3) = &off_1E42B5748;
        *(_QWORD *)v442 = &off_1E42DFD80;
        *((_QWORD *)v442 + 4) = 32;
        *((_DWORD *)v442 + 10) = 1;
        *((_QWORD *)v442 + 6) = 0;
        *((_QWORD *)v442 + 7) = 0;
        *((_QWORD *)v442 + 8) = 0;
        *((_QWORD *)v442 + 9) = 32 * v440;
        v444 = 0uLL;
        *((_OWORD *)v442 + 5) = 0u;
        *((_OWORD *)v442 + 6) = 0u;
        *((_QWORD *)v442 + 14) = 0;
        if ((v445 & 1) == 0)
        {
          v444 = 0uLL;
          if (v515)
          {
            v516 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v516, "GeoGL", 0xA3D02C1100000005);
            v444 = 0uLL;
          }
        }
        v868 = v438;
        *((_QWORD *)v442 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v442 + 16) = 0;
        *((_OWORD *)v442 + 11) = v444;
        *((_OWORD *)v442 + 12) = v444;
        *((_QWORD *)v442 + 26) = 0;
        *((_QWORD *)v442 + 27) = -1;
        *((_OWORD *)v442 + 10) = v444;
        *((_OWORD *)v442 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v442 + 34) = 0;
        *((_QWORD *)v442 + 3) = &off_1E42B79E0;
        *((_QWORD *)v442 + 29) = "BatchType/VData";
        *((_QWORD *)v442 + 30) = &ggl::DaVinciTraffic::defaultVboReflection;
        *((_QWORD *)v442 + 28) = &unk_1E42B7A00;
        __p.__begin_ = (std::vector<unsigned int>::pointer)(v442 + 24);
        __p.__end_ = (std::vector<unsigned int>::pointer)v442;
        v446 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v446->__shared_owners_ = 0;
        v447 = (unint64_t *)&v446->__shared_owners_;
        v446->__shared_weak_owners_ = 0;
        v446[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v448 = v446 + 1;
        v446->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v446[1].__shared_owners_ = 2;
        LODWORD(v446[1].__shared_weak_owners_) = 257;
        v446[2].__vftable = 0;
        v446[2].__shared_owners_ = 0;
        v446[2].__shared_weak_owners_ = 0;
        v446[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v439);
        v449 = (std::__shared_count)0;
        *(_OWORD *)&v446[3].__shared_owners_ = 0u;
        v446[4].std::__shared_count = 0u;
        v446[4].__shared_weak_owners_ = 0;
        if ((v450 & 1) == 0)
        {
          v449 = (std::__shared_count)0;
          v448 = v446 + 1;
          if (v517)
          {
            v518 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v518, "GeoGL", 0xA3D02C1100000005);
            v449 = (std::__shared_count)0;
            v448 = v446 + 1;
          }
        }
        v446[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v446[5].__shared_owners_ = 0;
        *((std::__shared_count *)v446 + 11) = v449;
        v446[8].std::__shared_count = v449;
        v446[8].__shared_weak_owners_ = 0;
        v446[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v446 + 10) = v449;
        v446[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v446[5].__shared_weak_owners_) = 0;
        LODWORD(v446[10].__vftable) = 0;
        v446[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v446[1].__shared_owners_ = 2;
        v446[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v446[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v874 = v448;
        *(_QWORD *)v884 = v448;
        *(_QWORD *)&v884[8] = v446;
        v451 = operator new();
        do
          v452 = __ldxr(v443);
        while (__stxr(v452 + 1, v443));
        do
          v453 = __ldxr(v447);
        while (__stxr(v453 + 1, v447));
        if ((v454 & 1) == 0
        {
          if ((v519 & 1) == 0
          {
            ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinciTraffic::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::attributesReflection(void)::r;
          *(_QWORD *)algn_1EE585290 = 1;
        }
        *(_QWORD *)(v451 + 32) = 0;
        *(_QWORD *)(v451 + 40) = 0;
        *(_DWORD *)(v451 + 48) = 0;
        *(_QWORD *)v451 = &off_1E42BBC08;
        *(_QWORD *)(v451 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v451 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v451 + 24) = 0;
        *(_QWORD *)(v451 + 56) = &ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v451 + 64) = 0;
        v455 = v451 + 64;
        *(_QWORD *)(v451 + 72) = 0;
        *(_QWORD *)(v451 + 80) = 0;
        if ((v456 & 1) == 0)
        {
          v455 = v451 + 64;
          if (v520)
          {
            v521 = operator new();
            *(_QWORD *)(v521 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v521 + 24) = "GeoGL";
            *(_OWORD *)(v521 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v521 = &off_1E42B5668;
            *(_QWORD *)(v521 + 8) = "GeoGL";
            *(_OWORD *)(v521 + 72) = 0u;
            *(_OWORD *)(v521 + 88) = 0u;
            *(_OWORD *)(v521 + 104) = 0u;
            *(_OWORD *)(v521 + 120) = 0u;
            *(_OWORD *)(v521 + 136) = 0u;
            *(_OWORD *)(v521 + 152) = 0u;
            *(_OWORD *)(v521 + 168) = 0u;
            *(_OWORD *)(v521 + 184) = 0u;
            *(_OWORD *)(v521 + 200) = 0u;
            *(_OWORD *)(v521 + 216) = 0u;
            *(_OWORD *)(v521 + 232) = 0u;
            *(_QWORD *)(v521 + 248) = 0;
            *(_OWORD *)(v521 + 56) = 0u;
            v522 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v521 + 56), 0);
            if ((_DWORD)v522)
              geo::read_write_lock::logFailure(v522, (uint64_t)"initialization", v523);
            v524 = malloc_create_zone(0, 0);
            *(_QWORD *)(v521 + 48) = v524;
            malloc_set_zone_name(v524, "GeoGL");
            *(_QWORD *)(v521 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v521;
            v455 = v451 + 64;
          }
        }
        v457 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v451 + 120) = 0;
        *(_QWORD *)(v451 + 96) = 0;
        *(_QWORD *)(v451 + 104) = 0;
        *(_QWORD *)(v451 + 88) = v457;
        if ((v457 & 1) == 0)
        {
          v845 = v455;
          v455 = v845;
          if (v525)
          {
            v526 = operator new();
            *(_QWORD *)(v526 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v526 + 24) = "GeoGL";
            *(_OWORD *)(v526 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v526 = &off_1E42B5668;
            *(_QWORD *)(v526 + 8) = "GeoGL";
            *(_OWORD *)(v526 + 72) = 0u;
            *(_OWORD *)(v526 + 88) = 0u;
            *(_OWORD *)(v526 + 104) = 0u;
            *(_OWORD *)(v526 + 120) = 0u;
            *(_OWORD *)(v526 + 136) = 0u;
            *(_OWORD *)(v526 + 152) = 0u;
            *(_OWORD *)(v526 + 168) = 0u;
            *(_OWORD *)(v526 + 184) = 0u;
            *(_OWORD *)(v526 + 200) = 0u;
            *(_OWORD *)(v526 + 216) = 0u;
            *(_OWORD *)(v526 + 232) = 0u;
            *(_QWORD *)(v526 + 248) = 0;
            v527 = v526;
            *(_OWORD *)(v526 + 56) = 0u;
            v528 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v526 + 56), 0);
            if ((_DWORD)v528)
              geo::read_write_lock::logFailure(v528, (uint64_t)"initialization", v529);
            v530 = malloc_create_zone(0, 0);
            *(_QWORD *)(v527 + 48) = v530;
            malloc_set_zone_name(v530, "GeoGL");
            *(_QWORD *)(v527 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v527;
            v455 = v845;
          }
        }
        *(_QWORD *)(v451 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v451 + 136) = 0;
        *(_QWORD *)(v451 + 112) = v451 + 120;
        *(_QWORD *)v451 = &off_1E42BD678;
        *(_QWORD *)(v451 + 16) = &unk_1E42BD698;
        *(_QWORD *)&v890 = v442 + 24;
        *((_QWORD *)&v890 + 1) = v442;
        do
          v458 = __ldxr(v443);
        while (__stxr(v458 + 1, v443));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v455, (uint64_t *)&v890, (uint64_t *)&v891, 1uLL);
        v459 = (std::__shared_weak_count *)*((_QWORD *)&v890 + 1);
        if (*((_QWORD *)&v890 + 1))
        {
          v460 = (unint64_t *)(*((_QWORD *)&v890 + 1) + 8);
          do
            v461 = __ldaxr(v460);
          while (__stlxr(v461 - 1, v460));
          if (!v461)
          {
            ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
            std::__shared_weak_count::__release_weak(v459);
          }
        }
        do
          v462 = __ldxr(v447);
        while (__stxr(v462 + 1, v447));
        v463 = *(std::__shared_weak_count **)(v451 + 104);
        *(_QWORD *)(v451 + 96) = v874;
        *(_QWORD *)(v451 + 104) = v446;
        if (v463)
        {
          v464 = (unint64_t *)&v463->__shared_owners_;
          do
            v465 = __ldaxr(v464);
          while (__stlxr(v465 - 1, v464));
          if (!v465)
          {
            ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
            std::__shared_weak_count::__release_weak(v463);
          }
        }
        *(_QWORD *)v451 = &off_1E42B6A48;
        *(_QWORD *)(v451 + 16) = &unk_1E42B6A68;
        do
          v466 = __ldaxr(v447);
        while (__stlxr(v466 - 1, v447));
        if (!v466)
        {
          ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
          std::__shared_weak_count::__release_weak(v446);
        }
        do
          v467 = __ldaxr(v443);
        while (__stlxr(v467 - 1, v443));
        if (!v467)
        {
          (*(void (**)(char *))(*(_QWORD *)v442 + 16))(v442);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v442);
        }
        v469 = (uint64_t *)a1[5];
        v468 = a1[6];
        if ((unint64_t)v469 < v468)
        {
          *v469 = v451;
          v470 = v469 + 1;
          v11 = v870;
          goto LABEL_650;
        }
        v471 = (uint64_t *)*v834;
        v472 = (char *)v469 - (_BYTE *)*v834;
        v473 = v472 >> 3;
        v474 = (v472 >> 3) + 1;
        if (v474 >> 61)
          abort();
        v475 = v468 - (_QWORD)v471;
        if (v475 >> 2 > v474)
          v474 = v475 >> 2;
        if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFF8)
          v476 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v476 = v474;
        if (v476)
        {
          if (v476 >> 61)
            goto LABEL_887;
          v477 = operator new(8 * v476);
        }
        else
        {
          v477 = 0;
        }
        v478 = (uint64_t *)&v477[8 * v473];
        *v478 = v451;
        v470 = v478 + 1;
        if (v469 == v471)
        {
          v471 = v469;
          v11 = v870;
        }
        else
        {
          v479 = (char *)(v469 - 1) - (char *)v471;
          if (v479 >= 0x58)
          {
            v480 = (char *)v469 - &v477[v472];
            v11 = v870;
            if (v480 < 0x20)
              goto LABEL_646;
            v481 = (v479 >> 3) + 1;
            v482 = &v477[8 * v473 - 16];
            v483 = v469 - 2;
            v484 = v481 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v485 = *(_OWORD *)v483;
              *(v482 - 1) = *((_OWORD *)v483 - 1);
              *v482 = v485;
              v482 -= 2;
              v483 -= 4;
              v484 -= 4;
            }
            while (v484);
            v478 -= v481 & 0x3FFFFFFFFFFFFFFCLL;
            v469 -= v481 & 0x3FFFFFFFFFFFFFFCLL;
            if (v481 != (v481 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_646;
          }
          else
          {
            v11 = v870;
            do
            {
LABEL_646:
              v486 = *--v469;
              *--v478 = v486;
            }
            while (v469 != v471);
            v471 = (uint64_t *)*v834;
          }
        }
        a1[4] = v478;
        a1[5] = v470;
        a1[6] = &v477[8 * v476];
        if (v471)
          operator delete(v471);
LABEL_650:
        v438 = v868;
        a1[5] = v470;
        if (v437 < v868)
        {
          v487 = 0;
          v488 = v437;
          do
          {
            v489 = *(_QWORD *)&v860[8 * v488];
            v490 = *(_QWORD *)(v489 + 32);
            v491 = v490 + v487;
            v492 = *(_QWORD *)(v489 + 40) + v487;
            *(_QWORD *)(v489 + 32) = v491;
            *(_QWORD *)(v489 + 40) = v492;
            v487 = v492 - v490;
            ++v488;
          }
          while (v868 != v488);
          v493 = 0;
          do
          {
            v494 = *(uint64_t **)&v860[8 * v437];
            v495 = *v494;
            v496 = *v494 + v493;
            v497 = v494[1] + v493;
            *v494 = v496;
            v494[1] = v497;
            v498 = v494[2];
            v499 = v498 + v487;
            v500 = v494[3] + v487;
            v494[2] = v499;
            v494[3] = v500;
            v494[11] = v451;
            v501 = (_QWORD *)v494[7];
            v502 = (_QWORD *)v494[8];
            if (v501 != v502)
            {
              v503 = v494[4];
              do
              {
                v504 = (_QWORD *)*v501++;
                v505 = v504[2] - v504[1];
                v504[1] = v496;
                v496 += v505;
                v506 = v504[4] - v504[3];
                v504[2] = v496;
                v504[3] = v499;
                v499 += v506;
                v507 = v504[6] - v504[5];
                v504[4] = v499;
                v504[5] = v503;
                v503 += v507;
                v504[6] = v503;
              }
              while (v501 != v502);
            }
            v493 = v497 - v495;
            v487 = v500 - v498;
            ++v437;
          }
          while (v437 != v868);
        }
        v508 = *(std::__shared_weak_count **)&v884[8];
        v441 = v852;
        if (!*(_QWORD *)&v884[8])
          goto LABEL_663;
        v509 = (unint64_t *)(*(_QWORD *)&v884[8] + 8);
        do
          v510 = __ldaxr(v509);
        while (__stlxr(v510 - 1, v509));
        if (!v510)
        {
          ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
          std::__shared_weak_count::__release_weak(v508);
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
          {
LABEL_664:
            v512 = (unint64_t *)&end->__shared_owners_;
            do
              v513 = __ldaxr(v512);
            while (__stlxr(v513 - 1, v512));
            if (!v513)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
        }
        else
        {
LABEL_663:
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
            goto LABEL_664;
        }
        v440 = 0;
        v439 = 0;
        v437 = v868;
      }
      if (v438 < v441)
      {
        v514 = *(_QWORD **)&v860[8 * v438];
        v440 = v514[1] + v440 - *v514;
        v439 = v514[3] + v439 + v514[5] - (v514[2] + v514[4]);
      }
      if (++v438 <= v441)
        continue;
      break;
    }
    v531 = a1;
    if (v860)
      operator delete(v860);
    if (v11)
      operator delete(v11);
    *a1 = &off_1E428C8C0;
    a1[14] = *a4;
    v532 = a4[1];
    a1[15] = v532;
    if (v532)
    {
      v533 = (unint64_t *)(v532 + 8);
      do
        v534 = __ldxr(v533);
      while (__stxr(v534 + 1, v533));
    }
    a1[16] = *a5;
    v535 = a5[1];
    a1[17] = v535;
    if (v535)
    {
      v536 = (unint64_t *)(v535 + 8);
      do
        v537 = __ldxr(v536);
      while (__stxr(v537 + 1, v536));
    }
    a1[18] = 0;
    v538 = a1[1];
    v814 = a1[2];
    if (v538 != v814)
    {
      v539 = 1.0;
      v540 = (float32x2_t)vdup_n_s32(0x2EDBE6FFu);
      v877 = (int8x8_t)vdup_n_s32(0x45FFFF00u);
      v871 = (void *)vdup_n_s32(0xC5FFFF00);
      v821 = v540;
      do
      {
        v542 = *(_QWORD ***)(*(_QWORD *)v538 + 248);
        v541 = *(_QWORD ***)(*(_QWORD *)v538 + 256);
        v815 = v538;
        v816 = v541;
        while (v542 != v541)
        {
          v543 = 0;
          v819 = v542;
          v544 = *v542;
          v545 = **(_QWORD **)(v544[11] + 64);
          v820 = v544;
          v546 = *v544;
          v547 = v544[1];
          v890 = 0uLL;
          v548 = *(_QWORD *)(v545 + 8);
          v549 = v548 * v546;
          v550 = v548 * v547;
          if (v548 * v547 != v548 * v546)
          {
            if (a2 && *(_BYTE *)(v545 + 17) != 2)
              v543 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v545, v549, v548 * v547, 1, 1);
            else
              v543 = *(_QWORD *)(v545 + 72) + v549;
          }
          *(_QWORD *)&v551 = a2;
          *((_QWORD *)&v551 + 1) = v545;
          v890 = v551;
          v891 = v549;
          v892 = v550;
          v894 = v543;
          LOWORD(v893) = 257;
          v552 = v820[2];
          v554 = v820[4];
          v553 = v820[5];
          v555 = v543;
          if (v553 == v554)
          {
            v553 = v820[3];
          }
          else
          {
            if (v554 < v552)
              v552 = v820[4];
            if (v820[3] > v553)
              v553 = v820[3];
          }
          v556 = 0;
          v557 = *(_QWORD *)(v820[11] + 96);
          __p.__end_ = 0;
          __p.__begin_ = 0;
          v558 = *(_QWORD *)(v557 + 8);
          v559 = (unsigned int *)(v558 * v552);
          v560 = (unsigned int *)(v558 * v553);
          if (v558 * v553 != v558 * v552)
          {
            if (a2 && *(_BYTE *)(v557 + 17) != 2)
              v556 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v557, v558 * v552, v560, 1, 1);
            else
              v556 = (uint64_t)v559 + *(_QWORD *)(v557 + 72);
          }
          *(_QWORD *)&v561 = a2;
          *((_QWORD *)&v561 + 1) = v557;
          *(_OWORD *)&__p.__begin_ = v561;
          __p.__end_cap_.__value_ = v559;
          v881 = v560;
          v883 = v556;
          v882 = 257;
          v562 = v820[2];
          v563 = v820[4];
          memset(v879, 0, sizeof(v879));
          memset(&v878, 0, sizeof(v878));
          v564 = (uint64_t *)v820[7];
          v818 = v820 + 7;
          v565 = (uint64_t *)v820[8];
          if (v564 != v565)
          {
            v566 = (float32x2_t *)v555;
            v567 = 2 * v552;
            v568 = v556 + 2 * v563 - 2 * v552;
            v569 = v556 + 2 * v562 - v567;
            v822 = (uint64_t *)v820[8];
            while (1)
            {
              v571 = *v564;
              *(_OWORD *)v884 = xmmword_19FFB2F60;
              *(_OWORD *)&v884[16] = xmmword_19FFB2F70;
              v572 = *(_QWORD *)(v571 + 16);
              if (v572 != *(_QWORD *)(v571 + 8))
                break;
              v570 = *(_QWORD *)(v571 + 16);
LABEL_725:
              v566 += 4 * (v570 - v572);
              v569 += 2 * (*(_QWORD *)(v571 + 32) - *(_QWORD *)(v571 + 24));
              v568 += 2 * (*(_QWORD *)(v571 + 48) - *(_QWORD *)(v571 + 40));
              if (++v564 == v565)
                goto LABEL_835;
            }
            v828 = (_WORD *)v569;
            v889 = 1;
            md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v571, (uint64_t)v879, &v878, (uint64_t *)&v889);
            v574 = v889;
            if (v889 >= 2)
            {
              v827 = v889 - 2;
              v575 = (float *)v879[0];
              v576 = *(float32x2_t *)v879[0];
              if (v889 >= 0xA)
              {
                v580 = (v889 - 1) & 7;
                if (!v580)
                  v580 = 8;
                v577 = v889 - 1 - v580;
                v573.i64[1] = *(_QWORD *)v879[0];
                v581 = (int8x16_t)vdupq_lane_s32((int32x2_t)v576, 0);
                v582 = (int32x4_t *)((char *)v879[0] + 60);
                v583 = 0uLL;
                v584 = v577;
                v585 = 0uLL;
                do
                {
                  i32 = (const float *)v582[-3].i32;
                  v898 = vld3q_f32(i32);
                  v588 = v582[1];
                  v587 = v582[2];
                  v589 = *v582;
                  v582 += 6;
                  v590.i64[0] = __PAIR64__(v589.u32[3], v589.u32[0]);
                  v591 = (float32x4_t)vrev64q_s32(v588);
                  v591.i32[0] = v589.i32[1];
                  v590.i64[1] = __PAIR64__(v587.u32[1], v588.u32[2]);
                  v591.i32[3] = v587.i32[2];
                  v592 = vsubq_f32(v898.val[0], (float32x4_t)vextq_s8(v581, (int8x16_t)v898.val[0], 0xCuLL));
                  v593 = vsubq_f32((float32x4_t)v590, (float32x4_t)vextq_s8((int8x16_t)v898.val[0], v590, 0xCuLL));
                  v594 = vsubq_f32(v898.val[1], (float32x4_t)vextq_s8(v573, (int8x16_t)v898.val[1], 0xCuLL));
                  v898.val[0] = vsubq_f32(v591, (float32x4_t)vextq_s8((int8x16_t)v898.val[1], (int8x16_t)v591, 0xCuLL));
                  v583 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v592, v592), v594, v594)), v583);
                  v585 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v593, v593), v898.val[0], v898.val[0])), v585);
                  v573 = (int8x16_t)v591;
                  v581 = v590;
                  v584 -= 8;
                }
                while (v584);
                v579 = *(float32x2_t *)((char *)v587.i64 + 4);
                v595 = vaddq_f32(v585, v583);
                v578 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v595, v595));
              }
              else
              {
                v577 = 0;
                v578 = 0.0;
                v579 = *(float32x2_t *)v879[0];
              }
              v833 = v878.__begin_;
              v596 = v577 + 1;
              v597 = (char *)v879[0] + 12 * v577 + 12;
              do
              {
                v598 = *(float32x2_t *)v597;
                v597 = (_QWORD *)((char *)v597 + 12);
                v599 = vsub_f32(v598, v579);
                v578 = sqrtf(vaddv_f32(vmul_f32(v599, v599))) + v578;
                ++v596;
                v579 = v598;
              }
              while (v889 != v596);
              v600 = v578;
              v601 = v539 / v578;
              if (v600 <= 1.0e-10)
                v601 = 0.0;
              v830 = v601;
              v602 = (float32x2_t *)((char *)v879[0] + 12);
              v603 = sqrtf((float)((float)(*((float *)v879[0] + 3) - v576.f32[0])* (float)(*((float *)v879[0] + 3) - v576.f32[0]))+ (float)((float)(*((float *)v879[0] + 4) - v576.f32[1])* (float)(*((float *)v879[0] + 4) - v576.f32[1])));
              v604 = 1;
              while (1)
              {
                v605 = vcgt_f32(v540, vabd_f32(*v602, v576));
                if ((v605.i32[0] & v605.i32[1] & 1) == 0)
                  break;
                ++v604;
                v602 = (float32x2_t *)((char *)v602 + 12);
                if (v889 == v604)
                {
                  v606 = (float32x2_t)1065353216;
                  goto LABEL_744;
                }
              }
              v607 = vsub_f32(*v602, v576);
              v606 = vmul_n_f32(v607, v539 / sqrtf(vaddv_f32(vmul_f32(v607, v607))));
LABEL_744:
              v608 = *v878.__begin_;
              v609 = *((_DWORD *)v879[0] + 2);
              v610 = (float32x2_t)vdup_lane_s32((int32x2_t)v606, 0);
              v610.f32[0] = -v606.f32[1];
              v888.f32[0] = -v606.f32[1];
              v888.i32[1] = v606.i32[0];
              *(float32x2_t *)v887.f32 = vsub_f32(v610, v606);
              v887.f32[2] = v606.f32[1] - v606.f32[0];
              v887.f32[3] = -vaddv_f32(v606);
              v885 = xmmword_19FFB2F80;
              *v566 = v576;
              v566[1].i32[0] = v609;
              _Q3.i64[0] = v887.i64[0];
              _Q3.i64[1] = 0xBF8000003F800000;
              v612.i64[0] = 0xBF000000BF000000;
              v612.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q3.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v612, (float32x4_t)xmmword_19FFB2FA0, _Q3)));
              v566[2] = *(float32x2_t *)_Q3.f32;
              _Q3.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v608);
              __asm { FCVT            H3, S3 }
              v566[3].i16[2] = _Q3.i16[0];
              _Q3.i32[0] = *(_DWORD *)(v571 + 124);
              v616 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q3.f32, (int32x2_t)0x3DDB7CDF00000001), 0), (int8x8_t)v871, v877), v888);
              v886 = 0;
              v566[3].i16[0] = (int)v616.f32[0];
              v566[3].i16[1] = (int)v616.f32[1];
              v617 = *(_QWORD *)(v571 + 112);
              if (v617)
              {
                _S3 = *(_DWORD *)(v617 + 4 * v608);
                __asm { FCVT            H3, S3 }
                v566[3].i16[3] = _S3;
              }
              v566[4] = v576;
              v566[5].i32[0] = v609;
              _Q3.i64[0] = v887.i64[1];
              v620 = v888;
              _Q3.i64[1] = *((_QWORD *)&v885 + 1);
              v621.i64[0] = 0xBF000000BF000000;
              v621.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q3.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v621, (float32x4_t)xmmword_19FFB2FA0, _Q3)));
              v566[6] = *(float32x2_t *)_Q3.f32;
              _Q3.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v608);
              __asm { FCVT            H3, S3 }
              v566[7].i16[2] = _Q3.i16[0];
              _Q3.i32[0] = *(_DWORD *)(v571 + 124);
              *(int8x8_t *)v621.f32 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q3.f32, (int32x2_t)0x3DDB7CDF00000001), 0), (int8x8_t)v871, v877);
              v622 = v620;
              v623 = vmla_f32((float32x2_t)0xBF000000BF000000, v620, *(float32x2_t *)v621.f32);
              v566[7].i16[0] = (int)v623.f32[0];
              v566[7].i16[1] = (int)v623.f32[1];
              v624 = *(_QWORD *)(v571 + 112);
              if (v624)
              {
                _S4 = *(_DWORD *)(v624 + 4 * v608);
                __asm { FCVT            H4, S4 }
                v566[7].i16[3] = _S4;
              }
              *(float32x2_t *)&v887.i32[1] = v606;
              v887.f32[0] = -v606.f32[1];
              v887.f32[3] = -v606.f32[0];
              v566[8] = v576;
              v566[9].i32[0] = v609;
              _Q2.i64[0] = v887.i64[0];
              _Q2.i64[1] = 0xBF80000000000000;
              v627.i64[0] = 0xBF000000BF000000;
              v627.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q2.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v627, (float32x4_t)xmmword_19FFB2FA0, _Q2)));
              v566[10] = *(float32x2_t *)_Q2.f32;
              _Q2.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v608);
              __asm { FCVT            H2, S2 }
              v566[11].i16[2] = _Q2.i16[0];
              _Q2.i32[0] = *(_DWORD *)(v571 + 124);
              *(float32x2_t *)v627.f32 = vmla_f32((float32x2_t)0xBF000000BF000000, v622, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q2.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877));
              v885 = xmmword_19FFB2FB0;
              v566[11].i16[0] = (int)v627.f32[0];
              v566[11].i16[1] = (int)v627.f32[1];
              v628 = *(_QWORD *)(v571 + 112);
              if (v628)
              {
                _S2 = *(_DWORD *)(v628 + 4 * v608);
                __asm { FCVT            H2, S2 }
                v566[11].i16[3] = _S2;
              }
              v824 = v564;
              v566[12] = v576;
              v566[13].i32[0] = v609;
              _Q0.i64[0] = v887.i64[1];
              v631 = v888;
              _Q0.i64[1] = *((_QWORD *)&v885 + 1);
              v632.i64[0] = 0xBF000000BF000000;
              v632.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v632, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
              v566[14] = *(float32x2_t *)_Q0.f32;
              _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v608);
              __asm { FCVT            H0, S0 }
              v566[15].i16[2] = _Q0.i16[0];
              _Q0.i32[0] = *(_DWORD *)(v571 + 124);
              v633 = vmla_f32((float32x2_t)0xBF000000BF000000, v631, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877));
              v566[15].i16[0] = (int)v633.f32[0];
              v566[15].i16[1] = (int)v633.f32[1];
              v634 = *(_QWORD *)(v571 + 112);
              if (v634)
              {
                _S0 = *(_DWORD *)(v634 + 4 * v608);
                __asm { FCVT            H0, S0 }
                v566[15].i16[3] = _S0;
              }
              v823 = v568;
              v825 = v566;
              v636 = v566 + 16;
              v831 = v574 - 1;
              if (v574 - 1 >= 2)
              {
                v637 = v575 + 7;
                v638 = v827;
                v639 = 1;
                v829 = v575;
                do
                {
                  v640 = &v575[3 * v639];
                  v641 = *v640;
                  v642 = v640[1];
                  v643 = v639 + 1;
                  if (v639 + 1 >= v574)
                  {
LABEL_764:
                    v655 = (float32x2_t)vdup_lane_s32((int32x2_t)v606, 1);
                    v654 = (unint64_t)v606;
                    v652 = v606.f32[0];
                  }
                  else
                  {
                    v644 = v637;
                    v645 = v638;
                    while (1)
                    {
                      v646 = *(v644 - 1);
                      v647 = vabds_f32(*v644, v642);
                      if (vabds_f32(v646, v641) >= 1.0e-10 || v647 >= 1.0e-10)
                        break;
                      v644 += 3;
                      if (!--v645)
                        goto LABEL_764;
                    }
                    v649 = v646 - v641;
                    v650 = *v644 - v642;
                    v651 = v539 / sqrtf((float)(v649 * v649) + (float)(v650 * v650));
                    v652 = v651 * v649;
                    *(float *)&v653 = v651 * v650;
                    v654 = __PAIR64__(v651 * v650, LODWORD(v652));
                    v655 = (float32x2_t)__PAIR64__(v606.u32[1], v653);
                  }
                  v656 = v652 + v606.f32[0];
                  v657 = vaddv_f32(v655);
                  v658 = (float)(v656 * v656) + (float)(v657 * v657);
                  v842 = v654;
                  v835 = v606.f32[0];
                  if (v658 <= 0.0)
                  {
                    v661 = v606.f32[1];
                    v660 = v606.f32[0];
                  }
                  else
                  {
                    v659 = v539 / sqrtf(v658);
                    v660 = -(float)(v657 * v659);
                    v661 = v659 * v656;
                  }
                  v662 = v833[v639];
                  v840 = v640[4];
                  v663 = v655.f32[1];
                  v664 = *((_DWORD *)v640 + 2);
                  v838 = v640[3];
                  v846 = v603;
                  *(float *)&v886 = v603;
                  *((float *)&v886 + 1) = v603 * v830;
                  v885 = xmmword_19FFB2FB0;
                  v888 = (float32x2_t)__PAIR64__(LODWORD(v661), LODWORD(v660));
                  v856 = v655.f32[0];
                  v861 = v652;
                  v665 = atan2f(v655.f32[0], v652);
                  v666 = v665 - atan2f(v663, v835);
                  v667 = v666;
                  if (v666 <= 3.14159265)
                  {
                    v668 = -1.0;
                    if (v667 < -3.14159265)
                      v666 = v667 + 6.28318531;
                  }
                  else
                  {
                    v666 = v667 + -6.28318531;
                    v668 = -1.0;
                  }
                  v669 = sqrtf(fmaxf(-(float)(v668+ (float)((float)((float)(v660 * v861) + (float)(v661 * v856))* (float)((float)(v660 * v861) + (float)(v661 * v856)))), 0.1));
                  v670.f32[0] = v660 / v669;
                  v671 = v661 / v669;
                  v672 = fabsf(v666);
                  v673 = (unint64_t)fmaxf(ceilf(v672 * 1.2732), v539);
                  if (v673 >= 2)
                  {
                    v686 = v539 / (float)((float)v673 + v668);
                    v687 = 0;
                    if (v672 >= 1.5708)
                    {
                      do
                      {
                        v689 = __sincosf_stret((float)((float)(v686 * (float)(int)v687) + -0.5) * v666);
                        v888.f32[0] = -(float)((float)(v661 * v689.__sinval) - (float)(v660 * v689.__cosval));
                        v888.f32[1] = (float)(v660 * v689.__sinval) + (float)(v661 * v689.__cosval);
                        *(float32x2_t *)v887.f32 = v888;
                        v887.f32[2] = -(float)((float)(v660 * v689.__cosval) - (float)(v661 * v689.__sinval));
                        v887.f32[3] = -v888.f32[1];
                        v636->f32[0] = v641;
                        v636->f32[1] = v642;
                        v636[1].i32[0] = v664;
                        _Q0.i64[0] = v887.i64[0];
                        _Q0.i64[1] = v885;
                        v691.i64[0] = 0xBF000000BF000000;
                        v691.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v691, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                        v636[2] = *(float32x2_t *)_Q0.f32;
                        _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                        __asm { FCVT            H0, S0 }
                        v636[3].i16[2] = _Q0.i16[0];
                        _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                        v692 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877), v888);
                        v636[3].i16[0] = (int)v692.f32[0];
                        v636[3].i16[1] = (int)v692.f32[1];
                        v693 = *(_QWORD *)(v571 + 112);
                        if (v693)
                        {
                          _S0 = *(_DWORD *)(v693 + 4 * v662);
                          __asm { FCVT            H0, S0 }
                          v636[3].i16[3] = _S0;
                        }
                        v636[4].f32[0] = v641;
                        v636[4].f32[1] = v642;
                        v636[5].i32[0] = v664;
                        _Q0.i64[0] = v887.i64[1];
                        v696 = v888;
                        _Q0.i64[1] = *((_QWORD *)&v885 + 1);
                        v697.i64[0] = 0xBF000000BF000000;
                        v697.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v697, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                        v636[6] = *(float32x2_t *)_Q0.f32;
                        _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                        __asm { FCVT            H0, S0 }
                        v636[7].i16[2] = _Q0.i16[0];
                        _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                        v698 = vmla_f32((float32x2_t)0xBF000000BF000000, v696, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877));
                        v636[7].i16[0] = (int)v698.f32[0];
                        v636[7].i16[1] = (int)v698.f32[1];
                        v699 = *(_QWORD *)(v571 + 112);
                        if (v699)
                        {
                          _S0 = *(_DWORD *)(v699 + 4 * v662);
                          __asm { FCVT            H0, S0 }
                          v636[7].i16[3] = _S0;
                        }
                        v636 += 8;
                        ++v687;
                      }
                      while (v673 != v687);
                    }
                    else if (v666 >= 0.0)
                    {
                      v857 = v671;
                      v862 = v670.i32[0];
                      do
                      {
                        v713 = __sincosf_stret((float)((float)(v686 * (float)(int)v687) + -0.5) * v666);
                        v888.f32[0] = -(float)((float)(v661 * v713.__sinval) - (float)(v660 * v713.__cosval));
                        v888.f32[1] = (float)(v660 * v713.__sinval) + (float)(v661 * v713.__cosval);
                        v887.i64[0] = __PAIR64__(LODWORD(v857), v862);
                        v887.f32[2] = -(float)((float)(v660 * v713.__cosval) - (float)(v661 * v713.__sinval));
                        v887.f32[3] = -v888.f32[1];
                        v636->f32[0] = v641;
                        v636->f32[1] = v642;
                        v636[1].i32[0] = v664;
                        _Q0.i64[0] = v887.i64[0];
                        _Q0.i64[1] = v885;
                        v715.i64[0] = 0xBF000000BF000000;
                        v715.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v715, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                        v636[2] = *(float32x2_t *)_Q0.f32;
                        _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                        __asm { FCVT            H0, S0 }
                        v636[3].i16[2] = _Q0.i16[0];
                        _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                        v716 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877), v888);
                        v636[3].i16[0] = (int)v716.f32[0];
                        v636[3].i16[1] = (int)v716.f32[1];
                        v717 = *(_QWORD *)(v571 + 112);
                        if (v717)
                        {
                          _S0 = *(_DWORD *)(v717 + 4 * v662);
                          __asm { FCVT            H0, S0 }
                          v636[3].i16[3] = _S0;
                        }
                        v636[4].f32[0] = v641;
                        v636[4].f32[1] = v642;
                        v636[5].i32[0] = v664;
                        _Q0.i64[0] = v887.i64[1];
                        v720 = v888;
                        _Q0.i64[1] = *((_QWORD *)&v885 + 1);
                        v721.i64[0] = 0xBF000000BF000000;
                        v721.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v721, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                        v636[6] = *(float32x2_t *)_Q0.f32;
                        _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                        __asm { FCVT            H0, S0 }
                        v636[7].i16[2] = _Q0.i16[0];
                        _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                        v722 = vmla_f32((float32x2_t)0xBF000000BF000000, v720, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877));
                        v636[7].i16[0] = (int)v722.f32[0];
                        v636[7].i16[1] = (int)v722.f32[1];
                        v723 = *(_QWORD *)(v571 + 112);
                        if (v723)
                        {
                          _S0 = *(_DWORD *)(v723 + 4 * v662);
                          __asm { FCVT            H0, S0 }
                          v636[7].i16[3] = _S0;
                        }
                        v636 += 8;
                        ++v687;
                      }
                      while (v673 != v687);
                    }
                    else
                    {
                      v670.f32[1] = v671;
                      v688 = vneg_f32(v670);
                      do
                      {
                        v701 = __sincosf_stret((float)((float)(v686 * (float)(int)v687) + -0.5) * v666);
                        v888.f32[0] = -(float)((float)(v661 * v701.__sinval) - (float)(v660 * v701.__cosval));
                        v888.f32[1] = (float)(v660 * v701.__sinval) + (float)(v661 * v701.__cosval);
                        *(float32x2_t *)v887.f32 = v888;
                        *(float32x2_t *)&v887.u32[2] = v688;
                        v636->f32[0] = v641;
                        v636->f32[1] = v642;
                        v636[1].i32[0] = v664;
                        _Q0.i64[0] = v887.i64[0];
                        _Q0.i64[1] = v885;
                        v703.i64[0] = 0xBF000000BF000000;
                        v703.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v703, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                        v636[2] = *(float32x2_t *)_Q0.f32;
                        _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                        __asm { FCVT            H0, S0 }
                        v636[3].i16[2] = _Q0.i16[0];
                        _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                        v704 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877), v888);
                        v636[3].i16[0] = (int)v704.f32[0];
                        v636[3].i16[1] = (int)v704.f32[1];
                        v705 = *(_QWORD *)(v571 + 112);
                        if (v705)
                        {
                          _S0 = *(_DWORD *)(v705 + 4 * v662);
                          __asm { FCVT            H0, S0 }
                          v636[3].i16[3] = _S0;
                        }
                        v636[4].f32[0] = v641;
                        v636[4].f32[1] = v642;
                        v636[5].i32[0] = v664;
                        _Q0.i64[0] = v887.i64[1];
                        v708 = v888;
                        _Q0.i64[1] = *((_QWORD *)&v885 + 1);
                        v709.i64[0] = 0xBF000000BF000000;
                        v709.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v709, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                        v636[6] = *(float32x2_t *)_Q0.f32;
                        _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                        __asm { FCVT            H0, S0 }
                        v636[7].i16[2] = _Q0.i16[0];
                        _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                        v710 = vmla_f32((float32x2_t)0xBF000000BF000000, v708, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877));
                        v636[7].i16[0] = (int)v710.f32[0];
                        v636[7].i16[1] = (int)v710.f32[1];
                        v711 = *(_QWORD *)(v571 + 112);
                        if (v711)
                        {
                          _S0 = *(_DWORD *)(v711 + 4 * v662);
                          __asm { FCVT            H0, S0 }
                          v636[7].i16[3] = _S0;
                        }
                        v636 += 8;
                        ++v687;
                      }
                      while (v673 != v687);
                      v539 = 1.0;
                    }
                    v678 = v846;
                    v606 = (float32x2_t)v842;
                  }
                  else
                  {
                    v887.i64[0] = __PAIR64__(LODWORD(v671), v670.u32[0]);
                    v887.f32[2] = -v670.f32[0];
                    v887.f32[3] = -v671;
                    v636->f32[0] = v641;
                    v636->f32[1] = v642;
                    v636[1].i32[0] = v664;
                    _Q0.i64[0] = v887.i64[0];
                    _Q0.i64[1] = v885;
                    v675.i64[0] = 0xBF000000BF000000;
                    v675.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v675, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                    v636[2] = *(float32x2_t *)_Q0.f32;
                    _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                    __asm { FCVT            H0, S0 }
                    v636[3].i16[2] = _Q0.i16[0];
                    _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                    v676 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877), v888);
                    v636[3].i16[0] = (int)v676.f32[0];
                    v636[3].i16[1] = (int)v676.f32[1];
                    v677 = *(_QWORD *)(v571 + 112);
                    v678 = v846;
                    v606 = (float32x2_t)v842;
                    if (v677)
                    {
                      _S0 = *(_DWORD *)(v677 + 4 * v662);
                      __asm { FCVT            H0, S0 }
                      v636[3].i16[3] = _S0;
                    }
                    v636[4].f32[0] = v641;
                    v636[4].f32[1] = v642;
                    v636[5].i32[0] = v664;
                    _Q0.i64[0] = v887.i64[1];
                    v681 = v888;
                    _Q0.i64[1] = *((_QWORD *)&v885 + 1);
                    v682.i64[0] = 0xBF000000BF000000;
                    v682.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v682, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
                    v636[6] = *(float32x2_t *)_Q0.f32;
                    _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v662);
                    __asm { FCVT            H0, S0 }
                    v636[7].i16[2] = _Q0.i16[0];
                    _Q0.i32[0] = *(_DWORD *)(v571 + 124);
                    v683 = vmla_f32((float32x2_t)0xBF000000BF000000, v681, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0x45FFFF0000000001), 0), (int8x8_t)v871, v877));
                    v636[7].i16[0] = (int)v683.f32[0];
                    v636[7].i16[1] = (int)v683.f32[1];
                    v684 = *(_QWORD *)(v571 + 112);
                    if (v684)
                    {
                      _S0 = *(_DWORD *)(v684 + 4 * v662);
                      __asm { FCVT            H0, S0 }
                      v636[7].i16[3] = _S0;
                    }
                    v636 += 8;
                  }
                  v603 = sqrtf((float)((float)(v838 - v641) * (float)(v838 - v641))+ (float)((float)(v840 - v642) * (float)(v840 - v642)))+ v678;
                  --v638;
                  v637 += 3;
                  v639 = v643;
                  v575 = v829;
                }
                while (v643 != v831);
              }
              v725 = &v575[3 * v831];
              v726 = &v575[3 * v827];
              v727 = *v725;
              if (vabds_f32(*v725, *v726) >= 1.0e-10)
              {
                v729 = v725[1];
                v732 = v729 - v726[1];
                v730.i64[0] = 0x1000100010001;
                v730.i64[1] = 0x1000100010001;
                v566 = v825;
                v568 = v823;
              }
              else
              {
                v728 = v726[1];
                v729 = v725[1];
                v730.i64[0] = 0x1000100010001;
                v730.i64[1] = 0x1000100010001;
                v566 = v825;
                v568 = v823;
                if (vabds_f32(v729, v728) < 1.0e-10)
                {
                  v731 = v606.f32[1];
                  goto LABEL_805;
                }
                v732 = v729 - v728;
              }
              v733 = v727 - *v726;
              v734 = v539 / sqrtf((float)(v733 * v733) + (float)(v732 * v732));
              v606.f32[0] = v734 * v733;
              v731 = v734 * v732;
              v606.f32[1] = v731;
LABEL_805:
              v540 = v821;
              v887.f32[0] = -v731;
              *(uint64_t *)((char *)v887.i64 + 4) = __PAIR64__(LODWORD(v731), v606.u32[0]);
              v887.f32[3] = -v606.f32[0];
              v735 = v833[v831];
              v736 = *((_DWORD *)v725 + 2);
              v888.f32[0] = -v731;
              v888.i32[1] = v606.i32[0];
              *(float *)&v886 = v603;
              *((float *)&v886 + 1) = v603 * v830;
              v636->f32[0] = v727;
              v636->f32[1] = v729;
              v636[1].i32[0] = v736;
              _Q4.i64[0] = v887.i64[0];
              _Q4.i64[1] = v885;
              v738.i64[0] = 0xBF000000BF000000;
              v738.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q4.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v738, (float32x4_t)xmmword_19FFB2FA0, _Q4)));
              v636[2] = *(float32x2_t *)_Q4.f32;
              _Q4.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v735);
              __asm { FCVT            H4, S4 }
              v636[3].i16[2] = _Q4.i16[0];
              _Q4.i32[0] = *(_DWORD *)(v571 + 124);
              v739 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q4.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877), v888);
              v636[3].i16[0] = (int)v739.f32[0];
              v636[3].i16[1] = (int)v739.f32[1];
              v740 = *(_QWORD *)(v571 + 112);
              if (v740)
              {
                _S4 = *(_DWORD *)(v740 + 4 * v735);
                __asm { FCVT            H4, S4 }
                v636[3].i16[3] = _S4;
              }
              v636[4].f32[0] = v727;
              v636[4].f32[1] = v729;
              v636[5].i32[0] = v736;
              _Q4.i64[0] = v887.i64[1];
              v743 = v888;
              _Q4.i64[1] = *((_QWORD *)&v885 + 1);
              v744.i64[0] = 0xBF000000BF000000;
              v744.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q4.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v744, (float32x4_t)xmmword_19FFB2FA0, _Q4)));
              v636[6] = *(float32x2_t *)_Q4.f32;
              _Q4.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v735);
              __asm { FCVT            H4, S4 }
              v636[7].i16[2] = _Q4.i16[0];
              _Q4.i32[0] = *(_DWORD *)(v571 + 124);
              *(int8x8_t *)v744.f32 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q4.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877);
              v745 = v743;
              v746 = vmla_f32((float32x2_t)0xBF000000BF000000, v743, *(float32x2_t *)v744.f32);
              v636[7].i16[0] = (int)v746.f32[0];
              v636[7].i16[1] = (int)v746.f32[1];
              v747 = *(_QWORD *)(v571 + 112);
              if (v747)
              {
                _S5 = *(_DWORD *)(v747 + 4 * v735);
                __asm { FCVT            H5, S5 }
                v636[7].i16[3] = _S5;
              }
              *(float32x2_t *)v749.f32 = v606;
              *(float32x2_t *)&v749.u32[2] = v606;
              *(int32x2_t *)v750.f32 = vdup_lane_s32((int32x2_t)v606, 0);
              v750.f32[0] = v731;
              v750.i64[1] = v750.i64[0];
              v751 = vsubq_f32(v749, v750);
              _Q5 = vaddq_f32(v749, v750);
              _Q5.i32[0] = v751.i32[0];
              _Q5.i32[3] = v751.i32[3];
              v887 = _Q5;
              v753 = *(_OWORD *)&v884[8];
              v636[8].f32[0] = v727;
              v636[8].f32[1] = v729;
              v636[9].i32[0] = v736;
              _Q5.i64[1] = v753;
              v750.i64[0] = 0xBF000000BF000000;
              v750.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q5.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v750, (float32x4_t)xmmword_19FFB2FA0, _Q5)));
              v636[10] = *(float32x2_t *)_Q5.f32;
              _Q5.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v735);
              __asm { FCVT            H5, S5 }
              v636[11].i16[2] = _Q5.i16[0];
              _Q5.i32[0] = *(_DWORD *)(v571 + 124);
              *(float32x2_t *)v750.f32 = vmla_f32((float32x2_t)0xBF000000BF000000, v745, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q5.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877));
              v885 = v753;
              v636[11].i16[0] = (int)v750.f32[0];
              v636[11].i16[1] = (int)v750.f32[1];
              v754 = *(_QWORD *)(v571 + 112);
              if (v754)
              {
                _S3 = *(_DWORD *)(v754 + 4 * v735);
                __asm { FCVT            H3, S3 }
                v636[11].i16[3] = _S3;
              }
              v636[12].f32[0] = v727;
              v636[12].f32[1] = v729;
              v636[13].i32[0] = v736;
              _Q0.i64[0] = v887.i64[1];
              v757 = v888;
              _Q0.i64[1] = *((_QWORD *)&v885 + 1);
              v758.i64[0] = 0xBF000000BF000000;
              v758.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)_Q0.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v758, (float32x4_t)xmmword_19FFB2FA0, _Q0)));
              v636[14] = *(float32x2_t *)_Q0.f32;
              _Q0.i32[0] = *(_DWORD *)(*(_QWORD *)(v571 + 104) + 4 * v735);
              __asm { FCVT            H0, S0 }
              v636[15].i16[2] = _Q0.i16[0];
              _Q0.i32[0] = *(_DWORD *)(v571 + 124);
              v759 = vmla_f32((float32x2_t)0xBF000000BF000000, v757, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)0xBF80000000000001), 0), (int8x8_t)v871, v877));
              v636[15].i16[0] = (int)v759.f32[0];
              v636[15].i16[1] = (int)v759.f32[1];
              v760 = *(_QWORD *)(v571 + 112);
              if (v760)
              {
                _S0 = *(_DWORD *)(v760 + 4 * v735);
                __asm { FCVT            H0, S0 }
                v636[15].i16[3] = _S0;
              }
              v762 = *(_QWORD *)(v571 + 8);
              v763 = *(_QWORD *)(v571 + 16) - v762;
              v764 = v763 >> 1;
              v564 = v824;
              v565 = v822;
              if (v763 >= 4)
              {
                v765 = *(_QWORD *)(v571 + 8);
                v766 = 2;
                if (v764 > 2)
                  v766 = v764;
                if (v766 >= 3)
                {
                  v769 = 0;
                  v770 = v766 - 1;
                  v771 = (v766 - 1) & 0xFFFFFFFFFFFFFFFELL;
                  v772 = v828 + 6;
                  do
                  {
                    v773 = v762 + 2 * v769;
                    *(v772 - 6) = v773;
                    *v772 = v773 + 2;
                    *(v772 - 5) = v773 + 1;
                    v772[1] = v773 + 3;
                    *(v772 - 4) = v773 + 2;
                    v772[2] = v773 + 4;
                    *(v772 - 3) = v773 + 1;
                    v772[3] = v773 + 3;
                    *(v772 - 2) = v773 + 3;
                    v772[4] = v773 + 5;
                    v769 += 2;
                    *(v772 - 1) = v773 + 2;
                    v772[5] = v773 + 4;
                    v772 += 12;
                  }
                  while (v771 != v769);
                  if (v770 != v771)
                  {
                    v767 = v770 | 1;
                    LODWORD(v765) = 2 * v771 + v762;
                    v768 = &v828[6 * v771];
                    goto LABEL_822;
                  }
                }
                else
                {
                  v767 = 1;
                  v768 = v828;
LABEL_822:
                  v774 = v766 - v767;
                  do
                  {
                    *v768 = v765;
                    v775 = v765 + 1;
                    v768[1] = v765 + 1;
                    v776 = v765 + 3;
                    LODWORD(v765) = v765 + 2;
                    v768[2] = v765;
                    v768[3] = v775;
                    v768[4] = v776;
                    v768[5] = v765;
                    v768 += 6;
                    --v774;
                  }
                  while (v774);
                }
              }
              if (*(_QWORD *)(v571 + 48) != *(_QWORD *)(v571 + 40) && v764 - 1 >= 3)
              {
                v777 = v764 - 3;
                if (v764 - 3 >= 8)
                {
                  v780 = v777 & 0xFFFFFFFFFFFFFFF8;
                  v781 = (int64x2_t)xmmword_19FFB2FD0;
                  v782 = (int64x2_t)xmmword_19FFB2FE0;
                  v783 = (int64x2_t)xmmword_19FFB2FF0;
                  v784 = (int64x2_t)xmmword_19FFB3000;
                  v785 = (__int16 *)v568;
                  v786 = v777 & 0xFFFFFFFFFFFFFFF8;
                  v787 = vdupq_n_s64(v762);
                  do
                  {
                    v897.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v787, vaddq_s64(v784, v784)), (int32x4_t)vaddq_s64(v787, vaddq_s64(v783, v783))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v787, vaddq_s64(v782, v782)), (int32x4_t)vaddq_s64(v787, vaddq_s64(v781, v781))));
                    v897.val[0] = vaddq_s16(v897.val[1], v730);
                    vst2q_s16(v785, v897);
                    v785 += 16;
                    v897.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v782 = vaddq_s64(v782, (int64x2_t)v897.val[0]);
                    v783 = vaddq_s64(v783, (int64x2_t)v897.val[0]);
                    v784 = vaddq_s64(v784, (int64x2_t)v897.val[0]);
                    v781 = vaddq_s64(v781, (int64x2_t)v897.val[0]);
                    v786 -= 8;
                  }
                  while (v786);
                  if (v777 != v780)
                  {
                    v778 = v780 | 2;
                    v779 = (_WORD *)(v568 + 4 * (v777 & 0xFFFFFFFFFFFFFFF8));
                    goto LABEL_832;
                  }
                }
                else
                {
                  v778 = 2;
                  v779 = (_WORD *)v568;
LABEL_832:
                  v788 = ~v778 + v764;
                  v789 = v762 + 2 * v778;
                  do
                  {
                    *v779 = v789 - 2;
                    v779[1] = v789;
                    v789 += 2;
                    v779 += 2;
                    --v788;
                  }
                  while (v788);
                }
              }
            }
            v571 = *v564;
            v572 = *(_QWORD *)(*v564 + 8);
            v570 = *(_QWORD *)(*v564 + 16);
            v569 = (uint64_t)v828;
            goto LABEL_725;
          }
LABEL_835:
          {
            v812 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v812, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v791 = (_QWORD *)*v818;
          if (*v818)
          {
            v792 = (_QWORD *)v820[8];
            v793 = (_QWORD *)*v818;
            if (v792 != v791)
            {
              do
              {
                v795 = (void (***)(_QWORD, _QWORD *))*--v792;
                v794 = v795;
                *v792 = 0;
                if (v795)
                {
                  (**v794)(v794, v793);
                  if ((v796 & 1) == 0
                  {
                    v797 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v797, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v794, 128);
                }
              }
              while (v792 != v791);
              v793 = (_QWORD *)*v818;
            }
            v820[8] = v791;
            (*(void (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)v820[10] + 40))(v820[10], v793, v820[9] - (_QWORD)v793);
            *v818 = 0;
            v820[8] = 0;
            v820[9] = 0;
          }
          *v818 = 0;
          v820[8] = 0;
          v820[9] = 0;
          v531 = a1;
          if (v878.__begin_)
            operator delete(v878.__begin_);
          if (v879[0])
            operator delete(v879[0]);
          if (v883)
          {
            value = __p.__end_cap_.__value_;
            v799 = v881;
            if (v881 != __p.__end_cap_.__value_)
            {
              v800 = __p.__end_;
              v801 = v882;
              v802 = HIBYTE(v882);
              if (__p.__begin_ && *((_BYTE *)__p.__end_ + 17) != 2)
                (*(void (**)(std::vector<unsigned int>::pointer, uint64_t))(*(_QWORD *)__p.__begin_ + 64))(__p.__begin_, v883);
              if (v801 && !v802)
              {
                v803 = (unsigned int *)*((_QWORD *)v800 + 7);
                v804 = (unsigned int *)*((_QWORD *)v800 + 8);
                if (v804 == v803)
                  v803 = (unsigned int *)(*((_QWORD *)v800 + 10) - *((_QWORD *)v800 + 9));
                if (value < v803)
                  v803 = value;
                if (v804 <= v799)
                  v804 = v799;
                if (v804 == v803)
                  v804 = (unsigned int *)((char *)v803 + *((_QWORD *)v800 + 10) - *((_QWORD *)v800 + 9));
                *((_QWORD *)v800 + 7) = v803;
                *((_QWORD *)v800 + 8) = v804;
              }
            }
          }
          if (v894)
          {
            v806 = v891;
            v805 = v892;
            if (v892 != v891)
            {
              v807 = (_QWORD *)*((_QWORD *)&v890 + 1);
              v808 = v893;
              v809 = BYTE1(v893);
              if ((_QWORD)v890 && *(_BYTE *)(*((_QWORD *)&v890 + 1) + 17) != 2)
                (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v890 + 64))(v890, v894);
              if (v808 && !v809)
              {
                v810 = v807[7];
                v811 = v807[8];
                if (v811 == v810)
                  v810 = v807[10] - v807[9];
                if (v806 < v810)
                  v810 = v806;
                if (v811 <= v805)
                  v811 = v805;
                if (v811 == v810)
                  v811 = v810 + v807[10] - v807[9];
                v807[7] = v810;
                v807[8] = v811;
              }
            }
          }
          v542 = v819 + 1;
          v541 = v816;
        }
        v538 = v815 + 8;
      }
      while (v815 + 8 != v814);
    }
    return (uint64_t)v531;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19F428B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a68;
  uint64_t v68;
  void *v70;
  void *v71;
  void *v72;

  MEMORY[0x1A1AF4E00](v68, 0x1020C4007FF0C4BLL);
  v70 = (void *)STACK[0x238];
  if (STACK[0x210])
    operator delete((void *)STACK[0x210]);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a68);
  v71 = *a61;
  if (*a61)
  {
    *(_QWORD *)(a43 + 40) = v71;
    operator delete(v71);
  }
  v72 = *a57;
  if (*a57)
  {
    *(_QWORD *)(a43 + 16) = v72;
    operator delete(v72);
    if (!v70)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v70)
  {
    goto LABEL_3;
  }
  operator delete(v70);
  goto LABEL_3;
}

void md::DaVinciTrafficLayer::~DaVinciTrafficLayer(md::DaVinciTrafficLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C8C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C8C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF3E8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C8C0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C8C0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

gdc::GlobeTileGrid *gdc::GlobeTileGrid::GlobeTileGrid(gdc::GlobeTileGrid *this, const QuadTile *a2)
{
  int64x2_t v3;
  int64x2_t v4;
  __int128 v5;
  double v6;

  *(_WORD *)this = 255;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB3010;
  *(int64x2_t *)((char *)this + 88) = v3;
  v4 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)((char *)this + 104) = v4;
  *((_QWORD *)this + 15) = 0xFFEFFFFFFFFFFFFFLL;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = xmmword_19FFB3010;
  *((int64x2_t *)this + 12) = v3;
  *((int64x2_t *)this + 13) = v4;
  *((_QWORD *)this + 28) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 35) = 0x3FF0000000000000;
  *((int64x2_t *)this + 18) = v3;
  *((_OWORD *)this + 19) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 20) = v4;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = xmmword_19FFB3010;
  *((int64x2_t *)this + 25) = v3;
  *((int64x2_t *)this + 26) = v4;
  *((_QWORD *)this + 54) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((int64x2_t *)this + 31) = v3;
  *((_OWORD *)this + 32) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 33) = v4;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = xmmword_19FFB3010;
  *((int64x2_t *)this + 38) = v3;
  *((int64x2_t *)this + 39) = v4;
  *((_QWORD *)this + 80) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_QWORD *)this + 87) = 0x3FF0000000000000;
  *((int64x2_t *)this + 44) = v3;
  *((_OWORD *)this + 45) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 46) = v4;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = xmmword_19FFB3010;
  *((int64x2_t *)this + 51) = v3;
  *((int64x2_t *)this + 52) = v4;
  *((_QWORD *)this + 106) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_QWORD *)this + 113) = 0x3FF0000000000000;
  *((int64x2_t *)this + 57) = v3;
  *((_OWORD *)this + 58) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 59) = v4;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = xmmword_19FFB3010;
  *((int64x2_t *)this + 64) = v3;
  *((int64x2_t *)this + 65) = v4;
  *((_QWORD *)this + 132) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_QWORD *)this + 139) = 0x3FF0000000000000;
  *((int64x2_t *)this + 70) = v3;
  *((_OWORD *)this + 71) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 72) = v4;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 76) = xmmword_19FFB3010;
  *((int64x2_t *)this + 77) = v3;
  *((int64x2_t *)this + 78) = v4;
  *((_QWORD *)this + 158) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *((_QWORD *)this + 165) = 0x3FF0000000000000;
  *((int64x2_t *)this + 83) = v3;
  *((_OWORD *)this + 84) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 85) = v4;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 89) = xmmword_19FFB3010;
  *((int64x2_t *)this + 90) = v3;
  *((int64x2_t *)this + 91) = v4;
  *((_QWORD *)this + 184) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *((_QWORD *)this + 191) = 0x3FF0000000000000;
  *((int64x2_t *)this + 96) = v3;
  *((_OWORD *)this + 97) = xmmword_19FFB2E00;
  *((int64x2_t *)this + 98) = v4;
  *((_OWORD *)this + 101) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 102) = xmmword_19FFB3010;
  *((int64x2_t *)this + 103) = v3;
  *((int64x2_t *)this + 104) = v4;
  *((_QWORD *)this + 210) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_QWORD *)this + 217) = 0x3FF0000000000000;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *((_QWORD *)this + 224) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *((_QWORD *)this + 231) = 0x3FF0000000000000;
  *((_OWORD *)this + 118) = 0u;
  *((_OWORD *)this + 117) = 0u;
  *((_OWORD *)this + 116) = 0u;
  *((_QWORD *)this + 238) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *((_QWORD *)this + 245) = 0x3FF0000000000000;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_QWORD *)this + 252) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *((_QWORD *)this + 259) = 0x3FF0000000000000;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_QWORD *)this + 266) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *((_QWORD *)this + 273) = 0x3FF0000000000000;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_OWORD *)this + 137) = 0u;
  *((_QWORD *)this + 280) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(_OWORD *)((char *)this + 2280) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *((_QWORD *)this + 287) = 0x3FF0000000000000;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_QWORD *)this + 294) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 2376) = 0u;
  *(_OWORD *)((char *)this + 2392) = 0u;
  *(_OWORD *)((char *)this + 2360) = 0u;
  *((_QWORD *)this + 301) = 0x3FF0000000000000;
  *((_OWORD *)this + 153) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_QWORD *)this + 308) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *((_QWORD *)this + 315) = 0x3FF0000000000000;
  *((_OWORD *)this + 160) = 0u;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *((_QWORD *)this + 322) = 0x3FF0000000000000;
  *((_QWORD *)this + 323) = 0;
  *((_DWORD *)this + 648) = 0;
  v5 = *(_OWORD *)&a2->_type;
  *((_QWORD *)this + 2) = a2->_hash;
  *(_OWORD *)this = v5;
  __powidf2();
  *(float *)&v6 = v6 * 0.0000000748596064;
  *((_DWORD *)this + 648) = LODWORD(v6);
  return this;
}

uint64_t gdc::GlobeTileGrid::endBuildingHeightRange(gdc::GlobeTileGrid *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  float64x2_t *v18;
  double v19;
  double v20;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v38;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t result;
  int v44;
  uint64_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54[5];

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v44 = 4 * *((_DWORD *)this + 2);
  v5 = 1 << (*((_BYTE *)this + 1) + 2);
  v6 = 1.0 / (double)v5;
  v7 = *((_QWORD *)this + 323);
  v8 = v5 - 4 * *((_DWORD *)this + 1) - 4;
  v9 = 4;
  do
  {
    v10 = 0;
    v11 = (double)(v44 + (int)v4);
    v12 = v6 * v11;
    v13 = v6 + v11 * v6;
    v45 = v2;
    v14 = v3;
    v15 = v9;
    do
    {
      v16 = *(float *)(v7 + v15 - 4);
      v17 = *(float *)(v7 + v15);
      v54[0] = v12;
      v54[1] = v6 * (double)(v8 + (int)v10);
      v54[2] = v13;
      v54[3] = v6 + (double)(v8 + (int)v10) * v6;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v46, v54, v16, v17);
      v18 = (float64x2_t *)((char *)this + v2);
      v19 = v49;
      v20 = v50;
      v18[4].f64[0] = v49;
      v18[4].f64[1] = v20;
      _D2 = v46;
      v22 = v51;
      v18[1].f64[1] = v46;
      v23 = v52;
      v18[5] = v22;
      v18[6] = v23;
      v18[7] = v53;
      v22.f64[0] = -v19;
      v24 = (float64x2_t *)((char *)this + v14);
      _Q4 = v48;
      v26 = v47;
      v27.f64[1] = v47.f64[1];
      v27.f64[0] = _D2;
      v28 = vnegq_f64(v48);
      v29.f64[1] = v48.f64[1];
      v29.f64[0] = v19;
      v30 = (int8x16_t)vmulq_f64(v27, v29);
      v31 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48.f64[0], 0);
      v31.f64[0] = v19;
      v32 = vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v30, v30, 8uLL)), v31, v47);
      __asm { FMLA            D17, D2, V4.D[1] }
      v38 = vaddq_f64(v32, v32);
      v18[2] = v47;
      v18[3] = _Q4;
      _D17 = _D17 + _D17;
      v40.f64[0] = v26.f64[0];
      v40.f64[1] = _D17 * v20;
      v41 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v38.f64[0], 0);
      v41.f64[0] = _D17;
      v26.f64[0] = vmuld_lane_f64(v20, v38, 1);
      __asm { FMLA            D0, D17, V4.D[1] }
      v24[107] = v28;
      v24[108].f64[1] = v20;
      ++v10;
      v24[108].f64[0] = v22.f64[0];
      v24[105].f64[1] = _D0;
      v24[106] = vmlaq_f64(vnegq_f64(vaddq_f64(v26, vmlaq_f64(v40, _Q4, v41))), v31, v38);
      v15 += 32;
      v14 += 224;
      v2 += 416;
    }
    while (v10 != 4);
    ++v4;
    v9 += 8;
    v3 += 56;
    v2 = v45 + 104;
  }
  while (v4 != 4);
  result = MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
  *((_QWORD *)this + 323) = 0;
  return result;
}

uint64_t *std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 2584);
    if (v3)
      MEMORY[0x1A1AF4DE8](v3, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v2, 0x1020C4007FF0C4BLL);
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFD80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFD80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 128);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 128);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 128);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 128);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 128);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 128);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 128);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 128);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 128);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 128);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 128);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 128);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 128);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 128);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 128);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 128);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v14;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 64);
      v5 = *(_QWORD *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          v8 = (void (***)(_QWORD, uint64_t))*--v4;
          v7 = v8;
          *v4 = 0;
          if (v8)
          {
            (**v7)(v7, v5);
            {
              v14 = v3;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v3 = v14;
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
          }
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v5, *(_QWORD *)(v2 + 72) - v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C4010FC18DELL);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, uint64_t);
  void (***v9)(_QWORD, uint64_t);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      v5 = (_QWORD *)v2[3];
      if (v5)
      {
        v6 = (_QWORD *)v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, uint64_t))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = (uint64_t)v5;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, v2[5] - v3);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 56);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v14, 8 * a1[1]);
  return a1;
}

BOOL md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;

  v2 = 3;
  if ((a1 & 0xF000) == 0)
    v2 = 0;
  if ((a1 & 0xF00) != 0)
    v2 = 2;
  if ((a1 & 0xF0) != 0)
    v2 = 1;
  if ((a1 & 0xF) != 0)
    v2 = 0;
  v3 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v2];
  v4 = *(unsigned int *)(a2 + 96);
  v5 = 3;
  if ((v4 & 0xF000) == 0)
    v5 = 0;
  if ((v4 & 0xF00) != 0)
    v5 = 2;
  if ((v4 & 0xF0) != 0)
    v5 = 1;
  if ((v4 & 0xF) != 0)
    v5 = 0;
  return ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)a1 >> 12] << 12) | (v3 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(a1 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[a1 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[a1 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v4 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v5] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v4 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v4 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v4 & 0xF]);
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *a1;
  v8 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1);
  v9 = *a3;
  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v13 = *a3;
      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), v7);
      if (!result)
        return result;
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    v11 = *a2;
    v12 = *a1;
    result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1, a2, a3);
  v10 = *a4;
  v11 = *a3;
  if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a4 + 96), *a3))
  {
    *a3 = v10;
    *a4 = v11;
    v12 = *a3;
    v13 = *a2;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), *a2))
    {
      *a2 = v12;
      *a3 = v13;
      v14 = *a2;
      v15 = *a1;
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1))
      {
        *a1 = v14;
        *a2 = v15;
      }
    }
  }
  v16 = *a5;
  v17 = *a4;
  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a5 + 96), *a4);
  if (result)
  {
    *a4 = v16;
    *a5 = v17;
    v19 = *a4;
    v20 = *a3;
    result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a4 + 96), *a3);
    if (result)
    {
      *a3 = v19;
      *a4 = v20;
      v21 = *a3;
      v22 = *a2;
      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), *a2);
      if (result)
      {
        *a2 = v21;
        *a3 = v22;
        v23 = *a2;
        v24 = *a1;
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1);
        if (result)
        {
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 128);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 128);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_80c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  a1[10] = 0;
  a1[11] = 0;
  result = a2[13];
  a1[12] = 0;
  a1[13] = result;
  v4 = (char *)a2[10];
  v5 = (char *)a2[11];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      abort();
    v7 = v6 >> 3;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    a1[10] = result;
    a1[11] = result;
    a1[12] = result + 8 * v7;
    do
    {
      if (result)
        *(_QWORD *)result = *(_QWORD *)v4;
      v4 += 8;
      result += 8;
    }
    while (v4 != v5);
    a1[11] = result;
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_80c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 80);
  if (v1)
  {
    *(_QWORD *)(result + 88) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 104) + 40))(*(_QWORD *)(result + 104), v1, *(_QWORD *)(result + 96) - v1);
  }
  return result;
}

BOOL md::trafficVisibleAtSpeed(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  float v8;
  _BOOL4 v9;
  float v12;
  _BOOL4 v13;
  float v15;
  _BOOL4 v16;
  float v18;
  _BOOL4 v19;
  unsigned int v21;
  float v22;
  _BOOL4 v23;
  unsigned int v25;
  _BOOL4 v26;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v34;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  char *v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v47 = v5;
  v48 = v4;
  v49 = v2;
  v50 = v3;
  switch(a2)
  {
    case 0:
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      v7 = *(float **)v6;
      if (*(_QWORD *)v6)
      {
        v8 = *v7;
        v9 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v8 != 0.0 && v8 != 1.0)
            goto LABEL_37;
        }
      }
      else
      {
        v9 = 0;
      }
      v21 = *(unsigned __int8 *)(v6 + v9 + 11);
      if (v21 != 2)
        goto LABEL_39;
LABEL_37:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x2Au, 0) & 1) != 0)
        goto LABEL_40;
      v21 = 1;
LABEL_39:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v6, 0x2Au, v21))
        goto LABEL_87;
LABEL_40:
      if (v7)
      {
        v22 = *v7;
        v23 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v22 != 0.0 && v22 != 1.0)
            goto LABEL_101;
        }
      }
      else
      {
        v23 = 0;
      }
      v36 = *(unsigned __int8 *)(v6 + v23 + 11);
      v22 = 0.0;
      if (v36 == 2)
      {
LABEL_101:
        v46 = 1;
        v45 = 1;
        v37 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v6, 0x2Au, 0, &v46);
        v38 = v6;
        v39 = 42;
        goto LABEL_111;
      }
      v40 = v6;
      v41 = 42;
      goto LABEL_119;
    case 1:
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      v7 = *(float **)v6;
      if (*(_QWORD *)v6)
      {
        v12 = *v7;
        v13 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v12 != 0.0 && v12 != 1.0)
            goto LABEL_50;
        }
      }
      else
      {
        v13 = 0;
      }
      v25 = *(unsigned __int8 *)(v6 + v13 + 11);
      if (v25 != 2)
        goto LABEL_52;
LABEL_50:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x35u, 0) & 1) != 0)
        goto LABEL_53;
      v25 = 1;
LABEL_52:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v6, 0x35u, v25))
        goto LABEL_87;
LABEL_53:
      if (v7)
      {
        v22 = *v7;
        v26 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v22 != 0.0 && v22 != 1.0)
            goto LABEL_104;
        }
      }
      else
      {
        v26 = 0;
      }
      v36 = *(unsigned __int8 *)(v6 + v26 + 11);
      v22 = 0.0;
      if (v36 == 2)
      {
LABEL_104:
        v46 = 1;
        v45 = 1;
        v37 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v6, 0x35u, 0, &v46);
        v38 = v6;
        v39 = 53;
        goto LABEL_111;
      }
      v40 = v6;
      v41 = 53;
      goto LABEL_119;
    case 2:
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      v7 = *(float **)v6;
      if (*(_QWORD *)v6)
      {
        v15 = *v7;
        v16 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v15 != 0.0 && v15 != 1.0)
            goto LABEL_63;
        }
      }
      else
      {
        v16 = 0;
      }
      v28 = *(unsigned __int8 *)(v6 + v16 + 11);
      if (v28 != 2)
        goto LABEL_65;
LABEL_63:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x40u, 0) & 1) != 0)
        goto LABEL_66;
      v28 = 1;
LABEL_65:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v6, 0x40u, v28))
        goto LABEL_87;
LABEL_66:
      if (v7)
      {
        v22 = *v7;
        v29 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v22 != 0.0 && v22 != 1.0)
            goto LABEL_107;
        }
      }
      else
      {
        v29 = 0;
      }
      v36 = *(unsigned __int8 *)(v6 + v29 + 11);
      v22 = 0.0;
      if (v36 == 2)
      {
LABEL_107:
        v46 = 1;
        v45 = 1;
        v37 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v6, 0x40u, 0, &v46);
        v38 = v6;
        v39 = 64;
        goto LABEL_111;
      }
      v40 = v6;
      v41 = 64;
LABEL_119:
      v44 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v40, v41, v36, 0);
      return v44 != 0;
    case 3:
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      v7 = *(float **)v6;
      if (*(_QWORD *)v6)
      {
        v18 = *v7;
        v19 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v18 != 0.0 && v18 != 1.0)
            goto LABEL_76;
        }
      }
      else
      {
        v19 = 0;
      }
      v31 = *(unsigned __int8 *)(v6 + v19 + 11);
      if (v31 != 2)
        goto LABEL_78;
LABEL_76:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x4Bu, 0) & 1) != 0)
        goto LABEL_79;
      v31 = 1;
LABEL_78:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v6, 0x4Bu, v31))
      {
LABEL_87:
        if (v7)
        {
          v22 = *v7;
          v34 = *v7 == 1.0;
          if (*(_BYTE *)(v6 + 10))
          {
            if (v22 != 0.0 && v22 != 1.0)
            {
LABEL_97:
              v46 = 1;
              v45 = 1;
              v37 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v6, 0xA5u, 0, &v46);
              v38 = v6;
              v39 = 165;
              goto LABEL_111;
            }
          }
        }
        else
        {
          v34 = 0;
        }
        v36 = *(unsigned __int8 *)(v6 + v34 + 11);
        v22 = 0.0;
        if (v36 != 2)
        {
          v40 = v6;
          v41 = 165;
          goto LABEL_119;
        }
        goto LABEL_97;
      }
LABEL_79:
      if (v7)
      {
        v22 = *v7;
        v32 = *v7 == 1.0;
        if (*(_BYTE *)(v6 + 10))
        {
          if (v22 != 0.0 && v22 != 1.0)
            goto LABEL_110;
        }
      }
      else
      {
        v32 = 0;
      }
      v36 = *(unsigned __int8 *)(v6 + v32 + 11);
      v22 = 0.0;
      if (v36 != 2)
      {
        v40 = v6;
        v41 = 75;
        goto LABEL_119;
      }
LABEL_110:
      v46 = 1;
      v45 = 1;
      v37 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v6, 0x4Bu, 0, &v46);
      v38 = v6;
      v39 = 75;
LABEL_111:
      v42 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v38, v39, 1u, &v45);
      if (v22 >= 1.0)
        v43 = (char *)v42;
      else
        v43 = (char *)v37;
      v44 = *v43;
      return v44 != 0;
    default:
      return a2 & 1;
  }
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(unint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 ***v10;
  unsigned __int16 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,BOOL>(a2);
  }
  v5 = (char *)(result + 16 * a3);
  v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_31:
    v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      v11 = *v24;
      v25 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        LOWORD(v33) = 0;
        goto LABEL_66;
      }
      v26 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
      {
        v34 = 2 * v25;
        v35 = *v11;
        while (*v35 != a2)
        {
          ++v35;
          v34 -= 2;
          if (!v34)
          {
            v35 = (unsigned __int16 *)(v26 + 2 * v25);
            break;
          }
        }
        v33 = ((unint64_t)v35 - v26) >> 1;
LABEL_66:
        if ((_DWORD)v25 != (unsigned __int16)v33)
        {
          v42 = *((unsigned __int16 *)v11 + 13);
          if (!*((_WORD *)v11 + 13))
            return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          v30 = v11[2];
          if (*((_BYTE *)v11 + 31))
          {
            if (v42 >= 0x1E)
            {
              v54 = v11[2];
              v55 = *((unsigned __int16 *)v11 + 13);
              do
              {
                v56 = v55 >> 1;
                v57 = &v54[v55 >> 1];
                v59 = *v57;
                v58 = v57 + 1;
                v55 += ~(v55 >> 1);
                if (v59 < a2)
                  v54 = v58;
                else
                  v55 = v56;
              }
              while (v55);
              if (v54 == &v30[v42] || *v54 != a2)
                return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              v31 = (unint64_t)((char *)v54 - (char *)v30) >> 1;
            }
            else
            {
              v31 = 0;
              result = (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              while (1)
              {
                v43 = v30[v31];
                if (v43 >= a2)
                  break;
                if (v42 == ++v31)
                  return result;
              }
              if (v43 != a2)
                LOWORD(v31) = *((_WORD *)v11 + 13);
            }
          }
          else
          {
            v46 = 2 * v42;
            v47 = v11[2];
            while (*v47 != a2)
            {
              ++v47;
              v46 -= 2;
              if (!v46)
              {
                v47 = &v30[v42];
                break;
              }
            }
            v31 = (unint64_t)((char *)v47 - (char *)v30) >> 1;
          }
          if ((_DWORD)v42 == (unsigned __int16)v31)
            return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          if (v42 <= (unsigned __int16)v31)
            return result;
          return (unint64_t)v30 + *((unsigned __int16 *)v11 + 12) + (unsigned __int16)v31;
        }
        goto LABEL_67;
      }
      if (v25 < 0x1E)
      {
        v27 = 0;
        while (1)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * v27);
          if (v28 >= a2)
            break;
          if (v25 == ++v27)
            goto LABEL_67;
        }
        if (v28 == a2)
          LOWORD(v33) = v27;
        else
          LOWORD(v33) = *((_WORD *)v11 + 5);
        goto LABEL_66;
      }
      v36 = *v11;
      v37 = *((unsigned __int16 *)v11 + 5);
      do
      {
        v38 = v37 >> 1;
        v39 = &v36[v37 >> 1];
        v41 = *v39;
        v40 = v39 + 1;
        v37 += ~(v37 >> 1);
        if (v41 < a2)
          v36 = v40;
        else
          v37 = v38;
      }
      while (v37);
      if (v36 != (unsigned __int16 *)(v26 + 2 * v25) && *v36 == a2)
      {
        v33 = ((unint64_t)v36 - v26) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,BOOL>(a2);
  }
  v7 = *((_QWORD *)v5 + 6);
  v8 = v7 + 8 * v6;
  while (1)
  {
    v10 = *(unsigned __int16 ****)(*(_QWORD *)v7 + 72);
    if (v10)
    {
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        v13 = (uint64_t)*v11;
        if (*((_BYTE *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            v18 = *v11;
            v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              v20 = v19 >> 1;
              v21 = &v18[v19 >> 1];
              v23 = *v21;
              v22 = v21 + 1;
              result = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2)
                v18 = v22;
              else
                v19 = v20;
            }
            while (v19);
            if (v18 == (unsigned __int16 *)(v13 + 2 * v12) || *v18 != a2)
              goto LABEL_6;
            v9 = ((unint64_t)v18 - v13) >> 1;
          }
          else
          {
            v14 = 0;
            while (1)
            {
              v15 = *(unsigned __int16 *)(v13 + 2 * v14);
              if (v15 >= a2)
                break;
              if (v12 == ++v14)
                goto LABEL_6;
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          v16 = 2 * v12;
          v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              v17 = (unsigned __int16 *)(v13 + 2 * v12);
              break;
            }
          }
          v9 = ((unint64_t)v17 - v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if ((_DWORD)v12 != (unsigned __int16)v9)
        break;
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_31;
  }
  v29 = *((unsigned __int16 *)v11 + 13);
  if (!*((_WORD *)v11 + 13))
    return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v30 = v11[2];
  if (!*((_BYTE *)v11 + 31))
  {
    v44 = 2 * v29;
    v45 = v11[2];
    while (*v45 != a2)
    {
      ++v45;
      v44 -= 2;
      if (!v44)
      {
        v45 = &v30[v29];
        break;
      }
    }
    v31 = (unint64_t)((char *)v45 - (char *)v30) >> 1;
LABEL_105:
    if (v29 <= (unsigned __int16)v31)
      return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (unint64_t)v30 + *((unsigned __int16 *)v11 + 12) + (unsigned __int16)v31;
  }
  if (v29 < 0x1E)
  {
    v31 = 0;
    result = (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v32 = v30[v31];
      if (v32 >= a2)
        break;
      if (v29 == ++v31)
        return result;
    }
    if (v32 != a2)
      LOWORD(v31) = *((_WORD *)v11 + 13);
    goto LABEL_105;
  }
  v48 = v11[2];
  v49 = *((unsigned __int16 *)v11 + 13);
  do
  {
    v50 = v49 >> 1;
    v51 = &v48[v49 >> 1];
    v53 = *v51;
    v52 = v51 + 1;
    v49 += ~(v49 >> 1);
    if (v53 < a2)
      v48 = v52;
    else
      v49 = v50;
  }
  while (v49);
  if (v48 != &v30[v29] && *v48 == a2)
  {
    v31 = (unint64_t)((char *)v48 - (char *)v30) >> 1;
    goto LABEL_105;
  }
  return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

void ggl::ConstantDataTyped<ggl::Tile::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverPolarShader::typedReflection(ggl::FlyoverPolarShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverPolarShader::typedReflection(void)::ref = (uint64_t)"FlyoverPolarShader";
      ggl::flyoverPolarShaderVertexFunctionDescriptor(v2);
      qword_1EE577E40 = (uint64_t)&ggl::flyoverPolarShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("FlyoverPolarShaderVertex");
      dword_1EE577E48 = (int)v3;
      ggl::flyoverPolarShaderFragmentFunctionDescriptor(v3);
      qword_1EE577E50 = (uint64_t)&ggl::flyoverPolarShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE577E58 = ggl::crc32::compute<27ul>("FlyoverPolarShaderFragment");
      qword_1EE577E60 = (uint64_t)ggl::flyoverPolarShaderShaderConstants(void)::ref;
      unk_1EE577E68 = 6;
      qword_1EE577E70 = (uint64_t)ggl::flyoverPolarShaderShaderTextures(void)::ref;
      unk_1EE577E78 = 2;
      qword_1EE577E80 = (uint64_t)ggl::flyoverPolarShaderShaderSamplers(void)::ref;
      unk_1EE577E88 = 2;
    }
  }
}

void ggl::flyoverPolarShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverPolarShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverPolarShaderVertex");
      *(_DWORD *)algn_1EE57823C = 0;
      qword_1EE578240 = (uint64_t)"FlyoverPolarShader";
      unk_1EE578248 = ggl::flyoverPolarShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE578250 = 1;
      unk_1EE578258 = &ggl::flyoverPolarShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE578260 = 6;
      unk_1EE578268 = &ggl::flyoverPolarShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE578270 = 0;
      unk_1EE578278 = &ggl::flyoverPolarShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE578280 = 1;
      unk_1EE578288 = &ggl::flyoverPolarShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578298 = 0;
      unk_1EE5782A0 = 0;
      qword_1EE578290 = 1;
    }
  }
}

uint64_t ggl::crc32::compute<25ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  return ggl::crc32::crc32Table[v21 ^ a1[23]] ^ ~(v21 >> 8);
}

void ggl::flyoverPolarShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverPolarShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverPolarShaderFragment");
      *(_DWORD *)algn_1EE5782B4 = 1;
      qword_1EE5782B8 = (uint64_t)"FlyoverPolarShader";
      unk_1EE5782C0 = 0;
      qword_1EE5782C8 = 0;
      unk_1EE5782D0 = &ggl::flyoverPolarShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE5782D8 = 2;
      unk_1EE5782E0 = &ggl::flyoverPolarShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE5782E8 = 0;
      unk_1EE5782F0 = &ggl::flyoverPolarShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE5782F8 = 1;
      unk_1EE578300 = &ggl::flyoverPolarShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578310 = 0;
      unk_1EE578318 = 0;
      qword_1EE578308 = 1;
    }
  }
}

uint64_t ggl::crc32::compute<27ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  return ggl::crc32::crc32Table[v23 ^ a1[25]] ^ ~(v23 >> 8);
}

void ggl::Flyover::FlyoverPipelineState::~FlyoverPipelineState(ggl::Flyover::FlyoverPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Flyover::FlyoverPipelineState::FlyoverPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE585488 = &ggl::Flyover::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
          qword_1EE585490 = 0;
          if ((v97 & 1) == 0
          {
            ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE5854C0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE5854C8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE5854D0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE5854D8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1EE585498 = (uint64_t)&ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
          unk_1EE5854A0 = xmmword_19FFB3020;
        }
      }
      ggl::Flyover::FlyoverPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverShader::typedReflection(v92);
      qword_1EE583020 = (uint64_t)&ggl::FlyoverShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::Flyover::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE583220 = 0;
        qword_1EE583228 = (uint64_t)"";
        dword_1EE583230 = 0;
        qword_1EE583238 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineAttributeBinding_0(void)::attr;
        unk_1EE583240 = 2;
      }
      qword_1EE583028 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr;
      unk_1EE583030 = 1;
      qword_1EE583038 = 0;
      unk_1EE583040 = 2;
      qword_1EE583048 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineDeviceStructBinding(void)::ref;
      unk_1EE583050 = 0;
      if ((v95 & 1) == 0
      {
        ggl::Flyover::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE583130 = 0;
        qword_1EE583138 = (uint64_t)"sharedConstants";
        dword_1EE583140 = 3;
        qword_1EE583148 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE583150 = xmmword_19FFB3030;
        qword_1EE583160 = 1;
        unk_1EE583168 = "transform";
        dword_1EE583170 = 3;
        qword_1EE583178 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantTransformBinding(void)::reflection;
        unk_1EE583180 = vdupq_n_s64(2uLL);
        qword_1EE583190 = 2;
        unk_1EE583198 = "clip";
        dword_1EE5831A0 = 3;
        qword_1EE5831A8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE5831B0 = xmmword_19FFB3040;
        qword_1EE5831C0 = 3;
        unk_1EE5831C8 = "material";
        dword_1EE5831D0 = 3;
        qword_1EE5831D8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE5831E0 = xmmword_19FFB3050;
        qword_1EE5831F0 = 4;
        unk_1EE5831F8 = "texcoords";
        dword_1EE583200 = 3;
        qword_1EE583208 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1EE583210 = 2;
      }
      qword_1EE583058 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref;
      unk_1EE583060 = 5;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Flyover::FlyoverPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42BCA50;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Flyover::FlyoverPipelineSetup::~FlyoverPipelineSetup(ggl::Flyover::FlyoverPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Flyover::FlyoverPipelineSetup::constantDataIsEnabled(ggl::Flyover::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::Flyover::FlyoverPipelineSetup::textureIsEnabled(ggl::Flyover::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::Flyover::FlyoverPipelineSetup::FlyoverPipelineSetup(ggl::Flyover::FlyoverPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE585510 = 1;
    }
    ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE585488 = &ggl::Flyover::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
    qword_1EE585490 = 0;
    if ((v5 & 1) == 0
    {
      ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      unk_1EE5854C0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
      qword_1EE5854C8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
      unk_1EE5854D0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
      qword_1EE5854D8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
    }
    qword_1EE585498 = (uint64_t)&ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
    unk_1EE5854A0 = xmmword_19FFB3020;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42BCA20;
  return result;
}

void ggl::Flyover::FlyoverPolarPipelineState::~FlyoverPolarPipelineState(ggl::Flyover::FlyoverPolarPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Flyover::FlyoverPolarPipelineSetup::~FlyoverPolarPipelineSetup(ggl::Flyover::FlyoverPolarPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Flyover::FlyoverPolarPipelineSetup::constantDataIsEnabled(ggl::Flyover::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::Flyover::FlyoverPolarPipelineSetup::textureIsEnabled(ggl::Flyover::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void sub_19F42F688(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}::~function(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(_QWORD **)(a1 + 24);
  if (v5 == (_QWORD *)a1)
  {
    v6 = 4;
    v5 = (_QWORD *)a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>::__push_back_slow_path<std::function<void ()(BOOL)> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v5 = a1 + 3;
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v3;
  if (v8)
  {
    v10 = 32 * v8;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 32 * v8, 8);
    v12 = v11 + 32 * v2;
    v13 = v11 + v10;
    if (v11)
    {
      v14 = *(_QWORD *)(a2 + 24);
      if (v14)
      {
        if (v14 == a2)
        {
          *(_QWORD *)(v12 + 24) = v12;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v12);
        }
        else
        {
          *(_QWORD *)(v12 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        }
      }
      else
      {
        *(_QWORD *)(v12 + 24) = 0;
      }
    }
  }
  else
  {
    v13 = 0;
    v12 = 32 * v2;
  }
  v15 = v12 + 32;
  v27 = v12 + 32;
  v17 = *a1;
  v16 = a1[1];
  if (v16 == *a1)
  {
    v18 = a1[1];
  }
  else
  {
    do
    {
      v19 = v12;
      v12 -= 32;
      v20 = v16 - 32;
      v21 = *(_QWORD *)(v16 - 8);
      if (v21)
      {
        if (v20 == v21)
        {
          *(_QWORD *)(v19 - 8) = v12;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 - 8) + 24))(*(_QWORD *)(v16 - 8), v12);
        }
        else
        {
          *(_QWORD *)(v19 - 8) = v21;
          *(_QWORD *)(v16 - 8) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v19 - 8) = 0;
      }
      v16 = v20;
    }
    while (v20 != v17);
    v18 = *a1;
    v16 = a1[1];
    v15 = v27;
  }
  *a1 = v12;
  a1[1] = v15;
  v22 = a1[2];
  a1[2] = v13;
  if (v16 == v18)
  {
    if (v16)
      goto LABEL_25;
    return v15;
  }
  do
  {
    v26 = v16 - 32;
    v24 = *(_QWORD **)(v16 - 8);
    if ((_QWORD *)(v16 - 32) == v24)
    {
      v24 = (_QWORD *)(v16 - 32);
      v25 = 4;
LABEL_28:
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_29;
    }
    if (v24)
    {
      v25 = 5;
      goto LABEL_28;
    }
LABEL_29:
    v16 = v26;
  }
  while (v26 != v18);
  v16 = v18;
  if (!v18)
    return v15;
LABEL_25:
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v16, v22 - v16);
  return v15;
}

void sub_19F42FC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;

}

uint64_t std::__split_buffer<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator> &>::~__split_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v6 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v7 = (_QWORD *)*(v2 - 1);
      if (v7 == v6)
      {
        v5 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_7;
        v6 = v7;
        v5 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v5))();
      v6 = *(_QWORD **)(a1 + 16);
LABEL_7:
      v2 = v6;
    }
    while (v6 != v3);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

_QWORD *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42D82D0;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42D82D0;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = &off_1E42D82D0;
  v4 = a2 + 1;
  result = a1[4];
  if (result)
  {
    if ((_QWORD *)result == a1 + 1)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 24))(a1[4]);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

_QWORD *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  result = *(_QWORD **)(a1 + 32);
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

uint64_t __Block_byref_object_copy__328(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__329(uint64_t a1)
{

}

uint64_t karo::graphics::View::setFrame(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, 1);
}

void karo::graphics::View::setFrame(karo::graphics::View *a1, _QWORD *a2, int a3)
{
  *((_QWORD *)a1 + 9) = a2[3];
  *((_QWORD *)a1 + 10) = a2[4];
  *((_QWORD *)a1 + 11) = a2[5];
  *((_QWORD *)a1 + 12) = a2[6];
  *((_QWORD *)a1 + 6) = *a2;
  *((_QWORD *)a1 + 7) = a2[1];
  *((_QWORD *)a1 + 8) = a2[2];
  karo::graphics::View::orientationUpdate(a1, a3);
}

uint64_t `non-virtual thunk to'karo::graphics::View::setFrame(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 40) + 32))(a1 - 40, a2, 1);
}

void karo::graphics::View::orientationUpdate(karo::graphics::View *this, int a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  _OWORD v43[8];

  v5 = *((double *)this + 10);
  v4 = *((double *)this + 11);
  v6 = *((double *)this + 12);
  v7 = *((double *)this + 113);
  v8 = *((double *)this + 112);
  v9 = *((double *)this + 111);
  v11 = *((double *)this + 8);
  v10 = *((double *)this + 9);
  v12 = -(v8 * v4 - v7 * v5) - (v8 * v4 - v7 * v5);
  v13 = -(v7 * v10 - v9 * v4) - (v7 * v10 - v9 * v4);
  v14 = -(v9 * v5 - v8 * v10) - (v9 * v5 - v8 * v10);
  v15 = *((double *)this + 6);
  v16 = *((double *)this + 7);
  *((double *)this + 114) = v15 + v9 + v12 * v6 + v14 * v5 - v13 * v4;
  *((double *)this + 115) = v16 + v8 + v12 * v4 + v13 * v6 - v14 * v10;
  *((double *)this + 116) = v11 + v7 - v12 * v5 + v13 * v10 + v14 * v6;
  v17 = -(v11 * v5 - v16 * v4) - (v11 * v5 - v16 * v4);
  v18 = -(v15 * v4 - v11 * v10) - (v15 * v4 - v11 * v10);
  v19 = -(v16 * v10 - v15 * v5) - (v16 * v10 - v15 * v5);
  v20 = -(v19 * v10 - (-(v16 - v17 * v4) - v18 * v6));
  v21 = -(v15 + v17 * v6 + v18 * v4 - v19 * v5);
  v22 = v11 + v17 * v5 + v19 * v6;
  v23 = v5 * -2.0;
  v24 = -(v5 * (v5 * -2.0));
  v25 = 1.0 - (v24 - v4 * (v4 * -2.0));
  v26 = -(v5 * (v10 * -2.0));
  v27 = v4 * -2.0 * v6;
  v28 = v26 - v27;
  v29 = -(v4 * (v10 * -2.0));
  v30 = v6 * v23;
  v31 = v27 + v26;
  v32 = v6 * v23 - v4 * (v10 * -2.0);
  v33 = v10 * -2.0 * v10 + 1.0;
  v34 = v33 - -(v4 * (v4 * -2.0));
  v35 = -(v4 * v23);
  v36 = v6 * (v10 * -2.0);
  *((double *)this + 31) = v25;
  *((double *)this + 32) = v31;
  *((double *)this + 33) = v29 - v30;
  *((_QWORD *)this + 34) = 0;
  *((double *)this + 35) = v28;
  *((double *)this + 36) = v34;
  *((double *)this + 37) = v36 + v35;
  *((_QWORD *)this + 38) = 0;
  *((double *)this + 39) = v32;
  *((double *)this + 40) = v35 - v36;
  *((double *)this + 41) = v33 - v24;
  *((_QWORD *)this + 42) = 0;
  *((double *)this + 43) = v21;
  *((double *)this + 44) = v20;
  *((double *)this + 45) = -(v22 - v18 * v10);
  *((_QWORD *)this + 46) = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v43, (double *)this + 47, (double *)this + 31);
  v37 = v43[1];
  *(_OWORD *)((char *)this + 120) = v43[0];
  *(_OWORD *)((char *)this + 136) = v37;
  v38 = v43[3];
  *(_OWORD *)((char *)this + 152) = v43[2];
  *(_OWORD *)((char *)this + 168) = v38;
  v39 = v43[5];
  *(_OWORD *)((char *)this + 184) = v43[4];
  *(_OWORD *)((char *)this + 200) = v39;
  v40 = v43[7];
  *(_OWORD *)((char *)this + 216) = v43[6];
  *(_OWORD *)((char *)this + 232) = v40;
  karo::graphics::View::updatePlanesAndCorners(this);
  if (a2)
  {
    v41 = *((_DWORD *)this + 28);
    if (v41 == -2)
      v42 = v41 + 2;
    else
      v42 = v41 + 1;
    *((_DWORD *)this + 28) = v42;
  }
}

void karo::graphics::View::updatePlanesAndCorners(karo::graphics::View *this)
{
  _OWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double *v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double *v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double *v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double *v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  uint64_t v282;
  double v283;
  double v284;
  double v285;
  uint64_t v286;
  double v287;
  double v288;
  uint64_t v289;
  double v290;
  double v291;
  double v292;
  uint64_t v293;
  double v294;
  double v295;
  double v296;
  const double *v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  double *v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  double *v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328[12];
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  __int128 v332;
  _BYTE v333[32];
  _BYTE v334[80];
  uint64_t v335;
  float64x2x4_t v336;
  float64x2x4_t v337;
  float64x2x4_t v338;
  float64x2x4_t v339;

  v335 = *MEMORY[0x1E0C80C00];
  v2 = (_OWORD *)((char *)this + 1032);
  v3 = *((double *)this + 10);
  v4 = *((double *)this + 11);
  v5 = *((double *)this + 12);
  v6 = v3 + v3;
  v7 = (v3 + v3) * v3;
  v8 = (v4 + v4) * v4;
  v10 = *((_QWORD *)this + 8);
  v9 = *((double *)this + 9);
  v11 = v9 + v9;
  v12 = (v9 + v9) * v3;
  v13 = (v4 + v4) * v5;
  v14 = v4 * (v9 + v9);
  v15 = 1.0 - (v9 + v9) * v9;
  v16 = v6 * v4;
  v328[0] = 1.0 - (v7 + v8);
  v328[1] = v13 + v12;
  v328[4] = v12 - v13;
  v328[5] = v15 - v8;
  v328[8] = v5 * v6 + v14;
  v328[9] = v16 - v5 * v11;
  v328[2] = v14 - v5 * v6;
  v328[6] = v5 * v11 + v16;
  v328[10] = v15 - v7;
  v328[3] = 0.0;
  v328[7] = 0.0;
  v328[11] = 0.0;
  v329 = *((_OWORD *)this + 3);
  v330 = v10;
  v331 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)&v332, v328, (double *)this + 145);
  v17 = *(_OWORD *)v333;
  *v2 = v332;
  v2[1] = v17;
  v18 = *(_OWORD *)v334;
  v2[2] = *(_OWORD *)&v333[16];
  v2[3] = v18;
  v19 = *(_OWORD *)&v334[32];
  v2[4] = *(_OWORD *)&v334[16];
  v2[5] = v19;
  v20 = *(_OWORD *)&v334[64];
  v2[6] = *(_OWORD *)&v334[48];
  v2[7] = v20;
  if (*((_BYTE *)this + 1016))
  {
    v22 = *((_QWORD *)this + 5);
    v21 = (double *)((char *)this + 40);
    v23 = (double *)(*(uint64_t (**)(double *))(v22 + 24))(v21);
    v24 = v21[117];
    v25 = v21[116];
    v26 = v21[114];
    v27 = v23[4];
    v28 = v23[5];
    v29 = v23[6];
    v30 = v23[3];
    v31 = -(v30 * v26 - v28 * v24);
    v32 = *v23 + v24;
    v33 = -(v27 * v24 - v30 * v25);
    v34 = v23[1] + v25;
    v35 = -(v28 * v25 - v27 * v26) - (v28 * v25 - v27 * v26);
    v36 = v31 + v31;
    v37 = v33 + v33;
    v38 = v32 + v37 * v27 + v35 * v29 - v36 * v28;
    v39 = v34 - v37 * v30 + v35 * v28 + v36 * v29;
    v40 = v26 + v37 * v29 + v23[2] + v36 * v30 - v35 * v27;
    v21[82] = v38;
    v21[83] = v39;
    v21[84] = v40;
    v41 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v42 = v21[117];
    v43 = v21[116];
    v44 = v21[113];
    v45 = v41[4];
    v46 = v41[5];
    v47 = v41[6];
    v48 = v41[3];
    v49 = -(v48 * v44 - v46 * v42);
    v50 = *v41 + v42;
    v51 = -(v45 * v42 - v48 * v43);
    v52 = v41[1] + v43;
    v53 = -(v46 * v43 - v45 * v44) - (v46 * v43 - v45 * v44);
    v54 = v49 + v49;
    v55 = v51 + v51;
    v56 = v50 + v55 * v45 + v53 * v47 - v54 * v46;
    v57 = v52 - v55 * v48 + v53 * v46 + v54 * v47;
    v58 = v44 + v55 * v47 + v41[2] + v54 * v48 - v53 * v45;
    v21[85] = v56;
    v21[86] = v57;
    v21[87] = v58;
    v59 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v60 = v21[117];
    v61 = v21[115];
    v62 = v21[114];
    v63 = v59[4];
    v64 = v59[5];
    v65 = v59[6];
    v66 = v59[3];
    v67 = -(v66 * v62 - v64 * v60);
    v68 = *v59 + v60;
    v69 = -(v63 * v60 - v66 * v61);
    v70 = v59[1] + v61;
    v71 = -(v64 * v61 - v63 * v62) - (v64 * v61 - v63 * v62);
    v72 = v67 + v67;
    v73 = v69 + v69;
    v74 = v68 + v73 * v63 + v71 * v65 - v72 * v64;
    v75 = v70 - v73 * v66 + v71 * v64 + v72 * v65;
    v76 = v62 + v73 * v65 + v59[2] + v72 * v66 - v71 * v63;
    v21[88] = v74;
    v21[89] = v75;
    v21[90] = v76;
    v77 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v78 = v21[117];
    v79 = v21[115];
    v80 = v21[113];
    v81 = v77[4];
    v82 = v77[5];
    v83 = v77[6];
    v84 = v77[3];
    v85 = -(v84 * v80 - v82 * v78);
    v86 = *v77 + v78;
    v87 = -(v81 * v78 - v84 * v79);
    v88 = v77[1] + v79;
    v89 = -(v82 * v79 - v81 * v80) - (v82 * v79 - v81 * v80);
    v90 = v85 + v85;
    v91 = v87 + v87;
    v92 = v86 + v91 * v81 + v89 * v83 - v90 * v82;
    v93 = v88 - v91 * v84 + v89 * v82 + v90 * v83;
    v94 = v80 + v91 * v83 + v77[2] + v90 * v84 - v89 * v81;
    v21[91] = v92;
    v21[92] = v93;
    v21[93] = v94;
    v95 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v96 = v21[118];
    v97 = v21[116];
    v98 = v21[114];
    v99 = v95[4];
    v100 = v95[5];
    v101 = v95[6];
    v102 = v95[3];
    v103 = -(v102 * v98 - v100 * v96);
    v104 = *v95 + v96;
    v105 = -(v99 * v96 - v102 * v97);
    v106 = v95[1] + v97;
    v107 = -(v100 * v97 - v99 * v98) - (v100 * v97 - v99 * v98);
    v108 = v103 + v103;
    v109 = v105 + v105;
    v110 = v104 + v109 * v99 + v107 * v101 - v108 * v100;
    v111 = v106 - v109 * v102 + v107 * v100 + v108 * v101;
    v112 = v98 + v109 * v101 + v95[2] + v108 * v102 - v107 * v99;
    v21[94] = v110;
    v21[95] = v111;
    v21[96] = v112;
    v113 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v114 = v21[118];
    v115 = v21[116];
    v116 = v21[113];
    v117 = v113[4];
    v118 = v113[5];
    v119 = v113[6];
    v120 = v113[3];
    v121 = -(v120 * v116 - v118 * v114);
    v122 = *v113 + v114;
    v123 = -(v117 * v114 - v120 * v115);
    v124 = v113[1] + v115;
    v125 = -(v118 * v115 - v117 * v116) - (v118 * v115 - v117 * v116);
    v126 = v121 + v121;
    v127 = v123 + v123;
    v128 = v122 + v127 * v117 + v125 * v119 - v126 * v118;
    v129 = v124 - v127 * v120 + v125 * v118 + v126 * v119;
    v130 = v116 + v127 * v119 + v113[2] + v126 * v120 - v125 * v117;
    v21[97] = v128;
    v21[98] = v129;
    v21[99] = v130;
    v131 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v132 = v21[118];
    v133 = v21[115];
    v134 = v21[114];
    v135 = v131[4];
    v136 = v131[5];
    v137 = v131[6];
    v138 = v131[3];
    v139 = -(v138 * v134 - v136 * v132);
    v140 = *v131 + v132;
    v141 = -(v135 * v132 - v138 * v133);
    v142 = v131[1] + v133;
    v143 = -(v136 * v133 - v135 * v134) - (v136 * v133 - v135 * v134);
    v144 = v139 + v139;
    v145 = v141 + v141;
    v146 = v140 + v145 * v135 + v143 * v137 - v144 * v136;
    v147 = v142 - v145 * v138 + v143 * v136 + v144 * v137;
    v148 = v134 + v145 * v137 + v131[2] + v144 * v138 - v143 * v135;
    v21[100] = v146;
    v21[101] = v147;
    v21[102] = v148;
    v149 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v21 + 24))(v21);
    v150 = v21[118];
    v151 = v21[115];
    v152 = v21[113];
    v154 = v149[4];
    v153 = v149[5];
    v155 = v149[6];
    v156 = v149[3];
    v157 = -(v153 * v151 - v154 * v152) - (v153 * v151 - v154 * v152);
    v158 = -(v156 * v152 - v153 * v150) - (v156 * v152 - v153 * v150);
    v159 = -(v154 * v150 - v156 * v151) - (v154 * v150 - v156 * v151);
    v160 = *v149 + v150 + v159 * v154 + v157 * v155 - v158 * v153;
    v161 = v149[1] + v151 - v159 * v156 + v157 * v153 + v158 * v155;
    v162 = v21[85];
    v163 = v21[82];
    v164 = v21[86];
    v165 = v21[83];
    v166 = v21[87];
    v167 = v21[84];
    v168 = sqrt((v162 - v163) * (v162 - v163) + (v164 - v165) * (v164 - v165) + (v166 - v167) * (v166 - v167));
    v169 = v152 + v159 * v155 + v149[2] + v158 * v156 - v157 * v154;
    v21[103] = v160;
    v21[104] = v161;
    v21[105] = v169;
    v170 = 1.0 / v168 * (v162 - v163);
    v171 = 1.0 / v168 * (v164 - v165);
    v172 = 1.0 / v168 * (v166 - v167);
    v173 = v21[91];
    v174 = v21[92];
    v175 = v21[93];
    v176 = 1.0 / sqrt((v173 - v163) * (v173 - v163) + (v174 - v165) * (v174 - v165) + (v175 - v167) * (v175 - v167));
    v177 = v176 * (v173 - v163);
    v178 = v176 * (v174 - v165);
    v179 = v176 * (v175 - v167);
    v180 = -(v178 * v172 - v179 * v171);
    v181 = -(v179 * v170 - v177 * v172);
    v182 = -(v177 * v171 - v178 * v170);
    v183 = 1.0 / sqrt(v180 * v180 + v181 * v181 + v182 * v182);
    v184 = v183 * v181;
    v185 = v183 * v182;
    v21[58] = v183 * v180;
    v21[59] = v184;
    v21[60] = v185;
    v21[61] = -(v183 * v180 * v163 + v184 * v165 + v185 * v167);
    v186 = v21[94];
    v187 = v21[97];
    v188 = v21[95];
    v189 = v21[98];
    v190 = v21[96];
    v191 = v21[99];
    v192 = 1.0 / sqrt((v186 - v187) * (v186 - v187) + (v188 - v189) * (v188 - v189) + (v190 - v191) * (v190 - v191));
    v193 = v192 * (v186 - v187);
    v194 = v192 * (v188 - v189);
    v195 = v192 * (v190 - v191);
    v196 = v21[100];
    v197 = v21[101];
    v198 = v21[102];
    v199 = 1.0 / sqrt((v196 - v187) * (v196 - v187) + (v197 - v189) * (v197 - v189) + (v198 - v191) * (v198 - v191));
    v200 = v199 * (v196 - v187);
    v201 = v199 * (v197 - v189);
    v202 = v199 * (v198 - v191);
    v203 = -(v201 * v195 - v202 * v194);
    v204 = -(v202 * v193 - v200 * v195);
    v205 = -(v200 * v194 - v201 * v193);
    v206 = 1.0 / sqrt(v203 * v203 + v204 * v204 + v205 * v205);
    v207 = v206 * v204;
    v208 = v206 * v205;
    v21[62] = v206 * v203;
    v21[63] = v207;
    v21[64] = v208;
    v21[65] = -(v206 * v203 * v187 + v207 * v189 + v208 * v191);
    v209 = 1.0 / sqrt((v163 - v162) * (v163 - v162) + (v165 - v164) * (v165 - v164) + (v167 - v166) * (v167 - v166));
    v210 = v209 * (v163 - v162);
    v211 = v209 * (v165 - v164);
    v212 = v209 * (v167 - v166);
    v213 = 1.0 / sqrt((v186 - v162) * (v186 - v162) + (v188 - v164) * (v188 - v164) + (v190 - v166) * (v190 - v166));
    v214 = v213 * (v186 - v162);
    v215 = v213 * (v188 - v164);
    v216 = v213 * (v190 - v166);
    v217 = -(v215 * v212 - v216 * v211);
    v218 = -(v216 * v210 - v214 * v212);
    v219 = -(v214 * v211 - v215 * v210);
    v220 = 1.0 / sqrt(v217 * v217 + v218 * v218 + v219 * v219);
    v221 = v220 * v218;
    v222 = v220 * v219;
    v21[66] = v220 * v217;
    v21[67] = v221;
    v21[68] = v222;
    v21[69] = -(v220 * v217 * v162 + v221 * v164 + v222 * v166);
    v223 = v21[88];
    v224 = v173 - v223;
    v225 = v21[89];
    v226 = v174 - v225;
    v227 = v21[90];
    v228 = v175 - v227;
    v229 = 1.0 / sqrt(v224 * v224 + v226 * v226 + v228 * v228);
    v230 = v229 * v224;
    v231 = v229 * v226;
    v232 = v229 * v228;
    v233 = 1.0 / sqrt((v160 - v223) * (v160 - v223) + (v161 - v225) * (v161 - v225) + (v169 - v227) * (v169 - v227));
    v234 = v233 * (v160 - v223);
    v235 = v233 * (v161 - v225);
    v236 = v233 * (v169 - v227);
    v237 = -(v235 * v232 - v236 * v231);
    v238 = -(v236 * v230 - v234 * v232);
    v239 = -(v234 * v231 - v235 * v230);
    v240 = 1.0 / sqrt(v237 * v237 + v238 * v238 + v239 * v239);
    v241 = v240 * v238;
    v242 = v240 * v239;
    v21[70] = v240 * v237;
    v21[71] = v241;
    v21[72] = v242;
    v21[73] = -(v240 * v237 * v223 + v241 * v225 + v242 * v227);
    v243 = v163 - v186;
    v244 = v165 - v188;
    v245 = v167 - v190;
    v246 = 1.0 / sqrt(v243 * v243 + v244 * v244 + v245 * v245);
    v247 = v246 * v243;
    v248 = v246 * v244;
    v249 = v246 * v245;
    v250 = v196 - v186;
    v251 = v197 - v188;
    v252 = v198 - v190;
    v253 = 1.0 / sqrt(v250 * v250 + v251 * v251 + v252 * v252);
    v254 = v253 * v250;
    v255 = v253 * v251;
    v256 = v253 * v252;
    v257 = -(v255 * v249 - v256 * v248);
    v258 = -(v256 * v247 - v254 * v249);
    v259 = -(v254 * v248 - v255 * v247);
    v260 = 1.0 / sqrt(v257 * v257 + v258 * v258 + v259 * v259);
    v261 = v260 * v258;
    v262 = v260 * v259;
    v21[74] = v260 * v257;
    v21[75] = v261;
    v21[76] = v262;
    v21[77] = -(v260 * v257 * v186 + v261 * v188 + v262 * v190);
    v263 = v187 - v162;
    v264 = 1.0 / sqrt(v263 * v263 + (v189 - v164) * (v189 - v164) + (v191 - v166) * (v191 - v166));
    v265 = v264 * v263;
    v266 = v264 * (v189 - v164);
    v267 = v264 * (v191 - v166);
    v268 = v160 - v162;
    v269 = v161 - v164;
    v270 = v169 - v166;
    v271 = 1.0 / sqrt(v268 * v268 + v269 * v269 + v270 * v270);
    v272 = v271 * v268;
    v273 = v271 * v269;
    v274 = v271 * v270;
    v275 = -(v267 * v273 - v266 * v274);
    v276 = -(v265 * v274 - v267 * v272);
    v277 = -(v266 * v272 - v265 * v273);
    v278 = 1.0 / sqrt(v275 * v275 + v276 * v276 + v277 * v277);
    v279 = v278 * v276;
    v280 = v278 * v277;
    v21[78] = v278 * v275;
    v21[79] = v279;
    v21[80] = v280;
    v21[81] = -(v278 * v275 * v162 + v279 * v164 + v280 * v166);
  }
  else
  {
    v332 = 0x3FF0000000000000uLL;
    *(_OWORD *)&v333[8] = xmmword_19FFB32B0;
    *(_QWORD *)v333 = 0;
    *(_QWORD *)&v333[24] = 0;
    *(_QWORD *)v334 = 0;
    *(_OWORD *)&v334[8] = xmmword_19FFB32C0;
    *(_OWORD *)&v334[24] = xmmword_19FFB32C0;
    *(_OWORD *)&v334[40] = xmmword_19FFB32C0;
    *(_OWORD *)&v334[56] = xmmword_19FFB15E0;
    *(_QWORD *)&v334[72] = 0x3FF0000000000000;
    v281 = *((double *)this + 29);
    v282 = *((_QWORD *)this + 30);
    v284 = *((double *)this + 27);
    v283 = *((double *)this + 28);
    v285 = *((double *)this + 25);
    v286 = *((_QWORD *)this + 26);
    v288 = *((double *)this + 23);
    v287 = *((double *)this + 24);
    v290 = *((double *)this + 21);
    v289 = *((_QWORD *)this + 22);
    v292 = *((double *)this + 19);
    v291 = *((double *)this + 20);
    v294 = *((double *)this + 17);
    v293 = *((_QWORD *)this + 18);
    v296 = *((double *)this + 15);
    v295 = *((double *)this + 16);
    v338 = vld4q_f64((const double *)&v332);
    v297 = (const double *)&v334[16];
    v298 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v296), v338.val[1], v295), v338.val[2], v294), v338.val[3], *(double *)&v293);
    v299 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v292), v338.val[1], v291), v338.val[2], v290), v338.val[3], *(double *)&v289);
    v300 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v288), v338.val[1], v287), v338.val[2], v285), v338.val[3], *(double *)&v286);
    v301 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v284), v338.val[1], v283), v338.val[2], v281), v338.val[3], *(double *)&v282);
    v338.val[0] = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v298, v298), v299, v299), v300, v300));
    __asm { FMOV            V22.2D, #1.0 }
    v338.val[1] = vdivq_f64(_Q22, v338.val[0]);
    v337.val[0] = vmulq_f64(v338.val[1], v298);
    v337.val[1] = vmulq_f64(v338.val[1], v299);
    v337.val[2] = vmulq_f64(v338.val[1], v300);
    v337.val[3] = vdivq_f64(v301, v338.val[0]);
    v307 = (double *)((char *)this + 504);
    vst4q_f64(v307, v337);
    v307 += 8;
    v339 = vld4q_f64(v297);
    v308 = (float64x2_t)vdupq_lane_s64(v282, 0);
    v309 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v296), v339.val[1], v295), v339.val[2], v294), v339.val[3], *(double *)&v293);
    v310 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v292), v339.val[1], v291), v339.val[2], v290), v339.val[3], *(double *)&v289);
    v311 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v288), v339.val[1], v287), v339.val[2], v285), v339.val[3], *(double *)&v286);
    v312 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v284), v339.val[1], v283), v339.val[2], v281), v339.val[3], *(double *)&v282);
    v313 = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v309, v309), v310, v310), v311, v311));
    v314 = vdivq_f64(_Q22, v313);
    v315 = vmulq_f64(v314, v309);
    v316 = vmulq_f64(v314, v310);
    v339.val[0] = vmulq_f64(v314, v311);
    v339.val[1] = vdivq_f64(v312, v313);
    vst4q_f64(v307, v339);
    v317 = (double *)((char *)this + 632);
    v318 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v293, 0), (float64x2_t)xmmword_19FFB32B0, v294);
    v319 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v289, 0), (float64x2_t)xmmword_19FFB32B0, v290);
    v320 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v286, 0), (float64x2_t)xmmword_19FFB32B0, v285);
    v321 = vmlaq_n_f64(v308, (float64x2_t)xmmword_19FFB32B0, v281);
    v322 = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v318, v318), v319, v319), v320, v320));
    v323 = vdivq_f64(_Q22, v322);
    v336.val[0] = vmulq_f64(v323, v318);
    v336.val[1] = vmulq_f64(v323, v319);
    v336.val[2] = vmulq_f64(v323, v320);
    v336.val[3] = vdivq_f64(v321, v322);
    vst4q_f64(v317, v336);
    v336.val[0].f64[0] = *((float64_t *)this + 132);
    v336.val[1].f64[0] = *((float64_t *)this + 136);
    v322.f64[0] = v336.val[1].f64[0] + v336.val[0].f64[0];
    v323.f64[0] = *((float64_t *)this + 140);
    v324 = *((double *)this + 144);
    v336.val[2].f64[0] = 1.0 / (v324 - (v323.f64[0] + v336.val[1].f64[0] + v336.val[0].f64[0]));
    v319.f64[0] = v324 + v323.f64[0];
    v336.val[3].f64[0] = 1.0 / (v324 + v323.f64[0] - (v336.val[1].f64[0] + v336.val[0].f64[0]));
    v312.f64[0] = 1.0 / (v336.val[1].f64[0] - v336.val[0].f64[0] - v323.f64[0] + v324);
    v325 = *((double *)this + 129);
    v326 = *((double *)this + 133);
    v327 = *((double *)this + 137);
    _Q22.f64[0] = *((float64_t *)this + 141);
    v321.f64[0] = *((float64_t *)this + 130);
    v320.f64[0] = *((float64_t *)this + 134);
    v316.f64[0] = *((float64_t *)this + 138);
    v339.val[0].f64[0] = *((float64_t *)this + 142);
    v339.val[2].f64[0] = *((float64_t *)this + 131);
    v339.val[3].f64[0] = *((float64_t *)this + 135);
    v301.f64[0] = *((float64_t *)this + 139);
    v337.val[0].f64[0] = *((float64_t *)this + 143);
    *((double *)this + 87) = v336.val[2].f64[0] * (_Q22.f64[0] - (v327 + v326 + v325));
    *((double *)this + 88) = v336.val[2].f64[0] * (v339.val[0].f64[0] - (v316.f64[0] + v320.f64[0] + v321.f64[0]));
    *((double *)this + 89) = v336.val[2].f64[0]
                           * (v337.val[0].f64[0] - (v301.f64[0] + v339.val[3].f64[0] + v339.val[2].f64[0]));
    *((double *)this + 90) = v336.val[3].f64[0] * (_Q22.f64[0] + v327 - (v326 + v325));
    *((double *)this + 91) = v336.val[3].f64[0] * (v339.val[0].f64[0] + v316.f64[0] - (v320.f64[0] + v321.f64[0]));
    *((double *)this + 92) = v336.val[3].f64[0]
                           * (v337.val[0].f64[0] + v301.f64[0] - (v339.val[3].f64[0] + v339.val[2].f64[0]));
    *((double *)this + 93) = v312.f64[0] * (v326 - v325 - v327 + _Q22.f64[0]);
    *((double *)this + 94) = v312.f64[0] * (v320.f64[0] - v321.f64[0] - v316.f64[0] + v339.val[0].f64[0]);
    *((double *)this + 95) = v312.f64[0] * (v339.val[3].f64[0] - v339.val[2].f64[0] - v301.f64[0] + v337.val[0].f64[0]);
    v314.f64[0] = 1.0 / (v324 + v323.f64[0] + v336.val[1].f64[0] - v336.val[0].f64[0]);
    *((double *)this + 96) = v314.f64[0] * (_Q22.f64[0] + v327 + v326 - v325);
    *((double *)this + 97) = v314.f64[0] * (v339.val[0].f64[0] + v316.f64[0] + v320.f64[0] - v321.f64[0]);
    *((double *)this + 98) = v314.f64[0] * (v337.val[0].f64[0] + v301.f64[0] + v339.val[3].f64[0] - v339.val[2].f64[0]);
    v336.val[0].f64[0] = v336.val[0].f64[0] - v336.val[1].f64[0];
    v336.val[1].f64[0] = 1.0 / (v336.val[0].f64[0] - v323.f64[0] + v324);
    *((double *)this + 99) = v336.val[1].f64[0] * (v325 - v326 - v327 + _Q22.f64[0]);
    *((double *)this + 100) = v336.val[1].f64[0] * (v321.f64[0] - v320.f64[0] - v316.f64[0] + v339.val[0].f64[0]);
    *((double *)this + 101) = v336.val[1].f64[0]
                            * (v339.val[2].f64[0] - v339.val[3].f64[0] - v301.f64[0] + v337.val[0].f64[0]);
    v336.val[0].f64[0] = 1.0 / (v324 + v323.f64[0] + v336.val[0].f64[0]);
    *((double *)this + 102) = v336.val[0].f64[0] * (_Q22.f64[0] + v327 + v325 - v326);
    *((double *)this + 103) = v336.val[0].f64[0] * (v339.val[0].f64[0] + v316.f64[0] + v321.f64[0] - v320.f64[0]);
    *((double *)this + 104) = v336.val[0].f64[0]
                            * (v337.val[0].f64[0] + v301.f64[0] + v339.val[2].f64[0] - v339.val[3].f64[0]);
    v323.f64[0] = 1.0 / (v322.f64[0] - v323.f64[0] + v324);
    *((double *)this + 105) = v323.f64[0] * (v326 + v325 - v327 + _Q22.f64[0]);
    *((double *)this + 106) = v323.f64[0] * (v320.f64[0] + v321.f64[0] - v316.f64[0] + v339.val[0].f64[0]);
    *((double *)this + 107) = v323.f64[0] * (v339.val[3].f64[0] + v339.val[2].f64[0] - v301.f64[0] + v337.val[0].f64[0]);
    v322.f64[0] = 1.0 / (v319.f64[0] + v322.f64[0]);
    *((double *)this + 108) = v322.f64[0] * (_Q22.f64[0] + v327 + v326 + v325);
    *((double *)this + 109) = v322.f64[0] * (v339.val[0].f64[0] + v316.f64[0] + v320.f64[0] + v321.f64[0]);
    *((double *)this + 110) = v322.f64[0] * (v337.val[0].f64[0] + v301.f64[0] + v339.val[3].f64[0] + v339.val[2].f64[0]);
  }
}

double karo::graphics::View::copyView(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  double result;

  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  v3 = *(_OWORD *)(a2 + 504);
  v4 = *(_OWORD *)(a2 + 520);
  v5 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 552) = v5;
  *(_OWORD *)(a1 + 504) = v3;
  *(_OWORD *)(a1 + 520) = v4;
  v6 = *(_OWORD *)(a2 + 568);
  v7 = *(_OWORD *)(a2 + 584);
  v8 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v8;
  *(_OWORD *)(a1 + 568) = v6;
  *(_OWORD *)(a1 + 584) = v7;
  v9 = *(_OWORD *)(a2 + 632);
  v10 = *(_OWORD *)(a2 + 648);
  v11 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v11;
  *(_OWORD *)(a1 + 632) = v9;
  *(_OWORD *)(a1 + 648) = v10;
  v12 = *(_OWORD *)(a2 + 696);
  v13 = *(_OWORD *)(a2 + 712);
  v14 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 744) = v14;
  *(_OWORD *)(a1 + 696) = v12;
  *(_OWORD *)(a1 + 712) = v13;
  v15 = *(_OWORD *)(a2 + 760);
  v16 = *(_OWORD *)(a2 + 776);
  v17 = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
  *(_OWORD *)(a1 + 808) = v17;
  *(_OWORD *)(a1 + 760) = v15;
  *(_OWORD *)(a1 + 776) = v16;
  v18 = *(_OWORD *)(a2 + 824);
  v19 = *(_OWORD *)(a2 + 840);
  v20 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 872) = v20;
  *(_OWORD *)(a1 + 824) = v18;
  *(_OWORD *)(a1 + 840) = v19;
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 1016);
  v21 = a2 + 40;
  v22 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 24))(a2 + 40);
  *(_QWORD *)(a1 + 72) = v22[3];
  *(_QWORD *)(a1 + 80) = v22[4];
  *(_QWORD *)(a1 + 88) = v22[5];
  *(_QWORD *)(a1 + 96) = v22[6];
  *(_QWORD *)(a1 + 48) = *v22;
  *(_QWORD *)(a1 + 56) = v22[1];
  *(_QWORD *)(a1 + 64) = v22[2];
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(v21 + 992);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(v21 + 1000);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(v21 + 1008);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(v21 + 1016);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(v21 + 1024);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(v21 + 1032);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(v21 + 1040);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(v21 + 1048);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(v21 + 1056);
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(v21 + 1064);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(v21 + 1072);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(v21 + 1080);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(v21 + 1088);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(v21 + 1096);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(v21 + 1104);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(v21 + 1112);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(v21 + 1120);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(v21 + 1128);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(v21 + 1136);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(v21 + 1144);
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)(v21 + 1152);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(v21 + 1160);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(v21 + 1168);
  *(_QWORD *)(a1 + 1216) = *(_QWORD *)(v21 + 1176);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(v21 + 1184);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(v21 + 1192);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(v21 + 1200);
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(v21 + 1208);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(v21 + 1216);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(v21 + 1224);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(v21 + 1232);
  result = *(double *)(v21 + 1240);
  *(double *)(a1 + 1280) = result;
  return result;
}

void karo::graphics::View::projectionUpdate(karo::graphics::View *this, int a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  __int128 v74;
  __int128 v75;
  int v76;
  int v77;
  _OWORD v78[8];

  v4 = *((double *)this + 10);
  v5 = *((double *)this + 11);
  v6 = *((double *)this + 12);
  v8 = *((double *)this + 8);
  v7 = *((double *)this + 9);
  v10 = *((double *)this + 6);
  v9 = *((double *)this + 7);
  v11 = -(v8 * v4 - v9 * v5) - (v8 * v4 - v9 * v5);
  v12 = -(v10 * v5 - v8 * v7) - (v10 * v5 - v8 * v7);
  v13 = -(v9 * v7 - v10 * v4) - (v9 * v7 - v10 * v4);
  v14 = -(v13 * v7 - (-(v9 - v11 * v5) - v12 * v6));
  v15 = -(v10 + v11 * v6 + v12 * v5 - v13 * v4);
  v16 = v8 + v11 * v4 + v13 * v6;
  v17 = v4 * -2.0;
  v18 = -(v4 * (v4 * -2.0));
  v19 = 1.0 - (v18 - v5 * (v5 * -2.0));
  v20 = -(v4 * (v7 * -2.0));
  v21 = v5 * -2.0 * v6;
  v22 = v20 - v21;
  v23 = -(v5 * (v7 * -2.0));
  v24 = v6 * v17;
  v25 = v21 + v20;
  v26 = v6 * v17 - v5 * (v7 * -2.0);
  v27 = v7 * -2.0 * v7 + 1.0;
  v28 = v27 - -(v5 * (v5 * -2.0));
  v29 = -(v5 * v17);
  v30 = v6 * (v7 * -2.0);
  *((double *)this + 31) = v19;
  *((double *)this + 32) = v25;
  *((double *)this + 33) = v23 - v24;
  *((_QWORD *)this + 34) = 0;
  *((double *)this + 35) = v22;
  *((double *)this + 36) = v28;
  *((double *)this + 37) = v30 + v29;
  *((_QWORD *)this + 38) = 0;
  *((double *)this + 39) = v26;
  *((double *)this + 40) = v29 - v30;
  *((double *)this + 41) = v27 - v18;
  *((_QWORD *)this + 42) = 0;
  *((double *)this + 43) = v15;
  *((double *)this + 44) = v14;
  *((double *)this + 45) = -(v16 - v12 * v7);
  *((_QWORD *)this + 46) = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v78, (double *)this + 47, (double *)this + 31);
  v31 = v78[1];
  *(_OWORD *)((char *)this + 120) = v78[0];
  *(_OWORD *)((char *)this + 136) = v31;
  v32 = v78[3];
  *(_OWORD *)((char *)this + 152) = v78[2];
  *(_OWORD *)((char *)this + 168) = v32;
  v33 = v78[5];
  *(_OWORD *)((char *)this + 184) = v78[4];
  *(_OWORD *)((char *)this + 200) = v33;
  v34 = v78[7];
  *(_OWORD *)((char *)this + 216) = v78[6];
  *(_OWORD *)((char *)this + 232) = v34;
  karo::graphics::View::updatePlanesAndCorners(this);
  v35 = *((double *)this + 87);
  v36 = *((double *)this + 108);
  v37 = v35 - v36;
  v38 = *((double *)this + 88);
  v39 = *((double *)this + 109);
  v40 = v38 - v39;
  v41 = *((double *)this + 89);
  v42 = *((double *)this + 110);
  v43 = v41 - v42;
  v44 = (v35 - v36) * 0.5;
  v45 = (v38 - v39) * 0.5;
  v46 = (v41 - v42) * 0.5;
  v47 = v44 * v44 + v45 * v45 + v46 * v46;
  v48 = v44 + v36;
  v49 = v45 + v39;
  v50 = v46 + v42;
  v51 = fmax((v35 - v48) * 0.5 * ((v35 - v48) * 0.5)+ (v38 - v49) * 0.5 * ((v38 - v49) * 0.5)+ (v41 - (v46 + v42)) * 0.5 * ((v41 - (v46 + v42)) * 0.5), v47);
  v52 = (*((double *)this + 92) - (v46 + v42)) * 0.5;
  v53 = fmax((*((double *)this + 99) - v48) * 0.5 * ((*((double *)this + 99) - v48) * 0.5)+ (*((double *)this + 100) - v49) * 0.5 * ((*((double *)this + 100) - v49) * 0.5)+ (*((double *)this + 101) - v50) * 0.5 * ((*((double *)this + 101) - v50) * 0.5), fmax((*((double *)this + 96) - v48) * 0.5 * ((*((double *)this + 96) - v48) * 0.5)+ (*((double *)this + 97) - v49) * 0.5 * ((*((double *)this + 97) - v49) * 0.5)+ (*((double *)this + 98) - v50) * 0.5 * ((*((double *)this + 98) - v50) * 0.5), fmax((*((double *)this + 93) - v48) * 0.5 * ((*((double *)this + 93) - v48) * 0.5)+ (*((double *)this + 94) - v49) * 0.5 * ((*((double *)this + 94) - v49) * 0.5)+ (*((double *)this + 95) - v50) * 0.5 * ((*((double *)this + 95) - v50) * 0.5), fmax((*((double *)this + 90) - v48) * 0.5 * ((*((double *)this + 90) - v48) * 0.5)+ (*((double *)this + 91) - v49) * 0.5 * ((*((double *)this + 91) - v49) * 0.5)+ v52 * v52, v51))));
  v54 = fmax(v37 * -0.25 * (v37 * -0.25) + v40 * -0.25 * (v40 * -0.25) + v43 * -0.25 * (v43 * -0.25), fmax((*((double *)this + 105) - v48) * 0.5 * ((*((double *)this + 105) - v48) * 0.5)+ (*((double *)this + 106) - v49) * 0.5 * ((*((double *)this + 106) - v49) * 0.5)+ (*((double *)this + 107) - v50) * 0.5 * ((*((double *)this + 107) - v50) * 0.5), fmax((*((double *)this + 102) - v48) * 0.5 * ((*((double *)this + 102) - v48) * 0.5)+ (*((double *)this + 103) - v49) * 0.5 * ((*((double *)this + 103) - v49) * 0.5)+ (*((double *)this + 104) - v50) * 0.5 * ((*((double *)this + 104) - v50) * 0.5), v53)));
  v55 = *((double *)this + 10);
  v56 = *((double *)this + 11);
  v57 = *((double *)this + 12);
  v59 = *((double *)this + 8);
  v58 = *((double *)this + 9);
  v61 = *((double *)this + 6);
  v60 = *((double *)this + 7);
  v62 = -(v59 * v55 - v60 * v56) - (v59 * v55 - v60 * v56);
  v63 = -(v61 * v56 - v59 * v58) - (v61 * v56 - v59 * v58);
  v64 = -(v60 * v58 - v61 * v55) - (v60 * v58 - v61 * v55);
  v65 = -(v55 * v50 - v56 * v49) - (v55 * v50 - v56 * v49);
  v66 = -(v56 * v48 - v58 * v50) - (v56 * v48 - v58 * v50);
  v67 = -(v58 * v49 - v55 * v48) - (v58 * v49 - v55 * v48);
  v68 = v48 - v61 + v65 * v57 + v66 * v56 + v64 * v55 - (v67 * v55 + v62 * v57 + v63 * v56);
  v69 = v49 - v60 + v67 * v58 + v66 * v57 + v62 * v56 - (v65 * v56 + v63 * v57 + v64 * v58);
  v70 = v50 - v59 + v67 * v57 + v65 * v55 + v63 * v58 - (v66 * v58 + v62 * v55 + v64 * v57);
  *((double *)this + 111) = v68;
  *((double *)this + 112) = v69;
  *((double *)this + 113) = v70;
  v71 = -(v69 * v56 - v70 * v55) - (v69 * v56 - v70 * v55);
  v72 = -(v70 * v58 - v68 * v56) - (v70 * v58 - v68 * v56);
  v73 = -(v68 * v55 - v69 * v58) - (v68 * v55 - v69 * v58);
  *(double *)&v74 = v68 + v61 + v71 * v57 + v73 * v55 - v72 * v56;
  *(double *)&v75 = v70 + v59 + v72 * v58 + v73 * v57 - v71 * v55;
  *((double *)&v74 + 1) = v69 + v60 + v71 * v56 + v72 * v57 - v73 * v58;
  *((_QWORD *)&v75 + 1) = sqrt(v54);
  *((_OWORD *)this + 57) = v74;
  *((_OWORD *)this + 58) = v75;
  if (a2)
  {
    v76 = *((_DWORD *)this + 28);
    if (v76 == -2)
      v77 = v76 + 2;
    else
      v77 = v76 + 1;
    *((_DWORD *)this + 28) = v77;
  }
}

void karo::graphics::View::setFar(karo::graphics::View *this, double a2, double a3, int a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  long double v22;
  double v23;
  double v24;

  if (*((_BYTE *)this + 1016))
  {
    v7 = *((double *)this + 122);
    v8 = *((double *)this + 123);
    v9 = *((double *)this + 121);
    v10 = *((double *)this + 120);
    v11 = *((double *)this + 119);
    *((double *)this + 118) = a2;
    *((double *)this + 126) = a3;
    v12 = v8 - v7;
    v13 = 2.0 / (v8 - v7);
    v14 = a3 + -1.0;
    v15 = 1.0;
    if (!a4)
      v14 = 1.0 - a3;
    v16 = v8 + v7;
    *((double *)this + 47) = v13;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((double *)this + 52) = 2.0 / (v10 - v9);
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v14 / (a2 - v11);
    *((_QWORD *)this + 58) = 0;
    *((double *)this + 59) = -v16 / v12;
    *((double *)this + 60) = -(v10 + v9) / (v10 - v9);
    *((double *)this + 61) = (a3 * a2 - v11) / (a2 - v11);
    *((_QWORD *)this + 62) = 0x3FF0000000000000;
    *((double *)this + 145) = v12 * 0.5;
    *((_QWORD *)this + 154) = 0;
    *((_OWORD *)this + 76) = 0u;
    *((_OWORD *)this + 75) = 0u;
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((double *)this + 155) = (a2 - v11) / v14;
    *((double *)this + 157) = v16 * 0.5;
    *((double *)this + 158) = v9;
    *((_BYTE *)this + 1016) = 1;
    v17 = 0.0;
    v18 = (v11 - a3 * a2) / v14;
  }
  else
  {
    v19 = *((double *)this + 124);
    v20 = *((double *)this + 119);
    v21 = tan(*((double *)this + 125) * 0.5);
    *((double *)this + 118) = a2;
    *((long double *)this + 122) = -(v21 * v20 * v19);
    *((long double *)this + 123) = v21 * v20 * v19;
    *((long double *)this + 121) = -(v21 * v20);
    *((long double *)this + 120) = v21 * v20;
    *((double *)this + 126) = a3;
    *((_BYTE *)this + 1016) = 0;
    v22 = (v20 + v20) * v19 * v21;
    v23 = -(a2 - v20 * a3);
    v24 = -(a2 - a3 * a2) * v20;
    *((long double *)this + 47) = (v20 + v20) / v22;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((long double *)this + 52) = 1.0 / v21;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v23 / (a2 - v20);
    *((_QWORD *)this + 59) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 58) = 0xBFF0000000000000;
    *((double *)this + 61) = v24 / (a2 - v20);
    *((_QWORD *)this + 62) = 0;
    v17 = (a2 - v20) / v24;
    *((long double *)this + 145) = v22 / (v20 + v20);
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((long double *)this + 150) = v21;
    *(_OWORD *)((char *)this + 1208) = 0u;
    *(_OWORD *)((char *)this + 1224) = 0u;
    *((_QWORD *)this + 155) = 0;
    *((_QWORD *)this + 157) = 0;
    *((_QWORD *)this + 158) = 0;
    v18 = -1.0;
    v15 = v23 / v24;
  }
  *((double *)this + 156) = v17;
  *((double *)this + 159) = v18;
  *((double *)this + 160) = v15;
  karo::graphics::View::projectionUpdate(this, 1);
}

void karo::graphics::View::setNear(karo::graphics::View *this, double a2, double a3, int a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  long double v25;
  double v26;
  double v27;

  if (*((_BYTE *)this + 1016))
  {
    v7 = *((double *)this + 122);
    v8 = *((double *)this + 123);
    v9 = *((double *)this + 121);
    v10 = *((double *)this + 120);
    v11 = *((double *)this + 118);
    *((double *)this + 119) = a2;
    *((double *)this + 126) = a3;
    v12 = v8 - v7;
    v13 = 2.0 / (v8 - v7);
    v14 = a3 + -1.0;
    v15 = 1.0;
    if (!a4)
      v14 = 1.0 - a3;
    v16 = v11 - a2;
    v17 = v14 / (v11 - a2);
    v18 = v8 + v7;
    v19 = v11 * a3;
    *((double *)this + 47) = v13;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((double *)this + 52) = 2.0 / (v10 - v9);
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v17;
    *((_QWORD *)this + 58) = 0;
    *((double *)this + 59) = -v18 / v12;
    *((double *)this + 60) = -(v10 + v9) / (v10 - v9);
    *((double *)this + 61) = (v19 - a2) / v16;
    *((_QWORD *)this + 62) = 0x3FF0000000000000;
    *((double *)this + 145) = v12 * 0.5;
    *((_QWORD *)this + 154) = 0;
    *((_OWORD *)this + 76) = 0u;
    *((_OWORD *)this + 75) = 0u;
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((double *)this + 155) = v16 / v14;
    *((double *)this + 157) = v18 * 0.5;
    *((double *)this + 158) = v9;
    *((_BYTE *)this + 1016) = 1;
    v20 = 0.0;
    v21 = (a2 - v19) / v14;
  }
  else
  {
    v22 = *((double *)this + 124);
    v23 = *((double *)this + 118);
    v24 = tan(*((double *)this + 125) * 0.5);
    *((double *)this + 119) = a2;
    *((long double *)this + 122) = -(v24 * a2 * v22);
    *((long double *)this + 123) = v24 * a2 * v22;
    *((long double *)this + 121) = -(v24 * a2);
    *((long double *)this + 120) = v24 * a2;
    *((double *)this + 126) = a3;
    *((_BYTE *)this + 1016) = 0;
    v25 = v22 * (a2 + a2) * v24;
    v26 = -(v23 - a3 * a2);
    v27 = -(a2 - a3 * a2) * v23;
    *((long double *)this + 47) = (a2 + a2) / v25;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((long double *)this + 52) = 1.0 / v24;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v26 / (v23 - a2);
    *((_QWORD *)this + 59) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 58) = 0xBFF0000000000000;
    *((double *)this + 61) = v27 / (v23 - a2);
    *((_QWORD *)this + 62) = 0;
    v20 = (v23 - a2) / v27;
    *((long double *)this + 145) = v25 / (a2 + a2);
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((long double *)this + 150) = v24;
    *(_OWORD *)((char *)this + 1208) = 0u;
    *(_OWORD *)((char *)this + 1224) = 0u;
    *((_QWORD *)this + 155) = 0;
    *((_QWORD *)this + 157) = 0;
    *((_QWORD *)this + 158) = 0;
    v21 = -1.0;
    v15 = v26 / v27;
  }
  *((double *)this + 156) = v20;
  *((double *)this + 159) = v21;
  *((double *)this + 160) = v15;
  karo::graphics::View::projectionUpdate(this, 1);
}

uint64_t karo::graphics::View::relates(uint64_t a1, uint64_t a2)
{
  double v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  double v6;
  float64x2_t v7;
  double v8;
  double v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  int v20;

  v2 = *(double *)a2;
  v3 = *(float64x2_t *)(a2 + 8);
  v4 = vsubq_f64(v3, *(float64x2_t *)(a1 + 920));
  v5 = vmulq_f64(v4, v4);
  v6 = *(double *)(a2 + 24);
  if (sqrt(v5.f64[0] + (*(double *)a2 - *(double *)(a1 + 912)) * (*(double *)a2 - *(double *)(a1 + 912)) + v5.f64[1]) > v6 + *(double *)(a1 + 936))
    return 0;
  v7 = vmulq_f64(*(float64x2_t *)(a1 + 512), v3);
  v8 = v7.f64[0] + *(double *)(a1 + 504) * v2 + v7.f64[1] + *(double *)(a1 + 528);
  v9 = -v6;
  if (v8 <= -v6)
    return 0;
  v10 = vmulq_f64(*(float64x2_t *)(a1 + 544), v3);
  v11 = v10.f64[0] + *(double *)(a1 + 536) * v2 + v10.f64[1] + *(double *)(a1 + 560);
  if (v11 <= v9)
    return 0;
  v12 = vmulq_f64(*(float64x2_t *)(a1 + 576), v3);
  v13 = v12.f64[0] + *(double *)(a1 + 568) * v2 + v12.f64[1] + *(double *)(a1 + 592);
  if (v13 <= v9)
    return 0;
  v14 = vmulq_f64(*(float64x2_t *)(a1 + 608), v3);
  v15 = v14.f64[0] + *(double *)(a1 + 600) * v2 + v14.f64[1] + *(double *)(a1 + 624);
  if (v15 <= v9)
    return 0;
  v16 = vmulq_f64(*(float64x2_t *)(a1 + 640), v3);
  v17 = v16.f64[0] + *(double *)(a1 + 632) * v2 + v16.f64[1] + *(double *)(a1 + 656);
  if (v17 <= v9)
    return 0;
  v18 = vmulq_f64(*(float64x2_t *)(a1 + 672), v3);
  v19 = v18.f64[0] + *(double *)(a1 + 664) * v2 + v18.f64[1] + *(double *)(a1 + 688);
  if (v19 <= v9)
    return 0;
  v20 = v11 >= v6;
  if (v8 >= v6)
    ++v20;
  if (v13 >= v6)
    ++v20;
  if (v15 >= v6)
    ++v20;
  if (v17 >= v6)
    ++v20;
  if (v19 >= v6)
    ++v20;
  if (v20 == 6)
    return 2;
  else
    return 1;
}

void karo::graphics::View::lookAt(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;

  v4 = *a2;
  a1[6] = *a2;
  v5 = a2[1];
  a1[7] = v5;
  v6 = a2[2];
  a1[8] = v6;
  v7 = *a3 - v4;
  v8 = a3[1] - v5;
  v9 = a3[2] - v6;
  v10 = 1.0 / sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  v11 = -(v7 * v10);
  v12 = -(v8 * v10);
  v13 = -(v9 * v10);
  v14 = a4[1];
  v15 = a4[2];
  v16 = 1.0 / sqrt(*a4 * *a4 + v14 * v14 + v15 * v15);
  v17 = v16 * *a4;
  v18 = v16 * v14;
  v19 = v16 * v15;
  v20 = -(v19 * v12 - v18 * v13);
  v21 = -(v17 * v13 - v19 * v11);
  v22 = -(v18 * v11 - v17 * v12);
  v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  v24 = v23 * v20;
  v25 = v23 * v21;
  v26 = v23 * v22;
  v27 = -(v23 * v21 * v13 - v26 * v12);
  v28 = -(v26 * v11 - v23 * v20 * v13);
  v29 = -(v24 * v12 - v25 * v11);
  v30 = v24 - (v26 * v11 - v24 * v13);
  if (v30 + v13 <= 0.0)
  {
    if (v24 > v28)
    {
      v36 = v24 == v13;
      v37 = v24 < v13;
    }
    else
    {
      v36 = 1;
      v37 = 0;
    }
    if (v37 || v36)
    {
      v38 = v28 == v13;
      v39 = v28 < v13;
      v40 = sqrt(v13 + 1.0 - v30);
      v41 = 1.0 / (v40 + v40);
      v42 = (v26 + v11) * v41;
      v43 = v12 - (v24 * v12 - v25 * v11);
      v44 = v43 * v41;
      v45 = v40 * 0.5;
      v46 = (v25 - v27) * v41;
      v47 = sqrt(1.0 - (v13 + v24) - (v26 * v11 - v24 * v13));
      v48 = v27 + v25;
      v49 = 1.0 / (v47 + v47);
      v50 = v48 * v49;
      v33 = v47 * 0.5;
      v51 = v43 * v49;
      v52 = (v11 - v26) * v49;
      if (v39 || v38)
        v32 = v42;
      else
        v32 = v50;
      if (v39 || v38)
      {
        v33 = v44;
        v34 = v45;
      }
      else
      {
        v34 = v51;
      }
      if (v39 || v38)
        v35 = v46;
      else
        v35 = v52;
    }
    else
    {
      v53 = sqrt(v24 + 1.0 - (v13 - (v26 * v11 - v24 * v13)));
      v54 = v53 + v53;
      v32 = v53 * 0.5;
      v33 = (v27 + v25) * (1.0 / v54);
      v34 = (v26 + v11) * (1.0 / v54);
      v35 = (v29 - v12) * (1.0 / v54);
    }
  }
  else
  {
    v31 = 0.5 / sqrt(v30 + v13 + 1.0);
    v32 = v31 * (v29 - v12);
    v33 = v31 * (v11 - v26);
    v34 = v31 * (v25 - v27);
    v35 = 0.25 / v31;
  }
  a1[9] = v32;
  a1[10] = v33;
  a1[11] = v34;
  a1[12] = v35;
  karo::graphics::View::orientationUpdate((karo::graphics::View *)a1, 1);
}

void md::StandardLabeler::labelMarkerForSelectionAtPixel(_QWORD *a1@<X0>, float *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v4;
  float *v5;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  float *v37;
  int v38;
  uint64_t v39;
  float *v40;
  float *v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  md::Label *v46;
  std::__shared_weak_count *v47;
  md::LabelPart *v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = a3;
  v5 = a2;
  v49 = 0;
  v50 = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  if ((v9 & 1) == 0)
    goto LABEL_45;
  while (1)
  {
    v54 = mdm::Allocator::instance(void)::alloc;
    v55 = 0;
    v57 = 0;
    v58 = 0;
    v56 = 0;
    v10 = atomic_load(v8);
    if ((v10 & 1) == 0)
    {
      v43 = v4;
      v41 = v5;
      v5 = v41;
      v4 = v43;
      if (v35)
      {
        v36 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v5 = v41;
        v4 = v43;
      }
    }
    v59 = mdm::Allocator::instance(void)::alloc;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v11 = atomic_load(v8);
    if ((v11 & 1) == 0)
    {
      v44 = v4;
      v37 = v5;
      v5 = v37;
      v4 = v44;
      if (v38)
      {
        v39 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v5 = v37;
        v4 = v44;
      }
    }
    v63 = mdm::Allocator::instance(void)::alloc;
    v48 = 0;
    md::StandardLabeler::labelAtPixel(&v46, a1, v5, v4, (uint64_t *)&v48);
    if (!v46)
    {
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_18;
    }
    v12 = a1[30];
    if (v12)
    {
      if (!*(_BYTE *)(v12 + 224) && *(md::Label **)(v12 + 288) == v46)
        break;
    }
    v13 = a1[32];
    if (v13 && !*(_BYTE *)(v13 + 224) && *(md::Label **)(v13 + 288) == v46)
    {
      v30 = a1[33];
      *a4 = v13;
      a4[1] = v30;
      if (v30)
      {
        v31 = (unint64_t *)(v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      goto LABEL_18;
    }
    md::Label::populateFeatureInfo(v46, (md::LabelFeatureInfo *)&v49, v48);
    v14 = a1[3];
    v8 = *(unsigned __int8 **)(v14 + 8);
    v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        v17 = v16;
        std::allocate_shared[abi:nn180100]<md::StandardLabelMarker,std::allocator<md::StandardLabelMarker>,std::shared_ptr<md::LabelManager>,std::shared_ptr<md::Label> &,float,md::LabelFeatureInfo &,void>((uint64_t *)&v45, (uint64_t)v8, v16, (uint64_t *)&v46, (uint64_t)&v49, *(float *)(a1[3] + 176));
        *(_OWORD *)a4 = v45;
        v45 = 0uLL;
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        goto LABEL_18;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_45:
    v42 = v4;
    v40 = v5;
    v5 = v40;
    v4 = v42;
    if (v33)
    {
      v34 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v5 = v40;
      v4 = v42;
    }
  }
  v27 = a1[31];
  *a4 = v12;
  a4[1] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
LABEL_18:
  v20 = v47;
  if (!v47)
    goto LABEL_22;
  v21 = (unint64_t *)&v47->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if ((SHIBYTE(v62) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_34;
    }
  }
  else
  {
LABEL_22:
    if ((SHIBYTE(v62) & 0x80000000) == 0)
      goto LABEL_23;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63 + 40))(v63, v60, v62 & 0x7FFFFFFFFFFFFFFFLL);
  if ((SHIBYTE(v58) & 0x80000000) == 0)
  {
LABEL_24:
    v23 = v52;
    if (!(_QWORD)v52)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_34:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 40))(v59, v56, v58 & 0x7FFFFFFFFFFFFFFFLL);
  v23 = v52;
  if ((_QWORD)v52)
  {
LABEL_25:
    *((_QWORD *)&v52 + 1) = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 40))(v54, v23, v53 - v23);
  }
LABEL_26:
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19F432484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)va2);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::labelAtPixel(_QWORD *a1, _QWORD *a2, float *a3, int a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  float v30;

  *a1 = 0;
  a1[1] = 0;
  if (a5)
    *a5 = 0;
  v9 = (_QWORD *)a2[13];
  v10 = (_QWORD *)a2[14];
  if (v9 != v10)
  {
    v11 = *(float *)(a2[3] + 176);
    v12 = INFINITY;
    do
    {
      v13 = *v9;
      if ((*(_BYTE *)(*v9 + 1072) & 0xFD) == 1)
      {
        if (!a4)
        {
          v15 = 0;
          v14 = 22.0;
          goto LABEL_12;
        }
        v14 = 15.0;
        if (*(_BYTE *)(v13 + 1076))
        {
          v15 = 0;
LABEL_12:
          v30 = 0.0;
          v16 = *a3;
          v17 = a3[1];
          *(_BYTE *)(v13 + 1212) = 0;
          v18 = *(_QWORD *)(v13 + 272);
          if (v18)
          {
            v19 = (*(uint64_t (**)(uint64_t, float *, uint64_t, float, float, float))(*(_QWORD *)v18 + 632))(v18, &v30, v15, v16, v17, v14 * v11);
            v20 = v19;
            if (v19)
            {
              *(_BYTE *)(v13 + 1212) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 656))(v19);
              v21 = v30;
              if (v30 < v12)
              {
                v23 = *v9;
                v22 = v9[1];
                if (v22)
                {
                  v24 = (unint64_t *)(v22 + 8);
                  do
                    v25 = __ldxr(v24);
                  while (__stxr(v25 + 1, v24));
                }
                v26 = (std::__shared_weak_count *)a1[1];
                *a1 = v23;
                a1[1] = v22;
                if (v26)
                {
                  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                  do
                    v28 = __ldaxr(p_shared_owners);
                  while (__stlxr(v28 - 1, p_shared_owners));
                  if (!v28)
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                }
                if (a5)
                  *a5 = v20;
                v12 = v21;
              }
            }
          }
          goto LABEL_6;
        }
        v29 = *(_QWORD *)(v13 + 272);
        if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 640))(v29))
        {
          v13 = *v9;
          v15 = 1;
          goto LABEL_12;
        }
      }
LABEL_6:
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_19F43265C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<md::StandardLabelMarker,std::allocator<md::StandardLabelMarker>,std::shared_ptr<md::LabelManager>,std::shared_ptr<md::Label> &,float,md::LabelFeatureInfo &,void>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5, float a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;

  v12 = (std::__shared_weak_count *)operator new(0x170uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC238;
  v14 = md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v12[1], a2, a3, a4, a5, a6);
  *a1 = v14;
  a1[1] = (uint64_t)v12;
  shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v12[1].__shared_owners_ = v14;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v12[1].__shared_owners_ = v14;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_19F4327B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::LabelFeatureInfo::~LabelFeatureInfo(md::LabelFeatureInfo *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*((char *)this + 127) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), *((_QWORD *)this + 13), *((_QWORD *)this + 15) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 4);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), *((_QWORD *)this + 9), *((_QWORD *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
LABEL_4:
    *((_QWORD *)this + 5) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v2, *((_QWORD *)this + 6) - v2);
  }
LABEL_5:
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__shared_ptr_emplace<md::StandardLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StandardLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::StandardLabelMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::StandardLabeler::labelMarkerForCustomFeatureAnnotation(_QWORD *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;

  v7 = a2;
  v8 = a3;
  v53 = 0uLL;
  md::LabelCustomFeatureSupport::featureForAnnotation(&v51, a1[4], v8, v7);
  v9 = v51;
  if (!v51
    || !*(_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v51 + 552))(v51, 0, 0, 0, 0)&& *(_DWORD *)(v9 + 128)|| (v10 = a1[6], v11 = a1[3], LODWORD(v36) = 1, md::LabelPool::labelForCustomFeature((uint64_t *)&v37, v10, v11, &v51, (unsigned int *)&v36, 0), v12 = v37, *((_QWORD *)&v37 + 1) = 0, v53 = v12, !(_QWORD)v12))
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_23;
  }
  *(_QWORD *)&v37 = 0;
  BYTE8(v37) = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  if ((v14 & 1) == 0)
    goto LABEL_39;
  while (1)
  {
    v41 = mdm::Allocator::instance(void)::alloc;
    v42 = 0;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v15 = atomic_load(v13);
    {
      v34 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v46 = mdm::Allocator::instance(void)::alloc;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v16 = atomic_load(v13);
    {
      v35 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v50 = mdm::Allocator::instance(void)::alloc;
    md::Label::populateFeatureInfo((md::Label *)v53, (md::LabelFeatureInfo *)&v37, 0);
    v17 = a1[3];
    v13 = *(unsigned __int8 **)(v17 + 8);
    v18 = *(std::__shared_weak_count **)(v17 + 16);
    if (v18)
    {
      v19 = std::__shared_weak_count::lock(v18);
      if (v19)
        break;
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_39:
    {
      v33 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  v20 = v19;
  std::allocate_shared[abi:nn180100]<md::StandardLabelMarker,std::allocator<md::StandardLabelMarker>,std::shared_ptr<md::LabelManager>,std::shared_ptr<md::Label> &,float,md::LabelFeatureInfo &,void>((uint64_t *)&v36, (uint64_t)v13, v19, (uint64_t *)&v53, (uint64_t)&v37, *(float *)(a1[3] + 176));
  *(_OWORD *)a4 = v36;
  v36 = 0uLL;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v45) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_36:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v43, v45 & 0x7FFFFFFFFFFFFFFFLL);
      v23 = v39;
      if (!(_QWORD)v39)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 40))(v50, v47, v49 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v45) < 0)
    goto LABEL_36;
LABEL_14:
  v23 = v39;
  if ((_QWORD)v39)
  {
LABEL_15:
    *((_QWORD *)&v39 + 1) = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 40))(v41, v23, v40 - v23);
  }
LABEL_16:
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_23:
  v27 = v52;
  if (v52)
  {
    v28 = (unint64_t *)&v52->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

}

void sub_19F432CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;
  uint64_t v15;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15 - 96);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15 - 80);

  _Unwind_Resume(a1);
}

void md::StandardLabeler::labelMarkerForLabel(uint64_t a1@<X0>, md::Label **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  float *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  float v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (!*a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0u;
  v42 = 0u;
  v43 = 0;
  v7 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v6 & 1) == 0)
    goto LABEL_40;
  while (1)
  {
    v44 = *((_QWORD *)v7 + 299);
    v45 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    {
      v34 = operator new();
      *((_QWORD *)v7 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v49 = *((_QWORD *)v7 + 299);
    v50 = 0;
    v51 = 0;
    v52 = 0;
    {
      v35 = operator new();
      *((_QWORD *)v7 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v53 = *((_QWORD *)v7 + 299);
    md::Label::populateFeatureInfo(*a2, (md::LabelFeatureInfo *)&v39, 0);
    v10 = *(_QWORD *)(a1 + 24);
    v7 = *(float **)(v10 + 8);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    if (v11)
    {
      v12 = std::__shared_weak_count::lock(v11);
      v38 = v12;
      if (v12)
        break;
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_40:
    {
      v33 = operator new();
      *((_QWORD *)v7 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  v13 = v12;
  v14 = *(float *)(*(_QWORD *)(a1 + 24) + 176);
  v15 = (std::__shared_weak_count *)operator new(0x170uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC238;
  v17 = md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v15[1], (uint64_t)v7, v13, (uint64_t *)a2, (uint64_t)&v39, v14);
  *(_QWORD *)&v18 = v17;
  *((_QWORD *)&v18 + 1) = v15;
  shared_weak_owners = (std::__shared_weak_count *)v15[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_20;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v36 = v18;
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v15[1].__shared_owners_ = v17;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    v18 = v36;
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v15[1].__shared_owners_ = v17;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    v37 = v18;
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = v37;
  }
LABEL_20:
  *(_OWORD *)a3 = v18;
  if (!v38)
    goto LABEL_24;
  v27 = (unint64_t *)&v38->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if ((SHIBYTE(v52) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v48) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_37;
    }
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      goto LABEL_25;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 40))(v53, v50, v52 & 0x7FFFFFFFFFFFFFFFLL);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
LABEL_26:
    v29 = v42;
    if (!(_QWORD)v42)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_37:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 40))(v49, v46, v48 & 0x7FFFFFFFFFFFFFFFLL);
  v29 = v42;
  if ((_QWORD)v42)
  {
LABEL_27:
    *((_QWORD *)&v42 + 1) = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 40))(v44, v29, v43 - v29);
  }
LABEL_28:
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_19F43311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&a14);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::setSelectedLabelMarker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  id v22;
  void *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  md::Label *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  double v56;
  double v57;
  long double v58;
  id v59;
  _QWORD v60[3];
  _QWORD *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
  {
    if (!*(_BYTE *)(v3 + 224))
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = *(std::__shared_weak_count **)(a1 + 248);
      *(_QWORD *)(a1 + 240) = v3;
      *(_QWORD *)(a1 + 248) = v4;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a1 + 240);
      md::Label::setSelected(*(md::Label **)(v10 + 288), *(LabelManager **)(a1 + 24), 1);
      md::StandardLabeler::monitorSelectedLabelState((md::StandardLabeler *)a1, 1);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 288) + 8) + 216))(*(_QWORD *)(*(_QWORD *)(v10 + 288) + 8)))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 288) + 8) + 232))(*(_QWORD *)(*(_QWORD *)(v10 + 288) + 8));
        v59 = (id)objc_claimAutoreleasedReturnValue();
        if (!v59)
        {
LABEL_78:

          return;
        }
        v11 = *(_QWORD *)(a1 + 32);
        v12 = v59;
        objc_msgSend(v12, "feature");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "dataSource");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v14)
          goto LABEL_77;
        v17 = *(_QWORD **)(v11 + 80);
        v16 = (_QWORD *)(v11 + 80);
        v15 = v17;
        if (!v17)
          goto LABEL_77;
        v18 = v16;
        do
        {
          v19 = v15[4];
          v20 = v19 >= (unint64_t)v14;
          if (v19 >= (unint64_t)v14)
            v21 = v15;
          else
            v21 = v15 + 1;
          if (v20)
            v18 = v15;
          v15 = (_QWORD *)*v21;
        }
        while (*v21);
        if (v18 == v16 || (unint64_t)v14 < v18[4])
        {
LABEL_77:

          goto LABEL_78;
        }
        v22 = v12;
        objc_msgSend(v22, "feature");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "isGlobalFeature");

        if (v24)
        {
          v25 = v18[5];
          v60[0] = &off_1E42D2C20;
          v60[1] = v25;
          v61 = v60;
          md::LabelCustomFeatureSupport::queueCommand(v25, 3, v60);
          v26 = v61;
          if (v61 == v60)
          {
            v27 = 4;
            v26 = v60;
            goto LABEL_75;
          }
          if (v61)
          {
            v27 = 5;
LABEL_75:
            (*(void (**)(void))(*v26 + 8 * v27))();
          }
        }
        else
        {
          objc_msgSend(v22, "coordinate");
          v57 = v56;
          objc_msgSend(v22, "coordinate");
          v58 = tan(v57 * 0.00872664626 + 0.785398163);
          log(v58);
          md::LabelCustomFeatureProvider::featuresDidChangeForRect((uint64_t)(v18 + 5));
        }

        goto LABEL_77;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    v28 = *(_QWORD *)(a1 + 240);
    if (v28)
    {
      v29 = *(_BYTE **)(*(_QWORD *)(v28 + 288) + 8);
      if (!v29[143]
        && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v29 + 320))(*(_QWORD *)(*(_QWORD *)(v28 + 288) + 8))
        || v29[144])
      {
        v31 = *(_QWORD *)(a1 + 240);
        v30 = *(_QWORD *)(a1 + 248);
        if (v30)
        {
          v32 = (unint64_t *)(v30 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(std::__shared_weak_count **)(a1 + 264);
        *(_QWORD *)(a1 + 256) = v31;
        *(_QWORD *)(a1 + 264) = v30;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v37 = *(_QWORD *)(a1 + 48);
        if (*(_QWORD *)(v37 + 720))
        {
          v38 = *(std::__shared_weak_count **)(v37 + 728);
          *(_OWORD *)(v37 + 720) = 0u;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          *(_BYTE *)(v37 + 760) = 0;
          *(_BYTE *)(v37 + 758) = 1;
        }
        v41 = *(_QWORD *)(v28 + 288);
        if (v41)
        {
          v42 = *(_QWORD *)(v28 + 296);
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_QWORD *)(v37 + 720) = v41;
          v45 = *(std::__shared_weak_count **)(v37 + 728);
          *(_QWORD *)(v37 + 728) = v42;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          *(_BYTE *)(v37 + 760) = 0;
          v48 = *(md::Label **)(v28 + 288);
        }
        else
        {
          v48 = 0;
        }
        md::Label::setPreviouslySelected(v48, *(LabelManager **)(a1 + 24), 1);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 512))(v28, 0);
      md::Label::setSelected(*(md::Label **)(v28 + 288), *(LabelManager **)(a1 + 24), 0);
      v49 = *(std::__shared_weak_count **)(a1 + 248);
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v52 + 704))
      {
        v53 = *(std::__shared_weak_count **)(v52 + 712);
        *(_OWORD *)(v52 + 704) = 0u;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        *(_BYTE *)(v52 + 760) = 0;
        *(_BYTE *)(v52 + 758) = 1;
      }
    }
  }
}

void sub_19F433660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void md::StandardLabeler::monitorSelectedLabelState(md::StandardLabeler *this, int a2)
{
  char v2;
  int v4;
  int v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a2;
  if (a2)
  {
    *((_WORD *)this + 180) = 0;
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 360);
    if (v4 == (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 464))(*((_QWORD *)this + 30)))
    {
      v5 = 0;
      goto LABEL_7;
    }
  }
  *((_BYTE *)this + 360) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 464))(*((_QWORD *)this + 30));
  if ((v2 & 1) != 0)
  {
LABEL_8:
    *((_BYTE *)this + 361) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 648))(*((_QWORD *)this + 30));
    v5 = 1;
    goto LABEL_9;
  }
  v5 = 1;
LABEL_7:
  v6 = *((unsigned __int8 *)this + 361);
  if (v6 != (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 30) + 648))(*((_QWORD *)this + 30)))
    goto LABEL_8;
  if (!*((_BYTE *)this + 360))
    goto LABEL_19;
LABEL_9:
  v7 = *(float *)(*((_QWORD *)this + 3) + 176);
  v8 = (*(float (**)(_QWORD, _QWORD))(**((_QWORD **)this + 30) + 560))(*((_QWORD *)this + 30), 0);
  if (vabds_f32(v8, *((float *)this + 82)) >= v7
    || vabds_f32(v9, *((float *)this + 83)) >= v7
    || vabds_f32(v10, *((float *)this + 84)) >= v7
    || vabds_f32(v11, *((float *)this + 85)) >= v7)
  {
    *((float *)this + 82) = v8;
    *((float *)this + 83) = v9;
    *((float *)this + 84) = v10;
    v5 = 1;
    *((float *)this + 85) = v11;
  }
  v12 = (*(float (**)(_QWORD))(**((_QWORD **)this + 30) + 576))(*((_QWORD *)this + 30));
  if (vabds_f32(v12, *((float *)this + 86)) >= v7
    || vabds_f32(v13, *((float *)this + 87)) >= v7
    || vabds_f32(v14, *((float *)this + 88)) >= v7
    || vabds_f32(v15, *((float *)this + 89)) >= v7)
  {
    *((float *)this + 86) = v12;
    *((float *)this + 87) = v13;
    *((float *)this + 88) = v14;
    *((float *)this + 89) = v15;
  }
  else
  {
LABEL_19:
    if (!v5)
      return;
  }
  v16 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 30) == *(_QWORD *)(v16 + 3504))
  {
    v17 = *(_QWORD *)(v16 + 136);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 184);
      if (v18)
      {
        v19 = *((_QWORD *)this + 3);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v18 + 48))(v18, &v19, v16 + 3400);
      }
    }
  }
}

_QWORD *md::StandardLabeler::setPreviouslySelectedLabelMarker(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  md::Label *v24;

  if (*a2 != result[32])
  {
    v3 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 200))(result);
    v4 = *a2;
    if (*a2)
    {
      if (v4 != v3[30] && !*(_BYTE *)(v4 + 224))
      {
        if ((v5 = *(_BYTE **)(*(_QWORD *)(v4 + 288) + 8), !v5[143])
          && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 320))(*(_QWORD *)(*(_QWORD *)(v4 + 288) + 8)),
              !(_DWORD)result)
          || v5[144])
        {
          v7 = *a2;
          v6 = a2[1];
          if (v6)
          {
            v8 = (unint64_t *)(v6 + 8);
            do
              v9 = __ldxr(v8);
            while (__stxr(v9 + 1, v8));
          }
          v10 = (std::__shared_weak_count *)v3[33];
          v3[32] = v7;
          v3[33] = v6;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = v3[6];
          if (*(_QWORD *)(v13 + 720))
          {
            v14 = *(std::__shared_weak_count **)(v13 + 728);
            *(_OWORD *)(v13 + 720) = 0u;
            if (v14)
            {
              v15 = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 - 1, v15));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            *(_BYTE *)(v13 + 760) = 0;
            *(_BYTE *)(v13 + 758) = 1;
          }
          v17 = *(_QWORD *)(v4 + 288);
          if (v17)
          {
            v18 = *(_QWORD *)(v4 + 296);
            if (v18)
            {
              v19 = (unint64_t *)(v18 + 8);
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
            *(_QWORD *)(v13 + 720) = v17;
            v21 = *(std::__shared_weak_count **)(v13 + 728);
            *(_QWORD *)(v13 + 728) = v18;
            if (v21)
            {
              v22 = (unint64_t *)&v21->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            *(_BYTE *)(v13 + 760) = 0;
            v24 = *(md::Label **)(v4 + 288);
          }
          else
          {
            v24 = 0;
          }
          return md::Label::setPreviouslySelected(v24, (LabelManager *)v3[3], 1);
        }
      }
    }
  }
  return result;
}

void md::StandardLabeler::getLabelMarkers(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  md::Label **v7;
  md::Label **v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  float v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count **v33;
  unint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _Unwind_Exception *v47;
  _Unwind_Exception *v48;
  uint64_t *v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v3 = a1[3];
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  v65 = *(_QWORD *)(v3 + 8);
  if (!v4 || (v6 = std::__shared_weak_count::lock(v4), (v66 = v6) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    v48 = v47;
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v50);
    md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&v51);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
    _Unwind_Resume(v48);
  }
  v7 = (md::Label **)a1[13];
  v8 = (md::Label **)a1[14];
  if (v7 != v8)
  {
    v9 = &v62;
    while (1)
    {
      v11 = (float *)a1[3];
      v12 = *((_QWORD *)*v7 + 34);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 256))(v12);
      }
      else
      {
        v15 = -3.4028e38;
        v13 = 3.4028e38;
        v14 = 3.4028e38;
        v16 = -3.4028e38;
      }
      if (v11[380] > v13 && v11[378] < v15 && v11[381] > v14 && v11[379] < v16 && (*((_BYTE *)*v7 + 1072) & 0xFD) == 1)
        break;
LABEL_6:
      v7 += 2;
      if (v7 == v8)
      {
        v44 = v66;
        if (!v66)
          return;
        goto LABEL_62;
      }
    }
    v51 = 0;
    v52 = 0;
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    v17 = atomic_load(v10);
    if ((v17 & 1) == 0 && __cxa_guard_acquire((__guard *)v10))
    {
      v41 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
      __cxa_guard_release((__guard *)v10);
    }
    v56 = mdm::Allocator::instance(void)::alloc;
    v57 = 0;
    v59 = 0;
    v60 = 0;
    v58 = 0;
    v18 = atomic_load(v10);
    if ((v18 & 1) == 0 && __cxa_guard_acquire((__guard *)v10))
    {
      v42 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
      __cxa_guard_release((__guard *)v10);
    }
    v61 = mdm::Allocator::instance(void)::alloc;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    v19 = atomic_load(v10);
    if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v10))
    {
      v43 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
      __cxa_guard_release((__guard *)v10);
    }
    v49 = v9;
    v64 = mdm::Allocator::instance(void)::alloc;
    md::Label::populateFeatureInfo(*v7, (md::LabelFeatureInfo *)&v51, 0);
    v20 = v10;
    v21 = *(float *)(a1[3] + 176);
    v22 = (std::__shared_weak_count *)operator new(0x170uLL);
    v22->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    v22->__shared_weak_owners_ = 0;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC238;
    v24 = v22 + 1;
    md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v22[1], v65, v66, (uint64_t *)v7, (uint64_t)&v51, v21);
    shared_weak_owners = (std::__shared_weak_count *)v22[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
        goto LABEL_31;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
      v22[1].__shared_owners_ = (uint64_t)v24;
      v22[1].__shared_weak_owners_ = (uint64_t)v22;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
      v30 = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v22[1].__shared_owners_ = (uint64_t)v24;
      v22[1].__shared_weak_owners_ = (uint64_t)v22;
    }
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_31:
    *(_QWORD *)&v50 = v22 + 1;
    *((_QWORD *)&v50 + 1) = v22;
    v33 = *(std::__shared_weak_count ***)(a2 + 8);
    if ((unint64_t)v33 >= *(_QWORD *)(a2 + 16))
    {
      v35 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v50);
    }
    else
    {
      if (v33)
      {
        *v33 = v24;
        v33[1] = v22;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
      v35 = v33 + 2;
    }
    *(_QWORD *)(a2 + 8) = v35;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (v36)
    {
      if ((SHIBYTE(v63) & 0x80000000) == 0)
        goto LABEL_41;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((SHIBYTE(v63) & 0x80000000) == 0)
      {
LABEL_41:
        if ((SHIBYTE(v60) & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_51;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 40))(v64, v62, v63 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
LABEL_42:
      v37 = v54;
      if (!(_QWORD)v54)
        goto LABEL_44;
      goto LABEL_43;
    }
LABEL_51:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 40))(v61, v58, v60 & 0x7FFFFFFFFFFFFFFFLL);
    v37 = v54;
    if (!(_QWORD)v54)
    {
LABEL_44:
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v10 = v20;
      v9 = v49;
      goto LABEL_6;
    }
LABEL_43:
    *((_QWORD *)&v54 + 1) = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 40))(v56, v37, v55 - v37);
    goto LABEL_44;
  }
  v44 = v6;
LABEL_62:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
}

_OWORD *std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7)
  {
    v9 = 16 * v7;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v7, 8);
    v11 = (__int128 *)(v10 + 16 * v2);
    v7 = v10 + v9;
    if (v10)
    {
      v12 = *a2;
      *v11 = *a2;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
  }
  else
  {
    v11 = (__int128 *)(16 * v2);
  }
  v15 = v11 + 1;
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD **)(a1 + 8);
  if (v17 == *(_QWORD **)a1)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v15;
    v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v17 - 1);
      v17 -= 2;
      *--v11 = v18;
      *v17 = 0;
      v17[1] = 0;
    }
    while (v17 != v16);
    v17 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v15;
    v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    while (v19 != v17)
    {
      v21 = (std::__shared_weak_count *)*(v19 - 1);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v19 -= 2;
    }
  }
  if (v17)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v17, v20 - (_QWORD)v17);
  return v15;
}

uint64_t md::StandardLabeler::isLabelHitAtPixel(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  uint64_t result;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;

  if (*(_BYTE *)(a2 + 224))
    return 0;
  v7 = *(float *)(*(_QWORD *)(a1 + 24) + 176);
  v8 = *(_QWORD *)(a2 + 288);
  if (a4)
  {
    v9 = 15.0;
    if (*(_BYTE *)(v8 + 1076))
    {
      v10 = 0;
    }
    else
    {
      result = *(_QWORD *)(v8 + 272);
      if (!result)
        return result;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 640))(result);
      if (!(_DWORD)result)
        return result;
      v8 = *(_QWORD *)(a2 + 288);
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
    v9 = 22.0;
  }
  v13 = 0;
  v11 = *a3;
  v12 = a3[1];
  *(_BYTE *)(v8 + 1212) = 0;
  result = *(_QWORD *)(v8 + 272);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, int *, uint64_t, float, float, float))(*(_QWORD *)result + 632))(result, &v13, v10, v11, v12, v9 * v7);
    if (result)
    {
      *(_BYTE *)(v8 + 1212) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 656))(result);
      return 1;
    }
  }
  return result;
}

void md::StandardLabeler::roadMarkerForSelectionAtPixel(std::__shared_weak_count *a1@<X0>, float *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v3;
  char *v4;
  char *v5;
  float *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *on_zero_shared;
  void (__cdecl *v17)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int8 v33;
  double v34;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  geo::read_write_lock *v52;
  const char *v53;
  malloc_zone_t *zone;
  uint64_t v55;
  geo::read_write_lock *v56;
  const char *v57;
  malloc_zone_t *v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;

  v9 = a1;
  v68 = 0;
  md::StandardLabeler::labelAtPixel(&v66, a1, a2, 0, &v68);
  if (v66)
  {
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_3;
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v64 = -1;
  v63 = -1;
  v65 = 0;
  md::StandardLabeler::hitRoadFeatureAtPixel((uint64_t)v9, (uint64_t)a2, (uint64_t)&v66, (uint64_t)&v60, 0);
  v14 = v60;
  if (!v60)
  {
    v48 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    goto LABEL_2;
  }
  v15 = v9[1].__vftable;
  v17 = v15->~__shared_weak_count_0;
  on_zero_shared = (std::__shared_weak_count *)v15->__on_zero_shared;
  if (!on_zero_shared || (v18 = std::__shared_weak_count::lock(on_zero_shared), (v59 = v18) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_59:
    {
      v51 = operator new();
      *(_QWORD *)(v51 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v51 + 24) = "VectorKitLabels";
      *(_OWORD *)(v51 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v51 = &off_1E42B5668;
      *(_QWORD *)(v51 + 8) = "VectorKitLabels";
      *(_OWORD *)(v51 + 72) = 0u;
      *(_OWORD *)(v51 + 88) = 0u;
      *(_OWORD *)(v51 + 104) = 0u;
      *(_OWORD *)(v51 + 120) = 0u;
      *(_OWORD *)(v51 + 136) = 0u;
      *(_OWORD *)(v51 + 152) = 0u;
      *(_OWORD *)(v51 + 168) = 0u;
      *(_OWORD *)(v51 + 184) = 0u;
      *(_OWORD *)(v51 + 200) = 0u;
      *(_OWORD *)(v51 + 216) = 0u;
      *(_OWORD *)(v51 + 232) = 0u;
      *(_QWORD *)(v51 + 248) = 0;
      *(_OWORD *)(v51 + 56) = 0u;
      v52 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v51 + 56), 0);
      if ((_DWORD)v52)
        geo::read_write_lock::logFailure(v52, (uint64_t)"initialization", v53);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v51 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v51 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      *((_QWORD *)v6 + 299) = v51;
    }
    goto LABEL_18;
  }
  v19 = v18;
  v20 = (char *)operator new(0x98uLL);
  v9 = (std::__shared_weak_count *)v20;
  *((_QWORD *)v20 + 1) = 0;
  v3 = (unint64_t *)(v20 + 8);
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_1E42DBCF8;
  *((_QWORD *)v20 + 3) = &off_1E42949C8;
  v4 = v20 + 24;
  *((_QWORD *)v20 + 4) = 0;
  *((_QWORD *)v20 + 5) = 0;
  *((_QWORD *)v20 + 6) = 0;
  *((_QWORD *)v20 + 7) = v14;
  v14 = v65;
  v21 = v61;
  *((_QWORD *)v20 + 8) = v61;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)v20 + 9) = v17;
  *((_QWORD *)v20 + 10) = v19;
  p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  *(_OWORD *)(v20 + 88) = 0u;
  v5 = v20 + 88;
  *(_OWORD *)(v20 + 104) = 0u;
  v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v26 & 1) == 0)
    goto LABEL_59;
LABEL_18:
  v9[5].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v6 + 299);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9[2].__shared_owners_ + 264))(v9[2].__shared_owners_);
  v28 = operator new();
  md::MarkerFeatureHandle::MarkerFeatureHandle(v28, (unint64_t)v14, v27);
  v29 = *(_QWORD *)v5;
  *(_QWORD *)v5 = v28;
  if (v29)
  {
    v30 = *(std::__shared_weak_count **)(v29 + 56);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    MEMORY[0x1A1AF4E00](v29, 0x1060C4018558911);
  }
  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  v33 = atomic_load(v7);
  {
    v55 = operator new();
    *(_QWORD *)(v55 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v55 + 24) = "VectorKitLabels";
    *(_OWORD *)(v55 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v55 = &off_1E42B5668;
    *(_QWORD *)(v55 + 8) = "VectorKitLabels";
    *(_OWORD *)(v55 + 72) = 0u;
    *(_OWORD *)(v55 + 88) = 0u;
    *(_OWORD *)(v55 + 104) = 0u;
    *(_OWORD *)(v55 + 120) = 0u;
    *(_OWORD *)(v55 + 136) = 0u;
    *(_OWORD *)(v55 + 152) = 0u;
    *(_OWORD *)(v55 + 168) = 0u;
    *(_OWORD *)(v55 + 184) = 0u;
    *(_OWORD *)(v55 + 200) = 0u;
    *(_OWORD *)(v55 + 216) = 0u;
    *(_OWORD *)(v55 + 232) = 0u;
    *(_QWORD *)(v55 + 248) = 0;
    *(_OWORD *)(v55 + 56) = 0u;
    v56 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v55 + 56), 0);
    if ((_DWORD)v56)
      geo::read_write_lock::logFailure(v56, (uint64_t)"initialization", v57);
    v58 = malloc_create_zone(0, 0);
    *(_QWORD *)(v55 + 48) = v58;
    malloc_set_zone_name(v58, "VectorKitLabels");
    *(_QWORD *)(v55 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    *((_QWORD *)v6 + 299) = v55;
  }
  v73 = *((_QWORD *)v6 + 299);
  v34 = md::LabelFeature::textFromFeature(&v69, v14, 1, (uint64_t)v71, 0);
  if (SHIBYTE(v9[4].__shared_weak_owners_) < 0)
    (*((void (**)(std::__shared_weak_count_vtbl *, std::__shared_weak_count_vtbl *, uint64_t, double))v9[5].~__shared_weak_count
     + 5))(v9[5].__vftable, v9[4].__vftable, v9[4].__shared_weak_owners_ & 0x7FFFFFFFFFFFFFFFLL, v34);
  *(_OWORD *)(v5 + 8) = v69;
  *((_QWORD *)v5 + 3) = v70;
  if (SHIBYTE(v72) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v73 + 40))(v73, v71[0], v72 & 0x7FFFFFFFFFFFFFFFLL);
  *a3 = v4;
  a3[1] = v9;
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      v39 = __ldxr(v3);
    while (__stxr(v39 + 1, v3));
    v40 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v9[1].__shared_owners_ = (uint64_t)v4;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    do
LABEL_40:
      v42 = __ldaxr(v3);
    while (__stlxr(v42 - 1, v3));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_43;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      v36 = __ldxr(v3);
    while (__stxr(v36 + 1, v3));
    v37 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v9[1].__shared_owners_ = (uint64_t)v4;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    goto LABEL_40;
  }
LABEL_43:
  if (v59)
  {
    v43 = (unint64_t *)&v59->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v45 = v61;
  if (v61)
  {
    v46 = (unint64_t *)&v61->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_3:
  v11 = v67;
  if (v67)
  {
    v12 = (unint64_t *)&v67->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19F4347F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;

  if (SHIBYTE(a25) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a26 + 40))(a26, a23, a25 & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(v26 + 119) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v26 + 120) + 40))(*(_QWORD *)(v26 + 120), *(_QWORD *)(v26 + 96), *(_QWORD *)(v26 + 112) & 0x7FFFFFFFFFFFFFFFLL);
  v29 = *v27;
  *v27 = 0;
  if (v29)
  {
    v32 = *(std::__shared_weak_count **)(v29 + 56);
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    MEMORY[0x1A1AF4E00](v29, 0x1060C4018558911);
    v30 = *(std::__shared_weak_count **)(v26 + 80);
    if (!v30)
    {
LABEL_7:
      v31 = *(std::__shared_weak_count **)(v26 + 64);
      if (!v31)
        goto LABEL_20;
      goto LABEL_16;
    }
  }
  else
  {
    v30 = *(std::__shared_weak_count **)(v26 + 80);
    if (!v30)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v30);
  v31 = *(std::__shared_weak_count **)(v26 + 64);
  if (!v31)
    goto LABEL_20;
LABEL_16:
  v35 = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_20:
  v37 = *(std::__shared_weak_count **)(v26 + 40);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v38);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::hitRoadFeatureAtPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  __int128 *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  _QWORD *v134;
  uint64_t v135;
  unsigned __int8 v136;
  char *v137;
  char *v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  double v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  char *i;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  __int128 v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  __int128 v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  __int128 v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  int v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  float v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  __int128 v272;
  unint64_t v273;
  __int128 *v274;
  uint64_t v275;

  v275 = *MEMORY[0x1E0C80C00];
  v263 = 0;
  v264 = 0;
  v265 = 0;
  {
    v258 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v258, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v266 = mdm::Allocator::instance(void)::alloc;
  v10 = *(_QWORD *)(a1 + 24);
  v262 = a4;
  v11 = a5 == 1 && *(_BYTE *)(v10 + 3644) != 0;
  v261 = a5;
  v267 = *(float *)(v10 + 176) * 22.0;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(uint64_t **)(v12 + 16);
  v14 = *(uint64_t **)(v12 + 24);
  if (!v11)
  {
    if (v13 == v14)
      goto LABEL_205;
    while (1)
    {
      v37 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v37 + 3637))
      {
        if (!*(_BYTE *)(v37 + 3639))
          goto LABEL_200;
        goto LABEL_45;
      }
      v38 = *v13;
      v39 = (__int128 *)operator new(0x28uLL);
      *(_QWORD *)v39 = &off_1E42CCC80;
      *((_QWORD *)v39 + 1) = &v267;
      *((_QWORD *)v39 + 2) = a1;
      *((_QWORD *)v39 + 3) = a2;
      *((_QWORD *)v39 + 4) = &v263;
      v274 = v39;
      md::LabelMapTile::enumerateLineFeatures(v38, (uint64_t)&v272);
      v40 = v274;
      if (v274 == &v272)
        break;
      if (v274)
      {
        v41 = 5;
LABEL_53:
        (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
      }
      v42 = (_QWORD *)*v13;
      v43 = (__int128 *)operator new(0x28uLL);
      *(_QWORD *)v43 = &off_1E42CCCC8;
      *((_QWORD *)v43 + 1) = &v267;
      *((_QWORD *)v43 + 2) = a1;
      *((_QWORD *)v43 + 3) = a2;
      *((_QWORD *)v43 + 4) = &v263;
      v274 = v43;
      v44 = v42[25];
      if (v44)
      {
        v45 = *(_QWORD **)(v44 + 72);
        v46 = (_QWORD *)(v44 + 80);
        if (v45 != (_QWORD *)(v44 + 80))
        {
          do
          {
            v55 = (std::__shared_weak_count *)v45[5];
            if (v55)
            {
              v56 = std::__shared_weak_count::lock(v55);
              v271 = v56;
              if (v56)
              {
                v57 = v56;
                v58 = v45[4];
                v270 = v58;
                if (!v58)
                  goto LABEL_75;
                v268 = v58;
                v269 = v56;
                p_shared_owners = (unint64_t *)&v56->__shared_owners_;
                do
                  v60 = __ldxr(p_shared_owners);
                while (__stxr(v60 + 1, p_shared_owners));
                if (!v274)
                {
LABEL_400:
                  std::__throw_bad_function_call[abi:nn180100]();
                  __break(1u);
                  return;
                }
                (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, &v268);
                v61 = v269;
                if (!v269)
                  goto LABEL_74;
                v62 = (unint64_t *)&v269->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                  v57 = v271;
                  if (v271)
                  {
LABEL_75:
                    v64 = (unint64_t *)&v57->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                }
                else
                {
LABEL_74:
                  v57 = v271;
                  if (v271)
                    goto LABEL_75;
                }
              }
            }
            v66 = (_QWORD *)v45[1];
            if (v66)
            {
              do
              {
                v67 = v66;
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
            else
            {
              do
              {
                v67 = (_QWORD *)v45[2];
                v33 = *v67 == (_QWORD)v45;
                v45 = v67;
              }
              while (!v33);
            }
            v45 = v67;
          }
          while (v67 != v46);
        }
      }
      v47 = v42[23];
      if (v47)
      {
        v48 = *(_QWORD **)(v47 + 72);
        v49 = (_QWORD *)(v47 + 80);
        if (v48 != (_QWORD *)(v47 + 80))
        {
          do
          {
            v68 = (std::__shared_weak_count *)v48[5];
            if (v68)
            {
              v69 = std::__shared_weak_count::lock(v68);
              v271 = v69;
              if (v69)
              {
                v70 = v69;
                v71 = v48[4];
                v270 = v71;
                if (!v71)
                  goto LABEL_99;
                v268 = v71;
                v269 = v69;
                v72 = (unint64_t *)&v69->__shared_owners_;
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
                if (!v274)
                  goto LABEL_400;
                (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, &v268);
                v74 = v269;
                if (!v269)
                  goto LABEL_98;
                v75 = (unint64_t *)&v269->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                  v70 = v271;
                  if (v271)
                  {
LABEL_99:
                    v77 = (unint64_t *)&v70->__shared_owners_;
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                }
                else
                {
LABEL_98:
                  v70 = v271;
                  if (v271)
                    goto LABEL_99;
                }
              }
            }
            v79 = (_QWORD *)v48[1];
            if (v79)
            {
              do
              {
                v80 = v79;
                v79 = (_QWORD *)*v79;
              }
              while (v79);
            }
            else
            {
              do
              {
                v80 = (_QWORD *)v48[2];
                v33 = *v80 == (_QWORD)v48;
                v48 = v80;
              }
              while (!v33);
            }
            v48 = v80;
          }
          while (v80 != v49);
        }
      }
      v50 = v42[21];
      if (v50)
      {
        v51 = *(_QWORD **)(v50 + 72);
        v52 = (_QWORD *)(v50 + 80);
        if (v51 != (_QWORD *)(v50 + 80))
        {
          do
          {
            v81 = (std::__shared_weak_count *)v51[5];
            if (v81)
            {
              v82 = std::__shared_weak_count::lock(v81);
              v271 = v82;
              if (v82)
              {
                v83 = v82;
                v84 = v51[4];
                v270 = v84;
                if (!v84)
                  goto LABEL_123;
                v268 = v84;
                v269 = v82;
                v85 = (unint64_t *)&v82->__shared_owners_;
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
                if (!v274)
                  goto LABEL_400;
                (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, &v268);
                v87 = v269;
                if (!v269)
                  goto LABEL_122;
                v88 = (unint64_t *)&v269->__shared_owners_;
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                  v83 = v271;
                  if (v271)
                  {
LABEL_123:
                    v90 = (unint64_t *)&v83->__shared_owners_;
                    do
                      v91 = __ldaxr(v90);
                    while (__stlxr(v91 - 1, v90));
                    if (!v91)
                    {
                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                      std::__shared_weak_count::__release_weak(v83);
                    }
                  }
                }
                else
                {
LABEL_122:
                  v83 = v271;
                  if (v271)
                    goto LABEL_123;
                }
              }
            }
            v92 = (_QWORD *)v51[1];
            if (v92)
            {
              do
              {
                v93 = v92;
                v92 = (_QWORD *)*v92;
              }
              while (v92);
            }
            else
            {
              do
              {
                v93 = (_QWORD *)v51[2];
                v33 = *v93 == (_QWORD)v51;
                v51 = v93;
              }
              while (!v33);
            }
            v51 = v93;
          }
          while (v93 != v52);
        }
      }
      v53 = v274;
      if (v274 == &v272)
      {
        v53 = &v272;
        v54 = 4;
        goto LABEL_136;
      }
      if (v274)
      {
        v54 = 5;
LABEL_136:
        (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
      }
      v94 = *v13;
      v95 = (__int128 *)operator new(0x28uLL);
      *(_QWORD *)v95 = &off_1E42CCD10;
      *((_QWORD *)v95 + 1) = &v267;
      *((_QWORD *)v95 + 2) = a1;
      *((_QWORD *)v95 + 3) = a2;
      *((_QWORD *)v95 + 4) = &v263;
      v274 = v95;
      v96 = *(_QWORD *)(v94 + 264);
      if (!v96 || (v97 = *(_QWORD **)(v96 + 136), v98 = (_QWORD *)(v96 + 144), v97 == (_QWORD *)(v96 + 144)))
      {
LABEL_166:
        v112 = 5;
LABEL_167:
        (*(void (**)(void))(*(_QWORD *)v95 + 8 * v112))();
        goto LABEL_168;
      }
      do
      {
        v99 = (std::__shared_weak_count *)v97[5];
        if (!v99)
          goto LABEL_156;
        v100 = std::__shared_weak_count::lock(v99);
        v271 = v100;
        if (!v100)
          goto LABEL_156;
        v101 = v100;
        v102 = v97[4];
        v270 = v102;
        if (v102)
        {
          v268 = v102;
          v269 = v100;
          v103 = (unint64_t *)&v100->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
          if (!v274)
            goto LABEL_400;
          (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, &v268);
          v105 = v269;
          if (!v269)
            goto LABEL_151;
          v106 = (unint64_t *)&v269->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
            v101 = v271;
            if (!v271)
              goto LABEL_156;
          }
          else
          {
LABEL_151:
            v101 = v271;
            if (!v271)
              goto LABEL_156;
          }
        }
        v108 = (unint64_t *)&v101->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
LABEL_156:
        v110 = (_QWORD *)v97[1];
        if (v110)
        {
          do
          {
            v111 = v110;
            v110 = (_QWORD *)*v110;
          }
          while (v110);
        }
        else
        {
          do
          {
            v111 = (_QWORD *)v97[2];
            v33 = *v111 == (_QWORD)v97;
            v97 = v111;
          }
          while (!v33);
        }
        v97 = v111;
      }
      while (v111 != v98);
      v95 = v274;
      if (v274 == &v272)
      {
        v95 = &v272;
        v112 = 4;
        goto LABEL_167;
      }
      if (v274)
        goto LABEL_166;
LABEL_168:
      v113 = *v13;
      v114 = (__int128 *)operator new(0x28uLL);
      *(_QWORD *)v114 = &off_1E42CCD58;
      *((_QWORD *)v114 + 1) = &v267;
      *((_QWORD *)v114 + 2) = a1;
      *((_QWORD *)v114 + 3) = a2;
      *((_QWORD *)v114 + 4) = &v263;
      v274 = v114;
      v115 = *(_QWORD *)(v113 + 248);
      if (!v115 || (v116 = *(_QWORD **)(v115 + 232), v117 = (_QWORD *)(v115 + 240), v116 == (_QWORD *)(v115 + 240)))
      {
LABEL_197:
        v131 = 5;
LABEL_198:
        (*(void (**)(void))(*(_QWORD *)v114 + 8 * v131))();
        goto LABEL_199;
      }
      while (2)
      {
        v118 = (std::__shared_weak_count *)v116[5];
        if (v118)
        {
          v119 = std::__shared_weak_count::lock(v118);
          v271 = v119;
          if (v119)
          {
            v120 = v119;
            v121 = v116[4];
            v270 = v121;
            if (!v121)
              goto LABEL_183;
            v268 = v121;
            v269 = v119;
            v122 = (unint64_t *)&v119->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
            if (!v274)
              goto LABEL_400;
            (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, &v268);
            v124 = v269;
            if (!v269)
              goto LABEL_182;
            v125 = (unint64_t *)&v269->__shared_owners_;
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
              v120 = v271;
              if (v271)
              {
LABEL_183:
                v127 = (unint64_t *)&v120->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
            }
            else
            {
LABEL_182:
              v120 = v271;
              if (v271)
                goto LABEL_183;
            }
          }
        }
        v129 = (_QWORD *)v116[1];
        if (v129)
        {
          do
          {
            v130 = v129;
            v129 = (_QWORD *)*v129;
          }
          while (v129);
        }
        else
        {
          do
          {
            v130 = (_QWORD *)v116[2];
            v33 = *v130 == (_QWORD)v116;
            v116 = v130;
          }
          while (!v33);
        }
        v116 = v130;
        if (v130 != v117)
          continue;
        break;
      }
      v114 = v274;
      if (v274 == &v272)
      {
        v114 = &v272;
        v131 = 4;
        goto LABEL_198;
      }
      if (v274)
        goto LABEL_197;
LABEL_199:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 3639))
      {
LABEL_200:
        v132 = *v13;
        v133 = (__int128 *)operator new(0x28uLL);
        *(_QWORD *)v133 = &off_1E42CCDA0;
        *((_QWORD *)v133 + 1) = &v267;
        *((_QWORD *)v133 + 2) = a1;
        *((_QWORD *)v133 + 3) = a2;
        *((_QWORD *)v133 + 4) = &v263;
        v274 = v133;
        md::LabelMapTile::enumeratePhysicalLineFeatures(*(_QWORD *)(v132 + 184), (uint64_t)&v272);
        v35 = v274;
        if (v274 == &v272)
        {
          v35 = &v272;
          v36 = 4;
          goto LABEL_44;
        }
        if (v274)
        {
          v36 = 5;
LABEL_44:
          (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
        }
      }
LABEL_45:
      v13 += 2;
      if (v13 == v14)
        goto LABEL_205;
    }
    v40 = &v272;
    v41 = 4;
    goto LABEL_53;
  }
  if (v13 == v14)
    goto LABEL_205;
  do
  {
    v15 = *v13;
    v16 = (__int128 *)operator new(0x28uLL);
    *(_QWORD *)v16 = &off_1E42CCDE8;
    *((_QWORD *)v16 + 1) = &v267;
    *((_QWORD *)v16 + 2) = a1;
    *((_QWORD *)v16 + 3) = a2;
    *((_QWORD *)v16 + 4) = &v263;
    v274 = v16;
    v17 = *(_QWORD *)(v15 + 216);
    if (!v17 || (v18 = *(_QWORD **)(v17 + 168), v19 = (_QWORD *)(v17 + 176), v18 == (_QWORD *)(v17 + 176)))
    {
LABEL_36:
      v34 = 5;
LABEL_37:
      (*(void (**)(void))(*(_QWORD *)v16 + 8 * v34))();
      goto LABEL_38;
    }
    do
    {
      v20 = (std::__shared_weak_count *)v18[5];
      if (!v20)
        goto LABEL_26;
      v21 = std::__shared_weak_count::lock(v20);
      v271 = v21;
      if (!v21)
        goto LABEL_26;
      v22 = v21;
      v23 = v18[4];
      v270 = v23;
      if (v23)
      {
        v268 = v23;
        v269 = v21;
        v24 = (unint64_t *)&v21->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        if (!v274)
          goto LABEL_400;
        (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, &v268);
        v26 = v269;
        if (!v269)
          goto LABEL_21;
        v27 = (unint64_t *)&v269->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v22 = v271;
          if (!v271)
            goto LABEL_26;
        }
        else
        {
LABEL_21:
          v22 = v271;
          if (!v271)
            goto LABEL_26;
        }
      }
      v29 = (unint64_t *)&v22->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
LABEL_26:
      v31 = (_QWORD *)v18[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v18[2];
          v33 = *v32 == (_QWORD)v18;
          v18 = v32;
        }
        while (!v33);
      }
      v18 = v32;
    }
    while (v32 != v19);
    v16 = v274;
    if (v274 == &v272)
    {
      v16 = &v272;
      v34 = 4;
      goto LABEL_37;
    }
    if (v274)
      goto LABEL_36;
LABEL_38:
    v13 += 2;
  }
  while (v13 != v14);
LABEL_205:
  v134 = v263;
  v135 = v262;
  if (v264 == v263)
    goto LABEL_370;
  if (!v261)
  {
    v174 = v263;
    do
    {
      if (*((double *)v174 + 5) < *((double *)v134 + 5))
        v134 = v174;
      v174 += 48;
    }
    while (v174 != v264);
    v176 = *(double *)v134;
    v175 = v134[1];
    if (v175)
    {
      v177 = (unint64_t *)(v175 + 8);
      do
        v178 = __ldxr(v177);
      while (__stxr(v178 + 1, v177));
    }
    v179 = *(std::__shared_weak_count **)(v262 + 8);
    *(double *)v262 = v176;
    *(_QWORD *)(v262 + 8) = v175;
    if (v179)
    {
      v180 = (unint64_t *)&v179->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    *(_DWORD *)(v262 + 16) = *((_DWORD *)v134 + 4);
    v182 = *(_OWORD *)((char *)v134 + 20);
    *(_DWORD *)(v262 + 36) = *((_DWORD *)v134 + 9);
    *(_OWORD *)(v262 + 20) = v182;
    goto LABEL_370;
  }
  v272 = 0uLL;
  v273 = 0;
  {
    v259 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v259, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v274 = (__int128 *)mdm::Allocator::instance(void)::alloc;
  v137 = v263;
  v138 = v264;
  if (v263 != v264)
  {
    while (2)
    {
      if ((*(_BYTE *)(*(_QWORD *)v137 + 147) & 0xFE) != 4)
        goto LABEL_213;
      v142 = *((_QWORD *)&v272 + 1);
      v141 = v273;
      if (*((_QWORD *)&v272 + 1) < v273)
      {
        if (*((_QWORD *)&v272 + 1))
        {
          **((_QWORD **)&v272 + 1) = *(_QWORD *)v137;
          v143 = *((_QWORD *)v137 + 1);
          *(_QWORD *)(v142 + 8) = v143;
          if (v143)
          {
            v144 = (unint64_t *)(v143 + 8);
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
          }
          v139 = *((_OWORD *)v137 + 1);
          *(_QWORD *)(v142 + 32) = *((_QWORD *)v137 + 4);
          *(_OWORD *)(v142 + 16) = v139;
          *(_QWORD *)(v142 + 40) = *((_QWORD *)v137 + 5);
        }
        v140 = v142 + 48;
        goto LABEL_212;
      }
      v146 = v272;
      v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 4);
      v148 = v147 + 1;
      if (v147 + 1 > 0x555555555555555)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v273 - v272) >> 4) > v148)
        v148 = 0x5555555555555556 * ((uint64_t)(v273 - v272) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v273 - v272) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v149 = 0x555555555555555;
      else
        v149 = v148;
      if (v149)
      {
        v150 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v274 + 16))(v274, 48 * v149, 8);
        v151 = v150 + 48 * v147;
        v152 = v150 + 48 * v149;
        if (v150)
        {
          *(_QWORD *)v151 = *(_QWORD *)v137;
          v153 = *((_QWORD *)v137 + 1);
          *(_QWORD *)(v151 + 8) = v153;
          if (v153)
          {
            v154 = (unint64_t *)(v153 + 8);
            do
              v155 = __ldxr(v154);
            while (__stxr(v155 + 1, v154));
          }
          v156 = *((_OWORD *)v137 + 1);
          *(_QWORD *)(v151 + 32) = *((_QWORD *)v137 + 4);
          *(_OWORD *)(v151 + 16) = v156;
          *(_QWORD *)(v150 + 48 * v147 + 40) = *((_QWORD *)v137 + 5);
        }
      }
      else
      {
        v152 = 0;
        v151 = 16 * ((uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 4);
      }
      v140 = v151 + 48;
      if (v142 == v146)
      {
        *(_QWORD *)&v272 = v151;
        v273 = v152;
        if (!v142)
          goto LABEL_212;
      }
      else
      {
        v157 = 0;
        do
        {
          v158 = v151 + v157;
          v159 = v142 + v157;
          *(_OWORD *)(v158 - 48) = *(_OWORD *)(v142 + v157 - 48);
          *(_QWORD *)(v159 - 48) = 0;
          *(_QWORD *)(v159 - 40) = 0;
          v160 = *(_OWORD *)(v142 + v157 - 32);
          *(_QWORD *)(v158 - 16) = *(_QWORD *)(v142 + v157 - 16);
          *(_OWORD *)(v158 - 32) = v160;
          *(_QWORD *)(v158 - 8) = *(_QWORD *)(v142 + v157 - 8);
          v157 -= 48;
        }
        while (v142 + v157 != v146);
        *(_QWORD *)&v272 = v151 + v157;
        *((_QWORD *)&v272 + 1) = v151 + 48;
        v273 = v152;
        do
        {
          v161 = *(std::__shared_weak_count **)(v142 - 40);
          if (v161)
          {
            v162 = (unint64_t *)&v161->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          v142 -= 48;
        }
        while (v142 != v146);
        v142 = v146;
        if (!v146)
        {
LABEL_212:
          *((_QWORD *)&v272 + 1) = v140;
LABEL_213:
          v137 += 48;
          if (v137 == v138)
            goto LABEL_248;
          continue;
        }
      }
      break;
    }
    (*(void (**)(__int128 *, uint64_t, unint64_t))(*(_QWORD *)v274 + 40))(v274, v142, v141 - v142);
    goto LABEL_212;
  }
LABEL_248:
  v164 = (uint64_t *)*((_QWORD *)&v272 + 1);
  v165 = (uint64_t *)v272;
  if ((_QWORD)v272 == *((_QWORD *)&v272 + 1))
  {
    v168 = (uint64_t)v264;
    v135 = v262;
  }
  else
  {
    v166 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 4);
    v167 = v265;
    v135 = v262;
    v168 = (uint64_t)v263;
    if (0xAAAAAAAAAAAAAAABLL * ((v265 - (uint64_t)v263) >> 4) >= v166)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v264 - v263) >> 4) >= v166)
      {
        do
        {
          v186 = *v165;
          v185 = v165[1];
          if (v185)
          {
            v187 = (unint64_t *)(v185 + 8);
            do
              v188 = __ldxr(v187);
            while (__stxr(v188 + 1, v187));
          }
          v189 = *(std::__shared_weak_count **)(v168 + 8);
          *(_QWORD *)v168 = v186;
          *(_QWORD *)(v168 + 8) = v185;
          if (v189)
          {
            v190 = (unint64_t *)&v189->__shared_owners_;
            do
              v191 = __ldaxr(v190);
            while (__stlxr(v191 - 1, v190));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
              std::__shared_weak_count::__release_weak(v189);
            }
          }
          *(_DWORD *)(v168 + 16) = *((_DWORD *)v165 + 4);
          v184 = *(_OWORD *)((char *)v165 + 20);
          *(_DWORD *)(v168 + 36) = *((_DWORD *)v165 + 9);
          *(_OWORD *)(v168 + 20) = v184;
          *(_QWORD *)(v168 + 40) = v165[5];
          v165 += 6;
          v168 += 48;
        }
        while (v165 != v164);
        for (i = v264; i != (char *)v168; i -= 48)
        {
          v201 = (std::__shared_weak_count *)*((_QWORD *)i - 5);
          if (v201)
          {
            v202 = (unint64_t *)&v201->__shared_owners_;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
              std::__shared_weak_count::__release_weak(v201);
            }
          }
        }
      }
      else
      {
        v183 = v272 + 16 * ((v264 - v263) >> 4);
        if (v264 != v263)
        {
          do
          {
            v194 = *v165;
            v193 = v165[1];
            if (v193)
            {
              v195 = (unint64_t *)(v193 + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            v197 = *(std::__shared_weak_count **)(v168 + 8);
            *(_QWORD *)v168 = v194;
            *(_QWORD *)(v168 + 8) = v193;
            if (v197)
            {
              v198 = (unint64_t *)&v197->__shared_owners_;
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            *(_DWORD *)(v168 + 16) = *((_DWORD *)v165 + 4);
            v192 = *(_OWORD *)((char *)v165 + 20);
            *(_DWORD *)(v168 + 36) = *((_DWORD *)v165 + 9);
            *(_OWORD *)(v168 + 20) = v192;
            *(_QWORD *)(v168 + 40) = v165[5];
            v165 += 6;
            v168 += 48;
          }
          while (v165 != (uint64_t *)v183);
          v168 = (uint64_t)v264;
        }
        v211 = v168;
        if ((uint64_t *)v183 != v164)
        {
          v211 = v168;
          do
          {
            if (v211)
            {
              *(_QWORD *)v211 = *(_QWORD *)v183;
              v213 = *(_QWORD *)(v183 + 8);
              *(_QWORD *)(v211 + 8) = v213;
              if (v213)
              {
                v214 = (unint64_t *)(v213 + 8);
                do
                  v215 = __ldxr(v214);
                while (__stxr(v215 + 1, v214));
              }
              v212 = *(_OWORD *)(v183 + 16);
              *(_QWORD *)(v211 + 32) = *(_QWORD *)(v183 + 32);
              *(_OWORD *)(v211 + 16) = v212;
              *(_QWORD *)(v211 + 40) = *(_QWORD *)(v183 + 40);
            }
            v183 += 48;
            v211 += 48;
          }
          while ((uint64_t *)v183 != v164);
        }
        v168 = v211;
      }
    }
    else
    {
      if (v263)
      {
        v169 = v264;
        if (v264 == v263)
        {
          v170 = v263;
        }
        else
        {
          do
          {
            v171 = (std::__shared_weak_count *)*((_QWORD *)v169 - 5);
            if (v171)
            {
              v172 = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldaxr(v172);
              while (__stlxr(v173 - 1, v172));
              if (!v173)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            v169 -= 48;
          }
          while (v169 != (char *)v168);
          v170 = v263;
        }
        v264 = (char *)v168;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v266 + 40))(v266, v170);
        v167 = 0;
        v263 = 0;
        v264 = 0;
        v265 = 0;
      }
      if (v166 > 0x555555555555555)
        goto LABEL_408;
      v204 = 0xAAAAAAAAAAAAAAABLL * (v167 >> 4);
      v205 = 2 * v204;
      if (2 * v204 <= v166)
        v205 = 0xAAAAAAAAAAAAAAABLL * (((char *)v164 - (char *)v165) >> 4);
      v206 = v204 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v205;
      if (v206 > 0x555555555555555)
LABEL_408:
        abort();
      v168 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v266 + 16))(v266, 48 * v206, 8);
      v263 = (char *)v168;
      v264 = (char *)v168;
      v265 = v168 + 48 * v206;
      do
      {
        if (v168)
        {
          *(_QWORD *)v168 = *v165;
          v208 = v165[1];
          *(_QWORD *)(v168 + 8) = v208;
          if (v208)
          {
            v209 = (unint64_t *)(v208 + 8);
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          v207 = *((_OWORD *)v165 + 1);
          *(_QWORD *)(v168 + 32) = v165[4];
          *(_OWORD *)(v168 + 16) = v207;
          *(_QWORD *)(v168 + 40) = v165[5];
        }
        v165 += 6;
        v168 += 48;
      }
      while (v165 != v164);
    }
    v264 = (char *)v168;
  }
  v216 = v263;
  if (v263 == (char *)v168)
    goto LABEL_350;
  v217 = v263;
  while (*v217 != *(_QWORD *)(a1 + 200)
       || *((_DWORD *)v217 + 4) != *(_DWORD *)(a1 + 216)
       || *((_DWORD *)v217 + 5) != *(_DWORD *)(a1 + 220)
       || *((_DWORD *)v217 + 6) != *(_DWORD *)(a1 + 224)
       || *((_DWORD *)v217 + 7) != *(_DWORD *)(a1 + 228))
  {
    v217 += 6;
    if (v217 == (_QWORD *)v168)
      goto LABEL_350;
  }
  if (v217 == (_QWORD *)v168)
  {
LABEL_350:
    v228 = *(_QWORD *)v263;
    v227 = *((_QWORD *)v263 + 1);
    if (v227)
    {
      v229 = (unint64_t *)(v227 + 8);
      do
        v230 = __ldxr(v229);
      while (__stxr(v230 + 1, v229));
    }
    v231 = *(std::__shared_weak_count **)(v135 + 8);
    *(_QWORD *)v135 = v228;
    *(_QWORD *)(v135 + 8) = v227;
    if (!v231)
      goto LABEL_358;
    v232 = (unint64_t *)&v231->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    goto LABEL_356;
  }
  if (v217 + 6 == (_QWORD *)v168)
  {
    v254 = *(_QWORD *)v263;
    v253 = *((_QWORD *)v263 + 1);
    if (v253)
    {
      v255 = (unint64_t *)(v253 + 8);
      do
        v256 = __ldxr(v255);
      while (__stxr(v256 + 1, v255));
    }
    v231 = *(std::__shared_weak_count **)(v135 + 8);
    *(_QWORD *)v135 = v254;
    *(_QWORD *)(v135 + 8) = v253;
    if (!v231)
      goto LABEL_358;
    v257 = (unint64_t *)&v231->__shared_owners_;
    do
      v233 = __ldaxr(v257);
    while (__stlxr(v233 - 1, v257));
LABEL_356:
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
LABEL_358:
    *(_DWORD *)(v135 + 16) = *((_DWORD *)v216 + 4);
    v225 = *(_OWORD *)((char *)v216 + 20);
    v226 = *((_DWORD *)v216 + 9);
    goto LABEL_359;
  }
  v219 = v217[6];
  v218 = v217[7];
  if (v218)
  {
    v220 = (unint64_t *)(v218 + 8);
    do
      v221 = __ldxr(v220);
    while (__stxr(v221 + 1, v220));
  }
  v222 = *(std::__shared_weak_count **)(v135 + 8);
  *(_QWORD *)v135 = v219;
  *(_QWORD *)(v135 + 8) = v218;
  if (v222)
  {
    v223 = (unint64_t *)&v222->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  *(_DWORD *)(v135 + 16) = *((_DWORD *)v217 + 16);
  v225 = *(_OWORD *)((char *)v217 + 68);
  v226 = *((_DWORD *)v217 + 21);
LABEL_359:
  *(_DWORD *)(v135 + 36) = v226;
  *(_OWORD *)(v135 + 20) = v225;
  v234 = v272;
  if ((_QWORD)v272)
  {
    v235 = *((_QWORD *)&v272 + 1);
    v236 = v272;
    if (*((_QWORD *)&v272 + 1) != (_QWORD)v272)
    {
      do
      {
        v237 = *(std::__shared_weak_count **)(v235 - 40);
        if (v237)
        {
          v238 = (unint64_t *)&v237->__shared_owners_;
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v237->__on_zero_shared)(v237, v236);
            std::__shared_weak_count::__release_weak(v237);
          }
        }
        v235 -= 48;
      }
      while (v235 != v234);
      v236 = v272;
    }
    *((_QWORD *)&v272 + 1) = v234;
    (*(void (**)(__int128 *, uint64_t, unint64_t))(*(_QWORD *)v274 + 40))(v274, v236, v273 - v236);
  }
LABEL_370:
  if (*(_QWORD *)v135)
  {
    md::LabelPool::labelForFeature((md::LabelBase **)&v272, *(md::LabelPool **)(a1 + 48), *(_QWORD *)(a1 + 24), (_QWORD *)v135, (unsigned int *)(v135 + 16), 0);
    v240 = v272;
    v272 = 0uLL;
    v241 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v240;
    if (v241)
    {
      v242 = (unint64_t *)&v241->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    v244 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
    if (*((_QWORD *)&v272 + 1))
    {
      v245 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
  }
  v247 = v263;
  if (v263)
  {
    v248 = v264;
    v249 = v263;
    if (v264 != v263)
    {
      do
      {
        v250 = (std::__shared_weak_count *)*((_QWORD *)v248 - 5);
        if (v250)
        {
          v251 = (unint64_t *)&v250->__shared_owners_;
          do
            v252 = __ldaxr(v251);
          while (__stlxr(v252 - 1, v251));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *, char *))v250->__on_zero_shared)(v250, v249);
            std::__shared_weak_count::__release_weak(v250);
          }
        }
        v248 -= 48;
      }
      while (v248 != v247);
      v249 = v263;
    }
    v264 = v247;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v266 + 40))(v266, v249, v265 - (_QWORD)v249);
  }
}

void sub_19F435E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va1);
  std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBCF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBCF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 40);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CCDE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CCDE8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  uint64_t v22;

  v21 = xmmword_19FFB2E20;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, float *, __int128 *))(*(_QWORD *)*a2 + 432))(*a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 24), &v20, &v21))
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v18 = v21;
    v19 = v22;
    v10 = v5[1];
    if (v10 >= v5[2])
    {
      v14 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v5, (uint64_t)v17, &v20);
    }
    else
    {
      if (v10)
      {
        v11 = v20;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v7;
        if (v7)
        {
          v12 = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_OWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 32) = v19;
        *(double *)(v10 + 40) = v11;
      }
      v14 = v10 + 48;
    }
    v5[1] = v14;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_19F436218(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(uint64_t *a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v3 = 0x555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < 0x2AAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    v9 = 48 * v3;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 48 * v3, 8);
    v11 = v10 + 48 * v4;
    v3 = v10 + v9;
    if (v10)
    {
      v12 = *a3;
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)v11 = *(_QWORD *)a2;
      *(_QWORD *)(v11 + 8) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(v11 + 16) = v16;
      *(double *)(v10 + 48 * v4 + 40) = v12;
    }
  }
  else
  {
    v11 = 16 * ((a1[1] - *a1) >> 4);
  }
  v17 = v11 + 48;
  v18 = *a1;
  v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = v11;
    a1[1] = v17;
    v25 = a1[2];
    a1[2] = v3;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = v11 + v20;
      v22 = v19 + v20;
      *(_OWORD *)(v21 - 48) = *(_OWORD *)(v19 + v20 - 48);
      *(_QWORD *)(v22 - 48) = 0;
      *(_QWORD *)(v22 - 40) = 0;
      v23 = *(_OWORD *)(v19 + v20 - 32);
      *(_QWORD *)(v21 - 16) = *(_QWORD *)(v19 + v20 - 16);
      *(_OWORD *)(v21 - 32) = v23;
      *(_QWORD *)(v21 - 8) = *(_QWORD *)(v19 + v20 - 8);
      v20 -= 48;
    }
    while (v19 + v20 != v18);
    v19 = *a1;
    v24 = a1[1];
    *a1 = v11 + v20;
    a1[1] = v17;
    v25 = a1[2];
    a1[2] = v3;
    while (v24 != v19)
    {
      v26 = *(std::__shared_weak_count **)(v24 - 40);
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v24 -= 48;
    }
  }
  if (v19)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v19, v25 - v19);
  return v17;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CCDA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CCDA0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  uint64_t v22;

  v21 = xmmword_19FFB2E20;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, float *, __int128 *))(*(_QWORD *)*a2 + 432))(*a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 24), &v20, &v21))
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v18 = v21;
    v19 = v22;
    v10 = v5[1];
    if (v10 >= v5[2])
    {
      v14 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v5, (uint64_t)v17, &v20);
    }
    else
    {
      if (v10)
      {
        v11 = v20;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v7;
        if (v7)
        {
          v12 = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_OWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 32) = v19;
        *(double *)(v10 + 40) = v11;
      }
      v14 = v10 + 48;
    }
    v5[1] = v14;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_19F436608(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CCD58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CCD58;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  uint64_t v22;

  v21 = xmmword_19FFB2E20;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, float *, __int128 *))(*(_QWORD *)*a2 + 432))(*a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 24), &v20, &v21))
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v18 = v21;
    v19 = v22;
    v10 = v5[1];
    if (v10 >= v5[2])
    {
      v14 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v5, (uint64_t)v17, &v20);
    }
    else
    {
      if (v10)
      {
        v11 = v20;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v7;
        if (v7)
        {
          v12 = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_OWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 32) = v19;
        *(double *)(v10 + 40) = v11;
      }
      v14 = v10 + 48;
    }
    v5[1] = v14;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_19F436804(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CCD10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CCD10;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  uint64_t v22;

  v21 = xmmword_19FFB2E20;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, float *, __int128 *))(*(_QWORD *)*a2 + 432))(*a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 24), &v20, &v21))
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v18 = v21;
    v19 = v22;
    v10 = v5[1];
    if (v10 >= v5[2])
    {
      v14 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v5, (uint64_t)v17, &v20);
    }
    else
    {
      if (v10)
      {
        v11 = v20;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v7;
        if (v7)
        {
          v12 = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_OWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 32) = v19;
        *(double *)(v10 + 40) = v11;
      }
      v14 = v10 + 48;
    }
    v5[1] = v14;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_19F436A00(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CCCC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CCCC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  uint64_t v22;

  v21 = xmmword_19FFB2E20;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, float *, __int128 *))(*(_QWORD *)*a2 + 432))(*a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 24), &v20, &v21))
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v18 = v21;
    v19 = v22;
    v10 = v5[1];
    if (v10 >= v5[2])
    {
      v14 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v5, (uint64_t)v17, &v20);
    }
    else
    {
      if (v10)
      {
        v11 = v20;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v7;
        if (v7)
        {
          v12 = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_OWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 32) = v19;
        *(double *)(v10 + 40) = v11;
      }
      v14 = v10 + 48;
    }
    v5[1] = v14;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_19F436BFC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CCC80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CCC80;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  float v20;
  __int128 v21;
  uint64_t v22;

  v21 = xmmword_19FFB2E20;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, float *, __int128 *))(*(_QWORD *)*a2 + 432))(*a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(a1 + 24), &v20, &v21))
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v18 = v21;
    v19 = v22;
    v10 = v5[1];
    if (v10 >= v5[2])
    {
      v14 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v5, (uint64_t)v17, &v20);
    }
    else
    {
      if (v10)
      {
        v11 = v20;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v7;
        if (v7)
        {
          v12 = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_OWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 32) = v19;
        *(double *)(v10 + 40) = v11;
      }
      v14 = v10 + 48;
    }
    v5[1] = v14;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_19F436DF8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::StandardLabeler::adoptSelectedLabelMarker(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  _BYTE *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  md::LabelExternalPointFeature *v18;
  unint64_t v19;
  __n128 v20;
  std::__shared_weak_count_vtbl *v21;
  double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  long double v26;
  float64x2_t v27;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count_vtbl *v36;
  unint64_t v37;
  int64x2_t *v38;
  int v39;
  double v40;
  const char *v41;
  const char *v42;
  double v43;
  double v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  float64_t v78;
  __int128 v79;
  double v80;
  double v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;

  if (!*(_BYTE *)(*a2 + 224))
  {
    v5 = a1 + 296;
    v6 = *(std::__shared_weak_count **)(a1 + 304);
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)(a1 + 320);
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    v10 = (uint64_t *)(v5 + 16);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v13 = *(void **)(a1 + 280);
    if (v13)
    {
      *(_QWORD *)(a1 + 280) = 0;

    }
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 424))(*a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      objc_storeStrong((id *)(a1 + 280), v14);
LABEL_70:
      v62 = *a2;
      v61 = a2[1];
      if (v61)
      {
        v63 = (unint64_t *)(v61 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = *(std::__shared_weak_count **)(a1 + 304);
      *(_QWORD *)(a1 + 296) = v62;
      *(_QWORD *)(a1 + 304) = v61;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v2 = 1;
      goto LABEL_79;
    }
    v15 = (_BYTE *)*a2;
    v80 = 0.0;
    v81 = 0.0;
    if (v15[225] == 1 || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v15 + 160))(v15))
    {
      *(double *)&v16 = COERCE_DOUBLE(operator new(0x1D8uLL));
      v16->__shared_owners_ = 0;
      v17 = (unint64_t *)&v16->__shared_owners_;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD188;
      *(double *)&v18 = COERCE_DOUBLE(md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v16[1]));
      *(_QWORD *)&v82 = v18;
      *((_QWORD *)&v82 + 1) = v16;
      do
        v19 = __ldxr(v17);
      while (__stxr(v19 + 1, v17));
      v80 = *(double *)&v18;
      v81 = *(double *)&v16;
      (*(void (**)(double *__return_ptr, _BYTE *))(*(_QWORD *)v15 + 592))(&v85, v15);
      v21 = v16[9].__vftable;
      if ((std::__shared_weak_count_vtbl *)v16[9].__shared_owners_ != v21)
      {
        if (fabs(v85) <= 85.0511169)
        {
          v78 = v86;
          v26 = tan(v85 * 0.00872664626 + 0.785398163);
          v20.n128_f64[0] = log(v26);
          v27.f64[0] = v78;
          *(_QWORD *)&v27.f64[1] = v20.n128_u64[0];
          v20.n128_u64[1] = 0x3FC45F306DC9C883;
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)&v21->__get_deleter = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v27);
          *(_WORD *)((char *)&v21[1].~__shared_weak_count + 5) = 257;
        }
        else
        {
          v22 = v86 * 0.0174532925;
          v23 = __sincos_stret(v85 * 0.0174532925);
          v24 = 6378137.0 / sqrt(v23.__sinval * v23.__sinval * -0.00669437999 + 1.0);
          v25 = __sincos_stret(v22);
          *(double *)&v21->~__shared_weak_count = v24 * v23.__cosval * v25.__cosval;
          *(double *)&v21->~__shared_weak_count_0 = v24 * v23.__cosval * v25.__sinval;
          *(double *)&v21->__on_zero_shared = v23.__sinval * 0.99330562 * v24;
          BYTE4(v21[1].~__shared_weak_count) = 1;
        }
        v20.n128_f64[0] = v87;
        if (v87 != 1.79769313e308)
        {
          v20.n128_f32[0] = v87;
          LODWORD(v21[1].~__shared_weak_count) = v20.n128_u32[0];
        }
      }
      if (((*(uint64_t (**)(_BYTE *, __n128))(*(_QWORD *)v15 + 160))(v15, v20) & 1) != 0)
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 384))(v15);
        v33 = (std::__shared_weak_count_vtbl *)(id)objc_claimAutoreleasedReturnValue();
        v34 = v33;
        if (v33)
          v35 = v33;
        v36 = v16[15].__vftable;
        v16[15].__vftable = v34;

      }
      do
        v37 = __ldaxr(v17);
      while (__stlxr(v37 - 1, v17));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v38 = *(int64x2_t **)&v80;
      if (v80 == 0.0)
        goto LABEL_65;
      (*(void (**)(double *__return_ptr, _BYTE *))(*(_QWORD *)v15 + 128))(&v85, v15);
      v39 = SHIBYTE(v87);
      v40 = v85;
      (*(void (**)(__int128 *__return_ptr, _BYTE *))(*(_QWORD *)v15 + 144))(&v82, v15);
      if (v39 >= 0)
        v41 = (const char *)&v85;
      else
        v41 = *(const char **)&v40;
      if (v83 >= 0)
        v42 = (const char *)&v82;
      else
        v42 = (const char *)v82;
      md::LabelExternalFeature::addTextForZoom(*(int64x2_t **)&v80, 0, 0, v41, v42);
      if (SHIBYTE(v83) < 0)
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v84 + 40))(v84, v82, v83 & 0x7FFFFFFFFFFFFFFFLL);
      if (SHIBYTE(v87) < 0)
        (*(void (**)(uint64_t, double, uint64_t))(*(_QWORD *)v88 + 40))(v88, COERCE_DOUBLE(*(_QWORD *)&v85), *(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFLL);
      *(_QWORD *)(*(_QWORD *)&v80 + 16) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 304))(v15);
      (*(void (**)(double *__return_ptr, _BYTE *))(*(_QWORD *)v15 + 96))(&v85, v15);
      v44 = v85;
      v43 = v86;
      if (v86 != 0.0)
      {
        v45 = (unint64_t *)(*(_QWORD *)&v86 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = (std::__shared_weak_count *)v38[2].i64[1];
      *(double *)v38[2].i64 = v44;
      *(double *)&v38[2].i64[1] = v43;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = *(std::__shared_weak_count **)&v86;
      if (v86 != 0.0)
      {
        v51 = (unint64_t *)(*(_QWORD *)&v86 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    if (v80 == 0.0)
      goto LABEL_65;
    if (*(_BYTE *)(*(_QWORD *)&v80 + 8))
    {
LABEL_60:
      v53 = *v10;
      if (*v10)
      {
        v54 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 288) + 680);
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 + 1;
        }
        while (__stlxr(v56, v54));
        *(_QWORD *)(v53 + 72) = v56;
        v57 = 1;
        v58 = *(std::__shared_weak_count **)&v81;
        if (v81 == 0.0)
          goto LABEL_69;
        goto LABEL_66;
      }
LABEL_65:
      v57 = 0;
      v58 = *(std::__shared_weak_count **)&v81;
      if (v81 == 0.0)
        goto LABEL_69;
LABEL_66:
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        if (v57)
          goto LABEL_70;
        goto LABEL_82;
      }
LABEL_69:
      if (v57)
        goto LABEL_70;
LABEL_82:
      v2 = 0;
LABEL_79:

      return v2;
    }
    v69 = *(std::__shared_weak_count **)&v81;
    v85 = v80;
    v86 = v81;
    if (v81 != 0.0)
    {
      v70 = (unint64_t *)(*(_QWORD *)&v81 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    if (*(_QWORD *)(*(_QWORD *)&v80 + 336))
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 3568))
      {
LABEL_96:
        if (v69)
        {
          v76 = (unint64_t *)&v69->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        goto LABEL_60;
      }
      std::make_shared[abi:nn180100]<md::TrafficIncidentLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,void>(&v82, &v85);
      v79 = v82;
      if (*((_QWORD *)&v82 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
    }
    else
    {
      std::make_shared[abi:nn180100]<md::PointLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,BOOL,md::LabelManager *&,void>((md::PointLabelFeatureBase **)&v82, (uint64_t *)&v85, 0, *(_QWORD *)(a1 + 24));
      v79 = v82;
      if (*((_QWORD *)&v82 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
    }
    std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)v10, &v79);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v79);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
    goto LABEL_96;
  }
  return 0;
}

void sub_19F4374B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::make_shared[abi:nn180100]<md::TrafficIncidentLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[2];

  v4 = operator new(0x1A0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E42DD700;
  v5 = *(void **)(*a2 + 336);
  v13[0] = 0;
  v13[1] = 0;
  md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature((uint64_t)(v4 + 3), v5, v13);
  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)v4[36];
  v4[35] = v7;
  v4[36] = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_19F43762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

md::PointLabelFeatureBase *std::make_shared[abi:nn180100]<md::PointLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,BOOL,md::LabelManager *&,void>(md::PointLabelFeatureBase **a1, uint64_t *a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  md::PointLabelFeatureBase *result;

  v8 = operator new(0x2B8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DB940;
  result = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v8 + 3), a2, a3 != 0, a4);
  *a1 = result;
  a1[1] = (md::PointLabelFeatureBase *)v8;
  return result;
}

void sub_19F43771C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::PointLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PointLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::StandardLabeler::releaseAdoptedSelectedLabelMarker(md::StandardLabeler *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *((_QWORD *)this + 30);
  if (v2)
    atomic_store(0, (unsigned __int8 *)(*(_QWORD *)(v2 + 288) + 1243));
  v7 = 0;
  v8 = 0;
  (*(void (**)(md::StandardLabeler *, uint64_t *))(*(_QWORD *)this + 176))(this, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return (*(uint64_t (**)(md::StandardLabeler *))(*(_QWORD *)this + 200))(this);
}

void sub_19F43786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::ARWalkingFeatureSet::~ARWalkingFeatureSet(md::ARWalkingFeatureSet *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v3 = *((_QWORD *)this + 37);
    v4 = (void *)*((_QWORD *)this + 36);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 37) = v2;
    operator delete(v4);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)this + 248);
  v6 = (_QWORD *)*((_QWORD *)this + 28);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v6 + 2);
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
    operator delete(v8);
  v9 = *((_QWORD *)this + 22);
  if (v9)
  {
    v10 = *((_QWORD *)this + 23);
    v11 = *((_QWORD *)this + 22);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v12->__on_zero_shared)(v12, v11);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25), v11, *((_QWORD *)this + 24) - v11);
  }
  v15 = *((_QWORD *)this + 18);
  if (v15)
  {
    v16 = *((_QWORD *)this + 19);
    v17 = *((_QWORD *)this + 18);
    if (v16 != v15)
    {
      do
      {
        v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v18->__on_zero_shared)(v18, v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 16;
      }
      while (v16 != v15);
      v17 = *((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v17, *((_QWORD *)this + 20) - v17);
  }
  v21 = *((_QWORD *)this + 14);
  if (v21)
  {
    v22 = *((_QWORD *)this + 15);
    v23 = *((_QWORD *)this + 14);
    if (v22 != v21)
    {
      do
      {
        v24 = *(std::__shared_weak_count **)(v22 - 8);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v24->__on_zero_shared)(v24, v23);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 16;
      }
      while (v22 != v21);
      v23 = *((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), v23, *((_QWORD *)this + 16) - v23);
  }
  v27 = *((_QWORD *)this + 10);
  if (v27)
  {
    v28 = *((_QWORD *)this + 11);
    v29 = *((_QWORD *)this + 10);
    if (v28 != v27)
    {
      do
      {
        v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v30->__on_zero_shared)(v30, v29);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 -= 16;
      }
      while (v28 != v27);
      v29 = *((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v27;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v29, *((_QWORD *)this + 12) - v29);
  }
  v33 = *((_QWORD *)this + 6);
  if (v33)
  {
    *((_QWORD *)this + 7) = v33;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v33, *((_QWORD *)this + 8) - v33);
  }
  v34 = *((_QWORD *)this + 3);
  if (v34)
  {
    v35 = *((_QWORD *)this + 4);
    v36 = (void *)*((_QWORD *)this + 3);
    if (v35 != v34)
    {
      do
      {
        v38 = *(std::__shared_weak_count **)(v35 - 8);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v37 = *(void **)(v35 - 24);
        v35 -= 24;

      }
      while (v35 != v34);
      v36 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v34;
    operator delete(v36);
  }
  *(_QWORD *)this = &off_1E42B4F50;

}

void std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (_QWORD *)a1[4];
  while (v2)
  {
    v7 = v2;
    v2 = (_QWORD *)*v2;
    v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    operator delete(v7);
  }
  v3 = (void *)a1[2];
  a1[2] = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F50;

  return a1;
}

void geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F50;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)a1[3];
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v5, 32);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  return a1;
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD220;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::operator()(uint64_t a1)
{
  md::LabelManager *v1;
  VKARWalkingElevationRequestFailureInfo *v2;

  v1 = **(md::LabelManager ***)(a1 + 8);
  v2 = -[VKARWalkingElevationRequestFailureInfo initWithReason:]([VKARWalkingElevationRequestFailureInfo alloc], "initWithReason:", 1);
  md::LabelManager::arWalkingElevationRequestFailure(v1, v2);

}

void sub_19F437E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD1D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD1D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::operator()(uint64_t a1)
{
  md::LabelManager *v1;
  VKARWalkingElevationRequestFailureInfo *v2;

  v1 = **(md::LabelManager ***)(a1 + 8);
  v2 = -[VKARWalkingElevationRequestFailureInfo initWithReason:]([VKARWalkingElevationRequestFailureInfo alloc], "initWithReason:", 2);
  md::LabelManager::arWalkingElevationRequestFailure(v1, v2);

}

void sub_19F437F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL34GEOGetVectorKitARWalkingSupportLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARWalkingSupport");
  v1 = (void *)GEOGetVectorKitARWalkingSupportLog(void)::log;
  GEOGetVectorKitARWalkingSupportLog(void)::log = (uint64_t)v0;

}

void md::ARWalkingSupport::shouldUseHighPrecisionAltitude(md::ARWalkingSupport *this, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 9) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Should use high precision altitude:%d", (uint8_t *)v5, 8u);
    }
    *((_BYTE *)this + 9) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void md::ARWalkingSupport::setARWalkingFeatures(md::ARWalkingSupport *this, VKARWalkingFeatureSet *a2, char a3)
{
  VKARWalkingFeatureSet *v5;
  id v6;
  void *v7;
  VKARWalkingFeatureSet *v8;
  VKARWalkingFeatureSet *v9;
  VKARWalkingFeatureSet *v10;
  void *v11;
  VKARWalkingFeatureSet *v12;
  void *v13;
  VKARWalkingFeatureSet *v14;

  v5 = a2;
  if ((a3 & 1) == 0 && *((VKARWalkingFeatureSet **)this + 56) == v5)
    goto LABEL_14;
  v14 = v5;
  if (*((_BYTE *)this + 88))
  {
    v6 = *((id *)this + 8);
    if (v6)
      v7 = v6;
    else
      v7 = 0;
    v5 = v14;
  }
  else
  {
    v7 = 0;
  }
  v8 = v5;
  v9 = v8;
  if (*((_BYTE *)this + 88))
  {
    v10 = v8;
    v11 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v9;

    *((_BYTE *)this + 80) = a3;
  }
  else
  {
    *((_QWORD *)this + 7) = &off_1E42B4F50;
    *((_QWORD *)this + 8) = 0;
    v12 = v8;
    v13 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v9;

    *((_BYTE *)this + 80) = a3;
    *((_BYTE *)this + 88) = 1;
  }

  md::ARWalkingSupport::updateFeatureSetState((uint64_t)this, v7, 5);
  if (*((_BYTE *)this + 88))
  {
    md::ARWalkingSupport::updateFeatureSetState((uint64_t)this, *((void **)this + 8), 1);

    v5 = v14;
LABEL_14:

    return;
  }
  std::__throw_bad_optional_access[abi:nn180100]();
  __break(1u);
}

void sub_19F43816C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::updateFeatureSetState(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  void *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  void *v50;
  _BYTE v51[24];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = v7;
  if (!v7 || objc_msgSend(v7, "state") == a3)
    goto LABEL_89;
  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
  v9 = (void *)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v10 = *((_QWORD *)&off_1E42EABF8 + a3 - 1);
    *(_DWORD *)v51 = 138412546;
    *(_QWORD *)&v51[4] = v10;
    *(_WORD *)&v51[12] = 2112;
    *(_QWORD *)&v51[14] = v8;
    v11 = v9;
    _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_INFO, "Updating feature set state to %@ - %@", v51, 0x16u);

  }
  objc_msgSend(v8, "setState:", a3, *(_QWORD *)v51, *(_OWORD *)&v51[8], v52);
  v12 = v8;
  v13 = objc_msgSend(v12, "hash", &off_1E42B4F50, v12);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 912);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = v13;
      if (v13 >= v15)
        v3 = v13 % v15;
    }
    else
    {
      v3 = (v15 - 1) & v13;
    }
    v17 = *(uint64_t ****)(*(_QWORD *)(a1 + 904) + 8 * v3);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v18[1];
            if (v20 == (uint64_t *)v14)
            {
              if ((geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v18[3], (uint64_t)v51) & 1) != 0)goto LABEL_88;
            }
            else if (((unint64_t)v20 & (v15 - 1)) != v3)
            {
              goto LABEL_29;
            }
            v18 = (uint64_t **)*v18;
            if (!v18)
              goto LABEL_29;
          }
        }
        do
        {
          v19 = (unint64_t)v18[1];
          if (v19 == v14)
          {
            if ((geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v18[3], (uint64_t)v51) & 1) != 0)goto LABEL_88;
          }
          else
          {
            if (v19 >= v15)
              v19 %= v15;
            if (v19 != v3)
              break;
          }
          v18 = (uint64_t **)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_29:
  v21 = operator new(0x28uLL);
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = v14;
  *((_QWORD *)v21 + 2) = &off_1E42B4F50;
  *((_QWORD *)v21 + 3) = 0;
  objc_storeStrong((id *)v21 + 3, a2);
  *(_QWORD *)&v51[8] = 0;

  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 928) + 1);
  v23 = *(float *)(a1 + 936);
  if ((((float)(v23 * (float)v15) >= v22) & ~(v15 == 0)) == 0)
  {
    v24 = 1;
    if (v15 >= 3)
      v24 = (v15 & (v15 - 1)) != 0;
    v25 = v24 | (2 * v15);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v15 = *(_QWORD *)(a1 + 912);
    if (prime <= v15)
    {
      if (prime >= v15)
        goto LABEL_65;
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 928) / *(float *)(a1 + 936));
      if (v15 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime >= v15)
      {
        v15 = *(_QWORD *)(a1 + 912);
LABEL_65:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15)
            v3 = v14 % v15;
          else
            v3 = v14;
        }
        else
        {
          v3 = (v15 - 1) & v14;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v50 = *(void **)(a1 + 904);
        *(_QWORD *)(a1 + 904) = 0;
        if (v50)
          operator delete(v50);
        v15 = 0;
        *(_QWORD *)(a1 + 912) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = *(void **)(a1 + 904);
    *(_QWORD *)(a1 + 904) = v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    *(_QWORD *)(a1 + 912) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 904) + 8 * v30++) = 0;
    while (prime != v30);
    v31 = *(_QWORD **)(a1 + 920);
    if (!v31)
    {
LABEL_64:
      v15 = prime;
      goto LABEL_65;
    }
    v32 = a1 + 920;
    v33 = v31[1];
    v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v35 = v33 & v34;
      *(_QWORD *)(*(_QWORD *)(a1 + 904) + 8 * v35) = v32;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v37 = i[1] & v34;
        if (v37 == v35)
        {
          v31 = i;
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 904);
          if (*(_QWORD *)(v38 + 8 * v37))
          {
            *v31 = *i;
            v39 = 8 * v37;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 904) + v39);
            **(_QWORD **)(*(_QWORD *)(a1 + 904) + v39) = i;
          }
          else
          {
            *(_QWORD *)(v38 + 8 * v37) = v31;
            v31 = i;
            v35 = v37;
          }
        }
      }
      goto LABEL_64;
    }
    if (v33 >= prime)
      v33 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 904) + 8 * v33) = v32;
    v43 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_64;
    while (1)
    {
      v45 = v43[1];
      if (v45 >= prime)
        v45 %= prime;
      if (v45 != v33)
      {
        v46 = *(_QWORD *)(a1 + 904);
        if (!*(_QWORD *)(v46 + 8 * v45))
        {
          *(_QWORD *)(v46 + 8 * v45) = v31;
          goto LABEL_69;
        }
        *v31 = *v43;
        v44 = 8 * v45;
        *v43 = **(_QWORD **)(*(_QWORD *)(a1 + 904) + v44);
        **(_QWORD **)(*(_QWORD *)(a1 + 904) + v44) = v43;
        v43 = v31;
      }
      v45 = v33;
LABEL_69:
      v31 = v43;
      v43 = (_QWORD *)*v43;
      v33 = v45;
      if (!v43)
        goto LABEL_64;
    }
  }
LABEL_78:
  v47 = *(_QWORD *)(a1 + 904);
  v48 = *(_QWORD **)(v47 + 8 * v3);
  if (v48)
  {
    *(_QWORD *)v21 = *v48;
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)(a1 + 920);
    *(_QWORD *)(a1 + 920) = v21;
    *(_QWORD *)(v47 + 8 * v3) = a1 + 920;
    if (!*(_QWORD *)v21)
      goto LABEL_87;
    v49 = *(_QWORD *)(*(_QWORD *)v21 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v49 >= v15)
        v49 %= v15;
    }
    else
    {
      v49 &= v15 - 1;
    }
    v48 = (_QWORD *)(*(_QWORD *)(a1 + 904) + 8 * v49);
  }
  *v48 = v21;
LABEL_87:
  ++*(_QWORD *)(a1 + 928);
  v12 = *(id *)&v51[8];
LABEL_88:

LABEL_89:
}

void sub_19F438730(_Unwind_Exception *a1)
{
  void *v1;
  void (***v2)(_QWORD);
  uint64_t v3;

  (*v2[2])(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *(id *)(a2 + 8);
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F4387FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::setHighPrecisionAltitudeDistanceThreshold(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  double v6;
  int v7;
  double v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*a2 != *(double *)(a1 + 16))
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5 = *a2;
      v7 = 134217984;
      v8 = v5;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "high precision altitude distance threshold:%f", (uint8_t *)&v7, 0xCu);
    }
    v6 = *a2;
    *(double *)(a1 + 16) = *a2;
    *(double *)(a1 + 24) = v6 * v6;
    md::ARWalkingSupport::setARWalkingFeatures((md::ARWalkingSupport *)a1, *(VKARWalkingFeatureSet **)(a1 + 448), 1);
  }
}

void md::ARWalkingSupport::setHighPrecisionZLevel(md::ARWalkingSupport *this, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 48) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "high precision zLevel:%d", (uint8_t *)v5, 8u);
    }
    *((_BYTE *)this + 48) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void md::ARWalkingSupport::prepareContinueFeaturePlacementsForRegion(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  unint64_t v8;
  double v9;
  char *v10;
  char *v11;
  char *v12;
  double *v13;
  double *v14;
  double v15;
  double v17;
  double *v18;
  BOOL v19;
  BOOL v20;
  double *v21;
  double *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  NSObject *v61;
  std::string *v62;
  void **v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t prime;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *i;
  unsigned int v89;
  uint64_t v90;
  std::string *p_buf;
  std::string::size_type size;
  NSObject *v93;
  std::string::size_type v94;
  std::string *v95;
  long double v96;
  long double v97;
  double v98;
  long double v99;
  double v100;
  NSObject *v101;
  uint64_t v102;
  unint64_t v103;
  const void **v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  std::string *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t *v112;
  _QWORD *v113;
  char *__p;
  char *__pa;
  char *__pb;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unsigned int __val;
  _BYTE v120[24];
  _BYTE v121[28];
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  char v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  std::string v130;
  std::string buf;
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  int v136;
  uint64_t v137;

  v6 = a2;
  v8 = (unint64_t)&v130;
  v137 = *MEMORY[0x1E0C80C00];
  v111 = *(id *)(*a2 + 200);
  v9 = *(double *)(*v6 + 304);
  if (v9 == 0.0)
  {
    v12 = 0;
    v10 = 0;
    goto LABEL_161;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (double *)(a3 + 8);
  v112 = v6;
  do
  {
    v14 = (double *)md::LabelPoint::mercatorPoint(*(md::LabelPoint **)(*(_QWORD *)&v9 + 16));
    v15 = *v14;
    if (*v14 < *(double *)(a3 + 24) || v15 >= *(double *)(a3 + 40))
      goto LABEL_5;
    v17 = v14[1];
    v18 = *(double **)a3;
    v19 = v17 >= *(double *)(a3 + 32) && v17 < *(double *)(a3 + 48);
    v20 = !v19 || v18 == v13;
    if (v20)
      goto LABEL_5;
    while (v15 < v18[4] || v15 >= v18[6] || v17 < v18[5] || v17 >= v18[7])
    {
      v21 = (double *)*((_QWORD *)v18 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(double **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (double *)*((_QWORD *)v18 + 2);
          v20 = *(_QWORD *)v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v20);
      }
      v18 = v22;
      if (v22 == v13)
        goto LABEL_5;
    }
    v23 = *(_QWORD *)(*(_QWORD *)&v9 + 16);
    if (v10 < v11)
    {
      *(_DWORD *)v10 = *(_DWORD *)(v23 + 160);
      v10 += 4;
      v8 = (unint64_t)&v130;
      goto LABEL_5;
    }
    v24 = v12;
    v25 = v10;
    v26 = v10 - v12;
    v27 = v26 >> 2;
    v28 = (v26 >> 2) + 1;
    __p = v24;
    if (v28 >> 62)
      abort();
    v29 = v11 - v24;
    v30 = (v11 - v24) >> 1;
    if (v30 > v28)
      v28 = v30;
    if (v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v28;
    v110 = a1;
    if (v31)
    {
      if (v31 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v32 = (char *)operator new(4 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[4 * v27];
    *(_DWORD *)v33 = *(_DWORD *)(v23 + 160);
    v34 = v33 + 4;
    v35 = __p;
    if (v25 != __p)
    {
      v36 = v25 - 4 - __p;
      if (v36 >= 0x2C)
      {
        if ((unint64_t)(v25 - &v32[v26]) >= 0x20)
        {
          v39 = (v36 >> 2) + 1;
          v37 = &v25[-4 * (v39 & 0x7FFFFFFFFFFFFFF8)];
          v40 = &v32[4 * v27 - 16];
          v41 = v25 - 16;
          v42 = v39 & 0x7FFFFFFFFFFFFFF8;
          v35 = __p;
          do
          {
            v43 = *(_OWORD *)v41;
            *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
            *(_OWORD *)v40 = v43;
            v40 -= 32;
            v41 -= 32;
            v42 -= 8;
          }
          while (v42);
          v33 -= 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          v6 = v112;
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_50;
          goto LABEL_49;
        }
        v37 = v25;
      }
      else
      {
        v37 = v25;
      }
      v35 = __p;
      v6 = v112;
      do
      {
LABEL_49:
        v38 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v33 - 1) = v38;
        v33 -= 4;
      }
      while (v37 != v35);
      goto LABEL_50;
    }
    v6 = v112;
LABEL_50:
    v11 = &v32[4 * v31];
    if (v35)
      operator delete(v35);
    v10 = v34;
    v12 = v33;
    v8 = (unint64_t)&v130;
    a1 = v110;
LABEL_5:
    v9 = **(double **)&v9;
  }
  while (v9 != 0.0);
  if (v12 != v10)
  {
    v113 = (_QWORD *)(a4 + 16);
    v44 = (unsigned int *)v12;
    __pa = v12;
    while (1)
    {
      v45 = *v44;
      __val = *v44;
      v46 = *v6;
      v47 = *(_QWORD *)(*v6 + 272);
      if (v47)
      {
        v48 = v46 + 272;
        do
        {
          v49 = *(_DWORD *)(v47 + 32);
          v50 = v49 >= v45;
          if (v49 >= v45)
            v51 = (uint64_t *)v47;
          else
            v51 = (uint64_t *)(v47 + 8);
          if (v50)
            v48 = v47;
          v47 = *v51;
        }
        while (*v51);
        if (v48 != v46 + 272 && *(_DWORD *)(v48 + 32) <= v45)
        {
          v52 = *(_QWORD *)(v48 + 40);
          if (v52)
          {
            if (*(_BYTE *)(v52 + 136))
              goto LABEL_60;
          }
        }
      }
      if (!*(_BYTE *)(a1 + 9))
      {
        *(_QWORD *)v120 = 0;
        *(_QWORD *)&v120[8] = 0;
        *(_QWORD *)&v9 &= 0xFFFFFFFFFFFFFF00;
        md::ARWalkingContinueLabelFeature::setHighPrecisionAltitudeForPlacement(v46, v45, (uint64_t *)v120, 0, v9);
        goto LABEL_60;
      }
      v53 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v46 + 112))(v46, &__val);
      *(_OWORD *)v120 = *(_OWORD *)v53;
      *(_QWORD *)&v120[16] = *(_QWORD *)(v53 + 16);
      *(_OWORD *)v121 = *(_OWORD *)(v53 + 24);
      *(_DWORD *)&v121[16] = *(_DWORD *)(v53 + 40);
      *(_DWORD *)&v121[19] = *(_DWORD *)(v53 + 43);
      v54 = a1;
      v55 = *(uint64_t **)(a1 + 776);
      md::LabelPoint::coordinate((md::LabelPoint *)&buf, (uint64_t)v120);
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      md::HighPrecisionAltitudeRequestor::requestAltitude(&v117, v55, (double *)&v130);
      v56 = v117;
      if (!v117)
      {
        if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
        v61 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          if (__val)
          {
            std::to_string(&v130, __val);
            v62 = &v130;
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v62 = (std::string *)v130.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v130.__r_.__value_.__s + 23) = 7;
            strcpy((char *)&v130, "UNKNOWN");
            v62 = &v130;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v111;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          v132 = "false";
          v133 = 2080;
          v134 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARWalkingSupport.mm";
          v135 = 1024;
          v136 = 667;
          _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_ERROR, "Failed to request high precision altitude for placement:%s of Continue %@: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&buf, 0x30u);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v130.__r_.__value_.__l.__data_);
        }

LABEL_154:
        v85 = v118;
        if (v118)
          goto LABEL_155;
        goto LABEL_59;
      }
      v57 = v10;
      v58 = __val;
      v59 = *(_QWORD *)(a4 + 8);
      if (v59)
      {
        v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
        v60.i16[0] = vaddlv_u8(v60);
        if (v60.u32[0] > 1uLL)
        {
          v8 = __val;
          if (v59 <= __val)
            v8 = __val % v59;
        }
        else
        {
          v8 = ((_DWORD)v59 - 1) & __val;
        }
        v63 = *(void ***)(*(_QWORD *)a4 + 8 * v8);
        if (v63)
        {
          v64 = *v63;
          if (*v63)
          {
            if (v60.u32[0] < 2uLL)
            {
              while (1)
              {
                v66 = *((_QWORD *)v64 + 1);
                if (v66 == __val)
                {
                  if (*((_DWORD *)v64 + 4) == __val)
                    goto LABEL_128;
                }
                else if ((v66 & (v59 - 1)) != v8)
                {
                  goto LABEL_104;
                }
                v64 = *(void **)v64;
                if (!v64)
                  goto LABEL_104;
              }
            }
            do
            {
              v65 = *((_QWORD *)v64 + 1);
              if (v65 == __val)
              {
                if (*((_DWORD *)v64 + 4) == __val)
                {
LABEL_128:
                  v10 = v57;
                  v6 = v112;
                  goto LABEL_147;
                }
              }
              else
              {
                if (v65 >= v59)
                  v65 %= v59;
                if (v65 != v8)
                  goto LABEL_104;
              }
              v64 = *(void **)v64;
            }
            while (v64);
          }
        }
      }
      v64 = operator new(0x28uLL);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
      buf.__r_.__value_.__l.__size_ = a4 + 16;
      *(_QWORD *)v64 = 0;
      *((_QWORD *)v64 + 1) = v58;
      *((_DWORD *)v64 + 4) = v58;
      *((_QWORD *)v64 + 3) = 0;
      *((_QWORD *)v64 + 4) = 0;
      buf.__r_.__value_.__s.__data_[16] = 1;
      v67 = (float)(unint64_t)(*(_QWORD *)(a4 + 24) + 1);
      v68 = *(float *)(a4 + 32);
      if (!v59)
        goto LABEL_107;
LABEL_104:
      if ((float)(v68 * (float)v59) >= v67)
      {
        v58 = v8;
      }
      else
      {
LABEL_107:
        v69 = (v59 & (v59 - 1)) != 0;
        if (v59 < 3)
          v69 = 1;
        v70 = v69 | (2 * v59);
        v71 = vcvtps_u32_f32(v67 / v68);
        prime = v70 <= v71 ? v71 : v70;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v59 = *(_QWORD *)(a4 + 8);
        }
        if (prime > v59)
          goto LABEL_117;
        if (prime < v59)
        {
          v73 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
          if (v59 < 3 || (v74 = (uint8x8_t)vcnt_s8((int8x8_t)v59), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
          {
            v73 = std::__next_prime(v73);
          }
          else
          {
            v75 = 1 << -(char)__clz(v73 - 1);
            if (v73 >= 2)
              v73 = v75;
          }
          if (prime <= v73)
            prime = v73;
          if (prime < v59)
LABEL_117:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a4, prime);
        }
        v59 = *(_QWORD *)(a4 + 8);
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v59 <= v58)
            v58 %= v59;
        }
        else
        {
          v58 = ((_DWORD)v59 - 1) & v58;
        }
      }
      v76 = *(_QWORD *)a4;
      v77 = *(_QWORD **)(*(_QWORD *)a4 + 8 * v58);
      if (v77)
        break;
      *(_QWORD *)v64 = *v113;
      *v113 = v64;
      *(_QWORD *)(v76 + 8 * v58) = v113;
      v10 = v57;
      v6 = v112;
      if (*(_QWORD *)v64)
      {
        v78 = *(_QWORD *)(*(_QWORD *)v64 + 8);
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v78 >= v59)
            v78 %= v59;
        }
        else
        {
          v78 &= v59 - 1;
        }
        v77 = (_QWORD *)(*(_QWORD *)a4 + 8 * v78);
        goto LABEL_145;
      }
LABEL_146:
      ++*(_QWORD *)(a4 + 24);
      v56 = v117;
LABEL_147:
      v79 = v118;
      v12 = __pa;
      if (v118)
      {
        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)v64 + 4);
      *((_QWORD *)v64 + 3) = v56;
      *((_QWORD *)v64 + 4) = v79;
      if (!v82)
        goto LABEL_154;
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (v84)
        goto LABEL_154;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      v85 = v118;
      if (v118)
      {
LABEL_155:
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
LABEL_59:
      v8 = (unint64_t)&v130;
      a1 = v54;
LABEL_60:
      if (++v44 == (unsigned int *)v10)
        goto LABEL_161;
    }
    *(_QWORD *)v64 = *v77;
    v10 = v57;
    v6 = v112;
LABEL_145:
    *v77 = v64;
    goto LABEL_146;
  }
LABEL_161:
  if (!*(_QWORD *)(a4 + 24))
  {
    v96 = (*(double *)(a3 + 24) + (*(double *)(a3 + 40) - *(double *)(a3 + 24)) * 0.5) * 6.28318531;
    v97 = exp((*(double *)(a3 + 32) + (*(double *)(a3 + 48) - *(double *)(a3 + 32)) * 0.5) * 6.28318531 + -3.14159265);
    v98 = atan(v97);
    v99 = fmod(v96, 6.28318531);
    v100 = fmod(v99 + 6.28318531, 6.28318531);
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v101 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
    {
      v102 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)v120 = 134219011;
      *(_QWORD *)&v120[4] = (v10 - v12) >> 2;
      *(_WORD *)&v120[12] = 2049;
      *(double *)&v120[14] = v98 * 114.591559 + -90.0;
      *(_WORD *)&v120[22] = 2049;
      *(double *)v121 = v100 * 57.2957795 + -180.0;
      *(_WORD *)&v121[8] = 2048;
      *(_QWORD *)&v121[10] = v102;
      *(_WORD *)&v121[18] = 2112;
      *(_QWORD *)&v121[20] = v111;
      _os_log_impl(&dword_19F029000, v101, OS_LOG_TYPE_INFO, "None of the %lu placements in the region(center:%{private}f,%{private}f count:%lu) need high precision altitude for Continue in %@", v120, 0x34u);
    }

    if (!v12)
      goto LABEL_188;
LABEL_187:
    operator delete(v12);
    goto LABEL_188;
  }
  __pb = v12;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v120);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120[16], (uint64_t)"[", 1);
  for (i = *(uint64_t **)(a4 + 16); i; i = (uint64_t *)*i)
  {
    v89 = *((_DWORD *)i + 4);
    if (v89)
    {
      std::to_string(&buf, v89);
      v90 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&buf, "UNKNOWN");
      v90 = 7;
    }
    if ((v90 & 0x80u) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if ((v90 & 0x80u) == 0)
      size = v90;
    else
      size = buf.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120[16], (uint64_t)p_buf, size);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120[16], (uint64_t)",", 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120[16], (uint64_t)"]", 1);
  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
  v93 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
  {
    if ((v128 & 0x10) != 0)
    {
      v103 = v127;
      if (v127 < v124)
      {
        v127 = v124;
        v103 = v124;
      }
      v104 = (const void **)&v123;
    }
    else
    {
      if ((v128 & 8) == 0)
      {
        v94 = 0;
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
        v95 = &buf;
        goto LABEL_201;
      }
      v104 = (const void **)&v121[16];
      v103 = v122;
    }
    v105 = *v104;
    v94 = v103 - (_QWORD)*v104;
    if (v94 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v94 >= 0x17)
    {
      v106 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v94 | 7) != 0x17)
        v106 = v94 | 7;
      v107 = v106 + 1;
      v95 = (std::string *)operator new(v106 + 1);
      buf.__r_.__value_.__l.__size_ = v94;
      buf.__r_.__value_.__r.__words[2] = v107 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
      v12 = __pb;
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v103 - *(_BYTE *)v104;
      v95 = &buf;
      if (!v94)
      {
LABEL_201:
        v95->__r_.__value_.__s.__data_[v94] = 0;
        v108 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v108 = (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v130.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v130.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
        WORD2(v130.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&v130.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v111;
        _os_log_impl(&dword_19F029000, v93, OS_LOG_TYPE_INFO, "Requesting high precision altitude for placements:%s of Continue %@", (uint8_t *)&v130, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        goto LABEL_205;
      }
    }
    memmove(v95, v105, v94);
    goto LABEL_201;
  }
LABEL_205:

  *(_QWORD *)v120 = *MEMORY[0x1E0DE4F50];
  v109 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&v120[*(_QWORD *)(*(_QWORD *)v120 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v120[16] = v109;
  *(_QWORD *)v121 = MEMORY[0x1E0DE4FB8] + 16;
  if (v126 < 0)
    operator delete(v125);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](&v129);
  if (v12)
    goto LABEL_187;
LABEL_188:

}

void sub_19F4396FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingContinueLabelFeature> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x48uLL);
  v12 = v16;
  *v16 = 0;
  v16[1] = v8;
  v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v26)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v26)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < *(_QWORD *)&v26)
LABEL_37:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v30 = *(_QWORD *)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_61:
    *v31 = v12;
    goto LABEL_62;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v30 + 8 * v3) = v15;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19F439AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingManeuverLabelFeature> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x30uLL);
  v12 = v16;
  *v16 = 0;
  v16[1] = v8;
  v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v16[4] = 0;
  v16[5] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v26)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v26)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < *(_QWORD *)&v26)
LABEL_37:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v30 = *(_QWORD *)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_61:
    *v31 = v12;
    goto LABEL_62;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v30 + 8 * v3) = v15;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19F439FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::updateFeatureSet(md::ARWalkingSupport *this, md::ARWalkingFeatureSet *a2)
{
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  uint64_t **v8;
  id v9;
  uint64_t *v10;
  double *v11;
  double *v12;
  char v13;
  int v14;
  double v15;
  double v16;
  char v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t *v20;
  void **v21;
  std::string *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  md::HighPrecisionAltitudeRequest *v83;
  int v84;
  md::ARWalkingFeatureSet *v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t *v88;
  double *v89;
  double *v90;
  char v91;
  int v92;
  double v93;
  double v94;
  unsigned int *v95;
  float v96;
  uint64_t v97;
  NSObject *v98;
  std::string *v99;
  uint64_t v100;
  uint64_t *v101;
  const char *p_val;
  double v103;
  double v104;
  id v105;
  int8x8_t v106;
  unint64_t v107;
  uint8x8_t v108;
  md::HighPrecisionAltitudeRequest *v109;
  uint64_t v110;
  md::HighPrecisionAltitudeRequest *v111;
  _QWORD *v112;
  unint64_t v113;
  md::HighPrecisionAltitudeRequest *v114;
  unint64_t v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  int8x8_t v121;
  unint64_t v122;
  uint8x8_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v141;
  _QWORD *v142;
  int v143;
  md::ARWalkingFeatureSet *v144;
  _QWORD *v145;
  id v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void *__p[2];
  char v150;
  double __val;
  char v152;
  char v153;
  std::string v154;
  _BYTE buf[12];
  __int16 v156;
  _BYTE v157[18];
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  id v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a2 + 29) + *((_QWORD *)a2 + 34))
  {
    md::LabelLayoutContext::mercatorEyePos(*(md::LabelLayoutContext **)(*(_QWORD *)this + 432));
    v7 = v6;
    v8 = (uint64_t **)*((_QWORD *)a2 + 33);
    if (v8)
    {
      v143 = 0;
      while (1)
      {
        while ((md::HighPrecisionAltitudeRequest::resolveResults((md::HighPrecisionAltitudeRequest *)v8[4]) & 1) == 0)
        {
          v8 = (uint64_t **)*v8;
          if (!v8)
            goto LABEL_116;
        }
        v147 = 0;
        v148 = 0;
        v9 = (id)v8[2][85];
        LOBYTE(__val) = 0;
        v152 = 0;
        v10 = v8[4];
        if (!v10)
          goto LABEL_16;
        *(_QWORD *)&v2 &= 0xFFFFFFFFFFFFFF00;
        v11 = (double *)v10[4];
        v12 = (double *)v10[5];
        if (v11 == v12)
          goto LABEL_16;
        v13 = 0;
        v14 = 0;
        v15 = 1.79769313e308;
        do
        {
          v16 = vabdd_f64(v7, *v11);
          if (v16 < v15)
          {
            if (!v14)
              v13 = 1;
            v14 = 1;
            v2 = *v11;
            v15 = v16;
          }
          ++v11;
        }
        while (v11 != v12);
        if (v13)
        {
          v17 = 0;
          __val = v2;
          v152 = 1;
        }
        else
        {
LABEL_16:
          v17 = 1;
        }
        if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
        v18 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          break;
LABEL_34:

        md::ARWalkingManeuverLabelFeature::updateWithHighPrecisionAltitude(v8[2], (uint64_t)&__val, (uint64_t)v8[4], (uint64_t)v8[5]);
        v24 = (uint64_t)v8[2];
        v23 = v8[3];
        if (v23)
        {
          v25 = (unint64_t *)(v23 + 1);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v147 = v24;
        v148 = (std::__shared_weak_count *)v23;
        v27 = (uint64_t *)*((_QWORD *)a2 + 7);
        v28 = *((_QWORD *)a2 + 8);
        if ((unint64_t)v27 < v28)
        {
          if (v27)
            *v27 = v24;
          v29 = v27 + 1;
          goto LABEL_64;
        }
        v30 = *((_QWORD *)a2 + 6);
        v31 = ((uint64_t)v27 - v30) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          abort();
        v33 = v28 - v30;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 9) + 16))(*((_QWORD *)a2 + 9), 8 * v34, 8);
          v36 = (uint64_t *)(v35 + 8 * v31);
          v37 = v35 + 8 * v34;
          if (v35)
            *v36 = v24;
        }
        else
        {
          v37 = 0;
          v36 = (uint64_t *)(8 * v31);
        }
        v39 = *((_QWORD *)a2 + 6);
        v38 = *((_QWORD *)a2 + 7);
        v40 = v38 - v39;
        if (v38 == v39)
        {
          v42 = v36;
          goto LABEL_62;
        }
        v41 = v40 - 8;
        if ((unint64_t)(v40 - 8) < 0x38)
        {
          v42 = v36;
        }
        else
        {
          v42 = v36;
          if ((unint64_t)(v38 - (_QWORD)v36) >= 0x20)
          {
            v43 = (v41 >> 3) + 1;
            v44 = v36 - 2;
            v45 = (__int128 *)(v38 - 16);
            v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v45;
              *((_OWORD *)v44 - 1) = *(v45 - 1);
              *(_OWORD *)v44 = v47;
              v44 -= 4;
              v45 -= 2;
              v46 -= 4;
            }
            while (v46);
            v42 = &v36[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
            v38 -= 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
            if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_61;
          }
        }
        do
        {
          v48 = *(_QWORD *)(v38 - 8);
          v38 -= 8;
          *--v42 = v48;
        }
        while (v38 != v39);
LABEL_61:
        v38 = *((_QWORD *)a2 + 6);
LABEL_62:
        v29 = v36 + 1;
        *((_QWORD *)a2 + 6) = v42;
        *((_QWORD *)a2 + 7) = v36 + 1;
        v49 = *((_QWORD *)a2 + 8);
        *((_QWORD *)a2 + 8) = v37;
        if (v38)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 9) + 40))(*((_QWORD *)a2 + 9), v38, v49 - v38);
LABEL_64:
        *((_QWORD *)a2 + 7) = v29;
        v146 = (id)v8[2][85];
        v50 = geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::operator[]((char **)a2 + 3, &v146);
        v51 = v148;
        if (v148)
        {
          p_shared_owners = (unint64_t *)&v148->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)v50 + 1);
        *(_QWORD *)v50 = v24;
        *((_QWORD *)v50 + 1) = v51;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }

        md::ARWalkingSupport::addLabelFeature(&v147, (uint64_t)a2);
        v57 = *(int8x8_t *)((char *)a2 + 256);
        v58 = (unint64_t)v8[1];
        v59 = (uint8x8_t)vcnt_s8(v57);
        v59.i16[0] = vaddlv_u8(v59);
        if (v59.u32[0] > 1uLL)
        {
          if (v58 >= *(_QWORD *)&v57)
            v58 %= *(_QWORD *)&v57;
        }
        else
        {
          v58 &= *(_QWORD *)&v57 - 1;
        }
        v60 = *v8;
        v61 = *((_QWORD *)a2 + 31);
        v62 = *(uint64_t ***)(v61 + 8 * v58);
        do
        {
          v63 = v62;
          v62 = (uint64_t **)*v62;
        }
        while (v62 != v8);
        if (v63 != (uint64_t **)((char *)a2 + 264))
        {
          v64 = v63[1];
          if (v59.u32[0] > 1uLL)
          {
            if ((unint64_t)v64 >= *(_QWORD *)&v57)
              v64 = (uint64_t *)((unint64_t)v64 % *(_QWORD *)&v57);
          }
          else
          {
            v64 = (uint64_t *)((unint64_t)v64 & (*(_QWORD *)&v57 - 1));
          }
          v65 = *v8;
          if (v64 == (uint64_t *)v58)
            goto LABEL_91;
        }
        if (!v60)
          goto LABEL_90;
        v66 = (uint64_t *)v60[1];
        if (v59.u32[0] > 1uLL)
        {
          if ((unint64_t)v66 >= *(_QWORD *)&v57)
            v66 = (uint64_t *)((unint64_t)v66 % *(_QWORD *)&v57);
        }
        else
        {
          v66 = (uint64_t *)((unint64_t)v66 & (*(_QWORD *)&v57 - 1));
        }
        v65 = *v8;
        if (v66 != (uint64_t *)v58)
        {
LABEL_90:
          *(_QWORD *)(v61 + 8 * v58) = 0;
          v65 = *v8;
LABEL_91:
          if (!v65)
            goto LABEL_98;
        }
        v67 = (uint64_t *)v65[1];
        if (v59.u32[0] > 1uLL)
        {
          if ((unint64_t)v67 >= *(_QWORD *)&v57)
            v67 = (uint64_t *)((unint64_t)v67 % *(_QWORD *)&v57);
        }
        else
        {
          v67 = (uint64_t *)((unint64_t)v67 & (*(_QWORD *)&v57 - 1));
        }
        if (v67 != (uint64_t *)v58)
        {
          *(_QWORD *)(*((_QWORD *)a2 + 31) + 8 * (_QWORD)v67) = v63;
          v65 = *v8;
        }
LABEL_98:
        *v63 = v65;
        *v8 = 0;
        --*((_QWORD *)a2 + 34);
        v68 = (std::__shared_weak_count *)v8[5];
        if (!v68)
          goto LABEL_102;
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
          v71 = (std::__shared_weak_count *)v8[3];
          if (v71)
          {
LABEL_103:
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
        else
        {
LABEL_102:
          v71 = (std::__shared_weak_count *)v8[3];
          if (v71)
            goto LABEL_103;
        }
        operator delete(v8);
        v74 = v148;
        if (v148)
        {
          v75 = (unint64_t *)&v148->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        ++v143;
        v8 = (uint64_t **)v60;
        if (!v60)
          goto LABEL_116;
      }
      v19 = *((_QWORD *)a2 + 41);
      v20 = v8[4];
      if (v20)
      {
        md::HighPrecisionAltitudeRequest::to_string((md::HighPrecisionAltitudeRequest *)__p, v8[4]);
        if (v150 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        if ((v17 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v21 = (void **)"";
        if ((v17 & 1) != 0)
        {
LABEL_25:
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = v19;
          v156 = 2080;
          *(_QWORD *)v157 = v21;
          *(_WORD *)&v157[8] = 2080;
          *(_QWORD *)&v157[10] = "NONE";
          v158 = 2048;
          v159 = v7;
          v160 = 2112;
          v161 = *(double *)&v9;
          _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_INFO, "Updating Maneuver Feature for FeatureSet(version:%llu) with high precision altitude request:(%s) resolvedAltitude:%s eyeAltitude:%f feature:%@", buf, 0x34u);
LABEL_31:
          if (v20 && v150 < 0)
            operator delete(__p[0]);
          goto LABEL_34;
        }
      }
      std::to_string(&v154, __val);
      v22 = &v154;
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v154.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 134219010;
      *(_QWORD *)&buf[4] = v19;
      v156 = 2080;
      *(_QWORD *)v157 = v21;
      *(_WORD *)&v157[8] = 2080;
      *(_QWORD *)&v157[10] = v22;
      v158 = 2048;
      v159 = v7;
      v160 = 2112;
      v161 = *(double *)&v9;
      _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_INFO, "Updating Maneuver Feature for FeatureSet(version:%llu) with high precision altitude request:(%s) resolvedAltitude:%s eyeAltitude:%f feature:%@", buf, 0x34u);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      goto LABEL_31;
    }
    v143 = 0;
LABEL_116:
    v144 = a2;
    v77 = (char *)a2 + 224;
    v78 = (_QWORD *)*((_QWORD *)a2 + 28);
    v141 = v77;
    if (v78)
    {
      while (1)
      {
        v79 = v78;
        v142 = v78 + 2;
        v80 = (std::__shared_weak_count *)v78[3];
        v147 = v78[2];
        v148 = v80;
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v83 = (md::HighPrecisionAltitudeRequest *)v78[6];
        v145 = v78 + 6;
        v84 = 0;
        if (v83)
        {
          v85 = v144;
          while (1)
          {
            while (1)
            {
              v86 = (uint64_t **)((char *)v83 + 24);
              if ((md::HighPrecisionAltitudeRequest::resolveResults(*((md::HighPrecisionAltitudeRequest **)v83 + 3)) & 1) != 0)
                break;
              v83 = *(md::HighPrecisionAltitudeRequest **)v83;
              if (!v83)
                goto LABEL_197;
            }
            v87 = *(_QWORD *)&v4 & 0xFFFFFFFFFFFFFF00;
            v88 = *v86;
            if (!*v86)
              break;
            *(_QWORD *)&v3 &= 0xFFFFFFFFFFFFFF00;
            v89 = (double *)v88[4];
            v90 = (double *)v88[5];
            if (v89 == v90)
              break;
            v91 = 0;
            v92 = 0;
            v93 = 1.79769313e308;
            do
            {
              v94 = vabdd_f64(v7, *v89);
              if (v94 < v93)
              {
                if (!v92)
                  v91 = 1;
                v92 = 1;
                v3 = *v89;
                v93 = v94;
              }
              ++v89;
            }
            while (v89 != v90);
            v4 = v3;
            if (!v91)
              goto LABEL_135;
LABEL_137:
            v95 = (unsigned int *)((char *)v83 + 16);
            v96 = *(float *)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 112))(v147, (uint64_t)v83 + 16)+ 40);
            if (v96 == 3.4028e38)
            {
              std::__throw_bad_optional_access[abi:nn180100]();
              __break(1u);
            }
            v97 = v147;
            if (v91)
              v2 = v4;
            else
              *(_QWORD *)&v2 &= 0xFFFFFFFFFFFFFF00;
            md::ARWalkingContinueLabelFeature::setHighPrecisionAltitudeForPlacement(v147, *v95, (uint64_t *)v83 + 3, v91 != 0, v2);
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
            v98 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
            {
              if (*v95)
              {
                std::to_string(&v154, *v95);
                if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v99 = &v154;
                else
                  v99 = (std::string *)v154.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v154.__r_.__value_.__s + 23) = 7;
                strcpy((char *)&v154, "UNKNOWN");
                v99 = &v154;
              }
              v100 = *((_QWORD *)v85 + 41);
              v101 = *v86;
              if (*v86)
              {
                md::HighPrecisionAltitudeRequest::to_string((md::HighPrecisionAltitudeRequest *)&__val, *v86);
                if (v153 >= 0)
                  p_val = (const char *)&__val;
                else
                  p_val = *(const char **)&__val;
              }
              else
              {
                p_val = "";
              }
              v103 = v96;
              if (v91)
                v104 = v4;
              else
                v104 = v103;
              v105 = *(id *)(v97 + 200);
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = v99;
              v156 = 2048;
              *(_QWORD *)v157 = v100;
              *(_WORD *)&v157[8] = 2080;
              *(_QWORD *)&v157[10] = p_val;
              v158 = 2048;
              v159 = v103;
              v160 = 2048;
              v161 = v104;
              v162 = 2048;
              v163 = v7;
              v164 = 2112;
              v165 = v105;
              _os_log_impl(&dword_19F029000, v98, OS_LOG_TYPE_INFO, "Updating Continue placement:%s for FeatureSet(version:%llu) with high precision altitude request:(%s) previousAltitude:%f resolvedAltitude:%f eyeAltitude:%f feature:%@", buf, 0x48u);
              v85 = v144;
              if (v101 && v153 < 0)
              {
                operator delete(*(void **)&__val);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
LABEL_160:
                  operator delete(v154.__r_.__value_.__l.__data_);
              }
              else if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              {
                goto LABEL_160;
              }

            }
            v106 = (int8x8_t)v79[5];
            v107 = *((_QWORD *)v83 + 1);
            v108 = (uint8x8_t)vcnt_s8(v106);
            v108.i16[0] = vaddlv_u8(v108);
            if (v108.u32[0] > 1uLL)
            {
              if (v107 >= *(_QWORD *)&v106)
                v107 %= *(_QWORD *)&v106;
            }
            else
            {
              v107 &= *(_QWORD *)&v106 - 1;
            }
            v109 = *(md::HighPrecisionAltitudeRequest **)v83;
            v110 = v79[4];
            v111 = *(md::HighPrecisionAltitudeRequest **)(v110 + 8 * v107);
            do
            {
              v112 = v111;
              v111 = *(md::HighPrecisionAltitudeRequest **)v111;
            }
            while (v111 != v83);
            if (v112 == v145)
              goto LABEL_245;
            v113 = v112[1];
            if (v108.u32[0] > 1uLL)
            {
              if (v113 >= *(_QWORD *)&v106)
                v113 %= *(_QWORD *)&v106;
            }
            else
            {
              v113 &= *(_QWORD *)&v106 - 1;
            }
            v114 = *(md::HighPrecisionAltitudeRequest **)v83;
            if (v113 != v107)
            {
LABEL_245:
              if (v109)
              {
                v115 = *((_QWORD *)v109 + 1);
                if (v108.u32[0] > 1uLL)
                {
                  if (v115 >= *(_QWORD *)&v106)
                    v115 %= *(_QWORD *)&v106;
                }
                else
                {
                  v115 &= *(_QWORD *)&v106 - 1;
                }
                v114 = *(md::HighPrecisionAltitudeRequest **)v83;
                if (v115 == v107)
                {
LABEL_182:
                  v116 = *((_QWORD *)v114 + 1);
                  if (v108.u32[0] > 1uLL)
                  {
                    if (v116 >= *(_QWORD *)&v106)
                      v116 %= *(_QWORD *)&v106;
                  }
                  else
                  {
                    v116 &= *(_QWORD *)&v106 - 1;
                  }
                  if (v116 != v107)
                  {
                    *(_QWORD *)(v79[4] + 8 * v116) = v112;
                    v114 = *(md::HighPrecisionAltitudeRequest **)v83;
                  }
                  goto LABEL_188;
                }
              }
              *(_QWORD *)(v110 + 8 * v107) = 0;
              v114 = *(md::HighPrecisionAltitudeRequest **)v83;
            }
            if (v114)
              goto LABEL_182;
LABEL_188:
            *v112 = v114;
            *(_QWORD *)v83 = 0;
            --v79[7];
            v117 = (std::__shared_weak_count *)*((_QWORD *)v83 + 4);
            if (v117)
            {
              v118 = (unint64_t *)&v117->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            operator delete(v83);
            ++v84;
            v83 = v109;
            if (!v109)
              goto LABEL_197;
          }
          v91 = 0;
LABEL_135:
          v4 = *(double *)&v87;
          goto LABEL_137;
        }
LABEL_197:
        v78 = (_QWORD *)*v79;
        if (v79[7])
        {
          v120 = v148;
          if (v148)
            goto LABEL_227;
          goto LABEL_118;
        }
        v121 = *(int8x8_t *)((char *)v144 + 216);
        v122 = v79[1];
        v123 = (uint8x8_t)vcnt_s8(v121);
        v123.i16[0] = vaddlv_u8(v123);
        if (v123.u32[0] > 1uLL)
        {
          if (v122 >= *(_QWORD *)&v121)
            v122 %= *(_QWORD *)&v121;
        }
        else
        {
          v122 &= *(_QWORD *)&v121 - 1;
        }
        v124 = *((_QWORD *)v144 + 26);
        v125 = *(_QWORD **)(v124 + 8 * v122);
        do
        {
          v126 = v125;
          v125 = (_QWORD *)*v125;
        }
        while (v125 != v79);
        if (v126 != v141)
        {
          v127 = v126[1];
          if (v123.u32[0] > 1uLL)
          {
            if (v127 >= *(_QWORD *)&v121)
              v127 %= *(_QWORD *)&v121;
          }
          else
          {
            v127 &= *(_QWORD *)&v121 - 1;
          }
          v128 = (_QWORD *)*v79;
          if (v127 == v122)
            goto LABEL_219;
        }
        if (!v78)
          break;
        v129 = v78[1];
        if (v123.u32[0] > 1uLL)
        {
          if (v129 >= *(_QWORD *)&v121)
            v129 %= *(_QWORD *)&v121;
        }
        else
        {
          v129 &= *(_QWORD *)&v121 - 1;
        }
        v128 = (_QWORD *)*v79;
        if (v129 != v122)
          break;
LABEL_220:
        v130 = v128[1];
        if (v123.u32[0] > 1uLL)
        {
          if (v130 >= *(_QWORD *)&v121)
            v130 %= *(_QWORD *)&v121;
        }
        else
        {
          v130 &= *(_QWORD *)&v121 - 1;
        }
        if (v130 != v122)
        {
          *(_QWORD *)(*((_QWORD *)v144 + 26) + 8 * v130) = v126;
          v128 = (_QWORD *)*v79;
        }
LABEL_226:
        *v126 = v128;
        *v79 = 0;
        --*((_QWORD *)v144 + 29);
        std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v142);
        operator delete(v79);
        v120 = v148;
        if (v148)
        {
LABEL_227:
          v131 = (unint64_t *)&v120->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
LABEL_118:
        v143 += v84;
        if (!v78)
          goto LABEL_231;
      }
      *(_QWORD *)(v124 + 8 * v122) = 0;
      v128 = (_QWORD *)*v79;
LABEL_219:
      if (!v128)
        goto LABEL_226;
      goto LABEL_220;
    }
LABEL_231:
    if (v143)
    {
      if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
      v133 = GEOGetVectorKitARWalkingSupportLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
      {
        v134 = *((_QWORD *)v144 + 41);
        v135 = *((_QWORD *)v144 + 29) + *((_QWORD *)v144 + 34);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v134;
        v156 = 1024;
        *(_DWORD *)v157 = v143;
        *(_WORD *)&v157[4] = 2048;
        *(_QWORD *)&v157[6] = v135;
        _os_log_impl(&dword_19F029000, v133, OS_LOG_TYPE_INFO, "FeatureSet(version:%llu) processed %d requests - awaiting %lu requests", buf, 0x1Cu);
      }
      v136 = *(_QWORD *)this;
      *(_BYTE *)(v136 + 3041) = 1;
      v137 = atomic_load((unsigned __int8 *)(v136 + 3058));
      if ((v137 & 1) != 0)
      {
        v138 = *(_QWORD *)(v136 + 136);
        if (v138)
        {
          v139 = *(_QWORD *)(v138 + 56);
          if (v139)
          {
            *(_QWORD *)buf = v136;
            v154.__r_.__value_.__s.__data_[0] = 9;
            (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v139 + 48))(v139, buf, &v154);
          }
        }
      }
    }
  }
}

void sub_19F43AE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v28;
  void *v29;

  if (v27)
  {
    if (a27 < 0)
      operator delete(__p);
  }

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_19F43AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a33 < 0)
    operator delete(__p);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

char *geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::operator[](char **a1, id *a2)
{
  char *v4;
  char v5;
  char *v6;
  id v7;
  char v8;
  char *v9;
  unint64_t v10;
  id v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  id v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v30;

  v4 = *a1;
  if (*a1 == a1[1])
    goto LABEL_4;
  while (1)
  {
    v5 = objc_msgSend(*a2, "isEqual:", *(_QWORD *)v4);
    v6 = a1[1];
    if ((v5 & 1) != 0)
      break;
    v4 += 24;
    if (v4 == v6)
      goto LABEL_4;
  }
  if (v4 == v6)
  {
LABEL_4:
    v7 = *a2;
    v30 = v7;
    v4 = *a1;
    if (*a1 == a1[1])
      goto LABEL_11;
    while (1)
    {
      v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)v4);
      v9 = a1[1];
      if ((v8 & 1) != 0)
        break;
      v4 += 24;
      if (v4 == v9)
      {
        v4 = a1[1];
        goto LABEL_11;
      }
    }
    if (v4 == v9)
    {
LABEL_11:
      v10 = (unint64_t)a1[2];
      if ((unint64_t)v4 >= v10)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
        v15 = 2 * v14;
        if (2 * v14 <= v13 + 1)
          v15 = v13 + 1;
        if (v14 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = (char *)operator new(24 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[24 * v13];
        v19 = &v17[24 * v16];
        v20 = v7;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = v20;
        v12 = v18 + 24;
        v21 = *a1;
        v22 = a1[1];
        if (v22 == *a1)
        {
          *a1 = v18;
          a1[1] = v12;
          a1[2] = v19;
        }
        else
        {
          do
          {
            v23 = *(_OWORD *)(v22 - 24);
            v22 -= 24;
            *(_QWORD *)v22 = 0;
            *(_OWORD *)(v18 - 24) = v23;
            v18 -= 24;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v22 + 2);
            *((_QWORD *)v22 + 1) = 0;
            *((_QWORD *)v22 + 2) = 0;
          }
          while (v22 != v21);
          v22 = *a1;
          v24 = a1[1];
          *a1 = v18;
          a1[1] = v12;
          a1[2] = v19;
          while (v24 != v22)
          {
            v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
            if (v26)
            {
              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              do
                v28 = __ldaxr(p_shared_owners);
              while (__stlxr(v28 - 1, p_shared_owners));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
            v25 = (void *)*((_QWORD *)v24 - 3);
            v24 -= 24;

          }
        }
        if (v22)
          operator delete(v22);
      }
      else
      {
        v11 = v7;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        *(_QWORD *)v4 = v11;
        v12 = v4 + 24;
      }
      a1[1] = v12;
      v4 = v12 - 24;
    }

  }
  return v4 + 8;
}

void sub_19F43B1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>::~pair((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::addLabelFeature(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _OWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  _OWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  _OWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  _QWORD *v89;
  _QWORD *v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1) == 25)
  {
    v4 = *a1;
    v5 = (std::__shared_weak_count *)a1[1];
    *(_QWORD *)&v98 = v4;
    *((_QWORD *)&v98 + 1) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = *(_QWORD **)(a2 + 152);
    v9 = *(_QWORD *)(a2 + 160);
    if ((unint64_t)v8 < v9)
    {
      if (v8)
      {
        *v8 = v4;
        v8[1] = v5;
        v5 = 0;
      }
      *(_QWORD *)(a2 + 152) = v8 + 2;
      if (!v5)
        return;
      goto LABEL_69;
    }
    v15 = *(_QWORD *)(a2 + 144);
    v16 = ((uint64_t)v8 - v15) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      abort();
    v18 = v9 - v15;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 168) + 16))(*(_QWORD *)(a2 + 168), 16 * v19, 8);
      v21 = (_OWORD *)(v20 + 16 * v16);
      v22 = v20 + 16 * v19;
      if (v20)
      {
        *v21 = v98;
        v98 = 0uLL;
      }
    }
    else
    {
      v22 = 0;
      v21 = (_OWORD *)(16 * v16);
    }
    v42 = v21 + 1;
    v43 = *(_QWORD **)(a2 + 144);
    v44 = *(_QWORD **)(a2 + 152);
    if (v44 == v43)
    {
      *(_QWORD *)(a2 + 144) = v21;
      *(_QWORD *)(a2 + 152) = v42;
      v47 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = v22;
    }
    else
    {
      do
      {
        v45 = *((_OWORD *)v44 - 1);
        v44 -= 2;
        *--v21 = v45;
        *v44 = 0;
        v44[1] = 0;
      }
      while (v44 != v43);
      v44 = *(_QWORD **)(a2 + 144);
      v46 = *(_QWORD **)(a2 + 152);
      *(_QWORD *)(a2 + 144) = v21;
      *(_QWORD *)(a2 + 152) = v42;
      v47 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = v22;
      while (v46 != v44)
      {
        v48 = (std::__shared_weak_count *)*(v46 - 1);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v46 -= 2;
      }
    }
    if (v44)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a2 + 168) + 40))(*(_QWORD *)(a2 + 168), v44, v47 - (_QWORD)v44);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    *(_QWORD *)(a2 + 152) = v42;
    if (*((_QWORD *)&v98 + 1))
    {
LABEL_69:
      v51 = (unint64_t *)&v5->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
LABEL_144:
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1) == 24)
    {
      v10 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      *(_QWORD *)&v99 = v10;
      *((_QWORD *)&v99 + 1) = v5;
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(_QWORD **)(a2 + 88);
      v14 = *(_QWORD *)(a2 + 96);
      if ((unint64_t)v13 >= v14)
      {
        v28 = *(_QWORD *)(a2 + 80);
        v29 = ((uint64_t)v13 - v28) >> 4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60)
          abort();
        v31 = v14 - v28;
        if (v31 >> 3 > v30)
          v30 = v31 >> 3;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
          v32 = 0xFFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 104) + 16))(*(_QWORD *)(a2 + 104), 16 * v32, 8);
          v34 = (_OWORD *)(v33 + 16 * v29);
          v35 = v33 + 16 * v32;
          if (v33)
          {
            *v34 = v99;
            v99 = 0uLL;
          }
        }
        else
        {
          v35 = 0;
          v34 = (_OWORD *)(16 * v29);
        }
        v61 = v34 + 1;
        v62 = *(_QWORD **)(a2 + 80);
        v63 = *(_QWORD **)(a2 + 88);
        if (v63 == v62)
        {
          *(_QWORD *)(a2 + 80) = v34;
          *(_QWORD *)(a2 + 88) = v61;
          v66 = *(_QWORD *)(a2 + 96);
          *(_QWORD *)(a2 + 96) = v35;
        }
        else
        {
          do
          {
            v64 = *((_OWORD *)v63 - 1);
            v63 -= 2;
            *--v34 = v64;
            *v63 = 0;
            v63[1] = 0;
          }
          while (v63 != v62);
          v63 = *(_QWORD **)(a2 + 80);
          v65 = *(_QWORD **)(a2 + 88);
          *(_QWORD *)(a2 + 80) = v34;
          *(_QWORD *)(a2 + 88) = v61;
          v66 = *(_QWORD *)(a2 + 96);
          *(_QWORD *)(a2 + 96) = v35;
          while (v65 != v63)
          {
            v67 = (std::__shared_weak_count *)*(v65 - 1);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v65 -= 2;
          }
        }
        if (v63)
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a2 + 104) + 40))(*(_QWORD *)(a2 + 104), v63, v66 - (_QWORD)v63);
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
        *(_QWORD *)(a2 + 88) = v61;
        if (!*((_QWORD *)&v99 + 1))
          return;
      }
      else
      {
        if (v13)
        {
          *v13 = v10;
          v13[1] = v5;
          v5 = 0;
        }
        *(_QWORD *)(a2 + 88) = v13 + 2;
        if (!v5)
          return;
      }
      v70 = (unint64_t *)&v5->__shared_owners_;
      do
        v52 = __ldaxr(v70);
      while (__stlxr(v52 - 1, v70));
      goto LABEL_144;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1) == 26)
    {
      v23 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      *(_QWORD *)&v100 = v23;
      *((_QWORD *)&v100 + 1) = v5;
      if (v5)
      {
        v24 = (unint64_t *)&v5->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(_QWORD **)(a2 + 120);
      v27 = *(_QWORD *)(a2 + 128);
      if ((unint64_t)v26 >= v27)
      {
        v53 = *(_QWORD *)(a2 + 112);
        v54 = ((uint64_t)v26 - v53) >> 4;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 60)
          abort();
        v56 = v27 - v53;
        if (v56 >> 3 > v55)
          v55 = v56 >> 3;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
          v57 = 0xFFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 136) + 16))(*(_QWORD *)(a2 + 136), 16 * v57, 8);
          v59 = (_OWORD *)(v58 + 16 * v54);
          v60 = v58 + 16 * v57;
          if (v58)
          {
            *v59 = v100;
            v100 = 0uLL;
          }
        }
        else
        {
          v60 = 0;
          v59 = (_OWORD *)(16 * v54);
        }
        v79 = v59 + 1;
        v80 = *(_QWORD **)(a2 + 112);
        v81 = *(_QWORD **)(a2 + 120);
        if (v81 == v80)
        {
          *(_QWORD *)(a2 + 112) = v59;
          *(_QWORD *)(a2 + 120) = v79;
          v84 = *(_QWORD *)(a2 + 128);
          *(_QWORD *)(a2 + 128) = v60;
        }
        else
        {
          do
          {
            v82 = *((_OWORD *)v81 - 1);
            v81 -= 2;
            *--v59 = v82;
            *v81 = 0;
            v81[1] = 0;
          }
          while (v81 != v80);
          v81 = *(_QWORD **)(a2 + 112);
          v83 = *(_QWORD **)(a2 + 120);
          *(_QWORD *)(a2 + 112) = v59;
          *(_QWORD *)(a2 + 120) = v79;
          v84 = *(_QWORD *)(a2 + 128);
          *(_QWORD *)(a2 + 128) = v60;
          while (v83 != v81)
          {
            v85 = (std::__shared_weak_count *)*(v83 - 1);
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v83 -= 2;
          }
        }
        if (v81)
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a2 + 136) + 40))(*(_QWORD *)(a2 + 136), v81, v84 - (_QWORD)v81);
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
        *(_QWORD *)(a2 + 120) = v79;
        if (!*((_QWORD *)&v100 + 1))
          return;
      }
      else
      {
        if (v26)
        {
          *v26 = v23;
          v26[1] = v5;
          v5 = 0;
        }
        *(_QWORD *)(a2 + 120) = v26 + 2;
        if (!v5)
          return;
      }
      v88 = (unint64_t *)&v5->__shared_owners_;
      do
        v52 = __ldaxr(v88);
      while (__stlxr(v52 - 1, v88));
      goto LABEL_144;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1) == 27)
    {
      v36 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      *(_QWORD *)&v101 = v36;
      *((_QWORD *)&v101 + 1) = v5;
      if (v5)
      {
        v37 = (unint64_t *)&v5->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_QWORD **)(a2 + 184);
      v40 = *(_QWORD *)(a2 + 192);
      if ((unint64_t)v39 >= v40)
      {
        v71 = *(_QWORD *)(a2 + 176);
        v72 = ((uint64_t)v39 - v71) >> 4;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 60)
          abort();
        v74 = v40 - v71;
        if (v74 >> 3 > v73)
          v73 = v74 >> 3;
        v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v73;
        if (v75)
        {
          v76 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 200) + 16))(*(_QWORD *)(a2 + 200), 16 * v75, 8);
          v77 = (_OWORD *)(v76 + 16 * v72);
          v78 = v76 + 16 * v75;
          if (v76)
          {
            *v77 = v101;
            v101 = 0uLL;
          }
        }
        else
        {
          v78 = 0;
          v77 = (_OWORD *)(16 * v72);
        }
        v41 = v77 + 1;
        v89 = *(_QWORD **)(a2 + 176);
        v90 = *(_QWORD **)(a2 + 184);
        if (v90 == v89)
        {
          *(_QWORD *)(a2 + 176) = v77;
          *(_QWORD *)(a2 + 184) = v41;
          v93 = *(_QWORD *)(a2 + 192);
          *(_QWORD *)(a2 + 192) = v78;
        }
        else
        {
          do
          {
            v91 = *((_OWORD *)v90 - 1);
            v90 -= 2;
            *--v77 = v91;
            *v90 = 0;
            v90[1] = 0;
          }
          while (v90 != v89);
          v90 = *(_QWORD **)(a2 + 176);
          v92 = *(_QWORD **)(a2 + 184);
          *(_QWORD *)(a2 + 176) = v77;
          *(_QWORD *)(a2 + 184) = v41;
          v93 = *(_QWORD *)(a2 + 192);
          *(_QWORD *)(a2 + 192) = v78;
          while (v92 != v90)
          {
            v94 = (std::__shared_weak_count *)*(v92 - 1);
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            v92 -= 2;
          }
        }
        if (v90)
          (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a2 + 200) + 40))(*(_QWORD *)(a2 + 200), v90, v93 - (_QWORD)v90);
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      }
      else
      {
        if (v39)
        {
          *v39 = v36;
          v39[1] = v5;
          v5 = 0;
        }
        v41 = v39 + 2;
      }
      *(_QWORD *)(a2 + 184) = v41;
      if (v5)
      {
        v97 = (unint64_t *)&v5->__shared_owners_;
        do
          v52 = __ldaxr(v97);
        while (__stlxr(v52 - 1, v97));
        goto LABEL_144;
      }
    }
  }
}

void sub_19F43B8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F43B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F43B90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F43B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = (std::__shared_weak_count *)v2[3];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void md::ARWalkingSupport::processSetFeatureRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  double v17;
  long double v18;
  double v19;
  long double v20;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  NSObject *v31;
  int v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  char *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  BOOL v58;
  NSObject *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  char *v62;
  unint64_t *v63;
  unint64_t v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  NSObject *v75;
  char *v76;
  id v77;
  char *v78;
  __int128 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  id v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  _QWORD *v87;
  unsigned __int8 v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  md::LabelStyle **v92;
  md::LabelStyle *v93;
  double v94;
  double *v95;
  uint64_t v96;
  double v97;
  id v98;
  void *v99;
  double v100;
  double v101;
  double v102;
  double v103;
  __double2 v104;
  double v105;
  __double2 v106;
  double v107;
  double v108;
  _BOOL4 v109;
  _BOOL4 v110;
  BOOL v111;
  int v112;
  int v113;
  NSObject *v114;
  int v115;
  BOOL v116;
  NSObject *v117;
  unint64_t *v118;
  unint64_t v119;
  id v120;
  void *v121;
  id v122;
  void *v123;
  NSObject *v124;
  char *v125;
  uint64_t v126;
  unsigned __int8 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  void **v130;
  std::__shared_weak_count_vtbl *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  unsigned __int8 v137;
  size_t v138;
  _QWORD *v139;
  uint64_t v140;
  int *v141;
  int v142;
  uint64_t v143;
  int *v144;
  int v145;
  NSObject *v146;
  int v147;
  NSObject *v148;
  char *v149;
  id v150;
  __int128 v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  id v154;
  uint64_t v155;
  _QWORD *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t k;
  float v162;
  float v163;
  float v164;
  float v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  int *v185;
  int *v186;
  int *v187;
  unint64_t v188;
  __int128 v189;
  char *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  __int128 v196;
  uint64_t v197;
  char *v198;
  __int128 v199;
  int v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  char *v205;
  char *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  _QWORD *v215;
  unint64_t v216;
  char *v217;
  char *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  id v223;
  id v224;
  void *v225;
  const char *v226;
  unsigned __int8 v227;
  uint64_t v228;
  size_t v229;
  size_t v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  long double v235;
  float v236;
  __float2 v237;
  float v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char v242;
  char *v243;
  char *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t *v248;
  __int128 v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  NSObject *v252;
  _QWORD *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  BOOL v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  id v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  void **v281;
  std::__shared_weak_count_vtbl *v282;
  __int128 v283;
  void *v284;
  uint64_t v285;
  void *v286;
  unsigned int v287;
  uint64_t v288;
  char v289;
  uint64_t v290;
  unsigned __int8 v291;
  size_t v292;
  _QWORD *v293;
  uint64_t v294;
  int *v295;
  int v296;
  uint64_t v297;
  int *v298;
  int v299;
  double v300;
  uint64_t *v301;
  float v302;
  double v303;
  int v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  NSObject *v313;
  double v314;
  int v315;
  double v316;
  double i;
  double j;
  _QWORD *v319;
  double v320;
  unint64_t *v321;
  unint64_t v322;
  _QWORD *v323;
  void *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _QWORD *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  _QWORD *v332;
  void *v333;
  _BOOL4 v334;
  unint64_t v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  char *v341;
  _QWORD *v342;
  unint64_t v343;
  char *v344;
  char *v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t m;
  void *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  id v355;
  uint64_t v356;
  _QWORD *v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  void *v363;
  char *v364;
  id v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  float64x2_t v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  float v394;
  double v395;
  float v396;
  _QWORD *v397;
  _QWORD *v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  void *v403;
  uint64_t v404;
  unint64_t v405;
  char *v406;
  __int128 v407;
  char *v408;
  char *v409;
  __int128 v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  _OWORD *v430;
  __int128 *v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  double v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  int v446;
  uint64_t v447;
  geo::read_write_lock *v448;
  const char *v449;
  malloc_zone_t *zone;
  uint64_t v451;
  geo::read_write_lock *v452;
  const char *v453;
  malloc_zone_t *v454;
  uint64_t v455;
  geo::read_write_lock *v456;
  const char *v457;
  malloc_zone_t *v458;
  uint64_t v459;
  uint64_t v460;
  geo::read_write_lock *v461;
  const char *v462;
  malloc_zone_t *v463;
  int v464;
  uint64_t v465;
  geo::read_write_lock *v466;
  const char *v467;
  malloc_zone_t *v468;
  int v469;
  uint64_t v470;
  geo::read_write_lock *v471;
  const char *v472;
  malloc_zone_t *v473;
  NSObject *v474;
  unint64_t v475;
  id v476;
  void *v477;
  uint64_t v478;
  NSObject *v479;
  uint64_t v480;
  uint64_t v481;
  id v482;
  void *v483;
  id v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int64_t v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t v498;
  _QWORD *v499;
  unint64_t v500;
  uint64_t v501;
  char *v502;
  char *v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  unint64_t *v507;
  unint64_t v508;
  uint64_t v509;
  char *v510;
  char *v511;
  uint64_t v512;
  _QWORD *v513;
  uint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  char *v518;
  char *v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  unint64_t *v523;
  unint64_t v524;
  uint64_t v525;
  _QWORD *v526;
  _QWORD *v527;
  uint64_t v528;
  _QWORD *v529;
  uint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  _QWORD *v533;
  size_t prime;
  _QWORD *v535;
  _QWORD *v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  uint8x8_t v541;
  _QWORD *v542;
  _QWORD *v543;
  unint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  float v550;
  float v551;
  _BOOL8 v552;
  unint64_t v553;
  unint64_t v554;
  size_t v555;
  int8x8_t v556;
  unint64_t v557;
  uint8x8_t v558;
  uint64_t v559;
  _QWORD *v560;
  unint64_t v561;
  uint64_t *v562;
  size_t v563;
  _QWORD *v564;
  _QWORD *v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  uint8x8_t v571;
  _QWORD *v572;
  _QWORD *v573;
  unint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  _QWORD *v577;
  uint64_t v578;
  unint64_t *v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t *v582;
  unint64_t v583;
  float v584;
  float v585;
  _BOOL8 v586;
  unint64_t v587;
  unint64_t v588;
  size_t v589;
  int8x8_t v590;
  unint64_t v591;
  uint8x8_t v592;
  uint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  unint64_t v596;
  void **v597;
  void **v598;
  uint64_t v599;
  _QWORD *v600;
  void *v601;
  int8x8_t v602;
  BOOL v603;
  int8x8_t v604;
  BOOL v605;
  unint64_t v606;
  uint8x8_t v607;
  uint64_t v608;
  unint64_t v609;
  uint8x8_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  __int128 v617;
  double v618;
  double v619;
  double v620;
  id obj;
  id v622;
  void *v623;
  void *v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  char v629;
  __int128 v630;
  md::PointLabelFeatureBase *v631[2];
  int v632;
  __int128 v633;
  unint64_t *v634;
  char v635;
  id v636;
  __int128 v637;
  uint64_t v638;
  uint64_t v639;
  void *v641;
  void *v642;
  int v643;
  __int128 v644;
  _QWORD *v645;
  id v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  char *v649;
  double v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  id v655;
  uint64_t (**v656)();
  id v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  uint64_t v661;
  char *v662;
  char *v663;
  uint64_t v664;
  uint64_t v665;
  char *v666;
  char *v667;
  uint64_t v668;
  uint64_t v669;
  char *v670;
  char *v671;
  uint64_t v672;
  uint64_t v673;
  _QWORD *v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  size_t __n[2];
  __int128 v679;
  int v680;
  __int128 v681;
  __int128 v682;
  int v683;
  void **v684;
  void **v685;
  uint64_t v686;
  __int128 v687;
  unint64_t v688;
  _OWORD v689[3];
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  _BYTE v697[40];
  double v698;
  int v699;
  __int128 v700;
  _BYTE v701[128];
  double v702[7];
  _BYTE buf[54];
  _BYTE v704[18];
  __int16 v705;
  uint64_t v706;
  uint64_t v707;

  v707 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 896);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 432) + 336);
  v656 = &off_1E42B4F50;
  v657 = 0;
  v658 = 0u;
  v659 = 0u;
  v660 = 0u;
  {
    v612 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v612, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v661 = mdm::Allocator::instance(void)::alloc;
  v662 = 0;
  v664 = 0;
  v663 = 0;
  {
    v613 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v613, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v665 = mdm::Allocator::instance(void)::alloc;
  v666 = 0;
  v668 = 0;
  v667 = 0;
  {
    v614 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v614, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v669 = mdm::Allocator::instance(void)::alloc;
  v670 = 0;
  v672 = 0;
  v671 = 0;
  {
    v615 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v615, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v673 = mdm::Allocator::instance(void)::alloc;
  v674 = 0;
  v676 = 0;
  v675 = 0;
  {
    v616 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v616, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v677 = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)__n = 0u;
  v679 = 0u;
  v682 = 0u;
  v681 = 0u;
  v680 = 1065353216;
  v683 = 1065353216;
  v684 = 0;
  v685 = 0;
  v686 = 0;
  *(_QWORD *)&v687 = v3;
  *((_QWORD *)&v687 + 1) = v4;
  do
  {
    v10 = __ldaxr(&md::ARWalkingFeatureSet::nextVersion(void)::next);
    v11 = v10 + 1;
  }
  while (__stlxr(v10 + 1, &md::ARWalkingFeatureSet::nextVersion(void)::next));
  v688 = v10 + 1;
  v625 = *(unsigned __int8 *)(a2 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 432);
  if (*(_BYTE *)(v12 + 8))
  {
    md::LabelLayoutContext::mercatorEyePos((md::LabelLayoutContext *)v12);
    v14 = v13;
    v16 = v15 * 6.28318531;
    v18 = exp(v17 * 6.28318531 + -3.14159265);
    v19 = atan(v18) * 2.0 + -1.57079633;
    v20 = fmod(v16, 6.28318531);
    v21 = fmod(v20 + 6.28318531, 6.28318531) + -3.14159265;
    v22 = __sincos_stret(v19);
    v23 = 6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
    v24 = (v23 + v14) * v22.__cosval;
    v25 = __sincos_stret(v21);
    v619 = v24 * v25.__sinval;
    v620 = v24 * v25.__cosval;
    v26 = (v14 + v23 * 0.99330562) * v22.__sinval;
  }
  else
  {
    v619 = *(double *)(v12 + 144);
    v620 = *(double *)(v12 + 136);
    v26 = *(double *)(v12 + 152);
  }
  v618 = v26;
  v27 = *(id *)(a2 + 8);
  v28 = v27;
  if (v27)
    v29 = v27;
  v30 = v657;
  v657 = v28;

  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
  v31 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    v32 = *(unsigned __int8 *)(a2 + 24);
    v33 = *(id *)(a2 + 8);
    objc_msgSend(v33, "features");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "count");
    v36 = *(id *)(a2 + 8);
    objc_msgSend(v36, "features");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134219010;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = *((_QWORD *)&v687 + 1);
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v32;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v35;
    *(_WORD *)&buf[38] = 2112;
    *(_QWORD *)&buf[40] = v37;
    _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_INFO, "Begin Preparing FeatureSet(version:%llu timestamp:%f) - force:%d features(%lu):%@", buf, 0x30u);

  }
  v651 = 0u;
  v652 = 0u;
  v653 = 0u;
  v654 = 0u;
  objc_msgSend(v657, "features");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v651, v701, 16);
  if (v38)
  {
    v627 = *(_QWORD *)v652;
    v39 = 1.0;
    v617 = xmmword_19FFB2E80;
    do
    {
      v40 = 0;
      v626 = v38;
      do
      {
        if (*(_QWORD *)v652 != v627)
          objc_enumerationMutation(obj);
        v641 = *(void **)(*((_QWORD *)&v651 + 1) + 8 * v40);
        v655 = v641;
        v649 = 0;
        v650 = 0.0;
        v41 = *(uint64_t **)(a1 + 464);
        if (v41 == *(uint64_t **)(a1 + 472))
        {
          v43 = *(uint64_t **)(a1 + 464);
        }
        else
        {
          while (1)
          {
            v42 = objc_msgSend(v641, "isEqual:", *v41, v617);
            v43 = *(uint64_t **)(a1 + 472);
            if ((v42 & 1) != 0)
              break;
            v41 += 3;
            v44 = *(uint64_t **)(a1 + 472);
            if (v41 == v43)
              goto LABEL_29;
          }
        }
        v44 = v41;
LABEL_29:
        v45 = objc_msgSend(v641, "type", v617);
        if (v45)
        {
          if (v45 != 1)
          {
            if (v45 != 2)
              goto LABEL_475;
            v46 = v641;
            v628 = v40;
            if (!v625 && v44 != v43)
            {
              if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
                dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
              v47 = GEOGetVectorKitARWalkingSupportLog(void)::log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
              {
                v48 = *v44;
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v48;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v46;
                _os_log_impl(&dword_19F029000, v47, OS_LOG_TYPE_INFO, "Reusing previous Continue LabelFeature for external feature (%p) %@", buf, 0x16u);
              }
              v50 = (char *)v44[1];
              v49 = (std::__shared_weak_count *)v44[2];
              if (v49)
              {
                p_shared_owners = (unint64_t *)&v49->__shared_owners_;
                do
                  v52 = __ldxr(p_shared_owners);
                while (__stxr(v52 + 1, p_shared_owners));
              }
              v649 = v50;
              v650 = *(double *)&v49;
              v53 = v46;
              v54 = v53;
              if (v53)
                v55 = v53;
              v56 = (void *)*((_QWORD *)v50 + 25);
              *((_QWORD *)v50 + 25) = v54;

LABEL_144:
              v147 = 0;
              goto LABEL_436;
            }
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
            v75 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v46;
              _os_log_impl(&dword_19F029000, v75, OS_LOG_TYPE_INFO, "Building Continue LabelFeature for %@", buf, 0xCu);
            }
            v76 = (char *)operator new(0x1C8uLL);
            *((_QWORD *)v76 + 1) = 0;
            *((_QWORD *)v76 + 2) = 0;
            *(_QWORD *)v76 = &off_1E42DD8F8;
            v635 = *(_BYTE *)(a1 + 11);
            v77 = v46;
            *((_QWORD *)v76 + 3) = off_1E428CC00;
            *((_QWORD *)v76 + 4) = 850045863;
            v78 = v76 + 24;
            v79 = 0uLL;
            *(_OWORD *)(v76 + 40) = 0u;
            *(_OWORD *)(v76 + 56) = 0u;
            *(_OWORD *)(v76 + 72) = 0u;
            *(_OWORD *)(v76 + 88) = 0u;
            *(_OWORD *)(v76 + 104) = 0u;
            *(_OWORD *)(v76 + 120) = 0u;
            *((_QWORD *)v76 + 17) = 0;
            if ((v80 & 1) == 0)
            {
              v79 = 0uLL;
              if (v446)
              {
                v447 = operator new();
                *(_QWORD *)(v447 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v447 + 24) = "VectorKitLabels";
                *(_OWORD *)(v447 + 32) = v617;
                *(_QWORD *)v447 = &off_1E42B5668;
                *(_QWORD *)(v447 + 8) = "VectorKitLabels";
                *(_OWORD *)(v447 + 72) = 0u;
                *(_OWORD *)(v447 + 88) = 0u;
                *(_OWORD *)(v447 + 104) = 0u;
                *(_OWORD *)(v447 + 120) = 0u;
                *(_OWORD *)(v447 + 136) = 0u;
                *(_OWORD *)(v447 + 152) = 0u;
                *(_OWORD *)(v447 + 168) = 0u;
                *(_OWORD *)(v447 + 184) = 0u;
                *(_OWORD *)(v447 + 200) = 0u;
                *(_OWORD *)(v447 + 216) = 0u;
                *(_OWORD *)(v447 + 232) = 0u;
                *(_QWORD *)(v447 + 248) = 0;
                *(_OWORD *)(v447 + 56) = 0u;
                v448 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v447 + 56), 0);
                if ((_DWORD)v448)
                  geo::read_write_lock::logFailure(v448, (uint64_t)"initialization", v449);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v447 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v447 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v447;
                v79 = 0uLL;
              }
            }
            *((_QWORD *)v76 + 18) = mdm::Allocator::instance(void)::alloc;
            *((_QWORD *)v76 + 19) = 0x100000000;
            *((_QWORD *)v76 + 20) = 0;
            *((_DWORD *)v76 + 42) = 0;
            *((_OWORD *)v76 + 11) = v79;
            *((_OWORD *)v76 + 12) = v79;
            {
              v451 = operator new();
              *(_QWORD *)(v451 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v451 + 24) = "VectorKitLabels";
              *(_OWORD *)(v451 + 32) = v617;
              *(_QWORD *)v451 = &off_1E42B5668;
              *(_QWORD *)(v451 + 8) = "VectorKitLabels";
              *(_OWORD *)(v451 + 72) = 0u;
              *(_OWORD *)(v451 + 88) = 0u;
              *(_OWORD *)(v451 + 104) = 0u;
              *(_OWORD *)(v451 + 120) = 0u;
              *(_OWORD *)(v451 + 136) = 0u;
              *(_OWORD *)(v451 + 152) = 0u;
              *(_OWORD *)(v451 + 168) = 0u;
              *(_OWORD *)(v451 + 184) = 0u;
              *(_OWORD *)(v451 + 200) = 0u;
              *(_OWORD *)(v451 + 216) = 0u;
              *(_OWORD *)(v451 + 232) = 0u;
              *(_QWORD *)(v451 + 248) = 0;
              *(_OWORD *)(v451 + 56) = 0u;
              v452 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v451 + 56), 0);
              if ((_DWORD)v452)
                geo::read_write_lock::logFailure(v452, (uint64_t)"initialization", v453);
              v454 = malloc_create_zone(0, 0);
              *(_QWORD *)(v451 + 48) = v454;
              malloc_set_zone_name(v454, "VectorKitLabels");
              *(_QWORD *)(v451 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v451;
            }
            *((_QWORD *)v76 + 26) = mdm::Allocator::instance(void)::alloc;
            *((_QWORD *)v76 + 3) = &off_1E42A64D0;
            v82 = v77;
            *((_QWORD *)v76 + 31) = 0;
            *((_QWORD *)v76 + 27) = &off_1E42B51B0;
            *((_QWORD *)v76 + 28) = v82;
            *((_QWORD *)v76 + 32) = 0;
            *((_QWORD *)v76 + 30) = v76 + 248;
            *(_OWORD *)(v76 + 264) = xmmword_19FFB3300;
            *((_QWORD *)v76 + 37) = 0;
            *((_QWORD *)v76 + 38) = 0;
            *((_QWORD *)v76 + 35) = 0;
            *((_QWORD *)v76 + 36) = v76 + 296;
            *(_OWORD *)(v76 + 312) = 0u;
            *(_OWORD *)(v76 + 328) = 0u;
            *((_DWORD *)v76 + 86) = 1065353216;
            *((_QWORD *)v76 + 44) = v76 + 360;
            *((_QWORD *)v76 + 45) = 0;
            *((_QWORD *)v76 + 48) = 0;
            *((_QWORD *)v76 + 49) = 0;
            *((_QWORD *)v76 + 46) = 0;
            *((_QWORD *)v76 + 47) = v76 + 384;
            v76[400] = 0;
            v642 = v82;
            v83 = operator new();
            objc_msgSend(v82, "route");
            v84 = (id)objc_claimAutoreleasedReturnValue();
            md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)v83);
            *(_QWORD *)(v83 + 112) = 0;
            *(_OWORD *)(v83 + 80) = 0u;
            *(_OWORD *)(v83 + 96) = 0u;
            *(_DWORD *)(v83 + 120) = 1065353216;
            *(_OWORD *)(v83 + 128) = 0u;
            *(_OWORD *)(v83 + 144) = 0u;
            *(_DWORD *)(v83 + 160) = 1065353216;
            *(_OWORD *)(v83 + 168) = 0u;
            *(_OWORD *)(v83 + 184) = 0u;
            *(_DWORD *)(v83 + 200) = 1065353216;
            *(_OWORD *)(v83 + 208) = 0u;
            *(_OWORD *)(v83 + 224) = 0u;
            *(_DWORD *)(v83 + 240) = 1065353216;
            *(_QWORD *)v83 = &off_1E42AAE70;
            v85 = v84;
            *(_QWORD *)(v83 + 248) = &off_1E42B4C30;
            *(_QWORD *)(v83 + 256) = v85;
            *(_OWORD *)(v83 + 272) = xmmword_19FFB32C0;
            *(_QWORD *)(v83 + 288) = v78;
            v86 = 0;
            *(_OWORD *)(v83 + 296) = 0u;
            *(_OWORD *)(v83 + 312) = 0u;
            *(_DWORD *)(v83 + 328) = 1065353216;
            *(_OWORD *)(v83 + 336) = 0u;
            *(_OWORD *)(v83 + 352) = 0u;
            *(_DWORD *)(v83 + 368) = 1065353216;
            if ((_DWORD)VectorKitDebugConfig_ARDebugContinueBehindThresholdFactor && off_1EE569050)
            {
              v11 = v83 + 336;
              GEOConfigGetDouble();
            }
            *(_QWORD *)(v83 + 272) = v86;

            *((_QWORD *)v76 + 51) = v83;
            v87 = (_QWORD *)operator new();
            *v87 = &off_1E42E73A0;
            v87[1] = 0;
            v87[2] = 0;
            v87[3] = v83;
            *((_QWORD *)v76 + 52) = v87;

            *((_QWORD *)v76 + 53) = 0x4024000000000000;
            *((_QWORD *)v76 + 54) = 0;
            v76[440] = 0;
            v76[441] = v635;
            v76[442] = 0;
            *(_QWORD *)(v76 + 444) = 0xBF80000000000000;

            *(_QWORD *)&v702[0] = v76 + 24;
            *(_QWORD *)&v702[1] = v76;
            v690 = 0uLL;
            *(_QWORD *)&v691 = 0;
            {
              v459 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v459, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *((_QWORD *)&v691 + 1) = mdm::Allocator::instance(void)::alloc;
            v89 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 8, 8);
            *(_QWORD *)&v690 = v89;
            *(_QWORD *)&v691 = v89 + 1;
            if (v89)
              *v89 = v78;
            *((_QWORD *)&v690 + 1) = v89 + 1;
            md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(*(_QWORD *)a1 + 296), (uint64_t)&v690);
            v90 = *(_QWORD *)&v702[0];
            if (!*(_BYTE *)(*(_QWORD *)&v702[0] + 376))
            {
              v91 = *(_QWORD *)a1;
              *(_QWORD *)(*(_QWORD *)&v702[0] + 420) = *(_QWORD *)(*(_QWORD *)a1 + 3560);
              v92 = (md::LabelStyle **)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v90 + 552))(v90, 0, 0, 0, 0);
              v93 = *v92;
              if (*v92)
              {
                md::LabelStyle::setZoom(*v92, 15.0);
                v94 = *(double *)(v90 + 400);
                v95 = (double *)(v90 + 408);
                *(_QWORD *)(v90 + 408) = 0x4000000000000000;
                v96 = *((_QWORD *)v93 + 33);
                if (v96)
                {
                  v97 = 2.0;
                }
                else
                {
                  v301 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v93);
                  v96 = *v301;
                  *((_QWORD *)v93 + 33) = *v301;
                  v97 = *v95;
                }
                v302 = *(float *)(v96 + 24);
                if (v302 == 0.0)
                  v300 = v94;
                else
                  v300 = v302;
                v303 = fmax(v97, *((float *)v93 + 56));
                *(double *)(v90 + 408) = v303;
                *(double *)(*(_QWORD *)(v90 + 384) + 280) = v303 + v39;
              }
              else
              {
                v300 = *(double *)(v90 + 400);
                v95 = (double *)(v90 + 408);
                *(_QWORD *)(v90 + 408) = 0x4000000000000000;
              }
              *(_QWORD *)&v689[0] = *(id *)(v90 + 200);
              objc_msgSend(*(id *)&v689[0], "route");
              *(_QWORD *)&v700 = objc_claimAutoreleasedReturnValue();
              v699 = 1;
              objc_msgSend(*(id *)&v689[0], "range");
              objc_msgSend(*(id *)&v689[0], "range");
              v304 = GEOPolylineCoordinateWithinRange();
              *(_QWORD *)&v694 = v689;
              *((_QWORD *)&v694 + 1) = &v700;
              *(_QWORD *)&v695 = &v699;
              *((_QWORD *)&v695 + 1) = v90;
              v305 = (void *)v700;
              v306 = objc_msgSend(*(id *)&v689[0], "range");
              objc_msgSend(*(id *)&v689[0], "range");
              objc_msgSend(v305, "distanceFromPoint:toPoint:", v306, v307);
              v309 = v308;
              v310 = *v95;
              if (v304)
              {
                *(_BYTE *)(v90 + 416) = 1;
                objc_msgSend((id)v700, "distanceFromPoint:toPoint:", objc_msgSend(*(id *)&v689[0], "range"), *(_QWORD *)(v91 + 3560));
                v310 = v311 + v310;
              }
              if (GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken != -1)
                dispatch_once(&GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken, &__block_literal_global_26170);
              v312 = fmin(fmax(v310, 0.0), v309);
              v313 = GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log, OS_LOG_TYPE_INFO))
              {
                v314 = *v95;
                v315 = *(_DWORD *)(v91 + 3560);
                v316 = *(float *)(v91 + 3564);
                *(_DWORD *)buf = 138413826;
                *(_QWORD *)&buf[4] = *(_QWORD *)&v689[0];
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v309;
                *(_WORD *)&buf[22] = 2048;
                *(double *)&buf[24] = v300;
                *(_WORD *)&buf[32] = 2048;
                *(double *)&buf[34] = v314;
                *(_WORD *)&buf[42] = 2048;
                *(double *)&buf[44] = v312;
                *(_WORD *)&buf[52] = 1024;
                *(_DWORD *)v704 = v315;
                *(_WORD *)&v704[4] = 2048;
                *(double *)&v704[6] = v316;
                _os_log_impl(&dword_19F029000, v313, OS_LOG_TYPE_INFO, "Building placements for %@ - rangeLength:%f step:%f bestPlacementOffset:%f startOffset:%f userRouteCoordinate:(%d,%f)", buf, 0x44u);
              }
              for (i = v312; i <= v309; i = i + v300)
              {
                *(_QWORD *)buf = objc_msgSend((id)v700, "coordinateAtOffset:fromRouteCoordinate:", objc_msgSend(*(id *)&v689[0], "range"), i);
                v647 = *(_QWORD *)&i;
                md::ARWalkingContinueLabelFeature::prepareCandidatePlacements(geo::PolylineCoordinate const&)::$_0::operator()((id **)&v694, (unsigned int *)buf, (uint64_t *)&v647);
              }
              for (j = v312 - v300; j > 0.0; j = j - v300)
              {
                *(_QWORD *)buf = objc_msgSend((id)v700, "coordinateAtOffset:fromRouteCoordinate:", objc_msgSend(*(id *)&v689[0], "range"), j);
                v698 = j;
                md::ARWalkingContinueLabelFeature::prepareCandidatePlacements(geo::PolylineCoordinate const&)::$_0::operator()((id **)&v694, (unsigned int *)buf, (uint64_t *)&v698);
              }

            }
            memset(buf, 0, 32);
            *(_DWORD *)&buf[32] = 1065353216;
            md::ARWalkingSupport::prepareContinueFeaturePlacementsForRegion(a1, (uint64_t *)v702, a1 + 840, (uint64_t)buf);
            if (*(_QWORD *)&buf[24])
            {
              v319 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingContinueLabelFeature> const&>,std::tuple<>>((uint64_t)__n, v90, v702);
              std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__move_assign((uint64_t)(v319 + 4), (uint64_t *)buf);
            }
            v320 = v702[1];
            if (*(_QWORD *)&v702[1])
            {
              v321 = (unint64_t *)(*(_QWORD *)&v702[1] + 8);
              do
                v322 = __ldxr(v321);
              while (__stxr(v322 + 1, v321));
            }
            v649 = (char *)v90;
            v650 = v320;
            v323 = *(_QWORD **)&buf[16];
            if (*(_QWORD *)&buf[16])
            {
              do
              {
                v328 = v323;
                v323 = (_QWORD *)*v323;
                v329 = (std::__shared_weak_count *)v328[4];
                if (v329)
                {
                  v330 = (unint64_t *)&v329->__shared_owners_;
                  do
                    v331 = __ldaxr(v330);
                  while (__stlxr(v331 - 1, v330));
                  if (!v331)
                  {
                    ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                    std::__shared_weak_count::__release_weak(v329);
                  }
                }
                operator delete(v328);
              }
              while (v323);
            }
            v324 = *(void **)buf;
            *(_QWORD *)buf = 0;
            if (v324)
              operator delete(v324);
            if ((_QWORD)v690)
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)&v691 + 1) + 40))(*((_QWORD *)&v691 + 1), v690, v691 - v690);
            v325 = *(std::__shared_weak_count **)&v702[1];
            if (*(_QWORD *)&v702[1])
            {
              v326 = (unint64_t *)(*(_QWORD *)&v702[1] + 8);
              do
                v327 = __ldaxr(v326);
              while (__stlxr(v327 - 1, v326));
              if (!v327)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
              }
            }
            goto LABEL_435;
          }
          v622 = v641;
          objc_msgSend(v622, "storeFronts");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v628 = v40;
          v58 = objc_msgSend(v57, "count") == 0;

          if (v58)
          {
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
            v146 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138413058;
              *(_QWORD *)&buf[4] = v622;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "false";
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARWalkingSupport.mm";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = 336;
              _os_log_impl(&dword_19F029000, v146, OS_LOG_TYPE_ERROR, "Arrival features should have at least 1 storefront - dropping %@: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
            }
            goto LABEL_144;
          }
          if (!v625 && v44 != v43)
          {
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
            v59 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
            {
              v60 = *v44;
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v60;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v622;
              _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_INFO, "Reusing previous Arrival LabelFeature for external feature (%p) %@", buf, 0x16u);
            }
            v62 = (char *)v44[1];
            v61 = (std::__shared_weak_count *)v44[2];
            if (v61)
            {
              v63 = (unint64_t *)&v61->__shared_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            v649 = v62;
            v650 = *(double *)&v61;
            v65 = v622;
            v66 = v65;
            if (v65)
              v67 = v65;
            v68 = (void *)*((_QWORD *)v62 + 88);
            *((_QWORD *)v62 + 88) = v66;

            goto LABEL_144;
          }
          if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
            dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
          v148 = GEOGetVectorKitARWalkingSupportLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v622;
            _os_log_impl(&dword_19F029000, v148, OS_LOG_TYPE_INFO, "Building Arrival LabelFeature for %@", buf, 0xCu);
          }
          if (*(_BYTE *)(a1 + 10))
          {
            v149 = (char *)operator new(0x138uLL);
            *((_QWORD *)v149 + 1) = 0;
            *((_QWORD *)v149 + 2) = 0;
            *(_QWORD *)v149 = &off_1E42DD7A8;
            v150 = v622;
            *((_QWORD *)v149 + 3) = off_1E428CC00;
            *((_QWORD *)v149 + 4) = 850045863;
            v151 = 0uLL;
            *(_OWORD *)(v149 + 40) = 0u;
            *(_OWORD *)(v149 + 56) = 0u;
            *(_OWORD *)(v149 + 72) = 0u;
            *(_OWORD *)(v149 + 88) = 0u;
            *(_OWORD *)(v149 + 104) = 0u;
            *(_OWORD *)(v149 + 120) = 0u;
            *((_QWORD *)v149 + 17) = 0;
            if ((v152 & 1) == 0)
            {
              v151 = 0uLL;
              if (v464)
              {
                v465 = operator new();
                *(_QWORD *)(v465 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v465 + 24) = "VectorKitLabels";
                *(_OWORD *)(v465 + 32) = v617;
                *(_QWORD *)v465 = &off_1E42B5668;
                *(_QWORD *)(v465 + 8) = "VectorKitLabels";
                *(_OWORD *)(v465 + 72) = 0u;
                *(_OWORD *)(v465 + 88) = 0u;
                *(_OWORD *)(v465 + 104) = 0u;
                *(_OWORD *)(v465 + 120) = 0u;
                *(_OWORD *)(v465 + 136) = 0u;
                *(_OWORD *)(v465 + 152) = 0u;
                *(_OWORD *)(v465 + 168) = 0u;
                *(_OWORD *)(v465 + 184) = 0u;
                *(_OWORD *)(v465 + 200) = 0u;
                *(_OWORD *)(v465 + 216) = 0u;
                *(_OWORD *)(v465 + 232) = 0u;
                *(_QWORD *)(v465 + 248) = 0;
                *(_OWORD *)(v465 + 56) = 0u;
                v466 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v465 + 56), 0);
                if ((_DWORD)v466)
                  geo::read_write_lock::logFailure(v466, (uint64_t)"initialization", v467);
                v468 = malloc_create_zone(0, 0);
                *(_QWORD *)(v465 + 48) = v468;
                malloc_set_zone_name(v468, "VectorKitLabels");
                *(_QWORD *)(v465 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v465;
                v151 = 0uLL;
              }
            }
            *((_QWORD *)v149 + 18) = mdm::Allocator::instance(void)::alloc;
            *((_QWORD *)v149 + 19) = 0x100000000;
            *((_QWORD *)v149 + 20) = 0;
            *((_DWORD *)v149 + 42) = 0;
            *((_OWORD *)v149 + 11) = v151;
            *((_OWORD *)v149 + 12) = v151;
            if ((v153 & 1) == 0)
            {
              v151 = 0uLL;
              if (v469)
              {
                v470 = operator new();
                *(_QWORD *)(v470 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v470 + 24) = "VectorKitLabels";
                *(_OWORD *)(v470 + 32) = v617;
                *(_QWORD *)v470 = &off_1E42B5668;
                *(_QWORD *)(v470 + 8) = "VectorKitLabels";
                *(_OWORD *)(v470 + 72) = 0u;
                *(_OWORD *)(v470 + 88) = 0u;
                *(_OWORD *)(v470 + 104) = 0u;
                *(_OWORD *)(v470 + 120) = 0u;
                *(_OWORD *)(v470 + 136) = 0u;
                *(_OWORD *)(v470 + 152) = 0u;
                *(_OWORD *)(v470 + 168) = 0u;
                *(_OWORD *)(v470 + 184) = 0u;
                *(_OWORD *)(v470 + 200) = 0u;
                *(_OWORD *)(v470 + 216) = 0u;
                *(_OWORD *)(v470 + 232) = 0u;
                *(_QWORD *)(v470 + 248) = 0;
                *(_OWORD *)(v470 + 56) = 0u;
                v471 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v470 + 56), 0);
                if ((_DWORD)v471)
                  geo::read_write_lock::logFailure(v471, (uint64_t)"initialization", v472);
                v473 = malloc_create_zone(0, 0);
                *(_QWORD *)(v470 + 48) = v473;
                malloc_set_zone_name(v473, "VectorKitLabels");
                *(_QWORD *)(v470 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v470;
                v151 = 0uLL;
              }
            }
            *((_QWORD *)v149 + 26) = mdm::Allocator::instance(void)::alloc;
            *((_QWORD *)v149 + 3) = &off_1E42A49B0;
            *(_OWORD *)(v149 + 216) = v151;
            *(_OWORD *)(v149 + 232) = v151;
            v154 = v150;
            *((_QWORD *)v149 + 31) = &off_1E42B5170;
            *((_QWORD *)v149 + 32) = v154;
            v623 = v154;
            v155 = operator new();
            *(_QWORD *)(v155 + 112) = 0;
            *(_OWORD *)(v155 + 80) = 0u;
            *(_OWORD *)(v155 + 96) = 0u;
            *(_OWORD *)(v155 + 48) = 0u;
            *(_OWORD *)(v155 + 64) = 0u;
            *(_OWORD *)(v155 + 16) = 0u;
            *(_OWORD *)(v155 + 32) = 0u;
            *(_OWORD *)v155 = 0u;
            md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)v155);
            *(_QWORD *)v155 = &off_1E428B818;
            *(_OWORD *)(v155 + 80) = 0u;
            *(_OWORD *)(v155 + 96) = 0u;
            *(_DWORD *)(v155 + 112) = 1065353216;
            *((_QWORD *)v149 + 34) = v155;
            v156 = (_QWORD *)operator new();
            *v156 = &off_1E42E6958;
            v156[1] = 0;
            v156[2] = 0;
            v156[3] = v155;
            *((_QWORD *)v149 + 35) = v156;
            *((_QWORD *)v149 + 36) = 0;
            *((_QWORD *)v149 + 37) = 0;
            *((_QWORD *)v149 + 38) = 0;
            v690 = 0u;
            v691 = 0u;
            v692 = 0u;
            v693 = 0u;
            objc_msgSend(v154, "storeFronts");
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            v158 = objc_msgSend(v157, "countByEnumeratingWithState:objects:count:", &v690, buf, 16);
            if (v158)
            {
              v159 = *(_QWORD *)v691;
              v160 = 1;
              do
              {
                for (k = 0; k != v158; ++k)
                {
                  if (*(_QWORD *)v691 != v159)
                    objc_enumerationMutation(v157);
                  v166 = *(void **)(*((_QWORD *)&v690 + 1) + 8 * k);
                  if (v166)
                  {
                    objc_msgSend(*(id *)(*((_QWORD *)&v690 + 1) + 8 * k), "face");
                  }
                  else
                  {
                    memset(v697, 0, sizeof(v697));
                    v695 = 0u;
                    v696 = 0u;
                    v694 = 0u;
                  }
                  objc_msgSend(v166, "bottomCenterPoint");
                  v168 = v167;
                  v170 = v169;
                  v172 = v171;
                  objc_msgSend(v166, "normal");
                  v174 = v173;
                  v176 = v175;
                  v178 = v177;
                  v179 = v694;
                  v180 = v695;
                  v182 = v696;
                  v181 = *(_OWORD *)v697;
                  v183 = *(_OWORD *)&v697[16];
                  v184 = *(_QWORD *)&v697[32];
                  v186 = (int *)*((_QWORD *)v149 + 36);
                  v185 = (int *)*((_QWORD *)v149 + 37);
                  v187 = v186;
                  if (v186 != v185)
                  {
                    v187 = (int *)*((_QWORD *)v149 + 36);
                    while (v160 != *v187)
                    {
                      v187 += 40;
                      if (v187 == v185)
                        goto LABEL_166;
                    }
                  }
                  if (v187 == v185)
                  {
LABEL_166:
                    *(_QWORD *)&v700 = 0;
                    *(_QWORD *)((char *)&v700 + 5) = 0;
                    memset(v689, 0, 40);
                    memset((char *)v702 + 4, 0, 48);
                    v187 = v186;
                    if (v186 != v185)
                    {
                      v187 = v186;
                      while (v160 != *v187)
                      {
                        v187 += 40;
                        if (v187 == v185)
                          goto LABEL_172;
                      }
                    }
                    if (v187 == v185)
                    {
LABEL_172:
                      v188 = *((_QWORD *)v149 + 38);
                      if ((unint64_t)v185 >= v188)
                      {
                        v11 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v185 - (char *)v186) >> 5);
                        v191 = v11 + 1;
                        if (v11 + 1 > 0x199999999999999)
                          abort();
                        v192 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v188 - (_QWORD)v186) >> 5);
                        if (2 * v192 > v191)
                          v191 = 2 * v192;
                        if (v192 >= 0xCCCCCCCCCCCCCCLL)
                          v193 = 0x199999999999999;
                        else
                          v193 = v191;
                        if (v193 > 0x199999999999999)
                          goto LABEL_752;
                        v630 = v696;
                        *(_OWORD *)v631 = *(_OWORD *)&v697[16];
                        v633 = *(_OWORD *)v697;
                        v637 = v695;
                        v644 = v694;
                        v194 = (char *)operator new(160 * v193);
                        v195 = &v194[32 * (((char *)v185 - (char *)v186) >> 5)];
                        *(_DWORD *)v195 = v160;
                        *((_QWORD *)v195 + 2) = 0;
                        *((_QWORD *)v195 + 3) = 0;
                        *((_QWORD *)v195 + 1) = 0;
                        *((_OWORD *)v195 + 2) = *(_OWORD *)((char *)&v689[1] + 8);
                        *((_DWORD *)v195 + 12) = 2139095039;
                        *((_WORD *)v195 + 26) = 0;
                        v195[54] = 0;
                        *((_QWORD *)v195 + 7) = *(_QWORD *)((char *)&v700 + 1);
                        *((_DWORD *)v195 + 16) = *(_DWORD *)((char *)&v700 + 9);
                        *((_QWORD *)v195 + 10) = 0;
                        *((_QWORD *)v195 + 11) = 0;
                        *((_QWORD *)v195 + 9) = 0;
                        v196 = *(_OWORD *)((char *)&v702[3] + 4);
                        *((double *)v195 + 14) = *(double *)((char *)&v702[5] + 4);
                        *((_OWORD *)v195 + 6) = v196;
                        *(_OWORD *)(v195 + 120) = xmmword_19FFB3010;
                        *(_OWORD *)(v195 + 136) = xmmword_19FFB2E00;
                        *((_QWORD *)v195 + 19) = 0xFFEFFFFFFFFFFFFFLL;
                        if (v186 == v185)
                        {
                          v205 = &v194[32 * (((char *)v185 - (char *)v186) >> 5)];
                        }
                        else
                        {
                          v197 = 0;
                          do
                          {
                            v198 = &v195[v197 * 4];
                            *((_DWORD *)v198 - 40) = v185[v197 - 40];
                            v199 = *(_OWORD *)&v185[v197 - 38];
                            *((_QWORD *)v198 - 17) = *(_QWORD *)&v185[v197 - 34];
                            *(_OWORD *)(v198 - 152) = v199;
                            *((_OWORD *)v198 - 8) = *(_OWORD *)&v185[v197 - 32];
                            v200 = v185[v197 - 28];
                            *(_DWORD *)(v198 - 109) = *(int *)((char *)&v185[v197 - 27] - 1);
                            *((_DWORD *)v198 - 28) = v200;
                            v201 = *(_QWORD *)&v185[v197 - 26];
                            *((_DWORD *)v198 - 24) = v185[v197 - 24];
                            *((_QWORD *)v198 - 13) = v201;
                            v202 = *(_OWORD *)&v185[v197 - 22];
                            *((_QWORD *)v198 - 9) = *(_QWORD *)&v185[v197 - 18];
                            *(_OWORD *)(v198 - 88) = v202;
                            v203 = *(_OWORD *)&v185[v197 - 16];
                            *((_QWORD *)v198 - 6) = *(_QWORD *)&v185[v197 - 12];
                            *((_OWORD *)v198 - 4) = v203;
                            *((_QWORD *)v198 - 5) = *(_QWORD *)&v185[v197 - 10];
                            v204 = *(_OWORD *)&v185[v197 - 4];
                            *((_OWORD *)v198 - 2) = *(_OWORD *)&v185[v197 - 8];
                            *((_OWORD *)v198 - 1) = v204;
                            v197 -= 40;
                          }
                          while (&v185[v197] != v186);
                          v205 = &v195[v197 * 4];
                          v186 = (int *)*((_QWORD *)v149 + 36);
                        }
                        v206 = &v194[160 * v193];
                        v190 = v195 + 160;
                        *((_QWORD *)v149 + 36) = v205;
                        *((_QWORD *)v149 + 37) = v195 + 160;
                        *((_QWORD *)v149 + 38) = v206;
                        if (v186)
                          operator delete(v186);
                        v179 = v644;
                        v181 = v633;
                        v180 = v637;
                        v182 = v630;
                        v183 = *(_OWORD *)v631;
                      }
                      else
                      {
                        *v185 = v160;
                        *((_QWORD *)v185 + 2) = 0;
                        *((_QWORD *)v185 + 3) = 0;
                        *((_QWORD *)v185 + 1) = 0;
                        *((_OWORD *)v185 + 2) = *(_OWORD *)((char *)&v689[1] + 8);
                        v185[12] = 2139095039;
                        *((_WORD *)v185 + 26) = 0;
                        *((_BYTE *)v185 + 54) = 0;
                        *((_QWORD *)v185 + 7) = *(_QWORD *)((char *)&v700 + 1);
                        v185[16] = *(_DWORD *)((char *)&v700 + 9);
                        *((_QWORD *)v185 + 10) = 0;
                        *((_QWORD *)v185 + 11) = 0;
                        *((_QWORD *)v185 + 9) = 0;
                        v189 = *(_OWORD *)((char *)&v702[3] + 4);
                        *((double *)v185 + 14) = *(double *)((char *)&v702[5] + 4);
                        *((_OWORD *)v185 + 6) = v189;
                        *(_OWORD *)(v185 + 30) = xmmword_19FFB3010;
                        *(_OWORD *)(v185 + 34) = xmmword_19FFB2E00;
                        v190 = (char *)(v185 + 40);
                        *((_QWORD *)v185 + 19) = 0xFFEFFFFFFFFFFFFFLL;
                      }
                      *((_QWORD *)v149 + 37) = v190;
                      v187 = (int *)(v190 - 160);
                    }
                  }
                  v162 = v172 * 40075017.0;
                  v163 = v178;
                  *((_QWORD *)v187 + 1) = 0;
                  *((_QWORD *)v187 + 2) = 0;
                  v164 = v176;
                  *((_QWORD *)v187 + 3) = 0;
                  v165 = v174;
                  *((_QWORD *)v187 + 4) = v168;
                  *((_QWORD *)v187 + 5) = v170;
                  *((float *)v187 + 12) = v162;
                  *((_WORD *)v187 + 26) = 256;
                  *((_BYTE *)v187 + 54) = 1;
                  *((float *)v187 + 14) = v165;
                  *((float *)v187 + 15) = v164;
                  *((float *)v187 + 16) = v163;
                  *(_OWORD *)(v187 + 26) = v182;
                  *(_OWORD *)(v187 + 18) = v179;
                  *(_OWORD *)(v187 + 22) = v180;
                  *(_OWORD *)(v187 + 30) = v181;
                  *(_OWORD *)(v187 + 34) = v183;
                  *((_QWORD *)v187 + 19) = v184;
                  ++v160;
                }
                v158 = objc_msgSend(v157, "countByEnumeratingWithState:objects:count:", &v690, buf, 16);
              }
              while (v158);
            }

            v649 = v149 + 24;
            v650 = *(double *)&v149;
            goto LABEL_435;
          }
          v277 = operator new(0x318uLL);
          v277[1] = 0;
          v277[2] = 0;
          v645 = v277;
          *v277 = &off_1E42DDB28;
          v638 = *(_QWORD *)a1;
          v278 = v622;
          v11 = (unint64_t)v278;
          v279 = (std::__shared_weak_count *)operator new(0x40uLL);
          v279->__shared_owners_ = 0;
          v280 = (unint64_t *)&v279->__shared_owners_;
          v279->__shared_weak_owners_ = 0;
          v279->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
          v279[1].std::__shared_count = 0u;
          v281 = (void **)&v279[1].__vftable;
          *(_OWORD *)&v279[1].__shared_weak_owners_ = 0u;
          *(_DWORD *)((char *)&v279[2].__vftable + 7) = 0;
          v282 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
          v279[1].__vftable = v282;
          if (v282)
          {
            *(_QWORD *)&v283 = -1;
            *((_QWORD *)&v283 + 1) = -1;
            *(_OWORD *)&v282[5].__get_deleter = v283;
            *(_OWORD *)&v282[6].~__shared_weak_count = v283;
            *(_OWORD *)&v282[4].__on_zero_shared_weak = v283;
            *(_OWORD *)&v282[5].~__shared_weak_count_0 = v283;
            *(_OWORD *)&v282[4].~__shared_weak_count = v283;
            *(_OWORD *)&v282[4].__on_zero_shared = v283;
            *(_OWORD *)&v282[3].~__shared_weak_count_0 = v283;
            *(_OWORD *)&v282[3].__get_deleter = v283;
            *(_OWORD *)&v282[2].__on_zero_shared = v283;
            *(_OWORD *)&v282[2].__on_zero_shared_weak = v283;
            *(_OWORD *)&v282[1].__get_deleter = v283;
            *(_OWORD *)&v282[2].~__shared_weak_count = v283;
            *(_OWORD *)&v282->__on_zero_shared_weak = v283;
            *(_OWORD *)&v282[1].~__shared_weak_count_0 = v283;
            *(_OWORD *)&v282->~__shared_weak_count = v283;
            *(_OWORD *)&v282->__on_zero_shared = v283;
          }
          objc_msgSend(v278, "styleAttributes");
          v284 = (void *)objc_claimAutoreleasedReturnValue();
          v285 = objc_msgSend(v284, "v");
          objc_msgSend(v278, "styleAttributes");
          v286 = (void *)objc_claimAutoreleasedReturnValue();
          v287 = objc_msgSend(v286, "countAttrs");
          if (v287)
          {
            v288 = 0;
            v289 = 0;
            v290 = v287;
            v291 = BYTE1(v279[2].__shared_owners_);
            while (1)
            {
              v292 = v291;
              v293 = *v281;
              if (v291)
                break;
LABEL_308:
              v293[v292] = *(_QWORD *)(v285 + 8 * v288);
              v291 = BYTE1(v279[2].__shared_owners_) + 1;
              BYTE1(v279[2].__shared_owners_) = v291;
              ++v288;
              v289 = 1;
              if (v288 == v290)
              {
                v293 = *v281;
                v292 = v291;
LABEL_363:
                qsort(v293, v292, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                goto LABEL_364;
              }
            }
            if (v291 > 0x1Fu)
            {
              do
              {
                v297 = 0;
                v298 = (int *)v293;
                while (1)
                {
                  v299 = *v298;
                  v298 += 2;
                  if (v299 == *(_DWORD *)(v285 + 8 * v288))
                    break;
                  if (v292 == ++v297)
                    goto LABEL_319;
                }
                HIDWORD(v293[v297]) = *(_DWORD *)(v285 + 8 * v288 + 4);
LABEL_319:
                ++v288;
              }
              while (v288 != v290);
            }
            else
            {
              do
              {
                v294 = 0;
                v295 = (int *)v293;
                while (1)
                {
                  v296 = *v295;
                  v295 += 2;
                  if (v296 == *(_DWORD *)(v285 + 8 * v288))
                    break;
                  if (v292 == ++v294)
                    goto LABEL_308;
                }
                HIDWORD(v293[v294]) = *(_DWORD *)(v285 + 8 * v288++ + 4);
              }
              while (v288 != v290);
            }
            if ((v289 & 1) != 0)
              goto LABEL_363;
          }
LABEL_364:

          v332 = operator new(0x1D8uLL);
          v332[2] = 0;
          *v332 = &off_1E42DD188;
          v332[1] = 0;
          *(_QWORD *)&v689[0] = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)(v332 + 3));
          *((_QWORD *)&v689[0] + 1) = v332;
          objc_msgSend(v278, "storeFronts");
          v333 = (void *)objc_claimAutoreleasedReturnValue();
          v334 = objc_msgSend(v333, "count") == 0;

          if (!v334)
          {
            v332[5] = 0;
            do
              v335 = __ldxr(v280);
            while (__stxr(v335 + 1, v280));
            do
              v336 = __ldxr(v280);
            while (__stxr(v336 + 1, v280));
            v337 = (std::__shared_weak_count *)v332[8];
            v332[7] = v281;
            v332[8] = v279;
            if (v337)
            {
              v338 = (unint64_t *)&v337->__shared_owners_;
              do
                v339 = __ldaxr(v338);
              while (__stlxr(v339 - 1, v338));
              if (!v339)
              {
                ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                std::__shared_weak_count::__release_weak(v337);
              }
            }
            do
              v340 = __ldaxr(v280);
            while (__stlxr(v340 - 1, v280));
            if (!v340)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
            v690 = 0uLL;
            *(_QWORD *)&v691 = 0;
            WORD4(v691) = 1;
            BYTE10(v691) = 0;
            v341 = (char *)operator new(5uLL);
            *(_WORD *)v341 = 5;
            v341[2] = 0;
            *(_WORD *)(v341 + 3) = 8;
            *(_QWORD *)&v691 = v341 + 5;
            *(_QWORD *)&v690 = v341;
            *((_QWORD *)&v690 + 1) = v341 + 5;
            v342 = *(_QWORD **)&v689[0];
            v343 = *(_QWORD *)(*(_QWORD *)&v689[0] + 384);
            if (v343 >= *(_QWORD *)(*(_QWORD *)&v689[0] + 392))
            {
              v345 = std::vector<md::LabelFeaturePlacementInfo>::__emplace_back_slow_path<md::LabelFeaturePlacementInfo const&>((_QWORD *)(*(_QWORD *)&v689[0] + 376), (uint64_t)&v690);
            }
            else
            {
              *(_QWORD *)v343 = 0;
              *(_QWORD *)(v343 + 8) = 0;
              *(_QWORD *)(v343 + 16) = 0;
              v344 = (char *)operator new(5uLL);
              *(_QWORD *)(v343 + 8) = v344 + 5;
              *(_QWORD *)(v343 + 16) = v344 + 5;
              *(_WORD *)v344 = 5;
              v344[2] = 0;
              *(_WORD *)(v344 + 3) = 8;
              *(_QWORD *)v343 = v344;
              *(_BYTE *)(v343 + 26) = BYTE10(v691);
              *(_WORD *)(v343 + 24) = WORD4(v691);
              v345 = (char *)(v343 + 32);
              v342[48] = v343 + 32;
            }
            v342[48] = v345;
            v694 = 0u;
            v695 = 0u;
            v696 = 0u;
            *(_OWORD *)v697 = 0u;
            objc_msgSend((id)v11, "storeFronts");
            v346 = (void *)objc_claimAutoreleasedReturnValue();
            v347 = objc_msgSend(v346, "countByEnumeratingWithState:objects:count:", &v694, buf, 16);
            if (v347)
            {
              v348 = *(_QWORD *)v695;
              do
              {
                for (m = 0; m != v347; ++m)
                {
                  if (*(_QWORD *)v695 != v348)
                    objc_enumerationMutation(v346);
                  v350 = *(void **)(*((_QWORD *)&v694 + 1) + 8 * m);
                  if (v350)
                    objc_msgSend(v350, "bottomCenterCoordinate");
                  else
                    memset(v702, 0, 24);
                  md::LabelExternalPointFeature::addLocation(v342, v702);
                }
                v347 = objc_msgSend(v346, "countByEnumeratingWithState:objects:count:", &v694, buf, 16);
              }
              while (v347);
            }

            operator delete(v341);
          }
          do
            v351 = __ldaxr(v280);
          while (__stlxr(v351 - 1, v280));
          if (!v351)
          {
            ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
            std::__shared_weak_count::__release_weak(v279);
          }

          md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v645 + 3), (uint64_t *)v689, 0, v638);
          v645[3] = &off_1E429DB28;
          v645[87] = 0;
          v645[89] = 0;
          v645[88] = 0;
          v352 = (std::__shared_weak_count *)*((_QWORD *)&v689[0] + 1);
          if (*((_QWORD *)&v689[0] + 1))
          {
            v353 = (unint64_t *)(*((_QWORD *)&v689[0] + 1) + 8);
            do
              v354 = __ldaxr(v353);
            while (__stlxr(v354 - 1, v353));
            if (!v354)
            {
              ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
              std::__shared_weak_count::__release_weak(v352);
            }
          }
          v634 = v645 + 87;
          v645[3] = &off_1E42A85F0;
          v355 = (id)v11;
          v645[90] = &off_1E42B5170;
          v645[91] = v355;
          *((_BYTE *)v645 + 744) = 0;
          *(_OWORD *)(v645 + 95) = 0u;
          v645[94] = v645 + 95;
          v624 = v355;
          v356 = operator new();
          *(_QWORD *)(v356 + 112) = 0;
          *(_OWORD *)(v356 + 80) = 0u;
          *(_OWORD *)(v356 + 96) = 0u;
          *(_OWORD *)(v356 + 48) = 0u;
          *(_OWORD *)(v356 + 64) = 0u;
          *(_OWORD *)(v356 + 16) = 0u;
          *(_OWORD *)(v356 + 32) = 0u;
          *(_OWORD *)v356 = 0u;
          md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)v356);
          *(_QWORD *)v356 = &off_1E428B900;
          *(_OWORD *)(v356 + 80) = 0u;
          *(_OWORD *)(v356 + 96) = 0u;
          *(_DWORD *)(v356 + 112) = 1065353216;
          v645[97] = v356;
          v357 = (_QWORD *)operator new();
          *v357 = &off_1E42E6A38;
          v357[1] = 0;
          v357[2] = 0;
          v357[3] = v356;
          v645[98] = v357;
          v690 = 0u;
          v691 = 0u;
          v692 = 0u;
          v693 = 0u;
          objc_msgSend(v355, "storeFronts");
          v358 = (void *)objc_claimAutoreleasedReturnValue();
          v359 = objc_msgSend(v358, "countByEnumeratingWithState:objects:count:", &v690, buf, 16);
          if (!v359)
          {
LABEL_434:

            v649 = (char *)(v645 + 3);
            v650 = *(double *)&v645;
LABEL_435:
            v147 = 1;
            goto LABEL_436;
          }
          v360 = *(_QWORD *)v691;
          while (2)
          {
            v361 = 0;
            v639 = v359;
LABEL_403:
            if (*(_QWORD *)v691 != v360)
              objc_enumerationMutation(v358);
            v363 = *(void **)(*((_QWORD *)&v690 + 1) + 8 * v361);
            v364 = (char *)operator new(0xC0uLL);
            *((_QWORD *)v364 + 1) = 0;
            *((_QWORD *)v364 + 2) = 0;
            *(_QWORD *)v364 = &off_1E42DC008;
            v365 = v363;
            v366 = v365;
            if (v365)
            {
              objc_msgSend(v365, "face");
              v367 = *((_QWORD *)&v694 + 1);
              v368 = v694;
              v370 = *((double *)&v695 + 1);
              v369 = *(double *)&v695;
              v371 = *((double *)&v696 + 1);
              v372 = *(double *)&v696;
              v373 = *(double *)v697;
              v374 = *(float64x2_t *)&v697[24];
              v375 = *(double *)&v697[32] - *(double *)&v697[16];
            }
            else
            {
              v373 = 0.0;
              v374 = 0uLL;
              memset(v697, 0, sizeof(v697));
              v371 = 0.0;
              v372 = 0.0;
              v370 = 0.0;
              v695 = 0u;
              v696 = 0u;
              v369 = 0.0;
              v367 = 0;
              v368 = 0;
              v375 = 0.0;
              v694 = 0u;
            }
            *((_QWORD *)v364 + 3) = v368;
            *((_QWORD *)v364 + 4) = v367;
            v376 = v372 + v372;
            v377 = (v372 + v372) * v372;
            v378 = (v371 + v371) * v371;
            v379 = v370 + v370;
            v380 = (v370 + v370) * v372;
            v381 = (v371 + v371) * v373;
            v382 = v380 - v381;
            v383 = v371 * (v370 + v370);
            v384 = v373 * v376;
            v385 = v373 * v376 + v383;
            v386 = v381 + v380;
            v39 = 1.0;
            v387 = 1.0 - (v370 + v370) * v370;
            v388 = v387 - v378;
            v389 = v376 * v371;
            v390 = v373 * v379;
            v391 = v389 - v390;
            v392 = v390 + v389;
            v393 = v387 - v377;
            *(float *)&v387 = 1.0 - (v377 + v378);
            *(float *)&v386 = v386;
            *(float *)&v377 = v383 - v384;
            *(float *)&v378 = v382;
            *(float *)&v388 = v388;
            *(float *)&v392 = v392;
            v394 = v385;
            *(float *)&v391 = v391;
            *(float *)&v393 = v393;
            *((_DWORD *)v364 + 18) = LODWORD(v387);
            *((_DWORD *)v364 + 19) = LODWORD(v386);
            *((_DWORD *)v364 + 20) = LODWORD(v377);
            *((_DWORD *)v364 + 21) = LODWORD(v378);
            *((_DWORD *)v364 + 22) = LODWORD(v388);
            *((_DWORD *)v364 + 23) = LODWORD(v392);
            *((float *)v364 + 24) = v394;
            *((_DWORD *)v364 + 25) = LODWORD(v391);
            *((_DWORD *)v364 + 26) = LODWORD(v393);
            v395 = v369 + v375 * -0.5;
            *((double *)v364 + 5) = v369;
            *((_QWORD *)v364 + 6) = v368;
            *((_QWORD *)v364 + 7) = v367;
            *((double *)v364 + 8) = v395;
            v396 = v395 * 40075017.0;
            *((_QWORD *)v364 + 16) = 0;
            *((_QWORD *)v364 + 17) = 0;
            *((_QWORD *)v364 + 15) = 0;
            *((_QWORD *)v364 + 18) = v368;
            *((_QWORD *)v364 + 19) = v367;
            *((float *)v364 + 40) = v396;
            *((_WORD *)v364 + 82) = 256;
            v364[166] = 1;
            *(float32x2_t *)(v364 + 108) = vcvt_f32_f64(vsubq_f64(v374, *(float64x2_t *)&v697[8]));
            *((_QWORD *)v364 + 21) = &off_1E42B5250;
            *((_QWORD *)v364 + 22) = v366;

            v397 = v645;
            v398 = (_QWORD *)v645[88];
            v399 = v645[89];
            if ((unint64_t)v398 < v399)
            {
              *v398 = v364 + 24;
              v398[1] = v364;
              v362 = v398 + 2;
              goto LABEL_402;
            }
            v11 = *v634;
            v400 = (uint64_t)((uint64_t)v398 - *v634) >> 4;
            v401 = v400 + 1;
            if ((unint64_t)(v400 + 1) >> 60)
              abort();
            v402 = v360;
            v403 = v358;
            v404 = v399 - v11;
            if (v404 >> 3 > v401)
              v401 = v404 >> 3;
            if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF0)
              v405 = 0xFFFFFFFFFFFFFFFLL;
            else
              v405 = v401;
            if (v405 >> 60)
LABEL_752:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v406 = (char *)operator new(16 * v405);
            *(_QWORD *)&v407 = v364 + 24;
            *((_QWORD *)&v407 + 1) = v364;
            v408 = &v406[16 * v400];
            v409 = &v406[16 * v405];
            *(_OWORD *)v408 = v407;
            v362 = v408 + 16;
            if (v398 == (_QWORD *)v11)
            {
              v397 = v645;
              v645[87] = v408;
              v645[88] = v362;
              v645[89] = v409;
              v358 = v403;
              v360 = v402;
              v359 = v639;
              if (!v398)
                goto LABEL_402;
            }
            else
            {
              v358 = v403;
              do
              {
                v410 = *((_OWORD *)v398 - 1);
                v398 -= 2;
                *((_OWORD *)v408 - 1) = v410;
                v408 -= 16;
                *v398 = 0;
                v398[1] = 0;
              }
              while (v398 != (_QWORD *)v11);
              v398 = (_QWORD *)v645[87];
              v11 = v645[88];
              v645[87] = v408;
              v645[88] = v362;
              v645[89] = v409;
              v360 = v402;
              if ((_QWORD *)v11 == v398)
              {
                v397 = v645;
                v359 = v639;
                if (!v398)
                  goto LABEL_402;
              }
              else
              {
                v359 = v639;
                do
                {
                  v411 = *(std::__shared_weak_count **)(v11 - 8);
                  if (v411)
                  {
                    v412 = (unint64_t *)&v411->__shared_owners_;
                    do
                      v413 = __ldaxr(v412);
                    while (__stlxr(v413 - 1, v412));
                    if (!v413)
                    {
                      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                      std::__shared_weak_count::__release_weak(v411);
                    }
                  }
                  v11 -= 16;
                }
                while ((_QWORD *)v11 != v398);
                v397 = v645;
                if (!v398)
                {
LABEL_402:
                  v397[88] = v362;
                  if (++v361 == v359)
                  {
                    v359 = objc_msgSend(v358, "countByEnumeratingWithState:objects:count:", &v690, buf, 16);
                    if (!v359)
                      goto LABEL_434;
                    continue;
                  }
                  goto LABEL_403;
                }
              }
            }
            break;
          }
          operator delete(v398);
          goto LABEL_402;
        }
        v69 = v641;
        if (v44 == v43)
        {
          v70 = 0;
          v700 = 0uLL;
        }
        else
        {
          v70 = v44[1];
          v11 = v44[2];
          *(_QWORD *)&v700 = v70;
          *((_QWORD *)&v700 + 1) = v11;
          if (v11)
          {
            v71 = (unint64_t *)(v11 + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
            do
              v73 = __ldxr(v71);
            while (__stxr(v73 + 1, v71));
            v74 = 0;
            goto LABEL_81;
          }
        }
        v11 = 0;
        v74 = 1;
LABEL_81:
        v98 = v69;
        v99 = v98;
        v647 = 0;
        v648 = 0;
        if (v98)
        {
          objc_msgSend(v98, "coordinate");
          v100 = v702[0];
          v101 = v702[1];
          v102 = v702[2];
        }
        else
        {
          memset(v702, 0, 24);
          v102 = 0.0;
          v101 = 0.0;
          v100 = 0.0;
        }
        v628 = v40;
        v103 = v101 * 0.0174532925;
        v104 = __sincos_stret(v100 * 0.0174532925);
        v105 = 6378137.0 / sqrt(v39 + v104.__sinval * v104.__sinval * -0.00669437999);
        v106 = __sincos_stret(v103);
        v107 = sqrt((v620 - (v105 + v102) * v104.__cosval * v106.__cosval)* (v620 - (v105 + v102) * v104.__cosval * v106.__cosval)+ (v619 - (v105 + v102) * v104.__cosval * v106.__sinval)* (v619 - (v105 + v102) * v104.__cosval * v106.__sinval)+ (v618 - (v102 + v105 * 0.99330562) * v104.__sinval)* (v618 - (v102 + v105 * 0.99330562) * v104.__sinval));
        v108 = *(double *)(a1 + 16);
        if (v70)
        {
          v109 = *(_BYTE *)(v70 + 776) != 0;
          if (*(_BYTE *)(v70 + 776))
            v110 = 0;
          else
            v110 = v107 <= v108;
        }
        else
        {
          v109 = 0;
          v110 = 0;
        }
        if (v70)
          v111 = v625 == 0;
        else
          v111 = 0;
        v112 = !v111 || v110;
        if (*(_BYTE *)(a1 + 9))
          v113 = v112;
        else
          v113 = 0;
        if (v107 > v108)
          v113 = 0;
        v643 = v113;
        if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
        v114 = GEOGetVectorKitARWalkingSupportLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
        {
          v115 = *(unsigned __int8 *)(a1 + 9);
          *(_DWORD *)buf = 134219776;
          *(double *)&buf[4] = v107;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v115;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v107 <= v108;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v109;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&buf[32] = v110;
          *(_WORD *)&buf[36] = 1024;
          *(_DWORD *)&buf[38] = v112;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = v70 != 0;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v643;
          _os_log_impl(&dword_19F029000, v114, OS_LOG_TYPE_INFO, "Incoming Maneuver feature - distance:%f shouldUseHighPrecisionAltitude:%d featureWithinHighPrecisionThreshold:%d alreadyHasHighPrecisionAltitude:%d shouldRebuildExistingFeatureForUpdatedAltitude:%d shouldBuildNewFeature:%d hasExistingLabelFeature:%d shouldRequestHighPrecisionAltitude:%d", buf, 0x36u);
          v116 = GEOGetVectorKitARWalkingSupportLog(void)::onceToken == -1;
          if (!v112)
            goto LABEL_104;
        }
        else
        {
          v116 = 1;
          if (!v112)
          {
LABEL_104:
            if (!v116)
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
            v117 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v99;
              _os_log_impl(&dword_19F029000, v117, OS_LOG_TYPE_INFO, "Reusing previous Maneuver LabelFeature for external feature %@", buf, 0xCu);
            }
            if (v11)
            {
              v118 = (unint64_t *)(v11 + 8);
              do
                v119 = __ldxr(v118);
              while (__stxr(v119 + 1, v118));
            }
            v647 = v70;
            v648 = (std::__shared_weak_count *)v11;
            v120 = v99;
            v121 = v120;
            if (v99)
              v122 = v120;
            v123 = *(void **)(v70 + 680);
            *(_QWORD *)(v70 + 680) = v121;

            goto LABEL_252;
          }
        }
        if (!v116)
          dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
        v124 = GEOGetVectorKitARWalkingSupportLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v99;
          _os_log_impl(&dword_19F029000, v124, OS_LOG_TYPE_INFO, "Building Maneuver LabelFeature for %@", buf, 0xCu);
        }
        v125 = (char *)operator new(0x360uLL);
        *((_QWORD *)v125 + 1) = 0;
        *((_QWORD *)v125 + 2) = 0;
        *(_QWORD *)v125 = &off_1E42DD930;
        v126 = *(_QWORD *)a1;
        v632 = *(unsigned __int8 *)(a1 + 11);
        v636 = v99;
        memset(buf, 0, 24);
        v629 = v74;
        {
          v455 = operator new();
          *(_QWORD *)(v455 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v455 + 24) = "VectorKitLabels";
          *(_OWORD *)(v455 + 32) = v617;
          *(_QWORD *)v455 = &off_1E42B5668;
          *(_QWORD *)(v455 + 8) = "VectorKitLabels";
          *(_OWORD *)(v455 + 72) = 0u;
          *(_OWORD *)(v455 + 88) = 0u;
          *(_OWORD *)(v455 + 104) = 0u;
          *(_OWORD *)(v455 + 120) = 0u;
          *(_OWORD *)(v455 + 136) = 0u;
          *(_OWORD *)(v455 + 152) = 0u;
          *(_OWORD *)(v455 + 168) = 0u;
          *(_OWORD *)(v455 + 184) = 0u;
          *(_OWORD *)(v455 + 200) = 0u;
          *(_OWORD *)(v455 + 216) = 0u;
          *(_OWORD *)(v455 + 232) = 0u;
          *(_QWORD *)(v455 + 248) = 0;
          *(_OWORD *)(v455 + 56) = 0u;
          v456 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v455 + 56), 0);
          if ((_DWORD)v456)
            geo::read_write_lock::logFailure(v456, (uint64_t)"initialization", v457);
          v458 = malloc_create_zone(0, 0);
          *(_QWORD *)(v455 + 48) = v458;
          malloc_set_zone_name(v458, "VectorKitLabels");
          *(_QWORD *)(v455 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v455;
        }
        *(_QWORD *)&buf[24] = mdm::Allocator::instance(void)::alloc;
        md::ARWalkingManeuverLabelFeature::attributesForFeature((uint64_t)buf, 0);
        v128 = (std::__shared_weak_count *)operator new(0x40uLL);
        v128->__shared_owners_ = 0;
        v129 = (unint64_t *)&v128->__shared_owners_;
        v128->__shared_weak_owners_ = 0;
        v128->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
        v128[1].std::__shared_count = 0u;
        v130 = (void **)&v128[1].__vftable;
        *(_OWORD *)&v128[1].__shared_weak_owners_ = 0u;
        *(_DWORD *)((char *)&v128[2].__vftable + 7) = 0;
        v131 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
        v128[1].__vftable = v131;
        if (v131)
        {
          *(_QWORD *)&v132 = -1;
          *((_QWORD *)&v132 + 1) = -1;
          *(_OWORD *)&v131[5].__get_deleter = v132;
          *(_OWORD *)&v131[6].~__shared_weak_count = v132;
          *(_OWORD *)&v131[4].__on_zero_shared_weak = v132;
          *(_OWORD *)&v131[5].~__shared_weak_count_0 = v132;
          *(_OWORD *)&v131[4].~__shared_weak_count = v132;
          *(_OWORD *)&v131[4].__on_zero_shared = v132;
          *(_OWORD *)&v131[3].~__shared_weak_count_0 = v132;
          *(_OWORD *)&v131[3].__get_deleter = v132;
          *(_OWORD *)&v131[2].__on_zero_shared = v132;
          *(_OWORD *)&v131[2].__on_zero_shared_weak = v132;
          *(_OWORD *)&v131[1].__get_deleter = v132;
          *(_OWORD *)&v131[2].~__shared_weak_count = v132;
          *(_OWORD *)&v131->__on_zero_shared_weak = v132;
          *(_OWORD *)&v131[1].~__shared_weak_count_0 = v132;
          *(_OWORD *)&v131->~__shared_weak_count = v132;
          *(_OWORD *)&v131->__on_zero_shared = v132;
        }
        v133 = *(_QWORD *)buf;
        if (((*(_QWORD *)&buf[8] - *(_QWORD *)buf) & 0x7FFFFFFF8) != 0)
        {
          v134 = 0;
          v135 = 0;
          v136 = ((*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
          v137 = BYTE1(v128[2].__shared_owners_);
          while (1)
          {
            v138 = v137;
            v139 = *v130;
            if (v137)
              break;
LABEL_124:
            v139[v138] = *(_QWORD *)(v133 + 8 * v134);
            v137 = BYTE1(v128[2].__shared_owners_) + 1;
            BYTE1(v128[2].__shared_owners_) = v137;
            ++v134;
            v135 = 1;
            if (v134 == v136)
            {
              v139 = *v130;
              v138 = v137;
LABEL_193:
              qsort(v139, v138, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
              goto LABEL_194;
            }
          }
          if (v137 > 0x1Fu)
          {
            do
            {
              v143 = 0;
              v144 = (int *)v139;
              while (1)
              {
                v145 = *v144;
                v144 += 2;
                if (v145 == *(_DWORD *)(v133 + 8 * v134))
                  break;
                if (v138 == ++v143)
                  goto LABEL_135;
              }
              HIDWORD(v139[v143]) = *(_DWORD *)(v133 + 8 * v134 + 4);
LABEL_135:
              ++v134;
            }
            while (v134 != v136);
          }
          else
          {
            do
            {
              v140 = 0;
              v141 = (int *)v139;
              while (1)
              {
                v142 = *v141;
                v141 += 2;
                if (v142 == *(_DWORD *)(v133 + 8 * v134))
                  break;
                if (v138 == ++v140)
                  goto LABEL_124;
              }
              HIDWORD(v139[v140]) = *(_DWORD *)(v133 + 8 * v134++ + 4);
            }
            while (v134 != v136);
          }
          if ((v135 & 1) != 0)
            goto LABEL_193;
        }
LABEL_194:
        v207 = operator new(0x1D8uLL);
        v207[2] = 0;
        *v207 = &off_1E42DD188;
        v207[1] = 0;
        *(_QWORD *)&v689[0] = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)(v207 + 3));
        *((_QWORD *)&v689[0] + 1) = v207;
        v207[5] = 0;
        do
          v208 = __ldxr(v129);
        while (__stxr(v208 + 1, v129));
        do
          v209 = __ldxr(v129);
        while (__stxr(v209 + 1, v129));
        v210 = (std::__shared_weak_count *)v207[8];
        v207[7] = v130;
        v207[8] = v128;
        if (v210)
        {
          v211 = (unint64_t *)&v210->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        do
          v213 = __ldaxr(v129);
        while (__stlxr(v213 - 1, v129));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
        v694 = 0uLL;
        *(_QWORD *)&v695 = 0;
        WORD4(v695) = 1;
        BYTE10(v695) = 0;
        v214 = (char *)operator new(5uLL);
        *(_WORD *)v214 = 5;
        v214[2] = 0;
        *(_WORD *)(v214 + 3) = 8;
        *(_QWORD *)&v695 = v214 + 5;
        *(_QWORD *)&v694 = v214;
        *((_QWORD *)&v694 + 1) = v214 + 5;
        v215 = *(_QWORD **)&v689[0];
        v216 = *(_QWORD *)(*(_QWORD *)&v689[0] + 384);
        if (v216 >= *(_QWORD *)(*(_QWORD *)&v689[0] + 392))
        {
          v218 = std::vector<md::LabelFeaturePlacementInfo>::__emplace_back_slow_path<md::LabelFeaturePlacementInfo const&>((_QWORD *)(*(_QWORD *)&v689[0] + 376), (uint64_t)&v694);
        }
        else
        {
          *(_QWORD *)v216 = 0;
          *(_QWORD *)(v216 + 8) = 0;
          *(_QWORD *)(v216 + 16) = 0;
          v217 = (char *)operator new(5uLL);
          *(_QWORD *)(v216 + 8) = v217 + 5;
          *(_QWORD *)(v216 + 16) = v217 + 5;
          *(_WORD *)v217 = 5;
          v217[2] = 0;
          *(_WORD *)(v217 + 3) = 8;
          *(_QWORD *)v216 = v217;
          *(_BYTE *)(v216 + 26) = BYTE10(v695);
          *(_WORD *)(v216 + 24) = WORD4(v695);
          v218 = (char *)(v216 + 32);
          v215[48] = v216 + 32;
        }
        v215[48] = v218;
        if (v99)
        {
          objc_msgSend(v636, "coordinate");
        }
        else
        {
          v690 = 0uLL;
          *(_QWORD *)&v691 = 0;
        }
        md::LabelExternalPointFeature::addLocation(v215, (double *)&v690);
        if (v632)
          md::LabelExternalPointFeature::addLocation(v215, (double *)&v690);
        operator delete(v214);
        do
          v219 = __ldaxr(v129);
        while (__stlxr(v219 - 1, v129));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
        v74 = v629;
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24], *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);

        md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v125 + 24), (uint64_t *)v689, 0, v126);
        v220 = (std::__shared_weak_count *)*((_QWORD *)&v689[0] + 1);
        if (*((_QWORD *)&v689[0] + 1))
        {
          v221 = (unint64_t *)(*((_QWORD *)&v689[0] + 1) + 8);
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
          }
        }
        *((_QWORD *)v125 + 3) = &off_1E42A6758;
        v223 = v636;
        *((_QWORD *)v125 + 87) = &off_1E42B51D0;
        *((_QWORD *)v125 + 88) = v223;
        v224 = v223;
        objc_msgSend(v223, "displayText");
        v225 = (void *)objc_claimAutoreleasedReturnValue();
        if (v225)
        {
          objc_msgSend(v224, "displayText");
          v128 = (std::__shared_weak_count *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v226 = (const char *)-[std::__shared_weak_count UTF8String](v128, "UTF8String");
        }
        else
        {
          v226 = "";
        }
        {
          v460 = operator new();
          *(_QWORD *)(v460 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v460 + 24) = "VectorKitLabels";
          *(_OWORD *)(v460 + 32) = v617;
          *(_QWORD *)v460 = &off_1E42B5668;
          *(_QWORD *)(v460 + 8) = "VectorKitLabels";
          *(_OWORD *)(v460 + 72) = 0u;
          *(_OWORD *)(v460 + 88) = 0u;
          *(_OWORD *)(v460 + 104) = 0u;
          *(_OWORD *)(v460 + 120) = 0u;
          *(_OWORD *)(v460 + 136) = 0u;
          *(_OWORD *)(v460 + 152) = 0u;
          *(_OWORD *)(v460 + 168) = 0u;
          *(_OWORD *)(v460 + 184) = 0u;
          *(_OWORD *)(v460 + 200) = 0u;
          *(_OWORD *)(v460 + 216) = 0u;
          *(_OWORD *)(v460 + 232) = 0u;
          *(_QWORD *)(v460 + 248) = 0;
          *(_OWORD *)(v460 + 56) = 0u;
          v461 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v460 + 56), 0);
          if ((_DWORD)v461)
            geo::read_write_lock::logFailure(v461, (uint64_t)"initialization", v462);
          v463 = malloc_create_zone(0, 0);
          *(_QWORD *)(v460 + 48) = v463;
          malloc_set_zone_name(v463, "VectorKitLabels");
          *(_QWORD *)(v460 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v460;
          v74 = v629;
        }
        v228 = mdm::Allocator::instance(void)::alloc;
        *((_QWORD *)v125 + 93) = mdm::Allocator::instance(void)::alloc;
        v229 = strlen(v226);
        if (v229 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v230 = v229;
        if (v229 >= 0x17)
        {
          v232 = (v229 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v229 | 7) != 0x17)
            v232 = v229 | 7;
          v233 = v232 + 1;
          v231 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v228 + 16))(v228, v232 + 1, 1);
          *((_QWORD *)v125 + 90) = v231;
          *((_QWORD *)v125 + 92) = v233 | 0x8000000000000000;
          *((_QWORD *)v125 + 91) = v230;
          v74 = v629;
        }
        else
        {
          v231 = v125 + 720;
          v125[743] = v229;
          if (!v229)
          {
            *v231 = 0;
            if (!v225)
              goto LABEL_238;
LABEL_237:

            goto LABEL_238;
          }
        }
        memmove(v231, v226, v230);
        v231[v230] = 0;
        if (v225)
          goto LABEL_237;
LABEL_238:

        objc_msgSend(v224, "maneuverHeading");
        v235 = fmod(360.0 - v234, 360.0);
        v236 = fmod(v235 + 360.0, 360.0) * 0.0174532925;
        v237 = __sincosf_stret(v236);
        *((float *)v125 + 188) = -v237.__sinval;
        *((_DWORD *)v125 + 189) = LODWORD(v237.__cosval);
        *((_DWORD *)v125 + 190) = 0;
        v125[764] = 1;
        v238 = 1.0 / sqrtf((float)(v237.__cosval * v237.__cosval) + (float)(v237.__sinval * v237.__sinval));
        *((float *)v125 + 192) = v238 * v237.__cosval;
        *((float *)v125 + 193) = v238 * v237.__sinval;
        *((_DWORD *)v125 + 194) = 0;
        v125[780] = 1;
        v125[784] = 0;
        v125[800] = 0;
        *((_QWORD *)v125 + 101) = objc_msgSend(v224, "routeCoordinate");
        v239 = operator new();
        md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)v239);
        *(_QWORD *)(v239 + 112) = 0;
        *(_OWORD *)(v239 + 80) = 0u;
        *(_OWORD *)(v239 + 96) = 0u;
        *(_DWORD *)(v239 + 120) = 1065353216;
        *(_OWORD *)(v239 + 128) = 0u;
        *(_OWORD *)(v239 + 144) = 0u;
        *(_DWORD *)(v239 + 160) = 1065353216;
        *(_OWORD *)(v239 + 168) = 0u;
        *(_OWORD *)(v239 + 184) = 0u;
        *(_DWORD *)(v239 + 200) = 1065353216;
        *(_OWORD *)(v239 + 208) = 0u;
        *(_OWORD *)(v239 + 224) = 0u;
        *(_DWORD *)(v239 + 240) = 1065353216;
        *(_QWORD *)v239 = &off_1E428B948;
        *((_QWORD *)v125 + 102) = v239;
        v240 = operator new();
        *(_OWORD *)(v240 + 8) = 0u;
        *(_QWORD *)v240 = &off_1E42E6A70;
        *(_QWORD *)(v240 + 24) = v239;
        *((_QWORD *)v125 + 103) = v240;
        v125[832] = v632;
        v125[833] = 0;
        *((_OWORD *)v125 + 53) = 0u;
        *((_QWORD *)v125 + 105) = v125 + 848;
        v241 = (char *)*((_QWORD *)v125 + 60);
        if (v241 != v125 + 488)
        {
          v242 = 0;
          do
          {
            v241[121] = v242;
            v243 = (char *)*((_QWORD *)v241 + 1);
            if (v243)
            {
              do
              {
                v244 = v243;
                v243 = *(char **)v243;
              }
              while (v243);
            }
            else
            {
              do
              {
                v244 = (char *)*((_QWORD *)v241 + 2);
                v111 = *(_QWORD *)v244 == (_QWORD)v241;
                v241 = v244;
              }
              while (!v111);
            }
            ++v242;
            v241 = v244;
          }
          while (v244 != v125 + 488);
        }

        v245 = v648;
        v647 = (unint64_t)(v125 + 24);
        v648 = (std::__shared_weak_count *)v125;
        if (v245)
        {
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
LABEL_252:
        v690 = 0uLL;
        if (!v643)
          goto LABEL_269;
        v248 = *(uint64_t **)(a1 + 776);
        if (v99)
        {
          objc_msgSend(v99, "coordinate");
          v249 = *(_OWORD *)buf;
        }
        else
        {
          memset(buf, 0, 24);
          v249 = 0uLL;
        }
        v694 = v249;
        md::HighPrecisionAltitudeRequestor::requestAltitude(v689, v248, (double *)&v694);
        v251 = (std::__shared_weak_count *)*((_QWORD *)&v689[0] + 1);
        v250 = *(_QWORD *)&v689[0];
        v690 = v689[0];
        if (*(_QWORD *)&v689[0])
        {
          if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
            dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
          v252 = GEOGetVectorKitARWalkingSupportLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v99;
            _os_log_impl(&dword_19F029000, v252, OS_LOG_TYPE_INFO, "Requesting high precision altitude for Maneuver %@", buf, 0xCu);
          }
          v253 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingManeuverLabelFeature> const&>,std::tuple<>>((uint64_t)&v681, v647, &v647);
          if (v251)
          {
            v254 = (unint64_t *)&v251->__shared_owners_;
            do
              v255 = __ldxr(v254);
            while (__stxr(v255 + 1, v254));
          }
          v256 = (std::__shared_weak_count *)v253[5];
          v253[4] = v250;
          v253[5] = v251;
          if (v256)
          {
            v257 = (unint64_t *)&v256->__shared_owners_;
            do
              v258 = __ldaxr(v257);
            while (__stlxr(v258 - 1, v257));
            if (!v258)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v256);
            }
          }
LABEL_269:
          v251 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
        }
        if (v251)
        {
          v259 = (unint64_t *)&v251->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }

        if ((v74 & 1) == 0)
        {
          v261 = (unint64_t *)(v11 + 8);
          do
            v262 = __ldaxr(v261);
          while (__stlxr(v262 - 1, v261));
          if (!v262)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v11 + 16))(v11);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
          }
        }
        v263 = v647;
        v264 = v648;
        if (v647)
          v265 = (_QWORD)v700 == v647;
        else
          v265 = 1;
        v147 = !v265;
        if (v648)
        {
          v266 = (unint64_t *)&v648->__shared_owners_;
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
        }
        v268 = *(std::__shared_weak_count **)&v650;
        v649 = (char *)v263;
        v650 = *(double *)&v264;
        if (!v268)
          goto LABEL_293;
        v269 = (unint64_t *)&v268->__shared_owners_;
        do
          v270 = __ldaxr(v269);
        while (__stlxr(v270 - 1, v269));
        if (!v270)
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
          v271 = v648;
          if (v648)
          {
LABEL_294:
            v272 = (unint64_t *)&v271->__shared_owners_;
            do
              v273 = __ldaxr(v272);
            while (__stlxr(v273 - 1, v272));
            if (!v273)
            {
              ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
              std::__shared_weak_count::__release_weak(v271);
            }
          }
        }
        else
        {
LABEL_293:
          v271 = v648;
          if (v648)
            goto LABEL_294;
        }
        v274 = (std::__shared_weak_count *)*((_QWORD *)&v700 + 1);
        if (*((_QWORD *)&v700 + 1))
        {
          v275 = (unint64_t *)(*((_QWORD *)&v700 + 1) + 8);
          do
            v276 = __ldaxr(v275);
          while (__stlxr(v276 - 1, v275));
          if (!v276)
          {
            ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
            std::__shared_weak_count::__release_weak(v274);
          }
        }
LABEL_436:

        v414 = v649;
        v38 = v626;
        v40 = v628;
        if (!v649)
          goto LABEL_475;
        if (!v147)
          goto LABEL_466;
        v415 = v660;
        if ((unint64_t)v660 >= *((_QWORD *)&v660 + 1))
        {
          v417 = (uint64_t)(v660 - *((_QWORD *)&v659 + 1)) >> 3;
          v418 = v417 + 1;
          if ((unint64_t)(v417 + 1) >> 61)
            abort();
          v419 = *((_QWORD *)&v660 + 1) - *((_QWORD *)&v659 + 1);
          if ((uint64_t)(*((_QWORD *)&v660 + 1) - *((_QWORD *)&v659 + 1)) >> 2 > v418)
            v418 = v419 >> 2;
          if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF8)
            v420 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v420 = v418;
          if (v420)
          {
            v421 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v661 + 16))(v661, 8 * v420, 8);
            v422 = (_QWORD *)(v421 + 8 * v417);
            v423 = v421 + 8 * v420;
            if (v421)
              *v422 = v414;
          }
          else
          {
            v423 = 0;
            v422 = (_QWORD *)(8 * v417);
          }
          v424 = v660;
          v425 = *((_QWORD *)&v659 + 1);
          v426 = v660 - *((_QWORD *)&v659 + 1);
          if ((_QWORD)v660 != *((_QWORD *)&v659 + 1))
          {
            v427 = v426 - 8;
            if ((unint64_t)(v426 - 8) < 0x38)
            {
              v428 = v422;
            }
            else
            {
              v428 = v422;
              if ((_QWORD)v660 - (_QWORD)v422 >= 0x20uLL)
              {
                v429 = (v427 >> 3) + 1;
                v430 = v422 - 2;
                v431 = (__int128 *)(v660 - 16);
                v432 = v429 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v433 = *v431;
                  *(v430 - 1) = *(v431 - 1);
                  *v430 = v433;
                  v430 -= 2;
                  v431 -= 2;
                  v432 -= 4;
                }
                while (v432);
                v428 = &v422[-(v429 & 0x3FFFFFFFFFFFFFFCLL)];
                v424 -= 8 * (v429 & 0x3FFFFFFFFFFFFFFCLL);
                if (v429 == (v429 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_462:
                  v424 = *((_QWORD *)&v659 + 1);
LABEL_463:
                  v416 = v422 + 1;
                  *((_QWORD *)&v659 + 1) = v428;
                  *(_QWORD *)&v660 = v422 + 1;
                  v435 = *((_QWORD *)&v660 + 1);
                  *((_QWORD *)&v660 + 1) = v423;
                  if (v424)
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v661 + 40))(v661, v424, v435 - v424);
                  goto LABEL_465;
                }
              }
            }
            do
            {
              v434 = *(_QWORD *)(v424 - 8);
              v424 -= 8;
              *--v428 = v434;
            }
            while (v424 != v425);
            goto LABEL_462;
          }
          v428 = v422;
          goto LABEL_463;
        }
        if ((_QWORD)v660)
          *(_QWORD *)v660 = v649;
        v416 = (_QWORD *)(v415 + 8);
LABEL_465:
        *(_QWORD *)&v660 = v416;
LABEL_466:
        v436 = geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::operator[]((char **)&v658, &v655);
        v437 = v650;
        if (v650 != 0.0)
        {
          v438 = (unint64_t *)(*(_QWORD *)&v650 + 8);
          do
            v439 = __ldxr(v438);
          while (__stxr(v439 + 1, v438));
        }
        v440 = (std::__shared_weak_count *)*((_QWORD *)v436 + 1);
        *(_QWORD *)v436 = v414;
        *((double *)v436 + 1) = v437;
        if (v440)
        {
          v441 = (unint64_t *)&v440->__shared_owners_;
          do
            v442 = __ldaxr(v441);
          while (__stlxr(v442 - 1, v441));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
            std::__shared_weak_count::__release_weak(v440);
          }
        }
        md::ARWalkingSupport::addLabelFeature(&v649, (uint64_t)&v656);
LABEL_475:
        v443 = *(std::__shared_weak_count **)&v650;
        if (v650 != 0.0)
        {
          v444 = (unint64_t *)(*(_QWORD *)&v650 + 8);
          do
            v445 = __ldaxr(v444);
          while (__stlxr(v445 - 1, v444));
          if (!v445)
          {
            ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
            std::__shared_weak_count::__release_weak(v443);
          }
        }
        ++v40;
      }
      while (v40 != v38);
      v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v651, v701, 16);
    }
    while (v38);
  }

  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
  v474 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v474, OS_LOG_TYPE_INFO))
  {
    v475 = v688;
    v476 = v657;
    objc_msgSend(v476, "features");
    v477 = (void *)objc_claimAutoreleasedReturnValue();
    v478 = objc_msgSend(v477, "count");
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = v475;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v478;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v658 + 1) - v658) >> 3);
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = (v671 - v670) >> 4;
    *(_WORD *)&buf[42] = 2048;
    *(_QWORD *)&buf[44] = (v663 - v662) >> 4;
    *(_WORD *)&buf[52] = 2048;
    *(_QWORD *)v704 = (v667 - v666) >> 4;
    *(_WORD *)&v704[8] = 2048;
    *(_QWORD *)&v704[10] = *((_QWORD *)&v682 + 1);
    v705 = 2048;
    v706 = *((_QWORD *)&v679 + 1);
    _os_log_impl(&dword_19F029000, v474, OS_LOG_TYPE_INFO, "Done preparing FeatureSet(version:%llu) external:%lu internal:%lu (arrival:%lu maneuver:%lu continue:%lu pendingManeuvers:%lu pendingContinues:%lu)", buf, 0x52u);

  }
  if (!*(_BYTE *)(a1 + 432))
    goto LABEL_520;
  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
  v479 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v479, OS_LOG_TYPE_INFO))
  {
    if (!*(_BYTE *)(a1 + 432))
      goto LABEL_775;
    v480 = *(_QWORD *)(a1 + 424);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v480;
    _os_log_impl(&dword_19F029000, v479, OS_LOG_TYPE_INFO, "Dropped PendingFeatureSet(version:%llu)", buf, 0xCu);
  }

  v481 = a1;
  if (*(_BYTE *)(a1 + 432))
  {
    v482 = *(id *)(a1 + 104);
    v483 = v482;
    if (*(_BYTE *)(a1 + 432))
    {
      md::ARWalkingFeatureSet::operator=(a1 + 96, (uint64_t)&v656);
      goto LABEL_719;
    }
    v646 = v482;
  }
  else
  {
LABEL_520:
    v646 = 0;
  }
  *(_QWORD *)(a1 + 96) = &off_1E42B4F50;
  *(_QWORD *)(a1 + 104) = 0;
  v484 = v657;
  v485 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v484;

  v486 = a1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v488 = *((_QWORD *)&v658 + 1);
  v487 = v658;
  v489 = *((_QWORD *)&v658 + 1) - v658;
  if (*((_QWORD *)&v658 + 1) != (_QWORD)v658)
  {
    v490 = 0xAAAAAAAAAAAAAAABLL * (v489 >> 3);
    if (v490 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v491 = operator new(v489);
    *(_QWORD *)(a1 + 120) = v491;
    *(_QWORD *)(a1 + 128) = v491;
    *(_QWORD *)(a1 + 136) = &v491[3 * v490];
    do
    {
      *v491 = *(id *)v487;
      v491[1] = *(_QWORD *)(v487 + 8);
      v492 = *(_QWORD *)(v487 + 16);
      v491[2] = v492;
      if (v492)
      {
        v493 = (unint64_t *)(v492 + 8);
        do
          v494 = __ldxr(v493);
        while (__stxr(v494 + 1, v493));
      }
      v487 += 24;
      v491 += 3;
    }
    while (v487 != v488);
    v486 = a1;
    *(_QWORD *)(a1 + 128) = v491;
  }
  *(_QWORD *)(v486 + 144) = 0;
  *(_QWORD *)(v486 + 152) = 0;
  v495 = v661;
  *(_QWORD *)(v486 + 160) = 0;
  *(_QWORD *)(v486 + 168) = v495;
  v496 = (_QWORD *)*((_QWORD *)&v659 + 1);
  v497 = (_QWORD *)v660;
  v498 = v660 - *((_QWORD *)&v659 + 1);
  if ((_QWORD)v660 != *((_QWORD *)&v659 + 1))
  {
    if (v498 < 0)
      abort();
    v499 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v495 + 16))(v495, v660 - *((_QWORD *)&v659 + 1), 8);
    *(_QWORD *)(a1 + 144) = v499;
    *(_QWORD *)(a1 + 152) = v499;
    *(_QWORD *)(a1 + 160) = &v499[v498 >> 3];
    do
    {
      if (v499)
        *v499 = *v496;
      ++v496;
      ++v499;
    }
    while (v496 != v497);
    v486 = a1;
    *(_QWORD *)(a1 + 152) = v499;
  }
  *(_QWORD *)(v486 + 176) = 0;
  *(_QWORD *)(v486 + 184) = 0;
  v500 = v486 + 176;
  v501 = v665;
  *(_QWORD *)(v486 + 192) = 0;
  *(_QWORD *)(v486 + 200) = v501;
  v502 = v662;
  v503 = v663;
  v504 = v663 - v662;
  if (v663 != v662)
  {
    if (v504 < 0)
      abort();
    v505 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v501 + 16))(v501, v663 - v662, 8);
    *(_QWORD *)(a1 + 176) = v505;
    *(_QWORD *)(a1 + 184) = v505;
    *(_QWORD *)(a1 + 192) = &v505[2 * (v504 >> 4)];
    do
    {
      if (v505)
      {
        *v505 = *(_QWORD *)v502;
        v506 = *((_QWORD *)v502 + 1);
        v505[1] = v506;
        if (v506)
        {
          v507 = (unint64_t *)(v506 + 8);
          do
            v508 = __ldxr(v507);
          while (__stxr(v508 + 1, v507));
        }
      }
      v502 += 16;
      v505 += 2;
    }
    while (v502 != v503);
    v486 = a1;
    *(_QWORD *)(a1 + 184) = v505;
  }
  *(_QWORD *)(v486 + 208) = 0;
  *(_QWORD *)(v486 + 216) = 0;
  v509 = v669;
  *(_QWORD *)(v486 + 224) = 0;
  *(_QWORD *)(v486 + 232) = v509;
  v510 = v666;
  v511 = v667;
  v512 = v667 - v666;
  if (v667 != v666)
  {
    if (v512 < 0)
      abort();
    v513 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v509 + 16))(v509, v667 - v666, 8);
    *(_QWORD *)(a1 + 208) = v513;
    *(_QWORD *)(a1 + 216) = v513;
    *(_QWORD *)(a1 + 224) = &v513[2 * (v512 >> 4)];
    do
    {
      if (v513)
      {
        *v513 = *(_QWORD *)v510;
        v514 = *((_QWORD *)v510 + 1);
        v513[1] = v514;
        if (v514)
        {
          v515 = (unint64_t *)(v514 + 8);
          do
            v516 = __ldxr(v515);
          while (__stxr(v516 + 1, v515));
        }
      }
      v510 += 16;
      v513 += 2;
    }
    while (v510 != v511);
    v486 = a1;
    *(_QWORD *)(a1 + 216) = v513;
  }
  *(_QWORD *)(v486 + 240) = 0;
  *(_QWORD *)(v486 + 248) = 0;
  v517 = v673;
  *(_QWORD *)(v486 + 256) = 0;
  *(_QWORD *)(v486 + 264) = v517;
  v518 = v670;
  v519 = v671;
  v520 = v671 - v670;
  if (v671 != v670)
  {
    if (v520 < 0)
      abort();
    v521 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v517 + 16))(v517, v671 - v670, 8);
    *(_QWORD *)(a1 + 240) = v521;
    *(_QWORD *)(a1 + 248) = v521;
    *(_QWORD *)(a1 + 256) = &v521[2 * (v520 >> 4)];
    do
    {
      if (v521)
      {
        *v521 = *(_QWORD *)v518;
        v522 = *((_QWORD *)v518 + 1);
        v521[1] = v522;
        if (v522)
        {
          v523 = (unint64_t *)(v522 + 8);
          do
            v524 = __ldxr(v523);
          while (__stxr(v524 + 1, v523));
        }
      }
      v518 += 16;
      v521 += 2;
    }
    while (v518 != v519);
    v486 = a1;
    *(_QWORD *)(a1 + 248) = v521;
  }
  *(_QWORD *)(v486 + 272) = 0;
  *(_QWORD *)(v486 + 280) = 0;
  v525 = v677;
  *(_QWORD *)(v486 + 288) = 0;
  *(_QWORD *)(v486 + 296) = v525;
  v526 = v674;
  v527 = v675;
  v528 = (char *)v675 - (char *)v674;
  if (v675 != v674)
  {
    if (v528 < 0)
      abort();
    v529 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v525 + 16))(v525, (char *)v675 - (char *)v674, 8);
    *(_QWORD *)(a1 + 272) = v529;
    *(_QWORD *)(a1 + 280) = v529;
    *(_QWORD *)(a1 + 288) = &v529[2 * (v528 >> 4)];
    do
    {
      if (v529)
      {
        *v529 = *v526;
        v530 = v526[1];
        v529[1] = v530;
        if (v530)
        {
          v531 = (unint64_t *)(v530 + 8);
          do
            v532 = __ldxr(v531);
          while (__stxr(v532 + 1, v531));
        }
      }
      v526 += 2;
      v529 += 2;
    }
    while (v526 != v527);
    v486 = a1;
    *(_QWORD *)(a1 + 280) = v529;
  }
  v533 = (_QWORD *)(v486 + 304);
  *(_OWORD *)(v486 + 304) = 0u;
  *(_OWORD *)(v486 + 320) = 0u;
  *(_DWORD *)(v486 + 336) = v680;
  prime = __n[1];
  if (__n[1] == 1)
  {
    prime = 2;
LABEL_579:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v533, prime);
    goto LABEL_580;
  }
  if ((__n[1] & (__n[1] - 1)) != 0)
  {
    prime = std::__next_prime(__n[1]);
    v602 = *(int8x8_t *)(a1 + 312);
    v603 = prime >= *(_QWORD *)&v602;
    if (prime > *(_QWORD *)&v602)
      goto LABEL_579;
  }
  else
  {
    v602 = 0;
    v603 = 1;
    if (__n[1])
      goto LABEL_579;
  }
  if (!v603)
  {
    v606 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 328) / *(float *)(a1 + 336));
    if (*(_QWORD *)&v602 < 3uLL || (v607 = (uint8x8_t)vcnt_s8(v602), v607.i16[0] = vaddlv_u8(v607), v607.u32[0] > 1uLL))
    {
      v606 = std::__next_prime(v606);
    }
    else
    {
      v608 = 1 << -(char)__clz(v606 - 1);
      if (v606 >= 2)
        v606 = v608;
    }
    if (prime <= v606)
      prime = v606;
    if (prime < *(_QWORD *)&v602)
      goto LABEL_579;
  }
LABEL_580:
  v535 = (_QWORD *)v679;
  if ((_QWORD)v679)
  {
    v536 = (_QWORD *)(a1 + 320);
    do
    {
      v537 = v535[2];
      v538 = 0x9DDFEA08EB382D69 * (((8 * v537) + 8) ^ HIDWORD(v537));
      v539 = 0x9DDFEA08EB382D69 * (HIDWORD(v537) ^ (v538 >> 47) ^ v538);
      v500 = 0x9DDFEA08EB382D69 * (v539 ^ (v539 >> 47));
      v540 = *(_QWORD *)(a1 + 312);
      if (v540)
      {
        v541 = (uint8x8_t)vcnt_s8((int8x8_t)v540);
        v541.i16[0] = vaddlv_u8(v541);
        if (v541.u32[0] > 1uLL)
        {
          v11 = 0x9DDFEA08EB382D69 * (v539 ^ (v539 >> 47));
          if (v500 >= v540)
            v11 = v500 % v540;
        }
        else
        {
          v11 = v500 & (v540 - 1);
        }
        v542 = *(_QWORD **)(*v533 + 8 * v11);
        if (v542)
        {
          v543 = (_QWORD *)*v542;
          if (v543)
          {
            if (v541.u32[0] < 2uLL)
            {
              while (1)
              {
                v545 = v543[1];
                if (v545 == v500)
                {
                  if (v543[2] == v537)
                    goto LABEL_642;
                }
                else if ((v545 & (v540 - 1)) != v11)
                {
                  goto LABEL_602;
                }
                v543 = (_QWORD *)*v543;
                if (!v543)
                  goto LABEL_602;
              }
            }
            do
            {
              v544 = v543[1];
              if (v544 == v500)
              {
                if (v543[2] == v537)
                  goto LABEL_642;
              }
              else
              {
                if (v544 >= v540)
                  v544 %= v540;
                if (v544 != v11)
                  break;
              }
              v543 = (_QWORD *)*v543;
            }
            while (v543);
          }
        }
      }
LABEL_602:
      v546 = operator new(0x48uLL);
      *(_QWORD *)buf = v546;
      *(_QWORD *)&buf[8] = a1 + 320;
      buf[16] = 0;
      *v546 = 0;
      v546[1] = v500;
      v546[2] = v535[2];
      v547 = v535[3];
      v546[3] = v547;
      if (v547)
      {
        v548 = (unint64_t *)(v547 + 8);
        do
          v549 = __ldxr(v548);
        while (__stxr(v549 + 1, v548));
      }
      std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::unordered_map((uint64_t)(v546 + 4), (uint64_t)(v535 + 4));
      buf[16] = 1;
      v550 = (float)(unint64_t)(*(_QWORD *)(a1 + 328) + 1);
      v551 = *(float *)(a1 + 336);
      if (!v540 || (float)(v551 * (float)v540) < v550)
      {
        v552 = (v540 & (v540 - 1)) != 0;
        if (v540 < 3)
          v552 = 1;
        v553 = v552 | (2 * v540);
        v554 = vcvtps_u32_f32(v550 / v551);
        if (v553 <= v554)
          v555 = v554;
        else
          v555 = v553;
        if (v555 == 1)
        {
          v555 = 2;
        }
        else if ((v555 & (v555 - 1)) != 0)
        {
          v555 = std::__next_prime(v555);
        }
        v556 = *(int8x8_t *)(a1 + 312);
        if (v555 > *(_QWORD *)&v556)
          goto LABEL_617;
        if (v555 < *(_QWORD *)&v556)
        {
          v557 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 328) / *(float *)(a1 + 336));
          if (*(_QWORD *)&v556 < 3uLL
            || (v558 = (uint8x8_t)vcnt_s8(v556), v558.i16[0] = vaddlv_u8(v558), v558.u32[0] > 1uLL))
          {
            v557 = std::__next_prime(v557);
          }
          else
          {
            v559 = 1 << -(char)__clz(v557 - 1);
            if (v557 >= 2)
              v557 = v559;
          }
          if (v555 <= v557)
            v555 = v557;
          if (v555 < *(_QWORD *)&v556)
LABEL_617:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v533, v555);
        }
        v540 = *(_QWORD *)(a1 + 312);
        if ((v540 & (v540 - 1)) != 0)
        {
          if (v500 >= v540)
            v11 = v500 % v540;
          else
            v11 = v500;
        }
        else
        {
          v11 = (v540 - 1) & v500;
        }
      }
      v560 = *(_QWORD **)(*v533 + 8 * v11);
      if (v560)
      {
        **(_QWORD **)buf = *v560;
        *v560 = *(_QWORD *)buf;
      }
      else
      {
        **(_QWORD **)buf = *v536;
        *v536 = *(_QWORD *)buf;
        *(_QWORD *)(*v533 + 8 * v11) = v536;
        if (**(_QWORD **)buf)
        {
          v561 = *(_QWORD *)(**(_QWORD **)buf + 8);
          if ((v540 & (v540 - 1)) != 0)
          {
            if (v561 >= v540)
              v561 %= v540;
          }
          else
          {
            v561 &= v540 - 1;
          }
          *(_QWORD *)(*v533 + 8 * v561) = *(_QWORD *)buf;
        }
      }
      ++*(_QWORD *)(a1 + 328);
LABEL_642:
      v535 = (_QWORD *)*v535;
    }
    while (v535);
  }
  v562 = (uint64_t *)(a1 + 344);
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = v683;
  v563 = *((_QWORD *)&v681 + 1);
  if (*((_QWORD *)&v681 + 1) == 1)
  {
    v563 = 2;
LABEL_645:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v562, v563);
    goto LABEL_646;
  }
  if ((*((_QWORD *)&v681 + 1) & (*((_QWORD *)&v681 + 1) - 1)) != 0)
  {
    v563 = std::__next_prime(*((size_t *)&v681 + 1));
    v604 = *(int8x8_t *)(a1 + 352);
    v605 = v563 >= *(_QWORD *)&v604;
    if (v563 > *(_QWORD *)&v604)
      goto LABEL_645;
  }
  else
  {
    v604 = 0;
    v605 = 1;
    if (*((_QWORD *)&v681 + 1))
      goto LABEL_645;
  }
  if (!v605)
  {
    v609 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 368) / *(float *)(a1 + 376));
    if (*(_QWORD *)&v604 < 3uLL || (v610 = (uint8x8_t)vcnt_s8(v604), v610.i16[0] = vaddlv_u8(v610), v610.u32[0] > 1uLL))
    {
      v609 = std::__next_prime(v609);
    }
    else
    {
      v611 = 1 << -(char)__clz(v609 - 1);
      if (v609 >= 2)
        v609 = v611;
    }
    if (v563 <= v609)
      v563 = v609;
    if (v563 < *(_QWORD *)&v604)
      goto LABEL_645;
  }
LABEL_646:
  v564 = (_QWORD *)v682;
  if ((_QWORD)v682)
  {
    v565 = (_QWORD *)(a1 + 360);
    do
    {
      v566 = v564[2];
      v567 = 0x9DDFEA08EB382D69 * (((8 * v566) + 8) ^ HIDWORD(v566));
      v568 = 0x9DDFEA08EB382D69 * (HIDWORD(v566) ^ (v567 >> 47) ^ v567);
      v569 = 0x9DDFEA08EB382D69 * (v568 ^ (v568 >> 47));
      v570 = *(_QWORD *)(a1 + 352);
      if (v570)
      {
        v571 = (uint8x8_t)vcnt_s8((int8x8_t)v570);
        v571.i16[0] = vaddlv_u8(v571);
        if (v571.u32[0] > 1uLL)
        {
          v500 = 0x9DDFEA08EB382D69 * (v568 ^ (v568 >> 47));
          if (v569 >= v570)
            v500 = v569 % v570;
        }
        else
        {
          v500 = v569 & (v570 - 1);
        }
        v572 = *(_QWORD **)(*v562 + 8 * v500);
        if (v572)
        {
          v573 = (_QWORD *)*v572;
          if (v573)
          {
            if (v571.u32[0] < 2uLL)
            {
              while (1)
              {
                v575 = v573[1];
                if (v575 == v569)
                {
                  if (v573[2] == v566)
                    goto LABEL_712;
                }
                else if ((v575 & (v570 - 1)) != v500)
                {
                  goto LABEL_668;
                }
                v573 = (_QWORD *)*v573;
                if (!v573)
                  goto LABEL_668;
              }
            }
            do
            {
              v574 = v573[1];
              if (v574 == v569)
              {
                if (v573[2] == v566)
                  goto LABEL_712;
              }
              else
              {
                if (v574 >= v570)
                  v574 %= v570;
                if (v574 != v500)
                  break;
              }
              v573 = (_QWORD *)*v573;
            }
            while (v573);
          }
        }
      }
LABEL_668:
      v576 = operator new(0x30uLL);
      v577 = v576;
      *(_QWORD *)buf = v576;
      *(_QWORD *)&buf[8] = a1 + 360;
      *v576 = 0;
      v576[1] = v569;
      v576[2] = v564[2];
      v578 = v564[3];
      v576[3] = v578;
      if (v578)
      {
        v579 = (unint64_t *)(v578 + 8);
        do
          v580 = __ldxr(v579);
        while (__stxr(v580 + 1, v579));
      }
      v576[4] = v564[4];
      v581 = v564[5];
      v576[5] = v581;
      if (v581)
      {
        v582 = (unint64_t *)(v581 + 8);
        do
          v583 = __ldxr(v582);
        while (__stxr(v583 + 1, v582));
      }
      buf[16] = 1;
      v584 = (float)(unint64_t)(*(_QWORD *)(a1 + 368) + 1);
      v585 = *(float *)(a1 + 376);
      if (!v570 || (float)(v585 * (float)v570) < v584)
      {
        v586 = (v570 & (v570 - 1)) != 0;
        if (v570 < 3)
          v586 = 1;
        v587 = v586 | (2 * v570);
        v588 = vcvtps_u32_f32(v584 / v585);
        if (v587 <= v588)
          v589 = v588;
        else
          v589 = v587;
        if (v589 == 1)
        {
          v589 = 2;
        }
        else if ((v589 & (v589 - 1)) != 0)
        {
          v589 = std::__next_prime(v589);
        }
        v590 = *(int8x8_t *)(a1 + 352);
        if (v589 > *(_QWORD *)&v590)
          goto LABEL_686;
        if (v589 < *(_QWORD *)&v590)
        {
          v591 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 368) / *(float *)(a1 + 376));
          if (*(_QWORD *)&v590 < 3uLL
            || (v592 = (uint8x8_t)vcnt_s8(v590), v592.i16[0] = vaddlv_u8(v592), v592.u32[0] > 1uLL))
          {
            v591 = std::__next_prime(v591);
          }
          else
          {
            v593 = 1 << -(char)__clz(v591 - 1);
            if (v591 >= 2)
              v591 = v593;
          }
          if (v589 <= v591)
            v589 = v591;
          if (v589 < *(_QWORD *)&v590)
LABEL_686:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v562, v589);
        }
        v570 = *(_QWORD *)(a1 + 352);
        if ((v570 & (v570 - 1)) != 0)
        {
          if (v569 >= v570)
            v500 = v569 % v570;
          else
            v500 = v569;
        }
        else
        {
          v500 = (v570 - 1) & v569;
        }
      }
      v594 = *v562;
      v595 = *(_QWORD **)(*v562 + 8 * v500);
      if (v595)
      {
        *v577 = *v595;
      }
      else
      {
        *v577 = *v565;
        *v565 = v577;
        *(_QWORD *)(v594 + 8 * v500) = v565;
        if (!*v577)
          goto LABEL_711;
        v596 = *(_QWORD *)(*v577 + 8);
        if ((v570 & (v570 - 1)) != 0)
        {
          if (v596 >= v570)
            v596 %= v570;
        }
        else
        {
          v596 &= v570 - 1;
        }
        v595 = (_QWORD *)(*v562 + 8 * v596);
      }
      *v595 = v577;
LABEL_711:
      ++*(_QWORD *)(a1 + 368);
LABEL_712:
      v564 = (_QWORD *)*v564;
    }
    while (v564);
  }
  v481 = a1;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v597 = v684;
  v598 = v685;
  v599 = (char *)v685 - (char *)v684;
  if (v685 != v684)
  {
    if (v599 < 0)
      abort();
    v600 = operator new((char *)v685 - (char *)v684);
    *(_QWORD *)(a1 + 384) = v600;
    *(_QWORD *)(a1 + 392) = v600;
    *(_QWORD *)(a1 + 400) = &v600[v599 >> 3];
    do
    {
      v601 = *v597++;
      *v600++ = v601;
    }
    while (v597 != v598);
    v481 = a1;
    *(_QWORD *)(a1 + 392) = v600;
  }
  *(_OWORD *)(v481 + 408) = v687;
  *(_QWORD *)(v481 + 424) = v688;
  *(_BYTE *)(v481 + 432) = 1;
  v483 = v646;
LABEL_719:
  md::ARWalkingSupport::updateFeatureSetState(v481, v483, 5);
  if (*(_BYTE *)(v481 + 432))
  {
    md::ARWalkingSupport::updateFeatureSetState(v481, *(void **)(v481 + 104), 2);

    md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingFeatureSet *)&v656);
    return;
  }
LABEL_775:
  std::__throw_bad_optional_access[abi:nn180100]();
  __break(1u);
}

void sub_19F4400D8(_Unwind_Exception *a1)
{
  void *v1;

  md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingFeatureSet *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingFeatureSet::operator=(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  char *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t i;
  uint64_t *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t j;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t *v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t k;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  unint64_t v303;
  char *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  _QWORD *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  char *v327;
  void *v328;
  uint64_t v329;
  char *v330;
  __int128 *v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  char *v336;
  void *v337;
  void **v338;
  void **v339;
  id *v340;
  void *v341;
  __int128 v342;
  char *v344;

  v4 = *(id *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;

  if (a1 == a2)
    goto LABEL_493;
  v7 = (void **)(a1 + 24);
  v6 = *(char **)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
  v11 = *(_QWORD *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v6) >> 3) < v10)
  {
    if (v6)
    {
      v12 = *(char **)(a1 + 32);
      v13 = *(void **)(a1 + 24);
      if (v12 != v6)
      {
        do
        {
          v15 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;

        }
        while (v12 != v6);
        v13 = *v7;
      }
      *(_QWORD *)(a1 + 32) = v6;
      operator delete(v13);
      v11 = 0;
      *v7 = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_494;
    v34 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    v35 = 2 * v34;
    if (2 * v34 <= v10)
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    v36 = v34 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
    if (v36 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_494;
    v37 = 24 * v36;
    v6 = (char *)operator new(24 * v36);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = &v6[v37];
    while (v9 != v8)
    {
      v38 = *(id *)v9;
      v40 = *(_QWORD *)(v9 + 8);
      v39 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v6 = v38;
      *((_QWORD *)v6 + 1) = v40;
      *((_QWORD *)v6 + 2) = v39;
      if (v39)
      {
        v41 = (unint64_t *)(v39 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v9 += 24;
      v6 += 24;
    }
    goto LABEL_68;
  }
  v18 = *(char **)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - v6) >> 3) >= v10)
  {
    if (v9 != v8)
    {
      do
      {
        objc_storeStrong((id *)v6, *(id *)v9);
        v28 = *(_QWORD *)(v9 + 8);
        v27 = *(_QWORD *)(v9 + 16);
        if (v27)
        {
          v29 = (unint64_t *)(v27 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
        *((_QWORD *)v6 + 1) = v28;
        *((_QWORD *)v6 + 2) = v27;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v9 += 24;
        v6 += 24;
      }
      while (v9 != v8);
      v18 = *(char **)(a1 + 32);
    }
    while (v18 != v6)
    {
      v50 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v49 = (void *)*((_QWORD *)v18 - 3);
      v18 -= 24;

    }
LABEL_68:
    *(_QWORD *)(a1 + 32) = v6;
    goto LABEL_69;
  }
  v19 = v9 + 8 * ((v18 - v6) >> 3);
  if (v18 != v6)
  {
    do
    {
      objc_storeStrong((id *)v6, *(id *)v9);
      v21 = *(_QWORD *)(v9 + 8);
      v20 = *(_QWORD *)(v9 + 16);
      if (v20)
      {
        v22 = (unint64_t *)(v20 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 1) = v21;
      *((_QWORD *)v6 + 2) = v20;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v9 += 24;
      v6 += 24;
    }
    while (v9 != v19);
    v6 = *(char **)(a1 + 32);
  }
  v43 = v6;
  if (v19 != v8)
  {
    v43 = v6;
    do
    {
      v44 = *(id *)v19;
      v46 = *(_QWORD *)(v19 + 8);
      v45 = *(_QWORD *)(v19 + 16);
      *v43 = v44;
      v43[1] = v46;
      v43[2] = v45;
      if (v45)
      {
        v47 = (unint64_t *)(v45 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v19 += 24;
      v43 += 3;
    }
    while (v19 != v8);
  }
  *(_QWORD *)(a1 + 32) = v43;
LABEL_69:
  v53 = *(_QWORD *)(a1 + 48);
  v54 = *(char **)(a2 + 48);
  v55 = *(char **)(a2 + 56);
  v56 = v55 - v54;
  v57 = (v55 - v54) >> 3;
  v58 = *(_QWORD *)(a1 + 64);
  if (v57 > (v58 - v53) >> 3)
  {
    if (v53)
    {
      *(_QWORD *)(a1 + 56) = v53;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v53);
      v58 = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (v56 < 0)
      goto LABEL_494;
    v59 = v58 >> 2;
    if (v58 >> 2 <= v57)
      v59 = (v55 - v54) >> 3;
    v60 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8;
    v61 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v60)
      v61 = v59;
    if (v61 >> 61)
      goto LABEL_494;
    v62 = 8 * v61;
    v63 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 8 * v61, 8);
    v53 = v63;
    *(_QWORD *)(a1 + 48) = v63;
    *(_QWORD *)(a1 + 56) = v63;
    *(_QWORD *)(a1 + 64) = v63 + v62;
    v64 = (char *)v63;
    if (v54 != v55)
    {
      v64 = (char *)v63;
      do
      {
        if (v64)
          *(_QWORD *)v64 = *(_QWORD *)v54;
        v54 += 8;
        v64 += 8;
      }
      while (v54 != v55);
    }
    goto LABEL_91;
  }
  v65 = *(_QWORD **)(a1 + 56);
  v66 = ((uint64_t)v65 - v53) >> 3;
  if (v66 < v57)
  {
    v67 = &v54[8 * v66];
    if (v65 != (_QWORD *)v53)
    {
      memmove(*(void **)(a1 + 48), *(const void **)(a2 + 48), (size_t)v65 - v53);
      v53 = *(_QWORD *)(a1 + 56);
    }
    v64 = (char *)v53;
    if (v67 != v55)
    {
      v64 = (char *)v53;
      do
      {
        if (v64)
          *(_QWORD *)v64 = *(_QWORD *)v67;
        v67 += 8;
        v64 += 8;
      }
      while (v67 != v55);
    }
LABEL_91:
    v56 = (int64_t)&v64[-v53];
    goto LABEL_92;
  }
  if (v55 != v54)
    memmove(*(void **)(a1 + 48), *(const void **)(a2 + 48), v55 - v54);
LABEL_92:
  v68 = (char *)(v53 + v56);
  v69 = *(char **)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v68;
  v71 = *(char **)(a2 + 80);
  v70 = *(char **)(a2 + 88);
  v72 = (v70 - v71) >> 4;
  v73 = *(_QWORD *)(a1 + 96);
  if (v72 <= (v73 - (uint64_t)v69) >> 4)
  {
    v79 = *(char **)(a1 + 88);
    v80 = (v79 - v69) >> 4;
    if (v80 >= v72)
    {
      if (v71 != v70)
      {
        do
        {
          v90 = *(_QWORD *)v71;
          v89 = *((_QWORD *)v71 + 1);
          if (v89)
          {
            v91 = (unint64_t *)(v89 + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = (std::__shared_weak_count *)*((_QWORD *)v69 + 1);
          *(_QWORD *)v69 = v90;
          *((_QWORD *)v69 + 1) = v89;
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v71 += 16;
          v69 += 16;
        }
        while (v71 != v70);
        v79 = *(char **)(a1 + 88);
      }
      while (v79 != v69)
      {
        v107 = (std::__shared_weak_count *)*((_QWORD *)v79 - 1);
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v79 -= 16;
      }
      *(_QWORD *)(a1 + 88) = v69;
    }
    else
    {
      v81 = &v71[16 * v80];
      if (v79 != v69)
      {
        do
        {
          v83 = *(_QWORD *)v71;
          v82 = *((_QWORD *)v71 + 1);
          if (v82)
          {
            v84 = (unint64_t *)(v82 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v86 = (std::__shared_weak_count *)*((_QWORD *)v69 + 1);
          *(_QWORD *)v69 = v83;
          *((_QWORD *)v69 + 1) = v82;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          v71 += 16;
          v69 += 16;
        }
        while (v71 != v81);
        v69 = *(char **)(a1 + 88);
      }
      v103 = v69;
      if (v81 != v70)
      {
        v103 = v69;
        do
        {
          if (v103)
          {
            v104 = *((_QWORD *)v81 + 1);
            *(_QWORD *)v103 = *(_QWORD *)v81;
            *((_QWORD *)v103 + 1) = v104;
            if (v104)
            {
              v105 = (unint64_t *)(v104 + 8);
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
          }
          v81 += 16;
          v103 += 16;
        }
        while (v81 != v70);
      }
      *(_QWORD *)(a1 + 88) = v103;
    }
  }
  else
  {
    if (v69)
    {
      v74 = *(char **)(a1 + 88);
      if (v74 == v69)
      {
        v75 = v69;
      }
      else
      {
        do
        {
          v76 = (std::__shared_weak_count *)*((_QWORD *)v74 - 1);
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v74 -= 16;
        }
        while (v74 != v69);
        v75 = *(char **)(a1 + 80);
      }
      *(_QWORD *)(a1 + 88) = v69;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), v75);
      v73 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (v70 - v71 < 0)
      goto LABEL_494;
    v96 = v73 >> 3;
    if (v73 >> 3 <= v72)
      v96 = (v70 - v71) >> 4;
    v60 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0;
    v97 = 0xFFFFFFFFFFFFFFFLL;
    if (!v60)
      v97 = v96;
    if (v97 >> 60)
      goto LABEL_494;
    v98 = 2 * v97;
    v99 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), 16 * v97, 8);
    *(_QWORD *)(a1 + 80) = v99;
    *(_QWORD *)(a1 + 88) = v99;
    *(_QWORD *)(a1 + 96) = &v99[v98];
    while (v71 != v70)
    {
      if (v99)
      {
        v100 = *((_QWORD *)v71 + 1);
        *v99 = *(_QWORD *)v71;
        v99[1] = v100;
        if (v100)
        {
          v101 = (unint64_t *)(v100 + 8);
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
        }
      }
      v71 += 16;
      v99 += 2;
    }
    *(_QWORD *)(a1 + 88) = v99;
  }
  v110 = *(char **)(a1 + 112);
  v112 = *(char **)(a2 + 112);
  v111 = *(char **)(a2 + 120);
  v113 = (v111 - v112) >> 4;
  v114 = *(_QWORD *)(a1 + 128);
  if (v113 <= (v114 - (uint64_t)v110) >> 4)
  {
    v120 = *(char **)(a1 + 120);
    v121 = (v120 - v110) >> 4;
    if (v121 >= v113)
    {
      if (v112 != v111)
      {
        do
        {
          v131 = *(_QWORD *)v112;
          v130 = *((_QWORD *)v112 + 1);
          if (v130)
          {
            v132 = (unint64_t *)(v130 + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v134 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
          *(_QWORD *)v110 = v131;
          *((_QWORD *)v110 + 1) = v130;
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v112 += 16;
          v110 += 16;
        }
        while (v112 != v111);
        v120 = *(char **)(a1 + 120);
      }
      while (v120 != v110)
      {
        v148 = (std::__shared_weak_count *)*((_QWORD *)v120 - 1);
        if (v148)
        {
          v149 = (unint64_t *)&v148->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        v120 -= 16;
      }
      *(_QWORD *)(a1 + 120) = v110;
    }
    else
    {
      v122 = &v112[16 * v121];
      if (v120 != v110)
      {
        do
        {
          v124 = *(_QWORD *)v112;
          v123 = *((_QWORD *)v112 + 1);
          if (v123)
          {
            v125 = (unint64_t *)(v123 + 8);
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
          v127 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
          *(_QWORD *)v110 = v124;
          *((_QWORD *)v110 + 1) = v123;
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          v112 += 16;
          v110 += 16;
        }
        while (v112 != v122);
        v110 = *(char **)(a1 + 120);
      }
      v144 = v110;
      if (v122 != v111)
      {
        v144 = v110;
        do
        {
          if (v144)
          {
            v145 = *((_QWORD *)v122 + 1);
            *(_QWORD *)v144 = *(_QWORD *)v122;
            *((_QWORD *)v144 + 1) = v145;
            if (v145)
            {
              v146 = (unint64_t *)(v145 + 8);
              do
                v147 = __ldxr(v146);
              while (__stxr(v147 + 1, v146));
            }
          }
          v122 += 16;
          v144 += 16;
        }
        while (v122 != v111);
      }
      *(_QWORD *)(a1 + 120) = v144;
    }
  }
  else
  {
    if (v110)
    {
      v115 = *(char **)(a1 + 120);
      if (v115 == v110)
      {
        v116 = *(_QWORD *)(a1 + 112);
      }
      else
      {
        do
        {
          v117 = (std::__shared_weak_count *)*((_QWORD *)v115 - 1);
          if (v117)
          {
            v118 = (unint64_t *)&v117->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v115 -= 16;
        }
        while (v115 != v110);
        v116 = *(_QWORD *)(a1 + 112);
      }
      *(_QWORD *)(a1 + 120) = v110;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136), v116);
      v114 = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
    }
    if (v111 - v112 < 0)
      goto LABEL_494;
    v137 = v114 >> 3;
    if (v114 >> 3 <= v113)
      v137 = (v111 - v112) >> 4;
    v60 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    v138 = 0xFFFFFFFFFFFFFFFLL;
    if (!v60)
      v138 = v137;
    if (v138 >> 60)
      goto LABEL_494;
    v139 = 2 * v138;
    v140 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(*(_QWORD *)(a1 + 136), 16 * v138, 8);
    *(_QWORD *)(a1 + 112) = v140;
    *(_QWORD *)(a1 + 120) = v140;
    *(_QWORD *)(a1 + 128) = &v140[v139];
    while (v112 != v111)
    {
      if (v140)
      {
        v141 = *((_QWORD *)v112 + 1);
        *v140 = *(_QWORD *)v112;
        v140[1] = v141;
        if (v141)
        {
          v142 = (unint64_t *)(v141 + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
      }
      v112 += 16;
      v140 += 2;
    }
    *(_QWORD *)(a1 + 120) = v140;
  }
  v151 = *(char **)(a1 + 144);
  v153 = *(char **)(a2 + 144);
  v152 = *(char **)(a2 + 152);
  v154 = (v152 - v153) >> 4;
  v155 = *(_QWORD *)(a1 + 160);
  if (v154 <= (v155 - (uint64_t)v151) >> 4)
  {
    v161 = *(char **)(a1 + 152);
    v162 = (v161 - v151) >> 4;
    if (v162 >= v154)
    {
      if (v153 != v152)
      {
        do
        {
          v172 = *(_QWORD *)v153;
          v171 = *((_QWORD *)v153 + 1);
          if (v171)
          {
            v173 = (unint64_t *)(v171 + 8);
            do
              v174 = __ldxr(v173);
            while (__stxr(v174 + 1, v173));
          }
          v175 = (std::__shared_weak_count *)*((_QWORD *)v151 + 1);
          *(_QWORD *)v151 = v172;
          *((_QWORD *)v151 + 1) = v171;
          if (v175)
          {
            v176 = (unint64_t *)&v175->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          v153 += 16;
          v151 += 16;
        }
        while (v153 != v152);
        v161 = *(char **)(a1 + 152);
      }
      while (v161 != v151)
      {
        v189 = (std::__shared_weak_count *)*((_QWORD *)v161 - 1);
        if (v189)
        {
          v190 = (unint64_t *)&v189->__shared_owners_;
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        v161 -= 16;
      }
      *(_QWORD *)(a1 + 152) = v151;
    }
    else
    {
      v163 = &v153[16 * v162];
      if (v161 != v151)
      {
        do
        {
          v165 = *(_QWORD *)v153;
          v164 = *((_QWORD *)v153 + 1);
          if (v164)
          {
            v166 = (unint64_t *)(v164 + 8);
            do
              v167 = __ldxr(v166);
            while (__stxr(v167 + 1, v166));
          }
          v168 = (std::__shared_weak_count *)*((_QWORD *)v151 + 1);
          *(_QWORD *)v151 = v165;
          *((_QWORD *)v151 + 1) = v164;
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          v153 += 16;
          v151 += 16;
        }
        while (v153 != v163);
        v151 = *(char **)(a1 + 152);
      }
      v185 = v151;
      if (v163 != v152)
      {
        v185 = v151;
        do
        {
          if (v185)
          {
            v186 = *((_QWORD *)v163 + 1);
            *(_QWORD *)v185 = *(_QWORD *)v163;
            *((_QWORD *)v185 + 1) = v186;
            if (v186)
            {
              v187 = (unint64_t *)(v186 + 8);
              do
                v188 = __ldxr(v187);
              while (__stxr(v188 + 1, v187));
            }
          }
          v163 += 16;
          v185 += 16;
        }
        while (v163 != v152);
      }
      *(_QWORD *)(a1 + 152) = v185;
    }
  }
  else
  {
    if (v151)
    {
      v156 = *(char **)(a1 + 152);
      if (v156 == v151)
      {
        v157 = *(_QWORD *)(a1 + 144);
      }
      else
      {
        do
        {
          v158 = (std::__shared_weak_count *)*((_QWORD *)v156 - 1);
          if (v158)
          {
            v159 = (unint64_t *)&v158->__shared_owners_;
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          v156 -= 16;
        }
        while (v156 != v151);
        v157 = *(_QWORD *)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v151;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 40))(*(_QWORD *)(a1 + 168), v157);
      v155 = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
    }
    if (v152 - v153 < 0)
      goto LABEL_494;
    v178 = v155 >> 3;
    if (v155 >> 3 <= v154)
      v178 = (v152 - v153) >> 4;
    v60 = (unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0;
    v179 = 0xFFFFFFFFFFFFFFFLL;
    if (!v60)
      v179 = v178;
    if (v179 >> 60)
      goto LABEL_494;
    v180 = 2 * v179;
    v181 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), 16 * v179, 8);
    *(_QWORD *)(a1 + 144) = v181;
    *(_QWORD *)(a1 + 152) = v181;
    *(_QWORD *)(a1 + 160) = &v181[v180];
    while (v153 != v152)
    {
      if (v181)
      {
        v182 = *((_QWORD *)v153 + 1);
        *v181 = *(_QWORD *)v153;
        v181[1] = v182;
        if (v182)
        {
          v183 = (unint64_t *)(v182 + 8);
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
        }
      }
      v153 += 16;
      v181 += 2;
    }
    *(_QWORD *)(a1 + 152) = v181;
  }
  v192 = *(char **)(a1 + 176);
  v194 = *(char **)(a2 + 176);
  v193 = *(char **)(a2 + 184);
  v195 = (v193 - v194) >> 4;
  v196 = *(_QWORD *)(a1 + 192);
  if (v195 <= (v196 - (uint64_t)v192) >> 4)
  {
    v202 = *(char **)(a1 + 184);
    v203 = (v202 - v192) >> 4;
    if (v203 >= v195)
    {
      if (v194 != v193)
      {
        do
        {
          v213 = *(_QWORD *)v194;
          v212 = *((_QWORD *)v194 + 1);
          if (v212)
          {
            v214 = (unint64_t *)(v212 + 8);
            do
              v215 = __ldxr(v214);
            while (__stxr(v215 + 1, v214));
          }
          v216 = (std::__shared_weak_count *)*((_QWORD *)v192 + 1);
          *(_QWORD *)v192 = v213;
          *((_QWORD *)v192 + 1) = v212;
          if (v216)
          {
            v217 = (unint64_t *)&v216->__shared_owners_;
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
            if (!v218)
            {
              ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
              std::__shared_weak_count::__release_weak(v216);
            }
          }
          v194 += 16;
          v192 += 16;
        }
        while (v194 != v193);
        v202 = *(char **)(a1 + 184);
      }
      while (v202 != v192)
      {
        v230 = (std::__shared_weak_count *)*((_QWORD *)v202 - 1);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v202 -= 16;
      }
      *(_QWORD *)(a1 + 184) = v192;
    }
    else
    {
      v204 = &v194[16 * v203];
      if (v202 != v192)
      {
        do
        {
          v206 = *(_QWORD *)v194;
          v205 = *((_QWORD *)v194 + 1);
          if (v205)
          {
            v207 = (unint64_t *)(v205 + 8);
            do
              v208 = __ldxr(v207);
            while (__stxr(v208 + 1, v207));
          }
          v209 = (std::__shared_weak_count *)*((_QWORD *)v192 + 1);
          *(_QWORD *)v192 = v206;
          *((_QWORD *)v192 + 1) = v205;
          if (v209)
          {
            v210 = (unint64_t *)&v209->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          v194 += 16;
          v192 += 16;
        }
        while (v194 != v204);
        v192 = *(char **)(a1 + 184);
      }
      v226 = v192;
      if (v204 != v193)
      {
        v226 = v192;
        do
        {
          if (v226)
          {
            v227 = *((_QWORD *)v204 + 1);
            *(_QWORD *)v226 = *(_QWORD *)v204;
            *((_QWORD *)v226 + 1) = v227;
            if (v227)
            {
              v228 = (unint64_t *)(v227 + 8);
              do
                v229 = __ldxr(v228);
              while (__stxr(v229 + 1, v228));
            }
          }
          v204 += 16;
          v226 += 16;
        }
        while (v204 != v193);
      }
      *(_QWORD *)(a1 + 184) = v226;
    }
  }
  else
  {
    if (v192)
    {
      v197 = *(char **)(a1 + 184);
      if (v197 == v192)
      {
        v198 = *(_QWORD *)(a1 + 176);
      }
      else
      {
        do
        {
          v199 = (std::__shared_weak_count *)*((_QWORD *)v197 - 1);
          if (v199)
          {
            v200 = (unint64_t *)&v199->__shared_owners_;
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          v197 -= 16;
        }
        while (v197 != v192);
        v198 = *(_QWORD *)(a1 + 176);
      }
      *(_QWORD *)(a1 + 184) = v192;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 200) + 40))(*(_QWORD *)(a1 + 200), v198);
      v196 = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
    }
    if (v193 - v194 < 0)
      goto LABEL_494;
    v219 = v196 >> 3;
    if (v196 >> 3 <= v195)
      v219 = (v193 - v194) >> 4;
    v60 = (unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0;
    v220 = 0xFFFFFFFFFFFFFFFLL;
    if (!v60)
      v220 = v219;
    if (v220 >> 60)
      goto LABEL_494;
    v221 = 2 * v220;
    v222 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), 16 * v220, 8);
    *(_QWORD *)(a1 + 176) = v222;
    *(_QWORD *)(a1 + 184) = v222;
    *(_QWORD *)(a1 + 192) = &v222[v221];
    while (v194 != v193)
    {
      if (v222)
      {
        v223 = *((_QWORD *)v194 + 1);
        *v222 = *(_QWORD *)v194;
        v222[1] = v223;
        if (v223)
        {
          v224 = (unint64_t *)(v223 + 8);
          do
            v225 = __ldxr(v224);
          while (__stxr(v225 + 1, v224));
        }
      }
      v194 += 16;
      v222 += 2;
    }
    *(_QWORD *)(a1 + 184) = v222;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v233 = *(uint64_t **)(a2 + 224);
  v234 = *(_QWORD *)(a1 + 216);
  if (v234)
  {
    for (i = 0; i != v234; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * i) = 0;
    v236 = *(uint64_t **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    if (v236)
    {
      do
      {
        if (!v233)
        {
          do
          {
            v274 = (uint64_t *)*v236;
            std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v236 + 2);
            operator delete(v236);
            v236 = v274;
          }
          while (v274);
          goto LABEL_419;
        }
        v247 = v233[2];
        v246 = v233[3];
        if (v246)
        {
          v248 = (unint64_t *)(v246 + 8);
          do
            v249 = __ldxr(v248);
          while (__stxr(v249 + 1, v248));
        }
        v250 = (std::__shared_weak_count *)v236[3];
        v236[2] = v247;
        v236[3] = v246;
        if (!v250)
          goto LABEL_389;
        v251 = (unint64_t *)&v250->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
          if (v236 != v233)
          {
LABEL_390:
            *((_DWORD *)v236 + 16) = *((_DWORD *)v233 + 16);
            v253 = (uint64_t *)v233[6];
            v254 = v236[5];
            if (!v254)
              goto LABEL_394;
            for (j = 0; j != v254; ++j)
              *(_QWORD *)(v236[4] + 8 * j) = 0;
            v256 = v236[6];
            v236[6] = 0;
            v236[7] = 0;
            if (v256)
            {
              while (v253)
              {
                *(_DWORD *)(v256 + 16) = *((_DWORD *)v253 + 4);
                v264 = v253[3];
                v263 = v253[4];
                if (v263)
                {
                  v265 = (unint64_t *)(v263 + 8);
                  do
                    v266 = __ldxr(v265);
                  while (__stxr(v266 + 1, v265));
                }
                v267 = *(std::__shared_weak_count **)(v256 + 32);
                *(_QWORD *)(v256 + 24) = v264;
                *(_QWORD *)(v256 + 32) = v263;
                if (v267)
                {
                  v268 = (unint64_t *)&v267->__shared_owners_;
                  do
                    v269 = __ldaxr(v268);
                  while (__stlxr(v269 - 1, v268));
                  if (!v269)
                  {
                    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                    std::__shared_weak_count::__release_weak(v267);
                  }
                }
                v262 = *(_QWORD *)v256;
                std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__node_insert_multi((uint64_t)(v236 + 4), v256);
                v253 = (uint64_t *)*v253;
                v256 = v262;
                if (!v262)
                  goto LABEL_394;
              }
              do
              {
                v270 = (_QWORD *)v256;
                v256 = *(_QWORD *)v256;
                v271 = (std::__shared_weak_count *)v270[4];
                if (v271)
                {
                  v272 = (unint64_t *)&v271->__shared_owners_;
                  do
                    v273 = __ldaxr(v272);
                  while (__stlxr(v273 - 1, v272));
                  if (!v273)
                  {
                    ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                    std::__shared_weak_count::__release_weak(v271);
                  }
                }
                operator delete(v270);
              }
              while (v256);
            }
            else
            {
LABEL_394:
              while (v253)
              {
                v257 = operator new(0x28uLL);
                *v257 = 0;
                v257[1] = 0;
                v258 = *((unsigned int *)v253 + 4);
                *((_DWORD *)v257 + 4) = v258;
                v259 = v253[4];
                v257[3] = v253[3];
                v257[4] = v259;
                if (v259)
                {
                  v260 = (unint64_t *)(v259 + 8);
                  do
                    v261 = __ldxr(v260);
                  while (__stxr(v261 + 1, v260));
                }
                v257[1] = v258;
                std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__node_insert_multi((uint64_t)(v236 + 4), (uint64_t)v257);
                v253 = (uint64_t *)*v253;
              }
            }
          }
        }
        else
        {
LABEL_389:
          if (v236 != v233)
            goto LABEL_390;
        }
        v245 = (uint64_t *)*v236;
        std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(a1 + 208, v236);
        v233 = (uint64_t *)*v233;
        v236 = v245;
      }
      while (v245);
    }
  }
  for (; v233; v233 = (uint64_t *)*v233)
  {
    v237 = operator new(0x48uLL);
    v238 = v237;
    *v237 = 0;
    v237[1] = 0;
    v239 = v233[3];
    v237[2] = v233[2];
    v237[3] = v239;
    if (v239)
    {
      v240 = (unint64_t *)(v239 + 8);
      do
        v241 = __ldxr(v240);
      while (__stxr(v241 + 1, v240));
    }
    std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::unordered_map((uint64_t)(v237 + 4), (uint64_t)(v233 + 4));
    v242 = v238[2];
    v243 = HIDWORD(v242);
    v244 = 0x9DDFEA08EB382D69 * (((8 * v242) + 8) ^ HIDWORD(v242));
    v238[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v243 ^ (v244 >> 47) ^ v244)) ^ ((0x9DDFEA08EB382D69
                                                                       * (v243 ^ (v244 >> 47) ^ v244)) >> 47));
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(a1 + 208, v238);
  }
LABEL_419:
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  v275 = *(_QWORD **)(a2 + 264);
  v276 = *(_QWORD *)(a1 + 256);
  if (v276)
  {
    for (k = 0; k != v276; ++k)
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * k) = 0;
    v278 = *(_QWORD **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    if (v278)
    {
      while (v275)
      {
        v307 = v275[2];
        v306 = v275[3];
        if (v306)
        {
          v308 = (unint64_t *)(v306 + 8);
          do
            v309 = __ldxr(v308);
          while (__stxr(v309 + 1, v308));
        }
        v310 = (std::__shared_weak_count *)v278[3];
        v278[2] = v307;
        v278[3] = v306;
        if (!v310)
          goto LABEL_452;
        v311 = (unint64_t *)&v310->__shared_owners_;
        do
          v312 = __ldaxr(v311);
        while (__stlxr(v312 - 1, v311));
        if (!v312)
        {
          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
          std::__shared_weak_count::__release_weak(v310);
          v314 = v275[4];
          v313 = v275[5];
          if (v313)
          {
LABEL_453:
            v315 = (unint64_t *)(v313 + 8);
            do
              v316 = __ldxr(v315);
            while (__stxr(v316 + 1, v315));
          }
        }
        else
        {
LABEL_452:
          v314 = v275[4];
          v313 = v275[5];
          if (v313)
            goto LABEL_453;
        }
        v317 = (std::__shared_weak_count *)v278[5];
        v278[4] = v314;
        v278[5] = v313;
        if (v317)
        {
          v318 = (unint64_t *)&v317->__shared_owners_;
          do
            v319 = __ldaxr(v318);
          while (__stlxr(v319 - 1, v318));
          if (!v319)
          {
            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
            std::__shared_weak_count::__release_weak(v317);
          }
        }
        v305 = (_QWORD *)*v278;
        std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(a1 + 248, v278);
        v275 = (_QWORD *)*v275;
        v278 = v305;
        if (!v305)
          goto LABEL_423;
      }
      while (1)
      {
        v320 = v278;
        v278 = (_QWORD *)*v278;
        v321 = (std::__shared_weak_count *)v320[5];
        if (!v321)
          goto LABEL_467;
        v322 = (unint64_t *)&v321->__shared_owners_;
        do
          v323 = __ldaxr(v322);
        while (__stlxr(v323 - 1, v322));
        if (!v323)
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
          v324 = (std::__shared_weak_count *)v320[3];
          if (v324)
          {
LABEL_468:
            v325 = (unint64_t *)&v324->__shared_owners_;
            do
              v326 = __ldaxr(v325);
            while (__stlxr(v326 - 1, v325));
            if (!v326)
            {
              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
              std::__shared_weak_count::__release_weak(v324);
            }
          }
        }
        else
        {
LABEL_467:
          v324 = (std::__shared_weak_count *)v320[3];
          if (v324)
            goto LABEL_468;
        }
        operator delete(v320);
        if (!v278)
          goto LABEL_431;
      }
    }
  }
LABEL_423:
  while (v275)
  {
    v279 = operator new(0x30uLL);
    *v279 = 0;
    v279[1] = 0;
    v280 = v275[3];
    v279[2] = v275[2];
    v279[3] = v280;
    if (v280)
    {
      v281 = (unint64_t *)(v280 + 8);
      do
        v282 = __ldxr(v281);
      while (__stxr(v282 + 1, v281));
    }
    v283 = v275[5];
    v279[4] = v275[4];
    v279[5] = v283;
    if (v283)
    {
      v284 = (unint64_t *)(v283 + 8);
      do
        v285 = __ldxr(v284);
      while (__stxr(v285 + 1, v284));
    }
    v286 = v279[2];
    v287 = HIDWORD(v286);
    v288 = 0x9DDFEA08EB382D69 * (((8 * v286) + 8) ^ HIDWORD(v286));
    v279[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v287 ^ (v288 >> 47) ^ v288)) ^ ((0x9DDFEA08EB382D69
                                                                       * (v287 ^ (v288 >> 47) ^ v288)) >> 47));
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(a1 + 248, v279);
    v275 = (_QWORD *)*v275;
  }
LABEL_431:
  if (a1 != a2)
  {
    v289 = *(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288);
    v290 = v289 >> 3;
    v292 = *(char **)(a1 + 288);
    v291 = *(char **)(a1 + 296);
    v293 = (v291 - v292) >> 3;
    v294 = (v289 >> 3) - v293;
    if (v289 >> 3 <= v293)
    {
      if (v289 >> 3 < v293)
      {
        v327 = &v292[8 * v290];
        while (v291 != v327)
        {
          v328 = (void *)*((_QWORD *)v291 - 1);
          v291 -= 8;

        }
        *(_QWORD *)(a1 + 296) = v327;
      }
      goto LABEL_490;
    }
    v295 = *(_QWORD *)(a1 + 304);
    if (v294 <= (v295 - (uint64_t)v291) >> 3)
    {
      bzero(*(void **)(a1 + 296), 8 * v294);
      *(_QWORD *)(a1 + 296) = &v291[8 * v294];
LABEL_490:
      v338 = *(void ***)(a2 + 288);
      v339 = *(void ***)(a2 + 296);
      if (v338 != v339)
      {
        v340 = *(id **)(a1 + 288);
        do
        {
          v341 = *v338++;
          objc_storeStrong(v340++, v341);
        }
        while (v338 != v339);
      }
      goto LABEL_493;
    }
    if ((v289 & 0x8000000000000000) == 0)
    {
      v296 = v295 - (_QWORD)v292;
      v297 = (v295 - (uint64_t)v292) >> 2;
      if (v297 > v290)
        v290 = v297;
      if (v296 >= 0x7FFFFFFFFFFFFFF8)
        v290 = 0x1FFFFFFFFFFFFFFFLL;
      if (v290 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v298 = 8 * v290;
      v299 = (char *)operator new(8 * v290);
      v300 = &v299[8 * v293];
      v344 = v299;
      v301 = &v299[v298];
      bzero(v300, 8 * v294);
      v302 = &v300[8 * v294];
      if (v291 == v292)
      {
        *(_QWORD *)(a1 + 288) = v300;
        *(_QWORD *)(a1 + 296) = v302;
        *(_QWORD *)(a1 + 304) = v301;
LABEL_488:
        if (v291)
          operator delete(v291);
        goto LABEL_490;
      }
      v303 = v291 - v292 - 8;
      if (v303 > 0x77)
      {
        v304 = v301;
        if (&v291[-(v303 & 0xFFFFFFFFFFFFFFF8) - 8] >= v300
          || &v344[v291 - v292 - (v303 & 0xFFFFFFFFFFFFFFF8) - 8] >= v291)
        {
          v329 = (v303 >> 3) + 1;
          v330 = &v344[8 * v293 - 16];
          v331 = (__int128 *)(v291 - 32);
          v332 = v329 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v334 = *v331;
            v333 = v331[1];
            *v331 = 0uLL;
            v331[1] = 0uLL;
            v331 -= 2;
            *((_OWORD *)v330 - 1) = v334;
            *(_OWORD *)v330 = v333;
            v330 -= 32;
            v332 -= 4;
          }
          while (v332);
          v300 -= 8 * (v329 & 0x3FFFFFFFFFFFFFFCLL);
          v291 -= 8 * (v329 & 0x3FFFFFFFFFFFFFFCLL);
          if (v329 == (v329 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_486:
            v291 = *(char **)(a1 + 288);
            v336 = *(char **)(a1 + 296);
            *(_QWORD *)(a1 + 288) = v300;
            *(_QWORD *)(a1 + 296) = v302;
            *(_QWORD *)(a1 + 304) = v304;
            while (v336 != v291)
            {
              v337 = (void *)*((_QWORD *)v336 - 1);
              v336 -= 8;

            }
            goto LABEL_488;
          }
        }
      }
      else
      {
        v304 = v301;
      }
      do
      {
        v335 = *((_QWORD *)v291 - 1);
        v291 -= 8;
        *(_QWORD *)v291 = 0;
        *((_QWORD *)v300 - 1) = v335;
        v300 -= 8;
      }
      while (v291 != v292);
      goto LABEL_486;
    }
LABEL_494:
    abort();
  }
LABEL_493:
  v342 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v342;
  return a1;
}

uint64_t std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (v11)
  {
    v12 = (_QWORD *)(a1 + 16);
    do
    {
      v13 = *((unsigned int *)v11 + 4);
      v14 = *(_QWORD *)(a1 + 8);
      if (v14)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v11 + 4);
          if (v14 <= v13)
            v2 = v13 % v14;
        }
        else
        {
          v2 = ((_DWORD)v14 - 1) & v13;
        }
        v16 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
        if (v16)
        {
          v17 = *v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v17[1];
                if (v19 == v13)
                {
                  if (*((_DWORD *)v17 + 4) == (_DWORD)v13)
                    goto LABEL_81;
                }
                else if ((v19 & (v14 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                v17 = (uint64_t *)*v17;
                if (!v17)
                  goto LABEL_40;
              }
            }
            do
            {
              v18 = v17[1];
              if (v18 == v13)
              {
                if (*((_DWORD *)v17 + 4) == (_DWORD)v13)
                  goto LABEL_81;
              }
              else
              {
                if (v18 >= v14)
                  v18 %= v14;
                if (v18 != v2)
                  break;
              }
              v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_40:
      v20 = operator new(0x28uLL);
      *v20 = 0;
      v20[1] = v13;
      *((_DWORD *)v20 + 4) = *((_DWORD *)v11 + 4);
      v20[3] = v11[3];
      v21 = v11[4];
      v20[4] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v25 = *(float *)(a1 + 32);
      if (!v14 || (float)(v25 * (float)v14) < v24)
      {
        v26 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3)
          v26 = 1;
        v27 = v26 | (2 * v14);
        v28 = vcvtps_u32_f32(v24 / v25);
        if (v27 <= v28)
          v29 = v28;
        else
          v29 = v27;
        if (v29 == 1)
        {
          v29 = 2;
        }
        else if ((v29 & (v29 - 1)) != 0)
        {
          v29 = std::__next_prime(v29);
        }
        v30 = *(int8x8_t *)(a1 + 8);
        if (v29 > *(_QWORD *)&v30)
          goto LABEL_55;
        if (v29 < *(_QWORD *)&v30)
        {
          v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
          {
            v31 = std::__next_prime(v31);
          }
          else
          {
            v33 = 1 << -(char)__clz(v31 - 1);
            if (v31 >= 2)
              v31 = v33;
          }
          if (v29 <= v31)
            v29 = v31;
          if (v29 < *(_QWORD *)&v30)
LABEL_55:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v29);
        }
        v14 = *(_QWORD *)(a1 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v14 <= v13)
            v2 = v13 % v14;
          else
            v2 = v13;
        }
        else
        {
          v2 = ((_DWORD)v14 - 1) & v13;
        }
      }
      v34 = *(_QWORD *)a1;
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v35)
      {
        *v20 = *v35;
      }
      else
      {
        *v20 = *v12;
        *v12 = v20;
        *(_QWORD *)(v34 + 8 * v2) = v12;
        if (!*v20)
          goto LABEL_80;
        v36 = *(_QWORD *)(*v20 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v36 >= v14)
            v36 %= v14;
        }
        else
        {
          v36 &= v14 - 1;
        }
        v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
      }
      *v35 = v20;
LABEL_80:
      ++*(_QWORD *)(a1 + 24);
LABEL_81:
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return a1;
}

void sub_19F442AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  size_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t *j;
  size_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t *i;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = *(unsigned int *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = v10;
    else
      prime = v9;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v5)
      goto LABEL_105;
    if (prime >= v5)
      goto LABEL_40;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = operator new(8 * prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v14 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      v16 = a1 + 16;
      v15 = *(uint64_t ***)(a1 + 16);
      if (v15)
      {
        v17 = (size_t)v15[1];
        v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime)
            v17 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
          for (i = *v15; *v15; i = *v15)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v17)
            {
              v15 = (uint64_t **)i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (uint64_t *)*v38;
                }
                while (v38 && *((_DWORD *)i + 4) == *((_DWORD *)v38 + 4));
                *v15 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v15;
                v15 = (uint64_t **)i;
                v17 = v37;
              }
            }
          }
        }
        else
        {
          v19 = v17 & v18;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
          for (j = *v15; *v15; j = *v15)
          {
            v21 = j[1] & v18;
            if (v21 == v19)
            {
              v15 = (uint64_t **)j;
            }
            else
            {
              v22 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
              {
                do
                {
                  v23 = v22;
                  v22 = (uint64_t *)*v22;
                }
                while (v22 && *((_DWORD *)j + 4) == *((_DWORD *)v22 + 4));
                *v15 = v22;
                v24 = 8 * v21;
                *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
                **(_QWORD **)(*(_QWORD *)a1 + v24) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
                v15 = (uint64_t **)j;
                v19 = v21;
              }
            }
          }
        }
      }
      v5 = prime;
    }
    else
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    v41 = v4;
    if (v5 <= v4)
      v41 = v4 % v5;
    v42 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v41);
    if (!v42)
    {
      v35 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      if (v48 < v5)
        goto LABEL_78;
      goto LABEL_77;
    }
    v43 = 0;
    do
    {
      v35 = v42;
      v42 = (uint64_t *)*v42;
      if (!v42)
        break;
      v46 = v42[1];
      v47 = v46;
      if (v46 >= v5)
        v47 = v46 % v5;
      if (v47 != v41)
        break;
      v44 = v46 == v4 && *((_DWORD *)v42 + 4) == *(_DWORD *)(a2 + 16);
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v30 = (v5 - 1) & v4;
    v31 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v30);
    if (!v31)
    {
      v35 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      goto LABEL_75;
    }
    v32 = 0;
    do
    {
      v35 = v31;
      v31 = (uint64_t *)*v31;
      if (!v31)
        break;
      v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30)
        break;
      v33 = v36 == v4 && *((_DWORD *)v31 + 4) == *(_DWORD *)(a2 + 16);
      v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  v48 = *(_QWORD *)(a2 + 8);
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5)
LABEL_77:
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_92;
    v49 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *(_QWORD *)a2 = *v35;
  *v35 = a2;
  if (*(_QWORD *)a2)
  {
    v49 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t std::unordered_map<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void **geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v5 = (void *)*((_QWORD *)v3 - 3);
        v3 -= 24;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::ARWalkingContinueLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD8F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARWalkingContinueLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD8F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingContinueLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::ARWalkingManeuverLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARWalkingManeuverLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingManeuverLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::ARWalkingStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARWalkingStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingStorefrontLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::ARWalkingArrivalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARWalkingArrivalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingArrivalLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::ARWalkingSupport::setShouldUse3DArrival(md::ARWalkingSupport *this, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 10) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Should use 3d arrival:%d", (uint8_t *)v5, 8u);
    }
    *((_BYTE *)this + 10) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void md::ARWalkingSupport::setPerpendicularLayoutEnabled(md::ARWalkingSupport *this, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 11) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Should use perpendicular layout:%d", (uint8_t *)v5, 8u);
    }
    *((_BYTE *)this + 11) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void sub_19F443580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F4437E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F44412C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double VKCameraDistanceForDisplayZoomLevel(float a1, VKCamera *a2)
{
  VKCamera *v3;
  VKCamera *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  double v14;
  float v15;
  double v16;
  double v18;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    -[VKCamera verticalFieldOfView](v3, "verticalFieldOfView");
    v5 = v18 * 0.5;
  }
  else
  {
    v5 = 0.0;
  }
  -[VKCamera maxPitch](v4, "maxPitch");
  v7 = v6;
  -[VKCamera depthForViewWidth:](v4, "depthForViewWidth:", (double)exp2(-a1));
  v9 = v8;
  -[VKCamera maxPitch](v4, "maxPitch");
  v11 = v10;
  *(float *)&v10 = v5;
  v12 = cosf(*(float *)&v10);
  v13 = v7;
  v14 = cosf(v13);
  v15 = v11 - v5;
  v16 = v9 * cosf(v15) / (v14 * v12);

  return v16;
}

void sub_19F4442F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F44461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F44484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKPolylineGroupOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4FD0;

  return a1;
}

void geo::_retain_ptr<VKPolylineGroupOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4FD0;

  JUMPOUT(0x1A1AF4E00);
}

md::SharedDeviceResources **std::unique_ptr<md::SharedDeviceResources>::~unique_ptr[abi:nn180100](md::SharedDeviceResources **a1)
{
  md::SharedDeviceResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__shared_ptr_pointer<ggl::Device *,std::shared_ptr<ggl::Device>::__shared_ptr_default_delete<ggl::Device,ggl::Device>,std::allocator<ggl::Device>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Device *,std::shared_ptr<ggl::Device>::__shared_ptr_default_delete<ggl::Device,ggl::Device>,std::allocator<ggl::Device>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<ggl::VSLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSLibraryBundleMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverLibraryBundleMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::StandardLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::StandardLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardLibraryBundleMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::CommonLibraryMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E38C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::CommonLibraryMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E38C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonLibraryMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::MetalSurface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DECE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MetalSurface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DECE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalSurface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchain>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchain>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalSwapchain>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

void md::FlyoverTileDataRequester::~FlyoverTileDataRequester(md::FlyoverTileDataRequester *this)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  *(_QWORD *)this = &off_1E42A0888;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    operator delete(v6);
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
}

{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  *(_QWORD *)this = &off_1E42A0888;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    operator delete(v6);
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverTileDataRequester::requestDataKeys(md::FlyoverTileDataRequester *this, const gdc::SelectionContext *a2, int a3)
{
  md::FlyoverTileDataRequester *v4;
  int v5;
  BOOL v6;
  char *v7;
  gdc::LayerDataCollector *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  const QuadTile *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int32x2_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  char v28;
  int v29;
  unint64_t v30;
  unint64_t i;
  int v32;
  unsigned int v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t j;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  const QuadTile *v45;
  const QuadTile *v46;
  uint64_t level;
  unsigned int v48;
  unsigned int v49;
  const QuadTile *v51;
  uint64_t *v52;
  double v53;
  uint64_t type;
  unint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  void **v59;
  unint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  size_t prime;
  size_t v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  size_t v73;
  size_t v74;
  size_t v75;
  _QWORD *ii;
  size_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  size_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t m;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  __int16 v100;
  char v101;
  unint64_t v102;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  unsigned __int8 *n;
  uint64_t v106;
  unsigned __int16 v107;
  char v108;
  const double *v109;
  double v110;
  double v111;
  double v112;
  uint64_t *v113;
  unsigned int v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  const QuadTile *k;
  md::FlyoverTileDataRequester *v123;
  uint64_t *v124;
  unint64_t v125;
  int8x8_t v126;
  const QuadTile *v127;
  unint64_t v128;
  unsigned int v129;
  float *v130;
  QuadTile v131;
  unsigned __int8 v132[4];
  int32x2_t v133;
  uint64_t v134;
  _BYTE v135[4];
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  _WORD v140[2];
  _BYTE v141[12];
  void *v142;
  __int128 __p;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  void *v157;
  double v158;
  void *v159;
  double v160;
  double v161;
  double v162;
  char v163;
  char v164;
  unsigned __int8 v165[4];
  uint64_t v166;
  char v167;
  unint64_t v168;
  int v169;
  _BYTE v170[24];
  std::vector<unsigned int> v171;

  v4 = this;
  v5 = *((unsigned __int16 *)this + 12);
  v6 = v5 == 50 || v5 == 20;
  v7 = (char *)this + 8;
  if (v6)
    v7 = (char *)this + 112;
  if (*(_QWORD *)v7)
  {
    v8 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
    v119 = *(_QWORD *)v7;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v7 + 24))(&v138);
    if ((_BYTE)v138)
    {
      v9 = (unsigned int *)*((_QWORD *)a2 + 8);
      v10 = (unsigned int *)((char *)v4 + 32);
      if (!*((_BYTE *)v4 + 28))
        v10 = (unsigned int *)&v138 + 1;
      if (*((_BYTE *)v4 + 36))
        v11 = (unsigned int *)((char *)v4 + 40);
      else
        v11 = (unsigned int *)&v139;
      if ((a3 & 1) != 0 || *((_BYTE *)a2 + 82) == 1)
      {
        v12 = 0x100000001;
        v13 = (uint64_t *)*((_QWORD *)v9 + 3);
        if (!v13)
          return;
        goto LABEL_19;
      }
      v12 = *((unsigned int *)v4 + 4) | 0x100000000;
      v13 = (uint64_t *)*((_QWORD *)v9 + 3);
      if (v13)
      {
LABEL_19:
        v118 = *v10;
        v113 = (uint64_t *)((char *)v4 + 88);
        v130 = (float *)((char *)v4 + 48);
        v115 = *v9;
        v114 = *v11;
        v123 = v4;
        do
        {
          v14 = (const QuadTile *)(v13 + 2);
          v15 = *((unsigned __int8 *)v13 + 17);
          v16 = (*((_DWORD *)v13 + 5) % (1 << v15) + (1 << v15)) % (1 << v15);
          v17 = *((_DWORD *)v13 + 6) % (1 << v15) + (1 << v15);
          v135[0] = *((_BYTE *)v13 + 16);
          v135[1] = v15;
          v136 = v16;
          v137 = v17 % (1 << v15);
          md::FlyoverMetaData::adjustedTile((md::FlyoverMetaData *)v140, *((const QuadTile **)a2 + 17), (uint64_t)v135, 1);
          if (BYTE8(__p))
          {
            v18 = HIBYTE(v140[0]);
            v19 = *(int32x2_t *)v141;
            v20 = v140[0];
            v21 = v119;
            if (__p == 2)
            {
              (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v119 + 24))(&v155, v119, 4);
              if (!LOBYTE(v155))
                goto LABEL_35;
              v22 = HIDWORD(v155);
              if (HIDWORD(v155) <= v18)
                v22 = v18;
              if (LODWORD(v156) < v22)
                v22 = LODWORD(v156);
              if (v22 < v18)
              {
                v21 = v119;
                if (v18)
                {
                  v23 = (v18 - v22);
                  if (v18 < v23)
                    v23 = v18;
                  LOBYTE(v18) = v18 - v23;
                  v19 = vshl_s32(v19, vneg_s32(vdup_n_s32(v23)));
                }
              }
              else
              {
LABEL_35:
                v21 = v119;
              }
              v24 = v15 - v118;
              v25 = 4;
            }
            else
            {
              v24 = v15 - v118;
              v25 = *((unsigned __int16 *)v4 + 12);
            }
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(&v134, v21, v25);
            if ((_BYTE)v134)
            {
              v26 = HIDWORD(v134);
              if ((_DWORD)v115)
                v27 = HIDWORD(v134) == 0;
              else
                v27 = 1;
              v28 = v27;
              if (v27)
              {
                v29 = 0;
              }
              else
              {
                if (HIDWORD(v134) >= v115)
                {
                  v29 = 0;
                  v30 = HIDWORD(v134);
                }
                else
                {
                  v29 = 0;
                  v30 = HIDWORD(v134);
                  do
                  {
                    ++v29;
                    v30 *= 2;
                  }
                  while (v30 < v115);
                }
                for (i = v115; v30 > i; i *= 2)
                  --v29;
              }
              v124 = v13;
              if ((_BYTE)v18)
              {
                v32 = -v29 & ~(-v29 >> 31);
                if (v32 >= v24)
                  LOBYTE(v32) = v24;
                v33 = v18;
                if (v18 >= v32)
                  v33 = v32;
                v34 = v18 - v33;
                v19 = vshl_s32(v19, vneg_s32(vdup_n_s32(v33)));
              }
              else
              {
                v34 = 0;
              }
              v132[0] = v20;
              v132[1] = v34;
              v133 = v19;
              v35 = v34;
              if (v118 <= v34 && v114 >= v34)
              {
                *((_QWORD *)v4 + 12) = *((_QWORD *)v4 + 11);
                if ((v28 & 1) != 0)
                {
                  v36 = 0;
                  v37 = v119;
                }
                else
                {
                  v37 = v119;
                  v36 = 0;
                  if (v26 >= v115)
                  {
                    v38 = v115;
                  }
                  else
                  {
                    v38 = v115;
                    do
                    {
                      ++v36;
                      v26 *= 2;
                    }
                    while (v26 < v115);
                  }
                  for (j = v38; v26 > j; j *= 2)
                    --v36;
                }
                v40 = *((unsigned __int8 *)v4 + 46);
                v41 = *((unsigned __int16 *)v4 + 22);
                (*(void (**)(_WORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v37 + 24))(v140, v37, v25);
                if (LOBYTE(v140[0]))
                {
                  v42 = v41 | (v40 << 16);
                  if (v42 >= 0x10000)
                  {
                    v43 = v41;
                    if (*(_DWORD *)v141 < v41)
                      v43 = *(_DWORD *)v141;
                    v44 = BYTE1(v41);
                    if (BYTE1(v41) <= *(_DWORD *)&v141[4])
                      v44 = *(_DWORD *)&v141[4];
                  }
                  else
                  {
                    v43 = *(_DWORD *)v141;
                    v44 = *(_DWORD *)&v141[4];
                  }
                  if (v43 <= v36 + v35)
                    v43 = v36 + v35;
                  if (v44 < v43)
                    v43 = v44;
                  md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v35 - v43, v25, v119, v132, v42, v113);
                }
                v4 = v123;
                v46 = (const QuadTile *)*((_QWORD *)v123 + 11);
                v45 = (const QuadTile *)*((_QWORD *)v123 + 12);
                for (k = v45; ; v45 = k)
                {
                  if (v46 == v45)
                    goto LABEL_20;
                  (*(void (**)(QuadTile *__return_ptr, md::FlyoverTileDataRequester *, const QuadTile *))(*(_QWORD *)v4 + 80))(&v131, v4, v46);
                  level = v131._level;
                  v48 = v46->_level;
                  v49 = *((unsigned __int8 *)v124 + 17);
                  if (v131._level < v48 || v131._level < v49)
                  {
                    v51 = v48 <= v49 ? v14 : v46;
                    *(_WORD *)v165 = *(_WORD *)&v51->_type;
                    v166 = *(_QWORD *)&v51->_yIdx;
                    v52 = (uint64_t *)*((_QWORD *)a2 + 20);
                    if (v52)
                      break;
                  }
LABEL_192:
                  if (*((_QWORD *)v4 + 9))
                  {
                    v89 = (_QWORD *)*((_QWORD *)v4 + 8);
                    if (v89)
                    {
                      do
                      {
                        v90 = (_QWORD *)*v89;
                        operator delete(v89);
                        v89 = v90;
                      }
                      while (v90);
                    }
                    *((_QWORD *)v4 + 8) = 0;
                    v91 = *((_QWORD *)v4 + 7);
                    if (v91)
                    {
                      for (m = 0; m != v91; ++m)
                        *(_QWORD *)(*(_QWORD *)v130 + 8 * m) = 0;
                    }
                    *((_QWORD *)v4 + 9) = 0;
                  }
                  v93 = HIDWORD(v134);
                  if (a3)
                    v93 = 0;
                  v129 = v93;
                  memset(&v171, 0, sizeof(v171));
                  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)v140, ***((QuadTile ****)a2 + 17), (uint64_t)&v131);
                  v127 = v46;
                  if ((_BYTE)__p)
                  {
                    v94 = v142 | 0x100000000;
                    v95 = v94 >> 8;
                    v96 = *(std::__shared_weak_count **)&v141[4];
                    if (*(_QWORD *)&v141[4])
                    {
                      v97 = (unint64_t *)(*(_QWORD *)&v141[4] + 8);
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    v99 = 0x100000000;
                  }
                  else
                  {
                    LOBYTE(v94) = 0;
                    v99 = 0;
                    LODWORD(v95) = 0;
                  }
                  v100 = md::FlyoverMetaData::tileType(*((md::FlyoverMetaData **)a2 + 17), &v131, 0);
                  if ((v100 & 0xFF00) != 0)
                    v101 = v100;
                  else
                    v101 = 2;
                  md::FlyoverMetaData::heightIndices(***((QuadTile ****)a2 + 17), (uint64_t)&v131, &v171);
                  v102 = v94 | (unint64_t)v99 | ((_DWORD)v95 << 8);
                  begin = v171.__begin_;
                  end = v171.__end_;
                  if (v171.__begin_ == v171.__end_)
                  {
                    v140[0] = *(_WORD *)&v131._type;
                    *(_QWORD *)v141 = *(_QWORD *)&v131._yIdx;
                    LOBYTE(__p) = v101;
                    *(_QWORD *)((char *)&__p + 4) = v102;
                    HIDWORD(__p) = 0;
                    if (v101)
                      std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(v130, (unsigned __int8 *)v140, (uint64_t)v140);
                  }
                  else
                  {
                    do
                    {
                      v106 = *begin;
                      v107 = md::FlyoverMetaData::tileType(*((md::FlyoverMetaData **)a2 + 17), &v131, v106);
                      v108 = v107;
                      if (v107 >= 0x100u)
                      {
                        md::FlyoverMetaData::elevationBoundsForHeightTile((md::FlyoverMetaData *)v170, ***((QuadTile ****)a2 + 17), (uint64_t)&v131, v106);
                        if (v170[0])
                        {
                          v109 = (const double *)((char *)a2 + 168);
                          if (*((_BYTE *)a2 + 82) != 1)
                            v109 = (const double *)*((_QWORD *)a2 + 18);
                          if (*(unsigned __int8 *)v109 - 1 > 2)
                          {
                            v140[0] = *(_WORD *)&v131._type;
                            *(_QWORD *)v141 = *(_QWORD *)&v131._yIdx;
                            LOBYTE(__p) = v108;
                            *(_QWORD *)((char *)&__p + 4) = v102;
                            HIDWORD(__p) = v106;
                            if (v108)
                              std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(v130, (unsigned __int8 *)v140, (uint64_t)v140);
                          }
                          else
                          {
                            *(_WORD *)v165 = *(_WORD *)&v131._type;
                            v166 = *(_QWORD *)&v131._yIdx;
                            v167 = v108;
                            v168 = v102;
                            v169 = v106;
                            md::FlyoverSelectionContext::getTileBound((uint64_t)&v155, *((_QWORD *)a2 + 19), v165, (uint64_t)v170);
                            if (!v164)
                              goto LABEL_229;
                            v110 = -(*(double *)&v157 * *(double *)&v159 - v156 * v160)
                                 - (*(double *)&v157 * *(double *)&v159
                                  - v156 * v160);
                            v111 = -(v155 * v160 - *(double *)&v157 * v158) - (v155 * v160 - *(double *)&v157 * v158);
                            v112 = -(v156 * v158 - v155 * *(double *)&v159) - (v156 * v158 - v155 * *(double *)&v159);
                            v148 = -(v155 + v110 * v161 + v111 * v160 - v112 * *(double *)&v159);
                            v149 = -(v112 * v158 - (-(v156 - v110 * v160) - v111 * v161));
                            v150 = -(*(double *)&v157 + v110 * *(double *)&v159 + v112 * v161 - v111 * v158);
                            v151 = -v158;
                            v152 = -*(double *)&v159;
                            v153 = -v160;
                            v154 = v161;
                            geo::Frustum<double>::transformed((double *)v140, v109 + 123, (uint64_t)&v148);
                            if (geo::Intersect::encloses<double>((double *)v140, &v162))
LABEL_229:
                              md::FlyoverSelectionContext::selectBestFitOctiles((uint64_t)a2, (uint64_t)v165, v130, v129);
                          }
                        }
                      }
                      ++begin;
                    }
                    while (begin != end);
                  }
                  if (v171.__begin_)
                  {
                    v171.__end_ = v171.__begin_;
                    operator delete(v171.__begin_);
                  }
                  v4 = v123;
                  for (n = (unsigned __int8 *)*((_QWORD *)v123 + 8); n; n = *(unsigned __int8 **)n)
                  {
                    md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)v140, n + 16, 0, v12);
                    gdc::LayerDataCollector::addDataKey(v8, (const gdc::LayerDataRequestKey *)v140, v14);
                    if (*((_BYTE *)v123 + 20))
                    {
                      md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v155, n + 16, 1u, v12);
                      gdc::LayerDataCollector::addDataKey(v8, (const gdc::LayerDataRequestKey *)&v155, v14);
                      if (v163)
                        v163 = 0;
                      if (v157 != v159)
                        free(v157);
                    }
                    if (v147)
                      v147 = 0;
                    if (v142 != *((void **)&__p + 1))
                      free(v142);
                  }
                  v46 = v127 + 1;
                }
                v53 = COERCE_DOUBLE(std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(*((_QWORD **)a2 + 20), &v131._type));
                if (v53 == 0.0)
                {
                  *(double *)&v157 = 0.0;
                  v158 = 0.0;
                  LODWORD(v159) = 1065353216;
                  type = v131._type;
                  LOBYTE(v140[0]) = v131._type;
                  HIBYTE(v140[0]) = level;
                  *(_QWORD *)v141 = *(_QWORD *)&v131._yIdx;
                  v156 = 0.0;
                  v155 = 0.0;
                  __p = 0uLL;
                  v144 = 0;
                  v145 = 0;
                  v146 = 1065353216;
                  v55 = (level
                       - 0x61C8864680B583EBLL
                       + ((type - 0x61C8864680B583EBLL) << 6)
                       + ((unint64_t)(type - 0x61C8864680B583EBLL) >> 2)) ^ (type - 0x61C8864680B583EBLL);
                  v117 = *(_QWORD *)&v131._yIdx;
                  v56 = (v131._yIdx - 0x61C8864680B583EBLL + (v55 << 6) + (v55 >> 2)) ^ v55;
                  v128 = (v131._xIdx - 0x61C8864680B583EBLL + (v56 << 6) + (v56 >> 2)) ^ v56;
                  v125 = v52[1];
                  if (v125)
                  {
                    v57 = (uint8x8_t)vcnt_s8((int8x8_t)v125);
                    v57.i16[0] = vaddlv_u8(v57);
                    if (v57.u32[0] > 1uLL)
                    {
                      v58 = (v131._xIdx - 0x61C8864680B583EBLL + (v56 << 6) + (v56 >> 2)) ^ v56;
                      if (v128 >= v125)
                        v58 = v128 % v125;
                    }
                    else
                    {
                      v58 = v128 & (v125 - 1);
                    }
                    v120 = v58;
                    v59 = *(void ***)(*v52 + 8 * v58);
                    if (v59)
                    {
                      v53 = *(double *)v59;
                      if (*v59)
                      {
                        if (v57.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v61 = *(_QWORD *)(*(_QWORD *)&v53 + 8);
                            if (v61 == v128)
                            {
                              if (__PAIR64__(*(unsigned __int8 *)(*(_QWORD *)&v53 + 17), *(unsigned __int8 *)(*(_QWORD *)&v53 + 16)) == __PAIR64__(level, v131._type)&& *(_QWORD *)(*(_QWORD *)&v53 + 20) == *(_QWORD *)&v131._yIdx)
                              {
                                goto LABEL_189;
                              }
                            }
                            else if ((v61 & (v125 - 1)) != v58)
                            {
                              goto LABEL_119;
                            }
                            v53 = **(double **)&v53;
                            if (v53 == 0.0)
                              goto LABEL_119;
                          }
                        }
                        do
                        {
                          v60 = *(_QWORD *)(*(_QWORD *)&v53 + 8);
                          if (v60 == v128)
                          {
                            if (__PAIR64__(*(unsigned __int8 *)(*(_QWORD *)&v53 + 17), *(unsigned __int8 *)(*(_QWORD *)&v53 + 16)) == __PAIR64__(level, v131._type)&& *(_QWORD *)(*(_QWORD *)&v53 + 20) == *(_QWORD *)&v131._yIdx)
                            {
                              goto LABEL_189;
                            }
                          }
                          else
                          {
                            if (v60 >= v125)
                              v60 %= v125;
                            if (v60 != v58)
                              break;
                          }
                          v53 = **(double **)&v53;
                        }
                        while (v53 != 0.0);
                      }
                    }
                  }
LABEL_119:
                  v53 = COERCE_DOUBLE(operator new(0x50uLL));
                  v148 = v53;
                  v116 = v52 + 2;
                  *(_QWORD *)&v149 = v52 + 2;
                  **(_QWORD **)&v53 = 0;
                  *(_QWORD *)(*(_QWORD *)&v53 + 8) = v128;
                  *(_BYTE *)(*(_QWORD *)&v53 + 16) = type;
                  *(_BYTE *)(*(_QWORD *)&v53 + 17) = level;
                  *(_QWORD *)(*(_QWORD *)&v53 + 20) = v117;
                  __p = 0uLL;
                  *(_QWORD *)(*(_QWORD *)&v53 + 40) = 0;
                  *(_QWORD *)(*(_QWORD *)&v53 + 48) = 0;
                  *(_QWORD *)(*(_QWORD *)&v53 + 56) = 0;
                  *(_QWORD *)(*(_QWORD *)&v53 + 64) = 0;
                  *(_DWORD *)(*(_QWORD *)&v53 + 72) = 1065353216;
                  LOBYTE(v150) = 1;
                  v62 = (float)(unint64_t)(v52[3] + 1);
                  v63 = *((float *)v52 + 8);
                  prime = v125;
                  v65 = v120;
                  if (!v125 || (float)(v63 * (float)v125) < v62)
                  {
                    v66 = (v125 & (v125 - 1)) != 0;
                    if (v125 < 3)
                      v66 = 1;
                    v67 = v66 | (2 * v125);
                    v68 = vcvtps_u32_f32(v62 / v63);
                    if (v67 <= v68)
                      prime = v68;
                    else
                      prime = v67;
                    if (prime == 1)
                    {
                      prime = 2;
                    }
                    else if ((prime & (prime - 1)) != 0)
                    {
                      prime = std::__next_prime(prime);
                    }
                    v126 = (int8x8_t)v52[1];
                    if (prime > *(_QWORD *)&v126)
                    {
LABEL_131:
                      if (prime >> 61)
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      v69 = operator new(8 * prime);
                      v70 = (void *)*v52;
                      *v52 = (uint64_t)v69;
                      if (v70)
                        operator delete(v70);
                      v71 = 0;
                      v52[1] = prime;
                      do
                        *(_QWORD *)(*v52 + 8 * v71++) = 0;
                      while (prime != v71);
                      v72 = (_QWORD *)*v116;
                      if (!*v116)
                        goto LABEL_174;
                      v73 = v72[1];
                      v74 = prime - 1;
                      if ((prime & (prime - 1)) == 0)
                      {
                        v75 = v73 & v74;
                        *(_QWORD *)(*v52 + 8 * v75) = v116;
                        for (ii = (_QWORD *)*v72; *v72; ii = (_QWORD *)*v72)
                        {
                          v77 = ii[1] & v74;
                          if (v77 == v75)
                          {
                            v72 = ii;
                          }
                          else if (*(_QWORD *)(*v52 + 8 * v77))
                          {
                            *v72 = *ii;
                            v78 = 8 * v77;
                            *ii = **(_QWORD **)(*v52 + v78);
                            **(_QWORD **)(*v52 + v78) = ii;
                          }
                          else
                          {
                            *(_QWORD *)(*v52 + 8 * v77) = v72;
                            v72 = ii;
                            v75 = v77;
                          }
                        }
                        goto LABEL_174;
                      }
                      if (v73 >= prime)
                        v73 %= prime;
                      *(_QWORD *)(*v52 + 8 * v73) = v116;
                      v82 = (_QWORD *)*v72;
                      if (!*v72)
                      {
LABEL_174:
                        v65 = v128;
                        goto LABEL_175;
                      }
                      while (2)
                      {
                        v84 = v82[1];
                        if (v84 >= prime)
                          v84 %= prime;
                        if (v84 != v73)
                        {
                          if (!*(_QWORD *)(*v52 + 8 * v84))
                          {
                            *(_QWORD *)(*v52 + 8 * v84) = v72;
LABEL_159:
                            v72 = v82;
                            v82 = (_QWORD *)*v82;
                            v73 = v84;
                            if (!v82)
                              goto LABEL_174;
                            continue;
                          }
                          *v72 = *v82;
                          v83 = 8 * v84;
                          *v82 = **(_QWORD **)(*v52 + v83);
                          **(_QWORD **)(*v52 + v83) = v82;
                          v82 = v72;
                        }
                        break;
                      }
                      v84 = v73;
                      goto LABEL_159;
                    }
                    if (prime >= *(_QWORD *)&v126)
                    {
                      prime = v52[1];
                      v65 = v128;
                    }
                    else
                    {
                      v79 = vcvtps_u32_f32((float)(unint64_t)v52[3] / *((float *)v52 + 8));
                      if (*(_QWORD *)&v126 < 3uLL
                        || (v80 = (uint8x8_t)vcnt_s8(v126), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
                      {
                        v79 = std::__next_prime(v79);
                      }
                      else
                      {
                        v81 = 1 << -(char)__clz(v79 - 1);
                        if (v79 >= 2)
                          v79 = v81;
                      }
                      if (prime <= v79)
                        prime = v79;
                      if (prime >= *(_QWORD *)&v126)
                      {
                        prime = v52[1];
                        goto LABEL_174;
                      }
                      if (prime)
                        goto LABEL_131;
                      v85 = (void *)*v52;
                      *v52 = 0;
                      v65 = v128;
                      if (v85)
                        operator delete(v85);
                      prime = 0;
                      v52[1] = 0;
                    }
LABEL_175:
                    if ((prime & (prime - 1)) != 0)
                    {
                      if (v65 >= prime)
                        v65 %= prime;
                    }
                    else
                    {
                      v65 &= prime - 1;
                    }
                  }
                  v86 = *v52;
                  v87 = *(_QWORD **)(*v52 + 8 * v65);
                  if (v87)
                  {
                    **(_QWORD **)&v53 = *v87;
                    goto LABEL_187;
                  }
                  **(_QWORD **)&v53 = *v116;
                  *(double *)v116 = v53;
                  *(_QWORD *)(v86 + 8 * v65) = v116;
                  if (**(_QWORD **)&v53)
                  {
                    v88 = *(_QWORD *)(**(_QWORD **)&v53 + 8);
                    if ((prime & (prime - 1)) != 0)
                    {
                      if (v88 >= prime)
                        v88 %= prime;
                    }
                    else
                    {
                      v88 &= prime - 1;
                    }
                    v87 = (_QWORD *)(*v52 + 8 * v88);
LABEL_187:
                    *(double *)v87 = v53;
                  }
                  ++v52[3];
LABEL_189:
                  if ((_QWORD)__p)
                    operator delete((void *)__p);
                }
                std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(*(_QWORD *)&v53 + 40, v165, (uint64_t)v165);
                goto LABEL_192;
              }
LABEL_20:
              v13 = v124;
            }
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
}

void sub_19F445B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&STACK[0x298]);
  std::pair<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>::~pair((uint64_t)&a44);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void sub_19F445B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;
  void *v58;

  v58 = *(void **)(v56 - 128);
  if (!v58)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v56 - 120) = v58;
  operator delete(v58);
  _Unwind_Resume(exception_object);
}

void md::FlyoverTileDataRequester::resolveTile(md::FlyoverTileDataRequester *this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int level;
  int32x2_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *((_QWORD *)this + 15);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 624));
  level = a2->_level;
  *(_BYTE *)a3 = a2->_type;
  *(_BYTE *)(a3 + 1) = level;
  v7 = *(int32x2_t *)&a2->_yIdx;
  *(int32x2_t *)(a3 + 4) = v7;
  if (level)
  {
    do
    {
      v8 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(v5 + 640), (unsigned __int8 *)a3);
      if (!v8)
        break;
      v9 = *(uint64_t **)(v5 + 688);
      v10 = (uint64_t *)v8[5];
      if (v9 != v10)
      {
        v11 = (uint64_t *)v10[1];
        if (v11 != v9)
        {
          v12 = *v10;
          *(_QWORD *)(v12 + 8) = v11;
          *(_QWORD *)v10[1] = v12;
          v13 = *v9;
          *(_QWORD *)(v13 + 8) = v10;
          *v10 = v13;
          *v9 = (uint64_t)v10;
          v10[1] = (uint64_t)v9;
          v9 = *(uint64_t **)(v5 + 688);
        }
      }
      if (v9 == (uint64_t *)(v5 + 680))
        break;
      *(_BYTE *)(a3 + 1) = --level;
      v7 = vshr_n_s32(v7, 1uLL);
      *(int32x2_t *)(a3 + 4) = v7;
    }
    while ((_BYTE)level);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 624));
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::CommonMesh::Pos2Mesh::~Pos2Mesh(ggl::CommonMesh::Pos2Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::CommonMesh::Pos2Mesh::~Pos2Mesh(ggl::CommonMesh::Pos2Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2Mesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2Mesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

ggl::CommonMesh::Pos2Mesh *ggl::CommonMesh::Pos2Mesh::Pos2Mesh(ggl::CommonMesh::Pos2Mesh *this, const char *a2)
{
  unsigned __int8 v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v29;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *zone;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *v37;
  uint64_t v38;
  geo::read_write_lock *v39;
  const char *v40;
  malloc_zone_t *v41;
  int v42;
  uint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  malloc_zone_t *v46;

  if ((v4 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
    unk_1ECE43A80 = 1;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E42BBC08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E42BBC28;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
  *((_QWORD *)this + 8) = 0;
  v5 = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  {
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v30 + 24) = "GeoGL";
    *(_OWORD *)(v30 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v30 = &off_1E42B5668;
    *(_QWORD *)(v30 + 8) = "GeoGL";
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_OWORD *)(v30 + 232) = 0u;
    *(_QWORD *)(v30 + 248) = 0;
    *(_OWORD *)(v30 + 56) = 0u;
    v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
    if ((_DWORD)v31)
      geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v30 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v30;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v7;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v34 + 24) = "GeoGL";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "GeoGL";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    v37 = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = v37;
    malloc_set_zone_name(v37, "GeoGL");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v34;
  }
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *(_QWORD *)this = &off_1E42BD138;
  *((_QWORD *)this + 2) = &unk_1E42BD158;
  v8 = *((_QWORD *)this + 8);
  v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v10 = *((_QWORD *)this + 9);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *((_QWORD *)this + 9) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v12);
  }
  *(_QWORD *)this = &off_1E42B57E8;
  *((_QWORD *)this + 2) = &unk_1E42B5808;
  if (a2)
    v17 = a2;
  else
    v17 = "/VertexData";
  {
    v38 = operator new();
    *(_QWORD *)(v38 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v38 + 24) = "GeoGL";
    *(_OWORD *)(v38 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v38 = &off_1E42B5668;
    *(_QWORD *)(v38 + 8) = "GeoGL";
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(_OWORD *)(v38 + 104) = 0u;
    *(_OWORD *)(v38 + 120) = 0u;
    *(_OWORD *)(v38 + 136) = 0u;
    *(_OWORD *)(v38 + 152) = 0u;
    *(_OWORD *)(v38 + 168) = 0u;
    *(_OWORD *)(v38 + 184) = 0u;
    *(_OWORD *)(v38 + 200) = 0u;
    *(_OWORD *)(v38 + 216) = 0u;
    *(_OWORD *)(v38 + 232) = 0u;
    *(_QWORD *)(v38 + 248) = 0;
    *(_OWORD *)(v38 + 56) = 0u;
    v39 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v38 + 56), 0);
    if ((_DWORD)v39)
      geo::read_write_lock::logFailure(v39, (uint64_t)"initialization", v40);
    v41 = malloc_create_zone(0, 0);
    *(_QWORD *)(v38 + 48) = v41;
    malloc_set_zone_name(v41, "GeoGL");
    *(_QWORD *)(v38 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v38;
  }
  v19 = ggl::Allocator::instance(void)::alloc;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v20 = &off_1E42DF808;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = &off_1E42B5748;
  v21 = v20 + 32;
  *(_QWORD *)(v20 + 40) = 8;
  *(_DWORD *)(v20 + 48) = 6;
  v22 = 0uLL;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_QWORD *)(v20 + 120) = 0;
  if ((v23 & 1) == 0)
  {
    v22 = 0uLL;
    if (v42)
    {
      v43 = operator new();
      *(_QWORD *)(v43 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v43 + 24) = "GeoGL";
      *(_OWORD *)(v43 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v43 = &off_1E42B5668;
      *(_QWORD *)(v43 + 8) = "GeoGL";
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 168) = 0u;
      *(_OWORD *)(v43 + 184) = 0u;
      *(_OWORD *)(v43 + 200) = 0u;
      *(_OWORD *)(v43 + 216) = 0u;
      *(_OWORD *)(v43 + 232) = 0u;
      *(_QWORD *)(v43 + 248) = 0;
      *(_OWORD *)(v43 + 56) = 0u;
      v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v43 + 56), 0);
      if ((_DWORD)v44)
        geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
      v46 = malloc_create_zone(0, 0);
      *(_QWORD *)(v43 + 48) = v46;
      malloc_set_zone_name(v46, "GeoGL");
      *(_QWORD *)(v43 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v43;
      v21 = v20 + 32;
      v22 = 0uLL;
    }
  }
  *(_QWORD *)(v20 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v20 + 136) = 0;
  *(_OWORD *)(v20 + 200) = v22;
  *(_OWORD *)(v20 + 184) = v22;
  *(_OWORD *)(v20 + 168) = v22;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = -1;
  *(_OWORD *)(v20 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 240) = v17;
  *(_QWORD *)(v20 + 248) = &ggl::CommonMesh::bufferPos2Reflection;
  *(_QWORD *)(v20 + 32) = &off_1E42B74E0;
  *(_QWORD *)(v20 + 232) = &unk_1E42B7500;
  v24 = *(uint64_t **)v5;
  v25 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 8);
  *v24 = v21;
  v24[1] = v20;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return this;
}

void std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  v10 = v8 - *(_QWORD *)a1;
  if (a4 <= v10 >> 4)
  {
    v16 = *(char **)(a1 + 8);
    v17 = (v16 - v9) >> 4;
    if (v17 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          v27 = *v6;
          v26 = v6[1];
          if (v26)
          {
            v28 = (unint64_t *)(v26 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v27;
          *((_QWORD *)v9 + 1) = v26;
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != a3);
        v16 = *(char **)(a1 + 8);
      }
      while (v16 != v9)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v16 -= 16;
      }
      *(_QWORD *)(a1 + 8) = v9;
    }
    else
    {
      v18 = &a2[2 * v17];
      if (v16 != v9)
      {
        do
        {
          v20 = *v6;
          v19 = v6[1];
          if (v19)
          {
            v21 = (unint64_t *)(v19 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v20;
          *((_QWORD *)v9 + 1) = v19;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != v18);
        v9 = *(char **)(a1 + 8);
      }
      v41 = v9;
      if (v18 != a3)
      {
        v41 = v9;
        do
        {
          if (v41)
          {
            v42 = v18[1];
            *(_QWORD *)v41 = *v18;
            *((_QWORD *)v41 + 1) = v42;
            if (v42)
            {
              v43 = (unint64_t *)(v42 + 8);
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
          }
          v18 += 2;
          v41 += 16;
        }
        while (v18 != a3);
      }
      *(_QWORD *)(a1 + 8) = v41;
    }
  }
  else
  {
    if (v9)
    {
      v11 = *(char **)(a1 + 8);
      if (v11 == v9)
      {
        v12 = *(char **)a1;
      }
      else
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 16;
        }
        while (v11 != v9);
        v12 = *(char **)a1;
        v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v12, v10);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v33 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v33 = a4;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
      abort();
    v36 = 2 * v35;
    v37 = (uint64_t *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v35, 8);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      if (v37)
      {
        v38 = v6[1];
        *v37 = *v6;
        v37[1] = v38;
        if (v38)
        {
          v39 = (unint64_t *)(v38 + 8);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
  }
}

uint64_t ggl::CommonMesh::Pos2Mesh::Pos2Mesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
      unk_1ECE43A80 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BD138;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD158;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42B57E8;
  *(_QWORD *)(a1 + 16) = &unk_1E42B5808;
  return a1;
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::CommonMesh::Pos4Mesh::~Pos4Mesh(ggl::CommonMesh::Pos4Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::CommonMesh::Pos4Mesh::~Pos4Mesh(ggl::CommonMesh::Pos4Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4Mesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4Mesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

ggl::CommonMesh::Pos4Mesh *ggl::CommonMesh::Pos4Mesh::Pos4Mesh(ggl::CommonMesh::Pos4Mesh *this, const char *a2)
{
  unsigned __int8 v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v29;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *zone;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *v37;
  uint64_t v38;
  geo::read_write_lock *v39;
  const char *v40;
  malloc_zone_t *v41;
  int v42;
  uint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  malloc_zone_t *v46;

  if ((v4 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
    unk_1ECE43AA8 = 1;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E42BBC08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E42BBC28;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
  *((_QWORD *)this + 8) = 0;
  v5 = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  {
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v30 + 24) = "GeoGL";
    *(_OWORD *)(v30 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v30 = &off_1E42B5668;
    *(_QWORD *)(v30 + 8) = "GeoGL";
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_OWORD *)(v30 + 232) = 0u;
    *(_QWORD *)(v30 + 248) = 0;
    *(_OWORD *)(v30 + 56) = 0u;
    v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
    if ((_DWORD)v31)
      geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v30 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v30;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v7;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v34 + 24) = "GeoGL";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "GeoGL";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    v37 = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = v37;
    malloc_set_zone_name(v37, "GeoGL");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v34;
  }
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *(_QWORD *)this = &off_1E42BD178;
  *((_QWORD *)this + 2) = &unk_1E42BD198;
  v8 = *((_QWORD *)this + 8);
  v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v10 = *((_QWORD *)this + 9);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *((_QWORD *)this + 9) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v12);
  }
  *(_QWORD *)this = &off_1E42B5828;
  *((_QWORD *)this + 2) = &unk_1E42B5848;
  if (a2)
    v17 = a2;
  else
    v17 = "/VertexData";
  {
    v38 = operator new();
    *(_QWORD *)(v38 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v38 + 24) = "GeoGL";
    *(_OWORD *)(v38 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v38 = &off_1E42B5668;
    *(_QWORD *)(v38 + 8) = "GeoGL";
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(_OWORD *)(v38 + 104) = 0u;
    *(_OWORD *)(v38 + 120) = 0u;
    *(_OWORD *)(v38 + 136) = 0u;
    *(_OWORD *)(v38 + 152) = 0u;
    *(_OWORD *)(v38 + 168) = 0u;
    *(_OWORD *)(v38 + 184) = 0u;
    *(_OWORD *)(v38 + 200) = 0u;
    *(_OWORD *)(v38 + 216) = 0u;
    *(_OWORD *)(v38 + 232) = 0u;
    *(_QWORD *)(v38 + 248) = 0;
    *(_OWORD *)(v38 + 56) = 0u;
    v39 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v38 + 56), 0);
    if ((_DWORD)v39)
      geo::read_write_lock::logFailure(v39, (uint64_t)"initialization", v40);
    v41 = malloc_create_zone(0, 0);
    *(_QWORD *)(v38 + 48) = v41;
    malloc_set_zone_name(v41, "GeoGL");
    *(_QWORD *)(v38 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v38;
  }
  v19 = ggl::Allocator::instance(void)::alloc;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v20 = &off_1E42DF878;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 32) = &off_1E42B5748;
  v21 = v20 + 32;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 40) = 16;
  *(_DWORD *)(v20 + 48) = 6;
  v22 = 0uLL;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_QWORD *)(v20 + 120) = 0;
  if ((v23 & 1) == 0)
  {
    v22 = 0uLL;
    v21 = v20 + 32;
    if (v42)
    {
      v43 = operator new();
      *(_QWORD *)(v43 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v43 + 24) = "GeoGL";
      *(_OWORD *)(v43 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v43 = &off_1E42B5668;
      *(_QWORD *)(v43 + 8) = "GeoGL";
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 168) = 0u;
      *(_OWORD *)(v43 + 184) = 0u;
      *(_OWORD *)(v43 + 200) = 0u;
      *(_OWORD *)(v43 + 216) = 0u;
      *(_OWORD *)(v43 + 232) = 0u;
      *(_QWORD *)(v43 + 248) = 0;
      *(_OWORD *)(v43 + 56) = 0u;
      v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v43 + 56), 0);
      if ((_DWORD)v44)
        geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
      v46 = malloc_create_zone(0, 0);
      *(_QWORD *)(v43 + 48) = v46;
      malloc_set_zone_name(v46, "GeoGL");
      *(_QWORD *)(v43 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v43;
      v21 = v20 + 32;
      v22 = 0uLL;
    }
  }
  *(_QWORD *)(v20 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v20 + 136) = 0;
  *(_OWORD *)(v20 + 200) = v22;
  *(_OWORD *)(v20 + 184) = v22;
  *(_OWORD *)(v20 + 168) = v22;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = -1;
  *(_OWORD *)(v20 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 240) = v17;
  *(_QWORD *)(v20 + 248) = &ggl::CommonMesh::bufferPos4Reflection;
  *(_QWORD *)(v20 + 32) = &off_1E42B7520;
  *(_QWORD *)(v20 + 232) = &unk_1E42B7540;
  v24 = *(uint64_t **)v5;
  v25 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 8);
  *v24 = v21;
  v24[1] = v20;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return this;
}

uint64_t ggl::CommonMesh::Pos4Mesh::Pos4Mesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
      unk_1ECE43AA8 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BD178;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD198;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42B5828;
  *(_QWORD *)(a1 + 16) = &unk_1E42B5848;
  return a1;
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::CommonMesh::Pos2UVMesh::~Pos2UVMesh(ggl::CommonMesh::Pos2UVMesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2UVMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2UVMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

ggl::CommonMesh::Pos2UVMesh *ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh(ggl::CommonMesh::Pos2UVMesh *this, const char *a2)
{
  unsigned __int8 v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v29;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *zone;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *v37;
  uint64_t v38;
  geo::read_write_lock *v39;
  const char *v40;
  malloc_zone_t *v41;
  int v42;
  uint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  malloc_zone_t *v46;

  if ((v4 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
    unk_1ECE43AC8 = 1;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E42BBC08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E42BBC28;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
  *((_QWORD *)this + 8) = 0;
  v5 = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  {
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v30 + 24) = "GeoGL";
    *(_OWORD *)(v30 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v30 = &off_1E42B5668;
    *(_QWORD *)(v30 + 8) = "GeoGL";
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_OWORD *)(v30 + 232) = 0u;
    *(_QWORD *)(v30 + 248) = 0;
    *(_OWORD *)(v30 + 56) = 0u;
    v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
    if ((_DWORD)v31)
      geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v30 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v30;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v7;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v34 + 24) = "GeoGL";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "GeoGL";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    v37 = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = v37;
    malloc_set_zone_name(v37, "GeoGL");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v34;
  }
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *(_QWORD *)this = &off_1E42BD1F8;
  *((_QWORD *)this + 2) = &unk_1E42BD218;
  v8 = *((_QWORD *)this + 8);
  v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v10 = *((_QWORD *)this + 9);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *((_QWORD *)this + 9) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v12);
  }
  *(_QWORD *)this = &off_1E42B5768;
  *((_QWORD *)this + 2) = &unk_1E42B5788;
  if (a2)
    v17 = a2;
  else
    v17 = "/VertexData";
  {
    v38 = operator new();
    *(_QWORD *)(v38 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v38 + 24) = "GeoGL";
    *(_OWORD *)(v38 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v38 = &off_1E42B5668;
    *(_QWORD *)(v38 + 8) = "GeoGL";
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(_OWORD *)(v38 + 104) = 0u;
    *(_OWORD *)(v38 + 120) = 0u;
    *(_OWORD *)(v38 + 136) = 0u;
    *(_OWORD *)(v38 + 152) = 0u;
    *(_OWORD *)(v38 + 168) = 0u;
    *(_OWORD *)(v38 + 184) = 0u;
    *(_OWORD *)(v38 + 200) = 0u;
    *(_OWORD *)(v38 + 216) = 0u;
    *(_OWORD *)(v38 + 232) = 0u;
    *(_QWORD *)(v38 + 248) = 0;
    *(_OWORD *)(v38 + 56) = 0u;
    v39 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v38 + 56), 0);
    if ((_DWORD)v39)
      geo::read_write_lock::logFailure(v39, (uint64_t)"initialization", v40);
    v41 = malloc_create_zone(0, 0);
    *(_QWORD *)(v38 + 48) = v41;
    malloc_set_zone_name(v41, "GeoGL");
    *(_QWORD *)(v38 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v38;
  }
  v19 = ggl::Allocator::instance(void)::alloc;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v20 = &off_1E42DF8E8;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 32) = &off_1E42B5748;
  v21 = v20 + 32;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 40) = 16;
  *(_DWORD *)(v20 + 48) = 6;
  v22 = 0uLL;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_QWORD *)(v20 + 120) = 0;
  if ((v23 & 1) == 0)
  {
    v22 = 0uLL;
    v21 = v20 + 32;
    if (v42)
    {
      v43 = operator new();
      *(_QWORD *)(v43 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v43 + 24) = "GeoGL";
      *(_OWORD *)(v43 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v43 = &off_1E42B5668;
      *(_QWORD *)(v43 + 8) = "GeoGL";
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 168) = 0u;
      *(_OWORD *)(v43 + 184) = 0u;
      *(_OWORD *)(v43 + 200) = 0u;
      *(_OWORD *)(v43 + 216) = 0u;
      *(_OWORD *)(v43 + 232) = 0u;
      *(_QWORD *)(v43 + 248) = 0;
      *(_OWORD *)(v43 + 56) = 0u;
      v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v43 + 56), 0);
      if ((_DWORD)v44)
        geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
      v46 = malloc_create_zone(0, 0);
      *(_QWORD *)(v43 + 48) = v46;
      malloc_set_zone_name(v46, "GeoGL");
      *(_QWORD *)(v43 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v43;
      v21 = v20 + 32;
      v22 = 0uLL;
    }
  }
  *(_QWORD *)(v20 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v20 + 136) = 0;
  *(_OWORD *)(v20 + 200) = v22;
  *(_OWORD *)(v20 + 184) = v22;
  *(_OWORD *)(v20 + 168) = v22;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = -1;
  *(_OWORD *)(v20 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 240) = v17;
  *(_QWORD *)(v20 + 248) = &ggl::CommonMesh::bufferPos2UVReflection;
  *(_QWORD *)(v20 + 32) = &off_1E42B7560;
  *(_QWORD *)(v20 + 232) = &unk_1E42B7580;
  v24 = *(uint64_t **)v5;
  v25 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 8);
  *v24 = v21;
  v24[1] = v20;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return this;
}

uint64_t ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BD1F8;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD218;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42B5768;
  *(_QWORD *)(a1 + 16) = &unk_1E42B5788;
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::CommonMesh::Pos4UVMesh::~Pos4UVMesh(ggl::CommonMesh::Pos4UVMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::CommonMesh::Pos4UVMesh::~Pos4UVMesh(ggl::CommonMesh::Pos4UVMesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4UVMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4UVMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE585510 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BD238;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD258;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42B57A8;
  *(_QWORD *)(a1 + 16) = &unk_1E42B57C8;
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E429E318;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E429E318;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

void md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::reset(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  char v45;

  v2 = a1[16];
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v5 = 0;
  }
  else
  {
    v5 = v3[3];
    v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  md::FlyoverRenderResources::prunePools(v10);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  md::DaVinciGroundRenderResources::prunePools(v11);
  v12 = (gdc::Registry *)a1[15];
  if (v12)
  {
    v13 = gdc::Registry::create(v12);
    v14 = (uint64_t *)gdc::Registry::storage<md::ls::RequestReset>(a1[15]);
    v45 = 0;
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v14, v13, &v45);
    v15 = (_QWORD *)a1[18];
    v16 = (_QWORD *)a1[19];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v44 = a1[19];
      while (1)
      {
        cleanup(a1[16], a1[15], v15[1]);
        v20 = (void (***)(_QWORD))*v15;
        if (*v15)
        {
          v21 = a1[17];
          if (*(_QWORD *)(v21 + 16))
          {
            (**v20)(*v15);
            *v20 = *(void (***)(_QWORD))(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
          }
        }
        if (v19 >= v18)
          break;
        *(_QWORD *)v19 = v15[1];
        v19 += 8;
LABEL_17:
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)a1[18];
          goto LABEL_51;
        }
      }
      v22 = (v19 - v17) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v18 - v17) >> 2 > v23)
        v23 = (v18 - v17) >> 2;
      if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15[1];
      v27 = v26 + 8;
      if (v19 != v17)
      {
        v28 = v19 - 8 - v17;
        if (v28 >= 0x168)
        {
          if (&v25[v19 - v17 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v19 - v17 - 8])
          {
            v29 = v19;
          }
          else if (&v19[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
          {
            v29 = v19;
          }
          else if ((unint64_t)(v17 - v25) >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v29 = &v19[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            v32 = &v25[8 * v22 - 16];
            v33 = v19 - 16;
            v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v26 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_36;
          }
          else
          {
            v29 = v19;
          }
        }
        else
        {
          v29 = v19;
        }
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v29 != v17);
      }
LABEL_36:
      v18 = &v25[8 * v24];
      if (v17)
        operator delete(v17);
      v17 = v26;
      v19 = v27;
      v16 = (_QWORD *)v44;
      goto LABEL_17;
    }
    v19 = 0;
    v17 = 0;
LABEL_51:
    a1[19] = (uint64_t)v15;
    a1[30] = a1[29];
    a1[27] = a1[26];
    if (a1[24])
    {
      v36 = (_BYTE *)a1[23];
      if (v36)
      {
        do
        {
          if (v36[112])
            v36[112] = 0;
          v42 = *(_BYTE **)v36;
          v43 = (void *)*((_QWORD *)v36 + 4);
          if (v43 != *((void **)v36 + 6))
            free(v43);
          operator delete(v36);
          v36 = v42;
        }
        while (v42);
      }
      a1[23] = 0;
      v37 = a1[22];
      if (v37)
      {
        for (i = 0; i != v37; ++i)
          *(_QWORD *)(a1[21] + 8 * i) = 0;
      }
      a1[24] = 0;
    }
    if (v17 != v19)
    {
      v39 = a1[15];
      v40 = (unint64_t *)v17;
      do
      {
        v41 = *v40++;
        gdc::Registry::destroy(v39, v41);
      }
      while (v40 != (unint64_t *)v19);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_19F449A94(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciGround>]";
  v4[3] = 66;
  v4[4] = result;
  *v4 = &off_1E42B14F0;
  v4[1] = 0xF20ACC1C64F7EF84;
  *a2 = v4;
  return result;
}

void sub_19F449B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0xF20ACC1C64F7EF84 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::runBeforeLayout(_QWORD *a1, md::LayoutContext *a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  md::VKMRenderResourcesStore *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t **i;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t **j;
  int v51;
  BOOL v52;
  unint64_t v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t **k;
  BOOL v71;
  int v72;
  BOOL v73;
  unint64_t v74;
  _BOOL4 v75;
  _BOOL4 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t **m;
  int v88;
  BOOL v89;
  unint64_t v90;
  _BOOL4 v91;
  int v92;
  _BOOL4 v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  char *v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  double *v106;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  char *v110;
  char *v111;
  void *v112;
  char *v113;
  int64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  void (***v128)(_QWORD);
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const double *v151;
  double *v152;
  double *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  void *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t **v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double *v204;
  uint64_t v205;
  const double *v206;
  const double *v207;
  double *v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  void *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  double v216;
  double v217;
  uint64_t v218;
  char v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  uint64_t *v233;
  unint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t (***v245)(_QWORD);
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  int8x8_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  char v262;
  _BYTE *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  _BYTE *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  size_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  __int128 *v279;
  unint64_t v280;
  __int128 v281;
  uint64_t v282;
  _BYTE *v283;
  char *v284;
  uint64_t *v285;
  uint64_t v286;
  char *v287;
  char v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  char v302;
  unsigned int v303;
  void *v304;
  char v305;
  void *v306;
  uint64_t *v307;
  _QWORD *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t *v321;
  uint64_t *HasTileSharedStyleCamera;
  uint64_t *v323;
  uint64_t *v324;
  _QWORD *v325;
  char v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t v330;
  _BYTE *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  size_t v337;
  char *v338;
  char *v339;
  char *v340;
  _QWORD *n;
  uint64_t v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  void *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t v356;
  void *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t v365;
  void *v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t *v369;
  uint64_t *v370;
  uint64_t *v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t v376;
  void *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  void *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t *v388;
  uint64_t *v389;
  float v390;
  uint64_t *v391;
  __int128 v392;
  uint64_t *v393;
  uint64_t *v394;
  uint64_t *v395;
  uint64_t *v396;
  uint64_t *v397;
  char v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t *v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  BOOL v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t ***v434;
  char *v435;
  void *v436;
  gdc::Registry *v437;
  unint64_t v438;
  uint64_t *v439;
  uint64_t *v440;
  char *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  int v446;
  unint64_t v447;
  uint64_t **ii;
  BOOL v449;
  int v450;
  BOOL v451;
  unint64_t v452;
  _BOOL4 v453;
  _BOOL4 v454;
  unint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  char *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  int v463;
  unint64_t v464;
  uint64_t **jj;
  _BOOL4 v466;
  int v467;
  BOOL v468;
  unint64_t v469;
  _BOOL4 v470;
  _BOOL4 v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t result;
  uint64_t *v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t (***v481)(_QWORD);
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  md::LayoutContext *v491;
  uint64_t *v492;
  int v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t **v496;
  uint64_t *v497;
  md::VKMRenderResourcesStore *v498;
  _QWORD *v499;
  _QWORD *v500;
  char **v501;
  std::__shared_weak_count *v502;
  md::VKMRenderResourcesStore *v503;
  md::VKMRenderResourcesStore *v504;
  uint64_t **v505;
  uint64_t v506;
  uint64_t v507;
  __int128 v508;
  char v509;
  void *__p[2];
  __int128 v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  std::__shared_weak_count *v516;
  uint64_t v517;
  std::__shared_weak_count *v518;
  uint64_t v519;
  std::__shared_weak_count *v520;
  uint64_t v521;
  std::__shared_weak_count *v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  uint64_t v525;
  std::__shared_weak_count *v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  uint64_t v529;
  std::__shared_weak_count *v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  uint64_t v533;
  std::__shared_weak_count *v534;
  gdc::Registry *v535;
  char v536;
  __int16 v537;
  char v538;
  unsigned int v539;
  unsigned int v540;
  int v541;
  __int16 v542;
  char v543;
  uint64_t v544;
  std::__shared_weak_count *v545;
  _OWORD v546[2];
  __int128 v547;
  float64x2x2_t v548;
  float64x2x2_t v549;
  float64x2x2_t v550;
  float64x2x2_t v551;

  v5 = a1;
  v492 = *a3;
  v6 = a1[15];
  v7 = (uint64_t **)*((_QWORD *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v511 = 0;
  v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    v8 = v9 - 5;
  }
  v11 = (void (***)(_QWORD))v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v496 = v7;
  (**v11)(v11);
  v491 = a2;
  v494 = v6;
  v16 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(v6);
  v17 = (md::VKMRenderResourcesStore *)v16[7];
  v498 = (md::VKMRenderResourcesStore *)v16[8];
  v500 = v5;
  if (v17 != v498)
  {
    v18 = v5 + 21;
    v501 = (char **)(v5 + 29);
    v19 = v16[10];
    v505 = (uint64_t **)(v19 + 8);
    while (1)
    {
      v503 = v17;
      v25 = (_QWORD *)v5[18];
      v26 = (_QWORD *)v5[19];
LABEL_20:
      while (v25 != v26)
      {
        v27 = *(_QWORD *)(*v25 + 384);
        v28 = *(std::__shared_weak_count **)(*v25 + 392);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = *(unsigned __int8 *)(*v25 + 48);
          do
            v32 = __ldxr(v29);
          while (__stxr(v32 + 1, v29));
          for (i = *(uint64_t ***)(v19 + 8); i; i = (uint64_t **)*i)
          {
LABEL_33:
            v35 = *((unsigned __int8 *)i + 48);
            v36 = *((char *)i + 48) > (char)v31;
            v37 = (unint64_t)i[4];
            if (v31 == v35)
              v36 = v27 < v37;
            if (!v36)
            {
              v38 = v37 < v27;
              if (v31 == v35)
                v39 = v38;
              else
                v39 = (char)v35 < (char)v31;
              if (!v39)
              {
                v34 = 1;
                if (v28)
                  goto LABEL_41;
                goto LABEL_48;
              }
              ++i;
            }
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(*v25 + 48);
          i = *(uint64_t ***)(v19 + 8);
          if (i)
            goto LABEL_33;
        }
        v34 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v27 + 16)) != 0;
        if (v28)
        {
LABEL_41:
          v40 = (unint64_t *)&v28->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 - 1, v40));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
LABEL_48:
        if (!v34)
        {
          while (1)
          {
            v43 = v26;
            v26 -= 2;
            if (v25 == v26)
              goto LABEL_80;
            v44 = *(_QWORD *)(*v26 + 384);
            v45 = *(std::__shared_weak_count **)(*v26 + 392);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
              v48 = *(unsigned __int8 *)(*v26 + 48);
              do
                v49 = __ldxr(v46);
              while (__stxr(v49 + 1, v46));
            }
            else
            {
              v48 = *(unsigned __int8 *)(*v26 + 48);
            }
            for (j = v505; ; ++j)
            {
              do
              {
                j = (uint64_t **)*j;
                if (!j)
                {
                  v56 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v44 + 16)) != 0;
                  if (!v45)
                    goto LABEL_50;
                  goto LABEL_72;
                }
                v51 = *((unsigned __int8 *)j + 48);
                v52 = *((char *)j + 48) > (char)v48;
                v53 = (unint64_t)j[4];
                if (v48 == v51)
                  v52 = v44 < v53;
              }
              while (v52);
              v54 = v53 < v44;
              v55 = v48 == v51 ? v54 : (char)v51 < (char)v48;
              if (v55 != 1)
                break;
            }
            v56 = 1;
            if (!v45)
              goto LABEL_50;
LABEL_72:
            v57 = (unint64_t *)&v45->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
            do
              v59 = __ldaxr(v57);
            while (__stlxr(v59 - 1, v57));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
LABEL_50:
            if (v56)
            {
              v60 = *v25;
              *v25 = *(v43 - 2);
              *(v43 - 2) = v60;
              v61 = v25[1];
              v25[1] = *(v43 - 1);
              *(v43 - 1) = v61;
              v25 += 2;
              goto LABEL_20;
            }
          }
        }
        v25 += 2;
      }
LABEL_80:
      v63 = (_QWORD *)v500[18];
      v62 = v500[19];
LABEL_81:
      while (v63 != (_QWORD *)v62)
      {
        v64 = *(_QWORD *)(*v63 + 384);
        v65 = *(std::__shared_weak_count **)(*v63 + 392);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          v68 = *(unsigned __int8 *)(*v63 + 48);
          do
            v69 = __ldxr(v66);
          while (__stxr(v69 + 1, v66));
          for (k = *(uint64_t ***)(v19 + 8); k; k = (uint64_t **)*k)
          {
LABEL_94:
            v72 = *((unsigned __int8 *)k + 48);
            v73 = *((char *)k + 48) > (char)v68;
            v74 = (unint64_t)k[4];
            if (v68 == v72)
              v73 = v64 < v74;
            if (!v73)
            {
              v75 = v74 < v64;
              if (v68 == v72)
                v76 = v75;
              else
                v76 = (char)v72 < (char)v68;
              if (!v76)
              {
                v71 = 1;
                if (v65)
                  goto LABEL_102;
                goto LABEL_109;
              }
              ++k;
            }
          }
        }
        else
        {
          v68 = *(unsigned __int8 *)(*v63 + 48);
          k = *(uint64_t ***)(v19 + 8);
          if (k)
            goto LABEL_94;
        }
        v71 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v64 + 16)) != 0;
        if (v65)
        {
LABEL_102:
          v77 = (unint64_t *)&v65->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          do
            v79 = __ldaxr(v77);
          while (__stlxr(v79 - 1, v77));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
LABEL_109:
        if (!v71)
        {
          while (1)
          {
            v80 = v62;
            v62 -= 16;
            if (v63 == (_QWORD *)v62)
              break;
            v81 = *(_QWORD *)(*(_QWORD *)v62 + 384);
            v82 = *(std::__shared_weak_count **)(*(_QWORD *)v62 + 392);
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldxr(v83);
              while (__stxr(v84 + 1, v83));
              v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
              do
                v86 = __ldxr(v83);
              while (__stxr(v86 + 1, v83));
            }
            else
            {
              v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
            }
            for (m = v505; ; ++m)
            {
              do
              {
                m = (uint64_t **)*m;
                if (!m)
                {
                  v93 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v81 + 16)) != 0;
                  if (!v82)
                    goto LABEL_111;
                  goto LABEL_133;
                }
                v88 = *((unsigned __int8 *)m + 48);
                v89 = *((char *)m + 48) > (char)v85;
                v90 = (unint64_t)m[4];
                if (v85 == v88)
                  v89 = v81 < v90;
              }
              while (v89);
              v91 = v90 < v81;
              v92 = v85 == v88 ? v91 : (char)v88 < (char)v85;
              if (v92 != 1)
                break;
            }
            v93 = 1;
            if (!v82)
              goto LABEL_111;
LABEL_133:
            v94 = (unint64_t *)&v82->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
            do
              v96 = __ldaxr(v94);
            while (__stlxr(v96 - 1, v94));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
LABEL_111:
            if (v93)
            {
              v97 = *v63;
              *v63 = *(_QWORD *)(v80 - 16);
              *(_QWORD *)(v80 - 16) = v97;
              v98 = v63[1];
              v63[1] = *(_QWORD *)(v80 - 8);
              *(_QWORD *)(v80 - 8) = v98;
              v63 += 2;
              goto LABEL_81;
            }
          }
          v62 = (unint64_t)v63;
          break;
        }
        v63 += 2;
      }
      v99 = (__int128 *)v500[19];
      v100 = (char *)v99 - v62;
      v101 = (uint64_t)((uint64_t)v99 - v62) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v501, v500[30], v62, v99, v101);
      if ((__int128 *)v62 == v99)
        goto LABEL_149;
      v103 = v500[18];
      v102 = (double *)v500[19];
      v104 = v62 - v103;
      v105 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
      v106 = &v105[2 * v101];
      if (v106 != v102)
        break;
LABEL_148:
      v500[19] = v105;
LABEL_149:
      v110 = (char *)v500[29];
      v20 = (char *)v500[30];
      if (v20 != v110)
      {
        do
        {
          v111 = (char *)__p[1];
          if (__p[1] >= (void *)v511)
          {
            v113 = (char *)__p[0];
            v114 = (char *)__p[1] - (char *)__p[0];
            v115 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61)
              abort();
            v117 = v511 - (unint64_t)__p[0];
            if ((uint64_t)(v511 - (unint64_t)__p[0]) >> 2 > v116)
              v116 = v117 >> 2;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
              v118 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              if (v118 >> 61)
LABEL_659:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v119 = operator new(8 * v118);
            }
            else
            {
              v119 = 0;
            }
            v120 = &v119[8 * v115];
            *v120 = *((_QWORD *)v110 + 1);
            v112 = v120 + 1;
            if (v111 == v113)
            {
              v113 = v111;
            }
            else
            {
              v121 = v111 - 8 - v113;
              if (v121 < 0x58)
                goto LABEL_666;
              if ((unint64_t)(v111 - &v119[v114]) < 0x20)
                goto LABEL_666;
              v122 = (v121 >> 3) + 1;
              v123 = &v119[8 * v115 - 16];
              v124 = v111 - 16;
              v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 32;
                v125 -= 4;
              }
              while (v125);
              v120 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
              v111 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
              if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_666:
                do
                {
                  v127 = *((_QWORD *)v111 - 1);
                  v111 -= 8;
                  *--v120 = v127;
                }
                while (v111 != v113);
                v113 = (char *)__p[0];
              }
            }
            __p[0] = v120;
            __p[1] = v112;
            *(_QWORD *)&v511 = &v119[8 * v118];
            if (v113)
              operator delete(v113);
          }
          else
          {
            *(_QWORD *)__p[1] = *((_QWORD *)v110 + 1);
            v112 = v111 + 8;
          }
          __p[1] = v112;
          v128 = *(void (****)(_QWORD))v110;
          if (*(_QWORD *)v110)
          {
            v129 = v500[17];
            if (*(_QWORD *)(v129 + 16))
            {
              (**v128)(*(_QWORD *)v110);
              *v128 = *(void (***)(_QWORD))(v129 + 40);
              *(_QWORD *)(v129 + 40) = v128;
            }
          }
          v110 += 16;
        }
        while (v110 != v20);
        v20 = *v501;
      }
      v5 = v500;
      v21 = v500[18];
      v22 = (uint64_t *)v500[19];
      v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      v500[30] = v20;
      if (v22 == (uint64_t *)v21)
        v24 = 0;
      else
        v24 = v23;
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v21, v22, v24, 1);
      v19 += 24;
      v17 = (md::VKMRenderResourcesStore *)((char *)v503 + 8);
      v505 += 3;
      if ((md::VKMRenderResourcesStore *)((char *)v503 + 8) == v498)
        goto LABEL_219;
    }
    v107 = v104 & 0xFFFFFFFFFFFFFFF0;
    v108 = (char *)v102 - &v100[v103 + (v104 & 0xFFFFFFFFFFFFFFF0)] - 16;
    if (v108 >= 0x270)
    {
      v130 = v107 + (v108 & 0xFFFFFFFFFFFFFFF0);
      v131 = v103 + (v130 | 8);
      v132 = v103 + (v107 | 8);
      v133 = v130 + v103 + 16;
      v134 = &v100[v107 + v103];
      v135 = &v134[v108 & 0xFFFFFFFFFFFFFFF0];
      v136 = (unint64_t)(v135 + 8);
      v137 = (unint64_t)(v134 + 8);
      v138 = (unint64_t)(v135 + 16);
      v140 = v105 < (double *)v135 + 1 && (unint64_t)v106 < v131;
      v142 = (unint64_t)v105 < v138 && v137 < v131;
      v144 = v132 < v136 && (unint64_t)v106 < v133;
      v146 = v132 < v138 && v137 < v133;
      if (v132 >= v131 || (unint64_t)v105 >= v133)
      {
        if (v140)
        {
          v109 = v105;
        }
        else if (v142)
        {
          v109 = v105;
        }
        else if (v144)
        {
          v109 = v105;
        }
        else if (v146)
        {
          v109 = v105;
        }
        else
        {
          v148 = (v108 >> 4) + 1;
          v149 = 2 * (v148 & 0x1FFFFFFFFFFFFFFCLL);
          v109 = &v105[v149];
          v150 = v148 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v151 = &v105[2 * v101];
            v548 = vld2q_f64(v151);
            v151 += 4;
            v550 = vld2q_f64(v151);
            v152 = v105 + 8;
            vst2q_f64(v105, v548);
            v153 = v105 + 4;
            vst2q_f64(v153, v550);
            v105 = v152;
            v150 -= 4;
          }
          while (v150);
          if (v148 == (v148 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_147;
          v106 = (double *)((char *)v106 + v149 * 8);
        }
      }
      else
      {
        v109 = v105;
      }
    }
    else
    {
      v109 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *v109 = *v106;
      v109[1] = v106[1];
      v109 += 2;
      v106 += 2;
    }
    while (v106 != v102);
LABEL_147:
    v105 = v109;
    goto LABEL_148;
  }
LABEL_219:
  v154 = *v496;
  v155 = v496[1];
  if (*v496 == v155)
  {
    v156 = v494;
  }
  else
  {
    v156 = v494;
    while (*v154 != 0x41D4E9297E100630)
    {
      v154 += 5;
      if (v154 == v155)
        goto LABEL_232;
    }
  }
  if (v154 != v155)
  {
    v157 = (std::__shared_weak_count *)v154[4];
    if (v157)
    {
      v158 = (unint64_t *)&v157->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
      do
        v160 = __ldaxr(v158);
      while (__stlxr(v160 - 1, v158));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
  }
LABEL_232:
  v161 = *v496;
  v162 = v496[1];
  if (*v496 != v162)
  {
    while (*v161 != 0x4EDAD23DFB014132)
    {
      v161 += 5;
      if (v161 == v162)
        goto LABEL_243;
    }
  }
  if (v161 != v162)
  {
    v163 = (std::__shared_weak_count *)v161[4];
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
      do
        v166 = __ldaxr(v164);
      while (__stlxr(v166 - 1, v164));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
  }
LABEL_243:
  v167 = *v496;
  v168 = v496[1];
  if (*v496 != v168)
  {
    while (*v167 != 0x348A0B0E758C07C2)
    {
      v167 += 5;
      if (v167 == v168)
        goto LABEL_254;
    }
  }
  if (v167 != v168)
  {
    v169 = (std::__shared_weak_count *)v167[4];
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      do
        v172 = __ldaxr(v170);
      while (__stlxr(v172 - 1, v170));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
LABEL_254:
  v173 = __p[0];
  if (__p[1] != __p[0])
  {
    v174 = 0;
    v175 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v496, v156, v173[v174++]);
      v173 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v174);
    while (v175 != __p[1])
    {
      v176 = *v175++;
      gdc::Registry::destroy(v156, v176);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v156);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v156);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  md::LayoutContext::frameState(v491);
  v493 = *(unsigned __int8 *)(v177 + 128);
  v178 = (uint64_t *)v5[15];
  v488 = *((_QWORD *)v491 + 2);
  v179 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>((uint64_t)v178);
  v180 = v179[7];
  v487 = v179[8];
  if (v180 != v487)
  {
    v181 = (_QWORD *)v179[10];
    v497 = v178 + 15;
    v499 = v5 + 21;
    while (1)
    {
      v182 = (void *)v5[26];
      v5[27] = v182;
      v183 = v181[2];
      if (v183 > (uint64_t)(v5[28] - (_QWORD)v182) >> 4)
      {
        if (v183 >> 60)
          goto LABEL_663;
        v184 = 16 * v183;
        v185 = (char *)operator new(16 * v183);
        v5[26] = v185;
        v5[27] = v185;
        v5[28] = &v185[v184];
        if (v182)
          operator delete(v182);
      }
      v186 = *(_QWORD **)v488;
      v187 = *(_QWORD **)(v488 + 8);
      v490 = v180;
      if (*(_QWORD **)v488 != v187)
      {
        while (*v186 != 0x41D4E9297E100630)
        {
          v186 += 5;
          if (v186 == v187)
            goto LABEL_280;
        }
      }
      if (v186 == v187)
      {
LABEL_280:
        v504 = 0;
      }
      else
      {
        v188 = (std::__shared_weak_count *)v186[4];
        v504 = (md::VKMRenderResourcesStore *)v186[3];
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
          do
            v191 = __ldaxr(v189);
          while (__stlxr(v191 - 1, v189));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      v489 = v181;
      v192 = (_QWORD *)*v181;
      v495 = v181 + 1;
      if ((_QWORD *)*v181 != v181 + 1)
        break;
LABEL_264:
      v181 = v489 + 3;
      v180 = v490 + 8;
      if (v490 + 8 == v487)
        goto LABEL_576;
    }
    while (1)
    {
      v193 = v192[4];
      v194 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v499, (unsigned __int8 *)(v193 + 16));
      if (!v194)
        goto LABEL_313;
      v195 = v194;
      v197 = (_QWORD *)v5[18];
      v196 = (_QWORD *)v5[19];
      if (v197 == v196)
      {
        v198 = v5[18];
      }
      else
      {
        v198 = v5[18];
        while (*(uint64_t **)v198 != v194[16]
             || *(unsigned __int16 *)(v198 + 8) != *((unsigned __int16 *)v194 + 68)
             || *(unsigned __int16 *)(v198 + 10) != *((unsigned __int16 *)v194 + 69)
             || *(_DWORD *)(v198 + 12) != *((_DWORD *)v194 + 35))
        {
          v198 += 16;
          if ((_QWORD *)v198 == v196)
          {
            v198 = v5[19];
            break;
          }
        }
      }
      v199 = (_QWORD *)(v198 + 16);
      if ((_QWORD *)(v198 + 16) != v196)
      {
        v200 = (unint64_t)v196 - v198 - 32;
        if (v200 >= 0x30)
        {
          v201 = (v198 - (uint64_t)v197) >> 4;
          v202 = (v200 >> 4) + 1;
          v203 = 16 * (v202 & 0x1FFFFFFFFFFFFFFCLL);
          v198 += v203;
          v204 = (double *)&v197[2 * v201 + 4];
          v205 = v202 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v206 = v204 - 2;
            v549 = vld2q_f64(v206);
            v207 = v204 + 2;
            v551 = vld2q_f64(v207);
            v208 = v204 - 4;
            vst2q_f64(v208, v549);
            vst2q_f64(v204, v551);
            v204 += 8;
            v205 -= 4;
          }
          while (v205);
          if (v202 == (v202 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_302;
          v199 = (_QWORD *)((char *)v199 + v203);
        }
        do
        {
          *(_QWORD *)v198 = *v199;
          *(_QWORD *)(v198 + 8) = v199[1];
          v198 += 16;
          v199 += 2;
        }
        while (v199 != v196);
      }
LABEL_302:
      v5[19] = v198;
      v209 = v194[16];
      if (v209)
      {
        v210 = v5[17];
        if (*(_QWORD *)(v210 + 16))
        {
          (*(void (**)(uint64_t *))*v209)(v194[16]);
          *v209 = *(_QWORD *)(v210 + 40);
          *(_QWORD *)(v210 + 40) = v209;
        }
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v499, v195);
      v211 = __p[0];
      if (__p[0])
      {
        if ((_BYTE)v511)
        {
          if (*((_BYTE *)__p[0] + 112))
            *((_BYTE *)__p[0] + 112) = 0;
          v212 = (void *)v211[4];
          if (v212 != (void *)v211[6])
            free(v212);
        }
        operator delete(v211);
      }
      v193 = v192[4];
LABEL_313:
      v213 = v192[5];
      *(_QWORD *)&v547 = v193;
      *((_QWORD *)&v547 + 1) = v213;
      if (v213)
      {
        v214 = (unint64_t *)(v213 + 8);
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
      }
      LOWORD(v546[0]) = *(_WORD *)(v193 + 168);
      *(_QWORD *)((char *)v546 + 4) = *(_QWORD *)(v193 + 172);
      v216 = *(double *)(v193 + 600);
      v217 = *(double *)(v193 + 608);
      md::GeometryContext::transformConstantData((double *)&v544, v492, (unsigned __int8 *)v546, v493, v216, v217);
      v218 = v5[17];
      v219 = *((_BYTE *)v192 + 48);
      v220 = *(_QWORD **)(v218 + 40);
      if (!v220)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab((uint64_t **)v5[17]);
        v220 = *(_QWORD **)(v218 + 40);
      }
      *(_QWORD *)(v218 + 40) = *v220;
      v506 = md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v220, (uint64_t *)&v547, v219, (v493 - 1) < 3u, &v544);
      v221 = gdc::Registry::create((gdc::Registry *)v178);
      v222 = v221;
      v224 = (uint64_t *)v5[27];
      v223 = v5[28];
      if ((unint64_t)v224 >= v223)
      {
        v226 = (uint64_t *)v5[26];
        v227 = ((char *)v224 - (char *)v226) >> 4;
        v228 = v227 + 1;
        if ((unint64_t)(v227 + 1) >> 60)
          goto LABEL_658;
        v229 = v223 - (_QWORD)v226;
        if (v229 >> 3 > v228)
          v228 = v229 >> 3;
        if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF0)
          v230 = 0xFFFFFFFFFFFFFFFLL;
        else
          v230 = v228;
        if (v230)
        {
          if (v230 >> 60)
            goto LABEL_659;
          v231 = (char *)operator new(16 * v230);
        }
        else
        {
          v231 = 0;
        }
        v232 = (uint64_t *)&v231[16 * v227];
        *v232 = v506;
        v232[1] = v222;
        v233 = v232;
        if (v224 != v226)
        {
          do
          {
            *((_OWORD *)v233 - 1) = *((_OWORD *)v224 - 1);
            v233 -= 2;
            v224 -= 2;
          }
          while (v224 != v226);
          v224 = (uint64_t *)v5[26];
        }
        v225 = v232 + 2;
        v5[26] = v233;
        v5[27] = v232 + 2;
        v5[28] = &v231[16 * v230];
        if (v224)
          operator delete(v224);
      }
      else
      {
        *v224 = v506;
        v224[1] = v221;
        v225 = v224 + 2;
      }
      v5[27] = v225;
      v235 = (uint64_t *)v5[19];
      v234 = v5[20];
      if ((unint64_t)v235 >= v234)
      {
        v237 = (uint64_t *)v5[18];
        v238 = ((char *)v235 - (char *)v237) >> 4;
        v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60)
LABEL_658:
          abort();
        v240 = v234 - (_QWORD)v237;
        if (v240 >> 3 > v239)
          v239 = v240 >> 3;
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0)
          v241 = 0xFFFFFFFFFFFFFFFLL;
        else
          v241 = v239;
        if (v241)
        {
          if (v241 >> 60)
            goto LABEL_659;
          v242 = (char *)operator new(16 * v241);
        }
        else
        {
          v242 = 0;
        }
        v243 = (uint64_t *)&v242[16 * v238];
        *v243 = v506;
        v243[1] = v222;
        v244 = v243;
        if (v235 != v237)
        {
          do
          {
            *((_OWORD *)v244 - 1) = *((_OWORD *)v235 - 1);
            v244 -= 2;
            v235 -= 2;
          }
          while (v235 != v237);
          v235 = (uint64_t *)v5[18];
        }
        v236 = v243 + 2;
        v5[18] = v244;
        v5[19] = v243 + 2;
        v5[20] = &v242[16 * v241];
        if (v235)
          operator delete(v235);
      }
      else
      {
        *v235 = v506;
        v235[1] = v222;
        v236 = v235 + 2;
      }
      v5[19] = v236;
      if ((_QWORD)v547)
        v245 = (uint64_t (***)(_QWORD))(v547 + 632);
      else
        v245 = 0;
      v502 = (std::__shared_weak_count *)*((_QWORD *)&v547 + 1);
      if (*((_QWORD *)&v547 + 1))
      {
        v246 = (unint64_t *)(*((_QWORD *)&v547 + 1) + 8);
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
      }
      v248 = (**v245)(v245);
      __p[0] = (void *)md::VKMRenderResourcesStore::createRenderableRegistryHandle(v504, v248);
      v249 = (uint64_t *)gdc::Registry::storage<md::ls::RegisterHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v249, v222, __p);
      *(_QWORD *)&v508 = 0xC06C33A2DD1B3385;
      v250 = (int8x8_t)v178[16];
      if (v250)
      {
        v251 = (uint8x8_t)vcnt_s8(v250);
        v251.i16[0] = vaddlv_u8(v251);
        if (v251.u32[0] > 1uLL)
        {
          v252 = 0xC06C33A2DD1B3385;
          if (*(_QWORD *)&v250 <= 0xC06C33A2DD1B3385)
            v252 = 0xC06C33A2DD1B3385 % *(_QWORD *)&v250;
        }
        else
        {
          v252 = (*(_QWORD *)&v250 - 1) & 0xC06C33A2DD1B3385;
        }
        v253 = *(_QWORD **)(*v497 + 8 * v252);
        if (v253)
        {
          v254 = (_QWORD *)*v253;
          if (v254)
          {
            if (v251.u32[0] < 2uLL)
            {
              v255 = *(_QWORD *)&v250 - 1;
              while (1)
              {
                v257 = v254[1];
                if (v257 == 0xC06C33A2DD1B3385)
                {
                  if (v254[2] == 0xC06C33A2DD1B3385)
                    goto LABEL_403;
                }
                else if ((v257 & v255) != v252)
                {
                  goto LABEL_378;
                }
                v254 = (_QWORD *)*v254;
                if (!v254)
                  goto LABEL_378;
              }
            }
            do
            {
              v256 = v254[1];
              if (v256 == 0xC06C33A2DD1B3385)
              {
                if (v254[2] == 0xC06C33A2DD1B3385)
                {
LABEL_403:
                  v258 = v254[3];
                  goto LABEL_381;
                }
              }
              else
              {
                if (v256 >= *(_QWORD *)&v250)
                  v256 %= *(_QWORD *)&v250;
                if (v256 != v252)
                  break;
              }
              v254 = (_QWORD *)*v254;
            }
            while (v254);
          }
        }
      }
LABEL_378:
      v258 = operator new();
      *(_QWORD *)(v258 + 16) = "md::ls::MapDataTypeT<md::MapDataType::DaVinciGround>]";
      *(_QWORD *)(v258 + 24) = 52;
      *(_OWORD *)(v258 + 32) = 0u;
      *(_OWORD *)(v258 + 48) = 0u;
      *(_OWORD *)(v258 + 64) = 0u;
      *(_OWORD *)(v258 + 80) = 0u;
      *(_OWORD *)(v258 + 96) = 0u;
      *(_OWORD *)(v258 + 112) = 0u;
      *(_OWORD *)(v258 + 128) = 0u;
      *(_DWORD *)(v258 + 144) = 1065353216;
      *(_OWORD *)(v258 + 152) = 0u;
      *(_OWORD *)(v258 + 168) = 0u;
      *(_QWORD *)(v258 + 184) = 0;
      *(_DWORD *)(v258 + 192) = 1065353216;
      *(_OWORD *)(v258 + 200) = 0u;
      *(_OWORD *)(v258 + 216) = 0u;
      *(_QWORD *)(v258 + 232) = 0;
      *(_DWORD *)(v258 + 240) = 1065353216;
      *(_QWORD *)v258 = &off_1E4271298;
      *(_QWORD *)(v258 + 8) = 0xC06C33A2DD1B3385;
      *(_QWORD *)(v258 + 248) = v178;
      v259 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v497, 0xC06C33A2DD1B3385, &v508);
      v260 = v259[3];
      v259[3] = v258;
      if (v260)
        (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
      __p[0] = (void *)0xC06C33A2DD1B3385;
      __p[1] = "md::ls::MapDataTypeT<md::MapDataType::DaVinciGround>]";
      *(_QWORD *)&v511 = 52;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v178, 0xC06C33A2DD1B3385, (uint64_t)__p, (uint64_t *)(v258 + 104));
LABEL_381:
      v531 = v222;
      v261 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v258 + 32), (uint64_t)&v531);
      if ((v262 & 1) != 0)
      {
        v268 = *(_BYTE **)(v258 + 88);
        v267 = *(_QWORD *)(v258 + 96);
        if ((unint64_t)v268 < v267)
        {
          *v268 = 0;
          v269 = (uint64_t)(v268 + 1);
LABEL_418:
          *(_QWORD *)(v258 + 88) = v269;
          v264 = *(_QWORD *)(v258 + 248);
          goto LABEL_419;
        }
        v270 = *(_BYTE **)(v258 + 80);
        v271 = v268 - v270;
        v272 = v268 - v270 + 1;
        if (v272 < 0)
          abort();
        v273 = v267 - (_QWORD)v270;
        if (2 * v273 > v272)
          v272 = 2 * v273;
        if (v273 >= 0x3FFFFFFFFFFFFFFFLL)
          v274 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v274 = v272;
        if (v274)
          v275 = (char *)operator new(v274);
        else
          v275 = 0;
        v276 = &v275[v271];
        v275[v271] = 0;
        v269 = (uint64_t)&v275[v271 + 1];
        if (v268 == v270)
          goto LABEL_416;
        if (v271 >= 8 && (unint64_t)(v270 - v275) >= 0x20)
        {
          if (v271 < 0x20)
          {
            v277 = 0;
LABEL_408:
            v282 = v277 - (v271 & 0xFFFFFFFFFFFFFFF8);
            v283 = &v268[-v277];
            v284 = &v275[&v268[-v277] - v270 - 8];
            v285 = (uint64_t *)(v283 - 8);
            do
            {
              v286 = *v285--;
              *(_QWORD *)v284 = v286;
              v284 -= 8;
              v282 += 8;
            }
            while (v282);
            if (v271 != (v271 & 0xFFFFFFFFFFFFFFF8))
            {
              v276 -= v271 & 0xFFFFFFFFFFFFFFF8;
              v268 -= v271 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_413;
            }
LABEL_415:
            v276 = v275;
LABEL_416:
            *(_QWORD *)(v258 + 80) = v276;
            *(_QWORD *)(v258 + 88) = v269;
            *(_QWORD *)(v258 + 96) = &v275[v274];
            if (v270)
              operator delete(v270);
            goto LABEL_418;
          }
          v277 = v271 & 0xFFFFFFFFFFFFFFE0;
          v278 = &v275[v271 - 16];
          v279 = (__int128 *)(v268 - 16);
          v280 = v271 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v281 = *v279;
            *((_OWORD *)v278 - 1) = *(v279 - 1);
            *(_OWORD *)v278 = v281;
            v278 -= 32;
            v279 -= 2;
            v280 -= 32;
          }
          while (v280);
          if (v271 == v277)
            goto LABEL_415;
          if ((v271 & 0x18) != 0)
            goto LABEL_408;
          v276 -= v277;
          v268 -= v277;
        }
LABEL_413:
        v287 = v276 - 1;
        do
        {
          v288 = *--v268;
          *v287-- = v288;
        }
        while (v268 != v270);
        goto LABEL_415;
      }
      v263 = (_BYTE *)(*(_QWORD *)(v258 + 80) + (((uint64_t)v261 - *(_QWORD *)(v258 + 56)) >> 3));
      *v263 = 0;
      v264 = *(_QWORD *)(v258 + 248);
      if (v263 != *(_BYTE **)(v258 + 88))
      {
        v265 = *(_QWORD **)(v258 + 128);
        if (v265)
        {
          while (1)
          {
            __p[0] = &v531;
            __p[1] = (void *)1;
            *(_QWORD *)&v508 = v264;
            v266 = v265[6];
            if (!v266)
              goto LABEL_656;
            (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v266 + 48))(v266, &v508, __p);
            v265 = (_QWORD *)*v265;
            if (!v265)
              goto LABEL_422;
          }
        }
        goto LABEL_422;
      }
LABEL_419:
      v289 = *(_QWORD **)(v258 + 176);
      if (v289)
      {
        while (1)
        {
          __p[0] = &v531;
          __p[1] = (void *)1;
          *(_QWORD *)&v508 = v264;
          v290 = v289[6];
          if (!v290)
            break;
          (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v290 + 48))(v290, &v508, __p);
          v289 = (_QWORD *)*v289;
          if (!v289)
            goto LABEL_422;
        }
LABEL_656:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_663:
        abort();
      }
LABEL_422:
      LOWORD(__p[0]) = 33;
      v291 = (uint64_t *)gdc::Registry::storage<md::ls::MapDataTypeV>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(v291, v222, __p);
      __p[0] = (void *)((uint64_t)(v5[19] - v5[18]) >> 4);
      v292 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v292, v222, __p);
      LODWORD(__p[0]) = 0;
      v511 = 0uLL;
      __p[1] = 0;
      v293 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablesCount>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(v293, v222, (uint64_t)__p);
      if (__p[1])
        operator delete(__p[1]);
      v294 = (uint64_t *)gdc::Registry::storage<md::ls::WillEnterView>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v294, v222);
      v295 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)33>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v295, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(v504, (md::BaseMapTileDataRenderable *)v506);
      v296 = (uint64_t *)gdc::Registry::storage<md::ls::BaseMapTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v296, v222, __p);
      v297 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v297, v222);
      LOBYTE(__p[0]) = *(_BYTE *)(v506 + 24);
      v298 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v298, v222, __p);
      v543 = 0;
      v542 = 0;
      v300 = DWORD1(v546[0]);
      v299 = DWORD2(v546[0]);
      v301 = vcvtmd_s64_f64(v216 * 100.0);
      v302 = BYTE1(v546[0]);
      v303 = vcvtpd_s64_f64(v217 * 100.0);
      v535 = *(gdc::Registry **)((char *)v546 + 4);
      v536 = BYTE1(v546[0]);
      v537 = 0;
      v538 = 0;
      v539 = v301;
      v540 = v303;
      v541 = 1;
      v304 = (void *)md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(v504, (int *)&v535);
      if (v305)
      {
        v306 = v304;
        __p[0] = v304;
        v307 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v307, v222, __p);
        __p[0] = v306;
        v308 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)v504 + 3272, (unint64_t)v306, __p);
        ++v308[4];
      }
      else
      {
        v309 = v544;
        v310 = v545;
        v533 = v544;
        v534 = v545;
        if (v545)
        {
          v311 = (unint64_t *)&v545->__shared_owners_;
          do
            v312 = __ldxr(v311);
          while (__stxr(v312 + 1, v311));
        }
        v313 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>((uint64_t)v504, v309, v310);
        if (v310)
        {
          v314 = (unint64_t *)&v310->__shared_owners_;
          do
            v315 = __ldaxr(v314);
          while (__stlxr(v315 - 1, v314));
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
            std::__shared_weak_count::__release_weak(v310);
          }
        }
        __p[0] = (void *)__PAIR64__(v299, v300);
        LOBYTE(__p[1]) = v302;
        *(_WORD *)((char *)&__p[1] + 1) = v542;
        BYTE3(__p[1]) = v543;
        HIDWORD(__p[1]) = v301;
        *(_QWORD *)&v511 = v303 | 0x100000000;
        *((_QWORD *)&v511 + 1) = v313;
        std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>((float *)v504 + 2656, (int *)__p, (uint64_t)__p);
        __p[0] = v313;
        v316 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v316, v222, __p);
      }
      v5 = v500;
      __p[0] = (void *)md::VKMRenderResourcesStore::createAssociationtemHandle(v504);
      v317 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v317, v222, __p);
      v318 = *(_QWORD *)(v506 + 384);
      v319 = *(_QWORD *)(v318 + 1304);
      v320 = *(void **)(v318 + 1168);
      LODWORD(__p[1]) = *(_DWORD *)(v318 + 1176);
      __p[0] = v320;
      v321 = (uint64_t *)gdc::Registry::storage<md::ls::TileUnitsPerMeter>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::emplace(v321, v222, (uint64_t *)__p);
      HasTileSharedStyleCamera = (uint64_t *)gdc::Registry::storage<md::ls::HasTileSharedStyleCameraLighting>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(HasTileSharedStyleCamera, v222);
      v323 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsShadows>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v323, v222);
      v324 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsDepthPrePass>((uint64_t)v178);
      v531 = v222;
      v325 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v324 + 4, (uint64_t)&v531);
      if ((v326 & 1) != 0)
      {
        v331 = (_BYTE *)v324[11];
        v330 = v324[12];
        if ((unint64_t)v331 >= v330)
        {
          v333 = (char *)v324[10];
          v334 = v331 - v333;
          v335 = v331 - v333 + 1;
          if (v335 < 0)
            abort();
          v336 = v330 - (_QWORD)v333;
          if (2 * v336 > v335)
            v335 = 2 * v336;
          if (v336 >= 0x3FFFFFFFFFFFFFFFLL)
            v337 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v337 = v335;
          if (v337)
            v338 = (char *)operator new(v337);
          else
            v338 = 0;
          v339 = &v338[v334];
          v332 = (uint64_t)&v338[v334 + 1];
          v340 = (char *)(v333 - v331);
          if (v333 == v331)
            v340 = 0;
          v324[10] = (uint64_t)&v340[(_QWORD)v339];
          v324[11] = v332;
          v324[12] = (uint64_t)&v338[v337];
          if (v333)
            operator delete(v333);
        }
        else
        {
          v332 = (uint64_t)(v331 + 1);
        }
        v324[11] = v332;
        v327 = v324[31];
      }
      else
      {
        v327 = v324[31];
        if (v324[10] + (((uint64_t)v325 - v324[7]) >> 3) != v324[11])
        {
          v328 = (_QWORD *)v324[16];
          if (v328)
          {
            while (1)
            {
              __p[0] = &v531;
              __p[1] = (void *)1;
              *(_QWORD *)&v508 = v327;
              v329 = v328[6];
              if (!v329)
                goto LABEL_656;
              (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v329 + 48))(v329, &v508, __p);
              v328 = (_QWORD *)*v328;
              if (!v328)
                goto LABEL_460;
            }
          }
          goto LABEL_460;
        }
      }
      for (n = (_QWORD *)v324[22]; n; n = (_QWORD *)*n)
      {
        __p[0] = &v531;
        __p[1] = (void *)1;
        *(_QWORD *)&v508 = v327;
        v342 = n[6];
        if (!v342)
          goto LABEL_656;
        (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v342 + 48))(v342, &v508, __p);
      }
LABEL_460:
      v343 = *(_QWORD *)(v506 + 400);
      v344 = *(std::__shared_weak_count **)(v506 + 408);
      v531 = v343;
      v532 = v344;
      if (v344)
      {
        v345 = (unint64_t *)&v344->__shared_owners_;
        do
          v346 = __ldxr(v345);
        while (__stxr(v346 + 1, v345));
        v530 = v344;
        do
          v347 = __ldxr(v345);
        while (__stxr(v347 + 1, v345));
      }
      else
      {
        v530 = 0;
      }
      v529 = v343;
      v348 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v504, v343, v344);
      if (v344)
      {
        v349 = (unint64_t *)&v344->__shared_owners_;
        do
          v350 = __ldaxr(v349);
        while (__stlxr(v350 - 1, v349));
        if (!v350)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
      }
      __p[0] = v348;
      v351 = (uint64_t *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v351, v222, __p);
      v352 = *(_QWORD *)(v506 + 416);
      v353 = *(std::__shared_weak_count **)(v506 + 424);
      v527 = v352;
      v528 = v353;
      if (v353)
      {
        v354 = (unint64_t *)&v353->__shared_owners_;
        do
          v355 = __ldxr(v354);
        while (__stxr(v355 + 1, v354));
        if (!v352)
          goto LABEL_487;
        v525 = v352;
        v526 = v353;
        do
          v356 = __ldxr(v354);
        while (__stxr(v356 + 1, v354));
      }
      else
      {
        if (!v352)
          goto LABEL_487;
        v353 = 0;
        v525 = v352;
        v526 = 0;
      }
      v357 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v504, v352, v353);
      if (v353)
      {
        v358 = (unint64_t *)&v353->__shared_owners_;
        do
          v359 = __ldaxr(v358);
        while (__stlxr(v359 - 1, v358));
        if (!v359)
        {
          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
          std::__shared_weak_count::__release_weak(v353);
        }
      }
      __p[0] = v357;
      v360 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v360, v222, __p);
LABEL_487:
      v361 = *(_QWORD *)(v506 + 432);
      v362 = *(std::__shared_weak_count **)(v506 + 440);
      v523 = v361;
      v524 = v362;
      if (v362)
      {
        v363 = (unint64_t *)&v362->__shared_owners_;
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
        if (!v361)
          goto LABEL_502;
        v521 = v361;
        v522 = v362;
        do
          v365 = __ldxr(v363);
        while (__stxr(v365 + 1, v363));
      }
      else
      {
        if (!v361)
          goto LABEL_502;
        v362 = 0;
        v521 = v361;
        v522 = 0;
      }
      v366 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::LinearDepth,md::VoidKeyType>((uint64_t)v504, v361, v362);
      if (v362)
      {
        v367 = (unint64_t *)&v362->__shared_owners_;
        do
          v368 = __ldaxr(v367);
        while (__stlxr(v368 - 1, v367));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
          std::__shared_weak_count::__release_weak(v362);
        }
      }
      __p[0] = v366;
      v369 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v369, v222, __p);
LABEL_502:
      v370 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsFragmentClip>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v370, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Clipping,md::VoidKeyType>((uint64_t)v504);
      v371 = (uint64_t *)gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v371, v222, __p);
      v372 = *(_QWORD *)(v506 + 448);
      v373 = *(std::__shared_weak_count **)(v506 + 456);
      v519 = v372;
      v520 = v373;
      if (v373)
      {
        v374 = (unint64_t *)&v373->__shared_owners_;
        do
          v375 = __ldxr(v374);
        while (__stxr(v375 + 1, v374));
        if (!v372)
          goto LABEL_517;
        v517 = v372;
        v518 = v373;
        do
          v376 = __ldxr(v374);
        while (__stxr(v376 + 1, v374));
      }
      else
      {
        if (!v372)
          goto LABEL_517;
        v373 = 0;
        v517 = v372;
        v518 = 0;
      }
      v377 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::StyleCameraLighting,md::VoidKeyType>((uint64_t)v504, v372, v373);
      if (v373)
      {
        v378 = (unint64_t *)&v373->__shared_owners_;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
          std::__shared_weak_count::__release_weak(v373);
        }
      }
      __p[0] = v377;
      v380 = (uint64_t *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v380, v222, __p);
LABEL_517:
      v381 = *(_QWORD *)(v506 + 216);
      v382 = *(std::__shared_weak_count **)(v506 + 224);
      v515 = v381;
      v516 = v382;
      if (v382)
      {
        v383 = (unint64_t *)&v382->__shared_owners_;
        do
          v384 = __ldxr(v383);
        while (__stxr(v384 + 1, v383));
      }
      v385 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::View,md::VoidKeyType>((uint64_t)v504, v381, v382);
      if (v382)
      {
        v386 = (unint64_t *)&v382->__shared_owners_;
        do
          v387 = __ldaxr(v386);
        while (__stlxr(v387 - 1, v386));
        if (!v387)
        {
          ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
          std::__shared_weak_count::__release_weak(v382);
        }
      }
      __p[0] = v385;
      v388 = (uint64_t *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v388, v222, __p);
      BYTE8(v511) = 1;
      v389 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::emplace(v389, v222, (uint64_t)__p);
      v390 = *(double *)(v506 + 72) - *(double *)(v506 + 56);
      *(float *)__p = v390;
      v391 = (uint64_t *)gdc::Registry::storage<md::ls::BoundsWidth>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v391, v222, __p);
      v392 = *(_OWORD *)(v506 + 72);
      *(_OWORD *)__p = *(_OWORD *)(v506 + 56);
      v511 = v392;
      v393 = (uint64_t *)gdc::Registry::storage<md::ls::TileBounds>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(v393, v222, (uint64_t)__p);
      __p[0] = (void *)md::VKMRenderResourcesStore::createSharedTileMatrix((uint64_t)v504, (__int128 *)(v506 + 88));
      v394 = (uint64_t *)gdc::Registry::storage<md::ls::TileMatrix>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v394, v222, __p);
      v512 = 0;
      v513 = 0;
      v514 = 0;
      *(_QWORD *)&v508 = md::VKMRenderResourcesStore::createRenderableData((uint64_t)v504, __p);
      v395 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v395, v222, &v508);
      LOBYTE(v508) = 0;
      v396 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v396, v222, &v508);
      if (v319)
      {
        *(_QWORD *)&v508 = v319;
        v397 = (uint64_t *)gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v397, v222, &v508);
      }
      v398 = *(_BYTE *)(v506 + 48);
      v508 = v547;
      if (*((_QWORD *)&v547 + 1))
      {
        v399 = (unint64_t *)(*((_QWORD *)&v547 + 1) + 8);
        do
          v400 = __ldxr(v399);
        while (__stxr(v400 + 1, v399));
      }
      v509 = v398;
      v401 = (uint64_t *)gdc::Registry::storage<md::ls::LayerDataReference>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::emplace(v401, v222, &v508);
      v402 = (std::__shared_weak_count *)*((_QWORD *)&v508 + 1);
      if (*((_QWORD *)&v508 + 1))
      {
        v403 = (unint64_t *)(*((_QWORD *)&v508 + 1) + 8);
        do
          v404 = __ldaxr(v403);
        while (__stlxr(v404 - 1, v403));
        if (!v404)
        {
          ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
          std::__shared_weak_count::__release_weak(v402);
        }
      }
      v405 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v405, v222);
      *(_QWORD *)&v508 = v506;
      v406 = (uint64_t *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v406, v222, &v508);
      v407 = v520;
      if (!v520)
        goto LABEL_539;
      v408 = (unint64_t *)&v520->__shared_owners_;
      do
        v409 = __ldaxr(v408);
      while (__stlxr(v409 - 1, v408));
      if (!v409)
      {
        ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
        std::__shared_weak_count::__release_weak(v407);
        v410 = v524;
        if (!v524)
          goto LABEL_545;
      }
      else
      {
LABEL_539:
        v410 = v524;
        if (!v524)
          goto LABEL_545;
      }
      v411 = (unint64_t *)&v410->__shared_owners_;
      do
        v412 = __ldaxr(v411);
      while (__stlxr(v412 - 1, v411));
      if (!v412)
      {
        ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
        std::__shared_weak_count::__release_weak(v410);
      }
LABEL_545:
      v413 = v528;
      if (!v528)
        goto LABEL_549;
      v414 = (unint64_t *)&v528->__shared_owners_;
      do
        v415 = __ldaxr(v414);
      while (__stlxr(v415 - 1, v414));
      if (!v415)
      {
        ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
        std::__shared_weak_count::__release_weak(v413);
        v416 = v532;
        if (!v532)
          goto LABEL_555;
      }
      else
      {
LABEL_549:
        v416 = v532;
        if (!v532)
          goto LABEL_555;
      }
      v417 = (unint64_t *)&v416->__shared_owners_;
      do
        v418 = __ldaxr(v417);
      while (__stlxr(v418 - 1, v417));
      if (!v418)
      {
        ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
        std::__shared_weak_count::__release_weak(v416);
      }
      if (!v502)
        goto LABEL_559;
LABEL_555:
      v419 = (unint64_t *)&v502->__shared_owners_;
      do
        v420 = __ldaxr(v419);
      while (__stlxr(v420 - 1, v419));
      if (!v420)
      {
        ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
        std::__shared_weak_count::__release_weak(v502);
        v421 = v545;
        if (!v545)
          goto LABEL_565;
      }
      else
      {
LABEL_559:
        v421 = v545;
        if (!v545)
          goto LABEL_565;
      }
      v422 = (unint64_t *)&v421->__shared_owners_;
      do
        v423 = __ldaxr(v422);
      while (__stlxr(v423 - 1, v422));
      if (!v423)
      {
        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
        std::__shared_weak_count::__release_weak(v421);
      }
LABEL_565:
      v424 = (std::__shared_weak_count *)*((_QWORD *)&v547 + 1);
      if (!*((_QWORD *)&v547 + 1))
        goto LABEL_569;
      v425 = (unint64_t *)(*((_QWORD *)&v547 + 1) + 8);
      do
        v426 = __ldaxr(v425);
      while (__stlxr(v426 - 1, v425));
      if (!v426)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
        v427 = (_QWORD *)v192[1];
        if (!v427)
        {
          do
          {
LABEL_573:
            v428 = (_QWORD *)v192[2];
            v429 = *v428 == (_QWORD)v192;
            v192 = v428;
          }
          while (!v429);
          goto LABEL_283;
        }
      }
      else
      {
LABEL_569:
        v427 = (_QWORD *)v192[1];
        if (!v427)
          goto LABEL_573;
      }
      do
      {
        v428 = v427;
        v427 = (_QWORD *)*v427;
      }
      while (v427);
LABEL_283:
      v192 = v428;
      if (v428 == v495)
        goto LABEL_264;
    }
  }
LABEL_576:
  v535 = (gdc::Registry *)v5[15];
  v430 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>((uint64_t)v535);
  v431 = v430[7];
  v507 = v430[8];
  if (v431 != v507)
  {
    v432 = v430[10];
    v433 = v5 + 21;
    v434 = (uint64_t ***)(v432 + 8);
    do
    {
      v441 = (char *)v5[18];
      v435 = (char *)v5[19];
      if (v441 == v435)
      {
        v435 = (char *)v5[18];
      }
      else
      {
        while (1)
        {
          v442 = *(_QWORD *)(*(_QWORD *)v441 + 384);
          v443 = *(std::__shared_weak_count **)(*(_QWORD *)v441 + 392);
          if (v443)
          {
            v444 = (unint64_t *)&v443->__shared_owners_;
            do
              v445 = __ldxr(v444);
            while (__stxr(v445 + 1, v444));
            v446 = *(unsigned __int8 *)(*(_QWORD *)v441 + 48);
            do
              v447 = __ldxr(v444);
            while (__stxr(v447 + 1, v444));
            for (ii = *(uint64_t ***)(v432 + 8); ii; ii = (uint64_t **)*ii)
            {
LABEL_593:
              v450 = *((unsigned __int8 *)ii + 48);
              v451 = *((char *)ii + 48) > (char)v446;
              v452 = (unint64_t)ii[4];
              if (v446 == v450)
                v451 = v442 < v452;
              if (!v451)
              {
                v453 = v452 < v442;
                if (v446 == v450)
                  v454 = v453;
                else
                  v454 = (char)v450 < (char)v446;
                if (!v454)
                {
                  v449 = 1;
                  if (v443)
                    goto LABEL_601;
                  goto LABEL_608;
                }
                ++ii;
              }
            }
          }
          else
          {
            v446 = *(unsigned __int8 *)(*(_QWORD *)v441 + 48);
            ii = *(uint64_t ***)(v432 + 8);
            if (ii)
              goto LABEL_593;
          }
          v449 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v433, (unsigned __int8 *)(v442 + 16)) != 0;
          if (v443)
          {
LABEL_601:
            v455 = (unint64_t *)&v443->__shared_owners_;
            do
              v456 = __ldaxr(v455);
            while (__stlxr(v456 - 1, v455));
            if (!v456)
            {
              ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
              std::__shared_weak_count::__release_weak(v443);
            }
            do
              v457 = __ldaxr(v455);
            while (__stlxr(v457 - 1, v455));
            if (!v457)
            {
              ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
              std::__shared_weak_count::__release_weak(v443);
            }
          }
LABEL_608:
          if (!v449)
            break;
LABEL_609:
          v441 += 16;
          v5 = v500;
          if (v441 == v435)
            goto LABEL_579;
        }
        while (1)
        {
          v458 = v435;
          v435 -= 16;
          if (v441 == v435)
            break;
          v459 = *(_QWORD *)(*(_QWORD *)v435 + 384);
          v460 = *(std::__shared_weak_count **)(*(_QWORD *)v435 + 392);
          if (v460)
          {
            v461 = (unint64_t *)&v460->__shared_owners_;
            do
              v462 = __ldxr(v461);
            while (__stxr(v462 + 1, v461));
            v463 = *(unsigned __int8 *)(*(_QWORD *)v435 + 48);
            do
              v464 = __ldxr(v461);
            while (__stxr(v464 + 1, v461));
            for (jj = *v434; jj; jj = (uint64_t **)*jj)
            {
LABEL_625:
              v467 = *((unsigned __int8 *)jj + 48);
              v468 = *((char *)jj + 48) > (char)v463;
              v469 = (unint64_t)jj[4];
              if (v463 == v467)
                v468 = v459 < v469;
              if (!v468)
              {
                v470 = v469 < v459;
                if (v463 == v467)
                  v471 = v470;
                else
                  v471 = (char)v467 < (char)v463;
                if (!v471)
                {
                  v466 = 1;
                  if (v460)
                    goto LABEL_633;
                  goto LABEL_611;
                }
                ++jj;
              }
            }
          }
          else
          {
            v463 = *(unsigned __int8 *)(*(_QWORD *)v435 + 48);
            jj = *v434;
            if (*v434)
              goto LABEL_625;
          }
          v466 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v433, (unsigned __int8 *)(v459 + 16)) != 0;
          if (v460)
          {
LABEL_633:
            v472 = (unint64_t *)&v460->__shared_owners_;
            do
              v473 = __ldaxr(v472);
            while (__stlxr(v473 - 1, v472));
            if (!v473)
            {
              ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
              std::__shared_weak_count::__release_weak(v460);
            }
            do
              v474 = __ldaxr(v472);
            while (__stlxr(v474 - 1, v472));
            if (!v474)
            {
              ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
              std::__shared_weak_count::__release_weak(v460);
            }
          }
LABEL_611:
          if (v466)
          {
            v475 = *(_QWORD *)v441;
            *(_QWORD *)v441 = *((_QWORD *)v458 - 2);
            *((_QWORD *)v458 - 2) = v475;
            v476 = *((_QWORD *)v441 + 1);
            *((_QWORD *)v441 + 1) = *((_QWORD *)v458 - 1);
            *((_QWORD *)v458 - 1) = v476;
            goto LABEL_609;
          }
        }
        v435 = v441;
        v5 = v500;
      }
LABEL_579:
      v436 = (void *)v5[19];
      v437 = v535;
      __p[0] = v435;
      __p[1] = v436;
      v546[0] = *((_OWORD *)v5 + 13);
      v438 = gdc::Registry::create(v535);
      v439 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>((uint64_t)v437);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v439, v438, __p);
      v440 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>((uint64_t)v437);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v440, v438, v546);
      v432 += 24;
      v431 += 8;
      v434 += 3;
    }
    while (v431 != v507);
  }
  result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v5[15]);
  if (*(_QWORD *)(result + 88) != *(_QWORD *)(result + 80))
  {
    v478 = *(uint64_t **)v5[16];
    if (v478 != *(uint64_t **)(v5[16] + 8) && *v478 != 0x22D45F5AAD4BF408)
    {
      v479 = v478 + 5;
      do
      {
        v480 = *v479;
        v479 += 5;
      }
      while (v480 != 0x22D45F5AAD4BF408);
      v478 = v479 - 5;
    }
    v481 = (uint64_t (***)(_QWORD))v478[3];
    v482 = (std::__shared_weak_count *)v478[4];
    if (v482)
    {
      v483 = (unint64_t *)&v482->__shared_owners_;
      do
        v484 = __ldxr(v483);
      while (__stxr(v484 + 1, v483));
      do
        v485 = __ldaxr(v483);
      while (__stlxr(v485 - 1, v483));
      if (!v485)
      {
        ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
        std::__shared_weak_count::__release_weak(v482);
      }
    }
    result = (**v481)(v481);
    **(_BYTE **)(result + 736) = 1;
  }
  *a4 = v5[15];
  return result;
}

void sub_19F44C360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC6D75D77A851F6C9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC6D75D77A851F6C9;
      if (*(_QWORD *)&v3 <= 0xC6D75D77A851F6C9)
        v5 = 0xC6D75D77A851F6C9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC6D75D77A851F6C9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC6D75D77A851F6C9)
            {
              if (v7[2] == 0xC6D75D77A851F6C9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC6D75D77A851F6C9)
          {
            if (v7[2] == 0xC6D75D77A851F6C9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 70;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2C88;
  *(_QWORD *)(v11 + 8) = 0xC6D75D77A851F6C9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC6D75D77A851F6C9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC6D75D77A851F6C9;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::DaVinciGround>]";
  v15[2] = 70;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC6D75D77A851F6C9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44C8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x10C1AF6504FA13A0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x10C1AF6504FA13A0;
      if (*(_QWORD *)&v3 <= 0x10C1AF6504FA13A0uLL)
        v5 = 0x10C1AF6504FA13A0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x10C1AF6504FA13A0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x10C1AF6504FA13A0)
            {
              if (v7[2] == 0x10C1AF6504FA13A0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x10C1AF6504FA13A0)
          {
            if (v7[2] == 0x10C1AF6504FA13A0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 64;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2A48;
  *(_QWORD *)(v11 + 8) = 0x10C1AF6504FA13A0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x10C1AF6504FA13A0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x10C1AF6504FA13A0;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::DaVinciGround>]";
  v15[2] = 64;
  gdc::Registry::_registerStorageDataSignals(a1, 0x10C1AF6504FA13A0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44CAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC0EF30C6D6B08313;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC0EF30C6D6B08313;
      if (*(_QWORD *)&v3 <= 0xC0EF30C6D6B08313)
        v5 = 0xC0EF30C6D6B08313 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC0EF30C6D6B08313;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC0EF30C6D6B08313)
            {
              if (v7[2] == 0xC0EF30C6D6B08313)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC0EF30C6D6B08313)
          {
            if (v7[2] == 0xC0EF30C6D6B08313)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>]";
  *(_QWORD *)(v11 + 24) = 56;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272408;
  *(_QWORD *)(v11 + 8) = 0xC0EF30C6D6B08313;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC0EF30C6D6B08313, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC0EF30C6D6B08313;
  v15[1] = "md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>]";
  v15[2] = 56;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC0EF30C6D6B08313, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44CD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2B8F0D3A6E65567BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2B8F0D3A6E65567BLL;
      if (*(_QWORD *)&v3 <= 0x2B8F0D3A6E65567BuLL)
        v5 = 0x2B8F0D3A6E65567BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2B8F0D3A6E65567BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2B8F0D3A6E65567BLL)
            {
              if (v7[2] == 0x2B8F0D3A6E65567BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2B8F0D3A6E65567BLL)
          {
            if (v7[2] == 0x2B8F0D3A6E65567BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>]";
  *(_QWORD *)(v11 + 24) = 59;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2A18;
  *(_QWORD *)(v11 + 8) = 0x2B8F0D3A6E65567BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2B8F0D3A6E65567BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2B8F0D3A6E65567BLL;
  v15[1] = "SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>]";
  v15[2] = 59;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2B8F0D3A6E65567BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44D0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v23 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v23);
  if ((v6 & 1) != 0)
  {
    v12 = (_OWORD *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_OWORD *)a1[10];
      v15 = v12 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = *a3;
      v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *(v12 - 1);
          v20 -= 16;
          --v12;
        }
        while (v12 != v14);
        v12 = (_OWORD *)a1[10];
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = *a3;
      v13 = v12 + 1;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_OWORD *)(a1[10] + 2 * ((_QWORD)v5 - a1[7]));
    *v7 = *a3;
    v8 = a1[31];
    if (v7 != (_OWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v25 = &v23;
          v26 = 1;
          v24 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v24, &v25);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)a1[22];
  if (v21)
  {
    while (1)
    {
      v25 = &v23;
      v26 = 1;
      v24 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v24, &v25);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4E187DDCBE232848;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4E187DDCBE232848;
      if (*(_QWORD *)&v3 <= 0x4E187DDCBE232848uLL)
        v5 = 0x4E187DDCBE232848uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4E187DDCBE232848;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4E187DDCBE232848)
            {
              if (v7[2] == 0x4E187DDCBE232848)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4E187DDCBE232848)
          {
            if (v7[2] == 0x4E187DDCBE232848)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::WillEnterView<md::DaVinciGroundRenderable>]";
  *(_QWORD *)(v11 + 24) = 59;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B29E8;
  *(_QWORD *)(v11 + 8) = 0x4E187DDCBE232848;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4E187DDCBE232848uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4E187DDCBE232848;
  v15[1] = "SceneComponents::WillEnterView<md::DaVinciGroundRenderable>]";
  v15[2] = 59;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4E187DDCBE232848, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44D490(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  int v25;
  uint64_t *v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *i;
  uint64_t ***v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t **v43;
  int v44;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v49 = (_QWORD *)v10[1];
            if (!v49)
              break;
            do
            {
              v10 = v49;
              v49 = (_QWORD *)*v49;
            }
            while (v49);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = a2;
        do
        {
          v9 = v10;
          v15 = v13[4];
          v14 = v13[5];
          if (v14)
          {
            v16 = (unint64_t *)(v14 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = (std::__shared_weak_count *)v12[5];
          v12[4] = v15;
          v12[5] = v14;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v21 = *((char *)v13 + 48);
          *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
          v22 = *v8;
          v23 = a1 + 1;
          v24 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v23 = v22;
                v25 = *((char *)v22 + 48);
                if (!(v21 == v25 ? v12[4] < (unint64_t)v22[4] : v21 < v25))
                  break;
                v22 = (uint64_t *)*v22;
                v24 = (uint64_t **)v23;
                if (!*v23)
                  goto LABEL_31;
              }
              v22 = (uint64_t *)v22[1];
            }
            while (v22);
            v24 = (uint64_t **)(v23 + 1);
          }
LABEL_31:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v23;
          *v24 = v12;
          v27 = (uint64_t *)**a1;
          if (v27)
          {
            *a1 = v27;
            v12 = *v24;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v30 = (_QWORD *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v31 = (_QWORD *)v10[1];
                  if (!v31)
                    break;
                  do
                  {
                    v10 = v31;
                    v31 = (_QWORD *)*v31;
                  }
                  while (v31);
                }
              }
              else
              {
                for (v10[1] = 0; v30; v30 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v30;
                    v30 = (_QWORD *)*v30;
                  }
                  while (v30);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v28 = (_QWORD *)v13[1];
          if (v28)
          {
            do
            {
              v4 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v29 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v29);
          }
          if (!v9)
            break;
          v12 = v9;
          v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<gdc::LayerDataWithWorld>::destroy(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<gdc::LayerDataWithWorld>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v33 = (uint64_t ***)(a1 + 1);
    do
    {
      v34 = (uint64_t *)operator new(0x38uLL);
      v35 = v34;
      v36 = v4[4];
      v37 = v4[5];
      v34[4] = v36;
      v34[5] = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *((char *)v4 + 48);
      *((_BYTE *)v34 + 48) = *((_BYTE *)v4 + 48);
      v41 = *v33;
      v42 = a1 + 1;
      v43 = a1 + 1;
      if (*v33)
      {
        do
        {
          while (1)
          {
            v42 = v41;
            v44 = *((char *)v41 + 48);
            if (!(v40 == v44 ? v36 < (unint64_t)v41[4] : v40 < v44))
              break;
            v41 = (uint64_t **)*v41;
            v43 = v42;
            if (!*v42)
              goto LABEL_73;
          }
          v41 = (uint64_t **)v41[1];
        }
        while (v41);
        v43 = v42 + 1;
      }
LABEL_73:
      *v34 = 0;
      v34[1] = 0;
      v34[2] = (uint64_t)v42;
      *v43 = v34;
      v46 = (uint64_t *)**a1;
      if (v46)
      {
        *a1 = v46;
        v35 = *v43;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v35);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v47 = (_QWORD *)v4[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (_QWORD *)v4[2];
          v29 = *v48 == (_QWORD)v4;
          v4 = v48;
        }
        while (!v29);
      }
      v4 = v48;
    }
    while (v48 != a3);
  }
}

_QWORD *gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    v8 = (_QWORD *)a1[5];
    v9 = (void *)a1[4];
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          MEMORY[0x1A1AF4E00](v10, 0x1000C40104B78CFLL);
      }
      while (v8 != v7);
      v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::Registry::storage<md::ls::RegisterHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x41650A8095FBA956;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x41650A8095FBA956;
      if (*(_QWORD *)&v3 <= 0x41650A8095FBA956uLL)
        v5 = 0x41650A8095FBA956uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x41650A8095FBA956;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x41650A8095FBA956)
            {
              if (v7[2] == 0x41650A8095FBA956)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x41650A8095FBA956)
          {
            if (v7[2] == 0x41650A8095FBA956)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RegisterHandle]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42717D8;
  *(_QWORD *)(v11 + 8) = 0x41650A8095FBA956;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x41650A8095FBA956uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x41650A8095FBA956;
  v15[1] = "md::ls::RegisterHandle]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0x41650A8095FBA956, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44DFAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v30 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v30);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)a1[10];
      v15 = (v12 - v14) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_36;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *v20 = *a3;
      v13 = v20 + 1;
      if (v12 == v14)
      {
        v14 = v12;
      }
      else
      {
        v21 = v12 - v14 - 8;
        if (v21 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v14 - v19) < 0x20)
          goto LABEL_40;
        v22 = (v21 >> 3) + 1;
        v23 = &v19[8 * v15 - 16];
        v24 = v12 - 16;
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v20 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v12 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v27 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v20 = v27;
          }
          while (v12 != v14);
          v14 = (char *)a1[10];
        }
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v19[8 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v12 = *a3;
      v13 = v12 + 8;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_QWORD *)((char *)v5 + a1[10] - a1[7]);
    *v7 = *a3;
    v8 = a1[31];
    if (v7 != (_QWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v32 = &v30;
          v33 = 1;
          v31 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v31, &v32);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v28 = (_QWORD *)a1[22];
  if (v28)
  {
    while (1)
    {
      v32 = &v30;
      v33 = 1;
      v31 = v8;
      v29 = v28[6];
      if (!v29)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v29 + 48))(v29, &v31, &v32);
      v28 = (_QWORD *)*v28;
      if (!v28)
        return;
    }
    goto LABEL_35;
  }
}

uint64_t gdc::Registry::storage<md::ls::MapDataTypeV>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x52DA3EA752368C9DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x52DA3EA752368C9DLL;
      if (*(_QWORD *)&v3 <= 0x52DA3EA752368C9DuLL)
        v5 = 0x52DA3EA752368C9DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x52DA3EA752368C9DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x52DA3EA752368C9DLL)
            {
              if (v7[2] == 0x52DA3EA752368C9DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x52DA3EA752368C9DLL)
          {
            if (v7[2] == 0x52DA3EA752368C9DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MapDataTypeV]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42713B8;
  *(_QWORD *)(v11 + 8) = 0x52DA3EA752368C9DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x52DA3EA752368C9DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x52DA3EA752368C9DLL;
  v15[1] = "md::ls::MapDataTypeV]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0x52DA3EA752368C9DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44E408(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  char v6;
  _WORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  __int16 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  v31 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)a1[10];
      v15 = v12 - v14;
      if (v12 - v14 <= -3)
        goto LABEL_35;
      v16 = v15 >> 1;
      v17 = v11 - (_QWORD)v14;
      if (v17 <= (v15 >> 1) + 1)
        v18 = v16 + 1;
      else
        v18 = v17;
      if (v17 >= 0x7FFFFFFFFFFFFFFELL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 < 0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(2 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[2 * v16];
      *v21 = *a3;
      v13 = v21 + 1;
      if (v12 != v14)
      {
        v22 = v12 - v14 - 2;
        if (v22 < 0x1E)
          goto LABEL_39;
        if (v12 - v20 - (v15 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_39;
        v23 = (v22 >> 1) + 1;
        v24 = &v20[2 * v16 - 16];
        v25 = v12 - 16;
        v26 = v23 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 16;
        }
        while (v26);
        v21 -= v23 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v23 & 0xFFFFFFFFFFFFFFF0);
        if (v23 != (v23 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_39:
          do
          {
            v28 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--v21 = v28;
          }
          while (v12 != v14);
        }
      }
      a1[10] = (uint64_t)v21;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v20[2 * v19];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_WORD *)v12 = *a3;
      v13 = v12 + 2;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_WORD *)(a1[10] + (((uint64_t)v5 - a1[7]) >> 2));
    *v7 = *a3;
    v8 = a1[31];
    if (v7 != (_WORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v33 = &v31;
          v34 = 1;
          v32 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v32, &v33);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_34:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      return;
    }
  }
  v29 = (_QWORD *)a1[22];
  if (v29)
  {
    while (1)
    {
      v33 = &v31;
      v34 = 1;
      v32 = v8;
      v30 = v29[6];
      if (!v30)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v30 + 48))(v30, &v32, &v33);
      v29 = (_QWORD *)*v29;
      if (!v29)
        return;
    }
    goto LABEL_34;
  }
}

uint64_t gdc::Registry::storage<md::ls::CheckIfReadyToProcess>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD14836FBCB6E3943;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD14836FBCB6E3943;
      if (*(_QWORD *)&v3 <= 0xD14836FBCB6E3943)
        v5 = 0xD14836FBCB6E3943 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD14836FBCB6E3943;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD14836FBCB6E3943)
            {
              if (v7[2] == 0xD14836FBCB6E3943)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD14836FBCB6E3943)
          {
            if (v7[2] == 0xD14836FBCB6E3943)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CheckIfReadyToProcess]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42727F8;
  *(_QWORD *)(v11 + 8) = 0xD14836FBCB6E3943;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD14836FBCB6E3943, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD14836FBCB6E3943;
  v15[1] = "md::ls::CheckIfReadyToProcess]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD14836FBCB6E3943, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44E854(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderablesCount>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x684A78DCF1B284C1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x684A78DCF1B284C1;
      if (*(_QWORD *)&v3 <= 0x684A78DCF1B284C1uLL)
        v5 = 0x684A78DCF1B284C1uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x684A78DCF1B284C1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x684A78DCF1B284C1)
            {
              if (v7[2] == 0x684A78DCF1B284C1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x684A78DCF1B284C1)
          {
            if (v7[2] == 0x684A78DCF1B284C1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderablesCount]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271CE8;
  *(_QWORD *)(v11 + 8) = 0x684A78DCF1B284C1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x684A78DCF1B284C1uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x684A78DCF1B284C1;
  v15[1] = "md::ls::RenderablesCount]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x684A78DCF1B284C1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44EA7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char **v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t *v51;

  v46 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v46);
  if ((v6 & 1) != 0)
  {
    v16 = a1[12];
    v17 = (char *)a1[11];
    if ((unint64_t)v17 >= v16)
    {
      v24 = (char *)a1[10];
      v25 = (v17 - v24) >> 5;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59)
        goto LABEL_44;
      v27 = v16 - (_QWORD)v24;
      if (v27 >> 4 > v26)
        v26 = v27 >> 4;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      v51 = a1 + 12;
      if (v28)
      {
        if (v28 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = (uint64_t *)operator new(32 * v28);
      }
      else
      {
        v29 = 0;
      }
      v30 = (char *)&v29[4 * v25];
      v48 = v29;
      v49 = (uint64_t)v30;
      v31 = (char *)&v29[4 * v28];
      *(_QWORD *)&v50 = v30;
      *((_QWORD *)&v50 + 1) = v31;
      *(_DWORD *)v30 = *(_DWORD *)a3;
      *((_QWORD *)v30 + 1) = 0;
      *((_QWORD *)v30 + 2) = 0;
      v32 = (char **)(v30 + 16);
      *((_QWORD *)v30 + 3) = 0;
      v34 = *(_BYTE **)(a3 + 8);
      v33 = *(_BYTE **)(a3 + 16);
      v35 = v33 - v34;
      if (v33 != v34)
      {
        if (v35 < 0)
          abort();
        v36 = (char *)operator new(v33 - v34);
        *((_QWORD *)v30 + 1) = v36;
        *v32 = v36;
        v37 = &v36[8 * (v35 >> 3)];
        *((_QWORD *)v30 + 3) = v37;
        memcpy(v36, v34, v35);
        *v32 = v37;
      }
      v23 = v30 + 32;
      *(_QWORD *)&v50 = v30 + 32;
      if (v17 == v24)
      {
        a1[10] = (uint64_t)v30;
        a1[11] = (uint64_t)v23;
        a1[12] = (uint64_t)v31;
      }
      else
      {
        v38 = 0;
        do
        {
          v39 = &v30[v38];
          v40 = &v17[v38];
          *((_DWORD *)v39 - 8) = *(_DWORD *)&v17[v38 - 32];
          *((_QWORD *)v39 - 2) = 0;
          *((_QWORD *)v39 - 1) = 0;
          *(_OWORD *)(v39 - 24) = *(_OWORD *)&v17[v38 - 24];
          *((_QWORD *)v39 - 1) = *(_QWORD *)&v17[v38 - 8];
          *((_QWORD *)v40 - 3) = 0;
          *((_QWORD *)v40 - 2) = 0;
          *((_QWORD *)v40 - 1) = 0;
          v38 -= 32;
        }
        while (&v17[v38] != v24);
        v17 = (char *)a1[10];
        v41 = (char *)a1[11];
        a1[10] = (uint64_t)&v30[v38];
        v42 = (_QWORD *)v50;
        *(_OWORD *)(a1 + 11) = v50;
        v23 = v42;
        while (v41 != v17)
        {
          v43 = (void *)*((_QWORD *)v41 - 3);
          if (v43)
          {
            *((_QWORD *)v41 - 2) = v43;
            operator delete(v43);
          }
          v41 -= 32;
        }
      }
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v17 = *(_DWORD *)a3;
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = 0;
      *((_QWORD *)v17 + 1) = 0;
      v19 = *(_BYTE **)(a3 + 8);
      v18 = *(_BYTE **)(a3 + 16);
      v20 = v18 - v19;
      if (v18 != v19)
      {
        if (v20 < 0)
          abort();
        v21 = (char *)operator new(v18 - v19);
        *((_QWORD *)v17 + 1) = v21;
        *((_QWORD *)v17 + 2) = v21;
        v22 = &v21[8 * (v20 >> 3)];
        *((_QWORD *)v17 + 3) = v22;
        memcpy(v21, v19, v20);
        *((_QWORD *)v17 + 2) = v22;
      }
      v23 = v17 + 32;
      a1[11] = (uint64_t)(v17 + 32);
    }
    a1[11] = (uint64_t)v23;
    v13 = a1[31];
  }
  else
  {
    v7 = a1[10];
    v8 = (uint64_t)v5 - a1[7];
    v9 = v8 >> 3;
    v10 = v7 + 4 * v8;
    *(_DWORD *)v10 = *(_DWORD *)a3;
    v12 = (_QWORD *)(v10 + 8);
    v11 = *(void **)(v10 + 8);
    if (v11)
    {
      *(_QWORD *)(v7 + 32 * v9 + 16) = v11;
      operator delete(v11);
      *v12 = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
    }
    *(_OWORD *)v12 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(v7 + 32 * v9 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v13 = a1[31];
    if (v10 != a1[11])
    {
      v14 = (_QWORD *)a1[16];
      if (v14)
      {
        while (1)
        {
          v48 = &v46;
          v49 = 1;
          v47 = v13;
          v15 = v14[6];
          if (!v15)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v15 + 48))(v15, &v47, &v48);
          v14 = (_QWORD *)*v14;
          if (!v14)
            return;
        }
LABEL_43:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_44:
        abort();
      }
      return;
    }
  }
  v44 = (_QWORD *)a1[22];
  if (v44)
  {
    while (1)
    {
      v48 = &v46;
      v49 = 1;
      v47 = v13;
      v45 = v44[6];
      if (!v45)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v45 + 48))(v45, &v47, &v48);
      v44 = (_QWORD *)*v44;
      if (!v44)
        return;
    }
    goto LABEL_43;
  }
}

void sub_19F44EDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<md::ls::RenderablesCount>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F44EDDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::WillEnterView>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF3801DCCD1DDBED8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF3801DCCD1DDBED8;
      if (*(_QWORD *)&v3 <= 0xF3801DCCD1DDBED8)
        v5 = 0xF3801DCCD1DDBED8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF3801DCCD1DDBED8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF3801DCCD1DDBED8)
            {
              if (v7[2] == 0xF3801DCCD1DDBED8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF3801DCCD1DDBED8)
          {
            if (v7[2] == 0xF3801DCCD1DDBED8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::WillEnterView]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42716E8;
  *(_QWORD *)(v11 + 8) = 0xF3801DCCD1DDBED8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF3801DCCD1DDBED8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF3801DCCD1DDBED8;
  v15[1] = "md::ls::WillEnterView]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF3801DCCD1DDBED8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44EFF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEC8639AAD8F442E0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEC8639AAD8F442E0;
      if (*(_QWORD *)&v3 <= 0xEC8639AAD8F442E0)
        v5 = 0xEC8639AAD8F442E0 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEC8639AAD8F442E0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEC8639AAD8F442E0)
            {
              if (v7[2] == 0xEC8639AAD8F442E0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEC8639AAD8F442E0)
          {
            if (v7[2] == 0xEC8639AAD8F442E0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataActive<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 64;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42708A8;
  *(_QWORD *)(v11 + 8) = 0xEC8639AAD8F442E0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEC8639AAD8F442E0, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEC8639AAD8F442E0;
  v15[1] = "SceneComponents::LayerDataActive<md::MapDataType::DaVinciGround>]";
  v15[2] = 64;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEC8639AAD8F442E0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44F218(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BaseMapTileHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x695C99F828CA9E84;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x695C99F828CA9E84;
      if (*(_QWORD *)&v3 <= 0x695C99F828CA9E84uLL)
        v5 = 0x695C99F828CA9E84uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x695C99F828CA9E84;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x695C99F828CA9E84)
            {
              if (v7[2] == 0x695C99F828CA9E84)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x695C99F828CA9E84)
          {
            if (v7[2] == 0x695C99F828CA9E84)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::BaseMapTileHandle]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271F58;
  *(_QWORD *)(v11 + 8) = 0x695C99F828CA9E84;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x695C99F828CA9E84uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x695C99F828CA9E84;
  v15[1] = "md::ls::BaseMapTileHandle]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x695C99F828CA9E84, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44F440(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileType>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x751B872B282C3971;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x751B872B282C3971;
      if (*(_QWORD *)&v3 <= 0x751B872B282C3971uLL)
        v5 = 0x751B872B282C3971uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x751B872B282C3971;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x751B872B282C3971)
            {
              if (v7[2] == 0x751B872B282C3971)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x751B872B282C3971)
          {
            if (v7[2] == 0x751B872B282C3971)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileType]";
  *(_QWORD *)(v11 + 24) = 16;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274448;
  *(_QWORD *)(v11 + 8) = 0x751B872B282C3971;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x751B872B282C3971uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x751B872B282C3971;
  v15[1] = "md::ls::TileType]";
  v15[2] = 16;
  gdc::Registry::_registerStorageDataSignals(a1, 0x751B872B282C3971, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44F668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD270E8E58701C515;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD270E8E58701C515;
      if (*(_QWORD *)&v3 <= 0xD270E8E58701C515)
        v5 = 0xD270E8E58701C515 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD270E8E58701C515;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD270E8E58701C515)
            {
              if (v7[2] == 0xD270E8E58701C515)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD270E8E58701C515)
          {
            if (v7[2] == 0xD270E8E58701C515)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileTransformConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273FF8;
  *(_QWORD *)(v11 + 8) = 0xD270E8E58701C515;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD270E8E58701C515, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD270E8E58701C515;
  v15[1] = "md::ls::TileTransformConstantDataHandle]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD270E8E58701C515, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44F890(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>(float *a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = *a2;
  v8 = a2[1];
  v9 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v10 = (v8 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  v14 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
  v15 = *((_QWORD *)a1 + 1);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
      if (v14 >= v15)
        v3 = v14 % v15;
    }
    else
    {
      v3 = v14 & (v15 - 1);
    }
    v17 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
      v18 = *v17;
      if (v18)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v18[1];
            if (v20 == v14)
            {
              if (*((_DWORD *)v18 + 4) == (_DWORD)v7
                && __PAIR64__(*((unsigned __int8 *)v18 + 24), *((_DWORD *)v18 + 5)) == __PAIR64__(v6, v8)
                && *(uint64_t *)((char *)v18 + 28) == __PAIR64__(v12, v11))
              {
                return;
              }
            }
            else if ((v20 & (v15 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v18 = (uint64_t *)*v18;
            if (!v18)
              goto LABEL_27;
          }
        }
        do
        {
          v19 = v18[1];
          if (v19 == v14)
          {
            if (*((_DWORD *)v18 + 4) == (_DWORD)v7
              && __PAIR64__(*((unsigned __int8 *)v18 + 24), *((_DWORD *)v18 + 5)) == __PAIR64__(v6, v8)
              && *(uint64_t *)((char *)v18 + 28) == __PAIR64__(v12, v11))
            {
              return;
            }
          }
          else
          {
            if (v19 >= v15)
              v19 %= v15;
            if (v19 != v3)
              break;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_27:
  v21 = operator new(0x30uLL);
  *v21 = 0;
  v21[1] = v14;
  *((_OWORD *)v21 + 1) = *(_OWORD *)a3;
  v22 = *(_QWORD *)(a3 + 24);
  v21[4] = *(_QWORD *)(a3 + 16);
  v21[5] = v22;
  v23 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v24 = a1[8];
  if (!v15 || (float)(v24 * (float)v15) < v23)
  {
    v25 = 1;
    if (v15 >= 3)
      v25 = (v15 & (v15 - 1)) != 0;
    v26 = v25 | (2 * v15);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v15 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v15)
    {
      if (prime >= v15)
        goto LABEL_64;
      v40 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v15 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime >= v15)
      {
        v15 = *((_QWORD *)a1 + 1);
LABEL_64:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15)
            v3 = v14 % v15;
          else
            v3 = v14;
        }
        else
        {
          v3 = (v15 - 1) & v14;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        v49 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v49)
          operator delete(v49);
        v15 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v29 = operator new(8 * prime);
    v30 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v29;
    if (v30)
      operator delete(v30);
    v31 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31++) = 0;
    while (prime != v31);
    v33 = (uint64_t *)(a1 + 4);
    v32 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v32)
    {
LABEL_63:
      v15 = prime;
      goto LABEL_64;
    }
    v34 = v32[1];
    v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v36 = v34 & v35;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v33;
      for (i = (_QWORD *)*v32; *v32; i = (_QWORD *)*v32)
      {
        v38 = i[1] & v35;
        if (v38 == v36)
        {
          v32 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *v32 = *i;
          v39 = 8 * v38;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v39);
          **(_QWORD **)(*(_QWORD *)a1 + v39) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v32;
          v32 = i;
          v36 = v38;
        }
      }
      goto LABEL_63;
    }
    if (v34 >= prime)
      v34 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v33;
    v43 = (_QWORD *)*v32;
    if (!*v32)
      goto LABEL_63;
    while (1)
    {
      v45 = v43[1];
      if (v45 >= prime)
        v45 %= prime;
      if (v45 != v34)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v45))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v32;
          goto LABEL_68;
        }
        *v32 = *v43;
        v44 = 8 * v45;
        *v43 = **(_QWORD **)(*(_QWORD *)a1 + v44);
        **(_QWORD **)(*(_QWORD *)a1 + v44) = v43;
        v43 = v32;
      }
      v45 = v34;
LABEL_68:
      v32 = v43;
      v43 = (_QWORD *)*v43;
      v34 = v45;
      if (!v43)
        goto LABEL_63;
    }
  }
LABEL_77:
  v46 = *(_QWORD **)a1;
  v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v47)
  {
    *v21 = *v47;
LABEL_85:
    *v47 = v21;
    goto LABEL_86;
  }
  *v21 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v21;
  v46[v3] = a1 + 4;
  if (*v21)
  {
    v48 = *(_QWORD *)(*v21 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v48 >= v15)
        v48 %= v15;
    }
    else
    {
      v48 &= v15 - 1;
    }
    v47 = (_QWORD *)(*(_QWORD *)a1 + 8 * v48);
    goto LABEL_85;
  }
LABEL_86:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F44FDC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AssociationTileHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x24B7D588576BB14ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x24B7D588576BB14ELL;
      if (*(_QWORD *)&v3 <= 0x24B7D588576BB14EuLL)
        v5 = 0x24B7D588576BB14EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x24B7D588576BB14ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x24B7D588576BB14ELL)
            {
              if (v7[2] == 0x24B7D588576BB14ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x24B7D588576BB14ELL)
          {
            if (v7[2] == 0x24B7D588576BB14ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::AssociationTileHandle]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42727C8;
  *(_QWORD *)(v11 + 8) = 0x24B7D588576BB14ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x24B7D588576BB14EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x24B7D588576BB14ELL;
  v15[1] = "md::ls::AssociationTileHandle]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x24B7D588576BB14ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F44FFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileUnitsPerMeter>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE2FCA37BA4379744;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE2FCA37BA4379744;
      if (*(_QWORD *)&v3 <= 0xE2FCA37BA4379744)
        v5 = 0xE2FCA37BA4379744 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE2FCA37BA4379744;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE2FCA37BA4379744)
            {
              if (v7[2] == 0xE2FCA37BA4379744)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE2FCA37BA4379744)
          {
            if (v7[2] == 0xE2FCA37BA4379744)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileUnitsPerMeter]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272078;
  *(_QWORD *)(v11 + 8) = 0xE2FCA37BA4379744;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE2FCA37BA4379744, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE2FCA37BA4379744;
  v15[1] = "md::ls::TileUnitsPerMeter]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE2FCA37BA4379744, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F450208(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::emplace(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v25 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v12 = (_DWORD *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v15 = (_DWORD *)a1[10];
      v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v15) + 1;
      if (v16 > 0x1555555555555555)
        goto LABEL_30;
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v15) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0xAAAAAAAAAAAAAAALL)
        v18 = 0x1555555555555555;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(12 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * (v12 - v15)];
      *(_QWORD *)v20 = *a3;
      *((_DWORD *)v20 + 2) = *((_DWORD *)a3 + 2);
      v14 = v20 + 12;
      if (v12 != v15)
      {
        do
        {
          v21 = *(_QWORD *)(v12 - 3);
          v12 -= 3;
          v22 = v12[2];
          *(_QWORD *)(v20 - 12) = v21;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v22;
        }
        while (v12 != v15);
        v12 = (_DWORD *)a1[10];
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v14;
      a1[12] = (uint64_t)&v19[12 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *a3;
      v12[2] = *((_DWORD *)a3 + 2);
      *(_QWORD *)v12 = v13;
      v14 = v12 + 3;
    }
    a1[11] = (uint64_t)v14;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)(a1[10] + 12 * (((uint64_t)v5 - a1[7]) >> 3));
    *v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    v7[2] = *((_DWORD *)a3 + 2);
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v26, &v27);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)a1[22];
  if (v23)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v8;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v26, &v27);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::HasTileSharedStyleCameraLighting>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDF3D07954D3A7200;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDF3D07954D3A7200;
      if (*(_QWORD *)&v3 <= 0xDF3D07954D3A7200)
        v5 = 0xDF3D07954D3A7200 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDF3D07954D3A7200;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDF3D07954D3A7200)
            {
              if (v7[2] == 0xDF3D07954D3A7200)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDF3D07954D3A7200)
          {
            if (v7[2] == 0xDF3D07954D3A7200)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::HasTileSharedStyleCameraLighting]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274088;
  *(_QWORD *)(v11 + 8) = 0xDF3D07954D3A7200;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDF3D07954D3A7200, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDF3D07954D3A7200;
  v15[1] = "md::ls::HasTileSharedStyleCameraLighting]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDF3D07954D3A7200, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45063C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SupportsShadows>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE690FF1B9655D152;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE690FF1B9655D152;
      if (*(_QWORD *)&v3 <= 0xE690FF1B9655D152)
        v5 = 0xE690FF1B9655D152 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE690FF1B9655D152;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE690FF1B9655D152)
            {
              if (v7[2] == 0xE690FF1B9655D152)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE690FF1B9655D152)
          {
            if (v7[2] == 0xE690FF1B9655D152)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SupportsShadows]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271A78;
  *(_QWORD *)(v11 + 8) = 0xE690FF1B9655D152;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE690FF1B9655D152, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE690FF1B9655D152;
  v15[1] = "md::ls::SupportsShadows]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE690FF1B9655D152, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F450864(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SupportsDepthPrePass>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x33C5934AE646F3E2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x33C5934AE646F3E2;
      if (*(_QWORD *)&v3 <= 0x33C5934AE646F3E2uLL)
        v5 = 0x33C5934AE646F3E2uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x33C5934AE646F3E2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x33C5934AE646F3E2)
            {
              if (v7[2] == 0x33C5934AE646F3E2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x33C5934AE646F3E2)
          {
            if (v7[2] == 0x33C5934AE646F3E2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SupportsDepthPrePass]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42EE5D8;
  *(_QWORD *)(v11 + 8) = 0x33C5934AE646F3E2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x33C5934AE646F3E2uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x33C5934AE646F3E2;
  v15[1] = "md::ls::SupportsDepthPrePass]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x33C5934AE646F3E2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F450A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF2296D6406C155CBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF2296D6406C155CBLL;
      if (*(_QWORD *)&v3 <= 0xF2296D6406C155CBLL)
        v5 = 0xF2296D6406C155CBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF2296D6406C155CBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF2296D6406C155CBLL)
            {
              if (v7[2] == 0xF2296D6406C155CBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF2296D6406C155CBLL)
          {
            if (v7[2] == 0xF2296D6406C155CBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileShadowConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273C08;
  *(_QWORD *)(v11 + 8) = 0xF2296D6406C155CBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF2296D6406C155CBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF2296D6406C155CBLL;
  v15[1] = "md::ls::TileShadowConstantDataHandle]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF2296D6406C155CBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F450CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB4E92DEB291A7B99;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB4E92DEB291A7B99;
      if (*(_QWORD *)&v3 <= 0xB4E92DEB291A7B99)
        v5 = 0xB4E92DEB291A7B99 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB4E92DEB291A7B99;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB4E92DEB291A7B99)
            {
              if (v7[2] == 0xB4E92DEB291A7B99)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB4E92DEB291A7B99)
          {
            if (v7[2] == 0xB4E92DEB291A7B99)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TilePrepassShadowConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 43;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42741D8;
  *(_QWORD *)(v11 + 8) = 0xB4E92DEB291A7B99;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB4E92DEB291A7B99, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB4E92DEB291A7B99;
  v15[1] = "md::ls::TilePrepassShadowConstantDataHandle]";
  v15[2] = 43;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB4E92DEB291A7B99, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F450EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x33C39664142A0949;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x33C39664142A0949;
      if (*(_QWORD *)&v3 <= 0x33C39664142A0949uLL)
        v5 = 0x33C39664142A0949uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x33C39664142A0949;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x33C39664142A0949)
            {
              if (v7[2] == 0x33C39664142A0949)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x33C39664142A0949)
          {
            if (v7[2] == 0x33C39664142A0949)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TilePrepassConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273D88;
  *(_QWORD *)(v11 + 8) = 0x33C39664142A0949;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x33C39664142A0949uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x33C39664142A0949;
  v15[1] = "md::ls::TilePrepassConstantDataHandle]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0x33C39664142A0949, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F451104(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SupportsFragmentClip>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x14C796C7576DD197;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x14C796C7576DD197;
      if (*(_QWORD *)&v3 <= 0x14C796C7576DD197uLL)
        v5 = 0x14C796C7576DD197uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x14C796C7576DD197;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x14C796C7576DD197)
            {
              if (v7[2] == 0x14C796C7576DD197)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x14C796C7576DD197)
          {
            if (v7[2] == 0x14C796C7576DD197)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SupportsFragmentClip]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42725B8;
  *(_QWORD *)(v11 + 8) = 0x14C796C7576DD197;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x14C796C7576DD197uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x14C796C7576DD197;
  v15[1] = "md::ls::SupportsFragmentClip]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x14C796C7576DD197, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45132C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCAC3230B44CECEB9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCAC3230B44CECEB9;
      if (*(_QWORD *)&v3 <= 0xCAC3230B44CECEB9)
        v5 = 0xCAC3230B44CECEB9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCAC3230B44CECEB9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCAC3230B44CECEB9)
            {
              if (v7[2] == 0xCAC3230B44CECEB9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCAC3230B44CECEB9)
          {
            if (v7[2] == 0xCAC3230B44CECEB9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileClippingConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273E78;
  *(_QWORD *)(v11 + 8) = 0xCAC3230B44CECEB9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCAC3230B44CECEB9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCAC3230B44CECEB9;
  v15[1] = "md::ls::TileClippingConstantDataHandle]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCAC3230B44CECEB9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F451554(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x80A8239313E99C5FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x80A8239313E99C5FLL;
      if (*(_QWORD *)&v3 <= 0x80A8239313E99C5FLL)
        v5 = 0x80A8239313E99C5FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x80A8239313E99C5FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x80A8239313E99C5FLL)
            {
              if (v7[2] == 0x80A8239313E99C5FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x80A8239313E99C5FLL)
          {
            if (v7[2] == 0x80A8239313E99C5FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileStyleCameraConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 41;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42740E8;
  *(_QWORD *)(v11 + 8) = 0x80A8239313E99C5FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x80A8239313E99C5FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x80A8239313E99C5FLL;
  v15[1] = "md::ls::TileStyleCameraConstantDataHandle]";
  v15[2] = 41;
  gdc::Registry::_registerStorageDataSignals(a1, 0x80A8239313E99C5FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45177C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x414BF8D9069621AELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x414BF8D9069621AELL;
      if (*(_QWORD *)&v3 <= 0x414BF8D9069621AEuLL)
        v5 = 0x414BF8D9069621AEuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x414BF8D9069621AELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x414BF8D9069621AELL)
            {
              if (v7[2] == 0x414BF8D9069621AELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x414BF8D9069621AELL)
          {
            if (v7[2] == 0x414BF8D9069621AELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileViewConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42732D8;
  *(_QWORD *)(v11 + 8) = 0x414BF8D9069621AELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x414BF8D9069621AEuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x414BF8D9069621AELL;
  v15[1] = "md::ls::TileViewConstantDataHandle]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x414BF8D9069621AELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4519A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF37331D7CF44CB11;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF37331D7CF44CB11;
      if (*(_QWORD *)&v3 <= 0xF37331D7CF44CB11)
        v5 = 0xF37331D7CF44CB11 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF37331D7CF44CB11;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF37331D7CF44CB11)
            {
              if (v7[2] == 0xF37331D7CF44CB11)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF37331D7CF44CB11)
          {
            if (v7[2] == 0xF37331D7CF44CB11)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NeedsTileRenderableDataHandleUpdate]";
  *(_QWORD *)(v11 + 24) = 43;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274178;
  *(_QWORD *)(v11 + 8) = 0xF37331D7CF44CB11;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF37331D7CF44CB11, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF37331D7CF44CB11;
  v15[1] = "md::ls::NeedsTileRenderableDataHandleUpdate]";
  v15[2] = 43;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF37331D7CF44CB11, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F451BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  _OWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v26 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v15 = (char *)a1[10];
      v16 = (v12 - v15) >> 5;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59)
        goto LABEL_30;
      v18 = v11 - (_QWORD)v15;
      if (v18 >> 4 > v17)
        v17 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(32 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[32 * v16];
      v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v21 = *(_OWORD *)a3;
      *((_OWORD *)v21 + 1) = v22;
      v14 = v21 + 32;
      if (v12 != v15)
      {
        do
        {
          v23 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v21 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v21 - 1) = v23;
          v21 -= 32;
          v12 -= 32;
        }
        while (v12 != v15);
        v12 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v21;
      a1[11] = (uint64_t)v14;
      a1[12] = (uint64_t)&v20[32 * v19];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v12 = *(_OWORD *)a3;
      *((_OWORD *)v12 + 1) = v13;
      v14 = v12 + 32;
    }
    a1[11] = (uint64_t)v14;
    v8 = a1[31];
  }
  else
  {
    v7 = a1[10] + 4 * ((_QWORD)v5 - a1[7]);
    *(_QWORD *)v7 = *(_QWORD *)a3;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a3 + 16);
    *(_BYTE *)(v7 + 24) = *(_BYTE *)(a3 + 24);
    v8 = a1[31];
    if (v7 != a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v24 = (_QWORD *)a1[22];
  if (v24)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v25 = v24[6];
      if (!v25)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v25 + 48))(v25, &v27, &v28);
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::BoundsWidth>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1ADAB24DD42B2B4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1ADAB24DD42B2B4;
      if (*(_QWORD *)&v3 <= 0x1ADAB24DD42B2B4uLL)
        v5 = 0x1ADAB24DD42B2B4uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1ADAB24DD42B2B4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1ADAB24DD42B2B4)
            {
              if (v7[2] == 0x1ADAB24DD42B2B4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1ADAB24DD42B2B4)
          {
            if (v7[2] == 0x1ADAB24DD42B2B4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::BoundsWidth]";
  *(_QWORD *)(v11 + 24) = 19;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42710B8;
  *(_QWORD *)(v11 + 8) = 0x1ADAB24DD42B2B4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1ADAB24DD42B2B4uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1ADAB24DD42B2B4;
  v15[1] = "md::ls::BoundsWidth]";
  v15[2] = 19;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1ADAB24DD42B2B4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F451FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x34AE67B339EEC99CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x34AE67B339EEC99CLL;
      if (*(_QWORD *)&v3 <= 0x34AE67B339EEC99CuLL)
        v5 = 0x34AE67B339EEC99CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x34AE67B339EEC99CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x34AE67B339EEC99CLL)
            {
              if (v7[2] == 0x34AE67B339EEC99CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x34AE67B339EEC99CLL)
          {
            if (v7[2] == 0x34AE67B339EEC99CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileBounds]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270FC8;
  *(_QWORD *)(v11 + 8) = 0x34AE67B339EEC99CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x34AE67B339EEC99CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x34AE67B339EEC99CLL;
  v15[1] = "md::ls::TileBounds]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x34AE67B339EEC99CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4521F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  _OWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v26 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v15 = (char *)a1[10];
      v16 = (v12 - v15) >> 5;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59)
        goto LABEL_30;
      v18 = v11 - (_QWORD)v15;
      if (v18 >> 4 > v17)
        v17 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(32 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[32 * v16];
      v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v21 = *(_OWORD *)a3;
      *((_OWORD *)v21 + 1) = v22;
      v14 = v21 + 32;
      if (v12 != v15)
      {
        do
        {
          v23 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v21 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v21 - 1) = v23;
          v21 -= 32;
          v12 -= 32;
        }
        while (v12 != v15);
        v12 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v21;
      a1[11] = (uint64_t)v14;
      a1[12] = (uint64_t)&v20[32 * v19];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v12 = *(_OWORD *)a3;
      *((_OWORD *)v12 + 1) = v13;
      v14 = v12 + 32;
    }
    a1[11] = (uint64_t)v14;
    v8 = a1[31];
  }
  else
  {
    v7 = (_QWORD *)(a1[10] + 4 * ((_QWORD)v5 - a1[7]));
    *v7 = *(_QWORD *)a3;
    v7[1] = *(_QWORD *)(a3 + 8);
    v7[2] = *(_QWORD *)(a3 + 16);
    v7[3] = *(_QWORD *)(a3 + 24);
    v8 = a1[31];
    if (v7 != (_QWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v24 = (_QWORD *)a1[22];
  if (v24)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v25 = v24[6];
      if (!v25)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v25 + 48))(v25, &v27, &v28);
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::TileMatrix>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBCC33905201D8160;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBCC33905201D8160;
      if (*(_QWORD *)&v3 <= 0xBCC33905201D8160)
        v5 = 0xBCC33905201D8160 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBCC33905201D8160;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBCC33905201D8160)
            {
              if (v7[2] == 0xBCC33905201D8160)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBCC33905201D8160)
          {
            if (v7[2] == 0xBCC33905201D8160)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileMatrix]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270FF8;
  *(_QWORD *)(v11 + 8) = 0xBCC33905201D8160;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBCC33905201D8160, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBCC33905201D8160;
  v15[1] = "md::ls::TileMatrix]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBCC33905201D8160, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4525F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileRenderableDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCF1A54FDD9A1F93FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCF1A54FDD9A1F93FLL;
      if (*(_QWORD *)&v3 <= 0xCF1A54FDD9A1F93FLL)
        v5 = 0xCF1A54FDD9A1F93FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCF1A54FDD9A1F93FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCF1A54FDD9A1F93FLL)
            {
              if (v7[2] == 0xCF1A54FDD9A1F93FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCF1A54FDD9A1F93FLL)
          {
            if (v7[2] == 0xCF1A54FDD9A1F93FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TileRenderableDataHandle]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272FA8;
  *(_QWORD *)(v11 + 8) = 0xCF1A54FDD9A1F93FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCF1A54FDD9A1F93FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCF1A54FDD9A1F93FLL;
  v15[1] = "md::ls::TileRenderableDataHandle]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCF1A54FDD9A1F93FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45281C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF08DF3F52DDCD66BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF08DF3F52DDCD66BLL;
      if (*(_QWORD *)&v3 <= 0xF08DF3F52DDCD66BLL)
        v5 = 0xF08DF3F52DDCD66BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF08DF3F52DDCD66BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF08DF3F52DDCD66BLL)
            {
              if (v7[2] == 0xF08DF3F52DDCD66BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF08DF3F52DDCD66BLL)
          {
            if (v7[2] == 0xF08DF3F52DDCD66BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271148;
  *(_QWORD *)(v11 + 8) = 0xF08DF3F52DDCD66BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF08DF3F52DDCD66BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF08DF3F52DDCD66BLL;
  v15[1] = "md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF08DF3F52DDCD66BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F452A44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6CC93B0E0603EFDCLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6CC93B0E0603EFDCLL;
      if (*(_QWORD *)&v3 <= 0x6CC93B0E0603EFDCuLL)
        v5 = 0x6CC93B0E0603EFDCuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6CC93B0E0603EFDCLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6CC93B0E0603EFDCLL)
            {
              if (v7[2] == 0x6CC93B0E0603EFDCLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6CC93B0E0603EFDCLL)
          {
            if (v7[2] == 0x6CC93B0E0603EFDCLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TransferStyleAttributeRasterSet]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274028;
  *(_QWORD *)(v11 + 8) = 0x6CC93B0E0603EFDCLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6CC93B0E0603EFDCuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6CC93B0E0603EFDCLL;
  v15[1] = "md::ls::TransferStyleAttributeRasterSet]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6CC93B0E0603EFDCLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F452C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::LayerDataReference>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x664452B21D4833;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x664452B21D4833;
      if (*(_QWORD *)&v3 <= 0x664452B21D4833uLL)
        v5 = 0x664452B21D4833uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x664452B21D4833;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x664452B21D4833)
            {
              if (v7[2] == 0x664452B21D4833)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x664452B21D4833)
          {
            if (v7[2] == 0x664452B21D4833)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::LayerDataReference]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272198;
  *(_QWORD *)(v11 + 8) = 0x664452B21D4833;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x664452B21D4833uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x664452B21D4833;
  v15[1] = "md::ls::LayerDataReference]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x664452B21D4833, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F452E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v41 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v41);
  if ((v6 & 1) != 0)
  {
    v18 = a1[11];
    v17 = a1[12];
    if (v18 >= v17)
    {
      v23 = (char *)a1[10];
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v23) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_50;
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v23) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v28 = operator new(24 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = *((_QWORD *)a3 + 1);
      v30 = &v28[8 * ((uint64_t)(v18 - (_QWORD)v23) >> 3)];
      *(_QWORD *)v30 = *(_QWORD *)a3;
      *((_QWORD *)v30 + 1) = v29;
      if (v29)
      {
        v31 = (unint64_t *)(v29 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        v23 = (char *)a1[10];
        v18 = a1[11];
      }
      v33 = &v28[24 * v27];
      v28[24 * v24 + 16] = *((_BYTE *)a3 + 16);
      v22 = (uint64_t)(v30 + 24);
      if ((char *)v18 == v23)
      {
        a1[10] = (uint64_t)v30;
        a1[11] = v22;
        a1[12] = (uint64_t)v33;
      }
      else
      {
        do
        {
          v34 = *(_OWORD *)(v18 - 24);
          v18 -= 24;
          *(_OWORD *)(v30 - 24) = v34;
          v30 -= 24;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          v30[16] = *(_BYTE *)(v18 + 16);
        }
        while ((char *)v18 != v23);
        v23 = (char *)a1[10];
        v35 = (char *)a1[11];
        a1[10] = (uint64_t)v30;
        a1[11] = v22;
        a1[12] = (uint64_t)v33;
        while (v35 != v23)
        {
          v36 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
          if (v36)
          {
            p_shared_owners = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(p_shared_owners);
            while (__stlxr(v38 - 1, p_shared_owners));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v35 -= 24;
        }
      }
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)a3;
      v19 = *((_QWORD *)a3 + 1);
      *(_QWORD *)(v18 + 8) = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      *(_BYTE *)(v18 + 16) = *((_BYTE *)a3 + 16);
      v22 = v18 + 24;
    }
    a1[11] = v22;
    v14 = a1[31];
  }
  else
  {
    v7 = a1[10];
    v8 = ((uint64_t)v5 - a1[7]) >> 3;
    v9 = v7 + 24 * v8;
    v10 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v11 = *(std::__shared_weak_count **)(v9 + 8);
    *(_OWORD *)v9 = v10;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_BYTE *)(v7 + 24 * v8 + 16) = *((_BYTE *)a3 + 16);
    v14 = a1[31];
    if (v9 != a1[11])
    {
      v15 = (_QWORD *)a1[16];
      if (v15)
      {
        while (1)
        {
          v43 = &v41;
          v44 = 1;
          v42 = v14;
          v16 = v15[6];
          if (!v16)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v16 + 48))(v16, &v42, &v43);
          v15 = (_QWORD *)*v15;
          if (!v15)
            return;
        }
LABEL_49:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
        abort();
      }
      return;
    }
  }
  v39 = (_QWORD *)a1[22];
  if (v39)
  {
    while (1)
    {
      v43 = &v41;
      v44 = 1;
      v42 = v14;
      v40 = v39[6];
      if (!v40)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v42, &v43);
      v39 = (_QWORD *)*v39;
      if (!v39)
        return;
    }
    goto LABEL_49;
  }
}

uint64_t gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD853A1C6BA9D5FEDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD853A1C6BA9D5FEDLL;
      if (*(_QWORD *)&v3 <= 0xD853A1C6BA9D5FEDLL)
        v5 = 0xD853A1C6BA9D5FEDLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD853A1C6BA9D5FEDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD853A1C6BA9D5FEDLL)
            {
              if (v7[2] == 0xD853A1C6BA9D5FEDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD853A1C6BA9D5FEDLL)
          {
            if (v7[2] == 0xD853A1C6BA9D5FEDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SupportsRebuildingRenderables]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273D58;
  *(_QWORD *)(v11 + 8) = 0xD853A1C6BA9D5FEDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD853A1C6BA9D5FEDLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD853A1C6BA9D5FEDLL;
  v15[1] = "md::ls::SupportsRebuildingRenderables]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD853A1C6BA9D5FEDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4533A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE57C2F66048E40BDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE57C2F66048E40BDLL;
      if (*(_QWORD *)&v3 <= 0xE57C2F66048E40BDLL)
        v5 = 0xE57C2F66048E40BDLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE57C2F66048E40BDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE57C2F66048E40BDLL)
            {
              if (v7[2] == 0xE57C2F66048E40BDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE57C2F66048E40BDLL)
          {
            if (v7[2] == 0xE57C2F66048E40BDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274298;
  *(_QWORD *)(v11 + 8) = 0xE57C2F66048E40BDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE57C2F66048E40BDLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE57C2F66048E40BDLL;
  v15[1] = "md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE57C2F66048E40BDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4535CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  v18 = *(_QWORD *)(v16 - 24);
  v17 = *(_QWORD *)(v16 - 16);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v15[1];
  *v15 = v18;
  v15[1] = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_BYTE *)(v14 + 24 * v7 + 16) = *(_BYTE *)(v16 - 8);
  v24 = a1[11];
  v25 = *(std::__shared_weak_count **)(v24 - 16);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  a1[11] = v24 - 24;
  v28 = (_QWORD *)a1[28];
  if (!v28)
    return 1;
  v29 = a1[31];
  while (1)
  {
    v35[0] = &v33;
    v35[1] = 1;
    v34 = v29;
    v30 = v28[6];
    if (!v30)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v30 + 48))(v30, &v34, v35);
    v28 = (_QWORD *)*v28;
    if (!v28)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::contains(v31, v32);
}

BOOL gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileMatrix>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileMatrix>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileMatrix>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileMatrix>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileBounds>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_QWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileBounds>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 32 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 32);
  v15 -= 32;
  *(_QWORD *)v14 = v16;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_BYTE *)(v14 + 24) = *(_BYTE *)(v15 + 24);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 12 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 12);
  v15 -= 12;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  v14[2] = *(_DWORD *)(v15 + 8);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TileType>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileType>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileType>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileType>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::WillEnterView>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WillEnterView>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::WillEnterView>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WillEnterView>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t std::__split_buffer<md::ls::RenderablesCount>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 32;
        *(_QWORD *)(a1 + 16) = v2 - 32;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  char *v33;
  char *v34;
  size_t v35;
  unint64_t v36;
  char *v37;
  void *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v45 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = v14 + 32 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  *(_DWORD *)v15 = *(_DWORD *)(v16 - 32);
  if (v15 != v16 - 32)
  {
    v19 = *(char **)(v15 + 8);
    v18 = (_QWORD *)(v15 + 8);
    v17 = v19;
    v20 = *(char **)(v16 - 24);
    v21 = *(_BYTE **)(v16 - 16);
    v22 = v21 - v20;
    v23 = (v21 - v20) >> 3;
    v24 = v18[2];
    if (v23 > (v24 - (uint64_t)v19) >> 3)
    {
      if (v17)
      {
        *(_QWORD *)(v14 + 32 * v7 + 16) = v17;
        operator delete(v17);
        v24 = 0;
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_40;
      v25 = v24 >> 2;
      if (v24 >> 2 <= v23)
        v25 = (v21 - v20) >> 3;
      v26 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
      v27 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v26)
        v27 = v25;
      if (v27 >> 61)
        goto LABEL_40;
      v28 = 8 * v27;
      v29 = (char *)operator new(8 * v27);
      v17 = v29;
      *v18 = v29;
      v30 = v14 + 32 * v7;
      *(_QWORD *)(v30 + 16) = v29;
      v31 = (char **)(v30 + 16);
      v18[2] = &v29[v28];
      if (v21 != v20)
        memcpy(v29, v20, v21 - v20);
      goto LABEL_31;
    }
    v32 = v14 + 32 * v7;
    v34 = *(char **)(v32 + 16);
    v31 = (char **)(v32 + 16);
    v33 = v34;
    v35 = v34 - v17;
    v36 = (v34 - v17) >> 3;
    if (v36 >= v23)
    {
      if (v21 == v20)
      {
LABEL_31:
        *v31 = &v17[v22];
        goto LABEL_32;
      }
      v38 = v17;
      v39 = v20;
    }
    else
    {
      v37 = &v20[8 * v36];
      if (v33 != v17)
      {
        memmove(v17, v20, v35);
        v17 = *v31;
      }
      v22 = v21 - v37;
      if (v21 == v37)
        goto LABEL_31;
      v38 = v17;
      v39 = v37;
    }
    memmove(v38, v39, v22);
    goto LABEL_31;
  }
LABEL_32:
  v40 = a1[11];
  v41 = *(void **)(v40 - 24);
  if (v41)
  {
    *(_QWORD *)(v40 - 16) = v41;
    operator delete(v41);
  }
  a1[11] = v40 - 32;
  v42 = (_QWORD *)a1[28];
  if (v42)
  {
    v43 = a1[31];
    while (1)
    {
      v47[0] = &v45;
      v47[1] = 1;
      v46 = v43;
      v44 = v42[6];
      if (!v44)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v44 + 48))(v44, &v46, v47);
      v42 = (_QWORD *)*v42;
      if (!v42)
        return 1;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_40:
    abort();
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    v8 = (_QWORD *)a1[5];
    v9 = (void *)a1[4];
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          MEMORY[0x1A1AF4E00](v10, 0x1000C40104B78CFLL);
      }
      while (v8 != v7);
      v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void cleanup(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int8x8_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v59;
  int8x8_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  unint64_t *v82;
  int8x8_t v84;
  unint64_t v85;
  uint8x8_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  unint64_t *v104;
  int8x8_t v106;
  unint64_t v107;
  uint8x8_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  unint64_t *v126;
  int8x8_t v128;
  unint64_t v129;
  uint8x8_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  unint64_t *v148;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  unint64_t *v159;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  unint64_t *v170;
  int8x8_t v172;
  unint64_t v173;
  uint8x8_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v191;
  unint64_t *v192;
  int8x8_t v194;
  unint64_t v195;
  uint8x8_t v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v213;
  unint64_t *v214;
  int8x8_t v216;
  unint64_t v217;
  uint8x8_t v218;
  unint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  unint64_t *v236;
  int8x8_t v238;
  unint64_t v239;
  uint8x8_t v240;
  unint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v257;
  unint64_t *v258;
  int8x8_t v260;
  unint64_t v261;
  uint8x8_t v262;
  unint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  int8x8_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v276;
  int8x8_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v298;
  unint64_t v299;
  _QWORD *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  _BYTE *v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  _BYTE *v312;
  _QWORD *v313;
  char *v314;
  unint64_t v315;
  uint64_t v316;
  _OWORD *v317;
  char *v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  int8x8_t v323;
  int8x8_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int8x8_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  unint64_t v334;
  uint64_t v335;
  _OWORD *v336;
  char *v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  int8x8_t v342;
  int8x8_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int8x8_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  char v353;

  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v8 = 0;
  }
  else
  {
    v8 = (int8x8_t *)v6[3];
    v9 = (std::__shared_weak_count *)v6[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v13 = *(_QWORD **)a1;
  v14 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v14)
  {
    while (*v13 != 0x4EDAD23DFB014132)
    {
      v13 += 5;
      if (v13 == v14)
        goto LABEL_24;
    }
  }
  if (v13 != v14)
  {
    v15 = (std::__shared_weak_count *)v13[4];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
LABEL_24:
  v19 = *(_QWORD **)a1;
  v20 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v20)
  {
    while (*v19 != 0x348A0B0E758C07C2)
    {
      v19 += 5;
      if (v19 == v20)
        goto LABEL_35;
    }
  }
  if (v19 != v20)
  {
    v21 = (std::__shared_weak_count *)v19[4];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
LABEL_35:
  v25 = (_QWORD *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(a2);
  v26 = a3 >> 39;
  v27 = v25[4];
  if (a3 >> 39 < (v25[5] - v27) >> 3
    && (v28 = *(_QWORD *)(v27 + 8 * v26)) != 0
    && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(a3) & 0x7F)), v31 = v25[7], v30 = v25[8], v29 < (v30 - v31) >> 3)
    && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == HIDWORD(a3)) : (v33 = 0), v33))
  {
    v34 = v25[11];
    v35 = v25[10] + 8 * v29;
  }
  else
  {
    v34 = v25[11];
    v35 = v34;
  }
  if (v35 == v34)
    v36 = 0;
  else
    v36 = (_QWORD *)v35;
  v37 = (_QWORD *)gdc::Registry::storage<md::ls::RegisterHandle>(a2);
  v38 = v37[4];
  if (v26 < (v37[5] - v38) >> 3
    && (v39 = *(_QWORD *)(v38 + 8 * v26)) != 0
    && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(a3) & 0x7F)), v42 = v37[7], v41 = v37[8], v40 < (v41 - v42) >> 3)
    && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == HIDWORD(a3)) : (v44 = 0), v44))
  {
    v45 = v37[11];
    v46 = v37[10] + 8 * v40;
  }
  else
  {
    v45 = v37[11];
    v46 = v45;
  }
  if (v46 == v45)
    v47 = 0;
  else
    v47 = (_QWORD *)v46;
  v48 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  v49 = v48[4];
  if (v26 < (v48[5] - v49) >> 3)
  {
    v50 = *(_QWORD *)(v49 + 8 * v26);
    if (v50)
    {
      v51 = *(unsigned __int16 *)(v50 + 2 * (HIDWORD(a3) & 0x7F));
      v53 = v48[7];
      v52 = v48[8];
      if (v51 < (v52 - v53) >> 3)
      {
        v54 = v53 + 8 * v51;
        if (v54 != v52 && *(_DWORD *)(v54 + 4) == HIDWORD(a3))
        {
          v56 = v48[10];
          v57 = (unint64_t *)(v56 + 8 * v51);
          if (v57 != (unint64_t *)v48[11] && v56 != 0)
          {
            v59 = *v57;
            v60 = v8[1276];
            v351 = v36;
            v352 = v47;
            if (v59 < (uint64_t)(*(_QWORD *)&v8[1277] - *(_QWORD *)&v60) >> 3
              && ((v61 = *(_QWORD *)(*(_QWORD *)&v60 + 8 * v59)) != 0
                ? (v62 = HIDWORD(*v57) == HIDWORD(v61))
                : (v62 = 0),
                  v62))
            {
              v64 = *(_QWORD *)&v8[1279] + 56 * v61;
              v63 = (uint64_t)v8[1280];
            }
            else
            {
              v63 = (uint64_t)v8[1280];
              v64 = v63;
            }
            if (v64 == v63)
              v65 = 0;
            else
              v65 = (_QWORD *)v64;
            v66 = (unint64_t *)v65[1];
            v67 = (unint64_t *)v65[2];
            while (v66 != v67)
            {
              v68 = *v66++;
              gdc::Registry::destroy(a2, v68);
            }
            v69 = (uint64_t *)v65[4];
            v70 = (uint64_t *)v65[5];
            if (v69 != v70)
            {
              do
              {
                v71 = *v69++;
                v353 = 0;
                v72 = (uint64_t *)gdc::Registry::storage<md::ls::PendingDeletion>(a2);
                gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v72, v71, &v353);
              }
              while (v69 != v70);
              v69 = (uint64_t *)v65[4];
            }
            v65[2] = v65[1];
            v65[5] = v69;
            geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase((uint64_t)&v8[1273], v57);
            std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(&v8[1263], *v57);
            std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(&v8[1268], *v57);
            md::VKMRenderResourcesStore::clearRenderItemGroup(v8, v57, 1);
            v36 = v351;
            v47 = v352;
          }
        }
      }
    }
  }
  v73 = (_QWORD *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(a2);
  v74 = v73[4];
  if (v26 < (v73[5] - v74) >> 3)
  {
    v75 = *(_QWORD *)(v74 + 8 * v26);
    if (v75)
    {
      v76 = *(unsigned __int16 *)(v75 + 2 * (HIDWORD(a3) & 0x7F));
      v78 = v73[7];
      v77 = v73[8];
      if (v76 < (v77 - v78) >> 3)
      {
        v79 = v78 + 8 * v76;
        if (v79 != v77 && *(_DWORD *)(v79 + 4) == HIDWORD(a3))
        {
          v81 = v73[10];
          v82 = (unint64_t *)(v81 + 8 * v76);
          if (v82 != (unint64_t *)v73[11] && v81 != 0)
          {
            v84 = v8[432];
            if (v84)
            {
              v85 = *v82;
              v86 = (uint8x8_t)vcnt_s8(v84);
              v86.i16[0] = vaddlv_u8(v86);
              if (v86.u32[0] > 1uLL)
              {
                v87 = v85;
                if (*(_QWORD *)&v84 <= v85)
                  v87 = v85 % *(_QWORD *)&v84;
              }
              else
              {
                v87 = (*(_QWORD *)&v84 - 1) & v85;
              }
              v88 = *(_QWORD **)(*(_QWORD *)&v8[431] + 8 * v87);
              if (v88)
              {
                v89 = (_QWORD *)*v88;
                if (v89)
                {
                  if (v86.u32[0] < 2uLL)
                  {
                    v90 = *(_QWORD *)&v84 - 1;
                    while (1)
                    {
                      v92 = v89[1];
                      if (v92 == v85)
                      {
                        if (v89[2] == v85)
                          goto LABEL_120;
                      }
                      else if ((v92 & v90) != v87)
                      {
                        goto LABEL_123;
                      }
                      v89 = (_QWORD *)*v89;
                      if (!v89)
                        goto LABEL_123;
                    }
                  }
                  do
                  {
                    v91 = v89[1];
                    if (v91 == v85)
                    {
                      if (v89[2] == v85)
                      {
LABEL_120:
                        v93 = v89[4];
                        if (!v93 || (v94 = v93 - 1, (v89[4] = v94) == 0))
                          v89[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v91 >= *(_QWORD *)&v84)
                        v91 %= *(_QWORD *)&v84;
                      if (v91 != v87)
                        break;
                    }
                    v89 = (_QWORD *)*v89;
                  }
                  while (v89);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_123:
  v95 = (_QWORD *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(a2);
  v96 = v95[4];
  if (v26 < (v95[5] - v96) >> 3)
  {
    v97 = *(_QWORD *)(v96 + 8 * v26);
    if (v97)
    {
      v98 = *(unsigned __int16 *)(v97 + 2 * (HIDWORD(a3) & 0x7F));
      v100 = v95[7];
      v99 = v95[8];
      if (v98 < (v99 - v100) >> 3)
      {
        v101 = v100 + 8 * v98;
        if (v101 != v99 && *(_DWORD *)(v101 + 4) == HIDWORD(a3))
        {
          v103 = v95[10];
          v104 = (unint64_t *)(v103 + 8 * v98);
          if (v104 != (unint64_t *)v95[11] && v103 != 0)
          {
            v106 = v8[410];
            if (v106)
            {
              v107 = *v104;
              v108 = (uint8x8_t)vcnt_s8(v106);
              v108.i16[0] = vaddlv_u8(v108);
              if (v108.u32[0] > 1uLL)
              {
                v109 = v107;
                if (*(_QWORD *)&v106 <= v107)
                  v109 = v107 % *(_QWORD *)&v106;
              }
              else
              {
                v109 = (*(_QWORD *)&v106 - 1) & v107;
              }
              v110 = *(_QWORD **)(*(_QWORD *)&v8[409] + 8 * v109);
              if (v110)
              {
                v111 = (_QWORD *)*v110;
                if (v111)
                {
                  if (v108.u32[0] < 2uLL)
                  {
                    v112 = *(_QWORD *)&v106 - 1;
                    while (1)
                    {
                      v114 = v111[1];
                      if (v114 == v107)
                      {
                        if (v111[2] == v107)
                          goto LABEL_156;
                      }
                      else if ((v114 & v112) != v109)
                      {
                        goto LABEL_159;
                      }
                      v111 = (_QWORD *)*v111;
                      if (!v111)
                        goto LABEL_159;
                    }
                  }
                  do
                  {
                    v113 = v111[1];
                    if (v113 == v107)
                    {
                      if (v111[2] == v107)
                      {
LABEL_156:
                        v115 = v111[4];
                        if (!v115 || (v116 = v115 - 1, (v111[4] = v116) == 0))
                          v111[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v113 >= *(_QWORD *)&v106)
                        v113 %= *(_QWORD *)&v106;
                      if (v113 != v109)
                        break;
                    }
                    v111 = (_QWORD *)*v111;
                  }
                  while (v111);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_159:
  v117 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  v118 = v117[4];
  if (v26 < (v117[5] - v118) >> 3)
  {
    v119 = *(_QWORD *)(v118 + 8 * v26);
    if (v119)
    {
      v120 = *(unsigned __int16 *)(v119 + 2 * (HIDWORD(a3) & 0x7F));
      v122 = v117[7];
      v121 = v117[8];
      if (v120 < (v121 - v122) >> 3)
      {
        v123 = v122 + 8 * v120;
        if (v123 != v121 && *(_DWORD *)(v123 + 4) == HIDWORD(a3))
        {
          v125 = v117[10];
          v126 = (unint64_t *)(v125 + 8 * v120);
          if (v126 != (unint64_t *)v117[11] && v125 != 0)
          {
            v128 = v8[1269];
            if (v128)
            {
              v129 = *v126;
              v130 = (uint8x8_t)vcnt_s8(v128);
              v130.i16[0] = vaddlv_u8(v130);
              if (v130.u32[0] > 1uLL)
              {
                v131 = v129;
                if (*(_QWORD *)&v128 <= v129)
                  v131 = v129 % *(_QWORD *)&v128;
              }
              else
              {
                v131 = (*(_QWORD *)&v128 - 1) & v129;
              }
              v132 = *(_QWORD **)(*(_QWORD *)&v8[1268] + 8 * v131);
              if (v132)
              {
                v133 = (_QWORD *)*v132;
                if (v133)
                {
                  if (v130.u32[0] < 2uLL)
                  {
                    v134 = *(_QWORD *)&v128 - 1;
                    while (1)
                    {
                      v136 = v133[1];
                      if (v136 == v129)
                      {
                        if (v133[2] == v129)
                          goto LABEL_192;
                      }
                      else if ((v136 & v134) != v131)
                      {
                        goto LABEL_195;
                      }
                      v133 = (_QWORD *)*v133;
                      if (!v133)
                        goto LABEL_195;
                    }
                  }
                  do
                  {
                    v135 = v133[1];
                    if (v135 == v129)
                    {
                      if (v133[2] == v129)
                      {
LABEL_192:
                        v137 = v133[4];
                        if (!v137 || (v138 = v137 - 1, (v133[4] = v138) == 0))
                          v133[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v135 >= *(_QWORD *)&v128)
                        v135 %= *(_QWORD *)&v128;
                      if (v135 != v131)
                        break;
                    }
                    v133 = (_QWORD *)*v133;
                  }
                  while (v133);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_195:
  v139 = (_QWORD *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(a2);
  v140 = v139[4];
  if (v26 < (v139[5] - v140) >> 3)
  {
    v141 = *(_QWORD *)(v140 + 8 * v26);
    if (v141)
    {
      v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(a3) & 0x7F));
      v144 = v139[7];
      v143 = v139[8];
      if (v142 < (v143 - v144) >> 3)
      {
        v145 = v144 + 8 * v142;
        if (v145 != v143 && *(_DWORD *)(v145 + 4) == HIDWORD(a3))
        {
          v147 = v139[10];
          v148 = (unint64_t *)(v147 + 8 * v142);
          if (v148 != (unint64_t *)v139[11] && v147 != 0)
            md::VKMRenderResourcesStore::disconnect<ggl::DaVinci::Shadow>(v8, *v148);
        }
      }
    }
  }
  v150 = (_QWORD *)gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(a2);
  v151 = v150[4];
  if (v26 < (v150[5] - v151) >> 3)
  {
    v152 = *(_QWORD *)(v151 + 8 * v26);
    if (v152)
    {
      v153 = *(unsigned __int16 *)(v152 + 2 * (HIDWORD(a3) & 0x7F));
      v155 = v150[7];
      v154 = v150[8];
      if (v153 < (v154 - v155) >> 3)
      {
        v156 = v155 + 8 * v153;
        if (v156 != v154 && *(_DWORD *)(v156 + 4) == HIDWORD(a3))
        {
          v158 = v150[10];
          v159 = (unint64_t *)(v158 + 8 * v153);
          if (v159 != (unint64_t *)v150[11] && v158 != 0)
            md::VKMRenderResourcesStore::disconnect<ggl::DaVinci::Shadow>(v8, *v159);
        }
      }
    }
  }
  v161 = (_QWORD *)gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(a2);
  v162 = v161[4];
  if (v26 < (v161[5] - v162) >> 3)
  {
    v163 = *(_QWORD *)(v162 + 8 * v26);
    if (v163)
    {
      v164 = *(unsigned __int16 *)(v163 + 2 * (HIDWORD(a3) & 0x7F));
      v166 = v161[7];
      v165 = v161[8];
      if (v164 < (v165 - v166) >> 3)
      {
        v167 = v166 + 8 * v164;
        if (v167 != v165 && *(_DWORD *)(v167 + 4) == HIDWORD(a3))
        {
          v169 = v161[10];
          v170 = (unint64_t *)(v169 + 8 * v164);
          if (v170 != (unint64_t *)v161[11] && v169 != 0)
          {
            v172 = v8[454];
            if (v172)
            {
              v173 = *v170;
              v174 = (uint8x8_t)vcnt_s8(v172);
              v174.i16[0] = vaddlv_u8(v174);
              if (v174.u32[0] > 1uLL)
              {
                v175 = v173;
                if (*(_QWORD *)&v172 <= v173)
                  v175 = v173 % *(_QWORD *)&v172;
              }
              else
              {
                v175 = (*(_QWORD *)&v172 - 1) & v173;
              }
              v176 = *(_QWORD **)(*(_QWORD *)&v8[453] + 8 * v175);
              if (v176)
              {
                v177 = (_QWORD *)*v176;
                if (v177)
                {
                  if (v174.u32[0] < 2uLL)
                  {
                    v178 = *(_QWORD *)&v172 - 1;
                    while (1)
                    {
                      v180 = v177[1];
                      if (v180 == v173)
                      {
                        if (v177[2] == v173)
                          goto LABEL_254;
                      }
                      else if ((v180 & v178) != v175)
                      {
                        goto LABEL_257;
                      }
                      v177 = (_QWORD *)*v177;
                      if (!v177)
                        goto LABEL_257;
                    }
                  }
                  do
                  {
                    v179 = v177[1];
                    if (v179 == v173)
                    {
                      if (v177[2] == v173)
                      {
LABEL_254:
                        v181 = v177[4];
                        if (!v181 || (v182 = v181 - 1, (v177[4] = v182) == 0))
                          v177[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v179 >= *(_QWORD *)&v172)
                        v179 %= *(_QWORD *)&v172;
                      if (v179 != v175)
                        break;
                    }
                    v177 = (_QWORD *)*v177;
                  }
                  while (v177);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_257:
  v183 = (_QWORD *)gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(a2);
  v184 = v183[4];
  if (v26 < (v183[5] - v184) >> 3)
  {
    v185 = *(_QWORD *)(v184 + 8 * v26);
    if (v185)
    {
      v186 = *(unsigned __int16 *)(v185 + 2 * (HIDWORD(a3) & 0x7F));
      v188 = v183[7];
      v187 = v183[8];
      if (v186 < (v187 - v188) >> 3)
      {
        v189 = v188 + 8 * v186;
        if (v189 != v187 && *(_DWORD *)(v189 + 4) == HIDWORD(a3))
        {
          v191 = v183[10];
          v192 = (unint64_t *)(v191 + 8 * v186);
          if (v192 != (unint64_t *)v183[11] && v191 != 0)
          {
            v194 = v8[476];
            if (v194)
            {
              v195 = *v192;
              v196 = (uint8x8_t)vcnt_s8(v194);
              v196.i16[0] = vaddlv_u8(v196);
              if (v196.u32[0] > 1uLL)
              {
                v197 = v195;
                if (*(_QWORD *)&v194 <= v195)
                  v197 = v195 % *(_QWORD *)&v194;
              }
              else
              {
                v197 = (*(_QWORD *)&v194 - 1) & v195;
              }
              v198 = *(_QWORD **)(*(_QWORD *)&v8[475] + 8 * v197);
              if (v198)
              {
                v199 = (_QWORD *)*v198;
                if (v199)
                {
                  if (v196.u32[0] < 2uLL)
                  {
                    v200 = *(_QWORD *)&v194 - 1;
                    while (1)
                    {
                      v202 = v199[1];
                      if (v202 == v195)
                      {
                        if (v199[2] == v195)
                          goto LABEL_290;
                      }
                      else if ((v202 & v200) != v197)
                      {
                        goto LABEL_293;
                      }
                      v199 = (_QWORD *)*v199;
                      if (!v199)
                        goto LABEL_293;
                    }
                  }
                  do
                  {
                    v201 = v199[1];
                    if (v201 == v195)
                    {
                      if (v199[2] == v195)
                      {
LABEL_290:
                        v203 = v199[4];
                        if (!v203 || (v204 = v203 - 1, (v199[4] = v204) == 0))
                          v199[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v201 >= *(_QWORD *)&v194)
                        v201 %= *(_QWORD *)&v194;
                      if (v201 != v197)
                        break;
                    }
                    v199 = (_QWORD *)*v199;
                  }
                  while (v199);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_293:
  v205 = (_QWORD *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(a2);
  v206 = v205[4];
  if (v26 < (v205[5] - v206) >> 3)
  {
    v207 = *(_QWORD *)(v206 + 8 * v26);
    if (v207)
    {
      v208 = *(unsigned __int16 *)(v207 + 2 * (HIDWORD(a3) & 0x7F));
      v210 = v205[7];
      v209 = v205[8];
      if (v208 < (v209 - v210) >> 3)
      {
        v211 = v210 + 8 * v208;
        if (v211 != v209 && *(_DWORD *)(v211 + 4) == HIDWORD(a3))
        {
          v213 = v205[10];
          v214 = (unint64_t *)(v213 + 8 * v208);
          if (v214 != (unint64_t *)v205[11] && v213 != 0)
          {
            v216 = v8[682];
            if (v216)
            {
              v217 = *v214;
              v218 = (uint8x8_t)vcnt_s8(v216);
              v218.i16[0] = vaddlv_u8(v218);
              if (v218.u32[0] > 1uLL)
              {
                v219 = v217;
                if (*(_QWORD *)&v216 <= v217)
                  v219 = v217 % *(_QWORD *)&v216;
              }
              else
              {
                v219 = (*(_QWORD *)&v216 - 1) & v217;
              }
              v220 = *(_QWORD **)(*(_QWORD *)&v8[681] + 8 * v219);
              if (v220)
              {
                v221 = (_QWORD *)*v220;
                if (v221)
                {
                  if (v218.u32[0] < 2uLL)
                  {
                    v222 = *(_QWORD *)&v216 - 1;
                    while (1)
                    {
                      v224 = v221[1];
                      if (v224 == v217)
                      {
                        if (v221[2] == v217)
                          goto LABEL_326;
                      }
                      else if ((v224 & v222) != v219)
                      {
                        goto LABEL_329;
                      }
                      v221 = (_QWORD *)*v221;
                      if (!v221)
                        goto LABEL_329;
                    }
                  }
                  do
                  {
                    v223 = v221[1];
                    if (v223 == v217)
                    {
                      if (v221[2] == v217)
                      {
LABEL_326:
                        v225 = v221[4];
                        if (!v225 || (v226 = v225 - 1, (v221[4] = v226) == 0))
                          v221[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v223 >= *(_QWORD *)&v216)
                        v223 %= *(_QWORD *)&v216;
                      if (v223 != v219)
                        break;
                    }
                    v221 = (_QWORD *)*v221;
                  }
                  while (v221);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_329:
  v227 = (_QWORD *)gdc::Registry::storage<md::ls::TileMatrix>(a2);
  v228 = v227[4];
  if (v26 < (v227[5] - v228) >> 3)
  {
    v229 = *(_QWORD *)(v228 + 8 * v26);
    if (v229)
    {
      v230 = *(unsigned __int16 *)(v229 + 2 * (HIDWORD(a3) & 0x7F));
      v232 = v227[7];
      v231 = v227[8];
      if (v230 < (v231 - v232) >> 3)
      {
        v233 = v232 + 8 * v230;
        if (v233 != v231 && *(_DWORD *)(v233 + 4) == HIDWORD(a3))
        {
          v235 = v227[10];
          v236 = (unint64_t *)(v235 + 8 * v230);
          if (v236 != (unint64_t *)v227[11] && v235 != 0)
          {
            v238 = v8[1159];
            if (v238)
            {
              v239 = *v236;
              v240 = (uint8x8_t)vcnt_s8(v238);
              v240.i16[0] = vaddlv_u8(v240);
              if (v240.u32[0] > 1uLL)
              {
                v241 = v239;
                if (*(_QWORD *)&v238 <= v239)
                  v241 = v239 % *(_QWORD *)&v238;
              }
              else
              {
                v241 = (*(_QWORD *)&v238 - 1) & v239;
              }
              v242 = *(_QWORD **)(*(_QWORD *)&v8[1158] + 8 * v241);
              if (v242)
              {
                v243 = (_QWORD *)*v242;
                if (v243)
                {
                  if (v240.u32[0] < 2uLL)
                  {
                    v244 = *(_QWORD *)&v238 - 1;
                    while (1)
                    {
                      v246 = v243[1];
                      if (v246 == v239)
                      {
                        if (v243[2] == v239)
                          goto LABEL_362;
                      }
                      else if ((v246 & v244) != v241)
                      {
                        goto LABEL_365;
                      }
                      v243 = (_QWORD *)*v243;
                      if (!v243)
                        goto LABEL_365;
                    }
                  }
                  do
                  {
                    v245 = v243[1];
                    if (v245 == v239)
                    {
                      if (v243[2] == v239)
                      {
LABEL_362:
                        v247 = v243[4];
                        if (!v247 || (v248 = v247 - 1, (v243[4] = v248) == 0))
                          v243[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v245 >= *(_QWORD *)&v238)
                        v245 %= *(_QWORD *)&v238;
                      if (v245 != v241)
                        break;
                    }
                    v243 = (_QWORD *)*v243;
                  }
                  while (v243);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_365:
  v249 = (_QWORD *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>(a2);
  v250 = v249[4];
  if (v26 < (v249[5] - v250) >> 3)
  {
    v251 = *(_QWORD *)(v250 + 8 * v26);
    if (v251)
    {
      v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(a3) & 0x7F));
      v254 = v249[7];
      v253 = v249[8];
      if (v252 < (v253 - v254) >> 3)
      {
        v255 = v254 + 8 * v252;
        if (v255 != v253 && *(_DWORD *)(v255 + 4) == HIDWORD(a3))
        {
          v257 = v249[10];
          v258 = (unint64_t *)(v257 + 8 * v252);
          if (v258 != (unint64_t *)v249[11] && v257 != 0)
          {
            v260 = v8[1181];
            if (v260)
            {
              v261 = *v258;
              v262 = (uint8x8_t)vcnt_s8(v260);
              v262.i16[0] = vaddlv_u8(v262);
              if (v262.u32[0] > 1uLL)
              {
                v263 = v261;
                if (*(_QWORD *)&v260 <= v261)
                  v263 = v261 % *(_QWORD *)&v260;
              }
              else
              {
                v263 = (*(_QWORD *)&v260 - 1) & v261;
              }
              v264 = *(_QWORD **)(*(_QWORD *)&v8[1180] + 8 * v263);
              if (v264)
              {
                v265 = (_QWORD *)*v264;
                if (v265)
                {
                  if (v262.u32[0] < 2uLL)
                  {
                    v266 = *(_QWORD *)&v260 - 1;
                    while (1)
                    {
                      v268 = v265[1];
                      if (v268 == v261)
                      {
                        if (v265[2] == v261)
                          goto LABEL_398;
                      }
                      else if ((v268 & v266) != v263)
                      {
                        goto LABEL_401;
                      }
                      v265 = (_QWORD *)*v265;
                      if (!v265)
                        goto LABEL_401;
                    }
                  }
                  do
                  {
                    v267 = v265[1];
                    if (v267 == v261)
                    {
                      if (v265[2] == v261)
                      {
LABEL_398:
                        v269 = v265[4];
                        if (!v269 || (v270 = v269 - 1, (v265[4] = v270) == 0))
                          v265[3] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v267 >= *(_QWORD *)&v260)
                        v267 %= *(_QWORD *)&v260;
                      if (v267 != v263)
                        break;
                    }
                    v265 = (_QWORD *)*v265;
                  }
                  while (v265);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_401:
  if (v36)
  {
    v271 = *v36;
    v272 = v8[1254];
    v273 = (uint64_t)(*(_QWORD *)&v8[1255] - *(_QWORD *)&v272) >> 3;
    if (v271 < v273)
    {
      v274 = *(_QWORD *)(*(_QWORD *)&v272 + 8 * v271);
      if (v274
        && HIDWORD(*v36) == HIDWORD(v274)
        && *(_QWORD *)&v8[1257] + 8 * v274 != *(_QWORD *)&v8[1258])
      {
        v281 = *(_QWORD *)(*(_QWORD *)&v8[1260] + 8 * v274);
        v282 = v281;
        if (v281 < v273)
        {
          v283 = *(_QWORD *)(*(_QWORD *)&v272 + 8 * v281);
          v284 = *(_QWORD *)(*(_QWORD *)&v272 + 8 * v281);
          v33 = v284 == 0;
          v285 = HIDWORD(v283);
          v286 = HIDWORD(v284);
          if (!v33 && (_DWORD)v285 == (_DWORD)v286)
          {
            v288 = (char *)v8[1252];
            v289 = (unint64_t)v8[1253];
            if ((unint64_t)v288 >= v289)
            {
              v301 = (char *)v8[1251];
              v302 = (v288 - v301) >> 3;
              v303 = v302 + 1;
              if ((unint64_t)(v302 + 1) >> 61)
                goto LABEL_472;
              v304 = v289 - (_QWORD)v301;
              if (v304 >> 2 > v303)
                v303 = v304 >> 2;
              if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFF8)
                v305 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v305 = v303;
              if (v305)
              {
                if (v305 >> 61)
                  goto LABEL_473;
                v306 = operator new(8 * v305);
              }
              else
              {
                v306 = 0;
              }
              v313 = &v306[8 * v302];
              v314 = &v306[8 * v305];
              *v313 = v282;
              v290 = v313 + 1;
              if (v288 != v301)
              {
                v315 = v288 - v301 - 8;
                if (v315 < 0x58)
                  goto LABEL_476;
                if ((unint64_t)(v301 - v306) < 0x20)
                  goto LABEL_476;
                v316 = (v315 >> 3) + 1;
                v317 = &v306[8 * v302 - 16];
                v318 = v288 - 16;
                v319 = v316 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v320 = *(_OWORD *)v318;
                  *(v317 - 1) = *((_OWORD *)v318 - 1);
                  *v317 = v320;
                  v317 -= 2;
                  v318 -= 32;
                  v319 -= 4;
                }
                while (v319);
                v313 -= v316 & 0x3FFFFFFFFFFFFFFCLL;
                v288 -= 8 * (v316 & 0x3FFFFFFFFFFFFFFCLL);
                if (v316 != (v316 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_476:
                  do
                  {
                    v321 = *((_QWORD *)v288 - 1);
                    v288 -= 8;
                    *--v313 = v321;
                  }
                  while (v288 != v301);
                }
              }
              v8[1251] = (int8x8_t)v313;
              v8[1252] = (int8x8_t)v290;
              v8[1253] = (int8x8_t)v314;
              if (v301)
              {
                operator delete(v301);
                v272 = v8[1254];
              }
            }
            else
            {
              *(_QWORD *)v288 = v282;
              v290 = v288 + 8;
            }
            v8[1252] = (int8x8_t)v290;
            v322 = *(_QWORD *)(*(_QWORD *)&v272 + 8 * v282);
            v323 = v8[1258];
            v324 = v8[1257];
            v325 = *(_QWORD *)(*(_QWORD *)&v323 - *(_QWORD *)&v324 + *(_QWORD *)&v8[1260] - 8);
            v326 = 8 * v322;
            v327 = *(_QWORD *)(*(_QWORD *)&v324 + v326);
            *(_QWORD *)(*(_QWORD *)&v324 + v326) = *(_QWORD *)(*(_QWORD *)&v323 - 8);
            *(_QWORD *)(*(_QWORD *)&v323 - 8) = v327;
            *(_DWORD *)(*(_QWORD *)&v8[1254] + 8 * v325) = v322;
            v328 = v8[1260];
            v329 = (_QWORD *)v8[1261];
            v330 = *(_QWORD *)(*(_QWORD *)&v328 + v326);
            v331 = *--v329;
            *(_QWORD *)(*(_QWORD *)&v328 + v326) = v331;
            *v329 = v330;
            *(_QWORD *)&v8[1258] -= 8;
            v8[1261] = (int8x8_t)v329;
            *(_DWORD *)(*(_QWORD *)&v8[1254] + 8 * v282 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)&v8[1254] + 8 * v282 + 4) << 32)
                                                              + 0x100000000) >> 32;
            *(_DWORD *)(*(_QWORD *)&v8[1254] + 8 * v282) = (*(_QWORD *)&v8[1255] - *(_QWORD *)&v8[1254]) >> 3;
          }
        }
      }
    }
  }
  if (v47)
  {
    v276 = *v47;
    v277 = v8[1232];
    v278 = (uint64_t)(*(_QWORD *)&v8[1233] - *(_QWORD *)&v277) >> 3;
    if (v276 < v278)
    {
      v279 = *(_QWORD *)(*(_QWORD *)&v277 + 8 * v276);
      if (v279
        && HIDWORD(*v47) == HIDWORD(v279)
        && *(_QWORD *)&v8[1235] + 8 * v279 != *(_QWORD *)&v8[1236])
      {
        v291 = *(_QWORD *)(*(_QWORD *)&v8[1238] + 8 * v279);
        v292 = v291;
        if (v291 < v278)
        {
          v293 = *(_QWORD *)(*(_QWORD *)&v277 + 8 * v291);
          v294 = *(_QWORD *)(*(_QWORD *)&v277 + 8 * v291);
          v33 = v294 == 0;
          v295 = HIDWORD(v293);
          v296 = HIDWORD(v294);
          if (!v33 && (_DWORD)v295 == (_DWORD)v296)
          {
            v298 = (char *)v8[1230];
            v299 = (unint64_t)v8[1231];
            if ((unint64_t)v298 < v299)
            {
              *(_QWORD *)v298 = v292;
              v300 = v298 + 8;
LABEL_471:
              v8[1230] = (int8x8_t)v300;
              v341 = *(_QWORD *)(*(_QWORD *)&v277 + 8 * v292);
              v342 = v8[1236];
              v343 = v8[1235];
              v344 = *(_QWORD *)(*(_QWORD *)&v342 - *(_QWORD *)&v343 + *(_QWORD *)&v8[1238] - 8);
              v345 = 8 * v341;
              v346 = *(_QWORD *)(*(_QWORD *)&v343 + v345);
              *(_QWORD *)(*(_QWORD *)&v343 + v345) = *(_QWORD *)(*(_QWORD *)&v342 - 8);
              *(_QWORD *)(*(_QWORD *)&v342 - 8) = v346;
              *(_DWORD *)(*(_QWORD *)&v8[1232] + 8 * v344) = v341;
              v347 = v8[1238];
              v348 = (_QWORD *)v8[1239];
              v349 = *(_QWORD *)(*(_QWORD *)&v347 + v345);
              v350 = *--v348;
              *(_QWORD *)(*(_QWORD *)&v347 + v345) = v350;
              *v348 = v349;
              *(_QWORD *)&v8[1236] -= 8;
              v8[1239] = (int8x8_t)v348;
              *(_DWORD *)(*(_QWORD *)&v8[1232] + 8 * v292 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)&v8[1232] + 8 * v292 + 4) << 32)
                                                                + 0x100000000) >> 32;
              *(_DWORD *)(*(_QWORD *)&v8[1232] + 8 * v292) = (*(_QWORD *)&v8[1233] - *(_QWORD *)&v8[1232]) >> 3;
              return;
            }
            v307 = (char *)v8[1229];
            v308 = (v298 - v307) >> 3;
            v309 = v308 + 1;
            if (!((unint64_t)(v308 + 1) >> 61))
            {
              v310 = v299 - (_QWORD)v307;
              if (v310 >> 2 > v309)
                v309 = v310 >> 2;
              if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF8)
                v311 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v311 = v309;
              if (!v311)
              {
                v312 = 0;
LABEL_462:
                v332 = &v312[8 * v308];
                v333 = &v312[8 * v311];
                *v332 = v292;
                v300 = v332 + 1;
                if (v298 != v307)
                {
                  v334 = v298 - v307 - 8;
                  if (v334 < 0x58)
                    goto LABEL_477;
                  if ((unint64_t)(v307 - v312) < 0x20)
                    goto LABEL_477;
                  v335 = (v334 >> 3) + 1;
                  v336 = &v312[8 * v308 - 16];
                  v337 = v298 - 16;
                  v338 = v335 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v339 = *(_OWORD *)v337;
                    *(v336 - 1) = *((_OWORD *)v337 - 1);
                    *v336 = v339;
                    v336 -= 2;
                    v337 -= 32;
                    v338 -= 4;
                  }
                  while (v338);
                  v332 -= v335 & 0x3FFFFFFFFFFFFFFCLL;
                  v298 -= 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v335 != (v335 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_477:
                    do
                    {
                      v340 = *((_QWORD *)v298 - 1);
                      v298 -= 8;
                      *--v332 = v340;
                    }
                    while (v298 != v307);
                  }
                }
                v8[1229] = (int8x8_t)v332;
                v8[1230] = (int8x8_t)v300;
                v8[1231] = (int8x8_t)v333;
                if (v307)
                {
                  operator delete(v307);
                  v277 = v8[1232];
                }
                goto LABEL_471;
              }
              if (!(v311 >> 61))
              {
                v312 = operator new(8 * v311);
                goto LABEL_462;
              }
LABEL_473:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
LABEL_472:
            abort();
          }
        }
      }
    }
  }
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  v2 = (_QWORD *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(a1);
  v4 = v2[10];
  v3 = v2[11];
  v5 = v3 - v4;
  v29 = a1;
  if (v3 == v4)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new((unint64_t)v5 >> 1);
    v7 = &v6[8 * (v5 >> 4)];
    v8 = v6;
  }
  v10 = (uint64_t *)v2[7];
  v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    v11 = v8;
    while (1)
    {
      v12 = *v10;
      if (v11 >= v7)
        break;
      *(_QWORD *)v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          v27 = (unint64_t *)v8;
          do
          {
            v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    v13 = (v11 - v8) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    if ((v7 - v8) >> 2 > v14)
      v14 = (v7 - v8) >> 2;
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v13];
    *(_QWORD *)v17 = v12;
    v18 = v17 + 8;
    if (v11 != v8)
    {
      v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          v22 = (v19 >> 3) + 1;
          v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          v23 = &v16[8 * v13 - 16];
          v24 = v11 - 16;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_24;
        }
        else
        {
          v20 = v11;
        }
      }
      else
      {
        v20 = v11;
      }
      do
      {
        v21 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    v7 = &v16[8 * v15];
    if (v8)
      operator delete(v8);
    v8 = v17;
    v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
    operator delete(v8);
}

void sub_19F457F7C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  v2 = (_QWORD *)gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(a1);
  v4 = v2[10];
  v3 = v2[11];
  v5 = v3 - v4;
  v29 = a1;
  if (v3 == v4)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new((unint64_t)v5 >> 1);
    v7 = &v6[8 * (v5 >> 4)];
    v8 = v6;
  }
  v10 = (uint64_t *)v2[7];
  v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    v11 = v8;
    while (1)
    {
      v12 = *v10;
      if (v11 >= v7)
        break;
      *(_QWORD *)v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          v27 = (unint64_t *)v8;
          do
          {
            v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    v13 = (v11 - v8) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    if ((v7 - v8) >> 2 > v14)
      v14 = (v7 - v8) >> 2;
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v13];
    *(_QWORD *)v17 = v12;
    v18 = v17 + 8;
    if (v11 != v8)
    {
      v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          v22 = (v19 >> 3) + 1;
          v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          v23 = &v16[8 * v13 - 16];
          v24 = v11 - 16;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_24;
        }
        else
        {
          v20 = v11;
        }
      }
      else
      {
        v20 = v11;
      }
      do
      {
        v21 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    v7 = &v16[8 * v15];
    if (v8)
      operator delete(v8);
    v8 = v17;
    v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
    operator delete(v8);
}

void sub_19F4581F8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_44;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_44;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(unsigned int *)(v3 + 8 * *(unsigned int *)a2);
      v29 = *(_QWORD *)(a1 + 48);
      v30 = *(_QWORD *)(a1 + 56);
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x6DB6DB6DB6DB6DB8 * ((unint64_t)(v30 - v29) >> 3) - 8);
      v31 = (_QWORD *)(v29 + 56 * v28);
      v33 = *v31;
      v32 = v31[1];
      v34 = v31[2];
      v49 = v31[3];
      v31[2] = 0;
      v31[3] = 0;
      v31[1] = 0;
      v35 = v31 + 4;
      v50 = *((_OWORD *)v31 + 2);
      v36 = v31 + 6;
      v37 = v31[6];
      v31[6] = 0;
      v31[5] = 0;
      v31[4] = 0;
      *v31 = *(_QWORD *)(v30 - 56);
      *(_OWORD *)(v31 + 1) = *(_OWORD *)(v30 - 48);
      v31[3] = *(_QWORD *)(v30 - 32);
      *(_QWORD *)(v30 - 48) = 0;
      *(_QWORD *)(v30 - 40) = 0;
      *(_QWORD *)(v30 - 32) = 0;
      v38 = (void *)v31[4];
      if (v38)
      {
        *(_QWORD *)(v29 + 56 * v28 + 40) = v38;
        operator delete(v38);
        *v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
      }
      *(_OWORD *)v35 = *(_OWORD *)(v30 - 24);
      *v36 = *(_QWORD *)(v30 - 8);
      *(_QWORD *)(v30 - 24) = 0;
      *(_QWORD *)(v30 - 16) = 0;
      *(_QWORD *)(v30 - 8) = 0;
      *(_QWORD *)(v30 - 56) = v33;
      v39 = *(void **)(v30 - 48);
      if (v39)
      {
        *(_QWORD *)(v30 - 40) = v39;
        operator delete(v39);
        v40 = *(void **)(v30 - 24);
        *(_QWORD *)(v30 - 48) = v32;
        *(_QWORD *)(v30 - 40) = v34;
        *(_QWORD *)(v30 - 32) = v49;
        v41 = v51;
        if (v40)
        {
          *(_QWORD *)(v30 - 16) = v40;
          operator delete(v40);
        }
      }
      else
      {
        *(_QWORD *)(v30 - 48) = v32;
        *(_QWORD *)(v30 - 40) = v34;
        *(_QWORD *)(v30 - 32) = v49;
        v41 = v51;
      }
      *(_OWORD *)(v30 - 24) = v50;
      *(_QWORD *)(v30 - 8) = v37;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v41) = v28;
      v42 = *(_QWORD *)(a1 + 72);
      v43 = *(_QWORD *)(a1 + 80);
      v44 = *(_QWORD *)(v42 + 8 * v28);
      *(_QWORD *)(v42 + 8 * v28) = *(_QWORD *)(v43 - 8);
      *(_QWORD *)(v43 - 8) = v44;
      v45 = *(_QWORD *)(a1 + 56);
      v46 = *(void **)(v45 - 24);
      if (v46)
      {
        *(_QWORD *)(v45 - 16) = v46;
        operator delete(v46);
      }
      v47 = *(void **)(v45 - 48);
      if (v47)
      {
        *(_QWORD *)(v45 - 40) = v47;
        operator delete(v47);
      }
      *(_QWORD *)(a1 + 56) = v45 - 56;
      *(_QWORD *)(a1 + 80) -= 8;
      v48 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v48 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v48 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v48) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *__p;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD ***)(*a1 + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v6);
              if (__p)
                operator delete(__p);
              return;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
}

uint64_t gdc::Registry::storage<md::ls::PendingDeletion>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x34ACED59D994E35ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x34ACED59D994E35ELL;
      if (*(_QWORD *)&v3 <= 0x34ACED59D994E35EuLL)
        v5 = 0x34ACED59D994E35EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x34ACED59D994E35ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x34ACED59D994E35ELL)
            {
              if (v7[2] == 0x34ACED59D994E35ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x34ACED59D994E35ELL)
          {
            if (v7[2] == 0x34ACED59D994E35ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PendingDeletion]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271A48;
  *(_QWORD *)(v11 + 8) = 0x34ACED59D994E35ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x34ACED59D994E35EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x34ACED59D994E35ELL;
  v15[1] = "md::ls::PendingDeletion]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x34ACED59D994E35ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F458870(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(char **a1, uint64_t a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *i;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const double *v47;
  double *v48;
  uint64_t v49;
  const double *v50;
  double *v51;
  uint64_t v52;
  const double *v53;
  double *v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  float64x2x2_t v58;
  float64x2x2_t v59;
  float64x2x2_t v60;
  float64x2x2_t v61;

  if (a5 < 1)
    return;
  v6 = (__int128 *)a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = v10 >> 4;
  v12 = &(*a1)[v10 & 0xFFFFFFFFFFFFFFF0];
  v13 = a1[2];
  if (a5 <= (v13 - v9) >> 4)
  {
    v19 = (v9 - v12) >> 4;
    if (v19 >= a5)
    {
      v20 = (__int128 *)(a3 + 16 * a5);
      v22 = a1[1];
    }
    else
    {
      v20 = (__int128 *)(a3 + 16 * v19);
      if (v20 == a4)
      {
        v22 = a1[1];
      }
      else
      {
        v21 = v20;
        v22 = a1[1];
        do
        {
          v23 = *v21++;
          *(_OWORD *)v22 = v23;
          v22 += 16;
        }
        while (v21 != a4);
      }
      a1[1] = v22;
      if (v9 - v12 < 1)
        return;
    }
    v34 = &v12[16 * a5];
    v35 = &v22[-16 * a5];
    v36 = v22;
    if (v35 < v9)
    {
      v37 = &v22[-16 * a5];
      v36 = v22;
      do
      {
        v38 = *(_OWORD *)v37;
        v37 += 16;
        *(_OWORD *)v36 = v38;
        v36 += 16;
      }
      while (v37 < v9);
    }
    a1[1] = v36;
    if (v22 != v34)
    {
      v39 = v22 - v34;
      v40 = v22 - v34 - 16;
      if (v40 < 0xD0
        || &v22[-(v39 & 0xFFFFFFFFFFFFFFF0)] < v35
        && &v8[v39 + (v10 & 0xFFFFFFFFFFFFFFF0) - (v39 & 0xFFFFFFFFFFFFFFF0)] < v22)
      {
        v41 = v22;
        goto LABEL_39;
      }
      v52 = (v40 >> 4) + 1;
      v41 = &v22[-16 * (v52 & 0x1FFFFFFFFFFFFFFCLL)];
      v53 = (const double *)(v35 - 32);
      v54 = (double *)(v22 - 32);
      v55 = v52 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = vld2q_f64(v53);
        v56 = v53 - 4;
        v61 = vld2q_f64(v56);
        vst2q_f64(v54, v59);
        v57 = v54 - 4;
        vst2q_f64(v57, v61);
        v54 -= 8;
        v53 -= 8;
        v55 -= 4;
      }
      while (v55);
      if (v52 != (v52 & 0x1FFFFFFFFFFFFFFCLL))
      {
        v35 -= 16 * (v52 & 0x1FFFFFFFFFFFFFFCLL);
LABEL_39:
        v42 = v41 - 8;
        do
        {
          v43 = *((_QWORD *)v35 - 2);
          v35 -= 16;
          *((_QWORD *)v42 - 1) = v43;
          *(_QWORD *)v42 = *((_QWORD *)v35 + 1);
          v42 -= 16;
        }
        while (v35 != v12);
      }
    }
    if (v20 == (__int128 *)a3)
      return;
    v44 = (unint64_t)v20 - a3 - 16;
    if (v44 >= 0xD0
      && ((unint64_t)v12 >= (v44 & 0xFFFFFFFFFFFFFFF0) + a3 + 16
       || (unint64_t)&v8[(v10 & 0xFFFFFFFFFFFFFFF0) + 16 + (v44 & 0xFFFFFFFFFFFFFFF0)] <= a3))
    {
      v45 = (v44 >> 4) + 1;
      v46 = 16 * (v45 & 0x1FFFFFFFFFFFFFFCLL);
      v12 += v46;
      v47 = (const double *)(a3 + 32);
      v48 = (double *)&v8[16 * v11 + 32];
      v49 = v45 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = v47 - 4;
        v58 = vld2q_f64(v50);
        v60 = vld2q_f64(v47);
        v51 = v48 - 4;
        vst2q_f64(v51, v58);
        vst2q_f64(v48, v60);
        v47 += 8;
        v48 += 8;
        v49 -= 4;
      }
      while (v49);
      if (v45 == (v45 & 0x1FFFFFFFFFFFFFFCLL))
        return;
      v6 = (__int128 *)(a3 + v46);
    }
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v6;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v6++ + 1);
      v12 += 16;
    }
    while (v6 != v20);
    return;
  }
  v14 = a5 + ((v9 - v8) >> 4);
  if (v14 >> 60)
    abort();
  v15 = v13 - v8;
  v16 = v15 >> 3;
  if (v15 >> 3 <= v14)
    v16 = v14;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  if (v17)
  {
    if (v17 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v18 = (char *)operator new(16 * v17);
  }
  else
  {
    v18 = 0;
  }
  v24 = &v18[16 * v11];
  v25 = 16 * a5;
  v26 = &v24[16 * a5];
  v27 = v24;
  do
  {
    v28 = *v6++;
    *(_OWORD *)v27 = v28;
    v27 += 16;
    v25 -= 16;
  }
  while (v25);
  v29 = *a1;
  if (*a1 != v12)
  {
    v30 = v12;
    do
    {
      *((_OWORD *)v24 - 1) = *((_OWORD *)v30 - 1);
      v24 -= 16;
      v30 -= 16;
    }
    while (v30 != v29);
    v9 = a1[1];
  }
  for (i = &v18[16 * v17]; v12 != v9; v26 += 16)
  {
    v32 = *(_OWORD *)v12;
    v12 += 16;
    *(_OWORD *)v26 = v32;
  }
  v33 = *a1;
  *a1 = v24;
  a1[1] = v26;
  a1[2] = i;
  if (v33)
    operator delete(v33);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *v10;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          *v10 = *v8;
          *v8 = v107;
          v108 = v10[1];
          v10[1] = *v9;
          goto LABEL_185;
        }
        return result;
      case 3:
        v109 = v10[2];
        v110 = *(unsigned __int8 *)(*(_QWORD *)(v109 + 384) + 169);
        v111 = *v10;
        v112 = *v8;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
        if (v110 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          if (v113 <= v110)
            return result;
          v10[2] = v112;
          *v8 = v109;
          v156 = v10[3];
          v10[3] = *v9;
          *v9 = v156;
          v157 = v10[2];
          v158 = *v10;
          if (*(unsigned __int8 *)(*(_QWORD *)(v157 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            return result;
          *v10 = v157;
          v10[2] = v158;
          v114 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v113 <= v110)
          {
            v114 = v10 + 3;
            v167 = v10[3];
            v168 = v10[1];
            *v10 = v109;
            v10[1] = v167;
            v10[2] = v111;
            v10[3] = v168;
            if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v111 + 384) + 169))
              return result;
            v10[2] = *v8;
          }
          else
          {
            v114 = v10 + 1;
            *v10 = v112;
          }
          *v8 = v111;
        }
        v108 = *v114;
        *v114 = *v9;
LABEL_185:
        *v9 = v108;
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v128 = (unint64_t)(v12 - 2) >> 1;
              v129 = v128;
              do
              {
                v130 = v129;
                if (v128 >= v129)
                {
                  v131 = (2 * v129) | 1;
                  v132 = &v10[2 * v131];
                  if (2 * v130 + 2 >= v12)
                  {
                    v136 = *v132;
                  }
                  else
                  {
                    v133 = *(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169);
                    v134 = *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169);
                    v135 = v133 > v134;
                    if (v133 <= v134)
                      v136 = *v132;
                    else
                      v136 = v132[2];
                    if (v135)
                    {
                      v132 += 2;
                      v131 = 2 * v130 + 2;
                    }
                  }
                  v137 = &v10[2 * v130];
                  v138 = *v137;
                  result = *(unsigned __int8 *)(*(_QWORD *)(*v137 + 384) + 169);
                  if (*(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169) <= result)
                  {
                    v139 = v137[1];
                    do
                    {
                      result = (unint64_t)v137;
                      v137 = v132;
                      *(_QWORD *)result = v136;
                      *(_QWORD *)(result + 8) = v132[1];
                      if (v128 < v131)
                        break;
                      v140 = (2 * v131) | 1;
                      v132 = &v10[2 * v140];
                      v131 = 2 * v131 + 2;
                      if (v131 < v12)
                      {
                        v136 = *v132;
                        if (*(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169))
                        {
                          v131 = v140;
                        }
                        else
                        {
                          v136 = v132[2];
                          v132 += 2;
                        }
                      }
                      else
                      {
                        v136 = *v132;
                        v131 = v140;
                      }
                      result = *(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(_QWORD *)(v138 + 384) + 169));
                    *v137 = v138;
                    v137[1] = v139;
                  }
                }
                v129 = v130 - 1;
              }
              while (v130);
              v141 = (unint64_t)v11 >> 4;
              do
              {
                v142 = 0;
                v143 = *v10;
                v144 = v10[1];
                v145 = v10;
                do
                {
                  v147 = &v145[2 * v142 + 2];
                  v148 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    v146 = *v147;
                    result = (unint64_t)(v147 + 2);
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v147[2] + 384) + 169))
                    {
                      v142 = v148;
                    }
                    else
                    {
                      v146 = v147[2];
                      v147 += 2;
                    }
                  }
                  else
                  {
                    v146 = *v147;
                    v142 = v148;
                  }
                  *v145 = v146;
                  v145[1] = v147[1];
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == a2 - 2)
                {
                  *v147 = v143;
                  v147[1] = v144;
                }
                else
                {
                  *v147 = *(a2 - 2);
                  v147[1] = *(a2 - 1);
                  *(a2 - 2) = v143;
                  *(a2 - 1) = v144;
                  v149 = (char *)v147 - (char *)v10 + 16;
                  if (v149 >= 17)
                  {
                    v150 = (((unint64_t)v149 >> 4) - 2) >> 1;
                    v151 = &v10[2 * v150];
                    v152 = *v151;
                    v153 = *v147;
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169))
                    {
                      v154 = v147[1];
                      do
                      {
                        v155 = v147;
                        v147 = v151;
                        *v155 = v152;
                        v155[1] = v151[1];
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[2 * v150];
                        v152 = *v151;
                      }
                      while (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v153 + 384) + 169));
                      *v147 = v153;
                      v147[1] = v154;
                    }
                  }
                }
                a2 -= 2;
                v135 = v141-- <= 2;
              }
              while (!v135);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
          if ((unint64_t)v11 >= 0x801)
          {
            v17 = *v14;
            v18 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
            v19 = *v10;
            if (v18 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            {
              if (v16 <= v18
                || (*v14 = v15,
                    *v8 = v17,
                    v26 = v14 + 1,
                    v25 = v14[1],
                    v14[1] = *v9,
                    *v9 = v25,
                    v27 = *v10,
                    *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169)))
              {
LABEL_23:
                v34 = &v10[2 * v13];
                v37 = *(v34 - 2);
                v35 = v34 - 2;
                v36 = v37;
                v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169);
                v39 = v10[2];
                v40 = *(a2 - 4);
                v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 384) + 169);
                if (v38 <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                {
                  if (v41 <= v38
                    || (*v35 = v40,
                        *(a2 - 4) = v36,
                        v43 = v35 + 1,
                        v44 = v35[1],
                        v35[1] = *(a2 - 3),
                        *(a2 - 3) = v44,
                        v45 = v10[2],
                        *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v45 + 384) + 169)))
                  {
LABEL_36:
                    v52 = &v10[2 * v13];
                    v55 = v52[2];
                    v53 = v52 + 2;
                    v54 = v55;
                    v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 384) + 169);
                    v57 = v10[4];
                    v58 = *(a2 - 6);
                    v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 384) + 169);
                    if (v56 <= *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169))
                    {
                      if (v59 > v56)
                      {
                        *v53 = v58;
                        *(a2 - 6) = v54;
                        v62 = v53 + 1;
                        v61 = v53[1];
                        v53[1] = *(a2 - 5);
                        *(a2 - 5) = v61;
                        v54 = *v53;
                        v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        v63 = v10[4];
                        if (v56 > *(unsigned __int8 *)(*(_QWORD *)(v63 + 384) + 169))
                        {
                          v10[4] = v54;
                          *v53 = v63;
                          v60 = v10 + 5;
LABEL_45:
                          v67 = *v60;
                          *v60 = *v62;
                          *v62 = v67;
                          v54 = *v53;
                          v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v59 > v56)
                      {
                        v60 = v10 + 5;
                        v10[4] = v58;
LABEL_44:
                        *(a2 - 6) = v57;
                        v62 = a2 - 5;
                        goto LABEL_45;
                      }
                      v60 = v53 + 1;
                      v64 = v53[1];
                      v65 = v10[5];
                      v10[4] = v54;
                      v10[5] = v64;
                      *v53 = v57;
                      v53[1] = v65;
                      v66 = *(a2 - 6);
                      v56 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169);
                      if (*(unsigned __int8 *)(*(_QWORD *)(v66 + 384) + 169) > v56)
                      {
                        *v53 = v66;
                        goto LABEL_44;
                      }
                      v54 = v57;
                    }
                    v68 = *v14;
                    v69 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
                    v70 = *v35;
                    if (v69 <= *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169))
                    {
                      if (v56 <= v69)
                      {
LABEL_56:
                        v78 = *v10;
                        *v10 = v68;
                        v24 = v10 + 1;
                        *v14 = v78;
                        v30 = v14 + 1;
                        goto LABEL_57;
                      }
                      *v14 = v54;
                      v73 = v14 + 1;
                      v74 = v14[1];
                      v14[1] = v53[1];
                      *v53 = v68;
                      v53[1] = v74;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                      {
                        v68 = v54;
                        goto LABEL_56;
                      }
                      *v35 = v54;
                      v71 = v35 + 1;
                      *v14 = v70;
                    }
                    else
                    {
                      if (v56 <= v69)
                      {
                        *v14 = v70;
                        v75 = v14[1];
                        v76 = v35[1];
                        *v35 = v68;
                        v35[1] = v75;
                        v14[1] = v76;
                        if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                        {
                          v68 = v70;
                          goto LABEL_56;
                        }
                        *v14 = v54;
                        *v53 = v70;
                        v72 = v53 + 1;
                        v71 = v14 + 1;
                      }
                      else
                      {
                        *v35 = v54;
                        v71 = v35 + 1;
                        *v53 = v70;
                        v72 = v53 + 1;
                      }
                      v73 = v72;
                    }
                    v77 = *v71;
                    *v71 = *v73;
                    *v73 = v77;
                    v68 = *v14;
                    goto LABEL_56;
                  }
                  v10[2] = *v35;
                  *v35 = v45;
                  v42 = v10 + 3;
                }
                else
                {
                  if (v41 <= v38)
                  {
                    v42 = v35 + 1;
                    v48 = v35[1];
                    v49 = v10[3];
                    v10[2] = v36;
                    v10[3] = v48;
                    *v35 = v39;
                    v35[1] = v49;
                    v50 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v50 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                      goto LABEL_36;
                    *v35 = v50;
                  }
                  else
                  {
                    v42 = v10 + 3;
                    v10[2] = v40;
                  }
                  *(a2 - 4) = v39;
                  v43 = a2 - 3;
                }
                v51 = *v42;
                *v42 = *v43;
                *v43 = v51;
                goto LABEL_36;
              }
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v27;
            }
            else
            {
              if (v16 <= v18)
              {
                v20 = v14 + 1;
                v31 = v14[1];
                v32 = v10[1];
                *v10 = v17;
                v10[1] = v31;
                *v14 = v19;
                v14[1] = v32;
                if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v19 + 384) + 169))
                  goto LABEL_23;
                *v14 = *v8;
              }
              else
              {
                v20 = v10 + 1;
                *v10 = v15;
              }
              *v8 = v19;
              v26 = a2 - 1;
            }
            v33 = *v20;
            *v20 = *v26;
            *v26 = v33;
            goto LABEL_23;
          }
          v21 = *v10;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169);
          v23 = *v14;
          if (v22 <= *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
          {
            if (v16 > v22)
            {
              *v10 = v15;
              *v8 = v21;
              v28 = v10[1];
              v10[1] = *v9;
              *v9 = v28;
              v21 = *v10;
              v29 = *v14;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
              {
                *v14 = v21;
                *v10 = v29;
                v24 = v14 + 1;
                v30 = v10 + 1;
LABEL_57:
                v79 = *v24;
                *v24 = *v30;
                *v30 = v79;
                v21 = *v10;
              }
            }
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_59;
LABEL_61:
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
            if (*(unsigned __int8 *)(*(_QWORD *)(*(v10 - 2) + 384) + 169) > v80)
              goto LABEL_62;
            if (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169))
            {
              v97 = v10 + 2;
              do
              {
                v10 = v97;
                if (v97 >= a2)
                  break;
                v97 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169));
            }
            else
            {
              do
              {
                v96 = v10[2];
                v10 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(v96 + 384) + 169));
            }
            v98 = a2;
            if (v10 < a2)
            {
              v98 = a2;
              do
              {
                v99 = *(v98 - 2);
                v98 -= 2;
              }
              while (v80 > *(unsigned __int8 *)(*(_QWORD *)(v99 + 384) + 169));
            }
            v100 = v7[1];
            if (v10 < v98)
            {
              v101 = *v10;
              v102 = *v98;
              do
              {
                *v10 = v102;
                *v98 = v101;
                v103 = v10[1];
                v10[1] = v98[1];
                v98[1] = v103;
                v104 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
                do
                {
                  v105 = v10[2];
                  v10 += 2;
                  v101 = v105;
                }
                while (v104 <= *(unsigned __int8 *)(*(_QWORD *)(v105 + 384) + 169));
                do
                {
                  v106 = *(v98 - 2);
                  v98 -= 2;
                  v102 = v106;
                }
                while (v104 > *(unsigned __int8 *)(*(_QWORD *)(v106 + 384) + 169));
              }
              while (v10 < v98);
            }
            if (v10 - 2 != v7)
            {
              *v7 = *(v10 - 2);
              v7[1] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 2) = v21;
            *(v10 - 1) = v100;
            continue;
          }
          if (v16 > v22)
          {
            v24 = v14 + 1;
            *v14 = v15;
LABEL_31:
            *v8 = v23;
            v30 = a2 - 1;
            goto LABEL_57;
          }
          v24 = v10 + 1;
          v46 = v10[1];
          v47 = v14[1];
          *v14 = v21;
          v14[1] = v46;
          *v10 = v23;
          v10[1] = v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v23 + 384) + 169))
          {
            *v10 = *v8;
            goto LABEL_31;
          }
          v21 = v23;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_59:
          v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
LABEL_62:
          v81 = v10[1];
          v82 = v10;
          do
          {
            v83 = v82;
            v85 = v82[2];
            v82 += 2;
            v84 = v85;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v85 + 384) + 169) > v80);
          v86 = a2;
          if (v83 == v10)
          {
            v86 = a2;
            do
            {
              if (v82 >= v86)
                break;
              v88 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v88 + 384) + 169) <= v80);
          }
          else
          {
            do
            {
              v87 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v87 + 384) + 169) <= v80);
          }
          if (v82 >= v86)
          {
            v10 = v82;
          }
          else
          {
            v89 = *v86;
            v10 = v82;
            v90 = v86;
            do
            {
              *v10 = v89;
              *v90 = v84;
              v91 = v10[1];
              v10[1] = v90[1];
              v90[1] = v91;
              v92 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
              do
              {
                v93 = v10[2];
                v10 += 2;
                v84 = v93;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v93 + 384) + 169) > v92);
              do
              {
                v94 = *(v90 - 2);
                v90 -= 2;
                v89 = v94;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v94 + 384) + 169) <= v92);
            }
            while (v10 < v90);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          *(v10 - 2) = v21;
          *(v10 - 1) = v81;
          if (v82 < v86)
            goto LABEL_83;
          v95 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v7, v10 - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v95)
              continue;
LABEL_83:
            result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v7, v10 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 2;
          if (v95)
            return result;
          goto LABEL_2;
        }
        v115 = v10 + 2;
        v117 = v10 == a2 || v115 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v117)
          {
            v118 = 0;
            v119 = v10;
            do
            {
              v121 = v115;
              v122 = v119[2];
              v123 = *v119;
              if (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v119 + 384) + 169))
              {
                v124 = v119[3];
                v125 = v118;
                do
                {
                  v126 = (char *)v10 + v125;
                  v127 = *(uint64_t *)((char *)v10 + v125 + 8);
                  *((_QWORD *)v126 + 2) = v123;
                  *((_QWORD *)v126 + 3) = v127;
                  if (!v125)
                  {
                    v120 = v10;
                    goto LABEL_125;
                  }
                  v123 = *((_QWORD *)v126 - 2);
                  v125 -= 16;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v123 + 384) + 169));
                v120 = (uint64_t *)((char *)v10 + v125 + 16);
LABEL_125:
                *v120 = v122;
                v120[1] = v124;
              }
              v115 = v121 + 2;
              v118 += 16;
              v119 = v121;
            }
            while (v121 + 2 != a2);
          }
        }
        else if (!v117)
        {
          v159 = v10 + 3;
          do
          {
            v160 = v115;
            v161 = v7[2];
            v162 = *v7;
            if (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v7 + 384) + 169))
            {
              v163 = v7[3];
              v164 = v159;
              do
              {
                v165 = v164;
                *(v164 - 1) = v162;
                v166 = *(v164 - 2);
                v164 -= 2;
                *v165 = v166;
                v162 = *(v165 - 5);
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v162 + 384) + 169));
              *(v164 - 1) = v161;
              *v164 = v163;
            }
            v115 = v160 + 2;
            v159 += 2;
            v7 = v160;
          }
          while (v160 + 2 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*a2 + 384) + 169);
  v6 = *result;
  v7 = *a3;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*a3 + 384) + 169);
  if (v5 <= *(unsigned __int8 *)(*(_QWORD *)(*result + 384) + 169))
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v4;
      v11 = a2 + 1;
      v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      v12 = *result;
      if (*(unsigned __int8 *)(*(_QWORD *)(*a2 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*result + 384) + 169))
      {
        *result = *a2;
        v9 = result + 1;
        *a2 = v12;
LABEL_10:
        v14 = *v9;
        *v9 = *v11;
        *v11 = v14;
      }
    }
  }
  else
  {
    if (v8 > v5)
    {
      v9 = result + 1;
      *result = v7;
LABEL_9:
      *a3 = v6;
      v11 = a3 + 1;
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v6;
    v9 = a2 + 1;
    v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    v6 = *a2;
    if (*(unsigned __int8 *)(*(_QWORD *)(*a3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a2 + 384)
                                                                                                 + 169))
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  v15 = *a3;
  if (*(unsigned __int8 *)(*(_QWORD *)(*a4 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a3 + 384)
                                                                                               + 169))
  {
    *a3 = *a4;
    *a4 = v15;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a2;
    if (*(unsigned __int8 *)(*(_QWORD *)(*a3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a2 + 384)
                                                                                                 + 169))
    {
      *a2 = *a3;
      *a3 = v17;
      v18 = a2[1];
      a2[1] = a3[1];
      a3[1] = v18;
      v19 = *result;
      if (*(unsigned __int8 *)(*(_QWORD *)(*a2 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*result + 384) + 169))
      {
        *result = *a2;
        *a2 = v19;
        v20 = result[1];
        result[1] = a2[1];
        a2[1] = v20;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a2, a3, a4);
  v11 = *a4;
  if (*(unsigned __int8 *)(*(_QWORD *)(*a5 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a4 + 384)
                                                                                               + 169))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = *a3;
    if (*(unsigned __int8 *)(*(_QWORD *)(*a4 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a3 + 384)
                                                                                                 + 169))
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      v15 = *a2;
      if (*(unsigned __int8 *)(*(_QWORD *)(*a3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a2 + 384) + 169))
      {
        *a2 = *a3;
        *a3 = v15;
        v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        v17 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(*a2 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = *a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 2);
      v4 = *a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v6 = a1[2];
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 384) + 169);
      v8 = *a1;
      v9 = *(a2 - 2);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          v11 = a1 + 3;
          v26 = a1[3];
          v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(_QWORD *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 384) + 169))
            return 1;
          a1[2] = v28;
        }
        else
        {
          v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        v20 = a1 + 3;
        v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        v21 = a1[2];
        v22 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          v11 = a1 + 1;
LABEL_21:
          v29 = *v11;
          *v11 = *v20;
          *v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 384) + 169);
      v16 = *a1;
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          v18 = a1 + 3;
          v30 = a1[3];
          v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
            goto LABEL_26;
          a1[2] = v13;
        }
        else
        {
          v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        v24 = a1 + 3;
        v23 = a1[3];
        v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          v18 = a1 + 1;
LABEL_25:
          v32 = *v18;
          *v18 = *v24;
          *v24 = v32;
        }
      }
LABEL_26:
      v33 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v37 = *v33;
        v38 = *v12;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v12 + 384) + 169))
        {
          v39 = v33[1];
          v40 = v34;
          do
          {
            v41 = (uint64_t *)((char *)a1 + v40);
            v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              v36 = a1;
              goto LABEL_29;
            }
            v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v38 + 384) + 169));
          v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *v36 = v37;
          v36[1] = v39;
          if (++v35 == 8)
            return v33 + 2 == a2;
        }
        v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2)
          return 1;
      }
  }
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v3 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x9052DC4F017D3735;
    if (a2 <= 0x9052DC4F017D3735)
      v11 = 0x9052DC4F017D3735 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x9052DC4F017D3735;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x9052DC4F017D3735)
      {
        if (v13[2] == 0x9052DC4F017D3735)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x9052DC4F017D3735)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x9052DC4F017D3735)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x9052DC4F017D3735)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)33>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B14F0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)33>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B14F0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)33>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RequestReset>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDACEFB85CDF2B135;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDACEFB85CDF2B135;
      if (*(_QWORD *)&v3 <= 0xDACEFB85CDF2B135)
        v5 = 0xDACEFB85CDF2B135 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDACEFB85CDF2B135;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDACEFB85CDF2B135)
            {
              if (v7[2] == 0xDACEFB85CDF2B135)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDACEFB85CDF2B135)
          {
            if (v7[2] == 0xDACEFB85CDF2B135)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequestReset]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271418;
  *(_QWORD *)(v11 + 8) = 0xDACEFB85CDF2B135;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDACEFB85CDF2B135, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDACEFB85CDF2B135;
  v15[1] = "md::ls::RequestReset]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDACEFB85CDF2B135, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45A4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequestReset>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequestReset>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequestReset>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequestReset>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t *SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables(uint64_t *a1)
{
  void *v2;
  void *v3;
  _BYTE *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _BYTE *v9;
  void *v10;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (_BYTE *)a1[6];
  if (v4)
  {
    do
    {
      if (v4[112])
        v4[112] = 0;
      v9 = *(_BYTE **)v4;
      v10 = (void *)*((_QWORD *)v4 + 4);
      if (v10 != *((void **)v4 + 6))
        free(v10);
      operator delete(v4);
      v4 = v9;
    }
    while (v9);
  }
  v5 = (void *)a1[4];
  a1[4] = 0;
  if (v5)
    operator delete(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = (uint64_t)v6;
    operator delete(v6);
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    geo::Pool<md::DaVinciGroundRenderable>::disposeElements(v7);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v7 + 8));
    MEMORY[0x1A1AF4E00](v7, 0x1020C407A7143E5);
  }
  return a1;
}

void sub_19F45A74C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E429E3D0;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E429E3D0;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

void md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::reset(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  char v45;

  v2 = a1[16];
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v5 = 0;
  }
  else
  {
    v5 = v3[3];
    v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  md::FlyoverRenderResources::prunePools(v10);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  md::DaVinciGroundRenderResources::prunePools(v11);
  v12 = (gdc::Registry *)a1[15];
  if (v12)
  {
    v13 = gdc::Registry::create(v12);
    v14 = (uint64_t *)gdc::Registry::storage<md::ls::RequestReset>(a1[15]);
    v45 = 0;
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v14, v13, &v45);
    v15 = (_QWORD *)a1[18];
    v16 = (_QWORD *)a1[19];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v44 = a1[19];
      while (1)
      {
        cleanup(a1[16], a1[15], v15[1]);
        v20 = (void (***)(_QWORD))*v15;
        if (*v15)
        {
          v21 = a1[17];
          if (*(_QWORD *)(v21 + 16))
          {
            (**v20)(*v15);
            *v20 = *(void (***)(_QWORD))(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
          }
        }
        if (v19 >= v18)
          break;
        *(_QWORD *)v19 = v15[1];
        v19 += 8;
LABEL_17:
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)a1[18];
          goto LABEL_51;
        }
      }
      v22 = (v19 - v17) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v18 - v17) >> 2 > v23)
        v23 = (v18 - v17) >> 2;
      if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15[1];
      v27 = v26 + 8;
      if (v19 != v17)
      {
        v28 = v19 - 8 - v17;
        if (v28 >= 0x168)
        {
          if (&v25[v19 - v17 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v19 - v17 - 8])
          {
            v29 = v19;
          }
          else if (&v19[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
          {
            v29 = v19;
          }
          else if ((unint64_t)(v17 - v25) >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v29 = &v19[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            v32 = &v25[8 * v22 - 16];
            v33 = v19 - 16;
            v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v26 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_36;
          }
          else
          {
            v29 = v19;
          }
        }
        else
        {
          v29 = v19;
        }
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v29 != v17);
      }
LABEL_36:
      v18 = &v25[8 * v24];
      if (v17)
        operator delete(v17);
      v17 = v26;
      v19 = v27;
      v16 = (_QWORD *)v44;
      goto LABEL_17;
    }
    v19 = 0;
    v17 = 0;
LABEL_51:
    a1[19] = (uint64_t)v15;
    a1[30] = a1[29];
    a1[27] = a1[26];
    if (a1[24])
    {
      v36 = (_BYTE *)a1[23];
      if (v36)
      {
        do
        {
          if (v36[112])
            v36[112] = 0;
          v42 = *(_BYTE **)v36;
          v43 = (void *)*((_QWORD *)v36 + 4);
          if (v43 != *((void **)v36 + 6))
            free(v43);
          operator delete(v36);
          v36 = v42;
        }
        while (v42);
      }
      a1[23] = 0;
      v37 = a1[22];
      if (v37)
      {
        for (i = 0; i != v37; ++i)
          *(_QWORD *)(a1[21] + 8 * i) = 0;
      }
      a1[24] = 0;
    }
    if (v17 != v19)
    {
      v39 = a1[15];
      v40 = (unint64_t *)v17;
      do
      {
        v41 = *v40++;
        gdc::Registry::destroy(v39, v41);
      }
      while (v40 != (unint64_t *)v19);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_19F45ABE0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciGroundGlobe>]";
  v4[3] = 71;
  v4[4] = result;
  *v4 = &off_1E42B1518;
  v4[1] = 0x521897C68EA476F3;
  *a2 = v4;
  return result;
}

void sub_19F45ACB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x521897C68EA476F3)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x521897C68EA476F3)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x521897C68EA476F3)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x521897C68EA476F3)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x521897C68EA476F3 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::runBeforeLayout(_QWORD *a1, md::LayoutContext *a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t **i;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  md::VKMRenderResourcesStore *j;
  int v51;
  BOOL v52;
  unint64_t v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t **k;
  BOOL v71;
  int v72;
  BOOL v73;
  unint64_t v74;
  _BOOL4 v75;
  _BOOL4 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  md::VKMRenderResourcesStore *m;
  int v88;
  BOOL v89;
  unint64_t v90;
  _BOOL4 v91;
  int v92;
  _BOOL4 v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  char *v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  double *v106;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  char *v110;
  char *v111;
  void *v112;
  char *v113;
  int64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  void (***v128)(_QWORD);
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const double *v151;
  double *v152;
  double *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  void *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t **v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double *v204;
  uint64_t v205;
  const double *v206;
  const double *v207;
  double *v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  void *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  double v216;
  double v217;
  uint64_t v218;
  char v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  uint64_t *v233;
  unint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t (***v245)(_QWORD);
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  int8x8_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  char v262;
  _BYTE *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  _BYTE *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  size_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  __int128 *v279;
  unint64_t v280;
  __int128 v281;
  uint64_t v282;
  _BYTE *v283;
  char *v284;
  uint64_t *v285;
  uint64_t v286;
  char *v287;
  char v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  char v302;
  unsigned int v303;
  void *v304;
  char v305;
  void *v306;
  uint64_t *v307;
  _QWORD *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t *v321;
  uint64_t *HasTileSharedStyleCamera;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  void *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  void *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  void *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t v356;
  void *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  void *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  float v370;
  uint64_t *v371;
  __int128 v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t *v377;
  char v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t *v385;
  uint64_t *v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  _QWORD *v407;
  _QWORD *v408;
  BOOL v409;
  _QWORD *v410;
  md::VKMRenderResourcesStore *v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t ***v414;
  char *v415;
  void *v416;
  gdc::Registry *v417;
  unint64_t v418;
  uint64_t *v419;
  uint64_t *v420;
  char *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  int v426;
  unint64_t v427;
  uint64_t **n;
  BOOL v429;
  int v430;
  BOOL v431;
  unint64_t v432;
  _BOOL4 v433;
  _BOOL4 v434;
  unint64_t *v435;
  unint64_t v436;
  unint64_t v437;
  char *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  int v443;
  unint64_t v444;
  uint64_t **ii;
  _BOOL4 v446;
  int v447;
  BOOL v448;
  unint64_t v449;
  _BOOL4 v450;
  _BOOL4 v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t result;
  uint64_t *v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t (***v461)(_QWORD);
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  md::LayoutContext *v471;
  uint64_t *v472;
  int v473;
  uint64_t v474;
  uint64_t **v475;
  uint64_t *v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  char **v480;
  std::__shared_weak_count *v481;
  uint64_t v482;
  uint64_t v483;
  md::VKMRenderResourcesStore *v484;
  md::VKMRenderResourcesStore *v485;
  md::VKMRenderResourcesStore *v486;
  __int128 v487;
  char v488;
  void *__p[2];
  __int128 v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  std::__shared_weak_count *v495;
  uint64_t v496;
  std::__shared_weak_count *v497;
  uint64_t v498;
  std::__shared_weak_count *v499;
  uint64_t v500;
  std::__shared_weak_count *v501;
  uint64_t v502;
  std::__shared_weak_count *v503;
  uint64_t v504;
  std::__shared_weak_count *v505;
  uint64_t v506;
  std::__shared_weak_count *v507;
  uint64_t v508;
  std::__shared_weak_count *v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  uint64_t v512;
  std::__shared_weak_count *v513;
  gdc::Registry *v514;
  char v515;
  __int16 v516;
  char v517;
  unsigned int v518;
  unsigned int v519;
  int v520;
  __int16 v521;
  char v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  _OWORD v525[2];
  __int128 v526;
  float64x2x2_t v527;
  float64x2x2_t v528;
  float64x2x2_t v529;
  float64x2x2_t v530;

  v5 = a1;
  v472 = *a3;
  v6 = a1[15];
  v7 = (uint64_t **)*((_QWORD *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v490 = 0;
  v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    v8 = v9 - 5;
  }
  v11 = (void (***)(_QWORD))v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v475 = v7;
  (**v11)(v11);
  v471 = a2;
  v474 = v6;
  v16 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(v6);
  v17 = v16[7];
  v477 = v16[8];
  v479 = v5;
  if (v17 != v477)
  {
    v18 = v5 + 21;
    v480 = (char **)(v5 + 29);
    v19 = v16[10];
    v484 = (md::VKMRenderResourcesStore *)(v19 + 8);
    while (1)
    {
      v482 = v17;
      v25 = (_QWORD *)v5[18];
      v26 = (_QWORD *)v5[19];
LABEL_20:
      while (v25 != v26)
      {
        v27 = *(_QWORD *)(*v25 + 384);
        v28 = *(std::__shared_weak_count **)(*v25 + 392);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = *(unsigned __int8 *)(*v25 + 48);
          do
            v32 = __ldxr(v29);
          while (__stxr(v32 + 1, v29));
          for (i = *(uint64_t ***)(v19 + 8); i; i = (uint64_t **)*i)
          {
LABEL_32:
            v35 = *((unsigned __int8 *)i + 48);
            v36 = *((char *)i + 48) > (char)v31;
            v37 = (unint64_t)i[4];
            if (v31 == v35)
              v36 = v27 < v37;
            if (!v36)
            {
              v38 = v37 < v27;
              if (v31 == v35)
                v39 = v38;
              else
                v39 = (char)v35 < (char)v31;
              if (!v39)
              {
                v34 = 1;
                if (v28)
                  goto LABEL_41;
                goto LABEL_48;
              }
              ++i;
            }
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(*v25 + 48);
          i = *(uint64_t ***)(v19 + 8);
          if (i)
            goto LABEL_32;
        }
        v34 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v27 + 16)) != 0;
        if (v28)
        {
LABEL_41:
          v40 = (unint64_t *)&v28->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 - 1, v40));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
LABEL_48:
        if (!v34)
        {
          while (1)
          {
            v43 = v26;
            v26 -= 2;
            if (v25 == v26)
              goto LABEL_80;
            v44 = *(_QWORD *)(*v26 + 384);
            v45 = *(std::__shared_weak_count **)(*v26 + 392);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
              v48 = *(unsigned __int8 *)(*v26 + 48);
              do
                v49 = __ldxr(v46);
              while (__stxr(v49 + 1, v46));
            }
            else
            {
              v48 = *(unsigned __int8 *)(*v26 + 48);
            }
            for (j = v484; ; j = (md::VKMRenderResourcesStore *)((char *)j + 8))
            {
              do
              {
                j = *(md::VKMRenderResourcesStore **)j;
                if (!j)
                {
                  v56 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v44 + 16)) != 0;
                  if (!v45)
                    goto LABEL_50;
                  goto LABEL_72;
                }
                v51 = *((unsigned __int8 *)j + 48);
                v52 = *((char *)j + 48) > (char)v48;
                v53 = *((_QWORD *)j + 4);
                if (v48 == v51)
                  v52 = v44 < v53;
              }
              while (v52);
              v54 = v53 < v44;
              v55 = v48 == v51 ? v54 : (char)v51 < (char)v48;
              if (v55 != 1)
                break;
            }
            v56 = 1;
            if (!v45)
              goto LABEL_50;
LABEL_72:
            v57 = (unint64_t *)&v45->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
            do
              v59 = __ldaxr(v57);
            while (__stlxr(v59 - 1, v57));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
LABEL_50:
            if (v56)
            {
              v60 = *v25;
              *v25 = *(v43 - 2);
              *(v43 - 2) = v60;
              v61 = v25[1];
              v25[1] = *(v43 - 1);
              *(v43 - 1) = v61;
              v25 += 2;
              goto LABEL_20;
            }
          }
        }
        v25 += 2;
      }
LABEL_80:
      v63 = (_QWORD *)v479[18];
      v62 = v479[19];
LABEL_81:
      while (v63 != (_QWORD *)v62)
      {
        v64 = *(_QWORD *)(*v63 + 384);
        v65 = *(std::__shared_weak_count **)(*v63 + 392);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          v68 = *(unsigned __int8 *)(*v63 + 48);
          do
            v69 = __ldxr(v66);
          while (__stxr(v69 + 1, v66));
          for (k = *(uint64_t ***)(v19 + 8); k; k = (uint64_t **)*k)
          {
LABEL_93:
            v72 = *((unsigned __int8 *)k + 48);
            v73 = *((char *)k + 48) > (char)v68;
            v74 = (unint64_t)k[4];
            if (v68 == v72)
              v73 = v64 < v74;
            if (!v73)
            {
              v75 = v74 < v64;
              if (v68 == v72)
                v76 = v75;
              else
                v76 = (char)v72 < (char)v68;
              if (!v76)
              {
                v71 = 1;
                if (v65)
                  goto LABEL_102;
                goto LABEL_109;
              }
              ++k;
            }
          }
        }
        else
        {
          v68 = *(unsigned __int8 *)(*v63 + 48);
          k = *(uint64_t ***)(v19 + 8);
          if (k)
            goto LABEL_93;
        }
        v71 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v64 + 16)) != 0;
        if (v65)
        {
LABEL_102:
          v77 = (unint64_t *)&v65->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          do
            v79 = __ldaxr(v77);
          while (__stlxr(v79 - 1, v77));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
LABEL_109:
        if (!v71)
        {
          while (1)
          {
            v80 = v62;
            v62 -= 16;
            if (v63 == (_QWORD *)v62)
              break;
            v81 = *(_QWORD *)(*(_QWORD *)v62 + 384);
            v82 = *(std::__shared_weak_count **)(*(_QWORD *)v62 + 392);
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldxr(v83);
              while (__stxr(v84 + 1, v83));
              v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
              do
                v86 = __ldxr(v83);
              while (__stxr(v86 + 1, v83));
            }
            else
            {
              v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
            }
            for (m = v484; ; m = (md::VKMRenderResourcesStore *)((char *)m + 8))
            {
              do
              {
                m = *(md::VKMRenderResourcesStore **)m;
                if (!m)
                {
                  v93 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v81 + 16)) != 0;
                  if (!v82)
                    goto LABEL_111;
                  goto LABEL_133;
                }
                v88 = *((unsigned __int8 *)m + 48);
                v89 = *((char *)m + 48) > (char)v85;
                v90 = *((_QWORD *)m + 4);
                if (v85 == v88)
                  v89 = v81 < v90;
              }
              while (v89);
              v91 = v90 < v81;
              v92 = v85 == v88 ? v91 : (char)v88 < (char)v85;
              if (v92 != 1)
                break;
            }
            v93 = 1;
            if (!v82)
              goto LABEL_111;
LABEL_133:
            v94 = (unint64_t *)&v82->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
            do
              v96 = __ldaxr(v94);
            while (__stlxr(v96 - 1, v94));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
LABEL_111:
            if (v93)
            {
              v97 = *v63;
              *v63 = *(_QWORD *)(v80 - 16);
              *(_QWORD *)(v80 - 16) = v97;
              v98 = v63[1];
              v63[1] = *(_QWORD *)(v80 - 8);
              *(_QWORD *)(v80 - 8) = v98;
              v63 += 2;
              goto LABEL_81;
            }
          }
          v62 = (unint64_t)v63;
          break;
        }
        v63 += 2;
      }
      v99 = (__int128 *)v479[19];
      v100 = (char *)v99 - v62;
      v101 = (uint64_t)((uint64_t)v99 - v62) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v480, v479[30], v62, v99, v101);
      if ((__int128 *)v62 == v99)
        goto LABEL_149;
      v103 = v479[18];
      v102 = (double *)v479[19];
      v104 = v62 - v103;
      v105 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
      v106 = &v105[2 * v101];
      if (v106 != v102)
        break;
LABEL_148:
      v479[19] = v105;
LABEL_149:
      v110 = (char *)v479[29];
      v20 = (char *)v479[30];
      if (v20 != v110)
      {
        do
        {
          v111 = (char *)__p[1];
          if (__p[1] >= (void *)v490)
          {
            v113 = (char *)__p[0];
            v114 = (char *)__p[1] - (char *)__p[0];
            v115 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61)
              abort();
            v117 = v490 - (unint64_t)__p[0];
            if ((uint64_t)(v490 - (unint64_t)__p[0]) >> 2 > v116)
              v116 = v117 >> 2;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
              v118 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              if (v118 >> 61)
LABEL_633:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v119 = operator new(8 * v118);
            }
            else
            {
              v119 = 0;
            }
            v120 = &v119[8 * v115];
            *v120 = *((_QWORD *)v110 + 1);
            v112 = v120 + 1;
            if (v111 == v113)
            {
              v113 = v111;
            }
            else
            {
              v121 = v111 - 8 - v113;
              if (v121 < 0x58)
                goto LABEL_639;
              if ((unint64_t)(v111 - &v119[v114]) < 0x20)
                goto LABEL_639;
              v122 = (v121 >> 3) + 1;
              v123 = &v119[8 * v115 - 16];
              v124 = v111 - 16;
              v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 32;
                v125 -= 4;
              }
              while (v125);
              v120 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
              v111 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
              if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_639:
                do
                {
                  v127 = *((_QWORD *)v111 - 1);
                  v111 -= 8;
                  *--v120 = v127;
                }
                while (v111 != v113);
                v113 = (char *)__p[0];
              }
            }
            __p[0] = v120;
            __p[1] = v112;
            *(_QWORD *)&v490 = &v119[8 * v118];
            if (v113)
              operator delete(v113);
          }
          else
          {
            *(_QWORD *)__p[1] = *((_QWORD *)v110 + 1);
            v112 = v111 + 8;
          }
          __p[1] = v112;
          v128 = *(void (****)(_QWORD))v110;
          if (*(_QWORD *)v110)
          {
            v129 = v479[17];
            if (*(_QWORD *)(v129 + 16))
            {
              (**v128)(*(_QWORD *)v110);
              *v128 = *(void (***)(_QWORD))(v129 + 40);
              *(_QWORD *)(v129 + 40) = v128;
            }
          }
          v110 += 16;
        }
        while (v110 != v20);
        v20 = *v480;
      }
      v5 = v479;
      v21 = v479[18];
      v22 = (uint64_t *)v479[19];
      v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      v479[30] = v20;
      if (v22 == (uint64_t *)v21)
        v24 = 0;
      else
        v24 = v23;
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v21, v22, v24, 1);
      v19 += 24;
      v17 = v482 + 8;
      v484 = (md::VKMRenderResourcesStore *)((char *)v484 + 24);
      if (v482 + 8 == v477)
        goto LABEL_219;
    }
    v107 = v104 & 0xFFFFFFFFFFFFFFF0;
    v108 = (char *)v102 - &v100[v103 + (v104 & 0xFFFFFFFFFFFFFFF0)] - 16;
    if (v108 >= 0x270)
    {
      v130 = v107 + (v108 & 0xFFFFFFFFFFFFFFF0);
      v131 = v103 + (v130 | 8);
      v132 = v103 + (v107 | 8);
      v133 = v130 + v103 + 16;
      v134 = &v100[v107 + v103];
      v135 = &v134[v108 & 0xFFFFFFFFFFFFFFF0];
      v136 = (unint64_t)(v135 + 8);
      v137 = (unint64_t)(v134 + 8);
      v138 = (unint64_t)(v135 + 16);
      v140 = v105 < (double *)v135 + 1 && (unint64_t)v106 < v131;
      v142 = (unint64_t)v105 < v138 && v137 < v131;
      v144 = v132 < v136 && (unint64_t)v106 < v133;
      v146 = v132 < v138 && v137 < v133;
      if (v132 >= v131 || (unint64_t)v105 >= v133)
      {
        if (v140)
        {
          v109 = v105;
        }
        else if (v142)
        {
          v109 = v105;
        }
        else if (v144)
        {
          v109 = v105;
        }
        else if (v146)
        {
          v109 = v105;
        }
        else
        {
          v148 = (v108 >> 4) + 1;
          v149 = 2 * (v148 & 0x1FFFFFFFFFFFFFFCLL);
          v109 = &v105[v149];
          v150 = v148 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v151 = &v105[2 * v101];
            v527 = vld2q_f64(v151);
            v151 += 4;
            v529 = vld2q_f64(v151);
            v152 = v105 + 8;
            vst2q_f64(v105, v527);
            v153 = v105 + 4;
            vst2q_f64(v153, v529);
            v105 = v152;
            v150 -= 4;
          }
          while (v150);
          if (v148 == (v148 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_147;
          v106 = (double *)((char *)v106 + v149 * 8);
        }
      }
      else
      {
        v109 = v105;
      }
    }
    else
    {
      v109 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *v109 = *v106;
      v109[1] = v106[1];
      v109 += 2;
      v106 += 2;
    }
    while (v106 != v102);
LABEL_147:
    v105 = v109;
    goto LABEL_148;
  }
LABEL_219:
  v154 = *v475;
  v155 = v475[1];
  if (*v475 == v155)
  {
    v156 = v474;
  }
  else
  {
    v156 = v474;
    while (*v154 != 0x41D4E9297E100630)
    {
      v154 += 5;
      if (v154 == v155)
        goto LABEL_232;
    }
  }
  if (v154 != v155)
  {
    v157 = (std::__shared_weak_count *)v154[4];
    if (v157)
    {
      v158 = (unint64_t *)&v157->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
      do
        v160 = __ldaxr(v158);
      while (__stlxr(v160 - 1, v158));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
  }
LABEL_232:
  v161 = *v475;
  v162 = v475[1];
  if (*v475 != v162)
  {
    while (*v161 != 0x4EDAD23DFB014132)
    {
      v161 += 5;
      if (v161 == v162)
        goto LABEL_243;
    }
  }
  if (v161 != v162)
  {
    v163 = (std::__shared_weak_count *)v161[4];
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
      do
        v166 = __ldaxr(v164);
      while (__stlxr(v166 - 1, v164));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
  }
LABEL_243:
  v167 = *v475;
  v168 = v475[1];
  if (*v475 != v168)
  {
    while (*v167 != 0x348A0B0E758C07C2)
    {
      v167 += 5;
      if (v167 == v168)
        goto LABEL_254;
    }
  }
  if (v167 != v168)
  {
    v169 = (std::__shared_weak_count *)v167[4];
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      do
        v172 = __ldaxr(v170);
      while (__stlxr(v172 - 1, v170));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
LABEL_254:
  v173 = __p[0];
  if (__p[1] != __p[0])
  {
    v174 = 0;
    v175 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v475, v156, v173[v174++]);
      v173 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v174);
    while (v175 != __p[1])
    {
      v176 = *v175++;
      gdc::Registry::destroy(v156, v176);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v156);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v156);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  md::LayoutContext::frameState(v471);
  v473 = *(unsigned __int8 *)(v177 + 128);
  v178 = (uint64_t *)v5[15];
  v468 = *((_QWORD *)v471 + 2);
  v179 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>((uint64_t)v178);
  v180 = v179[7];
  v467 = v179[8];
  if (v180 != v467)
  {
    v181 = (_QWORD *)v179[10];
    v476 = v178 + 15;
    v478 = v5 + 21;
    while (1)
    {
      v182 = (void *)v5[26];
      v5[27] = v182;
      v470 = v181;
      v183 = v181[2];
      if (v183 > (uint64_t)(v5[28] - (_QWORD)v182) >> 4)
      {
        if (v183 >> 60)
          goto LABEL_636;
        v184 = 16 * v183;
        v185 = (char *)operator new(16 * v183);
        v5[26] = v185;
        v5[27] = v185;
        v5[28] = &v185[v184];
        if (v182)
          operator delete(v182);
      }
      v186 = *(_QWORD **)v468;
      v187 = *(_QWORD **)(v468 + 8);
      v469 = v180;
      if (*(_QWORD **)v468 != v187)
      {
        while (*v186 != 0x41D4E9297E100630)
        {
          v186 += 5;
          if (v186 == v187)
            goto LABEL_280;
        }
      }
      if (v186 == v187)
      {
LABEL_280:
        v485 = 0;
      }
      else
      {
        v188 = (std::__shared_weak_count *)v186[4];
        v485 = (md::VKMRenderResourcesStore *)v186[3];
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
          do
            v191 = __ldaxr(v189);
          while (__stlxr(v191 - 1, v189));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      v192 = (_QWORD *)*v470;
      if ((_QWORD *)*v470 != v470 + 1)
        break;
LABEL_264:
      v181 = v470 + 3;
      v180 = v469 + 8;
      if (v469 + 8 == v467)
        goto LABEL_551;
    }
    while (1)
    {
      v193 = v192[4];
      v194 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v478, (unsigned __int8 *)(v193 + 16));
      if (!v194)
        goto LABEL_313;
      v195 = v194;
      v197 = (_QWORD *)v5[18];
      v196 = (_QWORD *)v5[19];
      if (v197 == v196)
      {
        v198 = v5[18];
      }
      else
      {
        v198 = v5[18];
        while (*(uint64_t **)v198 != v194[16]
             || *(unsigned __int16 *)(v198 + 8) != *((unsigned __int16 *)v194 + 68)
             || *(unsigned __int16 *)(v198 + 10) != *((unsigned __int16 *)v194 + 69)
             || *(_DWORD *)(v198 + 12) != *((_DWORD *)v194 + 35))
        {
          v198 += 16;
          if ((_QWORD *)v198 == v196)
          {
            v198 = v5[19];
            break;
          }
        }
      }
      v199 = (_QWORD *)(v198 + 16);
      if ((_QWORD *)(v198 + 16) != v196)
      {
        v200 = (unint64_t)v196 - v198 - 32;
        if (v200 >= 0x30)
        {
          v201 = (v198 - (uint64_t)v197) >> 4;
          v202 = (v200 >> 4) + 1;
          v203 = 16 * (v202 & 0x1FFFFFFFFFFFFFFCLL);
          v198 += v203;
          v204 = (double *)&v197[2 * v201 + 4];
          v205 = v202 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v206 = v204 - 2;
            v528 = vld2q_f64(v206);
            v207 = v204 + 2;
            v530 = vld2q_f64(v207);
            v208 = v204 - 4;
            vst2q_f64(v208, v528);
            vst2q_f64(v204, v530);
            v204 += 8;
            v205 -= 4;
          }
          while (v205);
          if (v202 == (v202 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_302;
          v199 = (_QWORD *)((char *)v199 + v203);
        }
        do
        {
          *(_QWORD *)v198 = *v199;
          *(_QWORD *)(v198 + 8) = v199[1];
          v198 += 16;
          v199 += 2;
        }
        while (v199 != v196);
      }
LABEL_302:
      v5[19] = v198;
      v209 = v194[16];
      if (v209)
      {
        v210 = v5[17];
        if (*(_QWORD *)(v210 + 16))
        {
          (*(void (**)(uint64_t *))*v209)(v194[16]);
          *v209 = *(_QWORD *)(v210 + 40);
          *(_QWORD *)(v210 + 40) = v209;
        }
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v478, v195);
      v211 = __p[0];
      if (__p[0])
      {
        if ((_BYTE)v490)
        {
          if (*((_BYTE *)__p[0] + 112))
            *((_BYTE *)__p[0] + 112) = 0;
          v212 = (void *)v211[4];
          if (v212 != (void *)v211[6])
            free(v212);
        }
        operator delete(v211);
      }
      v193 = v192[4];
LABEL_313:
      v213 = v192[5];
      *(_QWORD *)&v526 = v193;
      *((_QWORD *)&v526 + 1) = v213;
      if (v213)
      {
        v214 = (unint64_t *)(v213 + 8);
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
      }
      LOWORD(v525[0]) = *(_WORD *)(v193 + 168);
      *(_QWORD *)((char *)v525 + 4) = *(_QWORD *)(v193 + 172);
      v216 = *(double *)(v193 + 600);
      v217 = *(double *)(v193 + 608);
      md::GeometryContext::transformConstantData((double *)&v523, v472, (unsigned __int8 *)v525, v473, v216, v217);
      v218 = v5[17];
      v219 = *((_BYTE *)v192 + 48);
      v220 = *(_QWORD **)(v218 + 40);
      if (!v220)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab((uint64_t **)v5[17]);
        v220 = *(_QWORD **)(v218 + 40);
      }
      *(_QWORD *)(v218 + 40) = *v220;
      v483 = md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v220, (uint64_t *)&v526, v219, (v473 - 1) < 3u, &v523);
      v221 = gdc::Registry::create((gdc::Registry *)v178);
      v222 = v221;
      v224 = (uint64_t *)v5[27];
      v223 = v5[28];
      if ((unint64_t)v224 >= v223)
      {
        v226 = (uint64_t *)v5[26];
        v227 = ((char *)v224 - (char *)v226) >> 4;
        v228 = v227 + 1;
        if ((unint64_t)(v227 + 1) >> 60)
          goto LABEL_632;
        v229 = v223 - (_QWORD)v226;
        if (v229 >> 3 > v228)
          v228 = v229 >> 3;
        if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF0)
          v230 = 0xFFFFFFFFFFFFFFFLL;
        else
          v230 = v228;
        if (v230)
        {
          if (v230 >> 60)
            goto LABEL_633;
          v231 = (char *)operator new(16 * v230);
        }
        else
        {
          v231 = 0;
        }
        v232 = (uint64_t *)&v231[16 * v227];
        *v232 = v483;
        v232[1] = v222;
        v233 = v232;
        if (v224 != v226)
        {
          do
          {
            *((_OWORD *)v233 - 1) = *((_OWORD *)v224 - 1);
            v233 -= 2;
            v224 -= 2;
          }
          while (v224 != v226);
          v224 = (uint64_t *)v5[26];
        }
        v225 = v232 + 2;
        v5[26] = v233;
        v5[27] = v232 + 2;
        v5[28] = &v231[16 * v230];
        if (v224)
          operator delete(v224);
      }
      else
      {
        *v224 = v483;
        v224[1] = v221;
        v225 = v224 + 2;
      }
      v5[27] = v225;
      v235 = (uint64_t *)v5[19];
      v234 = v5[20];
      if ((unint64_t)v235 >= v234)
      {
        v237 = (uint64_t *)v5[18];
        v238 = ((char *)v235 - (char *)v237) >> 4;
        v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60)
LABEL_632:
          abort();
        v240 = v234 - (_QWORD)v237;
        if (v240 >> 3 > v239)
          v239 = v240 >> 3;
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0)
          v241 = 0xFFFFFFFFFFFFFFFLL;
        else
          v241 = v239;
        if (v241)
        {
          if (v241 >> 60)
            goto LABEL_633;
          v242 = (char *)operator new(16 * v241);
        }
        else
        {
          v242 = 0;
        }
        v243 = (uint64_t *)&v242[16 * v238];
        *v243 = v483;
        v243[1] = v222;
        v244 = v243;
        if (v235 != v237)
        {
          do
          {
            *((_OWORD *)v244 - 1) = *((_OWORD *)v235 - 1);
            v244 -= 2;
            v235 -= 2;
          }
          while (v235 != v237);
          v235 = (uint64_t *)v5[18];
        }
        v236 = v243 + 2;
        v5[18] = v244;
        v5[19] = v243 + 2;
        v5[20] = &v242[16 * v241];
        if (v235)
          operator delete(v235);
      }
      else
      {
        *v235 = v483;
        v235[1] = v222;
        v236 = v235 + 2;
      }
      v5[19] = v236;
      if ((_QWORD)v526)
        v245 = (uint64_t (***)(_QWORD))(v526 + 632);
      else
        v245 = 0;
      v481 = (std::__shared_weak_count *)*((_QWORD *)&v526 + 1);
      if (*((_QWORD *)&v526 + 1))
      {
        v246 = (unint64_t *)(*((_QWORD *)&v526 + 1) + 8);
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
      }
      v248 = (**v245)(v245);
      __p[0] = (void *)md::VKMRenderResourcesStore::createRenderableRegistryHandle(v485, v248);
      v249 = (uint64_t *)gdc::Registry::storage<md::ls::RegisterHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v249, v222, __p);
      *(_QWORD *)&v487 = 0x864C4E05FBDAFEA0;
      v250 = (int8x8_t)v178[16];
      if (v250)
      {
        v251 = (uint8x8_t)vcnt_s8(v250);
        v251.i16[0] = vaddlv_u8(v251);
        if (v251.u32[0] > 1uLL)
        {
          v252 = 0x864C4E05FBDAFEA0;
          if (*(_QWORD *)&v250 <= 0x864C4E05FBDAFEA0)
            v252 = 0x864C4E05FBDAFEA0 % *(_QWORD *)&v250;
        }
        else
        {
          v252 = (*(_QWORD *)&v250 - 1) & 0x864C4E05FBDAFEA0;
        }
        v253 = *(_QWORD **)(*v476 + 8 * v252);
        if (v253)
        {
          v254 = (_QWORD *)*v253;
          if (v254)
          {
            if (v251.u32[0] < 2uLL)
            {
              v255 = *(_QWORD *)&v250 - 1;
              while (1)
              {
                v257 = v254[1];
                if (v257 == 0x864C4E05FBDAFEA0)
                {
                  if (v254[2] == 0x864C4E05FBDAFEA0)
                    goto LABEL_403;
                }
                else if ((v257 & v255) != v252)
                {
                  goto LABEL_378;
                }
                v254 = (_QWORD *)*v254;
                if (!v254)
                  goto LABEL_378;
              }
            }
            do
            {
              v256 = v254[1];
              if (v256 == 0x864C4E05FBDAFEA0)
              {
                if (v254[2] == 0x864C4E05FBDAFEA0)
                {
LABEL_403:
                  v258 = v254[3];
                  goto LABEL_381;
                }
              }
              else
              {
                if (v256 >= *(_QWORD *)&v250)
                  v256 %= *(_QWORD *)&v250;
                if (v256 != v252)
                  break;
              }
              v254 = (_QWORD *)*v254;
            }
            while (v254);
          }
        }
      }
LABEL_378:
      v258 = operator new();
      *(_QWORD *)(v258 + 16) = "md::ls::MapDataTypeT<md::MapDataType::DaVinciGroundGlobe>]";
      *(_QWORD *)(v258 + 24) = 57;
      *(_OWORD *)(v258 + 32) = 0u;
      *(_OWORD *)(v258 + 48) = 0u;
      *(_OWORD *)(v258 + 64) = 0u;
      *(_OWORD *)(v258 + 80) = 0u;
      *(_OWORD *)(v258 + 96) = 0u;
      *(_OWORD *)(v258 + 112) = 0u;
      *(_OWORD *)(v258 + 128) = 0u;
      *(_DWORD *)(v258 + 144) = 1065353216;
      *(_OWORD *)(v258 + 152) = 0u;
      *(_OWORD *)(v258 + 168) = 0u;
      *(_QWORD *)(v258 + 184) = 0;
      *(_DWORD *)(v258 + 192) = 1065353216;
      *(_OWORD *)(v258 + 200) = 0u;
      *(_OWORD *)(v258 + 216) = 0u;
      *(_QWORD *)(v258 + 232) = 0;
      *(_DWORD *)(v258 + 240) = 1065353216;
      *(_QWORD *)v258 = &off_1E42712C8;
      *(_QWORD *)(v258 + 8) = 0x864C4E05FBDAFEA0;
      *(_QWORD *)(v258 + 248) = v178;
      v259 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v476, 0x864C4E05FBDAFEA0, &v487);
      v260 = v259[3];
      v259[3] = v258;
      if (v260)
        (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
      __p[0] = (void *)0x864C4E05FBDAFEA0;
      __p[1] = "md::ls::MapDataTypeT<md::MapDataType::DaVinciGroundGlobe>]";
      *(_QWORD *)&v490 = 57;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v178, 0x864C4E05FBDAFEA0, (uint64_t)__p, (uint64_t *)(v258 + 104));
LABEL_381:
      v510 = v222;
      v261 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v258 + 32), (uint64_t)&v510);
      if ((v262 & 1) != 0)
      {
        v268 = *(_BYTE **)(v258 + 88);
        v267 = *(_QWORD *)(v258 + 96);
        if ((unint64_t)v268 < v267)
        {
          *v268 = 0;
          v269 = (uint64_t)(v268 + 1);
LABEL_418:
          *(_QWORD *)(v258 + 88) = v269;
          v264 = *(_QWORD *)(v258 + 248);
          goto LABEL_419;
        }
        v270 = *(_BYTE **)(v258 + 80);
        v271 = v268 - v270;
        v272 = v268 - v270 + 1;
        if (v272 < 0)
          abort();
        v273 = v267 - (_QWORD)v270;
        if (2 * v273 > v272)
          v272 = 2 * v273;
        if (v273 >= 0x3FFFFFFFFFFFFFFFLL)
          v274 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v274 = v272;
        if (v274)
          v275 = (char *)operator new(v274);
        else
          v275 = 0;
        v276 = &v275[v271];
        v275[v271] = 0;
        v269 = (uint64_t)&v275[v271 + 1];
        if (v268 == v270)
          goto LABEL_416;
        if (v271 >= 8 && (unint64_t)(v270 - v275) >= 0x20)
        {
          if (v271 < 0x20)
          {
            v277 = 0;
LABEL_408:
            v282 = v277 - (v271 & 0xFFFFFFFFFFFFFFF8);
            v283 = &v268[-v277];
            v284 = &v275[&v268[-v277] - v270 - 8];
            v285 = (uint64_t *)(v283 - 8);
            do
            {
              v286 = *v285--;
              *(_QWORD *)v284 = v286;
              v284 -= 8;
              v282 += 8;
            }
            while (v282);
            if (v271 != (v271 & 0xFFFFFFFFFFFFFFF8))
            {
              v276 -= v271 & 0xFFFFFFFFFFFFFFF8;
              v268 -= v271 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_413;
            }
LABEL_415:
            v276 = v275;
LABEL_416:
            *(_QWORD *)(v258 + 80) = v276;
            *(_QWORD *)(v258 + 88) = v269;
            *(_QWORD *)(v258 + 96) = &v275[v274];
            if (v270)
              operator delete(v270);
            goto LABEL_418;
          }
          v277 = v271 & 0xFFFFFFFFFFFFFFE0;
          v278 = &v275[v271 - 16];
          v279 = (__int128 *)(v268 - 16);
          v280 = v271 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v281 = *v279;
            *((_OWORD *)v278 - 1) = *(v279 - 1);
            *(_OWORD *)v278 = v281;
            v278 -= 32;
            v279 -= 2;
            v280 -= 32;
          }
          while (v280);
          if (v271 == v277)
            goto LABEL_415;
          if ((v271 & 0x18) != 0)
            goto LABEL_408;
          v276 -= v277;
          v268 -= v277;
        }
LABEL_413:
        v287 = v276 - 1;
        do
        {
          v288 = *--v268;
          *v287-- = v288;
        }
        while (v268 != v270);
        goto LABEL_415;
      }
      v263 = (_BYTE *)(*(_QWORD *)(v258 + 80) + (((uint64_t)v261 - *(_QWORD *)(v258 + 56)) >> 3));
      *v263 = 0;
      v264 = *(_QWORD *)(v258 + 248);
      if (v263 != *(_BYTE **)(v258 + 88))
      {
        v265 = *(_QWORD **)(v258 + 128);
        if (v265)
        {
          while (1)
          {
            __p[0] = &v510;
            __p[1] = (void *)1;
            *(_QWORD *)&v487 = v264;
            v266 = v265[6];
            if (!v266)
              goto LABEL_631;
            (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v266 + 48))(v266, &v487, __p);
            v265 = (_QWORD *)*v265;
            if (!v265)
              goto LABEL_422;
          }
        }
        goto LABEL_422;
      }
LABEL_419:
      v289 = *(_QWORD **)(v258 + 176);
      if (v289)
      {
        while (1)
        {
          __p[0] = &v510;
          __p[1] = (void *)1;
          *(_QWORD *)&v487 = v264;
          v290 = v289[6];
          if (!v290)
            break;
          (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v290 + 48))(v290, &v487, __p);
          v289 = (_QWORD *)*v289;
          if (!v289)
            goto LABEL_422;
        }
LABEL_631:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_636:
        abort();
      }
LABEL_422:
      LOWORD(__p[0]) = 34;
      v291 = (uint64_t *)gdc::Registry::storage<md::ls::MapDataTypeV>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(v291, v222, __p);
      __p[0] = (void *)((uint64_t)(v5[19] - v5[18]) >> 4);
      v292 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v292, v222, __p);
      LODWORD(__p[0]) = 0;
      v490 = 0uLL;
      __p[1] = 0;
      v293 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablesCount>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(v293, v222, (uint64_t)__p);
      if (__p[1])
        operator delete(__p[1]);
      v294 = (uint64_t *)gdc::Registry::storage<md::ls::WillEnterView>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v294, v222);
      v295 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)34>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v295, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(v485, (md::BaseMapTileDataRenderable *)v483);
      v296 = (uint64_t *)gdc::Registry::storage<md::ls::BaseMapTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v296, v222, __p);
      v297 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v297, v222);
      LOBYTE(__p[0]) = *(_BYTE *)(v483 + 24);
      v298 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v298, v222, __p);
      v522 = 0;
      v521 = 0;
      v299 = DWORD1(v525[0]);
      v300 = DWORD2(v525[0]);
      v301 = vcvtmd_s64_f64(v216 * 100.0);
      v302 = BYTE1(v525[0]);
      v303 = vcvtpd_s64_f64(v217 * 100.0);
      v514 = *(gdc::Registry **)((char *)v525 + 4);
      v515 = BYTE1(v525[0]);
      v516 = 0;
      v517 = 0;
      v518 = v301;
      v519 = v303;
      v520 = 2;
      v304 = (void *)md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(v485, (int *)&v514);
      if (v305)
      {
        v306 = v304;
        __p[0] = v304;
        v307 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v307, v222, __p);
        __p[0] = v306;
        v308 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)v485 + 3272, (unint64_t)v306, __p);
        ++v308[4];
      }
      else
      {
        v309 = v523;
        v310 = v524;
        v512 = v523;
        v513 = v524;
        if (v524)
        {
          v311 = (unint64_t *)&v524->__shared_owners_;
          do
            v312 = __ldxr(v311);
          while (__stxr(v312 + 1, v311));
        }
        v313 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>((uint64_t)v485, v309, v310);
        if (v310)
        {
          v314 = (unint64_t *)&v310->__shared_owners_;
          do
            v315 = __ldaxr(v314);
          while (__stlxr(v315 - 1, v314));
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
            std::__shared_weak_count::__release_weak(v310);
          }
        }
        __p[0] = (void *)__PAIR64__(v300, v299);
        LOBYTE(__p[1]) = v302;
        *(_WORD *)((char *)&__p[1] + 1) = v521;
        BYTE3(__p[1]) = v522;
        HIDWORD(__p[1]) = v301;
        *(_QWORD *)&v490 = v303 | 0x200000000;
        *((_QWORD *)&v490 + 1) = v313;
        std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>((float *)v485 + 2656, (int *)__p, (uint64_t)__p);
        __p[0] = v313;
        v316 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v316, v222, __p);
      }
      v5 = v479;
      __p[0] = (void *)md::VKMRenderResourcesStore::createAssociationtemHandle(v485);
      v317 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v317, v222, __p);
      v318 = *(_QWORD *)(v483 + 384);
      v319 = *(_QWORD *)(v318 + 1304);
      v320 = *(void **)(v318 + 1168);
      LODWORD(__p[1]) = *(_DWORD *)(v318 + 1176);
      __p[0] = v320;
      v321 = (uint64_t *)gdc::Registry::storage<md::ls::TileUnitsPerMeter>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::emplace(v321, v222, (uint64_t *)__p);
      HasTileSharedStyleCamera = (uint64_t *)gdc::Registry::storage<md::ls::HasTileSharedStyleCameraLighting>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(HasTileSharedStyleCamera, v222);
      v323 = *(_QWORD *)(v483 + 400);
      v324 = *(std::__shared_weak_count **)(v483 + 408);
      v510 = v323;
      v511 = v324;
      if (v324)
      {
        v325 = (unint64_t *)&v324->__shared_owners_;
        do
          v326 = __ldxr(v325);
        while (__stxr(v326 + 1, v325));
        v509 = v324;
        do
          v327 = __ldxr(v325);
        while (__stxr(v327 + 1, v325));
      }
      else
      {
        v509 = 0;
      }
      v508 = v323;
      v328 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v485, v323, v324);
      if (v324)
      {
        v329 = (unint64_t *)&v324->__shared_owners_;
        do
          v330 = __ldaxr(v329);
        while (__stlxr(v330 - 1, v329));
        if (!v330)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
      }
      __p[0] = v328;
      v331 = (uint64_t *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v331, v222, __p);
      v332 = *(_QWORD *)(v483 + 416);
      v333 = *(std::__shared_weak_count **)(v483 + 424);
      v506 = v332;
      v507 = v333;
      if (v333)
      {
        v334 = (unint64_t *)&v333->__shared_owners_;
        do
          v335 = __ldxr(v334);
        while (__stxr(v335 + 1, v334));
        if (!v332)
          goto LABEL_462;
        v504 = v332;
        v505 = v333;
        do
          v336 = __ldxr(v334);
        while (__stxr(v336 + 1, v334));
      }
      else
      {
        if (!v332)
          goto LABEL_462;
        v333 = 0;
        v504 = v332;
        v505 = 0;
      }
      v337 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v485, v332, v333);
      if (v333)
      {
        v338 = (unint64_t *)&v333->__shared_owners_;
        do
          v339 = __ldaxr(v338);
        while (__stlxr(v339 - 1, v338));
        if (!v339)
        {
          ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
          std::__shared_weak_count::__release_weak(v333);
        }
      }
      __p[0] = v337;
      v340 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v340, v222, __p);
LABEL_462:
      v341 = *(_QWORD *)(v483 + 432);
      v342 = *(std::__shared_weak_count **)(v483 + 440);
      v502 = v341;
      v503 = v342;
      if (v342)
      {
        v343 = (unint64_t *)&v342->__shared_owners_;
        do
          v344 = __ldxr(v343);
        while (__stxr(v344 + 1, v343));
        if (!v341)
          goto LABEL_477;
        v500 = v341;
        v501 = v342;
        do
          v345 = __ldxr(v343);
        while (__stxr(v345 + 1, v343));
      }
      else
      {
        if (!v341)
          goto LABEL_477;
        v342 = 0;
        v500 = v341;
        v501 = 0;
      }
      v346 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::LinearDepth,md::VoidKeyType>((uint64_t)v485, v341, v342);
      if (v342)
      {
        v347 = (unint64_t *)&v342->__shared_owners_;
        do
          v348 = __ldaxr(v347);
        while (__stlxr(v348 - 1, v347));
        if (!v348)
        {
          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
          std::__shared_weak_count::__release_weak(v342);
        }
      }
      __p[0] = v346;
      v349 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v349, v222, __p);
LABEL_477:
      v350 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsFragmentClip>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v350, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Clipping,md::VoidKeyType>((uint64_t)v485);
      v351 = (uint64_t *)gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v351, v222, __p);
      v352 = *(_QWORD *)(v483 + 448);
      v353 = *(std::__shared_weak_count **)(v483 + 456);
      v498 = v352;
      v499 = v353;
      if (v353)
      {
        v354 = (unint64_t *)&v353->__shared_owners_;
        do
          v355 = __ldxr(v354);
        while (__stxr(v355 + 1, v354));
        if (!v352)
          goto LABEL_492;
        v496 = v352;
        v497 = v353;
        do
          v356 = __ldxr(v354);
        while (__stxr(v356 + 1, v354));
      }
      else
      {
        if (!v352)
          goto LABEL_492;
        v353 = 0;
        v496 = v352;
        v497 = 0;
      }
      v357 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::StyleCameraLighting,md::VoidKeyType>((uint64_t)v485, v352, v353);
      if (v353)
      {
        v358 = (unint64_t *)&v353->__shared_owners_;
        do
          v359 = __ldaxr(v358);
        while (__stlxr(v359 - 1, v358));
        if (!v359)
        {
          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
          std::__shared_weak_count::__release_weak(v353);
        }
      }
      __p[0] = v357;
      v360 = (uint64_t *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v360, v222, __p);
LABEL_492:
      v361 = *(_QWORD *)(v483 + 216);
      v362 = *(std::__shared_weak_count **)(v483 + 224);
      v494 = v361;
      v495 = v362;
      if (v362)
      {
        v363 = (unint64_t *)&v362->__shared_owners_;
        do
          v364 = __ldxr(v363);
        while (__stxr(v364 + 1, v363));
      }
      v365 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::View,md::VoidKeyType>((uint64_t)v485, v361, v362);
      if (v362)
      {
        v366 = (unint64_t *)&v362->__shared_owners_;
        do
          v367 = __ldaxr(v366);
        while (__stlxr(v367 - 1, v366));
        if (!v367)
        {
          ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
          std::__shared_weak_count::__release_weak(v362);
        }
      }
      __p[0] = v365;
      v368 = (uint64_t *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v368, v222, __p);
      BYTE8(v490) = 1;
      v369 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::emplace(v369, v222, (uint64_t)__p);
      v370 = *(double *)(v483 + 72) - *(double *)(v483 + 56);
      *(float *)__p = v370;
      v371 = (uint64_t *)gdc::Registry::storage<md::ls::BoundsWidth>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v371, v222, __p);
      v372 = *(_OWORD *)(v483 + 72);
      *(_OWORD *)__p = *(_OWORD *)(v483 + 56);
      v490 = v372;
      v373 = (uint64_t *)gdc::Registry::storage<md::ls::TileBounds>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(v373, v222, (uint64_t)__p);
      __p[0] = (void *)md::VKMRenderResourcesStore::createSharedTileMatrix((uint64_t)v485, (__int128 *)(v483 + 88));
      v374 = (uint64_t *)gdc::Registry::storage<md::ls::TileMatrix>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v374, v222, __p);
      v491 = 0;
      v492 = 0;
      v493 = 0;
      *(_QWORD *)&v487 = md::VKMRenderResourcesStore::createRenderableData((uint64_t)v485, __p);
      v375 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v375, v222, &v487);
      LOBYTE(v487) = 0;
      v376 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v376, v222, &v487);
      if (v319)
      {
        *(_QWORD *)&v487 = v319;
        v377 = (uint64_t *)gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v377, v222, &v487);
      }
      v378 = *(_BYTE *)(v483 + 48);
      v487 = v526;
      if (*((_QWORD *)&v526 + 1))
      {
        v379 = (unint64_t *)(*((_QWORD *)&v526 + 1) + 8);
        do
          v380 = __ldxr(v379);
        while (__stxr(v380 + 1, v379));
      }
      v488 = v378;
      v381 = (uint64_t *)gdc::Registry::storage<md::ls::LayerDataReference>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::emplace(v381, v222, &v487);
      v382 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
      if (*((_QWORD *)&v487 + 1))
      {
        v383 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
        do
          v384 = __ldaxr(v383);
        while (__stlxr(v384 - 1, v383));
        if (!v384)
        {
          ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
          std::__shared_weak_count::__release_weak(v382);
        }
      }
      v385 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v385, v222);
      *(_QWORD *)&v487 = v483;
      v386 = (uint64_t *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v386, v222, &v487);
      v387 = v499;
      if (!v499)
        goto LABEL_514;
      v388 = (unint64_t *)&v499->__shared_owners_;
      do
        v389 = __ldaxr(v388);
      while (__stlxr(v389 - 1, v388));
      if (!v389)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
        v390 = v503;
        if (!v503)
          goto LABEL_520;
      }
      else
      {
LABEL_514:
        v390 = v503;
        if (!v503)
          goto LABEL_520;
      }
      v391 = (unint64_t *)&v390->__shared_owners_;
      do
        v392 = __ldaxr(v391);
      while (__stlxr(v392 - 1, v391));
      if (!v392)
      {
        ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
        std::__shared_weak_count::__release_weak(v390);
      }
LABEL_520:
      v393 = v507;
      if (!v507)
        goto LABEL_524;
      v394 = (unint64_t *)&v507->__shared_owners_;
      do
        v395 = __ldaxr(v394);
      while (__stlxr(v395 - 1, v394));
      if (!v395)
      {
        ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
        std::__shared_weak_count::__release_weak(v393);
        v396 = v511;
        if (!v511)
          goto LABEL_530;
      }
      else
      {
LABEL_524:
        v396 = v511;
        if (!v511)
          goto LABEL_530;
      }
      v397 = (unint64_t *)&v396->__shared_owners_;
      do
        v398 = __ldaxr(v397);
      while (__stlxr(v398 - 1, v397));
      if (!v398)
      {
        ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
        std::__shared_weak_count::__release_weak(v396);
      }
      if (!v481)
        goto LABEL_534;
LABEL_530:
      v399 = (unint64_t *)&v481->__shared_owners_;
      do
        v400 = __ldaxr(v399);
      while (__stlxr(v400 - 1, v399));
      if (!v400)
      {
        ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
        std::__shared_weak_count::__release_weak(v481);
        v401 = v524;
        if (!v524)
          goto LABEL_540;
      }
      else
      {
LABEL_534:
        v401 = v524;
        if (!v524)
          goto LABEL_540;
      }
      v402 = (unint64_t *)&v401->__shared_owners_;
      do
        v403 = __ldaxr(v402);
      while (__stlxr(v403 - 1, v402));
      if (!v403)
      {
        ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
        std::__shared_weak_count::__release_weak(v401);
      }
LABEL_540:
      v404 = (std::__shared_weak_count *)*((_QWORD *)&v526 + 1);
      if (!*((_QWORD *)&v526 + 1))
        goto LABEL_544;
      v405 = (unint64_t *)(*((_QWORD *)&v526 + 1) + 8);
      do
        v406 = __ldaxr(v405);
      while (__stlxr(v406 - 1, v405));
      if (!v406)
      {
        ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
        std::__shared_weak_count::__release_weak(v404);
        v407 = (_QWORD *)v192[1];
        if (!v407)
        {
          do
          {
LABEL_548:
            v408 = (_QWORD *)v192[2];
            v409 = *v408 == (_QWORD)v192;
            v192 = v408;
          }
          while (!v409);
          goto LABEL_283;
        }
      }
      else
      {
LABEL_544:
        v407 = (_QWORD *)v192[1];
        if (!v407)
          goto LABEL_548;
      }
      do
      {
        v408 = v407;
        v407 = (_QWORD *)*v407;
      }
      while (v407);
LABEL_283:
      v192 = v408;
      if (v408 == v470 + 1)
        goto LABEL_264;
    }
  }
LABEL_551:
  v514 = (gdc::Registry *)v5[15];
  v410 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>((uint64_t)v514);
  v411 = (md::VKMRenderResourcesStore *)v410[7];
  v486 = (md::VKMRenderResourcesStore *)v410[8];
  if (v411 != v486)
  {
    v412 = v410[10];
    v413 = v5 + 21;
    v414 = (uint64_t ***)(v412 + 8);
    do
    {
      v421 = (char *)v5[18];
      v415 = (char *)v5[19];
      if (v421 == v415)
      {
        v415 = (char *)v5[18];
      }
      else
      {
        while (1)
        {
          v422 = *(_QWORD *)(*(_QWORD *)v421 + 384);
          v423 = *(std::__shared_weak_count **)(*(_QWORD *)v421 + 392);
          if (v423)
          {
            v424 = (unint64_t *)&v423->__shared_owners_;
            do
              v425 = __ldxr(v424);
            while (__stxr(v425 + 1, v424));
            v426 = *(unsigned __int8 *)(*(_QWORD *)v421 + 48);
            do
              v427 = __ldxr(v424);
            while (__stxr(v427 + 1, v424));
            for (n = *(uint64_t ***)(v412 + 8); n; n = (uint64_t **)*n)
            {
LABEL_567:
              v430 = *((unsigned __int8 *)n + 48);
              v431 = *((char *)n + 48) > (char)v426;
              v432 = (unint64_t)n[4];
              if (v426 == v430)
                v431 = v422 < v432;
              if (!v431)
              {
                v433 = v432 < v422;
                if (v426 == v430)
                  v434 = v433;
                else
                  v434 = (char)v430 < (char)v426;
                if (!v434)
                {
                  v429 = 1;
                  if (v423)
                    goto LABEL_576;
                  goto LABEL_583;
                }
                ++n;
              }
            }
          }
          else
          {
            v426 = *(unsigned __int8 *)(*(_QWORD *)v421 + 48);
            n = *(uint64_t ***)(v412 + 8);
            if (n)
              goto LABEL_567;
          }
          v429 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v413, (unsigned __int8 *)(v422 + 16)) != 0;
          if (v423)
          {
LABEL_576:
            v435 = (unint64_t *)&v423->__shared_owners_;
            do
              v436 = __ldaxr(v435);
            while (__stlxr(v436 - 1, v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
              std::__shared_weak_count::__release_weak(v423);
            }
            do
              v437 = __ldaxr(v435);
            while (__stlxr(v437 - 1, v435));
            if (!v437)
            {
              ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
              std::__shared_weak_count::__release_weak(v423);
            }
          }
LABEL_583:
          if (!v429)
            break;
LABEL_584:
          v421 += 16;
          v5 = v479;
          if (v421 == v415)
            goto LABEL_554;
        }
        while (1)
        {
          v438 = v415;
          v415 -= 16;
          if (v421 == v415)
            break;
          v439 = *(_QWORD *)(*(_QWORD *)v415 + 384);
          v440 = *(std::__shared_weak_count **)(*(_QWORD *)v415 + 392);
          if (v440)
          {
            v441 = (unint64_t *)&v440->__shared_owners_;
            do
              v442 = __ldxr(v441);
            while (__stxr(v442 + 1, v441));
            v443 = *(unsigned __int8 *)(*(_QWORD *)v415 + 48);
            do
              v444 = __ldxr(v441);
            while (__stxr(v444 + 1, v441));
            for (ii = *v414; ii; ii = (uint64_t **)*ii)
            {
LABEL_599:
              v447 = *((unsigned __int8 *)ii + 48);
              v448 = *((char *)ii + 48) > (char)v443;
              v449 = (unint64_t)ii[4];
              if (v443 == v447)
                v448 = v439 < v449;
              if (!v448)
              {
                v450 = v449 < v439;
                if (v443 == v447)
                  v451 = v450;
                else
                  v451 = (char)v447 < (char)v443;
                if (!v451)
                {
                  v446 = 1;
                  if (v440)
                    goto LABEL_608;
                  goto LABEL_586;
                }
                ++ii;
              }
            }
          }
          else
          {
            v443 = *(unsigned __int8 *)(*(_QWORD *)v415 + 48);
            ii = *v414;
            if (*v414)
              goto LABEL_599;
          }
          v446 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v413, (unsigned __int8 *)(v439 + 16)) != 0;
          if (v440)
          {
LABEL_608:
            v452 = (unint64_t *)&v440->__shared_owners_;
            do
              v453 = __ldaxr(v452);
            while (__stlxr(v453 - 1, v452));
            if (!v453)
            {
              ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
              std::__shared_weak_count::__release_weak(v440);
            }
            do
              v454 = __ldaxr(v452);
            while (__stlxr(v454 - 1, v452));
            if (!v454)
            {
              ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
              std::__shared_weak_count::__release_weak(v440);
            }
          }
LABEL_586:
          if (v446)
          {
            v455 = *(_QWORD *)v421;
            *(_QWORD *)v421 = *((_QWORD *)v438 - 2);
            *((_QWORD *)v438 - 2) = v455;
            v456 = *((_QWORD *)v421 + 1);
            *((_QWORD *)v421 + 1) = *((_QWORD *)v438 - 1);
            *((_QWORD *)v438 - 1) = v456;
            goto LABEL_584;
          }
        }
        v415 = v421;
        v5 = v479;
      }
LABEL_554:
      v416 = (void *)v5[19];
      v417 = v514;
      __p[0] = v415;
      __p[1] = v416;
      v525[0] = *((_OWORD *)v5 + 13);
      v418 = gdc::Registry::create(v514);
      v419 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>((uint64_t)v417);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v419, v418, __p);
      v420 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>((uint64_t)v417);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v420, v418, v525);
      v412 += 24;
      v411 = (md::VKMRenderResourcesStore *)((char *)v411 + 8);
      v414 += 3;
    }
    while (v411 != v486);
  }
  result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v5[15]);
  if (*(_QWORD *)(result + 88) != *(_QWORD *)(result + 80))
  {
    v458 = *(uint64_t **)v5[16];
    if (v458 != *(uint64_t **)(v5[16] + 8) && *v458 != 0x22D45F5AAD4BF408)
    {
      v459 = v458 + 5;
      do
      {
        v460 = *v459;
        v459 += 5;
      }
      while (v460 != 0x22D45F5AAD4BF408);
      v458 = v459 - 5;
    }
    v461 = (uint64_t (***)(_QWORD))v458[3];
    v462 = (std::__shared_weak_count *)v458[4];
    if (v462)
    {
      v463 = (unint64_t *)&v462->__shared_owners_;
      do
        v464 = __ldxr(v463);
      while (__stxr(v464 + 1, v463));
      do
        v465 = __ldaxr(v463);
      while (__stlxr(v465 - 1, v463));
      if (!v465)
      {
        ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
        std::__shared_weak_count::__release_weak(v462);
      }
    }
    result = (**v461)(v461);
    **(_BYTE **)(result + 736) = 1;
  }
  *a4 = v5[15];
  return result;
}

void sub_19F45D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCF15A221AD0F424CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCF15A221AD0F424CLL;
      if (*(_QWORD *)&v3 <= 0xCF15A221AD0F424CLL)
        v5 = 0xCF15A221AD0F424CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCF15A221AD0F424CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCF15A221AD0F424CLL)
            {
              if (v7[2] == 0xCF15A221AD0F424CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCF15A221AD0F424CLL)
          {
            if (v7[2] == 0xCF15A221AD0F424CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2CB8;
  *(_QWORD *)(v11 + 8) = 0xCF15A221AD0F424CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCF15A221AD0F424CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCF15A221AD0F424CLL;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCF15A221AD0F424CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45D8C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5D358FB21220FE77;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5D358FB21220FE77;
      if (*(_QWORD *)&v3 <= 0x5D358FB21220FE77uLL)
        v5 = 0x5D358FB21220FE77uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5D358FB21220FE77;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5D358FB21220FE77)
            {
              if (v7[2] == 0x5D358FB21220FE77)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5D358FB21220FE77)
          {
            if (v7[2] == 0x5D358FB21220FE77)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2A78;
  *(_QWORD *)(v11 + 8) = 0x5D358FB21220FE77;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5D358FB21220FE77uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5D358FB21220FE77;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5D358FB21220FE77, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45DAE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x37B530CC735CB3B7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x37B530CC735CB3B7;
      if (*(_QWORD *)&v3 <= 0x37B530CC735CB3B7uLL)
        v5 = 0x37B530CC735CB3B7uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x37B530CC735CB3B7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x37B530CC735CB3B7)
            {
              if (v7[2] == 0x37B530CC735CB3B7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x37B530CC735CB3B7)
          {
            if (v7[2] == 0x37B530CC735CB3B7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataActive<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42708D8;
  *(_QWORD *)(v11 + 8) = 0x37B530CC735CB3B7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x37B530CC735CB3B7uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x37B530CC735CB3B7;
  v15[1] = "SceneComponents::LayerDataActive<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0x37B530CC735CB3B7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F45DEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *v10;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          *v10 = *v8;
          *v8 = v107;
          v108 = v10[1];
          v10[1] = *v9;
          goto LABEL_185;
        }
        return result;
      case 3:
        v109 = v10[2];
        v110 = *(unsigned __int8 *)(*(_QWORD *)(v109 + 384) + 169);
        v111 = *v10;
        v112 = *v8;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
        if (v110 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          if (v113 <= v110)
            return result;
          v10[2] = v112;
          *v8 = v109;
          v156 = v10[3];
          v10[3] = *v9;
          *v9 = v156;
          v157 = v10[2];
          v158 = *v10;
          if (*(unsigned __int8 *)(*(_QWORD *)(v157 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            return result;
          *v10 = v157;
          v10[2] = v158;
          v114 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v113 <= v110)
          {
            v114 = v10 + 3;
            v167 = v10[3];
            v168 = v10[1];
            *v10 = v109;
            v10[1] = v167;
            v10[2] = v111;
            v10[3] = v168;
            if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v111 + 384) + 169))
              return result;
            v10[2] = *v8;
          }
          else
          {
            v114 = v10 + 1;
            *v10 = v112;
          }
          *v8 = v111;
        }
        v108 = *v114;
        *v114 = *v9;
LABEL_185:
        *v9 = v108;
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v128 = (unint64_t)(v12 - 2) >> 1;
              v129 = v128;
              do
              {
                v130 = v129;
                if (v128 >= v129)
                {
                  v131 = (2 * v129) | 1;
                  v132 = &v10[2 * v131];
                  if (2 * v130 + 2 >= v12)
                  {
                    v136 = *v132;
                  }
                  else
                  {
                    v133 = *(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169);
                    v134 = *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169);
                    v135 = v133 > v134;
                    if (v133 <= v134)
                      v136 = *v132;
                    else
                      v136 = v132[2];
                    if (v135)
                    {
                      v132 += 2;
                      v131 = 2 * v130 + 2;
                    }
                  }
                  v137 = &v10[2 * v130];
                  v138 = *v137;
                  result = *(unsigned __int8 *)(*(_QWORD *)(*v137 + 384) + 169);
                  if (*(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169) <= result)
                  {
                    v139 = v137[1];
                    do
                    {
                      result = (unint64_t)v137;
                      v137 = v132;
                      *(_QWORD *)result = v136;
                      *(_QWORD *)(result + 8) = v132[1];
                      if (v128 < v131)
                        break;
                      v140 = (2 * v131) | 1;
                      v132 = &v10[2 * v140];
                      v131 = 2 * v131 + 2;
                      if (v131 < v12)
                      {
                        v136 = *v132;
                        if (*(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169))
                        {
                          v131 = v140;
                        }
                        else
                        {
                          v136 = v132[2];
                          v132 += 2;
                        }
                      }
                      else
                      {
                        v136 = *v132;
                        v131 = v140;
                      }
                      result = *(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(_QWORD *)(v138 + 384) + 169));
                    *v137 = v138;
                    v137[1] = v139;
                  }
                }
                v129 = v130 - 1;
              }
              while (v130);
              v141 = (unint64_t)v11 >> 4;
              do
              {
                v142 = 0;
                v143 = *v10;
                v144 = v10[1];
                v145 = v10;
                do
                {
                  v147 = &v145[2 * v142 + 2];
                  v148 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    v146 = *v147;
                    result = (unint64_t)(v147 + 2);
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v147[2] + 384) + 169))
                    {
                      v142 = v148;
                    }
                    else
                    {
                      v146 = v147[2];
                      v147 += 2;
                    }
                  }
                  else
                  {
                    v146 = *v147;
                    v142 = v148;
                  }
                  *v145 = v146;
                  v145[1] = v147[1];
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == a2 - 2)
                {
                  *v147 = v143;
                  v147[1] = v144;
                }
                else
                {
                  *v147 = *(a2 - 2);
                  v147[1] = *(a2 - 1);
                  *(a2 - 2) = v143;
                  *(a2 - 1) = v144;
                  v149 = (char *)v147 - (char *)v10 + 16;
                  if (v149 >= 17)
                  {
                    v150 = (((unint64_t)v149 >> 4) - 2) >> 1;
                    v151 = &v10[2 * v150];
                    v152 = *v151;
                    v153 = *v147;
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169))
                    {
                      v154 = v147[1];
                      do
                      {
                        v155 = v147;
                        v147 = v151;
                        *v155 = v152;
                        v155[1] = v151[1];
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[2 * v150];
                        v152 = *v151;
                      }
                      while (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v153 + 384) + 169));
                      *v147 = v153;
                      v147[1] = v154;
                    }
                  }
                }
                a2 -= 2;
                v135 = v141-- <= 2;
              }
              while (!v135);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
          if ((unint64_t)v11 >= 0x801)
          {
            v17 = *v14;
            v18 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
            v19 = *v10;
            if (v18 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            {
              if (v16 <= v18
                || (*v14 = v15,
                    *v8 = v17,
                    v26 = v14 + 1,
                    v25 = v14[1],
                    v14[1] = *v9,
                    *v9 = v25,
                    v27 = *v10,
                    *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169)))
              {
LABEL_23:
                v34 = &v10[2 * v13];
                v37 = *(v34 - 2);
                v35 = v34 - 2;
                v36 = v37;
                v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169);
                v39 = v10[2];
                v40 = *(a2 - 4);
                v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 384) + 169);
                if (v38 <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                {
                  if (v41 <= v38
                    || (*v35 = v40,
                        *(a2 - 4) = v36,
                        v43 = v35 + 1,
                        v44 = v35[1],
                        v35[1] = *(a2 - 3),
                        *(a2 - 3) = v44,
                        v45 = v10[2],
                        *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v45 + 384) + 169)))
                  {
LABEL_36:
                    v52 = &v10[2 * v13];
                    v55 = v52[2];
                    v53 = v52 + 2;
                    v54 = v55;
                    v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 384) + 169);
                    v57 = v10[4];
                    v58 = *(a2 - 6);
                    v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 384) + 169);
                    if (v56 <= *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169))
                    {
                      if (v59 > v56)
                      {
                        *v53 = v58;
                        *(a2 - 6) = v54;
                        v62 = v53 + 1;
                        v61 = v53[1];
                        v53[1] = *(a2 - 5);
                        *(a2 - 5) = v61;
                        v54 = *v53;
                        v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        v63 = v10[4];
                        if (v56 > *(unsigned __int8 *)(*(_QWORD *)(v63 + 384) + 169))
                        {
                          v10[4] = v54;
                          *v53 = v63;
                          v60 = v10 + 5;
LABEL_45:
                          v67 = *v60;
                          *v60 = *v62;
                          *v62 = v67;
                          v54 = *v53;
                          v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v59 > v56)
                      {
                        v60 = v10 + 5;
                        v10[4] = v58;
LABEL_44:
                        *(a2 - 6) = v57;
                        v62 = a2 - 5;
                        goto LABEL_45;
                      }
                      v60 = v53 + 1;
                      v64 = v53[1];
                      v65 = v10[5];
                      v10[4] = v54;
                      v10[5] = v64;
                      *v53 = v57;
                      v53[1] = v65;
                      v66 = *(a2 - 6);
                      v56 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169);
                      if (*(unsigned __int8 *)(*(_QWORD *)(v66 + 384) + 169) > v56)
                      {
                        *v53 = v66;
                        goto LABEL_44;
                      }
                      v54 = v57;
                    }
                    v68 = *v14;
                    v69 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
                    v70 = *v35;
                    if (v69 <= *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169))
                    {
                      if (v56 <= v69)
                      {
LABEL_56:
                        v78 = *v10;
                        *v10 = v68;
                        v24 = v10 + 1;
                        *v14 = v78;
                        v30 = v14 + 1;
                        goto LABEL_57;
                      }
                      *v14 = v54;
                      v73 = v14 + 1;
                      v74 = v14[1];
                      v14[1] = v53[1];
                      *v53 = v68;
                      v53[1] = v74;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                      {
                        v68 = v54;
                        goto LABEL_56;
                      }
                      *v35 = v54;
                      v71 = v35 + 1;
                      *v14 = v70;
                    }
                    else
                    {
                      if (v56 <= v69)
                      {
                        *v14 = v70;
                        v75 = v14[1];
                        v76 = v35[1];
                        *v35 = v68;
                        v35[1] = v75;
                        v14[1] = v76;
                        if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                        {
                          v68 = v70;
                          goto LABEL_56;
                        }
                        *v14 = v54;
                        *v53 = v70;
                        v72 = v53 + 1;
                        v71 = v14 + 1;
                      }
                      else
                      {
                        *v35 = v54;
                        v71 = v35 + 1;
                        *v53 = v70;
                        v72 = v53 + 1;
                      }
                      v73 = v72;
                    }
                    v77 = *v71;
                    *v71 = *v73;
                    *v73 = v77;
                    v68 = *v14;
                    goto LABEL_56;
                  }
                  v10[2] = *v35;
                  *v35 = v45;
                  v42 = v10 + 3;
                }
                else
                {
                  if (v41 <= v38)
                  {
                    v42 = v35 + 1;
                    v48 = v35[1];
                    v49 = v10[3];
                    v10[2] = v36;
                    v10[3] = v48;
                    *v35 = v39;
                    v35[1] = v49;
                    v50 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v50 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                      goto LABEL_36;
                    *v35 = v50;
                  }
                  else
                  {
                    v42 = v10 + 3;
                    v10[2] = v40;
                  }
                  *(a2 - 4) = v39;
                  v43 = a2 - 3;
                }
                v51 = *v42;
                *v42 = *v43;
                *v43 = v51;
                goto LABEL_36;
              }
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v27;
            }
            else
            {
              if (v16 <= v18)
              {
                v20 = v14 + 1;
                v31 = v14[1];
                v32 = v10[1];
                *v10 = v17;
                v10[1] = v31;
                *v14 = v19;
                v14[1] = v32;
                if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v19 + 384) + 169))
                  goto LABEL_23;
                *v14 = *v8;
              }
              else
              {
                v20 = v10 + 1;
                *v10 = v15;
              }
              *v8 = v19;
              v26 = a2 - 1;
            }
            v33 = *v20;
            *v20 = *v26;
            *v26 = v33;
            goto LABEL_23;
          }
          v21 = *v10;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169);
          v23 = *v14;
          if (v22 <= *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
          {
            if (v16 > v22)
            {
              *v10 = v15;
              *v8 = v21;
              v28 = v10[1];
              v10[1] = *v9;
              *v9 = v28;
              v21 = *v10;
              v29 = *v14;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
              {
                *v14 = v21;
                *v10 = v29;
                v24 = v14 + 1;
                v30 = v10 + 1;
LABEL_57:
                v79 = *v24;
                *v24 = *v30;
                *v30 = v79;
                v21 = *v10;
              }
            }
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_59;
LABEL_61:
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
            if (*(unsigned __int8 *)(*(_QWORD *)(*(v10 - 2) + 384) + 169) > v80)
              goto LABEL_62;
            if (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169))
            {
              v97 = v10 + 2;
              do
              {
                v10 = v97;
                if (v97 >= a2)
                  break;
                v97 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169));
            }
            else
            {
              do
              {
                v96 = v10[2];
                v10 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(v96 + 384) + 169));
            }
            v98 = a2;
            if (v10 < a2)
            {
              v98 = a2;
              do
              {
                v99 = *(v98 - 2);
                v98 -= 2;
              }
              while (v80 > *(unsigned __int8 *)(*(_QWORD *)(v99 + 384) + 169));
            }
            v100 = v7[1];
            if (v10 < v98)
            {
              v101 = *v10;
              v102 = *v98;
              do
              {
                *v10 = v102;
                *v98 = v101;
                v103 = v10[1];
                v10[1] = v98[1];
                v98[1] = v103;
                v104 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
                do
                {
                  v105 = v10[2];
                  v10 += 2;
                  v101 = v105;
                }
                while (v104 <= *(unsigned __int8 *)(*(_QWORD *)(v105 + 384) + 169));
                do
                {
                  v106 = *(v98 - 2);
                  v98 -= 2;
                  v102 = v106;
                }
                while (v104 > *(unsigned __int8 *)(*(_QWORD *)(v106 + 384) + 169));
              }
              while (v10 < v98);
            }
            if (v10 - 2 != v7)
            {
              *v7 = *(v10 - 2);
              v7[1] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 2) = v21;
            *(v10 - 1) = v100;
            continue;
          }
          if (v16 > v22)
          {
            v24 = v14 + 1;
            *v14 = v15;
LABEL_31:
            *v8 = v23;
            v30 = a2 - 1;
            goto LABEL_57;
          }
          v24 = v10 + 1;
          v46 = v10[1];
          v47 = v14[1];
          *v14 = v21;
          v14[1] = v46;
          *v10 = v23;
          v10[1] = v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v23 + 384) + 169))
          {
            *v10 = *v8;
            goto LABEL_31;
          }
          v21 = v23;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_59:
          v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
LABEL_62:
          v81 = v10[1];
          v82 = v10;
          do
          {
            v83 = v82;
            v85 = v82[2];
            v82 += 2;
            v84 = v85;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v85 + 384) + 169) > v80);
          v86 = a2;
          if (v83 == v10)
          {
            v86 = a2;
            do
            {
              if (v82 >= v86)
                break;
              v88 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v88 + 384) + 169) <= v80);
          }
          else
          {
            do
            {
              v87 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v87 + 384) + 169) <= v80);
          }
          if (v82 >= v86)
          {
            v10 = v82;
          }
          else
          {
            v89 = *v86;
            v10 = v82;
            v90 = v86;
            do
            {
              *v10 = v89;
              *v90 = v84;
              v91 = v10[1];
              v10[1] = v90[1];
              v90[1] = v91;
              v92 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
              do
              {
                v93 = v10[2];
                v10 += 2;
                v84 = v93;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v93 + 384) + 169) > v92);
              do
              {
                v94 = *(v90 - 2);
                v90 -= 2;
                v89 = v94;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v94 + 384) + 169) <= v92);
            }
            while (v10 < v90);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          *(v10 - 2) = v21;
          *(v10 - 1) = v81;
          if (v82 < v86)
            goto LABEL_83;
          v95 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v7, v10 - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v95)
              continue;
LABEL_83:
            result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v7, v10 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 2;
          if (v95)
            return result;
          goto LABEL_2;
        }
        v115 = v10 + 2;
        v117 = v10 == a2 || v115 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v117)
          {
            v118 = 0;
            v119 = v10;
            do
            {
              v121 = v115;
              v122 = v119[2];
              v123 = *v119;
              if (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v119 + 384) + 169))
              {
                v124 = v119[3];
                v125 = v118;
                do
                {
                  v126 = (char *)v10 + v125;
                  v127 = *(uint64_t *)((char *)v10 + v125 + 8);
                  *((_QWORD *)v126 + 2) = v123;
                  *((_QWORD *)v126 + 3) = v127;
                  if (!v125)
                  {
                    v120 = v10;
                    goto LABEL_125;
                  }
                  v123 = *((_QWORD *)v126 - 2);
                  v125 -= 16;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v123 + 384) + 169));
                v120 = (uint64_t *)((char *)v10 + v125 + 16);
LABEL_125:
                *v120 = v122;
                v120[1] = v124;
              }
              v115 = v121 + 2;
              v118 += 16;
              v119 = v121;
            }
            while (v121 + 2 != a2);
          }
        }
        else if (!v117)
        {
          v159 = v10 + 3;
          do
          {
            v160 = v115;
            v161 = v7[2];
            v162 = *v7;
            if (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v7 + 384) + 169))
            {
              v163 = v7[3];
              v164 = v159;
              do
              {
                v165 = v164;
                *(v164 - 1) = v162;
                v166 = *(v164 - 2);
                v164 -= 2;
                *v165 = v166;
                v162 = *(v165 - 5);
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v162 + 384) + 169));
              *(v164 - 1) = v161;
              *v164 = v163;
            }
            v115 = v160 + 2;
            v159 += 2;
            v7 = v160;
          }
          while (v160 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 2);
      v4 = *a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v6 = a1[2];
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 384) + 169);
      v8 = *a1;
      v9 = *(a2 - 2);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          v11 = a1 + 3;
          v26 = a1[3];
          v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(_QWORD *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 384) + 169))
            return 1;
          a1[2] = v28;
        }
        else
        {
          v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        v20 = a1 + 3;
        v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        v21 = a1[2];
        v22 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          v11 = a1 + 1;
LABEL_21:
          v29 = *v11;
          *v11 = *v20;
          *v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 384) + 169);
      v16 = *a1;
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          v18 = a1 + 3;
          v30 = a1[3];
          v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
            goto LABEL_26;
          a1[2] = v13;
        }
        else
        {
          v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        v24 = a1 + 3;
        v23 = a1[3];
        v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          v18 = a1 + 1;
LABEL_25:
          v32 = *v18;
          *v18 = *v24;
          *v24 = v32;
        }
      }
LABEL_26:
      v33 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v37 = *v33;
        v38 = *v12;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v12 + 384) + 169))
        {
          v39 = v33[1];
          v40 = v34;
          do
          {
            v41 = (uint64_t *)((char *)a1 + v40);
            v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              v36 = a1;
              goto LABEL_29;
            }
            v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v38 + 384) + 169));
          v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *v36 = v37;
          v36[1] = v39;
          if (++v35 == 8)
            return v33 + 2 == a2;
        }
        v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2)
          return 1;
      }
  }
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v3 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x412AFB1345D08930;
    if (a2 <= 0x412AFB1345D08930)
      v11 = 0x412AFB1345D08930 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x412AFB1345D08930;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x412AFB1345D08930)
      {
        if (v13[2] == 0x412AFB1345D08930)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x412AFB1345D08930)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x412AFB1345D08930)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x412AFB1345D08930)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)34>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1518;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)34>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1518;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)34>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F480;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F480;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

void md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::reset(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  char v45;

  v2 = a1[16];
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v5 = 0;
  }
  else
  {
    v5 = v3[3];
    v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  md::FlyoverRenderResources::prunePools(v10);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  md::DaVinciGroundRenderResources::prunePools(v11);
  v12 = (gdc::Registry *)a1[15];
  if (v12)
  {
    v13 = gdc::Registry::create(v12);
    v14 = (uint64_t *)gdc::Registry::storage<md::ls::RequestReset>(a1[15]);
    v45 = 0;
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v14, v13, &v45);
    v15 = (_QWORD *)a1[18];
    v16 = (_QWORD *)a1[19];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v44 = a1[19];
      while (1)
      {
        cleanup(a1[16], a1[15], v15[1]);
        v20 = (void (***)(_QWORD))*v15;
        if (*v15)
        {
          v21 = a1[17];
          if (*(_QWORD *)(v21 + 16))
          {
            (**v20)(*v15);
            *v20 = *(void (***)(_QWORD))(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
          }
        }
        if (v19 >= v18)
          break;
        *(_QWORD *)v19 = v15[1];
        v19 += 8;
LABEL_17:
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)a1[18];
          goto LABEL_51;
        }
      }
      v22 = (v19 - v17) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v18 - v17) >> 2 > v23)
        v23 = (v18 - v17) >> 2;
      if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15[1];
      v27 = v26 + 8;
      if (v19 != v17)
      {
        v28 = v19 - 8 - v17;
        if (v28 >= 0x168)
        {
          if (&v25[v19 - v17 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v19 - v17 - 8])
          {
            v29 = v19;
          }
          else if (&v19[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
          {
            v29 = v19;
          }
          else if ((unint64_t)(v17 - v25) >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v29 = &v19[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            v32 = &v25[8 * v22 - 16];
            v33 = v19 - 16;
            v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v26 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_36;
          }
          else
          {
            v29 = v19;
          }
        }
        else
        {
          v29 = v19;
        }
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v29 != v17);
      }
LABEL_36:
      v18 = &v25[8 * v24];
      if (v17)
        operator delete(v17);
      v17 = v26;
      v19 = v27;
      v16 = (_QWORD *)v44;
      goto LABEL_17;
    }
    v19 = 0;
    v17 = 0;
LABEL_51:
    a1[19] = (uint64_t)v15;
    a1[30] = a1[29];
    a1[27] = a1[26];
    if (a1[24])
    {
      v36 = (_BYTE *)a1[23];
      if (v36)
      {
        do
        {
          if (v36[112])
            v36[112] = 0;
          v42 = *(_BYTE **)v36;
          v43 = (void *)*((_QWORD *)v36 + 4);
          if (v43 != *((void **)v36 + 6))
            free(v43);
          operator delete(v36);
          v36 = v42;
        }
        while (v42);
      }
      a1[23] = 0;
      v37 = a1[22];
      if (v37)
      {
        for (i = 0; i != v37; ++i)
          *(_QWORD *)(a1[21] + 8 * i) = 0;
      }
      a1[24] = 0;
    }
    if (v17 != v19)
    {
      v39 = a1[15];
      v40 = (unint64_t *)v17;
      do
      {
        v41 = *v40++;
        gdc::Registry::destroy(v39, v41);
      }
      while (v40 != (unint64_t *)v19);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_19F45FA8C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciBuildings>]";
  v4[3] = 69;
  v4[4] = result;
  *v4 = &off_1E4270698;
  v4[1] = 0xF5BDE3F396AD5C40;
  *a2 = v4;
  return result;
}

void sub_19F45FB60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0xF5BDE3F396AD5C40 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::runBeforeLayout(_QWORD *a1, md::LayoutContext *a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t **i;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  md::VKMRenderResourcesStore *j;
  int v51;
  BOOL v52;
  unint64_t v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t **k;
  BOOL v71;
  int v72;
  BOOL v73;
  unint64_t v74;
  _BOOL4 v75;
  _BOOL4 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  md::VKMRenderResourcesStore *m;
  int v88;
  BOOL v89;
  unint64_t v90;
  _BOOL4 v91;
  int v92;
  _BOOL4 v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  char *v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  double *v106;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  char *v110;
  char *v111;
  void *v112;
  char *v113;
  int64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  void (***v128)(_QWORD);
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const double *v151;
  double *v152;
  double *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  void *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t **v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double *v204;
  uint64_t v205;
  const double *v206;
  const double *v207;
  double *v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  void *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  double v216;
  double v217;
  uint64_t v218;
  char v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  uint64_t *v233;
  unint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t (***v245)(_QWORD);
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  int8x8_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  char v262;
  _BYTE *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  _BYTE *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  size_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  __int128 *v279;
  unint64_t v280;
  __int128 v281;
  uint64_t v282;
  _BYTE *v283;
  char *v284;
  uint64_t *v285;
  uint64_t v286;
  char *v287;
  char v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  char v302;
  unsigned int v303;
  void *v304;
  char v305;
  void *v306;
  uint64_t *v307;
  _QWORD *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t *v321;
  uint64_t *HasTileSharedStyleCamera;
  uint64_t *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  void *v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  void *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  void *v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  void *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  void *v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t *v369;
  uint64_t *v370;
  float v371;
  uint64_t *v372;
  __int128 v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t *v378;
  char v379;
  unint64_t *v380;
  unint64_t v381;
  uint64_t *v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  uint64_t *v386;
  uint64_t *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  BOOL v410;
  _QWORD *v411;
  md::VKMRenderResourcesStore *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t ***v415;
  char *v416;
  void *v417;
  gdc::Registry *v418;
  unint64_t v419;
  uint64_t *v420;
  uint64_t *v421;
  char *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  int v427;
  unint64_t v428;
  uint64_t **n;
  BOOL v430;
  int v431;
  BOOL v432;
  unint64_t v433;
  _BOOL4 v434;
  _BOOL4 v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  char *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  int v444;
  unint64_t v445;
  uint64_t **ii;
  _BOOL4 v447;
  int v448;
  BOOL v449;
  unint64_t v450;
  _BOOL4 v451;
  _BOOL4 v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t result;
  uint64_t *v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t (***v462)(_QWORD);
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  _QWORD *v471;
  md::LayoutContext *v472;
  uint64_t *v473;
  int v474;
  uint64_t v475;
  uint64_t **v476;
  uint64_t *v477;
  uint64_t v478;
  _QWORD *v479;
  _QWORD *v480;
  char **v481;
  std::__shared_weak_count *v482;
  uint64_t v483;
  uint64_t v484;
  md::VKMRenderResourcesStore *v485;
  md::VKMRenderResourcesStore *v486;
  md::VKMRenderResourcesStore *v487;
  __int128 v488;
  char v489;
  void *__p[2];
  __int128 v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  uint64_t v505;
  std::__shared_weak_count *v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  uint64_t v513;
  std::__shared_weak_count *v514;
  gdc::Registry *v515;
  char v516;
  __int16 v517;
  char v518;
  unsigned int v519;
  unsigned int v520;
  int v521;
  __int16 v522;
  char v523;
  uint64_t v524;
  std::__shared_weak_count *v525;
  _OWORD v526[2];
  __int128 v527;
  float64x2x2_t v528;
  float64x2x2_t v529;
  float64x2x2_t v530;
  float64x2x2_t v531;

  v5 = a1;
  v473 = *a3;
  v6 = a1[15];
  v7 = (uint64_t **)*((_QWORD *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v491 = 0;
  v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    v8 = v9 - 5;
  }
  v11 = (void (***)(_QWORD))v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v476 = v7;
  (**v11)(v11);
  v472 = a2;
  v475 = v6;
  v16 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(v6);
  v17 = v16[7];
  v478 = v16[8];
  v480 = v5;
  if (v17 != v478)
  {
    v18 = v5 + 21;
    v481 = (char **)(v5 + 29);
    v19 = v16[10];
    v485 = (md::VKMRenderResourcesStore *)(v19 + 8);
    while (1)
    {
      v483 = v17;
      v25 = (_QWORD *)v5[18];
      v26 = (_QWORD *)v5[19];
LABEL_20:
      while (v25 != v26)
      {
        v27 = *(_QWORD *)(*v25 + 384);
        v28 = *(std::__shared_weak_count **)(*v25 + 392);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = *(unsigned __int8 *)(*v25 + 48);
          do
            v32 = __ldxr(v29);
          while (__stxr(v32 + 1, v29));
          for (i = *(uint64_t ***)(v19 + 8); i; i = (uint64_t **)*i)
          {
LABEL_32:
            v35 = *((unsigned __int8 *)i + 48);
            v36 = *((char *)i + 48) > (char)v31;
            v37 = (unint64_t)i[4];
            if (v31 == v35)
              v36 = v27 < v37;
            if (!v36)
            {
              v38 = v37 < v27;
              if (v31 == v35)
                v39 = v38;
              else
                v39 = (char)v35 < (char)v31;
              if (!v39)
              {
                v34 = 1;
                if (v28)
                  goto LABEL_41;
                goto LABEL_48;
              }
              ++i;
            }
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(*v25 + 48);
          i = *(uint64_t ***)(v19 + 8);
          if (i)
            goto LABEL_32;
        }
        v34 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v27 + 16)) != 0;
        if (v28)
        {
LABEL_41:
          v40 = (unint64_t *)&v28->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 - 1, v40));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
LABEL_48:
        if (!v34)
        {
          while (1)
          {
            v43 = v26;
            v26 -= 2;
            if (v25 == v26)
              goto LABEL_80;
            v44 = *(_QWORD *)(*v26 + 384);
            v45 = *(std::__shared_weak_count **)(*v26 + 392);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
              v48 = *(unsigned __int8 *)(*v26 + 48);
              do
                v49 = __ldxr(v46);
              while (__stxr(v49 + 1, v46));
            }
            else
            {
              v48 = *(unsigned __int8 *)(*v26 + 48);
            }
            for (j = v485; ; j = (md::VKMRenderResourcesStore *)((char *)j + 8))
            {
              do
              {
                j = *(md::VKMRenderResourcesStore **)j;
                if (!j)
                {
                  v56 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v44 + 16)) != 0;
                  if (!v45)
                    goto LABEL_50;
                  goto LABEL_72;
                }
                v51 = *((unsigned __int8 *)j + 48);
                v52 = *((char *)j + 48) > (char)v48;
                v53 = *((_QWORD *)j + 4);
                if (v48 == v51)
                  v52 = v44 < v53;
              }
              while (v52);
              v54 = v53 < v44;
              v55 = v48 == v51 ? v54 : (char)v51 < (char)v48;
              if (v55 != 1)
                break;
            }
            v56 = 1;
            if (!v45)
              goto LABEL_50;
LABEL_72:
            v57 = (unint64_t *)&v45->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
            do
              v59 = __ldaxr(v57);
            while (__stlxr(v59 - 1, v57));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
LABEL_50:
            if (v56)
            {
              v60 = *v25;
              *v25 = *(v43 - 2);
              *(v43 - 2) = v60;
              v61 = v25[1];
              v25[1] = *(v43 - 1);
              *(v43 - 1) = v61;
              v25 += 2;
              goto LABEL_20;
            }
          }
        }
        v25 += 2;
      }
LABEL_80:
      v63 = (_QWORD *)v480[18];
      v62 = v480[19];
LABEL_81:
      while (v63 != (_QWORD *)v62)
      {
        v64 = *(_QWORD *)(*v63 + 384);
        v65 = *(std::__shared_weak_count **)(*v63 + 392);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          v68 = *(unsigned __int8 *)(*v63 + 48);
          do
            v69 = __ldxr(v66);
          while (__stxr(v69 + 1, v66));
          for (k = *(uint64_t ***)(v19 + 8); k; k = (uint64_t **)*k)
          {
LABEL_93:
            v72 = *((unsigned __int8 *)k + 48);
            v73 = *((char *)k + 48) > (char)v68;
            v74 = (unint64_t)k[4];
            if (v68 == v72)
              v73 = v64 < v74;
            if (!v73)
            {
              v75 = v74 < v64;
              if (v68 == v72)
                v76 = v75;
              else
                v76 = (char)v72 < (char)v68;
              if (!v76)
              {
                v71 = 1;
                if (v65)
                  goto LABEL_102;
                goto LABEL_109;
              }
              ++k;
            }
          }
        }
        else
        {
          v68 = *(unsigned __int8 *)(*v63 + 48);
          k = *(uint64_t ***)(v19 + 8);
          if (k)
            goto LABEL_93;
        }
        v71 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v64 + 16)) != 0;
        if (v65)
        {
LABEL_102:
          v77 = (unint64_t *)&v65->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          do
            v79 = __ldaxr(v77);
          while (__stlxr(v79 - 1, v77));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
LABEL_109:
        if (!v71)
        {
          while (1)
          {
            v80 = v62;
            v62 -= 16;
            if (v63 == (_QWORD *)v62)
              break;
            v81 = *(_QWORD *)(*(_QWORD *)v62 + 384);
            v82 = *(std::__shared_weak_count **)(*(_QWORD *)v62 + 392);
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldxr(v83);
              while (__stxr(v84 + 1, v83));
              v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
              do
                v86 = __ldxr(v83);
              while (__stxr(v86 + 1, v83));
            }
            else
            {
              v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
            }
            for (m = v485; ; m = (md::VKMRenderResourcesStore *)((char *)m + 8))
            {
              do
              {
                m = *(md::VKMRenderResourcesStore **)m;
                if (!m)
                {
                  v93 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v81 + 16)) != 0;
                  if (!v82)
                    goto LABEL_111;
                  goto LABEL_133;
                }
                v88 = *((unsigned __int8 *)m + 48);
                v89 = *((char *)m + 48) > (char)v85;
                v90 = *((_QWORD *)m + 4);
                if (v85 == v88)
                  v89 = v81 < v90;
              }
              while (v89);
              v91 = v90 < v81;
              v92 = v85 == v88 ? v91 : (char)v88 < (char)v85;
              if (v92 != 1)
                break;
            }
            v93 = 1;
            if (!v82)
              goto LABEL_111;
LABEL_133:
            v94 = (unint64_t *)&v82->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
            do
              v96 = __ldaxr(v94);
            while (__stlxr(v96 - 1, v94));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
LABEL_111:
            if (v93)
            {
              v97 = *v63;
              *v63 = *(_QWORD *)(v80 - 16);
              *(_QWORD *)(v80 - 16) = v97;
              v98 = v63[1];
              v63[1] = *(_QWORD *)(v80 - 8);
              *(_QWORD *)(v80 - 8) = v98;
              v63 += 2;
              goto LABEL_81;
            }
          }
          v62 = (unint64_t)v63;
          break;
        }
        v63 += 2;
      }
      v99 = (__int128 *)v480[19];
      v100 = (char *)v99 - v62;
      v101 = (uint64_t)((uint64_t)v99 - v62) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v481, v480[30], v62, v99, v101);
      if ((__int128 *)v62 == v99)
        goto LABEL_149;
      v103 = v480[18];
      v102 = (double *)v480[19];
      v104 = v62 - v103;
      v105 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
      v106 = &v105[2 * v101];
      if (v106 != v102)
        break;
LABEL_148:
      v480[19] = v105;
LABEL_149:
      v110 = (char *)v480[29];
      v20 = (char *)v480[30];
      if (v20 != v110)
      {
        do
        {
          v111 = (char *)__p[1];
          if (__p[1] >= (void *)v491)
          {
            v113 = (char *)__p[0];
            v114 = (char *)__p[1] - (char *)__p[0];
            v115 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61)
              abort();
            v117 = v491 - (unint64_t)__p[0];
            if ((uint64_t)(v491 - (unint64_t)__p[0]) >> 2 > v116)
              v116 = v117 >> 2;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
              v118 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              if (v118 >> 61)
LABEL_633:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v119 = operator new(8 * v118);
            }
            else
            {
              v119 = 0;
            }
            v120 = &v119[8 * v115];
            *v120 = *((_QWORD *)v110 + 1);
            v112 = v120 + 1;
            if (v111 == v113)
            {
              v113 = v111;
            }
            else
            {
              v121 = v111 - 8 - v113;
              if (v121 < 0x58)
                goto LABEL_639;
              if ((unint64_t)(v111 - &v119[v114]) < 0x20)
                goto LABEL_639;
              v122 = (v121 >> 3) + 1;
              v123 = &v119[8 * v115 - 16];
              v124 = v111 - 16;
              v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 32;
                v125 -= 4;
              }
              while (v125);
              v120 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
              v111 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
              if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_639:
                do
                {
                  v127 = *((_QWORD *)v111 - 1);
                  v111 -= 8;
                  *--v120 = v127;
                }
                while (v111 != v113);
                v113 = (char *)__p[0];
              }
            }
            __p[0] = v120;
            __p[1] = v112;
            *(_QWORD *)&v491 = &v119[8 * v118];
            if (v113)
              operator delete(v113);
          }
          else
          {
            *(_QWORD *)__p[1] = *((_QWORD *)v110 + 1);
            v112 = v111 + 8;
          }
          __p[1] = v112;
          v128 = *(void (****)(_QWORD))v110;
          if (*(_QWORD *)v110)
          {
            v129 = v480[17];
            if (*(_QWORD *)(v129 + 16))
            {
              (**v128)(*(_QWORD *)v110);
              *v128 = *(void (***)(_QWORD))(v129 + 40);
              *(_QWORD *)(v129 + 40) = v128;
            }
          }
          v110 += 16;
        }
        while (v110 != v20);
        v20 = *v481;
      }
      v5 = v480;
      v21 = v480[18];
      v22 = (uint64_t *)v480[19];
      v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      v480[30] = v20;
      if (v22 == (uint64_t *)v21)
        v24 = 0;
      else
        v24 = v23;
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v21, v22, v24, 1);
      v19 += 24;
      v17 = v483 + 8;
      v485 = (md::VKMRenderResourcesStore *)((char *)v485 + 24);
      if (v483 + 8 == v478)
        goto LABEL_219;
    }
    v107 = v104 & 0xFFFFFFFFFFFFFFF0;
    v108 = (char *)v102 - &v100[v103 + (v104 & 0xFFFFFFFFFFFFFFF0)] - 16;
    if (v108 >= 0x270)
    {
      v130 = v107 + (v108 & 0xFFFFFFFFFFFFFFF0);
      v131 = v103 + (v130 | 8);
      v132 = v103 + (v107 | 8);
      v133 = v130 + v103 + 16;
      v134 = &v100[v107 + v103];
      v135 = &v134[v108 & 0xFFFFFFFFFFFFFFF0];
      v136 = (unint64_t)(v135 + 8);
      v137 = (unint64_t)(v134 + 8);
      v138 = (unint64_t)(v135 + 16);
      v140 = v105 < (double *)v135 + 1 && (unint64_t)v106 < v131;
      v142 = (unint64_t)v105 < v138 && v137 < v131;
      v144 = v132 < v136 && (unint64_t)v106 < v133;
      v146 = v132 < v138 && v137 < v133;
      if (v132 >= v131 || (unint64_t)v105 >= v133)
      {
        if (v140)
        {
          v109 = v105;
        }
        else if (v142)
        {
          v109 = v105;
        }
        else if (v144)
        {
          v109 = v105;
        }
        else if (v146)
        {
          v109 = v105;
        }
        else
        {
          v148 = (v108 >> 4) + 1;
          v149 = 2 * (v148 & 0x1FFFFFFFFFFFFFFCLL);
          v109 = &v105[v149];
          v150 = v148 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v151 = &v105[2 * v101];
            v528 = vld2q_f64(v151);
            v151 += 4;
            v530 = vld2q_f64(v151);
            v152 = v105 + 8;
            vst2q_f64(v105, v528);
            v153 = v105 + 4;
            vst2q_f64(v153, v530);
            v105 = v152;
            v150 -= 4;
          }
          while (v150);
          if (v148 == (v148 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_147;
          v106 = (double *)((char *)v106 + v149 * 8);
        }
      }
      else
      {
        v109 = v105;
      }
    }
    else
    {
      v109 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *v109 = *v106;
      v109[1] = v106[1];
      v109 += 2;
      v106 += 2;
    }
    while (v106 != v102);
LABEL_147:
    v105 = v109;
    goto LABEL_148;
  }
LABEL_219:
  v154 = *v476;
  v155 = v476[1];
  if (*v476 == v155)
  {
    v156 = v475;
  }
  else
  {
    v156 = v475;
    while (*v154 != 0x41D4E9297E100630)
    {
      v154 += 5;
      if (v154 == v155)
        goto LABEL_232;
    }
  }
  if (v154 != v155)
  {
    v157 = (std::__shared_weak_count *)v154[4];
    if (v157)
    {
      v158 = (unint64_t *)&v157->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
      do
        v160 = __ldaxr(v158);
      while (__stlxr(v160 - 1, v158));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
  }
LABEL_232:
  v161 = *v476;
  v162 = v476[1];
  if (*v476 != v162)
  {
    while (*v161 != 0x4EDAD23DFB014132)
    {
      v161 += 5;
      if (v161 == v162)
        goto LABEL_243;
    }
  }
  if (v161 != v162)
  {
    v163 = (std::__shared_weak_count *)v161[4];
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
      do
        v166 = __ldaxr(v164);
      while (__stlxr(v166 - 1, v164));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
  }
LABEL_243:
  v167 = *v476;
  v168 = v476[1];
  if (*v476 != v168)
  {
    while (*v167 != 0x348A0B0E758C07C2)
    {
      v167 += 5;
      if (v167 == v168)
        goto LABEL_254;
    }
  }
  if (v167 != v168)
  {
    v169 = (std::__shared_weak_count *)v167[4];
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      do
        v172 = __ldaxr(v170);
      while (__stlxr(v172 - 1, v170));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
LABEL_254:
  v173 = __p[0];
  if (__p[1] != __p[0])
  {
    v174 = 0;
    v175 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v476, v156, v173[v174++]);
      v173 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v174);
    while (v175 != __p[1])
    {
      v176 = *v175++;
      gdc::Registry::destroy(v156, v176);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v156);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v156);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  md::LayoutContext::frameState(v472);
  v474 = *(unsigned __int8 *)(v177 + 128);
  v178 = (uint64_t *)v5[15];
  v469 = *((_QWORD *)v472 + 2);
  v179 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>((uint64_t)v178);
  v180 = v179[7];
  v468 = v179[8];
  if (v180 != v468)
  {
    v181 = (_QWORD *)v179[10];
    v477 = v178 + 15;
    v479 = v5 + 21;
    while (1)
    {
      v182 = (void *)v5[26];
      v5[27] = v182;
      v471 = v181;
      v183 = v181[2];
      if (v183 > (uint64_t)(v5[28] - (_QWORD)v182) >> 4)
      {
        if (v183 >> 60)
          goto LABEL_636;
        v184 = 16 * v183;
        v185 = (char *)operator new(16 * v183);
        v5[26] = v185;
        v5[27] = v185;
        v5[28] = &v185[v184];
        if (v182)
          operator delete(v182);
      }
      v186 = *(_QWORD **)v469;
      v187 = *(_QWORD **)(v469 + 8);
      v470 = v180;
      if (*(_QWORD **)v469 != v187)
      {
        while (*v186 != 0x41D4E9297E100630)
        {
          v186 += 5;
          if (v186 == v187)
            goto LABEL_280;
        }
      }
      if (v186 == v187)
      {
LABEL_280:
        v486 = 0;
      }
      else
      {
        v188 = (std::__shared_weak_count *)v186[4];
        v486 = (md::VKMRenderResourcesStore *)v186[3];
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
          do
            v191 = __ldaxr(v189);
          while (__stlxr(v191 - 1, v189));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      v192 = (_QWORD *)*v471;
      if ((_QWORD *)*v471 != v471 + 1)
        break;
LABEL_264:
      v181 = v471 + 3;
      v180 = v470 + 8;
      if (v470 + 8 == v468)
        goto LABEL_551;
    }
    while (1)
    {
      v193 = v192[4];
      v194 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v479, (unsigned __int8 *)(v193 + 16));
      if (!v194)
        goto LABEL_313;
      v195 = v194;
      v197 = (_QWORD *)v5[18];
      v196 = (_QWORD *)v5[19];
      if (v197 == v196)
      {
        v198 = v5[18];
      }
      else
      {
        v198 = v5[18];
        while (*(uint64_t **)v198 != v194[16]
             || *(unsigned __int16 *)(v198 + 8) != *((unsigned __int16 *)v194 + 68)
             || *(unsigned __int16 *)(v198 + 10) != *((unsigned __int16 *)v194 + 69)
             || *(_DWORD *)(v198 + 12) != *((_DWORD *)v194 + 35))
        {
          v198 += 16;
          if ((_QWORD *)v198 == v196)
          {
            v198 = v5[19];
            break;
          }
        }
      }
      v199 = (_QWORD *)(v198 + 16);
      if ((_QWORD *)(v198 + 16) != v196)
      {
        v200 = (unint64_t)v196 - v198 - 32;
        if (v200 >= 0x30)
        {
          v201 = (v198 - (uint64_t)v197) >> 4;
          v202 = (v200 >> 4) + 1;
          v203 = 16 * (v202 & 0x1FFFFFFFFFFFFFFCLL);
          v198 += v203;
          v204 = (double *)&v197[2 * v201 + 4];
          v205 = v202 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v206 = v204 - 2;
            v529 = vld2q_f64(v206);
            v207 = v204 + 2;
            v531 = vld2q_f64(v207);
            v208 = v204 - 4;
            vst2q_f64(v208, v529);
            vst2q_f64(v204, v531);
            v204 += 8;
            v205 -= 4;
          }
          while (v205);
          if (v202 == (v202 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_302;
          v199 = (_QWORD *)((char *)v199 + v203);
        }
        do
        {
          *(_QWORD *)v198 = *v199;
          *(_QWORD *)(v198 + 8) = v199[1];
          v198 += 16;
          v199 += 2;
        }
        while (v199 != v196);
      }
LABEL_302:
      v5[19] = v198;
      v209 = v194[16];
      if (v209)
      {
        v210 = v5[17];
        if (*(_QWORD *)(v210 + 16))
        {
          (*(void (**)(uint64_t *))*v209)(v194[16]);
          *v209 = *(_QWORD *)(v210 + 40);
          *(_QWORD *)(v210 + 40) = v209;
        }
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v479, v195);
      v211 = __p[0];
      if (__p[0])
      {
        if ((_BYTE)v491)
        {
          if (*((_BYTE *)__p[0] + 112))
            *((_BYTE *)__p[0] + 112) = 0;
          v212 = (void *)v211[4];
          if (v212 != (void *)v211[6])
            free(v212);
        }
        operator delete(v211);
      }
      v193 = v192[4];
LABEL_313:
      v213 = v192[5];
      *(_QWORD *)&v527 = v193;
      *((_QWORD *)&v527 + 1) = v213;
      if (v213)
      {
        v214 = (unint64_t *)(v213 + 8);
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
      }
      LOWORD(v526[0]) = *(_WORD *)(v193 + 168);
      *(_QWORD *)((char *)v526 + 4) = *(_QWORD *)(v193 + 172);
      v216 = *(double *)(v193 + 600);
      v217 = *(double *)(v193 + 608);
      md::GeometryContext::transformConstantData((double *)&v524, v473, (unsigned __int8 *)v526, v474, v216, v217);
      v218 = v5[17];
      v219 = *((_BYTE *)v192 + 48);
      v220 = *(_QWORD **)(v218 + 40);
      if (!v220)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab((uint64_t **)v5[17]);
        v220 = *(_QWORD **)(v218 + 40);
      }
      *(_QWORD *)(v218 + 40) = *v220;
      v484 = md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v220, (uint64_t *)&v527, v219, (v474 - 1) < 3u, &v524);
      v221 = gdc::Registry::create((gdc::Registry *)v178);
      v222 = v221;
      v224 = (uint64_t *)v5[27];
      v223 = v5[28];
      if ((unint64_t)v224 >= v223)
      {
        v226 = (uint64_t *)v5[26];
        v227 = ((char *)v224 - (char *)v226) >> 4;
        v228 = v227 + 1;
        if ((unint64_t)(v227 + 1) >> 60)
          goto LABEL_632;
        v229 = v223 - (_QWORD)v226;
        if (v229 >> 3 > v228)
          v228 = v229 >> 3;
        if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF0)
          v230 = 0xFFFFFFFFFFFFFFFLL;
        else
          v230 = v228;
        if (v230)
        {
          if (v230 >> 60)
            goto LABEL_633;
          v231 = (char *)operator new(16 * v230);
        }
        else
        {
          v231 = 0;
        }
        v232 = (uint64_t *)&v231[16 * v227];
        *v232 = v484;
        v232[1] = v222;
        v233 = v232;
        if (v224 != v226)
        {
          do
          {
            *((_OWORD *)v233 - 1) = *((_OWORD *)v224 - 1);
            v233 -= 2;
            v224 -= 2;
          }
          while (v224 != v226);
          v224 = (uint64_t *)v5[26];
        }
        v225 = v232 + 2;
        v5[26] = v233;
        v5[27] = v232 + 2;
        v5[28] = &v231[16 * v230];
        if (v224)
          operator delete(v224);
      }
      else
      {
        *v224 = v484;
        v224[1] = v221;
        v225 = v224 + 2;
      }
      v5[27] = v225;
      v235 = (uint64_t *)v5[19];
      v234 = v5[20];
      if ((unint64_t)v235 >= v234)
      {
        v237 = (uint64_t *)v5[18];
        v238 = ((char *)v235 - (char *)v237) >> 4;
        v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60)
LABEL_632:
          abort();
        v240 = v234 - (_QWORD)v237;
        if (v240 >> 3 > v239)
          v239 = v240 >> 3;
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0)
          v241 = 0xFFFFFFFFFFFFFFFLL;
        else
          v241 = v239;
        if (v241)
        {
          if (v241 >> 60)
            goto LABEL_633;
          v242 = (char *)operator new(16 * v241);
        }
        else
        {
          v242 = 0;
        }
        v243 = (uint64_t *)&v242[16 * v238];
        *v243 = v484;
        v243[1] = v222;
        v244 = v243;
        if (v235 != v237)
        {
          do
          {
            *((_OWORD *)v244 - 1) = *((_OWORD *)v235 - 1);
            v244 -= 2;
            v235 -= 2;
          }
          while (v235 != v237);
          v235 = (uint64_t *)v5[18];
        }
        v236 = v243 + 2;
        v5[18] = v244;
        v5[19] = v243 + 2;
        v5[20] = &v242[16 * v241];
        if (v235)
          operator delete(v235);
      }
      else
      {
        *v235 = v484;
        v235[1] = v222;
        v236 = v235 + 2;
      }
      v5[19] = v236;
      if ((_QWORD)v527)
        v245 = (uint64_t (***)(_QWORD))(v527 + 632);
      else
        v245 = 0;
      v482 = (std::__shared_weak_count *)*((_QWORD *)&v527 + 1);
      if (*((_QWORD *)&v527 + 1))
      {
        v246 = (unint64_t *)(*((_QWORD *)&v527 + 1) + 8);
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
      }
      v248 = (**v245)(v245);
      __p[0] = (void *)md::VKMRenderResourcesStore::createRenderableRegistryHandle(v486, v248);
      v249 = (uint64_t *)gdc::Registry::storage<md::ls::RegisterHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v249, v222, __p);
      *(_QWORD *)&v488 = 0xE1A525F398BD98B7;
      v250 = (int8x8_t)v178[16];
      if (v250)
      {
        v251 = (uint8x8_t)vcnt_s8(v250);
        v251.i16[0] = vaddlv_u8(v251);
        if (v251.u32[0] > 1uLL)
        {
          v252 = 0xE1A525F398BD98B7;
          if (*(_QWORD *)&v250 <= 0xE1A525F398BD98B7)
            v252 = 0xE1A525F398BD98B7 % *(_QWORD *)&v250;
        }
        else
        {
          v252 = (*(_QWORD *)&v250 - 1) & 0xE1A525F398BD98B7;
        }
        v253 = *(_QWORD **)(*v477 + 8 * v252);
        if (v253)
        {
          v254 = (_QWORD *)*v253;
          if (v254)
          {
            if (v251.u32[0] < 2uLL)
            {
              v255 = *(_QWORD *)&v250 - 1;
              while (1)
              {
                v257 = v254[1];
                if (v257 == 0xE1A525F398BD98B7)
                {
                  if (v254[2] == 0xE1A525F398BD98B7)
                    goto LABEL_403;
                }
                else if ((v257 & v255) != v252)
                {
                  goto LABEL_378;
                }
                v254 = (_QWORD *)*v254;
                if (!v254)
                  goto LABEL_378;
              }
            }
            do
            {
              v256 = v254[1];
              if (v256 == 0xE1A525F398BD98B7)
              {
                if (v254[2] == 0xE1A525F398BD98B7)
                {
LABEL_403:
                  v258 = v254[3];
                  goto LABEL_381;
                }
              }
              else
              {
                if (v256 >= *(_QWORD *)&v250)
                  v256 %= *(_QWORD *)&v250;
                if (v256 != v252)
                  break;
              }
              v254 = (_QWORD *)*v254;
            }
            while (v254);
          }
        }
      }
LABEL_378:
      v258 = operator new();
      *(_QWORD *)(v258 + 16) = "md::ls::MapDataTypeT<md::MapDataType::DaVinciBuildings>]";
      *(_QWORD *)(v258 + 24) = 55;
      *(_OWORD *)(v258 + 32) = 0u;
      *(_OWORD *)(v258 + 48) = 0u;
      *(_OWORD *)(v258 + 64) = 0u;
      *(_OWORD *)(v258 + 80) = 0u;
      *(_OWORD *)(v258 + 96) = 0u;
      *(_OWORD *)(v258 + 112) = 0u;
      *(_OWORD *)(v258 + 128) = 0u;
      *(_DWORD *)(v258 + 144) = 1065353216;
      *(_OWORD *)(v258 + 152) = 0u;
      *(_OWORD *)(v258 + 168) = 0u;
      *(_QWORD *)(v258 + 184) = 0;
      *(_DWORD *)(v258 + 192) = 1065353216;
      *(_OWORD *)(v258 + 200) = 0u;
      *(_OWORD *)(v258 + 216) = 0u;
      *(_QWORD *)(v258 + 232) = 0;
      *(_DWORD *)(v258 + 240) = 1065353216;
      *(_QWORD *)v258 = &off_1E42712F8;
      *(_QWORD *)(v258 + 8) = 0xE1A525F398BD98B7;
      *(_QWORD *)(v258 + 248) = v178;
      v259 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v477, 0xE1A525F398BD98B7, &v488);
      v260 = v259[3];
      v259[3] = v258;
      if (v260)
        (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
      __p[0] = (void *)0xE1A525F398BD98B7;
      __p[1] = "md::ls::MapDataTypeT<md::MapDataType::DaVinciBuildings>]";
      *(_QWORD *)&v491 = 55;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v178, 0xE1A525F398BD98B7, (uint64_t)__p, (uint64_t *)(v258 + 104));
LABEL_381:
      v511 = v222;
      v261 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v258 + 32), (uint64_t)&v511);
      if ((v262 & 1) != 0)
      {
        v268 = *(_BYTE **)(v258 + 88);
        v267 = *(_QWORD *)(v258 + 96);
        if ((unint64_t)v268 < v267)
        {
          *v268 = 0;
          v269 = (uint64_t)(v268 + 1);
LABEL_418:
          *(_QWORD *)(v258 + 88) = v269;
          v264 = *(_QWORD *)(v258 + 248);
          goto LABEL_419;
        }
        v270 = *(_BYTE **)(v258 + 80);
        v271 = v268 - v270;
        v272 = v268 - v270 + 1;
        if (v272 < 0)
          abort();
        v273 = v267 - (_QWORD)v270;
        if (2 * v273 > v272)
          v272 = 2 * v273;
        if (v273 >= 0x3FFFFFFFFFFFFFFFLL)
          v274 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v274 = v272;
        if (v274)
          v275 = (char *)operator new(v274);
        else
          v275 = 0;
        v276 = &v275[v271];
        v275[v271] = 0;
        v269 = (uint64_t)&v275[v271 + 1];
        if (v268 == v270)
          goto LABEL_416;
        if (v271 >= 8 && (unint64_t)(v270 - v275) >= 0x20)
        {
          if (v271 < 0x20)
          {
            v277 = 0;
LABEL_408:
            v282 = v277 - (v271 & 0xFFFFFFFFFFFFFFF8);
            v283 = &v268[-v277];
            v284 = &v275[&v268[-v277] - v270 - 8];
            v285 = (uint64_t *)(v283 - 8);
            do
            {
              v286 = *v285--;
              *(_QWORD *)v284 = v286;
              v284 -= 8;
              v282 += 8;
            }
            while (v282);
            if (v271 != (v271 & 0xFFFFFFFFFFFFFFF8))
            {
              v276 -= v271 & 0xFFFFFFFFFFFFFFF8;
              v268 -= v271 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_413;
            }
LABEL_415:
            v276 = v275;
LABEL_416:
            *(_QWORD *)(v258 + 80) = v276;
            *(_QWORD *)(v258 + 88) = v269;
            *(_QWORD *)(v258 + 96) = &v275[v274];
            if (v270)
              operator delete(v270);
            goto LABEL_418;
          }
          v277 = v271 & 0xFFFFFFFFFFFFFFE0;
          v278 = &v275[v271 - 16];
          v279 = (__int128 *)(v268 - 16);
          v280 = v271 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v281 = *v279;
            *((_OWORD *)v278 - 1) = *(v279 - 1);
            *(_OWORD *)v278 = v281;
            v278 -= 32;
            v279 -= 2;
            v280 -= 32;
          }
          while (v280);
          if (v271 == v277)
            goto LABEL_415;
          if ((v271 & 0x18) != 0)
            goto LABEL_408;
          v276 -= v277;
          v268 -= v277;
        }
LABEL_413:
        v287 = v276 - 1;
        do
        {
          v288 = *--v268;
          *v287-- = v288;
        }
        while (v268 != v270);
        goto LABEL_415;
      }
      v263 = (_BYTE *)(*(_QWORD *)(v258 + 80) + (((uint64_t)v261 - *(_QWORD *)(v258 + 56)) >> 3));
      *v263 = 0;
      v264 = *(_QWORD *)(v258 + 248);
      if (v263 != *(_BYTE **)(v258 + 88))
      {
        v265 = *(_QWORD **)(v258 + 128);
        if (v265)
        {
          while (1)
          {
            __p[0] = &v511;
            __p[1] = (void *)1;
            *(_QWORD *)&v488 = v264;
            v266 = v265[6];
            if (!v266)
              goto LABEL_631;
            (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v266 + 48))(v266, &v488, __p);
            v265 = (_QWORD *)*v265;
            if (!v265)
              goto LABEL_422;
          }
        }
        goto LABEL_422;
      }
LABEL_419:
      v289 = *(_QWORD **)(v258 + 176);
      if (v289)
      {
        while (1)
        {
          __p[0] = &v511;
          __p[1] = (void *)1;
          *(_QWORD *)&v488 = v264;
          v290 = v289[6];
          if (!v290)
            break;
          (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v290 + 48))(v290, &v488, __p);
          v289 = (_QWORD *)*v289;
          if (!v289)
            goto LABEL_422;
        }
LABEL_631:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_636:
        abort();
      }
LABEL_422:
      LOWORD(__p[0]) = 54;
      v291 = (uint64_t *)gdc::Registry::storage<md::ls::MapDataTypeV>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(v291, v222, __p);
      __p[0] = (void *)((uint64_t)(v5[19] - v5[18]) >> 4);
      v292 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v292, v222, __p);
      LODWORD(__p[0]) = 0;
      v491 = 0uLL;
      __p[1] = 0;
      v293 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablesCount>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(v293, v222, (uint64_t)__p);
      if (__p[1])
        operator delete(__p[1]);
      v294 = (uint64_t *)gdc::Registry::storage<md::ls::WillEnterView>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v294, v222);
      v295 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)54>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v295, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(v486, (md::BaseMapTileDataRenderable *)v484);
      v296 = (uint64_t *)gdc::Registry::storage<md::ls::BaseMapTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v296, v222, __p);
      v297 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v297, v222);
      LOBYTE(__p[0]) = *(_BYTE *)(v484 + 24);
      v298 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v298, v222, __p);
      v523 = 0;
      v522 = 0;
      v299 = DWORD1(v526[0]);
      v300 = DWORD2(v526[0]);
      v301 = vcvtmd_s64_f64(v216 * 100.0);
      v302 = BYTE1(v526[0]);
      v303 = vcvtpd_s64_f64(v217 * 100.0);
      v515 = *(gdc::Registry **)((char *)v526 + 4);
      v516 = BYTE1(v526[0]);
      v517 = 0;
      v518 = 0;
      v519 = v301;
      v520 = v303;
      v521 = 0;
      v304 = (void *)md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(v486, (int *)&v515);
      if (v305)
      {
        v306 = v304;
        __p[0] = v304;
        v307 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v307, v222, __p);
        __p[0] = v306;
        v308 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)v486 + 3272, (unint64_t)v306, __p);
        ++v308[4];
      }
      else
      {
        v309 = v524;
        v310 = v525;
        v513 = v524;
        v514 = v525;
        if (v525)
        {
          v311 = (unint64_t *)&v525->__shared_owners_;
          do
            v312 = __ldxr(v311);
          while (__stxr(v312 + 1, v311));
        }
        v313 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>((uint64_t)v486, v309, v310);
        if (v310)
        {
          v314 = (unint64_t *)&v310->__shared_owners_;
          do
            v315 = __ldaxr(v314);
          while (__stlxr(v315 - 1, v314));
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
            std::__shared_weak_count::__release_weak(v310);
          }
        }
        __p[0] = (void *)__PAIR64__(v300, v299);
        LOBYTE(__p[1]) = v302;
        *(_WORD *)((char *)&__p[1] + 1) = v522;
        BYTE3(__p[1]) = v523;
        HIDWORD(__p[1]) = v301;
        *(_QWORD *)&v491 = v303;
        *((_QWORD *)&v491 + 1) = v313;
        std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>((float *)v486 + 2656, (int *)__p, (uint64_t)__p);
        __p[0] = v313;
        v316 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v316, v222, __p);
      }
      v5 = v480;
      __p[0] = (void *)md::VKMRenderResourcesStore::createAssociationtemHandle(v486);
      v317 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v317, v222, __p);
      v318 = *(_QWORD *)(v484 + 384);
      v319 = *(_QWORD *)(v318 + 1304);
      v320 = *(void **)(v318 + 1168);
      LODWORD(__p[1]) = *(_DWORD *)(v318 + 1176);
      __p[0] = v320;
      v321 = (uint64_t *)gdc::Registry::storage<md::ls::TileUnitsPerMeter>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::emplace(v321, v222, (uint64_t *)__p);
      HasTileSharedStyleCamera = (uint64_t *)gdc::Registry::storage<md::ls::HasTileSharedStyleCameraLighting>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(HasTileSharedStyleCamera, v222);
      v323 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsShadows>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v323, v222);
      v324 = *(_QWORD *)(v484 + 400);
      v325 = *(std::__shared_weak_count **)(v484 + 408);
      v511 = v324;
      v512 = v325;
      if (v325)
      {
        v326 = (unint64_t *)&v325->__shared_owners_;
        do
          v327 = __ldxr(v326);
        while (__stxr(v327 + 1, v326));
        v510 = v325;
        do
          v328 = __ldxr(v326);
        while (__stxr(v328 + 1, v326));
      }
      else
      {
        v510 = 0;
      }
      v509 = v324;
      v329 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v486, v324, v325);
      if (v325)
      {
        v330 = (unint64_t *)&v325->__shared_owners_;
        do
          v331 = __ldaxr(v330);
        while (__stlxr(v331 - 1, v330));
        if (!v331)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
        }
      }
      __p[0] = v329;
      v332 = (uint64_t *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v332, v222, __p);
      v333 = *(_QWORD *)(v484 + 416);
      v334 = *(std::__shared_weak_count **)(v484 + 424);
      v507 = v333;
      v508 = v334;
      if (v334)
      {
        v335 = (unint64_t *)&v334->__shared_owners_;
        do
          v336 = __ldxr(v335);
        while (__stxr(v336 + 1, v335));
        if (!v333)
          goto LABEL_462;
        v505 = v333;
        v506 = v334;
        do
          v337 = __ldxr(v335);
        while (__stxr(v337 + 1, v335));
      }
      else
      {
        if (!v333)
          goto LABEL_462;
        v334 = 0;
        v505 = v333;
        v506 = 0;
      }
      v338 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v486, v333, v334);
      if (v334)
      {
        v339 = (unint64_t *)&v334->__shared_owners_;
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 - 1, v339));
        if (!v340)
        {
          ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
          std::__shared_weak_count::__release_weak(v334);
        }
      }
      __p[0] = v338;
      v341 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v341, v222, __p);
LABEL_462:
      v342 = *(_QWORD *)(v484 + 432);
      v343 = *(std::__shared_weak_count **)(v484 + 440);
      v503 = v342;
      v504 = v343;
      if (v343)
      {
        v344 = (unint64_t *)&v343->__shared_owners_;
        do
          v345 = __ldxr(v344);
        while (__stxr(v345 + 1, v344));
        if (!v342)
          goto LABEL_477;
        v501 = v342;
        v502 = v343;
        do
          v346 = __ldxr(v344);
        while (__stxr(v346 + 1, v344));
      }
      else
      {
        if (!v342)
          goto LABEL_477;
        v343 = 0;
        v501 = v342;
        v502 = 0;
      }
      v347 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::LinearDepth,md::VoidKeyType>((uint64_t)v486, v342, v343);
      if (v343)
      {
        v348 = (unint64_t *)&v343->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
          std::__shared_weak_count::__release_weak(v343);
        }
      }
      __p[0] = v347;
      v350 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v350, v222, __p);
LABEL_477:
      v351 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsFragmentClip>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v351, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Clipping,md::VoidKeyType>((uint64_t)v486);
      v352 = (uint64_t *)gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v352, v222, __p);
      v353 = *(_QWORD *)(v484 + 448);
      v354 = *(std::__shared_weak_count **)(v484 + 456);
      v499 = v353;
      v500 = v354;
      if (v354)
      {
        v355 = (unint64_t *)&v354->__shared_owners_;
        do
          v356 = __ldxr(v355);
        while (__stxr(v356 + 1, v355));
        if (!v353)
          goto LABEL_492;
        v497 = v353;
        v498 = v354;
        do
          v357 = __ldxr(v355);
        while (__stxr(v357 + 1, v355));
      }
      else
      {
        if (!v353)
          goto LABEL_492;
        v354 = 0;
        v497 = v353;
        v498 = 0;
      }
      v358 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::StyleCameraLighting,md::VoidKeyType>((uint64_t)v486, v353, v354);
      if (v354)
      {
        v359 = (unint64_t *)&v354->__shared_owners_;
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
          std::__shared_weak_count::__release_weak(v354);
        }
      }
      __p[0] = v358;
      v361 = (uint64_t *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v361, v222, __p);
LABEL_492:
      v362 = *(_QWORD *)(v484 + 216);
      v363 = *(std::__shared_weak_count **)(v484 + 224);
      v495 = v362;
      v496 = v363;
      if (v363)
      {
        v364 = (unint64_t *)&v363->__shared_owners_;
        do
          v365 = __ldxr(v364);
        while (__stxr(v365 + 1, v364));
      }
      v366 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::View,md::VoidKeyType>((uint64_t)v486, v362, v363);
      if (v363)
      {
        v367 = (unint64_t *)&v363->__shared_owners_;
        do
          v368 = __ldaxr(v367);
        while (__stlxr(v368 - 1, v367));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
          std::__shared_weak_count::__release_weak(v363);
        }
      }
      __p[0] = v366;
      v369 = (uint64_t *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v369, v222, __p);
      BYTE8(v491) = 1;
      v370 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::emplace(v370, v222, (uint64_t)__p);
      v371 = *(double *)(v484 + 72) - *(double *)(v484 + 56);
      *(float *)__p = v371;
      v372 = (uint64_t *)gdc::Registry::storage<md::ls::BoundsWidth>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v372, v222, __p);
      v373 = *(_OWORD *)(v484 + 72);
      *(_OWORD *)__p = *(_OWORD *)(v484 + 56);
      v491 = v373;
      v374 = (uint64_t *)gdc::Registry::storage<md::ls::TileBounds>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(v374, v222, (uint64_t)__p);
      __p[0] = (void *)md::VKMRenderResourcesStore::createSharedTileMatrix((uint64_t)v486, (__int128 *)(v484 + 88));
      v375 = (uint64_t *)gdc::Registry::storage<md::ls::TileMatrix>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v375, v222, __p);
      v492 = 0;
      v493 = 0;
      v494 = 0;
      *(_QWORD *)&v488 = md::VKMRenderResourcesStore::createRenderableData((uint64_t)v486, __p);
      v376 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v376, v222, &v488);
      LOBYTE(v488) = 0;
      v377 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v377, v222, &v488);
      if (v319)
      {
        *(_QWORD *)&v488 = v319;
        v378 = (uint64_t *)gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v378, v222, &v488);
      }
      v379 = *(_BYTE *)(v484 + 48);
      v488 = v527;
      if (*((_QWORD *)&v527 + 1))
      {
        v380 = (unint64_t *)(*((_QWORD *)&v527 + 1) + 8);
        do
          v381 = __ldxr(v380);
        while (__stxr(v381 + 1, v380));
      }
      v489 = v379;
      v382 = (uint64_t *)gdc::Registry::storage<md::ls::LayerDataReference>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::emplace(v382, v222, &v488);
      v383 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
      if (*((_QWORD *)&v488 + 1))
      {
        v384 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
        do
          v385 = __ldaxr(v384);
        while (__stlxr(v385 - 1, v384));
        if (!v385)
        {
          ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
          std::__shared_weak_count::__release_weak(v383);
        }
      }
      v386 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v386, v222);
      *(_QWORD *)&v488 = v484;
      v387 = (uint64_t *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v387, v222, &v488);
      v388 = v500;
      if (!v500)
        goto LABEL_514;
      v389 = (unint64_t *)&v500->__shared_owners_;
      do
        v390 = __ldaxr(v389);
      while (__stlxr(v390 - 1, v389));
      if (!v390)
      {
        ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
        std::__shared_weak_count::__release_weak(v388);
        v391 = v504;
        if (!v504)
          goto LABEL_520;
      }
      else
      {
LABEL_514:
        v391 = v504;
        if (!v504)
          goto LABEL_520;
      }
      v392 = (unint64_t *)&v391->__shared_owners_;
      do
        v393 = __ldaxr(v392);
      while (__stlxr(v393 - 1, v392));
      if (!v393)
      {
        ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
        std::__shared_weak_count::__release_weak(v391);
      }
LABEL_520:
      v394 = v508;
      if (!v508)
        goto LABEL_524;
      v395 = (unint64_t *)&v508->__shared_owners_;
      do
        v396 = __ldaxr(v395);
      while (__stlxr(v396 - 1, v395));
      if (!v396)
      {
        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
        std::__shared_weak_count::__release_weak(v394);
        v397 = v512;
        if (!v512)
          goto LABEL_530;
      }
      else
      {
LABEL_524:
        v397 = v512;
        if (!v512)
          goto LABEL_530;
      }
      v398 = (unint64_t *)&v397->__shared_owners_;
      do
        v399 = __ldaxr(v398);
      while (__stlxr(v399 - 1, v398));
      if (!v399)
      {
        ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
        std::__shared_weak_count::__release_weak(v397);
      }
      if (!v482)
        goto LABEL_534;
LABEL_530:
      v400 = (unint64_t *)&v482->__shared_owners_;
      do
        v401 = __ldaxr(v400);
      while (__stlxr(v401 - 1, v400));
      if (!v401)
      {
        ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
        std::__shared_weak_count::__release_weak(v482);
        v402 = v525;
        if (!v525)
          goto LABEL_540;
      }
      else
      {
LABEL_534:
        v402 = v525;
        if (!v525)
          goto LABEL_540;
      }
      v403 = (unint64_t *)&v402->__shared_owners_;
      do
        v404 = __ldaxr(v403);
      while (__stlxr(v404 - 1, v403));
      if (!v404)
      {
        ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
        std::__shared_weak_count::__release_weak(v402);
      }
LABEL_540:
      v405 = (std::__shared_weak_count *)*((_QWORD *)&v527 + 1);
      if (!*((_QWORD *)&v527 + 1))
        goto LABEL_544;
      v406 = (unint64_t *)(*((_QWORD *)&v527 + 1) + 8);
      do
        v407 = __ldaxr(v406);
      while (__stlxr(v407 - 1, v406));
      if (!v407)
      {
        ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
        std::__shared_weak_count::__release_weak(v405);
        v408 = (_QWORD *)v192[1];
        if (!v408)
        {
          do
          {
LABEL_548:
            v409 = (_QWORD *)v192[2];
            v410 = *v409 == (_QWORD)v192;
            v192 = v409;
          }
          while (!v410);
          goto LABEL_283;
        }
      }
      else
      {
LABEL_544:
        v408 = (_QWORD *)v192[1];
        if (!v408)
          goto LABEL_548;
      }
      do
      {
        v409 = v408;
        v408 = (_QWORD *)*v408;
      }
      while (v408);
LABEL_283:
      v192 = v409;
      if (v409 == v471 + 1)
        goto LABEL_264;
    }
  }
LABEL_551:
  v515 = (gdc::Registry *)v5[15];
  v411 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>((uint64_t)v515);
  v412 = (md::VKMRenderResourcesStore *)v411[7];
  v487 = (md::VKMRenderResourcesStore *)v411[8];
  if (v412 != v487)
  {
    v413 = v411[10];
    v414 = v5 + 21;
    v415 = (uint64_t ***)(v413 + 8);
    do
    {
      v422 = (char *)v5[18];
      v416 = (char *)v5[19];
      if (v422 == v416)
      {
        v416 = (char *)v5[18];
      }
      else
      {
        while (1)
        {
          v423 = *(_QWORD *)(*(_QWORD *)v422 + 384);
          v424 = *(std::__shared_weak_count **)(*(_QWORD *)v422 + 392);
          if (v424)
          {
            v425 = (unint64_t *)&v424->__shared_owners_;
            do
              v426 = __ldxr(v425);
            while (__stxr(v426 + 1, v425));
            v427 = *(unsigned __int8 *)(*(_QWORD *)v422 + 48);
            do
              v428 = __ldxr(v425);
            while (__stxr(v428 + 1, v425));
            for (n = *(uint64_t ***)(v413 + 8); n; n = (uint64_t **)*n)
            {
LABEL_568:
              v431 = *((unsigned __int8 *)n + 48);
              v432 = *((char *)n + 48) > (char)v427;
              v433 = (unint64_t)n[4];
              if (v427 == v431)
                v432 = v423 < v433;
              if (!v432)
              {
                v434 = v433 < v423;
                if (v427 == v431)
                  v435 = v434;
                else
                  v435 = (char)v431 < (char)v427;
                if (!v435)
                {
                  v430 = 1;
                  if (v424)
                    goto LABEL_576;
                  goto LABEL_583;
                }
                ++n;
              }
            }
          }
          else
          {
            v427 = *(unsigned __int8 *)(*(_QWORD *)v422 + 48);
            n = *(uint64_t ***)(v413 + 8);
            if (n)
              goto LABEL_568;
          }
          v430 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v414, (unsigned __int8 *)(v423 + 16)) != 0;
          if (v424)
          {
LABEL_576:
            v436 = (unint64_t *)&v424->__shared_owners_;
            do
              v437 = __ldaxr(v436);
            while (__stlxr(v437 - 1, v436));
            if (!v437)
            {
              ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
              std::__shared_weak_count::__release_weak(v424);
            }
            do
              v438 = __ldaxr(v436);
            while (__stlxr(v438 - 1, v436));
            if (!v438)
            {
              ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
              std::__shared_weak_count::__release_weak(v424);
            }
          }
LABEL_583:
          if (!v430)
            break;
LABEL_584:
          v422 += 16;
          v5 = v480;
          if (v422 == v416)
            goto LABEL_554;
        }
        while (1)
        {
          v439 = v416;
          v416 -= 16;
          if (v422 == v416)
            break;
          v440 = *(_QWORD *)(*(_QWORD *)v416 + 384);
          v441 = *(std::__shared_weak_count **)(*(_QWORD *)v416 + 392);
          if (v441)
          {
            v442 = (unint64_t *)&v441->__shared_owners_;
            do
              v443 = __ldxr(v442);
            while (__stxr(v443 + 1, v442));
            v444 = *(unsigned __int8 *)(*(_QWORD *)v416 + 48);
            do
              v445 = __ldxr(v442);
            while (__stxr(v445 + 1, v442));
            for (ii = *v415; ii; ii = (uint64_t **)*ii)
            {
LABEL_599:
              v448 = *((unsigned __int8 *)ii + 48);
              v449 = *((char *)ii + 48) > (char)v444;
              v450 = (unint64_t)ii[4];
              if (v444 == v448)
                v449 = v440 < v450;
              if (!v449)
              {
                v451 = v450 < v440;
                if (v444 == v448)
                  v452 = v451;
                else
                  v452 = (char)v448 < (char)v444;
                if (!v452)
                {
                  v447 = 1;
                  if (v441)
                    goto LABEL_608;
                  goto LABEL_586;
                }
                ++ii;
              }
            }
          }
          else
          {
            v444 = *(unsigned __int8 *)(*(_QWORD *)v416 + 48);
            ii = *v415;
            if (*v415)
              goto LABEL_599;
          }
          v447 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v414, (unsigned __int8 *)(v440 + 16)) != 0;
          if (v441)
          {
LABEL_608:
            v453 = (unint64_t *)&v441->__shared_owners_;
            do
              v454 = __ldaxr(v453);
            while (__stlxr(v454 - 1, v453));
            if (!v454)
            {
              ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
              std::__shared_weak_count::__release_weak(v441);
            }
            do
              v455 = __ldaxr(v453);
            while (__stlxr(v455 - 1, v453));
            if (!v455)
            {
              ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
              std::__shared_weak_count::__release_weak(v441);
            }
          }
LABEL_586:
          if (v447)
          {
            v456 = *(_QWORD *)v422;
            *(_QWORD *)v422 = *((_QWORD *)v439 - 2);
            *((_QWORD *)v439 - 2) = v456;
            v457 = *((_QWORD *)v422 + 1);
            *((_QWORD *)v422 + 1) = *((_QWORD *)v439 - 1);
            *((_QWORD *)v439 - 1) = v457;
            goto LABEL_584;
          }
        }
        v416 = v422;
        v5 = v480;
      }
LABEL_554:
      v417 = (void *)v5[19];
      v418 = v515;
      __p[0] = v416;
      __p[1] = v417;
      v526[0] = *((_OWORD *)v5 + 13);
      v419 = gdc::Registry::create(v515);
      v420 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>((uint64_t)v418);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v420, v419, __p);
      v421 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>((uint64_t)v418);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v421, v419, v526);
      v413 += 24;
      v412 = (md::VKMRenderResourcesStore *)((char *)v412 + 8);
      v415 += 3;
    }
    while (v412 != v487);
  }
  result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v5[15]);
  if (*(_QWORD *)(result + 88) != *(_QWORD *)(result + 80))
  {
    v459 = *(uint64_t **)v5[16];
    if (v459 != *(uint64_t **)(v5[16] + 8) && *v459 != 0x22D45F5AAD4BF408)
    {
      v460 = v459 + 5;
      do
      {
        v461 = *v460;
        v460 += 5;
      }
      while (v461 != 0x22D45F5AAD4BF408);
      v459 = v460 - 5;
    }
    v462 = (uint64_t (***)(_QWORD))v459[3];
    v463 = (std::__shared_weak_count *)v459[4];
    if (v463)
    {
      v464 = (unint64_t *)&v463->__shared_owners_;
      do
        v465 = __ldxr(v464);
      while (__stxr(v465 + 1, v464));
      do
        v466 = __ldaxr(v464);
      while (__stlxr(v466 - 1, v464));
      if (!v466)
      {
        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
        std::__shared_weak_count::__release_weak(v463);
      }
    }
    result = (**v462)(v462);
    **(_BYTE **)(result + 736) = 1;
  }
  *a4 = v5[15];
  return result;
}

void sub_19F46221C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF9F486144ED3B7F3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF9F486144ED3B7F3;
      if (*(_QWORD *)&v3 <= 0xF9F486144ED3B7F3)
        v5 = 0xF9F486144ED3B7F3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF9F486144ED3B7F3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF9F486144ED3B7F3)
            {
              if (v7[2] == 0xF9F486144ED3B7F3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF9F486144ED3B7F3)
          {
            if (v7[2] == 0xF9F486144ED3B7F3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 73;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270CC8;
  *(_QWORD *)(v11 + 8) = 0xF9F486144ED3B7F3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF9F486144ED3B7F3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF9F486144ED3B7F3;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 73;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF9F486144ED3B7F3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F462774(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1C552FD37D4E4C4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1C552FD37D4E4C4;
      if (*(_QWORD *)&v3 <= 0x1C552FD37D4E4C4uLL)
        v5 = 0x1C552FD37D4E4C4uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1C552FD37D4E4C4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1C552FD37D4E4C4)
            {
              if (v7[2] == 0x1C552FD37D4E4C4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1C552FD37D4E4C4)
          {
            if (v7[2] == 0x1C552FD37D4E4C4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42709C8;
  *(_QWORD *)(v11 + 8) = 0x1C552FD37D4E4C4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1C552FD37D4E4C4uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1C552FD37D4E4C4;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1C552FD37D4E4C4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F46299C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4CFBA79336F4D604;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4CFBA79336F4D604;
      if (*(_QWORD *)&v3 <= 0x4CFBA79336F4D604uLL)
        v5 = 0x4CFBA79336F4D604uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4CFBA79336F4D604;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4CFBA79336F4D604)
            {
              if (v7[2] == 0x4CFBA79336F4D604)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4CFBA79336F4D604)
          {
            if (v7[2] == 0x4CFBA79336F4D604)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataActive<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270908;
  *(_QWORD *)(v11 + 8) = 0x4CFBA79336F4D604;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4CFBA79336F4D604uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4CFBA79336F4D604;
  v15[1] = "SceneComponents::LayerDataActive<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4CFBA79336F4D604, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F462D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *v10;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          *v10 = *v8;
          *v8 = v107;
          v108 = v10[1];
          v10[1] = *v9;
          goto LABEL_185;
        }
        return result;
      case 3:
        v109 = v10[2];
        v110 = *(unsigned __int8 *)(*(_QWORD *)(v109 + 384) + 169);
        v111 = *v10;
        v112 = *v8;
        v113 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
        if (v110 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
        {
          if (v113 <= v110)
            return result;
          v10[2] = v112;
          *v8 = v109;
          v156 = v10[3];
          v10[3] = *v9;
          *v9 = v156;
          v157 = v10[2];
          v158 = *v10;
          if (*(unsigned __int8 *)(*(_QWORD *)(v157 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            return result;
          *v10 = v157;
          v10[2] = v158;
          v114 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v113 <= v110)
          {
            v114 = v10 + 3;
            v167 = v10[3];
            v168 = v10[1];
            *v10 = v109;
            v10[1] = v167;
            v10[2] = v111;
            v10[3] = v168;
            if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v111 + 384) + 169))
              return result;
            v10[2] = *v8;
          }
          else
          {
            v114 = v10 + 1;
            *v10 = v112;
          }
          *v8 = v111;
        }
        v108 = *v114;
        *v114 = *v9;
LABEL_185:
        *v9 = v108;
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v128 = (unint64_t)(v12 - 2) >> 1;
              v129 = v128;
              do
              {
                v130 = v129;
                if (v128 >= v129)
                {
                  v131 = (2 * v129) | 1;
                  v132 = &v10[2 * v131];
                  if (2 * v130 + 2 >= v12)
                  {
                    v136 = *v132;
                  }
                  else
                  {
                    v133 = *(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169);
                    v134 = *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169);
                    v135 = v133 > v134;
                    if (v133 <= v134)
                      v136 = *v132;
                    else
                      v136 = v132[2];
                    if (v135)
                    {
                      v132 += 2;
                      v131 = 2 * v130 + 2;
                    }
                  }
                  v137 = &v10[2 * v130];
                  v138 = *v137;
                  result = *(unsigned __int8 *)(*(_QWORD *)(*v137 + 384) + 169);
                  if (*(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169) <= result)
                  {
                    v139 = v137[1];
                    do
                    {
                      result = (unint64_t)v137;
                      v137 = v132;
                      *(_QWORD *)result = v136;
                      *(_QWORD *)(result + 8) = v132[1];
                      if (v128 < v131)
                        break;
                      v140 = (2 * v131) | 1;
                      v132 = &v10[2 * v140];
                      v131 = 2 * v131 + 2;
                      if (v131 < v12)
                      {
                        v136 = *v132;
                        if (*(unsigned __int8 *)(*(_QWORD *)(*v132 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v132[2] + 384) + 169))
                        {
                          v131 = v140;
                        }
                        else
                        {
                          v136 = v132[2];
                          v132 += 2;
                        }
                      }
                      else
                      {
                        v136 = *v132;
                        v131 = v140;
                      }
                      result = *(unsigned __int8 *)(*(_QWORD *)(v136 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(_QWORD *)(v138 + 384) + 169));
                    *v137 = v138;
                    v137[1] = v139;
                  }
                }
                v129 = v130 - 1;
              }
              while (v130);
              v141 = (unint64_t)v11 >> 4;
              do
              {
                v142 = 0;
                v143 = *v10;
                v144 = v10[1];
                v145 = v10;
                do
                {
                  v147 = &v145[2 * v142 + 2];
                  v148 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    v146 = *v147;
                    result = (unint64_t)(v147 + 2);
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v147[2] + 384) + 169))
                    {
                      v142 = v148;
                    }
                    else
                    {
                      v146 = v147[2];
                      v147 += 2;
                    }
                  }
                  else
                  {
                    v146 = *v147;
                    v142 = v148;
                  }
                  *v145 = v146;
                  v145[1] = v147[1];
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == a2 - 2)
                {
                  *v147 = v143;
                  v147[1] = v144;
                }
                else
                {
                  *v147 = *(a2 - 2);
                  v147[1] = *(a2 - 1);
                  *(a2 - 2) = v143;
                  *(a2 - 1) = v144;
                  v149 = (char *)v147 - (char *)v10 + 16;
                  if (v149 >= 17)
                  {
                    v150 = (((unint64_t)v149 >> 4) - 2) >> 1;
                    v151 = &v10[2 * v150];
                    v152 = *v151;
                    v153 = *v147;
                    if (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v147 + 384) + 169))
                    {
                      v154 = v147[1];
                      do
                      {
                        v155 = v147;
                        v147 = v151;
                        *v155 = v152;
                        v155[1] = v151[1];
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[2 * v150];
                        v152 = *v151;
                      }
                      while (*(unsigned __int8 *)(*(_QWORD *)(*v151 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v153 + 384) + 169));
                      *v147 = v153;
                      v147[1] = v154;
                    }
                  }
                }
                a2 -= 2;
                v135 = v141-- <= 2;
              }
              while (!v135);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169);
          if ((unint64_t)v11 >= 0x801)
          {
            v17 = *v14;
            v18 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
            v19 = *v10;
            if (v18 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169))
            {
              if (v16 <= v18
                || (*v14 = v15,
                    *v8 = v17,
                    v26 = v14 + 1,
                    v25 = v14[1],
                    v14[1] = *v9,
                    *v9 = v25,
                    v27 = *v10,
                    *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169)))
              {
LABEL_23:
                v34 = &v10[2 * v13];
                v37 = *(v34 - 2);
                v35 = v34 - 2;
                v36 = v37;
                v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169);
                v39 = v10[2];
                v40 = *(a2 - 4);
                v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 384) + 169);
                if (v38 <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                {
                  if (v41 <= v38
                    || (*v35 = v40,
                        *(a2 - 4) = v36,
                        v43 = v35 + 1,
                        v44 = v35[1],
                        v35[1] = *(a2 - 3),
                        *(a2 - 3) = v44,
                        v45 = v10[2],
                        *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v45 + 384) + 169)))
                  {
LABEL_36:
                    v52 = &v10[2 * v13];
                    v55 = v52[2];
                    v53 = v52 + 2;
                    v54 = v55;
                    v56 = *(unsigned __int8 *)(*(_QWORD *)(v55 + 384) + 169);
                    v57 = v10[4];
                    v58 = *(a2 - 6);
                    v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 384) + 169);
                    if (v56 <= *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169))
                    {
                      if (v59 > v56)
                      {
                        *v53 = v58;
                        *(a2 - 6) = v54;
                        v62 = v53 + 1;
                        v61 = v53[1];
                        v53[1] = *(a2 - 5);
                        *(a2 - 5) = v61;
                        v54 = *v53;
                        v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        v63 = v10[4];
                        if (v56 > *(unsigned __int8 *)(*(_QWORD *)(v63 + 384) + 169))
                        {
                          v10[4] = v54;
                          *v53 = v63;
                          v60 = v10 + 5;
LABEL_45:
                          v67 = *v60;
                          *v60 = *v62;
                          *v62 = v67;
                          v54 = *v53;
                          v56 = *(unsigned __int8 *)(*(_QWORD *)(*v53 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v59 > v56)
                      {
                        v60 = v10 + 5;
                        v10[4] = v58;
LABEL_44:
                        *(a2 - 6) = v57;
                        v62 = a2 - 5;
                        goto LABEL_45;
                      }
                      v60 = v53 + 1;
                      v64 = v53[1];
                      v65 = v10[5];
                      v10[4] = v54;
                      v10[5] = v64;
                      *v53 = v57;
                      v53[1] = v65;
                      v66 = *(a2 - 6);
                      v56 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 384) + 169);
                      if (*(unsigned __int8 *)(*(_QWORD *)(v66 + 384) + 169) > v56)
                      {
                        *v53 = v66;
                        goto LABEL_44;
                      }
                      v54 = v57;
                    }
                    v68 = *v14;
                    v69 = *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169);
                    v70 = *v35;
                    if (v69 <= *(unsigned __int8 *)(*(_QWORD *)(*v35 + 384) + 169))
                    {
                      if (v56 <= v69)
                      {
LABEL_56:
                        v78 = *v10;
                        *v10 = v68;
                        v24 = v10 + 1;
                        *v14 = v78;
                        v30 = v14 + 1;
                        goto LABEL_57;
                      }
                      *v14 = v54;
                      v73 = v14 + 1;
                      v74 = v14[1];
                      v14[1] = v53[1];
                      *v53 = v68;
                      v53[1] = v74;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                      {
                        v68 = v54;
                        goto LABEL_56;
                      }
                      *v35 = v54;
                      v71 = v35 + 1;
                      *v14 = v70;
                    }
                    else
                    {
                      if (v56 <= v69)
                      {
                        *v14 = v70;
                        v75 = v14[1];
                        v76 = v35[1];
                        *v35 = v68;
                        v35[1] = v75;
                        v14[1] = v76;
                        if (*(unsigned __int8 *)(*(_QWORD *)(v54 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v70 + 384) + 169))
                        {
                          v68 = v70;
                          goto LABEL_56;
                        }
                        *v14 = v54;
                        *v53 = v70;
                        v72 = v53 + 1;
                        v71 = v14 + 1;
                      }
                      else
                      {
                        *v35 = v54;
                        v71 = v35 + 1;
                        *v53 = v70;
                        v72 = v53 + 1;
                      }
                      v73 = v72;
                    }
                    v77 = *v71;
                    *v71 = *v73;
                    *v73 = v77;
                    v68 = *v14;
                    goto LABEL_56;
                  }
                  v10[2] = *v35;
                  *v35 = v45;
                  v42 = v10 + 3;
                }
                else
                {
                  if (v41 <= v38)
                  {
                    v42 = v35 + 1;
                    v48 = v35[1];
                    v49 = v10[3];
                    v10[2] = v36;
                    v10[3] = v48;
                    *v35 = v39;
                    v35[1] = v49;
                    v50 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v50 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v39 + 384) + 169))
                      goto LABEL_36;
                    *v35 = v50;
                  }
                  else
                  {
                    v42 = v10 + 3;
                    v10[2] = v40;
                  }
                  *(a2 - 4) = v39;
                  v43 = a2 - 3;
                }
                v51 = *v42;
                *v42 = *v43;
                *v43 = v51;
                goto LABEL_36;
              }
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v27;
            }
            else
            {
              if (v16 <= v18)
              {
                v20 = v14 + 1;
                v31 = v14[1];
                v32 = v10[1];
                *v10 = v17;
                v10[1] = v31;
                *v14 = v19;
                v14[1] = v32;
                if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v19 + 384) + 169))
                  goto LABEL_23;
                *v14 = *v8;
              }
              else
              {
                v20 = v10 + 1;
                *v10 = v15;
              }
              *v8 = v19;
              v26 = a2 - 1;
            }
            v33 = *v20;
            *v20 = *v26;
            *v26 = v33;
            goto LABEL_23;
          }
          v21 = *v10;
          v22 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169);
          v23 = *v14;
          if (v22 <= *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
          {
            if (v16 > v22)
            {
              *v10 = v15;
              *v8 = v21;
              v28 = v10[1];
              v10[1] = *v9;
              *v9 = v28;
              v21 = *v10;
              v29 = *v14;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v14 + 384) + 169))
              {
                *v14 = v21;
                *v10 = v29;
                v24 = v14 + 1;
                v30 = v10 + 1;
LABEL_57:
                v79 = *v24;
                *v24 = *v30;
                *v30 = v79;
                v21 = *v10;
              }
            }
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_59;
LABEL_61:
            v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
            if (*(unsigned __int8 *)(*(_QWORD *)(*(v10 - 2) + 384) + 169) > v80)
              goto LABEL_62;
            if (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169))
            {
              v97 = v10 + 2;
              do
              {
                v10 = v97;
                if (v97 >= a2)
                  break;
                v97 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(*v10 + 384) + 169));
            }
            else
            {
              do
              {
                v96 = v10[2];
                v10 += 2;
              }
              while (v80 <= *(unsigned __int8 *)(*(_QWORD *)(v96 + 384) + 169));
            }
            v98 = a2;
            if (v10 < a2)
            {
              v98 = a2;
              do
              {
                v99 = *(v98 - 2);
                v98 -= 2;
              }
              while (v80 > *(unsigned __int8 *)(*(_QWORD *)(v99 + 384) + 169));
            }
            v100 = v7[1];
            if (v10 < v98)
            {
              v101 = *v10;
              v102 = *v98;
              do
              {
                *v10 = v102;
                *v98 = v101;
                v103 = v10[1];
                v10[1] = v98[1];
                v98[1] = v103;
                v104 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
                do
                {
                  v105 = v10[2];
                  v10 += 2;
                  v101 = v105;
                }
                while (v104 <= *(unsigned __int8 *)(*(_QWORD *)(v105 + 384) + 169));
                do
                {
                  v106 = *(v98 - 2);
                  v98 -= 2;
                  v102 = v106;
                }
                while (v104 > *(unsigned __int8 *)(*(_QWORD *)(v106 + 384) + 169));
              }
              while (v10 < v98);
            }
            if (v10 - 2 != v7)
            {
              *v7 = *(v10 - 2);
              v7[1] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 2) = v21;
            *(v10 - 1) = v100;
            continue;
          }
          if (v16 > v22)
          {
            v24 = v14 + 1;
            *v14 = v15;
LABEL_31:
            *v8 = v23;
            v30 = a2 - 1;
            goto LABEL_57;
          }
          v24 = v10 + 1;
          v46 = v10[1];
          v47 = v14[1];
          *v14 = v21;
          v14[1] = v46;
          *v10 = v23;
          v10[1] = v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*v8 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v23 + 384) + 169))
          {
            *v10 = *v8;
            goto LABEL_31;
          }
          v21 = v23;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_59:
          v80 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
LABEL_62:
          v81 = v10[1];
          v82 = v10;
          do
          {
            v83 = v82;
            v85 = v82[2];
            v82 += 2;
            v84 = v85;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v85 + 384) + 169) > v80);
          v86 = a2;
          if (v83 == v10)
          {
            v86 = a2;
            do
            {
              if (v82 >= v86)
                break;
              v88 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v88 + 384) + 169) <= v80);
          }
          else
          {
            do
            {
              v87 = *(v86 - 2);
              v86 -= 2;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(v87 + 384) + 169) <= v80);
          }
          if (v82 >= v86)
          {
            v10 = v82;
          }
          else
          {
            v89 = *v86;
            v10 = v82;
            v90 = v86;
            do
            {
              *v10 = v89;
              *v90 = v84;
              v91 = v10[1];
              v10[1] = v90[1];
              v90[1] = v91;
              v92 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169);
              do
              {
                v93 = v10[2];
                v10 += 2;
                v84 = v93;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v93 + 384) + 169) > v92);
              do
              {
                v94 = *(v90 - 2);
                v90 -= 2;
                v89 = v94;
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v94 + 384) + 169) <= v92);
            }
            while (v10 < v90);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          *(v10 - 2) = v21;
          *(v10 - 1) = v81;
          if (v82 < v86)
            goto LABEL_83;
          v95 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v7, v10 - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v95)
              continue;
LABEL_83:
            result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v7, v10 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 2;
          if (v95)
            return result;
          goto LABEL_2;
        }
        v115 = v10 + 2;
        v117 = v10 == a2 || v115 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v117)
          {
            v118 = 0;
            v119 = v10;
            do
            {
              v121 = v115;
              v122 = v119[2];
              v123 = *v119;
              if (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v119 + 384) + 169))
              {
                v124 = v119[3];
                v125 = v118;
                do
                {
                  v126 = (char *)v10 + v125;
                  v127 = *(uint64_t *)((char *)v10 + v125 + 8);
                  *((_QWORD *)v126 + 2) = v123;
                  *((_QWORD *)v126 + 3) = v127;
                  if (!v125)
                  {
                    v120 = v10;
                    goto LABEL_125;
                  }
                  v123 = *((_QWORD *)v126 - 2);
                  v125 -= 16;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v122 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v123 + 384) + 169));
                v120 = (uint64_t *)((char *)v10 + v125 + 16);
LABEL_125:
                *v120 = v122;
                v120[1] = v124;
              }
              v115 = v121 + 2;
              v118 += 16;
              v119 = v121;
            }
            while (v121 + 2 != a2);
          }
        }
        else if (!v117)
        {
          v159 = v10 + 3;
          do
          {
            v160 = v115;
            v161 = v7[2];
            v162 = *v7;
            if (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v7 + 384) + 169))
            {
              v163 = v7[3];
              v164 = v159;
              do
              {
                v165 = v164;
                *(v164 - 1) = v162;
                v166 = *(v164 - 2);
                v164 -= 2;
                *v165 = v166;
                v162 = *(v165 - 5);
              }
              while (*(unsigned __int8 *)(*(_QWORD *)(v161 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v162 + 384) + 169));
              *(v164 - 1) = v161;
              *v164 = v163;
            }
            v115 = v160 + 2;
            v159 += 2;
            v7 = v160;
          }
          while (v160 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 2);
      v4 = *a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v6 = a1[2];
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 384) + 169);
      v8 = *a1;
      v9 = *(a2 - 2);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          v11 = a1 + 3;
          v26 = a1[3];
          v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(_QWORD *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 384) + 169))
            return 1;
          a1[2] = v28;
        }
        else
        {
          v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        v20 = a1 + 3;
        v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        v21 = a1[2];
        v22 = *a1;
        if (*(unsigned __int8 *)(*(_QWORD *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          v11 = a1 + 1;
LABEL_21:
          v29 = *v11;
          *v11 = *v20;
          *v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 384) + 169);
      v16 = *a1;
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(_QWORD *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          v18 = a1 + 3;
          v30 = a1[3];
          v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
            goto LABEL_26;
          a1[2] = v13;
        }
        else
        {
          v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        v24 = a1 + 3;
        v23 = a1[3];
        v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(_QWORD *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          v18 = a1 + 1;
LABEL_25:
          v32 = *v18;
          *v18 = *v24;
          *v24 = v32;
        }
      }
LABEL_26:
      v33 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v37 = *v33;
        v38 = *v12;
        if (*(unsigned __int8 *)(*(_QWORD *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(*v12 + 384) + 169))
        {
          v39 = v33[1];
          v40 = v34;
          do
          {
            v41 = (uint64_t *)((char *)a1 + v40);
            v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              v36 = a1;
              goto LABEL_29;
            }
            v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(_QWORD *)(v38 + 384) + 169));
          v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *v36 = v37;
          v36[1] = v39;
          if (++v35 == 8)
            return v33 + 2 == a2;
        }
        v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2)
          return 1;
      }
  }
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v3 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x5B0BFF71B88387C7;
    if (a2 <= 0x5B0BFF71B88387C7)
      v11 = 0x5B0BFF71B88387C7 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x5B0BFF71B88387C7;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x5B0BFF71B88387C7)
      {
        if (v13[2] == 0x5B0BFF71B88387C7)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x5B0BFF71B88387C7)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x5B0BFF71B88387C7)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x5B0BFF71B88387C7)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)54>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E4270698;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)54>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E4270698;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)54>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F538;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E426F538;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

void md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::reset(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  gdc::Registry *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  char v45;

  v2 = a1[16];
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4)
        goto LABEL_12;
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    v5 = 0;
  }
  else
  {
    v5 = v3[3];
    v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  md::FlyoverRenderResources::prunePools(v10);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  md::DaVinciGroundRenderResources::prunePools(v11);
  v12 = (gdc::Registry *)a1[15];
  if (v12)
  {
    v13 = gdc::Registry::create(v12);
    v14 = (uint64_t *)gdc::Registry::storage<md::ls::RequestReset>(a1[15]);
    v45 = 0;
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v14, v13, &v45);
    v15 = (_QWORD *)a1[18];
    v16 = (_QWORD *)a1[19];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v44 = a1[19];
      while (1)
      {
        cleanup(a1[16], a1[15], v15[1]);
        v20 = (void (***)(_QWORD))*v15;
        if (*v15)
        {
          v21 = a1[17];
          if (*(_QWORD *)(v21 + 16))
          {
            (**v20)(*v15);
            *v20 = *(void (***)(_QWORD))(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
          }
        }
        if (v19 >= v18)
          break;
        *(_QWORD *)v19 = v15[1];
        v19 += 8;
LABEL_17:
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)a1[18];
          goto LABEL_51;
        }
      }
      v22 = (v19 - v17) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v18 - v17) >> 2 > v23)
        v23 = (v18 - v17) >> 2;
      if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15[1];
      v27 = v26 + 8;
      if (v19 != v17)
      {
        v28 = v19 - 8 - v17;
        if (v28 >= 0x168)
        {
          if (&v25[v19 - v17 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v19 - v17 - 8])
          {
            v29 = v19;
          }
          else if (&v19[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
          {
            v29 = v19;
          }
          else if ((unint64_t)(v17 - v25) >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v29 = &v19[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            v32 = &v25[8 * v22 - 16];
            v33 = v19 - 16;
            v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v26 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_36;
          }
          else
          {
            v29 = v19;
          }
        }
        else
        {
          v29 = v19;
        }
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v29 != v17);
      }
LABEL_36:
      v18 = &v25[8 * v24];
      if (v17)
        operator delete(v17);
      v17 = v26;
      v19 = v27;
      v16 = (_QWORD *)v44;
      goto LABEL_17;
    }
    v19 = 0;
    v17 = 0;
LABEL_51:
    a1[19] = (uint64_t)v15;
    a1[30] = a1[29];
    a1[27] = a1[26];
    if (a1[24])
    {
      v36 = (_BYTE *)a1[23];
      if (v36)
      {
        do
        {
          if (v36[112])
            v36[112] = 0;
          v42 = *(_BYTE **)v36;
          v43 = (void *)*((_QWORD *)v36 + 4);
          if (v43 != *((void **)v36 + 6))
            free(v43);
          operator delete(v36);
          v36 = v42;
        }
        while (v42);
      }
      a1[23] = 0;
      v37 = a1[22];
      if (v37)
      {
        for (i = 0; i != v37; ++i)
          *(_QWORD *)(a1[21] + 8 * i) = 0;
      }
      a1[24] = 0;
    }
    if (v17 != v19)
    {
      v39 = a1[15];
      v40 = (unint64_t *)v17;
      do
      {
        v41 = *v40++;
        gdc::Registry::destroy(v39, v41);
      }
      while (v40 != (unint64_t *)v19);
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_19F464940(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::CollectRenderablesLogicContext<md::MapDataType::InjectedFeatures>]";
  v4[3] = 69;
  v4[4] = result;
  *v4 = &off_1E42706C0;
  v4[1] = 0x552ACF95227023D6;
  *a2 = v4;
  return result;
}

void sub_19F464A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x552ACF95227023D6)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x552ACF95227023D6)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x552ACF95227023D6)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x552ACF95227023D6)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x552ACF95227023D6 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::runBeforeLayout(_QWORD *a1, md::LayoutContext *a2, uint64_t **a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t **i;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  md::VKMRenderResourcesStore *j;
  int v51;
  BOOL v52;
  unint64_t v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t **v70;
  BOOL v71;
  int v72;
  BOOL v73;
  unint64_t v74;
  _BOOL4 v75;
  _BOOL4 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  md::VKMRenderResourcesStore *k;
  int v88;
  BOOL v89;
  unint64_t v90;
  _BOOL4 v91;
  int v92;
  _BOOL4 v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  char *v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  double *v106;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  char *v110;
  char *v111;
  void *v112;
  char *v113;
  int64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  void (***v128)(_QWORD);
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const double *v151;
  double *v152;
  double *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  void *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t **v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double *v204;
  uint64_t v205;
  const double *v206;
  const double *v207;
  double *v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  void *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  double v216;
  double v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  uint64_t *v233;
  unint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t (***v245)(_QWORD);
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  int8x8_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  char v262;
  _BYTE *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  _BYTE *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  size_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  __int128 *v279;
  unint64_t v280;
  __int128 v281;
  uint64_t v282;
  _BYTE *v283;
  char *v284;
  uint64_t *v285;
  uint64_t v286;
  char *v287;
  char v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  char v302;
  unsigned int v303;
  void *v304;
  char v305;
  void *v306;
  uint64_t *v307;
  _QWORD *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t *v321;
  uint64_t *HasTileSharedStyleCamera;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  void *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  void *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  void *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  void *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  void *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t *v366;
  uint64_t *v367;
  float v368;
  uint64_t *v369;
  __int128 v370;
  uint64_t *v371;
  uint64_t *v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t *v375;
  char v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t *v383;
  uint64_t *v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  BOOL v407;
  _QWORD *v408;
  md::VKMRenderResourcesStore *v409;
  _QWORD *v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t ***v413;
  char *v414;
  void *v415;
  gdc::Registry *v416;
  unint64_t v417;
  uint64_t *v418;
  uint64_t *v419;
  char *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  int v425;
  unint64_t v426;
  uint64_t **m;
  BOOL v428;
  int v429;
  BOOL v430;
  unint64_t v431;
  _BOOL4 v432;
  _BOOL4 v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  char *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  int v442;
  unint64_t v443;
  uint64_t **n;
  _BOOL4 v445;
  int v446;
  BOOL v447;
  unint64_t v448;
  _BOOL4 v449;
  _BOOL4 v450;
  unint64_t *v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t result;
  uint64_t *v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t (***v460)(_QWORD);
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  _QWORD *v469;
  md::LayoutContext *v470;
  uint64_t *v471;
  int v472;
  uint64_t **v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  _QWORD *v477;
  char **v478;
  uint64_t v479;
  uint64_t v481;
  std::__shared_weak_count *v482;
  md::VKMRenderResourcesStore *v483;
  md::VKMRenderResourcesStore *v484;
  md::VKMRenderResourcesStore *v485;
  __int128 v486;
  char v487;
  void *__p[2];
  __int128 v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  uint64_t v505;
  std::__shared_weak_count *v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  gdc::Registry *v513;
  char v514;
  __int16 v515;
  char v516;
  unsigned int v517;
  unsigned int v518;
  int v519;
  __int16 v520;
  char v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  _OWORD v524[2];
  __int128 v525;
  float64x2x2_t v526;
  float64x2x2_t v527;
  float64x2x2_t v528;
  float64x2x2_t v529;

  v471 = *a3;
  v5 = a1[15];
  v6 = (uint64_t **)*((_QWORD *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v489 = 0;
  v7 = *v6;
  if (*v6 != v6[1] && *v7 != 0x22D45F5AAD4BF408)
  {
    v8 = v7 + 5;
    do
    {
      v9 = *v8;
      v8 += 5;
    }
    while (v9 != 0x22D45F5AAD4BF408);
    v7 = v8 - 5;
  }
  v10 = (void (***)(_QWORD))v7[3];
  v11 = (std::__shared_weak_count *)v7[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  (**v10)(v10);
  v473 = v6;
  v474 = v5;
  v470 = a2;
  v15 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(v5);
  v16 = a1;
  v17 = v15[7];
  v476 = v15[8];
  if (v17 != v476)
  {
    v18 = a1 + 21;
    v478 = (char **)(a1 + 29);
    v19 = v15[10];
    v483 = (md::VKMRenderResourcesStore *)(v19 + 8);
    do
    {
      v481 = v17;
      v25 = (_QWORD *)v16[18];
      v26 = (_QWORD *)v16[19];
LABEL_20:
      while (v25 != v26)
      {
        v27 = *(_QWORD *)(*v25 + 384);
        v28 = *(std::__shared_weak_count **)(*v25 + 392);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = *(unsigned __int8 *)(*v25 + 48);
          do
            v32 = __ldxr(v29);
          while (__stxr(v32 + 1, v29));
          for (i = *(uint64_t ***)(v19 + 8); i; i = (uint64_t **)*i)
          {
LABEL_32:
            v35 = *((unsigned __int8 *)i + 48);
            v36 = *((char *)i + 48) > (char)v31;
            v37 = (unint64_t)i[4];
            if (v31 == v35)
              v36 = v27 < v37;
            if (!v36)
            {
              v38 = v37 < v27;
              if (v31 == v35)
                v39 = v38;
              else
                v39 = (char)v35 < (char)v31;
              if (!v39)
              {
                v34 = 1;
                if (v28)
                  goto LABEL_41;
                goto LABEL_48;
              }
              ++i;
            }
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(*v25 + 48);
          i = *(uint64_t ***)(v19 + 8);
          if (i)
            goto LABEL_32;
        }
        v34 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v27 + 16)) != 0;
        if (v28)
        {
LABEL_41:
          v40 = (unint64_t *)&v28->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 - 1, v40));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
LABEL_48:
        if (!v34)
        {
          while (1)
          {
            v43 = v26;
            v26 -= 2;
            if (v25 == v26)
              goto LABEL_80;
            v44 = *(_QWORD *)(*v26 + 384);
            v45 = *(std::__shared_weak_count **)(*v26 + 392);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
              v48 = *(unsigned __int8 *)(*v26 + 48);
              do
                v49 = __ldxr(v46);
              while (__stxr(v49 + 1, v46));
            }
            else
            {
              v48 = *(unsigned __int8 *)(*v26 + 48);
            }
            for (j = v483; ; j = (md::VKMRenderResourcesStore *)((char *)j + 8))
            {
              do
              {
                j = *(md::VKMRenderResourcesStore **)j;
                if (!j)
                {
                  v56 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v44 + 16)) != 0;
                  if (!v45)
                    goto LABEL_50;
                  goto LABEL_72;
                }
                v51 = *((unsigned __int8 *)j + 48);
                v52 = *((char *)j + 48) > (char)v48;
                v53 = *((_QWORD *)j + 4);
                if (v48 == v51)
                  v52 = v44 < v53;
              }
              while (v52);
              v54 = v53 < v44;
              v55 = v48 == v51 ? v54 : (char)v51 < (char)v48;
              if (v55 != 1)
                break;
            }
            v56 = 1;
            if (!v45)
              goto LABEL_50;
LABEL_72:
            v57 = (unint64_t *)&v45->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
            do
              v59 = __ldaxr(v57);
            while (__stlxr(v59 - 1, v57));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
LABEL_50:
            if (v56)
            {
              v60 = *v25;
              *v25 = *(v43 - 2);
              *(v43 - 2) = v60;
              v61 = v25[1];
              v25[1] = *(v43 - 1);
              *(v43 - 1) = v61;
              v25 += 2;
              goto LABEL_20;
            }
          }
        }
        v25 += 2;
      }
LABEL_80:
      v16 = a1;
      v63 = (_QWORD *)a1[18];
      v62 = a1[19];
LABEL_143:
      if (v63 != (_QWORD *)v62)
      {
        while (2)
        {
          v64 = *(_QWORD *)(*v63 + 384);
          v65 = *(std::__shared_weak_count **)(*v63 + 392);
          if (!v65)
          {
            v68 = *(unsigned __int8 *)(*v63 + 48);
            v70 = *(uint64_t ***)(v19 + 8);
            if (v70)
              goto LABEL_93;
LABEL_89:
            v71 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v64 + 16)) != 0;
            if (!v65)
              goto LABEL_107;
LABEL_101:
            v77 = (unint64_t *)&v65->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
            do
              v79 = __ldaxr(v77);
            while (__stlxr(v79 - 1, v77));
            if (v79)
              goto LABEL_107;
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
            if (v71)
              goto LABEL_142;
            do
            {
LABEL_112:
              v80 = v62;
              v62 -= 16;
              if (v63 == (_QWORD *)v62)
              {
                v62 = (unint64_t)v63;
                v16 = a1;
                goto LABEL_146;
              }
              v81 = *(_QWORD *)(*(_QWORD *)v62 + 384);
              v82 = *(std::__shared_weak_count **)(*(_QWORD *)v62 + 392);
              if (v82)
              {
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
                v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
                do
                  v86 = __ldxr(v83);
                while (__stxr(v86 + 1, v83));
              }
              else
              {
                v85 = *(unsigned __int8 *)(*(_QWORD *)v62 + 48);
              }
              for (k = v483; ; k = (md::VKMRenderResourcesStore *)((char *)k + 8))
              {
                do
                {
                  k = *(md::VKMRenderResourcesStore **)k;
                  if (!k)
                  {
                    v93 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v18, (unsigned __int8 *)(v81 + 16)) != 0;
                    if (!v82)
                      goto LABEL_111;
                    goto LABEL_133;
                  }
                  v88 = *((unsigned __int8 *)k + 48);
                  v89 = *((char *)k + 48) > (char)v85;
                  v90 = *((_QWORD *)k + 4);
                  if (v85 == v88)
                    v89 = v81 < v90;
                }
                while (v89);
                v91 = v90 < v81;
                v92 = v85 == v88 ? v91 : (char)v88 < (char)v85;
                if (v92 != 1)
                  break;
              }
              v93 = 1;
              if (!v82)
                continue;
LABEL_133:
              v94 = (unint64_t *)&v82->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
              do
                v96 = __ldaxr(v94);
              while (__stlxr(v96 - 1, v94));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
LABEL_111:
              ;
            }
            while (!v93);
            v97 = *v63;
            *v63 = *(_QWORD *)(v80 - 16);
            *(_QWORD *)(v80 - 16) = v97;
            v98 = v63[1];
            v63[1] = *(_QWORD *)(v80 - 8);
            *(_QWORD *)(v80 - 8) = v98;
            v63 += 2;
            v16 = a1;
            if (v63 != (_QWORD *)v62)
              continue;
            goto LABEL_146;
          }
          break;
        }
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v68 = *(unsigned __int8 *)(*v63 + 48);
        do
          v69 = __ldxr(v66);
        while (__stxr(v69 + 1, v66));
        v70 = *(uint64_t ***)(v19 + 8);
        if (!v70)
          goto LABEL_89;
        while (1)
        {
LABEL_93:
          v72 = *((unsigned __int8 *)v70 + 48);
          v73 = *((char *)v70 + 48) > (char)v68;
          v74 = (unint64_t)v70[4];
          if (v68 == v72)
            v73 = v64 < v74;
          if (!v73)
          {
            v75 = v74 < v64;
            if (v68 == v72)
              v76 = v75;
            else
              v76 = (char)v72 < (char)v68;
            if (!v76)
            {
              v71 = 1;
              if (v65)
                goto LABEL_101;
LABEL_107:
              if (!v71)
                goto LABEL_112;
LABEL_142:
              v63 += 2;
              goto LABEL_143;
            }
            ++v70;
          }
          v70 = (uint64_t **)*v70;
          if (!v70)
            goto LABEL_89;
        }
      }
LABEL_146:
      v99 = (__int128 *)v16[19];
      v100 = (char *)v99 - v62;
      v101 = (uint64_t)((uint64_t)v99 - v62) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v478, v16[30], v62, v99, v101);
      if ((__int128 *)v62 != v99)
      {
        v103 = v16[18];
        v102 = (double *)v16[19];
        v104 = v62 - v103;
        v105 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
        v106 = &v105[2 * v101];
        if (v106 != v102)
        {
          v107 = v104 & 0xFFFFFFFFFFFFFFF0;
          v108 = (char *)v102 - &v100[v103 + (v104 & 0xFFFFFFFFFFFFFFF0)] - 16;
          if (v108 >= 0x270)
          {
            v130 = v107 + (v108 & 0xFFFFFFFFFFFFFFF0);
            v131 = v103 + (v130 | 8);
            v132 = v103 + (v107 | 8);
            v133 = v130 + v103 + 16;
            v134 = &v100[v107 + v103];
            v135 = &v134[v108 & 0xFFFFFFFFFFFFFFF0];
            v136 = (unint64_t)(v135 + 8);
            v137 = (unint64_t)(v134 + 8);
            v138 = (unint64_t)(v135 + 16);
            v140 = v105 < (double *)v135 + 1 && (unint64_t)v106 < v131;
            v142 = (unint64_t)v105 < v138 && v137 < v131;
            v144 = v132 < v136 && (unint64_t)v106 < v133;
            v146 = v132 < v138 && v137 < v133;
            if (v132 < v131 && (unint64_t)v105 < v133)
            {
              v109 = v105;
              goto LABEL_150;
            }
            if (v140)
            {
              v109 = v105;
              goto LABEL_150;
            }
            if (v142)
            {
              v109 = v105;
              goto LABEL_150;
            }
            if (v144)
            {
              v109 = v105;
              goto LABEL_150;
            }
            if (v146)
            {
              v109 = v105;
              goto LABEL_150;
            }
            v148 = (v108 >> 4) + 1;
            v149 = 2 * (v148 & 0x1FFFFFFFFFFFFFFCLL);
            v109 = &v105[v149];
            v150 = v148 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v151 = &v105[2 * v101];
              v526 = vld2q_f64(v151);
              v151 += 4;
              v528 = vld2q_f64(v151);
              v152 = v105 + 8;
              vst2q_f64(v105, v526);
              v153 = v105 + 4;
              vst2q_f64(v153, v528);
              v105 = v152;
              v150 -= 4;
            }
            while (v150);
            if (v148 != (v148 & 0x1FFFFFFFFFFFFFFCLL))
            {
              v106 = (double *)((char *)v106 + v149 * 8);
              goto LABEL_150;
            }
          }
          else
          {
            v109 = (double *)(v103 + ((v62 - v103) & 0xFFFFFFFFFFFFFFF0));
            do
            {
LABEL_150:
              *v109 = *v106;
              v109[1] = v106[1];
              v109 += 2;
              v106 += 2;
            }
            while (v106 != v102);
          }
          v105 = v109;
        }
        v16[19] = v105;
      }
      v110 = (char *)v16[29];
      v20 = (char *)v16[30];
      if (v20 != v110)
      {
        do
        {
          v111 = (char *)__p[1];
          if (__p[1] >= (void *)v489)
          {
            v113 = (char *)__p[0];
            v114 = (char *)__p[1] - (char *)__p[0];
            v115 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61)
              abort();
            v117 = v489 - (unint64_t)__p[0];
            if ((uint64_t)(v489 - (unint64_t)__p[0]) >> 2 > v116)
              v116 = v117 >> 2;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
              v118 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              if (v118 >> 61)
LABEL_643:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v119 = operator new(8 * v118);
            }
            else
            {
              v119 = 0;
            }
            v120 = &v119[8 * v115];
            *v120 = *((_QWORD *)v110 + 1);
            v112 = v120 + 1;
            if (v111 == v113)
            {
              v113 = v111;
            }
            else
            {
              v121 = v111 - 8 - v113;
              if (v121 < 0x58)
                goto LABEL_649;
              if ((unint64_t)(v111 - &v119[v114]) < 0x20)
                goto LABEL_649;
              v122 = (v121 >> 3) + 1;
              v123 = &v119[8 * v115 - 16];
              v124 = v111 - 16;
              v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 32;
                v125 -= 4;
              }
              while (v125);
              v120 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
              v111 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
              if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_649:
                do
                {
                  v127 = *((_QWORD *)v111 - 1);
                  v111 -= 8;
                  *--v120 = v127;
                }
                while (v111 != v113);
                v113 = (char *)__p[0];
              }
            }
            __p[0] = v120;
            __p[1] = v112;
            *(_QWORD *)&v489 = &v119[8 * v118];
            if (v113)
              operator delete(v113);
            v16 = a1;
          }
          else
          {
            *(_QWORD *)__p[1] = *((_QWORD *)v110 + 1);
            v112 = v111 + 8;
          }
          __p[1] = v112;
          v128 = *(void (****)(_QWORD))v110;
          if (*(_QWORD *)v110)
          {
            v129 = v16[17];
            if (*(_QWORD *)(v129 + 16))
            {
              (**v128)(*(_QWORD *)v110);
              *v128 = *(void (***)(_QWORD))(v129 + 40);
              *(_QWORD *)(v129 + 40) = v128;
            }
          }
          v110 += 16;
        }
        while (v110 != v20);
        v20 = *v478;
      }
      v21 = v16[18];
      v22 = (uint64_t *)v16[19];
      v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v22 - v21) >> 4);
      v16[30] = v20;
      if (v22 == (uint64_t *)v21)
        v24 = 0;
      else
        v24 = v23;
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v21, v22, v24, 1);
      v19 += 24;
      v17 = v481 + 8;
      v483 = (md::VKMRenderResourcesStore *)((char *)v483 + 24);
    }
    while (v481 + 8 != v476);
  }
  v154 = *v473;
  v155 = v473[1];
  if (*v473 == v155)
  {
    v156 = v474;
  }
  else
  {
    v156 = v474;
    while (*v154 != 0x41D4E9297E100630)
    {
      v154 += 5;
      if (v154 == v155)
        goto LABEL_237;
    }
  }
  if (v154 != v155)
  {
    v157 = (std::__shared_weak_count *)v154[4];
    if (v157)
    {
      v158 = (unint64_t *)&v157->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
      do
        v160 = __ldaxr(v158);
      while (__stlxr(v160 - 1, v158));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
  }
LABEL_237:
  v161 = *v473;
  v162 = v473[1];
  if (*v473 != v162)
  {
    while (*v161 != 0x4EDAD23DFB014132)
    {
      v161 += 5;
      if (v161 == v162)
        goto LABEL_248;
    }
  }
  if (v161 != v162)
  {
    v163 = (std::__shared_weak_count *)v161[4];
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
      do
        v166 = __ldaxr(v164);
      while (__stlxr(v166 - 1, v164));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
  }
LABEL_248:
  v167 = *v473;
  v168 = v473[1];
  if (*v473 != v168)
  {
    while (*v167 != 0x348A0B0E758C07C2)
    {
      v167 += 5;
      if (v167 == v168)
        goto LABEL_259;
    }
  }
  if (v167 != v168)
  {
    v169 = (std::__shared_weak_count *)v167[4];
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      do
        v172 = __ldaxr(v170);
      while (__stlxr(v172 - 1, v170));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
LABEL_259:
  v173 = __p[0];
  if (__p[1] != __p[0])
  {
    v174 = 0;
    v175 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v473, v156, v173[v174++]);
      v173 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v174);
    while (v175 != __p[1])
    {
      v176 = *v175++;
      gdc::Registry::destroy(v156, v176);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v156);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v156);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  md::LayoutContext::frameState(v470);
  v472 = *(unsigned __int8 *)(v177 + 128);
  v178 = (uint64_t *)v16[15];
  v467 = *((_QWORD *)v470 + 2);
  v179 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>((uint64_t)v178);
  v180 = v179[7];
  v466 = v179[8];
  if (v180 != v466)
  {
    v181 = (_QWORD *)v179[10];
    v475 = v178 + 15;
    v477 = v16 + 21;
    v479 = (uint64_t)v178;
    while (1)
    {
      v182 = (void *)v16[26];
      v16[27] = v182;
      v469 = v181;
      v183 = v181[2];
      if (v183 > (uint64_t)(v16[28] - (_QWORD)v182) >> 4)
      {
        if (v183 >> 60)
          goto LABEL_646;
        v184 = 16 * v183;
        v185 = (char *)operator new(16 * v183);
        v16[26] = v185;
        v16[27] = v185;
        v16[28] = &v185[v184];
        if (v182)
          operator delete(v182);
      }
      v186 = *(_QWORD **)v467;
      v187 = *(_QWORD **)(v467 + 8);
      v468 = v180;
      if (*(_QWORD **)v467 != v187)
      {
        while (*v186 != 0x41D4E9297E100630)
        {
          v186 += 5;
          if (v186 == v187)
            goto LABEL_285;
        }
      }
      if (v186 == v187)
      {
LABEL_285:
        v484 = 0;
      }
      else
      {
        v188 = (std::__shared_weak_count *)v186[4];
        v484 = (md::VKMRenderResourcesStore *)v186[3];
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
          do
            v191 = __ldaxr(v189);
          while (__stlxr(v191 - 1, v189));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      v192 = (_QWORD *)*v469;
      if ((_QWORD *)*v469 != v469 + 1)
        break;
LABEL_269:
      v181 = v469 + 3;
      v180 = v468 + 8;
      if (v468 + 8 == v466)
        goto LABEL_562;
    }
    while (1)
    {
      v193 = v192[4];
      v194 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v477, (unsigned __int8 *)(v193 + 16));
      if (!v194)
        goto LABEL_318;
      v195 = v194;
      v197 = (_QWORD *)v16[18];
      v196 = (_QWORD *)v16[19];
      if (v197 == v196)
      {
        v198 = v16[18];
      }
      else
      {
        v198 = v16[18];
        while (*(uint64_t **)v198 != v194[16]
             || *(unsigned __int16 *)(v198 + 8) != *((unsigned __int16 *)v194 + 68)
             || *(unsigned __int16 *)(v198 + 10) != *((unsigned __int16 *)v194 + 69)
             || *(_DWORD *)(v198 + 12) != *((_DWORD *)v194 + 35))
        {
          v198 += 16;
          if ((_QWORD *)v198 == v196)
          {
            v198 = v16[19];
            break;
          }
        }
      }
      v199 = (_QWORD *)(v198 + 16);
      if ((_QWORD *)(v198 + 16) != v196)
      {
        v200 = (unint64_t)v196 - v198 - 32;
        if (v200 >= 0x30)
        {
          v201 = (v198 - (uint64_t)v197) >> 4;
          v202 = (v200 >> 4) + 1;
          v203 = 16 * (v202 & 0x1FFFFFFFFFFFFFFCLL);
          v198 += v203;
          v204 = (double *)&v197[2 * v201 + 4];
          v205 = v202 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v206 = v204 - 2;
            v527 = vld2q_f64(v206);
            v207 = v204 + 2;
            v529 = vld2q_f64(v207);
            v208 = v204 - 4;
            vst2q_f64(v208, v527);
            vst2q_f64(v204, v529);
            v204 += 8;
            v205 -= 4;
          }
          while (v205);
          if (v202 == (v202 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_307;
          v199 = (_QWORD *)((char *)v199 + v203);
        }
        do
        {
          *(_QWORD *)v198 = *v199;
          *(_QWORD *)(v198 + 8) = v199[1];
          v198 += 16;
          v199 += 2;
        }
        while (v199 != v196);
      }
LABEL_307:
      v16[19] = v198;
      v209 = v194[16];
      if (v209)
      {
        v210 = v16[17];
        if (*(_QWORD *)(v210 + 16))
        {
          (*(void (**)(uint64_t *))*v209)(v194[16]);
          *v209 = *(_QWORD *)(v210 + 40);
          *(_QWORD *)(v210 + 40) = v209;
        }
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v477, v195);
      v211 = __p[0];
      if (__p[0])
      {
        if ((_BYTE)v489)
        {
          if (*((_BYTE *)__p[0] + 112))
            *((_BYTE *)__p[0] + 112) = 0;
          v212 = (void *)v211[4];
          if (v212 != (void *)v211[6])
            free(v212);
        }
        operator delete(v211);
      }
      v193 = v192[4];
LABEL_318:
      v213 = v192[5];
      *(_QWORD *)&v525 = v193;
      *((_QWORD *)&v525 + 1) = v213;
      if (v213)
      {
        v214 = (unint64_t *)(v213 + 8);
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
      }
      LOWORD(v524[0]) = *(_WORD *)(v193 + 168);
      *(_QWORD *)((char *)v524 + 4) = *(_QWORD *)(v193 + 172);
      v216 = *(double *)(v193 + 600);
      v217 = *(double *)(v193 + 608);
      md::GeometryContext::transformConstantData((double *)&v522, v471, (unsigned __int8 *)v524, v472, v216, v217);
      v218 = v16[17];
      v219 = *((_BYTE *)v192 + 48);
      v220 = *(_QWORD *)(v218 + 40);
      if (!v220)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab((uint64_t **)v16[17]);
        v220 = *(_QWORD *)(v218 + 40);
      }
      *(_QWORD *)(v218 + 40) = *(_QWORD *)v220;
      md::DaVinciGroundRenderable::DaVinciGroundRenderable(v220, (uint64_t *)&v525, v219, (v472 - 1) < 3u, &v522);
      v221 = gdc::Registry::create((gdc::Registry *)v178);
      v222 = v221;
      v224 = (uint64_t *)v16[27];
      v223 = v16[28];
      if ((unint64_t)v224 >= v223)
      {
        v226 = (uint64_t *)v16[26];
        v227 = ((char *)v224 - (char *)v226) >> 4;
        v228 = v227 + 1;
        if ((unint64_t)(v227 + 1) >> 60)
          goto LABEL_642;
        v229 = v223 - (_QWORD)v226;
        if (v229 >> 3 > v228)
          v228 = v229 >> 3;
        if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF0)
          v230 = 0xFFFFFFFFFFFFFFFLL;
        else
          v230 = v228;
        if (v230)
        {
          if (v230 >> 60)
            goto LABEL_643;
          v231 = (char *)operator new(16 * v230);
        }
        else
        {
          v231 = 0;
        }
        v232 = (uint64_t *)&v231[16 * v227];
        *v232 = v220;
        v232[1] = v222;
        v233 = v232;
        if (v224 == v226)
        {
          v16 = a1;
        }
        else
        {
          v16 = a1;
          do
          {
            *((_OWORD *)v233 - 1) = *((_OWORD *)v224 - 1);
            v233 -= 2;
            v224 -= 2;
          }
          while (v224 != v226);
          v224 = (uint64_t *)a1[26];
        }
        v225 = v232 + 2;
        v16[26] = v233;
        v16[27] = v232 + 2;
        v16[28] = &v231[16 * v230];
        if (v224)
          operator delete(v224);
        v178 = (uint64_t *)v479;
      }
      else
      {
        *v224 = v220;
        v224[1] = v221;
        v225 = v224 + 2;
      }
      v16[27] = v225;
      v235 = (uint64_t *)v16[19];
      v234 = v16[20];
      if ((unint64_t)v235 >= v234)
      {
        v237 = (uint64_t *)v16[18];
        v238 = ((char *)v235 - (char *)v237) >> 4;
        v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60)
LABEL_642:
          abort();
        v240 = v234 - (_QWORD)v237;
        if (v240 >> 3 > v239)
          v239 = v240 >> 3;
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0)
          v241 = 0xFFFFFFFFFFFFFFFLL;
        else
          v241 = v239;
        if (v241)
        {
          if (v241 >> 60)
            goto LABEL_643;
          v242 = (char *)operator new(16 * v241);
        }
        else
        {
          v242 = 0;
        }
        v243 = (uint64_t *)&v242[16 * v238];
        *v243 = v220;
        v243[1] = v222;
        v244 = v243;
        if (v235 == v237)
        {
          v16 = a1;
        }
        else
        {
          v16 = a1;
          do
          {
            *((_OWORD *)v244 - 1) = *((_OWORD *)v235 - 1);
            v244 -= 2;
            v235 -= 2;
          }
          while (v235 != v237);
          v235 = (uint64_t *)a1[18];
        }
        v236 = v243 + 2;
        v16[18] = v244;
        v16[19] = v243 + 2;
        v16[20] = &v242[16 * v241];
        if (v235)
          operator delete(v235);
        v178 = (uint64_t *)v479;
      }
      else
      {
        *v235 = v220;
        v235[1] = v222;
        v236 = v235 + 2;
      }
      v16[19] = v236;
      if ((_QWORD)v525)
        v245 = (uint64_t (***)(_QWORD))(v525 + 632);
      else
        v245 = 0;
      v482 = (std::__shared_weak_count *)*((_QWORD *)&v525 + 1);
      if (*((_QWORD *)&v525 + 1))
      {
        v246 = (unint64_t *)(*((_QWORD *)&v525 + 1) + 8);
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
      }
      v248 = (**v245)(v245);
      __p[0] = (void *)md::VKMRenderResourcesStore::createRenderableRegistryHandle(v484, v248);
      v249 = (uint64_t *)gdc::Registry::storage<md::ls::RegisterHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v249, v222, __p);
      *(_QWORD *)&v486 = 0x95A2ECE42CAA8051;
      v250 = (int8x8_t)v178[16];
      if (v250)
      {
        v251 = (uint8x8_t)vcnt_s8(v250);
        v251.i16[0] = vaddlv_u8(v251);
        if (v251.u32[0] > 1uLL)
        {
          v252 = 0x95A2ECE42CAA8051;
          if (*(_QWORD *)&v250 <= 0x95A2ECE42CAA8051)
            v252 = 0x95A2ECE42CAA8051 % *(_QWORD *)&v250;
        }
        else
        {
          v252 = (*(_QWORD *)&v250 - 1) & 0x95A2ECE42CAA8051;
        }
        v253 = *(_QWORD **)(*v475 + 8 * v252);
        if (v253)
        {
          v254 = (_QWORD *)*v253;
          if (v254)
          {
            if (v251.u32[0] < 2uLL)
            {
              v255 = *(_QWORD *)&v250 - 1;
              while (1)
              {
                v257 = v254[1];
                if (v257 == 0x95A2ECE42CAA8051)
                {
                  if (v254[2] == 0x95A2ECE42CAA8051)
                    goto LABEL_414;
                }
                else if ((v257 & v255) != v252)
                {
                  goto LABEL_389;
                }
                v254 = (_QWORD *)*v254;
                if (!v254)
                  goto LABEL_389;
              }
            }
            do
            {
              v256 = v254[1];
              if (v256 == 0x95A2ECE42CAA8051)
              {
                if (v254[2] == 0x95A2ECE42CAA8051)
                {
LABEL_414:
                  v258 = v254[3];
                  goto LABEL_392;
                }
              }
              else
              {
                if (v256 >= *(_QWORD *)&v250)
                  v256 %= *(_QWORD *)&v250;
                if (v256 != v252)
                  break;
              }
              v254 = (_QWORD *)*v254;
            }
            while (v254);
          }
        }
      }
LABEL_389:
      v258 = operator new();
      *(_QWORD *)(v258 + 16) = "md::ls::MapDataTypeT<md::MapDataType::InjectedFeatures>]";
      *(_QWORD *)(v258 + 24) = 55;
      *(_OWORD *)(v258 + 32) = 0u;
      *(_OWORD *)(v258 + 48) = 0u;
      *(_OWORD *)(v258 + 64) = 0u;
      *(_OWORD *)(v258 + 80) = 0u;
      *(_OWORD *)(v258 + 96) = 0u;
      *(_OWORD *)(v258 + 112) = 0u;
      *(_OWORD *)(v258 + 128) = 0u;
      *(_DWORD *)(v258 + 144) = 1065353216;
      *(_OWORD *)(v258 + 152) = 0u;
      *(_OWORD *)(v258 + 168) = 0u;
      *(_QWORD *)(v258 + 184) = 0;
      *(_DWORD *)(v258 + 192) = 1065353216;
      *(_OWORD *)(v258 + 200) = 0u;
      *(_OWORD *)(v258 + 216) = 0u;
      *(_QWORD *)(v258 + 232) = 0;
      *(_DWORD *)(v258 + 240) = 1065353216;
      *(_QWORD *)v258 = &off_1E4271328;
      *(_QWORD *)(v258 + 8) = 0x95A2ECE42CAA8051;
      *(_QWORD *)(v258 + 248) = v178;
      v259 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v475, 0x95A2ECE42CAA8051, &v486);
      v260 = v259[3];
      v259[3] = v258;
      if (v260)
        (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
      __p[0] = (void *)0x95A2ECE42CAA8051;
      __p[1] = "md::ls::MapDataTypeT<md::MapDataType::InjectedFeatures>]";
      *(_QWORD *)&v489 = 55;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v178, 0x95A2ECE42CAA8051, (uint64_t)__p, (uint64_t *)(v258 + 104));
LABEL_392:
      v509 = v222;
      v261 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v258 + 32), (uint64_t)&v509);
      if ((v262 & 1) != 0)
      {
        v268 = *(_BYTE **)(v258 + 88);
        v267 = *(_QWORD *)(v258 + 96);
        if ((unint64_t)v268 < v267)
        {
          *v268 = 0;
          v269 = (uint64_t)(v268 + 1);
LABEL_429:
          *(_QWORD *)(v258 + 88) = v269;
          v264 = *(_QWORD *)(v258 + 248);
          v16 = a1;
          goto LABEL_430;
        }
        v270 = *(_BYTE **)(v258 + 80);
        v271 = v268 - v270;
        v272 = v268 - v270 + 1;
        if (v272 < 0)
          abort();
        v273 = v267 - (_QWORD)v270;
        if (2 * v273 > v272)
          v272 = 2 * v273;
        if (v273 >= 0x3FFFFFFFFFFFFFFFLL)
          v274 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v274 = v272;
        if (v274)
          v275 = (char *)operator new(v274);
        else
          v275 = 0;
        v276 = &v275[v271];
        v275[v271] = 0;
        v269 = (uint64_t)&v275[v271 + 1];
        if (v268 == v270)
          goto LABEL_427;
        if (v271 >= 8 && (unint64_t)(v270 - v275) >= 0x20)
        {
          if (v271 < 0x20)
          {
            v277 = 0;
LABEL_419:
            v282 = v277 - (v271 & 0xFFFFFFFFFFFFFFF8);
            v283 = &v268[-v277];
            v284 = &v275[&v268[-v277] - v270 - 8];
            v285 = (uint64_t *)(v283 - 8);
            do
            {
              v286 = *v285--;
              *(_QWORD *)v284 = v286;
              v284 -= 8;
              v282 += 8;
            }
            while (v282);
            if (v271 != (v271 & 0xFFFFFFFFFFFFFFF8))
            {
              v276 -= v271 & 0xFFFFFFFFFFFFFFF8;
              v268 -= v271 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_424;
            }
LABEL_426:
            v276 = v275;
LABEL_427:
            *(_QWORD *)(v258 + 80) = v276;
            *(_QWORD *)(v258 + 88) = v269;
            *(_QWORD *)(v258 + 96) = &v275[v274];
            if (v270)
              operator delete(v270);
            goto LABEL_429;
          }
          v277 = v271 & 0xFFFFFFFFFFFFFFE0;
          v278 = &v275[v271 - 16];
          v279 = (__int128 *)(v268 - 16);
          v280 = v271 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v281 = *v279;
            *((_OWORD *)v278 - 1) = *(v279 - 1);
            *(_OWORD *)v278 = v281;
            v278 -= 32;
            v279 -= 2;
            v280 -= 32;
          }
          while (v280);
          if (v271 == v277)
            goto LABEL_426;
          if ((v271 & 0x18) != 0)
            goto LABEL_419;
          v276 -= v277;
          v268 -= v277;
        }
LABEL_424:
        v287 = v276 - 1;
        do
        {
          v288 = *--v268;
          *v287-- = v288;
        }
        while (v268 != v270);
        goto LABEL_426;
      }
      v263 = (_BYTE *)(*(_QWORD *)(v258 + 80) + (((uint64_t)v261 - *(_QWORD *)(v258 + 56)) >> 3));
      *v263 = 0;
      v264 = *(_QWORD *)(v258 + 248);
      if (v263 != *(_BYTE **)(v258 + 88))
      {
        v265 = *(_QWORD **)(v258 + 128);
        if (v265)
        {
          while (1)
          {
            __p[0] = &v509;
            __p[1] = (void *)1;
            *(_QWORD *)&v486 = v264;
            v266 = v265[6];
            if (!v266)
              goto LABEL_641;
            (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v266 + 48))(v266, &v486, __p);
            v265 = (_QWORD *)*v265;
            if (!v265)
              goto LABEL_433;
          }
        }
        goto LABEL_433;
      }
LABEL_430:
      v289 = *(_QWORD **)(v258 + 176);
      if (v289)
      {
        while (1)
        {
          __p[0] = &v509;
          __p[1] = (void *)1;
          *(_QWORD *)&v486 = v264;
          v290 = v289[6];
          if (!v290)
            break;
          (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v290 + 48))(v290, &v486, __p);
          v289 = (_QWORD *)*v289;
          if (!v289)
            goto LABEL_433;
        }
LABEL_641:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_646:
        abort();
      }
LABEL_433:
      LOWORD(__p[0]) = 62;
      v291 = (uint64_t *)gdc::Registry::storage<md::ls::MapDataTypeV>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(v291, v222, __p);
      __p[0] = (void *)((uint64_t)(v16[19] - v16[18]) >> 4);
      v292 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfReadyToProcess>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v292, v222, __p);
      LODWORD(__p[0]) = 0;
      v489 = 0uLL;
      __p[1] = 0;
      v293 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablesCount>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(v293, v222, (uint64_t)__p);
      if (__p[1])
        operator delete(__p[1]);
      v294 = (uint64_t *)gdc::Registry::storage<md::ls::WillEnterView>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v294, v222);
      v295 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)62>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v295, v222);
      __p[0] = (void *)md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(v484, (md::BaseMapTileDataRenderable *)v220);
      v296 = (uint64_t *)gdc::Registry::storage<md::ls::BaseMapTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v296, v222, __p);
      v297 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v297, v222);
      LOBYTE(__p[0]) = *(_BYTE *)(v220 + 24);
      v298 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v298, v222, __p);
      v521 = 0;
      v520 = 0;
      v299 = DWORD1(v524[0]);
      v300 = DWORD2(v524[0]);
      v301 = vcvtmd_s64_f64(v216 * 100.0);
      v302 = BYTE1(v524[0]);
      v303 = vcvtpd_s64_f64(v217 * 100.0);
      v513 = *(gdc::Registry **)((char *)v524 + 4);
      v514 = BYTE1(v524[0]);
      v515 = 0;
      v516 = 0;
      v517 = v301;
      v518 = v303;
      v519 = 3;
      v304 = (void *)md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(v484, (int *)&v513);
      if (v305)
      {
        v306 = v304;
        __p[0] = v304;
        v307 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v479);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v307, v222, __p);
        __p[0] = v306;
        v308 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)v484 + 3272, (unint64_t)v306, __p);
        ++v308[4];
        v178 = (uint64_t *)v479;
      }
      else
      {
        v309 = v522;
        v310 = v523;
        v511 = v522;
        v512 = v523;
        if (v523)
        {
          v311 = (unint64_t *)&v523->__shared_owners_;
          do
            v312 = __ldxr(v311);
          while (__stxr(v312 + 1, v311));
        }
        v313 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>((uint64_t)v484, v309, v310);
        if (v310)
        {
          v314 = (unint64_t *)&v310->__shared_owners_;
          do
            v315 = __ldaxr(v314);
          while (__stlxr(v315 - 1, v314));
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
            std::__shared_weak_count::__release_weak(v310);
          }
        }
        __p[0] = (void *)__PAIR64__(v300, v299);
        LOBYTE(__p[1]) = v302;
        *(_WORD *)((char *)&__p[1] + 1) = v520;
        BYTE3(__p[1]) = v521;
        HIDWORD(__p[1]) = v301;
        *(_QWORD *)&v489 = v303 | 0x300000000;
        *((_QWORD *)&v489 + 1) = v313;
        std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>((float *)v484 + 2656, (int *)__p, (uint64_t)__p);
        __p[0] = v313;
        v178 = (uint64_t *)v479;
        v316 = (uint64_t *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v479);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v316, v222, __p);
      }
      v16 = a1;
      __p[0] = (void *)md::VKMRenderResourcesStore::createAssociationtemHandle(v484);
      v317 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationTileHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v317, v222, __p);
      v318 = *(_QWORD *)(v220 + 384);
      v319 = *(_QWORD *)(v318 + 1304);
      v320 = *(void **)(v318 + 1168);
      LODWORD(__p[1]) = *(_DWORD *)(v318 + 1176);
      __p[0] = v320;
      v321 = (uint64_t *)gdc::Registry::storage<md::ls::TileUnitsPerMeter>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::emplace(v321, v222, (uint64_t *)__p);
      HasTileSharedStyleCamera = (uint64_t *)gdc::Registry::storage<md::ls::HasTileSharedStyleCameraLighting>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(HasTileSharedStyleCamera, v222);
      v323 = *(_QWORD *)(v220 + 400);
      v324 = *(std::__shared_weak_count **)(v220 + 408);
      v509 = v323;
      v510 = v324;
      if (v324)
      {
        v325 = (unint64_t *)&v324->__shared_owners_;
        do
          v326 = __ldxr(v325);
        while (__stxr(v326 + 1, v325));
        v508 = v324;
        do
          v327 = __ldxr(v325);
        while (__stxr(v327 + 1, v325));
      }
      else
      {
        v508 = 0;
      }
      v507 = v323;
      v328 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v484, v323, v324);
      if (v324)
      {
        v329 = (unint64_t *)&v324->__shared_owners_;
        do
          v330 = __ldaxr(v329);
        while (__stlxr(v330 - 1, v329));
        if (!v330)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
      }
      __p[0] = v328;
      v331 = (uint64_t *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v331, v222, __p);
      v332 = *(_QWORD *)(v220 + 416);
      v333 = *(std::__shared_weak_count **)(v220 + 424);
      v505 = v332;
      v506 = v333;
      if (v333)
      {
        v334 = (unint64_t *)&v333->__shared_owners_;
        do
          v335 = __ldxr(v334);
        while (__stxr(v335 + 1, v334));
        if (!v332)
          goto LABEL_473;
        v503 = v332;
        v504 = v333;
        do
          v336 = __ldxr(v334);
        while (__stxr(v336 + 1, v334));
      }
      else
      {
        if (!v332)
          goto LABEL_473;
        v333 = 0;
        v503 = v332;
        v504 = 0;
      }
      v337 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>((uint64_t)v484, v332, v333);
      if (v333)
      {
        v338 = (unint64_t *)&v333->__shared_owners_;
        do
          v339 = __ldaxr(v338);
        while (__stlxr(v339 - 1, v338));
        if (!v339)
        {
          ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
          std::__shared_weak_count::__release_weak(v333);
        }
      }
      __p[0] = v337;
      v340 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v340, v222, __p);
LABEL_473:
      v341 = *(_QWORD *)(v220 + 432);
      v342 = *(std::__shared_weak_count **)(v220 + 440);
      v501 = v341;
      v502 = v342;
      if (v342)
      {
        v343 = (unint64_t *)&v342->__shared_owners_;
        do
          v344 = __ldxr(v343);
        while (__stxr(v344 + 1, v343));
        if (!v341)
          goto LABEL_488;
        v499 = v341;
        v500 = v342;
        do
          v345 = __ldxr(v343);
        while (__stxr(v345 + 1, v343));
      }
      else
      {
        if (!v341)
          goto LABEL_488;
        v342 = 0;
        v499 = v341;
        v500 = 0;
      }
      v346 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::LinearDepth,md::VoidKeyType>((uint64_t)v484, v341, v342);
      if (v342)
      {
        v347 = (unint64_t *)&v342->__shared_owners_;
        do
          v348 = __ldaxr(v347);
        while (__stlxr(v348 - 1, v347));
        if (!v348)
        {
          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
          std::__shared_weak_count::__release_weak(v342);
        }
      }
      __p[0] = v346;
      v349 = (uint64_t *)gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v349, v222, __p);
LABEL_488:
      v350 = *(_QWORD *)(v220 + 448);
      v351 = *(std::__shared_weak_count **)(v220 + 456);
      v497 = v350;
      v498 = v351;
      if (v351)
      {
        v352 = (unint64_t *)&v351->__shared_owners_;
        do
          v353 = __ldxr(v352);
        while (__stxr(v353 + 1, v352));
        if (!v350)
          goto LABEL_503;
        v495 = v350;
        v496 = v351;
        do
          v354 = __ldxr(v352);
        while (__stxr(v354 + 1, v352));
      }
      else
      {
        if (!v350)
          goto LABEL_503;
        v351 = 0;
        v495 = v350;
        v496 = 0;
      }
      v355 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::StyleCameraLighting,md::VoidKeyType>((uint64_t)v484, v350, v351);
      if (v351)
      {
        v356 = (unint64_t *)&v351->__shared_owners_;
        do
          v357 = __ldaxr(v356);
        while (__stlxr(v357 - 1, v356));
        if (!v357)
        {
          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
          std::__shared_weak_count::__release_weak(v351);
        }
      }
      __p[0] = v355;
      v358 = (uint64_t *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v358, v222, __p);
LABEL_503:
      v359 = *(_QWORD *)(v220 + 216);
      v360 = *(std::__shared_weak_count **)(v220 + 224);
      v493 = v359;
      v494 = v360;
      if (v360)
      {
        v361 = (unint64_t *)&v360->__shared_owners_;
        do
          v362 = __ldxr(v361);
        while (__stxr(v362 + 1, v361));
      }
      v363 = (void *)md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::View,md::VoidKeyType>((uint64_t)v484, v359, v360);
      if (v360)
      {
        v364 = (unint64_t *)&v360->__shared_owners_;
        do
          v365 = __ldaxr(v364);
        while (__stlxr(v365 - 1, v364));
        if (!v365)
        {
          ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
          std::__shared_weak_count::__release_weak(v360);
        }
      }
      __p[0] = v363;
      v366 = (uint64_t *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v366, v222, __p);
      BYTE8(v489) = 1;
      v367 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::emplace(v367, v222, (uint64_t)__p);
      v368 = *(double *)(v220 + 72) - *(double *)(v220 + 56);
      *(float *)__p = v368;
      v369 = (uint64_t *)gdc::Registry::storage<md::ls::BoundsWidth>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v369, v222, __p);
      v370 = *(_OWORD *)(v220 + 72);
      *(_OWORD *)__p = *(_OWORD *)(v220 + 56);
      v489 = v370;
      v371 = (uint64_t *)gdc::Registry::storage<md::ls::TileBounds>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(v371, v222, (uint64_t)__p);
      __p[0] = (void *)md::VKMRenderResourcesStore::createSharedTileMatrix((uint64_t)v484, (__int128 *)(v220 + 88));
      v372 = (uint64_t *)gdc::Registry::storage<md::ls::TileMatrix>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v372, v222, __p);
      v490 = 0;
      v491 = 0;
      v492 = 0;
      *(_QWORD *)&v486 = md::VKMRenderResourcesStore::createRenderableData((uint64_t)v484, __p);
      v373 = (uint64_t *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v373, v222, &v486);
      LOBYTE(v486) = 0;
      v374 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v374, v222, &v486);
      if (v319)
      {
        *(_QWORD *)&v486 = v319;
        v375 = (uint64_t *)gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>((uint64_t)v178);
        gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v375, v222, &v486);
      }
      v376 = *(_BYTE *)(v220 + 48);
      v486 = v525;
      if (*((_QWORD *)&v525 + 1))
      {
        v377 = (unint64_t *)(*((_QWORD *)&v525 + 1) + 8);
        do
          v378 = __ldxr(v377);
        while (__stxr(v378 + 1, v377));
      }
      v487 = v376;
      v379 = (uint64_t *)gdc::Registry::storage<md::ls::LayerDataReference>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::emplace(v379, v222, &v486);
      v380 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
      if (*((_QWORD *)&v486 + 1))
      {
        v381 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
        do
          v382 = __ldaxr(v381);
        while (__stlxr(v382 - 1, v381));
        if (!v382)
        {
          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
          std::__shared_weak_count::__release_weak(v380);
        }
      }
      v383 = (uint64_t *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v383, v222);
      *(_QWORD *)&v486 = v220;
      v384 = (uint64_t *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>((uint64_t)v178);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v384, v222, &v486);
      v385 = v498;
      if (!v498)
        goto LABEL_525;
      v386 = (unint64_t *)&v498->__shared_owners_;
      do
        v387 = __ldaxr(v386);
      while (__stlxr(v387 - 1, v386));
      if (!v387)
      {
        ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
        std::__shared_weak_count::__release_weak(v385);
        v388 = v502;
        if (!v502)
          goto LABEL_531;
      }
      else
      {
LABEL_525:
        v388 = v502;
        if (!v502)
          goto LABEL_531;
      }
      v389 = (unint64_t *)&v388->__shared_owners_;
      do
        v390 = __ldaxr(v389);
      while (__stlxr(v390 - 1, v389));
      if (!v390)
      {
        ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
        std::__shared_weak_count::__release_weak(v388);
      }
LABEL_531:
      v391 = v506;
      if (!v506)
        goto LABEL_535;
      v392 = (unint64_t *)&v506->__shared_owners_;
      do
        v393 = __ldaxr(v392);
      while (__stlxr(v393 - 1, v392));
      if (!v393)
      {
        ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
        std::__shared_weak_count::__release_weak(v391);
        v394 = v510;
        if (!v510)
          goto LABEL_541;
      }
      else
      {
LABEL_535:
        v394 = v510;
        if (!v510)
          goto LABEL_541;
      }
      v395 = (unint64_t *)&v394->__shared_owners_;
      do
        v396 = __ldaxr(v395);
      while (__stlxr(v396 - 1, v395));
      if (!v396)
      {
        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
        std::__shared_weak_count::__release_weak(v394);
      }
      if (!v482)
        goto LABEL_545;
LABEL_541:
      v397 = (unint64_t *)&v482->__shared_owners_;
      do
        v398 = __ldaxr(v397);
      while (__stlxr(v398 - 1, v397));
      if (!v398)
      {
        ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
        std::__shared_weak_count::__release_weak(v482);
        v399 = v523;
        if (!v523)
          goto LABEL_551;
      }
      else
      {
LABEL_545:
        v399 = v523;
        if (!v523)
          goto LABEL_551;
      }
      v400 = (unint64_t *)&v399->__shared_owners_;
      do
        v401 = __ldaxr(v400);
      while (__stlxr(v401 - 1, v400));
      if (!v401)
      {
        ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
        std::__shared_weak_count::__release_weak(v399);
      }
LABEL_551:
      v402 = (std::__shared_weak_count *)*((_QWORD *)&v525 + 1);
      if (!*((_QWORD *)&v525 + 1))
        goto LABEL_555;
      v403 = (unint64_t *)(*((_QWORD *)&v525 + 1) + 8);
      do
        v404 = __ldaxr(v403);
      while (__stlxr(v404 - 1, v403));
      if (!v404)
      {
        ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
        std::__shared_weak_count::__release_weak(v402);
        v405 = (_QWORD *)v192[1];
        if (!v405)
        {
          do
          {
LABEL_559:
            v406 = (_QWORD *)v192[2];
            v407 = *v406 == (_QWORD)v192;
            v192 = v406;
          }
          while (!v407);
          goto LABEL_288;
        }
      }
      else
      {
LABEL_555:
        v405 = (_QWORD *)v192[1];
        if (!v405)
          goto LABEL_559;
      }
      do
      {
        v406 = v405;
        v405 = (_QWORD *)*v405;
      }
      while (v405);
LABEL_288:
      v192 = v406;
      if (v406 == v469 + 1)
        goto LABEL_269;
    }
  }
LABEL_562:
  v513 = (gdc::Registry *)v16[15];
  v408 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>((uint64_t)v513);
  v409 = (md::VKMRenderResourcesStore *)v408[7];
  v485 = (md::VKMRenderResourcesStore *)v408[8];
  v410 = v16;
  if (v409 != v485)
  {
    v411 = v408[10];
    v412 = v410 + 21;
    v413 = (uint64_t ***)(v411 + 8);
    do
    {
      v420 = (char *)v410[18];
      v414 = (char *)v410[19];
      if (v420 != v414)
      {
        while (1)
        {
          v421 = *(_QWORD *)(*(_QWORD *)v420 + 384);
          v422 = *(std::__shared_weak_count **)(*(_QWORD *)v420 + 392);
          if (v422)
          {
            v423 = (unint64_t *)&v422->__shared_owners_;
            do
              v424 = __ldxr(v423);
            while (__stxr(v424 + 1, v423));
            v425 = *(unsigned __int8 *)(*(_QWORD *)v420 + 48);
            do
              v426 = __ldxr(v423);
            while (__stxr(v426 + 1, v423));
            for (m = *(uint64_t ***)(v411 + 8); m; m = (uint64_t **)*m)
            {
LABEL_579:
              v429 = *((unsigned __int8 *)m + 48);
              v430 = *((char *)m + 48) > (char)v425;
              v431 = (unint64_t)m[4];
              if (v425 == v429)
                v430 = v421 < v431;
              if (!v430)
              {
                v432 = v431 < v421;
                if (v425 == v429)
                  v433 = v432;
                else
                  v433 = (char)v429 < (char)v425;
                if (!v433)
                {
                  v428 = 1;
                  if (v422)
                    goto LABEL_587;
                  goto LABEL_594;
                }
                ++m;
              }
            }
          }
          else
          {
            v425 = *(unsigned __int8 *)(*(_QWORD *)v420 + 48);
            m = *(uint64_t ***)(v411 + 8);
            if (m)
              goto LABEL_579;
          }
          v428 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v412, (unsigned __int8 *)(v421 + 16)) != 0;
          if (v422)
          {
LABEL_587:
            v434 = (unint64_t *)&v422->__shared_owners_;
            do
              v435 = __ldaxr(v434);
            while (__stlxr(v435 - 1, v434));
            if (!v435)
            {
              ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
              std::__shared_weak_count::__release_weak(v422);
            }
            do
              v436 = __ldaxr(v434);
            while (__stlxr(v436 - 1, v434));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
              std::__shared_weak_count::__release_weak(v422);
            }
          }
LABEL_594:
          if (!v428)
            break;
LABEL_595:
          v420 += 16;
          if (v420 == v414)
            goto LABEL_565;
        }
        while (1)
        {
          v437 = v414;
          v414 -= 16;
          if (v420 == v414)
            break;
          v438 = *(_QWORD *)(*(_QWORD *)v414 + 384);
          v439 = *(std::__shared_weak_count **)(*(_QWORD *)v414 + 392);
          if (v439)
          {
            v440 = (unint64_t *)&v439->__shared_owners_;
            do
              v441 = __ldxr(v440);
            while (__stxr(v441 + 1, v440));
            v442 = *(unsigned __int8 *)(*(_QWORD *)v414 + 48);
            do
              v443 = __ldxr(v440);
            while (__stxr(v443 + 1, v440));
            for (n = *v413; n; n = (uint64_t **)*n)
            {
LABEL_610:
              v446 = *((unsigned __int8 *)n + 48);
              v447 = *((char *)n + 48) > (char)v442;
              v448 = (unint64_t)n[4];
              if (v442 == v446)
                v447 = v438 < v448;
              if (!v447)
              {
                v449 = v448 < v438;
                if (v442 == v446)
                  v450 = v449;
                else
                  v450 = (char)v446 < (char)v442;
                if (!v450)
                {
                  v445 = 1;
                  if (v439)
                    goto LABEL_619;
                  goto LABEL_597;
                }
                ++n;
              }
            }
          }
          else
          {
            v442 = *(unsigned __int8 *)(*(_QWORD *)v414 + 48);
            n = *v413;
            if (*v413)
              goto LABEL_610;
          }
          v445 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v412, (unsigned __int8 *)(v438 + 16)) != 0;
          if (v439)
          {
LABEL_619:
            v451 = (unint64_t *)&v439->__shared_owners_;
            do
              v452 = __ldaxr(v451);
            while (__stlxr(v452 - 1, v451));
            if (!v452)
            {
              ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
              std::__shared_weak_count::__release_weak(v439);
            }
            do
              v453 = __ldaxr(v451);
            while (__stlxr(v453 - 1, v451));
            if (!v453)
            {
              ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
              std::__shared_weak_count::__release_weak(v439);
            }
          }
LABEL_597:
          if (v445)
          {
            v454 = *(_QWORD *)v420;
            *(_QWORD *)v420 = *((_QWORD *)v437 - 2);
            *((_QWORD *)v437 - 2) = v454;
            v455 = *((_QWORD *)v420 + 1);
            *((_QWORD *)v420 + 1) = *((_QWORD *)v437 - 1);
            *((_QWORD *)v437 - 1) = v455;
            goto LABEL_595;
          }
        }
      }
      v414 = v420;
LABEL_565:
      v410 = a1;
      v415 = (void *)a1[19];
      v416 = v513;
      __p[0] = v414;
      __p[1] = v415;
      v524[0] = *((_OWORD *)a1 + 13);
      v417 = gdc::Registry::create(v513);
      v418 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>((uint64_t)v416);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v418, v417, __p);
      v419 = (uint64_t *)gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>((uint64_t)v416);
      gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v419, v417, v524);
      v411 += 24;
      v409 = (md::VKMRenderResourcesStore *)((char *)v409 + 8);
      v413 += 3;
    }
    while (v409 != v485);
  }
  result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v410[15]);
  if (*(_QWORD *)(result + 88) != *(_QWORD *)(result + 80))
  {
    v457 = *(uint64_t **)v410[16];
    if (v457 != *(uint64_t **)(v410[16] + 8) && *v457 != 0x22D45F5AAD4BF408)
    {
      v458 = v457 + 5;
      do
      {
        v459 = *v458;
        v458 += 5;
      }
      while (v459 != 0x22D45F5AAD4BF408);
      v457 = v458 - 5;
    }
    v460 = (uint64_t (***)(_QWORD))v457[3];
    v461 = (std::__shared_weak_count *)v457[4];
    if (v461)
    {
      v462 = (unint64_t *)&v461->__shared_owners_;
      do
        v463 = __ldxr(v462);
      while (__stxr(v463 + 1, v462));
      do
        v464 = __ldaxr(v462);
      while (__stlxr(v464 - 1, v462));
      if (!v464)
      {
        ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
        std::__shared_weak_count::__release_weak(v461);
      }
    }
    result = (**v460)(v460);
    **(_BYTE **)(result + 736) = 1;
  }
  *a4 = v410[15];
  return result;
}

