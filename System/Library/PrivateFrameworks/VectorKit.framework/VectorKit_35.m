void sub_19FDD3694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  operator delete(v23);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a23);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t md::ARLabelLayer::layoutWithoutStyles(md::ARLabelLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ARLabelLayer *, const md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

void md::HybridLabelMapTile::~HybridLabelMapTile(md::HybridLabelMapTile *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E42948C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  md::LabelMapTile::~LabelMapTile(this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E42948C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::HybridLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, float64x2_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  double v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *(std::__shared_weak_count **)(a1 + 504);
  if (!v3)
    return 0.0;
  v5 = std::__shared_weak_count::lock(v3);
  v17 = v5;
  v6 = 0.0;
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 496);
    v16 = v8;
    if (v8)
    {
      v14 = vdivq_f64(vsubq_f64(*a2, *(float64x2_t *)(a1 + 40)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(a1 + 56) - *(double *)(a1 + 40)), 0));
      v15 = 0;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      if ((*(unsigned int (**)(uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)v9 + 16))(v9, &v14, 0))
        v6 = v14.f64[0];
      else
        v6 = 0.0;
    }
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_19FDD3A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::HybridLabelMapTile::assignWorldPointToLabel(md::HybridLabelMapTile *this, md::Label *a2)
{
  std::__shared_weak_count *v3;
  double v5;
  double v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  md::LabelPoint *v10;
  uint64_t v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __double2 v17;
  double v18;
  __double2 v19;
  double v20;
  long double v21;
  float v22;
  float v23;
  double v24;
  long double v25;
  double v26;
  __double2 v27;
  double v28;
  __double2 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  BOOL v37;
  float v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  _QWORD v49[6];
  char v50;
  char v51[8];
  float64x2_t v52;
  float64x2_t v53;
  __int128 v54;
  long double v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  long double v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  if (v3)
  {
    v5 = *((double *)this + 7);
    v6 = *((double *)this + 5);
    v7 = std::__shared_weak_count::lock(v3);
    v60 = v7;
    if (v7)
    {
      v8 = v7;
      v9 = *((_QWORD *)this + 62);
      v59 = v9;
      if (!v9)
        goto LABEL_19;
      v51[0] = 0;
      v58 = 0xC7EFFFFFE0000000;
      v10 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)a2 + 1) + 112))(*((_QWORD *)a2 + 1), (char *)a2 + 48);
      v52 = vdivq_f64(vsubq_f64(*(float64x2_t *)md::LabelPoint::mercatorPoint(v10), *(float64x2_t *)((char *)this + 40)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*((double *)this + 7) - *((double *)this + 5)), 0));
      (*(void (**)(_QWORD *__return_ptr, _QWORD, char *, double))(**((_QWORD **)a2 + 1) + 128))(v49, *((_QWORD *)a2 + 1), (char *)a2 + 48, (v5 - v6) * 0.2);
      if (v50)
      {
        v51[0] = 1;
        v53 = vdivq_f64(vsubq_f64(*(float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v49), *(float64x2_t *)((char *)this + 40)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*((double *)this + 7) - *((double *)this + 5)), 0));
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v11 + 24))(v11, v51) & 1) == 0)
        goto LABEL_19;
      v12 = v54;
      v13 = v55;
      v14 = sqrt(*(double *)&v54 * *(double *)&v54 + *((double *)&v54 + 1) * *((double *)&v54 + 1));
      v15 = atan2(v55, v14 * 0.996647189);
      v16 = atan2(*((long double *)&v12 + 1), *(long double *)&v12);
      v17 = __sincos_stret(v15);
      v18 = atan2(v13 + v17.__sinval * v17.__sinval * 42841.3115 * v17.__sinval, v14 + v17.__cosval * v17.__cosval * -42697.6727 * v17.__cosval);
      v19 = __sincos_stret(v18);
      v20 = v14 / v19.__cosval - 6378137.0 / sqrt(1.0 - v19.__sinval * v19.__sinval * 0.00669437999);
      v21 = tan(v18 * 0.5 + 0.785398163);
      if (v20 == 1.79769313e308)
      {
        v23 = 3.4028e38;
      }
      else
      {
        v22 = v20;
        v23 = v22;
      }
      v24 = atan(v21) * 2.0 + -1.57079633;
      v25 = fmod(v16 + 3.14159265, 6.28318531);
      v26 = fmod(v25 + 6.28318531, 6.28318531) + -3.14159265;
      v27 = __sincos_stret(v24);
      v28 = 6378137.0 / sqrt(1.0 - v27.__sinval * v27.__sinval * 0.00669437999);
      v29 = __sincos_stret(v26);
      v30 = v28 * v27.__cosval * v29.__cosval;
      v31 = v28 * v27.__cosval * v29.__sinval;
      v32 = v27.__sinval * 0.99330562 * v28;
      v33 = 1.0
          / sqrt(v30 * 2.45817226e-14 * (v30 * 2.45817226e-14)+ v31 * 2.45817226e-14 * (v31 * 2.45817226e-14)+ v32 * 2.4747391e-14 * (v32 * 2.4747391e-14));
      v35.f64[0] = v33 * (v30 * 2.45817226e-14);
      v34 = v33 * (v31 * 2.45817226e-14);
      *((_QWORD *)a2 + 65) = *(_QWORD *)&v35.f64[0];
      v35.f64[1] = v34;
      v36 = v33 * (v32 * 2.4747391e-14);
      v37 = v23 != 3.4028e38;
      v38 = 0.0;
      if (v23 != 3.4028e38)
        v38 = v23;
      *((float *)a2 + 47) = v38;
      *((_BYTE *)a2 + 192) = v37;
      *((_BYTE *)a2 + 835) = v37;
      *((double *)a2 + 62) = v30;
      *((double *)a2 + 63) = v31;
      *((double *)a2 + 64) = v32;
      v39 = 0.0;
      if (v23 != 3.4028e38)
        v39 = v38;
      v40 = *((double *)a2 + 29) * v39;
      *((double *)a2 + 82) = v40;
      *((float64x2_t *)a2 + 34) = vmulq_n_f64(v35, v40);
      *((double *)a2 + 70) = v36 * v40;
      *((double *)a2 + 66) = v34;
      *((double *)a2 + 67) = v36;
      if (v51[0])
      {
        v41 = *((double *)this + 7);
        v47 = v52;
        v48 = *(float64x2_t *)((char *)this + 40);
        v46 = v53;
        v63 = v54;
        v64 = v55;
        v61 = v56;
        v62 = v57;
        v42 = operator new();
        *(float64x2_t *)v42 = vmlaq_n_f64(v48, v47, v41 - v48.f64[0]);
        *(float64x2_t *)(v42 + 16) = vmlaq_n_f64(v48, v46, v41 - v48.f64[0]);
        *(_OWORD *)(v42 + 32) = v63;
        *(long double *)(v42 + 48) = v64;
        *(_OWORD *)(v42 + 56) = v61;
        *(_QWORD *)(v42 + 72) = v62;
        *(_BYTE *)(v42 + 208) = 0;
        v43 = *((_QWORD *)a2 + 84);
        *((_QWORD *)a2 + 84) = v42;
        if (v43)
          MEMORY[0x1A1AF4E00](v43, 0x1000C4015B1EB14);
        *((_BYTE *)a2 + 1293) = 1;
      }
      v8 = v60;
      if (v60)
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19FDD3EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t md::RouteLineSupport::onRouteContextStateDidChange(uint64_t this, VKRouteContext *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = this;
    this = objc_msgSend(*(id *)(this + 24), "resetNotificationsForObserverType:", 2);
    *(_BYTE *)(v2 + 250) = 1;
  }
  return this;
}

void md::RouteLineSupport::~RouteLineSupport(md::RouteLineSupport *this)
{
  md::RouteLineSupport::~RouteLineSupport(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  *(_QWORD *)this = &off_1E4292188;
  *((_QWORD *)this + 47) = &off_1E4274658;

  *((_QWORD *)this + 44) = &off_1E42B4A30;
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 320, *((_QWORD *)this + 41));
  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v3 = *((_QWORD *)this + 37);
    v4 = *((_QWORD *)this + 36);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 37) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 39) + 40))(*((_QWORD *)this + 39), v4, *((_QWORD *)this + 38) - v4);
  }
  v8 = *((_QWORD *)this + 33);
  if (v8)
  {
    v9 = *((_QWORD *)this + 34);
    v10 = (void *)*((_QWORD *)this + 33);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v8;
    operator delete(v10);
  }
  v14 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v14)
    MEMORY[0x1A1AF4E00](v14, 0x20C4093837F09);

  v15 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v15)
  {
    v16 = *(uint64_t **)(v15 + 96);
    *(_QWORD *)(v15 + 96) = 0;
    if (v16)
      std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v16);
    v17 = *(_QWORD *)(v15 + 64);
    if (v17)
    {
      *(_QWORD *)(v15 + 72) = v17;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 88) + 40))(*(_QWORD *)(v15 + 88), v17, *(_QWORD *)(v15 + 80) - v17);
    }
    v18 = *(_QWORD *)(v15 + 32);
    if (v18)
    {
      *(_QWORD *)(v15 + 40) = v18;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 56) + 40))(*(_QWORD *)(v15 + 56), v18, *(_QWORD *)(v15 + 48) - v18);
    }
    *(_QWORD *)v15 = &off_1E42B4C30;

    MEMORY[0x1A1AF4E00](v15, 0x10A0C404022D907);
  }
  *((_QWORD *)this + 22) = &off_1E42B5290;

  v19 = (_QWORD *)*((_QWORD *)this + 18);
  if (v19)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19));
      v19 = v20;
    }
    while (v20);
  }
  v21 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v21)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), v21, 8 * *((_QWORD *)this + 16));
  v22 = *((_QWORD *)this + 11);
  if (v22)
  {
    v23 = *((_QWORD *)this + 12);
    v24 = *((_QWORD *)this + 11);
    if (v23 != v22)
    {
      do
      {
        v25 = *(std::__shared_weak_count **)(v23 - 8);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v25->__on_zero_shared)(v25, v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = *((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), v24, *((_QWORD *)this + 13) - v24);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)this + 40, *((_QWORD *)this + 6));
  *((_QWORD *)this + 2) = &off_1E42B4B90;

}

uint64_t std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 88);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 96);
      v6 = *(_QWORD *)(a2 + 88);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(_QWORD *)(a2 + 88);
      }
      *(_QWORD *)(a2 + 96) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 112) + 40))(*(_QWORD *)(a2 + 112), v6, *(_QWORD *)(a2 + 104) - v6);
    }
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 64);
      v12 = *(_QWORD *)(a2 + 56);
      if (v11 != v10)
      {
        do
        {
          v13 = *(std::__shared_weak_count **)(v11 - 8);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v13->__on_zero_shared)(v13, v12);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 16;
        }
        while (v11 != v10);
        v12 = *(_QWORD *)(a2 + 56);
      }
      *(_QWORD *)(a2 + 64) = v10;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 80) + 40))(*(_QWORD *)(a2 + 80), v12, *(_QWORD *)(a2 + 72) - v12);
    }
    v16 = *(std::__shared_weak_count **)(a2 + 48);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 120);
  }
  return result;
}

uint64_t geo::_retain_ptr<VKRouteLineObserverForExternalFeatures * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E4274658;

  return a1;
}

void geo::_retain_ptr<VKRouteLineObserverForExternalFeatures * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E4274658;

  JUMPOUT(0x1A1AF4E00);
}

void sub_19FDD4560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FDD45D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKRouteLineObserverForExternalFeatures;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FDD46B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279BA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279BA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  md::RouteLineSupport::generateRoutelineFeatures(*(id **)(a1 + 8));
}

void md::RouteLineSupport::generateRoutelineFeatures(id *this)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  VKRouteRangeAnnotationInfo *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  VKRouteRangeAnnotationInfo *v17;
  unint64_t v18;
  uint64_t j;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  double v33;
  double v34;
  unsigned int v35;
  BOOL v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  BOOL v57;
  unint64_t v58;
  uint64_t v59;
  float v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  id *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  char *v127;
  char *k;
  char *v129;
  void *v130;
  void *v131;
  BOOL v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  std::__shared_weak_count **v138;
  std::__shared_weak_count **v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  std::__shared_weak_count **v148;
  char *v149;
  unint64_t v150;
  __int128 v151;
  std::__shared_weak_count **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned __int8 v156;
  void *v157;
  _QWORD *v158;
  unint64_t m;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  __int128 *v174;
  uint64_t v175;
  __int128 v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  __int128 *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  __int128 v207;
  char *v208;
  uint64_t v209;
  char *v210;
  unint64_t *v211;
  void **v212;
  _OWORD *v213;
  __int128 v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  unsigned __int8 v218;
  size_t v219;
  _QWORD *v220;
  uint64_t v221;
  int *v222;
  int v223;
  uint64_t v224;
  int *v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  _BOOL4 v237;
  int *v238;
  int v239;
  int v240;
  unint64_t v241;
  char *v242;
  unint64_t v243;
  int v244;
  void *v245;
  char *v246;
  char *v247;
  unint64_t v248;
  char *v249;
  void *v250;
  malloc_zone_t *zone;
  _QWORD *v252;
  _QWORD *v253;
  BOOL v254;
  unsigned __int8 v255;
  uint64_t v256;
  geo::read_write_lock *v257;
  const char *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  _OWORD *v262;
  void *v263;
  char *v264;
  malloc_zone_t *v265;
  _QWORD *v266;
  _QWORD *v267;
  unsigned __int8 v268;
  uint64_t v269;
  geo::read_write_lock *v270;
  const char *v271;
  int v272;
  uint64_t v273;
  unsigned int v274;
  float v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  void *v280;
  float v281;
  float v282;
  id v283;
  unsigned __int8 v284;
  unsigned __int8 v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  float *v289;
  uint64_t v290;
  __n128 v291;
  unsigned int v292;
  uint64_t v294;
  __n128 v295;
  unsigned int v296;
  _QWORD *v298;
  _QWORD *v299;
  char *v300;
  unint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  int64_t v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _OWORD *v314;
  char *v315;
  uint64_t v316;
  __int128 v317;
  uint64_t v318;
  double v319;
  double v320;
  float *v321;
  float v322;
  float *v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  float *v329;
  uint64_t v330;
  float v331;
  float *v332;
  unint64_t v333;
  uint64_t v334;
  float *v335;
  float *v336;
  uint64_t v337;
  __int128 v338;
  int v339;
  std::__shared_weak_count_vtbl *v340;
  void *v341;
  uint64_t p_on_zero_shared;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  id *v351;
  id *v352;
  id *v353;
  unsigned __int8 v354;
  void **v355;
  void **v356;
  uint64_t v357;
  _QWORD *v358;
  unint64_t *v359;
  unint64_t v360;
  _QWORD *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  _OWORD *v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  id v376;
  void *v377;
  unint64_t v378;
  void *v379;
  uint64_t *v380;
  uint64_t *v381;
  uint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  void *v385;
  uint64_t *v386;
  _BYTE *v387;
  unsigned __int8 v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  id v392;
  id v393;
  uint64_t v394;
  id obj;
  id v396;
  uint64_t v397;
  id v398;
  id *v399;
  char *v400;
  void *v401;
  unint64_t v402;
  uint64_t *p_shared_weak_owners;
  id v404;
  id v405;
  std::__shared_weak_count *v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  unsigned int v409;
  char *v410;
  void *v411;
  void *v412;
  char *v413;
  unint64_t *p_shared_owners;
  void *v415;
  unint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  BOOL v420;
  char *v421;
  char *v422;
  unsigned int v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  void *__p;
  char *v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  _BYTE v443[128];
  __int128 v444[8];
  void *v445;
  char *v446;
  unint64_t v447;
  uint64_t v448;
  float *v449;
  float *v450;
  unint64_t v451;
  uint64_t v452;
  __int128 v453;
  __int128 v454;
  uint64_t v455;

  v455 = *MEMORY[0x1E0C80C00];
  md::RouteLineSupport::clearRouteLabelFeatures((md::RouteLineSupport *)this);
  if (this[3])
  {
    v2 = this[45];
    if (v2)
    {
      v398 = this[32];
      v392 = v2;
      v393 = this[3];
      objc_msgSend(v393, "routeInfo");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v405 = v392;
      v396 = v3;
      v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v430 = 0u;
      v431 = 0u;
      v428 = 0u;
      v429 = 0u;
      objc_msgSend(v396, "travelDirectionAnnotations");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v399 = this;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v428, v444, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v429;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v429 != v7)
              objc_enumerationMutation(v5);
            objc_msgSend(v4, "addObject:", *(_QWORD *)(*((_QWORD *)&v428 + 1) + 8 * i));
          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v428, v444, 16);
        }
        while (v6);
      }

      v9 = v4;
      v10 = v396;
      if (!objc_msgSend(v4, "count"))
      {
        objc_msgSend(v396, "routeNameAnnotations");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "count") == 0;

        v10 = v396;
        v9 = v4;
        if (!v12)
        {
          v13 = [VKRouteRangeAnnotationInfo alloc];
          objc_msgSend(v396, "route");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "startRouteCoordinate");
          objc_msgSend(v396, "route");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = -[VKRouteRangeAnnotationInfo initWithEtaDescription:start:end:](v13, "initWithEtaDescription:start:end:", 0, v15, objc_msgSend(v16, "endRouteCoordinate"));

          objc_msgSend(v4, "addObject:", v17);
          v10 = v396;
          v9 = v4;
        }
      }
      v426 = 0u;
      v427 = 0u;
      v424 = 0u;
      v425 = 0u;
      obj = v9;
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v424, v443, 16);
      if (v18)
      {
        v397 = 0;
        v391 = xmmword_19FFB2E80;
        v394 = *(_QWORD *)v425;
        for (j = *(_QWORD *)v425; ; j = *(_QWORD *)v425)
        {
          if (j != v394)
            objc_enumerationMutation(obj);
          v20 = *(void **)(*((_QWORD *)&v424 + 1) + 8 * v397);
          v21 = objc_msgSend(v20, "start", v391);
          v441 = objc_msgSend(v20, "end");
          v442 = v21;
          v22 = v10;
          __p = 0;
          v439 = 0;
          v440 = 0;
          v434 = 0u;
          v435 = 0u;
          v436 = 0u;
          v437 = 0u;
          v404 = v22;
          objc_msgSend(v22, "routeNameAnnotations");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v402 = v18;
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v434, &v445, 16);
          v401 = v20;
          if (!v24)
          {

            v422 = 0;
            v26 = 0;
            v25 = 0;
            v57 = 1;
LABEL_82:
            v65 = v439;
            if (v439 >= v440)
            {
              v67 = (char *)__p;
              v68 = (v439 - (_BYTE *)__p) >> 5;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 59)
                abort();
              v70 = v440 - (_BYTE *)__p;
              if ((v440 - (_BYTE *)__p) >> 4 > v69)
                v69 = v70 >> 4;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
                v71 = 0x7FFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71 >> 59)
LABEL_562:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v72 = (char *)operator new(32 * v71);
              v73 = &v72[32 * v68];
              *v73 = 0;
              v73[8] = 0;
              v74 = v441;
              *((_QWORD *)v73 + 2) = v442;
              *((_QWORD *)v73 + 3) = v74;
              if (v65 == v67)
              {
                __p = &v72[32 * v68];
                v440 = &v72[32 * v71];
                v64 = v73 + 32;
                if (!v65)
                  goto LABEL_105;
              }
              else
              {
                v75 = 0;
                do
                {
                  v76 = &v73[v75];
                  v77 = &v65[v75];
                  *(v76 - 32) = 0;
                  *(v76 - 24) = 0;
                  if (v65[v75 - 24])
                  {
                    v78 = *((_QWORD *)v77 - 4);
                    *((_QWORD *)v77 - 4) = 0;
                    *((_QWORD *)v76 - 4) = v78;
                    *(v76 - 24) = 1;
                  }
                  *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
                  v75 -= 32;
                }
                while (&v65[v75] != v67);
                __p = &v73[v75];
                v440 = &v72[32 * v71];
                do
                {
                  if (*(v65 - 24))

                  v65 -= 32;
                }
                while (v65 != v67);
                v65 = v67;
                v64 = v73 + 32;
                if (!v65)
                  goto LABEL_105;
              }
              operator delete(v65);
            }
            else
            {
              *v439 = 0;
              v65[8] = 0;
              v66 = v441;
              *((_QWORD *)v65 + 2) = v442;
              *((_QWORD *)v65 + 3) = v66;
              v64 = v65 + 32;
            }
LABEL_105:
            v439 = v64;
            v58 = (uint64_t)(v26 - (_QWORD)v25) >> 5;
            goto LABEL_108;
          }
          v25 = 0;
          v26 = 0;
          v419 = *(_QWORD *)v435;
          v422 = 0;
          v415 = v23;
          do
          {
            v27 = 0;
            v417 = v24;
            do
            {
              if (*(_QWORD *)v435 != v419)
                objc_enumerationMutation(v23);
              v28 = *(void **)(*((_QWORD *)&v434 + 1) + 8 * v27);
              v29 = objc_msgSend(v28, "start");
              v30 = v441;
              if (v441 > v29
                || ((_DWORD)v441 == (_DWORD)v29 ? (v31 = *((float *)&v441 + 1) < *((float *)&v29 + 1)) : (v31 = 1), !v31))
              {
                v32 = objc_msgSend(v28, "end");
                v35 = v442;
                if (v442 < v32
                  || ((LODWORD(v33) = HIDWORD(v32), LODWORD(v34) = HIDWORD(v442), (_DWORD)v442 == (_DWORD)v32)
                    ? (v36 = *((float *)&v442 + 1) <= *((float *)&v32 + 1))
                    : (v36 = 0),
                      v36))
                {
                  objc_msgSend(v28, "etaDescription", v33, v34);
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v37, "etaText");
                  v38 = objc_claimAutoreleasedReturnValue();
                  v39 = objc_msgSend(v28, "start");
                  v433 = v39;
                  if (v35 < v39
                    || v35 == (_DWORD)v39
                    && (LODWORD(v40) = HIDWORD(v39),
                        LODWORD(v41) = HIDWORD(v442),
                        *((float *)&v442 + 1) < *((float *)&v39 + 1)))
                  {
                    v42 = &v433;
                  }
                  else
                  {
                    v42 = &v442;
                  }
                  v43 = objc_msgSend(v28, "end", v40, v41);
                  v432 = v43;
                  if (v30 > v43 || v30 == (_DWORD)v43 && *((float *)&v441 + 1) > *((float *)&v43 + 1))
                    v44 = &v432;
                  else
                    v44 = &v441;
                  if (v26 >= (unint64_t)v422)
                  {
                    v46 = (uint64_t)(v26 - (_QWORD)v25) >> 5;
                    v47 = v46 + 1;
                    if ((unint64_t)(v46 + 1) >> 59)
                      abort();
                    if ((v422 - v25) >> 4 > v47)
                      v47 = (v422 - v25) >> 4;
                    if ((unint64_t)(v422 - v25) >= 0x7FFFFFFFFFFFFFE0)
                      v48 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v48 = v47;
                    if (v48 >> 59)
                      goto LABEL_562;
                    v49 = (char *)operator new(32 * v48);
                    v50 = &v49[32 * v46];
                    *(_QWORD *)v50 = v38;
                    v50[8] = 1;
                    v51 = *v44;
                    *((_QWORD *)v50 + 2) = *v42;
                    *((_QWORD *)v50 + 3) = v51;
                    if ((char *)v26 == v25)
                    {
                      v56 = v50;
                    }
                    else
                    {
                      v52 = 0;
                      do
                      {
                        v53 = &v50[v52];
                        v54 = v26 + v52;
                        *(v53 - 32) = 0;
                        *(v53 - 24) = 0;
                        if (*(_BYTE *)(v26 + v52 - 24))
                        {
                          v55 = *(_QWORD *)(v54 - 32);
                          *(_QWORD *)(v54 - 32) = 0;
                          *((_QWORD *)v53 - 4) = v55;
                          *(v53 - 24) = 1;
                        }
                        *((_OWORD *)v53 - 1) = *(_OWORD *)(v54 - 16);
                        v52 -= 32;
                      }
                      while ((char *)(v26 + v52) != v25);
                      v56 = &v50[v52];
                      do
                      {
                        if (*(_BYTE *)(v26 - 24))

                        v26 -= 32;
                      }
                      while ((char *)v26 != v25);
                    }
                    v422 = &v49[32 * v48];
                    v26 = (unint64_t)(v50 + 32);
                    if (v25)
                      operator delete(v25);
                    v25 = v56;
                  }
                  else
                  {
                    *(_QWORD *)v26 = v38;
                    *(_BYTE *)(v26 + 8) = 1;
                    v45 = *v44;
                    *(_QWORD *)(v26 + 16) = *v42;
                    *(_QWORD *)(v26 + 24) = v45;
                    v26 += 32;
                  }

                  v23 = v415;
                  v24 = v417;
                }
              }
              ++v27;
            }
            while (v27 != v24);
            v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v434, &v445, 16);
          }
          while (v24);

          v57 = v25 == (char *)v26;
          if (v25 == (char *)v26)
            goto LABEL_82;
          v58 = (uint64_t)(v26 - (_QWORD)v25) >> 5;
          std::__introsort<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,false>((uint64_t)v25, v26, 126 - 2 * __clz(v58), 1);
          v59 = v442;
          v60 = *((float *)&v442 + 1);
          v61 = v25;
          do
          {
            if ((_DWORD)v59 != *((_DWORD *)v61 + 4) || vabds_f32(v60, *((float *)v61 + 5)) >= 0.00000011921)
            {
              v63 = v439;
              if (v439 < v440)
              {
                *v439 = 0;
                v63[8] = 0;
                *((_QWORD *)v63 + 2) = v59;
                *((_QWORD *)v63 + 3) = *((_QWORD *)v61 + 2);
                v62 = v63 + 32;
              }
              else
              {
                v62 = std::vector<md::RoadNameWithRange>::__emplace_back_slow_path<std::nullopt_t const&,geo::PolylineCoordinate &,geo::PolylineCoordinate const&>(&__p, v59, *((_QWORD *)v61 + 2));
              }
              v439 = v62;
            }
            v59 = *((_QWORD *)v61 + 3);
            v61 += 32;
            v60 = *((float *)&v59 + 1);
          }
          while (v61 != (char *)v26);
          if ((_DWORD)v441 == (_DWORD)v59)
          {
            v64 = v439;
            if (vabds_f32(*((float *)&v59 + 1), *((float *)&v441 + 1)) < 0.00000011921)
              goto LABEL_108;
          }
          else
          {
            v64 = v439;
          }
          if (v64 >= v440)
          {
            v64 = std::vector<md::RoadNameWithRange>::__emplace_back_slow_path<std::nullopt_t const&,geo::PolylineCoordinate &,geo::PolylineCoordinate const&>(&__p, v59, v441);
          }
          else
          {
            *v64 = 0;
            v64[8] = 0;
            v79 = v441;
            *((_QWORD *)v64 + 2) = v59;
            *((_QWORD *)v64 + 3) = v79;
            v64 += 32;
          }
          v439 = v64;
LABEL_108:
          v80 = v26;
          v81 = (char *)__p;
          v82 = v64 - (_BYTE *)__p;
          if (v64 - (_BYTE *)__p < 1)
          {
            v413 = v25;
            v400 = (char *)v26;
            v87 = (char *)__p;
            if (!__p)
              goto LABEL_188;
          }
          else
          {
            v83 = v82 >> 5;
            v84 = &v25[32 * v58];
            if (v82 >> 5 <= (uint64_t)&v422[-v26] >> 5)
            {
              v88 = v26 - (_QWORD)v84;
              v89 = (uint64_t)(v26 - (_QWORD)v84) >> 5;
              if (v89 >= v83)
              {
                v90 = (char *)__p + 32 * v83;
                v94 = v26;
              }
              else
              {
                v90 = (char *)__p + 32 * v89;
                v91 = v26;
                if (v90 != v64)
                {
                  v92 = 0;
                  do
                  {
                    v93 = v26 + v92;
                    *(_BYTE *)v93 = 0;
                    *(_BYTE *)(v93 + 8) = 0;
                    if (v90[v92 + 8])
                    {
                      *(_QWORD *)(v26 + v92) = *(id *)&v90[v92];
                      *(_BYTE *)(v93 + 8) = 1;
                    }
                    *(_OWORD *)(v93 + 16) = *(_OWORD *)&v90[v92 + 16];
                    v92 += 32;
                  }
                  while (&v90[v92] != v64);
                  v91 = v26 + v92;
                  v88 = v26 - (_QWORD)v84;
                  v80 = v26;
                }
                v112 = v91 - v80;
                v94 = v26 + v112;
                if (v88 < 1)
                {
                  v400 = (char *)(v26 + v112);
                  v413 = v25;
                  v87 = (char *)__p;
                  if (!__p)
                    goto LABEL_188;
                  goto LABEL_182;
                }
                v80 = v26 + v112;
              }
              v113 = v80 - 32 * v83;
              v114 = (char *)v94;
              if (v113 < v26)
              {
                v115 = v94;
                v116 = 0;
                do
                {
                  v117 = v115 + v116;
                  *(_BYTE *)v117 = 0;
                  *(_BYTE *)(v117 + 8) = 0;
                  if (*(_BYTE *)(v113 + v116 + 8))
                  {
                    v118 = *(_QWORD *)(v113 + v116);
                    *(_QWORD *)(v113 + v116) = 0;
                    *(_QWORD *)(v115 + v116) = v118;
                    *(_BYTE *)(v117 + 8) = 1;
                  }
                  *(_OWORD *)(v117 + 16) = *(_OWORD *)(v113 + v116 + 16);
                  v116 += 32;
                }
                while (v113 + v116 < v26);
                v94 = v115;
                v114 = (char *)(v115 + v116);
              }
              v119 = &v84[32 * v83];
              if ((char *)v94 != v119)
              {
                v120 = 32 * ((uint64_t)(v80 - (_QWORD)v119) >> 5);
                v121 = v94 - 32;
                do
                {
                  v123 = &v84[v120];
                  if (*(unsigned __int8 *)(v121 + 8) == v84[v120 - 24])
                  {
                    if (*(_BYTE *)(v121 + 8))
                    {
                      v124 = *((_QWORD *)v123 - 4);
                      *((_QWORD *)v123 - 4) = 0;
                      v125 = *(id *)v121;
                      *(_QWORD *)v121 = v124;

                    }
                  }
                  else if (*(_BYTE *)(v121 + 8))
                  {

                    *(_BYTE *)(v121 + 8) = 0;
                  }
                  else
                  {
                    v122 = *((_QWORD *)v123 - 4);
                    *((_QWORD *)v123 - 4) = 0;
                    *(_QWORD *)v121 = v122;
                    *(_BYTE *)(v121 + 8) = 1;
                  }
                  *(_OWORD *)(v121 + 16) = *(_OWORD *)&v84[v120 - 16];
                  v121 -= 32;
                  v120 -= 32;
                }
                while (v120);
              }
              if (v90 != v81)
              {
                v126 = 0;
                do
                {
                  v127 = &v84[v126];
                  if (v84[v126 + 8] == v81[v126 + 8])
                  {
                    if (v84[v126 + 8])
                      objc_storeStrong((id *)&v84[v126], *(id *)&v81[v126]);
                  }
                  else if (v84[v126 + 8])
                  {

                    v127[8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)v127 = *(id *)&v81[v126];
                    v127[8] = 1;
                  }
                  *(_OWORD *)&v84[v126 + 16] = *(_OWORD *)&v81[v126 + 16];
                  v126 += 32;
                }
                while (&v81[v126] != v90);
              }
              v413 = v25;
              v400 = v114;
            }
            else
            {
              v85 = v58 + v83;
              if ((v58 + v83) >> 59)
                abort();
              if ((v422 - v25) >> 4 > v85)
                v85 = (v422 - v25) >> 4;
              if ((unint64_t)(v422 - v25) >= 0x7FFFFFFFFFFFFFE0)
                v85 = 0x7FFFFFFFFFFFFFFLL;
              v420 = v57;
              if (v85)
              {
                if (v85 >> 59)
                  goto LABEL_562;
                v86 = (char *)operator new(32 * v85);
              }
              else
              {
                v86 = 0;
              }
              v95 = 32 * v58;
              v96 = &v86[32 * v58];
              v97 = 32 * v83;
              v400 = &v96[32 * v83];
              v413 = v96;
              v98 = v96 + 8;
              v99 = (id *)(v81 + 16);
              v100 = v97;
              do
              {
                *(v98 - 8) = 0;
                *v98 = 0;
                if (*((_BYTE *)v99 - 8))
                {
                  *((_QWORD *)v98 - 1) = *(v99 - 2);
                  *v98 = 1;
                }
                v101 = *(_OWORD *)v99;
                v99 += 4;
                *(_OWORD *)(v98 + 8) = v101;
                v98 += 32;
                v100 -= 32;
              }
              while (v100);
              if (v58)
              {
                v102 = 0;
                v103 = v25;
                v104 = v86;
                do
                {
                  v105 = &v104[v95];
                  v106 = &v103[v95];
                  *(v105 - 32) = 0;
                  *(v105 - 24) = 0;
                  if (v103[v95 - 24])
                  {
                    v107 = *((_QWORD *)v106 - 4);
                    *((_QWORD *)v106 - 4) = 0;
                    *((_QWORD *)v105 - 4) = v107;
                    *(v105 - 24) = 1;
                  }
                  v103 -= 32;
                  *((_OWORD *)v105 - 1) = *((_OWORD *)v106 - 1);
                  v104 -= 32;
                  v102 += 32;
                }
                while (v95 != v102);
                v413 = &v104[v95];
              }
              if ((char *)v26 != v84)
              {
                v108 = &v86[v97];
                v109 = v25;
                do
                {
                  v110 = &v108[v95];
                  *v110 = 0;
                  v110[8] = 0;
                  if (v109[v95 + 8])
                  {
                    v111 = *(_QWORD *)&v109[32 * v58];
                    *(_QWORD *)&v109[32 * v58] = 0;
                    *(_QWORD *)&v108[32 * v58] = v111;
                    v110[8] = 1;
                  }
                  *((_OWORD *)v110 + 1) = *(_OWORD *)&v109[v95 + 16];
                  v109 += 32;
                  v108 += 32;
                }
                while (&v109[v95] != (char *)v26);
                v400 = &v108[v95];
              }
              if (!v420)
              {
                do
                {
                  if (*(_BYTE *)(v26 - 24))

                  v26 -= 32;
                }
                while ((char *)v26 != v25);
              }
              if (v25)
              {
                operator delete(v25);
                v87 = (char *)__p;
                if (!__p)
                  goto LABEL_188;
                goto LABEL_182;
              }
            }
            v87 = (char *)__p;
            if (!__p)
              goto LABEL_188;
          }
LABEL_182:
          for (k = v439; k != v87; k -= 32)
          {
            if (*(k - 24))

          }
          operator delete(v87);
LABEL_188:

          v129 = v413;
          v130 = v401;
          v18 = v402;
          if (v413 != v400)
          {
            while (1)
            {
              if (v129[8]
                || (objc_msgSend(v130, "etaDescription"),
                    v131 = (void *)objc_claimAutoreleasedReturnValue(),
                    v132 = v131 == 0,
                    v131,
                    v130 = v401,
                    v18 = v402,
                    !v132))
              {
                v133 = (std::__shared_weak_count *)operator new(0x150uLL);
                v133->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v133->__shared_owners_;
                v133->__shared_weak_owners_ = 0;
                v133->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF90;
                LOWORD(v133[1].__shared_owners_) = 2;
                *(_OWORD *)&v133[1].__shared_weak_owners_ = 0u;
                *(_OWORD *)&v133[2].__shared_owners_ = 0u;
                v133[3].std::__shared_count = 0u;
                *(_OWORD *)&v133[3].__shared_weak_owners_ = 0u;
                v133[4].__shared_owners_ = 0x7FFFFFFF437C0000;
                LOBYTE(v133[4].__shared_weak_owners_) = 0;
                v133[6].__shared_owners_ = 0;
                v133[6].__shared_weak_owners_ = 0;
                v133[6].__vftable = 0;
                v133[8].__vftable = 0;
                v133[5].__vftable = 0;
                v133[5].__shared_owners_ = 0;
                v133[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A0A20;
                v134 = v133 + 1;
                LOBYTE(v133[5].__shared_weak_owners_) = 0;
                LOWORD(v133[8].__shared_owners_) = 0;
                *(_OWORD *)&v133[8].__shared_weak_owners_ = 0u;
                *(_OWORD *)&v133[9].__shared_owners_ = 0u;
                v133[10].std::__shared_count = 0u;
                {
                  v347 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v347, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                v133[10].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
                v133[11].__vftable = 0;
                v133[11].__shared_owners_ = 0;
                v133[11].__shared_weak_owners_ = 0;
                {
                  v348 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v348, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                v133[12].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
                v133[12].__shared_owners_ = 0;
                v133[12].__shared_weak_owners_ = 0;
                v133[13].__vftable = 0;
                {
                  v349 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v349, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                v133[13].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
                LOBYTE(v133[13].__shared_weak_owners_) = 4;
                v139 = (std::__shared_weak_count **)v399[34];
                v138 = (std::__shared_weak_count **)v399[35];
                v410 = v129;
                if (v139 >= v138)
                {
                  v142 = (char *)v399[33];
                  v143 = ((char *)v139 - v142) >> 4;
                  v144 = v143 + 1;
                  if ((unint64_t)(v143 + 1) >> 60)
                    abort();
                  v145 = (char *)v138 - v142;
                  if (v145 >> 3 > v144)
                    v144 = v145 >> 3;
                  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0)
                    v146 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v146 = v144;
                  if (v146 >> 60)
                    goto LABEL_562;
                  v147 = (char *)operator new(16 * v146);
                  v148 = (std::__shared_weak_count **)&v147[16 * v143];
                  v149 = &v147[16 * v146];
                  *v148 = v134;
                  v148[1] = v133;
                  do
                    v150 = __ldxr(p_shared_owners);
                  while (__stxr(v150 + 1, p_shared_owners));
                  v141 = v148 + 2;
                  if (v139 == (std::__shared_weak_count **)v142)
                  {
                    v399[33] = v148;
                    v399[34] = v141;
                    v399[35] = v149;
                  }
                  else
                  {
                    do
                    {
                      v151 = *((_OWORD *)v139 - 1);
                      v139 -= 2;
                      *((_OWORD *)v148 - 1) = v151;
                      v148 -= 2;
                      *v139 = 0;
                      v139[1] = 0;
                    }
                    while (v139 != (std::__shared_weak_count **)v142);
                    v139 = (std::__shared_weak_count **)v399[33];
                    v152 = (std::__shared_weak_count **)v399[34];
                    v399[33] = v148;
                    v399[34] = v141;
                    v399[35] = v149;
                    while (v152 != v139)
                    {
                      v153 = *(v152 - 1);
                      if (v153)
                      {
                        v154 = (unint64_t *)&v153->__shared_owners_;
                        do
                          v155 = __ldaxr(v154);
                        while (__stlxr(v155 - 1, v154));
                        if (!v155)
                        {
                          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                          std::__shared_weak_count::__release_weak(v153);
                        }
                      }
                      v152 -= 2;
                    }
                  }
                  if (v139)
                    operator delete(v139);
                }
                else
                {
                  *v139 = v134;
                  v139[1] = v133;
                  do
                    v140 = __ldxr(p_shared_owners);
                  while (__stxr(v140 + 1, p_shared_owners));
                  v141 = v139 + 2;
                }
                v399[34] = v141;
                {
                  v350 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v350, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                v407 = mdm::Allocator::instance(void)::alloc;
                objc_msgSend(v130, "etaDescription");
                v157 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v157, "styleAttributes");
                v412 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v412)
                {
                  v178 = 0;
                  v158 = 0;
                  v416 = 0;
                  goto LABEL_265;
                }
                v416 = 0;
                v158 = 0;
                v421 = 0;
                for (m = 0; m < objc_msgSend(v412, "countAttrs"); ++m)
                {
                  v161 = objc_msgSend(v412, "v");
                  v162 = v161;
                  if ((unint64_t)v158 >= v416)
                  {
                    v163 = ((char *)v158 - v421) >> 3;
                    v164 = v163 + 1;
                    if ((unint64_t)(v163 + 1) >> 61)
                      abort();
                    if ((uint64_t)(v416 - (_QWORD)v421) >> 2 > v164)
                      v164 = (uint64_t)(v416 - (_QWORD)v421) >> 2;
                    if (v416 - (unint64_t)v421 >= 0x7FFFFFFFFFFFFFF8)
                      v165 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v165 = v164;
                    if (v165)
                    {
                      v166 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407 + 16))(v407, 8 * v165, 4);
                      v167 = (char *)(v166 + 8 * v163);
                      v165 = v166 + 8 * v165;
                      if (v166)
                        *(_QWORD *)v167 = *(_QWORD *)(v162 + 8 * m);
                    }
                    else
                    {
                      v167 = (char *)(8 * v163);
                    }
                    if (v158 == (_QWORD *)v421)
                    {
                      v421 = v167;
                      v160 = v167 + 8;
                      if (v158)
                        goto LABEL_248;
                    }
                    else
                    {
                      v168 = (char *)v158 - v421 - 8;
                      if (v168 < 0x138
                        || &v167[-(v168 & 0xFFFFFFFFFFFFFFF8) - 8] > v167 - 8
                        || (_QWORD *)((char *)v158 - (v168 & 0xFFFFFFFFFFFFFFF8) - 8) > v158 - 1
                        || (unint64_t)((char *)v158 - v167) < 0x20)
                      {
                        v169 = (char *)v158;
                        v170 = v167;
                      }
                      else
                      {
                        v172 = (v168 >> 3) + 1;
                        v169 = (char *)&v158[-(v172 & 0x3FFFFFFFFFFFFFFCLL)];
                        v173 = v167 - 16;
                        v174 = (__int128 *)(v158 - 2);
                        v175 = v172 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v176 = *v174;
                          *((_OWORD *)v173 - 1) = *(v174 - 1);
                          *(_OWORD *)v173 = v176;
                          v173 -= 32;
                          v174 -= 2;
                          v175 -= 4;
                        }
                        while (v175);
                        v170 = &v167[-8 * (v172 & 0x3FFFFFFFFFFFFFFCLL)];
                        if (v172 == (v172 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          v158 = v421;
                          goto LABEL_247;
                        }
                      }
                      v158 = v421;
                      do
                      {
                        v171 = *((_QWORD *)v169 - 1);
                        v169 -= 8;
                        *((_QWORD *)v170 - 1) = v171;
                        v170 -= 8;
                      }
                      while (v169 != v421);
LABEL_247:
                      v421 = v170;
                      v160 = v167 + 8;
                      if (v158)
LABEL_248:
                        (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v407 + 40))(v407, v158, v416 - (_QWORD)v158);
                    }
                    v416 = v165;
                    goto LABEL_227;
                  }
                  if (v158)
                    *v158 = *(_QWORD *)(v161 + 8 * m);
                  v160 = v158 + 1;
LABEL_227:
                  v158 = v160;
                }
                if ((unint64_t)v158 < v416)
                {
                  if (v158)
                    *v158 = 0xB00000005;
                  v177 = (char *)(v158 + 1);
                  goto LABEL_286;
                }
                v178 = v421;
LABEL_265:
                v179 = ((char *)v158 - v178) >> 3;
                v180 = v179 + 1;
                if ((unint64_t)(v179 + 1) >> 61)
                  abort();
                v181 = v416 - (_QWORD)v178;
                if ((uint64_t)(v416 - (_QWORD)v178) >> 2 > v180)
                  v180 = (uint64_t)(v416 - (_QWORD)v178) >> 2;
                if (v181 >= 0x7FFFFFFFFFFFFFF8)
                  v182 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v182 = v180;
                if (v182)
                {
                  v183 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407 + 16))(v407, 8 * v182, 4);
                  v184 = (char *)(v183 + 8 * v179);
                  v416 = v183 + 8 * v182;
                  if (v183)
                    *(_QWORD *)v184 = 0xB00000005;
                }
                else
                {
                  v416 = 0;
                  v184 = (char *)(8 * v179);
                }
                v185 = v184;
                if (v158 != (_QWORD *)v178)
                {
                  v186 = (char *)v158 - v178 - 8;
                  if (v186 < 0x38 || (unint64_t)((char *)v158 - v184) < 0x20)
                  {
                    v188 = (char *)v158;
                    v185 = v184;
                  }
                  else
                  {
                    v187 = (v186 >> 3) + 1;
                    v188 = (char *)&v158[-(v187 & 0x3FFFFFFFFFFFFFFCLL)];
                    v189 = v184 - 16;
                    v190 = (__int128 *)(v158 - 2);
                    v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v192 = *v190;
                      *((_OWORD *)v189 - 1) = *(v190 - 1);
                      *(_OWORD *)v189 = v192;
                      v189 -= 32;
                      v190 -= 2;
                      v191 -= 4;
                    }
                    while (v191);
                    v185 = &v184[-8 * (v187 & 0x3FFFFFFFFFFFFFFCLL)];
                    if (v187 == (v187 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_284;
                  }
                  do
                  {
                    v193 = *((_QWORD *)v188 - 1);
                    v188 -= 8;
                    *((_QWORD *)v185 - 1) = v193;
                    v185 -= 8;
                  }
                  while (v188 != v178);
                }
LABEL_284:
                v421 = v185;
                v177 = v184 + 8;
                if (v178)
                  (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v407 + 40))(v407, v178, v181);
LABEL_286:
                if ((unint64_t)v177 < v416)
                {
                  *(_QWORD *)v177 = 0x100010002;
                  v194 = v177 + 8;
                  goto LABEL_311;
                }
                v195 = (v177 - v421) >> 3;
                v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61)
                  abort();
                v197 = v416 - (_QWORD)v421;
                if ((uint64_t)(v416 - (_QWORD)v421) >> 2 > v196)
                  v196 = (uint64_t)(v416 - (_QWORD)v421) >> 2;
                if (v197 >= 0x7FFFFFFFFFFFFFF8)
                  v198 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v198 = v196;
                if (v198)
                {
                  v199 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v407 + 16))(v407, 8 * v198, 4);
                  v200 = (char *)(v199 + 8 * v195);
                  v416 = v199 + 8 * v198;
                  if (v199)
                    *(_QWORD *)v200 = 0x100010002;
                }
                else
                {
                  v416 = 0;
                  v200 = (char *)(8 * v195);
                }
                v194 = v200 + 8;
                if (v177 == v421)
                {
                  v208 = v421;
                  goto LABEL_309;
                }
                v201 = v177 - v421 - 8;
                if (v201 < 0x38 || (unint64_t)(v177 - v200) < 0x20)
                {
                  v203 = v177;
                  v208 = v421;
                  do
                  {
LABEL_307:
                    v209 = *((_QWORD *)v203 - 1);
                    v203 -= 8;
                    *((_QWORD *)v200 - 1) = v209;
                    v200 -= 8;
                  }
                  while (v203 != v208);
                  goto LABEL_308;
                }
                v202 = (v201 >> 3) + 1;
                v203 = &v177[-8 * (v202 & 0x3FFFFFFFFFFFFFFCLL)];
                v204 = v200 - 16;
                v205 = v177 - 16;
                v206 = v202 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v207 = *(_OWORD *)v205;
                  *((_OWORD *)v204 - 1) = *((_OWORD *)v205 - 1);
                  *(_OWORD *)v204 = v207;
                  v204 -= 32;
                  v205 -= 32;
                  v206 -= 4;
                }
                while (v206);
                v200 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
                v208 = v421;
                if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_307;
LABEL_308:
                if (v208)
LABEL_309:
                  (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v407 + 40))(v407, v208, v197);
                v421 = v200;
LABEL_311:
                v210 = (char *)operator new(0x40uLL);
                *((_QWORD *)v210 + 1) = 0;
                v211 = (unint64_t *)(v210 + 8);
                *((_QWORD *)v210 + 2) = 0;
                *(_QWORD *)v210 = &off_1E42DAB40;
                *(_OWORD *)(v210 + 24) = 0u;
                v212 = (void **)(v210 + 24);
                *(_OWORD *)(v210 + 40) = 0u;
                v406 = (std::__shared_weak_count *)v210;
                *(_DWORD *)(v210 + 55) = 0;
                v213 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
                *v212 = v213;
                if (v213)
                {
                  *(_QWORD *)&v214 = -1;
                  *((_QWORD *)&v214 + 1) = -1;
                  v213[14] = v214;
                  v213[15] = v214;
                  v213[12] = v214;
                  v213[13] = v214;
                  v213[10] = v214;
                  v213[11] = v214;
                  v213[8] = v214;
                  v213[9] = v214;
                  v213[6] = v214;
                  v213[7] = v214;
                  v213[4] = v214;
                  v213[5] = v214;
                  v213[2] = v214;
                  v213[3] = v214;
                  *v213 = v214;
                  v213[1] = v214;
                }
                if (((v194 - v421) & 0x7FFFFFFF8) != 0)
                {
                  v215 = 0;
                  v216 = 0;
                  v217 = ((unint64_t)(v194 - v421) >> 3);
                  v218 = BYTE1(v406[2].__shared_owners_);
                  while (1)
                  {
                    v219 = v218;
                    v220 = *v212;
                    if (v218)
                      break;
LABEL_315:
                    v220[v219] = *(_QWORD *)&v421[8 * v215];
                    v218 = BYTE1(v406[2].__shared_owners_) + 1;
                    BYTE1(v406[2].__shared_owners_) = v218;
                    ++v215;
                    v216 = 1;
                    if (v215 == v217)
                    {
                      v220 = *v212;
                      v219 = v218;
LABEL_332:
                      qsort(v220, v219, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                      goto LABEL_333;
                    }
                  }
                  if (v218 > 0x1Fu)
                  {
                    do
                    {
                      v224 = 0;
                      v225 = (int *)v220;
                      while (1)
                      {
                        v226 = *v225;
                        v225 += 2;
                        if (v226 == *(_DWORD *)&v421[8 * v215])
                          break;
                        if (v219 == ++v224)
                          goto LABEL_326;
                      }
                      HIDWORD(v220[v224]) = *(_DWORD *)&v421[8 * v215 + 4];
LABEL_326:
                      ++v215;
                    }
                    while (v215 != v217);
                  }
                  else
                  {
                    do
                    {
                      v221 = 0;
                      v222 = (int *)v220;
                      while (1)
                      {
                        v223 = *v222;
                        v222 += 2;
                        if (v223 == *(_DWORD *)&v421[8 * v215])
                          break;
                        if (v219 == ++v221)
                          goto LABEL_315;
                      }
                      HIDWORD(v220[v221]) = *(_DWORD *)&v421[8 * v215++ + 4];
                    }
                    while (v215 != v217);
                  }
                  if ((v216 & 1) != 0)
                    goto LABEL_332;
                }
                do
LABEL_333:
                  v227 = __ldxr(v211);
                while (__stxr(v227 + 1, v211));
                do
                  v228 = __ldxr(v211);
                while (__stxr(v228 + 1, v211));
                shared_weak_owners = (std::__shared_weak_count *)v133[2].__shared_weak_owners_;
                v133[2].__shared_owners_ = (uint64_t)v212;
                v133[2].__shared_weak_owners_ = (uint64_t)v406;
                if (shared_weak_owners)
                {
                  v230 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 - 1, v230));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                    std::__shared_weak_count::__release_weak(shared_weak_owners);
                  }
                }
                do
                  v232 = __ldaxr(v211);
                while (__stlxr(v232 - 1, v211));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                  std::__shared_weak_count::__release_weak(v406);
                }
                BYTE1(v133[8].__shared_owners_) = *(_BYTE *)(*(_QWORD *)v398 + 468);
                LOBYTE(v133[8].__shared_owners_) = 14;
                do
                  v233 = __ldxr(v211);
                while (__stxr(v233 + 1, v211));
                v234 = BYTE1(v406[2].__shared_owners_);
                if (!BYTE1(v406[2].__shared_owners_))
                  goto LABEL_353;
                v235 = *v212;
                if (*(_DWORD *)*v212 != 191)
                {
                  v236 = 0;
                  v238 = (int *)(v235 + 1);
                  while (v234 - 1 != v236)
                  {
                    v239 = *v238;
                    v238 += 2;
                    ++v236;
                    if (v239 == 191)
                    {
                      v237 = v236 < v234;
                      goto LABEL_352;
                    }
                  }
LABEL_353:
                  v240 = 0;
                  v237 = 0;
                  goto LABEL_354;
                }
                v236 = 0;
                v237 = 1;
LABEL_352:
                v240 = BYTE4(v235[v236]);
                do
LABEL_354:
                  v241 = __ldaxr(v211);
                while (__stlxr(v241 - 1, v211));
                if (v241)
                {
                  if (v237)
                    goto LABEL_357;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                  std::__shared_weak_count::__release_weak(v406);
                  if (v237)
LABEL_357:
                    LOBYTE(v133[13].__shared_weak_owners_) = v240 == 0;
                }
                if (v410[8])
                {
                  v242 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)v410), "UTF8String");
                  if (v242)
                    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v133[11].__vftable, v242);
                }
                v243 = 0;
                v244 = 0;
                p_shared_weak_owners = &v133[9].__shared_weak_owners_;
                v245 = v405;
                v408 = v133;
                while (2)
                {
                  objc_msgSend(v245, "sections");
                  v246 = (char *)v445;
                  v247 = v446;
                  v248 = (v446 - (_BYTE *)v445) >> 3;
                  v418 = v244;
                  if (v445)
                  {
                    if (v446 == v445)
                    {
                      v446 = (char *)v445;
                      v250 = v445;
                    }
                    else
                    {
                      v249 = v446;
                      do
                      {
                        v253 = (_QWORD *)*((_QWORD *)v249 - 1);
                        v249 -= 8;
                        v252 = v253;
                        if (v253)
                        {
                          v254 = (*v252)-- == 1;
                          if (v254)
                          {
                            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v252 + 1));
                            if ((v255 & 1) == 0
                            {
                              v256 = operator new();
                              *(_QWORD *)(v256 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v256 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v256 + 32) = v391;
                              *(_QWORD *)v256 = &off_1E42B5668;
                              *(_QWORD *)(v256 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v256 + 72) = 0u;
                              *(_OWORD *)(v256 + 88) = 0u;
                              *(_OWORD *)(v256 + 104) = 0u;
                              *(_OWORD *)(v256 + 120) = 0u;
                              *(_OWORD *)(v256 + 136) = 0u;
                              *(_OWORD *)(v256 + 152) = 0u;
                              *(_OWORD *)(v256 + 168) = 0u;
                              *(_OWORD *)(v256 + 184) = 0u;
                              *(_OWORD *)(v256 + 200) = 0u;
                              *(_OWORD *)(v256 + 216) = 0u;
                              *(_OWORD *)(v256 + 232) = 0u;
                              *(_QWORD *)(v256 + 248) = 0;
                              *(_OWORD *)(v256 + 56) = 0u;
                              v257 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v256 + 56), 0);
                              if ((_DWORD)v257)
                                geo::read_write_lock::logFailure(v257, (uint64_t)"initialization", v258);
                              zone = malloc_create_zone(0, 0);
                              *(_QWORD *)(v256 + 48) = zone;
                              malloc_set_zone_name(zone, "VectorKitLabels");
                              *(_QWORD *)(v256 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v256;
                            }
                            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v247 - 1), 424);
                            *((_QWORD *)v247 - 1) = 0;
                          }
                        }
                        v247 = v249;
                      }
                      while (v249 != v246);
                      v250 = v445;
                      v446 = v246;
                    }
                    operator delete(v250);
                  }
                  if (v248 > v243)
                  {
                    objc_msgSend(v245, "sections");
                    v259 = (char *)v445;
                    v260 = v446;
                    v261 = *((_QWORD *)v445 + v243);
                    if (v261)
                      v262 = (_OWORD *)(v261 + 8);
                    else
                      v262 = 0;
                    v263 = v445;
                    if (v446 != v445)
                    {
                      v264 = v446;
                      do
                      {
                        v267 = (_QWORD *)*((_QWORD *)v264 - 1);
                        v264 -= 8;
                        v266 = v267;
                        if (v267)
                        {
                          v254 = (*v266)-- == 1;
                          if (v254)
                          {
                            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v266 + 1));
                            if ((v268 & 1) == 0
                            {
                              v269 = operator new();
                              *(_QWORD *)(v269 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v269 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v269 + 32) = v391;
                              *(_QWORD *)v269 = &off_1E42B5668;
                              *(_QWORD *)(v269 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v269 + 72) = 0u;
                              *(_OWORD *)(v269 + 88) = 0u;
                              *(_OWORD *)(v269 + 104) = 0u;
                              *(_OWORD *)(v269 + 120) = 0u;
                              *(_OWORD *)(v269 + 136) = 0u;
                              *(_OWORD *)(v269 + 152) = 0u;
                              *(_OWORD *)(v269 + 168) = 0u;
                              *(_OWORD *)(v269 + 184) = 0u;
                              *(_OWORD *)(v269 + 200) = 0u;
                              *(_OWORD *)(v269 + 216) = 0u;
                              *(_OWORD *)(v269 + 232) = 0u;
                              *(_QWORD *)(v269 + 248) = 0;
                              *(_OWORD *)(v269 + 56) = 0u;
                              v270 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v269 + 56), 0);
                              if ((_DWORD)v270)
                                geo::read_write_lock::logFailure(v270, (uint64_t)"initialization", v271);
                              v265 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v265;
                              malloc_set_zone_name(v265, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v260 - 1), 424);
                            *((_QWORD *)v260 - 1) = 0;
                          }
                        }
                        v260 = v264;
                      }
                      while (v264 != v259);
                      v263 = v445;
                    }
                    v446 = v259;
                    operator delete(v263);
                    v272 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v262 + 56))(v262);
                    if (v272)
                    {
                      v273 = (*(uint64_t (**)(_OWORD *, _QWORD))(*(_QWORD *)v262 + 48))(v262, 0);
                      v274 = *(_DWORD *)(v273 + 12);
                      v275 = *(float *)(v273 + 16);
                      v276 = (*(uint64_t (**)(_OWORD *, _QWORD))(*(_QWORD *)v262 + 48))(v262, (v272 - 1));
                      v277 = *(_DWORD *)(v276 + 12);
                      v278 = *((_DWORD *)v410 + 4);
                      if (v278 < v277 || v278 == v277 && *((float *)v410 + 5) <= *(float *)(v276 + 16))
                      {
                        v279 = *((_DWORD *)v410 + 6);
                        if (v274 < v279 || v274 == v279 && v275 <= *((float *)v410 + 7))
                        {
                          objc_msgSend(v404, "route");
                          v280 = (void *)objc_claimAutoreleasedReturnValue();
                          v423 = *((_DWORD *)v410 + 4);
                          v409 = *((_DWORD *)v410 + 6);
                          v281 = *((float *)v410 + 5);
                          v282 = *((float *)v410 + 7);
                          v283 = v280;
                          v446 = 0;
                          v445 = 0;
                          v447 = 0;
                          if ((v284 & 1) == 0
                          {
                            v343 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v343, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          v448 = mdm::Allocator::instance(void)::alloc;
                          v450 = 0;
                          v451 = 0;
                          v449 = 0;
                          if ((v285 & 1) == 0
                          {
                            v344 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v344, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          v452 = mdm::Allocator::instance(void)::alloc;
                          v286 = v262[12];
                          v453 = *(_OWORD *)((char *)v262 + 168);
                          v454 = v286;
                          v287 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v262 + 56))(v262);
                          v411 = v283;
                          if (v287)
                          {
                            v288 = 0;
                            while (2)
                            {
                              v290 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)v262 + 48))(v262, v288);
                              v292 = *(_DWORD *)(v290 + 12);
                              if (v292 < v423)
                                goto LABEL_405;
                              v291.n128_u32[0] = *(_DWORD *)(v290 + 16);
                              if (v292 == v423 && v291.n128_f32[0] < v281)
                                goto LABEL_405;
                              v294 = (*(uint64_t (**)(_OWORD *, uint64_t, __n128))(*(_QWORD *)v262 + 48))(v262, v288, v291);
                              v296 = *(_DWORD *)(v294 + 12);
                              if (v296 > v409)
                                goto LABEL_471;
                              v295.n128_u32[0] = *(_DWORD *)(v294 + 16);
                              if (v296 == v409 && v295.n128_f32[0] > v282)
                                goto LABEL_471;
                              v298 = (_QWORD *)(*(uint64_t (**)(_OWORD *, uint64_t, __n128))(*(_QWORD *)v262 + 48))(v262, v288, v295);
                              v299 = v298;
                              v300 = v446;
                              v301 = v447;
                              if ((unint64_t)v446 < v447)
                              {
                                if (v446)
                                  *(_QWORD *)v446 = *v298;
                                v302 = v300 + 8;
                                goto LABEL_444;
                              }
                              v303 = (char *)v445;
                              v304 = (v446 - (_BYTE *)v445) >> 3;
                              v305 = v304 + 1;
                              if ((unint64_t)(v304 + 1) >> 61)
                                abort();
                              if ((uint64_t)(v447 - (_QWORD)v445) >> 2 > v305)
                                v305 = (uint64_t)(v447 - (_QWORD)v445) >> 2;
                              if (v447 - (unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
                                v306 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v306 = v305;
                              if (v306)
                              {
                                v307 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v448 + 16))(v448, 8 * v306, 4);
                                v308 = (_QWORD *)(v307 + 8 * v304);
                                v309 = v307 + 8 * v306;
                                if (v307)
                                  *v308 = *v299;
                                v310 = v300 - v303;
                                if (v300 != v303)
                                {
LABEL_431:
                                  v311 = v310 - 8;
                                  if ((unint64_t)(v310 - 8) < 0x38)
                                  {
                                    v312 = v308;
                                  }
                                  else
                                  {
                                    v312 = v308;
                                    if ((unint64_t)(v300 - (char *)v308) >= 0x20)
                                    {
                                      v313 = (v311 >> 3) + 1;
                                      v314 = v308 - 2;
                                      v315 = v300 - 16;
                                      v316 = v313 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v317 = *(_OWORD *)v315;
                                        *(v314 - 1) = *((_OWORD *)v315 - 1);
                                        *v314 = v317;
                                        v314 -= 2;
                                        v315 -= 32;
                                        v316 -= 4;
                                      }
                                      while (v316);
                                      v312 = &v308[-(v313 & 0x3FFFFFFFFFFFFFFCLL)];
                                      v300 -= 8 * (v313 & 0x3FFFFFFFFFFFFFFCLL);
                                      if (v313 == (v313 & 0x3FFFFFFFFFFFFFFCLL))
                                        goto LABEL_442;
                                    }
                                  }
                                  do
                                  {
                                    v318 = *((_QWORD *)v300 - 1);
                                    v300 -= 8;
                                    *--v312 = v318;
                                  }
                                  while (v300 != v303);
                                  v303 = (char *)v445;
                                  v301 = v447;
LABEL_442:
                                  v302 = (char *)(v308 + 1);
                                  v445 = v312;
                                  v447 = v309;
                                  if (v303)
                                    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v448 + 40))(v448, v303, v301 - (_QWORD)v303);
LABEL_444:
                                  v446 = v302;
                                  objc_msgSend(v411, "pointAtRouteCoordinate:", *(_QWORD *)((*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)v262 + 48))(v262, v288)+ 12));
                                  v320 = v319;
                                  v321 = v450;
                                  if ((unint64_t)v450 < v451)
                                  {
                                    if (v450)
                                    {
                                      v322 = v319;
                                      *v450 = v322;
                                    }
                                    v289 = v321 + 1;
                                    goto LABEL_404;
                                  }
                                  v323 = v449;
                                  v324 = v450 - v449;
                                  if ((unint64_t)(v324 + 1) >> 62)
                                    abort();
                                  v325 = v451 - (_QWORD)v449;
                                  v326 = (uint64_t)(v451 - (_QWORD)v449) >> 1;
                                  if (v326 <= v324 + 1)
                                    v326 = v324 + 1;
                                  if (v325 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v327 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v327 = v326;
                                  if (v327)
                                  {
                                    v328 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v452 + 16))(v452, 4 * v327, 4);
                                    v329 = (float *)(v328 + 4 * v324);
                                    v330 = v328 + 4 * v327;
                                    if (v328)
                                    {
                                      v331 = v320;
                                      *v329 = v331;
                                    }
                                  }
                                  else
                                  {
                                    v330 = 0;
                                    v329 = (float *)(4 * v324);
                                  }
                                  v332 = v329;
                                  if (v321 != v323)
                                  {
                                    v333 = (char *)v321 - (char *)v323 - 4;
                                    if (v333 < 0x1C)
                                    {
                                      v332 = v329;
                                    }
                                    else
                                    {
                                      v332 = v329;
                                      if ((unint64_t)((char *)v321 - (char *)v329) >= 0x20)
                                      {
                                        v334 = (v333 >> 2) + 1;
                                        v335 = v329 - 4;
                                        v336 = v321 - 4;
                                        v337 = v334 & 0x7FFFFFFFFFFFFFF8;
                                        do
                                        {
                                          v338 = *(_OWORD *)v336;
                                          *((_OWORD *)v335 - 1) = *((_OWORD *)v336 - 1);
                                          *(_OWORD *)v335 = v338;
                                          v335 -= 8;
                                          v336 -= 8;
                                          v337 -= 8;
                                        }
                                        while (v337);
                                        v332 = &v329[-(v334 & 0x7FFFFFFFFFFFFFF8)];
                                        v321 -= v334 & 0x7FFFFFFFFFFFFFF8;
                                        if (v334 == (v334 & 0x7FFFFFFFFFFFFFF8))
                                          goto LABEL_466;
                                      }
                                    }
                                    do
                                    {
                                      v339 = *((_DWORD *)v321-- - 1);
                                      *((_DWORD *)v332-- - 1) = v339;
                                    }
                                    while (v321 != v323);
                                  }
LABEL_466:
                                  v289 = v329 + 1;
                                  v449 = v332;
                                  v451 = v330;
                                  if (v323)
                                    (*(void (**)(uint64_t, float *, unint64_t))(*(_QWORD *)v452 + 40))(v452, v323, v325);
LABEL_404:
                                  v450 = v289;
LABEL_405:
                                  if (++v288 == v287)
                                    goto LABEL_471;
                                  continue;
                                }
                              }
                              else
                              {
                                v309 = 0;
                                v308 = (_QWORD *)(8 * v304);
                                v310 = v446 - (_BYTE *)v445;
                                if (v446 != v445)
                                  goto LABEL_431;
                              }
                              break;
                            }
                            v303 = v300;
                            v312 = v308;
                            goto LABEL_442;
                          }
LABEL_471:
                          v133 = v408;
                          v340 = v408[10].__vftable;
                          if ((unint64_t)v340 >= v408[10].__shared_owners_)
                          {
                            v341 = v411;
                            p_on_zero_shared = std::vector<md::LabelExternalRoadFeature::SectionInfo,geo::StdAllocator<md::LabelExternalRoadFeature::SectionInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelExternalRoadFeature::SectionInfo const&>(p_shared_weak_owners, (uint64_t)&v445);
                          }
                          else
                          {
                            v341 = v411;
                            if (v340)
                              md::LabelExternalRoadFeature::SectionInfo::SectionInfo((uint64_t)v408[10].__vftable, (uint64_t)&v445);
                            p_on_zero_shared = (uint64_t)&v340[2].__on_zero_shared;
                            v408[10].__vftable = (std::__shared_weak_count_vtbl *)((char *)v340 + 96);
                          }
                          v408[10].__vftable = (std::__shared_weak_count_vtbl *)p_on_zero_shared;
                          if (v449)
                            (*(void (**)(uint64_t, float *, unint64_t))(*(_QWORD *)v452 + 40))(v452, v449, v451 - (_QWORD)v449);
                          if (v445)
                            (*(void (**)(uint64_t, void *, unint64_t))(*(_QWORD *)v448 + 40))(v448, v445, v447 - (_QWORD)v445);

                          v245 = v405;
                        }
                      }
                    }
                    v243 = (v418 + 1);
                    v244 = v418 + 1;
                    continue;
                  }
                  break;
                }
                do
                  v345 = __ldaxr(v211);
                while (__stlxr(v345 - 1, v211));
                if (!v345)
                {
                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                  std::__shared_weak_count::__release_weak(v406);
                }

                v129 = v410;
                if (v421)
                  (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v407 + 40))(v407, v421, v416 - (_QWORD)v421);
                v130 = v401;
                do
                  v346 = __ldaxr(p_shared_owners);
                while (__stlxr(v346 - 1, p_shared_owners));
                v18 = v402;
                if (!v346)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              v129 += 32;
              if (v129 == v400)
              {
                v351 = (id *)v400;
                if (!v413)
                  goto LABEL_510;
                if (v413 != v400)
                {
                  do
                  {
                    if (*((_BYTE *)v351 - 24))
                    {
                      v352 = v351;

                      v18 = v402;
                      v351 = v352;
                    }
                    v351 -= 4;
                  }
                  while (v351 != (id *)v413);
                }
                goto LABEL_509;
              }
            }
          }
          if (v413)
LABEL_509:
            operator delete(v413);
LABEL_510:
          v10 = v396;
          if (++v397 >= v18)
          {
            v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v424, v443, 16);
            if (!v18)
              break;
            v397 = 0;
          }
        }
      }

      v353 = v399;
      v354 = atomic_load((unsigned __int8 *)v399[1] + 3392);
      v355 = (void **)v353[33];
      v356 = (void **)v353[34];
      if (v355 != v356)
      {
        v357 = v354 & 1;
        do
        {
          v358 = v355[1];
          v445 = *v355;
          v446 = (char *)v358;
          if (v358)
          {
            v359 = v358 + 1;
            do
              v360 = __ldxr(v359);
            while (__stxr(v360 + 1, v359));
          }
          v361 = operator new(0x208uLL);
          v361[2] = 0;
          *v361 = &off_1E42DC2A8;
          v361[1] = 0;
          *(_QWORD *)&v444[0] = md::UniLineLabelFeature::UniLineLabelFeature(v361 + 3, (uint64_t *)&v445, 7, v357);
          *((_QWORD *)&v444[0] + 1) = v361;
          v362 = (unint64_t *)(*((_QWORD *)v399[1] + 36) + 680);
          do
          {
            v363 = __ldaxr(v362);
            v364 = v363 + 1;
          }
          while (__stlxr(v364, v362));
          v361[12] = v364;
          v365 = v399[37];
          if (v365 >= v399[38])
          {
            v369 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v399 + 36), v444);
          }
          else
          {
            if (v365)
            {
              *v365 = *(_QWORD *)&v444[0];
              v366 = *((_QWORD *)&v444[0] + 1);
              v365[1] = *((_QWORD *)&v444[0] + 1);
              if (v366)
              {
                v367 = (unint64_t *)(v366 + 8);
                do
                  v368 = __ldxr(v367);
                while (__stxr(v368 + 1, v367));
              }
            }
            v369 = v365 + 2;
          }
          v399[37] = v369;
          v370 = (std::__shared_weak_count *)*((_QWORD *)&v444[0] + 1);
          if (!*((_QWORD *)&v444[0] + 1))
            goto LABEL_537;
          v371 = (unint64_t *)(*((_QWORD *)&v444[0] + 1) + 8);
          do
            v372 = __ldaxr(v371);
          while (__stlxr(v372 - 1, v371));
          if (!v372)
          {
            ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
            std::__shared_weak_count::__release_weak(v370);
            v373 = (std::__shared_weak_count *)v446;
            if (v446)
            {
LABEL_538:
              v374 = (unint64_t *)&v373->__shared_owners_;
              do
                v375 = __ldaxr(v374);
              while (__stlxr(v375 - 1, v374));
              if (!v375)
              {
                ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
                std::__shared_weak_count::__release_weak(v373);
              }
            }
          }
          else
          {
LABEL_537:
            v373 = (std::__shared_weak_count *)v446;
            if (v446)
              goto LABEL_538;
          }
          v355 += 2;
        }
        while (v355 != v356);
      }
      v376 = v399[3];
      objc_msgSend(v376, "routeInfo");
      v377 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v377, "route");
      v378 = objc_claimAutoreleasedReturnValue();
      v379 = (void *)v378;
      v380 = (uint64_t *)v399[41];
      if (v380)
      {
        while (1)
        {
          while (1)
          {
            v382 = v380;
            v383 = v380[4];
            if (v378 >= v383)
              break;
            v380 = (uint64_t *)*v382;
            v381 = v382;
            if (!*v382)
              goto LABEL_551;
          }
          if (v383 >= v378)
            break;
          v380 = (uint64_t *)v382[1];
          if (!v380)
          {
            v381 = v382 + 1;
            goto LABEL_551;
          }
        }
        v384 = (uint64_t)v382;
      }
      else
      {
        v381 = (uint64_t *)(v399 + 41);
        v382 = (uint64_t *)(v399 + 41);
LABEL_551:
        v384 = (*(uint64_t (**)(id, uint64_t, uint64_t))(*(_QWORD *)v399[42] + 16))(v399[42], 48, 8);
        *(_QWORD *)(v384 + 32) = v379;
        *(_BYTE *)(v384 + 40) = 0;
        *(_QWORD *)v384 = 0;
        *(_QWORD *)(v384 + 8) = 0;
        *(_QWORD *)(v384 + 16) = v382;
        *v381 = v384;
        v385 = *(void **)v399[40];
        v386 = (uint64_t *)v384;
        if (v385)
        {
          v399[40] = v385;
          v386 = (uint64_t *)*v381;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v399[41], v386);
        v379 = 0;
        v399[43] = (char *)v399[43] + 1;
      }
      *(_BYTE *)(v384 + 40) = 1;

      md::LabelFeatureStyler::styleExternalFeatures(*((unsigned int **)v399[1] + 37), (uint64_t **)v399 + 36);
      v387 = v399[1];
      v387[3041] = 1;
      v388 = atomic_load(v387 + 3058);
      if ((v388 & 1) != 0)
      {
        v389 = *((_QWORD *)v387 + 17);
        if (v389)
        {
          v390 = *(_QWORD *)(v389 + 56);
          if (v390)
          {
            v445 = v387;
            LOBYTE(v444[0]) = 9;
            (*(void (**)(uint64_t, void **, __int128 *))(*(_QWORD *)v390 + 48))(v390, &v445, v444);
          }
        }
      }
    }
  }
}

void sub_19FDD6D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void md::RouteLineSupport::clearRouteLabelFeatures(md::RouteLineSupport *this)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t j;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 320, *((_QWORD *)this + 41));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 40) = (char *)this + 328;
  *((_QWORD *)this + 41) = 0;
  v2 = *((_QWORD *)this + 33);
  for (i = *((_QWORD *)this + 34); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *((_QWORD *)this + 34) = v2;
  v7 = *((_QWORD *)this + 36);
  for (j = *((_QWORD *)this + 37); j != v7; j -= 16)
  {
    v9 = *(std::__shared_weak_count **)(j - 8);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  *((_QWORD *)this + 37) = v7;
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  _OWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  id v19;
  void *v20;
  int v21;
  id v22;
  int v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  int v31;
  id v32;
  unsigned int v33;
  float v34;
  unint64_t m;
  unsigned int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  float v41;
  unint64_t v43;
  unsigned int v44;
  float v45;
  BOOL v46;
  BOOL v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v51;
  unsigned int v52;
  float v53;
  void **v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  char v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  float v65;
  uint64_t v67;
  unint64_t v68;
  unint64_t k;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  float v73;
  unsigned int v75;
  void **v77;
  void *v78;
  void *v79;
  unint64_t v80;
  unsigned int v81;
  float v82;
  void *v84;
  void *v85;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unint64_t *v90;
  BOOL v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  unsigned int v96;
  unsigned int v97;
  int v99;
  int v100;
  float v101;
  unint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int *v113;
  id v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  float v126;
  int v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  BOOL v137;
  unsigned int v138;
  BOOL v139;
  id v140;
  void *v141;
  uint64_t v142;
  int v143;
  void *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  id v155;
  id v156;
  _OWORD *v157;
  void **v158;
  int v159;
  void *v160;
  id v161;
  id v162;
  void *v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  int v171;
  float v172;
  unint64_t v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  unsigned int v177;
  id v179;
  void *v180;
  uint64_t j;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  int v186;
  int v187;
  float v188;
  uint64_t v189;
  _OWORD *v190;
  _OWORD *v191;
  int v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  unsigned int v196;
  void *v198;
  int v199;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  id v204;
  id v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v211;
  __int128 v212;
  __int128 v213;

char *std::vector<md::RoadNameWithRange>::__emplace_back_slow_path<std::nullopt_t const&,geo::PolylineCoordinate &,geo::PolylineCoordinate const&>(void **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  id *v20;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v6 = 0x7FFFFFFFFFFFFFFLL;
  if (v6 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v11 = 32 * v6;
  v12 = (char *)operator new(32 * v6);
  v13 = &v12[32 * v5];
  *v13 = 0;
  v13[8] = 0;
  v14 = &v12[v11];
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  v15 = v13 + 32;
  if (v3 == v4)
  {
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v13[v16];
      v18 = &v3[v16];
      *(v17 - 32) = 0;
      *(v17 - 24) = 0;
      if (v3[v16 - 24])
      {
        v19 = *((_QWORD *)v18 - 4);
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v17 - 4) = v19;
        *(v17 - 24) = 1;
      }
      *((_OWORD *)v17 - 1) = *((_OWORD *)v18 - 1);
      v16 -= 32;
    }
    while (&v3[v16] != v4);
    v3 = (char *)*a1;
    v20 = (id *)a1[1];
    *a1 = &v13[v16];
    a1[1] = v15;
    a1[2] = v14;
    while (v20 != (id *)v3)
    {
      if (*((_BYTE *)v20 - 24))

      v20 -= 4;
    }
  }
  if (v3)
    operator delete(v3);
  return v15;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  _OWORD *v5;
  id v6;
  void *v7;
  int v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  __int128 v13;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    v5 = (_OWORD *)(a1 + 16);
    v13 = *(_OWORD *)(a1 + 16);
    if (*(_BYTE *)(a2 + 8))
    {
      v6 = *(id *)a2;
      *(_QWORD *)a2 = 0;
      v7 = *(void **)a1;
      *(_QWORD *)a1 = v6;
      v11 = v4;

      v4 = v11;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
    }
    v8 = 1;
  }
  else
  {
    v5 = (_OWORD *)(a1 + 16);
    v13 = *(_OWORD *)(a1 + 16);
    v8 = *(unsigned __int8 *)(a2 + 8);
    if (*(_BYTE *)(a2 + 8))
    {
      v4 = 0;
      v8 = 0;
      v9 = *(id *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)a1 = v9;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  *v5 = *(_OWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 8) == v8)
  {
    if (!*(_BYTE *)(a2 + 8))
      goto LABEL_16;
    v10 = *(id *)a2;
    *(_QWORD *)a2 = v4;

  }
  else
  {
    if (*(_BYTE *)(a2 + 8))
    {
      v12 = v4;

      v4 = v12;
      *(_BYTE *)(a2 + 8) = 0;
      goto LABEL_16;
    }
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = 1;
  }
  v4 = 0;
LABEL_16:
  *(_OWORD *)(a2 + 16) = v13;
  if (v3)

}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;

  v5 = a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  v8 = *(_DWORD *)(a1 + 16);
  if (v6 < v8 || (v6 == v8 ? (v9 = v7 < *(float *)(a1 + 20)) : (v9 = 0), v9))
  {
    v14 = *(_DWORD *)(a3 + 16);
    if (v14 >= v6 && (v14 != v6 || *(float *)(a3 + 20) >= v7))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2);
      v16 = *(_DWORD *)(a3 + 16);
      v17 = *(_DWORD *)(a2 + 16);
      if (v16 >= v17 && (v16 != v17 || *(float *)(a3 + 20) >= *(float *)(a2 + 20)))
        return;
      a1 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a3);
    return;
  }
  v10 = *(_DWORD *)(a3 + 16);
  if (v10 < v6 || (v10 == v6 ? (v11 = *(float *)(a3 + 20) < v7) : (v11 = 0), v11))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a2, a3);
    v12 = *(_DWORD *)(a2 + 16);
    v13 = *(_DWORD *)(v5 + 16);
    if (v12 < v13 || v12 == v13 && *(float *)(a2 + 20) < *(float *)(v5 + 20))
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(v5, a2);
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a2, a3);
  v8 = *(_DWORD *)(a4 + 16);
  v9 = *(_DWORD *)(a3 + 16);
  if (v8 < v9 || (v8 == v9 ? (v10 = *(float *)(a4 + 20) < *(float *)(a3 + 20)) : (v10 = 0), v10))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a3, a4);
    v11 = *(_DWORD *)(a3 + 16);
    v12 = *(_DWORD *)(a2 + 16);
    if (v11 < v12 || (v11 == v12 ? (v13 = *(float *)(a3 + 20) < *(float *)(a2 + 20)) : (v13 = 0), v13))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a2, a3);
      v14 = *(_DWORD *)(a2 + 16);
      v15 = *(_DWORD *)(a1 + 16);
      if (v14 < v15 || v14 == v15 && *(float *)(a2 + 20) < *(float *)(a1 + 20))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2);
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a2, a3, a4);
  v10 = *(_DWORD *)(a5 + 16);
  v11 = *(_DWORD *)(a4 + 16);
  if (v10 < v11 || (v10 == v11 ? (v12 = *(float *)(a5 + 20) < *(float *)(a4 + 20)) : (v12 = 0), v12))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a4, a5);
    v13 = *(_DWORD *)(a4 + 16);
    v14 = *(_DWORD *)(a3 + 16);
    if (v13 < v14 || (v13 == v14 ? (v15 = *(float *)(a4 + 20) < *(float *)(a3 + 20)) : (v15 = 0), v15))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a3, a4);
      v16 = *(_DWORD *)(a3 + 16);
      v17 = *(_DWORD *)(a2 + 16);
      if (v16 < v17 || v16 == v17 && *(float *)(a3 + 20) < *(float *)(a2 + 20))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a2, a3);
        v18 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a1 + 16);
        if (v18 < v19 || v18 == v19 && *(float *)(a2 + 20) < *(float *)(a1 + 20))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2);
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  float v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int *v29;
  _BYTE *v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;

  v2 = a2;
  v4 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = *(_DWORD *)(a2 - 16);
      v6 = *(_DWORD *)(a1 + 16);
      if (v5 < v6 || (v5 == v6 ? (v7 = *(float *)(a2 - 12) < *(float *)(a1 + 20)) : (v7 = 0), v7))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2 - 32);
      break;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a2 - 32);
      break;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a1 + 64, a2 - 32);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,0>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      break;
    default:
      v8 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a1 + 64);
      v9 = a1 + 96;
      v4 = 1;
      if (a1 + 96 != v2)
      {
        v10 = 0;
        v11 = 0;
        v33 = v2;
        while (1)
        {
          v12 = *(_DWORD *)(v9 + 16);
          v13 = *(_DWORD *)(v8 + 16);
          if (v12 < v13 || (v12 == v13 ? (v14 = *(float *)(v9 + 20) < *(float *)(v8 + 20)) : (v14 = 0), v14))
          {
            v15 = *(unsigned __int8 *)(v9 + 8);
            if (*(_BYTE *)(v9 + 8))
            {
              v36 = *(_QWORD *)v9;
              *(_QWORD *)v9 = 0;
              v35 = 1;
            }
            else
            {
              v35 = 0;
              v36 &= 0xFFFFFFFFFFFFFF00;
            }
            v16 = *(float *)(v9 + 20);
            v34 = *(_QWORD *)(v9 + 24);
            v17 = v10;
            v18 = v15;
            while (1)
            {
              v19 = a1 + v17;
              if (v18 == *(unsigned __int8 *)(a1 + v17 + 72))
              {
                if (v18)
                {
                  v20 = *(_QWORD *)(v19 + 64);
                  *(_QWORD *)(v19 + 64) = 0;
                  v21 = *(void **)(v19 + 96);
                  *(_QWORD *)(v19 + 96) = v20;

                }
              }
              else if (v18)
              {

                *(_BYTE *)(v19 + 104) = 0;
              }
              else
              {
                v22 = *(_QWORD *)(v19 + 64);
                *(_QWORD *)(v19 + 64) = 0;
                *(_QWORD *)(v19 + 96) = v22;
                *(_BYTE *)(v19 + 104) = 1;
              }
              v23 = a1 + v17;
              *(_OWORD *)(a1 + v17 + 112) = *(_OWORD *)(a1 + v17 + 80);
              if (v17 == -64)
                break;
              v24 = *(_DWORD *)(v23 + 48);
              v25 = v12 == v24;
              if (v12 >= v24)
              {
                v26 = a1 + v17;
                if (!v25 || v16 >= *(float *)(a1 + v17 + 52))
                {
                  v28 = v26 + 64;
                  v29 = (unsigned int *)(v26 + 80);
                  v30 = (_BYTE *)(v26 + 72);
                  goto LABEL_38;
                }
              }
              v18 = *(unsigned __int8 *)(v19 + 72);
              v17 -= 32;
            }
            v29 = (unsigned int *)(v23 + 80);
            v30 = (_BYTE *)(v23 + 72);
            v28 = a1;
LABEL_38:
            if (*v30 == v35)
            {
              if (*v30)
              {
                v31 = *(id *)v28;
                *(_QWORD *)v28 = v36;

                v36 = 0;
              }
            }
            else if (*v30)
            {

              *v30 = 0;
            }
            else
            {
              *(_QWORD *)v28 = v36;
              v36 = 0;
              *v30 = 1;
            }
            v2 = v33;
            *v29 = v12;
            *(float *)(v28 + 20) = v16;
            *(_QWORD *)(v28 + 24) = v34;
            if (v15)

            if (++v11 == 8)
              break;
          }
          v8 = v9;
          v10 += 32;
          v9 += 32;
          if (v9 == v2)
            return 1;
        }
        v4 = v9 + 32 == v33;
      }
      break;
  }
  return v4;
}

void getSortedArrayOfRoutes(VKRouteContext *a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  VKRouteInfo *v11;
  void *v12;
  void *v13;
  void *v14;
  VKRouteInfo *routeInfo;
  VKRouteInfo *p_route;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  VKRouteInfo *v22;
  VKRouteInfo *v23;
  objc_class *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "alternateRoutes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");
  objc_msgSend(v3, "routeInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    ++v5;
  a1->super.isa = 0;
  a1->_routeInfo = 0;
  *(_QWORD *)&a1->_useType = 0;
  {
    v27 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v27, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  a1->_inspectedSegmentIndex = mdm::Allocator::instance(void)::alloc;
  if (v5)
  {
    if (v5 >> 61)
      abort();
    v9 = 8 * v5;
    v10 = (objc_class *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v9, 8);
    a1->super.isa = v10;
    v11 = (VKRouteInfo *)((char *)v10 + v9);
    *(_QWORD *)&a1->_useType = (char *)v10 + v9;
    do
    {
      if (v10)
        *(_QWORD *)v10 = 0;
      v10 = (objc_class *)((char *)v10 + 8);
      v9 -= 8;
    }
    while (v9);
    a1->_routeInfo = v11;
  }

  objc_msgSend(v3, "routeInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(v3, "routeInfo");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "route");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v14;
    routeInfo = a1->_routeInfo;
    if ((unint64_t)routeInfo >= *(_QWORD *)&a1->_useType)
    {
      p_route = (VKRouteInfo *)std::vector<GEOComposedRoute * {__strong},geo::StdAllocator<GEOComposedRoute * {__strong},mdm::Allocator>>::__emplace_back_slow_path<GEOComposedRoute * {__strong}>((uint64_t)a1, (uint64_t *)&v33);
      v14 = v33;
    }
    else
    {
      if (routeInfo)
      {
        v33 = 0;
        routeInfo->super.isa = (Class)v14;
        v14 = 0;
      }
      p_route = (VKRouteInfo *)&routeInfo->_route;
    }
    a1->_routeInfo = p_route;

  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  objc_msgSend(v3, "alternateRoutes");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v30 != v19)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "route");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v21;
        v22 = a1->_routeInfo;
        if ((unint64_t)v22 >= *(_QWORD *)&a1->_useType)
        {
          v23 = (VKRouteInfo *)std::vector<GEOComposedRoute * {__strong},geo::StdAllocator<GEOComposedRoute * {__strong},mdm::Allocator>>::__emplace_back_slow_path<GEOComposedRoute * {__strong}>((uint64_t)a1, (uint64_t *)&v28);
          v21 = v28;
        }
        else
        {
          if (v22)
          {
            v28 = 0;
            v22->super.isa = (Class)v21;
            v21 = 0;
          }
          v23 = (VKRouteInfo *)&v22->_route;
        }
        a1->_routeInfo = v23;

      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v18);
  }

  v24 = (objc_class *)a1->_routeInfo;
  v25 = 126 - 2 * __clz((v24 - a1->super.isa) >> 3);
  if (v24 == a1->super.isa)
    v26 = 0;
  else
    v26 = v25;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*,false>((void **)a1->super.isa, (void **)v24, v26, 1);

}

void sub_19FDD8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  uint64_t *v20;
  void *v21;

  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](v20);
  _Unwind_Resume(a1);
}

void md::RouteLineSupport::resolveCurrentRouteLeg(md::RouteLineSupport *this)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  *((_QWORD *)this + 28) = 0;
  v1 = (void *)*((_QWORD *)this + 3);
  if (v1)
  {
    v3 = v1;
    objc_msgSend(v3, "routeInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "route");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    LODWORD(v3) = *((_DWORD *)this + 53);
    if (v3 < objc_msgSend(v6, "pointCount"))
    {
      v5 = objc_msgSend(v6, "legIndexForStepIndex:", objc_msgSend(v6, "stepIndexForPointIndex:", *((unsigned int *)this + 53)));
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
        *((_QWORD *)this + 28) = v5;
    }

  }
}

void sub_19FDD9028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<GEOComposedRoute * {__strong},geo::StdAllocator<GEOComposedRoute * {__strong},mdm::Allocator>>::__emplace_back_slow_path<GEOComposedRoute * {__strong}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(_QWORD **)a1;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 == *(_QWORD *)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (!v14)
      return v12;
    goto LABEL_26;
  }
  v15 = v14 - *(_QWORD *)a1 - 8;
  if (v15 <= 0x57
    || ((v16 = ((unint64_t)v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = v14 + v16,
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = (unint64_t)v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(_QWORD **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *--v21;
      *v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = (_QWORD *)(v14 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
  v22 = v10 - 2;
  v23 = (__int128 *)(v14 - 32);
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *v23;
    v25 = v23[1];
    *v23 = 0uLL;
    v23[1] = 0uLL;
    v23 -= 2;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(_QWORD *)a1;
  v28 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v30 = *(void **)(v28 - 8);
    v28 -= 8;

  }
  if (v14)
LABEL_26:
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - v14);
  return v12;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*,false>(void **a1, void **a2, uint64_t a3, char a4)
{
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;
  void **v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  BOOL v36;
  BOOL v37;
  void *v38;
  void **v39;
  void **v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void **v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void **v56;
  BOOL v58;
  uint64_t v59;
  void **v60;
  void **v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  int64_t v68;
  int64_t v69;
  void *v70;
  int64_t v71;
  uint64_t v72;
  void **v73;
  void *v74;
  void **v75;
  void *v76;
  void *v77;
  void **v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v83;
  void *v84;
  void **v85;
  void *v86;
  void **v87;
  void *v88;
  void **v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  void **v95;
  void *v96;
  void *v97;
  void **v98;
  void *v99;
  void *v100;
  void *v101;
  void **v102;
  void **v103;
  void *v104;
  void *v105;
  void **v106;

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2, void **a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v6 = *a2;
  v7 = *a1;
  v8 = *a3;
  if (*a2 >= *a1)
  {
    if (v8 < v6)
    {
      *a2 = 0;
      v12 = *a3;
      *a3 = 0;
      v13 = *a2;
      *a2 = v12;

      v14 = *a3;
      *a3 = v6;

      v15 = *a1;
      if (*a2 < *a1)
      {
        *a1 = 0;
        v16 = *a2;
        *a2 = 0;
        v17 = *a1;
        *a1 = v16;

        v18 = *a2;
        *a2 = v15;

      }
    }
  }
  else
  {
    *a1 = 0;
    if (v8 >= v6)
    {
      v19 = *a2;
      *a2 = 0;
      v20 = *a1;
      *a1 = v19;

      v21 = *a2;
      *a2 = v7;

      v22 = *a2;
      if (*a3 < *a2)
      {
        *a2 = 0;
        v23 = *a3;
        *a3 = 0;
        v24 = *a2;
        *a2 = v23;

        v25 = *a3;
        *a3 = v22;

      }
    }
    else
    {
      v9 = *a3;
      *a3 = 0;
      v10 = *a1;
      *a1 = v9;

      v11 = *a3;
      *a3 = v7;

    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2, void **a3, void **a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a2, a3);
  v8 = *a3;
  if (*a4 < *a3)
  {
    *a3 = 0;
    v9 = *a4;
    *a4 = 0;
    v10 = *a3;
    *a3 = v9;

    v11 = *a4;
    *a4 = v8;

    v12 = *a2;
    if (*a3 < *a2)
    {
      *a2 = 0;
      v13 = *a3;
      *a3 = 0;
      v14 = *a2;
      *a2 = v13;

      v15 = *a3;
      *a3 = v12;

      v16 = *a1;
      if (*a2 < *a1)
      {
        *a1 = 0;
        v17 = *a2;
        *a2 = 0;
        v18 = *a1;
        *a1 = v17;

        v19 = *a2;
        *a2 = v16;

      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2, void **a3, void **a4, void **a5)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a2, a3, a4);
  v10 = *a4;
  if (*a5 < *a4)
  {
    *a4 = 0;
    v11 = *a5;
    *a5 = 0;
    v12 = *a4;
    *a4 = v11;

    v13 = *a5;
    *a5 = v10;

    v14 = *a3;
    if (*a4 < *a3)
    {
      *a3 = 0;
      v15 = *a4;
      *a4 = 0;
      v16 = *a3;
      *a3 = v15;

      v17 = *a4;
      *a4 = v14;

      v18 = *a2;
      if (*a3 < *a2)
      {
        *a2 = 0;
        v19 = *a3;
        *a3 = 0;
        v20 = *a2;
        *a2 = v19;

        v21 = *a3;
        *a3 = v18;

        v22 = *a1;
        if (*a2 < *a1)
        {
          *a1 = 0;
          v23 = *a2;
          *a2 = 0;
          v24 = *a1;
          *a1 = v23;

          v25 = *a2;
          *a2 = v22;

        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      if (*(a2 - 1) < *a1)
      {
        *a1 = 0;
        v7 = *(a2 - 1);
        *(a2 - 1) = 0;
        v8 = *a1;
        *a1 = v7;

        v9 = *(a2 - 1);
        *(a2 - 1) = v6;

        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = (unint64_t *)(a1 + 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2);
      v11 = (unint64_t *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v16 = (void *)*v11;
    v17 = *v10;
    if (*v11 < *v10)
    {
      *v11 = 0;
      v18 = v12;
      do
      {
        v19 = (void **)((char *)a1 + v18);
        v20 = *(void **)((char *)a1 + v18 + 24);
        v19[2] = 0;
        v19[3] = v17;

        if (v18 == -16)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v17 = v19[1];
        v18 -= 8;
      }
      while ((unint64_t)v16 < v17);
      v14 = (void **)((char *)a1 + v18 + 24);
LABEL_7:
      v15 = *v14;
      *v14 = v16;

      if (++v13 == 8)
        return v11 + 1 == (unint64_t *)a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == (unint64_t *)a2)
      return 1;
  }
}

void md::RouteLineSupport::resolveRouteLegWhen(md::RouteLineSupport *this, const PolylineCoordinate *a2, unsigned int *a3)
{
  void *v5;
  id v7;
  void *v8;
  unint64_t v9;
  PolylineCoordinate v10;
  BOOL v11;
  char v12;
  id v13;

  if (*(_QWORD *)&a2[28] == -1 || (v5 = (void *)a2[3]) == 0)
  {
    *(_BYTE *)this = 0;
  }
  else
  {
    v7 = v5;
    objc_msgSend(v7, "routeInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "route");
    v13 = (id)objc_claimAutoreleasedReturnValue();

    LODWORD(v7) = *a3;
    if (v7 >= objc_msgSend(v13, "pointCount")
      || (v9 = objc_msgSend(v13, "legIndexForStepIndex:", objc_msgSend(v13, "stepIndexForPointIndex:", *a3)),
          v9 == 0x7FFFFFFFFFFFFFFFLL))
    {
      *(_BYTE *)this = 0;
    }
    else
    {
      v10 = a2[28];
      v11 = *(_QWORD *)&v10 > v9;
      v12 = *(_QWORD *)&v10 >= v9;
      if (v11)
        v12 = 2;
      *(_BYTE *)this = 1;
      *((_BYTE *)this + 1) = v12;
    }

  }
}

void sub_19FDD9F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::RouteLineSupport::updateWaypointProximities(id *this)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  _QWORD *v6;
  int v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  float v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t j;
  void *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  int v45;
  int v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (md::RouteLineSupport::didCurrentWaypointChange((md::RouteLineSupport *)this))
  {
    v2 = this[3];
    objc_msgSend(v2, "currentWaypoint");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = this[30];
    this[30] = (id)v3;

    v5 = this[3];
    *((_BYTE *)this + 248) = objc_msgSend(v5, "currentWaypointProximity");

  }
  objc_msgSend(this[3], "routeInfo", this);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD **)(v42 + 40);
  if (v6 == (_QWORD *)(v42 + 48))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      if ((void *)v6[4] == v43)
      {
        v8 = *(void **)(v42 + 240);
        v46 = *(unsigned __int8 *)(v42 + 248);
      }
      else
      {
        v8 = 0;
        v46 = 0;
      }
      v9 = v6[5];
      v47 = v8;
      v10 = *(_QWORD **)(v9 + 64);
      v11 = 0.0;
      if (!v10)
        goto LABEL_20;
      v12 = (_QWORD *)(v9 + 64);
      do
      {
        v13 = v10[4];
        v14 = v13 >= (unint64_t)v47;
        if (v13 >= (unint64_t)v47)
          v15 = v10;
        else
          v15 = v10 + 1;
        if (v14)
          v12 = v10;
        v10 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v12 != (_QWORD *)(v9 + 64) && v12[4] <= (unint64_t)v47)
      {
        v16 = *((_DWORD *)v12 + 10);
        v11 = *((float *)v12 + 11);
      }
      else
      {
LABEL_20:
        v16 = 0;
      }
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      objc_msgSend(*(id *)(v9 + 24), "waypoints");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = v6;
      v45 = v7;
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v53;
        if (v46 == 2)
          v20 = 2;
        else
          v20 = 1;
        do
        {
          for (i = 0; i != v18; ++i)
          {
            if (*(_QWORD *)v53 != v19)
              objc_enumerationMutation(v17);
            v22 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * i);
            v23 = objc_msgSend(v22, "polylineCoordinate");
            if (v16 <= v23 && (v16 == (_DWORD)v23 ? (v24 = v11 <= *((float *)&v23 + 1)) : (v24 = 1), v24))
            {
              v25 = objc_msgSend(v22, "polylineCoordinate");
              if (v16 == (_DWORD)v25 && vabds_f32(*((float *)&v25 + 1), v11) < 0.00000011921)
                v26 = v20;
              else
                v26 = 1;
            }
            else
            {
              v26 = 3;
            }
            if (objc_msgSend(v22, "when") != v26)
            {
              if (v26 == 3 || objc_msgSend(v22, "when") == 3)
                *(_BYTE *)(v9 + 50) = 1;
              objc_msgSend(v22, "setWhen:", v26);
            }
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
        }
        while (v18);
      }

      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      objc_msgSend(*(id *)(v9 + 24), "anchorpoints");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
      if (v28)
      {
        v29 = *(_QWORD *)v49;
        if (v46 == 2)
          v30 = 2;
        else
          v30 = 1;
        do
        {
          for (j = 0; j != v28; ++j)
          {
            if (*(_QWORD *)v49 != v29)
              objc_enumerationMutation(v27);
            v32 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * j);
            v33 = objc_msgSend(v32, "polylineCoordinate");
            if (v16 <= v33 && (v16 == (_DWORD)v33 ? (v34 = v11 <= *((float *)&v33 + 1)) : (v34 = 1), v34))
            {
              v35 = objc_msgSend(v32, "polylineCoordinate");
              if (v16 == (_DWORD)v35 && vabds_f32(*((float *)&v35 + 1), v11) < 0.00000011921)
                v36 = v30;
              else
                v36 = 1;
            }
            else
            {
              v36 = 3;
            }
            if (objc_msgSend(v32, "when") != v36)
            {
              objc_msgSend(v32, "setWhen:", v36);
              *(_BYTE *)(v9 + 50) = 1;
            }
          }
          v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
        }
        while (v28);
      }

      v37 = v44;
      v38 = (_QWORD *)v44[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v37[2];
          v40 = *v39 == (_QWORD)v37;
          v37 = v39;
        }
        while (!v40);
      }
      v7 = (*(_BYTE *)(v44[5] + 50) != 0) | v45;
      v6 = v39;
    }
    while (v39 != (_QWORD *)(v42 + 48));
  }

  return v7 & 1;
}

void sub_19FDDA40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<md::RouteWaypointLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteWaypointLabelFeature>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>,std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>>(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD *v41;
  _OWORD *v42;
  _QWORD *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = (_QWORD *)*a1;
  v8 = a1[1];
  v10 = a2 - *a1;
  v11 = *a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v8) >> 4)
  {
    v13 = a5 + ((uint64_t)(v8 - (_QWORD)v9) >> 4);
    if (v13 >> 60)
      abort();
    v14 = v10 >> 4;
    v15 = v12 - (_QWORD)v9;
    if (v15 >> 3 > v13)
      v13 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    if (v16)
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 16 * v16, 8);
    else
      v17 = 0;
    v25 = (_QWORD *)(v17 + 16 * v14);
    v26 = &v25[2 * a5];
    v27 = v25;
    do
    {
      if (v27)
      {
        v28 = v6[1];
        *v27 = *v6;
        v27[1] = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
      }
      v27 += 2;
      v6 += 2;
    }
    while (v27 != (_QWORD *)v26);
    v31 = (_QWORD *)*a1;
    if (*a1 != v11)
    {
      v32 = (_QWORD *)v11;
      do
      {
        v33 = *((_OWORD *)v32 - 1);
        v32 -= 2;
        *((_OWORD *)v25 - 1) = v33;
        v25 -= 2;
        *v32 = 0;
        v32[1] = 0;
      }
      while (v32 != v31);
    }
    v34 = v17 + 16 * v16;
    v35 = a1[1];
    if (v35 != v11)
    {
      do
      {
        *v26++ = *(_OWORD *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v11 += 16;
      }
      while (v11 != v35);
      v11 = a1[1];
    }
    v36 = (_QWORD *)*a1;
    *a1 = (uint64_t)v25;
    a1[1] = (uint64_t)v26;
    v37 = a1[2];
    a1[2] = v34;
    while ((_QWORD *)v11 != v36)
    {
      v38 = *(std::__shared_weak_count **)(v11 - 8);
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v11 -= 16;
    }
    if (v36)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v36, v37 - (_QWORD)v36);
    return;
  }
  v18 = (uint64_t)(v8 - v11) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
    v21 = (_QWORD *)a1[1];
LABEL_47:
    v41 = &v21[-2 * a5];
    v42 = v21;
    if ((unint64_t)v41 < v8)
    {
      v43 = &v21[-2 * a5];
      v42 = v21;
      do
      {
        if (v42)
        {
          *v42 = *(_OWORD *)v43;
          *v43 = 0;
          v43[1] = 0;
        }
        v43 += 2;
        ++v42;
      }
      while ((unint64_t)v43 < v8);
    }
    a1[1] = (uint64_t)v42;
    if (v21 != (_QWORD *)(v11 + 16 * a5))
    {
      do
      {
        v44 = *((_OWORD *)v41 - 1);
        v41 -= 2;
        *v41 = 0;
        v41[1] = 0;
        v45 = (std::__shared_weak_count *)*(v21 - 1);
        *((_OWORD *)v21 - 1) = v44;
        v21 -= 2;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
      }
      while (v41 != (_QWORD *)v11);
    }
    for (; v6 != v19; v11 += 16)
    {
      v49 = *v6;
      v48 = v6[1];
      if (v48)
      {
        v50 = (unint64_t *)(v48 + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = *(std::__shared_weak_count **)(v11 + 8);
      *(_QWORD *)v11 = v49;
      *(_QWORD *)(v11 + 8) = v48;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v6 += 2;
    }
    return;
  }
  v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    v21 = (_QWORD *)a1[1];
  }
  else
  {
    v20 = &a3[2 * v18];
    v21 = (_QWORD *)a1[1];
    do
    {
      if (v21)
      {
        v22 = v20[1];
        *v21 = *v20;
        v21[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      v20 += 2;
      v21 += 2;
    }
    while (v20 != a4);
  }
  a1[1] = (uint64_t)v21;
  if ((uint64_t)(v8 - v11) >= 1)
    goto LABEL_47;
}

uint64_t *std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t a2, id **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  malloc_zone_t *zone;
  uint64_t v19;
  geo::read_write_lock *v20;
  const char *v21;
  malloc_zone_t *v22;

  v6 = (uint64_t *)(a1 + 1);
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = (uint64_t *)*v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a2)
        return v7;
      v5 = (uint64_t *)v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 1);
LABEL_8:
    v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 120, 8);
    *(_QWORD *)(v9 + 32) = **a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    {
      v15 = operator new();
      *(_QWORD *)(v15 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v15 + 24) = "VectorKitLabels";
      *(_OWORD *)(v15 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v15 = &off_1E42B5668;
      *(_QWORD *)(v15 + 8) = "VectorKitLabels";
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_OWORD *)(v15 + 104) = 0u;
      *(_OWORD *)(v15 + 120) = 0u;
      *(_OWORD *)(v15 + 136) = 0u;
      *(_OWORD *)(v15 + 152) = 0u;
      *(_OWORD *)(v15 + 168) = 0u;
      *(_OWORD *)(v15 + 184) = 0u;
      *(_OWORD *)(v15 + 200) = 0u;
      *(_OWORD *)(v15 + 216) = 0u;
      *(_OWORD *)(v15 + 232) = 0u;
      *(_QWORD *)(v15 + 248) = 0;
      *(_OWORD *)(v15 + 56) = 0u;
      v16 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v15 + 56), 0);
      if ((_DWORD)v16)
        geo::read_write_lock::logFailure(v16, (uint64_t)"initialization", v17);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v15 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v15 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v15;
    }
    *(_QWORD *)(v9 + 80) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 104) = 0;
    {
      v19 = operator new();
      *(_QWORD *)(v19 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v19 + 24) = "VectorKitLabels";
      *(_OWORD *)(v19 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v19 = &off_1E42B5668;
      *(_QWORD *)(v19 + 8) = "VectorKitLabels";
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_QWORD *)(v19 + 248) = 0;
      *(_OWORD *)(v19 + 56) = 0u;
      v20 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v19 + 56), 0);
      if ((_DWORD)v20)
        geo::read_write_lock::logFailure(v20, (uint64_t)"initialization", v21);
      v22 = malloc_create_zone(0, 0);
      *(_QWORD *)(v19 + 48) = v22;
      malloc_set_zone_name(v22, "VectorKitLabels");
      *(_QWORD *)(v19 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v19;
    }
    *(_QWORD *)(v9 + 112) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v7;
    *v6 = v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
  }
  return (uint64_t *)v9;
}

void std::__shared_ptr_emplace<md::WaypointStore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::WaypointStore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::WaypointStore>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::RouteLineSupport::setRouteLine(md::RouteLineSupport *this, VKRouteLine *a2)
{
  VKRouteLine *v3;
  VKRouteLine *v4;
  VKRouteLine *v5;
  void *v6;
  VKRouteLineObserverForExternalFeatures *v7;
  void *v8;
  VKRouteLine *v9;

  v9 = a2;
  if (*((VKRouteLine **)this + 45) != v9)
  {
    v3 = v9;
    v4 = v3;
    if (v3)
      v5 = v3;
    v6 = (void *)*((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = v4;

    v7 = -[VKRouteLineObserverForExternalFeatures initWithRouteLineSupport:andRouteLine:]([VKRouteLineObserverForExternalFeatures alloc], "initWithRouteLineSupport:andRouteLine:", this, v4);
    v8 = (void *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = v7;

    md::RouteLineSupport::generateRoutelineFeatures((id *)this);
  }

}

void sub_19FDDABF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::StandardLabelMapTile::~StandardLabelMapTile(md::StandardLabelMapTile *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A570;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelMapTile::~LabelMapTile(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A570;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::StandardLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

_QWORD *std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D07D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D07D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42D07D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42D07D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[1];
  v1 = a1[2];
  if (*(_QWORD *)(v2 + 504) != v1)
  {
    v3 = a1[3];
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(std::__shared_weak_count **)(v2 + 512);
    *(_QWORD *)(v2 + 504) = v1;
    *(_QWORD *)(v2 + 512) = v3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_BYTE *)(v2 + 122) = 1;
  }
}

void md::DaVinciAssetResourceDecoder::~DaVinciAssetResourceDecoder(md::DaVinciAssetResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

geo::codec::Asset **std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:nn180100](geo::codec::Asset **a1)
{
  geo::codec::Asset *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::codec::Asset::~Asset(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void **std::vector<geo::codec::MaterialSheet::Material>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v3 - 456));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v6 = *(_QWORD **)(v4 - 24);
            if (v6)
            {
              do
              {
                v7 = (_QWORD *)*v6;
                operator delete(v6);
                v6 = v7;
              }
              while (v7);
            }
            v8 = *(void **)(v4 - 40);
            *(_QWORD *)(v4 - 40) = 0;
            if (v8)
              operator delete(v8);
            v4 -= 48;
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::DaVinciAssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciAssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciAssetOcclusionMeshResourceDecoder::~DaVinciAssetOcclusionMeshResourceDecoder(md::DaVinciAssetOcclusionMeshResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciAssetOcclusionMeshResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  _QWORD v20[3];
  char v21;
  int v22;

  if (*(_QWORD *)a2)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    v22 = 0;
    v20[0] = v7;
    v20[1] = v8;
    v20[2] = 0;
    v21 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v19 = 0;
    if (geo::codec::AssetDecoder::decodeAssetOcclusionMeshes((uint64_t)v20, &v22, (uint64_t)__p))
    {
      v9 = (char *)operator new(0xC0uLL);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = &off_1E42DDC08;
      v10 = gdc::Resource::Resource((uint64_t)(v9 + 24), (uint64_t)a1);
      *(_OWORD *)(v9 + 168) = *(_OWORD *)__p;
      *((_QWORD *)v9 + 23) = v19;
      *a3 = v10;
      a3[1] = (uint64_t)v9;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      v11 = (char *)__p[0];
      if (__p[0])
      {
        v12 = (char *)__p[1];
        v13 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v14 = *((_QWORD *)v12 - 7);
            if (v14)
            {
              *((_QWORD *)v12 - 6) = v14;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 - 4) + 40))(*((_QWORD *)v12 - 4), v14, *((_QWORD *)v12 - 5) - v14);
            }
            v15 = *((_QWORD *)v12 - 11);
            if (v15)
            {
              *((_QWORD *)v12 - 10) = v15;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 - 8) + 40))(*((_QWORD *)v12 - 8), v15, *((_QWORD *)v12 - 9) - v15);
            }
            v16 = *((_QWORD *)v12 - 15);
            if (v16)
            {
              *((_QWORD *)v12 - 14) = v16;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 - 12) + 40))(*((_QWORD *)v12 - 12), v16, *((_QWORD *)v12 - 13) - v16);
            }
            v17 = *((_QWORD *)v12 - 19);
            if (v17)
            {
              *((_QWORD *)v12 - 18) = v17;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 - 16) + 40))(*((_QWORD *)v12 - 16), v17, *((_QWORD *)v12 - 17) - v17);
            }
            v12 -= 152;
          }
          while (v12 != v11);
          v13 = __p[0];
        }
        __p[1] = v11;
        operator delete(v13);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_19FDDB2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<geo::codec::Mesh>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<geo::codec::Mesh>::~vector[abi:nn180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<geo::codec::Mesh>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t std::vector<geo::codec::Mesh>::__base_destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 152)
  {
    v5 = *(_QWORD *)(i - 56);
    if (v5)
    {
      *(_QWORD *)(i - 48) = v5;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 32) + 40))(*(_QWORD *)(i - 32), v5, *(_QWORD *)(i - 40) - v5);
    }
    v6 = *(_QWORD *)(i - 88);
    if (v6)
    {
      *(_QWORD *)(i - 80) = v6;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 64) + 40))(*(_QWORD *)(i - 64), v6, *(_QWORD *)(i - 72) - v6);
    }
    v7 = *(_QWORD *)(i - 120);
    if (v7)
    {
      *(_QWORD *)(i - 112) = v7;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 96) + 40))(*(_QWORD *)(i - 96), v7, *(_QWORD *)(i - 104) - v7);
    }
    v8 = *(_QWORD *)(i - 152);
    if (v8)
    {
      *(_QWORD *)(i - 144) = v8;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 128) + 40))(*(_QWORD *)(i - 128), v8, *(_QWORD *)(i - 136) - v8);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResource>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  v3 = (void **)(a1 + 21);
  v2 = a1[21];
  if (v2)
  {
    std::vector<geo::codec::Mesh>::__base_destruct_at_end[abi:nn180100]((uint64_t)(a1 + 21), v2);
    operator delete(*v3);
  }
  v4 = (void *)a1[4];
  if (v4 != (void *)a1[6])
    free(v4);
}

void generateRotationMatrixMeshPositioningMode(double *a1, uint64_t a2, uint64_t a3, double *a4, int a5, int a6, int a7)
{
  float v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float v31;
  __float2 v32;
  double v33;
  double v34;
  double v35;
  float v36;
  float64x2_t *v37;
  double *v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float v60;
  float v61;
  __float2 v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  float v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float64x2_t *v134;
  double *v136;
  double v137;
  double v138;
  double v140;
  double v141;
  double v142;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  float v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  __int128 v168;
  __int128 v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187[4];
  double v188;
  double v189;
  double v190;
  double v191;

  switch(a7)
  {
    case 2:
      v9 = *(float *)(a3 + 424);
      v10 = a3 + 208;
      v11 = 160;
      if (v9 >= 45.0)
        v10 = a3 + 160;
      else
        v11 = 208;
      v12 = *(double *)(a3 + v11);
      v13 = *(double *)(v10 + 8);
      v14 = *(double *)(v10 + 16);
      v15 = 0.0;
      v16 = 0.0;
      v17 = 1.0;
      if (!*(_BYTE *)(a3 + 8))
      {
        v18 = a4[1];
        v19 = a4[2];
        v20 = 1.0 / sqrt(*a4 * *a4 + v18 * v18 + v19 * v19);
        v15 = v20 * *a4;
        v16 = v20 * v18;
        v17 = v20 * v19;
      }
      v21 = -(v16 * v14 - v17 * v13);
      v22 = -(v17 * v12 - v15 * v14);
      v23 = -(v15 * v13 - v16 * v12);
      v24 = 1.0 / sqrt(v23 * v23 + v21 * v21 + v22 * v22);
      v25 = v24 * v21;
      v26 = v24 * v22;
      v27 = v24 * v23;
      v28 = -(v26 * v17 - v27 * v16);
      v29 = -(v27 * v15 - v25 * v17);
      v30 = -(v25 * v16 - v26 * v15);
      *a1 = v25;
      a1[1] = v26;
      a1[2] = v27;
      a1[3] = v28;
      a1[4] = v29;
      a1[5] = v30;
      a1[6] = v15;
      a1[7] = v16;
      a1[8] = v17;
      if (*(_BYTE *)(a3 + 1192))
      {
        v31 = *(float *)(a3 + 1188);
        if (v9 > v31)
        {
          v32 = __sincosf_stret((float)(v9 - v31) * 0.017453);
          v33 = (float)-v32.__sinval;
          v34 = v29 * v33 + v16 * v32.__cosval;
          a1[3] = v28 * v32.__cosval + v15 * v32.__sinval;
          a1[4] = v29 * v32.__cosval + v16 * v32.__sinval;
          a1[5] = v30 * v32.__cosval + v17 * v32.__sinval;
          a1[6] = v28 * v33 + v15 * v32.__cosval;
          v35 = v30 * v33 + v17 * v32.__cosval;
          a1[7] = v34;
          goto LABEL_70;
        }
      }
      return;
    case 3:
      v36 = *(float *)(a3 + 424);
      v37 = (float64x2_t *)(a3 + 160);
      if (v36 < 45.0)
        v37 = (float64x2_t *)(a3 + 208);
      _Q1 = vnegq_f64(*v37);
      if (v36 >= 45.0)
        v39 = (double *)(a3 + 176);
      else
        v39 = (double *)(a3 + 224);
      _D10 = 0.0;
      v41 = 0.0;
      v42 = 1.0;
      if (!*(_BYTE *)(a3 + 8))
      {
        v43 = a4[1];
        v44 = a4[2];
        v45 = 1.0 / sqrt(*a4 * *a4 + v43 * v43 + v44 * v44);
        _D10 = v45 * *a4;
        v41 = v45 * v43;
        v42 = v45 * v44;
      }
      v46 = -(vmuld_lane_f64(v42, _Q1, 1) - v41 * -*v39);
      v47 = vmlad_n_f64(*v39 * _D10, v42, _Q1.f64[0]);
      __asm { FMLA            D5, D10, V1.D[1] }
      v53 = 1.0 / sqrt(_D5 * _D5 + v46 * v46 + v47 * v47);
      v54 = v53 * v46;
      v55 = v53 * v47;
      v56 = v53 * _D5;
      v57 = -(v56 * v41 - v55 * v42);
      v58 = -(v54 * v42 - v56 * _D10);
      v59 = -(v55 * _D10 - v54 * v41);
      *a1 = v54;
      a1[1] = v55;
      a1[2] = v56;
      a1[3] = _D10;
      a1[4] = v41;
      a1[5] = v42;
      a1[6] = v57;
      a1[7] = v58;
      a1[8] = v59;
      if (*(_BYTE *)(a3 + 1192))
      {
        v60 = 90.0 - v36;
        v61 = *(float *)(a3 + 1188);
        if (v60 > v61)
        {
          v62 = __sincosf_stret((float)(v61 - v60) * 0.017453);
          v63 = (float)-v62.__sinval;
          v64 = v41 * v63 + v58 * v62.__cosval;
          a1[3] = _D10 * v62.__cosval + v57 * v62.__sinval;
          a1[4] = v41 * v62.__cosval + v58 * v62.__sinval;
          a1[5] = v42 * v62.__cosval + v59 * v62.__sinval;
          a1[6] = _D10 * v63 + v57 * v62.__cosval;
          v35 = v42 * v63 + v59 * v62.__cosval;
          a1[7] = v64;
          goto LABEL_70;
        }
      }
      return;
    case 4:
      v66 = *a4;
      v65 = a4[1];
      v67 = *(double *)(a3 + 136) - *a4;
      v68 = *(double *)(a3 + 144) - v65;
      v69 = a4[2];
      v70 = *(double *)(a3 + 152) - v69;
      v71 = 0.0;
      v72 = 0.0;
      v73 = 1.0;
      if (!*(_BYTE *)(a3 + 8))
      {
        v74 = 1.0 / sqrt(v66 * v66 + v65 * v65 + v69 * v69);
        v71 = v74 * v66;
        v72 = v74 * v65;
        v73 = v74 * v69;
      }
      v75 = -(v73 * v68 - v72 * v70);
      v76 = -(v71 * v70 - v73 * v67);
      v77 = -(v72 * v67 - v71 * v68);
      v78 = 1.0 / sqrt(v77 * v77 + v75 * v75 + v76 * v76);
      v79 = v78 * v75;
      v80 = v78 * v76;
      v81 = v78 * v77;
      v82 = -(v78 * v75 * v73 - v81 * v71);
      *a1 = v79;
      a1[1] = v80;
      a1[2] = v81;
      a1[3] = v71;
      a1[4] = v72;
      a1[5] = v73;
      v35 = -(v80 * v71 - v79 * v72);
      a1[6] = -(v81 * v72 - v80 * v73);
      a1[7] = v82;
      goto LABEL_70;
    case 5:
      v83 = *(float *)(a2 + 4);
      v84 = 1.0;
      if (*(_BYTE *)(a2 + 12))
        v85 = *(float *)a2;
      else
        v85 = 1.0;
      v86 = 0.0;
      if (*(_BYTE *)(a2 + 12))
      {
        v87 = *(float *)(a2 + 8);
      }
      else
      {
        v83 = 0.0;
        v87 = 0.0;
      }
      v88 = *a4;
      v89 = a4[1];
      v90 = a4[2];
      v91 = 0.0;
      if (!*(_BYTE *)(a3 + 8))
      {
        v92 = 1.0 / sqrt(v88 * v88 + v89 * v89 + v90 * v90);
        v86 = v92 * v88;
        v91 = v92 * v89;
        v84 = v92 * v90;
      }
      v93 = -(v91 * v87 - v84 * v83);
      v94 = -(v84 * v85 - v86 * v87);
      v95 = -(v86 * v83 - v91 * v85);
      v96 = -(v95 * v86 - v93 * v84);
      v97 = -(v93 * v91 - v94 * v86);
      v98 = -(v84 * v83 - v91 * v87);
      v99 = -(v86 * v87 - v84 * v85);
      v100 = -(v91 * v85 - v86 * v83);
      v101 = -(v100 * v91 - v99 * v84);
      v102 = -(v98 * v84 - v100 * v86);
      v103 = -(v99 * v86 - v98 * v91);
      if (a5 == 6)
      {
        v104 = v98;
      }
      else
      {
        v101 = v93;
        v102 = v94;
        v103 = v95;
        v104 = -(v94 * v84 - v95 * v91);
      }
      if (a5 == 6)
        v105 = v99;
      else
        v105 = v96;
      if (a5 == 6)
        v106 = v100;
      else
        v106 = v97;
      if (a6
        && (v101 * (*(double *)(a3 + 136) - v88)
          + v102 * (*(double *)(a3 + 144) - v89)
          + v103 * (*(double *)(a3 + 152) - v90))
         / sqrt((*(double *)(a3 + 136) - v88) * (*(double *)(a3 + 136) - v88)+ (*(double *)(a3 + 144) - v89) * (*(double *)(a3 + 144) - v89)+ (*(double *)(a3 + 152) - v90) * (*(double *)(a3 + 152) - v90)) < 0.0)
      {
        v101 = -v101;
        v102 = -v102;
        v103 = -v103;
        v104 = -v104;
        v105 = -v105;
        v106 = -v106;
      }
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v106;
      a1[3] = v86;
      a1[4] = v91;
      a1[5] = v84;
      a1[6] = v101;
      a1[7] = v102;
      a1[8] = v103;
      return;
    case 6:
      v107 = *(float *)(a2 + 8);
      v108 = *(float *)a2;
      v109 = 1.0;
      if (!*(_BYTE *)(a2 + 12))
        v108 = 1.0;
      v110 = 0.0;
      if (*(_BYTE *)(a2 + 12))
        v111 = *(float *)(a2 + 4);
      else
        v111 = 0.0;
      if (!*(_BYTE *)(a2 + 12))
        v107 = 0.0;
      v112 = a4[1];
      v113 = *(double *)(a3 + 136) - *a4;
      v114 = *(double *)(a3 + 144) - v112;
      v115 = a4[2];
      v116 = *(double *)(a3 + 152) - v115;
      v117 = sqrt(v113 * v113 + v114 * v114 + v116 * v116);
      v118 = 1.0 / sqrt(*a4 * *a4 + v112 * v112 + v115 * v115);
      v119 = v118 * v112;
      v120 = v118 * v115;
      if (*(_BYTE *)(a3 + 8))
        v121 = 0.0;
      else
        v121 = v118 * *a4;
      if (!*(_BYTE *)(a3 + 8))
      {
        v110 = v119;
        v109 = v120;
      }
      v122 = (v114 * v111 + v116 * v107 + v113 * v108) / v117;
      if (v122 <= 0.5)
        goto LABEL_69;
      v123 = -(v109 * v111 - v110 * v107);
      v124 = -(v121 * v107 - v109 * v108);
      v125 = -(v110 * v108 - v121 * v111);
      *a1 = v123;
      a1[1] = v124;
      a1[2] = v125;
      a1[3] = v121;
      a1[4] = v110;
      a1[5] = v109;
      a1[6] = -(v125 * v110 - v124 * v109);
      a1[7] = -(v123 * v109 - v125 * v121);
      a1[8] = -(v124 * v121 - v123 * v110);
      goto LABEL_67;
    case 7:
      v126 = *(float *)(a3 + 424);
      v128 = *a4;
      v127 = a4[1];
      v129 = *(double *)(a3 + 136) - *a4;
      v130 = *(double *)(a3 + 144) - v127;
      v131 = a4[2];
      v132 = *(double *)(a3 + 152) - v131;
      v133 = sqrt(v129 * v129 + v130 * v130 + v132 * v132);
      v134 = (float64x2_t *)(a3 + 160);
      if (v126 < 45.0)
        v134 = (float64x2_t *)(a3 + 208);
      _Q17 = vnegq_f64(*v134);
      if (v126 >= 45.0)
        v136 = (double *)(a3 + 176);
      else
        v136 = (double *)(a3 + 224);
      v137 = 0.0;
      v138 = 1.0;
      _D6 = 0.0;
      if (!*(_BYTE *)(a3 + 8))
      {
        v140 = 1.0 / sqrt(v128 * v128 + v127 * v127 + v131 * v131);
        _D6 = v140 * v128;
        v137 = v140 * v127;
        v138 = v140 * v131;
      }
      v141 = -(vmuld_lane_f64(v138, _Q17, 1) - v137 * -*v136);
      v142 = vmlad_n_f64(*v136 * _D6, v138, _Q17.f64[0]);
      __asm { FMLA            D20, D6, V17.D[1] }
      v144 = 1.0 / sqrt(v141 * v141 + v142 * v142 + _D20 * _D20);
      v145 = v144 * v141;
      v146 = v144 * v142;
      v147 = v144 * _D20;
      v148 = -(v147 * v137 - v146 * v138);
      v149 = -(v145 * v138 - v147 * _D6);
      v150 = -(v146 * _D6 - v145 * v137);
      v122 = (v149 * v130 + v150 * v132 + v148 * v129) / v133;
      if (v122 <= 0.5)
        goto LABEL_69;
      *a1 = v145;
      a1[1] = v146;
      a1[2] = v147;
      a1[3] = _D6;
      a1[4] = v137;
      a1[5] = v138;
      a1[6] = v148;
      a1[7] = v149;
      a1[8] = v150;
LABEL_67:
      if (v122 >= 0.642780006)
        return;
      gm::quaternionFromRotationMatrix<double>(&v188, a1);
      gm::quaternionFromRotationMatrix<double>(v187, (double *)(a3 + 992));
      v151 = v122 * -7.00378175 + 4.50189088;
      gm::Quaternion<double>::slerp(&v188, v187, v151);
      v152 = v188;
      v153 = v189;
      v154 = v190;
      v155 = v153 + v153;
      v156 = (v153 + v153) * v153;
      v157 = (v154 + v154) * v154;
      v158 = v152 + v152;
      v159 = (v152 + v152) * v189;
      v160 = (v154 + v154) * v191;
      v161 = v190 * (v152 + v152);
      v162 = v191 * v155;
      v163 = v191 * v155 + v161;
      v164 = 1.0 - (v152 + v152) * v152;
      v165 = v155 * v190;
      v166 = v155 * v190 - v191 * v158;
      v167 = v191 * v158 + v165;
      *a1 = 1.0 - (v156 + v157);
      a1[1] = v160 + v159;
      a1[2] = v161 - v162;
      a1[3] = v159 - v160;
      a1[4] = v164 - v157;
      a1[5] = v167;
      v35 = v164 - v156;
      a1[6] = v163;
      a1[7] = v166;
LABEL_70:
      a1[8] = v35;
      return;
    case 50:
      v170 = *(float *)(a2 + 8);
      v171 = *(float *)a2;
      v172 = 1.0;
      if (!*(_BYTE *)(a2 + 12))
        v171 = 1.0;
      v173 = 0.0;
      if (*(_BYTE *)(a2 + 12))
        v174 = *(float *)(a2 + 4);
      else
        v174 = 0.0;
      if (!*(_BYTE *)(a2 + 12))
        v170 = 0.0;
      v175 = 0.0;
      if (!*(_BYTE *)(a3 + 8))
      {
        v176 = a4[1];
        v177 = a4[2];
        v178 = 1.0 / sqrt(*a4 * *a4 + v176 * v176 + v177 * v177);
        v173 = v178 * *a4;
        v175 = v178 * v176;
        v172 = v178 * v177;
      }
      v179 = -(v172 * v174 - v175 * v170);
      v180 = -(v173 * v170 - v172 * v171);
      v181 = -(v175 * v171 - v173 * v174);
      v182 = -(v180 * v170 - v181 * v174);
      v183 = -(v181 * v171 - v179 * v170);
      v184 = -(v179 * v174 - v180 * v171);
      if (a6)
      {
        v185 = *(double *)(a3 + 144) - a4[1];
        v186 = *(double *)(a3 + 152) - a4[2];
        if ((v185 * v183 + v186 * v184 + (*(double *)(a3 + 136) - *a4) * v182)
           / sqrt(v185 * v185 + (*(double *)(a3 + 136) - *a4) * (*(double *)(a3 + 136) - *a4) + v186 * v186) < 0.0)
        {
          v182 = -v182;
          v183 = -v183;
          v184 = -v184;
          v179 = -v179;
          v180 = -v180;
          v181 = -v181;
        }
      }
      *a1 = v171;
      a1[1] = v174;
      a1[2] = v170;
      a1[3] = v179;
      a1[4] = v180;
      a1[5] = v181;
      a1[6] = v182;
      a1[7] = v183;
      a1[8] = v184;
      return;
    default:
LABEL_69:
      v168 = *(_OWORD *)(a3 + 1008);
      *(_OWORD *)a1 = *(_OWORD *)(a3 + 992);
      *((_OWORD *)a1 + 1) = v168;
      v169 = *(_OWORD *)(a3 + 1040);
      *((_OWORD *)a1 + 2) = *(_OWORD *)(a3 + 1024);
      *((_OWORD *)a1 + 3) = v169;
      v35 = *(double *)(a3 + 1056);
      goto LABEL_70;
  }
}

void md::FlyoverCommon::encodeFlyoverKey(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  _QWORD *v22;
  size_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  _BYTE *v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  void *v67;
  char v68;
  unint64_t v69;
  _BYTE *v70;
  __int128 *v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  int v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD v86[5];
  unsigned __int16 v87;
  void *v88;
  void *v89;
  void *v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD v94[5];
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char v99[32];
  unint64_t v100;
  int v101;
  uint64_t v102;

  v7 = *(_QWORD *)(a2 + 28);
  v8 = a2[24];
  v9 = *(_QWORD *)(a2 + 4);
  v81 = v9;
  v10 = a2[1];
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 9);
  v95 = v99;
  v96 = v99;
  v97 = v99;
  v98 = 32;
  v100 = 0;
  if ((v7 & 0xFF00000000) != 0)
    v13 = v7;
  else
    v13 = 0;
  v14 = v8 | (((v7 & 0xFF00000000) != 0) << 31);
  v101 = HIDWORD(v9);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v99, (char *)&v101, (char *)&v102);
  v101 = v81;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  v101 = v10;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  v101 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  v101 = v13;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  v101 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  v101 = v14;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  v16 = v95;
  v15 = v96;
  v17 = 0;
  v18 = v96 - v95;
  if (v96 != v95)
  {
    if (v18 <= 1)
      v19 = 1;
    else
      v19 = v96 - v95;
    v20 = v95;
    do
    {
      v21 = *v20++;
      v17 ^= (v17 << 6) - 0x61C8864680B583EBLL + (v17 >> 2) + v21;
      --v19;
    }
    while (v19);
  }
  v100 = v17;
  if ((a4 & 0xFF00000000) != 0)
  {
    v22 = v94;
    v90 = v94;
    v91 = (char *)v94;
    v92 = v94;
    v93 = 32;
    if (v18 < 0x21)
      goto LABEL_50;
    if (v18 <= 0x40)
      v23 = 64;
    else
      v23 = v96 - v95;
    v22 = malloc_type_malloc(v23, 0x100004077774924uLL);
    v24 = (char *)v90;
    v25 = v91;
    if (v90 == v91)
    {
LABEL_49:
      v90 = v22;
      v91 = (char *)v22;
      v93 = v23;
LABEL_50:
      if (v15 == v16)
        goto LABEL_68;
      if (v18 < 8)
      {
        v56 = v22;
        goto LABEL_66;
      }
      if ((unint64_t)((char *)v22 - v16) < 0x20)
      {
        v56 = v22;
        goto LABEL_66;
      }
      if (v18 >= 0x20)
      {
        v55 = v18 & 0xFFFFFFFFFFFFFFE0;
        v57 = (__int128 *)(v16 + 16);
        v58 = v22 + 2;
        v59 = v18 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v18 == v55)
          goto LABEL_67;
        if ((v18 & 0x18) == 0)
        {
          v16 += v55;
          v56 = (char *)v22 + v55;
          goto LABEL_66;
        }
      }
      else
      {
        v55 = 0;
      }
      v61 = v18 & 0xFFFFFFFFFFFFFFF8;
      v56 = (char *)v22 + (v18 & 0xFFFFFFFFFFFFFFF8);
      v62 = v55 - (v18 & 0xFFFFFFFFFFFFFFF8);
      v63 = &v16[v55];
      v64 = (_QWORD *)((char *)v22 + v55);
      do
      {
        v65 = *(_QWORD *)v63;
        v63 += 8;
        *v64++ = v65;
        v62 += 8;
      }
      while (v62);
      if (v18 == v61)
        goto LABEL_67;
      v16 += v61;
      do
      {
LABEL_66:
        v66 = *v16++;
        *v56++ = v66;
      }
      while (v16 != v15);
LABEL_67:
      v22 = v91;
LABEL_68:
      v91 = (char *)v22 + v18;
      v94[4] = v100;
      gdc::LayerDataRequestKey::LayerDataRequestKey(a1, a3, 0x4Bu, (uint64_t)&v90, a4);
      v67 = v90;
      if (v90 == v92)
        goto LABEL_70;
      goto LABEL_69;
    }
    v26 = v91 - (_BYTE *)v90;
    if ((unint64_t)(v91 - (_BYTE *)v90) < 8)
    {
      v27 = v22;
    }
    else
    {
      v27 = v22;
      if ((unint64_t)((char *)v22 - (_BYTE *)v90) >= 0x20)
      {
        if (v26 < 0x20)
        {
          v28 = 0;
LABEL_34:
          v40 = v26 & 0xFFFFFFFFFFFFFFF8;
          v27 = (char *)v22 + (v26 & 0xFFFFFFFFFFFFFFF8);
          v41 = v28 - (v26 & 0xFFFFFFFFFFFFFFF8);
          v42 = (uint64_t *)&v24[v28];
          v43 = (_QWORD *)((char *)v22 + v28);
          do
          {
            v44 = *v42++;
            *v43++ = v44;
            v41 += 8;
          }
          while (v41);
          if (v26 == v40)
            goto LABEL_49;
          v24 += v40;
          goto LABEL_48;
        }
        v28 = v26 & 0xFFFFFFFFFFFFFFE0;
        v36 = (__int128 *)((char *)v90 + 16);
        v37 = v22 + 2;
        v38 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v26 == v28)
          goto LABEL_49;
        if ((v26 & 0x18) != 0)
          goto LABEL_34;
        v24 += v28;
        v27 = (char *)v22 + v28;
      }
    }
    do
    {
LABEL_48:
      v54 = *v24++;
      *v27++ = v54;
    }
    while (v24 != v25);
    goto LABEL_49;
  }
  v29 = v86;
  v82 = (char *)v86;
  v83 = (char *)v86;
  v84 = (char *)v86;
  v85 = 32;
  if (v18 >= 0x21)
  {
    if (v18 <= 0x40)
      v30 = 64;
    else
      v30 = v96 - v95;
    v29 = malloc_type_malloc(v30, 0x100004077774924uLL);
    v31 = v82;
    v32 = v83;
    if (v82 == v83)
      goto LABEL_75;
    v33 = v83 - v82;
    if ((unint64_t)(v83 - v82) < 8)
    {
      v34 = v29;
      goto LABEL_74;
    }
    v34 = v29;
    if ((unint64_t)((char *)v29 - v82) < 0x20)
      goto LABEL_74;
    if (v33 >= 0x20)
    {
      v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      v45 = (__int128 *)(v82 + 16);
      v46 = v29 + 2;
      v47 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v48 = *v45;
        *(v46 - 1) = *(v45 - 1);
        *v46 = v48;
        v45 += 2;
        v46 += 2;
        v47 -= 32;
      }
      while (v47);
      if (v33 == v35)
        goto LABEL_75;
      if ((v33 & 0x18) == 0)
      {
        v31 += v35;
        v34 = (char *)v29 + v35;
        goto LABEL_74;
      }
    }
    else
    {
      v35 = 0;
    }
    v49 = v33 & 0xFFFFFFFFFFFFFFF8;
    v34 = (char *)v29 + (v33 & 0xFFFFFFFFFFFFFFF8);
    v50 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    v51 = &v31[v35];
    v52 = (_QWORD *)((char *)v29 + v35);
    do
    {
      v53 = *(_QWORD *)v51;
      v51 += 8;
      *v52++ = v53;
      v50 += 8;
    }
    while (v50);
    if (v33 == v49)
      goto LABEL_75;
    v31 += v49;
    do
    {
LABEL_74:
      v68 = *v31++;
      *v34++ = v68;
    }
    while (v31 != v32);
LABEL_75:
    v82 = (char *)v29;
    v83 = (char *)v29;
    v85 = v30;
  }
  if (v15 == v16)
    goto LABEL_94;
  if (v18 < 8)
  {
    v70 = v29;
    goto LABEL_92;
  }
  if ((unint64_t)((char *)v29 - v16) < 0x20)
  {
    v70 = v29;
    goto LABEL_92;
  }
  if (v18 >= 0x20)
  {
    v69 = v18 & 0xFFFFFFFFFFFFFFE0;
    v71 = (__int128 *)(v16 + 16);
    v72 = v29 + 2;
    v73 = v18 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v74 = *v71;
      *(v72 - 1) = *(v71 - 1);
      *v72 = v74;
      v71 += 2;
      v72 += 2;
      v73 -= 32;
    }
    while (v73);
    if (v18 == v69)
      goto LABEL_93;
    if ((v18 & 0x18) == 0)
    {
      v16 += v69;
      v70 = (char *)v29 + v69;
      goto LABEL_92;
    }
  }
  else
  {
    v69 = 0;
  }
  v75 = v18 & 0xFFFFFFFFFFFFFFF8;
  v70 = (char *)v29 + (v18 & 0xFFFFFFFFFFFFFFF8);
  v76 = v69 - (v18 & 0xFFFFFFFFFFFFFFF8);
  v77 = &v16[v69];
  v78 = (_QWORD *)((char *)v29 + v69);
  do
  {
    v79 = *(_QWORD *)v77;
    v77 += 8;
    *v78++ = v79;
    v76 += 8;
  }
  while (v76);
  if (v18 == v75)
    goto LABEL_93;
  v16 += v75;
  do
  {
LABEL_92:
    v80 = *v16++;
    *v70++ = v80;
  }
  while (v16 != v15);
LABEL_93:
  v29 = v83;
LABEL_94:
  v83 = (char *)v29 + v18;
  v86[4] = v100;
  gdc::LayerDataKey::LayerDataKey(&v87, 0x4Bu, (uint64_t)&v82);
  *a1 = a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(a1 + 8), (uint64_t)&v87);
  a1[96] = 0;
  *((_QWORD *)a1 + 13) = (*((_QWORD *)a1 + 11)
                        + ((*a1 - 0x61C8864680B583EBLL) << 6)
                        + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)
                        - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583EBLL);
  if (v88 != v89)
    free(v88);
  v67 = v82;
  if (v82 != v84)
LABEL_69:
    free(v67);
LABEL_70:
  if (v95 != v97)
    free(v95);
}

void sub_19FDDC3C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 160);
  if (v3 != *(void **)(v1 - 144))
    free(v3);
  _Unwind_Resume(exception_object);
}

void md::FlyoverCommon::decodeFlyoverKey(md::FlyoverCommon *this, const gdc::LayerDataRequestKey *a2)
{
  void *v4;
  int v5;
  int32x2_t *v6;
  int32x2_t v7;
  __int32 v8;
  __int32 v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14[9];

  gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v14, a2);
  v4 = v14[0];
  v5 = *((_DWORD *)v14[0] + 6);
  v6 = (int32x2_t *)*((_QWORD *)a2 + 2);
  v7 = *v6;
  v8 = v6[1].i32[0];
  v9 = v6[1].i32[1];
  v10 = vrev64_s32(v7);
  if (v5 < 0)
  {
    v12 = *((unsigned int *)v14[0] + 4);
    v11 = 0x100000000;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = *((_DWORD *)v14[0] + 5);
  *(_BYTE *)this = v9;
  *((_BYTE *)this + 1) = v8;
  *(int32x2_t *)((char *)this + 4) = v10;
  *((_BYTE *)this + 24) = v5;
  *(_QWORD *)((char *)this + 28) = v11 | v12;
  *((_DWORD *)this + 9) = v13;
  if (v4 != v14[2])
    free(v4);
}

void md::FlyoverCommon::computeGeocentricBoundsFromOctile(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  int v7;
  int v8;
  double v9;
  int v10;
  long double v11;
  long double v12;
  double v13;
  long double v14;
  __double2 v15;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  double sinval;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  long double v45;
  long double v46;
  __double2 v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  long double v59;
  long double v60;
  __double2 v61;
  unsigned int v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  long double v81;
  double v82;
  long double v83;
  double v84;
  __double2 v85;
  double v86;
  double v87;
  __double2 v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v137;
  double v138;
  double v139;
  double v140;

  v7 = *(_DWORD *)(a1 + 4);
  if (*(_BYTE *)(a1 + 1))
  {
    v8 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 8);
    if (!(v7 | v8))
    {
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_QWORD *)(a2 + 48) = 0x3FF0000000000000;
      *(int64x2_t *)a3 = vdupq_n_s64(0xC158CBA800000000);
      *(_OWORD *)(a3 + 16) = xmmword_19FFB2E10;
      *(int64x2_t *)(a3 + 32) = vdupq_n_s64(0x4158CBA800000000uLL);
      return;
    }
  }
  v9 = (float)(a4 + (float)((float)(a5 - a4) * 0.5));
  v10 = 1 << *(_BYTE *)(a1 + 1);
  v129 = (double)v8;
  v131 = (double)(v10 + ~v7);
  v132 = 1.0 / (double)v10;
  v11 = ((double)v8 + 0.5) * 6.28318531 * v132;
  v12 = exp((v131 + 0.5) * v132 * 6.28318531 + -3.14159265);
  v13 = atan(v12) * 2.0 + -1.57079633;
  v14 = fmod(v11, 6.28318531);
  v134 = fmod(v14 + 6.28318531, 6.28318531) + -3.14159265;
  v15 = __sincos_stret(v13);
  v125 = v9;
  v118 = 6378137.0 / sqrt(1.0 - v15.__sinval * v15.__sinval * 0.00669437999);
  v16 = (v118 + v9) * v15.__cosval;
  v17 = __sincos_stret(v134);
  v18 = v16 * v17.__cosval;
  v19 = v16 * v17.__sinval;
  v120 = v118 * 0.99330562;
  v20 = (v118 * 0.99330562 + v9) * v15.__sinval;
  *(double *)a2 = v16 * v17.__cosval;
  *(double *)(a2 + 8) = v16 * v17.__sinval;
  *(double *)(a2 + 16) = v20;
  v21 = __sincos_stret(v13 * 0.5);
  sinval = v21.__sinval;
  v23 = (sinval + sinval) * v21.__cosval;
  v24 = 1.0 - (sinval + sinval) * sinval;
  v25 = __sincos_stret(v134 * 0.5);
  v26 = v25.__sinval / sqrt(v23 * v23 + v24 * v24);
  v27 = v26 * v23;
  v28 = v26 * v24;
  v29 = -(v21.__sinval * v25.__cosval);
  v30 = -(v28 * v21.__sinval - v27 * v21.__cosval);
  v31 = v27 * v21.__sinval + v28 * v21.__cosval;
  *(double *)(a2 + 24) = v30;
  *(double *)(a2 + 32) = v29;
  *(double *)(a2 + 40) = v31;
  *(double *)(a2 + 48) = v25.__cosval * v21.__cosval;
  v32 = -(v20 * v29 - v31 * v19) - (v20 * v29 - v31 * v19);
  v33 = -(v31 * v18 - v30 * v20) - (v31 * v18 - v30 * v20);
  v34 = -(v30 * v19 - v18 * v29) - (v30 * v19 - v18 * v29);
  v130 = -(v16 * v17.__sinval + v33 * (v25.__cosval * v21.__cosval) + v34 * v30 - v32 * v31);
  v133 = -(v20 + v32 * v29 + v34 * (v25.__cosval * v21.__cosval) - v33 * v30);
  v135 = -(v16 * v17.__cosval + v32 * (v25.__cosval * v21.__cosval) + v33 * v31 - v34 * v29);
  v35 = (v118 + a5) * v15.__cosval;
  v36 = v35 * v17.__cosval;
  v37 = v35 * v17.__sinval;
  v119 = a5;
  v38 = (v120 + a5) * v15.__sinval;
  v39 = -(v38 * v29 - v37 * v31) - (v38 * v29 - v37 * v31);
  v40 = -(v36 * v31 - v38 * v30) - (v36 * v31 - v38 * v30);
  v41 = -(v37 * v30 - v36 * v29) - (v37 * v30 - v36 * v29);
  v42 = v36 + v135 + v39 * (v25.__cosval * v21.__cosval) + v40 * v31 - v41 * v29;
  v43 = v37 + v130 + v40 * (v25.__cosval * v21.__cosval) + v41 * v30 - v39 * v31;
  v44 = v38 + v133 + v39 * v29 + v41 * (v25.__cosval * v21.__cosval) - v40 * v30;
  v127 = fmin(v42, 1.79769313e308);
  v121 = fmin(v43, 1.79769313e308);
  v123 = fmax(v42, -1.79769313e308);
  v116 = fmin(v44, 1.79769313e308);
  v117 = fmax(v43, -1.79769313e308);
  v109 = fmax(v44, -1.79769313e308);
  v45 = exp(v132 * 6.28318531 * v131 + -3.14159265);
  v46 = atan(v45);
  v47 = __sincos_stret(v46 * 2.0 + -1.57079633);
  v48 = 6378137.0 / sqrt(1.0 - v47.__sinval * v47.__sinval * 0.00669437999);
  v49 = (v48 + v125) * v47.__cosval;
  v50 = v49 * v17.__cosval;
  v51 = v49 * v17.__sinval;
  v52 = (v125 + v48 * 0.99330562) * v47.__sinval;
  v53 = -(v52 * v29 - v51 * v31) - (v52 * v29 - v51 * v31);
  v54 = -(v50 * v31 - v52 * v30) - (v50 * v31 - v52 * v30);
  v55 = -(v51 * v30 - v50 * v29) - (v51 * v30 - v50 * v29);
  v56 = v50 + v135 + v53 * (v25.__cosval * v21.__cosval) + v54 * v31 - v55 * v29;
  v57 = v51 + v130 + v54 * (v25.__cosval * v21.__cosval) + v55 * v30 - v53 * v31;
  v58 = v52 + v133 + v53 * v29 + v55 * (v25.__cosval * v21.__cosval) - v54 * v30;
  v114 = fmax(v123, v56);
  v115 = fmin(v56, v127);
  v112 = fmax(v117, v57);
  v113 = fmin(v57, v121);
  v110 = fmax(v109, v58);
  v111 = fmin(v58, v116);
  v59 = exp(v132 * 6.28318531 * (v131 + 1.0) + -3.14159265);
  v60 = atan(v59);
  v61 = __sincos_stret(v60 * 2.0 + -1.57079633);
  v62 = 0;
  v63 = 6378137.0 / sqrt(1.0 - v61.__sinval * v61.__sinval * 0.00669437999);
  v64 = (v63 + v125) * v61.__cosval;
  v65 = v64 * v17.__cosval;
  v66 = v64 * v17.__sinval;
  v67 = (v125 + v63 * 0.99330562) * v61.__sinval;
  v68 = -(v67 * v29 - v66 * v31) - (v67 * v29 - v66 * v31);
  v69 = -(v65 * v31 - v67 * v30) - (v65 * v31 - v67 * v30);
  v70 = -(v66 * v30 - v65 * v29) - (v66 * v30 - v65 * v29);
  v71 = v65 + v135 + v68 * (v25.__cosval * v21.__cosval) + v69 * v31 - v70 * v29;
  v122 = v25.__cosval * v21.__cosval;
  v124 = v31;
  v72 = v66 + v130 + v69 * (v25.__cosval * v21.__cosval) + v70 * v30 - v68 * v31;
  v128 = v29;
  v73 = v67 + v133 + v68 * v29 + v70 * (v25.__cosval * v21.__cosval) - v69 * v30;
  v74 = fmin(v71, v115);
  v75 = fmax(v114, v71);
  v76 = fmin(v72, v113);
  v77 = fmax(v112, v72);
  v78 = fmin(v73, v111);
  v79 = fmax(v110, v73);
  v80 = a4;
  do
  {
    v137 = v74;
    v138 = v75;
    v139 = v78;
    v140 = v79;
    v81 = exp(((double)(v62 & 1) + v131) * v132 * 6.28318531 + -3.14159265);
    v82 = atan(v81) * 2.0 + -1.57079633;
    v83 = fmod(((float)(v62 >> 1) + v129) * (v132 * 6.28318531), 6.28318531);
    v84 = fmod(v83 + 6.28318531, 6.28318531) + -3.14159265;
    v85 = __sincos_stret(v82);
    v86 = 6378137.0 / sqrt(v85.__sinval * v85.__sinval * -0.00669437999 + 1.0);
    v87 = (v86 + v80) * v85.__cosval;
    v88 = __sincos_stret(v84);
    v89 = (v86 * 0.99330562 + v80) * v85.__sinval;
    v90 = -(v89 * v128 - v87 * v88.__sinval * v124);
    v91 = -(v87 * v88.__cosval * v124 - v89 * v30);
    v92 = -(v87 * v88.__sinval * v30 - v87 * v88.__cosval * v128);
    v93 = v91 + v91;
    v94 = v90 + v90;
    v95 = v92 + v92;
    v96 = v87 * v88.__sinval + v130 + v93 * v122 + v95 * v30 - v94 * v124;
    v97 = v87 * v88.__cosval + v135 + v94 * v122 + v93 * v124 - v95 * v128;
    v98 = v89 + v133 + v94 * v128 + v95 * v122 - v93 * v30;
    v99 = (v86 + v119) * v85.__cosval;
    v100 = v99 * v88.__cosval;
    v101 = v99 * v88.__sinval;
    v102 = (v86 * 0.99330562 + v119) * v85.__sinval;
    v103 = -(v102 * v128 - v101 * v124) - (v102 * v128 - v101 * v124);
    v104 = -(v100 * v124 - v102 * v30) - (v100 * v124 - v102 * v30);
    v105 = -(v101 * v30 - v100 * v128) - (v101 * v30 - v100 * v128);
    v106 = v100 + v135 + v103 * v122 + v104 * v124 - v105 * v128;
    v107 = v101 + v130 + v104 * v122 + v105 * v30 - v103 * v124;
    v108 = v102 + v133 + v103 * v128 + v105 * v122 - v104 * v30;
    v74 = fmin(v106, fmin(v97, v137));
    v75 = fmax(fmax(v138, v97), v106);
    v76 = fmin(v107, fmin(v96, v76));
    v77 = fmax(fmax(v77, v96), v107);
    v78 = fmin(v108, fmin(v98, v139));
    v79 = fmax(fmax(v140, v98), v108);
    ++v62;
  }
  while (v62 != 4);
  *(double *)a3 = v74;
  *(double *)(a3 + 8) = v76;
  *(double *)(a3 + 16) = v78;
  *(double *)(a3 + 24) = v75;
  *(double *)(a3 + 32) = v77;
  *(double *)(a3 + 40) = v79;
}

void md::FlyoverCommon::selectChildren(QuadTile ***a1, uint64_t a2, _QWORD *a3, void **a4)
{
  QuadTile ***v6;
  void **v7;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  void *v29;
  void **v30;
  void *v31;
  int64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  BOOL v47;
  char *v48;
  void **v49;
  void **v50;
  void *v51;
  char *v52;
  int v53;
  void **v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  int v60;
  char **v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _WORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned __int16 v88;
  char v89;
  QuadTile **v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  void *v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  char v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  void *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  std::__shared_weak_count *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char **v119;
  char v120;
  char *v121;
  _BYTE *v122;
  unsigned int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  char *v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  int v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  QuadTile ***v137;
  unint64_t v138;
  void *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  void *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  _BYTE *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  unint64_t v157;
  void **v158;
  uint64_t v159;
  QuadTile ***v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  char v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  unsigned __int8 v177;
  int v178;
  char *v179;
  char *v180;
  char *v181;
  _BYTE v182[77];
  char v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  __int128 v187;
  void *__p[2];
  __int128 v189;
  __int128 v190;
  _DWORD v191[4];
  uint64_t v192;
  uint64_t v193;
  int v194;
  __int16 v195;
  _WORD *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  __int128 v199;
  _BYTE v200[328];
  QuadTile v201;
  char v202;

  if (!a1)
    return;
  v6 = a1;
  a3[1] = *a3;
  v189 = 0u;
  v190 = 0u;
  *(_OWORD *)__p = 0u;
  if (a4)
    v7 = a4;
  else
    v7 = __p;
  v9 = (void **)v7[1];
  v8 = (uint64_t)v7[2];
  v7[5] = 0;
  v10 = v8 - (_QWORD)v9;
  if ((unint64_t)(v8 - (_QWORD)v9) >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v8 = (uint64_t)v7[2];
      v9 = (void **)((char *)v7[1] + 8);
      v7[1] = v9;
      v10 = v8 - (_QWORD)v9;
    }
    while ((unint64_t)(v8 - (_QWORD)v9) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 51;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_12;
    v12 = 102;
  }
  v7[4] = (void *)v12;
LABEL_12:
  v13 = v7[5];
  if (v13)
  {
    v14 = (unint64_t)v7[4];
    if (v14 >= 0x66)
    {
      operator delete(*v9);
      v8 = (uint64_t)v7[2];
      v9 = (void **)((char *)v7[1] + 8);
      v7[1] = v9;
      v13 = v7[5];
      v14 = (unint64_t)v7[4] - 102;
      v7[4] = (void *)v14;
    }
    v15 = 102 * ((v8 - (uint64_t)v9) >> 3) - 1;
    if ((void **)v8 == v9)
      v15 = 0;
    if (v15 - ((unint64_t)v13 + v14) >= 0x66)
    {
      operator delete(*(void **)(v8 - 8));
      v9 = (void **)v7[1];
      v8 = (uint64_t)v7[2] - 8;
      v7[2] = (void *)v8;
    }
  }
  else
  {
    if ((void **)v8 != v9)
    {
      do
      {
        operator delete(*(void **)(v8 - 8));
        v16 = v7[1];
        v8 = (uint64_t)v7[2] - 8;
        v7[2] = (void *)v8;
      }
      while ((void *)v8 != v16);
    }
    v7[4] = 0;
    v9 = (void **)v8;
  }
  if (a4)
    v17 = a4;
  else
    v17 = __p;
  v18 = *v7;
  v19 = v8 - (_QWORD)v9;
  v20 = (v8 - (uint64_t)v9) >> 3;
  if (v20 < ((_BYTE *)v17[3] - (_BYTE *)*v7) >> 3)
  {
    if ((void **)v8 == v9)
    {
      v21 = 0;
      v8 = 8 * v20;
      goto LABEL_38;
    }
    if (v19 < 0)
      goto LABEL_202;
    v21 = operator new(v8 - (_QWORD)v9);
    v8 = (uint64_t)&v21[v20];
    if ((unint64_t)(v19 - 8) < 0x18)
    {
      v25 = v21;
    }
    else if ((unint64_t)((char *)v21 - (char *)v9) < 0x20)
    {
      v25 = v21;
    }
    else
    {
      v22 = 0;
      v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
      v24 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      v25 = &v21[v24];
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = &v21[v22];
        v28 = *(_OWORD *)&v9[v22 + 2];
        *v27 = *(_OWORD *)&v9[v22];
        v27[1] = v28;
        v22 += 4;
        v26 -= 4;
      }
      while (v26);
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        *v7 = v21;
        v7[1] = v21;
        v7[2] = (void *)v8;
        v9 = (void **)v21;
        v17[3] = (void *)v8;
        if (v18)
        {
          operator delete(v18);
          v9 = (void **)v7[1];
          v8 = (uint64_t)v7[2];
        }
        goto LABEL_40;
      }
      v9 = (void **)((char *)v9 + v24 * 8);
    }
    do
    {
      v29 = *v9++;
      *v25++ = v29;
    }
    while (v25 != (_QWORD *)v8);
    goto LABEL_38;
  }
LABEL_40:
  if ((void **)v8 == v9)
  {
    v30 = v9;
  }
  else
  {
    v30 = (void **)(v8 + (((unint64_t)v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8));
    v7[2] = v30;
    v8 = (uint64_t)v30;
  }
  v31 = *v7;
  v32 = (char *)v30 - (char *)v9;
  v33 = v30 - v9;
  if (v33 < ((_BYTE *)v17[3] - (_BYTE *)*v7) >> 3)
  {
    if ((void **)v8 == v9)
    {
      v34 = 0;
      v35 = 8 * v33;
      goto LABEL_56;
    }
    if ((v32 & 0x8000000000000000) == 0)
    {
      v34 = operator new((char *)v30 - (char *)v9);
      v35 = (uint64_t)&v34[v33];
      if ((unint64_t)(v32 - 8) < 0x18)
      {
        v39 = v34;
      }
      else if ((unint64_t)((char *)v34 - (char *)v9) < 0x20)
      {
        v39 = v34;
      }
      else
      {
        v36 = 0;
        v37 = ((unint64_t)(v32 - 8) >> 3) + 1;
        v38 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        v39 = &v34[v38];
        v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = &v34[v36];
          v42 = *(_OWORD *)&v9[v36 + 2];
          *v41 = *(_OWORD *)&v9[v36];
          v41[1] = v42;
          v36 += 4;
          v40 -= 4;
        }
        while (v40);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          *v7 = v34;
          v7[1] = v34;
          v7[2] = (void *)v35;
          v17[3] = (void *)v35;
          if (v31)
            operator delete(v31);
          goto LABEL_58;
        }
        v9 = (void **)((char *)v9 + v38 * 8);
      }
      do
      {
        v43 = *v9++;
        *v39++ = v43;
      }
      while (v39 != (_QWORD *)v35);
      goto LABEL_56;
    }
LABEL_202:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_58:
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v17[3] = 0;
  v7[4] = 0;
  v7[5] = 0;
  std::deque<md::FlyoverOctile>::__add_back_capacity((uint64_t)v7);
  v44 = (unint64_t)v7[4] + (_QWORD)v7[5];
  v45 = *((_QWORD *)v7[1] + v44 / 0x66) + 40 * (v44 % 0x66);
  *(_WORD *)v45 = *(_WORD *)a2;
  *(_QWORD *)(v45 + 4) = *(_QWORD *)(a2 + 4);
  *(_OWORD *)(v45 + 24) = *(_OWORD *)(a2 + 24);
  v46 = (char *)v7[5];
  v47 = __CFADD__(v46, 1);
  v48 = v46 + 1;
  v7[5] = v48;
  if (!v47)
  {
    v159 = a2;
    v158 = v7;
    v161 = v6;
    do
    {
      v54 = (void **)v7[1];
      v55 = (unint64_t)v7[4];
      v56 = (unint64_t)v54[v55 / 0x66] + 40 * (v55 % 0x66);
      v57 = *(unsigned __int8 *)(v56 + 1);
      v58 = *(_BYTE *)v56;
      v184 = *(_BYTE *)v56;
      v185 = v57;
      v59 = *(_QWORD *)(v56 + 4);
      v186 = v59;
      v187 = *(_OWORD *)(v56 + 24);
      v7[4] = (void *)++v55;
      v7[5] = v48 - 1;
      if (v55 >= 0xCC)
      {
        operator delete(*v54);
        v7[1] = (char *)v7[1] + 8;
        v7[4] = (char *)v7[4] - 102;
      }
      v60 = *(unsigned __int8 *)(a2 + 1);
      v53 = v57 - v60;
      if ((v57 - v60) > 1)
        goto LABEL_71;
      if (v57 - 1 == v60)
      {
        v61 = (char **)a3;
        v63 = (char *)a3[1];
        v62 = a3[2];
        if ((unint64_t)v63 < v62)
        {
          *v63 = v58;
          v63[1] = v57;
          *(_QWORD *)(v63 + 4) = v59;
          *(_OWORD *)(v63 + 24) = v187;
          v52 = v63 + 40;
        }
        else
        {
          v64 = (char *)*a3;
          v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v63[-*a3] >> 3);
          v66 = v65 + 1;
          if (v65 + 1 > 0x666666666666666)
            abort();
          v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - (_QWORD)v64) >> 3);
          if (2 * v67 > v66)
            v66 = 2 * v67;
          if (v67 >= 0x333333333333333)
            v68 = 0x666666666666666;
          else
            v68 = v66;
          if (v68)
          {
            if (v68 > 0x666666666666666)
              goto LABEL_202;
            v69 = (char *)operator new(40 * v68);
          }
          else
          {
            v69 = 0;
          }
          v115 = &v69[40 * v65];
          *v115 = v58;
          v115[1] = v57;
          *(_QWORD *)(v115 + 4) = v59;
          *(_OWORD *)(v115 + 24) = v187;
          if (v63 == v64)
          {
            v118 = &v69[40 * v65];
            v119 = (char **)a3;
            v6 = v161;
          }
          else
          {
            v116 = 0;
            v6 = v161;
            do
            {
              v117 = &v115[v116];
              *((_WORD *)v117 - 20) = *(_WORD *)&v63[v116 - 40];
              *(_QWORD *)(v117 - 36) = *(_QWORD *)&v63[v116 - 36];
              *((_OWORD *)v117 - 1) = *(_OWORD *)&v63[v116 - 16];
              v116 -= 40;
            }
            while (&v63[v116] != v64);
            v118 = &v115[v116];
            v119 = (char **)a3;
            v63 = (char *)*a3;
          }
          v52 = v115 + 40;
          *v119 = v118;
          v119[1] = v115 + 40;
          v119[2] = &v69[40 * v68];
          if (v63)
          {
            operator delete(v63);
            v61 = (char **)a3;
          }
          else
          {
            v61 = v119;
          }
        }
        v61[1] = v52;
        v53 = v57 - *(unsigned __int8 *)(a2 + 1);
      }
      if (v53)
        goto LABEL_71;
      v198[0] = v200;
      v198[1] = v200;
      *(_QWORD *)&v199 = v200;
      *((_QWORD *)&v199 + 1) = 8;
      md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v201, **v6, (uint64_t)&v184);
      if (v202)
      {
        v70 = *(_WORD **)&v201._type;
        v71 = *(std::__shared_weak_count **)&v201._xIdx;
        v196 = *(_WORD **)&v201._type;
        v197 = *(std::__shared_weak_count **)&v201._xIdx;
        if (*(_QWORD *)&v201._xIdx)
        {
          v72 = (unint64_t *)(*(_QWORD *)&v201._xIdx + 8);
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
          do
            v74 = __ldaxr(v72);
          while (__stlxr(v74 - 1, v72));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
          v70 = v196;
        }
        if (v70)
        {
          LOBYTE(v191[0]) = v185;
          v191[1] = ~(-1 << v185) - v186;
          v191[2] = HIDWORD(v186);
          v191[3] = HIDWORD(v187);
          v193 = 0;
          v192 = 0;
          v194 = 1;
          v195 = 0;
          if (geo::c3mm::C3mmArea::getEntry(v70, v191, (uint64_t)&v192) != -1)
          {
            v120 = 0;
            LOBYTE(v179) = 0;
            goto LABEL_182;
          }
          md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v201, **v6, (uint64_t)&v184);
          if (v202)
          {
            v75 = LODWORD(v201._hash) | 0x100000000;
            v76 = v75 >> 8;
            v77 = *(std::__shared_weak_count **)&v201._xIdx;
            if (*(_QWORD *)&v201._xIdx)
            {
              v78 = (unint64_t *)(*(_QWORD *)&v201._xIdx + 8);
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            v80 = 0x100000000;
          }
          else
          {
            LOBYTE(v75) = 0;
            v80 = 0;
            LODWORD(v76) = 0;
          }
          v123 = 0;
          v124 = v75 | (unint64_t)v80 | ((_DWORD)v76 << 8);
          v125 = v185 + 1;
          v126 = (2 * HIDWORD(v186));
          v127 = 2 * (~(-1 << v185) - v186);
          v166 = (v185 + 1);
          v172 = ~(-1 << (v185 + 1));
          v174 = 2 * HIDWORD(v187);
          v164 = v127;
          while (1)
          {
            v129 = v127 | (v123 >> 1) & 1;
            if (v194 == 1)
            {
              if (v123 <= 3)
                goto LABEL_162;
            }
            else
            {
              *(_QWORD *)&v201._type = v166 | (v129 << 32);
              v201._xIdx = v126 | v123 & 1;
              *(&v201._xIdx + 1) = v174 | (v123 >> 2);
              v132 = geo::c3mm::C3mmEntry::childMeshType((uint64_t)&v192, (uint64_t)&v201);
              LODWORD(v129) = v127 | (v123 >> 1) & 1;
              if (v132 != 3)
              {
                if (v132 == 2)
                {
                  v176 = v126 | v123 & 1;
                  v178 = v174 | (v123 >> 2);
                  v130 = 3;
                }
                else if (v132 == 1)
                {
LABEL_162:
                  v176 = v126 | v123 & 1;
                  v178 = v174 | (v123 >> 2);
                  v130 = 2;
                }
                else
                {
                  v176 = v126 | v123 & 1;
                  v178 = v174 | (v123 >> 2);
                  v130 = 1;
                }
                v128 = (char *)v198[1];
                v133 = v198[0];
                v134 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v198[1] - (char *)v198[0]) >> 3);
                if (*((_QWORD *)&v199 + 1) < v134 + 1)
                {
                  v168 = v130;
                  v170 = v129;
                  v135 = v126;
                  v136 = v125;
                  v137 = v6;
                  v138 = v124;
                  v139 = (void *)v199;
                  v140 = (1 << -(char)__clz(*((_QWORD *)&v199 + 1) + 1));
                  if (*((_QWORD *)&v199 + 1) >= 0xFFFFFFFFFFFFFFFELL)
                    v140 = 1;
                  if (v140 <= v134 + 1)
                    v141 = v134 + 1;
                  else
                    v141 = v140;
                  v142 = (char *)malloc_type_malloc(40 * v141, 0x1000040BC7A988CuLL);
                  v143 = v198[0];
                  v144 = (char *)v198[1];
                  if (v198[0] != v198[1])
                  {
                    v145 = v142;
                    v146 = (char *)v198[0];
                    do
                    {
                      *(_WORD *)v145 = *(_WORD *)v146;
                      *(_QWORD *)(v145 + 4) = *(_QWORD *)(v146 + 4);
                      *(_OWORD *)(v145 + 24) = *(_OWORD *)(v146 + 24);
                      v146 += 40;
                      v145 += 40;
                    }
                    while (v146 != v144);
                  }
                  if (v133 != v139)
                    free(v143);
                  v128 = &v142[40 * v134];
                  v198[0] = v142;
                  *((_QWORD *)&v199 + 1) = v141;
                  v124 = v138;
                  v6 = v137;
                  v125 = v136;
                  v126 = v135;
                  v127 = v164;
                  LODWORD(v129) = v170;
                  v130 = v168;
                }
                LODWORD(v131) = v172 - v129;
                HIDWORD(v131) = v176;
                *v128 = -1;
                v128[1] = v125;
                *(_QWORD *)(v128 + 4) = v131;
                v128[24] = v130;
                *(_QWORD *)(v128 + 28) = v124;
                *((_DWORD *)v128 + 9) = v178;
                v198[1] = v128 + 40;
              }
            }
            if (++v123 == 8)
            {
              v179 = v182;
              v181 = v182;
              v147 = (char *)v198[0];
              if (v198[0] != (void *)v199)
              {
                v179 = (char *)v198[0];
                v180 = (char *)v198[1];
                *(_OWORD *)v198 = 0u;
                v199 = 0u;
                v120 = 1;
                v7 = v158;
                a2 = v159;
                goto LABEL_182;
              }
              v148 = (char *)v198[1];
              v180 = &v182[(char *)v198[1] - (char *)v198[0]];
              v7 = v158;
              a2 = v159;
              if (v198[1] != v198[0])
              {
                v149 = v182;
                do
                {
                  *(_WORD *)v149 = *(_WORD *)v147;
                  *(_QWORD *)(v149 + 4) = *(_QWORD *)(v147 + 4);
                  *(_OWORD *)(v149 + 24) = *(_OWORD *)(v147 + 24);
                  v147 += 40;
                  v149 += 40;
                }
                while (v147 != v148);
              }
LABEL_181:
              v120 = 1;
LABEL_182:
              v183 = v120;
              v114 = v197;
              if (v197)
                goto LABEL_183;
              goto LABEL_187;
            }
          }
        }
      }
      else
      {
        v197 = 0;
        v196 = 0;
      }
      v81 = 0;
      v82 = v185;
      v83 = HIDWORD(v186);
      v177 = v185 + 1;
      v167 = HIDWORD(v186);
      v169 = v186;
      v84 = 2 * v186;
      v85 = 2 * HIDWORD(v186);
      v86 = v184;
      v87 = v184;
      v171 = v185;
      v173 = 2 * HIDWORD(v186);
      v175 = 2 * v186;
      while (1)
      {
        v201._type = v86;
        v201._level = v177;
        v201._yIdx = v84;
        v201._xIdx = v85;
        v88 = md::FlyoverMetaData::tileType((md::FlyoverMetaData *)v6, &v201, 0);
        v89 = v88;
        if (v88 <= 0xFFu)
          break;
        if ((_BYTE)v88)
        {
          v90 = *v6;
          LOBYTE(v192) = v86;
          BYTE1(v192) = v177;
          HIDWORD(v192) = v84;
          LODWORD(v193) = v85;
          md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v201, *v90, (uint64_t)&v192);
          if (v202)
          {
            v91 = LODWORD(v201._hash) | 0x100000000;
            v92 = v91 >> 8;
            v93 = *(std::__shared_weak_count **)&v201._xIdx;
            if (*(_QWORD *)&v201._xIdx)
            {
              v94 = (unint64_t *)(*(_QWORD *)&v201._xIdx + 8);
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                v96 = v91;
                v97 = v91 >> 8;
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
                LODWORD(v92) = v97;
                LOBYTE(v91) = v96;
              }
            }
            v98 = 0x100000000;
          }
          else
          {
            LOBYTE(v91) = 0;
            v98 = 0;
            LODWORD(v92) = 0;
          }
          v99 = (char *)v198[1];
          v100 = v198[0];
          v101 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v198[1] - (char *)v198[0]) >> 3);
          if (*((_QWORD *)&v199 + 1) < v101 + 1)
          {
            v162 = v98;
            v163 = v92;
            v165 = v85;
            v102 = v84;
            v103 = v86;
            v104 = v91;
            v105 = (void *)v199;
            v106 = (1 << -(char)__clz(*((_QWORD *)&v199 + 1) + 1));
            if (*((_QWORD *)&v199 + 1) >= 0xFFFFFFFFFFFFFFFELL)
              v106 = 1;
            if (v106 <= v101 + 1)
              v107 = v101 + 1;
            else
              v107 = v106;
            v108 = (char *)malloc_type_malloc(40 * v107, 0x1000040BC7A988CuLL);
            v109 = v198[0];
            v110 = (char *)v198[1];
            if (v198[0] != v198[1])
            {
              v111 = v108;
              v112 = (char *)v198[0];
              do
              {
                *(_WORD *)v111 = *(_WORD *)v112;
                *(_QWORD *)(v111 + 4) = *(_QWORD *)(v112 + 4);
                *(_OWORD *)(v111 + 24) = *(_OWORD *)(v112 + 24);
                v112 += 40;
                v111 += 40;
              }
              while (v112 != v110);
            }
            if (v100 != v105)
              free(v109);
            v99 = &v108[40 * v101];
            v198[0] = v108;
            *((_QWORD *)&v199 + 1) = v107;
            v6 = v161;
            v98 = v162;
            LOBYTE(v91) = v104;
            v86 = v103;
            v84 = v102;
            v85 = v165;
            LODWORD(v92) = v163;
          }
          *v99 = v86;
          v99[1] = v177;
          *(_QWORD *)(v99 + 4) = __PAIR64__(v85, v84);
          v99[24] = v89;
          *(_QWORD *)(v99 + 28) = v91 | (unint64_t)v98 | ((_DWORD)v92 << 8);
          *((_DWORD *)v99 + 9) = 0;
          v198[1] = v99 + 40;
          v82 = v185;
          v83 = HIDWORD(v186);
          v87 = v184;
        }
        v84 = v175 + ((unint64_t)++v81 >> 1);
        v85 = v81 & 1 | v173;
        if ((_DWORD)v86 == v87 && v171 == v82 && v169 == (_DWORD)v186 && v167 == v83 && v81 == 4)
        {
          v179 = v182;
          v181 = v182;
          v113 = (char *)v198[0];
          if (v198[0] == (void *)v199)
          {
            v121 = (char *)v198[1];
            v180 = &v182[(char *)v198[1] - (char *)v198[0]];
            v7 = v158;
            a2 = v159;
            if (v198[1] != v198[0])
            {
              v122 = v182;
              do
              {
                *(_WORD *)v122 = *(_WORD *)v113;
                *(_QWORD *)(v122 + 4) = *(_QWORD *)(v113 + 4);
                *(_OWORD *)(v122 + 24) = *(_OWORD *)(v113 + 24);
                v113 += 40;
                v122 += 40;
              }
              while (v113 != v121);
            }
          }
          else
          {
            v179 = (char *)v198[0];
            v180 = (char *)v198[1];
            *(_OWORD *)v198 = 0u;
            v199 = 0u;
            v7 = v158;
            a2 = v159;
          }
          goto LABEL_181;
        }
      }
      LOBYTE(v179) = 0;
      v183 = 0;
      v7 = v158;
      a2 = v159;
      v114 = v197;
      if (v197)
      {
LABEL_183:
        p_shared_owners = (unint64_t *)&v114->__shared_owners_;
        do
          v151 = __ldaxr(p_shared_owners);
        while (__stlxr(v151 - 1, p_shared_owners));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
LABEL_187:
      if (v198[0] != (void *)v199)
        free(v198[0]);
      if (!v183)
        goto LABEL_71;
      v152 = v179;
      if (v179 != v180)
      {
        v153 = (uint64_t)v7[5];
        do
        {
          v155 = v7[1];
          v156 = 102 * (((_BYTE *)v7[2] - v155) >> 3) - 1;
          if (v7[2] == v155)
            v156 = 0;
          v157 = (unint64_t)v7[4] + v153;
          if (v156 == v157)
          {
            std::deque<md::FlyoverOctile>::__add_back_capacity((uint64_t)v7);
            v155 = v7[1];
            v157 = (unint64_t)v7[4] + (_QWORD)v7[5];
          }
          v154 = *(_QWORD *)&v155[8 * (v157 / 0x66)] + 40 * (v157 % 0x66);
          *(_WORD *)v154 = *(_WORD *)v152;
          *(_QWORD *)(v154 + 4) = *(_QWORD *)(v152 + 4);
          *(_OWORD *)(v154 + 24) = *(_OWORD *)(v152 + 24);
          v153 = (uint64_t)v7[5] + 1;
          v7[5] = (void *)v153;
          v152 += 40;
        }
        while (v152 != v180);
        if (!v183)
          goto LABEL_71;
        v152 = v179;
      }
      if (v152 != v181)
        free(v152);
LABEL_71:
      v48 = (char *)v7[5];
    }
    while (v48);
  }
  v49 = (void **)__p[1];
  v50 = (void **)v189;
  if ((unint64_t)v189 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v49);
      v50 = (void **)v189;
      v49 = (void **)((char *)__p[1] + 8);
      __p[1] = v49;
    }
    while ((_QWORD)v189 - (_QWORD)v49 > 0x10uLL);
  }
  while (v49 != v50)
  {
    v51 = *v49++;
    operator delete(v51);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_19FDDDB90(_Unwind_Exception *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  if (STACK[0x280] != STACK[0x290])
    free((void *)STACK[0x280]);
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void std::deque<md::FlyoverOctile>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_103:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_85;
    }
    v68 = (v17 - v19) >> 2;
    if (v18 == v19)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_103;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v18 != v19)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v19 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_103;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_103;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        goto LABEL_103;
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      goto LABEL_103;
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_19FDDE210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::FlyoverManeuverBatch::~FlyoverManeuverBatch(md::FlyoverManeuverBatch *this)
{
  md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  _QWORD *v18;
  unint64_t v19;
  void (***v20)(void);
  void (**v21)(void);
  _QWORD **v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v34;
  uint64_t v35;

  *(_QWORD *)a1 = &off_1E42AF2A8;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = *--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  if ((v13 & 1) == 0)
                  {
                    v35 = v11;
                    v11 = v35;
                    if (v14)
                    {
                      v34 = v2;
                      v15 = operator new();
                      *(_QWORD *)(v15 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v15 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v15 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v15 = &off_1E42B5668;
                      *(_QWORD *)(v15 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v15 + 72) = 0u;
                      *(_OWORD *)(v15 + 88) = 0u;
                      *(_OWORD *)(v15 + 104) = 0u;
                      *(_OWORD *)(v15 + 120) = 0u;
                      *(_OWORD *)(v15 + 136) = 0u;
                      *(_OWORD *)(v15 + 152) = 0u;
                      *(_OWORD *)(v15 + 168) = 0u;
                      *(_OWORD *)(v15 + 184) = 0u;
                      *(_OWORD *)(v15 + 200) = 0u;
                      *(_OWORD *)(v15 + 216) = 0u;
                      *(_OWORD *)(v15 + 232) = 0u;
                      *(_QWORD *)(v15 + 248) = 0;
                      *(_OWORD *)(v15 + 56) = 0u;
                      v16 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v15 + 56), 0);
                      if ((_DWORD)v16)
                        geo::read_write_lock::logFailure(v16, (uint64_t)"initialization", v17);
                      zone = malloc_create_zone(0, 0);
                      *(_QWORD *)(v15 + 48) = zone;
                      malloc_set_zone_name(zone, "VectorKitLabels");
                      *(_QWORD *)(v15 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v15;
                      v2 = v34;
                      v11 = v35;
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v11, 80);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4097AEC518);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v18 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v18[1])
    {
      v19 = 0;
      v20 = (void (***)(void))(v18 + 2);
      do
      {
        v21 = *v20;
        v20 += 15;
        (*v21)();
        ++v19;
      }
      while (v19 < v18[1]);
    }
    v18[1] = 0;
    v18 = (_QWORD *)*v18;
  }
  while (v18);
  v22 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v22;
  v23 = *v22;
  *v22 = 0;
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      free(v23);
      v23 = v24;
    }
    while (v24);
    v22 = *(_QWORD ***)(a1 + 224);
  }
  free(v22);
  v25 = *(void **)(a1 + 200);
  if (v25)
  {
    *(_QWORD *)(a1 + 208) = v25;
    operator delete(v25);
  }
  v26 = *(_QWORD *)(a1 + 168);
  if (v26)
  {
    v27 = *(_QWORD *)(a1 + 176);
    v28 = *(_QWORD *)(a1 + 168);
    if (v27 != v26)
    {
      v29 = *(_QWORD *)(a1 + 176);
      do
      {
        v31 = *(void **)(v29 - 24);
        v29 -= 24;
        v30 = v31;
        if (v31)
        {
          *(_QWORD *)(v27 - 16) = v30;
          operator delete(v30);
        }
        v27 = v29;
      }
      while (v29 != v26);
      v28 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v26;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v28, *(_QWORD *)(a1 + 184) - v28);
  }
  v32 = *(void **)(a1 + 144);
  if (v32)
  {
    *(_QWORD *)(a1 + 152) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverManeuverLayer::~FlyoverManeuverLayer(md::FlyoverManeuverLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF4E8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19FDDEA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FDDEBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDEFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDF068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDF0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FDDF230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDF350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDF468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDF594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDF6B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDF7D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDF914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDFA44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDFB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDFC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FDDFDD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FDDFF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelFeature::populateFeatureInfo(md::LabelFeature *this, md::LabelFeatureInfo *a2)
{
  char *v2;
  std::mutex *v4;
  uint64_t v5;

  v2 = (char *)a2 + 16;
  if (!*((_QWORD *)a2 + 2))
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    v5 = *((_QWORD *)this + 19);
    if (v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v2);
    std::mutex::unlock(v4);
  }
}

void sub_19FDE007C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::dedupingFeatureID(md::LabelFeature *this)
{
  uint64_t result;

  if ((*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 176))(this)
    || (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 160))(this))
  {
    return 4;
  }
  result = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 168))(this);
  if (result)
  {
    (*(void (**)(md::LabelFeature *))(*(_QWORD *)this + 168))(this);
    return 3;
  }
  return result;
}

uint64_t md::LabelFeature::debugString@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unsigned __int8 v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void **v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  int v69;
  const std::locale::facet *v70;
  char *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  size_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  char *v84;
  uint64_t v85;
  int v86;
  int v87;
  const std::locale::facet *v88;
  const char *v89;
  int v90;
  const char *v91;
  const char *v92;
  int64_t v93;
  int64_t v94;
  size_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  int v105;
  const std::locale::facet *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  char v120;
  size_t v121;
  void *v122;
  const void **v123;
  const void *v124;
  uint64_t v125;
  uint64_t v126;
  const void *v127;
  void *v128;
  uint64_t v130;
  std::__shared_weak_count *v132;
  id v133;
  id obj;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  size_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  _QWORD v146[2];
  _QWORD v147[3];
  uint64_t v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  int v152;
  uint64_t v153[19];
  _QWORD v154[2];
  void *__p[2];
  int64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v9 = MEMORY[0x1E0DE4FE0];
  v10 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v153[0] = MEMORY[0x1E0DE4FE0] + 64;
  v145 = v11;
  *(_QWORD *)((char *)&v146[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24));
  std::ios_base::init(v13, v146);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v145 = v9 + 24;
  v153[0] = v10;
  std::streambuf::basic_streambuf();
  v146[0] = MEMORY[0x1E0DE4FB8] + 16;
  v150 = 0u;
  v151 = 0u;
  v152 = 16;
  v14 = *((_QWORD *)a1 + 9);
  if (!v14)
    goto LABEL_229;
  v15 = (uint64_t *)(*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 552))(a1, *a3, 0, 0, a2);
  v16 = *v15;
  v132 = (std::__shared_weak_count *)v15[1];
  if (v132)
  {
    p_shared_owners = (unint64_t *)&v132->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v16 && !*(_BYTE *)(v16 + 125))
    md::LabelStyle::updateZoomInvariantStyles((_BYTE *)v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Feature ", 8);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 472))(a1, 0))
  {
    v20 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 472))(a1, 0);
    if (*(char *)(v20 + 23) < 0)
    {
      if (!*(_QWORD *)(v20 + 8))
        goto LABEL_34;
    }
    else if (!*(_BYTE *)(v20 + 23))
    {
      goto LABEL_34;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  ", 2);
    v21 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 472))(a1, 0);
    v22 = *(char *)(v21 + 23);
    if (v22 >= 0)
      v23 = v21;
    else
      v23 = *(_QWORD *)v21;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v21 + 23);
    else
      v24 = *(_QWORD *)(v21 + 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, v23, v24);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)" (", 2);
    if ((*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
    {
      v25 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
      v157 = *(_QWORD *)(v25 + 24);
      if (*(char *)(v25 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)__p, *(void **)v25, *(_QWORD *)(v25 + 8));
      }
      else
      {
        v26 = *(_OWORD *)v25;
        v156 = *(_QWORD *)(v25 + 16);
        *(_OWORD *)__p = v26;
      }
    }
    else
    {
      {
        v130 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v130, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v157 = mdm::Allocator::instance(void)::alloc;
      HIBYTE(v156) = 0;
      LOBYTE(__p[0]) = 0;
    }
    if (v156 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (v156 >= 0)
      v29 = HIBYTE(v156);
    else
      v29 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)v28, v29);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)")\n", 2);
    if (SHIBYTE(v156) < 0)
      (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v157 + 40))(v157, __p[0], v156 & 0x7FFFFFFFFFFFFFFFLL);
  }
LABEL_34:
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  FeatureID=", 12);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
  }
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 168))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  ClientFeatureID=", 18);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 168))(a1);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
  }
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 176))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  BusinessID=", 13);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 176))(a1);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
  }
  if ((*(float (**)(_BYTE *))(*(_QWORD *)a1 + 240))(a1) < 252.0
    || (*(float (**)(_BYTE *))(*(_QWORD *)a1 + 248))(a1) < 252.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  FeatureZoom: Min=", 19);
    v33 = v145;
    *(_DWORD *)((char *)v146 + *(_QWORD *)(v145 - 24)) = *(_DWORD *)((_BYTE *)v146 + *(_QWORD *)(v145 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v146[1] + *(_QWORD *)(v33 - 24)) = 2;
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 240))(a1);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)" Max=", 5);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 248))(a1);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)"\n", 1);
  }
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  External: hasAnnotation=", 26);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 216))(a1);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
  }
  if (!v16)
    goto LABEL_105;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  Style:", 8);
  md::LabelStyle::styleName((md::LabelStyle *)__p, (uint64_t *)v16);
  if (v156 >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  if (v156 >= 0)
    v38 = HIBYTE(v156);
  else
    v38 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)v37, v38);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"\n", 1);
  if ((SHIBYTE(v156) & 0x80000000) == 0)
  {
    if ((a4 & 1) != 0)
      goto LABEL_57;
LABEL_56:
    if (!*(_BYTE *)(a2 + 3642))
      goto LABEL_101;
    goto LABEL_57;
  }
  (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v157 + 40))(v157, __p[0], v156 & 0x7FFFFFFFFFFFFFFFLL);
  if ((a4 & 1) == 0)
    goto LABEL_56;
LABEL_57:
  v39 = *(void **)v16;
  v40 = *(std::__shared_weak_count **)(v16 + 8);
  v154[0] = *(_QWORD *)v16;
  v154[1] = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    __p[1] = v40;
    do
      v43 = __ldxr(v41);
    while (__stxr(v43 + 1, v41));
  }
  else
  {
    __p[1] = 0;
  }
  v156 = 0;
  v157 = 0;
  __p[0] = v39;
  v158 = 0;
  if (v39)
    LODWORD(v39) = (*(uint64_t (**)(void *, int64_t *))(*(_QWORD *)v39 + 48))(v39, &v156);
  v158 = v39;
  if (v40)
  {
    v44 = (unint64_t *)&v40->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    LODWORD(v39) = v158;
  }
  if (!(_DWORD)v39)
    goto LABEL_100;
  v46 = *((_QWORD *)__p[0] + 3);
  v48 = *(_QWORD *)(v46 + 16);
  v47 = *(std::__shared_weak_count **)(v46 + 24);
  if (v47)
  {
    v49 = (unint64_t *)&v47->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    if (v48)
      v51 = (uint64_t *)(v48 + 56);
    else
      v51 = 0;
    do
      v52 = __ldaxr(v49);
    while (__stlxr(v52 - 1, v49));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)__p);
    if (!v48)
      goto LABEL_101;
    v53 = *((unsigned __int16 *)v51 + 4);
    if (!*((_WORD *)v51 + 4))
      goto LABEL_101;
    goto LABEL_87;
  }
  if (v48)
  {
    v51 = (uint64_t *)(v48 + 56);
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)__p);
    v53 = *(unsigned __int16 *)(v48 + 64);
    if (*(_WORD *)(v48 + 64))
    {
LABEL_87:
      v54 = *v51;
      v55 = 16 * v53;
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"      (", 7);
        if (*(_QWORD *)v54)
        {
          (*(void (**)(void **__return_ptr))(**(_QWORD **)v54 + 16))(__p);
          v56 = (void *)HIBYTE(v156);
        }
        else
        {
          v56 = 0;
          HIBYTE(v156) = 0;
          LOBYTE(__p[0]) = 0;
        }
        if ((char)v56 >= 0)
          v57 = __p;
        else
          v57 = (void **)__p[0];
        if ((char)v56 >= 0)
          v58 = v56;
        else
          v58 = __p[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)v57, (uint64_t)v58);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)")\n", 2);
        if (SHIBYTE(v156) < 0)
          operator delete(__p[0]);
        v54 += 16;
        v55 -= 16;
      }
      while (v55);
    }
  }
  else
  {
LABEL_100:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)__p);
  }
LABEL_101:
  if (!*(_QWORD *)v16)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"      Default\n", 14);
  if (a1[138])
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"      Dedupable\n", 16);
LABEL_105:
  v133 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 616))(a1);
  if (!objc_msgSend(v133, "count"))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  No attrs\n", 11);
    goto LABEL_219;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v145, (uint64_t)"  Attrs:\n", 9);
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  objc_msgSend(v133, "allObjects");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "sortedArrayUsingSelector:", sel_caseInsensitiveCompare_);
  obj = (id)objc_claimAutoreleasedReturnValue();

  v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v141, v159, 16);
  if (!v60)
    goto LABEL_217;
  v135 = *(_QWORD *)v142;
  do
  {
    v61 = 0;
    v136 = v60;
    do
    {
      if (*(_QWORD *)v142 != v135)
        objc_enumerationMutation(obj);
      v137 = v61;
      v138 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v141 + 1) + 8 * v61)), "UTF8String");
      v140 = strlen(v138);
      v62 = 0;
      do
      {
        if (v140 <= v62 + 60)
        {
          v64 = -1;
        }
        else
        {
          v63 = memchr((void *)&v138[v62 + 60], 44, v140 - (v62 + 60));
          if (v63)
            v64 = v63 - v138;
          else
            v64 = -1;
        }
        v139 = v64;
        if (v64 == -1)
          v65 = -1;
        else
          v65 = v64 - v62 + 1;
        MEMORY[0x1A1AF49E0](v154, &v145);
        if (LOBYTE(v154[0]))
        {
          v66 = (char *)&v146[-1] + *(_QWORD *)(v145 - 24);
          v67 = *((_QWORD *)v66 + 5);
          v68 = *((_DWORD *)v66 + 2);
          v69 = *((_DWORD *)v66 + 36);
          if (v69 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)));
            v70 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            v69 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v66 + 36) = v69;
          }
          if ((v68 & 0xB0) == 0x20)
            v71 = "";
          else
            v71 = "    ";
          if (!v67)
            goto LABEL_152;
          v72 = *((_QWORD *)v66 + 3);
          v73 = v72 <= 4;
          v74 = v72 - 4;
          v75 = v73 ? 0 : v74;
          if (v71 - "    " >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v67 + 96))(v67, "    ", v71 - "    ") != v71 - "    ")
          {
            goto LABEL_152;
          }
          if ((uint64_t)v75 >= 1)
          {
            if (v75 > 0x7FFFFFFFFFFFFFF7)
              abort();
            if (v75 >= 0x17)
            {
              v77 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v75 | 7) != 0x17)
                v77 = v75 | 7;
              v78 = v77 + 1;
              v76 = operator new(v77 + 1);
              __p[1] = (void *)v75;
              v156 = v78 | 0x8000000000000000;
              __p[0] = v76;
            }
            else
            {
              HIBYTE(v156) = v75;
              v76 = __p;
            }
            memset(v76, v69, v75);
            *((_BYTE *)v76 + v75) = 0;
            if (v156 >= 0)
              v79 = __p;
            else
              v79 = (void **)__p[0];
            v80 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v67 + 96))(v67, v79, v75);
            v81 = v80;
            if (SHIBYTE(v156) < 0)
            {
              operator delete(__p[0]);
              if (v81 != v75)
              {
LABEL_152:
                std::ios_base::clear((std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)), *(_DWORD *)((char *)&v147[1] + *(_QWORD *)(v145 - 24)) | 5);
                goto LABEL_153;
              }
            }
            else if (v80 != v75)
            {
              goto LABEL_152;
            }
          }
          v82 = "    " - v71 + 4;
          if (v82 < 1
            || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v67 + 96))(v67, v71, "    " - v71 + 4) == v82)
          {
            *((_QWORD *)v66 + 3) = 0;
            goto LABEL_153;
          }
          goto LABEL_152;
        }
LABEL_153:
        MEMORY[0x1A1AF49EC](v154);
        if (v140 < v62)
          abort();
        if (v140 - v62 >= v65)
          v83 = v65;
        else
          v83 = v140 - v62;
        MEMORY[0x1A1AF49E0](v154, &v145);
        if (LOBYTE(v154[0]))
        {
          v84 = (char *)&v146[-1] + *(_QWORD *)(v145 - 24);
          v85 = *((_QWORD *)v84 + 5);
          v86 = *((_DWORD *)v84 + 2);
          v87 = *((_DWORD *)v84 + 36);
          if (v87 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)));
            v88 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            v87 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v84 + 36) = v87;
          }
          v89 = &v138[v62];
          v90 = v86 & 0xB0;
          v91 = &v138[v62 + v83];
          if (v90 == 32)
            v92 = &v138[v62 + v83];
          else
            v92 = &v138[v62];
          if (!v85)
            goto LABEL_186;
          v93 = *((_QWORD *)v84 + 3);
          v73 = v93 <= v83;
          v94 = v93 - v83;
          v95 = v73 ? 0 : v94;
          if (v92 - v89 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 96))(v85) != v92 - v89)
            goto LABEL_186;
          if ((uint64_t)v95 >= 1)
          {
            if (v95 > 0x7FFFFFFFFFFFFFF7)
              abort();
            if (v95 >= 0x17)
            {
              v97 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v97 = v95 | 7;
              v98 = v97 + 1;
              v96 = operator new(v97 + 1);
              __p[1] = (void *)v95;
              v156 = v98 | 0x8000000000000000;
              __p[0] = v96;
            }
            else
            {
              HIBYTE(v156) = v95;
              v96 = __p;
            }
            memset(v96, v87, v95);
            *((_BYTE *)v96 + v95) = 0;
            if (v156 >= 0)
              v99 = __p;
            else
              v99 = (void **)__p[0];
            v100 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v85 + 96))(v85, v99, v95);
            v101 = v100;
            if (SHIBYTE(v156) < 0)
            {
              operator delete(__p[0]);
              if (v101 != v95)
              {
LABEL_186:
                std::ios_base::clear((std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)), *(_DWORD *)((char *)&v147[1] + *(_QWORD *)(v145 - 24)) | 5);
                goto LABEL_187;
              }
            }
            else if (v100 != v95)
            {
              goto LABEL_186;
            }
          }
          if (v91 - v92 < 1
            || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v85 + 96))(v85, v92, v91 - v92) == v91 - v92)
          {
            *((_QWORD *)v84 + 3) = 0;
            goto LABEL_187;
          }
          goto LABEL_186;
        }
LABEL_187:
        MEMORY[0x1A1AF49EC](v154);
        MEMORY[0x1A1AF49E0](v154, &v145);
        if (LOBYTE(v154[0]))
        {
          v102 = (char *)&v146[-1] + *(_QWORD *)(v145 - 24);
          v103 = *((_QWORD *)v102 + 5);
          v104 = *((_DWORD *)v102 + 2);
          v105 = *((_DWORD *)v102 + 36);
          if (v105 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)));
            v106 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            v105 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v102 + 36) = v105;
          }
          if ((v104 & 0xB0) == 0x20)
            v107 = "";
          else
            v107 = "\n";
          if (!v103)
            goto LABEL_113;
          v108 = *((_QWORD *)v102 + 3);
          v73 = v108 <= 1;
          v109 = v108 - 1;
          v110 = v73 ? 0 : v109;
          if (v107 - "\n" >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v103 + 96))(v103, "\n", v107 - "\n") != v107 - "\n")
          {
            goto LABEL_113;
          }
          if ((uint64_t)v110 >= 1)
          {
            if (v110 > 0x7FFFFFFFFFFFFFF7)
              abort();
            if (v110 >= 0x17)
            {
              v112 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v110 | 7) != 0x17)
                v112 = v110 | 7;
              v113 = v112 + 1;
              v111 = operator new(v112 + 1);
              __p[1] = (void *)v110;
              v156 = v113 | 0x8000000000000000;
              __p[0] = v111;
            }
            else
            {
              HIBYTE(v156) = v110;
              v111 = __p;
            }
            memset(v111, v105, v110);
            *((_BYTE *)v111 + v110) = 0;
            if (v156 >= 0)
              v114 = __p;
            else
              v114 = (void **)__p[0];
            v115 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v103 + 96))(v103, v114, v110);
            v116 = v115;
            if (SHIBYTE(v156) < 0)
            {
              operator delete(__p[0]);
              if (v116 != v110)
                goto LABEL_113;
            }
            else if (v115 != v110)
            {
              goto LABEL_113;
            }
          }
          v117 = "\n" - v107 + 1;
          if (v117 >= 1
            && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v103 + 96))(v103, v107, "\n" - v107 + 1) != v117)
          {
LABEL_113:
            std::ios_base::clear((std::ios_base *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)), *(_DWORD *)((char *)&v147[1] + *(_QWORD *)(v145 - 24)) | 5);
            goto LABEL_114;
          }
          *((_QWORD *)v102 + 3) = 0;
        }
LABEL_114:
        MEMORY[0x1A1AF49EC](v154);
        v62 += v65;
      }
      while (v139 != -1);
      v61 = v137 + 1;
    }
    while (v137 + 1 != v136);
    v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v141, v159, 16);
  }
  while (v60);
LABEL_217:

LABEL_219:
  if (!v132)
    goto LABEL_223;
  v118 = (unint64_t *)&v132->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (v119)
  {
LABEL_223:
    v120 = v152;
    if ((v152 & 0x10) == 0)
      goto LABEL_224;
LABEL_228:
    v14 = *((_QWORD *)&v151 + 1);
LABEL_229:
    if (v14 < v149)
    {
      *((_QWORD *)&v151 + 1) = v149;
      v14 = v149;
    }
    v123 = (const void **)&v148;
LABEL_232:
    v124 = *v123;
    v121 = v14 - (_QWORD)*v123;
    if (v121 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v121 >= 0x17)
    {
      v125 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v121 | 7) != 0x17)
        v125 = v121 | 7;
      v126 = v125 + 1;
      v122 = operator new(v125 + 1);
      a5[1] = v121;
      a5[2] = v126 | 0x8000000000000000;
      *a5 = v122;
    }
    else
    {
      v122 = a5;
      *((_BYTE *)a5 + 23) = v121;
      if (!v121)
        goto LABEL_240;
    }
    v127 = v124;
    v128 = v122;
    memmove(v122, v127, v121);
    v122 = v128;
    goto LABEL_240;
  }
  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
  std::__shared_weak_count::__release_weak(v132);
  v120 = v152;
  if ((v152 & 0x10) != 0)
    goto LABEL_228;
LABEL_224:
  if ((v120 & 8) != 0)
  {
    v123 = (const void **)v147;
    v14 = v147[2];
    goto LABEL_232;
  }
  v121 = 0;
  v122 = a5;
  *((_BYTE *)a5 + 23) = 0;
LABEL_240:
  *((_BYTE *)v122 + v121) = 0;
  v145 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v146[-1] + *(_QWORD *)(v145 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v146[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v151) < 0)
    operator delete((void *)v150);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v153);
}

void sub_19FDE1298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t a69;
  uint64_t a71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;

  v72 = (std::__shared_weak_count *)a71;
  if (a71)
  {
    v73 = (unint64_t *)(a71 + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)a69;
  if (a69)
  {
    v76 = (unint64_t *)(a69 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  a30 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a30 + *(_QWORD *)(a30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a31 = MEMORY[0x1E0DE4FB8] + 16;
  if (a44 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a11);
  _Unwind_Resume(a1);
}

void md::LabelFeature::populateDebugNode(md::LabelFeature *this, gdc::DebugTreeNode *a2, unint64_t a3)
{
  uint64_t v6;
  const void *v7;
  std::string::size_type v8;
  std::string *p_dst;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::string::size_type v15;
  std::string *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(md::LabelFeature *);
  uint64_t v22;
  uint64_t (*v23)(md::LabelFeature *);
  uint64_t v24;
  uint64_t (*v25)(md::LabelFeature *);
  uint64_t v26;
  uint64_t (*v27)(md::LabelFeature *);
  uint64_t v28;
  uint64_t (*v29)(md::LabelFeature *);
  int v30;
  uint64_t (*v31)(md::LabelFeature *);
  uint64_t v32;
  float (*v33)(md::LabelFeature *);
  float v34;
  float v35;
  char *v36;
  uint64_t (*v37)(md::LabelFeature *);
  uint64_t v38;
  uint64_t (*v39)(md::LabelFeature *);
  unsigned int v40;
  char *ChildNode;
  const md::LabelManager *v42;
  md::LabelStyle **v43;
  md::LabelStyle **v44;
  gdc::DebugTreeNode *v45;
  md::LabelStyle *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  _QWORD *v49;
  uint64_t v50;
  std::string *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  size_t size;
  std::string::size_type v56;
  unint64_t v57;
  uint64_t v58;
  std::string *v59;
  size_t v60;
  unint64_t v61;
  std::string *v62;
  BOOL v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  std::string::size_type v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  std::string v88;
  _BYTE __p[24];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94[32];
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _QWORD v99[7];
  int v100;
  _QWORD v101[7];
  int v102;
  char v103[8];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _QWORD v109[7];
  int v110;
  char v111[8];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117[8];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123[8];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  char v129[8];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char v135[8];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char v141[32];
  std::string v142;
  int v143;
  std::string __dst;
  char v145[32];
  std::string v146;
  int v147;

  __p[23] = 11;
  strcpy(__p, "Public Name");
  if (!(*(uint64_t (**)(md::LabelFeature *, _QWORD))(*(_QWORD *)this + 472))(this, 0))
  {
    v10 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__dst, "No Public Name");
    v147 = 4;
    memset(&v146, 0, sizeof(v146));
LABEL_14:
    v146 = __dst;
    goto LABEL_16;
  }
  v6 = (*(uint64_t (**)(md::LabelFeature *, _QWORD))(*(_QWORD *)this + 472))(this, 0);
  v7 = (const void *)v6;
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    v8 = *(unsigned __int8 *)(v6 + 23);
    if (v8 < 0x17)
      goto LABEL_4;
LABEL_9:
    v11 = (v8 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_128;
  v7 = *(const void **)v6;
  if (v8 >= 0x17)
    goto LABEL_9;
LABEL_4:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_12:
    memmove(p_dst, v7, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  memset(&v146, 0, sizeof(v146));
  v147 = 4;
  v10 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_14;
  std::string::__assign_no_alias<true>(&v146, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_16:
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v145);
  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v10)
      goto LABEL_18;
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_26;
  }
  operator delete(v146.__r_.__value_.__l.__data_);
  if (v10)
    goto LABEL_25;
LABEL_18:
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_19;
LABEL_26:
  operator delete(*(void **)__p);
LABEL_19:
  __p[23] = 13;
  strcpy(__p, "Public Locale");
  if (!(*(uint64_t (**)(md::LabelFeature *, _QWORD))(*(_QWORD *)this + 480))(this, 0))
  {
    v17 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__dst, "No Public Locale");
    memset(&v142, 0, sizeof(v142));
    v143 = 4;
LABEL_35:
    v142 = __dst;
    goto LABEL_37;
  }
  v13 = (*(uint64_t (**)(md::LabelFeature *, _QWORD))(*(_QWORD *)this + 480))(this, 0);
  v14 = (const void *)v13;
  if ((*(char *)(v13 + 23) & 0x80000000) == 0)
  {
    v15 = *(unsigned __int8 *)(v13 + 23);
    if (v15 < 0x17)
      goto LABEL_22;
LABEL_30:
    v18 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v16 = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    goto LABEL_33;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
LABEL_128:
    abort();
  v14 = *(const void **)v13;
  if (v15 >= 0x17)
    goto LABEL_30;
LABEL_22:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
  v16 = &__dst;
  if (v15)
LABEL_33:
    memmove(v16, v14, v15);
  v16->__r_.__value_.__s.__data_[v15] = 0;
  memset(&v142, 0, sizeof(v142));
  v143 = 4;
  v17 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_35;
  std::string::__assign_no_alias<true>(&v142, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_37:
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v141);
  if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v17)
      goto LABEL_39;
LABEL_121:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_122;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
  if (v17)
    goto LABEL_121;
LABEL_39:
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_40;
LABEL_122:
  operator delete(*(void **)__p);
LABEL_40:
  __p[23] = 10;
  strcpy(__p, "Feature ID");
  v20 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 160))(this);
  v139 = 0;
  v138 = 0;
  v140 = 1;
  v137 = 0;
  v136 = v20;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v135);
  v21 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 368);
  __p[23] = 8;
  strcpy(__p, "Venue ID");
  v22 = v21(this);
  v133 = 0;
  v132 = 0;
  v134 = 1;
  v131 = 0;
  v130 = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v129);
  v23 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 376);
  __p[23] = 17;
  strcpy(__p, "Venue Building ID");
  v24 = v23(this);
  v127 = 0;
  v126 = 0;
  v128 = 1;
  v125 = 0;
  v124 = v24;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v123);
  v25 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 384);
  __p[23] = 14;
  strcpy(__p, "Venue Level ID");
  v26 = v25(this);
  v121 = 0;
  v120 = 0;
  v122 = 1;
  v119 = 0;
  v118 = v26;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v117);
  v27 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 392);
  __p[23] = 19;
  strcpy(__p, "Venue Comoponent ID");
  v28 = v27(this);
  v114 = 0;
  v115 = 0;
  v116 = 1;
  v113 = 0;
  v112 = v28;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v111);
  v29 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 400);
  __p[23] = 19;
  strcpy(__p, "Venue Floor Ordinal");
  v30 = v29(this);
  v110 = 0;
  memset(&v109[4], 0, 24);
  v109[0] = v30;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v109);
  v31 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 176);
  __p[23] = 11;
  strcpy(__p, "Business ID");
  v32 = v31(this);
  v106 = 0;
  v107 = 0;
  v108 = 1;
  v105 = 0;
  v104 = v32;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v103);
  v33 = *(float (**)(md::LabelFeature *))(*(_QWORD *)this + 240);
  __p[23] = 18;
  strcpy(__p, "Feature Zoom Range");
  v34 = v33(this);
  v35 = (*(float (**)(md::LabelFeature *))(*(_QWORD *)this + 248))(this);
  __dst.__r_.__value_.__l.__size_ = 0;
  v36 = (char *)operator new(0x80uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v36 + 128);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 128);
  *((double *)v36 + 2) = v34;
  *((_QWORD *)v36 + 5) = 0;
  *((_QWORD *)v36 + 6) = 0;
  *((_QWORD *)v36 + 4) = 0;
  *((_DWORD *)v36 + 14) = 2;
  *((_QWORD *)v36 + 12) = 0;
  *((double *)v36 + 10) = v35;
  *((_QWORD *)v36 + 13) = 0;
  *((_QWORD *)v36 + 14) = 0;
  *((_DWORD *)v36 + 30) = 2;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t *)&__dst);
  if (v36[119] < 0)
    operator delete(*((void **)v36 + 12));
  v83 = a3;
  if (v36[55] < 0)
    operator delete(*((void **)v36 + 4));
  operator delete(v36);
  v37 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 64);
  __p[23] = 19;
  strcpy(__p, "is External Feature");
  v38 = v37(this);
  v102 = 0;
  memset(&v101[4], 0, 24);
  v101[0] = v38 != 0;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v101);
  v39 = *(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 216);
  __p[23] = 14;
  strcpy(__p, "has Annotation");
  v40 = v39(this);
  v100 = 0;
  memset(&v99[4], 0, 24);
  v99[0] = v40;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v99);
  __p[23] = 5;
  strcpy(__p, "Style");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  v43 = (md::LabelStyle **)*((_QWORD *)this + 12);
  v44 = (md::LabelStyle **)*((_QWORD *)this + 13);
  if (v43 != v44)
  {
    v45 = (gdc::DebugTreeNode *)ChildNode;
    do
    {
      v46 = *v43;
      if (*v43 && *((_BYTE *)v46 + 125) && *((unsigned __int8 *)v46 + 136) != 255)
      {
        md::LabelStyle::populateDebugNode(v46, v45, v42);
      }
      else
      {
        __p[23] = 14;
        strcpy(__p, "No Style Found");
        a3 = a3 & 0xFFFFFFFFFFFF0000 | 0x20;
        v96 = 0;
        v97 = 0x100000000000000;
        v98 = 4;
        v95 = a3;
        gdc::DebugTreeNode::addProperty((uint64_t)v45, (uint64_t)__p, (uint64_t)v94);
      }
      v43 += 2;
    }
    while (v43 != v44);
  }
  __p[23] = 18;
  strcpy(__p, "Feature Attributes");
  v81 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  {
    v79 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)&__p[16] = mdm::Allocator::instance(void)::alloc;
  v90 = 0;
  {
    v80 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v80, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v91 = mdm::Allocator::instance(void)::alloc;
  v92 = 0;
  v93 = 1065353216;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(md::LabelFeature *, _BYTE *, unint64_t, std::string *))(*(_QWORD *)this + 624))(this, __p, v83, &__dst);
  v49 = v90;
  if (v90)
  {
    v50 = 0;
    while (1)
    {
      std::to_string(&v88, v50);
      v51 = std::string::insert(&v88, 0, "Set: ", 5uLL);
      __dst = *v51;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v84 = gdc::DebugTreeNode::createChildNode((uint64_t)v81, (__int128 *)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
LABEL_112:
          operator delete(v88.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_112;
      }
      v52 = (unsigned int *)v49[2];
      v53 = (unsigned int *)v49[3];
      v82 = v49;
      if (v52 != v53)
      {
        v54 = 0;
        do
        {
          std::to_string(&v88, v54);
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
          else
            size = v88.__r_.__value_.__l.__size_;
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = 22;
          else
            v56 = (v88.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v56 - size >= 0xB)
          {
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v62 = &v88;
            else
              v62 = (std::string *)v88.__r_.__value_.__r.__words[0];
            if (size)
            {
              v63 = (char *)v62 + size <= "Attribute: " || v62 > (std::string *)"Attribute: ";
              v64 = 11;
              if (v63)
                v64 = 0;
              v65 = &aAttribute[v64];
              memmove((char *)&v62->__r_.__value_.__r.__words[1] + 3, v62, size);
            }
            else
            {
              v65 = "Attribute: ";
            }
            v62->__r_.__value_.__r.__words[0] = *(_QWORD *)v65;
            *(_DWORD *)((char *)v62->__r_.__value_.__r.__words + 7) = *(_DWORD *)(v65 + 7);
            v66 = size + 11;
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              v88.__r_.__value_.__l.__size_ = size + 11;
            else
              *((_BYTE *)&v88.__r_.__value_.__s + 23) = v66 & 0x7F;
            v67 = (char *)v62 + v66;
          }
          else
          {
            v57 = size + 11;
            if (0x7FFFFFFFFFFFFFF6 - v56 < size + 11 - v56)
              abort();
            v58 = v50;
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = &v88;
            else
              v59 = (std::string *)v88.__r_.__value_.__r.__words[0];
            v60 = 0x7FFFFFFFFFFFFFF7;
            if (v56 <= 0x3FFFFFFFFFFFFFF2)
            {
              v61 = 2 * v56;
              if (v57 > 2 * v56)
                v61 = size + 11;
              if (v61 >= 0x17)
              {
                v68 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                v69 = v61 | 7;
                if (v69 == 23)
                  v69 = v68;
                v60 = v69 + 1;
              }
              else
              {
                v60 = 23;
              }
            }
            v70 = (char *)operator new(v60);
            v71 = (std::string::size_type)v70;
            *(_DWORD *)(v70 + 7) = 540697972;
            *(_QWORD *)v70 = *(_QWORD *)"Attribute: ";
            if (size)
              memmove(v70 + 11, v59, size);
            if (v56 != 22)
              operator delete(v59);
            v88.__r_.__value_.__l.__size_ = size + 11;
            v88.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
            v88.__r_.__value_.__r.__words[0] = v71;
            v67 = (_BYTE *)(v71 + v57);
            v50 = v58;
          }
          *v67 = 0;
          __dst = v88;
          memset(&v88, 0, sizeof(v88));
          v72 = *v52;
          v73 = *((unsigned __int16 *)v52 + 2);
          v86 = 0;
          v74 = (char *)operator new(0x80uLL);
          v86 = v74 + 128;
          v87 = v74 + 128;
          *((_QWORD *)v74 + 1) = v72;
          *((_QWORD *)v74 + 5) = 0;
          *((_QWORD *)v74 + 6) = 0;
          *((_QWORD *)v74 + 4) = 0;
          *((_DWORD *)v74 + 14) = 1;
          *((_QWORD *)v74 + 12) = 0;
          *((_QWORD *)v74 + 9) = v73;
          *((_QWORD *)v74 + 13) = 0;
          *((_QWORD *)v74 + 14) = 0;
          *((_DWORD *)v74 + 30) = 1;
          v85 = v74;
          gdc::DebugTreeNode::addProperty((uint64_t)v84, (uint64_t)&__dst, (uint64_t *)&v85);
          if (v74[119] < 0)
          {
            operator delete(*((void **)v74 + 12));
            if ((v74[55] & 0x80000000) == 0)
              goto LABEL_104;
          }
          else if ((v74[55] & 0x80000000) == 0)
          {
            goto LABEL_104;
          }
          operator delete(*((void **)v74 + 4));
LABEL_104:
          operator delete(v74);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
LABEL_110:
              operator delete(v88.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_110;
          }
          v52 += 2;
          ++v54;
        }
        while (v52 != v53);
      }
      v50 = (v50 + 1);
      v49 = (_QWORD *)*v82;
      if (!*v82)
      {
        v75 = v90;
        if (v90)
        {
          do
          {
            v77 = (uint64_t *)*v75;
            v78 = v75[2];
            if (v78)
            {
              v75[3] = v78;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75[5] + 40))(v75[5], v78, v75[4] - v78);
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v91 + 40))(v91, v75, 48);
            v75 = v77;
          }
          while (v77);
        }
        break;
      }
    }
  }
  v76 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  if (v76)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&__p[16] + 40))(*(_QWORD *)&__p[16], v76, 8 * *(_QWORD *)&__p[8]);
}

void sub_19FDE2264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::~unordered_set[abi:nn180100](&a22);
  _Unwind_Resume(a1);
}

void md::LabelFeature::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v9[0] = &off_1E42797B0;
  v9[1] = v5;
  v9[2] = a3;
  v10 = v9;
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v9);
  std::mutex::unlock((std::mutex *)(a1 + 8));
  v7 = v10;
  if (v10 == v9)
  {
    v8 = 4;
    v7 = v9;
    goto LABEL_7;
  }
  if (v10)
  {
    v8 = 5;
LABEL_7:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

}

void sub_19FDE23B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  std::mutex *v14;
  char *v16;
  uint64_t v17;

  std::mutex::unlock(v14);
  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

_QWORD *md::LabelFeature::debugPopulateStyleAttributes(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E4279768;
  v7[1] = a2;
  v8 = v7;
  v3 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v7);
  std::mutex::unlock(v3);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19FDE24CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::mutex *v13;
  std::mutex *v14;
  char *v16;
  uint64_t v17;

  v14 = v13;
  std::mutex::unlock(v14);
  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279768;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t result;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  md::createFeatureAttributeSet((gss::Allocator *)&v4, (uint64_t *)(*(_QWORD *)a2 + 24));
  result = std::__hash_table<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::__emplace_unique_key_args<gss::FeatureAttributeSet,gss::FeatureAttributeSet>(v2, v4, v5, (uint64_t)&v4);
  if (v4)
  {
    v5 = v4;
    return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v4, v6 - (_QWORD)v4);
  }
  return result;
}

void sub_19FDE25E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  *v2 = &off_1E42797B0;
  v3 = *(id *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;
  uint64_t v5;

  *a2 = &off_1E42797B0;
  result = *(id *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  a2[1] = result;
  a2[2] = v5;
  return result;
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  gss::Allocator *v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18[3];
  uint64_t v19;

  v3 = *(void **)(a1 + 8);
  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = (gss::Allocator *)(*a2 + 24);
  md::HighlightHelper::debugAttributesToString(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringWithFormat:", CFSTR("{%@}"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v7);

  v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 336) + 184);
  md::createFeatureAttributeSet((gss::Allocator *)v18, (uint64_t *)v5);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v16, v8, v18, 0);
  if (v18[0])
  {
    v18[1] = v18[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v18[0], v18[2] - v18[0]);
  }
  md::HighlightHelper::debugClientAttributesToString(v16);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (v9)
  {
LABEL_8:
    v14 = *(void **)(a1 + 8);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%@}"), v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObject:", v15);

  }
LABEL_9:

}

void sub_19FDE2884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289C68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289C68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v5 = *(_QWORD **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *(_QWORD **)v2;
    v11 = ((uint64_t)v5 - *(_QWORD *)v2) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * v11];
    v19 = *(_OWORD *)(v3 + 24);
    *(_OWORD *)v18 = v19;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v10 = *(_QWORD **)v2;
      v5 = *(_QWORD **)(v2 + 8);
    }
    v22 = &v17[v16];
    v9 = v18 + 16;
    if (v5 == v10)
    {
      *(_QWORD *)v2 = v18;
      *(_QWORD *)(v2 + 8) = v9;
      *(_QWORD *)(v2 + 16) = v22;
    }
    else
    {
      do
      {
        v23 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v18 - 1) = v23;
        v18 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v10);
      v10 = *(_QWORD **)v2;
      v24 = *(_QWORD **)(v2 + 8);
      *(_QWORD *)v2 = v18;
      *(_QWORD *)(v2 + 8) = v9;
      *(_QWORD *)(v2 + 16) = v22;
      while (v24 != v10)
      {
        v25 = (std::__shared_weak_count *)*(v24 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v24 -= 2;
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 32);
    *v5 = *(_QWORD *)(v3 + 24);
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  *(_QWORD *)(v2 + 8) = v9;
}

uint64_t *std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::~unordered_set[abi:nn180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v5 = (uint64_t *)*v2;
      v6 = v2[2];
      if (v6)
      {
        v2[3] = v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v6, v2[4] - v6);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 48);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  return a1;
}

void md::LabelFeature::~LabelFeature(md::LabelFeature *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)this = off_1E428CC00;
  v4 = *((_QWORD *)this + 20);
  v2 = (char *)this + 160;
  v3 = v4;
  if (v4)
  {
    std::vector<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, v3);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), *((_QWORD *)this + 20), *((_QWORD *)this + 22) - *((_QWORD *)this + 20));
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = *((_QWORD *)this + 13);
    v7 = *((_QWORD *)this + 12);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v7, *((_QWORD *)this + 14) - v7);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

double md::LabelFeature::textFromFeature(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4, unsigned int a5)
{
  const char *v9;
  unsigned __int8 v10;
  size_t v11;
  size_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  const char *v20;
  char *__s;

  v20 = 0;
  __s = 0;
  geo::codec::featureGetNativeLabel((uint64_t)a2, a5, &__s, &v20);
  localizedLabel(a1, a2, __s, a3, &v20);
  if (v20)
    v9 = v20;
  else
    v9 = "";
  {
    v17 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v11 = strlen(v9);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, v14 + 1, 1);
    *((_QWORD *)&v18 + 1) = v12;
    v19 = v15 | 0x8000000000000000;
    *(_QWORD *)&v18 = v13;
    goto LABEL_12;
  }
  HIBYTE(v19) = v11;
  v13 = &v18;
  if (v11)
LABEL_12:
    memmove(v13, v9, v12);
  *((_BYTE *)v13 + v12) = 0;
  if (*(char *)(a4 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a4 + 24) + 40))(*(_QWORD *)(a4 + 24), *(_QWORD *)a4, *(_QWORD *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  result = *(double *)&v18;
  *(_OWORD *)a4 = v18;
  *(_QWORD *)(a4 + 16) = v19;
  return result;
}

void sub_19FDE2E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), *(_QWORD *)v1, *(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void localizedLabel(_QWORD *a1, uint64_t *a2, char *__s, int a4, _QWORD *a5)
{
  _QWORD *v5;
  char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *__sa;

  v5 = a1;
  if (__s)
  {
    if (a4)
    {
      v27 = 0;
      __sa = 0;
      geo::codec::featureGetLocalizedLabelForNativeLabel(a2, (unint64_t)__s, &__sa, &v27);
      v8 = __sa;
      if (__sa)
      {
        if (*__sa)
        {
          if (a5)
            *a5 = v27;
          {
            v26 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v26, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v10 = mdm::Allocator::instance(void)::alloc;
          v5[3] = mdm::Allocator::instance(void)::alloc;
          v11 = strlen(v8);
          if (v11 <= 0x7FFFFFFFFFFFFFF7)
          {
            v12 = v11;
            if (v11 >= 0x17)
            {
              v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v11 | 7) != 0x17)
                v21 = v11 | 7;
              v22 = v21 + 1;
              v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v21 + 1, 1);
              v5[1] = v12;
              v5[2] = v22 | 0x8000000000000000;
              *v5 = v23;
              v5 = (_QWORD *)v23;
            }
            else
            {
              *((_BYTE *)v5 + 23) = v11;
              if (!v11)
                goto LABEL_28;
            }
            memmove(v5, v8, v12);
LABEL_28:
            *((_BYTE *)v5 + v12) = 0;
            return;
          }
LABEL_29:
          abort();
        }
      }
    }
    {
      v24 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v24, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v14 = mdm::Allocator::instance(void)::alloc;
    v5[3] = mdm::Allocator::instance(void)::alloc;
    v15 = strlen(__s);
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_29;
    v16 = v15;
    if (v15 >= 0x17)
    {
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v18 + 1, 1);
      v5[1] = v16;
      v5[2] = v19 | 0x8000000000000000;
      *v5 = v20;
      v5 = (_QWORD *)v20;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v15;
      if (!v15)
        goto LABEL_23;
    }
    memmove(v5, __s, v16);
LABEL_23:
    *((_BYTE *)v5 + v16) = 0;
    return;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v25 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5[3] = mdm::Allocator::instance(void)::alloc;
}

void md::LabelFeature::tileAnnotationText(_BYTE *a1, geo::codec::VectorTile **a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  std::string::size_type v18;
  _QWORD *p_src;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::locale::id *v29;
  std::locale::id *v30;
  double v31;
  id v32;
  void *v33;
  void *v34;
  const char *v35;
  double v36;
  id v37;
  void *v38;
  void *v39;
  long double v40;
  uint64_t v41;
  double v42;
  id v43;
  void *v44;
  void *v45;
  int v46;
  id v47;
  void *v48;
  void *v49;
  double v50;
  size_t v51;
  std::string::size_type v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  char *v60;
  void **v61;
  std::string::size_type size;
  std::sub_match<const char *> *v63;
  std::string *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  id v68;
  id v69;
  std::string *v70;
  const char *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  std::string v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  std::string v80;
  void *__p[2];
  uint64_t v82;
  std::string v83;
  const char *v84[2];
  id v85;
  id v86;
  std::string __dst;
  _QWORD *__src;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;

  v12 = geo::codec::VectorTile::annotations(*a2);
  if (!a4)
    goto LABEL_15;
  v13 = 0;
  v14 = (unsigned int *)(v12 + 16 * a3);
  v15 = a4;
  do
  {
    if (v14[1] == a5)
      v13 = v14;
    v14 += 4;
    --v15;
  }
  while (v15);
  if (!v13
    || ((v16 = *v13,
         v76.__r_.__value_.__r.__words[0] = 0,
         v84[0] = 0,
         geo::codec::tileGetLocalizedLabel((_QWORD **)a2, v16, (unint64_t *)&v76, (unint64_t *)v84),
         (v17 = (const char *)v76.__r_.__value_.__r.__words[0]) == 0)
     || !*v76.__r_.__value_.__l.__data_)
    && ((geo::codec::tileGetNativeLabel((uint64_t)a2, v16, &v76, v84),
         (v17 = (const char *)v76.__r_.__value_.__r.__words[0]) == 0)
     || !*v76.__r_.__value_.__l.__data_))
  {
LABEL_15:
    *a1 = 0;
    a1[64] = 0;
    return;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&__src, v17, v84[0]);
  v95 = 1;
  if (SHIBYTE(v90) < 0)
  {
    v18 = v89;
    if (v89 > 0x7FFFFFFFFFFFFFF7)
      abort();
    p_src = __src;
    if (v89 < 0x17)
    {
LABEL_13:
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18;
      p_dst = &__dst;
      if (!v18)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  else
  {
    v18 = HIBYTE(v90);
    p_src = &__src;
    if (HIBYTE(v90) < 0x17uLL)
      goto LABEL_13;
  }
  v21 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v18 | 7) != 0x17)
    v21 = v18 | 7;
  v22 = v21 + 1;
  p_dst = (std::string *)operator new(v21 + 1);
  __dst.__r_.__value_.__l.__size_ = v18;
  __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_22:
  memmove(p_dst, p_src, v18);
LABEL_23:
  p_dst->__r_.__value_.__s.__data_[v18] = 0;
  if (*((_BYTE *)v13 + 12))
  {
    v72 = a1;
    v23 = geo::codec::VectorTile::annotationValues(*a2);
    v24 = v13[2];
    v84[1] = (const char *)&off_1E42B5470;
    v85 = 0;
    v86 = 0;
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v84[0]) = objc_msgSend(v25, "usesMetricSystem");

    if (*((_BYTE *)v13 + 12))
    {
      v26 = 0;
      v27 = v23 + 16 * v24;
      v28 = a6 == 3;
      if (a6 == 4)
        v28 = 2;
      v74 = v28;
      v29 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      v30 = (std::locale::id *)MEMORY[0x1E0DE4C08];
      v75 = a6;
      v73 = v23 + 16 * v24;
      while (2)
      {
        memset(&v83, 0, sizeof(v83));
        switch(*(_BYTE *)(v27 + 16 * v26))
        {
          case 0:
            v31 = *(double *)(v27 + 16 * v26 + 8);
            v32 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
            objc_msgSend(v32, "setGeneratesDecimalNumbers:", 1);
            objc_msgSend(v32, "setMaximumFractionDigits:", v74);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "stringFromNumber:", v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            if (v34)
            {
              v35 = (const char *)objc_msgSend(objc_retainAutorelease(v34), "UTF8String");
              a6 = v75;
            }
            else
            {
              v35 = "";
            }
            v51 = strlen(v35);
            if (v51 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v52 = v51;
            if (v51 >= 0x17)
            {
              v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v54 = v51 | 7;
              v55 = v54 + 1;
              v53 = operator new(v54 + 1);
              v76.__r_.__value_.__l.__size_ = v52;
              v76.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
              a6 = v75;
            }
            else
            {
              *((_BYTE *)&v76.__r_.__value_.__s + 23) = v51;
              v53 = &v76;
              if (!v51)
                goto LABEL_64;
            }
            memmove(v53, v35, v52);
LABEL_64:
            v30 = (std::locale::id *)MEMORY[0x1E0DE4C08];
            *((_BYTE *)v53 + v52) = 0;

            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            v83 = v76;
            v27 = v73;
LABEL_67:
            v29 = (std::locale::id *)MEMORY[0x1E0DE4A90];
LABEL_68:
            std::to_string(&v80, v26);
            v56 = std::string::insert(&v80, 0, "\\{", 2uLL);
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            v58 = std::string::append(&v76, "\\}", 2uLL);
            v59 = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            v82 = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v76.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_70;
            }
            else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_70;
            }
            operator delete(v80.__r_.__value_.__l.__data_);
LABEL_70:
            MEMORY[0x1A1AF4C5C](&v76);
            v76.__r_.__value_.__l.__size_ = (std::string::size_type)std::locale::use_facet((const std::locale *)&v76, v29);
            v76.__r_.__value_.__r.__words[2] = (std::string::size_type)std::locale::use_facet((const std::locale *)&v76, v30);
            v77 = 0u;
            v78 = 0u;
            v79 = 0;
            v60 = (char *)HIBYTE(v82);
            if (v82 >= 0)
              v61 = __p;
            else
              v61 = (void **)__p[0];
            if (v82 < 0)
              v60 = (char *)__p[1];
            if (&v60[(_QWORD)v61] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)&v76, (std::basic_regex<char>::value_type *)v61, &v60[(_QWORD)v61]))
            {
              std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
              goto LABEL_119;
            }
            memset(&v80, 0, sizeof(v80));
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = (std::sub_match<const char *> *)&__dst;
            else
              v63 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __dst.__r_.__value_.__l.__size_;
            if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &v83;
            else
              v64 = (std::string *)v83.__r_.__value_.__r.__words[0];
            std::regex_replace[abi:nn180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v80, v63, (std::sub_match<const char *> *)((char *)v63 + size), (uint64_t)&v76, (const char *)v64);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            __dst = v80;
            *((_BYTE *)&v80.__r_.__value_.__s + 23) = 0;
            v80.__r_.__value_.__s.__data_[0] = 0;
            v65 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
            if (*((_QWORD *)&v78 + 1))
            {
              v66 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            std::locale::~locale((std::locale *)&v76);
            if (SHIBYTE(v82) < 0)
            {
              operator delete(__p[0]);
              if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_29;
            }
            else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_29;
            }
            operator delete(v83.__r_.__value_.__l.__data_);
LABEL_29:
            if (++v26 < *((unsigned __int8 *)v13 + 12))
              continue;
            v68 = v86;
            v69 = v85;
            break;
          case 1:
            v42 = *(double *)(v27 + 16 * v26 + 8);
            *(_OWORD *)__p = xmmword_19FFB5EB0;
            v43 = objc_alloc(MEMORY[0x1E0CB3758]);
            objc_msgSend(MEMORY[0x1E0CB3AD8], "kilometers");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v45 = (void *)objc_msgSend(v43, "initWithDoubleValue:unit:", v44, v42 * 0.001);

            v46 = LOBYTE(v84[0]);
            v47 = v45;
            v48 = v47;
            if (!v46)
            {
              objc_msgSend(MEMORY[0x1E0CB3AD8], "miles");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v47, "measurementByConvertingToUnit:", v49);
              v48 = (void *)objc_claimAutoreleasedReturnValue();

            }
            LODWORD(__p[1]) = 1;
            objc_msgSend(v48, "doubleValue", v72);
            v30 = (std::locale::id *)MEMORY[0x1E0DE4C08];
            if (v50 >= 0.1)
              md::LabelValueFormatter::FormatMeasurement(&v76, (uint64_t)v84, v48, a6, 1, (int *)__p);
            else
              memset(&v76, 0, sizeof(v76));

            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            v83 = v76;
            goto LABEL_67;
          case 2:
            md::LabelValueFormatter::formatElevation(&v76, (unsigned __int8 *)v84, a6, 0x100000000, 0x100000000, *(double *)(v27 + 16 * v26 + 8));
            goto LABEL_48;
          case 3:
            v36 = *(double *)(v27 + 16 * v26 + 8);
            *(_OWORD *)__p = xmmword_19FFB5EB0;
            v37 = objc_alloc(MEMORY[0x1E0CB3758]);
            objc_msgSend(MEMORY[0x1E0CB3B00], "celsius");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = (void *)objc_msgSend(v37, "initWithDoubleValue:unit:", v38, v36);

            md::LabelValueFormatter::FormatMeasurement(&v76, (uint64_t)v84, v39, a6, 0, (int *)__p);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            v83 = v76;
            v30 = (std::locale::id *)MEMORY[0x1E0DE4C08];
            goto LABEL_68;
          case 4:
            md::LabelValueFormatter::formatDateTime(&v76, (uint64_t)v84, 1u, a6, *(double *)(v27 + 16 * v26 + 8));
            goto LABEL_48;
          case 5:
            md::LabelValueFormatter::formatDateTime(&v76, (uint64_t)v84, a6, 1u, *(double *)(v27 + 16 * v26 + 8));
            goto LABEL_48;
          case 6:
            md::LabelValueFormatter::formatDateTime(&v76, (uint64_t)v84, a6, a6, *(double *)(v27 + 16 * v26 + 8));
            goto LABEL_48;
          case 7:
            v40 = *(double *)(v27 + 16 * v26 + 8);
            if (fabs(remainder(v40, 0.1)) <= 0.005)
              v41 = 0x100000001;
            else
              v41 = 0x100000002;
            md::LabelValueFormatter::formatElevation(&v76, (unsigned __int8 *)v84, a6, 0x100000001, v41, v40);
LABEL_48:
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            v83 = v76;
            goto LABEL_68;
          default:
            *v72 = 0;
            v72[64] = 0;

            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_107;
            goto LABEL_108;
        }
        break;
      }
    }
    else
    {
      v69 = 0;
      v68 = 0;
    }

    a1 = v72;
  }
  if (v95)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &__dst;
    else
      v70 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v93 >= 0)
      v71 = (const char *)&v92;
    else
      v71 = v92;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)a1, (const char *)v70, v71);
    a1[64] = 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_107:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_108:
    if (v95)
    {
      if (SHIBYTE(v93) < 0)
        (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v94 + 40))(v94, v92, v93 & 0x7FFFFFFFFFFFFFFFLL);
      if (SHIBYTE(v90) < 0)
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v91 + 40))(v91, __src, v90 & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  else
  {
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_119:
    __break(1u);
  }
}

void sub_19FDE3ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,void *a47)
{
  void *v47;
  void *v48;
  uint64_t v49;

  if (a42 < 0)
    operator delete(__p);

  if (*(char *)(v49 - 201) < 0)
    operator delete(*(void **)(v49 - 224));
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional(v49 - 192);
  _Unwind_Resume(a1);
}

void std::regex_replace[abi:nn180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, uint64_t a4, const char *a5)
{
  std::string::value_type *v6;
  char *v8;
  size_t v9;
  unsigned __int8 *v10;
  std::string::value_type *v11;
  std::string::value_type *v12;
  std::string::value_type *i;
  std::string::value_type *v14;
  std::string::value_type *v15;
  const char *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  std::string::value_type **v27;
  BOOL v28;
  std::string::value_type **v29;
  std::string::value_type *v30;
  std::string::value_type **v31;
  std::string::value_type *j;
  std::string::value_type *v33;
  int v34;
  int v35;
  std::sub_match<const char *> **v36;
  std::sub_match<const char *> **v37;
  std::sub_match<const char *> *v38;
  std::sub_match<const char *> *v39;
  char v40;
  int v41;
  size_t v43;
  char *v44;
  int v47;
  void *__p[2];
  _OWORD v49[2];
  std::string::value_type *v50;
  std::string::value_type *v51;
  char v52;
  std::string::value_type *v53;
  std::string::value_type *v54;
  char v55;
  char v56;
  uint64_t v57;
  std::vector<std::csub_match> v58[2];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;

  v6 = (std::string::value_type *)a2;
  v47 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  *(_OWORD *)__p = 0u;
  memset(v49, 0, 25);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  memset(v58, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, a2, a3, v58, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)__p, (uint64_t)v6, (uint64_t)a3, (uint64_t *)v58, 0);
  if (v58[0].__begin_)
    operator delete(v58[0].__begin_);
  v8 = (char *)__p[0];
  v44 = (char *)__p[1];
  if (__p[1] != __p[0])
  {
    v9 = strlen(a5);
    v10 = (unsigned __int8 *)&a5[v9];
    v43 = v9;
    while (1)
    {
      v11 = v50;
      v12 = v51;
      for (i = v50; i != v12; ++i)
        std::string::push_back(a1, *i);
      if (v43)
      {
        v15 = v53;
        v14 = v54;
        v16 = a5;
        while (1)
        {
          v17 = *(unsigned __int8 *)v16;
          if (v17 == 36)
          {
            v18 = (unsigned __int8 *)(v16 + 1);
            if (v16 + 1 != (const char *)v10)
            {
              v19 = (char)*v18;
              v17 = *v18;
              if (v19 > 38)
              {
                if (v19 == 39)
                {
                  if (v15 != v14)
                  {
                    v33 = v15;
                    do
                      std::string::push_back(a1, *v33++);
                    while (v33 != v14);
                  }
                  goto LABEL_13;
                }
                if (v19 == 96)
                {
                  if (v11 != v12)
                  {
                    v22 = v11;
                    do
                      std::string::push_back(a1, *v22++);
                    while (v22 != v12);
                  }
                  goto LABEL_13;
                }
              }
              else
              {
                if (v19 == 36)
                {
                  ++v16;
                  goto LABEL_12;
                }
                if (v19 == 38)
                {
                  v21 = *(std::string::value_type **)v8;
                  v20 = (std::string::value_type *)*((_QWORD *)v8 + 1);
                  if (*(std::string::value_type **)v8 != v20)
                  {
                    do
                      std::string::push_back(a1, *v21++);
                    while (v21 != v20);
                  }
                  goto LABEL_13;
                }
              }
              if ((v17 - 48) <= 9)
              {
                v23 = *v18 - 48;
                if (v16 + 2 != (const char *)v10)
                {
                  v24 = *((unsigned __int8 *)v16 + 2);
                  v25 = v24 - 48;
                  v26 = v24 + 10 * (int)v23 - 48;
                  if (v25 > 9)
                  {
                    v18 = (unsigned __int8 *)(v16 + 1);
                  }
                  else
                  {
                    v23 = v26;
                    v18 = (unsigned __int8 *)(v16 + 2);
                  }
                }
                v27 = (std::string::value_type **)&v8[24 * (int)v23];
                v28 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v8) >> 3) > v23;
                v29 = (std::string::value_type **)v49 + 1;
                if (v28)
                  v29 = v27;
                v30 = *v29;
                v31 = v27 + 1;
                if (!v28)
                  v31 = (std::string::value_type **)&v49[1];
                for (j = *v31; v30 != j; ++v30)
                  std::string::push_back(a1, *v30);
                goto LABEL_13;
              }
            }
            LOBYTE(v17) = 36;
          }
LABEL_12:
          std::string::push_back(a1, v17);
          v18 = (unsigned __int8 *)v16;
LABEL_13:
          v16 = (const char *)(v18 + 1);
          if (v18 + 1 == v10)
            goto LABEL_47;
        }
      }
      v15 = v53;
      v14 = v54;
LABEL_47:
      v34 = v47;
      v35 = v47 | 0x800;
      v47 |= 0x800u;
      v36 = (std::sub_match<const char *> **)v49 + 1;
      if (v44 != v8)
        v36 = (std::sub_match<const char *> **)v8;
      v37 = (std::sub_match<const char *> **)(v8 + 8);
      if (v44 == v8)
        v37 = (std::sub_match<const char *> **)&v49[1];
      v38 = *v37;
      v39 = a3;
      if (*v36 != *v37)
        goto LABEL_52;
      if (a3 == v38)
        goto LABEL_61;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = 0;
      memset(v58, 0, 41);
      v41 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, v38, a3, v58, v34 | 0x860u);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)__p, (uint64_t)v38, (uint64_t)a3, (uint64_t *)v58, 1);
      if (v58[0].__begin_)
        operator delete(v58[0].__begin_);
      if (!v41)
        break;
      v8 = (char *)__p[0];
LABEL_6:
      v44 = (char *)__p[1];
      if (__p[1] == v8)
      {
        while (v15 != v14)
          std::string::push_back(a1, *v15++);
        if (v8)
          goto LABEL_67;
        return;
      }
    }
    v38 = (std::sub_match<const char *> *)((char *)v38 + 1);
    v35 = v47;
    v39 = a3;
LABEL_52:
    v47 = v35 | 0x80;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    memset(v58, 0, 41);
    v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, v38, v39, v58, v35 | 0x80u);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)__p, (uint64_t)v38, (uint64_t)v39, (uint64_t *)v58, (v35 & 0x800) != 0);
    if (v58[0].__begin_)
      operator delete(v58[0].__begin_);
    v8 = (char *)__p[0];
    if ((v40 & 1) != 0)
      goto LABEL_6;
LABEL_61:
    if (v8)
      operator delete(v8);
    v8 = 0;
    v56 = 0;
    *(_OWORD *)__p = 0u;
    memset(v49, 0, 25);
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v57 = 0;
    goto LABEL_6;
  }
  while (v6 != (std::string::value_type *)a3)
    std::string::push_back(a1, *v6++);
  v8 = v44;
  if (v44)
LABEL_67:
    operator delete(v8);
}

void sub_19FDE4194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  uint64_t v25;
  void *v27;
  void *v28;

  v27 = *(void **)(v25 - 208);
  if (v27)
  {
    operator delete(v27);
    v28 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v28 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(this);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v12 = *(char **)a1;
  v13 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v13 = &v12[8 * ((a4[1] - *a4) >> 3)];
      *(_QWORD *)(a1 + 8) = v13;
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3) >= v15)
    {
      v22 = &v13[24 * v15];
      v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
      do
      {
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        v13[16] = 0;
        v13 += 24;
        v27 -= 24;
      }
      while (v27);
      *(_QWORD *)(a1 + 8) = v22;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v11)
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(24 * v19);
      v21 = &v20[24 * v14];
      v22 = &v20[24 * v11];
      v23 = 24 * v11 - 24 * v14;
      v24 = v21;
      do
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        v24[16] = 0;
        v24 += 24;
        v23 -= 24;
      }
      while (v23);
      v25 = *(char **)a1;
      if (v13 != *(char **)a1)
      {
        do
        {
          v26 = *(_OWORD *)(v13 - 24);
          *((_QWORD *)v21 - 1) = *((_QWORD *)v13 - 1);
          *(_OWORD *)(v21 - 24) = v26;
          v21 -= 24;
          v13 -= 24;
        }
        while (v13 != v25);
        v13 = *(char **)a1;
      }
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = &v20[24 * v19];
      if (v13)
      {
        operator delete(v13);
        v22 = *(char **)(a1 + 8);
      }
    }
    v12 = *(char **)a1;
    v13 = v22;
  }
  if (v13 != v12)
  {
    v28 = 0;
    v29 = 0;
    v31 = *a4;
    v30 = a4[1];
    do
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v31) >> 3);
      v33 = (_QWORD *)(v31 + v28);
      if (v32 <= v29)
        v34 = a4 + 3;
      else
        v34 = v33;
      *(_QWORD *)&v12[v28] = a2 + *v34 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v29)
        v35 = a4 + 3;
      else
        v35 = (uint64_t *)(*a4 + v28);
      *(_QWORD *)(*(_QWORD *)a1 + v28 + 8) = a2 + v35[1] - v10;
      v31 = *a4;
      v30 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v30 - *a4) >> 3) <= v29)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v28);
      v37 = *((_BYTE *)v36 + 16);
      v12 = *(char **)a1;
      v38 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v28 + 16) = v37;
      ++v29;
      v28 += 24;
    }
    while (v29 < 0xAAAAAAAAAAAAAAABLL * ((v38 - (uint64_t)v12) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v39 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v39;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v39;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  size_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  unint64_t v92;
  char *v93;
  void *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  void *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void **v141;
  void **v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char *v152;
  char *v153;
  uint64_t v156;
  _BYTE v157[56];
  void *__p[2];
  _QWORD v159[3];
  __int128 v160;
  __int128 v161;
  __int128 v162;

  v161 = 0u;
  v162 = 0u;
  v160 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v157 = 0;
    memset(&v157[8], 0, 48);
    *(_OWORD *)__p = 0uLL;
    memset(v159, 0, 21);
    std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v160);
    v11 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * ((*((_QWORD *)&v162 + 1) + (_QWORD)v162) / 0x2AuLL))
        + 96 * ((*((_QWORD *)&v162 + 1) + (_QWORD)v162) % 0x2AuLL);
    v12 = *(_OWORD *)&v157[16];
    *(_OWORD *)v11 = *(_OWORD *)v157;
    *(_OWORD *)(v11 + 16) = v12;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    memset(&v157[32], 0, 24);
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 72) = 0;
    __p[0] = 0;
    __p[1] = 0;
    v159[0] = 0;
    v13 = v159[1];
    *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v159[1] + 5);
    *(_QWORD *)(v11 + 80) = v13;
    v15 = *((_QWORD *)&v162 + 1);
    v14 = v162;
    v16 = ++*((_QWORD *)&v162 + 1);
    v17 = *((_QWORD *)&v160 + 1);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = v15 + v162;
    v20 = 8 * (v19 / 0x2A);
    v21 = 96 * (v19 % 0x2A);
    v22 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + v20) + v21;
    *(_DWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
    v23 = *(_QWORD *)(v17 + v20) + v21;
    v26 = *(_QWORD *)(v23 + 56);
    v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
    v25 = v26;
    v27 = ((uint64_t)v24->__end_ - v26) >> 4;
    v148 = a4;
    if (v18 <= v27)
    {
      if (v18 < v27)
        v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
    else
    {
      std::vector<geo::Mercator2<double>>::__append(v24, v18 - v27);
      v16 = *((_QWORD *)&v162 + 1);
      v14 = v162;
      v17 = *((_QWORD *)&v160 + 1);
    }
    v151 = 0;
    v28 = 0;
    v150 = 0;
    v29 = v16 + v14 - 1;
    v30 = 8 * (v29 / 0x2A);
    v149 = a3;
    v156 = a3 - a2;
    v31 = 96 * (v29 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
    v32 = *(_QWORD *)(v17 + v30) + v31;
    *(_DWORD *)(v32 + 88) = a5;
    *(_BYTE *)(v32 + 92) = a6;
    while (1)
    {
      if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v156)
      {
LABEL_13:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        __break(1u);
        goto LABEL_158;
      }
      v34 = v16 + v162 - 1;
      v35 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (v34 / 0x2A));
      v36 = v34 % 0x2A;
      v37 = v35 + 96 * (v34 % 0x2A);
      v39 = (_QWORD *)(v37 + 80);
      v38 = *(_QWORD *)(v37 + 80);
      if (v38)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v35 + 96 * v36);
      switch(*(_DWORD *)v37)
      {
        case 0xFFFFFC18:
          v40 = *(_QWORD *)(v35 + 96 * v36 + 16);
          if ((a5 & 0x20) != 0 && v40 == a2)
          {
            v41 = *((_QWORD *)&v162 + 1) + v162 - 1;
            v42 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (v41 / 0x2A));
            v43 = v41 % 0x2A;
            v44 = *(void **)(v42 + 96 * (v41 % 0x2A) + 56);
            if (v44)
            {
              *(_QWORD *)(v42 + 96 * v43 + 64) = v44;
              operator delete(v44);
            }
            v45 = *(void **)(v42 + 96 * v43 + 32);
            if (!v45)
              goto LABEL_28;
LABEL_27:
            *(_QWORD *)(v42 + 96 * v43 + 40) = v45;
            operator delete(v45);
            goto LABEL_28;
          }
          if ((a5 & 0x1000) != 0 && v40 != v149)
          {
            v62 = *((_QWORD *)&v162 + 1) + v162 - 1;
            v42 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (v62 / 0x2A));
            v43 = v62 % 0x2A;
LABEL_24:
            v47 = *(void **)(v42 + 96 * v43 + 56);
            if (v47)
              goto LABEL_25;
            goto LABEL_26;
          }
          v75 = v40 - *(_QWORD *)(v35 + 96 * v36 + 8);
          v76 = v150;
          if ((v151 & (v150 >= v75)) == 0)
            v76 = v75;
          if (v76 != v156)
          {
            v150 = v76;
            v85 = *((_QWORD *)&v162 + 1) + v162 - 1;
            v86 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (v85 / 0x2A));
            v87 = v85 % 0x2A;
            v88 = *(void **)(v86 + 96 * (v85 % 0x2A) + 56);
            if (v88)
            {
              *(_QWORD *)(v86 + 96 * v87 + 64) = v88;
              operator delete(v88);
            }
            v89 = *(void **)(v86 + 96 * v87 + 32);
            if (v89)
            {
              *(_QWORD *)(v86 + 96 * v87 + 40) = v89;
              operator delete(v89);
            }
            v90 = 42 * ((uint64_t)(v161 - *((_QWORD *)&v160 + 1)) >> 3) - 1;
            v91 = v162;
            --*((_QWORD *)&v162 + 1);
            if ((_QWORD)v161 == *((_QWORD *)&v160 + 1))
              v90 = 0;
            if ((unint64_t)(v90 - (*((_QWORD *)&v91 + 1) + v91) + 1) >= 0x54)
            {
              operator delete(*(void **)(v161 - 8));
              *(_QWORD *)&v161 = v161 - 8;
            }
            v151 = 1;
            goto LABEL_8;
          }
          v77 = (void **)*((_QWORD *)&v160 + 1);
          v78 = v161;
          if ((_QWORD)v161 == *((_QWORD *)&v160 + 1))
          {
            v78 = *((_QWORD *)&v160 + 1);
          }
          else
          {
            v79 = (_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * ((unint64_t)v162 / 0x2A));
            v80 = (_QWORD *)(*v79 + 96 * ((unint64_t)v162 % 0x2A));
            v81 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * ((*((_QWORD *)&v162 + 1) + (_QWORD)v162) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v162 + 1) + (_QWORD)v162) % 0x2AuLL);
            if (v80 != (_QWORD *)v81)
            {
              do
              {
                v82 = (void *)v80[7];
                if (v82)
                {
                  v80[8] = v82;
                  operator delete(v82);
                }
                v83 = (void *)v80[4];
                if (v83)
                {
                  v80[5] = v83;
                  operator delete(v83);
                }
                v80 += 12;
                if ((_QWORD *)((char *)v80 - *v79) == (_QWORD *)4032)
                {
                  v84 = (_QWORD *)v79[1];
                  ++v79;
                  v80 = v84;
                }
              }
              while (v80 != (_QWORD *)v81);
              v77 = (void **)*((_QWORD *)&v160 + 1);
              v78 = v161;
            }
          }
          *((_QWORD *)&v162 + 1) = 0;
          v97 = v78 - (_QWORD)v77;
          if (v97 >= 0x11)
          {
            do
            {
              operator delete(*v77);
              v77 = (void **)(*((_QWORD *)&v160 + 1) + 8);
              *((_QWORD *)&v160 + 1) = v77;
              v97 = v161 - (_QWORD)v77;
            }
            while ((_QWORD)v161 - (_QWORD)v77 > 0x10uLL);
          }
          if (v97 >> 3 == 1)
          {
            v98 = 21;
          }
          else
          {
            if (v97 >> 3 != 2)
            {
LABEL_94:
              v151 = 1;
              v150 = v156;
              goto LABEL_8;
            }
            v98 = 42;
          }
          *(_QWORD *)&v162 = v98;
          goto LABEL_94;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_8;
        case 0xFFFFFC1D:
          v57 = v162;
          v58 = (uint64_t *)*((_QWORD *)&v160 + 1);
          v59 = (uint64_t *)v161;
          if ((_QWORD)v162)
            goto LABEL_106;
          v60 = (uint64_t)(v161 - *((_QWORD *)&v160 + 1)) >> 3;
          v61 = 42 * v60 - 1;
          if ((_QWORD)v161 == *((_QWORD *)&v160 + 1))
            v61 = 0;
          if ((unint64_t)(v61 - *((_QWORD *)&v162 + 1)) < 0x2A)
          {
            if (v60 >= (uint64_t)(*((_QWORD *)&v161 + 1) - v160) >> 3)
            {
              if (*((_QWORD *)&v161 + 1) == (_QWORD)v160)
                v92 = 1;
              else
                v92 = (uint64_t)(*((_QWORD *)&v161 + 1) - v160) >> 2;
              if (v92 >> 61)
LABEL_158:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v93 = (char *)operator new(8 * v92);
              v94 = operator new(0xFC0uLL);
              if (v92)
              {
                v95 = v93;
                v96 = &v93[8 * v92];
              }
              else
              {
                v152 = v93;
                v100 = (char *)operator new(8uLL);
                v96 = v100 + 8;
                operator delete(v152);
                v58 = (uint64_t *)*((_QWORD *)&v160 + 1);
                v59 = (uint64_t *)v161;
                v95 = v100;
              }
              *(_QWORD *)v95 = v94;
              v101 = v95 + 8;
              v153 = v95;
              v102 = v95;
              if (v58 == v59)
              {
LABEL_101:
                v103 = (void *)v160;
                *(_QWORD *)&v160 = v153;
                *((_QWORD *)&v160 + 1) = v102;
                *(_QWORD *)&v161 = v101;
                *((_QWORD *)&v161 + 1) = v96;
                v104 = v162 + 42;
                if (v101 - v102 == 8)
                  v104 = 21;
                *(_QWORD *)&v162 = v104;
                if (v103)
                  operator delete(v103);
                goto LABEL_105;
              }
              while (2)
              {
                if (v101 != v96)
                {
                  v113 = v102;
                  v114 = v101;
                  v101 = v96;
                  goto LABEL_113;
                }
                if (v102 > v153)
                {
                  v116 = (v102 - v153) >> 3;
                  if (v116 >= -1)
                    v117 = v116 + 1;
                  else
                    v117 = v116 + 2;
                  v118 = v117 >> 1;
                  v119 = &v102[-8 * (v117 >> 1)];
                  v120 = v101;
                  v121 = v101 - v102;
                  if (v101 != v102)
                  {
                    memmove(v119, v102, v101 - v102);
                    v121 = v101 - v102;
                    v120 = v102;
                  }
                  v122 = -v118;
                  v114 = &v119[v121];
                  v113 = &v120[8 * v122];
LABEL_113:
                  v115 = *v58++;
                  *(_QWORD *)v114 = v115;
                  v102 = v113;
                  v96 = v101;
                  v101 = v114 + 8;
                  if (v58 == (uint64_t *)v161)
                    goto LABEL_101;
                  continue;
                }
                break;
              }
              if (v101 == v153)
                v123 = 1;
              else
                v123 = (v101 - v153) >> 2;
              if (v123 >> 61)
                goto LABEL_158;
              v124 = (char *)operator new(8 * v123);
              v125 = v123;
              v126 = v123 >> 2;
              v113 = &v124[8 * (v123 >> 2)];
              v114 = v113;
              v127 = v101 - v102;
              if (v101 != v102)
              {
                v114 = &v113[v127 & 0xFFFFFFFFFFFFFFF8];
                v128 = v127 - 8;
                if (v128 >= 0x38)
                {
                  v130 = 8 * v126;
                  if ((unint64_t)(&v124[8 * v126] - v102) < 0x20)
                  {
                    v129 = v113;
                    goto LABEL_135;
                  }
                  v131 = (v128 >> 3) + 1;
                  v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
                  v129 = &v113[v132];
                  v133 = (__int128 *)(v102 + 16);
                  v134 = &v124[v130 + 16];
                  v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v136 = *v133;
                    *((_OWORD *)v134 - 1) = *(v133 - 1);
                    *(_OWORD *)v134 = v136;
                    v133 += 2;
                    v134 += 32;
                    v135 -= 4;
                  }
                  while (v135);
                  if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v102 += v132;
                    goto LABEL_135;
                  }
                }
                else
                {
                  v129 = v113;
                  do
                  {
LABEL_135:
                    v137 = *(_QWORD *)v102;
                    v102 += 8;
                    *(_QWORD *)v129 = v137;
                    v129 += 8;
                  }
                  while (v129 != v114);
                }
              }
              v101 = &v124[8 * v125];
              if (v153)
              {
                v138 = v124;
                v139 = v113;
                operator delete(v153);
                v113 = v139;
                v153 = v138;
              }
              else
              {
                v153 = v124;
              }
              goto LABEL_113;
            }
            if (*((_QWORD *)&v160 + 1) == (_QWORD)v160)
            {
              *(_QWORD *)v157 = operator new(0xFC0uLL);
              std::__split_buffer<geo::QuadTile *>::push_back((char **)&v160, v157);
              *(_QWORD *)v157 = *(_QWORD *)(v161 - 8);
              *(_QWORD *)&v161 = v161 - 8;
            }
            else
            {
              *(_QWORD *)v157 = operator new(0xFC0uLL);
            }
            std::__split_buffer<geo::QuadTile *>::push_front((void **)&v160, v157);
            v99 = 21;
            if ((_QWORD)v161 - *((_QWORD *)&v160 + 1) != 8)
              v99 = v162 + 42;
            *(_QWORD *)&v162 = v99;
          }
          else
          {
            *(_QWORD *)&v162 = 42;
            *(_QWORD *)v157 = *(_QWORD *)(v161 - 8);
            *(_QWORD *)&v161 = v161 - 8;
            std::__split_buffer<geo::QuadTile *>::push_front((void **)&v160, v157);
          }
LABEL_105:
          v57 = v162;
          v58 = (uint64_t *)*((_QWORD *)&v160 + 1);
          v59 = (uint64_t *)v161;
LABEL_106:
          v105 = &v58[v57 / 0x2A];
          v106 = *v105 + 96 * (v57 % 0x2A);
          if (v59 == v58)
            v106 = 0;
          if (v106 == *v105)
            v106 = *(v105 - 1) + 4032;
          v107 = *(_OWORD *)(v37 + 16);
          *(_OWORD *)(v106 - 96) = *(_OWORD *)v37;
          *(_OWORD *)(v106 - 80) = v107;
          v108 = v35 + 96 * v36;
          *(_QWORD *)(v106 - 56) = 0;
          *(_QWORD *)(v106 - 48) = 0;
          *(_QWORD *)(v106 - 64) = 0;
          *(_OWORD *)(v106 - 64) = *(_OWORD *)(v108 + 32);
          *(_QWORD *)(v106 - 48) = *(_QWORD *)(v108 + 48);
          *(_QWORD *)(v108 + 32) = 0;
          *(_QWORD *)(v108 + 40) = 0;
          *(_QWORD *)(v108 + 48) = 0;
          *(_QWORD *)(v106 - 40) = 0;
          *(_QWORD *)(v106 - 32) = 0;
          *(_QWORD *)(v106 - 24) = 0;
          *(_OWORD *)(v106 - 40) = *(_OWORD *)(v108 + 56);
          *(_QWORD *)(v106 - 24) = *(_QWORD *)(v108 + 72);
          *(_QWORD *)(v108 + 56) = 0;
          *(_QWORD *)(v108 + 64) = 0;
          *(_QWORD *)(v108 + 72) = 0;
          v109 = *v39;
          *(_QWORD *)(v106 - 11) = *(_QWORD *)(v37 + 85);
          *(_QWORD *)(v106 - 16) = v109;
          v110 = *((_QWORD *)&v162 + 1);
          *(_QWORD *)&v162 = v162 - 1;
          ++*((_QWORD *)&v162 + 1);
          v111 = v110 + v162;
          v112 = (v110 + (uint64_t)v162) / 0x2AuLL;
          v42 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * v112);
          v43 = v111 - 42 * v112;
          v47 = *(void **)(v42 + 96 * v43 + 56);
          if (v47)
          {
LABEL_25:
            *(_QWORD *)(v42 + 96 * v43 + 64) = v47;
            operator delete(v47);
          }
LABEL_26:
          v45 = *(void **)(v42 + 96 * v43 + 32);
          if (v45)
            goto LABEL_27;
LABEL_28:
          v48 = 42 * ((uint64_t)(v161 - *((_QWORD *)&v160 + 1)) >> 3) - 1;
          v49 = v162;
          --*((_QWORD *)&v162 + 1);
          if ((_QWORD)v161 == *((_QWORD *)&v160 + 1))
            v48 = 0;
          if ((unint64_t)(v48 - (*((_QWORD *)&v49 + 1) + v49) + 1) >= 0x54)
          {
            operator delete(*(void **)(v161 - 8));
            *(_QWORD *)&v161 = v161 - 8;
          }
LABEL_8:
          v16 = *((_QWORD *)&v162 + 1);
          if (!*((_QWORD *)&v162 + 1))
          {
            if ((v151 & 1) != 0)
            {
              v140 = *v148;
              *(_QWORD *)v140 = a2;
              *(_QWORD *)(v140 + 8) = a2 + v150;
              v6 = 1;
              *(_BYTE *)(v140 + 16) = 1;
            }
            else
            {
              v6 = 0;
            }
            goto LABEL_142;
          }
          break;
        case 0xFFFFFC1F:
          v46 = *((_QWORD *)&v162 + 1) + v162 - 1;
          v42 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (v46 / 0x2A));
          v43 = v46 % 0x2A;
          goto LABEL_24;
        case 0xFFFFFC20:
          v50 = *(_OWORD *)(v37 + 16);
          *(_OWORD *)v157 = *(_OWORD *)v37;
          *(_OWORD *)&v157[16] = v50;
          v51 = v35 + 96 * v36;
          memset(&v157[32], 0, 24);
          v53 = *(_BYTE **)(v51 + 32);
          v52 = *(_BYTE **)(v51 + 40);
          v54 = v52 - v53;
          if (v52 != v53)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v54 >> 3) >= 0xAAAAAAAAAAAAAABLL)
              abort();
            v55 = (char *)operator new(v54);
            *(_QWORD *)&v157[32] = v55;
            *(_QWORD *)&v157[40] = v55;
            *(_QWORD *)&v157[48] = &v55[8 * (v54 >> 3)];
            v56 = 24 * ((v54 - 24) / 0x18uLL) + 24;
            memcpy(v55, v53, v56);
            *(_QWORD *)&v157[40] = &v55[v56];
          }
          v63 = v35 + 96 * v36;
          __p[0] = 0;
          __p[1] = 0;
          v159[0] = 0;
          v65 = *(_BYTE **)(v63 + 56);
          v64 = *(_BYTE **)(v63 + 64);
          v66 = v64 - v65;
          if (v64 != v65)
          {
            if (v66 < 0)
              abort();
            v67 = (char *)operator new(v64 - v65);
            __p[0] = v67;
            __p[1] = v67;
            v159[0] = &v67[16 * (v66 >> 4)];
            memcpy(v67, v65, v66 & 0xFFFFFFFFFFFFFFF0);
            __p[1] = &v67[v66 & 0xFFFFFFFFFFFFFFF0];
          }
          v68 = *v39;
          *(_QWORD *)((char *)&v159[1] + 5) = *(_QWORD *)(v37 + 85);
          v159[1] = v68;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v39 + 24))(*v39, 1, v37);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v159[1] + 24))(v159[1], 0, v157);
          v69 = *((_QWORD *)&v160 + 1);
          if ((_QWORD)v161 == *((_QWORD *)&v160 + 1))
            v70 = 0;
          else
            v70 = 42 * ((uint64_t)(v161 - *((_QWORD *)&v160 + 1)) >> 3) - 1;
          v71 = *((_QWORD *)&v162 + 1) + v162;
          if (v70 == *((_QWORD *)&v162 + 1) + (_QWORD)v162)
          {
            std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v160);
            v69 = *((_QWORD *)&v160 + 1);
            v71 = *((_QWORD *)&v162 + 1) + v162;
          }
          v72 = *(_QWORD *)(v69 + 8 * (v71 / 0x2A)) + 96 * (v71 % 0x2A);
          v73 = *(_OWORD *)&v157[16];
          *(_OWORD *)v72 = *(_OWORD *)v157;
          *(_OWORD *)(v72 + 16) = v73;
          *(_QWORD *)(v72 + 40) = 0;
          *(_QWORD *)(v72 + 48) = 0;
          *(_QWORD *)(v72 + 32) = 0;
          *(_OWORD *)(v72 + 32) = *(_OWORD *)&v157[32];
          *(_QWORD *)(v72 + 48) = *(_QWORD *)&v157[48];
          memset(&v157[32], 0, 24);
          *(_QWORD *)(v72 + 56) = 0;
          *(_QWORD *)(v72 + 64) = 0;
          *(_QWORD *)(v72 + 72) = 0;
          *(_OWORD *)(v72 + 56) = *(_OWORD *)__p;
          *(_QWORD *)(v72 + 72) = v159[0];
          __p[0] = 0;
          __p[1] = 0;
          v159[0] = 0;
          v74 = v159[1];
          *(_QWORD *)(v72 + 85) = *(_QWORD *)((char *)&v159[1] + 5);
          *(_QWORD *)(v72 + 80) = v74;
          ++*((_QWORD *)&v162 + 1);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v157[32])
          {
            *(_QWORD *)&v157[40] = *(_QWORD *)&v157[32];
            operator delete(*(void **)&v157[32]);
          }
          goto LABEL_8;
        default:
          goto LABEL_13;
      }
    }
  }
LABEL_142:
  v141 = (void **)*((_QWORD *)&v160 + 1);
  v142 = (void **)v161;
  *((_QWORD *)&v162 + 1) = 0;
  v143 = v161 - *((_QWORD *)&v160 + 1);
  if ((_QWORD)v161 - *((_QWORD *)&v160 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v141);
      v142 = (void **)v161;
      v141 = (void **)(*((_QWORD *)&v160 + 1) + 8);
      *((_QWORD *)&v160 + 1) = v141;
      v143 = v161 - (_QWORD)v141;
    }
    while ((_QWORD)v161 - (_QWORD)v141 > 0x10uLL);
  }
  v144 = v143 >> 3;
  if (v144 == 1)
  {
    v145 = 21;
    goto LABEL_148;
  }
  if (v144 == 2)
  {
    v145 = 42;
LABEL_148:
    *(_QWORD *)&v162 = v145;
  }
  if (v141 != v142)
  {
    do
    {
      v146 = *v141++;
      operator delete(v146);
    }
    while (v141 != v142);
    if ((_QWORD)v161 != *((_QWORD *)&v160 + 1))
      *(_QWORD *)&v161 = v161 + ((*((_QWORD *)&v160 + 1) - v161 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)v160)
    operator delete((void *)v160);
  return v6;
}

void sub_19FDE5310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;

  operator delete(v26);
  operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:nn180100](v27 - 144);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  const char *v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  char *v27;
  void *v28;
  void *v29;
  __int128 v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *j;
  __int128 v62;
  uint64_t i;
  char *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  char *k;
  __int128 v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  const double *v99;
  double *v100;
  uint64_t v101;
  const double *v102;
  double *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  const double *v113;
  double *v114;
  uint64_t v115;
  const double *v116;
  double *v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  unsigned int v121;
  uint64_t v122;
  char v123;
  uint64_t result;
  const char *v125;
  uint64_t *v126;
  const char *v127;
  const char *v128;
  char v129;
  uint64_t v130;
  _BYTE v133[56];
  void *__p[2];
  _QWORD v135[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v137[40];
  __int128 v138;
  __int128 v139;
  _QWORD v140[4];
  char *v141;
  char *v142;
  unint64_t v143;
  float64x2x2_t v144;
  float64x2x2_t v145;
  float64x2x2_t v146;
  float64x2x2_t v147;

  v141 = 0;
  v142 = 0;
  v143 = 0;
  *(_DWORD *)v137 = 0;
  memset(&v137[8], 0, 32);
  v138 = 0u;
  v139 = 0u;
  memset(v140, 0, 21);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v15 = 0;
    v16 = (void *)v139;
    if (!(_QWORD)v139)
      goto LABEL_154;
    goto LABEL_153;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v133 = 0;
  memset(&v133[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v135, 0, 21);
  v11 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v141, (uint64_t)v133);
  v142 = v11;
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v133[32])
    operator delete(*(void **)&v133[32]);
  v12 = *((_QWORD *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  v13 = *(unsigned int *)(a1 + 28);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v11 - 7) - v12) >> 3);
  if (v13 <= v14)
  {
    if (v13 < v14)
      *((_QWORD *)v11 - 7) = v12 + 24 * v13;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v11 - 64), v13 - v14, &__x);
  }
  v17 = *((_QWORD *)v11 - 5);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = (*((_QWORD *)v11 - 4) - v17) >> 4;
  if (v18 <= v19)
  {
    if (v18 < v19)
      *((_QWORD *)v11 - 4) = v17 + 16 * v18;
  }
  else
  {
    std::vector<geo::Mercator2<double>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v11 - 40), v18 - v19);
  }
  v126 = a4;
  v127 = a3;
  v128 = 0;
  v129 = 0;
  v20 = 0;
  v21 = (const char *)(a3 - a2);
  *((_QWORD *)v11 - 2) = v6;
  *((_DWORD *)v11 - 2) = a5;
  *(v11 - 4) = a6;
  while (2)
  {
    v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
    {
LABEL_23:
      result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      __break(1u);
      return result;
    }
    v24 = v11 - 16;
    v23 = *((_QWORD *)v11 - 2);
    v25 = v11 - 96;
    if (v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v11 - 96);
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        v26 = (const char *)*((_QWORD *)v11 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v127)
          goto LABEL_31;
        v45 = &v26[-*((_QWORD *)v11 - 11)];
        v46 = v128;
        if ((v129 & ((uint64_t)v128 >= (uint64_t)v45)) != 0)
          goto LABEL_100;
        v47 = *((_OWORD *)v11 - 5);
        *(_OWORD *)v137 = *(_OWORD *)v25;
        *(_OWORD *)&v137[16] = v47;
        if (v137 == v25)
          goto LABEL_99;
        v48 = (char *)*((_QWORD *)v11 - 8);
        v49 = (char *)*((_QWORD *)v11 - 7);
        v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3);
        v51 = *((_QWORD *)&v138 + 1);
        v52 = *(char **)&v137[32];
        v125 = v45;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v138 + 1) - *(_QWORD *)&v137[32]) >> 3) >= v50)
        {
          v57 = (char *)v138;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *(_QWORD *)&v137[32]) >> 3) >= v50)
          {
            for (i = *(_QWORD *)&v137[32]; v48 != v49; v48 += 24)
            {
              *(_OWORD *)i = *(_OWORD *)v48;
              *(_BYTE *)(i + 16) = v48[16];
              i += 24;
            }
            v59 = i - (_QWORD)v52;
            v57 = v52;
          }
          else
          {
            v60 = &v48[8 * ((uint64_t)(v138 - *(_QWORD *)&v137[32]) >> 3)];
            if ((_QWORD)v138 != *(_QWORD *)&v137[32])
            {
              do
              {
                *(_OWORD *)v52 = *(_OWORD *)v48;
                v52[16] = v48[16];
                v48 += 24;
                v52 += 24;
              }
              while (v48 != v60);
            }
            for (j = v57; v60 != v49; v60 += 24)
            {
              v62 = *(_OWORD *)v60;
              *((_QWORD *)j + 2) = *((_QWORD *)v60 + 2);
              *(_OWORD *)j = v62;
              j += 24;
            }
            v59 = j - v57;
          }
        }
        else
        {
          v130 = v49 - v48;
          if (*(_QWORD *)&v137[32])
          {
            *(_QWORD *)&v138 = *(_QWORD *)&v137[32];
            operator delete(*(void **)&v137[32]);
            v51 = 0;
            *(_QWORD *)&v137[32] = 0;
            v138 = 0uLL;
          }
          if (v50 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_161;
          v53 = 0xAAAAAAAAAAAAAAABLL * (v51 >> 3);
          v54 = 2 * v53;
          if (2 * v53 <= v50)
            v54 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3);
          v55 = v53 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v54;
          if (v55 > 0xAAAAAAAAAAAAAAALL)
LABEL_161:
            abort();
          v56 = (char *)operator new(24 * v55);
          v57 = v56;
          *(_QWORD *)&v137[32] = v56;
          *(_QWORD *)&v138 = v56;
          *((_QWORD *)&v138 + 1) = &v56[24 * v55];
          v58 = v56;
          if (v48 != v49)
          {
            memcpy(v56, v48, 24 * ((v130 - 24) / 0x18uLL) + 24);
            v58 = &v57[24 * ((v130 - 24) / 0x18uLL) + 24];
          }
          v59 = v58 - v57;
          v45 = v125;
        }
        *(_QWORD *)&v138 = &v57[v59];
        v64 = (char *)*((_QWORD *)v11 - 5);
        v65 = (char *)*((_QWORD *)v11 - 4);
        v66 = v65 - v64;
        v67 = (v65 - v64) >> 4;
        v68 = v140[0];
        v69 = (char *)v139;
        if (v67 <= (uint64_t)(v140[0] - v139) >> 4)
        {
          v73 = (char *)*((_QWORD *)&v139 + 1);
          v76 = *((_QWORD *)&v139 + 1) - v139;
          v77 = (uint64_t)(*((_QWORD *)&v139 + 1) - v139) >> 4;
          if (v77 < v67)
          {
            v78 = &v64[16 * v77];
            if (*((_QWORD *)&v139 + 1) != (_QWORD)v139)
            {
              v79 = v76 - 16;
              if ((unint64_t)(v76 - 16) >= 0xF0)
              {
                v91 = v76 & 0xFFFFFFFFFFFFFFF0;
                v92 = v139 + v91 - 8;
                v93 = (unint64_t)&v64[v91 - 8];
                v94 = (uint64_t)v139 + 8 >= (unint64_t)&v64[v91]
                   || (unint64_t)(v64 + 8) >= (unint64_t)v139 + v91;
                v95 = !v94;
                v96 = v92 <= (unint64_t)v64 || (unint64_t)v139 >= v93;
                if (v96 && !v95)
                {
                  v97 = (v79 >> 4) + 1;
                  v98 = 16 * (v97 & 0x1FFFFFFFFFFFFFFCLL);
                  v99 = (const double *)(v64 + 32);
                  v100 = (double *)(v139 + 32);
                  v101 = v97 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v102 = v99 - 4;
                    v144 = vld2q_f64(v102);
                    v146 = vld2q_f64(v99);
                    v103 = v100 - 4;
                    vst2q_f64(v103, v144);
                    vst2q_f64(v100, v146);
                    v99 += 8;
                    v100 += 8;
                    v101 -= 4;
                  }
                  while (v101);
                  if (v97 == (v97 & 0x1FFFFFFFFFFFFFFCLL))
                    goto LABEL_88;
                  v64 += v98;
                  v69 += v98;
                }
              }
              do
              {
                *(_QWORD *)v69 = *(_QWORD *)v64;
                *((_QWORD *)v69 + 1) = *((_QWORD *)v64 + 1);
                v64 += 16;
                v69 += 16;
              }
              while (v64 != v78);
            }
LABEL_88:
            for (k = v73; v78 != v65; k += 16)
            {
              v81 = *(_OWORD *)v78;
              v78 += 16;
              *(_OWORD *)k = v81;
            }
            v75 = (char *)(k - v73);
            goto LABEL_98;
          }
          if (v64 == v65)
          {
            v83 = (char *)v139;
          }
          else
          {
            v82 = v66 - 16;
            if ((unint64_t)(v66 - 16) >= 0xF0)
            {
              v104 = v82 & 0xFFFFFFFFFFFFFFF0 | 8;
              v105 = v139 + v104;
              v106 = (unint64_t)&v64[v104];
              v107 = (v82 & 0xFFFFFFFFFFFFFFF0) + 16;
              v109 = (uint64_t)v139 + 8 < (unint64_t)&v64[v107]
                  && (unint64_t)(v64 + 8) < (unint64_t)v139 + v107;
              v83 = (char *)v139;
              v110 = v105 <= (unint64_t)v64 || (unint64_t)v139 >= v106;
              if (v110 && !v109)
              {
                v111 = (v82 >> 4) + 1;
                v112 = 16 * (v111 & 0x1FFFFFFFFFFFFFFCLL);
                v83 = (char *)(v139 + v112);
                v113 = (const double *)(v64 + 32);
                v114 = (double *)(v139 + 32);
                v115 = v111 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v116 = v113 - 4;
                  v145 = vld2q_f64(v116);
                  v147 = vld2q_f64(v113);
                  v117 = v114 - 4;
                  vst2q_f64(v117, v145);
                  vst2q_f64(v114, v147);
                  v113 += 8;
                  v114 += 8;
                  v115 -= 4;
                }
                while (v115);
                if (v111 == (v111 & 0x1FFFFFFFFFFFFFFCLL))
                  goto LABEL_97;
                v64 += v112;
              }
            }
            else
            {
              v83 = (char *)v139;
            }
            do
            {
              *(_QWORD *)v83 = *(_QWORD *)v64;
              *((_QWORD *)v83 + 1) = *((_QWORD *)v64 + 1);
              v83 += 16;
              v64 += 16;
            }
            while (v64 != v65);
          }
LABEL_97:
          v75 = (char *)(v83 - v69);
          v73 = v69;
          goto LABEL_98;
        }
        if ((_QWORD)v139)
        {
          *((_QWORD *)&v139 + 1) = v139;
          operator delete((void *)v139);
          v68 = 0;
          v139 = 0uLL;
          v140[0] = 0;
        }
        if (v66 < 0)
          goto LABEL_161;
        v70 = v68 >> 3;
        if (v68 >> 3 <= v67)
          v70 = (v65 - v64) >> 4;
        v71 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v70;
        if (v71 >> 60)
          goto LABEL_161;
        v72 = (char *)operator new(16 * v71);
        v73 = v72;
        *(_QWORD *)&v139 = v72;
        *((_QWORD *)&v139 + 1) = v72;
        v140[0] = &v72[16 * v71];
        v74 = v72;
        if (v64 != v65)
        {
          memcpy(v72, v64, ((v66 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
          v74 = &v73[((v66 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
        }
        v75 = (char *)(v74 - v73);
        v45 = v125;
LABEL_98:
        *((_QWORD *)&v139 + 1) = &v75[(_QWORD)v73];
LABEL_99:
        v84 = *(_QWORD *)v24;
        *(_QWORD *)((char *)&v140[1] + 5) = *(_QWORD *)(v24 + 5);
        v140[1] = v84;
        v46 = v45;
LABEL_100:
        v85 = v142;
        if (v46 == v21)
        {
          v86 = v141;
          while (v85 != v86)
          {
            v87 = (void *)*((_QWORD *)v85 - 5);
            if (v87)
            {
              *((_QWORD *)v85 - 4) = v87;
              operator delete(v87);
            }
            v88 = (void *)*((_QWORD *)v85 - 8);
            if (v88)
            {
              *((_QWORD *)v85 - 7) = v88;
              operator delete(v88);
            }
            v85 -= 96;
          }
          v142 = v86;
          v129 = 1;
          v128 = v21;
        }
        else
        {
          v128 = v46;
          v89 = (void *)*((_QWORD *)v142 - 5);
          if (v89)
          {
            *((_QWORD *)v142 - 4) = v89;
            operator delete(v89);
          }
          v90 = (void *)*((_QWORD *)v85 - 8);
          if (v90)
          {
            *((_QWORD *)v85 - 7) = v90;
            operator delete(v90);
          }
          v142 = v85 - 96;
          v129 = 1;
        }
LABEL_18:
        v15 = v141;
        v11 = v142;
        if (v141 != v142)
          continue;
        if ((v129 & 1) == 0)
        {
          v6 = 0;
          v16 = (void *)v139;
          if (!(_QWORD)v139)
            goto LABEL_154;
          goto LABEL_153;
        }
        v118 = *v126;
        *(_QWORD *)v118 = a2;
        *(_QWORD *)(v118 + 8) = &v128[(_QWORD)a2];
        *(_BYTE *)(v118 + 16) = 1;
        if ((_QWORD)v138 != *(_QWORD *)&v137[32])
        {
          v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *(_QWORD *)&v137[32]) >> 3);
          v120 = (_BYTE *)(*(_QWORD *)&v137[32] + 16);
          v121 = 1;
          do
          {
            v122 = v118 + 24 * v121;
            *(_OWORD *)v122 = *((_OWORD *)v120 - 1);
            v123 = *v120;
            v120 += 24;
            *(_BYTE *)(v122 + 16) = v123;
            v22 = v119 > v121++;
          }
          while (v22);
        }
        v6 = 1;
        v16 = (void *)v139;
        if ((_QWORD)v139)
        {
LABEL_153:
          *((_QWORD *)&v139 + 1) = v16;
          operator delete(v16);
        }
LABEL_154:
        if (*(_QWORD *)&v137[32])
        {
          *(_QWORD *)&v138 = *(_QWORD *)&v137[32];
          operator delete(*(void **)&v137[32]);
        }
        if (v15)
          operator delete(v15);
        return v6;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_18;
      case 0xFFFFFC1F:
LABEL_31:
        v27 = v142;
        v28 = (void *)*((_QWORD *)v142 - 5);
        if (v28)
        {
          *((_QWORD *)v142 - 4) = v28;
          operator delete(v28);
        }
        v29 = (void *)*((_QWORD *)v27 - 8);
        if (v29)
        {
          *((_QWORD *)v27 - 7) = v29;
          operator delete(v29);
        }
        v142 = v27 - 96;
        goto LABEL_18;
      case 0xFFFFFC20:
        v30 = *((_OWORD *)v11 - 5);
        *(_OWORD *)v133 = *(_OWORD *)v25;
        *(_OWORD *)&v133[16] = v30;
        memset(&v133[32], 0, 24);
        v32 = (_BYTE *)*((_QWORD *)v11 - 8);
        v31 = (_BYTE *)*((_QWORD *)v11 - 7);
        v33 = v31 - v32;
        if (v31 != v32)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) > 0xAAAAAAAAAAAAAAALL)
            abort();
          v34 = (char *)operator new(v33);
          *(_QWORD *)&v133[32] = v34;
          *(_QWORD *)&v133[40] = v34;
          *(_QWORD *)&v133[48] = &v34[8 * (v33 >> 3)];
          v35 = 24 * ((v33 - 24) / 0x18uLL) + 24;
          memcpy(v34, v32, v35);
          *(_QWORD *)&v133[40] = &v34[v35];
        }
        __p[0] = 0;
        __p[1] = 0;
        v135[0] = 0;
        v37 = (_BYTE *)*((_QWORD *)v11 - 5);
        v36 = (_BYTE *)*((_QWORD *)v11 - 4);
        v38 = v36 - v37;
        if (v36 != v37)
        {
          if (v38 < 0)
            abort();
          v39 = (char *)operator new(v36 - v37);
          __p[0] = v39;
          __p[1] = v39;
          v135[0] = &v39[16 * (v38 >> 4)];
          v40 = v38 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v39, v37, v40);
          __p[1] = &v39[v40];
        }
        v41 = *(_QWORD *)v24;
        *(_QWORD *)((char *)&v135[1] + 5) = *(_QWORD *)(v24 + 5);
        v135[1] = v41;
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v25);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v135[1] + 24))(v135[1], 0, v133);
        v42 = v142;
        if ((unint64_t)v142 >= v143)
        {
          v142 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v141, (uint64_t)v133);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v43 = *(_OWORD *)&v133[16];
          *(_OWORD *)v142 = *(_OWORD *)v133;
          *((_OWORD *)v42 + 1) = v43;
          *((_QWORD *)v42 + 4) = 0;
          *((_QWORD *)v42 + 5) = 0;
          *((_QWORD *)v42 + 6) = 0;
          *((_QWORD *)v42 + 7) = 0;
          *((_OWORD *)v42 + 2) = *(_OWORD *)&v133[32];
          *((_QWORD *)v42 + 6) = *(_QWORD *)&v133[48];
          memset(&v133[32], 0, 24);
          *((_QWORD *)v42 + 8) = 0;
          *((_QWORD *)v42 + 9) = 0;
          *(_OWORD *)(v42 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v42 + 9) = v135[0];
          __p[0] = 0;
          __p[1] = 0;
          v135[0] = 0;
          v44 = v135[1];
          *(_QWORD *)(v42 + 85) = *(_QWORD *)((char *)&v135[1] + 5);
          *((_QWORD *)v42 + 10) = v44;
          v142 = v42 + 96;
        }
        if (*(_QWORD *)&v133[32])
        {
          *(_QWORD *)&v133[40] = *(_QWORD *)&v133[32];
          operator delete(*(void **)&v133[32]);
        }
        goto LABEL_18;
      default:
        goto LABEL_23;
    }
  }
}

void sub_19FDE5E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  std::__state<char>::~__state(&a37);
  std::vector<std::__state<char>>::~vector[abi:nn180100]((void **)(v37 - 120));
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

uint64_t std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>()
{
  std::__libcpp_verbose_abort("regex_error was thrown in -fno-exceptions mode");
  return std::__state<char>::~__state();
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void **std::vector<std::__state<char>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  _OWORD *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *v87;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_77:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v30 = (v5 - v9) >> 2;
      if (v5 == v9)
        v30 = 1;
      if (!(v30 >> 61))
      {
        v31 = v30 >> 2;
        v32 = 8 * v30;
        v33 = (char *)operator new(8 * v30);
        v34 = &v33[8 * v31];
        v35 = &v33[v32];
        v37 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            v71 = &v33[8 * v31];
            v39 = v71;
            if ((unint64_t)(v71 - v7) >= 0x20)
            {
              v72 = (v38 >> 3) + 1;
              v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v34[v73];
              v74 = (__int128 *)(v6 + 3);
              v75 = v71 + 16;
              v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v77 = *v74;
                *(v75 - 1) = *(v74 - 1);
                *v75 = v77;
                v74 += 2;
                v75 += 2;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_75;
              v7 += v73;
            }
          }
          else
          {
            v39 = &v33[8 * v31];
          }
          do
          {
            v78 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v39 = v78;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_75;
      }
LABEL_86:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_77;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v87 = operator new(0xFC0uLL);
      std::__split_buffer<geo::QuadTile *>::push_back((char **)a1, &v87);
      return;
    }
    v87 = operator new(0xFC0uLL);
    std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v87);
    v40 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v40 + 1);
    v8 = *v40;
    *(_QWORD *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_77;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v41 = (v5 - v9) >> 2;
      if (v5 == v9)
        v41 = 1;
      if (!(v41 >> 61))
      {
        v42 = v41 >> 2;
        v43 = 8 * v41;
        v33 = (char *)operator new(8 * v41);
        v34 = &v33[8 * v42];
        v35 = &v33[v43];
        v44 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            v79 = &v33[8 * v42];
            v46 = v79;
            if ((unint64_t)(v79 - v7) >= 0x20)
            {
              v80 = (v45 >> 3) + 1;
              v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v34[v81];
              v82 = (__int128 *)(v40 + 3);
              v83 = v79 + 16;
              v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v85 = *v82;
                *(v83 - 1) = *(v82 - 1);
                *v83 = v85;
                v82 += 2;
                v83 += 2;
                v84 -= 4;
              }
              while (v84);
              if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_75;
              v7 += v81;
            }
          }
          else
          {
            v46 = &v33[8 * v42];
          }
          do
          {
            v86 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v46 = v86;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_75:
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_77;
      }
      goto LABEL_86;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_86;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v47 = 1;
      else
        v47 = v20 >> 2;
      if (v47 >> 61)
        goto LABEL_86;
      v27 = (char *)operator new(8 * v47);
      v28 = &v27[8 * v47];
      operator delete(v25);
      v19 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
    }
    else
    {
      v29 = v21 + 2;
      if (v21 >= -1)
        v29 = v21 + 1;
      v27 -= 8 * (v29 >> 1);
    }
  }
  *(_QWORD *)v27 = v26;
  v48 = v27 + 8;
  if (v18 != v19)
  {
    while (v27 != v25)
    {
      v52 = v27;
      v50 = v48;
LABEL_47:
      v53 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v52 - 1) = v53;
      v49 = v52 - 8;
      v48 = v50;
      v27 = v49;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_44;
    }
    if (v48 < v28)
    {
      v54 = (v28 - v48) >> 3;
      if (v54 >= -1)
        v55 = v54 + 1;
      else
        v55 = v54 + 2;
      v50 = &v48[8 * (v55 >> 1)];
      v52 = &v27[8 * (v55 >> 1)];
      if (v48 == v27)
      {
        v25 = v48;
      }
      else
      {
        memmove(&v27[8 * (v55 >> 1)], v27, v48 - v27);
        v25 = v27;
      }
      goto LABEL_47;
    }
    if (v28 == v27)
      v56 = 1;
    else
      v56 = (v28 - v27) >> 2;
    if (v56 >> 61)
      goto LABEL_86;
    v57 = (char *)operator new(8 * v56);
    v25 = v57;
    v58 = (v56 + 3) >> 2;
    v52 = &v57[8 * v58];
    v50 = v52;
    v59 = v48 - v27;
    if (v48 != v27)
    {
      v50 = &v52[v59 & 0xFFFFFFFFFFFFFFF8];
      v60 = v59 - 8;
      v61 = &v57[8 * v58];
      v62 = v27;
      if (v60 >= 0x38)
      {
        v63 = 8 * v58;
        v61 = &v57[8 * v58];
        v62 = v27;
        if ((unint64_t)(v61 - v27) >= 0x20)
        {
          v64 = (v60 >> 3) + 1;
          v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = &v52[v65];
          v66 = (__int128 *)(v27 + 16);
          v67 = &v57[v63 + 16];
          v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *v66;
            *((_OWORD *)v67 - 1) = *(v66 - 1);
            *(_OWORD *)v67 = v69;
            v66 += 2;
            v67 += 32;
            v68 -= 4;
          }
          while (v68);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_67;
          v62 = &v27[v65];
        }
      }
      do
      {
        v70 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)v61 = v70;
        v61 += 8;
      }
      while (v61 != v50);
    }
LABEL_67:
    v28 = &v57[8 * v56];
    operator delete(v27);
    goto LABEL_47;
  }
  v49 = v27;
  v50 = v27 + 8;
LABEL_44:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v49;
  *(_QWORD *)(a1 + 16) = v50;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_19FDE67F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 + 7);
        if (v9)
        {
          *((_QWORD *)v7 + 8) = v9;
          operator delete(v9);
        }
        v10 = (void *)*((_QWORD *)v7 + 4);
        if (v10)
        {
          *((_QWORD *)v7 + 5) = v10;
          operator delete(v10);
        }
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v11 = (char *)v6[1];
          ++v6;
          v7 = v11;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 21;
    goto LABEL_19;
  }
  if (v13 == 2)
  {
    v14 = 42;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  _Unwind_Exception *v49;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E42DA670;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E42E8DE0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    switch(v13)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v20 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v20)
          v21 = v20;
        else
          v21 = (unsigned __int8 *)a3;
        if (v21 == (unsigned __int8 *)a2)
        {
          v22 = (_QWORD *)operator new();
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          v22[1] = v24;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, v21);
        }
        if (v21 != (unsigned __int8 *)a3)
          ++v21;
        if (v21 != (unsigned __int8 *)a3)
        {
          v37 = *(_QWORD *)(a1 + 56);
          do
          {
            v47 = (unsigned __int8 *)memchr(v21, 10, a3 - (char *)v21);
            if (v47)
              v48 = v47;
            else
              v48 = (unsigned __int8 *)a3;
            if (v48 == v21)
            {
              v38 = (_QWORD *)operator new();
              v39 = *(_QWORD *)(a1 + 56);
              v40 = *(_QWORD *)(v39 + 8);
              v38[1] = v40;
              *(_QWORD *)(v39 + 8) = v38;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v21, v48);
            }
            v41 = (_QWORD *)operator new();
            v42 = *(_QWORD *)(v37 + 8);
            v41[1] = v12[1];
            v41[2] = v42;
            *v41 = &off_1E42DA640;
            v12[1] = v41;
            *(_QWORD *)(v37 + 8) = 0;
            v43 = (_QWORD *)operator new();
            v44 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v43[1] = v44;
            *(_QWORD *)(v37 + 8) = v43;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v45 = (_QWORD *)operator new();
            v46 = *(_QWORD *)(v37 + 8);
            *v45 = &unk_1E42E8EF8;
            v45[1] = v46;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v45;
            v37 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(a1 + 56) = v37;
            if (v48 == (unsigned __int8 *)a3)
              v21 = v48;
            else
              v21 = v48 + 1;
          }
          while (v21 != (unsigned __int8 *)a3);
        }
        break;
      case 0x100u:
        v14 = (char *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v16 = (_QWORD *)operator new();
          v17 = *(_QWORD *)(a1 + 56);
          v18 = *(_QWORD *)(v17 + 8);
          v16[1] = v18;
          *(_QWORD *)(v17 + 8) = v16;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v15);
        }
        if (v15 != a3)
          ++v15;
        if (v15 != a3)
        {
          v25 = *(_QWORD *)(a1 + 56);
          do
          {
            v35 = (char *)memchr(v15, 10, a3 - v15);
            if (v35)
              v36 = v35;
            else
              v36 = a3;
            if (v36 == v15)
            {
              v26 = (_QWORD *)operator new();
              v27 = *(_QWORD *)(a1 + 56);
              v28 = *(_QWORD *)(v27 + 8);
              v26[1] = v28;
              *(_QWORD *)(v27 + 8) = v26;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v15, v36);
            }
            v29 = (_QWORD *)operator new();
            v30 = *(_QWORD *)(v25 + 8);
            v29[1] = v12[1];
            v29[2] = v30;
            *v29 = &off_1E42DA640;
            v12[1] = v29;
            *(_QWORD *)(v25 + 8) = 0;
            v31 = (_QWORD *)operator new();
            v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v31[1] = v32;
            *(_QWORD *)(v25 + 8) = v31;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v33 = (_QWORD *)operator new();
            v34 = *(_QWORD *)(v25 + 8);
            *v33 = &unk_1E42E8EF8;
            v33[1] = v34;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v33;
            v25 = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(a1 + 56) = v25;
            if (v36 == a3)
              v15 = v36;
            else
              v15 = v36 + 1;
          }
          while (v15 != a3);
        }
        break;
      default:
        goto LABEL_58;
    }
    return a3;
  }
  else if (v13)
  {
    if (v13 != 16)
    {
      if (v13 != 32)
      {
LABEL_58:
        v49 = (_Unwind_Exception *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        ((void (*)(std::__shared_weak_count *))v9->~__shared_weak_count_0)(v9);
        _Unwind_Resume(v49);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  char *v11;
  BOOL v12;
  std::__node<char> *v13;
  std::__owns_one_state<char> *v14;
  std::__node<char> *first;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__node<char> *v21;
  std::__owns_one_state<char> *v22;
  char *v23;
  char *v24;
  std::__owns_one_state<char> *v25;
  unsigned int v26;
  char *v27;
  BOOL v28;
  std::__node<char> *v29;
  std::__owns_one_state<char> *v30;
  std::__node<char> *v31;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == v7)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>((uint64_t)a1, v8, a3);
  if (v8 != v11)
  {
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v11, a3, v9, marked_count + 1, a1->__marked_count_ + 1, v12);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != a2)
  {
    if (v8 != a3)
      goto LABEL_14;
    return a3;
  }
  v13 = (std::__node<char> *)operator new();
  v14 = a1->__end_;
  first = v14->__first_;
  v13[1].__vftable = (std::__node<char>_vtbl *)first;
  v14->__first_ = v13;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != a3)
  {
LABEL_14:
    if (*v8 != 124)
      return v8;
    v22 = a1->__end_;
    v23 = v8 + 1;
    v24 = v8 + 1;
    while (1)
    {
      v8 = v24;
      v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v24, a3);
      if (v8 == v24)
      {
        v25 = a1->__end_;
        v26 = a1->__marked_count_;
        v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>((uint64_t)a1, v8, a3);
        if (v8 == v27)
        {
LABEL_11:
          if (v8 == v23)
          {
            v29 = (std::__node<char> *)operator new();
            v30 = a1->__end_;
            v31 = v30->__first_;
            v29[1].__vftable = (std::__node<char>_vtbl *)v31;
            v30->__first_ = v29;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v16 = (std::__node<char> *)operator new();
          v17 = v22->__first_;
          v16[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v16[2].__vftable = (std::__node<char>_vtbl *)v17;
          v16->__vftable = (std::__node<char>_vtbl *)&off_1E42DA640;
          end->__first_ = v16;
          v22->__first_ = 0;
          v18 = (std::__node<char> *)operator new();
          v19 = a1->__end_->__first_;
          v18[1].__vftable = (std::__node<char>_vtbl *)v19;
          v22->__first_ = v18;
          a1->__end_->__first_ = 0;
          v20 = (std::__node<char> *)operator new();
          v21 = v22->__first_;
          v20->__vftable = (std::__node<char>_vtbl *)&unk_1E42E8EF8;
          v20[1].__vftable = (std::__node<char>_vtbl *)v21;
          a1->__end_->__first_ = v20;
          a1->__end_ = (std::__owns_one_state<char> *)v22->__first_;
          if (v8 == a3)
            return a3;
          goto LABEL_14;
        }
        v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v27, a3, v25, v26 + 1, a1->__marked_count_ + 1, v28);
      }
      if (v24 == v8)
        goto LABEL_11;
    }
  }
  return a3;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E42DAAB0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    while (v3 != (unsigned __int8 *)v4)
    {
      v10 = (char *)v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v10, v4);
      if (v10 != (char *)v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v13, (unsigned __int8 *)v4, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v10 != (char *)v3)
          continue;
      }
      if (v10 + 1 == v4 && *v10 == 36)
      {
        v14 = operator new();
        v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)v14 = &off_1E42DAB10;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v15;
        *(_QWORD *)(v16 + 8) = v14;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return (uint64_t)v4;
      }
      v19 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(v19);
    }
  }
  return (uint64_t)v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  char *v10;
  char *v11;
  std::__node<char> *v12;
  std::__node<char> *first;
  std::__node<char> *v14;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
LABEL_12:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    JUMPOUT(0x19FDE7470);
  }
  if (v8 == a3)
    return a3;
  while (*v8 == 124)
  {
    v9 = a1->__end_;
    v10 = v8 + 1;
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v8 + 1, a3);
    if (v8 + 1 == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = (std::__node<char> *)operator new();
    first = v9->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v12[2].__vftable = (std::__node<char>_vtbl *)first;
    v12->__vftable = (std::__node<char>_vtbl *)&off_1E42DA640;
    end->__first_ = v12;
    v9->__first_ = 0;
    v14 = (std::__node<char> *)operator new();
    v15 = a1->__end_->__first_;
    v14[1].__vftable = (std::__node<char>_vtbl *)v15;
    v9->__first_ = v14;
    a1->__end_->__first_ = 0;
    v16 = (std::__node<char> *)operator new();
    v17 = v9->__first_;
    v16->__vftable = (std::__node<char>_vtbl *)&unk_1E42E8EF8;
    v16[1].__vftable = (std::__node<char>_vtbl *)v17;
    a1->__end_->__first_ = v16;
    a1->__end_ = (std::__owns_one_state<char> *)v9->__first_;
    if (v8 == a3)
      return a3;
  }
  return v8;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA870;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1A1AF4E00);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA870;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA870;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1AF4E00);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  std::basic_regex<char>::value_type *v8;
  int v9;
  std::basic_regex<char>::value_type v10;
  BOOL v11;
  char *v12;
  char *v13;
  _BOOL4 v14;
  uint64_t v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *first;
  int v19;
  uint64_t v20;
  BOOL v21;
  std::__owns_one_state<char> *v22;
  std::__node<char> *v23;
  uint64_t (**v24)();
  uint64_t v25;
  unsigned int v26;
  std::__owns_one_state<char> *v27;
  std::__node<char> *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  std::__owns_one_state<char> *v32;
  std::__node<char> *v33;
  uint64_t v35;
  char *v36;
  char *v37;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!this->__open_count_)
          goto LABEL_8;
LABEL_3:
        v8 = a2 + 1;
        if (a2 + 1 == a3)
        {
LABEL_15:
          v9 = *a2;
        }
        else
        {
          v9 = *a2;
          if (v9 == 92)
          {
            v10 = *v8;
            switch(*v8)
            {
              case '$':
              case '(':
              case ')':
              case '*':
              case '+':
              case '.':
              case '?':
              case '[':
              case '\\':
              case '^':
              case '{':
              case '|':
              case '}':
                std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v10);
                v12 = a2 + 2;
                return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(this, v12, a3, end, marked_count + 1, this->__marked_count_ + 1, v11);
              default:
                if ((this->__flags_ & 0x1F0) == 0x40)
                {
                  std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(this, v8, a3, 0);
                  v12 = v13;
                }
                else
                {
                  v14 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v10);
                  v15 = 2;
                  if (!v14)
                    v15 = 0;
                  v12 = &a2[v15];
                }
                if (v12 == a2)
                  goto LABEL_15;
                goto LABEL_19;
            }
          }
        }
        if (v9 != 46)
          goto LABEL_18;
        v16 = (std::__node<char> *)operator new();
        v17 = this->__end_;
        first = v17->__first_;
        v16->__vftable = (std::__node<char>_vtbl *)&off_1E42DA6D0;
        v16[1].__vftable = (std::__node<char>_vtbl *)first;
        v17->__first_ = v16;
        break;
      default:
LABEL_8:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
        v12 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(this, v12, a3, end, marked_count + 1, this->__marked_count_ + 1, v11);
    }
    goto LABEL_27;
  }
LABEL_18:
  v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
LABEL_19:
  if (v12 != a2 || v12 == a3)
    goto LABEL_36;
  v19 = *a2;
  if (v19 == 36)
  {
    v20 = operator new();
    v21 = (this->__flags_ & 0x5F0) == 1024;
    v22 = this->__end_;
    v23 = v22->__first_;
    v24 = &off_1E42DAB10;
    goto LABEL_26;
  }
  if (v19 != 40)
  {
    if (v19 == 94)
    {
      v20 = operator new();
      v21 = (this->__flags_ & 0x5F0) == 1024;
      v22 = this->__end_;
      v23 = v22->__first_;
      v24 = &off_1E42DAAB0;
LABEL_26:
      *(_QWORD *)v20 = v24;
      *(_QWORD *)(v20 + 8) = v23;
      *(_BYTE *)(v20 + 16) = v21;
      v22->__first_ = (std::__node<char> *)v20;
LABEL_27:
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      v12 = a2 + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(this, v12, a3, end, marked_count + 1, this->__marked_count_ + 1, v11);
    }
    return a2;
  }
  if ((this->__flags_ & 2) != 0)
  {
    v26 = this->__marked_count_;
  }
  else
  {
    v25 = operator new();
    v26 = this->__marked_count_ + 1;
    this->__marked_count_ = v26;
    v27 = this->__end_;
    v28 = v27->__first_;
    *(_QWORD *)v25 = &off_1E42E8F88;
    *(_QWORD *)(v25 + 8) = v28;
    *(_DWORD *)(v25 + 16) = v26;
    v27->__first_ = (std::__node<char> *)v25;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
  ++this->__open_count_;
  v29 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(this);
  if (v29 != a3)
  {
    v30 = v29;
    if (*v29 == 41)
    {
      if ((this->__flags_ & 2) == 0)
      {
        v31 = operator new();
        v32 = this->__end_;
        v33 = v32->__first_;
        *(_QWORD *)v31 = &off_1E42E8F58;
        *(_QWORD *)(v31 + 8) = v33;
        *(_DWORD *)(v31 + 16) = v26;
        v32->__first_ = (std::__node<char> *)v31;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      v12 = v30 + 1;
LABEL_36:
      if (v12 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(this, v12, a3, end, marked_count + 1, this->__marked_count_ + 1, v11);
      return a2;
    }
  }
  v35 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(v35, v36, v37);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t j;
  char *v16;
  unsigned __int8 *v17;
  unint64_t i;
  int v19;
  int v20;
  std::basic_regex<char>::value_type *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 v36;
  char v37;
  char *v38;
  void **v39;
  void **v40;
  std::regex_traits<char>::char_class_type classname;
  char v42;
  std::string::value_type *v43;
  unint64_t v44;
  __int128 v45;
  void *v46;
  void **v47;
  int v48;
  void **v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t result;
  char *v56;
  void *v57[2];
  int64_t v58;
  void *__p[2];
  uint64_t v60;
  std::string::value_type *__s[2];
  uint64_t v62;
  void *v63[2];
  int64_t v64;

  if (a2 == a3 || *a2 != 91)
    return (uint64_t)a2;
  if (a2 + 1 == a3)
    goto LABEL_163;
  v5 = a2[1];
  v6 = v5 == 94;
  v7 = v5 == 94 ? a2 + 2 : a2 + 1;
  v8 = operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = v8;
  if (v7 == a3)
    goto LABEL_163;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, 93);
    ++v7;
  }
  if (v7 == a3)
    goto LABEL_163;
  v56 = a3 - 4;
  do
  {
    v9 = v7;
    if (v7 == a3)
    {
      v7 = a3;
      continue;
    }
    v10 = *v7;
    v11 = v7;
    if (v10 == 93)
      goto LABEL_14;
    v12 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v60 = 0;
    v13 = 0;
    v11 = v7;
    if (v7 + 1 != a3 && v10 == 91)
    {
      v14 = v7[1];
      switch(v14)
      {
        case '.':
          v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v7 + 2, a3, (uint64_t)__p);
          v13 = (void *)HIBYTE(v60);
          v12 = __p[1];
          goto LABEL_38;
        case ':':
          v17 = (unsigned __int8 *)(v7 + 2);
          if (a3 - (v7 + 2) < 2)
            goto LABEL_167;
          for (i = 0; v7[i + 2] != 58 || v7[i + 3] != 93; ++i)
          {
            if (v56 - v7 == i)
              goto LABEL_167;
          }
          v23 = (unsigned __int8 *)&v7[i + 2];
          if (v23 == (unsigned __int8 *)a3)
            goto LABEL_167;
          if (i >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v24 = *(_DWORD *)(a1 + 24);
          if (i >= 0x17)
          {
            v30 = (i & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((i | 7) != 0x17)
              v30 = i | 7;
            v31 = v30 + 1;
            v25 = (char *)operator new(v30 + 1);
            v63[1] = (void *)i;
            v64 = v31 | 0x8000000000000000;
            v63[0] = v25;
            if (i < 0x20 || (unint64_t)(v25 - (char *)v17) < 0x20)
              goto LABEL_70;
            v32 = i & 0x7FFFFFFFFFFFFFE0;
            v26 = (void **)&v25[i & 0xFFFFFFFFFFFFFFE0];
            v33 = i & 0xFFFFFFFFFFFFFFE0;
            v34 = (__int128 *)(v9 + 18);
            v35 = v25 + 16;
            do
            {
              v36 = *v34;
              *(v35 - 1) = *(v34 - 1);
              *v35 = v36;
              v34 += 2;
              v35 += 2;
              v33 -= 32;
            }
            while (v33);
            if (i != v32)
            {
              v17 += v32;
              v25 += i & 0xFFFFFFFFFFFFFFE0;
              goto LABEL_70;
            }
          }
          else
          {
            HIBYTE(v64) = i;
            v25 = (char *)v63;
            v26 = v63;
            if (!i)
              goto LABEL_72;
LABEL_70:
            v26 = (void **)v25;
            do
            {
              v37 = *v17++;
              *(_BYTE *)v26 = v37;
              v26 = (void **)((char *)v26 + 1);
            }
            while (v17 != v23);
          }
LABEL_72:
          *(_BYTE *)v26 = 0;
          v38 = (char *)HIBYTE(v64);
          if (v64 >= 0)
            v39 = v63;
          else
            v39 = (void **)v63[0];
          if (v64 < 0)
            v38 = (char *)v63[1];
          (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v39, &v38[(_QWORD)v39]);
          if (v64 >= 0)
            v40 = v63;
          else
            v40 = (void **)v63[0];
          classname = std::__get_classname((const char *)v40, v24 & 1);
          if (SHIBYTE(v64) < 0)
            operator delete(v63[0]);
          if (!classname)
            goto LABEL_167;
          v42 = 0;
          *(_DWORD *)(v8 + 160) |= classname;
          v7 = (char *)(v23 + 2);
LABEL_137:
          v51 = v9;
          if ((SHIBYTE(v60) & 0x80000000) == 0)
            goto LABEL_124;
          goto LABEL_138;
        case '=':
          if (a3 - (v7 + 2) < 2)
            goto LABEL_167;
          for (j = 0; ; ++j)
          {
            v16 = &v7[j + 2];
            if (*v16 == 61 && v7[j + 3] == 93)
              break;
            if (v56 - v7 == j)
              goto LABEL_167;
          }
          if (v16 == a3)
            goto LABEL_167;
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)v63, a1, v7 + 2, &v7[j + 2]);
          if (SHIBYTE(v64) < 0)
          {
            v27 = (char *)v63[1];
            if (!v63[1])
              goto LABEL_167;
            v28 = (char *)v63[0];
          }
          else
          {
            v27 = (char *)HIBYTE(v64);
            if (!HIBYTE(v64))
              goto LABEL_167;
            v28 = (char *)v63;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)__s, a1, v28, &v27[(_QWORD)v28]);
          v43 = (std::string::value_type *)HIBYTE(v62);
          if (v62 < 0)
            v43 = __s[1];
          if (v43)
          {
            v44 = *(_QWORD *)(v8 + 144);
            if (v44 >= *(_QWORD *)(v8 + 152))
            {
              *(_QWORD *)(v8 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8 + 136, (uint64_t)__s);
              if (SHIBYTE(v62) < 0)
                goto LABEL_101;
            }
            else
            {
              if (SHIBYTE(v62) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v8 + 144), __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                v45 = *(_OWORD *)__s;
                *(_QWORD *)(v44 + 16) = v62;
                *(_OWORD *)v44 = v45;
              }
              *(_QWORD *)(v8 + 144) = v44 + 24;
              *(_QWORD *)(v8 + 144) = v44 + 24;
              if (SHIBYTE(v62) < 0)
                goto LABEL_101;
            }
          }
          else
          {
            v46 = (void *)HIBYTE(v64);
            if (v64 < 0)
              v46 = v63[1];
            if (v46 == (void *)2)
            {
              if (v64 >= 0)
                v53 = v63;
              else
                v53 = (void **)v63[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v8, *(char *)v53, *((char *)v53 + 1));
            }
            else
            {
              if (v46 != (void *)1)
                goto LABEL_167;
              if (v64 >= 0)
                v47 = v63;
              else
                v47 = (void **)v63[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, *(char *)v47);
            }
            if (SHIBYTE(v62) < 0)
            {
LABEL_101:
              operator delete(__s[0]);
              if ((SHIBYTE(v64) & 0x80000000) == 0)
              {
LABEL_136:
                v42 = 0;
                v7 = v16 + 2;
                goto LABEL_137;
              }
LABEL_102:
              operator delete(v63[0]);
              goto LABEL_136;
            }
          }
          if ((SHIBYTE(v64) & 0x80000000) == 0)
            goto LABEL_136;
          goto LABEL_102;
      }
      v12 = 0;
      v13 = 0;
      v11 = v7;
    }
LABEL_38:
    v19 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if ((char)v13 >= 0)
      v12 = v13;
    if (v12)
    {
      if (v11 == a3)
        goto LABEL_106;
      goto LABEL_105;
    }
    if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40)
    {
      LOBYTE(v20) = *v11;
LABEL_57:
      if ((char)v13 < 0)
      {
        v29 = (void **)__p[0];
        __p[1] = (void *)1;
      }
      else
      {
        HIBYTE(v60) = 1;
        v29 = __p;
      }
      *(_BYTE *)v29 = v20;
      *((_BYTE *)v29 + 1) = 0;
      if (++v11 != a3)
        goto LABEL_105;
LABEL_106:
      if (SHIBYTE(v60) < 0)
      {
        if (!__p[1])
        {
          operator delete(__p[0]);
LABEL_14:
          v7 = v11;
          continue;
        }
        if (__p[1] != (void *)1)
        {
          v49 = (void **)__p[0];
          goto LABEL_122;
        }
        v49 = (void **)__p[0];
      }
      else
      {
        if (!HIBYTE(v60))
          goto LABEL_14;
        v49 = __p;
        if (HIBYTE(v60) != 1)
        {
LABEL_122:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v8, *(char *)v49, *((char *)v49 + 1));
LABEL_123:
          v42 = 1;
          v51 = v11;
          if ((SHIBYTE(v60) & 0x80000000) == 0)
            goto LABEL_124;
          goto LABEL_138;
        }
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, *(char *)v49);
      goto LABEL_123;
    }
    v20 = *v11;
    if (v20 != 92)
      goto LABEL_57;
    v21 = v11 + 1;
    if (v19)
      std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v21, a3, (uint64_t *)__p);
    else
      std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v21, (std::basic_regex<char> *)a3, (uint64_t)__p, v8);
    v11 = v22;
    if (v22 == a3)
      goto LABEL_106;
LABEL_105:
    v48 = *v11;
    if (v48 == 93)
      goto LABEL_106;
    v50 = v11 + 1;
    if (v11 + 1 == a3 || v48 != 45 || *v50 == 93)
      goto LABEL_106;
    v63[0] = 0;
    v63[1] = 0;
    v64 = 0;
    v51 = v11 + 2;
    if (v11 + 2 != a3 && *v50 == 91 && *v51 == 46)
    {
      v52 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)v63);
    }
    else
    {
      if ((v19 | 0x40) != 0x40)
      {
        LOBYTE(v50) = *v50;
LABEL_141:
        HIBYTE(v64) = 1;
        LOBYTE(v63[0]) = (_BYTE)v50;
        goto LABEL_147;
      }
      LODWORD(v50) = *v50;
      if ((_DWORD)v50 != 92)
        goto LABEL_141;
      if (v19)
        std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, (uint64_t *)v63);
      else
        std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, (uint64_t)v63, v8);
    }
    v51 = (char *)v52;
LABEL_147:
    *(_OWORD *)__s = *(_OWORD *)__p;
    v54 = v60;
    __p[1] = 0;
    v60 = 0;
    *(_OWORD *)v57 = *(_OWORD *)v63;
    v58 = v64;
    __p[0] = 0;
    v63[1] = 0;
    v64 = 0;
    v62 = v54;
    v63[0] = 0;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:nn180100](v8, (char *)__s, (char *)v57);
    if (SHIBYTE(v58) < 0)
    {
      operator delete(v57[0]);
      if (SHIBYTE(v62) < 0)
      {
LABEL_153:
        operator delete(__s[0]);
        if ((SHIBYTE(v64) & 0x80000000) == 0)
          goto LABEL_150;
        goto LABEL_154;
      }
    }
    else if (SHIBYTE(v62) < 0)
    {
      goto LABEL_153;
    }
    if ((SHIBYTE(v64) & 0x80000000) == 0)
      goto LABEL_150;
LABEL_154:
    operator delete(v63[0]);
LABEL_150:
    v42 = 1;
    if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
LABEL_124:
      v11 = v51;
      if ((v42 & 1) != 0)
        goto LABEL_14;
      continue;
    }
LABEL_138:
    operator delete(__p[0]);
    v11 = v51;
    if ((v42 & 1) != 0)
      goto LABEL_14;
  }
  while (v9 != v7);
  if (v9 != a3)
  {
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v8, 45);
      ++v9;
    }
    if (v9 != a3 && *v9 == 93)
      return (uint64_t)(v9 + 1);
  }
LABEL_163:
  std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_167:
  result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  __break(1u);
  return result;
}

void sub_19FDE81C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
      goto LABEL_6;
  }
  else if (a22 < 0)
  {
LABEL_6:
    operator delete(a17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL a7)
{
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  unsigned __int32 v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  size_t v23;
  size_t v24;
  BOOL v25;
  BOOL v26;
  _QWORD *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;
  uint64_t v30;
  unsigned int v31;
  std::__node<char> *v32;
  _QWORD *v33;
  std::__owns_one_state<char> *v34;
  std::__node<char> *v35;
  unsigned int v36;
  _QWORD *v37;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  unsigned int loop_count;
  char *v41;
  int v42;
  _QWORD *v43;
  std::__owns_one_state<char> *v44;
  std::__node<char> *v45;
  uint64_t v46;
  unsigned int v47;
  std::__node<char> *v48;
  std::__node<char> *v49;
  int v50;
  char *v51;
  int v52;
  _QWORD *v53;
  std::__owns_one_state<char> *v54;
  std::__node<char> *v55;
  unsigned int v56;
  std::__node<char> *v57;
  _QWORD *v58;
  std::__owns_one_state<char> *v59;
  std::__node<char> *v60;
  unsigned int v61;
  std::__node<char> *v62;
  _Unwind_Exception *v64;

  v8 = a2;
  if (a2 == a3)
    return v8;
  v9 = __mexp_end;
  v10 = __mexp_begin;
  v13 = this->__flags_ & 0x1F0;
  v14 = *a2;
  if (v14 > 62)
  {
    if (v14 == 63)
    {
      v15 = a2 + 1;
      if (v13)
        v26 = 1;
      else
        v26 = v15 == a3;
      if (v26 || *v15 != 63)
      {
        v37 = (_QWORD *)operator new();
        end = this->__end_;
        first = end->__first_;
        v37[1] = first;
        end->__first_ = 0;
        v30 = operator new();
        loop_count = this->__loop_count_;
        *(_QWORD *)(v30 + 8) = __s->__first_;
        *(_QWORD *)(v30 + 16) = v37;
        *(_QWORD *)v30 = &off_1E42E8FB8;
        *(_OWORD *)(v30 + 24) = xmmword_19FFB2E40;
        *(_DWORD *)(v30 + 40) = loop_count;
        *(_DWORD *)(v30 + 44) = v10;
        *(_DWORD *)(v30 + 48) = v9;
        *(_BYTE *)(v30 + 52) = 1;
        __s->__first_ = 0;
        v32 = (std::__node<char> *)operator new();
        goto LABEL_45;
      }
      v8 = a2 + 2;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v23 = 0;
      v24 = 1;
LABEL_41:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, v23, v24, __s, __mexp_begin, __mexp_end, a7);
      return v8;
    }
    if (v14 != 123)
      return v8;
    v17 = (unsigned __int8 *)(a2 + 1);
    if (a2 + 1 != a3)
    {
      v18 = *v17;
      if ((v18 & 0xF8) == 0x30 || (v18 & 0xFE) == 0x38)
      {
        v19 = v18 - 48;
        v20 = (unsigned __int8 *)(a2 + 2);
        if (a2 + 2 == a3)
        {
LABEL_19:
          v20 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            v21 = *v20;
            if ((v21 & 0xF8) != 0x30 && (v21 & 0xFE) != 0x38)
              break;
            if (v19 >= 214748364)
              goto LABEL_73;
            v19 = v21 + 10 * v19 - 48;
            if (++v20 == (unsigned __int8 *)a3)
              goto LABEL_19;
          }
        }
        if (v20 != v17)
        {
          if (v20 == (unsigned __int8 *)a3)
            goto LABEL_74;
          v22 = (char)*v20;
          if (v22 == 44)
          {
            v41 = (char *)(v20 + 1);
            if (v20 + 1 != (unsigned __int8 *)a3)
            {
              v42 = *v41;
              if (v42 == 125)
              {
                v8 = (char *)(v20 + 2);
                if (!v13 && v8 != a3 && *v8 == 63)
                {
                  v8 = (char *)(v20 + 3);
                  v16 = v19;
                  goto LABEL_34;
                }
                v53 = (_QWORD *)operator new();
                v54 = this->__end_;
                v55 = v54->__first_;
                v53[1] = v55;
                v54->__first_ = 0;
                v46 = operator new();
                v56 = this->__loop_count_;
                v57 = __s->__first_;
                *(_QWORD *)v46 = &off_1E42E8FB8;
                *(_QWORD *)(v46 + 8) = v57;
                *(_QWORD *)(v46 + 16) = v53;
                *(_QWORD *)(v46 + 24) = v19;
                *(_QWORD *)(v46 + 32) = -1;
                *(_DWORD *)(v46 + 40) = v56;
                *(_DWORD *)(v46 + 44) = v10;
                *(_DWORD *)(v46 + 48) = v9;
                *(_BYTE *)(v46 + 52) = 1;
                __s->__first_ = 0;
                v49 = (std::__node<char> *)operator new();
                goto LABEL_71;
              }
              if ((v42 & 0xF8) != 0x30 && (v42 & 0xFE) != 0x38)
                goto LABEL_74;
              v50 = v42 - 48;
              v51 = (char *)(v20 + 2);
              if (v51 == a3)
              {
LABEL_60:
                v51 = a3;
              }
              else
              {
                while (1)
                {
                  v52 = *v51;
                  if ((v52 & 0xF8) != 0x30 && (v52 & 0xFE) != 0x38)
                    break;
                  if (v50 >= 214748364)
                    goto LABEL_73;
                  v50 = v52 + 10 * v50 - 48;
                  if (++v51 == a3)
                    goto LABEL_60;
                }
              }
              if (v51 == v41 || v51 == a3 || *v51 != 125)
              {
LABEL_74:
                v64 = (_Unwind_Exception *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
                (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
                _Unwind_Resume(v64);
              }
              if (v50 >= v19)
              {
                v8 = v51 + 1;
                if (!v13 && v8 != a3 && *v8 == 63)
                {
                  v23 = v19;
                  v24 = v50;
                  v8 = v51 + 2;
                  __mexp_begin = __mexp_begin;
                  __mexp_end = __mexp_end;
                  goto LABEL_41;
                }
                v58 = (_QWORD *)operator new();
                v59 = this->__end_;
                v60 = v59->__first_;
                v58[1] = v60;
                v59->__first_ = 0;
                v46 = operator new();
                v61 = this->__loop_count_;
                v62 = __s->__first_;
                *(_QWORD *)v46 = &off_1E42E8FB8;
                *(_QWORD *)(v46 + 8) = v62;
                *(_QWORD *)(v46 + 16) = v58;
                *(_QWORD *)(v46 + 24) = v19;
                *(_QWORD *)(v46 + 32) = v50;
                *(_DWORD *)(v46 + 40) = v61;
                *(_DWORD *)(v46 + 44) = v10;
                *(_DWORD *)(v46 + 48) = v9;
                *(_BYTE *)(v46 + 52) = 1;
                __s->__first_ = 0;
                v49 = (std::__node<char> *)operator new();
                goto LABEL_71;
              }
            }
          }
          else if (v22 == 125)
          {
            v8 = (char *)(v20 + 1);
            if (!v13 && v8 != a3 && *v8 == 63)
            {
              v23 = v19;
              v8 = (char *)(v20 + 2);
              __mexp_begin = __mexp_begin;
              __mexp_end = __mexp_end;
              v24 = v19;
              goto LABEL_41;
            }
            v43 = (_QWORD *)operator new();
            v44 = this->__end_;
            v45 = v44->__first_;
            v43[1] = v45;
            v44->__first_ = 0;
            v46 = operator new();
            v47 = this->__loop_count_;
            v48 = __s->__first_;
            *(_QWORD *)v46 = &off_1E42E8FB8;
            *(_QWORD *)(v46 + 8) = v48;
            *(_QWORD *)(v46 + 16) = v43;
            *(_QWORD *)(v46 + 24) = v19;
            *(_QWORD *)(v46 + 32) = v19;
            *(_DWORD *)(v46 + 40) = v47;
            *(_DWORD *)(v46 + 44) = v10;
            *(_DWORD *)(v46 + 48) = v9;
            *(_BYTE *)(v46 + 52) = 1;
            __s->__first_ = 0;
            v49 = (std::__node<char> *)operator new();
LABEL_71:
            v49->__vftable = (std::__node<char>_vtbl *)&off_1E42DA8A0;
            v49[1].__vftable = (std::__node<char>_vtbl *)v46;
            this->__end_->__first_ = v49;
            this->__end_ = *(std::__owns_one_state<char> **)(v46 + 16);
            __s->__first_ = (std::__node<char> *)v46;
            ++this->__loop_count_;
            return v8;
          }
        }
      }
    }
LABEL_73:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_74;
  }
  if (v14 == 42)
  {
    v15 = a2 + 1;
    if (v13)
      v25 = 1;
    else
      v25 = v15 == a3;
    if (!v25 && *v15 == 63)
    {
      v8 = a2 + 2;
      v16 = 0;
      goto LABEL_34;
    }
    v33 = (_QWORD *)operator new();
    v34 = this->__end_;
    v35 = v34->__first_;
    v33[1] = v35;
    v34->__first_ = 0;
    v30 = operator new();
    v36 = this->__loop_count_;
    *(_QWORD *)(v30 + 8) = __s->__first_;
    *(_QWORD *)(v30 + 16) = v33;
    *(_QWORD *)v30 = &off_1E42E8FB8;
    *(_OWORD *)(v30 + 24) = xmmword_19FFB5ED0;
    *(_DWORD *)(v30 + 40) = v36;
    *(_DWORD *)(v30 + 44) = v10;
    *(_DWORD *)(v30 + 48) = v9;
    *(_BYTE *)(v30 + 52) = 1;
    __s->__first_ = 0;
    v32 = (std::__node<char> *)operator new();
LABEL_45:
    v32->__vftable = (std::__node<char>_vtbl *)&off_1E42DA8A0;
    v32[1].__vftable = (std::__node<char>_vtbl *)v30;
    this->__end_->__first_ = v32;
    this->__end_ = *(std::__owns_one_state<char> **)(v30 + 16);
    __s->__first_ = (std::__node<char> *)v30;
    ++this->__loop_count_;
    return v15;
  }
  if (v14 == 43)
  {
    v15 = a2 + 1;
    if (!v13 && v15 != a3 && *v15 == 63)
    {
      v8 = a2 + 2;
      v16 = 1;
LABEL_34:
      std::basic_regex<char,std::regex_traits<char>>::__push_nongreedy_inf_repeat[abi:nn180100]((uint64_t)this, v16, (uint64_t)__s, __mexp_begin, __mexp_end);
      return v8;
    }
    v27 = (_QWORD *)operator new();
    v28 = this->__end_;
    v29 = v28->__first_;
    v27[1] = v29;
    v28->__first_ = 0;
    v30 = operator new();
    v31 = this->__loop_count_;
    *(_QWORD *)(v30 + 8) = __s->__first_;
    *(_QWORD *)(v30 + 16) = v27;
    *(_QWORD *)v30 = &off_1E42E8FB8;
    *(_OWORD *)(v30 + 24) = xmmword_19FFB5EC0;
    *(_DWORD *)(v30 + 40) = v31;
    *(_DWORD *)(v30 + 44) = v10;
    *(_DWORD *)(v30 + 48) = v9;
    *(_BYTE *)(v30 + 52) = 1;
    __s->__first_ = 0;
    v32 = (std::__node<char> *)operator new();
    goto LABEL_45;
  }
  return v8;
}

_QWORD *std::basic_regex<char,std::regex_traits<char>>::__push_nongreedy_inf_repeat[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &off_1E42E8FB8;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_1E42DA8A0;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_19FDE8B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA870;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_19FDE9070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:nn180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:nn180100](v11);
  v15 = *(void **)(v9 + 64);
  if (v15)
  {
    *(_QWORD *)(v9 + 72) = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v9 + 48) = v16;
    operator delete(v16);
  }
  std::locale::~locale(v10);
  v17 = *(_QWORD *)(v9 + 8);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *v53;
  char v54;
  char *v55;
  char v56;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v5 = *(_BYTE **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = *(_BYTE **)(a1 + 40);
      v13 = v5 - v6;
      v14 = v5 - v6 + 1;
      if (v14 >= 0)
      {
        v15 = v12 - (_QWORD)v6;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v11 = operator new(v16);
        else
          v11 = 0;
        v18 = (char *)v11 + v13;
        v19 = (char *)v11 + v16;
        *((_BYTE *)v11 + v13) = v2;
        v17 = (uint64_t)v11 + v13 + 1;
        if (v5 == v6)
          goto LABEL_49;
        if (v13 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
        {
          if (v13 >= 0x20)
          {
            v25 = v13 & 0xFFFFFFFFFFFFFFE0;
            v35 = (__int128 *)(v5 - 16);
            v36 = (char *)v11 + v5 - 16 - v6;
            v37 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v38 = *v35;
              *(v36 - 1) = *(v35 - 1);
              *v36 = v38;
              v36 -= 2;
              v35 -= 2;
              v37 -= 32;
            }
            while (v37);
            if (v13 == v25)
              goto LABEL_73;
            if ((v13 & 0x18) == 0)
            {
              v18 -= v25;
              v5 -= v25;
              goto LABEL_80;
            }
          }
          else
          {
            v25 = 0;
          }
          v39 = v25 - (v13 & 0xFFFFFFFFFFFFFFF8);
          v40 = &v5[-v25 - 8];
          v41 = (char *)(v40 - v6);
          do
          {
            v42 = *(_QWORD *)v40;
            v40 -= 8;
            *(_QWORD *)&v41[(_QWORD)v11] = v42;
            v41 -= 8;
            v39 += 8;
          }
          while (v39);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_73;
          v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
          v5 -= v13 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_80:
        v53 = v18 - 1;
        do
        {
          v54 = *--v5;
          *v53-- = v54;
        }
        while (v5 != v6);
        goto LABEL_86;
      }
LABEL_90:
      abort();
    }
    if ((unint64_t)v5 < v12)
      goto LABEL_22;
    v6 = *(_BYTE **)(a1 + 40);
    v21 = v5 - v6;
    v22 = v5 - v6 + 1;
    if (v22 < 0)
      goto LABEL_90;
    v23 = v12 - (_QWORD)v6;
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v11 = operator new(v24);
    else
      v11 = 0;
    v18 = (char *)v11 + v21;
    v19 = (char *)v11 + v24;
    *((_BYTE *)v11 + v21) = v2;
    v17 = (uint64_t)v11 + v21 + 1;
    if (v5 == v6)
      goto LABEL_49;
    if (v21 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
    {
      if (v21 >= 0x20)
      {
        v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        v43 = (__int128 *)(v5 - 16);
        v44 = (char *)v11 + v5 - 16 - v6;
        v45 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *v44 = v46;
          v44 -= 2;
          v43 -= 2;
          v45 -= 32;
        }
        while (v45);
        if (v21 == v26)
          goto LABEL_73;
        if ((v21 & 0x18) == 0)
        {
          v18 -= v26;
          v5 -= v26;
          goto LABEL_84;
        }
      }
      else
      {
        v26 = 0;
      }
      v47 = v26 - (v21 & 0xFFFFFFFFFFFFFFF8);
      v48 = &v5[-v26 - 8];
      v49 = (char *)(v48 - v6);
      do
      {
        v50 = *(_QWORD *)v48;
        v48 -= 8;
        *(_QWORD *)&v49[(_QWORD)v11] = v50;
        v49 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_73;
      v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v21 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_84:
    v55 = v18 - 1;
    do
    {
      v56 = *--v5;
      *v55-- = v56;
    }
    while (v5 != v6);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *v5 = v2;
    v17 = (uint64_t)(v5 + 1);
    goto LABEL_89;
  }
  v6 = *(_BYTE **)(a1 + 40);
  v7 = v5 - v6;
  v8 = v5 - v6 + 1;
  if (v8 < 0)
    goto LABEL_90;
  v9 = v4 - (_QWORD)v6;
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
    v11 = operator new(v10);
  else
    v11 = 0;
  v18 = (char *)v11 + v7;
  v19 = (char *)v11 + v10;
  *((_BYTE *)v11 + v7) = v2;
  v17 = (uint64_t)v11 + v7 + 1;
  if (v5 == v6)
  {
LABEL_49:
    v11 = v18;
    goto LABEL_87;
  }
  if (v7 < 8 || (unint64_t)(v6 - (_BYTE *)v11) < 0x20)
    goto LABEL_75;
  if (v7 < 0x20)
  {
    v20 = 0;
    goto LABEL_54;
  }
  v20 = v7 & 0xFFFFFFFFFFFFFFE0;
  v27 = (__int128 *)(v5 - 16);
  v28 = (char *)v11 + v5 - 16 - v6;
  v29 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v30 = *v27;
    *(v28 - 1) = *(v27 - 1);
    *v28 = v30;
    v28 -= 2;
    v27 -= 2;
    v29 -= 32;
  }
  while (v29);
  if (v7 == v20)
    goto LABEL_73;
  if ((v7 & 0x18) != 0)
  {
LABEL_54:
    v31 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = &v5[-v20 - 8];
    v33 = (char *)(v32 - v6);
    do
    {
      v34 = *(_QWORD *)v32;
      v32 -= 8;
      *(_QWORD *)&v33[(_QWORD)v11] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v18 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_75;
    }
LABEL_73:
    v5 = v6;
    goto LABEL_87;
  }
  v18 -= v20;
  v5 -= v20;
LABEL_75:
  v51 = v18 - 1;
  do
  {
    v52 = *--v5;
    *v51-- = v52;
  }
  while (v5 != v6);
LABEL_86:
  v5 = *(_BYTE **)(a1 + 40);
LABEL_87:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v19;
  if (v5)
    operator delete(v5);
LABEL_89:
  *(_QWORD *)(a1 + 48) = v17;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  std::basic_regex<char> *v13;
  __int128 v14;
  unint64_t v15;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
  {
LABEL_15:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  }
  else
  {
    std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v14, a1, a2, v6);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v14;
    v9 = v15;
    *(_QWORD *)(a4 + 16) = v15;
    v10 = HIBYTE(v9);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a4 + 8);
    if (v10 - 1 < 2)
      return (uint64_t)(v6 + 2);
  }
  v12 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(v12, v13);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;

  if (this == a3)
  {
    v7 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(v7);
  }
  else
  {
    switch(LOBYTE(this->__traits_.__loc_.__locale_))
    {
      case 'D':
        v5 = *(_DWORD *)(a5 + 164) | 0x400;
        goto LABEL_9;
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'c':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_7;
      case 'S':
        v5 = *(_DWORD *)(a5 + 164) | 0x4000;
LABEL_9:
        *(_DWORD *)(a5 + 164) = v5;
        return;
      case 'W':
        *(_DWORD *)(a5 + 164) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:nn180100](a5);
        return;
      case 'b':
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return;
      case 'd':
        v6 = *(_DWORD *)(a5 + 160) | 0x400;
        goto LABEL_15;
      case 's':
        v6 = *(_DWORD *)(a5 + 160) | 0x4000;
LABEL_15:
        *(_DWORD *)(a5 + 160) = v6;
        break;
      case 'w':
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](a5, 95);
        break;
      default:
        if (LOBYTE(this->__traits_.__loc_.__locale_))
        {
LABEL_7:
          std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, (uint64_t *)a4);
        }
        else
        {
          if (*(char *)(a4 + 23) < 0)
          {
            *(_QWORD *)(a4 + 8) = 1;
            a4 = *(_QWORD *)a4;
          }
          else
          {
            *(_BYTE *)(a4 + 23) = 1;
          }
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 1) = 0;
        }
        break;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  int v9;
  std::basic_regex<char>::value_type v10;
  __int16 v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a2 == a3)
  {
LABEL_68:
    v12 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:nn180100](v12, v13, v14);
    return;
  }
  v4 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (!a4)
      {
        v5 = *a2;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v4;
      *((_BYTE *)a4 + 1) = 0;
      return;
    case 'a':
      if (!a4)
      {
        v5 = 7;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v11 = 7;
      goto LABEL_63;
    case 'b':
      if (!a4)
      {
        v5 = 8;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v11 = 8;
      goto LABEL_63;
    case 'f':
      if (!a4)
      {
        v5 = 12;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v11 = 12;
      goto LABEL_63;
    case 'n':
      if (!a4)
      {
        v5 = 10;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v11 = 10;
      goto LABEL_63;
    case 'r':
      if (!a4)
      {
        v5 = 13;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v11 = 13;
      goto LABEL_63;
    case 't':
      if (!a4)
      {
        v5 = 9;
        goto LABEL_48;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v11 = 9;
      goto LABEL_63;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v11 = 11;
LABEL_63:
        *(_WORD *)a4 = v11;
      }
      else
      {
        v5 = 11;
LABEL_48:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      }
      return;
    default:
      if ((v4 & 0xF8) != 0x30)
        goto LABEL_68;
      v6 = *a2 - 48;
      if (a2 + 1 == a3 || (v7 = a2[1], (v7 & 0xF8) != 0x30))
      {
        if (!a4)
          goto LABEL_14;
      }
      else
      {
        v6 = v7 + 8 * v6 - 48;
        if (a2 + 2 != a3)
        {
          v8 = a2[2];
          v9 = v8 & 0xF8;
          v10 = v8 + 8 * v6 - 48;
          if (v9 == 48)
            v6 = v10;
          if (!a4)
            goto LABEL_14;
          goto LABEL_39;
        }
        if (!a4)
        {
LABEL_14:
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
          return;
        }
      }
LABEL_39:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v6;
      *((_BYTE *)a4 + 1) = 0;
      return;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:nn180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  char *v7;
  char v8;
  char *v9;
  unint64_t j;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  int v27;
  void *v28;
  char *v29;
  char v30;
  _BYTE *v31;
  char *v32;
  char v33;
  _BYTE *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  int v39;
  void *v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *__p[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;

  v3 = a3;
  v4 = a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v14 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_72;
    }
    else if (v14 != 1)
    {
      goto LABEL_72;
    }
    if (a3[23] < 0)
    {
      if (*((_QWORD *)a3 + 1) == 1)
        goto LABEL_53;
    }
    else if (a3[23] == 1)
    {
LABEL_53:
      if (*(_BYTE *)(a1 + 169))
      {
        v29 = a2;
        if ((v14 & 0x80) != 0)
          v29 = *(char **)a2;
        v30 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v29);
        v31 = v4;
        if (v4[23] < 0)
          v31 = *(_BYTE **)v4;
        *v31 = v30;
        v32 = v3;
        if (v3[23] < 0)
          v32 = *(char **)v3;
        v33 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v32);
        v34 = v3;
        if (v3[23] < 0)
          v34 = *(_BYTE **)v3;
        *v34 = v33;
      }
      *(_OWORD *)__p = *(_OWORD *)v4;
      v45 = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v46 = *(_OWORD *)v3;
      v47 = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v35 = *(_QWORD *)(a1 + 96);
      if (v35 >= *(_QWORD *)(a1 + 104))
      {
        v38 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
        v39 = SHIBYTE(v47);
        *(_QWORD *)(a1 + 96) = v38;
        if (v39 < 0)
        {
          operator delete(v46[0]);
          if ((SHIBYTE(v45) & 0x80000000) == 0)
            return;
        }
        else if ((SHIBYTE(v45) & 0x80000000) == 0)
        {
          return;
        }
      }
      else
      {
        v36 = *(_OWORD *)__p;
        *(_QWORD *)(v35 + 16) = v45;
        *(_OWORD *)v35 = v36;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        v37 = v47;
        *(_OWORD *)(v35 + 24) = *(_OWORD *)v46;
        *(_QWORD *)(v35 + 40) = v37;
        *(_QWORD *)(a1 + 96) = v35 + 48;
        if ((SHIBYTE(v45) & 0x80000000) == 0)
          return;
      }
      v28 = __p[0];
LABEL_69:
      operator delete(v28);
      return;
    }
LABEL_72:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_73;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      if (v4[23] < 0)
      {
        if (i >= *((_QWORD *)v4 + 1))
        {
LABEL_12:
          for (j = 0; ; ++j)
          {
            if (v3[23] < 0)
            {
              if (j >= *((_QWORD *)v3 + 1))
                goto LABEL_34;
              v11 = *(char **)v3;
            }
            else
            {
              v11 = v3;
              if (j >= v3[23])
                goto LABEL_34;
            }
            v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v11[j]);
            v13 = v3;
            if (v3[23] < 0)
              v13 = *(char **)v3;
            v13[j] = v12;
          }
        }
        v7 = *(char **)v4;
      }
      else
      {
        v7 = v4;
        if (i >= v4[23])
          goto LABEL_12;
      }
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7[i]);
      v9 = v4;
      if (v4[23] < 0)
        v9 = *(char **)v4;
      v9[i] = v8;
    }
  }
  v15 = 0;
  v16 = a2[23];
  while ((v16 & 0x80) != 0)
  {
    if (v15 >= *((_QWORD *)a2 + 1))
      goto LABEL_29;
LABEL_26:
    ++v15;
  }
  if (v15 < v16)
    goto LABEL_26;
LABEL_29:
  v17 = 0;
  v18 = a3[23];
  while ((v18 & 0x80) != 0)
  {
    if (v17 >= *((_QWORD *)a3 + 1))
      goto LABEL_34;
LABEL_31:
    ++v17;
  }
  if (v17 < v18)
    goto LABEL_31;
LABEL_34:
  if (v4[23] < 0)
  {
    v20 = v4;
    v4 = *(char **)v4;
    v19 = *((_QWORD *)v20 + 1);
  }
  else
  {
    v19 = v4[23];
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v42, a1 + 16, v4, &v4[v19]);
  if (v3[23] < 0)
  {
    v22 = v3;
    v3 = *(char **)v3;
    v21 = *((_QWORD *)v22 + 1);
  }
  else
  {
    v21 = v3[23];
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v40, a1 + 16, v3, &v3[v21]);
  *(_OWORD *)__p = v42;
  v45 = v43;
  v43 = 0;
  *(_OWORD *)v46 = *(_OWORD *)v40;
  v47 = v41;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v42 = 0uLL;
  v23 = *(_QWORD *)(a1 + 96);
  if (v23 >= *(_QWORD *)(a1 + 104))
  {
    v26 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v27 = SHIBYTE(v47);
    *(_QWORD *)(a1 + 96) = v26;
    if ((v27 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v45) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_42;
    }
LABEL_73:
    operator delete(v46[0]);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_42:
    operator delete(__p[0]);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_43;
  }
  v24 = *(_OWORD *)__p;
  *(_QWORD *)(v23 + 16) = v45;
  *(_OWORD *)v23 = v24;
  __p[1] = 0;
  v45 = 0;
  __p[0] = 0;
  v25 = v47;
  *(_OWORD *)(v23 + 24) = *(_OWORD *)v46;
  *(_QWORD *)(v23 + 40) = v25;
  *(_QWORD *)(a1 + 96) = v23 + 48;
  if (SHIBYTE(v45) < 0)
    goto LABEL_42;
LABEL_47:
  if (SHIBYTE(v41) < 0)
  {
LABEL_43:
    operator delete(v40[0]);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      return;
LABEL_49:
    v28 = (void *)v42;
    goto LABEL_69;
  }
LABEL_48:
  if (SHIBYTE(v43) < 0)
    goto LABEL_49;
}

void sub_19FDE9DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FDE9E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  _WORD *v9;
  __int16 v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _WORD *v27;
  char *v28;
  _WORD *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  unint64_t v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _WORD *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __int16 v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  unint64_t v56;
  __int128 v57;
  __int16 v58;

  if (!*(_BYTE *)(a1 + 169))
  {
    v10 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v12 = *(char **)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v12 >= v11)
      {
        v13 = *(char **)(a1 + 112);
        v14 = v12 - v13;
        if (v12 - v13 <= -3)
          goto LABEL_73;
        v15 = v14 >> 1;
        v16 = v11 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 < 0)
            goto LABEL_74;
          v19 = operator new(2 * v18);
        }
        else
        {
          v19 = 0;
        }
        v43 = &v19[2 * v15];
        v44 = &v19[2 * v18];
        *v43 = v10;
        v9 = v43 + 1;
        if (v12 != v13)
        {
          v45 = v12 - v13 - 2;
          if (v45 < 0x1E)
            goto LABEL_77;
          if (v12 - v19 - (v14 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_77;
          v46 = (v45 >> 1) + 1;
          v47 = &v19[2 * v15 - 16];
          v48 = v12 - 16;
          v49 = v46 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 16;
          }
          while (v49);
          v43 -= v46 & 0xFFFFFFFFFFFFFFF0;
          v12 -= 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_77:
            do
            {
              v51 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *--v43 = v51;
            }
            while (v12 != v13);
LABEL_68:
            v13 = *(char **)(a1 + 112);
            goto LABEL_70;
          }
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    else if ((unint64_t)v12 >= v11)
    {
      v13 = *(char **)(a1 + 112);
      v37 = v12 - v13;
      if (v12 - v13 <= -3)
        goto LABEL_73;
      v38 = v37 >> 1;
      v39 = v11 - (_QWORD)v13;
      if (v39 <= (v37 >> 1) + 1)
        v40 = v38 + 1;
      else
        v40 = v39;
      if (v39 >= 0x7FFFFFFFFFFFFFFELL)
        v41 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_74;
        v42 = operator new(2 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[2 * v38];
      v44 = &v42[2 * v41];
      *v43 = v10;
      v9 = v43 + 1;
      if (v12 != v13)
      {
        v52 = v12 - v13 - 2;
        if (v52 < 0x1E)
          goto LABEL_78;
        if (v12 - v42 - (v37 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_78;
        v53 = (v52 >> 1) + 1;
        v54 = &v42[2 * v38 - 16];
        v55 = v12 - 16;
        v56 = v53 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 16;
        }
        while (v56);
        v43 -= v53 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v53 & 0xFFFFFFFFFFFFFFF0);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_78:
          do
          {
            v58 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--v43 = v58;
          }
          while (v12 != v13);
          goto LABEL_68;
        }
LABEL_70:
        *(_QWORD *)(a1 + 112) = v43;
        *(_QWORD *)(a1 + 120) = v9;
        *(_QWORD *)(a1 + 128) = v44;
        if (v13)
          operator delete(v13);
        goto LABEL_72;
      }
LABEL_69:
      v13 = v12;
      goto LABEL_70;
    }
    *(_WORD *)v12 = v10;
    v9 = v12 + 2;
    goto LABEL_72;
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(char **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
    *(_WORD *)v8 = v6;
    v9 = v8 + 2;
LABEL_72:
    *(_QWORD *)(a1 + 120) = v9;
    return;
  }
  v20 = *(char **)(a1 + 112);
  v21 = v8 - v20;
  if (v8 - v20 <= -3)
LABEL_73:
    abort();
  v22 = v21 >> 1;
  v23 = v7 - (_QWORD)v20;
  if (v23 <= (v21 >> 1) + 1)
    v24 = v22 + 1;
  else
    v24 = v23;
  if (v23 >= 0x7FFFFFFFFFFFFFFELL)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (!v25)
  {
    v26 = 0;
    goto LABEL_29;
  }
  if (v25 < 0)
LABEL_74:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v26 = operator new(2 * v25);
LABEL_29:
  v27 = &v26[2 * v22];
  v28 = &v26[2 * v25];
  *v27 = v6;
  v29 = v27 + 1;
  if (v8 == v20)
  {
    v20 = v8;
  }
  else
  {
    v30 = v8 - v20 - 2;
    if (v30 < 0x1E)
      goto LABEL_79;
    if (v8 - v26 - (v21 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_79;
    v31 = (v30 >> 1) + 1;
    v32 = &v26[2 * v22 - 16];
    v33 = v8 - 16;
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 16;
    }
    while (v34);
    v27 -= v31 & 0xFFFFFFFFFFFFFFF0;
    v8 -= 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        v36 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v27 = v36;
      }
      while (v8 != v20);
      v20 = *(char **)(a1 + 112);
    }
  }
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v28;
  if (v20)
    operator delete(v20);
  *(_QWORD *)(a1 + 120) = v29;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  _BYTE *p_p;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  char *v19;
  void *__p;
  unint64_t v21;
  int64_t v22;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v22) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4)
      goto LABEL_18;
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      v12 = p_p;
    }
    else
    {
      v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      v12 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      v13 = (__int128 *)(v6 + 16);
      v14 = p_p + 16;
      v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v11)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v11;
    }
    p_p = v12;
    do
    {
      v17 = *v6++;
      *p_p++ = v17;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v9 = v4 | 7;
  v10 = v9 + 1;
  p_p = operator new(v9 + 1);
  v21 = v4;
  v22 = v10 | 0x8000000000000000;
  __p = p_p;
  if (v6 != a4)
    goto LABEL_8;
LABEL_18:
  *p_p = 0;
  v18 = HIBYTE(v22);
  if (v22 >= 0)
    v19 = (char *)&__p;
  else
    v19 = (char *)__p;
  if (v22 < 0)
    v18 = v21;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

void sub_19FDEA35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DAAE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DAAE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA928;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA928;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:nn180100](uint64_t a1)
{
  char v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  char *v59;
  char v60;
  char *v61;
  char v62;

  if (!*(_BYTE *)(a1 + 169))
  {
    v7 = *(_BYTE **)(a1 + 72);
    v6 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v7 >= v6)
      {
        v8 = *(_BYTE **)(a1 + 64);
        v9 = v7 - v8;
        v10 = v7 - v8 + 1;
        if (v10 < 0)
          goto LABEL_96;
        v11 = v6 - (_QWORD)v8;
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
          v12 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
          v13 = operator new(v12);
        else
          v13 = 0;
        v29 = (char *)v13 + v9;
        v30 = (char *)v13 + v12;
        *((_BYTE *)v13 + v9) = 95;
        v20 = (uint64_t)v13 + v9 + 1;
        if (v7 != v8)
        {
          if (v9 < 8 || (unint64_t)(v8 - (_BYTE *)v13) < 0x20)
            goto LABEL_86;
          if (v9 >= 0x20)
          {
            v31 = v9 & 0xFFFFFFFFFFFFFFE0;
            v41 = (__int128 *)(v7 - 16);
            v42 = (char *)v13 + v7 - 16 - v8;
            v43 = v9 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v44 = *v41;
              *(v42 - 1) = *(v41 - 1);
              *v42 = v44;
              v42 -= 2;
              v41 -= 2;
              v43 -= 32;
            }
            while (v43);
            if (v9 == v31)
              goto LABEL_76;
            if ((v9 & 0x18) == 0)
            {
              v29 -= v31;
              v7 -= v31;
LABEL_86:
              v59 = v29 - 1;
              do
              {
                v60 = *--v7;
                *v59-- = v60;
              }
              while (v7 != v8);
LABEL_92:
              v7 = *(_BYTE **)(a1 + 64);
LABEL_93:
              *(_QWORD *)(a1 + 64) = v13;
              *(_QWORD *)(a1 + 72) = v20;
              *(_QWORD *)(a1 + 80) = v30;
              if (v7)
                operator delete(v7);
              goto LABEL_95;
            }
          }
          else
          {
            v31 = 0;
          }
          v45 = v31 - (v9 & 0xFFFFFFFFFFFFFFF8);
          v46 = &v7[-v31 - 8];
          v47 = (char *)(v46 - v8);
          do
          {
            v48 = *(_QWORD *)v46;
            v46 -= 8;
            *(_QWORD *)&v47[(_QWORD)v13] = v48;
            v47 -= 8;
            v45 += 8;
          }
          while (v45);
          if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8))
          {
            v29 -= v9 & 0xFFFFFFFFFFFFFFF8;
            v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_86;
          }
LABEL_76:
          v7 = v8;
          goto LABEL_93;
        }
LABEL_51:
        v13 = v29;
        goto LABEL_93;
      }
LABEL_23:
      *v7 = 95;
      v20 = (uint64_t)(v7 + 1);
LABEL_95:
      *(_QWORD *)(a1 + 72) = v20;
      return;
    }
    if ((unint64_t)v7 < v6)
      goto LABEL_23;
    v8 = *(_BYTE **)(a1 + 64);
    v25 = v7 - v8;
    v26 = v7 - v8 + 1;
    if (v26 < 0)
      goto LABEL_96;
    v27 = v6 - (_QWORD)v8;
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
      v13 = operator new(v28);
    else
      v13 = 0;
    v29 = (char *)v13 + v25;
    v30 = (char *)v13 + v28;
    *((_BYTE *)v13 + v25) = 95;
    v20 = (uint64_t)v13 + v25 + 1;
    if (v7 == v8)
      goto LABEL_51;
    if (v25 >= 8 && (unint64_t)(v8 - (_BYTE *)v13) >= 0x20)
    {
      if (v25 >= 0x20)
      {
        v32 = v25 & 0xFFFFFFFFFFFFFFE0;
        v49 = (__int128 *)(v7 - 16);
        v50 = (char *)v13 + v7 - 16 - v8;
        v51 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v52 = *v49;
          *(v50 - 1) = *(v49 - 1);
          *v50 = v52;
          v50 -= 2;
          v49 -= 2;
          v51 -= 32;
        }
        while (v51);
        if (v25 == v32)
          goto LABEL_76;
        if ((v25 & 0x18) == 0)
        {
          v29 -= v32;
          v7 -= v32;
          goto LABEL_90;
        }
      }
      else
      {
        v32 = 0;
      }
      v53 = v32 - (v25 & 0xFFFFFFFFFFFFFFF8);
      v54 = &v7[-v32 - 8];
      v55 = (char *)(v54 - v8);
      do
      {
        v56 = *(_QWORD *)v54;
        v54 -= 8;
        *(_QWORD *)&v55[(_QWORD)v13] = v56;
        v55 -= 8;
        v53 += 8;
      }
      while (v53);
      if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_76;
      v29 -= v25 & 0xFFFFFFFFFFFFFFF8;
      v7 -= v25 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_90:
    v61 = v29 - 1;
    do
    {
      v62 = *--v7;
      *v61-- = v62;
    }
    while (v7 != v8);
    goto LABEL_92;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), 95);
  v3 = v2;
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
    *v5 = v2;
    *(_QWORD *)(a1 + 72) = v5 + 1;
    return;
  }
  v14 = *(_BYTE **)(a1 + 64);
  v15 = v5 - v14;
  v16 = v5 - v14 + 1;
  if (v16 < 0)
LABEL_96:
    abort();
  v17 = v4 - (_QWORD)v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v19 = operator new(v18);
  else
    v19 = 0;
  v21 = (char *)v19 + v15;
  v22 = (char *)v19 + v18;
  *((_BYTE *)v19 + v15) = v3;
  v23 = (uint64_t)v19 + v15 + 1;
  if (v5 == v14)
  {
    v19 = (char *)v19 + v15;
    goto LABEL_81;
  }
  if (v15 >= 8 && (unint64_t)(v14 - (_BYTE *)v19) >= 0x20)
  {
    if (v15 < 0x20)
    {
      v24 = 0;
      goto LABEL_56;
    }
    v24 = v15 & 0xFFFFFFFFFFFFFFE0;
    v33 = (__int128 *)(v5 - 16);
    v34 = (char *)v19 + v5 - 16 - v14;
    v35 = v15 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v34 -= 2;
      v33 -= 2;
      v35 -= 32;
    }
    while (v35);
    if (v15 == v24)
      goto LABEL_59;
    if ((v15 & 0x18) != 0)
    {
LABEL_56:
      v37 = v24 - (v15 & 0xFFFFFFFFFFFFFFF8);
      v38 = &v5[-v24 - 8];
      v39 = (char *)(v38 - v14);
      do
      {
        v40 = *(_QWORD *)v38;
        v38 -= 8;
        *(_QWORD *)&v39[(_QWORD)v19] = v40;
        v39 -= 8;
        v37 += 8;
      }
      while (v37);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_59:
        v5 = v14;
        goto LABEL_81;
      }
      v21 -= v15 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v15 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_78;
    }
    v21 -= v24;
    v5 -= v24;
  }
LABEL_78:
  v57 = v21 - 1;
  do
  {
    v58 = *--v5;
    *v57-- = v58;
  }
  while (v5 != v14);
  v5 = *(_BYTE **)(a1 + 64);
LABEL_81:
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v22;
  if (v5)
    operator delete(v5);
  *(_QWORD *)(a1 + 72) = v23;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, uint64_t *a4)
{
  std::basic_regex<char> *v4;
  uint64_t locale_low;
  std::basic_regex<char>::value_type v6;
  unsigned int v7;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  std::basic_regex<char>::value_type v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v4 = this;
  if (this != a3)
  {
    locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
    v6 = locale_low;
    switch((char)locale_low)
    {
      case '0':
        if (!a4)
        {
          v6 = 0;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return;
      case 'c':
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3
          || SBYTE1(v4->__traits_.__loc_.__locale_) < 65)
        {
          goto LABEL_85;
        }
        v7 = BYTE1(v4->__traits_.__loc_.__locale_);
        if (v7 >= 0x5B && (v7 - 97) > 0x19u)
          goto LABEL_85;
        v9 = v7 & 0x1F;
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v9;
          *((_BYTE *)a4 + 1) = 0;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        }
        return;
      case 'f':
        if (!a4)
        {
          v6 = 12;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return;
      case 'n':
        if (!a4)
        {
          v6 = 10;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return;
      case 'r':
        if (!a4)
        {
          v6 = 13;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return;
      case 't':
        if (!a4)
        {
          v6 = 9;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return;
      case 'u':
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_85;
        v10 = BYTE1(v4->__traits_.__loc_.__locale_);
        if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38 && (v10 | 0x20u) - 97 >= 6)
          goto LABEL_85;
        v4 = (std::basic_regex<char> *)((char *)v4 + 2);
        if (v4 == a3)
          goto LABEL_85;
        v11 = LOBYTE(v4->__traits_.__loc_.__locale_);
        if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38 && (v11 | 0x20u) - 97 >= 6)
          goto LABEL_85;
        goto LABEL_42;
      case 'v':
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_WORD *)a4 = 11;
        }
        else
        {
          v6 = 11;
LABEL_67:
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        }
        return;
      case 'x':
LABEL_42:
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_85;
        v12 = BYTE1(v4->__traits_.__loc_.__locale_);
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_47;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u)
          goto LABEL_85;
        v13 = -87;
LABEL_47:
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
          goto LABEL_85;
        v14 = BYTE2(v4->__traits_.__loc_.__locale_);
        v15 = -48;
        if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
          goto LABEL_52;
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
        {
LABEL_85:
          v17 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(v17, v18, v19, v20);
        }
        else
        {
          v15 = -87;
LABEL_52:
          v16 = v15 + v14 + 16 * (v13 + v12);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v16;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
        }
        break;
      default:
        if ((char)locale_low == 95
          || ((char)locale_low & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[locale_low] & 0x500) != 0)
        {
          goto LABEL_85;
        }
        if (!a4)
          goto LABEL_67;
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = locale_low;
        *((_BYTE *)a4 + 1) = 0;
        return;
    }
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  char v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char **v23;
  int v24;
  uint64_t v25;
  char **v26;
  size_t v27;
  std::string v28;
  char *__s[2];
  int64_t v30;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = a3;
  if (v4 > 0x16)
  {
    v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v10 = v4 | 7;
    v11 = v10 + 1;
    v9 = (char *)operator new(v10 + 1);
    __s[1] = (char *)v4;
    v30 = v11 | 0x8000000000000000;
    __s[0] = v9;
    if (v6 == a4)
      goto LABEL_18;
  }
  else
  {
    HIBYTE(v30) = (_BYTE)a4 - (_BYTE)a3;
    v9 = (char *)__s;
    if (a3 == a4)
      goto LABEL_18;
  }
  if (v4 < 0x20 || (unint64_t)(v9 - v6) < 0x20)
  {
    v13 = v9;
  }
  else
  {
    v12 = v4 & 0xFFFFFFFFFFFFFFE0;
    v13 = &v9[v4 & 0xFFFFFFFFFFFFFFE0];
    v14 = (__int128 *)(v6 + 16);
    v15 = v9 + 16;
    v16 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v17 = *v14;
      *(v15 - 1) = *(v14 - 1);
      *v15 = v17;
      v14 += 2;
      v15 += 2;
      v16 -= 32;
    }
    while (v16);
    if (v4 == v12)
    {
      v9 += v4 & 0xFFFFFFFFFFFFFFE0;
      goto LABEL_18;
    }
    v6 += v12;
  }
  v9 = v13;
  do
  {
    v18 = *v6++;
    *v9++ = v18;
  }
  while (v6 != a4);
LABEL_18:
  *v9 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(v30) < 0)
  {
    if (!__s[1])
      goto LABEL_26;
    v19 = __s[0];
  }
  else
  {
    if (!HIBYTE(v30))
      return;
    v19 = (const char *)__s;
  }
  std::__get_collation_name(&v28, v19);
  *(_OWORD *)a1 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  v20 = v28.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v28.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 8);
  if (v21)
    goto LABEL_26;
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    v22 = (char *)HIBYTE(v30);
    if (HIBYTE(v30) >= 3u)
      return;
    v23 = __s;
    goto LABEL_34;
  }
  v22 = __s[1];
  if (__s[1] < (char *)3)
  {
    v23 = (char **)__s[0];
LABEL_34:
    (*(void (**)(std::string *__return_ptr, _QWORD, char **, char *))(**(_QWORD **)(a2 + 16) + 32))(&v28, *(_QWORD *)(a2 + 16), v23, &v22[(_QWORD)v23]);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = v28;
    if (*(char *)(a1 + 23) < 0)
    {
      v25 = *(_QWORD *)(a1 + 8);
      if (v25 == 1 || v25 == 12)
      {
        if (__s != (char **)a1)
        {
          if (v30 >= 0)
            v26 = __s;
          else
            v26 = (char **)__s[0];
          if (v30 >= 0)
            v27 = HIBYTE(v30);
          else
            v27 = (size_t)__s[1];
          std::string::__assign_no_alias<false>((void **)a1, v26, v27);
        }
      }
      else
      {
        **(_BYTE **)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 23);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char **)a1)
        {
          if (SHIBYTE(v30) < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a1, __s[0], (size_t)__s[1]);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)__s;
            *(_QWORD *)(a1 + 16) = v30;
          }
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 23) = 0;
      }
    }
  }
LABEL_26:
  if (SHIBYTE(v30) < 0)
    operator delete(__s[0]);
}

void sub_19FDEB27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if (a17 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  _BYTE *p_p;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  void *__p;
  unint64_t v25;
  int64_t v26;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v26) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4)
      goto LABEL_18;
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      v13 = p_p;
    }
    else
    {
      v12 = v4 & 0xFFFFFFFFFFFFFFE0;
      v13 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      v14 = (__int128 *)(v6 + 16);
      v15 = p_p + 16;
      v16 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v4 == v12)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v12;
    }
    p_p = v13;
    do
    {
      v18 = *v6++;
      *p_p++ = v18;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_p = operator new(v10 + 1);
  v25 = v4;
  v26 = v11 | 0x8000000000000000;
  __p = p_p;
  if (v6 != a4)
    goto LABEL_8;
LABEL_18:
  *p_p = 0;
  v19 = HIBYTE(v26);
  if (v26 >= 0)
    v20 = (char *)&__p;
  else
    v20 = (char *)__p;
  if (v26 < 0)
    v19 = v25;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v20, &v20[v19]);
  v21 = *(unsigned __int8 *)(a1 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 8);
  if (v21 == 1)
  {
LABEL_34:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v21 == 12)
  {
    if (v22 >= 0)
      v23 = (_BYTE *)a1;
    else
      v23 = *(_BYTE **)a1;
    v23[11] = v23[3];
    if (SHIBYTE(v26) < 0)
      goto LABEL_35;
    return;
  }
  if ((v22 & 0x80000000) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
    goto LABEL_34;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (SHIBYTE(v26) < 0)
LABEL_35:
    operator delete(__p);
}

void sub_19FDEB48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v4;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a1 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a1;
    else
      v16 = *(_BYTE **)a1;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_19FDEB6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  BOOL result;
  std::basic_regex<char> *v3;
  int v4;

  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
  {
    v3 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(v3, v4);
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
    return 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E42DA810;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E42DA8F8;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E42C6B70;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__back_ref<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 16);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
  {
    v11 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    return std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(v11);
  }
  else
  {
    v5 = v2 - 1;
    if (*(_BYTE *)(v3 + 24 * v5 + 16)
      && (v6 = result,
          v7 = (uint64_t *)(v3 + 24 * v5),
          result = *v7,
          v8 = v7[1] - *v7,
          v9 = *(_QWORD *)(a2 + 16),
          *(_QWORD *)(a2 + 24) - v9 >= v8)
      && (result = memcmp((const void *)result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 16) = v9 + v8;
      v10 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v10 = 0;
      *(_DWORD *)a2 = -993;
    }
    *(_QWORD *)(a2 + 80) = v10;
  }
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA8F8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA8F8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA810;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA810;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int v33;

  if (a2 != a3)
  {
    v7 = a2 + 1;
    v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
LABEL_24:
        v10 = (uint64_t)(a2 + 1);
        if (a2 != v7)
          return (unsigned __int8 *)v10;
        goto LABEL_17;
      }
      if (v7 != a3 && v6 == 92)
      {
        v9 = *v7;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v9);
          v10 = (uint64_t)(a2 + 2);
          goto LABEL_16;
        }
      }
      if (*a2 == 46)
      {
        v11 = (_QWORD *)operator new();
        v12 = *(_QWORD *)(a1 + 56);
        v13 = *(_QWORD *)(v12 + 8);
        *v11 = &off_1E42DA6D0;
        v11[1] = v13;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_24;
      }
    }
  }
  v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
LABEL_16:
  if (a2 != (char *)v10)
    return (unsigned __int8 *)v10;
LABEL_17:
  if (a2 == a3 || a2 + 1 == a3 || *a2 != 92)
    return (unsigned __int8 *)v10;
  v14 = a2[1];
  if (v14 == 40)
  {
    v15 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v17 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v16 = operator new();
      v17 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v17;
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v16 = &off_1E42E8F88;
      *(_QWORD *)(v16 + 8) = v19;
      *(_DWORD *)(v16 + 16) = v17;
      *(_QWORD *)(v18 + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v15 == (unsigned __int8 *)a3)
        goto LABEL_41;
      v20 = v15;
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 28);
      v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v20, a3);
      if (v20 == v23)
        break;
      v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v23, (unsigned __int8 *)a3, v21, v22 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v20 != v15);
    if (v20 + 1 == (unsigned __int8 *)a3 || *v20 != 92 || v20[1] != 41)
    {
LABEL_41:
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      goto LABEL_42;
    }
    v10 = (uint64_t)&v20[2 * (v20[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v24 = operator new();
      v25 = *(_QWORD *)(a1 + 56);
      v26 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)v24 = &off_1E42E8F58;
      *(_QWORD *)(v24 + 8) = v26;
      *(_DWORD *)(v24 + 16) = v17;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    return (unsigned __int8 *)v10;
  }
  if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38 || (v14 - 49) > 8)
    return (unsigned __int8 *)v10;
  if ((v14 - 48) <= *(_DWORD *)(a1 + 28))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v14 - 48);
    return (unsigned __int8 *)(a2 + 2);
  }
LABEL_42:
  v28 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(v28, v29, v30, v31, v32, v33);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v30;
  _BOOL4 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _Unwind_Exception *v50;

  if (a2 == a3)
    return a2;
  v12 = *a2;
  if (v12 != 42)
  {
    v19 = a3;
    if (a2 + 1 != a3 && v12 == 92 && a2[1] == 123)
    {
      v20 = &a2[2 * (a2[1] == 123)];
      if (v20 == a3)
        goto LABEL_47;
      v21 = *v20;
      if ((v21 & 0xF8) != 0x30 && (v21 & 0xFE) != 0x38)
        goto LABEL_47;
      v22 = v21 - 48;
      v23 = v20 + 1;
      if (v20 + 1 == a3)
      {
LABEL_15:
        v23 = a3;
      }
      else
      {
        while (1)
        {
          v24 = *v23;
          if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38)
            break;
          if (v22 >= 214748364)
            goto LABEL_47;
          v22 = v24 + 10 * v22 - 48;
          if (++v23 == a3)
            goto LABEL_15;
        }
      }
      if (v23 == v20)
      {
LABEL_47:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        goto LABEL_48;
      }
      if (v23 == a3)
        goto LABEL_48;
      v25 = v23 + 1;
      v26 = *v23;
      if (v26 != 44)
      {
        if (v25 != a3 && v26 == 92)
        {
          v30 = v23[1];
          v31 = v30 == 125;
          if (v30 == 125)
          {
            v32 = (_QWORD *)operator new();
            v33 = *(_QWORD *)(a1 + 56);
            v34 = *(_QWORD *)(v33 + 8);
            v32[1] = v34;
            *(_QWORD *)(v33 + 8) = 0;
            v35 = operator new();
            v36 = *(_DWORD *)(a1 + 32);
            v37 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v35 = &off_1E42E8FB8;
            *(_QWORD *)(v35 + 8) = v37;
            *(_QWORD *)(v35 + 16) = v32;
            *(_QWORD *)(v35 + 24) = v22;
            *(_QWORD *)(v35 + 32) = v22;
            *(_DWORD *)(v35 + 40) = v36;
            *(_DWORD *)(v35 + 44) = a5;
            *(_DWORD *)(v35 + 48) = a6;
            *(_BYTE *)(v35 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v38 = (_QWORD *)operator new();
            v19 = &v23[2 * v31];
LABEL_46:
            *v38 = &off_1E42DA8A0;
            v38[1] = v35;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v38;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v35 + 16);
            *(_QWORD *)(a4 + 8) = v35;
            ++*(_DWORD *)(a1 + 32);
            return v19;
          }
        }
LABEL_48:
        v50 = (_Unwind_Exception *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        _Unwind_Resume(v50);
      }
      if (v25 == a3)
        goto LABEL_48;
      v27 = *v25;
      if ((v27 & 0xF8) == 0x30 || (v27 & 0xFE) == 0x38)
      {
        v28 = v27 - 48;
        v25 = v23 + 2;
        if (v23 + 2 == a3)
        {
LABEL_38:
          v25 = a3;
LABEL_41:
          if (v25 == v19)
            goto LABEL_48;
          if (v28 == -1)
          {
            v45 = (_QWORD *)operator new();
            v46 = *(_QWORD *)(a1 + 56);
            v47 = *(_QWORD *)(v46 + 8);
            v45[1] = v47;
            *(_QWORD *)(v46 + 8) = 0;
            v35 = operator new();
            v48 = *(_DWORD *)(a1 + 32);
            v49 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v35 = &off_1E42E8FB8;
            *(_QWORD *)(v35 + 8) = v49;
            *(_QWORD *)(v35 + 16) = v45;
            *(_QWORD *)(v35 + 24) = v22;
            *(_QWORD *)(v35 + 32) = -1;
            *(_DWORD *)(v35 + 40) = v48;
            *(_DWORD *)(v35 + 44) = a5;
            *(_DWORD *)(v35 + 48) = a6;
            *(_BYTE *)(v35 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v38 = (_QWORD *)operator new();
            goto LABEL_46;
          }
          if (v28 >= v22)
          {
            v40 = (_QWORD *)operator new();
            v41 = *(_QWORD *)(a1 + 56);
            v42 = *(_QWORD *)(v41 + 8);
            v40[1] = v42;
            *(_QWORD *)(v41 + 8) = 0;
            v35 = operator new();
            v43 = *(_DWORD *)(a1 + 32);
            v44 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v35 = &off_1E42E8FB8;
            *(_QWORD *)(v35 + 8) = v44;
            *(_QWORD *)(v35 + 16) = v40;
            *(_QWORD *)(v35 + 24) = v22;
            *(_QWORD *)(v35 + 32) = v28;
            *(_DWORD *)(v35 + 40) = v43;
            *(_DWORD *)(v35 + 44) = a5;
            *(_DWORD *)(v35 + 48) = a6;
            *(_BYTE *)(v35 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v38 = (_QWORD *)operator new();
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        while (1)
        {
          v27 = *v25;
          if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
            break;
          if (v28 >= 214748364)
            goto LABEL_47;
          v28 = v27 + 10 * v28 - 48;
          if (++v25 == a3)
            goto LABEL_38;
        }
      }
      else
      {
        v28 = -1;
      }
      if (v25 == a3)
      {
        v39 = v25;
        v25 = a3;
        v19 = v39;
      }
      else if (v25 + 1 == a3 || v27 != 92)
      {
        v19 = v25;
      }
      else
      {
        v19 = &v25[2 * (v25[1] == 125)];
      }
      goto LABEL_41;
    }
    return a2;
  }
  v13 = (_QWORD *)operator new();
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(v14 + 8);
  v13[1] = v15;
  *(_QWORD *)(v14 + 8) = 0;
  v16 = operator new();
  v17 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)v16 = &off_1E42E8FB8;
  *(_OWORD *)(v16 + 24) = xmmword_19FFB5ED0;
  *(_DWORD *)(v16 + 40) = v17;
  *(_DWORD *)(v16 + 44) = a5;
  *(_DWORD *)(v16 + 48) = a6;
  *(_BYTE *)(v16 + 52) = 1;
  *(_QWORD *)(a4 + 8) = 0;
  v18 = (_QWORD *)operator new();
  *v18 = &off_1E42DA8A0;
  v18[1] = v16;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(a4 + 8) = v16;
  ++*(_DWORD *)(a1 + 32);
  return a2 + 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int marked_count;
  std::basic_regex<char> v21;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v16 = a2[1];
        if (v16 == 66)
        {
          v17 = operator new();
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v17 = &off_1E42DA760;
          *(_QWORD *)(v17 + 8) = v19;
          std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v17 + 40) = 1;
        }
        else
        {
          if (v16 != 98)
            return (uint64_t)v3;
          v17 = operator new();
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v17 = &off_1E42DA760;
          *(_QWORD *)(v17 + 8) = v18;
          std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v17 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v3 += 2;
      }
      return (uint64_t)v3;
    }
    if (v6 != 94)
      return (uint64_t)v3;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = &off_1E42DAAB0;
LABEL_17:
    *(_QWORD *)v10 = v14;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)++v3;
  }
  if (v6 == 36)
  {
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = &off_1E42DAB10;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return (uint64_t)v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v21);
    v21.__flags_ = *(_DWORD *)(a1 + 24);
    v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v21, v3 + 3, a3);
    marked_count = v21.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v21, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v8 == a3 || *v8 != 41)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (v7 != 61)
    return (uint64_t)v3;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v21);
  v21.__flags_ = *(_DWORD *)(a1 + 24);
  v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v21, v3 + 3, a3);
  v9 = v21.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v21, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v9;
  if (v8 != a3 && *v8 == 41)
  {
LABEL_27:
    v3 = v8 + 1;
    std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v21.__traits_.__loc_);
    return (uint64_t)v3;
  }
LABEL_28:
  result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  __break(1u);
  return result;
}

void sub_19FDEC85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  char *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  _Unwind_Exception *v30;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v5 = *a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v3;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_53;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
        if (v12 != a3 && *v12 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v12 + 1;
        }
        goto LABEL_53;
      }
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v17 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v16 = operator new();
        v17 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v17;
        v18 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)v16 = &off_1E42E8F88;
        *(_QWORD *)(v16 + 8) = v19;
        *(_DWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v18 + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, v3 + 1, a3);
      if (v20 == a3 || (v21 = v20, *v20 != 41))
      {
LABEL_53:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        goto LABEL_54;
      }
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v22 = operator new();
        v23 = *(_QWORD *)(a1 + 56);
        v24 = *(_QWORD *)(v23 + 8);
        *(_QWORD *)v22 = &off_1E42E8F58;
        *(_QWORD *)(v22 + 8) = v24;
        *(_DWORD *)(v22 + 16) = v17;
        *(_QWORD *)(v23 + 8) = v22;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      return v21 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      goto LABEL_53;
    case '.':
      v9 = (_QWORD *)operator new();
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(v10 + 8);
      *v9 = &off_1E42E8F28;
      v9[1] = v11;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    case '\\':
      v7 = a2;
      if (v5 != 92)
        return v7;
      v13 = a2 + 1;
      if (a2 + 1 == a3)
        goto LABEL_55;
      v14 = *v13;
      v15 = v14 - 48;
      if (v14 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v15);
        return v3 + 2;
      }
      if ((v14 - 49) > 8)
        goto LABEL_38;
      v7 = v3 + 2;
      if (v3 + 2 == a3)
      {
        v7 = a3;
      }
      else
      {
        while (1)
        {
          v25 = *v7;
          if ((v25 - 48) > 9)
            break;
          if (v15 >= 0x19999999)
            goto LABEL_54;
          ++v7;
          v15 = v25 + 10 * v15 - 48;
          if (v7 == a3)
          {
            v7 = a3;
            break;
          }
        }
        if (!v15)
        {
LABEL_54:
          std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_55:
          v30 = (_Unwind_Exception *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
          MEMORY[0x1A1AF4E00](a3, 0x10F1C4061CF1F02);
          _Unwind_Resume(v30);
        }
      }
      if (v15 > *(_DWORD *)(a1 + 28))
        goto LABEL_54;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v15);
      if (v7 != v13)
        return v7;
LABEL_38:
      switch(*v13)
      {
        case 'D':
          v26 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
          goto LABEL_46;
        case 'S':
          v26 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
          goto LABEL_50;
        case 'W':
          v28 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v28, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
          goto LABEL_48;
        case 'd':
          v26 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_46:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v26;
          *(_QWORD *)(a1 + 56) = v26;
          v29 = *(_DWORD *)(v26 + 160) | 0x400;
          goto LABEL_51;
        case 's':
          v26 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_50:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v26;
          *(_QWORD *)(a1 + 56) = v26;
          v29 = *(_DWORD *)(v26 + 160) | 0x4000;
LABEL_51:
          *(_DWORD *)(v26 + 160) = v29;
          v7 = v3 + 2;
          break;
        case 'w':
          v28 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v28, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_48:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v28;
          *(_QWORD *)(a1 + 56) = v28;
          *(_DWORD *)(v28 + 160) |= 0x500u;
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v28, 95);
          v7 = v3 + 2;
          break;
        default:
          std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v3 + 1), (std::basic_regex<char> *)a3, 0);
          if (v13 == v27)
            v7 = v3;
          else
            v7 = v27;
          break;
      }
      break;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return ++v3;
  }
  return v7;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1A1AF4C5C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_19FDECE70(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E42DA6A0;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA6A0;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA6A0;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  JUMPOUT(0x1A1AF4E00);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t i;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  for (i = 1; i < v10; i = v13++)
  {
    v15 = &begin[i];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
  }
LABEL_14:
  operator delete(begin);
}

void sub_19FDED200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA760;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E42DA760;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      if (v6 != 95)
      {
LABEL_15:
        if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
          goto LABEL_17;
        goto LABEL_18;
      }
LABEL_17:
      v10 = 1;
      goto LABEL_25;
    }
LABEL_18:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
        if (v6 != 95)
          goto LABEL_15;
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  if (v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
  {
    v9 = 1;
    if ((_DWORD)v8 == 95)
      goto LABEL_22;
  }
  else
  {
    v9 = 0;
    if ((_DWORD)v8 == 95)
      goto LABEL_22;
  }
  if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
  {
    v11 = 0;
    goto LABEL_24;
  }
LABEL_22:
  v11 = 1;
LABEL_24:
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void md::LabelFeature::textDataForZoom(md::LabelFeature *this, md::LabelFeature *a2, const md::LabelTextStyleGroup *a3, uint64_t a4)
{
  int v5;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v5 = (int)a3;
  v8 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a2 + 488))(a2);
  v9 = (unsigned __int8 *)*((_QWORD *)a2 + 20);
  v10 = (unsigned __int8 *)*((_QWORD *)a2 + 21);
  if (v8 > 0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 3))
  {
    md::LabelFeature::updateTextVector(a2);
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 20);
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 21);
  }
  md::TextDataStore::textDataForZoom(this, v9, v10, v5, a4 + 72);
}

const void **md::LabelFeature::debugName(md::LabelFeature *this, _QWORD *a2)
{
  const void **result;
  uint64_t v5;
  const void **v6;
  int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  int v19;
  void *p_p;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  const void *v25;
  __int128 v26;
  size_t v27;
  void *v28;
  unint64_t v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  const void *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  md::LabelFeature *v40;
  uint64_t v41;
  void *__p;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51[2];
  __int128 v52;
  int v53;
  uint64_t v54[20];

  result = (const void **)(*(uint64_t (**)(_QWORD *, _QWORD))(*a2 + 472))(a2, 0);
  if (result)
  {
    *((_QWORD *)this + 3) = result[3];
    if (*((char *)result + 23) < 0)
      return (const void **)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)this, (void *)*result, (unint64_t)result[1]);
    *(_OWORD *)this = *(_OWORD *)result;
    *((_QWORD *)this + 2) = result[2];
    return result;
  }
  v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 496))(a2);
  if (v5)
  {
    v6 = (const void **)v5;
    v7 = *(char *)(v5 + 23);
    if (v7 >= 0)
      v8 = *(unsigned __int8 *)(v5 + 23);
    else
      v8 = *(_QWORD *)(v5 + 8);
    v9 = v8 + 7;
    v10 = *(_QWORD *)(v5 + 24);
    *((_QWORD *)&v47 + 1) = v10;
    if (v8 + 7 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v9 >= 0x17)
    {
      v22 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v22 = v9 | 7;
      v23 = v22 + 1;
      v24 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v22 + 1, 1);
      *((_QWORD *)&v46 + 1) = v8 + 7;
      *(_QWORD *)&v47 = v23 | 0x8000000000000000;
      *(_QWORD *)&v46 = v24;
      v11 = (char *)v24 + 7;
      *(_DWORD *)((char *)v24 + 3) = 677669989;
      *v24 = 1701406835;
      LOBYTE(v7) = *((_BYTE *)v6 + 23);
    }
    else
    {
      *((_QWORD *)&v46 + 1) = 0;
      *(_QWORD *)&v47 = 0;
      BYTE7(v47) = v8 + 7;
      v11 = (char *)&v46 + 7;
      strcpy((char *)&v46, "shield(");
      if (!v8)
      {
LABEL_29:
        v11[v8] = 0;
        result = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&v46, ")", 1uLL);
        v26 = v47;
        *(_OWORD *)this = v46;
        *((_OWORD *)this + 1) = v26;
        return result;
      }
    }
    if ((v7 & 0x80u) == 0)
      v25 = v6;
    else
      v25 = *v6;
    memmove(v11, v25, v8);
    goto LABEL_29;
  }
  v12 = MEMORY[0x1E0DE4FE0];
  v13 = MEMORY[0x1E0DE4FE0] + 64;
  v14 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v54[0] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)&v46 = v15;
  *(_QWORD *)((char *)&v46 + *(_QWORD *)(v15 - 24)) = v16;
  v17 = (std::ios_base *)((char *)&v46 + *(_QWORD *)(v46 - 24));
  std::ios_base::init(v17, (char *)&v46 + 8);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *(_QWORD *)&v46 = v12 + 24;
  v54[0] = v13;
  std::streambuf::basic_streambuf();
  v18 = MEMORY[0x1E0DE4FB8];
  *((_QWORD *)&v46 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  v53 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"type=", 5);
  v19 = (*(uint64_t (**)(_QWORD *))(*a2 + 264))(a2);
  md::to_string((uint64_t)&__p, v19);
  if (v44 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v44 >= 0)
    v21 = HIBYTE(v44);
  else
    v21 = v43;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)p_p, v21);
  if (SHIBYTE(v44) < 0)
  {
    (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v45 + 40))(v45, __p, v44 & 0x7FFFFFFFFFFFFFFFLL);
    if (!a2[9])
      goto LABEL_32;
    goto LABEL_31;
  }
  if (a2[9])
  {
LABEL_31:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)" key=", 5);
    std::ostream::operator<<();
  }
LABEL_32:
  if ((v53 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1) < v50)
    {
      *((_QWORD *)&v52 + 1) = v50;
      v29 = v50;
    }
    v30 = (const void **)&v49;
  }
  else
  {
    if ((v53 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(v44) = 0;
      v28 = &__p;
      goto LABEL_47;
    }
    v30 = (const void **)&v47 + 1;
    v29 = v48;
  }
  v31 = *v30;
  v27 = v29 - (_QWORD)*v30;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v27 >= 0x17)
  {
    v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v32 = v27 | 7;
    v33 = v32 + 1;
    v28 = operator new(v32 + 1);
    v43 = v27;
    v44 = v33 | 0x8000000000000000;
    __p = v28;
  }
  else
  {
    HIBYTE(v44) = v29 - *(_BYTE *)v30;
    v28 = &__p;
    if (!v27)
      goto LABEL_47;
  }
  memmove(v28, v31, v27);
LABEL_47:
  *((_BYTE *)v28 + v27) = 0;
  {
    v41 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v35 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 3) = mdm::Allocator::instance(void)::alloc;
  if (SHIBYTE(v44) < 0)
  {
    v36 = __p;
    v37 = v43;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      abort();
  }
  else
  {
    v36 = &__p;
    v37 = HIBYTE(v44);
  }
  if (v37 >= 0x17)
  {
    v38 = (v37 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v38 = v37 | 7;
    v39 = v38 + 1;
    v40 = (md::LabelFeature *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v38 + 1, 1);
    *((_QWORD *)this + 1) = v37;
    *((_QWORD *)this + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)this = v40;
    this = v40;
  }
  else
  {
    *((_BYTE *)this + 23) = v37;
    if (!v37)
      goto LABEL_58;
  }
  memmove(this, v36, v37);
LABEL_58:
  *((_BYTE *)this + v37) = 0;
  if (SHIBYTE(v44) < 0)
    operator delete(__p);
  *(_QWORD *)&v46 = *v14;
  *(_QWORD *)((char *)&v46 + *(_QWORD *)(v46 - 24)) = v14[3];
  *((_QWORD *)&v46 + 1) = v18 + 16;
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (const void **)MEMORY[0x1A1AF4D64](v54);
}

void sub_19FDEDA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

id md::LabelFeature::debugClientAttributesToString(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10[3];
  uint64_t v11;

  v2 = (uint64_t *)(a2 + 184);
  md::createFeatureAttributeSet((gss::Allocator *)v10, a1);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v8, v2, v10, 0);
  if (v10[0])
  {
    v10[1] = v10[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v10[0], v10[2] - v10[0]);
  }
  md::HighlightHelper::debugClientAttributesToString(v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19FDEDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FDEDB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);
  _Unwind_Resume(exception_object);
}

void md::PolygonOverlayRenderable::updateWithContext(__int128 *a1, const md::LayoutContext *a2, unsigned int a3, int a4, uint64_t a5)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  uint64_t v21;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  float v30;
  unint64_t *v31;
  unint64_t v32;
  float v33;
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  int os_unfair_lock_opaque;
  uint64_t v40;
  os_unfair_lock_s *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  double v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  __int128 *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  __int128 *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v210;
  int v211;
  _BOOL4 v212;
  _QWORD v213[7];
  char v214;
  char v215;
  int v216;
  int v217;
  uint64_t v218;
  int v219;
  char v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  _QWORD v229[5];
  int v230;
  BOOL v231;
  __int128 v232;

  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = v8[1];
  if ((v9 & (v9 - 1)) != 0)
  {
    v11 = 0x1AF456233693CD46;
    if (v9 <= 0x1AF456233693CD46)
      v11 = 0x1AF456233693CD46 % v9;
    v10 = *(_QWORD **)(*v8 + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x1AF456233693CD46);
    }
    while (v10[2] != 0x1AF456233693CD46);
  }
  else
  {
    v10 = *(_QWORD **)(*v8 + 8 * ((v9 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x1AF456233693CD46);
    }
    while (v10[2] != 0x1AF456233693CD46);
  }
  v12 = *(_QWORD *)(v10[5] + 32);
  *((_QWORD *)a1 + 31) = 0;
  v13 = (char *)a1 + 248;
  *(_QWORD *)((char *)a1 + 254) = 0;
  v210 = v12;
  if (*(double *)(v12 + 40) > 0.0)
    v14 = a3;
  else
    v14 = 0;
  v15 = (os_unfair_lock_s *)*((_QWORD *)a1 + 6);
  os_unfair_lock_lock(v15 + 6);
  os_unfair_lock_unlock(v15 + 6);
  v232 = *(_OWORD *)&v15->_os_unfair_lock_opaque;
  v16 = *((_QWORD *)a1 + 6);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  v17 = *(float *)(v16 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
  v18 = *((float *)&v232 + 3) * v17;
  *((float *)&v232 + 3) = v18;
  v19 = vabds_f32(1.0, v18);
  v20 = v19 <= (float)(fabsf(v18 + 1.0) * 0.000011921);
  if (v19 < 1.1755e-38)
    v20 = 1;
  v231 = v20;
  v21 = *((_QWORD *)a1 + 38);
  v23 = v18 > 0.0 && *((_QWORD *)a1 + 3) != 0;
  v212 = v21 != 0;
  if (v21)
    v24 = 0;
  else
    v24 = v23;
  v25 = *((_QWORD *)a1 + 6);
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(std::__shared_weak_count **)(v25 + 40);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 196));
  v30 = *(float *)(v26 + 148);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 196));
  if (v27)
  {
    v31 = (unint64_t *)&v27->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v33 = vabds_f32(1.0, v30);
  v34 = v33 > (float)(fabsf(v30 + 1.0) * 0.000011921);
  v35 = v33 >= 1.1755e-38 && v34;
  v36 = v212;
  if (v30 > 0.0)
    v36 = 1;
  v37 = (os_unfair_lock_s *)*((_QWORD *)a1 + 6);
  if (!*((_QWORD *)a1 + 5))
    v36 = 0;
  v211 = v36;
  v38 = v37 + 6;
  os_unfair_lock_lock(v37 + 6);
  os_unfair_lock_opaque = v37[5]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v38);
  if (os_unfair_lock_opaque == 13)
  {
    v40 = *((_QWORD *)a1 + 6);
    v41 = (os_unfair_lock_s *)(v40 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v40 + 24));
    LODWORD(v40) = *(unsigned __int8 *)(v40 + 48);
    os_unfair_lock_unlock(v41);
    if ((_DWORD)v40)
      os_unfair_lock_opaque = 18;
  }
  v42 = v211;
  v230 = os_unfair_lock_opaque;
  v43 = a4 ^ 1;
  *v13 = v24 & (a4 ^ 1);
  if (v24)
  {
    v44 = *((_QWORD *)a1 + 4);
    if (v44)
      LODWORD(v44) = (v35 | ~v211) & v43;
  }
  else
  {
    LODWORD(v44) = 0;
  }
  *(_DWORD *)((char *)a1 + 250) = 16843009 * (v211 & v43);
  *((_BYTE *)a1 + 249) = v44;
  *(_DWORD *)((char *)a1 + 254) = 16843009 * (v211 & v212 & v43);
  *((_BYTE *)a1 + 260) = v24 & a4;
  *((_BYTE *)a1 + 258) = v211 & a4;
  *((_BYTE *)a1 + 259) = v211 & a4;
  *((_BYTE *)a1 + 261) = v212;
  v229[0] = &v231;
  v229[1] = &v232;
  v229[2] = &v230;
  v229[3] = a5;
  v229[4] = a1;
  if ((v24 & (a4 ^ 1)) != 0)
  {
    md::PolygonOverlayRenderable::updateWithContext(md::LayoutContext const&,BOOL,BOOL,ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint> *,float)::$_0::operator()((uint64_t)v229, *(_QWORD *)(**((_QWORD **)a1 + 11) + 16 * v231 + 8 * v14 + 72), *((_QWORD *)a1 + 17));
    LODWORD(v44) = *((unsigned __int8 *)a1 + 249);
  }
  if (!(_DWORD)v44)
    goto LABEL_125;
  v45 = *(_QWORD *)(**((_QWORD **)a1 + 11) + 64);
  v46 = *(_QWORD *)(v45 + 8);
  if (v46 == *(_QWORD *)v45)
  {
    v57 = *(_QWORD *)(v45 + 88);
    if (!v57)
      goto LABEL_241;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57);
    v48 = *(uint64_t **)(v45 + 40);
    v58 = *(_QWORD *)(v45 + 48);
    if ((unint64_t)v48 >= v58)
    {
      v60 = *(_QWORD *)(v45 + 32);
      v61 = ((uint64_t)v48 - v60) >> 3;
      v52 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
        goto LABEL_242;
      v62 = v58 - v60;
      if (v62 >> 2 > v52)
        v52 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      if (v52)
      {
        v63 = 8 * v52;
        v64 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v45 + 56) + 16))(*(_QWORD *)(v45 + 56), 8 * v52, 8);
        v56 = (uint64_t *)(v64 + 8 * v61);
        v52 = v64 + v63;
        if (v64)
          *v56 = v47;
      }
      else
      {
        v56 = (uint64_t *)(8 * v61);
      }
      v59 = v56 + 1;
      v74 = *(_QWORD *)(v45 + 32);
      v65 = *(_QWORD *)(v45 + 40);
      if (v65 == v74)
        goto LABEL_97;
      v75 = v65 - v74 - 8;
      if (v75 < 0x38)
      {
        v77 = *(_QWORD *)(v45 + 40);
      }
      else if ((unint64_t)(v65 - (_QWORD)v56) < 0x20)
      {
        v77 = *(_QWORD *)(v45 + 40);
      }
      else
      {
        v76 = (v75 >> 3) + 1;
        v77 = v65 - 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        v78 = v56 - 2;
        v79 = (__int128 *)(v65 - 16);
        v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v81 = *v79;
          *((_OWORD *)v78 - 1) = *(v79 - 1);
          *(_OWORD *)v78 = v81;
          v78 -= 4;
          v79 -= 2;
          v80 -= 4;
        }
        while (v80);
        v56 -= v76 & 0x3FFFFFFFFFFFFFFCLL;
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_96;
      }
      do
      {
        v83 = *(_QWORD *)(v77 - 8);
        v77 -= 8;
        *--v56 = v83;
      }
      while (v77 != v74);
      goto LABEL_96;
    }
LABEL_62:
    if (v48)
      *v48 = v47;
    v59 = v48 + 1;
    goto LABEL_99;
  }
  v47 = *(_QWORD *)(v46 - 8);
  *(_QWORD *)(v45 + 8) = v46 - 8;
  v48 = *(uint64_t **)(v45 + 40);
  v49 = *(_QWORD *)(v45 + 48);
  if ((unint64_t)v48 < v49)
    goto LABEL_62;
  v50 = *(_QWORD *)(v45 + 32);
  v51 = ((uint64_t)v48 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_242;
  v53 = v49 - v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v52 = 0x1FFFFFFFFFFFFFFFLL;
  if (v52)
  {
    v54 = 8 * v52;
    v55 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v45 + 56) + 16))(*(_QWORD *)(v45 + 56), 8 * v52, 8);
    v56 = (uint64_t *)(v55 + 8 * v51);
    v52 = v55 + v54;
    if (v55)
      *v56 = v47;
  }
  else
  {
    v56 = (uint64_t *)(8 * v51);
  }
  v59 = v56 + 1;
  v66 = *(_QWORD *)(v45 + 32);
  v65 = *(_QWORD *)(v45 + 40);
  if (v65 == v66)
    goto LABEL_97;
  v67 = v65 - v66 - 8;
  if (v67 < 0x38)
  {
    v69 = *(_QWORD *)(v45 + 40);
  }
  else if ((unint64_t)(v65 - (_QWORD)v56) < 0x20)
  {
    v69 = *(_QWORD *)(v45 + 40);
  }
  else
  {
    v68 = (v67 >> 3) + 1;
    v69 = v65 - 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
    v70 = v56 - 2;
    v71 = (__int128 *)(v65 - 16);
    v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v73 = *v71;
      *((_OWORD *)v70 - 1) = *(v71 - 1);
      *(_OWORD *)v70 = v73;
      v70 -= 4;
      v71 -= 2;
      v72 -= 4;
    }
    while (v72);
    v56 -= v68 & 0x3FFFFFFFFFFFFFFCLL;
    if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_96;
  }
  do
  {
    v82 = *(_QWORD *)(v69 - 8);
    v69 -= 8;
    *--v56 = v82;
  }
  while (v69 != v66);
LABEL_96:
  v65 = *(_QWORD *)(v45 + 32);
LABEL_97:
  *(_QWORD *)(v45 + 32) = v56;
  *(_QWORD *)(v45 + 40) = v59;
  v84 = *(_QWORD *)(v45 + 48);
  *(_QWORD *)(v45 + 48) = v52;
  if (v65)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 56) + 40))(*(_QWORD *)(v45 + 56), v65, v84 - v65);
LABEL_99:
  *(_QWORD *)(v45 + 40) = v59;
  v213[0] = v47;
  v85 = *(_QWORD *)(v45 + 120);
  if (!v85)
    goto LABEL_241;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 48))(v85, v213);
  v86 = *(_QWORD **)(v47 + 64);
  v86[1] = 0;
  v87 = *((_QWORD *)a1 + 13);
  *v86 = v87;
  v88 = *(_QWORD **)(v47 + 160);
  v89 = *((_QWORD *)a1 + 14);
  if (v89)
  {
    v90 = (unint64_t *)(v89 + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v92 = (std::__shared_weak_count *)v88[1];
  *v88 = v87;
  v88[1] = v89;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = *(_QWORD *)(v47 + 64);
  *(_QWORD *)(v95 + 24) = 0;
  v96 = *((_QWORD *)a1 + 15);
  *(_QWORD *)(v95 + 16) = v96;
  v97 = *(_QWORD *)(v47 + 160);
  v98 = *((_QWORD *)a1 + 16);
  if (v98)
  {
    v99 = (unint64_t *)(v98 + 8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  v101 = *(std::__shared_weak_count **)(v97 + 24);
  *(_QWORD *)(v97 + 16) = v96;
  *(_QWORD *)(v97 + 24) = v98;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  **(_QWORD **)(v47 + 96) = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8);
  if (a5)
  {
    v104 = *(_QWORD *)(v47 + 64);
    *(_QWORD *)(v104 + 48) = a5;
    *(_QWORD *)(v104 + 56) = 0;
    v105 = *(_QWORD *)(v47 + 160);
    v106 = *(std::__shared_weak_count **)(v105 + 56);
    *(_QWORD *)(v105 + 48) = 0;
    *(_QWORD *)(v105 + 56) = 0;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
  }
  v109 = *(_QWORD **)(*(_QWORD *)(v47 + 64) + 32);
  v110 = *(double *)(v210 + 3768) / (*(double *)(v210 + 1368) * *((double *)a1 + 12));
  v111 = v109[1];
  v112 = v109[9];
  *(_OWORD *)v112 = v232;
  *(float *)&v110 = v110;
  *(_DWORD *)(v112 + 16) = LODWORD(v110);
  *(_DWORD *)(v112 + 20) = v230;
  if (v109[8] > v111)
    v111 = v109[8];
  v109[7] = 0;
  v109[8] = v111;
  v113 = *((_QWORD *)a1 + 18);
  *(_QWORD *)(v113 + 24) = *(_QWORD *)(**((_QWORD **)a1 + 11) + 8 * v14 + 104);
  *(_DWORD *)(v113 + 40) = *((_DWORD *)a1 + 20);
  *(_QWORD *)(v113 + 32) = v47;
  *(_QWORD *)(v113 + 64) = *((_QWORD *)a1 + 4);
  v42 = v211;
LABEL_125:
  if (v42)
  {
    md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v213, a2);
    v218 = 0;
    v219 = 1065353216;
    v220 = 0;
    v223 = 0;
    v224 = 0;
    v221 = 0;
    v222 = 0;
    LOWORD(v225) = 255;
    *(_QWORD *)((char *)&v225 + 4) = 0;
    v214 = 0;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "ribbonCrispness");
    v216 = v115;

    v116 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 16);
    v217 = *(_DWORD *)(*(_QWORD *)(v116 + 256) + 8);
    v218 = v116;
    v215 = *((_DWORD *)a1 + 20);
    BYTE4(v221) = v14;
    BYTE5(v221) = a4;
    v220 = 1;
    LODWORD(v221) = v230;
    v117 = *((_QWORD *)a1 + 8);
    v118 = (std::__shared_weak_count *)*((_QWORD *)a1 + 9);
    if (v118)
    {
      v119 = (unint64_t *)&v118->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    v121 = v224;
    v223 = v117;
    v224 = v118;
    if (v121)
    {
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v222 = v212;
    v225 = *a1;
    v226 = *((_QWORD *)a1 + 2);
    v124 = a1[21];
    v227 = a1[20];
    v228 = v124;
    md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::layout(*((_QWORD *)a1 + 5), (uint64_t)v213);
    v125 = v224;
    if (v224)
    {
      v126 = (unint64_t *)&v224->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
  }
  if (*((_BYTE *)a1 + 260))
    md::PolygonOverlayRenderable::updateWithContext(md::LayoutContext const&,BOOL,BOOL,ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint> *,float)::$_0::operator()((uint64_t)v229, *(_QWORD *)(**((_QWORD **)a1 + 11) + 8 * v231 + 120), *((_QWORD *)a1 + 29));
  if (*((_BYTE *)a1 + 261))
  {
    v128 = (_QWORD *)*((_QWORD *)a1 + 38);
    if (v128[14])
    {
      if (v128[15])
      {
        v129 = v128[21];
        if (v129 < v128[20] && *((_QWORD *)a1 + 3) != 0)
        {
          v131 = v129 + 1;
          v128[21] = v131;
          v132 = 8 * (v131 >> 6);
          v133 = 1 << v131;
          *(_QWORD *)(v128[11] + v132) &= ~(1 << v131);
          v134 = *(_QWORD *)(v128[8] + 8 * v131);
          v135 = *(_QWORD *)(v128[3] + 80);
          v136 = *(_QWORD *)(v135 + 8);
          if (v136 != *(_QWORD *)v135)
          {
            v137 = *(_QWORD **)(v136 - 8);
            *(_QWORD *)(v135 + 8) = v136 - 8;
            v138 = *(_QWORD **)(v135 + 40);
            v139 = *(_QWORD *)(v135 + 48);
            if ((unint64_t)v138 >= v139)
            {
              v140 = *(_QWORD *)(v135 + 32);
              v141 = ((uint64_t)v138 - v140) >> 3;
              v142 = v141 + 1;
              if ((unint64_t)(v141 + 1) >> 61)
                goto LABEL_242;
              v143 = v139 - v140;
              if (v143 >> 2 > v142)
                v142 = v143 >> 2;
              if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              if (v142)
              {
                v144 = 8 * v142;
                v145 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v135 + 56) + 16))(*(_QWORD *)(v135 + 56), 8 * v142, 8);
                v146 = (_QWORD *)(v145 + 8 * v141);
                v142 = v145 + v144;
                if (v145)
                  *v146 = v137;
              }
              else
              {
                v146 = (_QWORD *)(8 * v141);
              }
              v149 = v146 + 1;
              v156 = *(_QWORD *)(v135 + 32);
              v155 = *(_QWORD *)(v135 + 40);
              if (v155 == v156)
                goto LABEL_195;
              v157 = v155 - v156 - 8;
              if (v157 < 0x38)
              {
                v159 = *(_QWORD *)(v135 + 40);
              }
              else if ((unint64_t)(v155 - (_QWORD)v146) < 0x20)
              {
                v159 = *(_QWORD *)(v135 + 40);
              }
              else
              {
                v158 = (v157 >> 3) + 1;
                v159 = v155 - 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
                v160 = v146 - 2;
                v161 = (__int128 *)(v155 - 16);
                v162 = v158 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v163 = *v161;
                  *(v160 - 1) = *(v161 - 1);
                  *v160 = v163;
                  v160 -= 2;
                  v161 -= 2;
                  v162 -= 4;
                }
                while (v162);
                v146 -= v158 & 0x3FFFFFFFFFFFFFFCLL;
                if (v158 == (v158 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_194;
              }
              do
              {
                v172 = *(_QWORD *)(v159 - 8);
                v159 -= 8;
                *--v146 = v172;
              }
              while (v159 != v156);
LABEL_194:
              v155 = *(_QWORD *)(v135 + 32);
LABEL_195:
              *(_QWORD *)(v135 + 32) = v146;
              *(_QWORD *)(v135 + 40) = v149;
              v174 = *(_QWORD *)(v135 + 48);
              *(_QWORD *)(v135 + 48) = v142;
              if (v155)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v135 + 56) + 40))(*(_QWORD *)(v135 + 56), v155, v174 - v155);
              goto LABEL_197;
            }
            goto LABEL_160;
          }
          v147 = *(_QWORD *)(v135 + 88);
          if (v147)
          {
            v137 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 48))(v147);
            v138 = *(_QWORD **)(v135 + 40);
            v148 = *(_QWORD *)(v135 + 48);
            if ((unint64_t)v138 >= v148)
            {
              v150 = *(_QWORD *)(v135 + 32);
              v151 = ((uint64_t)v138 - v150) >> 3;
              v142 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 61)
                goto LABEL_242;
              v152 = v148 - v150;
              if (v152 >> 2 > v142)
                v142 = v152 >> 2;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              if (v142)
              {
                v153 = 8 * v142;
                v154 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v135 + 56) + 16))(*(_QWORD *)(v135 + 56), 8 * v142, 8);
                v146 = (_QWORD *)(v154 + 8 * v151);
                v142 = v154 + v153;
                if (v154)
                  *v146 = v137;
              }
              else
              {
                v146 = (_QWORD *)(8 * v151);
              }
              v149 = v146 + 1;
              v164 = *(_QWORD *)(v135 + 32);
              v155 = *(_QWORD *)(v135 + 40);
              if (v155 == v164)
                goto LABEL_195;
              v165 = v155 - v164 - 8;
              if (v165 < 0x38)
              {
                v167 = *(_QWORD *)(v135 + 40);
              }
              else if ((unint64_t)(v155 - (_QWORD)v146) < 0x20)
              {
                v167 = *(_QWORD *)(v135 + 40);
              }
              else
              {
                v166 = (v165 >> 3) + 1;
                v167 = v155 - 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
                v168 = v146 - 2;
                v169 = (__int128 *)(v155 - 16);
                v170 = v166 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v171 = *v169;
                  *(v168 - 1) = *(v169 - 1);
                  *v168 = v171;
                  v168 -= 2;
                  v169 -= 2;
                  v170 -= 4;
                }
                while (v170);
                v146 -= v166 & 0x3FFFFFFFFFFFFFFCLL;
                if (v166 == (v166 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_194;
              }
              do
              {
                v173 = *(_QWORD *)(v167 - 8);
                v167 -= 8;
                *--v146 = v173;
              }
              while (v167 != v164);
              goto LABEL_194;
            }
LABEL_160:
            if (v138)
              *v138 = v137;
            v149 = v138 + 1;
LABEL_197:
            *(_QWORD *)(v135 + 40) = v149;
            v213[0] = v137;
            v175 = *(_QWORD *)(v135 + 120);
            if (v175)
            {
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v175 + 48))(v175, v213);
              v176 = (_QWORD *)v137[8];
              v176[1] = 0;
              v177 = v128[4];
              *v176 = v177;
              v178 = (_QWORD *)v137[20];
              v179 = v128[5];
              if (v179)
              {
                v180 = (unint64_t *)(v179 + 8);
                do
                  v181 = __ldxr(v180);
                while (__stxr(v181 + 1, v180));
              }
              v182 = (std::__shared_weak_count *)v178[1];
              *v178 = v177;
              v178[1] = v179;
              if (v182)
              {
                v183 = (unint64_t *)&v182->__shared_owners_;
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              v185 = v137[8];
              *(_QWORD *)(v185 + 24) = 0;
              v186 = v128[6];
              *(_QWORD *)(v185 + 16) = v186;
              v187 = v137[20];
              v188 = v128[7];
              if (v188)
              {
                v189 = (unint64_t *)(v188 + 8);
                do
                  v190 = __ldxr(v189);
                while (__stxr(v190 + 1, v189));
              }
              v191 = *(std::__shared_weak_count **)(v187 + 24);
              *(_QWORD *)(v187 + 16) = v186;
              *(_QWORD *)(v187 + 24) = v188;
              if (v191)
              {
                v192 = (unint64_t *)&v191->__shared_owners_;
                do
                  v193 = __ldaxr(v192);
                while (__stlxr(v193 - 1, v192));
                if (!v193)
                {
                  ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                  std::__shared_weak_count::__release_weak(v191);
                }
              }
              v194 = v128[3];
              v196 = *(_QWORD *)(v194 + 56);
              v195 = *(std::__shared_weak_count **)(v194 + 64);
              if (v195)
              {
                v197 = (unint64_t *)&v195->__shared_owners_;
                do
                  v198 = __ldxr(v197);
                while (__stxr(v198 + 1, v197));
              }
              if (v196 && **(_QWORD **)(v196 + 40) == v137[1])
              {
                v202 = v137[2];
                if (v202 && v202 != v196)
                  ggl::PipelineSetup::resetData((uint64_t)v137);
                if (v195)
                {
                  v203 = (unint64_t *)&v195->__shared_owners_;
                  do
                    v204 = __ldxr(v203);
                  while (__stxr(v204 + 1, v203));
                }
                v199 = (std::__shared_weak_count *)v137[3];
                v137[2] = v196;
                v137[3] = v195;
                if (!v199)
                  goto LABEL_234;
                v205 = (unint64_t *)&v199->__shared_owners_;
                do
                  v201 = __ldaxr(v205);
                while (__stlxr(v201 - 1, v205));
              }
              else
              {
                v199 = (std::__shared_weak_count *)v137[3];
                v137[2] = 0;
                v137[3] = 0;
                if (!v199)
                {
LABEL_234:
                  if (v195)
                  {
                    v206 = (unint64_t *)&v195->__shared_owners_;
                    do
                      v207 = __ldaxr(v206);
                    while (__stlxr(v207 - 1, v206));
                    if (!v207)
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                    }
                  }
                  *(_QWORD *)(v134 + 24) = *(_QWORD *)(v128[3] + 72);
                  *(_QWORD *)(v134 + 32) = v137;
                  *(_DWORD *)(v134 + 40) = 127;
                  *(_QWORD *)(v134 + 64) = *((_QWORD *)a1 + 3);
                  v208 = *((_QWORD *)a1 + 3);
                  v128[18] = *(_QWORD *)(**(_QWORD **)(v208 + 64) + 48) - *(_QWORD *)(**(_QWORD **)(v208 + 64) + 40);
                  v128[19] = *(_QWORD *)(*(_QWORD *)(v208 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(v208 + 96) + 40);
                  *(_QWORD *)(v128[11] + v132) |= v133;
                  return;
                }
                v200 = (unint64_t *)&v199->__shared_owners_;
                do
                  v201 = __ldaxr(v200);
                while (__stlxr(v201 - 1, v200));
              }
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
              goto LABEL_234;
            }
          }
LABEL_241:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_242:
          abort();
        }
      }
    }
  }
}

void sub_19FDEEA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  md::PolylineOverlayLayoutContext::~PolylineOverlayLayoutContext((md::PolylineOverlayLayoutContext *)va);
  _Unwind_Resume(a1);
}

void md::PolygonOverlayRenderable::updateWithContext(md::LayoutContext const&,BOOL,BOOL,ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint> *,float)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  _QWORD *v93;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = 48;
  if (!**(_BYTE **)a1)
    v7 = 56;
  v8 = *(_QWORD *)(**(_QWORD **)(v6 + 88) + v7);
  v9 = *(_QWORD *)(v8 + 8);
  if (v9 == *(_QWORD *)v8)
  {
    v20 = *(_QWORD *)(v8 + 88);
    if (!v20)
    {
LABEL_105:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_106:
      abort();
    }
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    v11 = *(_QWORD **)(v8 + 40);
    v21 = *(_QWORD *)(v8 + 48);
    if ((unint64_t)v11 >= v21)
    {
      v23 = *(_QWORD *)(v8 + 32);
      v24 = ((uint64_t)v11 - v23) >> 3;
      v15 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        goto LABEL_106;
      v25 = v21 - v23;
      if (v25 >> 2 > v15)
        v15 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      if (v15)
      {
        v26 = 8 * v15;
        v27 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v8 + 56) + 16))(*(_QWORD *)(v8 + 56), 8 * v15, 8);
        v19 = (_QWORD *)(v27 + 8 * v24);
        v15 = v27 + v26;
        if (v27)
          *v19 = v10;
      }
      else
      {
        v19 = (_QWORD *)(8 * v24);
      }
      v22 = v19 + 1;
      v37 = *(_QWORD *)(v8 + 32);
      v28 = *(_QWORD *)(v8 + 40);
      if (v28 == v37)
        goto LABEL_50;
      v38 = v28 - v37 - 8;
      if (v38 < 0x38)
      {
        v40 = *(_QWORD *)(v8 + 40);
      }
      else if ((unint64_t)(v28 - (_QWORD)v19) < 0x20)
      {
        v40 = *(_QWORD *)(v8 + 40);
      }
      else
      {
        v39 = (v38 >> 3) + 1;
        v40 = v28 - 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = v19 - 2;
        v42 = (__int128 *)(v28 - 16);
        v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *v42;
          *(v41 - 1) = *(v42 - 1);
          *v41 = v44;
          v41 -= 2;
          v42 -= 2;
          v43 -= 4;
        }
        while (v43);
        v19 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_49;
      }
      do
      {
        v46 = *(_QWORD *)(v40 - 8);
        v40 -= 8;
        *--v19 = v46;
      }
      while (v40 != v37);
      goto LABEL_49;
    }
  }
  else
  {
    v10 = *(_QWORD **)(v9 - 8);
    *(_QWORD *)(v8 + 8) = v9 - 8;
    v11 = *(_QWORD **)(v8 + 40);
    v12 = *(_QWORD *)(v8 + 48);
    if ((unint64_t)v11 >= v12)
    {
      v13 = *(_QWORD *)(v8 + 32);
      v14 = ((uint64_t)v11 - v13) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_106;
      v16 = v12 - v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      if (v15)
      {
        v17 = 8 * v15;
        v18 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v8 + 56) + 16))(*(_QWORD *)(v8 + 56), 8 * v15, 8);
        v19 = (_QWORD *)(v18 + 8 * v14);
        v15 = v18 + v17;
        if (v18)
          *v19 = v10;
      }
      else
      {
        v19 = (_QWORD *)(8 * v14);
      }
      v22 = v19 + 1;
      v29 = *(_QWORD *)(v8 + 32);
      v28 = *(_QWORD *)(v8 + 40);
      if (v28 == v29)
        goto LABEL_50;
      v30 = v28 - v29 - 8;
      if (v30 < 0x38)
      {
        v32 = *(_QWORD *)(v8 + 40);
      }
      else if ((unint64_t)(v28 - (_QWORD)v19) < 0x20)
      {
        v32 = *(_QWORD *)(v8 + 40);
      }
      else
      {
        v31 = (v30 >> 3) + 1;
        v32 = v28 - 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = v19 - 2;
        v34 = (__int128 *)(v28 - 16);
        v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *v34;
          *(v33 - 1) = *(v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 2;
          v35 -= 4;
        }
        while (v35);
        v19 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_49;
      }
      do
      {
        v45 = *(_QWORD *)(v32 - 8);
        v32 -= 8;
        *--v19 = v45;
      }
      while (v32 != v29);
LABEL_49:
      v28 = *(_QWORD *)(v8 + 32);
LABEL_50:
      *(_QWORD *)(v8 + 32) = v19;
      *(_QWORD *)(v8 + 40) = v22;
      v47 = *(_QWORD *)(v8 + 48);
      *(_QWORD *)(v8 + 48) = v15;
      if (v28)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 56) + 40))(*(_QWORD *)(v8 + 56), v28, v47 - v28);
      goto LABEL_52;
    }
  }
  if (v11)
    *v11 = v10;
  v22 = v11 + 1;
LABEL_52:
  *(_QWORD *)(v8 + 40) = v22;
  v93 = v10;
  v48 = *(_QWORD *)(v8 + 120);
  if (!v48)
    goto LABEL_105;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v48 + 48))(v48, &v93);
  v49 = (_QWORD *)v10[8];
  v50 = *(_QWORD *)(v6 + 104);
  v51 = *(_QWORD *)(v6 + 112);
  *v49 = v50;
  v49[1] = 0;
  v52 = (_QWORD *)v10[20];
  if (v51)
  {
    v53 = (unint64_t *)(v51 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = (std::__shared_weak_count *)v52[1];
  *v52 = v50;
  v52[1] = v51;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v10[8];
  v59 = *(_QWORD *)(v6 + 120);
  v60 = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v58 + 16) = v59;
  *(_QWORD *)(v58 + 24) = 0;
  v61 = v10[20];
  if (v60)
  {
    v62 = (unint64_t *)(v60 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = *(std::__shared_weak_count **)(v61 + 24);
  *(_QWORD *)(v61 + 16) = v59;
  *(_QWORD *)(v61 + 24) = v60;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = **(_QWORD **)(v6 + 88);
  v68 = v67 + 16;
  if (**(_BYTE **)a1)
    v68 = **(_QWORD **)(v6 + 88);
  v69 = *(_QWORD *)(v67 + 16 * (**(_BYTE **)a1 == 0));
  v70 = *(std::__shared_weak_count **)(v68 + 8);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  if (!v69 || **(_QWORD **)(v69 + 40) != v10[1])
  {
    v73 = (std::__shared_weak_count *)v10[3];
    v10[2] = 0;
    v10[3] = 0;
    if (!v73)
      goto LABEL_91;
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    goto LABEL_89;
  }
  v76 = v10[2];
  if (v76 && v76 != v69)
    ggl::PipelineSetup::resetData((uint64_t)v10);
  if (v70)
  {
    v77 = (unint64_t *)&v70->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v73 = (std::__shared_weak_count *)v10[3];
  v10[2] = v69;
  v10[3] = v70;
  if (v73)
  {
    v79 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v79);
    while (__stlxr(v75 - 1, v79));
LABEL_89:
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_91:
  if (v70)
  {
    v80 = (unint64_t *)&v70->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v82 = *(_QWORD *)(a1 + 24);
  if (v82)
  {
    v83 = v10[8];
    *(_QWORD *)(v83 + 48) = v82;
    *(_QWORD *)(v83 + 56) = 0;
    v84 = v10[20];
    v85 = *(std::__shared_weak_count **)(v84 + 56);
    *(_QWORD *)(v84 + 48) = 0;
    *(_QWORD *)(v84 + 56) = 0;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  v88 = *(_QWORD **)(v10[8] + 32);
  v89 = v88[1];
  v90 = v88[9];
  *(_DWORD *)v90 = 1065353216;
  *(_QWORD *)(v90 + 12) = 0;
  *(_QWORD *)(v90 + 4) = 0;
  *(_DWORD *)(v90 + 20) = 1065353216;
  *(_QWORD *)(v90 + 24) = 0;
  *(_QWORD *)(v90 + 32) = 0;
  *(_DWORD *)(v90 + 40) = 1065353216;
  *(_QWORD *)(v90 + 52) = 0;
  *(_QWORD *)(v90 + 44) = 0;
  *(_DWORD *)(v90 + 60) = 1065353216;
  v91 = *(_DWORD **)(a1 + 8);
  v92 = *(_DWORD **)(a1 + 16);
  *(_DWORD *)(v90 + 64) = *v91;
  *(_DWORD *)(v90 + 68) = v91[1];
  *(_DWORD *)(v90 + 72) = v91[2];
  *(_DWORD *)(v90 + 76) = v91[3];
  *(_OWORD *)(v90 + 80) = xmmword_19FFB3480;
  *(_DWORD *)(v90 + 96) = *v92;
  if (v88[8] > v89)
    v89 = v88[8];
  v88[7] = 0;
  v88[8] = v89;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 80);
  *(_QWORD *)(a3 + 24) = a2;
  *(_QWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(v6 + 24);
}

void md::PolygonOverlayRenderable::collectRenderItems(uint64_t a1, int a2, uint64_t a3, __n128 a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char ***v14;
  char ***v15;
  _QWORD *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  char ***v21;
  char ***v22;
  _QWORD *v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  char ***v28;
  char ***v29;
  _QWORD *v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  char ***v35;
  char ***v36;
  _QWORD *v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  char ***v42;
  char ***v43;
  _QWORD *v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  char ***v49;
  char ***v50;
  _QWORD *v51;
  uint64_t v52;
  char **v53;
  uint64_t v54;
  uint64_t v55;
  char ***v56;
  char ***v57;
  _QWORD *v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char ***v68;
  char ***v69;
  _QWORD *v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  char ***v75;
  char ***v76;
  _QWORD *v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  uint64_t v81;
  char ***v82;
  char ***v83;
  _QWORD *v84;
  uint64_t v85;
  char **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  _QWORD *v97;
  unint64_t v98;
  void (***v99)(void);
  void (**v100)(void);
  unint64_t v101;
  char v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  _QWORD v109[3];
  _QWORD *v110;
  _QWORD v111[3];
  _QWORD *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _QWORD v115[3];
  _QWORD *v116;
  _QWORD v117[3];
  _QWORD *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  _QWORD v125[3];
  _QWORD *v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = a2 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v88 = *(_QWORD *)(v6 + 8);
    v89 = *(_QWORD *)(v6 + 16);
    while (v88 != v89)
    {
      v91 = *(_QWORD **)v88;
      v92 = *(_QWORD *)(*(_QWORD *)v88 + 1328);
      v93 = *(_QWORD *)(*(_QWORD *)v88 + 1320);
      if (v92 != v93)
      {
        v94 = *(_QWORD *)(*(_QWORD *)v88 + 1328);
        do
        {
          v96 = *(void **)(v94 - 24);
          v94 -= 24;
          v95 = v96;
          if (v96)
          {
            *(_QWORD *)(v92 - 16) = v95;
            operator delete(v95);
          }
          v92 = v94;
        }
        while (v94 != v93);
      }
      v91[166] = v93;
      v91[163] = v91[162];
      v97 = (_QWORD *)v91[172];
      if (v97)
      {
        do
        {
          if (v97[1])
          {
            v98 = 0;
            v99 = (void (***)(void))(v97 + 2);
            do
            {
              v100 = *v99;
              v99 += 15;
              (*v100)();
              ++v98;
            }
            while (v98 < v97[1]);
          }
          v97[1] = 0;
          v97 = (_QWORD *)*v97;
        }
        while (v97);
        v90 = v91[172];
      }
      else
      {
        v90 = 0;
      }
      v91[173] = v90;
      v88 += 8;
    }
  }
  v8 = 0;
  v101 = 0;
  while (2)
  {
    switch((char)v8)
    {
      case 0:
      case 1:
      case 12:
        v11 = *(_QWORD *)(a1 + 8 * v8 + 136);
        v102 = v8;
        v125[0] = v11;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          goto LABEL_192;
        (*(void (**)(uint64_t, char *, _QWORD *))(*(_QWORD *)v12 + 48))(v12, &v102, v125);
        goto LABEL_10;
      case 2:
        v41 = *(_QWORD *)(a1 + 40);
        v123[0] = &unk_1E42D2290;
        v123[1] = &v101;
        v123[2] = a3;
        v124 = v123;
        v43 = *(char ****)(v41 + 8);
        v42 = *(char ****)(v41 + 16);
        if (v43 == v42)
          goto LABEL_159;
        do
        {
          v46 = *v43;
          v47 = (uint64_t)v124;
          if (!v124)
            goto LABEL_74;
          if (v124 != v123)
          {
            v47 = (*(uint64_t (**)(void))(*v124 + 16))();
LABEL_74:
            v126 = (_QWORD *)v47;
            goto LABEL_76;
          }
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v123[0] + 24))(v123, v125);
LABEL_76:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v46, 1, (uint64_t)v125, a4);
          v44 = v126;
          if (v126 == v125)
          {
            v44 = v125;
            v45 = 4;
LABEL_69:
            (*(void (**)(void))(*v44 + 8 * v45))();
            goto LABEL_70;
          }
          if (v126)
          {
            v45 = 5;
            goto LABEL_69;
          }
LABEL_70:
          ++v43;
        }
        while (v43 != v42);
        v9 = v124;
        if (v124 == v123)
        {
LABEL_159:
          v9 = v123;
          goto LABEL_8;
        }
LABEL_169:
        if (v9)
        {
LABEL_170:
          v10 = 5;
LABEL_9:
          (*(void (**)(void))(*v9 + 8 * v10))();
        }
LABEL_10:
        v8 = v101 + 1;
        v101 = v8;
        if (v8 < 0xE)
          continue;
        return;
      case 3:
        v20 = *(_QWORD *)(a1 + 40);
        v121[0] = &unk_1E42D22D8;
        v121[1] = &v101;
        v121[2] = a3;
        v122 = v121;
        v22 = *(char ****)(v20 + 8);
        v21 = *(char ****)(v20 + 16);
        if (v22 == v21)
          goto LABEL_153;
        while (1)
        {
          v25 = *v22;
          v26 = (uint64_t)v122;
          if (!v122)
            goto LABEL_35;
          if (v122 != v121)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v121[0] + 24))(v121, v125);
LABEL_37:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v25, 2, (uint64_t)v125, a4);
          v23 = v126;
          if (v126 == v125)
          {
            v23 = v125;
            v24 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_31;
            v24 = 5;
          }
          (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_31:
          if (++v22 == v21)
          {
            v9 = v122;
            if (v122 == v121)
            {
LABEL_153:
              v9 = v121;
              goto LABEL_8;
            }
            goto LABEL_169;
          }
        }
        v26 = (*(uint64_t (**)(void))(*v122 + 16))();
LABEL_35:
        v126 = (_QWORD *)v26;
        goto LABEL_37;
      case 4:
        v55 = *(_QWORD *)(a1 + 40);
        v119[0] = &unk_1E42D2320;
        v119[1] = &v101;
        v119[2] = a3;
        v120 = v119;
        v57 = *(char ****)(v55 + 8);
        v56 = *(char ****)(v55 + 16);
        if (v57 == v56)
          goto LABEL_163;
        while (1)
        {
          v60 = *v57;
          v61 = (uint64_t)v120;
          if (!v120)
            goto LABEL_100;
          if (v120 != v119)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v119[0] + 24))(v119, v125);
LABEL_102:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v60, 4, (uint64_t)v125, a4);
          v58 = v126;
          if (v126 == v125)
          {
            v58 = v125;
            v59 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_96;
            v59 = 5;
          }
          (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_96:
          if (++v57 == v56)
          {
            v9 = v120;
            if (v120 != v119)
              goto LABEL_169;
LABEL_163:
            v9 = v119;
            goto LABEL_8;
          }
        }
        v61 = (*(uint64_t (**)(void))(*v120 + 16))();
LABEL_100:
        v126 = (_QWORD *)v61;
        goto LABEL_102;
      case 5:
        v67 = *(_QWORD *)(a1 + 40);
        v117[0] = &unk_1E42D2368;
        v117[1] = &v101;
        v117[2] = a3;
        v118 = v117;
        v69 = *(char ****)(v67 + 8);
        v68 = *(char ****)(v67 + 16);
        if (v69 == v68)
          goto LABEL_165;
        while (1)
        {
          v72 = *v69;
          v73 = (uint64_t)v118;
          if (!v118)
            goto LABEL_119;
          if (v118 != v117)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v117[0] + 24))(v117, v125);
LABEL_121:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v72, 8, (uint64_t)v125, a4);
          v70 = v126;
          if (v126 == v125)
          {
            v70 = v125;
            v71 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_115;
            v71 = 5;
          }
          (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_115:
          if (++v69 == v68)
          {
            v9 = v118;
            if (v118 != v117)
              goto LABEL_169;
LABEL_165:
            v9 = v117;
            goto LABEL_8;
          }
        }
        v73 = (*(uint64_t (**)(void))(*v118 + 16))();
LABEL_119:
        v126 = (_QWORD *)v73;
        goto LABEL_121;
      case 6:
        v48 = *(_QWORD *)(a1 + 40);
        v115[0] = &unk_1E42D23B0;
        v115[1] = &v101;
        v115[2] = a3;
        v116 = v115;
        v50 = *(char ****)(v48 + 8);
        v49 = *(char ****)(v48 + 16);
        if (v50 == v49)
          goto LABEL_161;
        while (1)
        {
          v53 = *v50;
          v54 = (uint64_t)v116;
          if (!v116)
            goto LABEL_87;
          if (v116 != v115)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v115[0] + 24))(v115, v125);
LABEL_89:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v53, 16, (uint64_t)v125, a4);
          v51 = v126;
          if (v126 == v125)
          {
            v51 = v125;
            v52 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_83;
            v52 = 5;
          }
          (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_83:
          if (++v50 == v49)
          {
            v9 = v116;
            if (v116 != v115)
              goto LABEL_169;
LABEL_161:
            v9 = v115;
LABEL_8:
            v10 = 4;
            goto LABEL_9;
          }
        }
        v54 = (*(uint64_t (**)(void))(*v116 + 16))();
LABEL_87:
        v126 = (_QWORD *)v54;
        goto LABEL_89;
      case 7:
        v81 = *(_QWORD *)(a1 + 40);
        v113[0] = &unk_1E42D23F8;
        v113[1] = &v101;
        v113[2] = a3;
        v114 = v113;
        v83 = *(char ****)(v81 + 8);
        v82 = *(char ****)(v81 + 16);
        if (v83 == v82)
          goto LABEL_171;
        while (1)
        {
          v86 = *v83;
          v87 = (uint64_t)v114;
          if (!v114)
            goto LABEL_145;
          if (v114 != v113)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v113[0] + 24))(v113, v125);
LABEL_147:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v86, 32, (uint64_t)v125, a4);
          v84 = v126;
          if (v126 == v125)
          {
            v84 = v125;
            v85 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_141;
            v85 = 5;
          }
          (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_141:
          if (++v83 == v82)
          {
            v9 = v114;
            if (v114 != v113)
              goto LABEL_169;
LABEL_171:
            v9 = v113;
            goto LABEL_8;
          }
        }
        v87 = (*(uint64_t (**)(void))(*v114 + 16))();
LABEL_145:
        v126 = (_QWORD *)v87;
        goto LABEL_147;
      case 8:
        v34 = *(_QWORD *)(a1 + 40);
        v111[0] = &unk_1E42D2440;
        v111[1] = &v101;
        v111[2] = a3;
        v112 = v111;
        v36 = *(char ****)(v34 + 8);
        v35 = *(char ****)(v34 + 16);
        if (v36 == v35)
          goto LABEL_157;
        while (1)
        {
          v39 = *v36;
          v40 = (uint64_t)v112;
          if (!v112)
            goto LABEL_61;
          if (v112 != v111)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v111[0] + 24))(v111, v125);
LABEL_63:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v39, 64, (uint64_t)v125, a4);
          v37 = v126;
          if (v126 == v125)
          {
            v37 = v125;
            v38 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_57;
            v38 = 5;
          }
          (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_57:
          if (++v36 == v35)
          {
            v9 = v112;
            if (v112 == v111)
            {
LABEL_157:
              v9 = v111;
              goto LABEL_8;
            }
            goto LABEL_169;
          }
        }
        v40 = (*(uint64_t (**)(void))(*v112 + 16))();
LABEL_61:
        v126 = (_QWORD *)v40;
        goto LABEL_63;
      case 9:
        v74 = *(_QWORD *)(a1 + 40);
        v109[0] = &unk_1E42D2488;
        v109[1] = &v101;
        v109[2] = a3;
        v110 = v109;
        v76 = *(char ****)(v74 + 8);
        v75 = *(char ****)(v74 + 16);
        if (v76 == v75)
          goto LABEL_167;
        while (1)
        {
          v79 = *v76;
          v80 = (uint64_t)v110;
          if (!v110)
            goto LABEL_132;
          if (v110 != v109)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v109[0] + 24))(v109, v125);
LABEL_134:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v79, 128, (uint64_t)v125, a4);
          v77 = v126;
          if (v126 == v125)
          {
            v77 = v125;
            v78 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_128;
            v78 = 5;
          }
          (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_128:
          if (++v76 == v75)
          {
            v9 = v110;
            if (v110 != v109)
              goto LABEL_169;
LABEL_167:
            v9 = v109;
            goto LABEL_8;
          }
        }
        v80 = (*(uint64_t (**)(void))(*v110 + 16))();
LABEL_132:
        v126 = (_QWORD *)v80;
        goto LABEL_134;
      case 10:
        v13 = *(_QWORD *)(a1 + 40);
        v107[0] = &unk_1E42D24D0;
        v107[1] = &v101;
        v107[2] = a3;
        v108 = v107;
        v15 = *(char ****)(v13 + 8);
        v14 = *(char ****)(v13 + 16);
        if (v15 == v14)
          goto LABEL_7;
        while (1)
        {
          v18 = *v15;
          v19 = (uint64_t)v108;
          if (!v108)
            goto LABEL_22;
          if (v108 != v107)
            break;
          v126 = v125;
          a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v107[0] + 24))(v107, v125);
LABEL_24:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v18, 256, (uint64_t)v125, a4);
          v16 = v126;
          if (v126 == v125)
          {
            v16 = v125;
            v17 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_18;
            v17 = 5;
          }
          (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
          if (++v15 == v14)
          {
            v9 = v108;
            if (v108 == v107)
            {
LABEL_7:
              v9 = v107;
              goto LABEL_8;
            }
            goto LABEL_169;
          }
        }
        v19 = (*(uint64_t (**)(void))(*v108 + 16))();
LABEL_22:
        v126 = (_QWORD *)v19;
        goto LABEL_24;
      case 11:
        v27 = *(_QWORD *)(a1 + 40);
        v105[0] = &unk_1E42D2518;
        v105[1] = &v101;
        v105[2] = a3;
        v106 = v105;
        v29 = *(char ****)(v27 + 8);
        v28 = *(char ****)(v27 + 16);
        if (v29 == v28)
          goto LABEL_155;
        break;
      case 13:
        v62 = *(_QWORD **)(a1 + 304);
        v103[0] = &off_1E42D2560;
        v103[1] = &v101;
        v9 = v103;
        v103[2] = a3;
        v104 = v103;
        v64 = v62[8];
        v63 = v62[9];
        if ((unint64_t)(v63 - v64) < 9)
          goto LABEL_8;
        v65 = v62[11];
        v66 = 1;
        do
        {
          if ((*(_QWORD *)(v65 + 8 * (v66 >> 6)) & (1 << v66)) != 0)
          {
            v125[0] = *(_QWORD *)(v64 + 8 * v66);
            if (!v104)
            {
LABEL_192:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            (*(void (**)(_QWORD *, _QWORD *))(*v104 + 48))(v104, v125);
            v65 = v62[11];
            *(_QWORD *)(v65 + 8 * (v66 >> 6)) &= ~(1 << v66);
            v64 = v62[8];
            v63 = v62[9];
          }
          ++v66;
        }
        while (v66 < (v63 - v64) >> 3);
        v9 = v104;
        if (v104 == v103)
        {
          v9 = v103;
          v10 = 4;
          goto LABEL_9;
        }
        if (v104)
          goto LABEL_170;
        goto LABEL_10;
      default:
        goto LABEL_10;
    }
    break;
  }
  while (1)
  {
    v32 = *v29;
    v33 = (uint64_t)v106;
    if (!v106)
      goto LABEL_48;
    if (v106 != v105)
      break;
    v126 = v125;
    a4.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD *))(v105[0] + 24))(v105, v125);
LABEL_50:
    md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v32, 512, (uint64_t)v125, a4);
    v30 = v126;
    if (v126 == v125)
    {
      v30 = v125;
      v31 = 4;
    }
    else
    {
      if (!v126)
        goto LABEL_44;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_44:
    if (++v29 == v28)
    {
      v9 = v106;
      if (v106 == v105)
      {
LABEL_155:
        v9 = v105;
        goto LABEL_8;
      }
      goto LABEL_169;
    }
  }
  v33 = (*(uint64_t (**)(void))(*v106 + 16))();
LABEL_48:
  v126 = (_QWORD *)v33;
  goto LABEL_50;
}

void sub_19FDEFB38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FDEFB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  char *v43;
  uint64_t v44;

  v43 = a14;
  if (a14 == &a11)
  {
    v44 = 4;
    v43 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(exception_object);
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D2560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D2560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v7 = v3;
  v6 = v2;
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDEFFB8);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v7, &v6);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D2518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF0074);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D24D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D24D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF0130);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D2488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF01ECLL);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D2440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF02A8);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D23F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D23F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF0364);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D23B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D23B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF0420);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D2368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF04DCLL);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D2320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF0598);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D22D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D22D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19FDF0654);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42D2290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  md::ARWalkingLabelLayoutDedupingGroup *v6;
  uint64_t v7;
  char v8;

  v3 = *a3;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v8 = v4;
  v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(v6);
  }
}

void md::ARWalkingLabelLayoutDedupingGroup::onLabelAdded(md::ARWalkingLabelLayoutDedupingGroup *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  _QWORD **v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  size_t v62;
  size_t v63;
  size_t v64;
  _QWORD *j;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  void *v97;
  void *v98;

  v5 = (*(uint64_t (**)(md::ARWalkingLabelLayoutDedupingGroup *))(*(_QWORD *)this + 56))(this);
  if (v5
    && (v6 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)this + 21, v5)) != 0)
  {
    v7 = v6[3];
  }
  else
  {
    v7 = *((_QWORD *)this + 10) + 1;
    *((_QWORD *)this + 10) = v7;
  }
  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *((_QWORD *)this + 22);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v2 = v10 % v11;
    }
    else
    {
      v2 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*((_QWORD *)this + 21) + 8 * v2);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == a2)
                goto LABEL_86;
            }
            else if ((v16 & (v11 - 1)) != v2)
            {
              goto LABEL_26;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_26;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == a2)
              goto LABEL_86;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v2)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_26:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = a2;
  v14[3] = 0;
  v17 = (float)(unint64_t)(*((_QWORD *)this + 24) + 1);
  v18 = *((float *)this + 50);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *((_QWORD *)this + 22);
    }
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_63;
      v35 = vcvtps_u32_f32((float)*((unint64_t *)this + 24) / *((float *)this + 50));
      if (v11 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime >= v11)
      {
        v11 = *((_QWORD *)this + 22);
LABEL_63:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v2 = v10 % v11;
          else
            v2 = v10;
        }
        else
        {
          v2 = (v11 - 1) & v10;
        }
        goto LABEL_76;
      }
      if (!prime)
      {
        v97 = (void *)*((_QWORD *)this + 21);
        *((_QWORD *)this + 21) = 0;
        if (v97)
          operator delete(v97);
        v11 = 0;
        *((_QWORD *)this + 22) = 0;
        goto LABEL_63;
      }
    }
    if (prime >> 61)
      goto LABEL_208;
    v23 = operator new(8 * prime);
    v24 = (void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)this + 22) = prime;
    do
      *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (char *)this + 184;
    v26 = (_QWORD *)*((_QWORD *)this + 23);
    if (!v26)
    {
LABEL_62:
      v11 = prime;
      goto LABEL_63;
    }
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else
        {
          v33 = *((_QWORD *)this + 21);
          if (*(_QWORD *)(v33 + 8 * v32))
          {
            *v26 = *i;
            v34 = 8 * v32;
            *i = **(_QWORD **)(*((_QWORD *)this + 21) + v34);
            **(_QWORD **)(*((_QWORD *)this + 21) + v34) = i;
          }
          else
          {
            *(_QWORD *)(v33 + 8 * v32) = v26;
            v26 = i;
            v30 = v32;
          }
        }
      }
      goto LABEL_62;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v28) = v27;
    v38 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_62;
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 != v28)
      {
        v41 = *((_QWORD *)this + 21);
        if (!*(_QWORD *)(v41 + 8 * v40))
        {
          *(_QWORD *)(v41 + 8 * v40) = v26;
          goto LABEL_67;
        }
        *v26 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*((_QWORD *)this + 21) + v39);
        **(_QWORD **)(*((_QWORD *)this + 21) + v39) = v38;
        v38 = v26;
      }
      v40 = v28;
LABEL_67:
      v26 = v38;
      v38 = (_QWORD *)*v38;
      v28 = v40;
      if (!v38)
        goto LABEL_62;
    }
  }
LABEL_76:
  v42 = *((_QWORD *)this + 21);
  v43 = *(_QWORD **)(v42 + 8 * v2);
  if (v43)
  {
    *v14 = *v43;
LABEL_84:
    *v43 = v14;
    goto LABEL_85;
  }
  *v14 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v14;
  *(_QWORD *)(v42 + 8 * v2) = (char *)this + 184;
  if (*v14)
  {
    v44 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v44 >= v11)
        v44 %= v11;
    }
    else
    {
      v44 &= v11 - 1;
    }
    v43 = (_QWORD *)(*((_QWORD *)this + 21) + 8 * v44);
    goto LABEL_84;
  }
LABEL_85:
  ++*((_QWORD *)this + 24);
LABEL_86:
  v14[3] = v7;
  v45 = *((_QWORD *)this + 17);
  if (v45)
  {
    v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v45)
        v2 = v7 % v45;
    }
    else
    {
      v2 = (v45 - 1) & v7;
    }
    v47 = *(_QWORD ***)(*((_QWORD *)this + 16) + 8 * v2);
    if (v47)
    {
      v48 = *v47;
      if (*v47)
      {
        if (v46.u32[0] < 2uLL)
        {
          while (1)
          {
            v50 = v48[1];
            if (v50 == v7)
            {
              if (v48[2] == v7)
                goto LABEL_167;
            }
            else if ((v50 & (v45 - 1)) != v2)
            {
              goto LABEL_107;
            }
            v48 = (_QWORD *)*v48;
            if (!v48)
              goto LABEL_107;
          }
        }
        do
        {
          v49 = v48[1];
          if (v49 == v7)
          {
            if (v48[2] == v7)
              goto LABEL_167;
          }
          else
          {
            if (v49 >= v45)
              v49 %= v45;
            if (v49 != v2)
              break;
          }
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
    }
  }
LABEL_107:
  v51 = (_QWORD *)((char *)this + 144);
  v48 = operator new(0x30uLL);
  *v48 = 0;
  v48[1] = v7;
  v48[2] = v7;
  v48[3] = 0;
  v48[4] = 0;
  v48[5] = 0;
  v52 = (float)(unint64_t)(*((_QWORD *)this + 19) + 1);
  v53 = *((float *)this + 40);
  if (v45 && (float)(v53 * (float)v45) >= v52)
  {
    v7 = v2;
    goto LABEL_157;
  }
  v54 = 1;
  if (v45 >= 3)
    v54 = (v45 & (v45 - 1)) != 0;
  v55 = v54 | (2 * v45);
  v56 = vcvtps_u32_f32(v52 / v53);
  if (v55 <= v56)
    v57 = v56;
  else
    v57 = v55;
  if (v57 == 1)
  {
    v57 = 2;
  }
  else if ((v57 & (v57 - 1)) != 0)
  {
    v57 = std::__next_prime(v57);
    v45 = *((_QWORD *)this + 17);
  }
  if (v57 > v45)
  {
LABEL_120:
    if (v57 >> 61)
      goto LABEL_208;
    v58 = operator new(8 * v57);
    v59 = (void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v58;
    if (v59)
      operator delete(v59);
    v60 = 0;
    *((_QWORD *)this + 17) = v57;
    do
      *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v60++) = 0;
    while (v57 != v60);
    v61 = (_QWORD *)*v51;
    if (!*v51)
      goto LABEL_144;
    v62 = v61[1];
    v63 = v57 - 1;
    if ((v57 & (v57 - 1)) == 0)
    {
      v64 = v62 & v63;
      *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v64) = v51;
      for (j = (_QWORD *)*v61; *v61; j = (_QWORD *)*v61)
      {
        v66 = j[1] & v63;
        if (v66 == v64)
        {
          v61 = j;
        }
        else
        {
          v67 = *((_QWORD *)this + 16);
          if (*(_QWORD *)(v67 + 8 * v66))
          {
            *v61 = *j;
            v68 = 8 * v66;
            *j = **(_QWORD **)(*((_QWORD *)this + 16) + v68);
            **(_QWORD **)(*((_QWORD *)this + 16) + v68) = j;
          }
          else
          {
            *(_QWORD *)(v67 + 8 * v66) = v61;
            v61 = j;
            v64 = v66;
          }
        }
      }
LABEL_144:
      v45 = v57;
      goto LABEL_145;
    }
    if (v62 >= v57)
      v62 %= v57;
    *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v62) = v51;
    v72 = (_QWORD *)*v61;
    if (!*v61)
      goto LABEL_144;
    while (1)
    {
      v74 = v72[1];
      if (v74 >= v57)
        v74 %= v57;
      if (v74 != v62)
      {
        v75 = *((_QWORD *)this + 16);
        if (!*(_QWORD *)(v75 + 8 * v74))
        {
          *(_QWORD *)(v75 + 8 * v74) = v61;
          goto LABEL_149;
        }
        *v61 = *v72;
        v73 = 8 * v74;
        *v72 = **(_QWORD **)(*((_QWORD *)this + 16) + v73);
        **(_QWORD **)(*((_QWORD *)this + 16) + v73) = v72;
        v72 = v61;
      }
      v74 = v62;
LABEL_149:
      v61 = v72;
      v72 = (_QWORD *)*v72;
      v62 = v74;
      if (!v72)
        goto LABEL_144;
    }
  }
  if (v57 >= v45)
    goto LABEL_145;
  v69 = vcvtps_u32_f32((float)*((unint64_t *)this + 19) / *((float *)this + 40));
  if (v45 < 3 || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
  {
    v69 = std::__next_prime(v69);
  }
  else
  {
    v71 = 1 << -(char)__clz(v69 - 1);
    if (v69 >= 2)
      v69 = v71;
  }
  if (v57 <= v69)
    v57 = v69;
  if (v57 < v45)
  {
    if (!v57)
    {
      v98 = (void *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = 0;
      if (v98)
        operator delete(v98);
      v45 = 0;
      *((_QWORD *)this + 17) = 0;
      goto LABEL_145;
    }
    goto LABEL_120;
  }
  v45 = *((_QWORD *)this + 17);
LABEL_145:
  if ((v45 & (v45 - 1)) != 0)
  {
    if (v7 >= v45)
      v7 %= v45;
  }
  else
  {
    v7 &= v45 - 1;
  }
LABEL_157:
  v76 = *((_QWORD *)this + 16);
  v77 = *(_QWORD **)(v76 + 8 * v7);
  if (v77)
  {
    *v48 = *v77;
LABEL_165:
    *v77 = v48;
    goto LABEL_166;
  }
  *v48 = *v51;
  *v51 = v48;
  *(_QWORD *)(v76 + 8 * v7) = v51;
  if (*v48)
  {
    v78 = *(_QWORD *)(*v48 + 8);
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v78 >= v45)
        v78 %= v45;
    }
    else
    {
      v78 &= v45 - 1;
    }
    v77 = (_QWORD *)(*((_QWORD *)this + 16) + 8 * v78);
    goto LABEL_165;
  }
LABEL_166:
  ++*((_QWORD *)this + 19);
LABEL_167:
  v80 = (unint64_t *)v48[4];
  v79 = v48[5];
  if ((unint64_t)v80 < v79)
  {
    *v80 = a2;
    v81 = v80 + 1;
    goto LABEL_189;
  }
  v82 = (char *)v48[3];
  v83 = ((char *)v80 - v82) >> 3;
  v84 = v83 + 1;
  if ((unint64_t)(v83 + 1) >> 61)
    abort();
  v85 = v79 - (_QWORD)v82;
  if (v85 >> 2 > v84)
    v84 = v85 >> 2;
  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
    v86 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v86 = v84;
  if (!v86)
  {
    v87 = 0;
    goto LABEL_179;
  }
  if (v86 >> 61)
LABEL_208:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v87 = (char *)operator new(8 * v86);
LABEL_179:
  v88 = (unint64_t *)&v87[8 * v83];
  v89 = &v87[8 * v86];
  *v88 = a2;
  v81 = v88 + 1;
  if (v80 != (unint64_t *)v82)
  {
    v90 = (char *)v80 - v82 - 8;
    if (v90 < 0x58)
      goto LABEL_212;
    if ((unint64_t)(v82 - v87) < 0x20)
      goto LABEL_212;
    v91 = (v90 >> 3) + 1;
    v92 = &v87[8 * v83 - 16];
    v93 = v80 - 2;
    v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v95 = *(_OWORD *)v93;
      *((_OWORD *)v92 - 1) = *((_OWORD *)v93 - 1);
      *(_OWORD *)v92 = v95;
      v92 -= 32;
      v93 -= 4;
      v94 -= 4;
    }
    while (v94);
    v88 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
    v80 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_212:
      do
      {
        v96 = *--v80;
        *--v88 = v96;
      }
      while (v80 != (unint64_t *)v82);
    }
    v80 = (unint64_t *)v48[3];
  }
  v48[3] = v88;
  v48[4] = v81;
  v48[5] = v89;
  if (v80)
    operator delete(v80);
LABEL_189:
  v48[4] = v81;
}

void sub_19FDF112C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FDF1140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabelLayoutDedupingGroup::onLabelRemoved(int8x8_t *this, md::LabelBase *a2)
{
  _QWORD *v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  md::LabelBase **v14;
  md::LabelBase **v15;
  md::LabelBase **v16;
  int8x8_t *v17;
  _QWORD *v18;
  unint64_t *v19;
  void *__p;

  v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&this[21], (unint64_t)a2);
  if (!v4)
    return;
  v5 = this[17];
  if (!*(_QWORD *)&v5)
    return;
  v6 = v4[3];
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4[3];
    if (v6 >= *(_QWORD *)&v5)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v6;
  }
  v9 = *(_QWORD **)(*(_QWORD *)&this[16] + 8 * v8);
  if (!v9)
    return;
  v10 = (_QWORD *)*v9;
  if (!*v9)
    return;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == v6)
      {
        if (v10[2] == v6)
          goto LABEL_23;
      }
      else if ((v13 & v11) != v8)
      {
        return;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        return;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == v6)
      break;
    if (v12 >= *(_QWORD *)&v5)
      v12 %= *(_QWORD *)&v5;
    if (v12 != v8)
      return;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      return;
  }
  if (v10[2] != v6)
    goto LABEL_12;
LABEL_23:
  v14 = (md::LabelBase **)v10[4];
  v15 = (md::LabelBase **)v10[3];
  if (v15 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        v15 = (md::LabelBase **)v10[4];
        break;
      }
    }
  }
  if (v15 != v14)
  {
    v16 = v15 + 1;
    if (v15 + 1 != v14)
    {
      do
      {
        if (*v16 != a2)
          *v15++ = *v16;
        ++v16;
      }
      while (v16 != v14);
      v14 = (md::LabelBase **)v10[4];
    }
  }
  if (v15 != v14)
  {
    v14 = v15;
    v10[4] = v15;
  }
  v17 = this + 26;
  v18 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v17, (unint64_t)a2);
  if (v18)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v17, v18);
    if (__p)
      operator delete(__p);
    v14 = (md::LabelBase **)v10[4];
  }
  v19 = (unint64_t *)v10[3];
  if (v19 != (unint64_t *)v14)
    std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase *&>((uint64_t)v17, *v19, *v19);
}

uint64_t md::ARWalkingLabelLayoutDedupingGroup::getAlternateLayout(md::ARWalkingLabelLayoutDedupingGroup *this, md::LabelBase *a2)
{
  return 0;
}

void std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase *&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FDF1664(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(int8x8_t *this, const md::LabelLayoutContext *a2)
{
  _QWORD *v2;
  int8x8_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  float64x2_t **v10;
  float64x2_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *__p;

  v2 = (_QWORD *)this[18];
  if (v2)
  {
    v5 = this + 26;
    do
    {
      v7 = (unint64_t *)v2[3];
      v8 = (unint64_t *)v2[4];
      if (v7 != v8)
      {
        v9 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v5, *v7);
        if (v9)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5, v9);
          if (__p)
            operator delete(__p);
          v7 = (unint64_t *)v2[3];
          v8 = (unint64_t *)v2[4];
        }
        if (v7 == v8)
        {
LABEL_15:
          v12 = this[12];
          if (v12)
          {
            v13 = v2[2];
            v14 = (uint8x8_t)vcnt_s8(v12);
            v14.i16[0] = vaddlv_u8(v14);
            if (v14.u32[0] > 1uLL)
            {
              v15 = v2[2];
              if (*(_QWORD *)&v12 <= v13)
                v15 = v13 % *(_QWORD *)&v12;
            }
            else
            {
              v15 = (*(_QWORD *)&v12 - 1) & v13;
            }
            v16 = *(_QWORD **)(*(_QWORD *)&this[11] + 8 * v15);
            if (v16)
            {
              v17 = (_QWORD *)*v16;
              if (v17)
              {
                if (v14.u32[0] < 2uLL)
                {
                  v18 = *(_QWORD *)&v12 - 1;
                  while (1)
                  {
                    v20 = v17[1];
                    if (v20 == v13)
                    {
                      if (v17[2] == v13)
                        goto LABEL_3;
                    }
                    else if ((v20 & v18) != v15)
                    {
                      goto LABEL_35;
                    }
                    v17 = (_QWORD *)*v17;
                    if (!v17)
                      goto LABEL_35;
                  }
                }
                do
                {
                  v19 = v17[1];
                  if (v19 == v13)
                  {
                    if (v17[2] == v13)
                      goto LABEL_3;
                  }
                  else
                  {
                    if (v19 >= *(_QWORD *)&v12)
                      v19 %= *(_QWORD *)&v12;
                    if (v19 != v15)
                      break;
                  }
                  v17 = (_QWORD *)*v17;
                }
                while (v17);
              }
            }
          }
LABEL_35:
          if (v7 == v8)
          {
LABEL_49:
            v7 = v8;
          }
          else
          {
            do
            {
              while (1)
              {
                v21 = *v7;
                if (!*(_BYTE *)(*v7 + 1290))
                  break;
                v22 = *(float *)(v21 + 764);
                if (*(double *)(v21 + 792) > v22 || *(double *)(v21 + 800) < v22)
                  break;
                if (++v7 == v8)
                  goto LABEL_49;
              }
              if (v7 == --v8)
                break;
              while (1)
              {
                v23 = *v8;
                if (*(_BYTE *)(*v8 + 1290))
                {
                  v24 = *(float *)(v23 + 764);
                  if (*(double *)(v23 + 792) <= v24 && *(double *)(v23 + 800) >= v24)
                    break;
                }
                if (--v8 == v7)
                  goto LABEL_50;
              }
              *v7++ = v23;
              *v8 = v21;
            }
            while (v7 != v8);
          }
LABEL_50:
          v25 = v2[3];
          v26 = 126 - 2 * __clz(((uint64_t)v7 - v25) >> 3);
          if (v7 == (unint64_t *)v25)
            v27 = 0;
          else
            v27 = v26;
          std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,false>(v25, (uint64_t *)v7, v27, 1);
          v6 = *(_QWORD *)v2[3];
        }
        else
        {
          v10 = (float64x2_t **)v7;
          while (1)
          {
            v11 = vsubq_f64(*(float64x2_t *)((char *)a2 + 136), (*v10)[37]);
            if (vaddvq_f64(vmulq_f64(v11, v11)) / ((*v10)[14].f64[0] * (*v10)[14].f64[0]) < 16.0)
              break;
            if (++v10 == (float64x2_t **)v8)
              goto LABEL_15;
          }
LABEL_3:
          v6 = *v7;
        }
        std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase * const&>((uint64_t)v5, v6, v6);
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FDF1C08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(_DWORD *)(*v8 + 48) < *(_DWORD *)(*v9 + 48))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(_DWORD *)(v81 + 48);
        v83 = *(_DWORD *)(*v9 + 48);
        v84 = *v8;
        v85 = *(_DWORD *)(*v8 + 48);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(_DWORD *)(v135 + 48) < *(_DWORD *)(*v9 + 48))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(_DWORD *)(*v8 + 48) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(_DWORD *)(v87 + 48);
        v92 = *(_DWORD *)(*v9 + 48);
        v93 = *(_DWORD *)(v89 + 48);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(_DWORD *)(*v8 + 48) < *(_DWORD *)(v87 + 48))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(_DWORD *)(v140 + 48);
                if (v142 < *(_DWORD *)(v141 + 48))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(_DWORD *)(*v9 + 48))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned int *)(v112 + 48);
                    if (result < *(_DWORD *)(v111[1] + 48))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(_DWORD *)(*v113 + 48);
                  if (*(_DWORD *)(v112 + 48) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11 && *(_DWORD *)(v112 + 48) < *(_DWORD *)(v111[1] + 48))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(_DWORD *)(v112 + 48) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned int *)(v124 + 48);
                    if (result < *(_DWORD *)(v123[1] + 48))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(_DWORD *)(*v123 + 48);
                    if (*(_DWORD *)(*v130 + 48) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(_DWORD *)(*v130 + 48) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(_DWORD *)(*v8 + 48);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(_DWORD *)(*v13 + 48);
            v19 = *(_DWORD *)(*v9 + 48);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(_DWORD *)(*v13 + 48) < *(_DWORD *)(*v9 + 48))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(_DWORD *)(*v8 + 48) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(_DWORD *)(v29 + 48);
            v32 = *(_DWORD *)(v30 + 48);
            v33 = *(a2 - 2);
            v34 = *(_DWORD *)(v33 + 48);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(_DWORD *)(*v27 + 48) < *(_DWORD *)(v35 + 48))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(_DWORD *)(v36 + 48) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(_DWORD *)(v40 + 48);
            v43 = *(_DWORD *)(v41 + 48);
            v44 = *(a2 - 3);
            v45 = *(_DWORD *)(v44 + 48);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(_DWORD *)(*v38 + 48) < *(_DWORD *)(v46 + 48))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(_DWORD *)(v47 + 48) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(_DWORD *)(*v13 + 48);
            v51 = *(_DWORD *)(*v27 + 48);
            v52 = *v38;
            v53 = *(_DWORD *)(*v38 + 48);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(_DWORD *)(*v9 + 48);
          v23 = *(_DWORD *)(*v13 + 48);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(_DWORD *)(*v9 + 48) < *(_DWORD *)(*v13 + 48))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(_DWORD *)(*v8 + 48) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(_DWORD *)(v55 + 48);
            if (*(_DWORD *)(*(v9 - 1) + 48) < v56)
              goto LABEL_54;
            if (v56 >= *(_DWORD *)(*v8 + 48))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(_DWORD *)(*v9 + 48));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(_DWORD *)(v70 + 48));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(_DWORD *)(v73 + 48));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(_DWORD *)(v76 + 48));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(_DWORD *)(v77 + 48));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(_DWORD *)(v55 + 48);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(_DWORD *)(v60 + 48) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(_DWORD *)(v63 + 48) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(_DWORD *)(v62 + 48) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(_DWORD *)(v67 + 48) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(_DWORD *)(v68 + 48) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(_DWORD *)(v102 + 48);
              if (v104 < *(_DWORD *)(v103 + 48))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(_DWORD *)(v103 + 48));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(_DWORD *)(v137 + 48);
            if (v139 < *(_DWORD *)(v138 + 48))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(_DWORD *)(v138 + 48));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*a2 + 48);
  v8 = *(_DWORD *)(*result + 48);
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 48);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_DWORD *)(*a2 + 48) < *(_DWORD *)(*result + 48))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_DWORD *)(*a3 + 48) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 48) < *(_DWORD *)(v5 + 48))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 48) < *(_DWORD *)(*a2 + 48))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_DWORD *)(*a2 + 48) < *(_DWORD *)(*result + 48))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_DWORD *)(*a5 + 48) < *(_DWORD *)(*a4 + 48))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_DWORD *)(*a4 + 48) < *(_DWORD *)(*a3 + 48))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(*a3 + 48) < *(_DWORD *)(*a2 + 48))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_DWORD *)(*a2 + 48) < *(_DWORD *)(*result + 48))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_DWORD *)(v3 + 48) < *(_DWORD *)(*a1 + 48))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 48);
      v17 = *(_DWORD *)(*a1 + 48);
      v18 = *(a2 - 1);
      v19 = *(_DWORD *)(v18 + 48);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(v40 + 48) < *(_DWORD *)(*a1 + 48))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 48) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_DWORD *)(v21 + 48);
      v26 = *(_DWORD *)(*a1 + 48);
      v27 = *(_DWORD *)(v23 + 48);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 48) < *(_DWORD *)(v21 + 48))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_DWORD *)(v43 + 48);
        if (v45 < *(_DWORD *)(v44 + 48))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 48))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_DWORD *)(v7 + 48);
      v10 = *(_DWORD *)(*a1 + 48);
      v11 = *(_DWORD *)(v5 + 48);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(_DWORD *)(*v31 + 48);
        if (v37 < *(_DWORD *)(v36 + 48))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 48));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void md::CoalescedJunction::~CoalescedJunction(md::CoalescedJunction *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4292450;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E428E0C8;
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4292450;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E428E0C8;
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

unint64_t md::MuninRoadGraph::MuninRoadGraph(unint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  void **v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD **v40;
  size_t v41;
  size_t v42;
  size_t v43;
  _QWORD *i;
  size_t v45;
  uint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  void *v62;
  uint64_t j;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  int8x8_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  __int32 v71;
  uint64_t v72;
  int8x8_t v73;
  __int32 v74;
  __int32 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  unint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  float v88;
  uint64_t v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  const void **v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint8x8_t v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD **v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  _BOOL8 v127;
  unint64_t v128;
  unint64_t v129;
  size_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  size_t v135;
  size_t v136;
  size_t v137;
  _QWORD *k;
  size_t v139;
  uint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  size_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  int8x8_t *v150;
  int8x8_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint8x8_t v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint8x8_t v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t **v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t *v176;
  uint64_t *v177;
  void **v178;
  uint64_t *v179;
  uint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t *v183;
  _QWORD *v184;
  uint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  _BYTE *v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  const md::MuninRoadEdge **v205;
  const md::MuninRoadEdge **m;
  const md::MuninRoadEdge **v207;
  const md::MuninRoadEdge **n;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  _OWORD *v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  _BYTE *v236;
  unint64_t *v237;
  char *v238;
  unint64_t v239;
  char *v240;
  unint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint8x8_t v248;
  unint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  unint64_t v252;
  uint64_t v253;
  float v254;
  float v255;
  _BOOL8 v256;
  unint64_t v257;
  unint64_t v258;
  size_t v259;
  unint64_t v260;
  uint8x8_t v261;
  uint64_t v262;
  uint64_t v263;
  _OWORD *v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  int8x8_t v268;
  unint64_t v269;
  uint8x8_t v270;
  uint64_t v271;
  _QWORD *v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t *v276;
  unint64_t v277;
  int8x8_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint8x8_t v282;
  unint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  size_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t *v298;
  size_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint8x8_t v304;
  size_t v305;
  size_t **v306;
  size_t *v307;
  size_t v308;
  size_t v309;
  size_t v310;
  void **v311;
  void **v312;
  size_t v313;
  size_t v314;
  size_t *v315;
  size_t v316;
  _BYTE *v317;
  _BYTE *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t **v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t **v327;
  uint64_t **v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t *v334;
  int64_t v335;
  char *v336;
  char *v337;
  size_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t v343;
  double v344;
  double v345;
  _QWORD *v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  BOOL v354;
  unint64_t *v355;
  unint64_t v356;
  int8x8_t v357;
  BOOL v358;
  unint64_t v359;
  uint8x8_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  double *v364;
  unint64_t v365;
  uint64_t v366;
  double v367;
  double v368;
  double v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  double *v375;
  double v376;
  double v377;
  double v378;
  double *v379;
  double v380;
  double v381;
  double v382;
  double v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t *v390;
  _QWORD *v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  _BYTE *v398;
  uint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  _OWORD *v402;
  uint64_t *v403;
  uint64_t v404;
  __int128 v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t *v408;
  uint64_t *v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  uint8x8_t v415;
  _QWORD **v416;
  _QWORD *v417;
  unint64_t v418;
  uint64_t v419;
  float v420;
  float v421;
  _BOOL8 v422;
  unint64_t v423;
  unint64_t v424;
  size_t v425;
  void *v426;
  _QWORD *v427;
  uint64_t v428;
  _QWORD *v429;
  size_t v430;
  size_t v431;
  size_t v432;
  _QWORD *ii;
  size_t v434;
  uint64_t v435;
  unint64_t v436;
  uint8x8_t v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  size_t v441;
  _QWORD *v442;
  _QWORD *v443;
  unint64_t v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  void *v448;
  _QWORD *v449;
  void *v450;
  _QWORD *v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  _QWORD *v456;
  _QWORD *v457;
  uint64_t *v458;
  float *v459;
  void **v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  void **v464;
  unint64_t v465;
  int64x2_t v466;
  uint64_t v467;
  int64x2_t v468;
  uint64_t *v469;
  uint64_t *v470;
  unint64_t *v471;
  unint64_t *v472;
  _QWORD *v473;
  unint64_t v474;
  unint64_t v475;
  size_t __n[2];
  void *__p[2];
  int v478;
  void *v479;
  _BYTE *v480;
  uint64_t v481;
  void *v482;
  uint64_t *v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  float v487;
  _QWORD v488[3];
  _QWORD *v489;
  _QWORD v490[3];
  _QWORD *v491;
  uint64_t v492;

  v492 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)v4 = v4 + 8;
  *(_OWORD *)(v4 + 24) = xmmword_19FFB5EE0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)a1 = v4;
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)v5 = v5 + 8;
  *(_OWORD *)(v5 + 24) = xmmword_19FFB5120;
  *(_QWORD *)(v5 + 40) = 0;
  v474 = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = a1 + 16;
  *(_QWORD *)(v6 - 8) = v5;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  v464 = (void **)(v6 + 40);
  *(_DWORD *)(v6 + 32) = 1065353216;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  v8 = *a2;
  v7 = a2[1];
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v10 = 0;
    v15 = 0;
    v14 = v474;
  }
  else
  {
    if (v9 < 0)
      abort();
    v10 = (unint64_t)operator new(v7 - v8);
    *(_QWORD *)(v474 + 80) = v10;
    *(_QWORD *)(v474 + 88) = v10;
    *(_QWORD *)(v474 + 96) = v10 + 16 * (v9 >> 4);
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)v8;
      v11 = *((_QWORD *)v8 + 1);
      *(_QWORD *)(v10 + 8) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v8 += 16;
      v10 += 16;
    }
    while (v8 != v7);
    v14 = v474;
    *(_QWORD *)(v474 + 88) = v10;
    v15 = *(_QWORD **)(v474 + 80);
  }
  *(_OWORD *)(v14 + 104) = 0u;
  v16 = v14 + 104;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  v459 = (float *)(v16 + 40);
  v460 = (void **)v16;
  *(_DWORD *)(v16 + 32) = 1065353216;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_DWORD *)(v16 + 72) = 1065353216;
  *(_OWORD *)(v16 + 80) = 0u;
  v458 = (uint64_t *)(v16 + 80);
  *(_OWORD *)(v16 + 96) = 0u;
  *(_DWORD *)(v16 + 112) = 1065353216;
  v485 = 0u;
  v486 = 0u;
  v487 = 1.0;
  if (v15 == (_QWORD *)v10)
    goto LABEL_519;
  do
  {
    v17 = v10;
    v18 = *v15;
    v19 = *(unsigned __int8 *)(*v15 + 168);
    v20 = *(unsigned __int8 *)(*v15 + 169);
    v21 = (v20
         - 0x61C8864680B583EBLL
         + ((v19 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v19 - 0x61C8864680B583EBLL) >> 2)) ^ (v19 - 0x61C8864680B583EBLL);
    v22 = *(int *)(*v15 + 172);
    v23 = *(int *)(*v15 + 176);
    v24 = (v22 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
    v25 = (v23 - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
    v26 = *((_QWORD *)&v485 + 1);
    if (*((_QWORD *)&v485 + 1))
    {
      v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v485 + 8));
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v10 = (v23 - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
        if (v25 >= *((_QWORD *)&v485 + 1))
          v10 = v25 % *((_QWORD *)&v485 + 1);
      }
      else
      {
        v10 = v25 & (*((_QWORD *)&v485 + 1) - 1);
      }
      v28 = *(void ***)(v485 + 8 * v10);
      if (v28)
      {
        v29 = (unsigned __int8 *)*v28;
        if (*v28)
        {
          if (v27.u32[0] < 2uLL)
          {
            while (1)
            {
              v31 = *((_QWORD *)v29 + 1);
              if (v31 == v25)
              {
                if (__PAIR64__(v29[17], v29[16]) == __PAIR64__(v20, v19)
                  && *(_QWORD *)(v29 + 20) == __PAIR64__(v23, v22))
                {
                  goto LABEL_36;
                }
              }
              else if ((v31 & (*((_QWORD *)&v485 + 1) - 1)) != v10)
              {
                goto LABEL_37;
              }
              v29 = *(unsigned __int8 **)v29;
              if (!v29)
                goto LABEL_37;
            }
          }
          do
          {
            v30 = *((_QWORD *)v29 + 1);
            if (v30 == v25)
            {
              if (__PAIR64__(v29[17], v29[16]) == __PAIR64__(v20, v19) && *(_QWORD *)(v29 + 20) == __PAIR64__(v23, v22))
              {
LABEL_36:
                v10 = v17;
                goto LABEL_97;
              }
            }
            else
            {
              if (v30 >= *((_QWORD *)&v485 + 1))
                v30 %= *((_QWORD *)&v485 + 1);
              if (v30 != v10)
                break;
            }
            v29 = *(unsigned __int8 **)v29;
          }
          while (v29);
        }
      }
    }
LABEL_37:
    v29 = (unsigned __int8 *)operator new(0x38uLL);
    __n[0] = (size_t)v29;
    __n[1] = (size_t)&v486;
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = v25;
    *((_WORD *)v29 + 8) = *(_WORD *)(v18 + 168);
    *(_QWORD *)(v29 + 20) = *(_QWORD *)(v18 + 172);
    *((_QWORD *)v29 + 5) = 0;
    *((_QWORD *)v29 + 6) = 0;
    LOBYTE(__p[0]) = 1;
    v32 = (float)(unint64_t)(*((_QWORD *)&v486 + 1) + 1);
    if (!v26 || (float)(v487 * (float)v26) < v32)
    {
      v33 = (v26 & (v26 - 1)) != 0;
      if (v26 < 3)
        v33 = 1;
      v34 = v33 | (2 * v26);
      v35 = vcvtps_u32_f32(v32 / v487);
      if (v34 <= v35)
        prime = v35;
      else
        prime = v34;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v26 = *((_QWORD *)&v485 + 1);
      }
      if (prime <= v26)
      {
        if (prime >= v26)
          goto LABEL_74;
        v47 = vcvtps_u32_f32((float)*((unint64_t *)&v486 + 1) / v487);
        if (v26 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
        {
          v47 = std::__next_prime(v47);
        }
        else
        {
          v49 = 1 << -(char)__clz(v47 - 1);
          if (v47 >= 2)
            v47 = v49;
        }
        if (prime <= v47)
          prime = v47;
        if (prime >= v26)
        {
          v26 = *((_QWORD *)&v485 + 1);
LABEL_74:
          if ((v26 & (v26 - 1)) != 0)
          {
            if (v25 >= v26)
              v10 = v25 % v26;
            else
              v10 = v25;
          }
          else
          {
            v10 = (v26 - 1) & v25;
          }
          goto LABEL_87;
        }
        if (!prime)
        {
          v62 = (void *)v485;
          *(_QWORD *)&v485 = 0;
          if (v62)
            operator delete(v62);
          v26 = 0;
          *((_QWORD *)&v485 + 1) = 0;
          goto LABEL_74;
        }
      }
      if (prime >> 61)
        goto LABEL_823;
      v37 = operator new(8 * prime);
      v38 = (void *)v485;
      *(_QWORD *)&v485 = v37;
      if (v38)
        operator delete(v38);
      v39 = 0;
      *((_QWORD *)&v485 + 1) = prime;
      do
        *(_QWORD *)(v485 + 8 * v39++) = 0;
      while (prime != v39);
      v40 = (_QWORD **)v486;
      if (!(_QWORD)v486)
      {
LABEL_73:
        v26 = prime;
        goto LABEL_74;
      }
      v41 = *(_QWORD *)(v486 + 8);
      v42 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v43 = v41 & v42;
        *(_QWORD *)(v485 + 8 * v43) = &v486;
        for (i = *v40; *v40; i = *v40)
        {
          v45 = i[1] & v42;
          if (v45 == v43)
          {
            v40 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(v485 + 8 * v45))
          {
            *v40 = (_QWORD *)*i;
            v46 = 8 * v45;
            *i = **(_QWORD **)(v485 + v46);
            **(_QWORD **)(v485 + v46) = i;
          }
          else
          {
            *(_QWORD *)(v485 + 8 * v45) = v40;
            v40 = (_QWORD **)i;
            v43 = v45;
          }
        }
        goto LABEL_73;
      }
      if (v41 >= prime)
        v41 %= prime;
      *(_QWORD *)(v485 + 8 * v41) = &v486;
      v50 = *v40;
      if (!*v40)
        goto LABEL_73;
      while (1)
      {
        v52 = v50[1];
        if (v52 >= prime)
          v52 %= prime;
        if (v52 != v41)
        {
          if (!*(_QWORD *)(v485 + 8 * v52))
          {
            *(_QWORD *)(v485 + 8 * v52) = v40;
            goto LABEL_78;
          }
          *v40 = (_QWORD *)*v50;
          v51 = 8 * v52;
          *v50 = **(_QWORD **)(v485 + v51);
          **(_QWORD **)(v485 + v51) = v50;
          v50 = v40;
        }
        v52 = v41;
LABEL_78:
        v40 = (_QWORD **)v50;
        v50 = (_QWORD *)*v50;
        v41 = v52;
        if (!v50)
          goto LABEL_73;
      }
    }
LABEL_87:
    v53 = v485;
    v54 = *(_QWORD **)(v485 + 8 * v10);
    if (v54)
    {
      *(_QWORD *)v29 = *v54;
      v10 = v17;
LABEL_95:
      *v54 = v29;
      goto LABEL_96;
    }
    *(_QWORD *)v29 = v486;
    *(_QWORD *)&v486 = v29;
    *(_QWORD *)(v53 + 8 * v10) = &v486;
    v10 = v17;
    if (*(_QWORD *)v29)
    {
      v55 = *(_QWORD *)(*(_QWORD *)v29 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v55 >= v26)
          v55 %= v26;
      }
      else
      {
        v55 &= v26 - 1;
      }
      v54 = (_QWORD *)(v485 + 8 * v55);
      goto LABEL_95;
    }
LABEL_96:
    ++*((_QWORD *)&v486 + 1);
    v18 = *v15;
LABEL_97:
    v56 = v15[1];
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v59 = (std::__shared_weak_count *)*((_QWORD *)v29 + 6);
    *((_QWORD *)v29 + 5) = v18;
    *((_QWORD *)v29 + 6) = v56;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v15 += 2;
  }
  while (v15 != (_QWORD *)v10);
  v10 = *(_QWORD *)(v474 + 80);
  v467 = *(_QWORD *)(v474 + 88);
  if (v10 == v467)
  {
LABEL_519:
    v274 = v10;
    goto LABEL_521;
  }
  v457 = (_QWORD *)(v474 + 120);
  v456 = (_QWORD *)(v474 + 200);
  do
  {
    for (j = 0; j != 8; ++j)
    {
      v64 = (uint64_t *)((char *)&kEdges + 8 * j);
      v65 = md::MuninRoadNetworkData::junctionsOnTileEdge(*(int8x8_t **)v10, v64);
      if (*v65 == v65[1])
        continue;
      v66 = v65;
      v67 = *(int8x8_t **)v10;
      v68 = *v64;
      if ((*v64 & 1) != 0)
      {
        if ((v68 & 4) != 0)
        {
          v69 = v67[21].u8[1];
          v74 = v67[22].i32[0];
          v70 = v67[21].i32[1] - 1;
          goto LABEL_136;
        }
        if ((v68 & 8) != 0)
        {
          v69 = v67[21].u8[1];
          v74 = v67[22].i32[0];
          v70 = v67[21].i32[1] + 1;
          goto LABEL_136;
        }
        if ((~(_BYTE)v68 & 0xA) != 0)
        {
          v69 = v67[21].u8[1];
          v70 = v67[21].i32[1];
          v74 = v67[22].i32[0];
LABEL_136:
          v71 = v74 - 1;
          goto LABEL_140;
        }
LABEL_138:
        v69 = v67[21].u8[1];
        v75 = v67[22].i32[0];
        v70 = v67[21].i32[1] + 1;
LABEL_139:
        v71 = v75 + 1;
        goto LABEL_140;
      }
      if ((v68 & 2) != 0)
      {
        if ((v68 & 4) != 0)
        {
          v69 = v67[21].u8[1];
          v75 = v67[22].i32[0];
          v70 = v67[21].i32[1] - 1;
        }
        else
        {
          if ((v68 & 8) != 0)
            goto LABEL_138;
          v69 = v67[21].u8[1];
          v70 = v67[21].i32[1];
          v75 = v67[22].i32[0];
        }
        goto LABEL_139;
      }
      if ((v68 & 8) != 0)
      {
        v69 = v67[21].u8[1];
        v71 = v67[22].i32[0];
        v70 = v67[21].i32[1] + 1;
      }
      else
      {
        v69 = v67[21].u8[1];
        v70 = v67[21].i32[1];
        if ((v68 & 4) == 0)
        {
          v71 = v67[22].i32[0];
          v72 = v67[21].u8[0];
          v73 = *(int8x8_t *)((char *)&v485 + 8);
          if (!*((_QWORD *)&v485 + 1))
            continue;
          goto LABEL_141;
        }
        --v70;
        v71 = v67[22].i32[0];
      }
LABEL_140:
      v72 = 255;
      v73 = *(int8x8_t *)((char *)&v485 + 8);
      if (!*((_QWORD *)&v485 + 1))
        continue;
LABEL_141:
      v76 = (v69
           - 0x61C8864680B583EBLL
           + ((v72 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v72 - 0x61C8864680B583EBLL) >> 2)) ^ (v72 - 0x61C8864680B583EBLL);
      v77 = (v70 - 0x61C8864680B583EBLL + (v76 << 6) + (v76 >> 2)) ^ v76;
      v78 = (v71 - 0x61C8864680B583EBLL + (v77 << 6) + (v77 >> 2)) ^ v77;
      v79 = (uint8x8_t)vcnt_s8(v73);
      v79.i16[0] = vaddlv_u8(v79);
      if (v79.u32[0] > 1uLL)
      {
        v80 = v78;
        if (v78 >= *(_QWORD *)&v73)
          v80 = v78 % *(_QWORD *)&v73;
      }
      else
      {
        v80 = v78 & (*(_QWORD *)&v73 - 1);
      }
      v81 = *(uint64_t ***)(v485 + 8 * v80);
      if (v81)
      {
        v82 = *v81;
        if (v82)
        {
          if (v79.u32[0] < 2uLL)
          {
            v83 = *(_QWORD *)&v73 - 1;
            while (1)
            {
              v85 = v82[1];
              if (v85 == v78)
              {
                if (*((unsigned __int8 *)v82 + 16) == v72
                  && *((unsigned __int8 *)v82 + 17) == v69
                  && *((_DWORD *)v82 + 5) == v70
                  && *((_DWORD *)v82 + 6) == v71)
                {
                  goto LABEL_166;
                }
              }
              else if ((v85 & v83) != v80)
              {
                goto LABEL_118;
              }
              v82 = (uint64_t *)*v82;
              if (!v82)
                goto LABEL_118;
            }
          }
          do
          {
            v84 = v82[1];
            if (v84 == v78)
            {
              if (*((unsigned __int8 *)v82 + 16) == v72
                && *((unsigned __int8 *)v82 + 17) == v69
                && *((_DWORD *)v82 + 5) == v70
                && *((_DWORD *)v82 + 6) == v71)
              {
LABEL_166:
                v470 = (uint64_t *)((char *)&kOppositeEdges + 8 * j);
                v469 = md::MuninRoadNetworkData::junctionsOnTileEdge((int8x8_t *)v82[5], v470);
                v86 = (unint64_t *)*v66;
                v472 = (unint64_t *)v66[1];
                if ((unint64_t *)*v66 == v472)
                  break;
                v461 = v10;
LABEL_173:
                v87 = *v86;
                if (!*(_DWORD *)(*v86 + 64))
                  goto LABEL_172;
                v88 = *(float *)(v87 + 36);
                v89 = *v470;
                if ((*v470 & 1) != 0)
                {
                  if ((v89 & 4) != 0)
                  {
                    v93 = 1.0;
                    v90 = 0.0;
                  }
                  else
                  {
                    if ((*v470 & 0xA) == 0xA)
                      v92 = 1.0;
                    else
                      v92 = 0.0;
                    if ((*v470 & 0xA) == 0xA)
                      v88 = 0.0;
                    v91 = (v89 & 8) == 0;
                    if ((v89 & 8) != 0)
                      v90 = 0.0;
                    else
                      v90 = v92;
LABEL_188:
                    if (v91)
                      v93 = v88;
                    else
                      v93 = 0.0;
                  }
                }
                else
                {
                  if ((v89 & 2) == 0)
                  {
                    v90 = *(float *)(v87 + 32);
                    if ((v89 & 4) != 0)
                      v88 = 1.0;
                    v91 = (v89 & 8) == 0;
                    goto LABEL_188;
                  }
                  v90 = 1.0;
                  if ((v89 & 8) != 0)
                    v88 = 0.0;
                  if ((v89 & 4) != 0)
                    v93 = 1.0;
                  else
                    v93 = v88;
                }
                v95 = (unint64_t *)*v469;
                v94 = (unint64_t *)v469[1];
                while (1)
                {
                  if (v95 == v94)
                    goto LABEL_172;
                  v96 = *v95;
                  if (*(_DWORD *)(*v95 + 64))
                  {
                    if (vabds_f32(v90, *(float *)(v96 + 32)) < 0.0005 && vabds_f32(v93, *(float *)(v96 + 36)) < 0.0005)
                    {
                      v97 = *(uint64_t **)(v87 + 40);
                      if (v97 != *(uint64_t **)(v87 + 48))
                      {
                        v98 = *(uint64_t **)(v96 + 40);
                        if (v98 != *(uint64_t **)(v96 + 48))
                        {
                          v99 = *v97;
                          v100 = *v98;
                          v101 = *(unsigned __int8 *)(*v97 + 39);
                          v102 = *(_QWORD *)(v99 + 24);
                          if ((v101 & 0x80u) == 0)
                            v103 = v101;
                          else
                            v103 = *(_QWORD *)(v99 + 24);
                          v104 = *(unsigned __int8 *)(v100 + 39);
                          v105 = (char)v104;
                          if ((v104 & 0x80u) != 0)
                            v104 = *(_QWORD *)(v100 + 24);
                          if (v103 == v104)
                          {
                            v106 = (const void **)(v99 + 16);
                            v109 = *(unsigned __int8 **)(v100 + 16);
                            v107 = (unsigned __int8 *)(v100 + 16);
                            v108 = v109;
                            if (v105 >= 0)
                              v110 = v107;
                            else
                              v110 = v108;
                            if ((v101 & 0x80) != 0)
                            {
                              if (!memcmp(*v106, v110, v102))
                                goto LABEL_219;
                            }
                            else
                            {
                              if (!(_DWORD)v101)
                              {
LABEL_219:
                                v111 = 0x9DDFEA08EB382D69 * (((8 * v87) + 8) ^ HIDWORD(v87));
                                v112 = 0x9DDFEA08EB382D69 * (HIDWORD(v87) ^ (v111 >> 47) ^ v111);
                                v113 = 0x9DDFEA08EB382D69 * (v112 ^ (v112 >> 47));
                                v114 = *(_QWORD *)(v474 + 112);
                                if (v114)
                                {
                                  v115 = (uint8x8_t)vcnt_s8((int8x8_t)v114);
                                  v115.i16[0] = vaddlv_u8(v115);
                                  if (v115.u32[0] > 1uLL)
                                  {
                                    v116 = 0x9DDFEA08EB382D69 * (v112 ^ (v112 >> 47));
                                    v10 = v461;
                                    if (v113 >= v114)
                                      v116 = v113 % v114;
                                  }
                                  else
                                  {
                                    v116 = (v114 - 1) & v113;
                                    v10 = v461;
                                  }
                                  v117 = (_QWORD *)*((_QWORD *)*v460 + v116);
                                  if (v117)
                                  {
                                    v118 = (_QWORD *)*v117;
                                    if (v118)
                                    {
                                      if (v115.u32[0] < 2uLL)
                                      {
                                        while (1)
                                        {
                                          v120 = v118[1];
                                          if (v120 == v113)
                                          {
                                            if (v118[2] == v87)
                                              goto LABEL_172;
                                          }
                                          else if ((v120 & (v114 - 1)) != v116)
                                          {
                                            goto LABEL_239;
                                          }
                                          v118 = (_QWORD *)*v118;
                                          if (!v118)
                                            goto LABEL_239;
                                        }
                                      }
                                      do
                                      {
                                        v119 = v118[1];
                                        if (v119 == v113)
                                        {
                                          if (v118[2] == v87)
                                            goto LABEL_172;
                                        }
                                        else
                                        {
                                          if (v119 >= v114)
                                            v119 %= v114;
                                          if (v119 != v116)
                                            break;
                                        }
                                        v118 = (_QWORD *)*v118;
                                      }
                                      while (v118);
                                    }
                                  }
LABEL_239:
                                  if (v115.u32[0] > 1uLL)
                                  {
                                    v10 = 0x9DDFEA08EB382D69 * (v112 ^ (v112 >> 47));
                                    if (v113 >= v114)
                                      v10 = v113 % v114;
                                  }
                                  else
                                  {
                                    v10 = v113 & (v114 - 1);
                                  }
                                  v121 = (_QWORD **)*((_QWORD *)*v460 + v10);
                                  if (v121)
                                  {
                                    v122 = *v121;
                                    if (*v121)
                                    {
                                      if (v115.u32[0] < 2uLL)
                                      {
                                        while (1)
                                        {
                                          v124 = v122[1];
                                          if (v124 == v113)
                                          {
                                            if (v122[2] == v87)
                                              goto LABEL_383;
                                          }
                                          else if ((v124 & (v114 - 1)) != v10)
                                          {
                                            goto LABEL_258;
                                          }
                                          v122 = (_QWORD *)*v122;
                                          if (!v122)
                                            goto LABEL_258;
                                        }
                                      }
                                      do
                                      {
                                        v123 = v122[1];
                                        if (v123 == v113)
                                        {
                                          if (v122[2] == v87)
                                          {
LABEL_383:
                                            v150 = (int8x8_t *)v474;
                                            v10 = v461;
                                            goto LABEL_318;
                                          }
                                        }
                                        else
                                        {
                                          if (v123 >= v114)
                                            v123 %= v114;
                                          if (v123 != v10)
                                            break;
                                        }
                                        v122 = (_QWORD *)*v122;
                                      }
                                      while (v122);
                                    }
                                  }
                                }
LABEL_258:
                                v122 = operator new(0x20uLL);
                                *v122 = 0;
                                v122[1] = v113;
                                v122[2] = *v86;
                                v122[3] = 0;
                                v125 = (float)(unint64_t)(*(_QWORD *)(v474 + 128) + 1);
                                v126 = *(float *)(v474 + 136);
                                if (!v114 || (float)(v126 * (float)v114) < v125)
                                {
                                  v127 = (v114 & (v114 - 1)) != 0;
                                  if (v114 < 3)
                                    v127 = 1;
                                  v128 = v127 | (2 * v114);
                                  v129 = vcvtps_u32_f32(v125 / v126);
                                  if (v128 <= v129)
                                    v130 = v129;
                                  else
                                    v130 = v128;
                                  if (v130 == 1)
                                  {
                                    v130 = 2;
                                  }
                                  else if ((v130 & (v130 - 1)) != 0)
                                  {
                                    v130 = std::__next_prime(v130);
                                    v114 = *(_QWORD *)(v474 + 112);
                                  }
                                  if (v130 > v114)
                                  {
LABEL_270:
                                    if (!(v130 >> 61))
                                    {
                                      v131 = operator new(8 * v130);
                                      v132 = *v460;
                                      *v460 = v131;
                                      if (v132)
                                        operator delete(v132);
                                      v133 = 0;
                                      *(_QWORD *)(v474 + 112) = v130;
                                      do
                                        *((_QWORD *)*v460 + v133++) = 0;
                                      while (v130 != v133);
                                      v134 = (_QWORD *)*v457;
                                      if (!*v457)
                                        goto LABEL_294;
                                      v135 = v134[1];
                                      v136 = v130 - 1;
                                      if ((v130 & (v130 - 1)) == 0)
                                      {
                                        v137 = v135 & v136;
                                        *((_QWORD *)*v460 + v137) = v457;
                                        for (k = (_QWORD *)*v134; *v134; k = (_QWORD *)*v134)
                                        {
                                          v139 = k[1] & v136;
                                          if (v139 == v137)
                                          {
                                            v134 = k;
                                          }
                                          else if (*((_QWORD *)*v460 + v139))
                                          {
                                            *v134 = *k;
                                            v140 = 8 * v139;
                                            *k = **(_QWORD **)((char *)*v460 + v140);
                                            **(_QWORD **)((char *)*v460 + v140) = k;
                                          }
                                          else
                                          {
                                            *((_QWORD *)*v460 + v139) = v134;
                                            v134 = k;
                                            v137 = v139;
                                          }
                                        }
                                        goto LABEL_294;
                                      }
                                      if (v135 >= v130)
                                        v135 %= v130;
                                      *((_QWORD *)*v460 + v135) = v457;
                                      v144 = (_QWORD *)*v134;
                                      if (!*v134)
                                      {
LABEL_294:
                                        v114 = v130;
                                        goto LABEL_295;
                                      }
                                      while (2)
                                      {
                                        v146 = v144[1];
                                        if (v146 >= v130)
                                          v146 %= v130;
                                        if (v146 != v135)
                                        {
                                          if (!*((_QWORD *)*v460 + v146))
                                          {
                                            *((_QWORD *)*v460 + v146) = v134;
LABEL_299:
                                            v134 = v144;
                                            v144 = (_QWORD *)*v144;
                                            v135 = v146;
                                            if (!v144)
                                              goto LABEL_294;
                                            continue;
                                          }
                                          *v134 = *v144;
                                          v145 = 8 * v146;
                                          *v144 = **(_QWORD **)((char *)*v460 + v145);
                                          **(_QWORD **)((char *)*v460 + v145) = v144;
                                          v144 = v134;
                                        }
                                        break;
                                      }
                                      v146 = v135;
                                      goto LABEL_299;
                                    }
LABEL_823:
                                    std::__throw_bad_array_new_length[abi:nn180100]();
                                  }
                                  if (v130 < v114)
                                  {
                                    v141 = vcvtps_u32_f32((float)*(unint64_t *)(v474 + 128) / *(float *)(v474 + 136));
                                    if (v114 < 3
                                      || (v142 = (uint8x8_t)vcnt_s8((int8x8_t)v114),
                                          v142.i16[0] = vaddlv_u8(v142),
                                          v142.u32[0] > 1uLL))
                                    {
                                      v141 = std::__next_prime(v141);
                                    }
                                    else
                                    {
                                      v143 = 1 << -(char)__clz(v141 - 1);
                                      if (v141 >= 2)
                                        v141 = v143;
                                    }
                                    if (v130 <= v141)
                                      v130 = v141;
                                    if (v130 >= v114)
                                    {
                                      v114 = *(_QWORD *)(v474 + 112);
                                    }
                                    else
                                    {
                                      if (v130)
                                        goto LABEL_270;
                                      v194 = *v460;
                                      *v460 = 0;
                                      if (v194)
                                        operator delete(v194);
                                      v114 = 0;
                                      *(_QWORD *)(v474 + 112) = 0;
                                    }
                                  }
LABEL_295:
                                  if ((v114 & (v114 - 1)) != 0)
                                  {
                                    if (v113 >= v114)
                                      v10 = v113 % v114;
                                    else
                                      v10 = v113;
                                  }
                                  else
                                  {
                                    v10 = (v114 - 1) & v113;
                                  }
                                }
                                v147 = *v460;
                                v148 = (_QWORD *)*((_QWORD *)*v460 + v10);
                                if (v148)
                                {
                                  *v122 = *v148;
                                  v10 = v461;
                                  goto LABEL_316;
                                }
                                *v122 = *v457;
                                *v457 = v122;
                                v147[v10] = v457;
                                v10 = v461;
                                if (*v122)
                                {
                                  v149 = *(_QWORD *)(*v122 + 8);
                                  if ((v114 & (v114 - 1)) != 0)
                                  {
                                    if (v149 >= v114)
                                      v149 %= v114;
                                  }
                                  else
                                  {
                                    v149 &= v114 - 1;
                                  }
                                  v148 = (char *)*v460 + 8 * v149;
LABEL_316:
                                  *v148 = v122;
                                }
                                v150 = (int8x8_t *)v474;
                                ++*(_QWORD *)(v474 + 128);
LABEL_318:
                                v122[3] = v96;
                                v151 = v150[19];
                                if (v151)
                                {
                                  v152 = *v86;
                                  v153 = HIDWORD(*v86);
                                  v154 = 0x9DDFEA08EB382D69 * ((8 * *v86 + 8) ^ v153);
                                  v155 = 0x9DDFEA08EB382D69
                                       * ((0x9DDFEA08EB382D69 * (v153 ^ (v154 >> 47) ^ v154)) ^ ((0x9DDFEA08EB382D69
                                                                                                  * (v153 ^ (v154 >> 47) ^ v154)) >> 47));
                                  v156 = (uint8x8_t)vcnt_s8(v151);
                                  v156.i16[0] = vaddlv_u8(v156);
                                  if (v156.u32[0] > 1uLL)
                                  {
                                    v157 = v155;
                                    if (v155 >= *(_QWORD *)&v151)
                                      v157 = v155 % *(_QWORD *)&v151;
                                  }
                                  else
                                  {
                                    v157 = v155 & (*(_QWORD *)&v151 - 1);
                                  }
                                  v158 = *(_QWORD **)(*(_QWORD *)v459 + 8 * v157);
                                  if (v158)
                                  {
                                    v159 = (_QWORD *)*v158;
                                    if (v159)
                                    {
                                      if (v156.u32[0] < 2uLL)
                                      {
                                        while (1)
                                        {
                                          v161 = v159[1];
                                          if (v161 == v155)
                                          {
                                            if (v159[2] == v152)
                                              goto LABEL_172;
                                          }
                                          else if ((v161 & (*(_QWORD *)&v151 - 1)) != v157)
                                          {
                                            goto LABEL_338;
                                          }
                                          v159 = (_QWORD *)*v159;
                                          if (!v159)
                                            goto LABEL_338;
                                        }
                                      }
                                      do
                                      {
                                        v160 = v159[1];
                                        if (v160 == v155)
                                        {
                                          if (v159[2] == v152)
                                            goto LABEL_172;
                                        }
                                        else
                                        {
                                          if (v160 >= *(_QWORD *)&v151)
                                            v160 %= *(_QWORD *)&v151;
                                          if (v160 != v157)
                                            break;
                                        }
                                        v159 = (_QWORD *)*v159;
                                      }
                                      while (v159);
                                    }
                                  }
                                }
LABEL_338:
                                if (v151)
                                {
                                  v162 = *v95;
                                  v163 = HIDWORD(*v95);
                                  v164 = 0x9DDFEA08EB382D69 * ((8 * *v95 + 8) ^ v163);
                                  v165 = 0x9DDFEA08EB382D69
                                       * ((0x9DDFEA08EB382D69 * (v163 ^ (v164 >> 47) ^ v164)) ^ ((0x9DDFEA08EB382D69
                                                                                                  * (v163 ^ (v164 >> 47) ^ v164)) >> 47));
                                  v166 = (uint8x8_t)vcnt_s8(v151);
                                  v166.i16[0] = vaddlv_u8(v166);
                                  if (v166.u32[0] > 1uLL)
                                  {
                                    v167 = v165;
                                    if (v165 >= *(_QWORD *)&v151)
                                      v167 = v165 % *(_QWORD *)&v151;
                                  }
                                  else
                                  {
                                    v167 = v165 & (*(_QWORD *)&v151 - 1);
                                  }
                                  v168 = *(_QWORD **)(*(_QWORD *)v459 + 8 * v167);
                                  if (v168)
                                  {
                                    v169 = (_QWORD *)*v168;
                                    if (v169)
                                    {
                                      if (v166.u32[0] < 2uLL)
                                      {
                                        v170 = *(_QWORD *)&v151 - 1;
                                        while (1)
                                        {
                                          v172 = v169[1];
                                          if (v172 == v165)
                                          {
                                            if (v169[2] == v162)
                                              goto LABEL_172;
                                          }
                                          else if ((v172 & v170) != v167)
                                          {
                                            goto LABEL_358;
                                          }
                                          v169 = (_QWORD *)*v169;
                                          if (!v169)
                                            goto LABEL_358;
                                        }
                                      }
                                      do
                                      {
                                        v171 = v169[1];
                                        if (v171 == v165)
                                        {
                                          if (v169[2] == v162)
                                            goto LABEL_172;
                                        }
                                        else
                                        {
                                          if (v171 >= *(_QWORD *)&v151)
                                            v171 %= *(_QWORD *)&v151;
                                          if (v171 != v167)
                                            break;
                                        }
                                        v169 = (_QWORD *)*v169;
                                      }
                                      while (v169);
                                    }
                                  }
                                }
LABEL_358:
                                v173 = *(uint64_t ***)v474;
                                v174 = *(_QWORD *)(*(_QWORD *)v474 + 40);
                                if (!v174)
                                {
                                  v175 = (unint64_t *)malloc_type_malloc((size_t)v173[4], 0x160B39uLL);
                                  v176 = v175;
                                  v178 = (void **)(v173 + 1);
                                  v177 = v173[1];
                                  v179 = (uint64_t *)(v173 + 1);
                                  v180 = (uint64_t *)(v173 + 1);
                                  if (v177)
                                  {
                                    while (1)
                                    {
                                      while (1)
                                      {
                                        v180 = v177;
                                        v181 = v177[4];
                                        if ((unint64_t)v175 >= v181)
                                          break;
                                        v177 = (uint64_t *)*v180;
                                        v179 = v180;
                                        if (!*v180)
                                          goto LABEL_366;
                                      }
                                      if (v181 >= (unint64_t)v175)
                                        break;
                                      v177 = (uint64_t *)v180[1];
                                      if (!v177)
                                      {
                                        v179 = v180 + 1;
                                        goto LABEL_366;
                                      }
                                    }
                                  }
                                  else
                                  {
LABEL_366:
                                    v182 = operator new(0x28uLL);
                                    v182[4] = v176;
                                    *v182 = 0;
                                    v182[1] = 0;
                                    v182[2] = v180;
                                    *v179 = (uint64_t)v182;
                                    v183 = (uint64_t *)**v173;
                                    if (v183)
                                    {
                                      *v173 = v183;
                                      v182 = (_QWORD *)*v179;
                                    }
                                    v184 = *v178;
                                    v91 = v182 == *v178;
                                    *((_BYTE *)v182 + 24) = v91;
                                    if (!v91)
                                    {
                                      do
                                      {
                                        v185 = v182[2];
                                        if (*(_BYTE *)(v185 + 24))
                                          break;
                                        v186 = *(_BYTE **)(v185 + 16);
                                        v187 = *(_QWORD *)v186;
                                        if (*(_QWORD *)v186 == v185)
                                        {
                                          v190 = *((_QWORD *)v186 + 1);
                                          if (!v190
                                            || (v191 = *(unsigned __int8 *)(v190 + 24), v188 = (_BYTE *)(v190 + 24),
                                                                                        v191))
                                          {
                                            if (*(_QWORD **)v185 == v182)
                                            {
                                              v192 = (uint64_t *)v182[2];
                                            }
                                            else
                                            {
                                              v192 = *(uint64_t **)(v185 + 8);
                                              v193 = *v192;
                                              *(_QWORD *)(v185 + 8) = *v192;
                                              if (v193)
                                              {
                                                *(_QWORD *)(v193 + 16) = v185;
                                                v186 = *(_BYTE **)(v185 + 16);
                                              }
                                              v192[2] = (uint64_t)v186;
                                              *(_QWORD *)(*(_QWORD *)(v185 + 16)
                                                        + 8 * (**(_QWORD **)(v185 + 16) != v185)) = v192;
                                              *v192 = v185;
                                              *(_QWORD *)(v185 + 16) = v192;
                                              v186 = (_BYTE *)v192[2];
                                              v185 = *(_QWORD *)v186;
                                            }
                                            *((_BYTE *)v192 + 24) = 1;
                                            v186[24] = 0;
                                            v197 = *(_QWORD *)(v185 + 8);
                                            *(_QWORD *)v186 = v197;
                                            if (v197)
                                              *(_QWORD *)(v197 + 16) = v186;
                                            *(_QWORD *)(v185 + 16) = *((_QWORD *)v186 + 2);
                                            *(_QWORD *)(*((_QWORD *)v186 + 2)
                                                      + 8 * (**((_QWORD **)v186 + 2) != (_QWORD)v186)) = v185;
                                            *(_QWORD *)(v185 + 8) = v186;
                                            goto LABEL_405;
                                          }
                                        }
                                        else if (!v187
                                               || (v189 = *(unsigned __int8 *)(v187 + 24),
                                                   v188 = (_BYTE *)(v187 + 24),
                                                   v189))
                                        {
                                          if (*(_QWORD **)v185 == v182)
                                          {
                                            v195 = v182[1];
                                            *(_QWORD *)v185 = v195;
                                            if (v195)
                                            {
                                              *(_QWORD *)(v195 + 16) = v185;
                                              v186 = *(_BYTE **)(v185 + 16);
                                            }
                                            v182[2] = v186;
                                            *(_QWORD *)(*(_QWORD *)(v185 + 16) + 8
                                                                               * (**(_QWORD **)(v185 + 16) != v185)) = v182;
                                            v182[1] = v185;
                                            *(_QWORD *)(v185 + 16) = v182;
                                            v186 = (_BYTE *)v182[2];
                                          }
                                          else
                                          {
                                            v182 = (_QWORD *)v182[2];
                                          }
                                          *((_BYTE *)v182 + 24) = 1;
                                          v186[24] = 0;
                                          v185 = *((_QWORD *)v186 + 1);
                                          v196 = *(_QWORD **)v185;
                                          *((_QWORD *)v186 + 1) = *(_QWORD *)v185;
                                          if (v196)
                                            v196[2] = v186;
                                          *(_QWORD *)(v185 + 16) = *((_QWORD *)v186 + 2);
                                          *(_QWORD *)(*((_QWORD *)v186 + 2)
                                                    + 8 * (**((_QWORD **)v186 + 2) != (_QWORD)v186)) = v185;
                                          *(_QWORD *)v185 = v186;
LABEL_405:
                                          *((_QWORD *)v186 + 2) = v185;
                                          break;
                                        }
                                        *(_BYTE *)(v185 + 24) = 1;
                                        v182 = v186;
                                        v186[24] = v186 == (_BYTE *)v184;
                                        *v188 = 1;
                                      }
                                      while (v186 != (_BYTE *)v184);
                                    }
                                    v173[2] = (uint64_t *)((char *)v173[2] + 1);
                                  }
                                  v174 = (unint64_t)v173[5];
                                  v198 = 96 * (_QWORD)v173[3] - 96;
                                  if ((v198 & 0x8000000000000000) == 0)
                                  {
                                    v199 = (char *)v176 + v198;
                                    v200 = (unint64_t *)((char *)v176 + v198);
                                    do
                                    {
                                      *v200 = v174;
                                      v200 -= 12;
                                      v174 = (unint64_t)v199;
                                      v199 = (char *)v200;
                                    }
                                    while (v200 >= v176);
                                    v174 = (unint64_t)(v200 + 12);
                                  }
                                  v173[5] = (uint64_t *)v174;
                                }
                                v173[5] = *(uint64_t **)v174;
                                v201 = *v86;
                                v202 = *v95;
                                *(_QWORD *)v174 = &off_1E428E0C8;
                                *(_QWORD *)(v174 + 8) = 0;
                                *(_OWORD *)(v174 + 16) = *(_OWORD *)(v201 + 16);
                                v203 = *(_QWORD *)(v201 + 32);
                                *(_QWORD *)(v174 + 48) = 0;
                                *(_QWORD *)(v174 + 56) = 0;
                                *(_QWORD *)(v174 + 32) = v203;
                                *(_QWORD *)(v174 + 40) = 0;
                                *(_DWORD *)(v174 + 64) = 2;
                                *(_WORD *)(v174 + 68) = 0;
                                *(_QWORD *)(v174 + 72) = 0;
                                v204 = (_QWORD *)(v174 + 72);
                                *(_QWORD *)v174 = &off_1E4292450;
                                *(_QWORD *)(v174 + 80) = 0;
                                *(_QWORD *)(v174 + 88) = 0;
                                v205 = *(const md::MuninRoadEdge ***)(v201 + 40);
                                for (m = *(const md::MuninRoadEdge ***)(v201 + 48); v205 != m; ++v205)
                                  md::MuninJunction::addRoad((md::MuninJunction *)v174, *v205);
                                v207 = *(const md::MuninRoadEdge ***)(v202 + 40);
                                for (n = *(const md::MuninRoadEdge ***)(v202 + 48); v207 != n; ++v207)
                                  md::MuninJunction::addRoad((md::MuninJunction *)v174, *v207);
                                v465 = v202;
                                v210 = *(char **)(v174 + 80);
                                v209 = *(_QWORD *)(v174 + 88);
                                if ((unint64_t)v210 < v209)
                                {
                                  *(_QWORD *)v210 = v201;
                                  v211 = v210 + 8;
                                  goto LABEL_439;
                                }
                                v212 = (char *)*v204;
                                v213 = (char *)(v210 - v212);
                                v214 = (v210 - v212) >> 3;
                                v215 = v214 + 1;
                                if ((unint64_t)(v214 + 1) >> 61)
                                  goto LABEL_826;
                                v216 = v209 - (_QWORD)v212;
                                if (v216 >> 2 > v215)
                                  v215 = v216 >> 2;
                                if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
                                  v217 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v217 = v215;
                                if (v217)
                                {
                                  if (v217 >> 61)
                                    goto LABEL_823;
                                  v218 = v217;
                                  v219 = operator new(8 * v217);
                                  v217 = v218;
                                  v213 = (char *)(v210 - v212);
                                }
                                else
                                {
                                  v219 = 0;
                                }
                                v220 = (unint64_t *)&v219[8 * v214];
                                *v220 = v201;
                                v211 = (char *)(v220 + 1);
                                if (v210 == v212)
                                {
                                  v204 = (_QWORD *)(v174 + 72);
                                }
                                else
                                {
                                  v221 = v210 - v212 - 8;
                                  if (v221 < 0x58)
                                    goto LABEL_830;
                                  if ((unint64_t)(v210 - v219 - (_QWORD)v213) < 0x20)
                                    goto LABEL_830;
                                  v222 = (v221 >> 3) + 1;
                                  v223 = &v219[8 * v214 - 16];
                                  v224 = v210 - 16;
                                  v225 = v222 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v226 = *(_OWORD *)v224;
                                    *(v223 - 1) = *((_OWORD *)v224 - 1);
                                    *v223 = v226;
                                    v223 -= 2;
                                    v224 -= 32;
                                    v225 -= 4;
                                  }
                                  while (v225);
                                  v220 -= v222 & 0x3FFFFFFFFFFFFFFCLL;
                                  v210 -= 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
                                  if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_830:
                                    do
                                    {
                                      v227 = *((_QWORD *)v210 - 1);
                                      v210 -= 8;
                                      *--v220 = v227;
                                    }
                                    while (v210 != v212);
                                  }
                                  v204 = (_QWORD *)(v174 + 72);
                                  v210 = *(char **)(v174 + 72);
                                }
                                *(_QWORD *)(v174 + 72) = v220;
                                *(_QWORD *)(v174 + 80) = v211;
                                *(_QWORD *)(v174 + 88) = &v219[8 * v217];
                                if (v210)
                                  operator delete(v210);
LABEL_439:
                                *(_QWORD *)(v174 + 80) = v211;
                                v228 = *(_QWORD *)(v174 + 88);
                                if ((unint64_t)v211 >= v228)
                                {
                                  v230 = (char *)*v204;
                                  v231 = (uint64_t)&v211[-*v204];
                                  v232 = v231 >> 3;
                                  v233 = (v231 >> 3) + 1;
                                  if (v233 >> 61)
LABEL_826:
                                    abort();
                                  v234 = v228 - (_QWORD)v230;
                                  if (v234 >> 2 > v233)
                                    v233 = v234 >> 2;
                                  if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8)
                                    v235 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v235 = v233;
                                  if (v235)
                                  {
                                    if (v235 >> 61)
                                      goto LABEL_823;
                                    v236 = operator new(8 * v235);
                                  }
                                  else
                                  {
                                    v236 = 0;
                                  }
                                  v237 = (unint64_t *)&v236[8 * v232];
                                  v238 = &v236[8 * v235];
                                  *v237 = v465;
                                  v229 = v237 + 1;
                                  if (v211 == v230)
                                  {
                                    *(_QWORD *)(v174 + 72) = v237;
                                    *(_QWORD *)(v174 + 80) = v229;
                                    *(_QWORD *)(v174 + 88) = v238;
                                  }
                                  else
                                  {
                                    v239 = v211 - v230 - 8;
                                    if (v239 <= 0x57 || (unint64_t)(v211 - v236 - v231) < 0x20)
                                    {
                                      v240 = v211;
                                      goto LABEL_455;
                                    }
                                    v263 = (v239 >> 3) + 1;
                                    v240 = &v211[-8 * (v263 & 0x3FFFFFFFFFFFFFFCLL)];
                                    v264 = &v236[8 * v232 - 16];
                                    v265 = v211 - 16;
                                    v266 = v263 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v267 = *(_OWORD *)v265;
                                      *(v264 - 1) = *((_OWORD *)v265 - 1);
                                      *v264 = v267;
                                      v264 -= 2;
                                      v265 -= 32;
                                      v266 -= 4;
                                    }
                                    while (v266);
                                    v237 -= v263 & 0x3FFFFFFFFFFFFFFCLL;
                                    if (v263 != (v263 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
                                      do
                                      {
LABEL_455:
                                        v241 = *((_QWORD *)v240 - 1);
                                        v240 -= 8;
                                        *--v237 = v241;
                                      }
                                      while (v240 != v230);
                                    }
                                    v211 = *(char **)(v174 + 72);
                                    *(_QWORD *)(v174 + 72) = v237;
                                    *(_QWORD *)(v174 + 80) = v229;
                                    *(_QWORD *)(v174 + 88) = v238;
                                    if (!v211)
                                      goto LABEL_460;
                                  }
                                  operator delete(v211);
                                  goto LABEL_460;
                                }
                                *(_QWORD *)v211 = v465;
                                v229 = v211 + 8;
LABEL_460:
                                *(_QWORD *)(v174 + 80) = v229;
                                std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v459, *v86, v86)[3] = v174;
                                std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v459, *v95, v95)[3] = v174;
                                v242 = operator new(0x18uLL);
                                v243 = v242;
                                v244 = 0x9DDFEA08EB382D69 * (((8 * v174) + 8) ^ HIDWORD(v174));
                                v245 = 0x9DDFEA08EB382D69 * (HIDWORD(v174) ^ (v244 >> 47) ^ v244);
                                v246 = 0x9DDFEA08EB382D69 * (v245 ^ (v245 >> 47));
                                *v242 = 0;
                                v242[1] = v246;
                                v242[2] = v174;
                                v247 = *(_QWORD *)(v474 + 192);
                                v10 = v461;
                                if (!v247)
                                  goto LABEL_480;
                                v248 = (uint8x8_t)vcnt_s8((int8x8_t)v247);
                                v248.i16[0] = vaddlv_u8(v248);
                                if (v248.u32[0] > 1uLL)
                                {
                                  v249 = v246;
                                  if (v247 <= v246)
                                    v249 = v246 % v247;
                                }
                                else
                                {
                                  v249 = (v247 - 1) & v246;
                                }
                                v250 = *(_QWORD **)(*v458 + 8 * v249);
                                if (!v250 || (v251 = (_QWORD *)*v250) == 0)
                                {
LABEL_480:
                                  v254 = (float)(unint64_t)(*(_QWORD *)(v474 + 208) + 1);
                                  v255 = *(float *)(v474 + 216);
                                  if (!v247 || (float)(v255 * (float)v247) < v254)
                                  {
                                    v256 = (v247 & (v247 - 1)) != 0;
                                    if (v247 < 3)
                                      v256 = 1;
                                    v257 = v256 | (2 * v247);
                                    v258 = vcvtps_u32_f32(v254 / v255);
                                    if (v257 <= v258)
                                      v259 = v258;
                                    else
                                      v259 = v257;
                                    if (v259 == 1)
                                    {
                                      v259 = 2;
                                    }
                                    else if ((v259 & (v259 - 1)) != 0)
                                    {
                                      v259 = std::__next_prime(v259);
                                      v247 = *(_QWORD *)(v474 + 192);
                                    }
                                    if (v259 > v247)
                                      goto LABEL_492;
                                    if (v259 < v247)
                                    {
                                      v260 = vcvtps_u32_f32((float)*(unint64_t *)(v474 + 208) / *(float *)(v474 + 216));
                                      if (v247 < 3
                                        || (v261 = (uint8x8_t)vcnt_s8((int8x8_t)v247),
                                            v261.i16[0] = vaddlv_u8(v261),
                                            v261.u32[0] > 1uLL))
                                      {
                                        v260 = std::__next_prime(v260);
                                      }
                                      else
                                      {
                                        v262 = 1 << -(char)__clz(v260 - 1);
                                        if (v260 >= 2)
                                          v260 = v262;
                                      }
                                      if (v259 <= v260)
                                        v259 = v260;
                                      if (v259 < v247)
LABEL_492:
                                        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v458, v259);
                                    }
                                  }
                                  v268 = *(int8x8_t *)(v474 + 192);
                                  v269 = v243[1];
                                  v270 = (uint8x8_t)vcnt_s8(v268);
                                  v270.i16[0] = vaddlv_u8(v270);
                                  if (v270.u32[0] > 1uLL)
                                  {
                                    if (v269 >= *(_QWORD *)&v268)
                                      v269 %= *(_QWORD *)&v268;
                                  }
                                  else
                                  {
                                    v269 &= *(_QWORD *)&v268 - 1;
                                  }
                                  v271 = *v458;
                                  v272 = *(_QWORD **)(*v458 + 8 * v269);
                                  if (!v272)
                                  {
                                    *v243 = *v456;
                                    *v456 = v243;
                                    *(_QWORD *)(v271 + 8 * v269) = v456;
                                    if (*v243)
                                    {
                                      v273 = *(_QWORD *)(*v243 + 8);
                                      if (v270.u32[0] > 1uLL)
                                      {
                                        if (v273 >= *(_QWORD *)&v268)
                                          v273 %= *(_QWORD *)&v268;
                                      }
                                      else
                                      {
                                        v273 &= *(_QWORD *)&v268 - 1;
                                      }
                                      v272 = (_QWORD *)(*v458 + 8 * v273);
LABEL_170:
                                      *v272 = v243;
                                    }
                                    ++*(_QWORD *)(v474 + 208);
                                    goto LABEL_172;
                                  }
                                  *v243 = *v272;
                                  goto LABEL_170;
                                }
                                if (v248.u32[0] < 2uLL)
                                {
                                  while (1)
                                  {
                                    v253 = v251[1];
                                    if (v253 == v246)
                                    {
                                      if (v251[2] == v174)
                                        goto LABEL_503;
                                    }
                                    else if ((v253 & (v247 - 1)) != v249)
                                    {
                                      goto LABEL_480;
                                    }
                                    v251 = (_QWORD *)*v251;
                                    if (!v251)
                                      goto LABEL_480;
                                  }
                                }
                                while (2)
                                {
                                  v252 = v251[1];
                                  if (v252 != v246)
                                  {
                                    if (v252 >= v247)
                                      v252 %= v247;
                                    if (v252 != v249)
                                      goto LABEL_480;
                                    goto LABEL_470;
                                  }
                                  if (v251[2] != v174)
                                  {
LABEL_470:
                                    v251 = (_QWORD *)*v251;
                                    if (!v251)
                                      goto LABEL_480;
                                    continue;
                                  }
                                  break;
                                }
LABEL_503:
                                operator delete(v242);
LABEL_172:
                                if (++v86 == v472)
                                  goto LABEL_118;
                                goto LABEL_173;
                              }
                              while (*(unsigned __int8 *)v106 == *v110)
                              {
                                v106 = (const void **)((char *)v106 + 1);
                                ++v110;
                                if (!--v101)
                                  goto LABEL_219;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v95;
                }
              }
            }
            else
            {
              if (v84 >= *(_QWORD *)&v73)
                v84 %= *(_QWORD *)&v73;
              if (v84 != v80)
                break;
            }
            v82 = (uint64_t *)*v82;
          }
          while (v82);
        }
      }
LABEL_118:
      ;
    }
    v10 += 16;
  }
  while (v10 != v467);
  v274 = *(_QWORD *)(v474 + 80);
  v10 = *(_QWORD *)(v474 + 88);
LABEL_521:
  v482 = 0;
  v483 = 0;
  v484 = 0;
  v479 = 0;
  v480 = 0;
  v481 = 0;
  *(_OWORD *)__n = 0u;
  *(_OWORD *)__p = 0u;
  v478 = 1065353216;
  if (v274 == v10)
    goto LABEL_809;
  v473 = (_QWORD *)(v474 + 32);
  v466 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v468 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v462 = v10;
  while (2)
  {
    v463 = v274;
    v275 = *(unint64_t **)(*(_QWORD *)v274 + 752);
    v276 = *(unint64_t **)(*(_QWORD *)v274 + 760);
    v471 = v276;
    while (v275 != v276)
    {
      v475 = 0;
      v277 = *v275;
      v475 = v277;
      if (!*(_BYTE *)(v277 + 112))
        goto LABEL_525;
      v278 = *(int8x8_t *)(v474 + 24);
      if (v278)
      {
        v279 = 0x9DDFEA08EB382D69 * (((8 * v277) + 8) ^ HIDWORD(v277));
        v280 = 0x9DDFEA08EB382D69 * (HIDWORD(v277) ^ (v279 >> 47) ^ v279);
        v281 = 0x9DDFEA08EB382D69 * (v280 ^ (v280 >> 47));
        v282 = (uint8x8_t)vcnt_s8(v278);
        v282.i16[0] = vaddlv_u8(v282);
        if (v282.u32[0] > 1uLL)
        {
          v283 = v281;
          if (v281 >= *(_QWORD *)&v278)
            v283 = v281 % *(_QWORD *)&v278;
        }
        else
        {
          v283 = v281 & (*(_QWORD *)&v278 - 1);
        }
        v284 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v283);
        if (v284)
        {
          v285 = (_QWORD *)*v284;
          if (v285)
          {
            if (v282.u32[0] < 2uLL)
            {
              v286 = *(_QWORD *)&v278 - 1;
              while (1)
              {
                v288 = v285[1];
                if (v281 == v288)
                {
                  if (v285[2] == v277)
                    goto LABEL_525;
                }
                else if ((v288 & v286) != v283)
                {
                  goto LABEL_548;
                }
                v285 = (_QWORD *)*v285;
                if (!v285)
                  goto LABEL_548;
              }
            }
            do
            {
              v287 = v285[1];
              if (v281 == v287)
              {
                if (v285[2] == v277)
                  goto LABEL_525;
              }
              else
              {
                if (v287 >= *(_QWORD *)&v278)
                  v287 %= *(_QWORD *)&v278;
                if (v287 != v283)
                  break;
              }
              v285 = (_QWORD *)*v285;
            }
            while (v285);
          }
        }
      }
LABEL_548:
      v480 = v479;
      v483 = (uint64_t *)v482;
      if (__p[1])
      {
        v289 = __p[0];
        if (__p[0])
        {
          do
          {
            v290 = (_QWORD *)*v289;
            operator delete(v289);
            v289 = v290;
          }
          while (v290);
        }
        __p[0] = 0;
        v291 = __n[1];
        if (__n[1])
        {
          v292 = 0;
          do
            *(_QWORD *)(__n[0] + 8 * v292++) = 0;
          while (v291 != v292);
        }
        __p[1] = 0;
        v277 = v475;
      }
      v490[0] = &off_1E42CC0B0;
      v490[1] = &v482;
      v490[2] = __n;
      v491 = v490;
      v488[0] = &off_1E42CC0F8;
      v488[1] = &v475;
      v488[2] = &v479;
      v489 = v488;
      md::MuninRoadGraph::traverseDrivableEdges(v474, v277, 0, v490, v488);
      v293 = v489;
      if (v489 == v488)
      {
        v293 = v488;
        v294 = 4;
      }
      else
      {
        if (!v489)
          goto LABEL_560;
        v294 = 5;
      }
      (*(void (**)(void))(*v293 + 8 * v294))();
LABEL_560:
      v295 = v491;
      if (v491 == v490)
      {
        v295 = v490;
        v296 = 4;
        goto LABEL_564;
      }
      if (v491)
      {
        v296 = 5;
LABEL_564:
        (*(void (**)(void))(*v295 + 8 * v296))();
      }
      v297 = (uint64_t *)v482;
      v298 = v483;
      while (v297 != v298)
      {
        v299 = __n[1];
        if (__n[1])
        {
          v300 = *v297;
          v301 = HIDWORD(*v297);
          v302 = 0x9DDFEA08EB382D69 * ((8 * *v297 + 8) ^ v301);
          v303 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v301 ^ (v302 >> 47) ^ v302)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v301 ^ (v302 >> 47) ^ v302)) >> 47));
          v304 = (uint8x8_t)vcnt_s8((int8x8_t)__n[1]);
          v304.i16[0] = vaddlv_u8(v304);
          if (v304.u32[0] > 1uLL)
          {
            v305 = v303;
            if (v303 >= __n[1])
              v305 = v303 % __n[1];
          }
          else
          {
            v305 = v303 & (__n[1] - 1);
          }
          v306 = *(size_t ***)(__n[0] + 8 * v305);
          if (v306)
          {
            v307 = *v306;
            if (*v306)
            {
              v308 = __n[1] - 1;
              if (v304.u32[0] < 2uLL)
              {
                while (1)
                {
                  v309 = v307[1];
                  if (v309 == v303)
                  {
                    if (v307[2] == v300)
                      goto LABEL_590;
                  }
                  else if ((v309 & v308) != v305)
                  {
                    goto LABEL_567;
                  }
                  v307 = (size_t *)*v307;
                  if (!v307)
                    goto LABEL_567;
                }
              }
              do
              {
                v310 = v307[1];
                if (v310 == v303)
                {
                  if (v307[2] == v300)
                  {
LABEL_590:
                    if (v304.u32[0] > 1uLL)
                    {
                      if (v303 >= __n[1])
                        v303 %= __n[1];
                    }
                    else
                    {
                      v303 &= v308;
                    }
                    v311 = *(void ***)(__n[0] + 8 * v303);
                    do
                    {
                      v312 = v311;
                      v311 = (void **)*v311;
                    }
                    while (v311 != (void **)v307);
                    if (v312 == __p)
                      goto LABEL_607;
                    v313 = (size_t)v312[1];
                    if (v304.u32[0] > 1uLL)
                    {
                      if (v313 >= __n[1])
                        v313 %= __n[1];
                    }
                    else
                    {
                      v313 &= v308;
                    }
                    if (v313 != v303)
                    {
LABEL_607:
                      if (!*v307)
                        goto LABEL_608;
                      v314 = *(_QWORD *)(*v307 + 8);
                      if (v304.u32[0] > 1uLL)
                      {
                        if (v314 >= __n[1])
                          v314 %= __n[1];
                      }
                      else
                      {
                        v314 &= v308;
                      }
                      if (v314 != v303)
LABEL_608:
                        *(_QWORD *)(__n[0] + 8 * v303) = 0;
                    }
                    v315 = (size_t *)*v307;
                    if (*v307)
                    {
                      v316 = v315[1];
                      if (v304.u32[0] > 1uLL)
                      {
                        if (v316 >= v299)
                          v316 %= v299;
                      }
                      else
                      {
                        v316 &= v308;
                      }
                      if (v316 != v303)
                      {
                        *(_QWORD *)(__n[0] + 8 * v316) = v312;
                        v315 = (size_t *)*v307;
                      }
                    }
                    *v312 = v315;
                    --__p[1];
                    operator delete(v307);
                    break;
                  }
                }
                else
                {
                  if (v310 >= __n[1])
                    v310 %= __n[1];
                  if (v310 != v305)
                    break;
                }
                v307 = (size_t *)*v307;
              }
              while (v307);
            }
          }
        }
LABEL_567:
        ++v297;
      }
      v318 = v479;
      v317 = v480;
      if (v480 == v479)
        goto LABEL_525;
      v319 = (char *)v483 - (_BYTE *)v482;
      if (v483 == v482 || v319 > 0x10)
        goto LABEL_525;
      v320 = *(_QWORD *)v482;
      v321 = *((_QWORD *)v482 + (v319 != 8));
      v322 = *(uint64_t ***)(v474 + 8);
      v323 = (uint64_t)v322[5];
      if (!v323)
      {
        v324 = (uint64_t *)malloc_type_malloc((size_t)v322[4], 0x160B39uLL);
        v325 = v324;
        v327 = v322 + 1;
        v326 = v322[1];
        if (v326)
        {
          while (1)
          {
            while (1)
            {
              v328 = (uint64_t **)v326;
              v329 = v326[4];
              if ((unint64_t)v324 >= v329)
                break;
              v326 = *v328;
              v327 = v328;
              if (!*v328)
                goto LABEL_627;
            }
            if (v329 >= (unint64_t)v324)
              break;
            v326 = v328[1];
            if (!v326)
            {
              v327 = v328 + 1;
              goto LABEL_627;
            }
          }
        }
        else
        {
          v328 = v322 + 1;
LABEL_627:
          v330 = (uint64_t *)operator new(0x28uLL);
          v330[4] = (uint64_t)v325;
          *v330 = 0;
          v330[1] = 0;
          v330[2] = (uint64_t)v328;
          *v327 = v330;
          v331 = (uint64_t *)**v322;
          if (v331)
          {
            *v322 = v331;
            v330 = *v327;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v322[1], v330);
          v322[2] = (uint64_t *)((char *)v322[2] + 1);
        }
        v323 = (uint64_t)v322[5];
        v332 = 152 * (_QWORD)v322[3] - 152;
        if ((v332 & 0x8000000000000000) == 0)
        {
          v333 = (uint64_t *)((char *)v325 + v332);
          v334 = (uint64_t *)((char *)v325 + v332);
          do
          {
            *v334 = v323;
            v334 -= 19;
            v323 = (uint64_t)v333;
            v333 = v334;
          }
          while (v334 >= v325);
          v323 = (uint64_t)(v334 + 19);
        }
        v322[5] = (uint64_t *)v323;
        v318 = v479;
        v317 = v480;
      }
      v322[5] = *(uint64_t **)v323;
      *(_OWORD *)(v323 + 16) = 0u;
      *(_OWORD *)(v323 + 32) = 0u;
      *(_OWORD *)v323 = 0u;
      v335 = v317 - v318;
      if (v317 != v318)
      {
        if (v335 < 0)
          abort();
        v336 = (char *)operator new(v317 - v318);
        *(_QWORD *)(v323 + 24) = v336;
        *(_QWORD *)(v323 + 32) = v336;
        v337 = &v336[8 * (v335 >> 3)];
        *(_QWORD *)(v323 + 40) = v337;
        memcpy(v336, v318, v335);
        *(_QWORD *)(v323 + 32) = v337;
      }
      *(_OWORD *)(v323 + 48) = 0u;
      *(_OWORD *)(v323 + 64) = 0u;
      *(_DWORD *)(v323 + 80) = v478;
      v338 = __n[1];
      if (__n[1] == 1)
      {
        v338 = 2;
LABEL_640:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v323 + 48, v338);
        goto LABEL_641;
      }
      if ((__n[1] & (__n[1] - 1)) != 0)
      {
        v338 = std::__next_prime(__n[1]);
        v357 = *(int8x8_t *)(v323 + 56);
        v358 = v338 >= *(_QWORD *)&v357;
        if (v338 > *(_QWORD *)&v357)
          goto LABEL_640;
      }
      else
      {
        v357 = 0;
        v358 = 1;
        if (__n[1])
          goto LABEL_640;
      }
      if (!v358)
      {
        v359 = vcvtps_u32_f32((float)*(unint64_t *)(v323 + 72) / *(float *)(v323 + 80));
        if (*(_QWORD *)&v357 < 3uLL
          || (v360 = (uint8x8_t)vcnt_s8(v357), v360.i16[0] = vaddlv_u8(v360), v360.u32[0] > 1uLL))
        {
          v359 = std::__next_prime(v359);
        }
        else
        {
          v361 = 1 << -(char)__clz(v359 - 1);
          if (v359 >= 2)
            v359 = v361;
        }
        if (v338 <= v359)
          v338 = v359;
        if (v338 < *(_QWORD *)&v357)
          goto LABEL_640;
      }
LABEL_641:
      v339 = __p[0];
      if (__p[0])
      {
        do
        {
          std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const* const&>(v323 + 48, v339[2], v339[2]);
          v339 = (_QWORD *)*v339;
        }
        while (v339);
      }
      *(_QWORD *)(v323 + 88) = v320;
      *(_QWORD *)(v323 + 96) = v321;
      *(int64x2_t *)(v323 + 104) = v468;
      *(int64x2_t *)(v323 + 120) = v466;
      *(_DWORD *)(v323 + 136) = 0;
      *(_QWORD *)(v323 + 144) = 0;
      if (v320)
      {
        if (v321)
        {
          v340 = *(_QWORD *)(v323 + 32) - *(_QWORD *)(v323 + 24);
          if (v340)
          {
            std::vector<BOOL>::resize(v323, v340 >> 3);
            v341 = *(uint64_t **)(v323 + 24);
            v342 = *(uint64_t **)(v323 + 32);
            if (v341 != v342)
            {
              do
              {
                v343 = *v341;
                v344 = *(double *)(v323 + 112);
                *(double *)(v323 + 104) = fmin(*(double *)(*v341 + 48), *(double *)(v323 + 104));
                v345 = *(double *)(v323 + 128);
                *(double *)(v323 + 120) = fmax(*(double *)(v323 + 120), *(double *)(v343 + 64));
                *(double *)(v323 + 112) = fmin(*(double *)(v343 + 56), v344);
                *(double *)(v323 + 128) = fmax(v345, *(double *)(v343 + 72));
                *(float *)(v323 + 136) = fmaxf(*(float *)(v323 + 136), *(float *)(v343 + 8));
                *(double *)(v323 + 144) = *(double *)(v323 + 144)
                                        + md::MuninRoadEdge::edgeLengthInMeters((md::MuninRoadEdge *)v343);
                ++v341;
              }
              while (v341 != v342);
              v346 = *(_QWORD **)(v323 + 24);
              v347 = *(_QWORD **)(v323 + 32);
              if (v346 != v347)
              {
LABEL_649:
                v348 = *(_QWORD *)(v323 + 88);
                while (1)
                {
                  v349 = *v346;
                  if (*(_QWORD *)(*v346 + 96) != v348 && *(_QWORD *)(v349 + 104) != v348)
                    break;
                  if (++v346 == v347)
                    goto LABEL_658;
                }
                v350 = v347 - 1;
                while (v350 != v346)
                {
                  v347 = v350;
                  v351 = *v350;
                  if (*(_QWORD *)(*v350 + 96) != v348)
                  {
                    --v350;
                    if (*(_QWORD *)(v351 + 104) != v348)
                      continue;
                  }
                  *v346++ = v351;
                  *v347 = v349;
                  if (v346 != v347)
                    goto LABEL_649;
                  break;
                }
              }
            }
LABEL_658:
            v352 = *(_QWORD *)(v323 + 24);
            v353 = *(_QWORD *)(*(_QWORD *)v352 + 96);
            v354 = v353 == *(_QWORD *)(v323 + 88);
            if (v353 == *(_QWORD *)(v323 + 88))
            {
              v353 = *(_QWORD *)(*(_QWORD *)v352 + 104);
              v355 = *(unint64_t **)v323;
              v356 = **(_QWORD **)v323 | 1;
            }
            else
            {
              v355 = *(unint64_t **)v323;
              v356 = **(_QWORD **)v323 & 0xFFFFFFFFFFFFFFFELL;
            }
            *v355 = v356;
            v362 = *(_QWORD *)(v323 + 32) - v352;
            if ((unint64_t)v362 >= 9)
            {
              v363 = v362 >> 3;
              v364 = (double *)(v353 + 16);
              v365 = 1;
              do
              {
                v367 = *v364;
                v368 = v364[1];
                v369 = 1.79769313e308;
                v370 = v365;
                v371 = v365;
                do
                {
                  v372 = *(_QWORD *)(v352 + 8 * v370);
                  v373 = *(_QWORD *)(v372 + 96);
                  v374 = *(_QWORD *)(v372 + 104);
                  v376 = *(double *)(v373 + 16);
                  v377 = *(double *)(v373 + 24);
                  v375 = (double *)(v373 + 16);
                  v378 = (v376 - v367) * (v376 - v367) + (v377 - v368) * (v377 - v368);
                  v380 = *(double *)(v374 + 16);
                  v381 = *(double *)(v374 + 24);
                  v379 = (double *)(v374 + 16);
                  v382 = (v380 - v367) * (v380 - v367) + (v381 - v368) * (v381 - v368);
                  v383 = fmin(v382, v378);
                  if (v383 < v369)
                  {
                    if (v378 < v382)
                    {
                      v354 = 1;
                      v369 = v383;
                      v371 = v370;
                      v364 = v379;
                    }
                    else
                    {
                      v354 = 0;
                      v369 = v383;
                      v371 = v370;
                      v364 = v375;
                    }
                  }
                  ++v370;
                }
                while (v370 < v363);
                v384 = 8 * v371;
                v385 = *(_QWORD *)(v352 + 8 * v365);
                *(_QWORD *)(v352 + 8 * v365) = *(_QWORD *)(v352 + v384);
                *(_QWORD *)(v352 + v384) = v385;
                v386 = *(unint64_t **)v323;
                v387 = v365 >> 6;
                v388 = 1 << v365;
                if (v354)
                  v366 = v386[v387] | v388;
                else
                  v366 = v386[v387] & ~v388;
                v386[v387] = v366;
                ++v365;
                v352 = *(_QWORD *)(v323 + 24);
                v363 = (*(_QWORD *)(v323 + 32) - v352) >> 3;
              }
              while (v365 < v363);
            }
          }
        }
      }
      v390 = *(uint64_t **)(v474 + 64);
      v389 = *(_QWORD *)(v474 + 72);
      if ((unint64_t)v390 >= v389)
      {
        v392 = (uint64_t *)*v464;
        v393 = (char *)v390 - (_BYTE *)*v464;
        v394 = v393 >> 3;
        v395 = (v393 >> 3) + 1;
        if (v395 >> 61)
          abort();
        v396 = v389 - (_QWORD)v392;
        if (v396 >> 2 > v395)
          v395 = v396 >> 2;
        if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF8)
          v397 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v397 = v395;
        if (v397)
        {
          if (v397 >> 61)
            goto LABEL_823;
          v398 = operator new(8 * v397);
        }
        else
        {
          v398 = 0;
        }
        v399 = (uint64_t *)&v398[8 * v394];
        *v399 = v323;
        v391 = v399 + 1;
        if (v390 == v392)
        {
          v392 = v390;
        }
        else
        {
          v400 = (char *)(v390 - 1) - (char *)v392;
          if (v400 < 0x58)
            goto LABEL_831;
          if ((unint64_t)((char *)v390 - &v398[v393]) < 0x20)
            goto LABEL_831;
          v401 = (v400 >> 3) + 1;
          v402 = &v398[8 * v394 - 16];
          v403 = v390 - 2;
          v404 = v401 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v405 = *(_OWORD *)v403;
            *(v402 - 1) = *((_OWORD *)v403 - 1);
            *v402 = v405;
            v402 -= 2;
            v403 -= 4;
            v404 -= 4;
          }
          while (v404);
          v399 -= v401 & 0x3FFFFFFFFFFFFFFCLL;
          v390 -= v401 & 0x3FFFFFFFFFFFFFFCLL;
          if (v401 != (v401 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_831:
            do
            {
              v406 = *--v390;
              *--v399 = v406;
            }
            while (v390 != v392);
            v392 = (uint64_t *)*v464;
          }
        }
        *(_QWORD *)(v474 + 56) = v399;
        *(_QWORD *)(v474 + 64) = v391;
        *(_QWORD *)(v474 + 72) = &v398[8 * v397];
        if (v392)
          operator delete(v392);
      }
      else
      {
        *v390 = v323;
        v391 = v390 + 1;
      }
      v407 = 0x9DDFEA08EB382D69;
      *(_QWORD *)(v474 + 64) = v391;
      v408 = (uint64_t *)v479;
      v409 = (uint64_t *)v480;
      if (v479 != v480)
      {
        v410 = *(_QWORD *)(v474 + 24);
        while (1)
        {
          v411 = *v408;
          v412 = HIDWORD(*v408);
          v413 = 0x9DDFEA08EB382D69 * ((8 * *v408 + 8) ^ v412);
          v414 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v412 ^ (v413 >> 47) ^ v413)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v412 ^ (v413 >> 47) ^ v413)) >> 47));
          if (v410)
          {
            v415 = (uint8x8_t)vcnt_s8((int8x8_t)v410);
            v415.i16[0] = vaddlv_u8(v415);
            if (v415.u32[0] > 1uLL)
            {
              v407 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v412 ^ (v413 >> 47) ^ v413)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v412 ^ (v413 >> 47) ^ v413)) >> 47));
              if (v414 >= v410)
                v407 = v414 % v410;
            }
            else
            {
              v407 = v414 & (v410 - 1);
            }
            v416 = *(_QWORD ***)(*(_QWORD *)v6 + 8 * v407);
            if (v416)
            {
              v417 = *v416;
              if (*v416)
              {
                if (v415.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v419 = v417[1];
                    if (v419 == v414)
                    {
                      if (v417[2] == v411)
                        goto LABEL_728;
                    }
                    else if ((v419 & (v410 - 1)) != v407)
                    {
                      goto LABEL_729;
                    }
                    v417 = (_QWORD *)*v417;
                    if (!v417)
                      goto LABEL_729;
                  }
                }
                do
                {
                  v418 = v417[1];
                  if (v418 == v414)
                  {
                    if (v417[2] == v411)
                    {
LABEL_728:
                      v407 = 0x9DDFEA08EB382D69;
                      goto LABEL_789;
                    }
                  }
                  else
                  {
                    if (v418 >= v410)
                      v418 %= v410;
                    if (v418 != v407)
                      break;
                  }
                  v417 = (_QWORD *)*v417;
                }
                while (v417);
              }
            }
          }
LABEL_729:
          v417 = operator new(0x20uLL);
          *v417 = 0;
          v417[1] = v414;
          v417[2] = v411;
          v417[3] = 0;
          v420 = (float)(unint64_t)(*(_QWORD *)(v474 + 40) + 1);
          v421 = *(float *)(v474 + 48);
          if (!v410 || (float)(v421 * (float)v410) < v420)
            break;
LABEL_779:
          v442 = *(_QWORD **)v6;
          v443 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v407);
          if (v443)
          {
            *v417 = *v443;
            v407 = 0x9DDFEA08EB382D69;
          }
          else
          {
            *v417 = *v473;
            *v473 = v417;
            v442[v407] = v473;
            v407 = 0x9DDFEA08EB382D69;
            if (!*v417)
              goto LABEL_788;
            v444 = *(_QWORD *)(*v417 + 8);
            if ((v410 & (v410 - 1)) != 0)
            {
              if (v444 >= v410)
                v444 %= v410;
            }
            else
            {
              v444 &= v410 - 1;
            }
            v443 = (_QWORD *)(*(_QWORD *)v6 + 8 * v444);
          }
          *v443 = v417;
LABEL_788:
          ++*(_QWORD *)(v474 + 40);
LABEL_789:
          v417[3] = v323;
          if (++v408 == v409)
            goto LABEL_525;
        }
        v422 = (v410 & (v410 - 1)) != 0;
        if (v410 < 3)
          v422 = 1;
        v423 = v422 | (2 * v410);
        v424 = vcvtps_u32_f32(v420 / v421);
        if (v423 <= v424)
          v425 = v424;
        else
          v425 = v423;
        if (v425 == 1)
        {
          v425 = 2;
        }
        else if ((v425 & (v425 - 1)) != 0)
        {
          v425 = std::__next_prime(v425);
          v410 = *(_QWORD *)(v474 + 24);
        }
        if (v425 <= v410)
        {
          if (v425 < v410)
          {
            v436 = vcvtps_u32_f32((float)*(unint64_t *)(v474 + 40) / *(float *)(v474 + 48));
            if (v410 < 3
              || (v437 = (uint8x8_t)vcnt_s8((int8x8_t)v410), v437.i16[0] = vaddlv_u8(v437), v437.u32[0] > 1uLL))
            {
              v436 = std::__next_prime(v436);
            }
            else
            {
              v438 = 1 << -(char)__clz(v436 - 1);
              if (v436 >= 2)
                v436 = v438;
            }
            if (v425 <= v436)
              v425 = v436;
            if (v425 >= v410)
            {
              v410 = *(_QWORD *)(v474 + 24);
            }
            else
            {
              if (v425)
                goto LABEL_741;
              v445 = *(_QWORD **)v6;
              *(_QWORD *)v6 = 0;
              if (v445)
                operator delete(v445);
              v410 = 0;
              *(_QWORD *)(v474 + 24) = 0;
            }
          }
LABEL_766:
          if ((v410 & (v410 - 1)) != 0)
          {
            if (v414 >= v410)
              v407 = v414 % v410;
            else
              v407 = v414;
          }
          else
          {
            v407 = (v410 - 1) & v414;
          }
          goto LABEL_779;
        }
LABEL_741:
        if (v425 >> 61)
          goto LABEL_823;
        v426 = operator new(8 * v425);
        v427 = *(_QWORD **)v6;
        *(_QWORD *)v6 = v426;
        if (v427)
          operator delete(v427);
        v428 = 0;
        *(_QWORD *)(v474 + 24) = v425;
        do
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v428++) = 0;
        while (v425 != v428);
        v429 = (_QWORD *)*v473;
        if (!*v473)
          goto LABEL_765;
        v430 = v429[1];
        v431 = v425 - 1;
        if ((v425 & (v425 - 1)) == 0)
        {
          v432 = v430 & v431;
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v432) = v473;
          for (ii = (_QWORD *)*v429; *v429; ii = (_QWORD *)*v429)
          {
            v434 = ii[1] & v431;
            if (v434 == v432)
            {
              v429 = ii;
            }
            else if (*(_QWORD *)(*(_QWORD *)v6 + 8 * v434))
            {
              *v429 = *ii;
              v435 = 8 * v434;
              *ii = **(_QWORD **)(*(_QWORD *)v6 + v435);
              **(_QWORD **)(*(_QWORD *)v6 + v435) = ii;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v6 + 8 * v434) = v429;
              v429 = ii;
              v432 = v434;
            }
          }
          goto LABEL_765;
        }
        if (v430 >= v425)
          v430 %= v425;
        *(_QWORD *)(*(_QWORD *)v6 + 8 * v430) = v473;
        v439 = (_QWORD *)*v429;
        if (!*v429)
        {
LABEL_765:
          v410 = v425;
          goto LABEL_766;
        }
        while (2)
        {
          v441 = v439[1];
          if (v441 >= v425)
            v441 %= v425;
          if (v441 != v430)
          {
            if (!*(_QWORD *)(*(_QWORD *)v6 + 8 * v441))
            {
              *(_QWORD *)(*(_QWORD *)v6 + 8 * v441) = v429;
LABEL_770:
              v429 = v439;
              v439 = (_QWORD *)*v439;
              v430 = v441;
              if (!v439)
                goto LABEL_765;
              continue;
            }
            *v429 = *v439;
            v440 = 8 * v441;
            *v439 = **(_QWORD **)(*(_QWORD *)v6 + v440);
            **(_QWORD **)(*(_QWORD *)v6 + v440) = v439;
            v439 = v429;
          }
          break;
        }
        v441 = v430;
        goto LABEL_770;
      }
LABEL_525:
      ++v275;
      v276 = v471;
    }
    v274 = v463 + 16;
    if (v463 + 16 != v462)
      continue;
    break;
  }
  v446 = __p[0];
  if (__p[0])
  {
    do
    {
      v447 = (_QWORD *)*v446;
      operator delete(v446);
      v446 = v447;
    }
    while (v447);
  }
  v448 = (void *)__n[0];
  __n[0] = 0;
  if (v448)
    operator delete(v448);
LABEL_809:
  if (v479)
  {
    v480 = v479;
    operator delete(v479);
  }
  if (v482)
  {
    v483 = (uint64_t *)v482;
    operator delete(v482);
  }
  v449 = (_QWORD *)v486;
  while (v449)
  {
    v452 = v449;
    v449 = (_QWORD *)*v449;
    v453 = (std::__shared_weak_count *)v452[6];
    if (v453)
    {
      v454 = (unint64_t *)&v453->__shared_owners_;
      do
        v455 = __ldaxr(v454);
      while (__stlxr(v455 - 1, v454));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
        std::__shared_weak_count::__release_weak(v453);
      }
    }
    operator delete(v452);
  }
  v450 = (void *)v485;
  *(_QWORD *)&v485 = 0;
  if (v450)
    operator delete(v450);
  return v474;
}

void sub_19FDF5738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t *v39;
  uint64_t v41;

  v41 = *v39;
  *v39 = 0;
  if (v41)
  {
    geo::Pool<md::CoalescedJunction>::disposeElements(v41);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v41 + 8));
    MEMORY[0x1A1AF4E00](v41, 0x1020C407A7143E5);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FDF5B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FDF5FD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::MuninRoadGraph::traverseDrivableEdges(unint64_t a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  MuninRoadEdge **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  MuninRoadEdge *v23;
  MuninRoadEdge **v24;
  MuninRoadEdge **v25;
  MuninRoadEdge *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t *v33;
  unint64_t *i;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  size_t prime;
  const MuninRoadEdge **v48;
  const MuninRoadEdge **v49;
  const MuninRoadEdge *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD **v54;
  size_t v55;
  size_t v56;
  size_t v57;
  _QWORD *j;
  size_t v59;
  uint64_t v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  __int128 v70;
  char v71;
  int8x8_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint8x8_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  int8x8_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint8x8_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  int8x8_t *v115;
  uint64_t v116;
  void *v117[3];
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  char v122;
  unint64_t v123;
  int v124;
  MuninRoadEdge *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *__p;
  void *v131;
  char v132;
  MuninRoadEdge *v133;
  void *v134;
  _QWORD *v135;
  void *v136;
  _BYTE *v137;
  void *v138;
  void *v139;
  char v140;
  int8x8_t v141[6];
  __int128 v142;
  __int128 v143;
  float v144;
  __int128 v145;
  __int128 v146;
  int64x2_t v147;
  md::GraphTraversalPath *v148;
  unint64_t v149;
  md::GraphTraversalPath *v150;
  int v151;
  void **v152;
  _BYTE v153[24];
  _BYTE *v154;
  _BYTE v155[24];
  _BYTE *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  if (!a4[3])
    return;
  *(_QWORD *)&v143 = 0;
  v142 = 0u;
  memset(v141, 0, sizeof(v141));
  v116 = a2;
  md::GraphTraversalPath::GraphTraversalPath(v117, (uint64_t)v141);
  v122 = 1;
  v9 = a4[3];
  if (!v9)
    goto LABEL_5;
  if ((_QWORD *)v9 != a4)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_5:
    v156 = (_BYTE *)v9;
    goto LABEL_7;
  }
  v156 = v155;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v155);
LABEL_7:
  v10 = a5[3];
  if (!v10)
  {
LABEL_10:
    v154 = (_BYTE *)v10;
    goto LABEL_12;
  }
  if ((_QWORD *)v10 != a5)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_10;
  }
  v154 = v153;
  (*(void (**)(_QWORD *, _BYTE *))(*a5 + 24))(a5, v153);
LABEL_12:
  v124 = a3;
  if (!v156)
    goto LABEL_252;
  v123 = a1;
  v11 = operator new(0x20uLL);
  v11[1] = &v123;
  v12 = v11 + 1;
  *v11 = &off_1E42D8CA8;
  v11[2] = &v124;
  v11[3] = v155;
  v162 = v11;
  v13 = (char *)operator new(0x20uLL);
  *(_QWORD *)v13 = &off_1E42D8CA8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)v12;
  *((_QWORD *)v13 + 3) = v12[2];
  v160 = v13;
  v157[0] = &off_1E42D8CF0;
  v157[1] = v153;
  v158 = v157;
  v141[0].i16[0] = 0;
  memset(&v141[1], 0, 32);
  v142 = 0u;
  v143 = 0u;
  v141[5].i32[0] = 1065353216;
  v144 = 1.0;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0;
  v149 = a1;
  v150 = 0;
  md::GraphTraversalContext::pushItem(v141, (size_t)&v116);
  v113 = (_QWORD *)(a1 + 144);
  v115 = (int8x8_t *)a1;
  while (v147.i64[1])
  {
    v14 = *(_QWORD *)(*((_QWORD *)&v145 + 1) + 8 * (v147.i64[0] / 0x2EuLL));
    v15 = v147.i64[0] % 0x2EuLL;
    v16 = (MuninRoadEdge **)(v14 + 88 * (v147.i64[0] % 0x2EuLL));
    v133 = *v16;
    md::GraphTraversalPath::GraphTraversalPath(&v134, (uint64_t)(v16 + 1));
    v140 = *(_BYTE *)(v14 + 88 * v15 + 80);
    v148 = (md::GraphTraversalPath *)&v134;
    v17 = *(_QWORD *)(*((_QWORD *)&v145 + 1) + 8 * (v147.i64[0] / 0x2EuLL));
    v18 = v147.i64[0] % 0x2EuLL;
    v19 = v17 + 88 * (v147.i64[0] % 0x2EuLL);
    v20 = *(void **)(v19 + 56);
    if (v20)
    {
      *(_QWORD *)(v17 + 88 * v18 + 64) = v20;
      operator delete(v20);
    }
    v21 = *(void **)(v17 + 88 * v18 + 32);
    if (v21)
    {
      *(_QWORD *)(v17 + 88 * v18 + 40) = v21;
      operator delete(v21);
    }
    v22 = *(void **)(v19 + 8);
    if (v22)
    {
      *(_QWORD *)(v17 + 88 * v18 + 16) = v22;
      operator delete(v22);
    }
    v147 = vaddq_s64(v147, (int64x2_t)xmmword_19FFB5EC0);
    if (v147.i64[0] >= 0x5CuLL)
    {
      operator delete(**((void ***)&v145 + 1));
      *((_QWORD *)&v145 + 1) += 8;
      v147.i64[0] -= 46;
    }
    if (v140 != 1)
    {
      if (v140)
        goto LABEL_210;
      v23 = v133;
      if (v141[0].i8[0])
      {
        if (v148)
        {
          v24 = *(MuninRoadEdge ***)v148;
          v25 = (MuninRoadEdge **)*((_QWORD *)v148 + 1);
          if (*(MuninRoadEdge ***)v148 != v25)
          {
            while (*v24 != v133)
            {
              if (++v24 == v25)
              {
                v24 = (MuninRoadEdge **)*((_QWORD *)v148 + 1);
                break;
              }
            }
          }
          if (v24 != v25)
            goto LABEL_210;
        }
      }
      else if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&v141[1], (unint64_t)v133))
      {
        goto LABEL_210;
      }
      std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const*&>((uint64_t)&v141[1], (unint64_t)v23, (uint64_t)v23);
      if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v149 + 184), (unint64_t)v23))
      {
        v33 = (unint64_t *)*((_QWORD *)v23 + 9);
        for (i = (unint64_t *)*((_QWORD *)v23 + 10); v33 != i; ++v33)
          std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const*&>((uint64_t)&v141[1], *v33, *v33);
      }
      if (!v160)
      {
LABEL_74:
        if (v148)
        {
          md::GraphTraversalPath::visit(v148, (const MuninJunction *)v23);
          if (v141[0].i8[1])
            md::GraphTraversalPath::visit(v150, (const MuninJunction *)v23);
        }
        v48 = (const MuninRoadEdge **)*((_QWORD *)v23 + 5);
        v49 = (const MuninRoadEdge **)*((_QWORD *)v23 + 6);
        while (v48 != v49)
        {
          v50 = *v48;
          if (!md::GraphTraversalContext::hasVisited(v141, *v48))
          {
            v125 = (MuninRoadEdge *)v50;
            md::GraphTraversalPath::GraphTraversalPath(&v126, (uint64_t)&v134);
            v132 = 1;
            md::GraphTraversalContext::pushItem(v141, (size_t)&v125);
            if (__p)
            {
              v131 = __p;
              operator delete(__p);
            }
            if (v128)
            {
              v129 = v128;
              operator delete(v128);
            }
            if (v126)
            {
              v127 = v126;
              operator delete(v126);
            }
          }
          ++v48;
        }
        goto LABEL_210;
      }
      v164 = 0;
      v125 = v23;
      v152 = &v134;
      v151 = (unint64_t)(v137 - (_BYTE *)v136) >> 3;
      v35 = (*(uint64_t (**)(_BYTE *, MuninRoadEdge **, void ***, int *))(*(_QWORD *)v160 + 48))(v160, &v125, &v152, &v151);
      v36 = v164;
      if (v164 == v163)
      {
        v36 = v163;
        v37 = 4;
      }
      else
      {
        if (!v164)
          goto LABEL_73;
        v37 = 5;
      }
      (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_73:
      if ((v35 & 1) == 0)
        goto LABEL_210;
      goto LABEL_74;
    }
    v26 = v133;
    if (md::GraphTraversalContext::hasVisited(v141, v133))
      goto LABEL_210;
    v27 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v26) + 8) ^ ((unint64_t)v26 >> 32));
    v28 = 0x9DDFEA08EB382D69 * (((unint64_t)v26 >> 32) ^ (v27 >> 47) ^ v27);
    v29 = v28 ^ (v28 >> 47);
    v30 = 0x9DDFEA08EB382D69 * v29;
    v31 = *((_QWORD *)&v142 + 1);
    if (*((_QWORD *)&v142 + 1))
    {
      v32 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v142 + 8));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        a1 = 0x9DDFEA08EB382D69 * v29;
        if (v30 >= *((_QWORD *)&v142 + 1))
          a1 = v30 % *((_QWORD *)&v142 + 1);
      }
      else
      {
        a1 = v30 & (*((_QWORD *)&v142 + 1) - 1);
      }
      v38 = *(_QWORD **)(v142 + 8 * a1);
      if (v38)
      {
        v39 = (_QWORD *)*v38;
        if (v39)
        {
          if (v32.u32[0] < 2uLL)
          {
            while (1)
            {
              v41 = v39[1];
              if (v41 == v30)
              {
                if ((MuninRoadEdge *)v39[2] == v26)
                  goto LABEL_138;
              }
              else if ((v41 & (*((_QWORD *)&v142 + 1) - 1)) != a1)
              {
                goto LABEL_62;
              }
              v39 = (_QWORD *)*v39;
              if (!v39)
                goto LABEL_62;
            }
          }
          do
          {
            v40 = v39[1];
            if (v40 == v30)
            {
              if ((MuninRoadEdge *)v39[2] == v26)
                goto LABEL_138;
            }
            else
            {
              if (v40 >= *((_QWORD *)&v142 + 1))
                v40 %= *((_QWORD *)&v142 + 1);
              if (v40 != a1)
                break;
            }
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
      }
    }
LABEL_62:
    v42 = operator new(0x18uLL);
    *v42 = 0;
    v42[1] = v30;
    v42[2] = v26;
    v43 = (float)(unint64_t)(*((_QWORD *)&v143 + 1) + 1);
    if (!v31 || (float)(v144 * (float)v31) < v43)
    {
      v44 = (v31 & (v31 - 1)) != 0;
      if (v31 < 3)
        v44 = 1;
      v45 = v44 | (2 * v31);
      v46 = vcvtps_u32_f32(v43 / v144);
      if (v45 <= v46)
        prime = v46;
      else
        prime = v45;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v31 = *((_QWORD *)&v142 + 1);
      }
      if (prime <= v31)
      {
        if (prime < v31)
        {
          v61 = vcvtps_u32_f32((float)*((unint64_t *)&v143 + 1) / v144);
          if (v31 < 3 || (v62 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v62.i16[0] = vaddlv_u8(v62), v62.u32[0] > 1uLL))
          {
            v61 = std::__next_prime(v61);
          }
          else
          {
            v63 = 1 << -(char)__clz(v61 - 1);
            if (v61 >= 2)
              v61 = v63;
          }
          if (prime <= v61)
            prime = v61;
          if (prime >= v31)
          {
            v31 = *((_QWORD *)&v142 + 1);
          }
          else
          {
            if (prime)
              goto LABEL_90;
            v98 = (void *)v142;
            *(_QWORD *)&v142 = 0;
            if (v98)
              operator delete(v98);
            v31 = 0;
            *((_QWORD *)&v142 + 1) = 0;
          }
        }
LABEL_115:
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v30 >= v31)
            a1 = v30 % v31;
          else
            a1 = v30;
        }
        else
        {
          a1 = (v31 - 1) & v30;
        }
        goto LABEL_128;
      }
LABEL_90:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v51 = operator new(8 * prime);
      v52 = (void *)v142;
      *(_QWORD *)&v142 = v51;
      if (v52)
        operator delete(v52);
      v53 = 0;
      *((_QWORD *)&v142 + 1) = prime;
      do
        *(_QWORD *)(v142 + 8 * v53++) = 0;
      while (prime != v53);
      v54 = (_QWORD **)v143;
      if (!(_QWORD)v143)
        goto LABEL_114;
      v55 = *(_QWORD *)(v143 + 8);
      v56 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v57 = v55 & v56;
        *(_QWORD *)(v142 + 8 * v57) = &v143;
        for (j = *v54; *v54; j = *v54)
        {
          v59 = j[1] & v56;
          if (v59 == v57)
          {
            v54 = (_QWORD **)j;
          }
          else if (*(_QWORD *)(v142 + 8 * v59))
          {
            *v54 = (_QWORD *)*j;
            v60 = 8 * v59;
            *j = **(_QWORD **)(v142 + v60);
            **(_QWORD **)(v142 + v60) = j;
          }
          else
          {
            *(_QWORD *)(v142 + 8 * v59) = v54;
            v54 = (_QWORD **)j;
            v57 = v59;
          }
        }
        goto LABEL_114;
      }
      if (v55 >= prime)
        v55 %= prime;
      *(_QWORD *)(v142 + 8 * v55) = &v143;
      v64 = *v54;
      if (!*v54)
      {
LABEL_114:
        v31 = prime;
        goto LABEL_115;
      }
      while (2)
      {
        v66 = v64[1];
        if (v66 >= prime)
          v66 %= prime;
        if (v66 != v55)
        {
          if (!*(_QWORD *)(v142 + 8 * v66))
          {
            *(_QWORD *)(v142 + 8 * v66) = v54;
LABEL_119:
            v54 = (_QWORD **)v64;
            v64 = (_QWORD *)*v64;
            v55 = v66;
            if (!v64)
              goto LABEL_114;
            continue;
          }
          *v54 = (_QWORD *)*v64;
          v65 = 8 * v66;
          *v64 = **(_QWORD **)(v142 + v65);
          **(_QWORD **)(v142 + v65) = v64;
          v64 = v54;
        }
        break;
      }
      v66 = v55;
      goto LABEL_119;
    }
LABEL_128:
    v67 = v142;
    v68 = *(_QWORD **)(v142 + 8 * a1);
    if (v68)
    {
      *v42 = *v68;
LABEL_136:
      *v68 = v42;
      goto LABEL_137;
    }
    *v42 = v143;
    *(_QWORD *)&v143 = v42;
    *(_QWORD *)(v67 + 8 * a1) = &v143;
    if (*v42)
    {
      v69 = *(_QWORD *)(*v42 + 8);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v69 >= v31)
          v69 %= v31;
      }
      else
      {
        v69 &= v31 - 1;
      }
      v68 = (_QWORD *)(v142 + 8 * v69);
      goto LABEL_136;
    }
LABEL_137:
    ++*((_QWORD *)&v143 + 1);
LABEL_138:
    a1 = (unint64_t)v115;
    if (v158)
    {
      v125 = v26;
      v152 = &v134;
      if (((*(uint64_t (**)(_QWORD *, MuninRoadEdge **, void ***))(*v158 + 48))(v158, &v125, &v152) & 1) == 0)
        goto LABEL_210;
    }
    if (v148)
    {
      md::GraphTraversalPath::visit(v148, v26);
      if (v141[0].i8[1])
        md::GraphTraversalPath::visit(v150, v26);
    }
    if (v135 == v134 || !*(v135 - 1))
    {
      v71 = 0;
      v70 = *((_OWORD *)v26 + 6);
    }
    else
    {
      v70 = (unint64_t)*(v135 - 1);
      v71 = 1;
    }
    v72 = v115[24];
    if (!*(_QWORD *)&v72)
      goto LABEL_167;
    v73 = 0x9DDFEA08EB382D69 * (((8 * v70) + 8) ^ DWORD1(v70));
    v74 = 0x9DDFEA08EB382D69 * (DWORD1(v70) ^ (v73 >> 47) ^ v73);
    v75 = 0x9DDFEA08EB382D69 * (v74 ^ (v74 >> 47));
    v76 = (uint8x8_t)vcnt_s8(v72);
    v76.i16[0] = vaddlv_u8(v76);
    if (v76.u32[0] > 1uLL)
    {
      v77 = v75;
      if (v75 >= *(_QWORD *)&v72)
        v77 = v75 % *(_QWORD *)&v72;
    }
    else
    {
      v77 = v75 & (*(_QWORD *)&v72 - 1);
    }
    v78 = *(_QWORD **)(*(_QWORD *)&v115[23] + 8 * v77);
    if (!v78 || (v79 = (_QWORD *)*v78) == 0)
    {
LABEL_167:
      v83 = *((_QWORD *)v26 + 12);
      if ((_QWORD)v70 != v83)
        goto LABEL_169;
      goto LABEL_168;
    }
    if (v76.u32[0] < 2uLL)
    {
      v80 = *(_QWORD *)&v72 - 1;
      while (1)
      {
        v82 = v79[1];
        if (v75 == v82)
        {
          if (v79[2] == (_QWORD)v70)
            goto LABEL_225;
        }
        else if ((v82 & v80) != v77)
        {
          goto LABEL_167;
        }
        v79 = (_QWORD *)*v79;
        if (!v79)
          goto LABEL_167;
      }
    }
    while (1)
    {
      v81 = v79[1];
      if (v75 == v81)
        break;
      if (v81 >= *(_QWORD *)&v72)
        v81 %= *(_QWORD *)&v72;
      if (v81 != v77)
        goto LABEL_167;
LABEL_157:
      v79 = (_QWORD *)*v79;
      if (!v79)
        goto LABEL_167;
    }
    if (v79[2] != (_QWORD)v70)
      goto LABEL_157;
LABEL_225:
    v83 = *((_QWORD *)v26 + 12);
    v100 = *(_QWORD **)(v70 + 72);
    v99 = *(_QWORD **)(v70 + 80);
    if (v100 != v99)
    {
      while (*v100 != v83)
      {
        if (++v100 == v99)
        {
          v100 = *(_QWORD **)(v70 + 80);
          break;
        }
      }
    }
    if (v100 != v99)
LABEL_168:
      v83 = *((_QWORD *)v26 + 13);
LABEL_169:
    v114 = *((_QWORD *)&v70 + 1);
    if (*(_DWORD *)(v83 + 64))
    {
      v84 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v113, v83);
      if (v84)
        v83 = v84[3];
    }
    v125 = (MuninRoadEdge *)v83;
    md::GraphTraversalPath::GraphTraversalPath(&v126, (uint64_t)&v134);
    v132 = 0;
    md::GraphTraversalContext::pushItem(v141, (size_t)&v125);
    if (__p)
    {
      v131 = __p;
      operator delete(__p);
    }
    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    if ((v71 & 1) == 0)
    {
      v85 = v115[24];
      if (v85)
      {
        v86 = 0x9DDFEA08EB382D69 * (((8 * v114) + 8) ^ HIDWORD(v114));
        v87 = 0x9DDFEA08EB382D69 * (HIDWORD(v114) ^ (v86 >> 47) ^ v86);
        v88 = 0x9DDFEA08EB382D69 * (v87 ^ (v87 >> 47));
        v89 = (uint8x8_t)vcnt_s8(v85);
        v89.i16[0] = vaddlv_u8(v89);
        if (v89.u32[0] >= 2uLL)
        {
          v90 = v88;
          if (v88 >= *(_QWORD *)&v85)
            v90 = v88 % *(_QWORD *)&v85;
        }
        else
        {
          v90 = v88 & (*(_QWORD *)&v85 - 1);
        }
        v91 = *(_QWORD **)(*(_QWORD *)&v115[23] + 8 * v90);
        if (v91)
        {
          v92 = (_QWORD *)*v91;
          if (v92)
          {
            if (v89.u32[0] < 2uLL)
            {
              v93 = *(_QWORD *)&v85 - 1;
              while (1)
              {
                v95 = v92[1];
                if (v88 == v95)
                {
                  if (v92[2] == v114)
                    goto LABEL_231;
                }
                else if ((v95 & v93) != v90)
                {
                  goto LABEL_199;
                }
                v92 = (_QWORD *)*v92;
                if (!v92)
                  goto LABEL_199;
              }
            }
            do
            {
              v94 = v92[1];
              if (v88 == v94)
              {
                if (v92[2] == v114)
                {
LABEL_231:
                  v96 = *((_QWORD *)v26 + 12);
                  v102 = *(_QWORD **)(v114 + 72);
                  v101 = *(_QWORD **)(v114 + 80);
                  if (v102 != v101)
                  {
                    while (*v102 != v96)
                    {
                      if (++v102 == v101)
                      {
                        v102 = *(_QWORD **)(v114 + 80);
                        break;
                      }
                    }
                  }
                  if (v102 == v101)
                  {
LABEL_201:
                    if (*(_DWORD *)(v96 + 64))
                    {
                      v97 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v113, v96);
                      if (v97)
                        v96 = v97[3];
                    }
                    v125 = (MuninRoadEdge *)v96;
                    md::GraphTraversalPath::GraphTraversalPath(&v126, (uint64_t)&v134);
                    v132 = 0;
                    md::GraphTraversalContext::pushItem(v141, (size_t)&v125);
                    if (__p)
                    {
                      v131 = __p;
                      operator delete(__p);
                    }
                    if (v128)
                    {
                      v129 = v128;
                      operator delete(v128);
                    }
                    if (v126)
                    {
                      v127 = v126;
                      operator delete(v126);
                    }
                    goto LABEL_210;
                  }
LABEL_200:
                  v96 = *((_QWORD *)v26 + 13);
                  goto LABEL_201;
                }
              }
              else
              {
                if (v94 >= *(_QWORD *)&v85)
                  v94 %= *(_QWORD *)&v85;
                if (v94 != v90)
                  break;
              }
              v92 = (_QWORD *)*v92;
            }
            while (v92);
          }
        }
      }
LABEL_199:
      v96 = *((_QWORD *)v26 + 12);
      if (v114 != v96)
        goto LABEL_201;
      goto LABEL_200;
    }
LABEL_210:
    if (v138)
    {
      v139 = v138;
      operator delete(v138);
    }
    if (v136)
    {
      v137 = v136;
      operator delete(v136);
    }
    if (v134)
    {
      v135 = v134;
      operator delete(v134);
    }
  }
  md::GraphTraversalContext::~GraphTraversalContext((md::GraphTraversalContext *)v141);
  v103 = v158;
  if (v158 == v157)
  {
    v104 = 4;
    v103 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_242;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_242:
  v105 = v160;
  if (v160 == v159)
  {
    v106 = 4;
    v105 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_247;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_247:
  v107 = v162;
  if (v162 == v161)
  {
    v108 = 4;
    v107 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_252;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_252:
  v109 = v154;
  if (v154 == v153)
  {
    v110 = 4;
    v109 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_257;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_257:
  v111 = v156;
  if (v156 == v155)
  {
    v112 = 4;
    v111 = v155;
    goto LABEL_261;
  }
  if (v156)
  {
    v112 = 5;
LABEL_261:
    (*(void (**)(void))(*v111 + 8 * v112))();
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
}

void sub_19FDF6EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;

  md::GraphTraversalContext::~GraphTraversalContext((md::GraphTraversalContext *)&a53);
  v55 = *(_QWORD **)(v53 - 208);
  if (v55 == (_QWORD *)(v53 - 232))
  {
    v56 = 4;
    v55 = (_QWORD *)(v53 - 232);
  }
  else
  {
    if (!v55)
      goto LABEL_6;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_6:
  v57 = *(_QWORD **)(v53 - 176);
  if (v57 == (_QWORD *)(v53 - 200))
  {
    v58 = 4;
    v57 = (_QWORD *)(v53 - 200);
  }
  else
  {
    if (!v57)
      goto LABEL_11;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_11:
  v59 = *(_QWORD **)(v53 - 144);
  if (v59 == (_QWORD *)(v53 - 168))
  {
    v60 = 4;
    v59 = (_QWORD *)(v53 - 168);
  }
  else
  {
    if (!v59)
      goto LABEL_16;
    v60 = 5;
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v60))(v59);
LABEL_16:
  v61 = (unint64_t *)STACK[0x230];
  if ((unint64_t *)STACK[0x230] == &STACK[0x218])
  {
    v62 = 4;
    v61 = &STACK[0x218];
  }
  else
  {
    if (!v61)
      goto LABEL_21;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_21:
  v63 = (unint64_t *)STACK[0x250];
  if ((unint64_t *)STACK[0x250] == &STACK[0x238])
  {
    v64 = 4;
    v63 = &STACK[0x238];
  }
  else
  {
    if (!v63)
      goto LABEL_26;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_26:
  md::GraphTraversalQueueItem::~GraphTraversalQueueItem((md::GraphTraversalQueueItem *)&a18);
  _Unwind_Resume(a1);
}

void md::GraphTraversalContext::~GraphTraversalContext(md::GraphTraversalContext *this)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;

  v2 = (void **)*((_QWORD *)this + 12);
  v3 = (void **)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v4 = (_QWORD *)((char *)this + 128);
    v3 = (void **)*((_QWORD *)this + 12);
  }
  else
  {
    v4 = (_QWORD *)((char *)this + 128);
    v5 = *((_QWORD *)this + 15);
    v6 = &v2[v5 / 0x2E];
    v7 = (char *)*v6 + 88 * (v5 % 0x2E);
    v8 = (unint64_t)v2[(*((_QWORD *)this + 16) + v5) / 0x2E] + 88 * ((*((_QWORD *)this + 16) + v5) % 0x2E);
    if (v7 != (char *)v8)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 + 7);
        if (v9)
        {
          *((_QWORD *)v7 + 8) = v9;
          operator delete(v9);
        }
        v10 = (void *)*((_QWORD *)v7 + 4);
        if (v10)
        {
          *((_QWORD *)v7 + 5) = v10;
          operator delete(v10);
        }
        v11 = (void *)*((_QWORD *)v7 + 1);
        if (v11)
        {
          *((_QWORD *)v7 + 2) = v11;
          operator delete(v11);
        }
        v7 += 88;
        if (v7 - (_BYTE *)*v6 == 4048)
        {
          v12 = (char *)v6[1];
          ++v6;
          v7 = v12;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)*((_QWORD *)this + 12);
      v3 = (void **)*((_QWORD *)this + 13);
    }
  }
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)*((_QWORD *)this + 13);
      v2 = (void **)(*((_QWORD *)this + 12) + 8);
      *((_QWORD *)this + 12) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 23;
    goto LABEL_21;
  }
  if (v14 == 2)
  {
    v15 = 46;
LABEL_21:
    *((_QWORD *)this + 15) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *((_QWORD *)this + 12);
    v17 = *((_QWORD *)this + 13);
    if (v17 != v18)
      *((_QWORD *)this + 13) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v19 = (void *)*((_QWORD *)this + 11);
  if (v19)
    operator delete(v19);
  v20 = (_QWORD *)*((_QWORD *)this + 8);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
    operator delete(v22);
  v23 = (_QWORD *)*((_QWORD *)this + 3);
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      operator delete(v23);
      v23 = v24;
    }
    while (v24);
  }
  v25 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v25)
    operator delete(v25);
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8CF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8CF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  if (!*(_BYTE *)(*a2 + 112))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v4)
    return 1;
  v6 = *a3;
  v7 = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v7, &v6);
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D8CA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8CA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::operator()(uint64_t a1, unint64_t *a2, unint64_t ***a3)
{
  unint64_t v4;
  unint64_t **v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t **v18;
  unint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(_DWORD *)(*a2 + 64);
  if (v7 != 1
    && (v7 != 2
     || std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v6 + 184), *a2)))
  {
    v8 = *(unsigned __int8 *)(v4 + 69);
    if (v8 <= 2)
    {
      if (v8 - 1 <= 1)
      {
        if (*(unsigned __int8 *)(v4 + 68) > 2u)
          goto LABEL_5;
        if (v8 == 2)
        {
          if (*(_BYTE *)(v4 + 68) == 2)
            goto LABEL_5;
        }
        else if (v8 == 1 && *(_BYTE *)(v4 + 68) == 1)
        {
          goto LABEL_5;
        }
      }
      v12 = 0;
LABEL_27:
      if (v7 != 2
        || std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v6 + 184), v4))
      {
        v14 = *(unsigned __int8 *)(v4 + 69);
        if (v14 <= 2)
        {
          if (v14 - 1 > 1)
            return;
          if (*(unsigned __int8 *)(v4 + 68) <= 2u)
          {
            if (v14 == 2)
            {
              if (*(_BYTE *)(v4 + 68) != 2)
                return;
            }
            else if (v14 != 1 || *(_BYTE *)(v4 + 68) != 1)
            {
              return;
            }
          }
        }
      }
LABEL_30:
      v15 = *(_QWORD *)(a1 + 24);
      v18 = v5;
      v19 = v4;
      v17 = v12;
      v16 = *(_QWORD *)(v15 + 24);
      if (v16)
      {
        (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t ***, unsigned int *))(*(_QWORD *)v16 + 48))(v16, &v19, &v18, &v17);
        return;
      }
      goto LABEL_40;
    }
  }
LABEL_5:
  v20[0] = &off_1E42D8C60;
  v20[1] = v6;
  v9 = v20;
  v21 = v20;
  v10 = *v5;
  v11 = v5[1];
  if (*v5 != v11)
  {
    v12 = 0;
    while (1)
    {
      v19 = *v10;
      if (!v21)
        break;
      v12 += (*(uint64_t (**)(_QWORD *, unint64_t *))(*v21 + 48))(v21, &v19);
      if (++v10 == v11)
      {
        v9 = v21;
        if (v21 == v20)
        {
          v13 = 4;
          v9 = v20;
        }
        else
        {
          if (!v21)
            goto LABEL_21;
          v13 = 5;
        }
        goto LABEL_20;
      }
    }
LABEL_40:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  v12 = 0;
  v13 = 4;
LABEL_20:
  (*(void (**)(void))(*v9 + 8 * v13))();
LABEL_21:
  if (v12 <= **(_DWORD **)(a1 + 16))
  {
    v6 = **(_QWORD **)(a1 + 8);
    v7 = *(_DWORD *)(v4 + 64);
    if (v7 == 1)
      goto LABEL_30;
    goto LABEL_27;
  }
}

void sub_19FDF7650(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FDF765C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8C60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8C60;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int v3;
  unsigned int v4;

  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 64);
  if (v3 == 1
    || v3 == 2
    && !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(*(_QWORD *)(a1 + 8) + 184), *a2))
  {
    return 1;
  }
  v4 = *(unsigned __int8 *)(v2 + 69);
  if (v4 > 2)
    return 1;
  if (v4 - 1 <= 1)
  {
    if (*(unsigned __int8 *)(v2 + 68) > 2u)
      return 1;
    if (v4 != 2)
      return v4 == 1 && *(_BYTE *)(v2 + 68) == 1;
    if (*(_BYTE *)(v2 + 68) == 2)
      return 1;
  }
  return 0;
}

void std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CC0F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CC0F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = *(unsigned __int8 *)(*a2 + 39);
  v5 = *(_QWORD *)(*a2 + 24);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(*a2 + 39);
  else
    v6 = *(_QWORD *)(*a2 + 24);
  v7 = *(unsigned __int8 *)(v3 + 39);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v3 + 24);
  if (v6 != v7)
    return 0;
  v10 = (const void **)(v2 + 16);
  v13 = *(unsigned __int8 **)(v3 + 16);
  v11 = (unsigned __int8 *)(v3 + 16);
  v12 = v13;
  if (v8 >= 0)
    v14 = v11;
  else
    v14 = v12;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v10, v14, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    while (*(unsigned __int8 *)v10 == *v14)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v14;
      if (!--v4)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (!*(_BYTE *)(v2 + 112))
    return 0;
  v15 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD **)(v15 + 8);
  v16 = *(_QWORD *)(v15 + 16);
  if ((unint64_t)v17 >= v16)
  {
    v20 = *(_BYTE **)v15;
    v21 = (uint64_t)v17 - *(_QWORD *)v15;
    v22 = v21 >> 3;
    v23 = (v21 >> 3) + 1;
    if (v23 >> 61)
      abort();
    v24 = v16 - (_QWORD)v20;
    if (v24 >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v26 = operator new(8 * v25);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v2;
    v18 = v27 + 1;
    if (v17 == (_QWORD *)v20)
    {
      v20 = v17;
    }
    else
    {
      v29 = (char *)v17 - v20 - 8;
      if (v29 < 0x58)
        goto LABEL_46;
      if ((unint64_t)((char *)v17 - v26 - v21) < 0x20)
        goto LABEL_46;
      v30 = (v29 >> 3) + 1;
      v31 = &v26[8 * v22 - 16];
      v32 = (__int128 *)(v17 - 2);
      v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *v32;
        *(v31 - 1) = *(v32 - 1);
        *v31 = v34;
        v31 -= 2;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      v27 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
      v17 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          v35 = *--v17;
          *--v27 = v35;
        }
        while (v17 != (_QWORD *)v20);
        v20 = *(_BYTE **)v15;
      }
    }
    *(_QWORD *)v15 = v27;
    *(_QWORD *)(v15 + 8) = v18;
    *(_QWORD *)(v15 + 16) = v28;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v17 = v2;
    v18 = v17 + 1;
  }
  *(_QWORD *)(v15 + 8) = v18;
  return 1;
}

void std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CC0B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CC0B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, unint64_t ***a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v4 = *a2;
  v5 = **a3;
  v6 = (*a3)[1];
  if (v5 != v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    do
    {
      v8 = *v5++;
      std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const* const&>(v7, v8, v8);
    }
    while (v5 != v6);
  }
  v9 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD **)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *(_BYTE **)v9;
    v14 = (uint64_t)v11 - *(_QWORD *)v9;
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      abort();
    v17 = v10 - (_QWORD)v13;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v4;
    v12 = v20 + 1;
    if (v11 == (_QWORD *)v13)
    {
      v13 = v11;
    }
    else
    {
      v22 = (char *)v11 - v13 - 8;
      if (v22 < 0x58)
        goto LABEL_32;
      if ((unint64_t)((char *)v11 - &v19[v14]) < 0x20)
        goto LABEL_32;
      v23 = (v22 >> 3) + 1;
      v24 = &v19[8 * v15 - 16];
      v25 = (__int128 *)(v11 - 2);
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v28 = *--v11;
          *--v20 = v28;
        }
        while (v11 != (_QWORD *)v13);
        v13 = *(_BYTE **)v9;
      }
    }
    *(_QWORD *)v9 = v20;
    *(_QWORD *)(v9 + 8) = v12;
    *(_QWORD *)(v9 + 16) = v21;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v4;
    v12 = v11 + 1;
  }
  *(_QWORD *)(v9 + 8) = v12;
  return 1;
}

uint64_t md::MuninRoadGraph::composedEdgeForEdge(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = this[3];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*(_QWORD *)&this[2] + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v5 == v12)
      {
        if (v9[2] == a2)
          return v9[3];
      }
      else if ((v12 & v10) != v7)
      {
        return 0;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v5 == v11)
      break;
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
    if (v11 != v7)
      return 0;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return 0;
  }
  if (v9[2] != a2)
    goto LABEL_11;
  return v9[3];
}

void md::LineTextWithAuxLabelPart::~LineTextWithAuxLabelPart(md::LineTextWithAuxLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E42A0B30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 85);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 85);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A0B30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 85);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v12 + 24) = "VectorKitLabels";
    *(_OWORD *)(v12 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v12 = &off_1E42B5668;
    *(_QWORD *)(v12 + 8) = "VectorKitLabels";
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_QWORD *)(v12 + 248) = 0;
    *(_OWORD *)(v12 + 56) = 0u;
    v13 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v12 + 56), 0);
    if ((_DWORD)v13)
      geo::read_write_lock::logFailure(v13, (uint64_t)"initialization", v14);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v12 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v12 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v12;
  }
  (*(void (**)(uint64_t, md::LineTextWithAuxLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, this, 720);
}

uint64_t md::LineTextWithAuxLabelPart::pushToRenderModel(uint64_t a1, uint64_t a2, __n128 a3)
{
  float v3;

  v3 = a3.n128_f32[0];
  if (*(_BYTE *)(a1 + 691) && *(_BYTE *)(a1 + 688) == 37)
    (*(void (**)(_QWORD, uint64_t, __n128))(***(_QWORD ***)(a1 + 576) + 128))(**(_QWORD **)(a1 + 576), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), a2, v3);
}

uint64_t md::LineTextWithAuxLabelPart::isTextVisible(md::LineTextWithAuxLabelPart *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 72) + 744))(**((_QWORD **)this + 72));
}

void md::LineTextWithAuxLabelPart::populateDebugNode(md::LineTextWithAuxLabelPart *this, gdc::DebugTreeNode *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *ChildNode;
  double v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  int v15;
  _QWORD v16[7];
  int v17;
  void *v18[2];
  uint64_t v19;
  _BYTE v20[32];
  __int128 __p;
  uint64_t v22;
  int v23;
  _BYTE v24[16];
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30[2];

  v4 = (uint64_t *)*((_QWORD *)this + 72);
  v5 = (uint64_t *)*((_QWORD *)this + 73);
  while (v4 != v5)
  {
    v6 = *v4++;
    (*(void (**)(uint64_t, gdc::DebugTreeNode *))(*(_QWORD *)v6 + 800))(v6, a2);
  }
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)&v30[0] = v7;
  *(__int128 *)((char *)v30 + 8) = xmmword_19FFB3800;
  strcpy(v7, "LineTextWithAuxLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v30);
  operator delete(v7);
  BYTE7(v30[1]) = 7;
  strcpy((char *)v30, "Aux Gap");
  v9 = *((float *)this + 166);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 2;
  v25 = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v24);
  v10 = *((unsigned __int8 *)this + 688);
  BYTE7(v30[1]) = 17;
  strcpy((char *)v30, "Text Part Outcome");
  md::stringFromLabelOutcome((uint64_t)v18, v10);
  __p = 0uLL;
  v22 = 0;
  v23 = 4;
  if (SHIBYTE(v19) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, v18[0], (size_t)v18[1]);
  }
  else
  {
    __p = *(_OWORD *)v18;
    v22 = v19;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v20);
  if (SHIBYTE(v22) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_10:
    operator delete(v18[0]);
    goto LABEL_8;
  }
  if (SHIBYTE(v19) < 0)
    goto LABEL_10;
LABEL_8:
  v11 = (char *)operator new(0x20uLL);
  *(_QWORD *)&v30[0] = v11;
  *(__int128 *)((char *)v30 + 8) = xmmword_19FFB3880;
  strcpy(v11, "Is Layout Direction Reversed");
  v12 = *((unsigned __int8 *)this + 689);
  v17 = 0;
  memset(&v16[4], 0, 24);
  v16[0] = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v16);
  operator delete(v11);
  BYTE7(v30[1]) = 15;
  strcpy((char *)v30, "Is Text Enabled");
  v13 = *((unsigned __int8 *)this + 691);
  v15 = 0;
  memset(&v14[4], 0, 24);
  v14[0] = v13;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v14);
}

uint64_t md::LineTextWithAuxLabelPart::debugCompositeClassName@<X0>(md::LineTextWithAuxLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  void **v21;
  uint64_t v22;
  __int128 *p_p;
  uint64_t v24;
  char v25;
  size_t v26;
  unint64_t v27;
  const void **v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 __p;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v54[0] = MEMORY[0x1E0DE4FE0] + 64;
  v46 = v7;
  *(uint64_t *)((char *)&v46 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v46 + *(_QWORD *)(v46 - 24));
  std::ios_base::init(v9, &v47);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v46 = v4 + 24;
  v54[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v47 = MEMORY[0x1E0DE4FB8] + 16;
  v51 = 0u;
  v52 = 0u;
  v53 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"TextWithAux\n", 12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"  textDirection=", 16);
  v11 = *((unsigned __int8 *)this + 714);
  if (v11 == 2)
  {
    {
      v35 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v45 = mdm::Allocator::instance(void)::alloc;
    v13 = 8;
    HIBYTE(v44) = 8;
    strcpy((char *)v43, "Reversed");
  }
  else if (v11 == 1)
  {
    {
      v34 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v45 = mdm::Allocator::instance(void)::alloc;
    v13 = 6;
    HIBYTE(v44) = 6;
    strcpy((char *)v43, "Normal");
  }
  else
  {
    {
      v36 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v45 = mdm::Allocator::instance(void)::alloc;
    v13 = 4;
    HIBYTE(v44) = 4;
    strcpy((char *)v43, "None");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)v43, v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"  desiredTextDirection=", 23);
  v16 = *((unsigned __int8 *)this + 715);
  if (v16 == 2)
  {
    {
      v38 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v38, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v42 = mdm::Allocator::instance(void)::alloc;
    v18 = 8;
    HIBYTE(v41) = 8;
    strcpy((char *)&__p, "Reversed");
  }
  else if (v16 == 1)
  {
    {
      v37 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v42 = mdm::Allocator::instance(void)::alloc;
    v18 = 6;
    HIBYTE(v41) = 6;
    strcpy((char *)&__p, "Normal");
  }
  else
  {
    {
      v39 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v42 = mdm::Allocator::instance(void)::alloc;
    v18 = 4;
    HIBYTE(v41) = 4;
    strcpy((char *)&__p, "None");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)&__p, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"\n", 1);
  if (SHIBYTE(v41) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v42 + 40))(v42, __p, v41 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v45 + 40))(v45, v43[0], v44 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_19:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"  textPartOutcome st=", 21);
  md::stringFromLabelOutcome((uint64_t)v43, *((unsigned __int8 *)this + 656));
  if (v44 >= 0)
    v21 = v43;
  else
    v21 = (void **)v43[0];
  if (v44 >= 0)
    v22 = HIBYTE(v44);
  else
    v22 = (uint64_t)v43[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)v21, v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)" ds=", 4);
  md::stringFromLabelOutcome((uint64_t)&__p, *((unsigned __int8 *)this + 656));
  if (v41 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v41 >= 0)
    v24 = HIBYTE(v41);
  else
    v24 = *((_QWORD *)&__p + 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)p_p, v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"\n", 1);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_33;
LABEL_39:
    operator delete(v43[0]);
    v25 = v53;
    if ((v53 & 0x10) == 0)
      goto LABEL_34;
LABEL_40:
    v27 = *((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1) < v50)
    {
      *((_QWORD *)&v52 + 1) = v50;
      v27 = v50;
    }
    v28 = (const void **)&v49;
    goto LABEL_44;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v44) < 0)
    goto LABEL_39;
LABEL_33:
  v25 = v53;
  if ((v53 & 0x10) != 0)
    goto LABEL_40;
LABEL_34:
  if ((v25 & 8) == 0)
  {
    v26 = 0;
    a2[23] = 0;
    goto LABEL_52;
  }
  v28 = (const void **)v48;
  v27 = v48[2];
LABEL_44:
  v29 = *v28;
  v26 = v27 - (_QWORD)*v28;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v32 = operator new(v30 + 1);
    *((_QWORD *)a2 + 1) = v26;
    *((_QWORD *)a2 + 2) = v31 | 0x8000000000000000;
    *(_QWORD *)a2 = v32;
    a2 = v32;
    goto LABEL_51;
  }
  a2[23] = v26;
  if (v26)
LABEL_51:
    memmove(a2, v29, v26);
LABEL_52:
  a2[v26] = 0;
  v46 = *v6;
  *(uint64_t *)((char *)&v46 + *(_QWORD *)(v46 - 24)) = v6[3];
  v47 = v10 + 16;
  if (SBYTE7(v52) < 0)
    operator delete((void *)v51);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v54);
}

void sub_19FDF89D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FDF89FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t md::LineTextWithAuxLabelPart::LineTextWithAuxLabelPart(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unsigned __int8 **v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v69;
  geo::read_write_lock *v70;
  const char *v71;
  malloc_zone_t *zone;
  __int128 v73;

  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E4294028;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  {
    v69 = operator new();
    *(_QWORD *)(v69 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v69 + 24) = "VectorKitLabels";
    *(_OWORD *)(v69 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v69 = &off_1E42B5668;
    *(_QWORD *)(v69 + 8) = "VectorKitLabels";
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_OWORD *)(v69 + 104) = 0u;
    *(_OWORD *)(v69 + 120) = 0u;
    *(_OWORD *)(v69 + 136) = 0u;
    *(_OWORD *)(v69 + 152) = 0u;
    *(_OWORD *)(v69 + 168) = 0u;
    *(_OWORD *)(v69 + 184) = 0u;
    *(_OWORD *)(v69 + 200) = 0u;
    *(_OWORD *)(v69 + 216) = 0u;
    *(_OWORD *)(v69 + 232) = 0u;
    *(_QWORD *)(v69 + 248) = 0;
    *(_OWORD *)(v69 + 56) = 0u;
    v70 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v69 + 56), 0);
    if ((_DWORD)v70)
      geo::read_write_lock::logFailure(v70, (uint64_t)"initialization", v71);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v69 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v69 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v69;
  }
  *(_QWORD *)(a1 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_WORD *)(a1 + 628) = 1;
  *(_BYTE *)(a1 + 630) = 0;
  *(_QWORD *)a1 = off_1E42A0B30;
  *(_DWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 656) = 16777253;
  *(_BYTE *)(a1 + 660) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 688) = 16777253;
  *(_BYTE *)(a1 + 692) = 0;
  *(_QWORD *)(a1 + 696) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 704) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (uint64_t *)(a1 + 576);
  *(_DWORD *)(a1 + 712) = 0;
  v13 = *(unsigned __int8 ***)(a1 + 584);
  v14 = *(_QWORD *)(a1 + 592);
  if ((unint64_t)v13 < v14)
  {
    if (v13)
      *v13 = a3;
    v15 = v13 + 1;
    goto LABEL_32;
  }
  v16 = ((uint64_t)v13 - *v12) >> 3;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61)
    goto LABEL_82;
  v18 = v14 - *v12;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 16))(*(_QWORD *)(a1 + 600), 8 * v19, 8);
    v21 = (unsigned __int8 **)(v20 + 8 * v16);
    v22 = v20 + 8 * v19;
    if (v20)
      *v21 = a3;
  }
  else
  {
    v22 = 0;
    v21 = (unsigned __int8 **)(8 * v16);
  }
  v15 = v21 + 1;
  v23 = *(_QWORD *)(a1 + 584);
  v24 = *(_QWORD *)(a1 + 576);
  if (v23 != v24)
  {
    v25 = v23 - v24 - 8;
    if (v25 < 0x38)
    {
      v27 = *(_QWORD *)(a1 + 584);
    }
    else if ((unint64_t)(v23 - (_QWORD)v21) < 0x20)
    {
      v27 = *(_QWORD *)(a1 + 584);
    }
    else
    {
      v26 = (v25 >> 3) + 1;
      v27 = v23 - 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = v21 - 2;
      v29 = (__int128 *)(v23 - 16);
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *v29;
        *((_OWORD *)v28 - 1) = *(v29 - 1);
        *(_OWORD *)v28 = v31;
        v28 -= 4;
        v29 -= 2;
        v30 -= 4;
      }
      while (v30);
      v21 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_29;
    }
    do
    {
      v32 = *(unsigned __int8 **)(v27 - 8);
      v27 -= 8;
      *--v21 = v32;
    }
    while (v27 != v24);
LABEL_29:
    v23 = *v12;
  }
  *(_QWORD *)(a1 + 576) = v21;
  *(_QWORD *)(a1 + 584) = v15;
  v33 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v22;
  if (v23)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 40))(*(_QWORD *)(a1 + 600), v23, v33 - v23);
LABEL_32:
  *(_QWORD *)(a1 + 584) = v15;
  v34 = *(_QWORD *)(a1 + 592);
  if ((unint64_t)v15 < v34)
  {
    *v15 = a4;
    v35 = v15 + 1;
    goto LABEL_57;
  }
  v36 = ((uint64_t)v15 - *v12) >> 3;
  if ((unint64_t)(v36 + 1) >> 61)
LABEL_82:
    abort();
  v37 = v34 - *v12;
  v38 = v37 >> 2;
  if (v37 >> 2 <= (unint64_t)(v36 + 1))
    v38 = v36 + 1;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
    v39 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v39 = v38;
  if (v39)
  {
    v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 16))(*(_QWORD *)(a1 + 600), 8 * v39, 8);
    v41 = (_QWORD *)(v40 + 8 * v36);
    v42 = v40 + 8 * v39;
    if (v40)
      *v41 = a4;
  }
  else
  {
    v42 = 0;
    v41 = (_QWORD *)(8 * v36);
  }
  v35 = v41 + 1;
  v43 = *(_QWORD *)(a1 + 584);
  v44 = *(_QWORD *)(a1 + 576);
  if (v43 == v44)
    goto LABEL_55;
  v45 = v43 - v44 - 8;
  if (v45 < 0x38)
  {
    v47 = *(_QWORD *)(a1 + 584);
  }
  else if ((unint64_t)(v43 - (_QWORD)v41) < 0x20)
  {
    v47 = *(_QWORD *)(a1 + 584);
  }
  else
  {
    v46 = (v45 >> 3) + 1;
    v47 = v43 - 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    v48 = v41 - 2;
    v49 = (__int128 *)(v43 - 16);
    v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *v49;
      *(v48 - 1) = *(v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 2;
      v50 -= 4;
    }
    while (v50);
    v41 -= v46 & 0x3FFFFFFFFFFFFFFCLL;
    if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_54;
  }
  do
  {
    v52 = *(_QWORD *)(v47 - 8);
    v47 -= 8;
    *--v41 = v52;
  }
  while (v47 != v44);
LABEL_54:
  v43 = *v12;
LABEL_55:
  *(_QWORD *)(a1 + 576) = v41;
  *(_QWORD *)(a1 + 584) = v35;
  v53 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v42;
  if (v43)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 40))(*(_QWORD *)(a1 + 600), v43, v53 - v43);
LABEL_57:
  *(_QWORD *)(a1 + 584) = v35;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 16))(&v73);
  v54 = v73;
  v73 = 0uLL;
  v55 = *(std::__shared_weak_count **)(a1 + 648);
  *(_OWORD *)(a1 + 640) = v54;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 16))(&v73);
  v61 = v73;
  v73 = 0uLL;
  v62 = *(std::__shared_weak_count **)(a1 + 680);
  *(_OWORD *)(a1 + 672) = v61;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  *(_BYTE *)(a1 + 658) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 80))(*(_QWORD *)(a1 + 640));
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(*(_QWORD *)a3 + 400))(a3, 0, 1);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(*(_QWORD *)a3 + 360))(a3, 0, 1);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(*(_QWORD *)a3 + 408))(a3, 0, a1 + 640);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a4 + 408))(a4, 0, a1 + 640);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, 1, 1);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a3 + 360))(a3, 1, 1);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a3 + 408))(a3, 1, a1 + 672);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 408))(a4, 1, a1 + 672);
  *(_WORD *)(a4 + 565) = a3[565];
  return a1;
}

void sub_19FDF921C(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 88);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)v1 + 85);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)v1 + 81);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonBase::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::PolygonBase::MeshMesh::~MeshMesh(ggl::PolygonBase::MeshMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolygonBase::MeshMesh::~MeshMesh(ggl::PolygonBase::MeshMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolygonBase::MeshMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolygonBase::MeshMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

ggl::PolygonBase::MeshMesh *ggl::PolygonBase::MeshMesh::MeshMesh(ggl::PolygonBase::MeshMesh *this, const char *a2)
{
  unsigned __int8 v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v29;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *zone;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *v37;
  uint64_t v38;
  geo::read_write_lock *v39;
  const char *v40;
  malloc_zone_t *v41;
  int v42;
  uint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  malloc_zone_t *v46;

  if ((v4 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
    *(_QWORD *)algn_1ECE43AF0 = 1;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E42BBC08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E42BBC28;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = &ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
  *((_QWORD *)this + 8) = 0;
  v5 = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  {
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v30 + 24) = "GeoGL";
    *(_OWORD *)(v30 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v30 = &off_1E42B5668;
    *(_QWORD *)(v30 + 8) = "GeoGL";
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_OWORD *)(v30 + 232) = 0u;
    *(_QWORD *)(v30 + 248) = 0;
    *(_OWORD *)(v30 + 56) = 0u;
    v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
    if ((_DWORD)v31)
      geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v30 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v30;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v7;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v34 + 24) = "GeoGL";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "GeoGL";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    v37 = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = v37;
    malloc_set_zone_name(v37, "GeoGL");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v34;
  }
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *(_QWORD *)this = &off_1E42BD378;
  *((_QWORD *)this + 2) = &unk_1E42BD398;
  v8 = *((_QWORD *)this + 8);
  v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v10 = *((_QWORD *)this + 9);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *((_QWORD *)this + 9) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v12);
  }
  *(_QWORD *)this = &off_1E42B5D08;
  *((_QWORD *)this + 2) = &unk_1E42B5D28;
  if (a2)
    v17 = a2;
  else
    v17 = "/VertexData";
  {
    v38 = operator new();
    *(_QWORD *)(v38 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v38 + 24) = "GeoGL";
    *(_OWORD *)(v38 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v38 = &off_1E42B5668;
    *(_QWORD *)(v38 + 8) = "GeoGL";
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(_OWORD *)(v38 + 104) = 0u;
    *(_OWORD *)(v38 + 120) = 0u;
    *(_OWORD *)(v38 + 136) = 0u;
    *(_OWORD *)(v38 + 152) = 0u;
    *(_OWORD *)(v38 + 168) = 0u;
    *(_OWORD *)(v38 + 184) = 0u;
    *(_OWORD *)(v38 + 200) = 0u;
    *(_OWORD *)(v38 + 216) = 0u;
    *(_OWORD *)(v38 + 232) = 0u;
    *(_QWORD *)(v38 + 248) = 0;
    *(_OWORD *)(v38 + 56) = 0u;
    v39 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v38 + 56), 0);
    if ((_DWORD)v39)
      geo::read_write_lock::logFailure(v39, (uint64_t)"initialization", v40);
    v41 = malloc_create_zone(0, 0);
    *(_QWORD *)(v38 + 48) = v41;
    malloc_set_zone_name(v41, "GeoGL");
    *(_QWORD *)(v38 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v38;
  }
  v19 = ggl::Allocator::instance(void)::alloc;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v20 = &off_1E42DFAA8;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 32) = &off_1E42B5748;
  v21 = v20 + 32;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 40) = 16;
  *(_DWORD *)(v20 + 48) = 6;
  v22 = 0uLL;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_QWORD *)(v20 + 120) = 0;
  if ((v23 & 1) == 0)
  {
    v22 = 0uLL;
    v21 = v20 + 32;
    if (v42)
    {
      v43 = operator new();
      *(_QWORD *)(v43 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v43 + 24) = "GeoGL";
      *(_OWORD *)(v43 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v43 = &off_1E42B5668;
      *(_QWORD *)(v43 + 8) = "GeoGL";
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 168) = 0u;
      *(_OWORD *)(v43 + 184) = 0u;
      *(_OWORD *)(v43 + 200) = 0u;
      *(_OWORD *)(v43 + 216) = 0u;
      *(_OWORD *)(v43 + 232) = 0u;
      *(_QWORD *)(v43 + 248) = 0;
      *(_OWORD *)(v43 + 56) = 0u;
      v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v43 + 56), 0);
      if ((_DWORD)v44)
        geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
      v46 = malloc_create_zone(0, 0);
      *(_QWORD *)(v43 + 48) = v46;
      malloc_set_zone_name(v46, "GeoGL");
      *(_QWORD *)(v43 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v43;
      v21 = v20 + 32;
      v22 = 0uLL;
    }
  }
  *(_QWORD *)(v20 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v20 + 136) = 0;
  *(_OWORD *)(v20 + 200) = v22;
  *(_OWORD *)(v20 + 184) = v22;
  *(_OWORD *)(v20 + 168) = v22;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = -1;
  *(_OWORD *)(v20 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 240) = v17;
  *(_QWORD *)(v20 + 248) = &ggl::PolygonBase::defaultVboReflection;
  *(_QWORD *)(v20 + 32) = &off_1E42B76E0;
  *(_QWORD *)(v20 + 232) = &unk_1E42B7700;
  v24 = *(uint64_t **)v5;
  v25 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 8);
  *v24 = v21;
  v24[1] = v20;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return this;
}

void ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
      }
      ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
      unk_1ECE43B18 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BD3B8;
  *(_QWORD *)(a1 + 16) = &unk_1E42BD3D8;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42B5CC8;
  *(_QWORD *)(a1 + 16) = &unk_1E42B5CE8;
  return a1;
}

void ggl::FlyoverBorder::FlyoverBorderMesh::~FlyoverBorderMesh(ggl::FlyoverBorder::FlyoverBorderMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverBorder::FlyoverBorderMesh::~FlyoverBorderMesh(ggl::FlyoverBorder::FlyoverBorderMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverBorder::FlyoverBorderMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverBorder::FlyoverBorderMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverBorder::FlyoverBorderPipelineState::~FlyoverBorderPipelineState(ggl::FlyoverBorder::FlyoverBorderPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverBorder::FlyoverBorderPipelineState::FlyoverBorderPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::FlyoverBorderShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverBorder::vertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::attributesReflection(void)::r;
            unk_1EE5761F8 = 1;
          }
          ggl::FlyoverBorder::FlyoverBorderPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::typedReflection(void)::r;
          unk_1EE575EB0 = &ggl::FlyoverBorder::pipelineDataFlyoverBorderPipelineDeviceStructs(void)::ref;
          qword_1EE575EB8 = 0;
          if ((v23 & 1) == 0
          {
            ggl::FlyoverBorder::pipelineDataFlyoverBorderPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            *(_QWORD *)algn_1EE575EE8 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE575EF0 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE575EF8 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE575F00 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1EE575EC0 = (uint64_t)&ggl::FlyoverBorder::pipelineDataFlyoverBorderPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE575EC8 = xmmword_19FFB5E60;
        }
      }
      ggl::FlyoverBorder::FlyoverBorderPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverBorder::FlyoverBorderPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverBorderShader::typedReflection(v18);
      qword_1EE58BA68 = (uint64_t)&ggl::FlyoverBorderShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58BAC8 = 0;
        qword_1EE58BAD0 = (uint64_t)"";
        dword_1EE58BAD8 = 0;
        qword_1EE58BAE0 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineAttributeBinding_0(void)::attr;
        unk_1EE58BAE8 = 3;
      }
      qword_1EE58BA70 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58BA78 = 1;
      qword_1EE58BA80 = 0;
      unk_1EE58BA88 = 4;
      qword_1EE58BA90 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineDeviceStructBinding(void)::ref;
      unk_1EE58BA98 = 0;
      if ((v21 & 1) == 0
      {
        ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE58BB08 = 0;
        qword_1EE58BB10 = (uint64_t)"sharedConstants";
        dword_1EE58BB18 = 3;
        qword_1EE58BB20 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE58BB28 = xmmword_19FFB3030;
        qword_1EE58BB38 = 1;
        unk_1EE58BB40 = "transform";
        dword_1EE58BB48 = 3;
        qword_1EE58BB50 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantTransformBinding(void)::reflection;
        unk_1EE58BB58 = vdupq_n_s64(2uLL);
        qword_1EE58BB68 = 2;
        unk_1EE58BB70 = "clip";
        dword_1EE58BB78 = 3;
        qword_1EE58BB80 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantClipBinding(void)::reflection;
        unk_1EE58BB88 = xmmword_19FFB3040;
        qword_1EE58BB98 = 3;
        unk_1EE58BBA0 = "material";
        dword_1EE58BBA8 = 3;
        qword_1EE58BBB0 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE58BBB8 = xmmword_19FFB3050;
        qword_1EE58BBC8 = 4;
        unk_1EE58BBD0 = "texcoords";
        dword_1EE58BBD8 = 3;
        qword_1EE58BBE0 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1EE58BBE8 = 2;
      }
      qword_1EE58BAA0 = (uint64_t)&ggl::FlyoverBorder::pipelineStateFlyoverBorderPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE58BAA8 = 5;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverBorder::FlyoverBorderPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42B6520;
  return a1;
}

void ggl::FlyoverBorder::FlyoverBorderPipelineSetup::~FlyoverBorderPipelineSetup(ggl::FlyoverBorder::FlyoverBorderPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverBorder::FlyoverBorderPipelineSetup::constantDataIsEnabled(ggl::FlyoverBorder::FlyoverBorderPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverBorder::FlyoverBorderPipelineSetup::textureIsEnabled(ggl::FlyoverBorder::FlyoverBorderPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

uint64_t ggl::FlyoverBorder::FlyoverBorderPipelineSetup::FlyoverBorderPipelineSetup(ggl::FlyoverBorder::FlyoverBorderPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverBorder::vertexReflection;
      }
      ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::attributesReflection(void)::r;
      unk_1EE5761F8 = 1;
    }
    ggl::FlyoverBorder::FlyoverBorderPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverBorder::Vertex>::typedReflection(void)::r;
    unk_1EE575EB0 = &ggl::FlyoverBorder::pipelineDataFlyoverBorderPipelineDeviceStructs(void)::ref;
    qword_1EE575EB8 = 0;
    if ((v5 & 1) == 0
    {
      ggl::FlyoverBorder::pipelineDataFlyoverBorderPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      *(_QWORD *)algn_1EE575EE8 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
      qword_1EE575EF0 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
      unk_1EE575EF8 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
      qword_1EE575F00 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
    }
    qword_1EE575EC0 = (uint64_t)&ggl::FlyoverBorder::pipelineDataFlyoverBorderPipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1EE575EC8 = xmmword_19FFB5E60;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::FlyoverBorder::FlyoverBorderPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B64F0;
  return result;
}

void ggl::FlyoverManeuver::DefaultMesh::~DefaultMesh(ggl::FlyoverManeuver::DefaultMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverManeuver::DefaultMesh::~DefaultMesh(ggl::FlyoverManeuver::DefaultMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverManeuver::DefaultMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverManeuver::DefaultMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverManeuver::Default>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverManeuver::Default>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverManeuver::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverManeuver::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverManeuver::DefaultPipelineState::DefaultPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverManeuverShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverManeuver::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverManeuver::defaultReflection;
            }
            ggl::MeshTyped<ggl::FlyoverManeuver::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverManeuver::Default>::attributesReflection(void)::r;
            unk_1EE576260 = 1;
          }
          ggl::FlyoverManeuver::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverManeuver::Default>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE58BC68 = &ggl::FlyoverManeuver::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE58BC70 = 0;
          if ((v97 & 1) == 0
          {
            ggl::FlyoverManeuver::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
            unk_1EE58BD80 = ggl::FlyoverManeuver::Displacement::reflection(void)::reflection;
            qword_1EE58BD88 = (uint64_t)ggl::FlyoverManeuver::Style::reflection(void)::reflection;
          }
          qword_1EE58BC78 = (uint64_t)&ggl::FlyoverManeuver::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE58BC80 = xmmword_19FFB35E0;
        }
      }
      ggl::FlyoverManeuver::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverManeuver::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverManeuverShader::typedReflection(v92);
      qword_1EE58BC10 = (uint64_t)&ggl::FlyoverManeuverShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::FlyoverManeuver::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58BCA0 = 0;
        qword_1EE58BCA8 = (uint64_t)"";
        dword_1EE58BCB0 = 0;
        qword_1EE58BCB8 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE58BCC0 = 4;
      }
      qword_1EE58BC18 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1EE58BC20 = 1;
      qword_1EE58BC28 = 0;
      unk_1EE58BC30 = 1;
      qword_1EE58BC38 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1EE58BC40 = 0;
      if ((v95 & 1) == 0
      {
        ggl::FlyoverManeuver::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58BCE0 = 0;
        qword_1EE58BCE8 = (uint64_t)"view";
        dword_1EE58BCF0 = 3;
        qword_1EE58BCF8 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        unk_1EE58BD00 = vdupq_n_s64(1uLL);
        qword_1EE58BD10 = 1;
        unk_1EE58BD18 = "displacement";
        dword_1EE58BD20 = 3;
        qword_1EE58BD28 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineConstantDisplacementBinding(void)::reflection;
        *(_OWORD *)algn_1EE58BD30 = xmmword_19FFB3C60;
        qword_1EE58BD40 = 2;
        unk_1EE58BD48 = "style";
        dword_1EE58BD50 = 3;
        qword_1EE58BD58 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineConstantStyleBinding(void)::reflection;
        unk_1EE58BD60 = 1;
      }
      qword_1EE58BC48 = (uint64_t)&ggl::FlyoverManeuver::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1EE58BC50 = 3;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverManeuver::DefaultPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B7108;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FlyoverManeuver::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverManeuver::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverManeuver::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverManeuver::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::FlyoverManeuver::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverManeuver::DefaultPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::SelectedDaVinciPolygonLayerDataSource::~SelectedDaVinciPolygonLayerDataSource(md::SelectedDaVinciPolygonLayerDataSource *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42AB3A8;
  v2 = (_QWORD *)*((_QWORD *)this + 103);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E42A6B18;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v8)
      goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_15:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42AB3A8;
  v2 = (_QWORD *)*((_QWORD *)this + 103);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E42A6B18;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v8)
      goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_15:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SelectedDaVinciPolygonLayerDataSource::setSelectedFeatureId(md::SelectedDaVinciPolygonLayerDataSource *this, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6[2];
  void *__p[2];
  int v8;

  *(_OWORD *)v6 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v6, a2, a2);
  md::SelectedDaVinciPolygonLayerDataSource::setSelectedPolygons((uint64_t)this, (uint64_t)v6);
  v3 = __p[0];
  if (__p[0])
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = v6[0];
  v6[0] = 0;
  if (v5)
    operator delete(v5);
}

void sub_19FDFB778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FDFB78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void md::SelectedDaVinciPolygonLayerDataSource::deselectFeatureId(md::SelectedDaVinciPolygonLayerDataSource *this)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4[2];
  void *__p[2];
  int v6;

  *(_OWORD *)v4 = 0u;
  *(_OWORD *)__p = 0u;
  v6 = 1065353216;
  md::SelectedDaVinciPolygonLayerDataSource::setSelectedPolygons((uint64_t)this, (uint64_t)v4);
  v1 = __p[0];
  if (__p[0])
  {
    do
    {
      v2 = (_QWORD *)*v1;
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
  v3 = v4[0];
  v4[0] = 0;
  if (v3)
    operator delete(v3);
}

void sub_19FDFB820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL md::SelectedDaVinciPolygonLayerDataSource::shouldFilterFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_BYTE *)(a3 + 127) == 1 || *(_QWORD *)(a3 + 40) != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
}

void md::Label::~Label(md::Label *this)
{
  md::Label::~Label(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  unsigned int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  md::LabelAnimator *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;

  *(_QWORD *)this = &off_1E42AC2E8;
  *((_QWORD *)this + 5) = &unk_1E42AC340;
  if (*((_BYTE *)this + 483))
    *(_BYTE *)(*((_QWORD *)this + 57) + 285) = 1;
  do
    v2 = __ldaxr((unsigned int *)&md::Label::_totalLabels);
  while (__stlxr(v2 - 1, (unsigned int *)&md::Label::_totalLabels));
  v3 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1A1AF4E00](v3, 0x20C40A4A59CD2);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 150);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (md::LabelAnimator *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v10)
  {
    md::LabelAnimator::~LabelAnimator(v10);
    MEMORY[0x1A1AF4E00]();
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 137);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 129);
  if (!v12)
    goto LABEL_24;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    if (!v15)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    if (!v15)
      goto LABEL_30;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_30:
  v18 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v18)
    MEMORY[0x1A1AF4E00](v18, 0x1000C40C179455ELL);
  v19 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v19)
    MEMORY[0x1A1AF4E00](v19, 0x1000C4015B1EB14);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
  if (!v20)
    goto LABEL_38;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 87);
    if (!v23)
      goto LABEL_44;
  }
  else
  {
LABEL_38:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 87);
    if (!v23)
      goto LABEL_44;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_44:
  v26 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v26)
    MEMORY[0x1A1AF4E00](v26, 0x1000C40C179455ELL);
  v27 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v27)
    MEMORY[0x1A1AF4E00](v27, 0x1000C4015B1EB14);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (!v28)
    goto LABEL_52;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (!v31)
      goto LABEL_58;
  }
  else
  {
LABEL_52:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (!v31)
      goto LABEL_58;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_58:
  v34 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v42)
    goto LABEL_78;
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v45)
      goto LABEL_84;
  }
  else
  {
LABEL_78:
    v45 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v45)
      goto LABEL_84;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_84:
  *(_QWORD *)this = off_1E42AF850;
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

uint64_t md::Label::isCollidable(md::Label *this)
{
  return *((unsigned __int8 *)this + 1290);
}

uint64_t md::Label::collisionBounds(md::Label *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 248))(*((_QWORD *)this + 36));
}

uint64_t md::Label::incident(md::Label *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
}

uint64_t md::Label::intersectsStagingFrustum(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 480))(result);
  return result;
}

uint64_t md::Label::intersectsDisplayFrustum(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 488))(result);
  return result;
}

uint64_t md::Label::collidesWithObject(md::Label *this, const md::CollisionObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 36);
  if (result)
    return (*(uint64_t (**)(uint64_t, const md::CollisionObject *))(*(_QWORD *)result + 464))(result, a2);
  return result;
}

uint64_t md::Label::collidesWithItem(md::Label *this, const md::LabelCollidableItem *a2)
{
  return (*(uint64_t (**)(_QWORD, const md::LabelCollidableItem *, _QWORD))(**((_QWORD **)this + 36) + 456))(*((_QWORD *)this + 36), a2, 0);
}

void `non-virtual thunk to'md::Label::~Label(md::Label *this)
{
  md::Label::~Label((md::Label *)((char *)this - 40));
}

{
  md::Label::~Label((md::Label *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t `non-virtual thunk to'md::Label::collidesWithObject(md::Label *this, const md::CollisionObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 31);
  if (result)
    return (*(uint64_t (**)(uint64_t, const md::CollisionObject *))(*(_QWORD *)result + 464))(result, a2);
  return result;
}

void md::LabelCollisionItem::~LabelCollisionItem(md::LabelCollisionItem *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelCollisionItem::isHighlighted(md::LabelCollisionItem *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 7) + 1242));
  return v1 & 1;
}

uint64_t md::LabelCollisionItem::isCollidable(md::LabelCollisionItem *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 7) + 1290);
}

uint64_t md::LabelCollisionItem::dedupingGroupSubID(md::LabelCollisionItem *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 7) + 36);
}

uint64_t md::LabelCollisionItem::didCollide(md::LabelCollisionItem *this)
{
  return *((unsigned __int8 *)this + 65);
}

void md::LabelPartPlacementCandidate::~LabelPartPlacementCandidate(md::LabelPartPlacementCandidate *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelPartPlacementCandidate::collidesWithObject(md::LabelPartPlacementCandidate *this, const md::CollisionObject *a2)
{
  return (*(uint64_t (**)(_QWORD, const md::CollisionObject *))(**((_QWORD **)this + 1) + 464))(*((_QWORD *)this + 1), a2);
}

float md::Label::featurePixel(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v7;

  LODWORD(a5) = 0;
  LODWORD(a4) = 0;
  if (*(_BYTE *)(a1 + 1211) == 6)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 192), "position", a4, a5);
    if (a3 == 1)
      v7 = a2 + 440;
    else
      v7 = *(_QWORD *)(a2 + 432);
    *(float *)&a4 = a4 * *(float *)(v7 + 40);
  }
  return *(float *)&a4;
}

uint64_t md::Label::resolvedCollisionOverlayGroup(md::Label *this)
{
  unsigned __int8 v1;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v1 = atomic_load((unsigned __int8 *)this + 1240);
  if ((v1 & 1) != 0)
    return 1;
  result = *((unsigned __int8 *)this + 365);
  if (!(_DWORD)result)
  {
    v4 = *((unsigned __int8 *)this + 1211);
    if (v4 <= 0x17)
    {
      if (((1 << v4) & 0xF17000) != 0)
        return 4;
      if (((1 << v4) & 0x300) != 0)
        return 3;
      if (v4 == 2
        && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 280))(*((_QWORD *)this + 1)) == 1)
      {
        return 4;
      }
    }
    if (*((_BYTE *)this + 1210) == 1)
    {
      v5 = *((_QWORD *)this + 1);
      v6 = *((unsigned int *)this + 12);
      v7 = atomic_load((unsigned __int8 *)this + 1240);
      v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 552))(v5, v6, 0, v7 & 1, 0);
      v9 = *v8;
      if (*v8)
      {
        v10 = *(_QWORD *)(v9 + 296);
        if (!v10)
        {
          v11 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v8, 0);
          v10 = *v11;
          *(_QWORD *)(v9 + 296) = *v11;
        }
        if (*(_BYTE *)(v10 + 88) == 2)
          return 4;
      }
    }
    return 2;
  }
  return result;
}

void std::__shared_ptr_emplace<md::LabelAnimationStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelAnimationStyleGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelAnimationStyleGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::Label::Label(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v19;
  uint64_t v20;
  BOOL *v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  BOOL v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  long double v36;
  long double v37;
  long double v38;
  long double v39;
  long double v40;
  long double v41;
  long double v42;
  double v43;
  long double v44;
  _QWORD *v45;
  long double v46;
  long double v47;
  double v48;
  long double v49;
  double v50;
  __double2 v51;
  double v52;
  __double2 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  long double v58;
  long double v59;
  double v60;
  long double v61;
  double v62;
  __double2 v63;
  double v64;
  __double2 v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  _BYTE *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  char v86;
  int *v87;
  int v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  int *v94;
  int v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  char v100;
  int *v101;
  int v102;
  char v103;
  unint64_t v104;
  int v105;
  int v106;
  char v107;
  int *v108;
  int v109;
  char v110;
  char v111;
  unint64_t v112;
  int *v113;
  int v114;
  unint64_t v115;
  int v116;
  int *v117;
  int v118;
  uint64_t v119;
  md::LabelExternalPointFeature *v120;
  std::__shared_weak_count *v121;
  BOOL *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count *v124;
  BOOL v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int v134;
  _QWORD *v135;
  unsigned int v136;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float v144;
  BOOL v145;
  int v146;
  char v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  int *v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  float v161;
  int v162;
  BOOL v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  _BYTE **v170;
  _BYTE *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 v176;
  uint64_t v177;
  unsigned __int8 *v178;
  std::__shared_weak_count *v179;

  *(_QWORD *)a1 = off_1E42AF850;
  *(_QWORD *)(a1 + 8) = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42AC2E8;
  *(_QWORD *)(a1 + 40) = &unk_1E42AC340;
  *(_DWORD *)(a1 + 48) = *a4;
  v10 = (unsigned int *)(a1 + 48);
  *(_DWORD *)(a1 + 60) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  v11 = (_OWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 136))(*a3, a1 + 48);
  *(_QWORD *)(a1 + 160) = v12;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 144))(*a3, a1 + 48);
  LOBYTE(v15) = 0;
  *(_QWORD *)(a1 + 168) = v13;
  *(_QWORD *)(a1 + 176) = v14;
  if (*(_BYTE *)(a1 + 164) && (v14 & 0xFF00000000) != 0)
    v15 = COERCE_UNSIGNED_INT(-(float)((float)(*(float *)(a1 + 156) * *(float *)&v13)
                                     - (float)(*(float *)(a1 + 152) * *((float *)&v13 + 1)))) >> 31;
  *(_BYTE *)(a1 + 184) = v15;
  *(_BYTE *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(float *)(a1 + 200) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 296))(*a3, a1 + 48);
  *(_DWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 152))(*a3, a1 + 48);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 224) = _Q0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0x1000000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 311) = 0;
  *(_BYTE *)(a1 + 315) = 9;
  *(_DWORD *)(a1 + 316) = 0;
  *(_WORD *)(a1 + 320) = 9;
  v19 = operator new();
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 44) = 0;
  *(_BYTE *)(v19 + 52) = 4;
  *(_QWORD *)v19 = &off_1E42948F0;
  *(_QWORD *)(v19 + 56) = a1;
  *(_WORD *)(v19 + 64) = 0;
  *(_QWORD *)(a1 + 328) = v19;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 359) = 0;
  *(_WORD *)(a1 + 368) = 356;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 396) = 1065353216;
  *(_WORD *)(a1 + 404) = 256;
  *(_DWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 444) = 1065353216;
  *(_DWORD *)(a1 + 451) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_WORD *)(a1 + 480) = 256;
  *(_DWORD *)(a1 + 482) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 732) = 0u;
  *(_DWORD *)(a1 + 748) = 1132199936;
  *(_WORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 764) = 1065353216;
  *(_QWORD *)(a1 + 756) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0x7F7FFFFF00000000;
  *(_OWORD *)(a1 + 792) = xmmword_19FFB5950;
  *(_DWORD *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 812) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_WORD *)(a1 + 820) = 9472;
  *(_QWORD *)(a1 + 829) = 0;
  *(_QWORD *)(a1 + 822) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 1040) = xmmword_19FFB2D90;
  *(_OWORD *)(a1 + 1056) = xmmword_19FFB3480;
  *(_WORD *)(a1 + 1072) = 9472;
  *(_DWORD *)(a1 + 1082) = 0;
  *(_QWORD *)(a1 + 1074) = 0;
  *(_QWORD *)(a1 + 1101) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_BYTE *)(a1 + 1109) = 38;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1120) = xmmword_19FFB3480;
  *(_QWORD *)(a1 + 1136) = EaseLinear;
  *(_QWORD *)(a1 + 1144) = EaseLinear;
  *(_OWORD *)(a1 + 1152) = xmmword_19FFB3480;
  *(_QWORD *)(a1 + 1168) = EaseLinear;
  *(_QWORD *)(a1 + 1176) = EaseLinear;
  *(_WORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_BYTE *)(a1 + 1210) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 48);
  *(_BYTE *)(a1 + 1211) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 1212) = 167706624;
  v20 = *a3;
  *(_BYTE *)(a1 + 1216) = *(_BYTE *)(*a3 + 138);
  *(_QWORD *)(a1 + 1217) = 0;
  *(_OWORD *)(a1 + 1225) = 0u;
  *(_DWORD *)(a1 + 1241) = 0;
  *(_WORD *)(a1 + 1245) = 1;
  *(_BYTE *)(a1 + 1247) = 1;
  *(_DWORD *)(a1 + 1263) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_BYTE *)(a1 + 1267) = 1;
  *(_DWORD *)(a1 + 1268) = 0;
  *(_BYTE *)(a1 + 1272) = 0;
  *(_BYTE *)(a1 + 1273) = 1;
  *(_BYTE *)(a1 + 1274) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 336))(v20);
  v21 = (BOOL *)(a1 + 1275);
  *(_DWORD *)(a1 + 1275) = 16842752;
  v22 = (_BYTE *)(a1 + 1279);
  *(_QWORD *)(a1 + 1279) = 0;
  *(_BYTE *)(a1 + 1287) = 1;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_WORD *)(a1 + 1296) = 0;
  *(_DWORD *)(a1 + 1300) = 1065353216;
  *(_BYTE *)(a1 + 364) = 127;
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 584))(&v178, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 48));
  if (v178 && (v23 = v178[33]) != 0)
  {
    v24 = 0;
    v25 = (int *)(*(_QWORD *)v178 + 4);
    v26 = -1;
    do
    {
      v27 = *(v25 - 1);
      if (v27 == 6)
      {
        v26 = *v25;
      }
      else if (v27 == 5)
      {
        v24 |= *v25 == 3;
      }
      v25 += 2;
      --v23;
    }
    while (v23);
    if ((v24 & 1) != 0)
      v28 = v26;
    else
      v28 = -1;
  }
  else
  {
    v28 = -1;
  }
  *(_DWORD *)(a1 + 1304) = v28;
  v29 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a1 + 48);
  md::LabelPoint::coordinate((md::LabelPoint *)&v176, v29);
  *v11 = v176;
  *(_QWORD *)(a1 + 144) = v177;
  v30 = *(float *)(v29 + 40);
  v31 = v30 != 3.4028e38;
  if (v30 == 3.4028e38)
    v30 = 0.0;
  *(float *)(a1 + 188) = v30;
  *(_BYTE *)(a1 + 192) = v31;
  *(_OWORD *)(a1 + 792) = xmmword_19FFB5EF0;
  if (*(_BYTE *)(a2 + 3050))
    *(_BYTE *)(a1 + 1245) = *(_BYTE *)(a2 + 3056) ^ 1;
  v32 = *(_QWORD *)(a2 + 232);
  if (!*(_BYTE *)(v32 + 26) && *(_BYTE *)(a1 + 180))
    *(_BYTE *)(a1 + 180) = 0;
  if (!*(_BYTE *)(v32 + 17))
  {
    if (*(_BYTE *)(v29 + 46))
    {
      v45 = (_QWORD *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v29);
      *(_QWORD *)(a1 + 112) = *v45;
      *(_QWORD *)(a1 + 120) = v45[1];
      if (!*(_BYTE *)(v29 + 44))
      {
        v46 = *(double *)(v29 + 24) * 6.28318531;
        v47 = exp(*(double *)(v29 + 32) * 6.28318531 + -3.14159265);
        v48 = atan(v47) * 2.0 + -1.57079633;
        v49 = fmod(v46, 6.28318531);
        v50 = fmod(v49 + 6.28318531, 6.28318531) + -3.14159265;
        v51 = __sincos_stret(v48);
        v52 = 6378137.0 / sqrt(v51.__sinval * v51.__sinval * -0.00669437999 + 1.0);
        v53 = __sincos_stret(v50);
        v54 = v52 * v51.__cosval * v53.__cosval;
        v55 = v52 * v51.__cosval * v53.__sinval;
        v56 = v51.__sinval * 0.99330562 * v52;
        *(double *)v29 = v54;
        *(double *)(v29 + 8) = v55;
        *(double *)(v29 + 16) = v56;
        *(_BYTE *)(v29 + 44) = 1;
LABEL_38:
        v67 = v55;
        v68 = v54;
        v69 = atan2f(v67, v68) * 0.159154943 + 0.5;
        v70 = v56;
        v71 = atan2f(sqrtf((float)(v67 * v67) + (float)(v68 * v68)), -v70) * 0.318309886;
        *(float *)(a1 + 196) = (float)(v69 + 1.0) + v71;
        goto LABEL_39;
      }
    }
    else
    {
      if (*(_BYTE *)(v29 + 44))
      {
        v57 = *(double *)(v29 + 16);
      }
      else
      {
        v58 = *(double *)(v29 + 24) * 6.28318531;
        v59 = exp(*(double *)(v29 + 32) * 6.28318531 + -3.14159265);
        v60 = atan(v59) * 2.0 + -1.57079633;
        v61 = fmod(v58, 6.28318531);
        v62 = fmod(v61 + 6.28318531, 6.28318531) + -3.14159265;
        v63 = __sincos_stret(v60);
        v64 = 6378137.0 / sqrt(v63.__sinval * v63.__sinval * -0.00669437999 + 1.0);
        v65 = __sincos_stret(v62);
        v57 = v63.__sinval * 0.99330562 * v64;
        *(double *)v29 = v64 * v63.__cosval * v65.__cosval;
        *(double *)(v29 + 8) = v64 * v63.__cosval * v65.__sinval;
        *(double *)(v29 + 16) = v57;
        *(_BYTE *)(v29 + 44) = 1;
      }
      _NF = v57 < 1.0;
      v66 = 0.0;
      if (!_NF)
        v66 = 1.0;
      *(_QWORD *)(a1 + 112) = 0;
      *(double *)(a1 + 120) = v66;
      *(_BYTE *)(a1 + 1268) = 1;
    }
    v54 = *(double *)v29;
    v55 = *(double *)(v29 + 8);
    v56 = *(double *)(v29 + 16);
    goto LABEL_38;
  }
  v33 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v29);
  v34 = *v33;
  *(double *)(a1 + 112) = *v33;
  v35 = v33[1];
  *(double *)(a1 + 120) = v35;
  *(float *)&v34 = v34 + 1.0 + v35;
  *(_DWORD *)(a1 + 196) = LODWORD(v34);
  v36 = exp(v35 * 6.28318531 + -3.14159265);
  v37 = atan(v36) * 114.591559 + -90.0;
  v38 = cos(v37 * 0.034906585) * -559.82 + 111132.92;
  v39 = v38 + cos(v37 * 0.0698131701) * 1.175;
  v40 = v39 + cos(v37 * 0.104719755) * -0.0023;
  v41 = v37 * 0.00872664626;
  v42 = tan(v37 * 0.00872664626 + 0.78103484);
  v43 = log(v42);
  v44 = tan(v41 + 0.789761487);
  *(long double *)(a1 + 224) = fabs((log(v44) - v43) * 0.159154943) / v40;
LABEL_39:
  v72 = (_BYTE *)(a1 + 1268);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)(a2 + 232) + 56);
  do
    v73 = __ldaxr((unsigned int *)&md::Label::_totalLabels);
  while (__stlxr(v73 + 1, (unsigned int *)&md::Label::_totalLabels));
  *(_BYTE *)(a1 + 1254) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 320))(*(_QWORD *)(a1 + 8));
  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)))
    goto LABEL_144;
  v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 1264) = 1;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v74 + 84);
  v75 = *(unsigned __int8 **)(v74 + 96);
  v76 = *(_QWORD *)(v74 + 104);
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  *(_QWORD *)(a1 + 1192) = v75;
  v79 = *(std::__shared_weak_count **)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = v76;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    v75 = *(unsigned __int8 **)(a1 + 1192);
  }
  *(_BYTE *)(a1 + 1076) = *(_BYTE *)(v74 + 9) == 1;
  if (v75)
  {
    if (v75[8] - 3 > 1)
    {
      v86 = 0;
      goto LABEL_70;
    }
    v82 = *(_QWORD *)(v74 + 32);
    if (v82)
    {
      v83 = *(unsigned __int8 *)(v82 + 33);
      if (!*(_BYTE *)(v82 + 33))
      {
        LODWORD(v82) = 0;
LABEL_66:
        v85 = 0;
LABEL_67:
        if ((v85 | v82) == 3)
          v86 = v83;
        else
          v86 = 0;
LABEL_70:
        *(_BYTE *)(a1 + 1209) = v86;
        *(_BYTE *)(a1 + 1208) = v75[52] != 2;
        if (v75[53])
          *(_BYTE *)(a1 + 1221) = 1;
        goto LABEL_72;
      }
      v82 = *(_QWORD *)v82;
      if (*(_DWORD *)v82 == 65626)
      {
        v84 = 0;
LABEL_57:
        LOWORD(v82) = *(_DWORD *)(v82 + 8 * v84 + 4);
        v85 = v82 & 0xFF00;
        LODWORD(v82) = v82;
        LOBYTE(v83) = 1;
        goto LABEL_67;
      }
      v84 = 0;
      v87 = (int *)(v82 + 8);
      while (v83 - 1 != v84)
      {
        v88 = *v87;
        v87 += 2;
        ++v84;
        if (v88 == 65626)
        {
          if (v84 < v83)
            goto LABEL_57;
          break;
        }
      }
      LODWORD(v82) = 0;
    }
    LOBYTE(v83) = 0;
    goto LABEL_66;
  }
LABEL_72:
  v89 = *(_QWORD *)(v74 + 32);
  v90 = *(std::__shared_weak_count **)(v74 + 40);
  if (v90)
  {
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  if (v89)
  {
    v93 = *(unsigned __int8 *)(v89 + 33);
    if (*(_BYTE *)(v89 + 33))
    {
      v94 = *(int **)v89;
      v95 = *v94;
      if (*v94 == 6)
      {
        v96 = 0;
LABEL_79:
        v97 = v94[2 * v96 + 1];
        v98 = v97 & 0xFF00;
        v99 = v97;
        v100 = 1;
      }
      else
      {
        v96 = 0;
        v101 = v94 + 2;
        while (v93 - 1 != v96)
        {
          v102 = *v101;
          v101 += 2;
          ++v96;
          if (v102 == 6)
          {
            if (v96 < v93)
              goto LABEL_79;
            break;
          }
        }
        v99 = 0;
        v100 = 0;
        v98 = 0;
      }
      if ((v98 | v99) == 0x15C)
        v103 = v100;
      else
        v103 = 0;
      *(_BYTE *)(a1 + 1256) = v103;
      if (v95 == 65570)
      {
        v104 = 0;
LABEL_91:
        LOWORD(v106) = v94[2 * v104 + 1];
        v105 = v106 & 0xFF00;
        v106 = v106;
        v107 = 1;
      }
      else
      {
        v104 = 0;
        v108 = v94 + 2;
        while (v93 - 1 != v104)
        {
          v109 = *v108;
          v108 += 2;
          ++v104;
          if (v109 == 65570)
          {
            if (v104 < v93)
              goto LABEL_91;
            break;
          }
        }
        v106 = 0;
        v107 = 0;
        v105 = 0;
      }
      if ((v105 | v106) == 1)
        v110 = v107;
      else
        v110 = 0;
      *(_BYTE *)(a1 + 1257) = v110;
      if (v95 == 65616)
      {
LABEL_101:
        v111 = 1;
      }
      else
      {
        v112 = 0;
        v113 = v94 + 2;
        while (v93 - 1 != v112)
        {
          v114 = *v113;
          v113 += 2;
          ++v112;
          if (v114 == 65616)
          {
            if (v112 < v93)
              goto LABEL_101;
            break;
          }
        }
        v111 = 0;
      }
      *(_BYTE *)(a1 + 1258) = v111;
      if (v95 == 65567)
      {
        v115 = 0;
LABEL_109:
        v116 = LOWORD(v94[2 * v115 + 1]);
        if (v116 == 3)
        {
          *(_BYTE *)(a1 + 1255) = 1;
          *(_BYTE *)(a1 + 453) = 1;
          *(_BYTE *)(a1 + 1246) = 1;
        }
        else if (v116 == 2)
        {
          *(_BYTE *)(a1 + 1254) = 1;
        }
      }
      else
      {
        v115 = 0;
        v117 = v94 + 2;
        while (v93 - 1 != v115)
        {
          v118 = *v117;
          v117 += 2;
          ++v115;
          if (v118 == 65567)
          {
            if (v115 < v93)
              goto LABEL_109;
            break;
          }
        }
      }
    }
    else
    {
      *(_WORD *)(a1 + 1256) = 0;
      *(_BYTE *)(a1 + 1258) = 0;
    }
  }
  v119 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  v120 = (md::LabelExternalPointFeature *)v119;
  if (!v119)
    goto LABEL_139;
  *(_BYTE *)(a1 + 1222) = *(_BYTE *)(v74 + 88);
  v121 = *(std::__shared_weak_count **)(v119 + 304);
  if (!v121)
  {
    v122 = (BOOL *)(a1 + 1275);
    goto LABEL_129;
  }
  v122 = (BOOL *)(a1 + 1275);
  if (v121->__shared_owners_ == -1)
  {
LABEL_129:
    v126 = 0;
    goto LABEL_137;
  }
  v123 = std::__shared_weak_count::lock(v121);
  v124 = v123;
  if (v123)
    _ZF = *((_QWORD *)v120 + 37) == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v127 = *((_QWORD *)v120 + 36);
    if (v127)
      v126 = *(_QWORD *)(v127 + 72) != 0;
    else
      v126 = 0;
LABEL_133:
    v128 = (unint64_t *)&v123->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v124);
    }
    goto LABEL_137;
  }
  v126 = 0;
  if (v123)
    goto LABEL_133;
LABEL_137:
  *(_BYTE *)(a1 + 1104) = v126;
  v21 = v122;
  v22 = (_BYTE *)(a1 + 1279);
  v10 = (unsigned int *)(a1 + 48);
  *(_BYTE *)(a1 + 1105) = md::LabelExternalPointFeature::isLeafClusterChild(v120);
  if (*(_BYTE *)(a1 + 1254))
    *(_BYTE *)(a1 + 453) = 1;
LABEL_139:
  v72 = (_BYTE *)(a1 + 1268);
  if (v90)
  {
    v130 = (unint64_t *)&v90->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_144:
  v132 = *(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(a1 + 1211) == 1)
  {
    v133 = v132[58];
    if (v133)
    {
      v134 = *v10;
      v135 = v132 + 58;
      do
      {
        v136 = *(_DWORD *)(v133 + 32);
        _CF = v136 >= v134;
        if (v136 >= v134)
          v138 = (uint64_t *)v133;
        else
          v138 = (uint64_t *)(v133 + 8);
        if (_CF)
          v135 = (_QWORD *)v133;
        v133 = *v138;
      }
      while (*v138);
      if (v135 != v132 + 58 && v134 >= *((_DWORD *)v135 + 8))
      {
        v140 = v135[5];
        v139 = v135[6];
        if (v140 != v139)
        {
          v141 = *(_QWORD *)(v139 - 8);
          v142 = v141 ? v141 + 8 : 0;
          if (*(float *)(v142 + 64) != 3.4028e38
            || *(_BYTE *)(v142 + 100)
            || *(_BYTE *)(v142 + 108)
            || *(float *)(v142 + 112) != 0.0)
          {
            v143 = operator new();
            *(_OWORD *)(v143 + 20) = 0u;
            *(_OWORD *)(v143 + 4) = 0u;
            v144 = *(float *)(v142 + 64);
            v145 = v144 != 3.4028e38;
            v146 = 0;
            if (v144 == 3.4028e38)
              v144 = 0.0;
            *(float *)v143 = v144;
            *(_BYTE *)(v143 + 4) = v145;
            v147 = *(_BYTE *)(v142 + 100);
            *(_DWORD *)(v143 + 8) = *(_DWORD *)(v142 + 96);
            *(_BYTE *)(v143 + 12) = v147;
            v148 = *(_DWORD *)(v142 + 112);
            *(_DWORD *)(v143 + 36) = v148;
            v149 = *(unsigned __int8 *)(v142 + 108);
            if (*(_BYTE *)(v142 + 108))
            {
              v146 = *(_DWORD *)(v142 + 104);
              *(_DWORD *)(v143 + 32) = v146;
              v150 = *(_QWORD *)(v142 + 116);
              *(_DWORD *)(v143 + 24) = *(_DWORD *)(v142 + 124);
              *(_QWORD *)(v143 + 16) = v150;
              v149 = 1;
              *(_BYTE *)(v143 + 28) = 1;
            }
            *(_BYTE *)(a1 + 257) = 1;
            if (*(unsigned __int8 *)(a1 + 164) == v149)
            {
              if (*(_BYTE *)(a1 + 164))
              {
                *(_QWORD *)(a1 + 152) = *(_QWORD *)(v143 + 16);
                *(_DWORD *)(a1 + 160) = *(_DWORD *)(v143 + 24);
              }
            }
            else if (*(_BYTE *)(a1 + 164))
            {
              *(_BYTE *)(a1 + 164) = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(v143 + 16);
              *(_DWORD *)(a1 + 160) = *(_DWORD *)(v143 + 24);
              *(_BYTE *)(a1 + 164) = 1;
            }
            *(_DWORD *)(a1 + 248) = v146;
            *(_BYTE *)(a1 + 252) = 1;
            if (*(_BYTE *)(v143 + 12))
              v151 = *(_DWORD *)(v143 + 8);
            else
              v151 = 0;
            *(_BYTE *)(a1 + 258) = v149 | *(_BYTE *)(v143 + 12);
            *(_DWORD *)(a1 + 240) = v148;
            *(_DWORD *)(a1 + 244) = v151;
            MEMORY[0x1A1AF4E00]();
          }
        }
      }
    }
    v132 = *(_QWORD **)(a1 + 8);
  }
  *(_BYTE *)(a1 + 1219) = *(_BYTE *)(*(_QWORD *)(a2 + 232) + 32);
  (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD))(*v132 + 584))(&v176, v132, *(unsigned int *)(a1 + 48));
  if ((_QWORD)v176)
  {
    v152 = *(unsigned __int8 *)(v176 + 33);
    if (*(_BYTE *)(v176 + 33))
    {
      if (**(_DWORD **)v176 == 161)
      {
LABEL_181:
        LOBYTE(v152) = 1;
      }
      else
      {
        v153 = 0;
        v154 = (int *)(*(_QWORD *)v176 + 8);
        while (v152 - 1 != v153)
        {
          v155 = *v154;
          v154 += 2;
          ++v153;
          if (v155 == 161)
          {
            if (v153 < v152)
              goto LABEL_181;
            break;
          }
        }
        LOBYTE(v152) = 0;
      }
    }
    *(_BYTE *)(a1 + 1269) = v152;
  }
  if (*(_BYTE *)(a1 + 1211) == 6)
  {
    *(_BYTE *)(a1 + 259) = 0;
    *(_BYTE *)(a1 + 1219) = 6;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8)) & 0xFE) == 2)
    *(_BYTE *)(a1 + 1267) = 0;
  v156 = *(unsigned __int8 *)(a1 + 1211);
  if (v156 == 4)
  {
    *(_BYTE *)(a1 + 1276) = 1;
  }
  else if (v156 == 1 && !*v72)
  {
    *v22 = 1;
  }
  v157 = *(unsigned __int8 *)(a1 + 1210);
  if (v157 == 7 || v157 == 4)
    *(_BYTE *)(a1 + 38) = 1;
  *(_BYTE *)(a1 + 1217) = 1;
  *(_QWORD *)(a1 + 784) = 0x7F7FFFFF00000000;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 232) + 16) == 3)
  {
    *(_BYTE *)(a1 + 1219) = 5;
    *(_BYTE *)(a1 + 454) = 1;
    *(_WORD *)(a1 + 1271) = 257;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 360))(*(_QWORD *)(a1 + 8)))
  {
    *(_BYTE *)(a1 + 1219) = 0;
  }
  else if (*(_BYTE *)(*(_QWORD *)(a2 + 232) + 16) == 2)
  {
    *(_BYTE *)(a1 + 38) = 2;
    v158 = md::LabelSettingsStyleCache::muninPointStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(a2 + 336) + 200));
    if (*(_BYTE *)(a1 + 1211) == 18)
    {
      v159 = *(_QWORD *)(a1 + 8);
      *(_WORD *)(a1 + 1217) = 259;
      v160 = *(_DWORD *)(v158 + 8);
      *(_DWORD *)(a1 + 784) = 0;
      *(_DWORD *)(a1 + 788) = v160;
      *(_BYTE *)(a1 + 1219) = *(_BYTE *)(v158 + 4);
      *(_DWORD *)(a1 + 208) = *(_DWORD *)(v158 + 20);
      *(_BYTE *)(a1 + 454) = 1;
      *(_WORD *)(a1 + 1259) = 257;
      v161 = *(float *)(v159 + 776);
      if (v161 > *(float *)(v158 + 12))
        *(float *)(a1 + 204) = *(float *)(v158 + 16) + v161;
    }
    else
    {
      *(_BYTE *)(a1 + 1217) = 4;
      v162 = *(_DWORD *)(v158 + 44);
      *(_DWORD *)(a1 + 784) = 0;
      *(_DWORD *)(a1 + 788) = v162;
      *(_BYTE *)(a1 + 1219) = *(_BYTE *)(md::LabelSettingsStyleCache::muninPointStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(a2 + 336) + 200))
                                       + 36);
    }
  }
  *(_BYTE *)(a1 + 1265) = *(_BYTE *)(a1 + 1211) == 12;
  v163 = *(_BYTE *)(a1 + 1255) || *(_BYTE *)(a1 + 1257) || *(_DWORD *)(a1 + 1304) == 452 || *(_BYTE *)(a1 + 1254) != 0;
  *v21 = v163;
  if (*(_QWORD *)(a2 + 184) == 1)
  {
    *(_BYTE *)(a1 + 1265) = 1;
    if (*(_BYTE *)(a1 + 1210) == 1)
      *(_BYTE *)(a1 + 1266) = 1;
  }
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = *(_QWORD *)(a1 + 8);
  v168 = *(unsigned int *)(a1 + 48);
  v169 = atomic_load((unsigned __int8 *)(a1 + 1240));
  v170 = (_BYTE **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v167 + 552))(v167, v168, 0, v169 & 1, a2);
  v171 = *v170;
  if (*v170)
  {
    if (!v171[125])
    {
      md::LabelStyle::updateZoomInvariantStyles(v171);
      v171 = *v170;
    }
    *(_BYTE *)(a1 + 1213) = v171[124];
  }
  v172 = v179;
  if (v179)
  {
    v173 = (unint64_t *)&v179->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  return a1;
}

void sub_19FDFD2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  _QWORD *v18;
  uint64_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  md::LabelAnimator **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  md::LabelAnimator *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  if (a18)
  {
    v23 = (unint64_t *)&a18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  v25 = v18[154];
  v18[154] = 0;
  if (v25)
  {
    v26 = *(std::__shared_weak_count **)(v25 + 8);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    MEMORY[0x1A1AF4E00](v25, 0x20C40A4A59CD2);
  }
  v29 = (md::LabelAnimator **)(v18 + 148);
  v30 = (std::__shared_weak_count *)v18[150];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *v29;
  *v29 = 0;
  if (v33)
  {
    md::LabelAnimator::~LabelAnimator(v33);
    MEMORY[0x1A1AF4E00]();
    v34 = (std::__shared_weak_count *)v18[137];
    if (!v34)
    {
LABEL_25:
      v35 = (std::__shared_weak_count *)v18[129];
      if (!v35)
        goto LABEL_33;
LABEL_29:
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
LABEL_33:
      v38 = (std::__shared_weak_count *)v18[127];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v18[125];
      v18[125] = 0;
      if (v41)
        MEMORY[0x1A1AF4E00](v41, 0x1000C40C179455ELL);
      v42 = v18[124];
      v18[124] = 0;
      if (v42)
        MEMORY[0x1A1AF4E00](v42, 0x1000C4015B1EB14);
      v43 = (std::__shared_weak_count *)v18[89];
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (std::__shared_weak_count *)v18[87];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = v18[85];
      v18[85] = 0;
      if (v49)
        MEMORY[0x1A1AF4E00](v49, 0x1000C40C179455ELL);
      v50 = v18[84];
      v18[84] = 0;
      if (v50)
        MEMORY[0x1A1AF4E00](v50, 0x1000C4015B1EB14);
      v51 = (std::__shared_weak_count *)v18[58];
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)v18[48];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = v18[43];
      v18[43] = 0;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      v58 = *v19;
      *v19 = 0;
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      v59 = v18[41];
      v18[41] = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      v60 = v18[38];
      v18[38] = 0;
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      v61 = v18[37];
      v18[37] = 0;
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      v62 = v18[35];
      v18[35] = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      v63 = v18[34];
      v18[34] = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      v64 = *a12;
      *a12 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      v65 = (std::__shared_weak_count *)v18[11];
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)v18[9];
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      *v18 = off_1E42AF850;
      v71 = (std::__shared_weak_count *)v18[2];
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v34 = (std::__shared_weak_count *)v18[137];
    if (!v34)
      goto LABEL_25;
  }
  std::__shared_weak_count::__release_weak(v34);
  v35 = (std::__shared_weak_count *)v18[129];
  if (!v35)
    goto LABEL_33;
  goto LABEL_29;
}

uint64_t md::Label::setActive(uint64_t this, int a2, md::LabelPool *a3)
{
  int32x2_t *v3;
  uint64_t v4;
  int32x2_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(unsigned __int8 *)(this + 1253) != a2)
  {
    v3 = (int32x2_t *)this;
    *(_BYTE *)(this + 1253) = a2;
    if ((a2 & 1) == 0)
    {
      if (!*(_BYTE *)(this + 1251))
      {
        *(_WORD *)(this + 1283) = 0;
        *(_BYTE *)(this + 1250) = 0;
        *(_BYTE *)(this + 1285) = 0;
        v4 = *(_QWORD *)(this + 264);
        v3[33] = 0;
        if (v4)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v5 = v3[34];
        v3[34] = 0;
        if (v5)
          (*(void (**)(int32x2_t))(**(_QWORD **)&v5 + 8))(v5);
        this = (uint64_t)v3[38];
        v3[38] = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        if (v3[36])
        {
          v3[36] = 0;
          v3[155].i8[7] = 1;
        }
      }
      v6 = (_QWORD *)v3[3];
      if (v6)
      {
        v7 = (_QWORD *)v6[2];
        v8 = (_QWORD *)v6[1];
        if (v8 != v7)
        {
          while ((int32x2_t *)*v8 != v3)
          {
            if (++v8 == v7)
            {
              v8 = (_QWORD *)v6[2];
              break;
            }
          }
        }
        if (v8 != v7)
        {
          v9 = v8 + 1;
          if (v8 + 1 != v7)
          {
            do
            {
              if ((int32x2_t *)*v9 != v3)
                *v8++ = *v9;
              ++v9;
            }
            while (v9 != v7);
            v7 = (_QWORD *)v6[2];
          }
        }
        if (v8 != v7)
          v6[2] = v8;
        this = (*(uint64_t (**)(_QWORD *, int32x2_t *))(*v6 + 48))(v6, v3);
        v3[3] = 0;
      }
      v3[103].i8[7] = 0;
      v3[59] = vdup_n_s32(0xC2C80000);
      if (v3[60].i8[3])
      {
        *(_BYTE *)(*(_QWORD *)&v3[57] + 285) = 1;
        v3[60].i8[3] = 0;
      }
      v3[157].i8[7] = 0;
    }
  }
  return this;
}

void md::Label::assignWorldPointToLabel(md::Label *this, LabelManager *a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  __double2 v18;
  double v19;
  __double2 v20;
  float v21;
  BOOL v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  _QWORD *v27;

  v4 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1), (char *)this + 48);
  v5 = v4;
  if (*(_BYTE *)(*((_QWORD *)a2 + 29) + 17))
  {
    v6 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v4);
    v7 = *v6;
    v8 = v6[1];
    v9 = 1.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(v4 + 44))
    {
      v7 = *(double *)v4;
      v8 = *(double *)(v4 + 8);
      v12 = *(double *)(v4 + 16);
    }
    else
    {
      v13 = *(double *)(v4 + 24) * 6.28318531;
      v14 = exp(*(double *)(v4 + 32) * 6.28318531 + -3.14159265);
      v15 = atan(v14) * 2.0 + -1.57079633;
      v16 = fmod(v13, 6.28318531);
      v17 = fmod(v16 + 6.28318531, 6.28318531) + -3.14159265;
      v18 = __sincos_stret(v15);
      v19 = 6378137.0 / sqrt(v18.__sinval * v18.__sinval * -0.00669437999 + 1.0);
      v20 = __sincos_stret(v17);
      v7 = v19 * v18.__cosval * v20.__cosval;
      v8 = v19 * v18.__cosval * v20.__sinval;
      v12 = v18.__sinval * 0.99330562 * v19;
      *(double *)v5 = v7;
      *(double *)(v5 + 8) = v8;
      *(double *)(v5 + 16) = v12;
      *(_BYTE *)(v5 + 44) = 1;
    }
    v10 = md::LabelPoint::geocentricNormal((md::LabelPoint *)v5);
  }
  v21 = *(float *)(v5 + 40);
  v22 = v21 == 3.4028e38;
  v23 = v21 != 3.4028e38;
  if (v21 == 3.4028e38)
    v21 = 0.0;
  v24 = v21;
  *((float *)this + 47) = v21;
  *((_BYTE *)this + 192) = v23;
  *((_BYTE *)this + 835) = v23;
  *((double *)this + 62) = v7;
  *((double *)this + 63) = v8;
  *((double *)this + 64) = v12;
  v25 = 0.0;
  if (!v22)
    v25 = v24;
  v26 = *((double *)this + 29) * v25;
  *((double *)this + 82) = v26;
  *((double *)this + 68) = v26 * v10;
  *((double *)this + 69) = v26 * v11;
  *((double *)this + 70) = v26 * v9;
  *((double *)this + 65) = v10;
  *((double *)this + 66) = v11;
  *((double *)this + 67) = v9;
  if (*(_BYTE *)(*((_QWORD *)a2 + 29) + 17))
  {
    v27 = (_QWORD *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v5);
    *((_QWORD *)this + 80) = *v27;
    *((_QWORD *)this + 81) = v27[1];
  }
}

md::LabelLayoutContext *md::LabelLayoutContext::LabelLayoutContext(md::LabelLayoutContext *this, const md::LabelLayoutContext *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  memcpy(this, a2, 0x480uLL);
  *((_QWORD *)this + 144) = 0;
  *((_QWORD *)this + 146) = 0;
  *((_QWORD *)this + 145) = 0;
  if (this != a2)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)this + 1152, *((_QWORD *)a2 + 144), *((char **)a2 + 145), (uint64_t)(*((_QWORD *)a2 + 145) - *((_QWORD *)a2 + 144)) >> 4);
  v4 = *(_OWORD *)((char *)a2 + 1192);
  *(_OWORD *)((char *)this + 1176) = *(_OWORD *)((char *)a2 + 1176);
  *(_OWORD *)((char *)this + 1192) = v4;
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 153) = 0;
  *((_QWORD *)this + 152) = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 151);
  v6 = (_BYTE *)*((_QWORD *)a2 + 152);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v6 - v5);
    *((_QWORD *)this + 151) = v8;
    *((_QWORD *)this + 152) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *((_QWORD *)this + 153) = v9;
    memcpy(v8, v5, v7);
    *((_QWORD *)this + 152) = v9;
  }
  v10 = *((_OWORD *)a2 + 77);
  v11 = *((_OWORD *)a2 + 78);
  v12 = *((_OWORD *)a2 + 79);
  *((_DWORD *)this + 320) = *((_DWORD *)a2 + 320);
  *((_OWORD *)this + 79) = v12;
  *((_OWORD *)this + 78) = v11;
  *((_OWORD *)this + 77) = v10;
  return this;
}

void sub_19FDFDC18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 1160) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x480uLL);
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  if (a1 != a2)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1160, *(_QWORD *)(a2 + 1160), *(char **)(a2 + 1168), (uint64_t)(*(_QWORD *)(a2 + 1168) - *(_QWORD *)(a2 + 1160)) >> 4);
  v4 = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1184) = v4;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  v5 = *(_BYTE **)(a2 + 1216);
  v6 = *(_BYTE **)(a2 + 1224);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v6 - v5);
    *(_QWORD *)(a1 + 1216) = v8;
    *(_QWORD *)(a1 + 1224) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *(_QWORD *)(a1 + 1232) = v9;
    memcpy(v8, v5, v7);
    *(_QWORD *)(a1 + 1224) = v9;
  }
  v10 = *(_OWORD *)(a2 + 1240);
  v11 = *(_OWORD *)(a2 + 1256);
  v12 = *(_OWORD *)(a2 + 1272);
  *(_DWORD *)(a1 + 1288) = *(_DWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1272) = v12;
  *(_OWORD *)(a1 + 1256) = v11;
  *(_OWORD *)(a1 + 1240) = v10;
  return a1;
}

void sub_19FDFDD38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 1168) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<gm::Matrix<float,2,1> ()(void)>::function<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,void>(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x518uLL);
  *(_QWORD *)v4 = &off_1E42D4180;
  *((_QWORD *)v4 + 1) = *(_QWORD *)a2;
  memcpy(v4 + 16, (const void *)(a2 + 8), 0x480uLL);
  *((_QWORD *)v4 + 146) = 0;
  *((_QWORD *)v4 + 148) = 0;
  *((_QWORD *)v4 + 147) = 0;
  if (v4 + 8 != (char *)a2)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v4 + 1168), *(_QWORD *)(a2 + 1160), *(char **)(a2 + 1168), (uint64_t)(*(_QWORD *)(a2 + 1168) - *(_QWORD *)(a2 + 1160)) >> 4);
  v5 = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(v4 + 1192) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(v4 + 1208) = v5;
  *((_QWORD *)v4 + 153) = 0;
  *((_QWORD *)v4 + 155) = 0;
  *((_QWORD *)v4 + 154) = 0;
  v6 = *(_BYTE **)(a2 + 1216);
  v7 = *(_BYTE **)(a2 + 1224);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v7 - v6);
    *((_QWORD *)v4 + 153) = v9;
    *((_QWORD *)v4 + 154) = v9;
    v10 = &v9[16 * (v8 >> 4)];
    *((_QWORD *)v4 + 155) = v10;
    memcpy(v9, v6, v8);
    *((_QWORD *)v4 + 154) = v10;
  }
  *((_DWORD *)v4 + 324) = *(_DWORD *)(a2 + 1288);
  *((_OWORD *)v4 + 78) = *(_OWORD *)(a2 + 1240);
  *((_OWORD *)v4 + 79) = *(_OWORD *)(a2 + 1256);
  *((_OWORD *)v4 + 80) = *(_OWORD *)(a2 + 1272);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_19FDFDE80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[147] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[152];
  if (v2)
  {
    a1[153] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[145];
  if (v3)
  {
    a1[146] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E42D4180;
  v2 = (void *)a1[153];
  if (v2)
  {
    a1[154] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[146];
  if (v3)
  {
    a1[147] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E42D4180;
  v2 = (void *)a1[153];
  if (v2)
  {
    a1[154] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[146];
  if (v3)
  {
    a1[147] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x518uLL);
  *v2 = &off_1E42D4180;
  std::__compressed_pair_elem<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19FDFDFD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D4180;
  return std::__compressed_pair_elem<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[153];
  if (v2)
  {
    a1[154] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[146];
  if (v3)
  {
    a1[147] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[153];
  if (v2)
  {
    __p[154] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[146];
  if (v3)
  {
    __p[147] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

float32x2_t std::__function::__func<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,std::allocator<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0>,gm::Matrix<float,2,1> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(float *)(a1 + 64);
  v3 = *(double *)(v1 + 856) + *(double *)(v1 + 904) * v2 + *(double *)(v1 + 928);
  _Q0 = vaddq_f64(vmlaq_n_f64(*(float64x2_t *)(v1 + 840), *(float64x2_t *)(v1 + 888), v2), *(float64x2_t *)(v1 + 912));
  _D3 = *(_QWORD *)(a1 + 936);
  __asm { FMLA            D4, D3, V0.D[1] }
  return vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 976), *(float64x2_t *)(a1 + 880), _Q0.f64[0]), *(float64x2_t *)(a1 + 912), _Q0, 1), *(float64x2_t *)(a1 + 944), v3), 1.0 / (_D4 + *(double *)(a1 + 968) * v3)));
}

uint64_t std::__compressed_pair_elem<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x480uLL);
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  if (a2 != a1)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1160, *(_QWORD *)(a2 + 1160), *(char **)(a2 + 1168), (uint64_t)(*(_QWORD *)(a2 + 1168) - *(_QWORD *)(a2 + 1160)) >> 4);
  v4 = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1184) = v4;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  v5 = *(_BYTE **)(a2 + 1216);
  v6 = *(_BYTE **)(a2 + 1224);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v6 - v5);
    *(_QWORD *)(a1 + 1216) = v8;
    *(_QWORD *)(a1 + 1224) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *(_QWORD *)(a1 + 1232) = v9;
    memcpy(v8, v5, v7);
    *(_QWORD *)(a1 + 1224) = v9;
  }
  v10 = *(_OWORD *)(a2 + 1240);
  v11 = *(_OWORD *)(a2 + 1256);
  v12 = *(_OWORD *)(a2 + 1272);
  *(_DWORD *)(a1 + 1288) = *(_DWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1272) = v12;
  *(_OWORD *)(a1 + 1256) = v11;
  *(_OWORD *)(a1 + 1240) = v10;
  return a1;
}

void sub_19FDFE20C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 1168) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void md::Label::submitOcclusionQuery(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v4;
  __int128 *v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  float v47;
  float v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  double v56;
  float64x2_t v57;
  double v58;
  float32x2_t v59;
  float v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  __int128 *v84;
  __int128 *v85;
  _QWORD *v86;
  __int128 v87;
  _QWORD *v88;
  _QWORD *v89;
  __int128 *v90;
  __int128 *v91;
  _QWORD *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _Unwind_Exception *v98;
  void *v99;

  if (!*(_BYTE *)(a1 + 483))
  {
    v9 = (__int128 *)(a1 + 456);
    if (!*(_QWORD *)(a1 + 456))
    {
      v11 = *(_BYTE *)(a1 + 1210);
      v12 = *(_BYTE *)(a1 + 1211);
      v4 = (std::__shared_weak_count *)operator new(0x138uLL);
      v4->__shared_owners_ = 0;
      v4->__shared_weak_owners_ = 0;
      v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB208;
      v13.n128_f64[0] = md::OcclusionQuery::OcclusionQuery((uint64_t)&v4[1], v11, v12);
      v14 = *(std::__shared_weak_count **)(a1 + 464);
      *(_QWORD *)(a1 + 456) = v15;
      *(_QWORD *)(a1 + 464) = v4;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v10 = atomic_load((unsigned __int8 *)(*(_QWORD *)v9 + 286));
    if ((v10 & 1) != 0)
    {
      *(_BYTE *)(a1 + 480) = 0;
      *(_BYTE *)(a1 + 483) = 1;
      *(_BYTE *)(a1 + 484) = *(_BYTE *)(a1 + 1284);
      switch(a4)
      {
        case 0:
          return;
        case 1:
          md::OcclusionTest::setupAntennaeTest(**(_QWORD **)(a1 + 456), (_QWORD *)(a1 + 592), *(_BYTE *)(a1 + 257));
          goto LABEL_83;
        case 2:
          v18 = *(_QWORD *)(a1 + 264);
          if (!v18)
            v18 = *(_QWORD *)(a1 + 272);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 880))(v18, *(_QWORD *)v9, a3);
          goto LABEL_83;
        case 3:
          if (!*(_BYTE *)(a1 + 164))
          {
            v98 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
            std::__shared_weak_count::~__shared_weak_count(v4);
            operator delete(v99);
            _Unwind_Resume(v98);
          }
          v28 = **(_QWORD **)(a1 + 456);
          *(_BYTE *)v28 = 3;
          v29 = *(_QWORD **)(v28 + 80);
          v30 = *(_QWORD **)(v28 + 88);
          if (0xAAAAAAAAAAAAAAABLL * (v30 - v29) > 1)
            goto LABEL_22;
          if (v30 == v29)
          {
            v29 = *(_QWORD **)(v28 + 88);
            if (!*(_QWORD *)(v28 + 104))
            {
              v88 = *(_QWORD **)(v28 + 96);
              v89 = malloc_type_malloc(0x30uLL, 0x1000040504FFAC1uLL);
              v29 = v89;
              v90 = *(__int128 **)(v28 + 80);
              v91 = *(__int128 **)(v28 + 88);
              if (v90 != v91)
              {
                v92 = v89;
                do
                {
                  v93 = *v90;
                  v92[2] = *((_QWORD *)v90 + 2);
                  *(_OWORD *)v92 = v93;
                  v92 += 3;
                  v90 = (__int128 *)((char *)v90 + 24);
                }
                while (v90 != v91);
              }
              if (v30 != v88)
                free(*(void **)(v28 + 80));
              *(_QWORD *)(v28 + 80) = v29;
              *(_QWORD *)(v28 + 104) = 2;
            }
LABEL_22:
            *(_QWORD *)(v28 + 88) = v29 + 3;
          }
          *v29 = *(_QWORD *)(a1 + 592);
          v29[1] = *(_QWORD *)(a1 + 600);
          v29[2] = *(_QWORD *)(a1 + 608);
          *(_DWORD *)(v28 + 184) = *(_DWORD *)(a1 + 152);
          *(_DWORD *)(v28 + 188) = *(_DWORD *)(a1 + 156);
          *(_DWORD *)(v28 + 192) = *(_DWORD *)(a1 + 160);
          *(_DWORD *)(v28 + 196) = 1088421888;
          v31 = *(_BYTE **)(v28 + 8);
          v32 = *(char **)(v28 + 16);
          v33 = v32 - v31;
          if ((unint64_t)(v32 - v31) >= 9)
          {
            *(_QWORD *)(v28 + 16) = v31 + 8;
            goto LABEL_83;
          }
          if (v32 != v31)
            goto LABEL_83;
          v34 = *(char **)(v28 + 16);
          if (*(_QWORD *)(v28 + 32))
            goto LABEL_89;
          v35 = *(char **)(v28 + 24);
          v36 = (char *)malloc_type_malloc(0x10uLL, 0x100004090D0E795uLL);
          v34 = v36;
          v37 = *(uint64_t **)(v28 + 8);
          v38 = *(char **)(v28 + 16);
          if (v37 == (uint64_t *)v38)
            goto LABEL_86;
          v39 = v38 - (char *)v37 - 8;
          if (v39 < 0x18)
          {
            v40 = v36;
            do
            {
LABEL_85:
              v96 = *v37++;
              *(_QWORD *)v40 = v96;
              v40 += 8;
            }
            while (v37 != (uint64_t *)v38);
            goto LABEL_86;
          }
          v40 = v36;
          if ((unint64_t)(v36 - (char *)v37) < 0x20)
            goto LABEL_85;
          v41 = (v39 >> 3) + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v36[v42];
          v43 = (__int128 *)(v37 + 2);
          v44 = v36 + 16;
          v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v46 = *v43;
            v43 += 2;
            *v44 = v46;
            v44 += 2;
            v45 -= 4;
          }
          while (v45);
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v37 = (uint64_t *)((char *)v37 + v42);
            goto LABEL_85;
          }
LABEL_86:
          v97 = v33 >> 3;
          if (v32 != v35)
            free(*(void **)(v28 + 8));
          *(_QWORD *)(v28 + 8) = v34;
          v32 = &v34[8 * v97];
          *(_QWORD *)(v28 + 32) = 2;
LABEL_89:
          if (v32 != v34 + 8)
          {
            memset_pattern16(v32, &unk_19FFB6350, ((v34 - v32) & 0xFFFFFFFFFFFFFFF8) + 8);
            v32 = v34 + 8;
          }
          *(_QWORD *)(v28 + 16) = v32;
          goto LABEL_83;
        case 4:
          v19 = *(_QWORD *)(a1 + 264);
          if (!v19)
            v19 = *(_QWORD *)(a1 + 272);
          v20 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 248))(v19);
          v21 = v20[2];
          if (v21 >= *v20 && (v22 = v20[3], v23 = v20[1], v22 >= v23))
          {
            v47 = *(float *)(a1 + 664);
            v27 = *v20 - v47;
            v48 = *(float *)(a1 + 668);
            v24 = v23 - v48;
            v26 = v21 - v47;
            v25 = v22 - v48;
          }
          else
          {
            v24 = 3.4028e38;
            v25 = -3.4028e38;
            v26 = -3.4028e38;
            v27 = 3.4028e38;
          }
          if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8)))
          {
            v49 = *(float *)(a1 + 756);
            v50 = v49 * 0.5;
            v51 = v49 == 0.0;
            v52 = 20.0;
          }
          else
          {
            v53 = 30.0;
            if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 344))(*(_QWORD *)(a1 + 8)))
              goto LABEL_43;
            v54 = *(float *)(a1 + 756);
            v50 = v54 * 0.5;
            v51 = v54 == 0.0;
            v52 = 30.0;
          }
          if (v51)
            v53 = v52;
          else
            v53 = v50;
LABEL_43:
          v55 = **(_QWORD **)(a1 + 456);
          v56 = *(double *)(a1 + 608);
          v57 = *(float64x2_t *)(a1 + 592);
          v58 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v57, v57)) + v56 * v56);
          v59 = vcvt_f32_f64(vmulq_n_f64(v57, v58));
          v60 = v58 * v56;
          *(_BYTE *)v55 = 4;
          *(_BYTE *)(v55 + 237) = 1;
          v61 = *(_QWORD **)(v55 + 80);
          v62 = *(_QWORD **)(v55 + 88);
          if (0xAAAAAAAAAAAAAAABLL * (v62 - v61) > 1)
            goto LABEL_44;
          if (v62 == v61)
          {
            v61 = *(_QWORD **)(v55 + 88);
            if (!*(_QWORD *)(v55 + 104))
            {
              v82 = *(_QWORD **)(v55 + 96);
              v83 = malloc_type_malloc(0x30uLL, 0x1000040504FFAC1uLL);
              v61 = v83;
              v84 = *(__int128 **)(v55 + 80);
              v85 = *(__int128 **)(v55 + 88);
              if (v84 != v85)
              {
                v86 = v83;
                do
                {
                  v87 = *v84;
                  v86[2] = *((_QWORD *)v84 + 2);
                  *(_OWORD *)v86 = v87;
                  v86 += 3;
                  v84 = (__int128 *)((char *)v84 + 24);
                }
                while (v84 != v85);
              }
              if (v62 != v82)
                free(*(void **)(v55 + 80));
              *(_QWORD *)(v55 + 80) = v61;
              *(_QWORD *)(v55 + 104) = 2;
            }
LABEL_44:
            *(_QWORD *)(v55 + 88) = v61 + 3;
            v57.f64[0] = *(float64_t *)(a1 + 592);
          }
          *v61 = *(_QWORD *)&v57.f64[0];
          v61[1] = *(_QWORD *)(a1 + 600);
          v61[2] = *(_QWORD *)(a1 + 608);
          *(float32x2_t *)(v55 + 184) = v59;
          *(float *)(v55 + 192) = v60;
          *(float *)(v55 + 196) = v53;
          *(float *)(v55 + 200) = v27;
          *(float *)(v55 + 204) = v24;
          *(float *)(v55 + 208) = v26;
          *(float *)(v55 + 212) = v25;
          *(_BYTE *)(v55 + 239) = 4;
          v64 = *(_QWORD *)(v55 + 8);
          v63 = *(char **)(v55 + 16);
          v65 = (uint64_t)&v63[-v64];
          if ((unint64_t)&v63[-v64] >= 0x29)
          {
            v63 = (char *)(v64 + 40);
            goto LABEL_82;
          }
          if (v65 == 40)
            goto LABEL_83;
          v66 = *(_QWORD *)(v55 + 32);
          if (v66 > 4)
          {
            v71 = *(char **)(v55 + 8);
            goto LABEL_80;
          }
          v67 = *(_QWORD *)(v55 + 24);
          v68 = 1 << -(char)__clz(v66 + 1);
          if (v68 <= 5)
            v69 = 5;
          else
            v69 = v68;
          v70 = (char *)malloc_type_malloc(8 * v69, 0x100004090D0E795uLL);
          v71 = v70;
          v72 = *(uint64_t **)(v55 + 8);
          v73 = *(char **)(v55 + 16);
          if (v72 == (uint64_t *)v73)
            goto LABEL_77;
          v74 = v73 - (char *)v72 - 8;
          if (v74 < 0x18)
          {
            v75 = v70;
          }
          else
          {
            v75 = v70;
            if ((unint64_t)(v70 - (char *)v72) >= 0x20)
            {
              v76 = (v74 >> 3) + 1;
              v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
              v75 = &v70[v77];
              v78 = (__int128 *)(v72 + 2);
              v79 = v70 + 16;
              v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v81 = *v78;
                *(v79 - 1) = *(v78 - 1);
                *v79 = v81;
                v78 += 2;
                v79 += 2;
                v80 -= 4;
              }
              while (v80);
              if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_77:
                v95 = v65 >> 3;
                if (v64 != v67)
                  free(*(void **)(v55 + 8));
                *(_QWORD *)(v55 + 8) = v71;
                v63 = &v71[8 * v95];
                *(_QWORD *)(v55 + 32) = v69;
LABEL_80:
                if (v63 != v71 + 40)
                {
                  memset_pattern16(v63, &unk_19FFB6350, ((v71 - v63 + 32) & 0xFFFFFFFFFFFFFFF8) + 8);
                  v63 = v71 + 40;
                }
LABEL_82:
                *(_QWORD *)(v55 + 16) = v63;
LABEL_83:
                md::OcclusionManager::addQuery(a2, v9);
                return;
              }
              v72 = (uint64_t *)((char *)v72 + v77);
            }
          }
          do
          {
            v94 = *v72++;
            *(_QWORD *)v75 = v94;
            v75 += 8;
          }
          while (v72 != (uint64_t *)v73);
          goto LABEL_77;
        default:
          goto LABEL_83;
      }
    }
  }
}

uint64_t md::Label::debugDraw(md::Label *this, md::LabelManager *a2, md::DebugConsole *a3)
{
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  float *v8;
  int v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;

  result = *((_QWORD *)this + 36);
  if (result)
  {
    v6 = (_DWORD *)(*(uint64_t (**)(uint64_t, md::LabelManager *, md::DebugConsole *))(*(_QWORD *)result + 248))(result, a2, a3);
    *((_DWORD *)a2 + 2) = *v6;
    *((_DWORD *)a2 + 3) = v6[1];
    v13 = *((_QWORD *)a2 + 1);
    v7 = v13;
    v8 = (float *)(v6 + 2);
    *((_DWORD *)a2 + 2) = v6[2];
    *((_DWORD *)a2 + 3) = v6[3];
    v9 = v6[3];
    v11 = *(float *)&v7;
    v12 = v9;
    ggl::DebugConsole::drawLine((uint64_t)a2, &v11);
    ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&v13);
    v11 = *v8;
    v12 = HIDWORD(v7);
    ggl::DebugConsole::drawLine((uint64_t)a2, &v11);
    v10 = ggl::DebugConsole::drawLine((uint64_t)a2, v8);
    return (*(uint64_t (**)(_QWORD, md::LabelManager *, float))(**((_QWORD **)this + 36) + 768))(*((_QWORD *)this + 36), a2, v10);
  }
  return result;
}

uint64_t md::Label::debugString(md::Label *this, md::LabelManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  _BYTE *v47;
  _QWORD *v48;
  uint64_t *v49;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  const char *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned __int8 v73;
  const char *v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned __int8 v77;
  uint64_t v78;
  const char *v79;
  _QWORD *v80;
  unsigned __int8 v81;
  const char *v82;
  uint64_t v83;
  _QWORD *v84;
  const char *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  const char *v89;
  size_t v90;
  _BYTE *v91;
  uint64_t v92;
  unint64_t v93;
  const char *v94;
  size_t v95;
  _BYTE *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  size_t v115;
  unint64_t v116;
  const void **v117;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  md::Label *v121;
  uint64_t result;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  size_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE __p[24];
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[2];
  _QWORD v135[3];
  uint64_t v136;
  unint64_t v137;
  void *v138[2];
  __int128 v139;
  int v140;
  uint64_t v141[20];

  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v141[0] = MEMORY[0x1E0DE4FE0] + 64;
  v133 = v11;
  *(_QWORD *)((char *)&v134[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v134[-1] + *(_QWORD *)(v133 - 24));
  std::ios_base::init(v13, v134);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v133 = v8 + 24;
  v141[0] = v9;
  std::streambuf::basic_streambuf();
  v134[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v138 = 0u;
  v139 = 0u;
  v140 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Label:\n", 7);
  v14 = v133;
  *(_DWORD *)((char *)v134 + *(_QWORD *)(v133 - 24)) = *(_DWORD *)((_BYTE *)v134 + *(_QWORD *)(v133 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v14 - 24)) = 6;
  if (*((_BYTE *)a2 + 259))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  pos:(", 7);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)",", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
    v17 = v133;
    *(_DWORD *)((char *)v134 + *(_QWORD *)(v133 - 24)) = *(_DWORD *)((_BYTE *)v134 + *(_QWORD *)(v133 - 24)) & 0xFFFFFEFB | 4;
    v18 = (char *)&v134[-1] + *(_QWORD *)(v17 - 24);
    v19 = 8;
    if (!*(_BYTE *)(*(_QWORD *)(a3 + 232) + 17))
      v19 = 2;
    *((_QWORD *)v18 + 2) = v19;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)", world:(", 9);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)",", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")\n", 2);
    if (*((float *)a2 + 192) != 0.0 || *((float *)a2 + 194) != 0.0)
    {
      *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 1;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Offset: elev(", 15);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")=", 2);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" nrml=(", 7);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)")", 1);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    }
    if (*((double *)a2 + 82) != 0.0 || *((float *)a2 + 193) != 0.0)
    {
      *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 1;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Elev: ground=", 15);
      std::ostream::operator<<();
      *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 3;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" scaled(", 8);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")=", 2);
      *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 16) = 1;
      std::ostream::operator<<();
      *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 1;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" building=", 10);
      std::ostream::operator<<();
      *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 3;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" scaled(", 8);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)")=", 2);
      *(_QWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 16) = 1;
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
    }
    if (*((_BYTE *)a2 + 164))
    {
      v32 = *((float *)a2 + 191);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  FacingAngle=", 14);
      acosf(v32);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", FacingAngleCosine=", 20);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n", 1);
    }
    if (*((_BYTE *)a2 + 180) && *((_BYTE *)a2 + 164))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  SkewOffsetting: a=", 20);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)" f(", 3);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)")=", 2);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" s=", 3);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)" d=", 3);
      if (!*((_BYTE *)a2 + 180)
        || (v39 = (_QWORD *)std::ostream::operator<<(),
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)",", 1),
            !*((_BYTE *)a2 + 180))
        || (v40 = (_QWORD *)std::ostream::operator<<(),
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)",", 1),
            !*((_BYTE *)a2 + 180)))
      {
        result = std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        return result;
      }
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"\n", 1);
    }
    if (*((_BYTE *)a2 + 1271))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  angleCos:[", 12);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)",", 1);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)"]", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)", angleDeg:[", 12);
      acos(*((long double *)a2 + 99));
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
      acos(*((long double *)a2 + 100));
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"]", 1);
      v46 = *((unsigned __int8 *)a2 + 1271);
      v47 = (char *)a2 + 1272;
      if (!*((_BYTE *)a2 + 1272))
        goto LABEL_27;
      if (*((_BYTE *)a2 + 1271))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)", ", 2);
LABEL_26:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"dist:[", 6);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)",", 1);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"]", 1);
        v46 = *((unsigned __int8 *)a2 + 1271);
LABEL_27:
        if (!v46 && !*v47)
          goto LABEL_31;
        v50 = "\n";
        v49 = &v133;
        v51 = 1;
        goto LABEL_30;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + 1272))
        goto LABEL_31;
      v47 = (char *)a2 + 1272;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  ", 2);
    goto LABEL_26;
  }
  *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v14 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Screen Position:(", 19);
  v48 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)",", 1);
  v49 = (uint64_t *)std::ostream::operator<<();
  v50 = ")\n";
  v51 = 2;
LABEL_30:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
LABEL_31:
  *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Zoom: Cur=", 12);
  v54 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)" Min=", 5);
  v55 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)" Max=", 5);
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)", Dist(m)=", 10);
  v56 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Collision: Order=", 19);
  if (*((_DWORD *)a2 + 180) == 0x7FFFFFFF)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"MAX", 3);
  else
    std::ostream::operator<<();
  if (*((_DWORD *)a2 + 181) != *((_DWORD *)a2 + 180))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" IconOrder=", 11);
    std::ostream::operator<<();
  }
  *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" MinZmRank=", 11);
  std::ostream::operator<<();
  if (*((float *)a2 + 184) != 0.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" MzrBias=", 9);
    std::ostream::operator<<();
  }
  if (*((float *)a2 + 183) != 0.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" VisMzrBias=", 12);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" CollRank=", 10);
  *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 2;
  if (*((float *)a2 + 185) == 3.4028e38)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"MAX", 3);
  else
    std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" CoordPrty=", 11);
  std::ostream::operator<<();
  if (*((_DWORD *)a2 + 15) != 0x7FFFFFFF)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" SortKey=", 9);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n    Layer=", 11);
  v57 = (_QWORD *)std::ostream::operator<<();
  v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)" StylOverlay=", 13);
  switch(*((_BYTE *)a2 + 365))
  {
    case 0:
      v59 = 7;
      __p[23] = 7;
      strcpy(__p, "Default");
      break;
    case 1:
      v59 = 4;
      __p[23] = 4;
      strcpy(__p, "None");
      break;
    case 2:
      v59 = 1;
      __p[23] = 1;
      strcpy(__p, "A");
      break;
    case 3:
      v59 = 1;
      __p[23] = 1;
      strcpy(__p, "B");
      break;
    case 4:
      v59 = 1;
      __p[23] = 1;
      strcpy(__p, "C");
      break;
    default:
      v59 = 0;
      __p[23] = 0;
      __p[0] = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)__p, v59);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (*((_BYTE *)a2 + 365))
      goto LABEL_65;
  }
  else if (*((_BYTE *)a2 + 365))
  {
    goto LABEL_65;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" ResOverlay=", 12);
  switch(*((_BYTE *)a2 + 369))
  {
    case 0:
      v60 = 7;
      __p[23] = 7;
      strcpy(__p, "Default");
      break;
    case 1:
      v60 = 4;
      __p[23] = 4;
      strcpy(__p, "None");
      break;
    case 2:
      v60 = 1;
      __p[23] = 1;
      strcpy(__p, "A");
      break;
    case 3:
      v60 = 1;
      __p[23] = 1;
      strcpy(__p, "B");
      break;
    case 4:
      v60 = 1;
      __p[23] = 1;
      strcpy(__p, "C");
      break;
    default:
      v60 = 0;
      __p[23] = 0;
      __p[0] = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)__p, v60);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_65:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" Group=", 7);
  v61 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v61 + *(_QWORD *)(*v61 - 24) + 8) = *(_DWORD *)((_BYTE *)v61 + *(_QWORD *)(*v61 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)" ExclGrps=0x", 12);
  v62 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v62 + *(_QWORD *)(*v62 - 24) + 8) = *(_DWORD *)((_BYTE *)v62 + *(_QWORD *)(*v62 - 24) + 8) & 0xFFFFFFB5 | 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)"\n", 1);
  if (*((_QWORD *)a2 + 149))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  SceneTag=", 11);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" cluster=", 9);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)"\n", 1);
  }
  if (*((_BYTE *)a2 + 1075))
  {
    *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  PerspScale:", 13);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" Val=", 5);
    std::ostream::operator<<();
    if (*((_BYTE *)a2 + 1075) == 3)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" Fixed=", 7);
      v65 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)" Dist=", 6);
      v66 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)" Locked=", 8);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Attrs: DedupeRank=", 20);
  v67 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)" DedupePriority=", 16);
  v68 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)" Layer=", 7);
  v69 = (_QWORD *)std::ostream::operator<<();
  if (*((_BYTE *)a2 + 752))
    v70 = " (selectable)";
  else
    v70 = "";
  if (*((_BYTE *)a2 + 752))
    v71 = 13;
  else
    v71 = 0;
  v72 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
  v73 = atomic_load((unsigned __int8 *)a2 + 1240);
  if ((v73 & 1) != 0)
    v74 = " (SELECTED)";
  else
    v74 = "";
  if ((v73 & 1) != 0)
    v75 = 11;
  else
    v75 = 0;
  v76 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)v74, v75);
  v77 = atomic_load((unsigned __int8 *)a2 + 1241);
  v78 = v77 & 1;
  if ((_DWORD)v78)
    v79 = " (PREV_SELECTED)";
  else
    v79 = "";
  v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v76, (uint64_t)v79, 16 * v78);
  v81 = atomic_load((unsigned __int8 *)a2 + 481);
  if ((v81 & 1) != 0)
    v82 = " (occludable)";
  else
    v82 = "";
  if ((v81 & 1) != 0)
    v83 = 13;
  else
    v83 = 0;
  v84 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)v82, v83);
  if (*((_BYTE *)a2 + 824))
    v85 = " (OVERRIDDEN)";
  else
    v85 = "";
  if (*((_BYTE *)a2 + 824))
    v86 = 13;
  else
    v86 = 0;
  v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Staging: State=", 17);
  v88 = *((unsigned __int8 *)a2 + 820);
  if (v88 > 2)
    v89 = "<NONE>";
  else
    v89 = off_1E42F4048[v88];
  v90 = strlen(v89);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v89, v90);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" Outcome=", 9);
  md::stringFromLabelOutcome((uint64_t)__p, *((unsigned __int8 *)a2 + 821));
  if (__p[23] >= 0)
    v91 = __p;
  else
    v91 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v92 = __p[23];
  else
    v92 = *(_QWORD *)&__p[8];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v91, v92);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Display: State=", 17);
  v93 = *((unsigned __int8 *)a2 + 1072);
  if (v93 > 3)
    v94 = "<NONE>";
  else
    v94 = off_1E42F4060[v93];
  v95 = strlen(v94);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v94, v95);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" Outcome=", 9);
  md::stringFromLabelOutcome((uint64_t)__p, *((unsigned __int8 *)a2 + 1073));
  if (__p[23] >= 0)
    v96 = __p;
  else
    v96 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v97 = __p[23];
  else
    v97 = *(_QWORD *)&__p[8];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v96, v97);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" isDisplayLabel=", 16);
  v98 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)" isActiveForDisplay=", 20);
  v99 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n", 1);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  BalloonBehavior=", 18);
  v100 = *((unsigned __int8 *)a2 + 1074);
  if (v100 == 2)
  {
    v101 = 4;
    __p[23] = 4;
    strcpy(__p, "Show");
  }
  else if (v100 == 1)
  {
    v101 = 8;
    __p[23] = 8;
    strcpy(__p, "Disabled");
  }
  else if (*((_BYTE *)a2 + 1074))
  {
    v101 = 0;
    __p[23] = 0;
    __p[0] = 0;
  }
  else
  {
    v101 = 7;
    __p[23] = 7;
    strcpy(__p, "Default");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)__p, v101);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" ExtCategory=", 13);
  switch(*((_BYTE *)a2 + 1213))
  {
    case 0:
      v102 = 4;
      __p[23] = 4;
      strcpy(__p, "None");
      break;
    case 1:
      v102 = 3;
      __p[23] = 3;
      strcpy(__p, "Poi");
      break;
    case 2:
      v102 = 9;
      __p[23] = 9;
      strcpy(__p, "Territory");
      break;
    case 3:
      v102 = 15;
      __p[23] = 15;
      strcpy(__p, "PhysicalFeature");
      break;
    default:
      v102 = 0;
      __p[23] = 0;
      __p[0] = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)__p, v102);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 72))(*((_QWORD *)a2 + 1))
    && !*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 72))(*((_QWORD *)a2 + 1)) + 239))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Clustering=Disabled", 19);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
  v103 = *((_QWORD *)a2 + 1);
  v104 = *((unsigned int *)a2 + 12);
  v105 = atomic_load((unsigned __int8 *)a2 + 1240);
  v106 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v103 + 552))(v103, v104, 0, v105 & 1, a3);
  v107 = *v106;
  if (*v106 && *(_BYTE *)(v107 + 125) && *(unsigned __int8 *)(v107 + 136) != 255)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Visible=", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" text=", 6);
    switch(*(_BYTE *)(*v106 + 241))
    {
      case 0:
        v108 = 5;
        __p[23] = 5;
        strcpy(__p, "Never");
        break;
      case 1:
        v108 = 6;
        __p[23] = 6;
        strcpy(__p, "Always");
        break;
      case 2:
        v108 = 9;
        __p[23] = 9;
        strcpy(__p, "Sometimes");
        break;
      case 3:
        v108 = 17;
        __p[23] = 17;
        strcpy(__p, "AlwaysIfSameOrder");
        break;
      default:
        v108 = 0;
        __p[23] = 0;
        __p[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)__p, v108);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (*((_BYTE *)a2 + 1211) == 2)
    {
      if (!*(_QWORD *)(*v106 + 264))
      {
        v123 = *v106;
        *(_QWORD *)(v123 + 264) = *md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*v106);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" road=", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" anno=", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" shld=", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)" arrw=", 6);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
    v124 = *v106;
    v125 = *(_QWORD *)(v124 + 280);
    if (v125)
    {
      if (vabds_f32(*(float *)(v125 + 8), *(float *)(v124 + 104)) >= 0.01)
      {
        md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v124, v125, 0);
        v125 = *(_QWORD *)(v124 + 280);
      }
    }
    else
    {
      v125 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v124, 0);
      *(_QWORD *)(v124 + 280) = v125;
    }
    v126 = *(_QWORD *)v125;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  StyleFont: ", 13);
    v127 = (const char *)(v126 + 72);
    if (*(char *)(v126 + 95) < 0)
      v127 = *(const char **)(v126 + 72);
    v128 = strlen(v127);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v127, v128);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"/", 1);
    *(_QWORD *)((char *)&v134[1] + *(_QWORD *)(v133 - 24)) = 2;
    std::ostream::operator<<();
    if (*(float *)(v126 + 96) != 0.0)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"/", 1);
      std::ostream::operator<<();
    }
    if (*(_BYTE *)(v126 + 109))
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"/up", 3);
    if (*(_BYTE *)(v126 + 108))
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"/ri", 3);
    if (*(_BYTE *)(v126 + 112))
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"/sc", 3);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"    font:", 9);
    md::FontOptions::debugString(__p, (__int128 *)(v126 + 72), *(grl::FontManager **)objc_msgSend(*(id *)(a3 + 96), "grlFontManager"));
    if (__p[23] >= 0)
      v129 = __p;
    else
      v129 = *(_BYTE **)__p;
    if (__p[23] >= 0)
      v130 = __p[23];
    else
      v130 = *(_QWORD *)&__p[8];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v129, v130);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
    if ((__p[23] & 0x80000000) != 0)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v132 + 40))(v132, *(_QWORD *)__p, *(_QWORD *)&__p[16] & 0x7FFFFFFFFFFFFFFFLL);
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"No Style\n", 9);
  }
  v109 = *((_QWORD *)a2 + 44);
  if (v109
    && *(_BYTE *)(v109 + 52) == 4
    && ((v110 = *(_QWORD *)(v109 + 56),
         std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"  Collided with '", 17), md::LabelFeature::debugName((md::LabelFeature *)__p, *(_QWORD **)(v110 + 8)), __p[23] >= 0)? (v111 = __p): (v111 = *(_BYTE **)__p), __p[23] >= 0 ? (v112 = __p[23]) : (v112 = *(_QWORD *)&__p[8]), std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v111, v112), std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"'\n", 2), (__p[23] & 0x80000000) != 0))
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v132 + 40))(v132, *(_QWORD *)__p, *(_QWORD *)&__p[16] & 0x7FFFFFFFFFFFFFFFLL);
    if (!*((_QWORD *)a2 + 34))
      goto LABEL_164;
  }
  else if (!*((_QWORD *)a2 + 34))
  {
    goto LABEL_164;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)"\n", 1);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)a2 + 34) + 792))(__p, *((_QWORD *)a2 + 34), a4);
  if (__p[23] >= 0)
    v113 = __p;
  else
    v113 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v114 = __p[23];
  else
    v114 = *(_QWORD *)&__p[8];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v133, (uint64_t)v113, v114);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_164:
  if ((v140 & 0x10) != 0)
  {
    v116 = *((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1) < v137)
    {
      *((_QWORD *)&v139 + 1) = v137;
      v116 = v137;
    }
    v117 = (const void **)&v136;
  }
  else
  {
    if ((v140 & 8) == 0)
    {
      v115 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_179;
    }
    v117 = (const void **)v135;
    v116 = v135[2];
  }
  v118 = *v117;
  v115 = v116 - (_QWORD)*v117;
  if (v115 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v115 >= 0x17)
  {
    v119 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v115 | 7) != 0x17)
      v119 = v115 | 7;
    v120 = v119 + 1;
    v121 = (md::Label *)operator new(v119 + 1);
    *((_QWORD *)this + 1) = v115;
    *((_QWORD *)this + 2) = v120 | 0x8000000000000000;
    *(_QWORD *)this = v121;
    this = v121;
  }
  else
  {
    *((_BYTE *)this + 23) = v115;
    if (!v115)
      goto LABEL_179;
  }
  memmove(this, v118, v115);
LABEL_179:
  *((_BYTE *)this + v115) = 0;
  v133 = *v10;
  *(_QWORD *)((char *)&v134[-1] + *(_QWORD *)(v133 - 24)) = v10[3];
  v134[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v139) < 0)
    operator delete(v138[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v141);
}

void sub_19FE002E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::Label::populateDebugNode(md::Label *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  float v8;
  float v9;
  double v10;
  char *v11;
  char *ChildNode;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  char *v29;
  int v30;
  char v31;
  char *v32;
  int v33;
  uint64_t v34;
  float v35;
  int v36;
  float v37;
  int v38;
  float v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  int v49;
  unint64_t v50;
  const std::string::value_type *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  float v60;
  double v61;
  double v62;
  float v63;
  double v64;
  float v65;
  float v66;
  float v67;
  float v68;
  double v69;
  float v70;
  char *v71;
  char *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  double v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  md::LabelStyle **v91;
  const md::LabelManager *v92;
  char *v93;
  int v94;
  unsigned __int8 v95;
  size_t v96;
  int v97;
  unsigned __int8 v98;
  __int16 v99;
  unsigned __int8 v100;
  const char *v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  size_t v109;
  __int128 *p_dst;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char *v114;
  char *v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[2];
  __int128 v125;
  char v126[32];
  __int128 v127;
  unint64_t v128;
  int v129;
  _BYTE __p[24];
  uint64_t v131;
  __int128 __dst;
  unint64_t v133;
  char v134[32];
  __int128 v135;
  unint64_t v136;
  int v137;
  char v138[32];
  std::string v139;
  int v140;
  char v141[16];
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char v147[16];
  double v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  char v153[16];
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159[16];
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165[16];
  double v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171[16];
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  char v177[16];
  double v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183[16];
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char v189[16];
  double v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  char v195[16];
  double v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  char v201[16];
  double v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  char v207[16];
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  char v213[16];
  double v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  char v219[16];
  double v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  _QWORD v225[7];
  int v226;
  _QWORD v227[7];
  int v228;
  _QWORD v229[7];
  int v230;
  _QWORD v231[7];
  int v232;
  char v233[32];
  std::string v234;
  int v235;
  char v236[32];
  __int128 v237;
  char *v238;
  int v239;
  char v240[16];
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  char v246[16];
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  _QWORD v252[7];
  int v253;
  _QWORD v254[7];
  int v255;
  char v256[16];
  double v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  char v262[16];
  double v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  char v268[16];
  double v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  char v274[32];
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  _QWORD v279[7];
  int v280;
  _QWORD v281[7];
  int v282;
  _QWORD v283[7];
  int v284;
  _QWORD v285[7];
  int v286;
  _QWORD v287[7];
  int v288;
  char v289[8];
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  char v295[32];
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  _QWORD v300[7];
  int v301;
  _QWORD v302[7];
  int v303;
  char v304[16];
  double v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  char v310[16];
  double v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  char v316[16];
  double v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  __int128 v322;
  char *v323;

  __p[23] = 8;
  strcpy(__p, "Position");
  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  v7 = (char *)operator new(0x80uLL);
  *((_QWORD *)&v322 + 1) = v7 + 128;
  v323 = v7 + 128;
  *((_QWORD *)v7 + 2) = v5;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_DWORD *)v7 + 14) = 2;
  *((_QWORD *)v7 + 12) = 0;
  *((_QWORD *)v7 + 10) = v6;
  *((_QWORD *)v7 + 13) = 0;
  *((_QWORD *)v7 + 14) = 0;
  *((_DWORD *)v7 + 30) = 2;
  *(_QWORD *)&v322 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t *)&v322);
  if (v7[119] < 0)
  {
    operator delete(*((void **)v7 + 12));
    if ((v7[55] & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v7[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)v7 + 4));
LABEL_3:
  operator delete(v7);
  v8 = *((float *)this + 261);
  v9 = *((float *)this + 262);
  __p[23] = 10;
  strcpy(__p, "Zoom Range");
  v10 = v9;
  *((_QWORD *)&v322 + 1) = 0;
  v11 = (char *)operator new(0x80uLL);
  *((_QWORD *)&v322 + 1) = v11 + 128;
  v323 = v11 + 128;
  *((double *)v11 + 2) = v8;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_DWORD *)v11 + 14) = 2;
  *((_QWORD *)v11 + 12) = 0;
  *((double *)v11 + 10) = v10;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_DWORD *)v11 + 30) = 2;
  *(_QWORD *)&v322 = v11;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t *)&v322);
  if (v11[119] < 0)
  {
    operator delete(*((void **)v11 + 12));
    if ((v11[55] & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((v11[55] & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)v11 + 4));
LABEL_5:
  operator delete(v11);
  __p[23] = 9;
  strcpy(__p, "Collision");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  v13 = *((_DWORD *)this + 180);
  __p[23] = 5;
  strcpy(__p, "Order");
  v319 = 0;
  v320 = 0;
  v318 = 0;
  v321 = 2;
  v317 = (double)v13;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v316);
  v14 = *((_DWORD *)this + 181);
  if (v14 != *((_DWORD *)this + 180))
  {
    __p[23] = 10;
    strcpy(__p, "Icon Order");
    v314 = 0;
    v312 = 0;
    v313 = 0;
    v315 = 2;
    v311 = (double)v14;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v310);
  }
  __p[23] = 4;
  strcpy(__p, "Rank");
  v15 = *((float *)this + 185);
  v308 = 0;
  v306 = 0;
  v307 = 0;
  v309 = 2;
  v305 = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v304);
  v16 = *((int *)this + 15);
  if ((_DWORD)v16 != 0x7FFFFFFF)
  {
    __p[23] = 8;
    strcpy(__p, "Sort Key");
    v303 = 0;
    memset(&v302[4], 0, 24);
    v302[0] = v16;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v302);
  }
  v17 = 0x746C7561666544;
  __p[23] = 5;
  strcpy(__p, "Layer");
  v18 = *((char *)this + 368);
  v301 = 0;
  memset(&v300[4], 0, 24);
  v300[0] = v18;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v300);
  v19 = *((unsigned __int8 *)this + 365);
  __p[23] = 13;
  strcpy(__p, "Overlay Group");
  v20 = v19;
  v21 = 7;
  v22 = 0x746C7561666544;
  switch(v20)
  {
    case 0:
      break;
    case 1:
      v21 = 4;
      v22 = 1701736270;
      break;
    case 2:
      v21 = 1;
      v22 = 65;
      break;
    case 3:
      v21 = 1;
      v22 = 66;
      break;
    case 4:
      v21 = 1;
      v22 = 67;
      break;
    default:
      v21 = 0;
      v22 = 0;
      break;
  }
  v298 = 0;
  v299 = 4;
  v297 = 0;
  v296 = v22;
  HIBYTE(v298) = v21;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v295);
  v23 = *((unsigned __int8 *)this + 1216);
  __p[23] = 11;
  strcpy(__p, "Dedupe Rank");
  v293 = 0;
  v292 = 0;
  v294 = 1;
  v291 = 0;
  v290 = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v289);
  v24 = *((char *)this + 753);
  __p[23] = 5;
  strcpy(__p, "Layer");
  v288 = 0;
  memset(&v287[4], 0, 24);
  v287[0] = v24;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v287);
  v25 = *((unsigned __int8 *)this + 752);
  __p[23] = 13;
  strcpy(__p, "Is Selectable");
  v286 = 0;
  memset(&v285[4], 0, 24);
  v285[0] = v25;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v285);
  __p[23] = 11;
  strcpy(__p, "Is Selected");
  v26 = atomic_load((unsigned __int8 *)this + 1240);
  v284 = 0;
  memset(&v283[4], 0, 24);
  v283[0] = v26 & 1;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v283);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  __p[23] = 13;
  strcpy(__p, "Is Overridden");
  v27 = *((unsigned __int8 *)this + 824);
  v282 = 0;
  memset(&v281[4], 0, 24);
  v281[0] = v27;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v281);
  __p[23] = 11;
  strcpy(__p, "Is Occluded");
  v28 = atomic_load((unsigned __int8 *)this + 481);
  v280 = 0;
  memset(&v279[4], 0, 24);
  v279[0] = v28 & 1;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v279);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v29 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v29;
  *(_OWORD *)&__p[8] = xmmword_19FFB34A0;
  strcpy(v29, "Picked Label Balloon Behavior");
  v30 = *((unsigned __int8 *)this + 1074);
  if (*((_BYTE *)this + 1074))
  {
    if (v30 == 2)
    {
      v31 = 4;
      v17 = 2003789907;
    }
    else if (v30 == 1)
    {
      v31 = 8;
      v17 = 0x64656C6261736944;
    }
    else
    {
      v17 = 0;
      v31 = 0;
    }
  }
  else
  {
    v31 = 7;
  }
  v277 = 0;
  v278 = 4;
  v276 = 0;
  v275 = v17;
  HIBYTE(v277) = v31;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v274);
  operator delete(v29);
  if (*((_BYTE *)this + 164))
  {
    __p[23] = 12;
    strcpy(__p, "FacingVector");
    v32 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
    v33 = *((unsigned __int8 *)this + 164);
    __p[23] = 1;
    strcpy(__p, "x");
    if (!v33)
      goto LABEL_118;
    v34 = (uint64_t)v32;
    v35 = *((float *)this + 38);
    v272 = 0;
    v270 = 0;
    v271 = 0;
    v273 = 2;
    v269 = v35;
    gdc::DebugTreeNode::addProperty((uint64_t)v32, (uint64_t)__p, (uint64_t)v268);
    v36 = *((unsigned __int8 *)this + 164);
    __p[23] = 1;
    strcpy(__p, "y");
    if (!v36)
      goto LABEL_118;
    v37 = *((float *)this + 39);
    v266 = 0;
    v264 = 0;
    v265 = 0;
    v267 = 2;
    v263 = v37;
    gdc::DebugTreeNode::addProperty(v34, (uint64_t)__p, (uint64_t)v262);
    v38 = *((unsigned __int8 *)this + 164);
    __p[23] = 1;
    strcpy(__p, "z");
    if (!v38)
    {
LABEL_118:
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_119;
    }
    v39 = *((float *)this + 40);
    v260 = 0;
    v258 = 0;
    v259 = 0;
    v261 = 2;
    v257 = v39;
    gdc::DebugTreeNode::addProperty(v34, (uint64_t)__p, (uint64_t)v256);
  }
  v40 = (char *)operator new(0x19uLL);
  *(_QWORD *)__p = v40;
  v125 = xmmword_19FFB3490;
  *(_OWORD *)&__p[8] = xmmword_19FFB3490;
  strcpy(v40, "NeedsStyleValidDistance");
  v41 = *((unsigned __int8 *)this + 1272);
  v255 = 0;
  memset(&v254[4], 0, 24);
  v254[0] = v41;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v254);
  operator delete(v40);
  v42 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v42;
  v124[1] = xmmword_19FFB3800;
  *(_OWORD *)&__p[8] = xmmword_19FFB3800;
  strcpy(v42, "NeedsStyleValidViewRange");
  v43 = *((unsigned __int8 *)this + 1271);
  v253 = 0;
  memset(&v252[4], 0, 24);
  v252[0] = v43;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v252);
  operator delete(v42);
  if (*((_BYTE *)this + 1271))
  {
    v44 = (char *)operator new(0x19uLL);
    *(_QWORD *)__p = v44;
    *(_OWORD *)&__p[8] = v125;
    strcpy(v44, "ValidFaceAngleCosineMin");
    v45 = *((_QWORD *)this + 99);
    v250 = 0;
    v248 = 0;
    v249 = 0;
    v251 = 2;
    v247 = v45;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v246);
    operator delete(v44);
    v46 = (char *)operator new(0x19uLL);
    *(_QWORD *)__p = v46;
    *(_OWORD *)&__p[8] = v125;
    strcpy(v46, "ValidFaceAngleCosineMax");
    v47 = *((_QWORD *)this + 100);
    v244 = 0;
    v242 = 0;
    v243 = 0;
    v245 = 2;
    v241 = v47;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v240);
    operator delete(v46);
  }
  __p[23] = 7;
  strcpy(__p, "Staging");
  v48 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  v49 = *((unsigned __int8 *)this + 821);
  __p[23] = 7;
  strcpy(__p, "Outcome");
  md::stringFromLabelOutcome((uint64_t)&v322, v49);
  v237 = 0uLL;
  v238 = 0;
  v239 = 4;
  if (SHIBYTE(v323) < 0)
  {
    std::string::__assign_no_alias<true>(&v237, (void *)v322, *((size_t *)&v322 + 1));
  }
  else
  {
    v237 = v322;
    v238 = v323;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v236);
  if (SHIBYTE(v238) < 0)
  {
    operator delete((void *)v237);
    if ((SHIBYTE(v323) & 0x80000000) == 0)
      goto LABEL_42;
  }
  else if ((SHIBYTE(v323) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete((void *)v322);
LABEL_42:
  v50 = *((unsigned __int8 *)this + 820);
  __p[23] = 5;
  strcpy(__p, "State");
  if (v50 > 2)
    v51 = "<NONE>";
  else
    v51 = off_1E42F4048[v50];
  memset(&v234, 0, sizeof(v234));
  v235 = 4;
  std::string::__assign_external(&v234, v51);
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v233);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  v52 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v52;
  *(_OWORD *)&__p[8] = xmmword_19FFB3D50;
  strcpy(v52, "FixedPerspectiveScalingIsLocked");
  v53 = *((unsigned __int8 *)this + 827);
  v232 = 0;
  memset(&v231[4], 0, 24);
  v231[0] = v53;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v231);
  operator delete(v52);
  v54 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v54;
  *(_OWORD *)&__p[8] = xmmword_19FFB3880;
  strcpy(v54, "SkewOffsettingFactorIsLocked");
  v55 = *((unsigned __int8 *)this + 828);
  v230 = 0;
  memset(&v229[4], 0, 24);
  v229[0] = v55;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v229);
  operator delete(v54);
  v56 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v56;
  *(_OWORD *)&__p[8] = xmmword_19FFB3DA0;
  strcpy(v56, "ElevationOffsettingIsLocked");
  v57 = *((unsigned __int8 *)this + 829);
  v228 = 0;
  memset(&v227[4], 0, 24);
  v227[0] = v57;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v227);
  operator delete(v56);
  v58 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v58;
  *(_OWORD *)&__p[8] = v124[1];
  strcpy(v58, "NormalOffsettingIsLocked");
  v59 = *((unsigned __int8 *)this + 830);
  v226 = 0;
  memset(&v225[4], 0, 24);
  v225[0] = v59;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v225);
  operator delete(v58);
  __p[23] = 20;
  strcpy(__p, "SkewOffsettingFactor");
  v60 = *((float *)this + 202);
  v223 = 0;
  v221 = 0;
  v222 = 0;
  v224 = 2;
  v220 = v60;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v219);
  if (*((_BYTE *)this + 1272))
  {
    __p[23] = 16;
    strcpy(__p, "ValidDistanceMin");
    v61 = *((float *)this + 196);
    v62 = *((double *)this + 28);
    v217 = 0;
    v215 = 0;
    v216 = 0;
    v218 = 2;
    v214 = v61 / v62;
    gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v213);
    v63 = *((float *)this + 197);
    v64 = *((double *)this + 28);
    __p[23] = 16;
    strcpy(__p, "ValidDistanceMax");
    v211 = 0;
    v209 = 0;
    v210 = 0;
    v212 = 2;
    v208 = v63 / v64;
    gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v207);
  }
  __p[23] = 15;
  strcpy(__p, "FaceAngleCosine");
  v65 = *((float *)this + 191);
  v205 = 0;
  v203 = 0;
  v204 = 0;
  v206 = 2;
  v202 = v65;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v201);
  v66 = *((float *)this + 98);
  __p[23] = 4;
  strcpy(__p, "Zoom");
  v199 = 0;
  v197 = 0;
  v198 = 0;
  v200 = 2;
  v196 = v66;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v195);
  v67 = *((float *)this + 195);
  __p[23] = 8;
  strcpy(__p, "Distance");
  v193 = 0;
  v191 = 0;
  v192 = 0;
  v194 = 2;
  v190 = v67;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v189);
  v68 = *((float *)this + 195);
  v69 = *((double *)this + 28);
  __p[23] = 16;
  strcpy(__p, "DistanceInMeters");
  v187 = 0;
  v185 = 0;
  v186 = 0;
  v188 = 2;
  v184 = v68 / v69;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v183);
  v70 = *((float *)this + 99);
  __p[23] = 18;
  qmemcpy(v124, "PerspectiveScaliDistanceInMeters", sizeof(v124));
  strcpy(__p, "PerspectiveScaling");
  v181 = 0;
  v179 = 0;
  v180 = 0;
  v182 = 2;
  v178 = v70;
  gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)__p, (uint64_t)v177);
  __p[23] = 7;
  strcpy(__p, "Display");
  v71 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  v72 = (char *)operator new(0x19uLL);
  *(_QWORD *)__p = v72;
  *(_OWORD *)&__p[8] = v125;
  strcpy(v72, "FixedPerspectiveScaling");
  v73 = *((float *)this + 266);
  v175 = 0;
  v173 = 0;
  v174 = 0;
  v176 = 2;
  v172 = v73;
  gdc::DebugTreeNode::addProperty((uint64_t)v71, (uint64_t)__p, (uint64_t)v171);
  operator delete(v72);
  __p[23] = 18;
  strcpy(&__p[16], "ng");
  *(_OWORD *)__p = v124[0];
  v74 = *((float *)this + 111);
  v169 = 0;
  v167 = 0;
  v168 = 0;
  v170 = 2;
  v166 = v74;
  gdc::DebugTreeNode::addProperty((uint64_t)v71, (uint64_t)__p, (uint64_t)v165);
  v75 = *((float *)this + 263);
  __p[23] = 15;
  strcpy(__p, "FaceAngleCosine");
  v163 = 0;
  v161 = 0;
  v162 = 0;
  v164 = 2;
  v160 = v75;
  gdc::DebugTreeNode::addProperty((uint64_t)v71, (uint64_t)__p, (uint64_t)v159);
  v76 = *((float *)this + 110);
  __p[23] = 4;
  strcpy(__p, "Zoom");
  v156 = 0;
  v157 = 0;
  v155 = 0;
  v158 = 2;
  v154 = v76;
  gdc::DebugTreeNode::addProperty((uint64_t)v71, (uint64_t)__p, (uint64_t)v153);
  v77 = *((float *)this + 112);
  __p[23] = 8;
  strcpy(__p, "Distance");
  v150 = 0;
  v151 = 0;
  v149 = 0;
  v152 = 2;
  v148 = v77;
  gdc::DebugTreeNode::addProperty((uint64_t)v71, (uint64_t)__p, (uint64_t)v147);
  v78 = *((float *)this + 112);
  v79 = *((double *)this + 28);
  __p[23] = 16;
  *(_OWORD *)__p = v124[1];
  __p[16] = 0;
  v144 = 0;
  v145 = 0;
  v143 = 0;
  v146 = 2;
  v142 = v78 / v79;
  gdc::DebugTreeNode::addProperty((uint64_t)v71, (uint64_t)__p, (uint64_t)v141);
  __p[23] = 5;
  strcpy(__p, "Style");
  v80 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  v81 = *((_QWORD *)this + 1);
  v82 = *((unsigned int *)this + 12);
  v83 = atomic_load((unsigned __int8 *)this + 1240);
  if (*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v81 + 552))(v81, v82, 0, v83 & 1, 0)&& (v84 = *((_QWORD *)this + 1), v85 = *((unsigned int *)this + 12), v86 = atomic_load((unsigned __int8 *)this + 1240), v87 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v84 + 552))(v84, v85, 0, v86 & 1, 0), *(_BYTE *)(*(_QWORD *)v87 + 125))&& *(unsigned __int8 *)(*(_QWORD *)v87 + 136) != 255)
  {
    v88 = *((_QWORD *)this + 1);
    v89 = *((unsigned int *)this + 12);
    v90 = atomic_load((unsigned __int8 *)this + 1240);
    v91 = (md::LabelStyle **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v88 + 552))(v88, v89, 0, v90 & 1, 0);
    md::LabelStyle::populateDebugNode(*v91, (gdc::DebugTreeNode *)v80, v92);
    if (!*((_QWORD *)this + 44))
      goto LABEL_106;
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "No Style Found");
    memset(&v139, 0, sizeof(v139));
    v140 = 4;
    std::string::__assign_external(&v139, " ");
    gdc::DebugTreeNode::addProperty((uint64_t)v80, (uint64_t)__p, (uint64_t)v138);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v139.__r_.__value_.__l.__data_);
      if (!*((_QWORD *)this + 44))
        goto LABEL_106;
    }
    else if (!*((_QWORD *)this + 44))
    {
LABEL_106:
      if (!*((_QWORD *)this + 34))
        goto LABEL_108;
      goto LABEL_107;
    }
  }
  __p[23] = 9;
  strcpy(__p, "Collision");
  v93 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
  v94 = *(unsigned __int8 *)(*((_QWORD *)this + 44) + 52);
  HIBYTE(v323) = 9;
  strcpy((char *)&v322, "Item Type");
  switch(v94)
  {
    case 0:
      {
        v120 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v120, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v131 = mdm::Allocator::instance(void)::alloc;
      v96 = 4;
      __p[23] = 4;
      v97 = 1701736270;
      goto LABEL_69;
    case 1:
      {
        v121 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v121, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v131 = mdm::Allocator::instance(void)::alloc;
      v96 = 5;
      __p[23] = 5;
      *(_DWORD *)__p = 1953853266;
      v99 = 101;
      goto LABEL_72;
    case 2:
      {
        v118 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v118, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v131 = mdm::Allocator::instance(void)::alloc;
      v96 = 12;
      __p[23] = 12;
      *(_DWORD *)&__p[8] = 1701734732;
      v101 = "SelectedLine";
      goto LABEL_75;
    case 3:
      {
        v119 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v119, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v131 = mdm::Allocator::instance(void)::alloc;
      v96 = 4;
      __p[23] = 4;
      v97 = 1701734732;
LABEL_69:
      *(_DWORD *)__p = v97;
      __p[4] = 0;
      goto LABEL_76;
    case 4:
      {
        v117 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v117, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v131 = mdm::Allocator::instance(void)::alloc;
      v96 = 5;
      __p[23] = 5;
      *(_DWORD *)__p = 1700946252;
      v99 = 108;
LABEL_72:
      *(_WORD *)&__p[4] = v99;
      goto LABEL_76;
    case 5:
      {
        v122 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v122, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v131 = mdm::Allocator::instance(void)::alloc;
      v96 = 12;
      __p[23] = 12;
      *(_DWORD *)&__p[8] = 1818583649;
      v101 = "GenericLabel";
LABEL_75:
      *(_QWORD *)__p = *(_QWORD *)v101;
      __p[12] = 0;
LABEL_76:
      HIBYTE(v133) = v96;
      memcpy(&__dst, __p, v96);
      break;
    default:
      {
        v123 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v123, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v96 = 0;
      v131 = mdm::Allocator::instance(void)::alloc;
      __p[23] = 0;
      __p[0] = 0;
      HIBYTE(v133) = 0;
      break;
  }
  *((_BYTE *)&__dst + v96) = 0;
  v136 = 0;
  v135 = 0uLL;
  v137 = 4;
  v105 = SHIBYTE(v133);
  if (SHIBYTE(v133) < 0)
  {
    std::string::__assign_no_alias<true>(&v135, (void *)__dst, *((size_t *)&__dst + 1));
  }
  else
  {
    v135 = __dst;
    v136 = v133;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v93, (uint64_t)&v322, (uint64_t)v134);
  if (SHIBYTE(v136) < 0)
  {
    operator delete((void *)v135);
    if ((v105 & 0x80000000) == 0)
    {
LABEL_82:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_83;
LABEL_91:
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 40))(v131, *(_QWORD *)__p, *(_QWORD *)&__p[16] & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v323) & 0x80000000) == 0)
        goto LABEL_84;
      goto LABEL_92;
    }
  }
  else if ((v105 & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete((void *)__dst);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_91;
LABEL_83:
  if ((SHIBYTE(v323) & 0x80000000) == 0)
    goto LABEL_84;
LABEL_92:
  operator delete((void *)v322);
LABEL_84:
  v106 = *((_QWORD *)this + 44);
  if (*(_BYTE *)(v106 + 52) != 4)
    goto LABEL_106;
  v107 = *(_QWORD *)(v106 + 56);
  HIBYTE(v323) = 14;
  strcpy((char *)&v322, "Collided Label");
  md::LabelFeature::debugName((md::LabelFeature *)__p, *(_QWORD **)(v107 + 8));
  if ((__p[23] & 0x80000000) == 0)
  {
    v108 = __p;
    v109 = __p[23];
    if (__p[23] < 0x17uLL)
      goto LABEL_87;
LABEL_95:
    v111 = (v109 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v111 = v109 | 7;
    v112 = v111 + 1;
    p_dst = (__int128 *)operator new(v111 + 1);
    *((_QWORD *)&__dst + 1) = v109;
    v133 = v112 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_98;
  }
  v109 = *(_QWORD *)&__p[8];
  if (*(_QWORD *)&__p[8] >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_119:
    abort();
  v108 = *(_BYTE **)__p;
  if (*(_QWORD *)&__p[8] >= 0x17uLL)
    goto LABEL_95;
LABEL_87:
  HIBYTE(v133) = v109;
  p_dst = &__dst;
  if (v109)
LABEL_98:
    memmove(p_dst, v108, v109);
  *((_BYTE *)p_dst + v109) = 0;
  v127 = 0uLL;
  v128 = 0;
  v129 = 4;
  v113 = SHIBYTE(v133);
  if (SHIBYTE(v133) < 0)
  {
    std::string::__assign_no_alias<true>(&v127, (void *)__dst, *((size_t *)&__dst + 1));
  }
  else
  {
    v127 = __dst;
    v128 = v133;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v93, (uint64_t)&v322, (uint64_t)v126);
  if (SHIBYTE(v128) < 0)
  {
    operator delete((void *)v127);
    if ((v113 & 0x80000000) == 0)
    {
LABEL_104:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_113;
    }
  }
  else if ((v113 & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete((void *)__dst);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v323) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_114;
  }
LABEL_113:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v131 + 40))(v131, *(_QWORD *)__p, *(_QWORD *)&__p[16] & 0x7FFFFFFFFFFFFFFFLL);
  if ((SHIBYTE(v323) & 0x80000000) == 0)
    goto LABEL_106;
LABEL_114:
  operator delete((void *)v322);
  if (*((_QWORD *)this + 34))
  {
LABEL_107:
    __p[23] = 9;
    strcpy(__p, "Root Part");
    v114 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 34) + 800))(*((_QWORD *)this + 34), v114);
  }
LABEL_108:
  if (*((_QWORD *)this + 33))
  {
    __p[23] = 9;
    strcpy(__p, "Next Part");
    v115 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)__p);
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 33) + 800))(*((_QWORD *)this + 33), v115);
  }
}

void sub_19FE01D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a28 + 40))(a28, a25, a27 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(a1);
}

uint64_t md::Label::populateFeatureInfo(md::Label *this, md::LabelFeatureInfo *a2, const md::LabelPart *a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *((unsigned __int8 *)this + 1211);
  if (v5 != 9)
  {
    *((_BYTE *)a2 + 8) = v5;
    if (a3)
    {
      v6 = (*(uint64_t (**)(const md::LabelPart *))(*(_QWORD *)a3 + 872))(a3);
      *(_QWORD *)a2 = v6;
      if (v6)
        goto LABEL_8;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1));
    *(_QWORD *)a2 = v6;
    if (!v6)
      return (*(uint64_t (**)(_QWORD, md::LabelFeatureInfo *))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), a2);
LABEL_8:
    v7 = (uint64_t *)*((_QWORD *)a2 + 5);
    v8 = *((_QWORD *)a2 + 6);
    if ((unint64_t)v7 < v8)
    {
      if (v7)
        *v7 = v6;
      v9 = v7 + 1;
LABEL_33:
      *((_QWORD *)a2 + 5) = v9;
      return (*(uint64_t (**)(_QWORD, md::LabelFeatureInfo *))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), a2);
    }
    v10 = *((_QWORD *)a2 + 4);
    v11 = ((uint64_t)v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (v12)
    {
      v14 = 8 * v12;
      v15 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)a2 + 7) + 16))(*((_QWORD *)a2 + 7), 8 * v12, 8);
      v16 = (_QWORD *)(v15 + 8 * v11);
      v12 = v15 + v14;
      if (v15)
        *v16 = *(_QWORD *)a2;
    }
    else
    {
      v16 = (_QWORD *)(8 * v11);
    }
    v9 = v16 + 1;
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a2 + 5);
    if (v18 != v17)
    {
      v19 = v18 - v17 - 8;
      if (v19 < 0x38)
      {
        v21 = *((_QWORD *)a2 + 5);
      }
      else if ((unint64_t)(v18 - (_QWORD)v16) < 0x20)
      {
        v21 = *((_QWORD *)a2 + 5);
      }
      else
      {
        v20 = (v19 >> 3) + 1;
        v21 = v18 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v22 = v16 - 2;
        v23 = (__int128 *)(v18 - 16);
        v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 2;
          v24 -= 4;
        }
        while (v24);
        v16 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
      }
      do
      {
        v26 = *(_QWORD *)(v21 - 8);
        v21 -= 8;
        *--v16 = v26;
      }
      while (v21 != v17);
    }
LABEL_31:
    *((_QWORD *)a2 + 4) = v16;
    *((_QWORD *)a2 + 5) = v9;
    v27 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = v12;
    if (v17)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 7) + 40))(*((_QWORD *)a2 + 7), v17, v27 - v17);
    goto LABEL_33;
  }
  *((_BYTE *)a2 + 8) = 10;
  return (*(uint64_t (**)(_QWORD, md::LabelFeatureInfo *))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), a2);
}

_BYTE *md::Label::setPreviouslySelected(md::Label *this, LabelManager *a2, int a3)
{
  _BYTE *result;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;

  result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 608))(*((_QWORD *)this + 1));
  if ((_DWORD)result)
  {
    v7 = (unsigned __int8 *)this + 1241;
    v8 = atomic_load((unsigned __int8 *)this + 1241);
    if ((v8 & 1) != a3)
    {
      atomic_store(a3, v7);
      v9 = atomic_load(v7);
      result = (_BYTE *)*((_QWORD *)this + 1);
      v10 = atomic_load((unsigned __int8 *)this + 1240);
      v11 = v10 & 1;
      v12 = atomic_load(v7);
      v13 = v12 & 1;
      if (result[140] != v11 || result[141] != v13)
      {
        result[140] = v11;
        result[141] = v13;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, LabelManager *))(*(_QWORD *)result + 536))(result, a2);
      }
      *((_BYTE *)this + 1214) = -1;
      *((_BYTE *)this + 364) = 127;
      v14 = (unsigned __int8 *)this + 1296;
      if ((v9 & 1) != 0)
      {
        do
          v16 = __ldaxr(v14);
        while (__stlxr(v16 + 1, v14));
        if (!v16 && !*((_BYTE *)this + 820))
        {
          *((_BYTE *)this + 1214) = -1;
          result = (_BYTE *)md::Label::updateStateMachineForStaging((uint64_t)this, 0, 37);
        }
        *((_BYTE *)this + 1261) = 0;
LABEL_16:
        *((_QWORD *)this + 153) = 0;
        return result;
      }
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (v15 == 1)
      {
        if (!*((_BYTE *)this + 1264))
          return (_BYTE *)md::Label::updateStateMachineForStaging((uint64_t)this, 1, 37);
        *((_BYTE *)this + 1261) = 1;
        goto LABEL_16;
      }
    }
  }
  return result;
}

_BYTE *md::Label::setSelected(md::Label *this, LabelManager *a2, int a3)
{
  _BYTE *result;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;

  result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 608))(*((_QWORD *)this + 1));
  if ((_DWORD)result)
  {
    v7 = atomic_load((unsigned __int8 *)this + 1240);
    if ((v7 & 1) != a3)
    {
      atomic_store(a3, (unsigned __int8 *)this + 1240);
      if (*(_BYTE *)(*((_QWORD *)a2 + 54) + 12))
      {
        v8 = atomic_load((unsigned __int8 *)this + 1240);
        if ((v8 & 1) != 0)
        {
          v10 = *((_DWORD *)this + 78);
          *((_BYTE *)a2 + 3436) = *((_BYTE *)this + 316);
          *((_DWORD *)a2 + 858) = v10;
        }
        else
        {
          v9 = *((_DWORD *)a2 + 858);
          *((_BYTE *)this + 321) = *((_BYTE *)a2 + 3436);
          *(_DWORD *)((char *)this + 317) = v9;
        }
      }
      *((_BYTE *)this + 1249) = 1;
      *((_BYTE *)this + 1074) = *((_BYTE *)this + 822);
      v11 = atomic_load((unsigned __int8 *)this + 1240);
      result = (_BYTE *)*((_QWORD *)this + 1);
      v12 = atomic_load((unsigned __int8 *)this + 1240);
      v13 = v12 & 1;
      v14 = atomic_load((unsigned __int8 *)this + 1241);
      v15 = v14 & 1;
      if (result[140] != v13 || result[141] != v15)
      {
        result[140] = v13;
        result[141] = v15;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, LabelManager *))(*(_QWORD *)result + 536))(result, a2);
      }
      *((_BYTE *)this + 1214) = -1;
      *((_BYTE *)this + 364) = 127;
      v16 = (unsigned __int8 *)this + 1296;
      if ((v11 & 1) != 0)
      {
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 + 1, v16));
        if (!v18 && !*((_BYTE *)this + 820))
        {
          *((_BYTE *)this + 1214) = -1;
          result = (_BYTE *)md::Label::updateStateMachineForStaging((uint64_t)this, 0, 37);
        }
        *((_BYTE *)this + 1261) = 0;
LABEL_20:
        *((_QWORD *)this + 153) = 0;
        return result;
      }
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (v17 == 1)
      {
        if (!*((_BYTE *)this + 1264))
          return (_BYTE *)md::Label::updateStateMachineForStaging((uint64_t)this, 1, 37);
        *((_BYTE *)this + 1261) = 1;
        goto LABEL_20;
      }
    }
  }
  return result;
}

void md::Label::mercatorPointToWorldPoint(uint64_t a1, double *a2, char a3)
{
  uint64_t v3;
  long double v4;
  long double v5;
  double v6;
  long double v7;
  double v8;

  if (!a3)
  {
    v3 = *(_QWORD *)(a1 + 672);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 208))
        md::GeocentricFrame::_updateMatrix(*(md::GeocentricFrame **)(a1 + 672));
    }
    else
    {
      v4 = *a2 * 6.28318531;
      v5 = exp(a2[1] * 6.28318531 + -3.14159265);
      v6 = atan(v5) * 2.0 + -1.57079633;
      v7 = fmod(v4, 6.28318531);
      v8 = fmod(v7 + 6.28318531, 6.28318531) + -3.14159265;
      __sincos_stret(v6);
      __sincos_stret(v8);
    }
  }
}

void ggl::PatternedRibbon::BaseMesh::~BaseMesh(ggl::PatternedRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PatternedRibbon::BaseMesh::~BaseMesh(ggl::PatternedRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PatternedRibbon::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PatternedRibbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PatternedRibbon::BasePipelineState::~BasePipelineState(ggl::PatternedRibbon::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PatternedRibbon::BasePipelineSetup::~BasePipelineSetup(ggl::PatternedRibbon::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::PatternedRibbon::BasePipelineSetup::BasePipelineSetup(ggl::PatternedRibbon::BasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PatternedRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE372C8 = 1;
    }
    ggl::PatternedRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE37248 = &ggl::PatternedRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1ECE37250 = 0;
    if ((v5 & 1) == 0
    {
      ggl::PatternedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE37280 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE37288 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
      unk_1ECE37290 = ggl::Tile::Clipping::reflection(void)::reflection;
    }
    qword_1ECE37258 = (uint64_t)&ggl::PatternedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
    unk_1ECE37260 = xmmword_19FFB48D0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::PatternedRibbon::BasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B7208;
  return result;
}

void ggl::PatternedRibbon::WriteStencilBasePipelineState::~WriteStencilBasePipelineState(ggl::PatternedRibbon::WriteStencilBasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PatternedRibbon::WriteStencilBasePipelineSetup::~WriteStencilBasePipelineSetup(ggl::PatternedRibbon::WriteStencilBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PatternedRibbon::WriteStencilBasePipelineSetup::constantDataIsEnabled(ggl::PatternedRibbon::WriteStencilBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::PatternedRibbon::WriteStencilBasePipelineSetup::textureIsEnabled(ggl::PatternedRibbon::WriteStencilBasePipelineSetup *this)
{
  return 0;
}

uint64_t ggl::PatternedRibbon::WriteStencilBasePipelineSetup::WriteStencilBasePipelineSetup(ggl::PatternedRibbon::WriteStencilBasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PatternedRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE372C8 = 1;
    }
    ggl::PatternedRibbon::WriteStencilBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE58BDF8 = &ggl::PatternedRibbon::pipelineDataWriteStencilBasePipelineDeviceStructs(void)::ref;
    qword_1EE58BE00 = 0;
    if ((v5 & 1) == 0
    {
      ggl::PatternedRibbon::pipelineDataWriteStencilBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1EE58BF48 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE58BF50 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
    }
    qword_1EE58BE08 = (uint64_t)&ggl::PatternedRibbon::pipelineDataWriteStencilBasePipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1EE58BE10 = xmmword_19FFB3410;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::PatternedRibbon::WriteStencilBasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B7258;
  return result;
}

uint64_t ___ZN4karo5media27EdgebreakerDecodeTableCache11getInstanceEv_block_invoke()
{
  _QWORD *v0;
  pthread_mutex_t *v1;
  uint64_t result;
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = (_QWORD *)operator new();
  v0[2] = 0;
  v0[3] = 0;
  v0[1] = 0;
  *v0 = v0 + 1;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  v1 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v1, &v3);
  result = pthread_mutexattr_destroy(&v3);
  v0[3] = v1;
  karo::media::EdgebreakerDecodeTableCache::getInstance(void)::cache = (uint64_t)v0;
  return result;
}

uint64_t karo::media::EdgebreakerDecodeTableCache::getOrCreateTable(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  int v9;
  int v10;
  uint64_t **v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t *v21;
  uint64_t *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned __int16 *v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;

  pthread_mutex_lock((pthread_mutex_t *)a2[3]);
  v7 = a2 + 1;
  v6 = a2[1];
  if (!v6)
  {
LABEL_23:
    v19 = (uint64_t *)operator new();
    *v19 = (uint64_t)m3d_eb_calc_decode_table_portable(a3);
    *a1 = v19;
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v21 = v20 + 1;
    *v20 = &off_1E42E82B8;
    v20[2] = 0;
    v20[3] = v19;
    a1[1] = v20;
    v22 = *v7;
    v23 = (unsigned __int16 *)(a2 + 1);
    if (!*v7)
    {
LABEL_37:
      v32 = v23;
      v23 = (unsigned __int16 *)operator new(0x40uLL);
      *((_OWORD *)v23 + 2) = *(_OWORD *)a3;
      *((_QWORD *)v23 + 6) = 0;
      *((_QWORD *)v23 + 7) = 0;
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = v32;
      *v7 = (uint64_t *)v23;
      v33 = (uint64_t *)**a2;
      v34 = (uint64_t *)v23;
      if (v33)
      {
        *a2 = v33;
        v34 = *v7;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a2[1], v34);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
      do
LABEL_40:
        v35 = __ldxr(v21);
      while (__stxr(v35 + 1, v21));
      v36 = (std::__shared_weak_count *)*((_QWORD *)v23 + 7);
      *((_QWORD *)v23 + 6) = v19;
      *((_QWORD *)v23 + 7) = v20;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      return pthread_mutex_unlock((pthread_mutex_t *)a2[3]);
    }
    v24 = *(_DWORD *)a3;
    v25 = *(_DWORD *)(a3 + 4);
    v26 = *(_DWORD *)(a3 + 8);
    v27 = *(unsigned __int16 *)(a3 + 12);
    while (1)
    {
      v23 = (unsigned __int16 *)v22;
      v28 = *((_DWORD *)v22 + 8);
      if (v24 < v28)
        goto LABEL_25;
      if (v28 >= v24)
      {
        v29 = *((_DWORD *)v23 + 9);
        if (v25 >= v29)
        {
          if (v29 < v25)
            goto LABEL_28;
          v30 = *((_DWORD *)v23 + 10);
          if (v26 >= v30)
          {
            if (v30 < v26)
              goto LABEL_28;
            v31 = v23[22];
            if (v27 >= v31)
            {
              if (v31 >= v27)
                goto LABEL_40;
              goto LABEL_28;
            }
          }
        }
LABEL_25:
        v22 = *(uint64_t **)v23;
        v7 = (uint64_t **)v23;
        if (!*(_QWORD *)v23)
          goto LABEL_37;
      }
      else
      {
LABEL_28:
        v22 = (uint64_t *)*((_QWORD *)v23 + 1);
        if (!v22)
        {
          v7 = (uint64_t **)(v23 + 4);
          goto LABEL_37;
        }
      }
    }
  }
  v9 = *(_DWORD *)a3;
  v8 = *(_DWORD *)(a3 + 4);
  v10 = *(_DWORD *)(a3 + 8);
  v11 = a2 + 1;
  v12 = *(unsigned __int16 *)(a3 + 12);
  do
  {
    v13 = *((_DWORD *)v6 + 8);
    if (v13 < v9)
    {
LABEL_3:
      ++v6;
      goto LABEL_4;
    }
    if (v9 < v13)
      goto LABEL_11;
    v14 = *((_DWORD *)v6 + 9);
    if (v14 < v8)
      goto LABEL_3;
    if (v8 < v14)
      goto LABEL_11;
    v15 = *((_DWORD *)v6 + 10);
    if (v15 < v10)
      goto LABEL_3;
    if (v10 >= v15)
    {
      if (*((unsigned __int16 *)v6 + 22) < v12)
        ++v6;
      else
        v11 = (uint64_t **)v6;
    }
    else
    {
LABEL_11:
      v11 = (uint64_t **)v6;
    }
LABEL_4:
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  if (v11 == v7)
    goto LABEL_23;
  v16 = *((_DWORD *)v11 + 8);
  if (v9 < v16)
    goto LABEL_23;
  if (v16 >= v9)
  {
    v17 = *((_DWORD *)v11 + 9);
    if (v8 < v17)
      goto LABEL_23;
    if (v17 >= v8)
    {
      v18 = *((_DWORD *)v11 + 10);
      if (v10 < v18 || v18 >= v10 && v12 < *((unsigned __int16 *)v11 + 22))
        goto LABEL_23;
    }
  }
  v40 = v11[6];
  v39 = v11[7];
  *a1 = v40;
  a1[1] = v39;
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 1);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a2[3]);
}

void std::__shared_ptr_pointer<karo::media::EdgebreakerDecodeTable *,std::shared_ptr<karo::media::EdgebreakerDecodeTable>::__shared_ptr_default_delete<karo::media::EdgebreakerDecodeTable,karo::media::EdgebreakerDecodeTable>,std::allocator<karo::media::EdgebreakerDecodeTable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::media::EdgebreakerDecodeTable *,std::shared_ptr<karo::media::EdgebreakerDecodeTable>::__shared_ptr_default_delete<karo::media::EdgebreakerDecodeTable,karo::media::EdgebreakerDecodeTable>,std::allocator<karo::media::EdgebreakerDecodeTable>>::__on_zero_shared(uint64_t result)
{
  void ***v1;

  v1 = *(void ****)(result + 24);
  if (v1)
  {
    m3d_eb_free_decode_table_portable(*v1);
    *v1 = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void karo::media::EdgebreakerDecoder::~EdgebreakerDecoder(karo::media::EdgebreakerDecoder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void karo::media::EdgebreakerDecoder::info(karo::media::EdgebreakerDecoder *this, const unsigned __int8 *a2)
{
  char *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  const char *v19;
  __int128 v20;

  v3 = (char *)this + 4;
  if (m3d_eb_submesh_info_portable((uint64_t)a2, (uint64_t)this + 4, this) == 1)
  {
    if (karo::media::EdgebreakerDecodeTableCache::getInstance(void)::onceToken != -1)
      dispatch_once(&karo::media::EdgebreakerDecodeTableCache::getInstance(void)::onceToken, &__block_literal_global_34415);
    if (karo::media::EdgebreakerDecodeTableCache::getInstance(void)::cache)
    {
      karo::media::EdgebreakerDecodeTableCache::getOrCreateTable((uint64_t **)&v20, (uint64_t **)karo::media::EdgebreakerDecodeTableCache::getInstance(void)::cache, (uint64_t)v3);
      v4 = v20;
      v20 = 0uLL;
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
      *(_OWORD *)((char *)this + 56) = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (karo::media::EdgebreakerDecodeTableCache::getInstance(void)::onceToken != -1)
        dispatch_once(&karo::media::EdgebreakerDecodeTableCache::getInstance(void)::onceToken, &__block_literal_global_34415);
      karo::media::EdgebreakerDecodeTableCache::getOrCreateTable((uint64_t **)&v20, (uint64_t **)karo::media::EdgebreakerDecodeTableCache::getInstance(void)::cache, (uint64_t)this + 20);
      v11 = v20;
      v20 = 0uLL;
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      *(_OWORD *)((char *)this + 72) = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v18 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      v19 = "C3M3 Could not create EdgebreakerDecodeTableCache.";
      goto LABEL_35;
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v18 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      v19 = "C3M3 Error while reading chunk info.";
LABEL_35:
      _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v20, 2u);
    }
  }
}

void karo::media::EdgebreakerDecoder::decode(karo::media::EdgebreakerDecoder *this, const unsigned __int8 *a2, karo::media::C3bModel *a3, int a4)
{
  karo::media::EdgebreakerDecoder *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  NSObject *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  __int32 *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  __int32 v52;
  int v53;
  __int32 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  __int32 v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  int v67;
  __int16 *v68;
  __int16 v69;
  NSObject *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t shared_weak_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  void (__cdecl **p_on_zero_shared)(std::__shared_count *__hidden);
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  int64x2_t *v88;
  karo::media::C3bModel *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  karo::media::EdgebreakerDecoder *v93;
  int *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  int v98;
  int32x4_t *v99;
  uint8_t v100[12];
  int v101;
  uint8_t buf[8];
  __int128 __p;
  uint64_t v104;
  int v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  int v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v6 = this;
  v7 = *((unsigned int *)this + 11);
  if (!(_DWORD)v7 && *(_BYTE *)this == 6)
  {
    v106 = 0;
    v107 = 0;
    v104 = 0;
    __p = 0uLL;
    v109 = 0u;
    v110 = 0u;
    v111 = 0;
    *(_DWORD *)&buf[4] = a4;
    buf[0] = 6;
    v105 = 0;
    v112 = 0xFFFFFFFFuLL;
    v8 = *((_QWORD *)a3 + 18);
    if (v8 >= *((_QWORD *)a3 + 19))
    {
      *((_QWORD *)a3 + 18) = std::vector<karo::media::C3mMesh>::__push_back_slow_path<karo::media::C3mMesh const&>((int64x2_t *)((char *)a3 + 136), (const karo::media::C3mMesh *)buf);
    }
    else
    {
      v9 = *(_QWORD *)buf;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_OWORD *)(v8 + 64) = 0uLL;
      *(_OWORD *)(v8 + 80) = 0uLL;
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)v8 = v9;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 32) = 0;
      *(_OWORD *)(v8 + 104) = v112;
      *((_QWORD *)a3 + 18) = v8 + 120;
    }
    return;
  }
  v99 = (int32x4_t *)operator new[]();
  v95 = (int *)operator new[]();
  v90 = operator new[]();
  if (*(_BYTE *)v6 == 8)
    v10 = 3 * *((_DWORD *)v6 + 10);
  else
    v10 = *((_DWORD *)v6 + 9);
  v101 = 0;
  v91 = operator new[]();
  v11 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF990;
  v97 = v11 + 1;
  ggl::BufferData::BufferData((uint64_t)&v11[1], 32, 0, 0, 7, v10);
  v11[9].__shared_weak_owners_ = (uint64_t)"VertexDataGeoGL";
  v11[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4UVReflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B75A0;
  v11[9].__shared_owners_ = (uint64_t)&unk_1E42B75C0;
  if (v11[1].__shared_owners_ * v10)
    v13 = (uint64_t)v11[4].__vftable;
  else
    v13 = 0;
  v87 = (_DWORD *)v13;
  v86 = v11[1].__shared_owners_ * v10;
  if (m3d_eb_decompress_portable((uint64_t)a2, (_DWORD *)v6 + 1, **((uint64_t ***)v6 + 7), **((uint64_t ***)v6 + 9), v13, v91, &v101, v95, v99, v90, 0, 2u) != 1)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v20 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "Failed do decode submesh.", buf, 2u);
    }
    goto LABEL_77;
  }
  if (!v10)
  {
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    goto LABEL_30;
  }
  v14.i32[0] = *v87;
  v15.i32[0] = v87[1];
  v16.i32[0] = v87[2];
  if (v10 == 1)
  {
    v17 = *(float *)v87;
    v18 = *((float *)v87 + 1);
    v19 = *((float *)v87 + 2);
  }
  else
  {
    if (v10 >= 9)
    {
      v25 = ((int)v10 - 1) & 0xFFFFFFFFFFFFFFF8;
      v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0);
      v26 = v87 + 33;
      v27 = v25;
      v28 = v14;
      v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 0);
      v29 = v15;
      v30 = v16;
      v31 = v16;
      v32 = v16;
      v33 = v15;
      v34 = v15;
      v35 = v14;
      v36 = v14;
      do
      {
        v37.i32[0] = *(v26 - 25);
        v38.i32[0] = *(v26 - 24);
        v37.i32[1] = *(v26 - 17);
        v37.i32[2] = *(v26 - 9);
        v37.i32[3] = *(v26 - 1);
        v39.i32[0] = v26[7];
        v40.i32[0] = v26[8];
        v39.i32[1] = v26[15];
        v39.i32[2] = v26[23];
        v39.i32[3] = v26[31];
        v14 = vminnmq_f32(v37, v14);
        v28 = vminnmq_f32(v39, v28);
        v38.i32[1] = *(v26 - 16);
        v38.i32[2] = *(v26 - 8);
        v38.i32[3] = *v26;
        v41.i32[0] = v26[9];
        v40.i32[1] = v26[16];
        v40.i32[2] = v26[24];
        v40.i32[3] = v26[32];
        v15 = vminnmq_f32(v38, v15);
        v29 = vminnmq_f32(v40, v29);
        v42.i32[0] = *(v26 - 23);
        v42.i32[1] = *(v26 - 15);
        v42.i32[2] = *(v26 - 7);
        v42.i32[3] = v26[1];
        v41.i32[1] = v26[17];
        v41.i32[2] = v26[25];
        v41.i32[3] = v26[33];
        v16 = vminnmq_f32(v42, v16);
        v30 = vminnmq_f32(v41, v30);
        v35 = vmaxnmq_f32(v35, v37);
        v36 = vmaxnmq_f32(v36, v39);
        v33 = vmaxnmq_f32(v33, v38);
        v34 = vmaxnmq_f32(v34, v40);
        v31 = vmaxnmq_f32(v31, v42);
        v32 = vmaxnmq_f32(v32, v41);
        v26 += 64;
        v27 -= 8;
      }
      while (v27);
      v17 = vmaxnmvq_f32(vmaxnmq_f32(v35, v36));
      v18 = vmaxnmvq_f32(vmaxnmq_f32(v33, v34));
      v19 = vmaxnmvq_f32(vmaxnmq_f32(v31, v32));
      v16.f32[0] = vminnmvq_f32(vminnmq_f32(v16, v30));
      v15.f32[0] = vminnmvq_f32(vminnmq_f32(v15, v29));
      v14.f32[0] = vminnmvq_f32(vminnmq_f32(v14, v28));
      if ((int)v10 - 1 == v25)
        goto LABEL_29;
      v24 = v25 | 1;
    }
    else
    {
      v24 = 1;
      v19 = *((float *)v87 + 2);
      v18 = *((float *)v87 + 1);
      v17 = *(float *)v87;
    }
    v43 = (int)v10 - v24;
    v44 = (float *)&v87[8 * v24 + 2];
    do
    {
      v45 = *(v44 - 2);
      v46 = *(v44 - 1);
      v14.f32[0] = fminf(v45, v14.f32[0]);
      v15.f32[0] = fminf(v46, v15.f32[0]);
      v47 = *v44;
      v44 += 8;
      v16.f32[0] = fminf(v47, v16.f32[0]);
      v17 = fmaxf(v17, v45);
      v18 = fmaxf(v18, v46);
      v19 = fmaxf(v19, v47);
      --v43;
    }
    while (v43);
  }
LABEL_29:
  v23 = (float)(v14.f32[0] + v17) * 0.5;
  v22 = (float)(v15.f32[0] + v18) * 0.5;
  v21 = (float)(v16.f32[0] + v19) * 0.5;
LABEL_30:
  v99->i32[v7] = *((_DWORD *)v6 + 10);
  if ((_DWORD)v7)
  {
    v48 = 0;
    v88 = (int64x2_t *)((char *)a3 + 136);
    v96 = v11;
    v92 = v7;
    v89 = a3;
    v93 = v6;
    while (1)
    {
      v49 = v48;
      v50 = v95[v48];
      __p = 0uLL;
      v104 = 0;
      v111 = 0;
      v110 = 0uLL;
      *(_DWORD *)&buf[4] = a4;
      buf[0] = *(_BYTE *)v6;
      do
        v51 = __ldxr(p_shared_owners);
      while (__stxr(v51 + 1, p_shared_owners));
      v106 = v97;
      v107 = v11;
      v52 = v99->i32[v48];
      v53 = v101;
      v105 = v50;
      v108 = v101;
      LODWORD(v112) = -1;
      ++v48;
      v54 = v99->i32[v49 + 1];
      v55 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v55->__shared_weak_owners_ = 0;
      v55->__shared_owners_ = 0;
      v56 = (unint64_t *)&v55->__shared_owners_;
      v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v98 = 3 * (v54 - v52);
      v57 = ggl::BufferData::BufferData((uint64_t)&v55[1], 2, 1, 0, 7, v98);
      v58 = 0;
      LODWORD(v55[10].__vftable) = 0;
      v55[1].__shared_owners_ = 2;
      v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v55[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v55[9].__shared_weak_owners_ = (uint64_t)"IndexDataGeoGL";
      *(_QWORD *)&v109 = v57;
      *((_QWORD *)&v109 + 1) = v55;
      if (v54 != v52)
        v58 = v55[4].__vftable;
      v59 = v99->i32[v49];
      v60 = (3 * v59);
      v61 = 3 * v99->i32[v48];
      v62 = v61 - v60;
      if (v61 <= v60)
        goto LABEL_51;
      v63 = v61 + ~(_DWORD)v60;
      if (v63 <= 0xE || (unint64_t)v58 - v91 + -2 * v60 < 0x20)
        break;
      v79 = v63 + 1;
      v64 = (v63 + 1) & 0x1FFFFFFF0;
      p_on_zero_shared = &v58->__on_zero_shared;
      v81 = (__int128 *)(v91 + 16 + 2 * v60);
      v82 = v64;
      do
      {
        v83 = *v81;
        *((_OWORD *)p_on_zero_shared - 1) = *(v81 - 1);
        *(_OWORD *)p_on_zero_shared = v83;
        p_on_zero_shared += 4;
        v81 += 2;
        v82 -= 16;
      }
      while (v82);
      if (v79 != v64)
      {
        v65 = v64 + v60;
LABEL_43:
        v66 = (_WORD *)((char *)v58 + 2 * v64);
        v67 = v61 - v64 - v60;
        v68 = (__int16 *)(v91 + 2 * v65);
        do
        {
          v69 = *v68++;
          *v66++ = v69;
          --v67;
        }
        while (v67);
      }
      if ((-1431655765 * v62) >= 0x55555556)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v11 = v96;
        v70 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_57;
        *(_WORD *)v100 = 0;
        _os_log_impl(&dword_19F029000, v70, OS_LOG_TYPE_ERROR, "Index list must be a multiple of three", v100, 2u);
        if (!v58)
          goto LABEL_64;
        goto LABEL_60;
      }
LABEL_51:
      *(_QWORD *)((char *)&v112 + 4) = __PAIR64__(LODWORD(v22), LODWORD(v23));
      *((float *)&v112 + 3) = v21;
      LODWORD(v112) = 3 * (*(_DWORD *)(v90 + 4 * v49) - v59);
      v71 = *((_QWORD *)v89 + 18);
      if (v71 < *((_QWORD *)v89 + 19))
      {
        *(_QWORD *)v71 = *(_QWORD *)buf;
        *(_OWORD *)(v71 + 8) = __p;
        *(_QWORD *)(v71 + 24) = v104;
        *(_DWORD *)(v71 + 32) = v50;
        *(_QWORD *)(v71 + 40) = v97;
        *(_QWORD *)(v71 + 48) = v96;
        do
          v72 = __ldxr(p_shared_owners);
        while (__stxr(v72 + 1, p_shared_owners));
        *(_DWORD *)(v71 + 56) = v53;
        *(_QWORD *)(v71 + 64) = v57;
        *(_QWORD *)(v71 + 72) = v55;
        do
          v73 = __ldxr(v56);
        while (__stxr(v73 + 1, v56));
        *(_QWORD *)(v71 + 80) = 0;
        *(_QWORD *)(v71 + 88) = 0;
        *(_QWORD *)(v71 + 96) = 0;
        *(_OWORD *)(v71 + 104) = v112;
        *((_QWORD *)v89 + 18) = v71 + 120;
        v11 = v96;
LABEL_57:
        if (!v58)
          goto LABEL_64;
        goto LABEL_60;
      }
      *((_QWORD *)v89 + 18) = std::vector<karo::media::C3mMesh>::__push_back_slow_path<karo::media::C3mMesh const&>(v88, (const karo::media::C3mMesh *)buf);
      v11 = v96;
      if (!v58)
        goto LABEL_64;
LABEL_60:
      if (v54 != v52)
      {
        shared_weak_owners = 2 * v98;
        if (v55[3].__shared_weak_owners_ > shared_weak_owners)
          shared_weak_owners = v55[3].__shared_weak_owners_;
        v55[3].__shared_owners_ = 0;
        v55[3].__shared_weak_owners_ = shared_weak_owners;
      }
      do
LABEL_64:
        v75 = __ldaxr(v56);
      while (__stlxr(v75 - 1, v56));
      v6 = v93;
      if (v75)
      {
        v76 = v107;
        if (v107)
          goto LABEL_69;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        v76 = v107;
        if (v107)
        {
LABEL_69:
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }
      if (SHIBYTE(v104) < 0)
        operator delete((void *)__p);
      if (v48 == v92)
        goto LABEL_77;
    }
    v64 = 0;
    v65 = (3 * v59);
    goto LABEL_43;
  }
LABEL_77:
  MEMORY[0x1A1AF4DE8](v99, 0x1000C8052888210);
  MEMORY[0x1A1AF4DE8](v95, 0x1000C8052888210);
  MEMORY[0x1A1AF4DE8](v90, 0x1000C8052888210);
  MEMORY[0x1A1AF4DE8](v91, 0x1000C80BDFB0063);
  if (v87 && v86)
  {
    v84 = v11[3].__shared_weak_owners_;
    if (v84 <= v86)
      v84 = v86;
    v11[3].__shared_owners_ = 0;
    v11[3].__shared_weak_owners_ = v84;
  }
  do
    v85 = __ldaxr(p_shared_owners);
  while (__stlxr(v85 - 1, p_shared_owners));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void md::ScreenLabelFeatureSupport::~ScreenLabelFeatureSupport(md::ScreenLabelFeatureSupport *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*((_QWORD **)this + 9));
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 1);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v8);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = *((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v8, *((_QWORD *)this + 3) - v8);
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*>(void **a1, void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      if (*(a2 - 1) < *a1)
      {
        *a1 = 0;
        v7 = *(a2 - 1);
        *(a2 - 1) = 0;
        v8 = *a1;
        *a1 = v7;

        v9 = *(a2 - 1);
        *(a2 - 1) = v6;

        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = (unint64_t *)(a1 + 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2);
      v11 = (unint64_t *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v16 = (void *)*v11;
    v17 = *v10;
    if (*v11 < *v10)
    {
      *v11 = 0;
      v18 = v12;
      do
      {
        v19 = (void **)((char *)a1 + v18);
        v20 = *(void **)((char *)a1 + v18 + 24);
        v19[2] = 0;
        v19[3] = v17;

        if (v18 == -16)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v17 = v19[1];
        v18 -= 8;
      }
      while ((unint64_t)v16 < v17);
      v14 = (void **)((char *)a1 + v18 + 24);
LABEL_7:
      v15 = *v14;
      *v14 = v16;

      if (++v13 == 8)
        return v11 + 1 == (unint64_t *)a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == (unint64_t *)a2)
      return 1;
  }
}

void std::__shared_ptr_emplace<md::ScreenLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ScreenLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ScreenLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::LabelDataTileComponent::~LabelDataTileComponent(altitude::LabelDataTileComponent *this)
{
  altitude::LabelDataTileComponent::~LabelDataTileComponent(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14[2];

  *(_QWORD *)this = &off_1E42C5FC8;
  if (*((_QWORD *)this + 11))
    (*(void (**)(_QWORD, _QWORD, altitude::LabelDataTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                             + 424)
                                                                               + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*((_QWORD *)this + 11))
        goto LABEL_9;
      goto LABEL_8;
    }
    if (*((_QWORD *)this + 11))
LABEL_8:
      (*(void (**)(_QWORD, _QWORD, altitude::LabelDataTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                               + 424)
                                                                                 + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  }
LABEL_9:
  v14[0] = 0;
  v14[1] = 0;
  altitude::LabelDataTileComponent::setFallbackLabelData(this, v14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v5)
    goto LABEL_13;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v8)
      goto LABEL_21;
  }
  else
  {
LABEL_13:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v8)
      goto LABEL_21;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_21:
  *(_QWORD *)this = off_1E42C4248;
  v11 = (_QWORD *)*((_QWORD *)this + 6);
  v12 = (_QWORD *)*((_QWORD *)this + 7);
  if (v11 == v12)
  {
    if (v11)
    {
LABEL_23:
      *((_QWORD *)this + 7) = v11;
      operator delete(v11);
    }
  }
  else
  {
    do
    {
      v13 = v11[1];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v11 += 2;
    }
    while (v11 != v12);
    v11 = (_QWORD *)*((_QWORD *)this + 6);
    if (v11)
      goto LABEL_23;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
}

BOOL altitude::LabelDataTileComponent::hasLoadedData(altitude::LabelDataTileComponent *this)
{
  return !*((_BYTE *)this + 80) || *((_QWORD *)this + 11) != 0;
}

BOOL altitude::LabelDataTileComponent::hasLoadedFallbackData(altitude::LabelDataTileComponent *this)
{
  return *((_QWORD *)this + 13) != 0;
}

uint64_t altitude::LabelDataTileComponent::needsFallbackData(altitude::LabelDataTileComponent *this)
{
  if (*((_BYTE *)this + 82) && *((_BYTE *)this + 81))
    return (*(unsigned int (**)(altitude::LabelDataTileComponent *))(*(_QWORD *)this + 56))(this) ^ 1;
  else
    return 0;
}

void altitude::LabelDataTileComponent::destroyFallback(altitude::LabelDataTileComponent *this)
{
  uint64_t v1[2];

  v1[0] = 0;
  v1[1] = 0;
  altitude::LabelDataTileComponent::setFallbackLabelData(this, v1);
}

uint64_t altitude::LabelDataTileComponent::willBeDrawn(uint64_t this, const md::LayoutContext *a2, altitude::View *a3, karo::graphics::Viewport *a4, uint64_t a5, altitude::StencilManager *a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(this + 88);
  if (v6)
    *(_QWORD *)(v6 + 184) = a5;
  v7 = *(_QWORD *)(this + 104);
  if (v7)
    *(_QWORD *)(v7 + 184) = a5;
  return this;
}

void altitude::LabelDataTileComponent::setFallbackLabelData(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)a1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (a1[13])
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1[2] + 424) + 24))(*(_QWORD *)(a1[2] + 424), a1[2], a1);
  v7 = *a2;
  v8 = a2[1];
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a1[14];
  a1[13] = v7;
  a1[14] = v8;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v7 = a1[13];
  }
  if (v7)
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1[2] + 424) + 16))(*(_QWORD *)(a1[2] + 424), a1[2], a1);
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t altitude::LabelDataTileComponent::setTrafficTile(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char **v40;
  char *v41;
  char *v42;
  size_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  int64_t v50;
  char *v51;
  char *v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char **v62;
  char *v63;
  char *v64;
  size_t v65;
  unint64_t v66;
  char *v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  _QWORD *v81;

  v2 = *(_QWORD *)(result + 88);
  if (v2)
  {
    v3 = a2;
    v4 = result;
    if (!*a2)
    {
      v24 = *(std::__shared_weak_count **)(v2 + 96);
      *(_QWORD *)(v2 + 88) = 0;
      *(_QWORD *)(v2 + 96) = 0;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = *(_QWORD *)(v4 + 88);
      v28 = *(std::__shared_weak_count **)(v27 + 112);
      *(_QWORD *)(v27 + 104) = 0;
      *(_QWORD *)(v27 + 112) = 0;
      if (!v28)
        return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 16) + 424)
                                                                          + 16))(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 424), *(_QWORD *)(v4 + 16), v4, *v3);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      goto LABEL_92;
    }
    v5 = *(_QWORD *)(*a2 + 56);
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(std::__shared_weak_count **)(v5 + 56);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(std::__shared_weak_count **)(v2 + 96);
    *(_QWORD *)(v2 + 88) = v6;
    *(_QWORD *)(v2 + 96) = v7;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v17 = *(_QWORD **)(v4 + 88);
    v18 = *(_QWORD *)(*v3 + 56);
    v20 = *(_BYTE **)(v18 + 136);
    v19 = *(_BYTE **)(v18 + 144);
    v21 = v19 - v20;
    v81 = v3;
    if (v19 == v20)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v21 >> 3) > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_95;
      v22 = (char *)operator new(v21);
      v23 = &v22[8 * (v21 >> 3)];
      memcpy(v22, v20, v21);
    }
    v31 = (char *)v17[17];
    v32 = v23 - v22;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3);
    v34 = v17[19];
    if (0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v31) >> 3) >= v33)
    {
      v42 = (char *)v17[18];
      v40 = (char **)(v17 + 18);
      v41 = v42;
      v43 = v42 - v31;
      v44 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3);
      if (v44 >= v33)
      {
        if (v23 != v22)
          memmove(v31, v22, v23 - v22);
        v3 = v81;
      }
      else
      {
        v45 = &v22[24 * v44];
        if (v41 != v31)
        {
          memmove(v31, v22, v43);
          v31 = *v40;
        }
        v3 = v81;
        v32 = v23 - v45;
        if (v23 != v45)
          memmove(v31, v45, v23 - v45);
      }
    }
    else
    {
      if (v31)
      {
        v17[18] = v31;
        operator delete(v31);
        v34 = 0;
        v17[17] = 0;
        v17[18] = 0;
        v17[19] = 0;
      }
      if (v33 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_95;
      v35 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 3);
      v36 = 2 * v35;
      if (2 * v35 <= v33)
        v36 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3);
      v37 = v35 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v36;
      if (v37 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_95;
      v38 = 24 * v37;
      v39 = (char *)operator new(24 * v37);
      v31 = v39;
      v17[18] = v39;
      v40 = (char **)(v17 + 18);
      *(v40 - 1) = v39;
      v40[1] = &v39[v38];
      v3 = v81;
      if (v23 != v22)
        memcpy(v39, v22, v23 - v22);
    }
    *v40 = &v31[v32];
    if (v22)
      operator delete(v22);
    v46 = *(_QWORD **)(v4 + 88);
    v47 = *(_QWORD *)(*v3 + 56);
    v49 = *(_BYTE **)(v47 + 160);
    v48 = *(_BYTE **)(v47 + 168);
    v50 = v48 - v49;
    if (v48 == v49)
    {
      v51 = 0;
      v52 = 0;
    }
    else
    {
      if (v50 < 0)
        goto LABEL_95;
      v51 = (char *)operator new(v48 - v49);
      v52 = &v51[8 * (v50 >> 3)];
      memcpy(v51, v49, v50);
    }
    v53 = (char *)v46[20];
    v54 = v52 - v51;
    v55 = (v52 - v51) >> 3;
    v56 = v46[22];
    if (v55 > (v56 - (uint64_t)v53) >> 3)
    {
      if (v53)
      {
        v46[21] = v53;
        operator delete(v53);
        v56 = 0;
        v46[20] = 0;
        v46[21] = 0;
        v46[22] = 0;
      }
      if ((v54 & 0x8000000000000000) == 0)
      {
        v57 = v56 >> 2;
        if (v56 >> 2 <= v55)
          v57 = (v52 - v51) >> 3;
        v58 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8;
        v59 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v58)
          v59 = v57;
        if (!(v59 >> 61))
        {
          v60 = 8 * v59;
          v61 = (char *)operator new(8 * v59);
          v53 = v61;
          v46[21] = v61;
          v62 = (char **)(v46 + 21);
          *(v62 - 1) = v61;
          v62[1] = &v61[v60];
          if (v52 != v51)
            memcpy(v61, v51, v52 - v51);
          goto LABEL_77;
        }
      }
LABEL_95:
      abort();
    }
    v64 = (char *)v46[21];
    v62 = (char **)(v46 + 21);
    v63 = v64;
    v65 = v64 - v53;
    v66 = (v64 - v53) >> 3;
    if (v66 >= v55)
    {
      if (v52 == v51)
      {
LABEL_77:
        *v62 = &v53[v54];
        if (v51)
          operator delete(v51);
        v70 = *(_QWORD *)(v4 + 88);
        v71 = *(_QWORD *)(*v3 + 56);
        v72 = *(_QWORD *)(v71 + 64);
        v28 = *(std::__shared_weak_count **)(v71 + 72);
        if (v28)
        {
          v73 = (unint64_t *)&v28->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
          v75 = (unint64_t *)&v28->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = *(std::__shared_weak_count **)(v70 + 112);
        *(_QWORD *)(v70 + 104) = v72;
        *(_QWORD *)(v70 + 112) = v28;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (!v28)
          return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 16) + 424)
                                                                            + 16))(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 424), *(_QWORD *)(v4 + 16), v4, *v3);
        v80 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v80);
        while (__stlxr(v30 - 1, v80));
LABEL_92:
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 16) + 424)
                                                                          + 16))(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 424), *(_QWORD *)(v4 + 16), v4, *v3);
      }
      v68 = v53;
      v69 = v51;
    }
    else
    {
      v67 = &v51[8 * v66];
      if (v63 != v53)
      {
        memmove(v53, v51, v65);
        v53 = *v62;
      }
      v54 = v52 - v67;
      if (v52 == v67)
        goto LABEL_77;
      v68 = v53;
      v69 = v67;
    }
    memmove(v68, v69, v54);
    goto LABEL_77;
  }
  return result;
}

void altitude::RoadTileComponent::~RoadTileComponent(altitude::RoadTileComponent *this)
{
  altitude::RoadTileComponent::~RoadTileComponent(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  *(_QWORD *)this = &off_1E42C50F0;
  if (*((_QWORD *)this + 11))
    (*(void (**)(_QWORD, _QWORD, altitude::RoadTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    if (*((_QWORD *)this + 11))
      (*(void (**)(_QWORD, _QWORD, altitude::RoadTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                            + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  }
  if (*((_QWORD *)this + 13))
    (*(void (**)(_QWORD, _QWORD, altitude::RoadTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    if (*((_QWORD *)this + 13))
      (*(void (**)(_QWORD, _QWORD, altitude::RoadTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                            + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)this = off_1E42C4248;
  v14 = (_QWORD *)*((_QWORD *)this + 6);
  v15 = (_QWORD *)*((_QWORD *)this + 7);
  if (v14 == v15)
  {
    if (v14)
    {
LABEL_31:
      *((_QWORD *)this + 7) = v14;
      operator delete(v14);
    }
  }
  else
  {
    do
    {
      v16 = v14[1];
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v14 += 2;
    }
    while (v14 != v15);
    v14 = (_QWORD *)*((_QWORD *)this + 6);
    if (v14)
      goto LABEL_31;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
}

BOOL altitude::RoadTileComponent::hasLoadedData(altitude::RoadTileComponent *this)
{
  return !*((_BYTE *)this + 120) || *((_QWORD *)this + 11) != 0;
}

BOOL altitude::RoadTileComponent::hasLoadedFallbackData(altitude::RoadTileComponent *this)
{
  return *((_QWORD *)this + 13) != 0;
}

uint64_t altitude::RoadTileComponent::needsFallbackData(altitude::RoadTileComponent *this)
{
  if (*((_BYTE *)this + 122) && *((_BYTE *)this + 121))
    return (*(unsigned int (**)(altitude::RoadTileComponent *))(*(_QWORD *)this + 56))(this) ^ 1;
  else
    return 0;
}

void altitude::RoadTileComponent::destroyFallback(altitude::RoadTileComponent *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((_QWORD *)this + 13))
    (*(void (**)(_QWORD, _QWORD, altitude::RoadTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
    {
      if (!*((_QWORD *)this + 13))
        return;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (*((_QWORD *)this + 13))
LABEL_8:
      (*(void (**)(_QWORD, _QWORD, altitude::RoadTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                            + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
  }
}

void altitude::RoadTileComponent::willBeDrawn(altitude::RoadTileComponent *this, const md::LayoutContext *a2, altitude::View *a3, karo::graphics::Viewport *a4, karo::graphics::Viewport *a5, altitude::StencilManager *a6)
{
  altitude::RoadTilePrivate *v10;
  altitude::RoadTilePrivate *v11;

  if (*((_BYTE *)this + 122))
  {
    v10 = (altitude::RoadTilePrivate *)*((_QWORD *)this + 11);
    if (v10)
      altitude::RoadTilePrivate::willBeDrawn(v10, a3, a5, (unsigned __int8 *)a6, a5);
    v11 = (altitude::RoadTilePrivate *)*((_QWORD *)this + 13);
    if (v11)
      altitude::RoadTilePrivate::willBeDrawn(v11, a3, a5, (unsigned __int8 *)a6, a5);
  }
}

_QWORD *altitude::RoadTileComponent::collectRenderItems(_QWORD *result, int a2, md::PassList *a3, int a4, int a5, md::RealisticCommandBufferSelector *a6)
{
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;

  if (*((_BYTE *)result + 122))
  {
    v6 = result;
    if (((_DWORD)result[10] & a5) != 0)
    {
      v9 = result[11];
      if (v9)
      {
        v10 = (_QWORD *)result[2];
        v11 = v10[46];
        v12 = v10[41];
        if (v12)
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
          if (v11 <= v13)
            v11 = v13;
        }
        v14 = v10[42];
        if (v14)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
          if (v11 <= v15)
            v11 = v15;
        }
        v16 = v10[43];
        if (v16)
        {
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
          if (v11 <= v17)
            v11 = v17;
        }
        v18 = v10[44];
        if (v18)
        {
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v11 <= v19)
            v11 = v19;
        }
        v20 = v10[45];
        if (v20)
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
          if (v11 <= v21)
            v11 = v21;
        }
        *(_QWORD *)(v9 + 152) = v11;
        v22 = (_QWORD *)v6[11];
        v23 = (_QWORD *)v6[2];
        v24 = v23[46];
        v25 = v23[41];
        if (v25)
        {
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
          if (v24 <= v26)
            v24 = v26;
        }
        v27 = v23[42];
        if (v27)
        {
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
          if (v24 <= v28)
            v24 = v28;
        }
        v29 = v23[43];
        if (v29)
        {
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
          if (v24 <= v30)
            v24 = v30;
        }
        v31 = v23[44];
        if (v31)
        {
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
          if (v24 <= v32)
            v24 = v32;
        }
        v33 = v23[45];
        if (v33)
        {
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
          if (v24 <= v34)
            v24 = v34;
        }
        result = altitude::RoadTilePrivate::collectRenderItems(v22, a3, v24, a6);
      }
      v35 = v6[13];
      if (v35)
      {
        v36 = (_QWORD *)v6[2];
        v37 = v36[46];
        v38 = v36[41];
        if (v38)
        {
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
          if (v37 <= v39)
            v37 = v39;
        }
        v40 = v36[42];
        if (v40)
        {
          v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
          if (v37 <= v41)
            v37 = v41;
        }
        v42 = v36[43];
        if (v42)
        {
          v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
          if (v37 <= v43)
            v37 = v43;
        }
        v44 = v36[44];
        if (v44)
        {
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
          if (v37 <= v45)
            v37 = v45;
        }
        v46 = v36[45];
        if (v46)
        {
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
          if (v37 <= v47)
            v37 = v47;
        }
        *(_QWORD *)(v35 + 152) = v37;
        v48 = (_QWORD *)v6[13];
        v49 = (_QWORD *)v6[2];
        v50 = v49[46];
        v51 = v49[41];
        if (v51)
        {
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
          if (v50 <= v52)
            v50 = v52;
        }
        v53 = v49[42];
        if (v53)
        {
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
          if (v50 <= v54)
            v50 = v54;
        }
        v55 = v49[43];
        if (v55)
        {
          v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
          if (v50 <= v56)
            v50 = v56;
        }
        v57 = v49[44];
        if (v57)
        {
          v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
          if (v50 <= v58)
            v50 = v58;
        }
        v59 = v49[45];
        if (v59)
        {
          v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
          if (v50 <= v60)
            v50 = v60;
        }
        return altitude::RoadTilePrivate::collectRenderItems(v48, a3, v50, a6);
      }
    }
  }
  return result;
}

void layoutRenderItemsForGroup(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int32 *a5, int a6, uint64_t a7, float a8, float a9, float a10, double a11)
{
  uint64_t v17;
  uint64_t v18;
  uint16x4_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float *v28;
  float v29;
  BOOL v30;
  unsigned int v31;
  float v32;
  float v33;
  int32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  __int128 *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  _QWORD *v113;
  unint64_t v114;
  float32x4_t *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char **v124;
  char *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _OWORD *v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float32x4_t v149;
  uint64_t v150;
  int32x4_t v151;
  float32x4_t v152;
  _QWORD *v153;
  _QWORD *v157;
  uint16x4_t v158[2];
  uint16x4_t v159;
  std::__shared_weak_count *v160;
  _QWORD v161[2];
  unsigned __int8 v162;
  char v163[9];

  *(double *)v151.i64 = a11;
  v17 = *a2 + 72;
  v18 = 56;
  if (a6)
    v18 = 72;
  else
    v17 = *a2 + 56;
  v19 = *(uint16x4_t *)(*a2 + v18);
  v20 = *(std::__shared_weak_count **)(v17 + 8);
  v158[0] = v19;
  v158[1] = (uint16x4_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v160 = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  else
  {
    v160 = 0;
  }
  v161[0] = 0;
  v161[1] = 0;
  v159 = v19;
  v162 = 0;
  if (v19)
    v19.i32[0] = (*(uint64_t (**)(uint16x4_t, _QWORD *))(**(_QWORD **)&v19 + 48))(v19, v161);
  v162 = v19.i8[0];
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v19.i32[0] = v162;
  }
  if (v19.i32[0])
  {
    if ((int)a10 >= 0x17)
      v26 = 23;
    else
      v26 = (int)a10;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v158, *(_QWORD *)(*(_QWORD *)&v159 + 24), 0xA2u, v26, 2u, 0);
    v149 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v158[0])), (float32x4_t)vdupq_n_s32(0x37800080u));
    v27 = *(_QWORD *)(*(_QWORD *)&v159 + 24);
    v28 = *(float **)v27;
    if (*(_QWORD *)v27
      && (v29 = *v28, LODWORD(v28) = *v28 == 1.0, *(_BYTE *)(v27 + 10))
      && (v29 != 0.0 ? (v30 = v29 == 1.0) : (v30 = 1), !v30)
      || (v31 = *(unsigned __int8 *)(v27 + v28 + 11), v29 = 0.0, v31 == 2))
    {
      v158[0].i8[0] = 1;
      v163[0] = 1;
      v32 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v27, 0x12Bu, v26, 0, v158);
      v33 = v32
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v27, 0x12Bu, v26, 1u, v163)- v32)* v29);
    }
    else
    {
      v33 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v159 + 24), 0x12Bu, v26, v31, 0);
    }
  }
  else
  {
    v149 = 0u;
    v33 = 1.0;
  }
  v157 = *(_QWORD **)(*a2 + 32);
  v153 = *(_QWORD **)(*a2 + 40);
  if (v157 == v153)
    goto LABEL_165;
  v34 = v151;
  *(float *)&v34.i32[1] = *(float *)v151.i32 * a8;
  v35 = (float32x4_t)vzip1q_s32(v34, v34);
  v35.i32[2] = v151.i32[0];
  v152 = vmulq_f32(v35, v149);
  v36 = a1 + 112;
  v37 = 96;
  if (a8 >= 1.0)
    v36 = a1 + 96;
  else
    v37 = 112;
  v148 = v36;
  v150 = v37;
  v38 = 1.0 - v33;
  while (2)
  {
    v39 = *(_QWORD *)(a1 + 24);
    v40 = *(_QWORD *)(v39 + 8);
    if (v40 == *(_QWORD *)v39)
    {
      v52 = *(_QWORD *)(v39 + 88);
      if (!v52)
      {
LABEL_166:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 48))(v52);
      v42 = *(uint64_t **)(v39 + 40);
      v53 = *(_QWORD *)(v39 + 48);
      if ((unint64_t)v42 >= v53)
      {
        v55 = *(_QWORD *)(v39 + 32);
        v56 = ((uint64_t)v42 - v55) >> 3;
        v57 = v56 + 1;
        if (!((unint64_t)(v56 + 1) >> 61))
        {
          v58 = v53 - v55;
          if (v58 >> 2 > v57)
            v57 = v58 >> 2;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 + 56) + 16))(*(_QWORD *)(v39 + 56), 8 * v59, 8);
            v50 = (uint64_t *)(v60 + 8 * v56);
            v51 = v60 + 8 * v59;
            if (v60)
              *v50 = v41;
          }
          else
          {
            v51 = 0;
            v50 = (uint64_t *)(8 * v56);
          }
          v71 = *(_QWORD *)(v39 + 32);
          v61 = *(_QWORD *)(v39 + 40);
          v72 = v61 - v71;
          if (v61 != v71)
          {
            v73 = v72 - 8;
            if ((unint64_t)(v72 - 8) < 0x38)
            {
              v65 = v50;
            }
            else
            {
              v65 = v50;
              if ((unint64_t)(v61 - (_QWORD)v50) >= 0x20)
              {
                v74 = (v73 >> 3) + 1;
                v75 = v50 - 2;
                v76 = (__int128 *)(v61 - 16);
                v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v78 = *v76;
                  *((_OWORD *)v75 - 1) = *(v76 - 1);
                  *(_OWORD *)v75 = v78;
                  v75 -= 4;
                  v76 -= 2;
                  v77 -= 4;
                }
                while (v77);
                v65 = &v50[-(v74 & 0x3FFFFFFFFFFFFFFCLL)];
                v61 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
                if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_87;
              }
            }
            do
            {
              v80 = *(_QWORD *)(v61 - 8);
              v61 -= 8;
              *--v65 = v80;
            }
            while (v61 != v71);
            goto LABEL_87;
          }
LABEL_81:
          v65 = v50;
          goto LABEL_88;
        }
LABEL_169:
        abort();
      }
    }
    else
    {
      v41 = *(_QWORD *)(v40 - 8);
      *(_QWORD *)(v39 + 8) = v40 - 8;
      v42 = *(uint64_t **)(v39 + 40);
      v43 = *(_QWORD *)(v39 + 48);
      if ((unint64_t)v42 >= v43)
      {
        v44 = *(_QWORD *)(v39 + 32);
        v45 = ((uint64_t)v42 - v44) >> 3;
        v46 = v45 + 1;
        if (!((unint64_t)(v45 + 1) >> 61))
        {
          v47 = v43 - v44;
          if (v47 >> 2 > v46)
            v46 = v47 >> 2;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 + 56) + 16))(*(_QWORD *)(v39 + 56), 8 * v48, 8);
            v50 = (uint64_t *)(v49 + 8 * v45);
            v51 = v49 + 8 * v48;
            if (v49)
              *v50 = v41;
          }
          else
          {
            v51 = 0;
            v50 = (uint64_t *)(8 * v45);
          }
          v62 = *(_QWORD *)(v39 + 32);
          v61 = *(_QWORD *)(v39 + 40);
          v63 = v61 - v62;
          if (v61 != v62)
          {
            v64 = v63 - 8;
            if ((unint64_t)(v63 - 8) < 0x38)
            {
              v65 = v50;
            }
            else
            {
              v65 = v50;
              if ((unint64_t)(v61 - (_QWORD)v50) >= 0x20)
              {
                v66 = (v64 >> 3) + 1;
                v67 = v50 - 2;
                v68 = (__int128 *)(v61 - 16);
                v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v70 = *v68;
                  *((_OWORD *)v67 - 1) = *(v68 - 1);
                  *(_OWORD *)v67 = v70;
                  v67 -= 4;
                  v68 -= 2;
                  v69 -= 4;
                }
                while (v69);
                v65 = &v50[-(v66 & 0x3FFFFFFFFFFFFFFCLL)];
                v61 -= 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
                if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_87;
              }
            }
            do
            {
              v79 = *(_QWORD *)(v61 - 8);
              v61 -= 8;
              *--v65 = v79;
            }
            while (v61 != v62);
LABEL_87:
            v61 = *(_QWORD *)(v39 + 32);
LABEL_88:
            v54 = v50 + 1;
            *(_QWORD *)(v39 + 32) = v65;
            *(_QWORD *)(v39 + 40) = v50 + 1;
            v81 = *(_QWORD *)(v39 + 48);
            *(_QWORD *)(v39 + 48) = v51;
            if (v61)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 + 56) + 40))(*(_QWORD *)(v39 + 56), v61, v81 - v61);
            goto LABEL_90;
          }
          goto LABEL_81;
        }
        goto LABEL_169;
      }
    }
    if (v42)
      *v42 = v41;
    v54 = v42 + 1;
LABEL_90:
    *(_QWORD *)(v39 + 40) = v54;
    v158[0] = (uint16x4_t)v41;
    v82 = *(_QWORD *)(v39 + 120);
    if (!v82)
      goto LABEL_166;
    (*(void (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v82 + 48))(v82, v158);
    v85 = *(_QWORD *)(v41 + 64);
    *(_QWORD *)(v85 + 24) = 0;
    v86 = *a3;
    *(_QWORD *)(v85 + 16) = *a3;
    v87 = *(_QWORD *)(v41 + 160);
    v88 = a3[1];
    if (v88)
    {
      v89 = (unint64_t *)(v88 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v91 = *(std::__shared_weak_count **)(v87 + 24);
    *(_QWORD *)(v87 + 16) = v86;
    *(_QWORD *)(v87 + 24) = v88;
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    **(_QWORD **)(v41 + 96) = *v157;
    v94 = *(_QWORD *)(a1 + v150);
    v95 = *(std::__shared_weak_count **)(v148 + 8);
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    if (v94 && **(_QWORD **)(v94 + 40) == *(_QWORD *)(v41 + 8))
    {
      v101 = *(_QWORD *)(v41 + 16);
      if (v101 && v101 != v94)
        ggl::PipelineSetup::resetData(v41);
      if (v95)
      {
        v102 = (unint64_t *)&v95->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      v98 = *(std::__shared_weak_count **)(v41 + 24);
      *(_QWORD *)(v41 + 16) = v94;
      *(_QWORD *)(v41 + 24) = v95;
      if (!v98)
        goto LABEL_118;
      v104 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v104);
      while (__stlxr(v100 - 1, v104));
    }
    else
    {
      v98 = *(std::__shared_weak_count **)(v41 + 24);
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)(v41 + 24) = 0;
      if (!v98)
        goto LABEL_118;
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
    }
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      if (v95)
        goto LABEL_119;
      goto LABEL_124;
    }
LABEL_118:
    if (v95)
    {
LABEL_119:
      v105 = (unint64_t *)&v95->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
LABEL_124:
    v107 = *(_QWORD *)(v41 + 64);
    v108 = *(_QWORD **)(v107 + 32);
    v109 = v108[1];
    v110 = v108[9];
    *(float *)v110 = a9;
    v111 = *a2;
    *(_DWORD *)(v110 + 16) = *(_DWORD *)(*a2 + 92);
    *(_DWORD *)(v110 + 20) = *(_DWORD *)(v111 + 96);
    *(_DWORD *)(v110 + 24) = *(_DWORD *)(v111 + 100);
    v83.i64[0] = *(_QWORD *)(v111 + 104);
    v83.i32[2] = *(_DWORD *)(v111 + 112);
    v84.i64[0] = *(_QWORD *)(v111 + 92);
    v84.i32[2] = *(_DWORD *)(v111 + 100);
    v112 = vmaxnmq_f32(vsubq_f32(v83, v84), (float32x4_t)0);
    *(_DWORD *)(v110 + 40) = v112.i32[2];
    *(_QWORD *)(v110 + 32) = v112.i64[0];
    if (v108[8] > v109)
      v109 = v108[8];
    v108[7] = 0;
    v108[8] = v109;
    v113 = *(_QWORD **)(v107 + 48);
    v114 = v113[1];
    v115 = (float32x4_t *)v113[9];
    *v115 = v152;
    v115[23].i32[0] = *a5;
    v115[23].i32[1] = a5[1];
    v115[23].i32[2] = a5[2];
    v115[22].i32[1] = 1065353216;
    v115[22].f32[0] = v38;
    if (v113[8] > v114)
      v114 = v113[8];
    v113[7] = 0;
    v113[8] = v114;
    v117 = (_QWORD *)v157[2];
    v116 = (_QWORD *)v157[3];
    while (v117 != v116)
    {
      v119 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 88));
      v119[3] = *(_QWORD *)(a1 + 64);
      v119[4] = v41;
      v119[8] = *v117;
      v119[6] = 0;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
      v122 = v117[1];
      v121 = v117[2];
      while (v122 != v121)
      {
        v158[0] = *(uint16x4_t *)(v122 + 16);
        v123 = *(_QWORD *)(a7 + 24);
        if (!v123)
          goto LABEL_166;
        if ((*(unsigned int (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v123 + 48))(v123, v158))
        {
          if (*(_QWORD *)(v122 + 8) != *(_QWORD *)v122)
            gm::MultiRange<unsigned long>::push_back((char **)(a1 + 280), (_OWORD *)v122);
        }
        v122 += 24;
      }
      v124 = ggl::Batcher::commit((__int128 **)(a1 + 280), 0, v120);
      v125 = *v124;
      v119[11] = *v124;
      v119[12] = (v124[1] - v125) >> 4;
      v126 = *(_QWORD **)(a4 + 80);
      v127 = *(_QWORD *)(a4 + 88);
      if ((unint64_t)v126 < v127)
      {
        if (v126)
          *v126 = v119;
        v118 = v126 + 1;
        goto LABEL_130;
      }
      v128 = *(_QWORD *)(a4 + 72);
      v129 = ((uint64_t)v126 - v128) >> 3;
      v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 61)
        abort();
      v131 = v127 - v128;
      if (v131 >> 2 > v130)
        v130 = v131 >> 2;
      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
        v132 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v132 = v130;
      if (v132)
      {
        v133 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 96) + 16))(*(_QWORD *)(a4 + 96), 8 * v132, 8);
        v134 = (_QWORD *)(v133 + 8 * v129);
        v135 = v133 + 8 * v132;
        if (v133)
          *v134 = v119;
      }
      else
      {
        v135 = 0;
        v134 = (_QWORD *)(8 * v129);
      }
      v137 = *(_QWORD *)(a4 + 72);
      v136 = *(_QWORD *)(a4 + 80);
      v138 = v136 - v137;
      if (v136 == v137)
      {
        v140 = v134;
        goto LABEL_163;
      }
      v139 = v138 - 8;
      if ((unint64_t)(v138 - 8) < 0x38)
      {
        v140 = v134;
      }
      else
      {
        v140 = v134;
        if ((unint64_t)(v136 - (_QWORD)v134) >= 0x20)
        {
          v141 = (v139 >> 3) + 1;
          v142 = v134 - 2;
          v143 = (__int128 *)(v136 - 16);
          v144 = v141 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v145 = *v143;
            *(v142 - 1) = *(v143 - 1);
            *v142 = v145;
            v142 -= 2;
            v143 -= 2;
            v144 -= 4;
          }
          while (v144);
          v140 = &v134[-(v141 & 0x3FFFFFFFFFFFFFFCLL)];
          v136 -= 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
          if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_162;
        }
      }
      do
      {
        v146 = *(_QWORD *)(v136 - 8);
        v136 -= 8;
        *--v140 = v146;
      }
      while (v136 != v137);
LABEL_162:
      v136 = *(_QWORD *)(a4 + 72);
LABEL_163:
      v118 = v134 + 1;
      *(_QWORD *)(a4 + 72) = v140;
      *(_QWORD *)(a4 + 80) = v134 + 1;
      v147 = *(_QWORD *)(a4 + 88);
      *(_QWORD *)(a4 + 88) = v135;
      if (v136)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 96) + 40))(*(_QWORD *)(a4 + 96), v136, v147 - v136);
LABEL_130:
      *(_QWORD *)(a4 + 80) = v118;
      v117 += 4;
    }
    v157 += 5;
    if (v157 != v153)
      continue;
    break;
  }
LABEL_165:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v159);
}

void sub_19FE05854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFA58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3>,BOOL ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFA58;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_3>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(a1 + 8) == *a2;
}

void std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFA10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2>,BOOL ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFA10;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_2>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(a1 + 8) != *a2;
}

void std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1>,BOOL ()(unsigned long long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CF9C8;
  return result;
}

void std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CF9C8;
}

uint64_t std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_1>,BOOL ()(unsigned long long)>::operator()()
{
  return 1;
}

void std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0>,BOOL ()(unsigned long long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CF980;
  return result;
}

void std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CF980;
}

uint64_t std::__function::__func<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0,std::allocator<md::BuildingRenderLayer::layout2DLandmarks(std::vector<md::BuildingTileDataRenderable *> const&,ggl::CommandBuffer *,md::LayoutContext const&,md::BuildingPass)::$_0>,BOOL ()(unsigned long long)>::operator()()
{
  return 1;
}

void ggl::TextureAlphaMask::MeshPipelineSetup::~MeshPipelineSetup(ggl::TextureAlphaMask::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TextureAlphaMask::MeshPipelineSetup::constantDataIsEnabled(ggl::TextureAlphaMask::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::TextureAlphaMask::MeshPipelineSetup::textureIsEnabled(ggl::TextureAlphaMask::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::TextureAlphaMask::MeshPipelineSetup::MeshPipelineSetup(ggl::TextureAlphaMask::MeshPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE396C8 = &ggl::TextureAlphaMask::pipelineDataMeshPipelineDeviceStructs(void)::ref;
    qword_1ECE396D0 = 0;
    if ((v5 & 1) == 0
    {
      ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureAlphaMask::View::reflection(void)::reflection;
      unk_1ECE39700 = ggl::TextureAlphaMask::Style::reflection(void)::reflection;
    }
    qword_1ECE396D8 = (uint64_t)&ggl::TextureAlphaMask::pipelineDataMeshPipelineConstantStructs(void)::ref;
    unk_1ECE396E0 = xmmword_19FFB35A0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::TextureAlphaMask::MeshPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B8AF0;
  return result;
}

void md::TrafficRoads::addRoadPiece(float *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  unsigned __int8 v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _OWORD *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  __int128 v57;
  _OWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  float *v70;
  unsigned __int8 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  float *v92;
  unsigned __int8 v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  __int128 v110;

  v5 = *a2;
  v110 = 0uLL;
  v7 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v6 & 1) == 0)
  {
    v7 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v108)
    {
      v109 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v109, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v8 = *((_QWORD *)v7 + 299);
  v9 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *((_QWORD *)a1 + 1);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v2 = v11 % v12;
    }
    else
    {
      v2 = v11 & (v12 - 1);
    }
    v14 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *(_QWORD *)(v15 + 8);
            if (v17 == v11)
            {
              if (*(_QWORD *)(v15 + 16) == v5)
                goto LABEL_82;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_23;
            }
            v15 = *(_QWORD *)v15;
            if (!v15)
              goto LABEL_23;
          }
        }
        do
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16 == v11)
          {
            if (*(_QWORD *)(v15 + 16) == v5)
              goto LABEL_82;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = *(_QWORD *)v15;
        }
        while (v15);
      }
    }
  }
LABEL_23:
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 56, 8);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = v11;
  *(_QWORD *)(v15 + 16) = v5;
  *(_OWORD *)(v15 + 24) = 0uLL;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = v8;
  v110 = 0uLL;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v19 = a1[12];
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v12 = *((_QWORD *)a1 + 1);
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_59;
      v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v12 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime >= v12)
      {
        v12 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v2 = v11 % v12;
          else
            v2 = v11;
        }
        else
        {
          v2 = (v12 - 1) & v11;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v107 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v107)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v107, 8 * *((_QWORD *)a1 + 1));
        v12 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    v24 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v25 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v24;
    if (v25)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v25, 8 * *((_QWORD *)a1 + 1));
    v26 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
    while (prime != v26);
    v28 = (uint64_t *)(a1 + 6);
    v27 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v27)
    {
LABEL_58:
      v12 = prime;
      goto LABEL_59;
    }
    v29 = v27[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v27 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
        {
          *v27 = *i;
          v34 = 8 * v33;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v34);
          **(_QWORD **)(*(_QWORD *)a1 + v34) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
          v27 = i;
          v31 = v33;
        }
      }
      goto LABEL_58;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
    v38 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_58;
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 != v29)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v27;
          goto LABEL_63;
        }
        *v27 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*(_QWORD *)a1 + v39);
        **(_QWORD **)(*(_QWORD *)a1 + v39) = v38;
        v38 = v27;
      }
      v40 = v29;
LABEL_63:
      v27 = v38;
      v38 = (_QWORD *)*v38;
      v29 = v40;
      if (!v38)
        goto LABEL_58;
    }
  }
LABEL_72:
  v41 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
  if (v41)
  {
    *(_QWORD *)v15 = *v41;
LABEL_80:
    *v41 = v15;
    goto LABEL_81;
  }
  *(_QWORD *)v15 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v15;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 6;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v41 = (uint64_t *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 5);
LABEL_82:
  if ((_QWORD)v110)
  {
    v43 = *((_QWORD *)&v110 + 1);
    v44 = v110;
    if (*((_QWORD *)&v110 + 1) != (_QWORD)v110)
    {
      v45 = *((_QWORD *)&v110 + 1);
      do
      {
        v47 = *(_QWORD *)(v45 - 32);
        v45 -= 32;
        v46 = v47;
        if (v47)
        {
          *(_QWORD *)(v43 - 24) = v46;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v43 - 8) + 40))(*(_QWORD *)(v43 - 8), v46, *(_QWORD *)(v43 - 16) - v46);
        }
        v43 = v45;
      }
      while (v45 != (_QWORD)v110);
      v44 = v110;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, v44, -v44);
  }
  v48 = *(_QWORD *)(v15 + 24);
  v49 = *(_QWORD **)(v15 + 32);
  v50 = ((uint64_t)v49 - v48) >> 5;
  v51 = a2[1];
  if (v50 <= v51)
  {
    v59 = v51 + 1;
    v60 = v51 + 1 - v50;
    if (v51 + 1 <= v50)
    {
      if (v51 + 1 < v50)
      {
        v82 = (_QWORD *)(v48 + 32 * v59);
        if (v49 != v82)
        {
          v83 = *(_QWORD **)(v15 + 32);
          do
          {
            v85 = *(v83 - 4);
            v83 -= 4;
            v84 = v85;
            if (v85)
            {
              *(v49 - 3) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*(v49 - 1) + 40))(*(v49 - 1), v84, *(v49 - 2) - v84);
            }
            v49 = v83;
          }
          while (v83 != v82);
        }
        *(_QWORD *)(v15 + 32) = v82;
      }
    }
    else
    {
      v61 = *(_QWORD *)(v15 + 40);
      if (v60 <= (v61 - (uint64_t)v49) >> 5)
      {
        v90 = &v49[4 * v60];
        v91 = 32 * v51 - 32 * v50 + 32;
        v92 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        do
        {
          if (v49)
          {
            *v49 = 0;
            v49[1] = 0;
            v49[2] = 0;
            if ((v93 & 1) == 0)
            {
              v92 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
              if (v94)
              {
                v95 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v95, "VectorKitLabels", 0x5ED09DD50000000FLL);
                v92 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
              }
            }
            v49[3] = *((_QWORD *)v92 + 299);
          }
          v49 += 4;
          v91 -= 32;
        }
        while (v91);
        *(_QWORD *)(v15 + 32) = v90;
      }
      else
      {
        if (v59 >> 59)
          goto LABEL_162;
        v62 = v61 - v48;
        v63 = v62 >> 4;
        if (v62 >> 4 <= v59)
          v63 = v51 + 1;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0)
          v64 = 0x7FFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 48) + 16))(*(_QWORD *)(v15 + 48), 32 * v64, 8);
        v66 = (_QWORD *)(v65 + 32 * v50);
        v67 = v65 + 32 * v59;
        v68 = 32 * v51 - 32 * v50 + 32;
        v69 = v66;
        v70 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        do
        {
          if (v69)
          {
            *v69 = 0;
            v69[1] = 0;
            v69[2] = 0;
            if ((v71 & 1) == 0)
            {
              v70 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
              if (v72)
              {
                v73 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v73, "VectorKitLabels", 0x5ED09DD50000000FLL);
                v70 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
              }
            }
            v69[3] = *((_QWORD *)v70 + 299);
          }
          v69 += 4;
          v68 -= 32;
        }
        while (v68);
        v96 = v65 + 32 * v64;
        v97 = *(_QWORD *)(v15 + 24);
        v98 = *(_QWORD *)(v15 + 32);
        if (v98 == v97)
        {
          *(_QWORD *)(v15 + 24) = v66;
          *(_QWORD *)(v15 + 32) = v67;
          v103 = *(_QWORD *)(v15 + 40);
          *(_QWORD *)(v15 + 40) = v96;
        }
        else
        {
          v99 = 0;
          do
          {
            v100 = &v66[v99 / 8];
            v101 = v98 + v99;
            *(v100 - 4) = 0;
            *(v100 - 3) = 0;
            *(v100 - 2) = 0;
            *(v100 - 1) = *(_QWORD *)(v98 + v99 - 8);
            *((_OWORD *)v100 - 2) = *(_OWORD *)(v98 + v99 - 32);
            *(v100 - 2) = *(_QWORD *)(v98 + v99 - 16);
            *(_QWORD *)(v101 - 32) = 0;
            *(_QWORD *)(v101 - 24) = 0;
            *(_QWORD *)(v101 - 16) = 0;
            v99 -= 32;
          }
          while (v98 + v99 != v97);
          v98 = *(_QWORD *)(v15 + 24);
          v102 = *(_QWORD *)(v15 + 32);
          *(_QWORD *)(v15 + 24) = &v66[v99 / 8];
          *(_QWORD *)(v15 + 32) = v67;
          v103 = *(_QWORD *)(v15 + 40);
          *(_QWORD *)(v15 + 40) = v96;
          if (v102 != v98)
          {
            v104 = v102;
            do
            {
              v106 = *(_QWORD *)(v104 - 32);
              v104 -= 32;
              v105 = v106;
              if (v106)
              {
                *(_QWORD *)(v102 - 24) = v105;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v102 - 8) + 40))(*(_QWORD *)(v102 - 8), v105, *(_QWORD *)(v102 - 16) - v105);
              }
              v102 = v104;
            }
            while (v104 != v98);
          }
        }
        if (v98)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 48) + 40))(*(_QWORD *)(v15 + 48), v98, v103 - v98);
      }
    }
  }
  v52 = (_QWORD *)(*(_QWORD *)(v15 + 24) + 32 * a2[1]);
  v54 = v52 + 1;
  v53 = (_OWORD *)v52[1];
  v56 = v52 + 2;
  v55 = v52[2];
  if ((unint64_t)v53 < v55)
  {
    if (v53)
    {
      v57 = *((_OWORD *)a2 + 1);
      *v53 = *(_OWORD *)a2;
      v53[1] = v57;
    }
    v58 = v53 + 2;
    goto LABEL_130;
  }
  v74 = ((uint64_t)v53 - *v52) >> 5;
  v75 = v74 + 1;
  if ((unint64_t)(v74 + 1) >> 59)
LABEL_162:
    abort();
  v76 = v52 + 3;
  v77 = v55 - *v52;
  if (v77 >> 4 > v75)
    v75 = v77 >> 4;
  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0)
    v75 = 0x7FFFFFFFFFFFFFFLL;
  if (v75)
  {
    v78 = 32 * v75;
    v79 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*v76 + 16))(*v76, 32 * v75, 8);
    v80 = (_OWORD *)(v79 + 32 * v74);
    v75 = v79 + v78;
    if (v79)
    {
      v81 = *((_OWORD *)a2 + 1);
      *v80 = *(_OWORD *)a2;
      v80[1] = v81;
    }
  }
  else
  {
    v80 = (_OWORD *)(32 * v74);
  }
  v58 = v80 + 2;
  v86 = *v54;
  v87 = *v52;
  if (*v54 != *v52)
  {
    do
    {
      v88 = *(_OWORD *)(v86 - 16);
      *(v80 - 2) = *(_OWORD *)(v86 - 32);
      *(v80 - 1) = v88;
      v80 -= 2;
      v86 -= 32;
    }
    while (v86 != v87);
    v86 = *v52;
  }
  *v52 = v80;
  *v54 = (uint64_t)v58;
  v89 = *v56;
  *v56 = v75;
  if (v86)
    (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v76 + 40))(*v76, v86, v89 - v86);
LABEL_130:
  *v54 = (uint64_t)v58;
}

void sub_19FE06720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a14);
  std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = *(_QWORD *)(v5 - 32);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v6, *(_QWORD *)(v3 - 16) - v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          v6 = *(_QWORD *)(v2 + 32);
          do
          {
            v8 = *(_QWORD *)(v6 - 32);
            v6 -= 32;
            v7 = v8;
            if (v8)
            {
              *(_QWORD *)(v4 - 24) = v7;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 8) + 40))(*(_QWORD *)(v4 - 8), v7, *(_QWORD *)(v4 - 16) - v7);
            }
            v4 = v6;
          }
          while (v6 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

BOOL md::PointLabelFeatureBase::containsPoint(uint64_t a1, uint64_t a2, float64x2_t *a3, double *a4, _DWORD *a5)
{
  float64x2_t v7;
  double v8;
  double v9;

  v7 = vsubq_f64(*(float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(a1 + 192)), *a3);
  v8 = vaddvq_f64(vmulq_f64(v7, v7));
  v9 = *a4 * *a4;
  if (v8 < v9)
  {
    *a4 = sqrt(v8);
    *a5 = 1;
  }
  return v8 < v9;
}

float32x2_t *md::PointLabelFeatureBase::debugDraw(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float64x2_t *v5;
  float64x2_t *v6;
  double v7;
  long double v9;
  long double v10;
  double v11;
  long double v12;
  double v13;
  __double2 v14;
  double v15;
  __double2 v16;

  v5 = (float64x2_t *)(a2 + 1304);
  v6 = (float64x2_t *)(a1 + 192);
  if (*(_BYTE *)(*(_QWORD *)(a2 + 232) + 17))
  {
    v6 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(a1 + 192));
    v7 = 0.0;
  }
  else if (*(_BYTE *)(a1 + 236))
  {
    v7 = *(double *)(a1 + 208);
  }
  else
  {
    v9 = *(double *)(a1 + 216) * 6.28318531;
    v10 = exp(*(double *)(a1 + 224) * 6.28318531 + -3.14159265);
    v11 = atan(v10) * 2.0 + -1.57079633;
    v12 = fmod(v9, 6.28318531);
    v13 = fmod(v12 + 6.28318531, 6.28318531) + -3.14159265;
    v14 = __sincos_stret(v11);
    v15 = 6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
    v16 = __sincos_stret(v13);
    v7 = v14.__sinval * 0.99330562 * v15;
    *(double *)(a1 + 192) = v15 * v14.__cosval * v16.__cosval;
    *(double *)(a1 + 200) = v15 * v14.__cosval * v16.__sinval;
    *(double *)(a1 + 208) = v7;
    *(_BYTE *)(a1 + 236) = 1;
  }
  _Q1 = *v6;
  _D3 = *(_QWORD *)(a2 + 1360);
  __asm { FMLA            D4, D3, V1.D[1] }
  a3[1] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v5[6], *v5, v6->f64[0]), v5[2], *v6, 1), v5[4], v7), 1.0 / (_D4 + *(double *)(a2 + 1392) * v7)));
  return ggl::DebugConsole::drawSymbol(a3, 3);
}

void md::PointLabelFeatureBase::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unsigned __int8 v6;
  const gss::FeatureAttributeSet *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = a2;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v24 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)a1 + 568))(a1, &v21, *(_QWORD *)(a3 + 336) + 184);
  v8 = v21;
  v9 = v22;
  if (v21 != v22)
  {
    do
    {
      v10 = (void *)MEMORY[0x1E0CB3940];
      md::HighlightHelper::debugAttributesToString((md::HighlightHelper *)(*v8 + 240), v7);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "stringWithFormat:", CFSTR("ext:{%@}"), v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v12);

      md::HighlightHelper::debugClientAttributesToString(*v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%@}"), v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v14);

      }
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v21;
  }
  if (v8)
  {
    v15 = v22;
    v16 = v8;
    if (v22 != v8)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*(v15 - 1);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t *))v17->__on_zero_shared)(v17, v16);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 2;
      }
      while (v15 != v8);
      v16 = v21;
    }
    v22 = v8;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v24 + 40))(v24, v16, v23 - (_QWORD)v16);
  }

}

void sub_19FE06CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

unint64_t md::PointLabelFeatureBase::debugPopulateStyleAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 v6;
  unint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  char *v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  char v61;

  v55 = 0;
  v56 = 0;
  v57 = 0;
  if ((v6 & 1) == 0)
  {
    v51 = a3;
    a3 = v51;
    if (v52)
    {
      v53 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a3 = v51;
    }
  }
  v58 = mdm::Allocator::instance(void)::alloc;
  result = (*(uint64_t (**)(uint64_t, _QWORD **, uint64_t))(*(_QWORD *)a1 + 568))(a1, &v55, *(_QWORD *)(a3 + 336) + 184);
  v8 = v55;
  v54 = v56;
  if (v55 != v56)
  {
    v9 = (_QWORD *)(a2 + 32);
    do
    {
      v10 = *v8;
      if (*v8)
      {
        v11 = *(unsigned int **)(v10 + 240);
        v12 = *(unsigned int **)(v10 + 248);
        v13 = (char *)((char *)v12 - (char *)v11);
        v14 = ((char *)v12 - (char *)v11) >> 3;
        if (v12 != v11)
        {
          v15 = *(unsigned int **)(v10 + 240);
          do
          {
            v16 = ((v14 << 6) - 0x61C8864680B583EBLL + (v14 >> 2) + *v15) ^ v14;
            v14 = (*((unsigned __int16 *)v15 + 2) - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
            v15 += 2;
          }
          while (v15 != v12);
        }
        v17 = *(_QWORD *)(a2 + 8);
        if (v17)
        {
          v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
          v18.i16[0] = vaddlv_u8(v18);
          if (v18.u32[0] > 1uLL)
          {
            v3 = v14;
            if (v14 >= v17)
              v3 = v14 % v17;
          }
          else
          {
            v3 = (v17 - 1) & v14;
          }
          v19 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3);
          if (v19)
          {
            v20 = (_QWORD *)*v19;
            if (v20)
            {
              if (v18.u32[0] < 2uLL)
              {
                while (1)
                {
                  v26 = v20[1];
                  if (v26 == v14)
                  {
                    v28 = v20[2];
                    v27 = v20[3];
                    if ((char *)(v27 - v28) == v13)
                    {
                      if (v28 == v27)
                        goto LABEL_6;
                      v29 = *(_QWORD *)(v10 + 240);
                      while (1)
                      {
                        result = *(unsigned __int16 *)(v29 + 4);
                        if (*(_DWORD *)v28 != *(_DWORD *)v29 || *(unsigned __int16 *)(v28 + 4) != (_DWORD)result)
                          break;
                        v28 += 8;
                        v29 += 8;
                        if (v28 == v27)
                          goto LABEL_6;
                      }
                    }
                  }
                  else if ((v26 & (v17 - 1)) != v3)
                  {
                    goto LABEL_48;
                  }
                  v20 = (_QWORD *)*v20;
                  if (!v20)
                    goto LABEL_48;
                }
              }
              do
              {
                v21 = v20[1];
                if (v21 == v14)
                {
                  v23 = v20[2];
                  v22 = v20[3];
                  if ((char *)(v22 - v23) == v13)
                  {
                    if (v23 == v22)
                      goto LABEL_6;
                    v24 = *(_QWORD *)(v10 + 240);
                    while (*(_DWORD *)v23 == *(_DWORD *)v24
                         && *(unsigned __int16 *)(v23 + 4) == *(unsigned __int16 *)(v24 + 4))
                    {
                      v23 += 8;
                      v24 += 8;
                      if (v23 == v22)
                        goto LABEL_6;
                    }
                  }
                }
                else
                {
                  if (v21 >= v17)
                    v21 %= v17;
                  if (v21 != v3)
                    break;
                }
                v20 = (_QWORD *)*v20;
              }
              while (v20);
            }
          }
        }
LABEL_48:
        v31 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 16))(*v9, 48, 8);
        v32 = v9;
        v33 = v31;
        v59 = v31;
        v60 = v32;
        v61 = 0;
        *v31 = 0;
        v31[1] = v14;
        v31[2] = 0;
        v34 = v31 + 2;
        v31[3] = 0;
        v31[4] = 0;
        result = gss::Allocator::instance((gss::Allocator *)v31);
        v33[5] = result;
        if (v34 != (uint64_t *)(v10 + 240))
          result = std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v34, *(_QWORD *)(v10 + 240), *(_QWORD **)(v10 + 248), (uint64_t)(*(_QWORD *)(v10 + 248) - *(_QWORD *)(v10 + 240)) >> 3);
        v61 = 1;
        v35 = (float)(unint64_t)(*(_QWORD *)(a2 + 40) + 1);
        v36 = *(float *)(a2 + 48);
        if (!v17 || (float)(v36 * (float)v17) < v35)
        {
          v37 = (v17 & (v17 - 1)) != 0;
          if (v17 < 3)
            v37 = 1;
          v38 = v37 | (2 * v17);
          v39 = vcvtps_u32_f32(v35 / v36);
          if (v38 <= v39)
            v40 = v39;
          else
            v40 = v38;
          if (v40 == 1)
          {
            v40 = 2;
          }
          else if ((v40 & (v40 - 1)) != 0)
          {
            result = std::__next_prime(v40);
            v40 = result;
          }
          v41 = *(int8x8_t *)(a2 + 8);
          if (v40 > *(_QWORD *)&v41)
            goto LABEL_62;
          if (v40 < *(_QWORD *)&v41)
          {
            result = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 40) / *(float *)(a2 + 48));
            if (*(_QWORD *)&v41 < 3uLL
              || (v42 = (uint8x8_t)vcnt_s8(v41), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
            {
              result = std::__next_prime(result);
            }
            else
            {
              v43 = 1 << -(char)__clz(result - 1);
              if (result >= 2)
                result = v43;
            }
            if (v40 <= result)
              v40 = result;
            if (v40 < *(_QWORD *)&v41)
LABEL_62:
              result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a2, v40);
          }
          v17 = *(_QWORD *)(a2 + 8);
          if ((v17 & (v17 - 1)) != 0)
          {
            if (v14 >= v17)
              v3 = v14 % v17;
            else
              v3 = v14;
          }
          else
          {
            v3 = (v17 - 1) & v14;
          }
        }
        v44 = *(uint64_t **)(*(_QWORD *)a2 + 8 * v3);
        v9 = (_QWORD *)(a2 + 32);
        if (v44)
        {
          *v59 = *v44;
          *v44 = (uint64_t)v59;
        }
        else
        {
          *v59 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v59;
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = a2 + 24;
          if (*v59)
          {
            v45 = *(_QWORD *)(*v59 + 8);
            if ((v17 & (v17 - 1)) != 0)
            {
              if (v45 >= v17)
                v45 %= v17;
            }
            else
            {
              v45 &= v17 - 1;
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v45) = v59;
          }
        }
        ++*(_QWORD *)(a2 + 40);
      }
LABEL_6:
      v8 += 2;
    }
    while (v8 != v54);
    v8 = v55;
  }
  if (v8)
  {
    v46 = v56;
    v47 = v8;
    if (v56 != v8)
    {
      do
      {
        v48 = (std::__shared_weak_count *)*(v46 - 1);
        if (v48)
        {
          p_shared_owners = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(p_shared_owners);
          while (__stlxr(v50 - 1, p_shared_owners));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *, _QWORD *))v48->__on_zero_shared)(v48, v47);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v46 -= 2;
      }
      while (v46 != v8);
      v47 = v55;
    }
    v56 = v8;
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v58 + 40))(v58, v47, v57 - (_QWORD)v47);
  }
  return result;
}

void sub_19FE0725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeatureBase::PointLabelFeatureBase(uint64_t result, uint64_t a2)
{
  __int128 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  double v5;
  float v6;
  int v7;
  int v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  int v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  malloc_zone_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)result = off_1E428CC00;
  *(_QWORD *)(result + 8) = 850045863;
  v2 = 0uLL;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 112) = 0;
  if ((v3 & 1) == 0)
  {
    v18 = a2;
    v20 = result;
    v2 = 0uLL;
    v8 = v7;
    a2 = v18;
    result = v20;
    if (v8)
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v9 + 24) = "VectorKitLabels";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "VectorKitLabels";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v9;
      a2 = v18;
      result = v20;
      v2 = 0uLL;
    }
  }
  *(_QWORD *)(result + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 128) = 0x100000000;
  *(_QWORD *)(result + 136) = 0;
  *(_DWORD *)(result + 144) = 0;
  *(_OWORD *)(result + 152) = v2;
  *(_OWORD *)(result + 168) = v2;
  if ((v4 & 1) == 0)
  {
    v19 = a2;
    v21 = result;
    a2 = v19;
    result = v21;
    if (v13)
    {
      v14 = operator new();
      *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v14 + 24) = "VectorKitLabels";
      *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v14 = &off_1E42B5668;
      *(_QWORD *)(v14 + 8) = "VectorKitLabels";
      *(_OWORD *)(v14 + 72) = 0u;
      *(_OWORD *)(v14 + 88) = 0u;
      *(_OWORD *)(v14 + 104) = 0u;
      *(_OWORD *)(v14 + 120) = 0u;
      *(_OWORD *)(v14 + 136) = 0u;
      *(_OWORD *)(v14 + 152) = 0u;
      *(_OWORD *)(v14 + 168) = 0u;
      *(_OWORD *)(v14 + 184) = 0u;
      *(_OWORD *)(v14 + 200) = 0u;
      *(_OWORD *)(v14 + 216) = 0u;
      *(_OWORD *)(v14 + 232) = 0u;
      *(_QWORD *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 56) = 0u;
      v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
      if ((_DWORD)v15)
        geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
      v17 = malloc_create_zone(0, 0);
      *(_QWORD *)(v14 + 48) = v17;
      malloc_set_zone_name(v17, "VectorKitLabels");
      *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v14;
      a2 = v19;
      result = v21;
    }
  }
  *(_QWORD *)result = off_1E429B6C0;
  *(_QWORD *)(result + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_OWORD *)(result + 216) = *(_OWORD *)a2;
  v5 = *(double *)(a2 + 16);
  v6 = v5;
  if (v5 == 1.79769313e308)
    v6 = 3.4028e38;
  *(float *)(result + 232) = v6;
  *(_WORD *)(result + 236) = 256;
  *(_BYTE *)(result + 238) = 1;
  *(_WORD *)(result + 240) = 0;
  *(_BYTE *)(result + 242) = v6 != 3.4028e38;
  *(_WORD *)(result + 243) = -256;
  return result;
}

uint64_t md::PointLabelFeatureBase::PointLabelFeatureBase(uint64_t this, const md::LabelPoint *a2)
{
  __int128 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  __int128 v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  int v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  malloc_zone_t *v17;
  const md::LabelPoint *v18;
  const md::LabelPoint *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = off_1E428CC00;
  *(_QWORD *)(this + 8) = 850045863;
  v2 = 0uLL;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_QWORD *)(this + 112) = 0;
  if ((v3 & 1) == 0)
  {
    v18 = a2;
    v20 = this;
    v2 = 0uLL;
    v8 = v7;
    a2 = v18;
    this = v20;
    if (v8)
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v9 + 24) = "VectorKitLabels";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "VectorKitLabels";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v9;
      a2 = v18;
      this = v20;
      v2 = 0uLL;
    }
  }
  *(_QWORD *)(this + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 128) = 0x100000000;
  *(_QWORD *)(this + 136) = 0;
  *(_DWORD *)(this + 144) = 0;
  *(_OWORD *)(this + 152) = v2;
  *(_OWORD *)(this + 168) = v2;
  if ((v4 & 1) == 0)
  {
    v19 = a2;
    v21 = this;
    a2 = v19;
    this = v21;
    if (v13)
    {
      v14 = operator new();
      *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v14 + 24) = "VectorKitLabels";
      *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v14 = &off_1E42B5668;
      *(_QWORD *)(v14 + 8) = "VectorKitLabels";
      *(_OWORD *)(v14 + 72) = 0u;
      *(_OWORD *)(v14 + 88) = 0u;
      *(_OWORD *)(v14 + 104) = 0u;
      *(_OWORD *)(v14 + 120) = 0u;
      *(_OWORD *)(v14 + 136) = 0u;
      *(_OWORD *)(v14 + 152) = 0u;
      *(_OWORD *)(v14 + 168) = 0u;
      *(_OWORD *)(v14 + 184) = 0u;
      *(_OWORD *)(v14 + 200) = 0u;
      *(_OWORD *)(v14 + 216) = 0u;
      *(_OWORD *)(v14 + 232) = 0u;
      *(_QWORD *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 56) = 0u;
      v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
      if ((_DWORD)v15)
        geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
      v17 = malloc_create_zone(0, 0);
      *(_QWORD *)(v14 + 48) = v17;
      malloc_set_zone_name(v17, "VectorKitLabels");
      *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v14;
      a2 = v19;
      this = v21;
    }
  }
  *(_QWORD *)(this + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)this = off_1E429B6C0;
  v5 = *(_OWORD *)a2;
  *(_QWORD *)(this + 208) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(this + 192) = v5;
  *(_OWORD *)(this + 216) = *(_OWORD *)((char *)a2 + 24);
  v6 = *(_DWORD *)((char *)a2 + 43);
  *(_DWORD *)(this + 232) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(this + 235) = v6;
  *(_WORD *)(this + 240) = 0;
  *(_BYTE *)(this + 242) = *((float *)a2 + 10) != 3.4028e38;
  *(_WORD *)(this + 243) = -256;
  return this;
}

md::BalloonLabelPart *md::PointLabelFeatureBase::newBalloonWithDotPart(md::PointLabelFeatureBase *this, const md::PartCreationContext *a2)
{
  md::BalloonLabelPart *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  md::IconLabelPart *v5;
  __n128 v6;
  unsigned __int8 v7;
  md::IconLabelPart *v8;
  __n128 v9;
  unsigned __int8 v10;
  md::IconLabelPart *v11;
  __n128 v12;
  unsigned __int8 v13;
  md::IconLabelPart *v14;
  md::LabelManager *v15;
  md::Label *v16;
  md::LabelStyle *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;

  v44 = (uint64_t *)this;
  md::PointLabelFeatureBase::newBalloonWithDotPart(md::PartCreationContext const&)::$_0::operator()(&v42, &v44, 1);
  md::PointLabelFeatureBase::newBalloonWithDotPart(md::PartCreationContext const&)::$_0::operator()(&v40, &v44, 2);
  md::PointLabelFeatureBase::newBalloonWithDotPart(md::PartCreationContext const&)::$_0::operator()(&v38, &v44, 3);
  md::PointLabelFeatureBase::newBalloonWithDotPart(md::PartCreationContext const&)::$_0::operator()(&v36, &v44, 5);
  v2 = 0;
  if (v42 && v40 && v38 && v36)
  {
    {
      v31 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v31, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v2 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 640, 8);
    {
      v32 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v5 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v6.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v5, &v42);
    {
      v33 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v8 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 768, 8, v6);
    v9.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v8, &v40);
    {
      v34 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v11 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 768, 8, v9);
    v12.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v11, &v38);
    {
      v35 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v14 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 768, 8, v12);
    md::IconLabelPart::IconLabelPart((uint64_t)v14, &v36);
    md::BalloonLabelPart::BalloonLabelPart(v2, v5, v8, v11, v14, v15, v16, v17);
  }
  v18 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v39;
  if (v39)
  {
    v22 = (unint64_t *)&v39->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v41;
  if (v41)
  {
    v25 = (unint64_t *)&v41->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v43;
  if (v43)
  {
    v28 = (unint64_t *)&v43->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v2;
}

void sub_19FE07D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

void md::PointLabelFeatureBase::newBalloonWithDotPart(md::PartCreationContext const&)::$_0::operator()(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  md::LabelStyle *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  md::LabelImageKey *v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  md::LabelImageKey *v28[2];
  int v29;
  char v30;
  uint64_t v31;
  md::LabelImageKey *v32;
  std::string v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = **a2;
  v8 = (*a2)[1];
  v10 = (md::LabelStyle *)(*a2)[2];
  v9 = (uint64_t *)(*a2)[3];
  v11 = (char *)(*a2)[9];
  LOBYTE(v29) = 0;
  v30 = 0;
  if (*((_BYTE *)v6 + 84))
  {
    v29 = *((_DWORD *)v6 + 20);
    v30 = 1;
  }
  if (*((char *)v6 + 127) < 0)
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v6[13], v6[14]);
  else
    v33 = *(std::string *)(v6 + 13);
  v12 = v34;
  v13 = v6[19];
  if (!v13)
    goto LABEL_9;
  if ((uint64_t *)v13 != v6 + 16)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
LABEL_9:
    v35 = (_BYTE *)v13;
    goto LABEL_11;
  }
  v35 = v34;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 24))(v13, v34);
LABEL_11:
  md::LabelStyle::pointIconImageKey(&v31, v10, v7, v8, v9, v11, (uint64_t)&v29, 0, (uint64_t)(v6 + 4), 0, 255, 0, (uint64_t)&v33);
  if (v35 == v34)
  {
    v14 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_16;
    v14 = 5;
    v12 = v35;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v14))(v12);
LABEL_16:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v15 = (md::LabelImageKey *)v31;
  *(_BYTE *)(v31 + 117) = a3;
  v16 = (unsigned __int8 *)(*a2)[1];
  if (!v16[1270])
  {
    v17 = atomic_load(v16 + 1240);
    if ((v17 & 1) != 0)
    {
      v15 = (md::LabelImageKey *)v31;
      if (v16[1245])
      {
        v18 = 7;
        if (*(_DWORD *)(v31 + 60) == 47)
          v18 = 15;
        *(_QWORD *)(v31 + 172) = v18;
        *((_BYTE *)v15 + 168) = 8;
        *((_BYTE *)v15 + 197) = 1;
      }
    }
    else
    {
      v15 = (md::LabelImageKey *)v31;
    }
  }
  v19 = *(_QWORD *)(**a2 + 264);
  v20 = (std::__shared_weak_count *)v32;
  v28[0] = v15;
  v28[1] = v32;
  if (v32)
  {
    v21 = (unint64_t *)((char *)v32 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  md::LabelImageLoader::loadImage(a1, v19, v28);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v26 = (unint64_t *)((char *)v32 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19FE08010(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FE0801C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19FE08038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FE08054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void md::PointLabelFeatureBase::newRingIconPart(md::PartCreationContext const&)::$_0::operator()(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  md::LabelStyle *v9;
  uint64_t *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  md::LabelImageKey *v14;
  md::LabelImageKey *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  md::LabelImageKey *v24[2];
  int v25;
  char v26;
  md::LabelImageKey *v27;
  unint64_t *v28;
  void *__p[2];
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = **a2;
  v8 = (*a2)[1];
  v9 = (md::LabelStyle *)(*a2)[2];
  v10 = (uint64_t *)v6[3];
  v11 = (char *)v6[9];
  LOBYTE(v25) = 0;
  v26 = 0;
  if (*((_BYTE *)v6 + 84))
  {
    v25 = *((_DWORD *)v6 + 20);
    v26 = 1;
  }
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v32 = 0;
  md::LabelStyle::pointIconImageKey(&v27, v9, v7, v8, v10, v11, (uint64_t)&v25, 0, (uint64_t)(v6 + 4), 0, 255, 0, (uint64_t)__p);
  v12 = v32;
  if (v32 == v31)
  {
    v13 = 4;
    v12 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_8;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_8:
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  v14 = v27;
  v15 = (md::LabelImageKey *)v28;
  *((_BYTE *)v27 + 117) = a3;
  v16 = *(_QWORD *)(**a2 + 264);
  v24[0] = v14;
  v24[1] = v15;
  if (v15)
  {
    v17 = (unint64_t *)((char *)v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  md::LabelImageLoader::loadImage(a1, v16, v24);
  if (v15)
  {
    v19 = (unint64_t *)((char *)v15 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(md::LabelImageKey *))(*(_QWORD *)v15 + 16))(v15);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
    }
  }
  v21 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v22 = v28 + 1;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_19FE08218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FE08234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

uint64_t ggl::FoggedSpecularLandmark::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::FoggedSpecularLandmarkShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DD8 = 1;
          }
          ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57F408 = &ggl::FoggedSpecularLandmark::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1EE57F410 = 0;
          if ((v95 & 1) == 0
          {
            ggl::FoggedSpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE57F440 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57F448 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57F450 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57F458 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57F460 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57F468 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57F418 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1EE57F420 = xmmword_19FFB3710;
        }
      }
      ggl::FoggedSpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedSpecularLandmarkShader::typedReflection(v90);
      qword_1ECE31B20 = (uint64_t)&ggl::FoggedSpecularLandmarkShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57F5D0 = 0;
        qword_1EE57F5D8 = (uint64_t)"";
        dword_1EE57F5E0 = 0;
        qword_1EE57F5E8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1EE57F5F0 = 3;
      }
      qword_1ECE31B28 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31B30 = 1;
      qword_1ECE31B38 = 0;
      unk_1ECE31B40 = 1;
      qword_1ECE31B48 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31B50 = 0;
      if ((v93 & 1) == 0
      {
        ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57F480 = 0;
        qword_1EE57F488 = (uint64_t)"skyfog";
        dword_1EE57F490 = 3;
        qword_1EE57F498 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57F4A0 = xmmword_19FFB3720;
        qword_1EE57F4B0 = 1;
        unk_1EE57F4B8 = "view";
        dword_1EE57F4C0 = 3;
        qword_1EE57F4C8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1EE57F4D0 = vdupq_n_s64(2uLL);
        qword_1EE57F4E0 = 2;
        unk_1EE57F4E8 = "scale";
        dword_1EE57F4F0 = 3;
        qword_1EE57F4F8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57F500 = xmmword_19FFB3730;
        qword_1EE57F510 = 3;
        unk_1EE57F518 = "style";
        dword_1EE57F520 = 3;
        qword_1EE57F528 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57F530 = xmmword_19FFB3740;
        qword_1EE57F540 = 4;
        unk_1EE57F548 = "gradient";
        dword_1EE57F550 = 3;
        qword_1EE57F558 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57F560 = xmmword_19FFB3670;
        qword_1EE57F570 = 5;
        unk_1EE57F578 = "lightConfig";
        dword_1EE57F580 = 3;
        qword_1EE57F588 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57F590 = xmmword_19FFB3750;
        qword_1EE57F5A0 = 6;
        unk_1EE57F5A8 = "fade";
        dword_1EE57F5B0 = 3;
        qword_1EE57F5B8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57F5C0 = 2;
      }
      qword_1ECE31B58 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1ECE31B60 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FoggedSpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BAFE0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::~LandmarkPipelineSetup(ggl::FoggedSpecularLandmark::LandmarkPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::constantDataIsEnabled(ggl::FoggedSpecularLandmark::LandmarkPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::textureIsEnabled(ggl::FoggedSpecularLandmark::LandmarkPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

_QWORD *md::DaVinciGroundRenderLayer::prune(uint64_t a1)
{
  return md::DaVinciGroundRenderResources::prunePools((_QWORD *)(a1 + 568));
}

uint64_t md::DaVinciGroundRenderLayer::renderablesInView(md::DaVinciGroundRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(md::DaVinciGroundRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this
                                                                                                  + 200))(this, a2))return (uint64_t)this + 272;
  result = (uint64_t)this + 3640;
  *((_QWORD *)this + 456) = *((_QWORD *)this + 455);
  return result;
}

uint64_t md::DaVinciGroundRenderLayer::useNewRenderableCollector(md::DaVinciGroundRenderLayer *this)
{
  uint64_t result;

  result = GEOConfigGetBOOL();
  if ((_DWORD)result)
    return *((_BYTE *)this + 3632) != 0;
  return result;
}

void md::DaVinciGroundRenderLayer::createMeshLayoutContext(md::DaVinciGroundRenderLayer *this, const md::LayoutContext *a2, md::LayoutContext *a3)
{
  uint64_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  float v39;
  __float2 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  double v45;
  double v46;
  void *v47;
  char v48;
  char v49;
  float v50;
  float v51;
  void *v52;
  float v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  char v58;
  int v59;
  uint64_t v60;
  int v61;
  float v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  const md::LayoutContext *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  md::SharedResource *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  double v77;
  double v78;
  int v79;
  int v80;
  float v81;
  float v82;
  float v83;
  char v84;
  double v85;
  int v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  char v93;
  char v94;
  double v95;
  float v96;
  char v97;
  BOOL v98;
  float v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;
  int v109;
  _BOOL4 v110;
  int v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  md::SharedResource *v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)*((_QWORD *)a3 + 1);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_94;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v7 <= 0x41E8D6E445F4145uLL)
      v9 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x41E8D6E445F4145;
  }
  v13 = *v6;
  v14 = *(_QWORD **)(v13 + 8 * v9);
  if (!v14)
    goto LABEL_25;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_25;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x41E8D6E445F4145)
      {
        if (v15[2] == 0x41E8D6E445F4145)
          goto LABEL_23;
      }
      else if ((v17 & (*(_QWORD *)&v7 - 1)) != v9)
      {
        goto LABEL_25;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x41E8D6E445F4145)
      break;
    if (v16 >= *(_QWORD *)&v7)
      v16 %= *(_QWORD *)&v7;
    if (v16 != v9)
      goto LABEL_25;
LABEL_12:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_25;
  }
  if (v15[2] != 0x41E8D6E445F4145)
    goto LABEL_12;
LABEL_23:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x41E8D6E445F4145)
  {
    v11 = *(_QWORD *)(v18 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v11 = 0;
LABEL_26:
  if (v8.u32[0] > 1uLL)
  {
    v19 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v7 <= 0x8BD499FBD96FBB9ELL)
      v19 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v7;
  }
  else
  {
    v19 = (*(_QWORD *)&v7 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v20 = *(_QWORD **)(v13 + 8 * v19);
  if (!v20)
    goto LABEL_48;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_48;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x8BD499FBD96FBB9ELL)
      {
        if (v21[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v23 & (*(_QWORD *)&v7 - 1)) != v19)
      {
        goto LABEL_48;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x8BD499FBD96FBB9ELL)
    {
      if (v22 >= *(_QWORD *)&v7)
        v22 %= *(_QWORD *)&v7;
      if (v22 != v19)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v21[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v12 = *(_QWORD *)(v24 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v12 = 0;
LABEL_49:
  if (v8.u32[0] > 1uLL)
  {
    v25 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v7 <= 0x1AF456233693CD46uLL)
      v25 = 0x1AF456233693CD46uLL % *(_QWORD *)&v7;
  }
  else
  {
    v25 = (*(_QWORD *)&v7 - 1) & 0x1AF456233693CD46;
  }
  v26 = *(_QWORD **)(v13 + 8 * v25);
  if (!v26)
    goto LABEL_71;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_71;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v27[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v29 & (*(_QWORD *)&v7 - 1)) != v25)
      {
        goto LABEL_71;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v28 = v27[1];
    if (v28 != 0x1AF456233693CD46)
    {
      if (v28 >= *(_QWORD *)&v7)
        v28 %= *(_QWORD *)&v7;
      if (v28 != v25)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v27[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) == 0x1AF456233693CD46)
  {
    v10 = *(_QWORD *)(v30 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v10 = 0;
LABEL_72:
  if (v8.u32[0] > 1uLL)
  {
    v31 = 0x7C7EC6C7C111B0D0;
    if (*(_QWORD *)&v7 <= 0x7C7EC6C7C111B0D0uLL)
      v31 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v7;
  }
  else
  {
    v31 = (*(_QWORD *)&v7 - 1) & 0x7C7EC6C7C111B0D0;
  }
  v32 = *(_QWORD **)(v13 + 8 * v31);
  if (!v32)
    goto LABEL_94;
  v33 = (_QWORD *)*v32;
  if (!v33)
    goto LABEL_94;
  if (v8.u32[0] < 2uLL)
  {
    v34 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v36 = v33[1];
      if (v36 == 0x7C7EC6C7C111B0D0)
      {
        if (v33[2] == 0x7C7EC6C7C111B0D0)
          goto LABEL_92;
      }
      else if ((v36 & v34) != v31)
      {
        goto LABEL_94;
      }
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v35 = v33[1];
    if (v35 == 0x7C7EC6C7C111B0D0)
      break;
    if (v35 >= *(_QWORD *)&v7)
      v35 %= *(_QWORD *)&v7;
    if (v35 != v31)
      goto LABEL_94;
LABEL_81:
    v33 = (_QWORD *)*v33;
    if (!v33)
      goto LABEL_94;
  }
  if (v33[2] != 0x7C7EC6C7C111B0D0)
    goto LABEL_81;
LABEL_92:
  v37 = v33[5];
  if (*(_QWORD *)(v37 + 8) != 0x7C7EC6C7C111B0D0)
  {
LABEL_94:
    v38 = 0;
    goto LABEL_95;
  }
  v38 = *(__int128 **)(v37 + 32);
LABEL_95:
  v39 = *(double *)(v11 + 80);
  v40 = __sincosf_stret(v39);
  v42 = *(_QWORD *)(v11 + 128);
  v41 = *(_QWORD *)(v11 + 136);
  v43 = *(_QWORD *)(v11 + 144);
  v108 = *(_QWORD *)(v11 + 152);
  v44 = *(id *)(*((_QWORD *)a2 + 5) + 104);
  objc_msgSend(v44, "contentScale");
  v46 = v45;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend(v47, "daVinciWireframeEnabled");
  v49 = objc_msgSend(v47, "daVinciRenderLineGeometry");
  v109 = *(unsigned __int8 *)(v11 + 227);
  if (*(_BYTE *)(v11 + 227) && objc_msgSend(v47, "daVinciSSAOOcclusionOnly"))
    v107 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v107 = 0;
  if (objc_msgSend(v47, "daVinciEnablePBR"))
    v106 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v106 = 0;
  if (objc_msgSend(v47, "daVinciGlobeLighting"))
    v111 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v111 = 0;
  if (objc_msgSend(v47, "daVinciLightingDebugAlbedoOnly"))
    v105 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v105 = 0;
  if (objc_msgSend(v47, "daVinciLightingDebugLightsOnly"))
    v104 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v104 = 0;
  if (objc_msgSend(v47, "daVinciLightingDebugShowOverexposure"))
    v103 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v103 = 0;
  if (objc_msgSend(v47, "daVinciLightingDebugShowNormals"))
    v102 = objc_msgSend(v47, "daVinciAdvancedLightingEnabled");
  else
    v102 = 0;
  v101 = v48;
  v100 = objc_msgSend(v47, "daVinciRenderingDebugShowUVs");
  v50 = *(float *)(v10 + 3076);
  v51 = *(float *)(v10 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "daVinciGlobeSplinedMaxZoom");
  v110 = fmaxf(v51 + v50, 1.0) <= v53 && *(unsigned __int8 *)(v10 + 3776) - 1 < 3;

  v99 = *(float *)(v10 + 3080);
  v54 = *(_DWORD *)(v11 + 192);
  v96 = *(float *)(v10 + 3076);
  if (objc_msgSend(v47, "daVinciAdvancedLightingEnabled"))
    v55 = *(_BYTE *)(v11 + 225) != 0;
  else
    v55 = 0;
  v56 = *(_QWORD *)(v11 + 196);
  v97 = *(_BYTE *)(v11 + 226);
  v98 = v55;
  if (*(_BYTE *)(v11 + 224))
  {
    v57 = objc_msgSend(v47, "enableDOF");
    if (v109)
      v58 = 1;
    else
      v58 = v57;
    v94 = v58;
  }
  else
  {
    v94 = 0;
  }
  v95 = *(double *)(v10 + 3040);
  v59 = objc_msgSend(v47, "drawDaVinciHUD");
  v93 = v49;
  if (v59)
  {
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
  }
  v92 = v12;
  v91 = *(_DWORD *)(v12 + 8);
  v60 = *(_QWORD *)(*((_QWORD *)a2 + 391) + 32);
  v61 = objc_msgSend(v47, "lightingEnableAmbient");
  v62 = v46;
  if (*(_BYTE *)(v11 + 96))
    v63 = v61;
  else
    v63 = 0;
  if (v63 == 1)
  {
    v64 = *((_QWORD *)a2 + 391);
    v65 = (std::__shared_weak_count *)*((_QWORD *)a2 + 257);
    v112 = *((_QWORD *)a2 + 256);
    v113 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(p_shared_owners);
      while (__stxr(v67 + 1, p_shared_owners));
    }
    v68 = a2;
    md::TextureManager::cubeTexture(&v114, v64, v11 + 104, &v112, v62);
    v69 = v113;
    if (!v113)
      goto LABEL_142;
    v70 = (unint64_t *)&v113->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      v72 = v114;
      if (v114)
      {
LABEL_143:
        md::LayoutContext::frameState(a3);
        md::SharedResource::addFrameRef(v72, *(_QWORD *)(v73 + 624));
        v60 = *((_QWORD *)v72 + 4);
      }
    }
    else
    {
LABEL_142:
      v72 = v114;
      if (v114)
        goto LABEL_143;
    }
    v74 = v115;
    if (v115)
    {
      v75 = (unint64_t *)&v115->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    a2 = v68;
  }
  v89 = v56;
  v90 = v54;
  if ((v110 & v111) == 1)
  {
    v42 = *(_QWORD *)(v11 + 160);
    v41 = *(_QWORD *)(v11 + 168);
    v43 = *(_QWORD *)(v11 + 176);
    v108 = *(_QWORD *)(v11 + 184);
  }
  v87 = *v38;
  v88 = v38[1];
  v77 = *(double *)(v10 + 496);
  v78 = *(double *)(v10 + 504);
  objc_msgSend(v47, "daVinciHorizonGlowSharpness", *(_QWORD *)(v10 + 512));
  v86 = v79;
  objc_msgSend(v47, "daVinciHorizonGlowStrength");
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 35) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_BYTE *)this + 288) = 1;
  *((float *)this + 5) = fmaxf(v99 + v96, 1.0);
  *((float *)this + 6) = v62;
  *(_BYTE *)this = v109;
  *((_BYTE *)this + 8) = v107;
  *((_DWORD *)this + 7) = LODWORD(v40.__cosval);
  *((_DWORD *)this + 8) = LODWORD(v40.__sinval);
  *((_QWORD *)this + 10) = v42;
  *((_QWORD *)this + 11) = v41;
  *((_QWORD *)this + 12) = v43;
  *((_QWORD *)this + 13) = v108;
  *((_QWORD *)this + 14) = *(_QWORD *)(v11 + 160);
  *((_QWORD *)this + 15) = *(_QWORD *)(v11 + 168);
  *((_QWORD *)this + 16) = *(_QWORD *)(v11 + 176);
  *((_QWORD *)this + 17) = *(_QWORD *)(v11 + 184);
  *(int32x2_t *)((char *)this + 36) = vrev64_s32(*(int32x2_t *)(v92 + 12));
  *((_BYTE *)this + 1) = v101;
  if (v59)
  {
    *((_BYTE *)this + 176) = 1;
    *(_OWORD *)((char *)this + 216) = v118;
    *(_OWORD *)((char *)this + 232) = v119;
    *(_OWORD *)((char *)this + 248) = v120;
    *(_OWORD *)((char *)this + 264) = v121;
    *(_OWORD *)((char *)this + 184) = v116;
    *(_OWORD *)((char *)this + 200) = v117;
  }
  *((_QWORD *)this + 35) = v60;
  *((_BYTE *)this + 2) = v106;
  *((_BYTE *)this + 3) = v93;
  *((_BYTE *)this + 4) = v111;
  v81 = 6356752.31 / sqrt(v77 * v77 + v78 * v78 + v85 * v85);
  *((_BYTE *)this + 5) = v110;
  *((_BYTE *)this + 6) = v98;
  *((_BYTE *)this + 7) = v97;
  v82 = v95;
  *((_DWORD *)this + 11) = v91;
  *((_DWORD *)this + 12) = v90;
  *((_OWORD *)this + 9) = v88;
  *((_OWORD *)this + 10) = v87;
  *((float *)this + 13) = v81;
  *((_DWORD *)this + 14) = v86;
  *((_DWORD *)this + 15) = v80;
  *((_BYTE *)this + 10) = v105;
  *((_BYTE *)this + 11) = v104;
  v83 = 0.0;
  if (v82 >= 1.0)
  {
    v84 = 0;
  }
  else
  {
    v83 = 1.0 - v82;
    v84 = 1;
  }
  *((_BYTE *)this + 12) = v103;
  *((_BYTE *)this + 13) = v102;
  *((_BYTE *)this + 14) = v100;
  *((_BYTE *)this + 9) = v107 | v105 | v104 | v103 | v102 | v100;
  *((_QWORD *)this + 8) = v89;
  *((_BYTE *)this + 16) = v84;
  *((float *)this + 18) = v83;
  *((_BYTE *)this + 17) = v94;
  *((_BYTE *)this + 288) = *((_BYTE *)a2 + 3560);

}

void sub_19FE0966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);

  _Unwind_Resume(a1);
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_2 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(int8x16_t *a1, unint64_t *a2, uint64_t **a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  uint64_t v80;

  if (a4 == 3)
  {
    v11 = &a1->i64[1];
    v12 = a1->i64[1];
    v13 = *(_QWORD *)(**a3 + 8 * v12);
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 216) + 32);
    if ((v14 - 4) >= 0xFFFFFFFD
      && ((v15 = v14 - 1, !*(_BYTE *)(*a3[1] + 3)) ? (v16 = v15 >= 2) : (v16 = 1), v16 && *(_BYTE *)(v13 + 144)))
    {
      v17 = a1->i64[0];
      a1->i64[0] = v12;
      a1->i64[1] = v17;
      a1->i64[1] = *a2;
      *a2 = v17;
      return (uint64_t *)a2;
    }
    else
    {
      a1->i64[1] = *a2;
      *a2 = v12;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
    }
    return v11;
  }
  if (a4 == 2)
  {
    v10 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v10;
    return (uint64_t *)a2;
  }
  v18 = (uint64_t *)a5;
  if (a6 >= a4)
  {
    v31 = &a1->i64[1];
    *(_QWORD *)a5 = a1->i64[0];
    v32 = (uint64_t *)(a5 + 8);
    if (&a1->u64[1] == a2)
    {
      a1->i64[0] = *a2;
      v11 = (uint64_t *)a2;
    }
    else
    {
      v33 = a3[1];
      v34 = **a3;
      v35 = (uint64_t *)a1;
      do
      {
        v36 = *v31;
        v37 = *(_QWORD *)(v34 + 8 * *v31);
        v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 216) + 32);
        if ((v38 - 4) >= 0xFFFFFFFD
          && ((v39 = v38 - 1, !*(_BYTE *)(*v33 + 3)) ? (v40 = v39 >= 2) : (v40 = 1), v40 && *(_BYTE *)(v37 + 144)))
        {
          *v35++ = v36;
        }
        else
        {
          *v32++ = v36;
        }
        ++v31;
      }
      while (v31 != (uint64_t *)a2);
      *v35 = *a2;
      v11 = v35 + 1;
      if ((unint64_t)v32 <= a5)
        return v11;
    }
    v42 = (uint64_t *)(a5 + 8);
    if ((unint64_t)v32 > a5 + 8)
      v42 = v32;
    v43 = (unint64_t)v42 + ~a5;
    if (v43 < 0x18)
    {
      v44 = v11;
    }
    else
    {
      v44 = v11;
      if ((unint64_t)v11 - a5 >= 0x20)
      {
        v45 = 0;
        v46 = (v43 >> 3) + 1;
        v47 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = &v11[v45];
          v50 = *(_OWORD *)(a5 + v45 * 8 + 16);
          *(_OWORD *)v49 = *(_OWORD *)(a5 + v45 * 8);
          *((_OWORD *)v49 + 1) = v50;
          v45 += 4;
          v48 -= 4;
        }
        while (v48);
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
          return v11;
        v44 = &v11[v47];
        v18 = (uint64_t *)(a5 + v47 * 8);
      }
    }
    do
    {
      v63 = *v18++;
      *v44++ = v63;
    }
    while (v18 < v32);
    return v11;
  }
  if (a4 >= 0)
    v19 = a4;
  else
    v19 = a4 + 1;
  v20 = v19 >> 1;
  v21 = v19 >> 1;
  v22 = &a1->i64[v21];
  v23 = a3[1];
  v24 = **a3;
  v25 = v21 * 8 - 8;
  for (i = v20; ; --i)
  {
    v27 = *(_QWORD *)(v24 + 8 * *(uint64_t *)((char *)a1->i64 + v25));
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v27 + 216) + 32);
    if ((v28 - 4) >= 0xFFFFFFFD)
    {
      v29 = v28 - 1;
      v30 = *(_BYTE *)(*v23 + 3) || v29 >= 2;
      if (v30 && *(_BYTE *)(v27 + 144))
        break;
    }
    if (!v25)
    {
      v41 = (uint64_t *)a1;
      goto LABEL_52;
    }
    v25 -= 8;
  }
  v41 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_2 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(a1);
  v23 = a3[1];
  v24 = **a3;
LABEL_52:
  v11 = (uint64_t *)(a2 + 1);
  v51 = a4 - v20;
  v52 = v22;
  while (1)
  {
    v53 = *(_QWORD *)(v24 + 8 * *v52);
    v54 = *(unsigned __int8 *)(*(_QWORD *)(v53 + 216) + 32);
    if ((v54 - 4) < 0xFFFFFFFD)
      break;
    v55 = v54 - 1;
    v56 = *(_BYTE *)(*v23 + 3) || v55 >= 2;
    if (!v56 || !*(_BYTE *)(v53 + 144))
      break;
    if (++v52 == (uint64_t *)a2)
      goto LABEL_63;
    --v51;
  }
  v11 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_2 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v52);
LABEL_63:
  if (v41 != v22)
  {
    if (v22 == v11)
    {
      return v41;
    }
    else if (v41 + 1 == v22)
    {
      v64 = *v41;
      v65 = (char *)v11 - (char *)v22;
      memmove(v41, v22, v65);
      v11 = (uint64_t *)((char *)v41 + v65);
      *v11 = v64;
    }
    else if (v22 + 1 == v11)
    {
      v66 = v11 - 1;
      v67 = *(v11 - 1);
      v11 = v41 + 1;
      if (v66 != v41)
        memmove(v41 + 1, v41, (char *)v66 - (char *)v41);
      *v41 = v67;
    }
    else
    {
      v57 = v22 - v41;
      v58 = v11 - v22;
      if (v57 == v58)
      {
        v59 = v41 + 1;
        v60 = (uint64_t)&a1->i64[v20 + 1];
        do
        {
          v61 = *(v59 - 1);
          *(v59 - 1) = *(_QWORD *)(v60 - 8);
          *(_QWORD *)(v60 - 8) = v61;
          if (v59 == v22)
            break;
          ++v59;
          v62 = v60 == (_QWORD)v11;
          v60 += 8;
        }
        while (!v62);
        return v22;
      }
      else
      {
        v68 = v11 - v22;
        v69 = v22 - v41;
        do
        {
          v70 = v69;
          v69 = v68;
          v68 = v70 % v68;
        }
        while (v68);
        if (v69)
        {
          v71 = &v41[v69];
          do
          {
            v73 = *--v71;
            v72 = v73;
            v74 = &v71[v57];
            v75 = v71;
            do
            {
              v76 = v74;
              *v75 = *v74;
              v77 = v11 - v74;
              v78 = __OFSUB__(v57, v77);
              v80 = v57 - v77;
              v79 = (v80 < 0) ^ v78;
              v74 = &v41[v80];
              if (v79)
                v74 = &v76[v57];
              v75 = v76;
            }
            while (v74 != v71);
            *v76 = v72;
          }
          while (v71 != v41);
        }
        return &v41[v58];
      }
    }
  }
  return v11;
}

void md::DaVinciGroundRenderLayer::layoutMainPass(uint64_t a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, uint64_t a9, char a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  float v22;
  void *v23;
  int v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  int8x8_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  unsigned int v84;
  float *v85;
  float v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  __n128 v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  md::SharedResource *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  float v151;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  _BOOL4 v187;
  char v188;
  float32x4_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  float16x4_t *v194;
  float32x4_t v195;
  float32x4_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  int64x2_t v212;
  _QWORD *v213;
  uint64_t v214;
  int64x2_t *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  int8x8_t v221;
  uint8x8_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  double *v229;
  double v230;
  long double v231;
  double v232;
  int v233;
  double v234;
  float v235;
  float v237;
  _QWORD *v239;
  uint8x8_t v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  float32x4_t v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  __int128 v275;
  __int16 *v276;
  float *v277;
  float *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  uint64_t v288;
  __int16 *v289;
  uint64_t v290;
  __int128 v291;
  int32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  __int16 *v299;
  _DWORD *v300;
  int v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  uint64_t v311;
  int16x8_t v312;
  __int16 *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  const float *v320;
  __int16 *v321;
  uint64_t v322;
  const float *v323;
  int16x8_t v324;
  int16x8_t v325;
  __int16 *v326;
  int16x4_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t shared_weak_owners;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  int v339;
  int v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  _QWORD *v345;
  int v346;
  int v347;
  unint64_t v348;
  unint64_t v349;
  _BOOL4 v350;
  unint64_t v351;
  double v352;
  double v353;
  double v354;
  double v355;
  int v356;
  unsigned __int8 v357;
  unsigned int v358;
  float v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  __int128 v363;
  float32x4_t *v364;
  __int128 v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  _BYTE *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  _QWORD *v441;
  int8x8_t v442;
  uint8x8_t v443;
  unint64_t v444;
  _QWORD *v445;
  _QWORD *v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t *v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  _QWORD *v455;
  unint64_t *v456;
  unint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  int64x2_t *v476;
  __int128 v477;
  _QWORD *v478;
  int v479;
  int v480;
  unint64_t v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  __int16 v486;
  uint64_t v487;
  uint64_t v489;
  uint64_t v490;
  float *v491;
  __int128 v492;
  int8x16_t v493;
  int64x2_t *v494;
  uint64_t v495;
  int v496;
  float32x4_t v497;
  float32x4_t v498;
  float *v499;
  uint64_t v501;
  uint64_t v502;
  uint64_t v504;
  float64x2_t v505;
  float64x2_t v508;
  float64x2_t v509;
  _QWORD *v510;
  float64x2_t v511;
  uint64_t *v512;
  float64x2_t v513;
  _BOOL4 v515;
  float64x2_t v516;
  float64x2_t v518;
  uint64_t *v519;
  void *v520;
  id v521[2];
  id v522[2];
  __n128 v523;
  uint64_t v524;
  char v525[4];
  uint64_t v526;
  __int32 v527;
  _BYTE v528[2];
  __int128 v529;
  char v530;
  _BYTE __p[32];
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float32x4_t v538;
  _BYTE v539[40];
  __int128 v540;
  __int128 v541;
  double v542;
  double v543;
  uint64_t v544;
  double v545;
  double v546;
  double v547;
  uint64_t v548;
  _BYTE v549[80];
  double v550;
  _QWORD v551[6];
  _BYTE v552[36];
  __int128 v553;
  __int128 v554;
  int v555;
  uint64_t v556;
  float32x4x3_t v557;
  float32x4x3_t v558;
  int16x8x3_t v559;

  v11 = a3;
  v12 = a1;
  v556 = *MEMORY[0x1E0C80C00];
  if (a6 == a7)
    goto LABEL_304;
  v504 = a1 + 1288;
  v499 = (float *)(a1 + 368);
  v491 = (float *)(a1 + 488);
  v489 = a1 + 2128;
  v490 = a1 + 2344;
  v494 = (int64x2_t *)(a3 + 264);
  __asm { FMOV            V0.4S, #1.0 }
  v493 = _Q0;
  v17 = a6;
  while (2)
  {
    v18 = v17;
    v19 = v17 + 1;
    v20 = *(unsigned __int8 *)(*(_QWORD *)(*a8 + 8 * *v17) + 8);
    while (v19 != a7)
    {
      v21 = *v19++;
      if (*(unsigned __int8 *)(*(_QWORD *)(*a8 + 8 * v21) + 8) != v20)
      {
        v17 = v19 - 1;
        goto LABEL_10;
      }
    }
    v17 = a7;
LABEL_10:
    v519 = v17;
    if (v20 != 2)
    {
      if (v20 == 1)
      {
        md::DaVinciGroundRenderLayer::layoutMaterialRenderables(v12, a2, v11, a4, a5, v18, v17, a8, a9, a10);
        goto LABEL_3;
      }
      goto LABEL_4;
    }
    v22 = *(float *)(v11 + 20);
    v510 = *(_QWORD **)(*(_QWORD *)(v12 + 40) + 24);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "daVinciWireframeEnabled");

    v25 = *(_QWORD **)(v12 + 3128);
    v26 = (std::__shared_weak_count *)v25[1];
    *(_QWORD *)v552 = *v25;
    *(_QWORD *)&v552[8] = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    v29 = (uint64_t *)*((_QWORD *)a2 + 1);
    v30 = (int8x8_t)v29[1];
    v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v32 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v30 <= 0x1AF456233693CD46uLL)
        v32 = 0x1AF456233693CD46uLL % *(_QWORD *)&v30;
    }
    else
    {
      v32 = (*(_QWORD *)&v30 - 1) & 0x1AF456233693CD46;
    }
    v33 = *v29;
    v34 = *(_QWORD **)(v33 + 8 * v32);
    if (v34)
    {
      v35 = (_QWORD *)*v34;
      if (v35)
      {
        if (v31.u32[0] < 2uLL)
        {
          while (1)
          {
            v37 = v35[1];
            if (v37 == 0x1AF456233693CD46)
            {
              if (v35[2] == 0x1AF456233693CD46)
                goto LABEL_35;
            }
            else if ((v37 & (*(_QWORD *)&v30 - 1)) != v32)
            {
              goto LABEL_35;
            }
            v35 = (_QWORD *)*v35;
            if (!v35)
              goto LABEL_35;
          }
        }
        do
        {
          v36 = v35[1];
          if (v36 == 0x1AF456233693CD46)
          {
            if (v35[2] == 0x1AF456233693CD46)
              break;
          }
          else
          {
            if (v36 >= *(_QWORD *)&v30)
              v36 %= *(_QWORD *)&v30;
            if (v36 != v32)
              break;
          }
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
    }
LABEL_35:
    if (v31.u32[0] > 1uLL)
    {
      v38 = 0x41E8D6E445F4145;
      if (*(_QWORD *)&v30 <= 0x41E8D6E445F4145uLL)
        v38 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v30;
    }
    else
    {
      v38 = (*(_QWORD *)&v30 - 1) & 0x41E8D6E445F4145;
    }
    v39 = *(_QWORD **)(v33 + 8 * v38);
    if (!v39)
      goto LABEL_61;
    v40 = (_QWORD *)*v39;
    if (!v40)
      goto LABEL_61;
    if (v31.u32[0] < 2uLL)
    {
      while (1)
      {
        v42 = v40[1];
        if (v42 == 0x41E8D6E445F4145)
        {
          if (v40[2] == 0x41E8D6E445F4145)
            goto LABEL_55;
        }
        else if ((v42 & (*(_QWORD *)&v30 - 1)) != v38)
        {
          goto LABEL_61;
        }
        v40 = (_QWORD *)*v40;
        if (!v40)
          goto LABEL_61;
      }
    }
    while (1)
    {
      v41 = v40[1];
      if (v41 == 0x41E8D6E445F4145)
        break;
      if (v41 >= *(_QWORD *)&v30)
        v41 %= *(_QWORD *)&v30;
      if (v41 != v38)
        goto LABEL_61;
LABEL_44:
      v40 = (_QWORD *)*v40;
      if (!v40)
        goto LABEL_61;
    }
    if (v40[2] != 0x41E8D6E445F4145)
      goto LABEL_44;
LABEL_55:
    v43 = v40[5];
    if (*(_QWORD *)(v43 + 8) != 0x41E8D6E445F4145)
    {
LABEL_61:
      v502 = 0;
      if (v31.u32[0] > 1uLL)
        goto LABEL_57;
      goto LABEL_62;
    }
    v502 = *(_QWORD *)(v43 + 32);
    if (v31.u32[0] > 1uLL)
    {
LABEL_57:
      v44 = 0xDFC317497CF9A4BFLL;
      if (*(_QWORD *)&v30 <= 0xDFC317497CF9A4BFLL)
        v44 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v30;
      v45 = *(_QWORD **)(v33 + 8 * v44);
      if (!v45)
        goto LABEL_86;
      goto LABEL_63;
    }
LABEL_62:
    v44 = (*(_QWORD *)&v30 - 1) & 0xDFC317497CF9A4BFLL;
    v45 = *(_QWORD **)(v33 + 8 * v44);
    if (!v45)
      goto LABEL_86;
LABEL_63:
    v46 = (_QWORD *)*v45;
    if (!v46)
      goto LABEL_86;
    if (v31.u32[0] < 2uLL)
    {
      while (1)
      {
        v48 = v46[1];
        if (v48 == 0xDFC317497CF9A4BFLL)
        {
          if (v46[2] == 0xDFC317497CF9A4BFLL)
            goto LABEL_78;
        }
        else if ((v48 & (*(_QWORD *)&v30 - 1)) != v44)
        {
          goto LABEL_86;
        }
        v46 = (_QWORD *)*v46;
        if (!v46)
          goto LABEL_86;
      }
    }
    while (2)
    {
      v47 = v46[1];
      if (v47 != 0xDFC317497CF9A4BFLL)
      {
        if (v47 >= *(_QWORD *)&v30)
          v47 %= *(_QWORD *)&v30;
        if (v47 != v44)
          goto LABEL_86;
        goto LABEL_67;
      }
      if (v46[2] != 0xDFC317497CF9A4BFLL)
      {
LABEL_67:
        v46 = (_QWORD *)*v46;
        if (!v46)
          goto LABEL_86;
        continue;
      }
      break;
    }
LABEL_78:
    v49 = v46[5];
    if (*(_QWORD *)(v49 + 8) == 0xDFC317497CF9A4BFLL)
    {
      v50 = *(_QWORD *)(v49 + 32);
      if (v31.u32[0] >= 2uLL)
        goto LABEL_80;
LABEL_87:
      v52 = *(_QWORD **)(v33 + 8 * ((*(_QWORD *)&v30 - 1) & 0xD2404CDD1F9A6950));
      do
      {
        do
          v52 = (_QWORD *)*v52;
        while (v52[1] != 0xD2404CDD1F9A6950);
      }
      while (v52[2] != 0xD2404CDD1F9A6950);
      goto LABEL_90;
    }
LABEL_86:
    v50 = 0;
    if (v31.u32[0] < 2uLL)
      goto LABEL_87;
LABEL_80:
    v51 = 0xD2404CDD1F9A6950;
    if (*(_QWORD *)&v30 <= 0xD2404CDD1F9A6950)
      v51 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v30;
    v52 = *(_QWORD **)(v33 + 8 * v51);
    do
    {
      do
        v52 = (_QWORD *)*v52;
      while (v52[1] != 0xD2404CDD1F9A6950);
    }
    while (v52[2] != 0xD2404CDD1F9A6950);
LABEL_90:
    if (!**(_QWORD **)(v52[5] + 32) || !*(_QWORD *)(v12 + 3144))
      goto LABEL_299;
    LOBYTE(v515) = v50 && *(_BYTE *)(v50 + 64) != 0;
    if (v18 == v519)
      goto LABEL_299;
    v53 = v490;
    if (!v24)
      v53 = v489;
    v495 = v53;
    while (2)
    {
      v54 = *(_QWORD *)(*a8 + 8 * *v18);
      if (*(_BYTE *)(v54 + 8) != 2)
        goto LABEL_99;
      v512 = *(uint64_t **)(v54 + 216);
      v55 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v12 + 1696));
      v56 = v54 + 224;
      (*(void (**)(__int128 *__return_ptr, float))(**(_QWORD **)(v54 + 224) + 1040))(&v529, v22);
      if ((_BYTE)v529)
        __p[0] = 0;
      else
        (*(void (**)(_BYTE *__return_ptr, float))(**(_QWORD **)v56 + 816))(__p, v22);
      if (v515)
      {
        if ((_BYTE)v529)
        {
          v57 = 1;
          v58 = v510[20];
          if (!v58)
            goto LABEL_113;
        }
        else
        {
          v57 = __p[0] != 0;
          v58 = v510[20];
          if (!v58)
            goto LABEL_113;
        }
LABEL_111:
        v59 = *(_QWORD *)(v58 + 32);
        v60 = *(_QWORD *)(v510[1] + 96);
        if (v59 >= (*(_QWORD *)(v510[1] + 104) - v60) >> 3)
          goto LABEL_113;
        v61 = *(_QWORD *)(*(_QWORD *)(v60 + 8 * v59) + 16);
      }
      else
      {
        v57 = 0;
        v58 = v510[20];
        if (v58)
          goto LABEL_111;
LABEL_113:
        v61 = 0;
      }
      if (v61)
        v62 = v57;
      else
        v62 = 0;
      HIBYTE(v486) = a10;
      LOBYTE(v486) = 0;
      md::DaVinciPipelineStateManager<ggl::DaVinci::DecalPipelineState,std::shared_ptr<ggl::DaVinciDecalShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v549, v504, *(unsigned __int8 *)(v11 + 5), 0, 0, 0, *(unsigned __int8 *)(v11 + 6), 0, v486, 0, v62, 0, 0, 0, 0, 1, 1u, 0, 0,
        0,
        0,
        0,
        1u,
        0,
        0,
        0,
        0,
        0,
        0);
      v63 = *(_QWORD *)v549;
      v64 = *(std::__shared_weak_count **)&v549[8];
      if (*(_QWORD *)&v549[8])
      {
        v65 = (unint64_t *)(*(_QWORD *)&v549[8] + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v515 = v57;
      if (!v63 || **(_QWORD **)(v63 + 40) != v55[1])
      {
        v67 = (std::__shared_weak_count *)v55[3];
        v55[2] = 0;
        v55[3] = 0;
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          goto LABEL_135;
        }
        goto LABEL_136;
      }
      v70 = v55[2];
      if (v70 && v70 != v63)
        ggl::PipelineSetup::resetData((uint64_t)v55);
      if (v64)
      {
        v71 = (unint64_t *)&v64->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v67 = (std::__shared_weak_count *)v55[3];
      v55[2] = v63;
      v55[3] = v64;
      if (!v67)
        goto LABEL_642;
      v73 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v73);
      while (__stlxr(v69 - 1, v73));
LABEL_135:
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v12 = a1;
        if (v64)
        {
LABEL_137:
          v74 = (unint64_t *)&v64->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      else
      {
LABEL_642:
      {
LABEL_136:
        v12 = a1;
        if (v64)
          goto LABEL_137;
      }
      }
      v76 = *(std::__shared_weak_count **)&v549[8];
      v11 = a3;
      if (!*(_QWORD *)&v549[8])
        goto LABEL_146;
      v77 = (unint64_t *)(*(_QWORD *)&v549[8] + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        v79 = v55[2];
        if (v62)
          goto LABEL_147;
      }
      else
      {
LABEL_146:
        v79 = v55[2];
        if (v62)
        {
LABEL_147:
          if (*(_BYTE *)(v79 + 315))
            *(_QWORD *)(v55[12] + 16) = v61;
        }
      }
      v80 = v79;
      v81 = *(_QWORD *)v552;
      (*(void (**)(_BYTE *__return_ptr, float))(**(_QWORD **)v56 + 360))(v528, v22);
      if (v528[0])
      {
        if (!v528[1])
          goto LABEL_99;
      }
      (*(void (**)(char *__return_ptr, float))(**(_QWORD **)v56 + 976))(v525, v22);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v56 + 928))(&v524, v22);
      if (v525[0])
      {
        LOBYTE(v553) = 0;
        goto LABEL_155;
      }
      (*(void (**)(__int128 *__return_ptr, float))(**(_QWORD **)v56 + 232))(&v553, v22);
      if (v525[0])
      {
LABEL_155:
        v83.i64[0] = v526;
        v83.i32[2] = v527;
        v84 = (_BYTE)v524 == 0;
        v85 = (float *)&v524 + 1;
      }
      else
      {
        v84 = (_BYTE)v553 == 0;
        v82.i64[0] = *(_QWORD *)((char *)&v553 + 4);
        v82.i32[2] = HIDWORD(v553);
        v83 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v84)), 0x1FuLL)), v493, v82);
        v85 = (float *)&v554;
      }
      v86 = *v85;
      if (v84)
        v86 = 1.0;
      v538.i64[1] = __PAIR64__(LODWORD(v86), v83.u32[2]);
      v538.i64[0] = v83.i64[0];
      v87 = *(_QWORD *)(v12 + 3144);
      v549[0] = 1;
      v88 = *(std::__shared_weak_count **)(v12 + 2088);
      if (v88)
      {
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = md::MaterialTextureManager::textureFromMaterial(&v523, v87, v54 + 224, (unint64_t *)(v54 + 240), v549, (int)v22);
      if (v88)
      {
        v92 = (unint64_t *)&v88->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v91);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v91.n128_u32[0] = v538.u32[3];
      if (v538.f32[3] != 0.0)
      {
        v95 = v81;
        md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::DecalPipelineSetup,ggl::DaVinci::DecalPipelineState>(v12, (uint64_t)v55, &v538);
        v96 = (md::SharedResource *)v523.n128_u64[0];
        if (v523.n128_u64[0])
        {
          md::LayoutContext::frameState(a2);
          md::SharedResource::addFrameRef(v96, *(_QWORD *)(v97 + 624));
          v95 = *((_QWORD *)v96 + 4);
        }
        v98 = v55[8];
        *(_QWORD *)(v98 + 48) = *(_QWORD *)(v12 + 2016);
        *(_QWORD *)(v98 + 56) = 0;
        v99 = v55[20];
        v100 = *(std::__shared_weak_count **)(v99 + 56);
        *(_QWORD *)(v99 + 48) = 0;
        *(_QWORD *)(v99 + 56) = 0;
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v103 = (_QWORD *)v55[8];
        v103[1] = 0;
        v104 = *(_QWORD *)(a5 + 216);
        *v103 = v104;
        v105 = (_QWORD *)v55[20];
        v106 = *(_QWORD *)(a5 + 224);
        if (v106)
        {
          v107 = (unint64_t *)(v106 + 8);
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        v109 = (std::__shared_weak_count *)v105[1];
        *v105 = v104;
        v105[1] = v106;
        if (v109)
        {
          v110 = (unint64_t *)&v109->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v112 = v55[8];
        *(_QWORD *)(v112 + 24) = 0;
        v113 = *(_QWORD *)(a5 + 232);
        *(_QWORD *)(v112 + 16) = v113;
        v114 = v55[20];
        v115 = *(_QWORD *)(a5 + 240);
        if (v115)
        {
          v116 = (unint64_t *)(v115 + 8);
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        v118 = *(std::__shared_weak_count **)(v114 + 24);
        *(_QWORD *)(v114 + 16) = v113;
        *(_QWORD *)(v114 + 24) = v115;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = v55[8];
        *(_QWORD *)(v121 + 72) = 0;
        v122 = *(_QWORD *)(v502 + 16);
        *(_QWORD *)(v121 + 64) = v122;
        v123 = v55[20];
        v124 = *(_QWORD *)(v502 + 24);
        if (v124)
        {
          v125 = (unint64_t *)(v124 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v127 = *(std::__shared_weak_count **)(v123 + 72);
        *(_QWORD *)(v123 + 64) = v122;
        *(_QWORD *)(v123 + 72) = v124;
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v130 = v55[8];
        *(_QWORD *)(v130 + 40) = 0;
        v131 = *(_QWORD *)(a5 + 400);
        *(_QWORD *)(v130 + 32) = v131;
        v132 = v55[20];
        v133 = *(_QWORD *)(a5 + 408);
        if (v133)
        {
          v134 = (unint64_t *)(v133 + 8);
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
        }
        v136 = *(std::__shared_weak_count **)(v132 + 40);
        *(_QWORD *)(v132 + 32) = v131;
        *(_QWORD *)(v132 + 40) = v133;
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        v139 = v55[8];
        *(_QWORD *)(v139 + 104) = 0;
        v140 = *(_QWORD *)(v12 + 1896);
        *(_QWORD *)(v139 + 96) = v140;
        v141 = v55[20];
        v142 = *(_QWORD *)(v12 + 1904);
        if (v142)
        {
          v143 = (unint64_t *)(v142 + 8);
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
        }
        v145 = *(std::__shared_weak_count **)(v141 + 104);
        *(_QWORD *)(v141 + 96) = v140;
        *(_QWORD *)(v141 + 104) = v142;
        if (v145)
        {
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        *(_QWORD *)v55[12] = *(_QWORD *)(a3 + 280);
        if (*(_BYTE *)(a3 + 6))
        {
          v148 = v510[12];
          if (v148)
          {
            v149 = *(_QWORD *)(v148 + 32);
            v150 = *(_QWORD *)(v510[1] + 96);
            if (v149 >= (*(_QWORD *)(v510[1] + 104) - v150) >> 3)
              v148 = 0;
            else
              v148 = *(_QWORD *)(*(_QWORD *)(v150 + 8 * v149) + 16);
          }
          *(_QWORD *)(v55[12] + 8) = v148;
        }
        md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::DecalPipelineSetup,ggl::DaVinci::DecalPipelineState>(v12, (uint64_t)v55, &v538);
        v151 = *(float *)(a3 + 40);
        if (*(unsigned __int8 *)(a5 + 24) == 255)
        {
          if (*(_BYTE *)(a3 + 5) && *(_BYTE *)(a3 + 4))
          {
            v154 = *(double *)(a5 + 288);
            v155 = *(double *)(a5 + 296);
            v156 = *(double *)(a5 + 304);
            v157 = *(double *)(a5 + 312);
            v158 = v155 + v155;
            v159 = (v155 + v155) * v155;
            v160 = (v156 + v156) * v156;
            v161 = v154 + v154;
            v162 = (v154 + v154) * v155;
            v163 = (v156 + v156) * v157;
            v164 = v156 * (v154 + v154);
            v165 = 1.0 - (v154 + v154) * v154;
            v166 = v158 * v156;
            *(double *)v539 = 1.0 - (v159 + v160);
            *(double *)&v539[8] = v163 + v162;
            *(double *)&v539[32] = v162 - v163;
            *(double *)&v540 = v165 - v160;
            *((double *)&v541 + 1) = v157 * v158 + v164;
            v542 = v166 - v157 * v161;
            *(double *)&v539[16] = v164 - v157 * v158;
            *((double *)&v540 + 1) = v157 * v161 + v166;
            v543 = v165 - v159;
            *(_QWORD *)&v539[24] = 0;
            *(_QWORD *)&v541 = 0;
            v544 = 0;
            v548 = 0x3FF0000000000000;
            v546 = 0.0;
            v547 = 0.0;
            v545 = 0.0;
            gm::Matrix<double,4,4>::inverted<int,void>((double *)v549, (double *)v539);
            v167 = *(double *)(a3 + 80);
            v168 = *(double *)(a3 + 88);
            v169 = *(double *)(a3 + 96);
            v170 = *(double *)(a3 + 104);
            _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v549, v167), *(float64x2_t *)&v549[32], v168), *(float64x2_t *)&v549[64], v169), *(float64x2_t *)&v551[1], v170);
            _D1 = *(double *)&v549[16] * v167 + *(double *)&v549[48] * v168 + v550 * v169 + *(double *)&v551[3] * v170;
          }
          else
          {
            _Q0 = *(float64x2_t *)(a3 + 80);
            _D1 = *(double *)(a3 + 96);
          }
        }
        else
        {
          _Q0 = *(float64x2_t *)(a3 + 112);
          _D1 = *(double *)(a3 + 128);
        }
        _S11 = 1.0 / v151;
        _D2 = _Q0.f64[1];
        __asm
        {
          FCVT            H2, D2
          FCVT            H0, D0
        }
        WORD1(_Q0.f64[0]) = LOWORD(_D2);
        __asm { FCVT            H12, D1 }
        v496 = LODWORD(_Q0.f64[0]);
        *(_QWORD *)v539 = vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]).u64[0];
        __asm { FCVT            S0, H12 }
        *(_DWORD *)&v539[8] = _S0;
        *(float *)&v539[12] = _S11;
        v175 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>(v499, (float *)v539);
        if (v175)
        {
          v176 = v175[4];
        }
        else
        {
          v177 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v12 + 1704));
          v176 = v177;
          *(_QWORD *)&v549[8] = 0;
          *(_QWORD *)v549 = 0;
          v178 = *(_QWORD *)(v177 + 8);
          if (v178)
            v179 = *(_QWORD *)(v177 + 72);
          else
            v179 = 0;
          *(_QWORD *)&_Q0 = 0;
          *((_QWORD *)&_Q0 + 1) = v177;
          v492 = _Q0;
          *(_OWORD *)v549 = _Q0;
          *(_QWORD *)&v549[16] = 0;
          *(_QWORD *)&v549[24] = v178;
          *(_QWORD *)&v549[40] = v179;
          *(_WORD *)&v549[32] = 1;
          __asm { FCVT            H0, S11 }
          *(_DWORD *)v179 = v496;
          *(_WORD *)(v179 + 4) = _H12;
          *(_WORD *)(v179 + 6) = _Q0;
          std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(v499, (float *)v539, v539, v177);
          if (v178)
          {
            if ((_QWORD)v492 && *(_BYTE *)(*((_QWORD *)&v492 + 1) + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v492 + 64))();
            v181 = *(_QWORD *)(*((_QWORD *)&v492 + 1) + 64);
            if (v181 <= v178)
              v181 = v178;
            *(_QWORD *)(*((_QWORD *)&v492 + 1) + 56) = 0;
            *(_QWORD *)(*((_QWORD *)&v492 + 1) + 64) = v181;
          }
          v12 = a1;
        }
        v182 = v55[8];
        *(_QWORD *)(v182 + 80) = v176;
        *(_QWORD *)(v182 + 88) = 0;
        v183 = v55[20];
        v184 = *(std::__shared_weak_count **)(v183 + 88);
        *(_QWORD *)(v183 + 80) = 0;
        *(_QWORD *)(v183 + 88) = 0;
        v11 = a3;
        if (!v184)
          goto LABEL_246;
        v185 = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
          if (__p[0])
          {
LABEL_247:
            v187 = v515;
            if (!v80)
              v187 = 0;
            if (!v187)
              goto LABEL_278;
            goto LABEL_256;
          }
        }
        else
        {
LABEL_246:
          if (__p[0])
            goto LABEL_247;
        }
        v188 = !v515;
        if (!(_BYTE)v529)
          v188 = 1;
        if ((v188 & 1) != 0 || !v80)
        {
LABEL_278:
          v203 = *(_QWORD **)(*v512 + 120);
          if (!v203)
LABEL_639:
            abort();
          while (v203[4])
          {
            v203 = (_QWORD *)*v203;
            if (!v203)
              goto LABEL_639;
          }
          v204 = (_QWORD *)v55[4];
          *v204 = v203[5];
          v204[1] = 0;
          v205 = (_QWORD *)v55[16];
          v206 = (std::__shared_weak_count *)v205[1];
          *v205 = 0;
          v205[1] = 0;
          if (v206)
          {
            v207 = (unint64_t *)&v206->__shared_owners_;
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          *(_QWORD *)(v55[12] + 24) = v95;
          memset(&v539[4], 0, 32);
          v209 = *v512;
          v210 = *(_QWORD **)(*v512 + 96);
          v211 = (v210[6] - v210[5]) / v210[1];
          if (*(_BYTE *)(v11 + 176))
          {
            v212 = vdupq_n_s64(1uLL);
            v212.i64[0] = (v210[6] - v210[5]) / v210[1];
            *(int64x2_t *)(v11 + 184) = vaddq_s64(*(int64x2_t *)(v11 + 184), v212);
            *v494 = vaddq_s64(*v494, v212);
          }
          *(_OWORD *)v549 = *(_OWORD *)v539;
          *(_OWORD *)&v549[16] = *(_OWORD *)&v539[16];
          *(_DWORD *)&v549[32] = *(_DWORD *)&v539[32];
          v213 = *(_QWORD **)(v12 + 3112);
          v214 = v213[1];
          if (v214 == *(_QWORD *)(v12 + 3120))
          {
            v213 = (_QWORD *)*v213;
            if (!v213)
            {
              v213 = malloc_type_malloc(120 * v214 + 16, 0xB644C221uLL);
              *v213 = 0;
              v213[1] = 0;
              **(_QWORD **)(v12 + 3112) = v213;
            }
            *(_QWORD *)(v12 + 3112) = v213;
            v214 = v213[1];
          }
          v213[1] = v214 + 1;
          v215 = (int64x2_t *)&v213[15 * v214];
          v215[1].i64[0] = (uint64_t)&off_1E42B59B0;
          ++v215;
          v215[1].i64[0] = (uint64_t)"";
          v215[1].i64[1] = v495;
          v215[2].i64[0] = (uint64_t)v55;
          v215[2].i64[1] = v501 & 0xFFFFFFFF00000000;
          v501 &= 0xFFFFFFFF00000000;
          v215[3].i64[0] = 0x100000000;
          v215[3].i32[2] = 1065353216;
          v215[3].i32[3] = *(_DWORD *)v549;
          v215[6] = vdupq_n_s64(1uLL);
          v215[7].i64[0] = 0;
          v215[4].i64[0] = v209;
          v215[4].i64[1] = 0;
          v215[5].i64[0] = v211;
          v215[5].i64[1] = 0;
          v215[6].i64[0] = 1;
          ggl::CommandBuffer::pushRenderItem(a9, (ggl::RenderItem *)v215);
          v94 = (std::__shared_weak_count *)v523.n128_u64[1];
          if (v523.n128_u64[1])
            goto LABEL_294;
          goto LABEL_99;
        }
LABEL_256:
        if (*(_BYTE *)(v80 + 315))
        {
          if ((_BYTE)v529)
          {
            v189.i64[0] = *(_QWORD *)((char *)&v529 + 4);
            v189.i64[1] = __PAIR64__(v493.u32[3], HIDWORD(v529));
          }
          else
          {
            v189 = *(float32x4_t *)&__p[4];
          }
          v497 = v189;
          *(float32x4_t *)v539 = v189;
          v539[16] = 1;
          v190 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>(v491, (float *)v539);
          if (v190)
          {
            v191 = *(_QWORD *)(v190 + 40);
          }
          else
          {
            v192 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v12 + 1920));
            v191 = v192;
            *(_QWORD *)&v549[8] = 0;
            *(_QWORD *)v549 = 0;
            v193 = *(_QWORD *)(v192 + 8);
            if (v193)
              v194 = *(float16x4_t **)(v192 + 72);
            else
              v194 = 0;
            v195 = v497;
            v196.i64[0] = 0;
            v196.i64[1] = v192;
            v498 = v196;
            *(float32x4_t *)v549 = v196;
            *(_QWORD *)&v549[16] = 0;
            *(_QWORD *)&v549[24] = v193;
            *(_QWORD *)&v549[40] = v194;
            *(_WORD *)&v549[32] = 1;
            *v194 = vcvt_f16_f32(v195);
            std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *&>(v491, (unsigned int *)v539, (uint64_t)v539, v192);
            if (v193)
            {
              if (v498.i64[0] && *(_BYTE *)(v498.i64[1] + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)v498.i64[0] + 64))();
              v197 = *(_QWORD *)(v498.i64[1] + 64);
              if (v197 <= v193)
                v197 = v193;
              *(_QWORD *)(v498.i64[1] + 56) = 0;
              *(_QWORD *)(v498.i64[1] + 64) = v197;
            }
            v12 = a1;
          }
          v198 = v55[8];
          *(_QWORD *)(v198 + 128) = v191;
          *(_QWORD *)(v198 + 136) = 0;
          v199 = v55[20];
          v200 = *(std::__shared_weak_count **)(v199 + 136);
          *(_QWORD *)(v199 + 128) = 0;
          *(_QWORD *)(v199 + 136) = 0;
          v11 = a3;
          if (v200)
          {
            v201 = (unint64_t *)&v200->__shared_owners_;
            do
              v202 = __ldaxr(v201);
            while (__stlxr(v202 - 1, v201));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
              std::__shared_weak_count::__release_weak(v200);
            }
          }
        }
        goto LABEL_278;
      }
      v11 = a3;
      v94 = (std::__shared_weak_count *)v523.n128_u64[1];
      if (!v523.n128_u64[1])
        goto LABEL_99;
LABEL_294:
      v216 = (unint64_t *)&v94->__shared_owners_;
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v94->__on_zero_shared)(v94, v91);
        std::__shared_weak_count::__release_weak(v94);
      }
LABEL_99:
      if (++v18 != v519)
        continue;
      break;
    }
    v26 = *(std::__shared_weak_count **)&v552[8];
LABEL_299:
    if (v26)
    {
      v218 = (unint64_t *)&v26->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
LABEL_3:
    v17 = v519;
LABEL_4:
    if (v17 != a7)
      continue;
    break;
  }
LABEL_304:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v520 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v520, "daVinciLightingDebugShowLitSphere"))
  {

    return;
  }

  if (a7 != a6 && a7 >= a6)
  {
    v220 = (_QWORD *)*((_QWORD *)a2 + 1);
    v221 = (int8x8_t)v220[1];
    if (!*(_QWORD *)&v221)
      goto LABEL_331;
    v222 = (uint8x8_t)vcnt_s8(v221);
    v222.i16[0] = vaddlv_u8(v222);
    if (v222.u32[0] > 1uLL)
    {
      v223 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v221 <= 0x1AF456233693CD46uLL)
        v223 = 0x1AF456233693CD46uLL % *(_QWORD *)&v221;
    }
    else
    {
      v223 = (*(_QWORD *)&v221 - 1) & 0x1AF456233693CD46;
    }
    v224 = *(_QWORD **)(*v220 + 8 * v223);
    if (!v224)
      goto LABEL_331;
    v225 = (_QWORD *)*v224;
    if (!v225)
      goto LABEL_331;
    if (v222.u32[0] < 2uLL)
    {
      while (1)
      {
        v227 = v225[1];
        if (v227 == 0x1AF456233693CD46)
        {
          if (v225[2] == 0x1AF456233693CD46)
            goto LABEL_329;
        }
        else if ((v227 & (*(_QWORD *)&v221 - 1)) != v223)
        {
          goto LABEL_331;
        }
        v225 = (_QWORD *)*v225;
        if (!v225)
          goto LABEL_331;
      }
    }
    while (1)
    {
      v226 = v225[1];
      if (v226 == 0x1AF456233693CD46)
      {
        if (v225[2] == 0x1AF456233693CD46)
        {
LABEL_329:
          v228 = v225[5];
          if (*(_QWORD *)(v228 + 8) == 0x1AF456233693CD46)
          {
            v229 = *(double **)(v228 + 32);
LABEL_332:
            v230 = v229[2];
            v231 = tan(v229[1] * 0.5 + 0.785398163);
            v232 = log(v231);
            v233 = 1 << *(_BYTE *)(a5 + 25);
            v234 = -1.0 / (double)v233;
            v235 = (v230 * 0.159154943 + 0.5 + v234 * (double)*(int *)(a5 + 32)) * (double)v233;
            if (v235 < 0.0 || v235 > 1.0)
              return;
            v237 = (v232 * 0.159154943 + 0.5 + v234 * (double)(v233 + ~*(_DWORD *)(a5 + 28))) * (double)v233;
            if (v237 < 0.0 || v237 > 1.0)
              return;
            v239 = *(_QWORD **)(*(_QWORD *)(v12 + 40) + 24);
            if (!*(_QWORD *)&v221)
              goto LABEL_365;
            v240 = (uint8x8_t)vcnt_s8(v221);
            v240.i16[0] = vaddlv_u8(v240);
            if (v240.u32[0] > 1uLL)
            {
              v241 = 0x41E8D6E445F4145;
              if (*(_QWORD *)&v221 <= 0x41E8D6E445F4145uLL)
                v241 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v221;
            }
            else
            {
              v241 = (*(_QWORD *)&v221 - 1) & 0x41E8D6E445F4145;
            }
            v242 = *(_QWORD **)(*v220 + 8 * v241);
            if (!v242)
              goto LABEL_365;
            v243 = (_QWORD *)*v242;
            if (!v243)
              goto LABEL_365;
            if (v240.u32[0] < 2uLL)
            {
              while (1)
              {
                v245 = v243[1];
                if (v245 == 0x41E8D6E445F4145)
                {
                  if (v243[2] == 0x41E8D6E445F4145)
                    goto LABEL_363;
                }
                else if ((v245 & (*(_QWORD *)&v221 - 1)) != v241)
                {
                  goto LABEL_365;
                }
                v243 = (_QWORD *)*v243;
                if (!v243)
                  goto LABEL_365;
              }
            }
            while (1)
            {
              v244 = v243[1];
              if (v244 == 0x41E8D6E445F4145)
              {
                if (v243[2] == 0x41E8D6E445F4145)
                {
LABEL_363:
                  v246 = v243[5];
                  if (*(_QWORD *)(v246 + 8) == 0x41E8D6E445F4145)
                  {
                    v247 = *(_QWORD **)(v246 + 32);
                    goto LABEL_366;
                  }
LABEL_365:
                  v247 = 0;
LABEL_366:
                  __asm { FMOV            V0.4S, #1.0 }
                  *(float32x4_t *)v521 = _Q0;
                  v538 = _Q0;
                  memset(&v552[4], 0, 32);
                  v249 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v12 + 1648));
                  if (!*(_QWORD *)(v12 + 3264))
                  {
                    memset(__p, 0, 24);
                    v553 = 0uLL;
                    *(_QWORD *)&v554 = 0;
                    md::GeometryLogic::createIcoSphere((float **)__p, (void **)&v553, 3);
                    v250 = v553;
                    v252 = *(_QWORD *)__p;
                    v251 = *(_QWORD *)&__p[8];
                    v253 = operator new(0xA8uLL);
                    v254 = 0xAAAAAAAAAAAAAAABLL * ((v251 - v252) >> 2);
                    v253[1] = 0;
                    v253[2] = 0;
                    *v253 = &off_1E42E4A80;
                    *(_QWORD *)(a1 + 3264) = ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((ggl::DaVinci::TexturedCompressedMesh *)(v253 + 3), "/Debug/LitSphere");
                    v255 = *(std::__shared_weak_count **)(a1 + 3272);
                    *(_QWORD *)(a1 + 3272) = v253;
                    v256 = *(float32x4_t *)v521;
                    if (v255)
                    {
                      v257 = (unint64_t *)&v255->__shared_owners_;
                      do
                        v258 = __ldaxr(v257);
                      while (__stlxr(v258 - 1, v257));
                      if (!v258)
                      {
                        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                        std::__shared_weak_count::__release_weak(v255);
                        v256 = *(float32x4_t *)v521;
                      }
                    }
                    v259 = *(_QWORD *)(a1 + 3264);
                    v260 = **(_QWORD **)(v259 + 64);
                    v261 = *(_QWORD *)(v260 + 8) * v254;
                    v262 = *(_QWORD *)(v260 + 72);
                    v263 = *(_QWORD *)(v260 + 80) - v262;
                    if (v261 != v263)
                    {
                      if (v261 <= v263)
                      {
                        if (v261 < v263)
                          *(_QWORD *)(v260 + 80) = v262 + v261;
                      }
                      else
                      {
                        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v260 + 72, v261 - v263);
                        v256 = *(float32x4_t *)v521;
                      }
                      v264 = *(std::__shared_weak_count **)(v260 + 32);
                      *(_QWORD *)(v260 + 24) = 0;
                      *(_QWORD *)(v260 + 32) = 0;
                      if (v264)
                      {
                        v265 = (unint64_t *)&v264->__shared_owners_;
                        do
                          v266 = __ldaxr(v265);
                        while (__stlxr(v266 - 1, v265));
                        if (!v266)
                        {
                          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                          std::__shared_weak_count::__release_weak(v264);
                          v256 = *(float32x4_t *)v521;
                        }
                      }
                      *(_QWORD *)(v260 + 120) = 0;
                      *(_DWORD *)(v260 + 112) = 0;
                      v267 = *(_QWORD *)(v260 + 80) - *(_QWORD *)(v260 + 72);
                      *(_QWORD *)(v260 + 40) = 0;
                      *(_QWORD *)(v260 + 48) = v267;
                      *(_QWORD *)(v260 + 56) = 0;
                      *(_QWORD *)(v260 + 64) = v267;
                      v259 = *(_QWORD *)(a1 + 3264);
                      v260 = **(_QWORD **)(v259 + 64);
                      v261 = *(_QWORD *)(v260 + 8) * v254;
                    }
                    *(_QWORD *)&v549[8] = 0;
                    *(_QWORD *)v549 = 0;
                    *(_QWORD *)&v268 = 0;
                    *((_QWORD *)&v268 + 1) = v260;
                    if (v261)
                      v269 = *(_QWORD *)(v260 + 72);
                    else
                      v269 = 0;
                    *(_OWORD *)v549 = v268;
                    *(_QWORD *)&v549[16] = 0;
                    *(_QWORD *)&v549[24] = v261;
                    *(_QWORD *)&v549[40] = v269;
                    *(_WORD *)&v549[32] = 1;
                    v270 = *(_QWORD **)(v259 + 120);
                    if (!v270)
LABEL_392:
                      abort();
                    v271 = (uint64_t)(*((_QWORD *)&v250 + 1) - v250) >> 2;
                    while (1)
                    {
                      while (1)
                      {
                        v272 = v270[4];
                        if (v272 < 2)
                          break;
                        v270 = (_QWORD *)*v270;
                        if (!v270)
                          goto LABEL_392;
                      }
                      if (v272)
                        break;
                      v270 = (_QWORD *)v270[1];
                      if (!v270)
                        goto LABEL_392;
                    }
                    v273 = v270[5];
                    *(_QWORD *)&v539[8] = 0;
                    *(_QWORD *)v539 = 0;
                    v274 = *(_QWORD *)(v273 + 8) * v254;
                    *(_QWORD *)&v275 = 0;
                    *((_QWORD *)&v275 + 1) = v273;
                    if (v274)
                      v276 = *(__int16 **)(v273 + 72);
                    else
                      v276 = 0;
                    *(_OWORD *)v539 = v275;
                    *(_QWORD *)&v539[16] = 0;
                    *(_QWORD *)&v539[24] = v274;
                    *(_QWORD *)&v540 = v276;
                    *(_WORD *)&v539[32] = 1;
                    v277 = *(float **)__p;
                    v278 = *(float **)&__p[8];
                    if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
                    {
                      v279 = *(_QWORD *)&__p[8] - *(_QWORD *)__p - 12;
                      if (v279 <= 0x23
                        || ((v280 = v279 / 0xC, v269 + 4 < *(_QWORD *)__p + 12 * v280 + 12)
                          ? (_CF = *(_QWORD *)__p >= v269 + 8 * v280 + 8)
                          : (_CF = 1),
                            !_CF))
                      {
                        v283 = 0;
                        goto LABEL_408;
                      }
                      v282 = v280 + 1;
                      v283 = (v280 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                      v284 = v269 + 16;
                      v285 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
                      v286 = (float32x4_t)vdupq_n_s32(0x3E90019Du);
                      v287.i64[0] = 0x3F0000003F000000;
                      v287.i64[1] = 0x3F0000003F000000;
                      v288 = *(_QWORD *)__p;
                      v289 = v276;
                      v290 = v283;
                      do
                      {
                        v292 = *(int32x4_t *)(v288 + 16);
                        v291 = *(_OWORD *)(v288 + 32);
                        v293 = *(float32x4_t *)v288;
                        v294 = (float32x4_t)vrev64q_s32(v292);
                        v294.i32[0] = HIDWORD(*(_QWORD *)v288);
                        *(_DWORD *)(v284 - 12) = *(_QWORD *)(v288 + 8);
                        v293.i32[1] = v293.i32[3];
                        v293.i64[1] = __PAIR64__(DWORD1(v291), v292.u32[2]);
                        v294.i32[3] = DWORD2(v291);
                        *(int16x4_t *)v293.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v293, v285)));
                        *(int16x4_t *)v294.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v294, v285)));
                        *(_WORD *)(v284 - 16) = v293.i16[0];
                        *(_WORD *)(v284 - 8) = v293.i16[1];
                        *(_WORD *)v284 = v293.i16[2];
                        *(_WORD *)(v284 + 8) = v293.i16[3];
                        *(_WORD *)(v284 - 14) = v294.i16[0];
                        *(_WORD *)(v284 - 6) = v294.i16[1];
                        *(_WORD *)(v284 + 2) = v294.i16[2];
                        *(_WORD *)(v284 + 10) = v294.i16[3];
                        *(_DWORD *)(v284 - 4) = v292.i32[1];
                        *(_DWORD *)(v284 + 4) = v291;
                        *(_DWORD *)(v284 + 12) = HIDWORD(v291);
                        v557 = vld3q_f32((const float *)v288);
                        v288 += 48;
                        v295 = vdivq_f32(v256, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v557.val[0], v557.val[0]), v557.val[1], v557.val[1]), v557.val[2], v557.val[2])));
                        v296 = vmlaq_f32(v256, v557.val[2], v295);
                        v297 = vmulq_f32(v295, v286);
                        v298 = vdivq_f32(vmulq_f32(v297, v557.val[0]), v296);
                        v557.val[0] = vdivq_f32(vmulq_f32(v297, v557.val[1]), v296);
                        *(float16x4_t *)v557.val[1].f32 = vcvt_f16_f32(vaddq_f32(v298, v287));
                        *(float16x4_t *)v557.val[2].f32 = vcvt_f16_f32(vaddq_f32(v557.val[0], v287));
                        vst2_s16(v289, (int16x4x2_t)v557.val[1]);
                        v289 += 8;
                        v284 += 32;
                        v290 -= 4;
                      }
                      while (v290);
                      if (v282 != v283)
                      {
                        v277 += 3 * v283;
LABEL_408:
                        v299 = &v276[2 * v283 + 1];
                        v300 = (_DWORD *)(v269 + 8 * v283 + 4);
                        do
                        {
                          v301 = (int)(float)(v277[1] * 32767.0);
                          *((_WORD *)v300 - 2) = (int)(float)(*v277 * 32767.0);
                          *((_WORD *)v300 - 1) = v301;
                          *v300 = *((_DWORD *)v277 + 2);
                          v300 += 2;
                          v302 = v277[1];
                          v303 = v277[2];
                          v304 = 1.0
                               / sqrtf((float)((float)(*v277 * *v277) + (float)(v302 * v302)) + (float)(v303 * v303));
                          v305 = (float)(v304 * v303) + 1.0;
                          v306 = v304 * 0.28126;
                          _S2 = (float)((float)(v306 * *v277) / v305) + 0.5;
                          _S3 = (float)((float)(v306 * v302) / v305) + 0.5;
                          __asm
                          {
                            FCVT            H2, S2
                            FCVT            H3, S3
                          }
                          *(v299 - 1) = LOWORD(_S2);
                          *v299 = LOWORD(_S3);
                          v299 += 2;
                          v277 += 3;
                        }
                        while (v277 != v278);
                      }
                    }
                    v309 = (std::__shared_weak_count *)operator new(0xF8uLL);
                    v309->__shared_owners_ = 0;
                    v310 = (unint64_t *)&v309->__shared_owners_;
                    v309->__shared_weak_owners_ = 0;
                    v309->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
                    v311 = ggl::BufferData::BufferData((uint64_t)&v309[1], 2, 1, 0, 6, v271);
                    LODWORD(v309[10].__vftable) = 0;
                    v309[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
                    v309[1].__shared_owners_ = 2;
                    v309[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
                    v309[9].__shared_weak_owners_ = (uint64_t)"/Debug/LitSphere/IndexData";
                    if (*((_QWORD *)&v250 + 1) == (_QWORD)v250)
                      v313 = 0;
                    else
                      v313 = (__int16 *)v309[4].__vftable;
                    v315 = *((_QWORD *)&v553 + 1);
                    v314 = v553;
                    if ((_QWORD)v553 != *((_QWORD *)&v553 + 1))
                    {
                      v316 = *((_QWORD *)&v553 + 1) - v553 - 12;
                      if (v316 > 0x53)
                      {
                        v318 = v316 / 0xC + 1;
                        v319 = v318 & 0x3FFFFFFFFFFFFFF8;
                        v320 = (const float *)v553;
                        v321 = v313;
                        v322 = v318 & 0x3FFFFFFFFFFFFFF8;
                        do
                        {
                          v323 = v320;
                          *(float32x4x3_t *)v312.i8 = vld3q_f32(v323);
                          v323 += 12;
                          v558 = vld3q_f32(v323);
                          v559.val[0] = vuzp1q_s16(v312, (int16x8_t)v558.val[0]);
                          v559.val[1] = vuzp1q_s16(v324, (int16x8_t)v558.val[1]);
                          v559.val[2] = vuzp1q_s16(v325, (int16x8_t)v558.val[2]);
                          vst3q_s16(v321, v559);
                          v321 += 24;
                          v320 += 24;
                          v322 -= 8;
                        }
                        while (v322);
                        if (v318 != v319)
                        {
                          v317 = 3 * v319;
                          v314 += 12 * (v318 & 0x3FFFFFFFFFFFFFF8);
                          goto LABEL_420;
                        }
                      }
                      else
                      {
                        v317 = 0;
LABEL_420:
                        v326 = &v313[v317];
                        do
                        {
                          v312.i64[0] = *(_QWORD *)v314;
                          v312.i32[2] = *(_DWORD *)(v314 + 8);
                          v327 = vmovn_s32((int32x4_t)v312);
                          v326[2] = v327.i16[2];
                          *(_DWORD *)v326 = v327.i32[0];
                          v326 += 3;
                          v314 += 12;
                        }
                        while (v314 != v315);
                      }
                    }
                    v328 = 2 * v271;
                    v329 = *(_QWORD *)(a1 + 3264);
                    do
                      v330 = __ldxr(v310);
                    while (__stxr(v330 + 1, v310));
                    v331 = *(std::__shared_weak_count **)(v329 + 104);
                    *(_QWORD *)(v329 + 96) = v311;
                    *(_QWORD *)(v329 + 104) = v309;
                    if (v331)
                    {
                      v332 = (unint64_t *)&v331->__shared_owners_;
                      do
                        v333 = __ldaxr(v332);
                      while (__stlxr(v333 - 1, v332));
                      if (!v333)
                      {
                        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                        std::__shared_weak_count::__release_weak(v331);
                      }
                    }
                    if (v313 && *((_QWORD *)&v250 + 1) != (_QWORD)v250)
                    {
                      shared_weak_owners = v309[3].__shared_weak_owners_;
                      if (shared_weak_owners <= v328)
                        shared_weak_owners = v328;
                      v309[3].__shared_owners_ = 0;
                      v309[3].__shared_weak_owners_ = shared_weak_owners;
                    }
                    do
                      v335 = __ldaxr(v310);
                    while (__stlxr(v335 - 1, v310));
                    if (!v335)
                    {
                      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                      std::__shared_weak_count::__release_weak(v309);
                    }
                    if ((_QWORD)v540)
                    {
                      v336 = *(_QWORD *)&v539[16];
                      v337 = *(_QWORD *)&v539[24];
                      if (*(_QWORD *)&v539[24] != *(_QWORD *)&v539[16])
                      {
                        v338 = *(_QWORD **)&v539[8];
                        v339 = v539[32];
                        v340 = v539[33];
                        if (*(_QWORD *)v539 && *(_BYTE *)(*(_QWORD *)&v539[8] + 17) != 2)
                          (*(void (**)(void))(**(_QWORD **)v539 + 64))();
                        if (v339 && !v340)
                        {
                          v342 = v338[7];
                          v341 = v338[8];
                          if (v341 == v342)
                            v342 = v338[10] - v338[9];
                          if (v336 < v342)
                            v342 = v336;
                          if (v341 <= v337)
                            v341 = v337;
                          if (v341 == v342)
                            v341 = v342 + v338[10] - v338[9];
                          v338[7] = v342;
                          v338[8] = v341;
                        }
                      }
                    }
                    if (*(_QWORD *)&v549[40])
                    {
                      v343 = *(_QWORD *)&v549[16];
                      v344 = *(_QWORD *)&v549[24];
                      if (*(_QWORD *)&v549[24] != *(_QWORD *)&v549[16])
                      {
                        v345 = *(_QWORD **)&v549[8];
                        v346 = v549[32];
                        v347 = v549[33];
                        if (*(_QWORD *)v549 && *(_BYTE *)(*(_QWORD *)&v549[8] + 17) != 2)
                          (*(void (**)(void))(**(_QWORD **)v549 + 64))();
                        if (v346 && !v347)
                        {
                          v349 = v345[7];
                          v348 = v345[8];
                          if (v348 == v349)
                            v349 = v345[10] - v345[9];
                          if (v343 < v349)
                            v349 = v343;
                          if (v348 <= v344)
                            v348 = v344;
                          if (v348 == v349)
                            v348 = v349 + v345[10] - v345[9];
                          v345[7] = v349;
                          v345[8] = v348;
                        }
                      }
                    }
                    if ((_QWORD)v553)
                    {
                      *((_QWORD *)&v553 + 1) = v553;
                      operator delete((void *)v553);
                    }
                    v12 = a1;
                    v11 = a3;
                    if (*(_QWORD *)__p)
                    {
                      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                      operator delete(*(void **)__p);
                    }
                  }
                  v350 = 0;
                  v351 = *(_QWORD *)(a5 + 384);
                  v352 = v229[4];
                  v353 = v352 * 0.05 * *(float *)(v351 + 1168);
                  v354 = v352 * 0.05 * *(float *)(v351 + 1172);
                  v355 = v352 * 0.05 * *(float *)(v351 + 1176);
                  memset(&v549[40], 0, 40);
                  memset(&v549[8], 0, 32);
                  memset(v551, 0, 32);
                  v551[4] = 0x3FF0000000000000;
                  *(double *)v549 = v353;
                  *(double *)&v549[40] = v354;
                  v550 = v355;
                  v540 = 0u;
                  v542 = 0.0;
                  v541 = 0u;
                  memset(&v539[8], 0, 32);
                  *(_QWORD *)v539 = 0x3FF0000000000000;
                  *(_QWORD *)&v540 = 0x3FF0000000000000;
                  v544 = 0;
                  v543 = 1.0;
                  v548 = 0x3FF0000000000000;
                  v545 = v235;
                  v546 = v237;
                  v547 = v355;
                  v356 = *(unsigned __int8 *)(a5 + 24);
                  v357 = v356 != 255;
                  v358 = v356 == 255 && *(_BYTE *)(v11 + 5) != 0;
                  if (*(_BYTE *)(v11 + 7) && *(float *)(v11 + 68) >= 0.001)
                  {
                    v359 = fmax(v352 * 0.5, 250.0)
                         * (float)((float)(*(float *)(v11 + 64) * *(float *)(*(_QWORD *)(a5 + 8) + 624))
                                 * fmaxf((float)(*(float *)(v11 + 20) * 0.125) + -0.875, 0.0));
                    v350 = v359 >= 0.001;
                  }
                  gm::operator*<double,4,4,4>((double *)__p, (double *)v539, (double *)v549);
                  v518 = *(float64x2_t *)__p;
                  *(_OWORD *)v522 = *(_OWORD *)&__p[16];
                  v516 = v533;
                  v508 = v537;
                  v509 = v534;
                  v511 = v535;
                  v513 = v532;
                  v505 = v536;
                  md::InstanceData::InstanceData((uint64_t)&v529, 1u, 0);
                  v361 = *(_QWORD *)(v529 + 40);
                  v360 = *(_QWORD *)(v529 + 48);
                  v362 = *(_QWORD *)(v529 + 8);
                  memset(__p, 0, 24);
                  *(_QWORD *)&v363 = 0;
                  *((_QWORD *)&v363 + 1) = v529;
                  v364 = *(float32x4_t **)(v529 + 72);
                  *(_OWORD *)__p = v363;
                  *(_QWORD *)&__p[24] = (v360 - v361) / v362 * v362;
                  *(_QWORD *)&v532.f64[1] = v364;
                  LOWORD(v532.f64[0]) = 1;
                  *v364 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v518), *(float64x2_t *)v522);
                  v364[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v513), v516);
                  v364[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v509), v511);
                  v364[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v505), v508);
                  v530 = 0;
                  v487 = *(unsigned __int8 *)(a3 + 16);
                  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v553, v12 + 568, v358, 0, 0, 0, 0, 0, 0, 1u, 0, *(_BYTE *)(a3 + 9), 0, v357, v350, 0, 0, 0, *(_BYTE *)a3,
                    0,
                    0,
                    v487,
                    BYTE1(v487),
                    BYTE2(v487),
                    BYTE3(v487),
                    BYTE4(v487),
                    SBYTE5(v487),
                    HIWORD(v487),
                    0);
                  v365 = v553;
                  if (*((_QWORD *)&v553 + 1))
                  {
                    v366 = (unint64_t *)(*((_QWORD *)&v553 + 1) + 8);
                    do
                      v367 = __ldxr(v366);
                    while (__stxr(v367 + 1, v366));
                  }
                  if ((_QWORD)v365 && **(_QWORD **)(v365 + 40) == v249[1])
                  {
                    v371 = v249[2];
                    if (v371 && v371 != (_QWORD)v365)
                      ggl::PipelineSetup::resetData((uint64_t)v249);
                    if (*((_QWORD *)&v365 + 1))
                    {
                      v372 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                      do
                        v373 = __ldxr(v372);
                      while (__stxr(v373 + 1, v372));
                    }
                    v368 = (std::__shared_weak_count *)v249[3];
                    *((_OWORD *)v249 + 1) = v365;
                    if (v368)
                    {
                      v374 = (unint64_t *)&v368->__shared_owners_;
                      do
                        v370 = __ldaxr(v374);
                      while (__stlxr(v370 - 1, v374));
                      goto LABEL_497;
                    }
                  }
                  else
                  {
                    v368 = (std::__shared_weak_count *)v249[3];
                    v249[2] = 0;
                    v249[3] = 0;
                    if (v368)
                    {
                      v369 = (unint64_t *)&v368->__shared_owners_;
                      do
                        v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
LABEL_497:
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                        std::__shared_weak_count::__release_weak(v368);
                      }
                    }
                  }
                  if (*((_QWORD *)&v365 + 1))
                  {
                    v375 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                    do
                      v376 = __ldaxr(v375);
                    while (__stlxr(v376 - 1, v375));
                    if (!v376)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v365 + 1) + 16))(*((_QWORD *)&v365 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v365 + 1));
                    }
                  }
                  v377 = (std::__shared_weak_count *)*((_QWORD *)&v553 + 1);
                  if (*((_QWORD *)&v553 + 1))
                  {
                    v378 = (unint64_t *)(*((_QWORD *)&v553 + 1) + 8);
                    do
                      v379 = __ldaxr(v378);
                    while (__stlxr(v379 - 1, v378));
                    if (!v379)
                    {
                      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                      std::__shared_weak_count::__release_weak(v377);
                    }
                  }
                  v380 = (_BYTE *)v249[2];
                  if (v380[317])
                  {
                    v381 = v249[8];
                    *(_QWORD *)(v381 + 232) = 0;
                    v382 = v239[42];
                    *(_QWORD *)(v381 + 224) = v382;
                    v383 = v249[20];
                    v384 = v239[43];
                    if (v384)
                    {
                      v385 = (unint64_t *)(v384 + 8);
                      do
                        v386 = __ldxr(v385);
                      while (__stxr(v386 + 1, v385));
                    }
                    v387 = *(std::__shared_weak_count **)(v383 + 232);
                    *(_QWORD *)(v383 + 224) = v382;
                    *(_QWORD *)(v383 + 232) = v384;
                    if (v387)
                    {
                      v388 = (unint64_t *)&v387->__shared_owners_;
                      do
                        v389 = __ldaxr(v388);
                      while (__stlxr(v389 - 1, v388));
                      if (!v389)
                      {
                        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                        std::__shared_weak_count::__release_weak(v387);
                      }
                    }
                    v380 = (_BYTE *)v249[2];
                  }
                  if (v380[309])
                  {
                    v390 = v249[8];
                    *(_QWORD *)(v390 + 296) = 0;
                    v391 = *(_QWORD *)(v12 + 1880);
                    *(_QWORD *)(v390 + 288) = v391;
                    v392 = v249[20];
                    v393 = *(_QWORD *)(v12 + 1888);
                    if (v393)
                    {
                      v394 = (unint64_t *)(v393 + 8);
                      do
                        v395 = __ldxr(v394);
                      while (__stxr(v395 + 1, v394));
                    }
                    v396 = *(std::__shared_weak_count **)(v392 + 296);
                    *(_QWORD *)(v392 + 288) = v391;
                    *(_QWORD *)(v392 + 296) = v393;
                    if (v396)
                    {
                      v397 = (unint64_t *)&v396->__shared_owners_;
                      do
                        v398 = __ldaxr(v397);
                      while (__stlxr(v398 - 1, v397));
                      if (!v398)
                      {
                        ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                        std::__shared_weak_count::__release_weak(v396);
                      }
                    }
                    v380 = (_BYTE *)v249[2];
                  }
                  if (v380[331])
                  {
                    v399 = v249[8];
                    *(_QWORD *)(v399 + 120) = 0;
                    v400 = *(_QWORD *)(v12 + 1832);
                    *(_QWORD *)(v399 + 112) = v400;
                    v401 = v249[20];
                    v402 = *(_QWORD *)(v12 + 1840);
                    if (v402)
                    {
                      v403 = (unint64_t *)(v402 + 8);
                      do
                        v404 = __ldxr(v403);
                      while (__stxr(v404 + 1, v403));
                    }
                    v405 = *(std::__shared_weak_count **)(v401 + 120);
                    *(_QWORD *)(v401 + 112) = v400;
                    *(_QWORD *)(v401 + 120) = v402;
                    if (v405)
                    {
                      v406 = (unint64_t *)&v405->__shared_owners_;
                      do
                        v407 = __ldaxr(v406);
                      while (__stlxr(v407 - 1, v406));
                      if (!v407)
                      {
                        ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                        std::__shared_weak_count::__release_weak(v405);
                      }
                    }
                    v380 = (_BYTE *)v249[2];
                  }
                  if (v380[330])
                  {
                    v408 = v249[8];
                    *(_QWORD *)(v408 + 104) = 0;
                    v409 = *(_QWORD *)(v12 + 1816);
                    *(_QWORD *)(v408 + 96) = v409;
                    v410 = v249[20];
                    v411 = *(_QWORD *)(v12 + 1824);
                    if (v411)
                    {
                      v412 = (unint64_t *)(v411 + 8);
                      do
                        v413 = __ldxr(v412);
                      while (__stxr(v413 + 1, v412));
                    }
                    v414 = *(std::__shared_weak_count **)(v410 + 104);
                    *(_QWORD *)(v410 + 96) = v409;
                    *(_QWORD *)(v410 + 104) = v411;
                    if (v414)
                    {
                      v415 = (unint64_t *)&v414->__shared_owners_;
                      do
                        v416 = __ldaxr(v415);
                      while (__stlxr(v416 - 1, v415));
                      if (!v416)
                      {
                        ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                        std::__shared_weak_count::__release_weak(v414);
                      }
                    }
                  }
                  if (*(_BYTE *)(v249[2] + 326))
                  {
                    v417 = v249[8];
                    *(_QWORD *)(v417 + 200) = 0;
                    v418 = v247[4];
                    *(_QWORD *)(v417 + 192) = v418;
                    v419 = v249[20];
                    v420 = v247[5];
                    if (v420)
                    {
                      v421 = (unint64_t *)(v420 + 8);
                      do
                        v422 = __ldxr(v421);
                      while (__stxr(v422 + 1, v421));
                    }
                    v423 = *(std::__shared_weak_count **)(v419 + 200);
                    *(_QWORD *)(v419 + 192) = v418;
                    *(_QWORD *)(v419 + 200) = v420;
                    if (v423)
                    {
                      v424 = (unint64_t *)&v423->__shared_owners_;
                      do
                        v425 = __ldaxr(v424);
                      while (__stlxr(v425 - 1, v424));
                      if (!v425)
                      {
                        ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
                        std::__shared_weak_count::__release_weak(v423);
                      }
                    }
                  }
                  v426 = v249[8];
                  *(_QWORD *)(v426 + 56) = 0;
                  v427 = v247[2];
                  *(_QWORD *)(v426 + 48) = v427;
                  v428 = v249[20];
                  v429 = v247[3];
                  if (v429)
                  {
                    v430 = (unint64_t *)(v429 + 8);
                    do
                      v431 = __ldxr(v430);
                    while (__stxr(v431 + 1, v430));
                  }
                  v432 = *(std::__shared_weak_count **)(v428 + 56);
                  *(_QWORD *)(v428 + 48) = v427;
                  *(_QWORD *)(v428 + 56) = v429;
                  if (v432)
                  {
                    v433 = (unint64_t *)&v432->__shared_owners_;
                    do
                      v434 = __ldaxr(v433);
                    while (__stlxr(v434 - 1, v433));
                    if (!v434)
                    {
                      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                      std::__shared_weak_count::__release_weak(v432);
                    }
                  }
                  v553 = 0uLL;
                  md::DaVinciGroundRenderLayer::setupCommonGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(v249, (_QWORD *)a5, v239, v529, *((uint64_t *)&v529 + 1), (uint64_t *)&v553, a3);
                  v435 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v12 + 1712));
                  v436 = v249[8];
                  *(_QWORD *)(v436 + 256) = v435;
                  *(_QWORD *)(v436 + 264) = 0;
                  v437 = v249[20];
                  v438 = *(std::__shared_weak_count **)(v437 + 264);
                  *(_QWORD *)(v437 + 256) = 0;
                  *(_QWORD *)(v437 + 264) = 0;
                  if (v438)
                  {
                    v439 = (unint64_t *)&v438->__shared_owners_;
                    do
                      v440 = __ldaxr(v439);
                    while (__stlxr(v440 - 1, v439));
                    if (!v440)
                    {
                      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                      std::__shared_weak_count::__release_weak(v438);
                    }
                  }
                  v441 = (_QWORD *)*((_QWORD *)a2 + 1);
                  v442 = (int8x8_t)v441[1];
                  if (v442)
                  {
                    v443 = (uint8x8_t)vcnt_s8(v442);
                    v443.i16[0] = vaddlv_u8(v443);
                    if (v443.u32[0] > 1uLL)
                    {
                      v444 = 0xE42D19AFCA302E68;
                      if (*(_QWORD *)&v442 <= 0xE42D19AFCA302E68)
                        v444 = 0xE42D19AFCA302E68 % *(_QWORD *)&v442;
                    }
                    else
                    {
                      v444 = (*(_QWORD *)&v442 - 1) & 0xE42D19AFCA302E68;
                    }
                    v445 = *(_QWORD **)(*v441 + 8 * v444);
                    if (v445)
                    {
                      v446 = (_QWORD *)*v445;
                      if (v446)
                      {
                        if (v443.u32[0] < 2uLL)
                        {
                          v447 = *(_QWORD *)&v442 - 1;
                          while (1)
                          {
                            v449 = v446[1];
                            if (v449 == 0xE42D19AFCA302E68)
                            {
                              if (v446[2] == 0xE42D19AFCA302E68)
                                goto LABEL_590;
                            }
                            else if ((v449 & v447) != v444)
                            {
                              goto LABEL_590;
                            }
                            v446 = (_QWORD *)*v446;
                            if (!v446)
                              goto LABEL_590;
                          }
                        }
                        do
                        {
                          v448 = v446[1];
                          if (v448 == 0xE42D19AFCA302E68)
                          {
                            if (v446[2] == 0xE42D19AFCA302E68)
                              break;
                          }
                          else
                          {
                            if (v448 >= *(_QWORD *)&v442)
                              v448 %= *(_QWORD *)&v442;
                            if (v448 != v444)
                              break;
                          }
                          v446 = (_QWORD *)*v446;
                        }
                        while (v446);
                      }
                    }
                  }
LABEL_590:
                  md::DaVinciGroundRenderLayer::setupSSAOGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(v12, (uint64_t)v247, v249, v239, *(_BYTE *)a3, 1.0);
                  v450 = *(uint64_t **)(v12 + 3128);
                  v451 = *v450;
                  v452 = (std::__shared_weak_count *)v450[1];
                  if (v452)
                  {
                    v453 = (unint64_t *)&v452->__shared_owners_;
                    do
                      v454 = __ldxr(v453);
                    while (__stxr(v454 + 1, v453));
                    v455 = v249 + 12;
                    *(_QWORD *)(v249[12] + 16) = v451;
                    v456 = (unint64_t *)&v452->__shared_owners_;
                    do
                      v457 = __ldaxr(v456);
                    while (__stlxr(v457 - 1, v456));
                    if (!v457)
                    {
                      ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                      std::__shared_weak_count::__release_weak(v452);
                    }
                  }
                  else
                  {
                    v455 = v249 + 12;
                    *(_QWORD *)(v249[12] + 16) = v451;
                  }
                  v458 = *(uint64_t **)(v12 + 3128);
                  v459 = *v458;
                  v460 = (std::__shared_weak_count *)v458[1];
                  if (v460)
                  {
                    v461 = (unint64_t *)&v460->__shared_owners_;
                    do
                      v462 = __ldxr(v461);
                    while (__stxr(v462 + 1, v461));
                    *(_QWORD *)(*v455 + 40) = v459;
                    do
                      v463 = __ldaxr(v461);
                    while (__stlxr(v463 - 1, v461));
                    if (!v463)
                    {
                      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                      std::__shared_weak_count::__release_weak(v460);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(*v455 + 40) = v459;
                  }
                  v464 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v12 + 1704));
                  v465 = v249[8];
                  *(_QWORD *)(v465 + 80) = v464;
                  *(_QWORD *)(v465 + 88) = 0;
                  v466 = v249[20];
                  v467 = *(std::__shared_weak_count **)(v466 + 88);
                  *(_QWORD *)(v466 + 80) = 0;
                  *(_QWORD *)(v466 + 88) = 0;
                  if (v467)
                  {
                    v468 = (unint64_t *)&v467->__shared_owners_;
                    do
                      v469 = __ldaxr(v468);
                    while (__stlxr(v469 - 1, v468));
                    if (!v469)
                    {
                      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                      std::__shared_weak_count::__release_weak(v467);
                    }
                  }
                  md::DaVinciGroundRenderLayer::setupStyleConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(v12, (uint64_t)v249, a5, a3);
                  md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(v12, (uint64_t)v249, &v538);
                  if (v350)
                    md::DaVinciGroundRenderLayer::setupStyleGroundOcclusionConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(v12, v249, (uint64_t)v229, a5, a3);
                  v470 = (v351 >> 4) | 0x300;
                  v471 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v12 + 2992), 3, 1, 1, 0, 0, *(unsigned __int8 *)(a3 + 1), 3);
                  v472 = *(_QWORD *)(v12 + 3264);
                  v473 = (*(_QWORD *)(*(_QWORD *)(v472 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(v472 + 96) + 40)) >> 1;
                  v553 = *(_OWORD *)v552;
                  v554 = *(_OWORD *)&v552[16];
                  v555 = *(_DWORD *)&v552[32];
                  v474 = *(_QWORD **)(v12 + 3112);
                  v475 = v474[1];
                  if (v475 == *(_QWORD *)(v12 + 3120))
                  {
                    v474 = (_QWORD *)*v474;
                    if (!v474)
                    {
                      v474 = malloc_type_malloc(120 * v475 + 16, 0xB644C221uLL);
                      *v474 = 0;
                      v474[1] = 0;
                      **(_QWORD **)(v12 + 3112) = v474;
                    }
                    *(_QWORD *)(v12 + 3112) = v474;
                    v475 = v474[1];
                  }
                  v476 = (int64x2_t *)&v474[15 * v475];
                  v474[1] = v475 + 1;
                  v476[1].i64[0] = (uint64_t)&off_1E42B59B0;
                  ++v476;
                  v476[1].i64[0] = (uint64_t)"";
                  v476[1].i64[1] = v471;
                  v476[2].i64[0] = (uint64_t)v249;
                  v476[2].i64[1] = 0;
                  v476[3].i64[0] = v470;
                  v476[3].i32[2] = 1065353216;
                  v476[3].i32[3] = v553;
                  v476[6] = vdupq_n_s64(1uLL);
                  v476[7].i64[0] = 0;
                  v476[4].i64[0] = v472;
                  v476[4].i64[1] = 0;
                  v476[5].i64[0] = v473;
                  v476[5].i64[1] = 0;
                  v476[6].i64[0] = 1;
                  ggl::CommandBuffer::pushRenderItem(a9, (ggl::RenderItem *)v476);
                  if (*(_QWORD *)&v532.f64[1])
                  {
                    v477 = *(_OWORD *)&__p[16];
                    if (*(_QWORD *)&__p[24] != *(_QWORD *)&__p[16])
                    {
                      v478 = *(_QWORD **)&__p[8];
                      v479 = LOBYTE(v532.f64[0]);
                      v480 = BYTE1(v532.f64[0]);
                      if (*(_QWORD *)__p && *(_BYTE *)(*(_QWORD *)&__p[8] + 17) != 2)
                        (*(void (**)(void))(**(_QWORD **)__p + 64))();
                      if (v479 && !v480)
                      {
                        v482 = v478[7];
                        v481 = v478[8];
                        if (v481 == v482)
                          v482 = v478[10] - v478[9];
                        if ((unint64_t)v477 < v482)
                          v482 = v477;
                        if (v481 <= *((_QWORD *)&v477 + 1))
                          v481 = *((_QWORD *)&v477 + 1);
                        if (v481 == v482)
                          v481 = v482 + v478[10] - v478[9];
                        v478[7] = v482;
                        v478[8] = v481;
                      }
                    }
                  }
                  v483 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
                  if (*((_QWORD *)&v529 + 1))
                  {
                    v484 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
                    do
                      v485 = __ldaxr(v484);
                    while (__stlxr(v485 - 1, v484));
                    if (!v485)
                    {
                      ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                      std::__shared_weak_count::__release_weak(v483);
                    }
                  }
                  return;
                }
              }
              else
              {
                if (v244 >= *(_QWORD *)&v221)
                  v244 %= *(_QWORD *)&v221;
                if (v244 != v241)
                  goto LABEL_365;
              }
              v243 = (_QWORD *)*v243;
              if (!v243)
                goto LABEL_365;
            }
          }
LABEL_331:
          v229 = 0;
          goto LABEL_332;
        }
      }
      else
      {
        if (v226 >= *(_QWORD *)&v221)
          v226 %= *(_QWORD *)&v221;
        if (v226 != v223)
          goto LABEL_331;
      }
      v225 = (_QWORD *)*v225;
      if (!v225)
        goto LABEL_331;
    }
  }
}

void sub_19FE0C6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;
  void *v73;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x280]);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x300]);
  v73 = *(void **)(v71 - 192);
  if (v73)
  {
    *(_QWORD *)(v71 - 184) = v73;
    operator delete(v73);
  }
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19FE0C790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  JUMPOUT(0x19FE0C7C8);
}

void sub_19FE0C7B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 232);
  _Unwind_Resume(a1);
}

int8x16_t *md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator()(int8x16_t *a1, int8x16_t *a2, _QWORD *a3, uint64_t a4)
{
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const std::nothrow_t *v17;
  void *v18;
  BOOL v19;
  void *v20;
  _QWORD *v22[2];

  v4 = a1;
  v22[0] = (_QWORD *)a4;
  v22[1] = a3;
  if (a1 != a2)
  {
    v5 = *a3;
    if (*(_BYTE *)a4)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v5 + 8 * v4->i64[0]);
        if (!*(_BYTE *)(v6 + 147) || *(unsigned __int8 *)(v6 + 145) != *(unsigned __int8 *)(a4 + 1))
          break;
        v4 = (int8x16_t *)((char *)v4 + 8);
        if (v4 == a2)
          return a2;
      }
    }
    else
    {
      while (*(_BYTE *)(*(_QWORD *)(v5 + 8 * v4->i64[0]) + 147))
      {
        v4 = (int8x16_t *)((char *)v4 + 8);
        if (v4 == a2)
          return a2;
      }
    }
    if (*(_BYTE *)a4)
    {
      v8 = (int8x16_t *)((char *)a2 - 8);
      while (v8 != v4)
      {
        v9 = v8->i64[0];
        v8 = (int8x16_t *)((char *)v8 - 8);
        v10 = *(_QWORD *)(v5 + 8 * v9);
        if (*(_BYTE *)(v10 + 147))
          v11 = *(unsigned __int8 *)(v10 + 145) == *(unsigned __int8 *)(a4 + 1);
        else
          v11 = 0;
        if (v11)
          goto LABEL_24;
      }
    }
    else
    {
      v8 = (int8x16_t *)((char *)a2 - 8);
      while (v8 != v4)
      {
        v12 = v8->i64[0];
        v8 = (int8x16_t *)((char *)v8 - 8);
        if (*(_BYTE *)(*(_QWORD *)(v5 + 8 * v12) + 147))
        {
LABEL_24:
          v13 = &v8->i64[1];
          v14 = (char *)&v8->u64[1] - (char *)v4;
          v15 = (v14 >> 3) + 1;
          if (v14 < 17)
          {
LABEL_31:
            v20 = 0;
            v16 = 0;
          }
          else
          {
            if (v15 >= 0xFFFFFFFFFFFFFFFLL)
              v16 = 0xFFFFFFFFFFFFFFFLL;
            else
              v16 = (v14 >> 3) + 1;
            v17 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            while (1)
            {
              v18 = operator new(8 * v16, v17);
              if (v18)
                break;
              v19 = v16 > 1;
              v16 >>= 1;
              if (!v19)
                goto LABEL_31;
            }
            v20 = v18;
          }
          v4 = (int8x16_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v4, v13, v22, v15, (unint64_t)v20, v16);
          if (v20)
            operator delete(v20);
          return v4;
        }
      }
    }
  }
  return v4;
}

void md::DaVinciGroundRenderLayer::layoutShadowMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, uint64_t a9, unsigned __int8 a10, _QWORD *a11)
{
  _BOOL4 v16;
  int8x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  int v39;
  void *v40;
  int v42;
  std::__shared_weak_count_vtbl *v43;
  uint64_t shared_weak_owners;
  unint64_t shared_owners;
  __int128 v46;
  std::__shared_weak_count_vtbl *v47;
  ggl::PipelineSetup *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t *v55;
  unint64_t v56;
  ggl::PipelineSetup *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  float64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  float64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  int v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  char *v105;
  uint64_t v106;
  int v107;
  int v108;
  BOOL v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  BOOL v115;
  unsigned __int8 v116;
  _QWORD *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  ggl::PipelineSetup *v132;
  float64x2_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  float64_t v145;
  unint64_t *v146;
  unint64_t v147;
  ggl::PipelineSetup *v148;
  float64x2_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  float32x4_t *v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  _BYTE *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  unint64_t v240;
  BOOL v241;
  _QWORD *v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  int64x2_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  float64x2_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unsigned __int16 v278;
  unsigned __int16 v279;
  unsigned __int16 v280;
  uint64_t *v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  _QWORD *v287;
  int v288;
  uint64_t *v289;
  int v290;
  unsigned int v291;
  unsigned __int8 **v292;
  BOOL v293;
  uint64_t v296[2];
  float64x2_t v297;
  uint64_t v298[2];
  float64x2_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count *v303;
  __int128 v304;
  _BYTE v305[104];
  uint64_t v306[2];
  std::__shared_weak_count *v307;
  std::__shared_weak_count *v308;
  uint64_t v309[2];
  std::__shared_weak_count *v310;
  std::__shared_weak_count *v311;
  __int128 v312;
  unint64_t v313;
  unint64_t v314;
  __int16 v315;
  std::__shared_weak_count_vtbl *v316;
  std::__shared_weak_count *v317;
  uint64_t v318;
  char v319;
  float64x2_t v320;
  _BYTE v321[112];

  v16 = *(_BYTE *)(a3 + 5) != 0;
  v290 = *(unsigned __int8 *)(a4 + 24);
  v293 = v290 != 255;
  if (v290 != 255)
    v16 = 0;
  v291 = v16;
  v17 = (int8x8_t)a2[1];
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v17 <= 0x1AF456233693CD46uLL)
      v19 = 0x1AF456233693CD46uLL % *(_QWORD *)&v17;
    else
      v19 = 0x1AF456233693CD46;
  }
  else
  {
    v19 = (*(_QWORD *)&v17 - 1) & 0x1AF456233693CD46;
  }
  v20 = *a2;
  v21 = *(_QWORD **)(*a2 + 8 * v19);
  if (!v21)
    goto LABEL_26;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_26;
  if (v18.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0x1AF456233693CD46)
      {
        if (v22[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v24 & (*(_QWORD *)&v17 - 1)) != v19)
      {
        goto LABEL_26;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v23 = v22[1];
    if (v23 == 0x1AF456233693CD46)
      break;
    if (v23 >= *(_QWORD *)&v17)
      v23 %= *(_QWORD *)&v17;
    if (v23 != v19)
      goto LABEL_26;
LABEL_13:
    v22 = (_QWORD *)*v22;
    if (!v22)
      goto LABEL_26;
  }
  if (v22[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0x1AF456233693CD46)
  {
    v285 = *(_QWORD *)(v25 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v285 = 0;
LABEL_27:
  if (v18.u32[0] >= 2uLL)
  {
    v28 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v17 <= 0x41E8D6E445F4145uLL)
      v28 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v17;
    v27 = **(_QWORD ***)(v20 + 8 * v28);
    v26 = *(_QWORD *)&v17 - 1;
    while (v27[1] != 0x41E8D6E445F4145 || v27[2] != 0x41E8D6E445F4145)
      v27 = (_QWORD *)*v27;
  }
  else
  {
    v26 = *(_QWORD *)&v17 - 1;
    v27 = *(_QWORD **)(v20 + 8 * ((*(_QWORD *)&v17 - 1) & 0x41E8D6E445F4145));
    do
    {
      do
        v27 = (_QWORD *)*v27;
      while (v27[1] != 0x41E8D6E445F4145);
    }
    while (v27[2] != 0x41E8D6E445F4145);
  }
  v29 = v27[5];
  if (v18.u32[0] > 1uLL)
  {
    v30 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v17 <= 0x8BD499FBD96FBB9ELL)
      v30 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v17;
  }
  else
  {
    v30 = v26 & 0x8BD499FBD96FBB9ELL;
  }
  v31 = *(_QWORD *)(v29 + 32);
  v32 = *(_QWORD **)(*a2 + 8 * v30);
  if (!v32 || (v33 = (_QWORD *)*v32) == 0)
  {
LABEL_61:
    v38 = 0;
    goto LABEL_62;
  }
  if (v18.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v33[1];
      if (v34 == 0x8BD499FBD96FBB9ELL)
      {
        if (v33[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_58;
      }
      else if ((v34 & v26) != v30)
      {
        goto LABEL_61;
      }
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_61;
    }
  }
  while (2)
  {
    v35 = v33[1];
    if (v35 != 0x8BD499FBD96FBB9ELL)
    {
      if (v35 >= *(_QWORD *)&v17)
        v35 %= *(_QWORD *)&v17;
      if (v35 != v30)
        goto LABEL_61;
      goto LABEL_52;
    }
    if (v33[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_52:
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_61;
      continue;
    }
    break;
  }
LABEL_58:
  v36 = v33[5];
  if (*(_QWORD *)(v36 + 8) != 0x8BD499FBD96FBB9ELL)
    goto LABEL_61;
  v37 = *(_QWORD *)(v36 + 32);
  if (!v37 || *(float *)(v37 + 16) > 0.01)
    goto LABEL_61;
  v38 = *(unsigned __int8 *)(v37 + 3) != 0;
LABEL_62:
  v39 = *(unsigned __int8 *)(v31 + 224);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v288 = objc_msgSend(v40, "enableTileClipping");

  if (a5 != 1 || *(_BYTE *)(a3 + 17) == 0)
    v42 = 0;
  else
    v42 = a10;
  v289 = a7;
  if (!((!v38 | v291) & 1 | (v290 != 255)))
  {
    *(_QWORD *)&v320.f64[0] = &off_1E42B59B0;
    *(_QWORD *)v321 = "";
    memset(&v321[8], 0, 20);
    *(_QWORD *)&v321[32] = 0;
    *(_DWORD *)&v321[40] = 1065353216;
    memset(&v321[48], 0, 32);
    *(int64x2_t *)&v321[80] = vdupq_n_s64(1uLL);
    *(_QWORD *)&v321[96] = 0;
    if (!*(_QWORD *)(a1 + 3280))
      md::DaVinciGroundRenderResources::buildShadowPlane((md::DaVinciGroundRenderResources *)(a1 + 568));
    md::InstanceData::InstanceData((uint64_t)&v317, 1u, 0);
    shared_weak_owners = v317[1].__shared_weak_owners_;
    v43 = v317[2].__vftable;
    shared_owners = v317->__shared_owners_;
    v312 = 0uLL;
    *(_QWORD *)&v46 = 0;
    *((_QWORD *)&v46 + 1) = v317;
    v47 = v317[3].__vftable;
    v312 = v46;
    v313 = 0;
    v314 = ((unint64_t)v43 - shared_weak_owners) / shared_owners * shared_owners;
    v316 = v47;
    v315 = 1;
    LODWORD(v47->~__shared_weak_count) = 1065353216;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v47->~__shared_weak_count_0 + 4) = 0;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v47->~__shared_weak_count + 4) = 0;
    HIDWORD(v47->__on_zero_shared) = 1065353216;
    v47->__get_deleter = 0;
    v47->__on_zero_shared_weak = 0;
    LODWORD(v47[1].~__shared_weak_count) = 1065353216;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v47[1].~__shared_weak_count_0 + 4) = 0;
    *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v47[1].~__shared_weak_count + 4) = 0;
    HIDWORD(v47[1].__on_zero_shared) = 1065353216;
    v319 = 1;
    if (a10)
    {
      v48 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 2000));
      md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v310, a1 + 1408, 0, 0, 0, 0, v42 ^ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
        0,
        0,
        0,
        v290 == 255,
        0,
        0,
        0,
        0,
        0x100u,
        1u);
      v49 = (std::__shared_weak_count *)v318;
      v309[0] = (uint64_t)v317;
      v309[1] = v318;
      if (v318)
      {
        v50 = (unint64_t *)(v318 + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v304 = 0uLL;
      md::DaVinciGroundRenderLayer::setupDepthPipeline<ggl::DaVinci::LinearDepthPipelineSetup,ggl::DaVinci::LinearDepthPipelineState>(a1, v48, (uint64_t)v310, v311, v285, a4, 0, v309, (uint64_t *)&v304, a5, 0, &v320);
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v54 = v311;
      if (v311)
      {
        v55 = &v311->__shared_owners_;
        do
          v56 = __ldaxr((unint64_t *)v55);
        while (__stlxr(v56 - 1, (unint64_t *)v55));
LABEL_95:
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
    else
    {
      v57 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1680));
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v307, a1 + 1048, 0, 0, 0, 0, v42 ^ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
        0,
        0,
        0,
        v290 == 255,
        0,
        0,
        0,
        0,
        0,
        1u);
      v58 = (std::__shared_weak_count *)v318;
      v306[0] = (uint64_t)v317;
      v306[1] = v318;
      if (v318)
      {
        v59 = (unint64_t *)(v318 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v304 = 0uLL;
      md::DaVinciGroundRenderLayer::setupDepthPipeline<ggl::DaVinci::GroundShadowMapPipelineSetup,ggl::DaVinci::GroundShadowMapPipelineState>(a1, v57, (uint64_t)v307, v308, (_QWORD *)a4, 0, v306, (uint64_t *)&v304, a5, 0, &v320);
      if (v58)
      {
        v61 = (unint64_t *)&v58->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v54 = v308;
      if (v308)
      {
        v63 = &v308->__shared_owners_;
        do
          v56 = __ldaxr((unint64_t *)v63);
        while (__stlxr(v56 - 1, (unint64_t *)v63));
        goto LABEL_95;
      }
    }
    v64 = v39;
    *(_QWORD *)&v321[88] = 1;
    v65 = *(_QWORD *)(a1 + 3280);
    v66 = (*(_QWORD *)(*(_QWORD *)(v65 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(v65 + 96) + 40)) >> 1;
    v67 = v320.f64[1];
    v68 = *(_QWORD *)v321;
    *(_OWORD *)&v305[16] = *(_OWORD *)&v321[40];
    *(_OWORD *)&v305[32] = *(_OWORD *)&v321[56];
    *(_OWORD *)&v305[48] = *(_OWORD *)&v321[72];
    *(_OWORD *)&v305[64] = *(_OWORD *)&v321[88];
    v304 = *(_OWORD *)&v321[8];
    *(_OWORD *)v305 = *(_OWORD *)&v321[24];
    v69 = *(_QWORD **)(a1 + 3112);
    v70 = v69[1];
    if (v70 == *(_QWORD *)(a1 + 3120))
    {
      v69 = (_QWORD *)*v69;
      if (!v69)
      {
        v69 = malloc_type_malloc(120 * v70 + 16, 0xB644C221uLL);
        *v69 = 0;
        v69[1] = 0;
        **(_QWORD **)(a1 + 3112) = v69;
      }
      *(_QWORD *)(a1 + 3112) = v69;
      v70 = v69[1];
    }
    v71 = a8;
    v72 = &v69[15 * v70];
    v69[1] = v70 + 1;
    v72[2] = &off_1E42B59B0;
    *((float64_t *)v72 + 3) = v67;
    v72 += 2;
    v72[2] = v68;
    v74 = *(_OWORD *)&v305[48];
    v73 = *(_OWORD *)&v305[64];
    v75 = *(_OWORD *)&v305[32];
    *(_OWORD *)(v72 + 7) = *(_OWORD *)&v305[16];
    *(_OWORD *)(v72 + 9) = v75;
    *(_OWORD *)(v72 + 11) = v74;
    v76 = v304;
    *(_OWORD *)(v72 + 5) = *(_OWORD *)v305;
    *(_OWORD *)(v72 + 3) = v76;
    *(_OWORD *)(v72 + 13) = v73;
    v72[8] = v65;
    v72[9] = 0;
    v72[10] = v66;
    v72[11] = 0;
    v72[12] = 1;
    ggl::CommandBuffer::pushRenderItem(a9, (ggl::RenderItem *)v72);
    v39 = v64;
    if (v316)
    {
      v77 = v313;
      v78 = v314;
      if (v314 != v313)
      {
        v79 = (_QWORD *)*((_QWORD *)&v312 + 1);
        v80 = v315;
        v81 = HIBYTE(v315);
        if ((_QWORD)v312 && *(_BYTE *)(*((_QWORD *)&v312 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v312 + 64))();
        if (v80 && !v81)
        {
          v83 = v79[7];
          v82 = v79[8];
          if (v82 == v83)
            v83 = v79[10] - v79[9];
          if (v77 < v83)
            v83 = v77;
          if (v82 <= v78)
            v82 = v78;
          if (v82 == v83)
            v82 = v83 + v79[10] - v79[9];
          v79[7] = v83;
          v79[8] = v82;
        }
      }
    }
    v84 = (std::__shared_weak_count *)v318;
    a8 = v71;
    a7 = v289;
    if (v318)
    {
      v85 = (unint64_t *)(v318 + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
        if (a6 == v289)
          return;
LABEL_122:
        if (v39)
          v87 = 2;
        else
          v87 = 1;
        v286 = v87;
        v292 = (unsigned __int8 **)(a1 + 2992);
        if (a10)
          v88 = 232;
        else
          v88 = 216;
        v89 = 224;
        if (a10)
          v89 = 240;
        v283 = v89;
        v284 = v88;
        v287 = a8;
        v90 = a4 + 16 * a5;
        v281 = (uint64_t *)(v90 + 408);
        v282 = (uint64_t *)(v90 + 400);
        while (1)
        {
          v91 = *a6;
          v92 = *(_QWORD *)(*a8 + 8 * *a6);
          if (*(_BYTE *)(v92 + 64))
          {
            v93 = *(_QWORD *)(v92 + 48);
            v94 = *(_BYTE *)(v92 + 56);
            if (std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::find<md::UniqueRenderID>(a11, v93, v94))
            {
              goto LABEL_131;
            }
            std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::__emplace_unique_key_args<md::UniqueRenderID,md::UniqueRenderID const&>((uint64_t)a11, v93, v94, (_OWORD *)(v92 + 48));
          }
          if (*(_BYTE *)(v92 + 8) != 1)
            goto LABEL_146;
          v95 = *(_QWORD *)(*a8 + 8 * v91);
          if ((v286 & *(_BYTE *)(v95 + 376)) != 0)
          {
            v96 = *(double *)(v95 + 224);
            v97 = *(std::__shared_weak_count **)(v95 + 232);
            v320.f64[0] = v96;
            *(_QWORD *)&v320.f64[1] = v97;
            if (v97)
            {
              v98 = (unint64_t *)&v97->__shared_owners_;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            (*(void (**)(__int128 *__return_ptr, float))(**(_QWORD **)&v96 + 360))(&v304, *(float *)(a3 + 20));
            v100 = v304;
            v101 = BYTE1(v304);
            if (!v97)
              goto LABEL_144;
            v102 = (unint64_t *)&v97->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
              if (!v100)
              {
LABEL_146:
                *(_QWORD *)&v305[32] = 0;
                *(_QWORD *)&v305[16] = 0;
                *(_DWORD *)&v305[24] = 0;
                *(_DWORD *)&v305[40] = 1065353216;
                memset(&v305[48], 0, 32);
                v104 = 1;
                *(int64x2_t *)&v305[80] = vdupq_n_s64(1uLL);
                v105 = kShadowPassRenderItemName[a5];
                *(_QWORD *)&v305[96] = 0;
                *(_QWORD *)&v304 = &off_1E42B59B0;
                *(_OWORD *)v305 = (unint64_t)v105;
                v106 = *(_QWORD *)(v92 + 32);
                if (*(_DWORD *)(v106 + 16) <= 1u)
                  v104 = *(_BYTE *)(v106 + 20) == 0;
                v107 = *(unsigned __int8 *)(v92 + 147);
                v108 = *(unsigned __int8 *)(*(_QWORD *)(v92 + 216) + 61);
                v109 = !v104;
                v110 = *(_BYTE *)(a1 + 3560) != 3 && v109;
                if (v288)
                {
                  v111 = *(_QWORD *)(a4 + 248);
                  v112 = *(_QWORD *)(a4 + 256);
                  *(_QWORD *)&v312 = v111;
                  *((_QWORD *)&v312 + 1) = v112;
                  if (v112)
                  {
                    v113 = (unint64_t *)(v112 + 8);
                    do
                      v114 = __ldxr(v113);
                    while (__stxr(v114 + 1, v113));
                  }
                }
                else
                {
                  v111 = 0;
                  v312 = 0uLL;
                }
                if (*(_BYTE *)(v92 + 64))
                  v115 = 1;
                else
                  v115 = v111 == 0;
                v116 = !v115;
                if (a10)
                {
                  if (v290 == 255)
                  {
                    v148 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 2000));
                    HIBYTE(v280) = v108 == 1;
                    LOBYTE(v280) = 0;
                    md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v320, a1 + 1408, v291, 0, 0, 0, 1u, 0, 0, v107 != 0, v280, 0, 0, v293, 0, 0, 0, 0, 0,
                      0,
                      0,
                      0,
                      1u,
                      v116,
                      0,
                      0,
                      0,
                      0x100u,
                      v110);
                    v149 = v320;
                    v299 = v320;
                    a7 = v289;
                    if (*(_QWORD *)&v320.f64[1])
                    {
                      v150 = (unint64_t *)(*(_QWORD *)&v320.f64[1] + 8);
                      do
                        v151 = __ldxr(v150);
                      while (__stxr(v151 + 1, v150));
                    }
                    v152 = *(uint64_t **)(v92 + 32);
                    v153 = (std::__shared_weak_count *)v152[1];
                    v298[0] = *v152;
                    v298[1] = (uint64_t)v153;
                    if (v153)
                    {
                      v154 = (unint64_t *)&v153->__shared_owners_;
                      do
                        v155 = __ldxr(v154);
                      while (__stxr(v155 + 1, v154));
                    }
                    md::DaVinciGroundRenderLayer::setupDepthPipeline<ggl::DaVinci::LinearDepthPipelineSetup,ggl::DaVinci::LinearDepthPipelineState>(a1, v148, *(uint64_t *)&v149.f64[0], *(std::__shared_weak_count **)&v149.f64[1], v285, a4, v92, v298, (uint64_t *)&v312, a5, v293, &v304);
                    if (v153)
                    {
                      v156 = (unint64_t *)&v153->__shared_owners_;
                      do
                        v157 = __ldaxr(v156);
                      while (__stlxr(v157 - 1, v156));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                    v158 = *(std::__shared_weak_count **)&v299.f64[1];
                    a8 = v287;
                    if (*(_QWORD *)&v299.f64[1])
                    {
                      v159 = (unint64_t *)(*(_QWORD *)&v299.f64[1] + 8);
                      do
                        v160 = __ldaxr(v159);
                      while (__stlxr(v160 - 1, v159));
                      if (!v160)
                      {
                        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                        std::__shared_weak_count::__release_weak(v158);
                      }
                    }
                    v145 = v320.f64[1];
                    if (*(_QWORD *)&v320.f64[1])
                    {
                      v161 = (unint64_t *)(*(_QWORD *)&v320.f64[1] + 8);
                      do
                        v147 = __ldaxr(v161);
                      while (__stlxr(v147 - 1, v161));
                      goto LABEL_347;
                    }
                  }
                  else
                  {
                    v117 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 2008));
                    HIBYTE(v278) = v108 == 1;
                    LOBYTE(v278) = 0;
                    md::DaVinciPipelineStateManager<ggl::DaVinci::PackedLinearDepthPipelineState,std::shared_ptr<ggl::PackedLinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v317, a1 + 1528, v291, 0, 0, 0, 1u, 0, 0, v107 != 0, v278, 0, 0, v293, 0, 0, 0, 0, 0,
                      0,
                      0,
                      0,
                      0,
                      v116,
                      0,
                      0,
                      0,
                      0x100u,
                      v110);
                    v118 = v317;
                    v119 = (std::__shared_weak_count *)v318;
                    v302 = v317;
                    v303 = (std::__shared_weak_count *)v318;
                    if (v318)
                    {
                      v120 = (unint64_t *)(v318 + 8);
                      do
                        v121 = __ldxr(v120);
                      while (__stxr(v121 + 1, v120));
                    }
                    v122 = *(uint64_t **)(v92 + 32);
                    v124 = *v122;
                    v123 = (std::__shared_weak_count *)v122[1];
                    v300 = v124;
                    v301 = v123;
                    if (v123)
                    {
                      v125 = (unint64_t *)&v123->__shared_owners_;
                      do
                        v126 = __ldxr(v125);
                      while (__stxr(v126 + 1, v125));
                    }
                    if (v119)
                    {
                      v127 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v128 = __ldxr(v127);
                      while (__stxr(v128 + 1, v127));
                    }
                    if (!v118 || *(_QWORD *)v118[1].__shared_weak_owners_ != v117[1])
                    {
                      v129 = (std::__shared_weak_count *)v117[3];
                      v117[2] = 0;
                      v117[3] = 0;
                      if (v129)
                      {
                        v130 = (unint64_t *)&v129->__shared_owners_;
                        do
                          v131 = __ldaxr(v130);
                        while (__stlxr(v131 - 1, v130));
                        goto LABEL_232;
                      }
                      goto LABEL_233;
                    }
                    v162 = (std::__shared_weak_count *)v117[2];
                    if (v162 && v162 != v118)
                      ggl::PipelineSetup::resetData((uint64_t)v117);
                    if (v119)
                    {
                      v163 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v164 = __ldxr(v163);
                      while (__stxr(v164 + 1, v163));
                    }
                    v129 = (std::__shared_weak_count *)v117[3];
                    v117[2] = v118;
                    v117[3] = v119;
                    if (v129)
                    {
                      v165 = (unint64_t *)&v129->__shared_owners_;
                      do
                        v131 = __ldaxr(v165);
                      while (__stlxr(v131 - 1, v165));
LABEL_232:
                      if (!v131)
                      {
                        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                        std::__shared_weak_count::__release_weak(v129);
                        if (v119)
                          goto LABEL_234;
                        goto LABEL_237;
                      }
                    }
LABEL_233:
                    if (!v119)
                      goto LABEL_237;
LABEL_234:
                    v166 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v167 = __ldaxr(v166);
                    while (__stlxr(v167 - 1, v166));
                    if (v167)
                    {
LABEL_237:
                      if (v92)
                      {
LABEL_238:
                        if (BYTE4(v302[13].__vftable))
                        {
                          v168 = *(_QWORD **)(**(_QWORD **)(v92 + 216) + 120);
                          if (!v168)
LABEL_367:
                            abort();
                          while (1)
                          {
                            while (1)
                            {
                              v169 = v168[4];
                              if (v169 < 3)
                                break;
                              v168 = (_QWORD *)*v168;
                              if (!v168)
                                goto LABEL_367;
                            }
                            if (v169 == 2)
                              break;
                            v168 = (_QWORD *)v168[1];
                            if (!v168)
                              goto LABEL_367;
                          }
                          v170 = v117[4];
                          *(_QWORD *)(v170 + 16) = v168[5];
                          *(_QWORD *)(v170 + 24) = 0;
                          v171 = v117[16];
                          v172 = *(std::__shared_weak_count **)(v171 + 24);
                          *(_QWORD *)(v171 + 16) = 0;
                          *(_QWORD *)(v171 + 24) = 0;
                          if (v172)
                          {
                            v173 = (unint64_t *)&v172->__shared_owners_;
                            do
                              v174 = __ldaxr(v173);
                            while (__stlxr(v174 - 1, v173));
                            if (!v174)
                            {
                              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                              std::__shared_weak_count::__release_weak(v172);
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                      std::__shared_weak_count::__release_weak(v119);
                      if (v92)
                        goto LABEL_238;
                    }
                    v175 = (_QWORD *)v117[4];
                    v176 = v300;
                    *v175 = v300;
                    v175[1] = 0;
                    v177 = (_QWORD *)v117[16];
                    v178 = v301;
                    if (v301)
                    {
                      v179 = (unint64_t *)&v301->__shared_owners_;
                      do
                        v180 = __ldxr(v179);
                      while (__stxr(v180 + 1, v179));
                    }
                    v181 = (std::__shared_weak_count *)v177[1];
                    *v177 = v176;
                    v177[1] = v178;
                    if (v181)
                    {
                      v182 = (unint64_t *)&v181->__shared_owners_;
                      do
                        v183 = __ldaxr(v182);
                      while (__stlxr(v183 - 1, v182));
                      if (!v183)
                      {
                        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                        std::__shared_weak_count::__release_weak(v181);
                      }
                    }
                    v184 = v117[8];
                    *(_QWORD *)(v184 + 40) = 0;
                    v185 = *v282;
                    *(_QWORD *)(v184 + 32) = *v282;
                    v186 = v117[20];
                    v187 = *v281;
                    if (*v281)
                    {
                      v188 = (unint64_t *)(v187 + 8);
                      do
                        v189 = __ldxr(v188);
                      while (__stxr(v189 + 1, v188));
                    }
                    v190 = *(std::__shared_weak_count **)(v186 + 40);
                    *(_QWORD *)(v186 + 32) = v185;
                    *(_QWORD *)(v186 + 40) = v187;
                    if (v190)
                    {
                      v191 = (unint64_t *)&v190->__shared_owners_;
                      do
                        v192 = __ldaxr(v191);
                      while (__stlxr(v192 - 1, v191));
                      if (!v192)
                      {
                        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                        std::__shared_weak_count::__release_weak(v190);
                      }
                    }
                    v193 = (_QWORD *)v117[8];
                    v193[1] = 0;
                    v194 = *(_QWORD *)(a4 + 216);
                    *v193 = v194;
                    v195 = (_QWORD *)v117[20];
                    v196 = *(_QWORD *)(a4 + 224);
                    if (v196)
                    {
                      v197 = (unint64_t *)(v196 + 8);
                      do
                        v198 = __ldxr(v197);
                      while (__stxr(v198 + 1, v197));
                    }
                    v199 = (std::__shared_weak_count *)v195[1];
                    *v195 = v194;
                    v195[1] = v196;
                    if (v199)
                    {
                      v200 = (unint64_t *)&v199->__shared_owners_;
                      do
                        v201 = __ldaxr(v200);
                      while (__stlxr(v201 - 1, v200));
                      if (!v201)
                      {
                        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                        std::__shared_weak_count::__release_weak(v199);
                      }
                    }
                    v202 = v117[8];
                    *(_QWORD *)(v202 + 24) = 0;
                    v203 = *(_QWORD *)(a4 + 232);
                    *(_QWORD *)(v202 + 16) = v203;
                    v204 = v117[20];
                    v205 = *(_QWORD *)(a4 + 240);
                    if (v205)
                    {
                      v206 = (unint64_t *)(v205 + 8);
                      do
                        v207 = __ldxr(v206);
                      while (__stxr(v207 + 1, v206));
                    }
                    v208 = *(std::__shared_weak_count **)(v204 + 24);
                    *(_QWORD *)(v204 + 16) = v203;
                    *(_QWORD *)(v204 + 24) = v205;
                    if (v208)
                    {
                      v209 = (unint64_t *)&v208->__shared_owners_;
                      do
                        v210 = __ldaxr(v209);
                      while (__stlxr(v210 - 1, v209));
                      if (!v210)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                    if (LOBYTE(v302[14].__vftable))
                    {
                      v211 = v117[8];
                      v212 = v312;
                      *(_QWORD *)(v211 + 64) = v312;
                      *(_QWORD *)(v211 + 72) = 0;
                      v213 = v117[20];
                      if (*((_QWORD *)&v212 + 1))
                      {
                        v214 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
                        do
                          v215 = __ldxr(v214);
                        while (__stxr(v215 + 1, v214));
                      }
                      v216 = *(std::__shared_weak_count **)(v213 + 72);
                      *(_OWORD *)(v213 + 64) = v212;
                      if (v216)
                      {
                        v217 = (unint64_t *)&v216->__shared_owners_;
                        do
                          v218 = __ldaxr(v217);
                        while (__stlxr(v218 - 1, v217));
                        if (!v218)
                        {
                          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                          std::__shared_weak_count::__release_weak(v216);
                        }
                      }
                    }
                    v219 = *(_QWORD **)(a4 + 432);
                    v220 = v219[1];
                    v221 = (float32x4_t *)v219[9];
                    gm::operator*<double,4,4,4>(v320.f64, (double *)(v285 + 3160), (double *)(a4 + 88));
                    v222 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v321[16]), *(float64x2_t *)&v321[32]);
                    v223 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v321[48]), *(float64x2_t *)&v321[64]);
                    v224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v321[80]), *(float64x2_t *)&v321[96]);
                    *v221 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v320), *(float64x2_t *)v321);
                    v221[1] = v222;
                    v221[2] = v223;
                    v221[3] = v224;
                    v225 = 1.0 / *(double *)(v285 + 976);
                    v221[4].f32[0] = v225;
                    v226 = v117[8];
                    *(_QWORD *)(v226 + 48) = v219;
                    *(_QWORD *)(v226 + 56) = 0;
                    v227 = v117[20];
                    v228 = *(_QWORD *)(a4 + 440);
                    if (v228)
                    {
                      v229 = (unint64_t *)(v228 + 8);
                      do
                        v230 = __ldxr(v229);
                      while (__stxr(v230 + 1, v229));
                    }
                    v231 = *(std::__shared_weak_count **)(v227 + 56);
                    *(_QWORD *)(v227 + 48) = v219;
                    *(_QWORD *)(v227 + 56) = v228;
                    if (v231)
                    {
                      v232 = (unint64_t *)&v231->__shared_owners_;
                      do
                        v233 = __ldaxr(v232);
                      while (__stlxr(v233 - 1, v232));
                      if (!v233)
                      {
                        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                        std::__shared_weak_count::__release_weak(v231);
                      }
                    }
                    v234 = v219[8];
                    if (v234 <= v220)
                      v234 = v220;
                    v219[7] = 0;
                    v219[8] = v234;
                    a7 = v289;
                    if (v92)
                    {
                      v235 = *(_BYTE **)(v92 + 216);
                      if (v235[61] == 1)
                      {
                        v237 = (_QWORD *)(*(_QWORD *)v235 + 120);
                        v236 = (_QWORD *)*v237;
                        if (!*v237)
                          goto LABEL_318;
                        v238 = v237;
                        v239 = (_QWORD *)*v237;
                        do
                        {
                          v240 = v239[4];
                          v241 = v240 >= 2;
                          if (v240 >= 2)
                            v242 = v239;
                          else
                            v242 = v239 + 1;
                          if (v241)
                            v238 = v239;
                          v239 = (_QWORD *)*v242;
                        }
                        while (*v242);
                        if (v238 != v237 && v238[4] <= 2uLL)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              v258 = v236[4];
                              if (v258 < 3)
                                break;
                              v236 = (_QWORD *)*v236;
                              if (!v236)
                                goto LABEL_367;
                            }
                            if (v258 == 2)
                              break;
                            v236 = (_QWORD *)v236[1];
                            if (!v236)
                              goto LABEL_367;
                          }
                          v244 = v236[5];
                          v243 = (std::__shared_weak_count *)v236[6];
                          if (v243)
                          {
                            v276 = (unint64_t *)&v243->__shared_owners_;
                            do
                              v277 = __ldxr(v276);
                            while (__stxr(v277 + 1, v276));
                          }
                        }
                        else
                        {
LABEL_318:
                          v243 = 0;
                          v244 = 0;
                        }
                        v245 = v117[4];
                        *(_QWORD *)(v245 + 16) = v244;
                        *(_QWORD *)(v245 + 24) = 0;
                        v246 = v117[16];
                        v247 = *(std::__shared_weak_count **)(v246 + 24);
                        *(_QWORD *)(v246 + 16) = 0;
                        *(_QWORD *)(v246 + 24) = 0;
                        if (v247)
                        {
                          v248 = (unint64_t *)&v247->__shared_owners_;
                          do
                            v249 = __ldaxr(v248);
                          while (__stlxr(v249 - 1, v248));
                          if (!v249)
                          {
                            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                            std::__shared_weak_count::__release_weak(v247);
                          }
                        }
                        if (v243)
                        {
                          v250 = (unint64_t *)&v243->__shared_owners_;
                          do
                            v251 = __ldaxr(v250);
                          while (__stlxr(v251 - 1, v250));
                          if (!v251)
                          {
                            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                            std::__shared_weak_count::__release_weak(v243);
                          }
                        }
                      }
                    }
                    *(_QWORD *)&v305[16] = v117;
                    *(_QWORD *)&v305[32] = 768;
                    *(_QWORD *)&v305[8] = md::DaVinciRenderStateCache::renderState(v292, 3, 1, 1, 0, 0, 0, 3);
                    v252 = v301;
                    a8 = v287;
                    if (!v301)
                      goto LABEL_333;
                    v253 = (unint64_t *)&v301->__shared_owners_;
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 - 1, v253));
                    if (!v254)
                    {
                      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                      std::__shared_weak_count::__release_weak(v252);
                      v255 = v303;
                      if (v303)
                      {
LABEL_334:
                        v256 = (unint64_t *)&v255->__shared_owners_;
                        do
                          v257 = __ldaxr(v256);
                        while (__stlxr(v257 - 1, v256));
                        if (!v257)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v255);
                        }
                      }
                    }
                    else
                    {
LABEL_333:
                      v255 = v303;
                      if (v303)
                        goto LABEL_334;
                    }
                    v145 = *(double *)&v318;
                    if (v318)
                    {
                      v259 = (unint64_t *)(v318 + 8);
                      do
                        v147 = __ldaxr(v259);
                      while (__stlxr(v147 - 1, v259));
LABEL_347:
                      if (!v147)
                      {
                        (*(void (**)(float64_t))(**(_QWORD **)&v145 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v145));
                        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v145);
                      }
                    }
                  }
LABEL_349:
                  *(_QWORD *)&v305[8] = md::DaVinciRenderStateCache::renderState(v292, *(unsigned __int8 *)(*(_QWORD *)(v92 + 216) + 32), 1, 1, 1, 0, 0, 3);
                  v260 = *(unsigned int *)(*(_QWORD *)(v92 + 32) + 16);
                  *(_QWORD *)&v305[88] = v260;
                  if (*(_BYTE *)(a3 + 176))
                  {
                    v261 = (*(_QWORD *)(v92 + 24) - *(_QWORD *)(v92 + 16)) * v260;
                    *(_QWORD *)(a3 + v284) += v261;
                    ++*(_QWORD *)(a3 + v283);
                    v262 = vdupq_n_s64(1uLL);
                    v262.i64[0] = v261;
                    *(int64x2_t *)(a3 + 184) = vaddq_s64(v262, *(int64x2_t *)(a3 + 184));
                  }
                  v263 = **(_QWORD **)(v92 + 216);
                  v264 = *((_QWORD *)&v304 + 1);
                  v265 = *(_QWORD *)v305;
                  *(_OWORD *)&v321[16] = *(_OWORD *)&v305[40];
                  *(_OWORD *)&v321[32] = *(_OWORD *)&v305[56];
                  *(_OWORD *)&v321[48] = *(_OWORD *)&v305[72];
                  *(_OWORD *)&v321[64] = *(_OWORD *)&v305[88];
                  v320 = *(float64x2_t *)&v305[8];
                  *(_OWORD *)v321 = *(_OWORD *)&v305[24];
                  v266 = *(_QWORD **)(a1 + 3112);
                  v267 = v266[1];
                  if (v267 == *(_QWORD *)(a1 + 3120))
                  {
                    v266 = (_QWORD *)*v266;
                    if (!v266)
                    {
                      v266 = malloc_type_malloc(120 * v267 + 16, 0xB644C221uLL);
                      *v266 = 0;
                      v266[1] = 0;
                      **(_QWORD **)(a1 + 3112) = v266;
                    }
                    *(_QWORD *)(a1 + 3112) = v266;
                    v267 = v266[1];
                  }
                  v268 = &v266[15 * v267];
                  v266[1] = v267 + 1;
                  v268[2] = &off_1E42B59B0;
                  v268[3] = v264;
                  v268 += 2;
                  v268[2] = v265;
                  v269 = *(_OWORD *)&v321[48];
                  v270 = *(_OWORD *)&v321[64];
                  v271 = *(_OWORD *)&v321[32];
                  *(_OWORD *)(v268 + 7) = *(_OWORD *)&v321[16];
                  v272 = v320;
                  *(_OWORD *)(v268 + 5) = *(_OWORD *)v321;
                  *(float64x2_t *)(v268 + 3) = v272;
                  *(_OWORD *)(v268 + 13) = v270;
                  *(_OWORD *)(v268 + 11) = v269;
                  *(_OWORD *)(v268 + 9) = v271;
                  v268[8] = v263;
                  *(_OWORD *)(v268 + 9) = *(_OWORD *)(v92 + 16);
                  v268[11] = 0;
                  v268[12] = 1;
                  ggl::CommandBuffer::pushRenderItem(a9, (ggl::RenderItem *)v268);
                  v273 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
                  if (*((_QWORD *)&v312 + 1))
                  {
                    v274 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
                    do
                      v275 = __ldaxr(v274);
                    while (__stlxr(v275 - 1, v274));
                    if (!v275)
                    {
                      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                      std::__shared_weak_count::__release_weak(v273);
                    }
                  }
                  goto LABEL_131;
                }
                v132 = (ggl::PipelineSetup *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1680));
                HIBYTE(v279) = v108 == 1;
                LOBYTE(v279) = 0;
                md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v320, a1 + 1048, v291, 0, 0, 0, 1u, 0, 0, v107 != 0, v279, 0, 0, v293, 0, 0, 0, 0, 0,
                  0,
                  0,
                  0,
                  v290 == 255,
                  v116,
                  0,
                  0,
                  0,
                  0,
                  v110);
                v133 = v320;
                v297 = v320;
                a7 = v289;
                if (*(_QWORD *)&v320.f64[1])
                {
                  v134 = (unint64_t *)(*(_QWORD *)&v320.f64[1] + 8);
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }
                v136 = *(uint64_t **)(v92 + 32);
                v137 = (std::__shared_weak_count *)v136[1];
                v296[0] = *v136;
                v296[1] = (uint64_t)v137;
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldxr(v138);
                  while (__stxr(v139 + 1, v138));
                }
                md::DaVinciGroundRenderLayer::setupDepthPipeline<ggl::DaVinci::GroundShadowMapPipelineSetup,ggl::DaVinci::GroundShadowMapPipelineState>(a1, v132, *(uint64_t *)&v133.f64[0], *(std::__shared_weak_count **)&v133.f64[1], (_QWORD *)a4, v92, v296, (uint64_t *)&v312, a5, v293, &v304);
                if (v137)
                {
                  v140 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                v142 = *(std::__shared_weak_count **)&v297.f64[1];
                a8 = v287;
                if (!*(_QWORD *)&v297.f64[1])
                  goto LABEL_195;
                v143 = (unint64_t *)(*(_QWORD *)&v297.f64[1] + 8);
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                  v145 = v320.f64[1];
                  if (!*(_QWORD *)&v320.f64[1])
                    goto LABEL_349;
                }
                else
                {
LABEL_195:
                  v145 = v320.f64[1];
                  if (!*(_QWORD *)&v320.f64[1])
                    goto LABEL_349;
                }
                v146 = (unint64_t *)(*(_QWORD *)&v145 + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                goto LABEL_347;
              }
            }
            else
            {
LABEL_144:
              if (!v100)
                goto LABEL_146;
            }
            if (v101)
              goto LABEL_146;
          }
LABEL_131:
          if (++a6 == a7)
            return;
        }
      }
    }
  }
  if (a6 != a7)
    goto LABEL_122;
}

void sub_19FE0E084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a67;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x200]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_19FE0E0E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE0E0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  uint64_t v43;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v43 - 240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::layoutRibbons(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  int8x8_t v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v45;
  uint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int8x8_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t i;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80[21];
  uint64_t v81;
  int8x8_t v82;
  uint64_t v83;
  char v84;
  char v85;
  BOOL v86;
  __int128 v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;

  v95 = a5;
  v96 = a4;
  v94 = a6;
  v10 = *(_QWORD **)(a2 + 8);
  v11 = (int8x8_t)v10[1];
  if (!*(_QWORD *)&v11)
    goto LABEL_24;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v11 <= 0xDFC317497CF9A4BFLL)
      v13 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v14 = *(_QWORD **)(*v10 + 8 * v13);
  if (!v14)
    goto LABEL_24;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_24;
  if (v12.u32[0] < 2uLL)
  {
    v16 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == 0xDFC317497CF9A4BFLL)
      {
        if (v15[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_22;
      }
      else if ((v18 & v16) != v13)
      {
        goto LABEL_24;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == 0xDFC317497CF9A4BFLL)
      break;
    if (v17 >= *(_QWORD *)&v11)
      v17 %= *(_QWORD *)&v11;
    if (v17 != v13)
      goto LABEL_24;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_24;
  }
  if (v15[2] != 0xDFC317497CF9A4BFLL)
    goto LABEL_11;
LABEL_22:
  v19 = v15[5];
  if (*(_QWORD *)(v19 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v20 = *(_QWORD *)(v19 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v20 = 0;
LABEL_25:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "daVinciWireframeEnabled");

  v93 = v22;
  v23 = *(uint64_t **)(a1 + 3128);
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  v91 = v25;
  v92 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  v28 = *(_QWORD *)(a4 + 384);
  v90 = v28;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "contentScale");
  *(float *)&v29 = v29;
  v89 = LODWORD(v29);
  v30 = *(uint64_t **)(a2 + 8);
  v31 = (int8x8_t)v30[1];
  if (!*(_QWORD *)&v31)
    goto LABEL_51;
  v32 = (uint8x8_t)vcnt_s8(v31);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    v33 = 0xD2404CDD1F9A6950;
    if (*(_QWORD *)&v31 <= 0xD2404CDD1F9A6950)
      v33 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v31;
  }
  else
  {
    v33 = (*(_QWORD *)&v31 - 1) & 0xD2404CDD1F9A6950;
  }
  v34 = *(_QWORD **)(*v30 + 8 * v33);
  if (!v34)
    goto LABEL_51;
  v35 = (_QWORD *)*v34;
  if (!v35)
    goto LABEL_51;
  if (v32.u32[0] < 2uLL)
  {
    while (1)
    {
      v37 = v35[1];
      if (v37 == 0xD2404CDD1F9A6950)
      {
        if (v35[2] == 0xD2404CDD1F9A6950)
          goto LABEL_49;
      }
      else if ((v37 & (*(_QWORD *)&v31 - 1)) != v33)
      {
        goto LABEL_51;
      }
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_51;
    }
  }
  while (2)
  {
    v36 = v35[1];
    if (v36 != 0xD2404CDD1F9A6950)
    {
      if (v36 >= *(_QWORD *)&v31)
        v36 %= *(_QWORD *)&v31;
      if (v36 != v33)
        goto LABEL_51;
      goto LABEL_38;
    }
    if (v35[2] != 0xD2404CDD1F9A6950)
    {
LABEL_38:
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_51;
      continue;
    }
    break;
  }
LABEL_49:
  v38 = v35[5];
  if (*(_QWORD *)(v38 + 8) == 0xD2404CDD1F9A6950)
  {
    v39 = *(_QWORD *)(v38 + 32);
    goto LABEL_52;
  }
LABEL_51:
  v39 = 0;
LABEL_52:
  v88 = 1045220557;
  __asm { FMOV            V0.4S, #1.0 }
  v87 = _Q0;
  if (v20)
    v45 = *(_BYTE *)(v20 + 64) != 0;
  else
    v45 = 0;
  v86 = v45;
  v85 = 0;
  v84 = 0;
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  if (!*(_QWORD *)&v31)
  {
    v83 = 0;
    goto LABEL_105;
  }
  v47 = (uint8x8_t)vcnt_s8(v31);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.u32[0] > 1uLL)
  {
    v48 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v31 <= 0x1AF456233693CD46uLL)
      v48 = 0x1AF456233693CD46uLL % *(_QWORD *)&v31;
  }
  else
  {
    v48 = (*(_QWORD *)&v31 - 1) & 0x1AF456233693CD46;
  }
  v49 = *v30;
  v50 = *(_QWORD **)(v49 + 8 * v48);
  if (!v50 || (v51 = (_QWORD *)*v50) == 0)
  {
    v83 = 0;
    goto LABEL_82;
  }
  if (v47.u32[0] < 2uLL)
  {
    while (1)
    {
      v53 = v51[1];
      if (v53 == 0x1AF456233693CD46)
      {
        if (v51[2] == 0x1AF456233693CD46)
          goto LABEL_78;
      }
      else if ((v53 & (*(_QWORD *)&v31 - 1)) != v48)
      {
        goto LABEL_80;
      }
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_80;
    }
  }
  while (2)
  {
    v52 = v51[1];
    if (v52 != 0x1AF456233693CD46)
    {
      if (v52 >= *(_QWORD *)&v31)
        v52 %= *(_QWORD *)&v31;
      if (v52 != v48)
        goto LABEL_80;
      goto LABEL_66;
    }
    if (v51[2] != 0x1AF456233693CD46)
    {
LABEL_66:
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_80;
      continue;
    }
    break;
  }
LABEL_78:
  v54 = v51[5];
  if (*(_QWORD *)(v54 + 8) == 0x1AF456233693CD46)
  {
    v55 = *(_QWORD *)(v54 + 32);
    goto LABEL_81;
  }
LABEL_80:
  v55 = 0;
LABEL_81:
  v83 = v55;
LABEL_82:
  if (v47.u32[0] > 1uLL)
  {
    v56 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v31 <= 0x41E8D6E445F4145uLL)
      v56 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v31;
  }
  else
  {
    v56 = (*(_QWORD *)&v31 - 1) & 0x41E8D6E445F4145;
  }
  v57 = *(_QWORD **)(v49 + 8 * v56);
  if (!v57)
    goto LABEL_104;
  v58 = (_QWORD *)*v57;
  if (!v58)
    goto LABEL_104;
  if (v47.u32[0] < 2uLL)
  {
    v59 = *(_QWORD *)&v31 - 1;
    while (1)
    {
      v61 = v58[1];
      if (v61 == 0x41E8D6E445F4145)
      {
        if (v58[2] == 0x41E8D6E445F4145)
          goto LABEL_102;
      }
      else if ((v61 & v59) != v56)
      {
        goto LABEL_104;
      }
      v58 = (_QWORD *)*v58;
      if (!v58)
        goto LABEL_104;
    }
  }
  while (2)
  {
    v60 = v58[1];
    if (v60 != 0x41E8D6E445F4145)
    {
      if (v60 >= *(_QWORD *)&v31)
        v60 %= *(_QWORD *)&v31;
      if (v60 != v56)
        goto LABEL_104;
      goto LABEL_91;
    }
    if (v58[2] != 0x41E8D6E445F4145)
    {
LABEL_91:
      v58 = (_QWORD *)*v58;
      if (!v58)
        goto LABEL_104;
      continue;
    }
    break;
  }
LABEL_102:
  v62 = (int8x8_t *)v58[5];
  if (*(_QWORD *)&v62[1] == 0x41E8D6E445F4145)
  {
    v31 = v62[4];
    goto LABEL_105;
  }
LABEL_104:
  v31 = 0;
LABEL_105:
  v82 = v31;
  v81 = a1 + 528;
  v80[0] = a3;
  v80[1] = (uint64_t)&v87;
  v80[2] = (uint64_t)&v88;
  v80[3] = (uint64_t)&v91;
  v80[4] = (uint64_t)&v85;
  v80[5] = a1;
  v80[6] = (uint64_t)&v89;
  v80[7] = a2;
  v80[8] = v39;
  v80[9] = a1 + 3144;
  v80[10] = (uint64_t)&v84;
  v80[11] = v46;
  v80[12] = (uint64_t)&v86;
  v80[13] = (uint64_t)&v94;
  v80[14] = (uint64_t)&v96;
  v80[15] = (uint64_t)&v82;
  v80[16] = (uint64_t)&v90;
  v80[17] = (uint64_t)&v81;
  v80[18] = (uint64_t)&v83;
  v80[19] = (uint64_t)&v93;
  v80[20] = (uint64_t)&v95;
  v63 = *(_QWORD *)(v28 + 1072);
  if (*(_QWORD *)(v28 + 1080) != v63)
  {
    v64 = 0;
    do
    {
      v65 = v63 + 56 * v64;
      v66 = *(uint64_t **)(v65 + 32);
      v67 = *(uint64_t **)(v65 + 40);
      while (v66 != v67)
      {
        v68 = v66[2];
        v69 = (std::__shared_weak_count *)v66[3];
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        md::DaVinciGroundRenderLayer::layoutRibbons(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderable *,ggl::CommandBuffer *,BOOL)::$_0::operator()(v80, v66, 0, v68, v69);
        if (v69)
        {
          v72 = (unint64_t *)&v69->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v66 += 4;
      }
      v74 = v63 + 56 * v64;
      v75 = *(_QWORD *)(v74 + 8);
      for (i = *(_QWORD *)(v74 + 16); v75 != i; v75 += 24)
        md::DaVinciGroundRenderLayer::layoutRibbons(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderable *,ggl::CommandBuffer *,BOOL)::$_0::operator()(v80, (uint64_t *)v75, *(_QWORD *)(v75 + 16), 0, 0);
      ++v64;
      v63 = *(_QWORD *)(v90 + 1072);
    }
    while (v64 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v90 + 1080) - v63) >> 3));
  }
  v77 = v92;
  if (v92)
  {
    v78 = (unint64_t *)&v92->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_19FE0E860(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::layoutPredrapedPolygons(md::DaVinciGroundRenderLayer *this, const md::LayoutContext *a2, const md::DaVinciGroundRenderable *a3, const md::ElevatedPolygonContext *a4, const md::StyleLogicContext *a5, double a6, int8x16_t a7, __n128 a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  const md::LayoutContext *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  double v25;
  int8x16_t v26;
  __n128 v27;
  gss::Allocator *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _BYTE v39[15];
  char v40;
  char v41[8];
  _QWORD v42[2];
  __int128 v43;
  char v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a3 + 48);
  v9 = *(_QWORD *)(v8 + 1344);
  v35 = *(_QWORD *)(v8 + 1352);
  if (v9 != v35)
  {
    v13 = (char *)this + 3400;
    do
    {
      v42[0] = *(_QWORD *)v9;
      v14 = *(_QWORD *)(v9 + 8);
      v42[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(v9 + 16);
      v44 = *(_BYTE *)(v9 + 32);
      v43 = v17;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      v19 = *(_BYTE **)(v9 + 40);
      v18 = *(_BYTE **)(v9 + 48);
      v20 = v18 - v19;
      if (v18 != v19)
      {
        if (v20 < 0)
          abort();
        v21 = a2;
        v45 = (char *)operator new(v18 - v19);
        v46 = v45;
        v22 = &v45[8 * (v20 >> 3)];
        v47 = v22;
        memcpy(v45, v19, v20);
        v46 = v22;
        a2 = v21;
      }
      v48 = 0;
      md::layoutElevatedPolygonMeshes<md::DaVinciGroundRenderable>((uint64_t)a2, (uint64_t)a3, (unsigned __int8 *)a4, (uint64_t)v13, *((_QWORD *)this + 428), (uint64_t)v41, (uint64_t *)(v9 + 64), &xmmword_19FFB4A80, *(double *)&v17, a7, a8);
      if (*((_BYTE *)a4 + 32))
      {
        v24 = *(_QWORD **)(v9 + 40);
        v23 = *(_QWORD **)(v9 + 48);
        if (v24 != v23)
        {
          while (*v24 != *((_QWORD *)a4 + 3))
          {
            if (++v24 == v23)
            {
              v24 = *(_QWORD **)(v9 + 48);
              break;
            }
          }
        }
        if (v24 != v23)
        {
          memset(v39, 0, sizeof(v39));
          v40 = 1;
          *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v39, 0x10002u) = 1;
          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v37, *(_QWORD *)a5, (gss::FeatureAttributeSet *)(*(_QWORD *)(v9 + 64) + 240), (gss::QueryOverrides *)v39);
          md::layoutElevatedPolygonMeshes<md::DaVinciGroundRenderable>((uint64_t)a2, (uint64_t)a3, (unsigned __int8 *)a4, (uint64_t)v13, *((_QWORD *)this + 428), (uint64_t)v41, &v37, &xmmword_19FFB4A80, v25, v26, v27);
          v29 = v38;
          if (v38)
          {
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if (v39[14])
            v32 = 1;
          else
            v32 = *(_QWORD *)v39 == 0;
          if (!v32)
          {
            v33 = gss::Allocator::instance(v28);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 40))(v33, *(_QWORD *)v39, *(unsigned __int16 *)&v39[12]);
          }
        }
      }
      if (v48 != -1)
        ((void (*)(_BYTE *, _QWORD *))off_1E42F86A8[v48])(v39, v42);
      v9 += 80;
    }
    while (v9 != v35);
  }
}

void sub_19FE0EB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a15);
  if (a28 == -1)
    _Unwind_Resume(a1);
  ((void (*)(uint64_t *, uint64_t))off_1E42F86A8[a28])(&a15, a10);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::layoutRibbons(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderable *,ggl::CommandBuffer *,BOOL)::$_0::operator()(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4, std::__shared_weak_count *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t *v9;
  md::SharedResource *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  float *v21;
  float v22;
  int v24;
  char v25;
  char v26;
  float v27;
  uint16x4_t v28;
  unint64_t v29;
  float *v30;
  float v31;
  _BOOL4 v32;
  unsigned int v34;
  float v35;
  _BOOL4 v36;
  _BOOL4 v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v46;
  unsigned __int8 *v47;
  int v48;
  unint64_t v49;
  float *v50;
  float v51;
  BOOL v52;
  unsigned int v53;
  uint64_t *v54;
  float v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  md::SharedResource *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  float v66;
  float32x4_t v67;
  int v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE **v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  float v175;
  float v176;
  float v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int8x8_t v184;
  uint8x8_t v185;
  unint64_t v186;
  float **v187;
  float *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  __int128 *v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  __int128 *v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  float64_t v241;
  float **v242;
  float *v243;
  unint64_t v244;
  uint8x8_t v245;
  float **v246;
  float *v247;
  unint64_t v248;
  uint64_t v249;
  float *v250;
  float v251;
  float v252;
  _BOOL8 v253;
  unint64_t v254;
  unint64_t v255;
  size_t prime;
  void *v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t *v261;
  size_t v262;
  size_t v263;
  size_t v264;
  _QWORD *v265;
  size_t v266;
  uint64_t v267;
  unint64_t v268;
  uint8x8_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  size_t v273;
  _QWORD *v274;
  _QWORD *v275;
  float **v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  __int128 v283;
  _QWORD *v284;
  int v285;
  int v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  __int128 v321;
  float64_t v322;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v341;
  BOOL v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  float32x4_t v347;
  float16x4_t *v348;
  float32x4_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  int64x2_t v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  __n128 v373;
  unint64_t *v374;
  unint64_t v375;
  md::SharedResource *v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  __int16 v381;
  __int128 v382;
  int v383;
  _BOOL4 v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v388;
  char v389;
  uint64_t v390;
  uint64_t v391;
  char v392;
  uint64_t v393;
  __int32 v394;
  _BYTE v395[2];
  uint64_t v396[2];
  md::SharedResource *v397;
  std::__shared_weak_count *v398;
  unint64_t v399;
  _BYTE __p[40];
  double v401;
  double v402;
  uint64_t v403;
  double v404;
  double v405;
  double v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _BYTE v412[32];
  float64x2_t v413;
  double v414;
  float64x2_t v415;
  double v416;
  float64x2_t v417;
  double v418;
  uint64_t v419;

  v419 = *MEMORY[0x1E0C80C00];
  v399 = a3;
  v6 = *(float *)(*a1 + 20);
  v7 = a1[5];
  v388 = *(float32x4_t *)a1[1];
  v8 = *(_QWORD *)a1[3];
  if (!a3)
  {
    *(_QWORD *)__p = a4;
    *(_QWORD *)&__p[8] = a5;
    if (a5)
    {
      p_shared_owners = (unint64_t *)&a5->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_QWORD *)v412 = a4;
      *(_QWORD *)&v412[8] = a5;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      *(_OWORD *)v412 = a4;
    }
    *(_OWORD *)&v412[16] = 0uLL;
    LOBYTE(v413.f64[0]) = 0;
    if (a4)
    {
      v15 = (*(uint64_t (**)(unint64_t, _BYTE *))(*(_QWORD *)a4 + 48))(a4, &v412[16]);
      LOBYTE(v413.f64[0]) = v15;
      if (a5)
      {
LABEL_18:
        v16 = (unint64_t *)&a5->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (v17)
        {
          if (!LOBYTE(v413.f64[0]))
          {
LABEL_22:
            v18 = 0.2;
LABEL_112:
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v412);
            goto LABEL_124;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
          std::__shared_weak_count::__release_weak(a5);
          if (!LOBYTE(v413.f64[0]))
            goto LABEL_22;
        }
LABEL_25:
        v19 = *(_QWORD *)(*(_QWORD *)v412 + 24);
        if ((int)v6 >= 0x17)
          v20 = 23;
        else
          v20 = (int)v6;
        v21 = *(float **)v19;
        if (*(_QWORD *)v19
          && (v22 = *v21, LODWORD(v21) = *v21 == 1.0, *(_BYTE *)(v19 + 10))
          && (v22 != 0.0 ? (_ZF = v22 == 1.0) : (_ZF = 1), !_ZF)
          || (v24 = *(unsigned __int8 *)(v19 + v21 + 11), v22 = 0.0, v24 == 2))
        {
          __p[0] = 1;
          LOBYTE(v397) = 1;
          v25 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v19, 0x5Bu, v20, 0, __p);
          v26 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v19, 0x5Bu, v20, 1, &v397);
          if (v22 < 1.0)
            v26 = v25;
          if (v26)
          {
LABEL_39:
            v27 = fminf(fmaxf(v6, 0.0), 23.0);
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)__p, *(_QWORD *)(*(_QWORD *)v412 + 24), 0x5Cu, 2u, v27);
            v28 = *(uint16x4_t *)__p;
            v29 = *(_QWORD *)(*(_QWORD *)v412 + 24);
            v30 = *(float **)v29;
            if (*(_QWORD *)v29)
            {
              v31 = *v30;
              v32 = *v30 == 1.0;
              if (*(_BYTE *)(v29 + 10))
              {
                if (v31 != 0.0 && v31 != 1.0)
                {
LABEL_53:
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x5Eu, v20, 0) & 1) != 0)
                    goto LABEL_56;
                  v34 = 1;
LABEL_55:
                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x5Eu, v20, v34))
                  {
                    v18 = 0.2;
                    if (v30)
                    {
LABEL_71:
                      v44 = *v30;
                      v38 = *v30 == 1.0;
                      if (*(_BYTE *)(v29 + 10))
                      {
                        if (v44 != 0.0 && v44 != 1.0)
                        {
LABEL_78:
                          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x1A2u, v20, 0) & 1) != 0)
                          {
LABEL_81:
                            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)__p, v29, 0x1A2u, 2u, v27);
                            v47 = (unsigned __int8 *)a1[4];
                            v48 = *v47;
                            *(float32x4_t *)(v47 + 4) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)__p)), (float32x4_t)vdupq_n_s32(0x37800080u));
                            if (!v48)
                              *v47 = 1;
LABEL_83:
                            v388 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v28)), (float32x4_t)vdupq_n_s32(0x37800080u));
                            v49 = *(_QWORD *)(*(_QWORD *)v412 + 24);
                            v50 = *(float **)v49;
                            if (*(_QWORD *)v49
                              && (v51 = *v50, LODWORD(v50) = *v50 == 1.0, *(_BYTE *)(v49 + 10))
                              && (v51 != 0.0 ? (v52 = v51 == 1.0) : (v52 = 1), !v52)
                              || (v53 = *(unsigned __int8 *)(v49 + v50 + 11), v53 == 2))
                            {
                              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)v412 + 24), 0x88u, v20, 0) & 1) != 0)goto LABEL_94;
                              v53 = 1;
                            }
                            if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v49, 0x88u, v20, v53))goto LABEL_112;
LABEL_94:
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>((std::string *)__p, v49, 0x88u, v20, 2);
                            v54 = *(uint64_t **)(v7 + 3128);
                            v55 = *(float *)a1[6];
                            v56 = *(std::__shared_weak_count **)(v7 + 2072);
                            v396[0] = *(_QWORD *)(v7 + 2064);
                            v396[1] = (uint64_t)v56;
                            if (v56)
                            {
                              v57 = (unint64_t *)&v56->__shared_owners_;
                              do
                                v58 = __ldxr(v57);
                              while (__stxr(v58 + 1, v57));
                            }
                            md::TextureManager::texture(&v397, v54, (uint64_t)__p, v396, 1, v55);
                            if (v56)
                            {
                              v59 = (unint64_t *)&v56->__shared_owners_;
                              do
                                v60 = __ldaxr(v59);
                              while (__stlxr(v60 - 1, v59));
                              if (!v60)
                              {
                                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                                std::__shared_weak_count::__release_weak(v56);
                              }
                            }
                            v61 = v397;
                            if (v397)
                            {
                              md::LayoutContext::frameState((md::LayoutContext *)a1[7]);
                              md::SharedResource::addFrameRef(v61, *(_QWORD *)(v62 + 624));
                              v8 = *((_QWORD *)v61 + 4);
                              v63 = v398;
                              if (!v398)
                              {
LABEL_110:
                                if ((__p[23] & 0x80000000) != 0)
                                  operator delete(*(void **)__p);
                                goto LABEL_112;
                              }
                            }
                            else
                            {
                              v8 = 0;
                              v63 = v398;
                              if (!v398)
                                goto LABEL_110;
                            }
                            v64 = (unint64_t *)&v63->__shared_owners_;
                            do
                              v65 = __ldaxr(v64);
                            while (__stlxr(v65 - 1, v64));
                            if (!v65)
                            {
                              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                              std::__shared_weak_count::__release_weak(v63);
                            }
                            goto LABEL_110;
                          }
                          v46 = 1;
LABEL_80:
                          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x1A2u, v20, v46))goto LABEL_83;
                          goto LABEL_81;
                        }
                      }
LABEL_77:
                      v46 = *(unsigned __int8 *)(v29 + v38 + 11);
                      if (v46 != 2)
                        goto LABEL_80;
                      goto LABEL_78;
                    }
LABEL_65:
                    v38 = 0;
                    goto LABEL_77;
                  }
LABEL_56:
                  if (v30)
                  {
                    v35 = *v30;
                    v36 = *v30 == 1.0;
                    if (*(_BYTE *)(v29 + 10))
                    {
                      if (v35 != 0.0 && v35 != 1.0)
                        goto LABEL_68;
                    }
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v39 = *(unsigned __int8 *)(v29 + v36 + 11);
                  v35 = 0.0;
                  if (v39 != 2)
                  {
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v29, 0x5Eu, v39, 0, v27);
                    v18 = v43;
LABEL_70:
                    v29 = *(_QWORD *)(*(_QWORD *)v412 + 24);
                    v30 = *(float **)v29;
                    if (*(_QWORD *)v29)
                      goto LABEL_71;
                    goto LABEL_65;
                  }
LABEL_68:
                  __p[0] = 1;
                  LOBYTE(v397) = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v29, 0x5Eu, 0, __p, v27);
                  v41 = v40;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v29, 0x5Eu, 1u, (BOOL *)&v397, v27);
                  v18 = v41 + (float)((float)(v42 - v41) * v35);
                  goto LABEL_70;
                }
              }
            }
            else
            {
              v32 = 0;
            }
            v34 = *(unsigned __int8 *)(v29 + v32 + 11);
            if (v34 != 2)
              goto LABEL_55;
            goto LABEL_53;
          }
        }
        else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)v412 + 24), 0x5Bu, v20, v24, 0))
        {
          goto LABEL_39;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v412);
        return;
      }
    }
    else
    {
      v15 = 0;
      LOBYTE(v413.f64[0]) = 0;
      if (a5)
        goto LABEL_18;
    }
    if (!v15)
      goto LABEL_22;
    goto LABEL_25;
  }
  v9 = *(int8x8_t **)a1[8];
  if (!v9 || !*(_QWORD *)a1[9])
    return;
  *(_OWORD *)v412 = a3;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v397, v9, (uint64_t *)v412, 0);
  v10 = v397;
  if (!v397)
    goto LABEL_118;
  (*(void (**)(_BYTE *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v397 + 360))(v395, v397, v6);
  if (v395[0])
  {
    if (!v395[1])
      goto LABEL_118;
  }
  (*(void (**)(char *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v10 + 976))(&v392, v10, v6);
  (*(void (**)(uint64_t *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v10 + 928))(&v391, v10, v6);
  if (!v392)
  {
    (*(void (**)(_BYTE *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v10 + 232))(v412, v10, v6);
    if (v392)
      goto LABEL_114;
    if (v412[0])
    {
      v67 = *(float32x4_t *)&v412[4];
      v66 = *(float *)&v412[16];
      goto LABEL_117;
    }
    if (v388.f32[3] != 0.0)
      goto LABEL_513;
LABEL_118:
    v68 = 1;
    v18 = 0.2;
    v69 = v398;
    if (!v398)
      goto LABEL_123;
    goto LABEL_119;
  }
  v412[0] = 0;
LABEL_114:
  v66 = *((float *)&v391 + 1);
  if (!(_BYTE)v391)
    v66 = 1.0;
  v67.i64[0] = v393;
  v67.i32[2] = v394;
LABEL_117:
  v67.f32[3] = v66;
  v388 = v67;
  if (v66 == 0.0)
    goto LABEL_118;
LABEL_513:
  (*(void (**)(uint64_t *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v10 + 304))(&v390, v10, v6);
  if ((_BYTE)v390)
    v18 = *((float *)&v390 + 1);
  else
    v18 = 0.2;
  (*(void (**)(_BYTE *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v10 + 1040))(__p, v10, v6);
  v366 = a1[10];
  if (__p[0])
  {
    if (*(_BYTE *)v366)
    {
      *(_DWORD *)(v366 + 4) = *(_DWORD *)&__p[4];
      *(_QWORD *)(v366 + 8) = *(_QWORD *)&__p[8];
    }
    else
    {
      v367 = *(_QWORD *)&__p[4];
      *(_DWORD *)(v366 + 12) = *(_DWORD *)&__p[12];
      *(_QWORD *)(v366 + 4) = v367;
      *(_BYTE *)v366 = 1;
      v366 = a1[10];
    }
  }
  else if (*(_BYTE *)v366)
  {
    *(_BYTE *)v366 = 0;
  }
  if (*(_BYTE *)v366)
  {
    __p[0] = 0;
    v368 = a1[4];
    if (!*(_BYTE *)v368)
      goto LABEL_531;
    goto LABEL_524;
  }
  (*(void (**)(_BYTE *__return_ptr, md::SharedResource *, float))(*(_QWORD *)v10 + 816))(__p, v10, v6);
  v368 = a1[4];
  if (__p[0])
  {
    if (*(_BYTE *)v368)
    {
      *(_DWORD *)(v368 + 4) = *(_DWORD *)&__p[4];
      *(_QWORD *)(v368 + 8) = *(_QWORD *)&__p[8];
      *(_DWORD *)(v368 + 16) = *(_DWORD *)&__p[16];
    }
    else
    {
      *(_OWORD *)(v368 + 4) = *(_OWORD *)&__p[4];
      *(_BYTE *)v368 = 1;
    }
  }
  else if (*(_BYTE *)v368)
  {
LABEL_524:
    *(_BYTE *)v368 = 0;
  }
LABEL_531:
  v369 = *(_QWORD *)a1[9];
  v389 = 1;
  v370 = *(std::__shared_weak_count **)(v7 + 2072);
  if (v370)
  {
    v371 = (unint64_t *)&v370->__shared_owners_;
    do
      v372 = __ldxr(v371);
    while (__stxr(v372 + 1, v371));
  }
  v373 = md::MaterialTextureManager::textureFromMaterial((__n128 *)__p, v369, (uint64_t)&v397, &v399, &v389, (int)v6);
  if (v370)
  {
    v374 = (unint64_t *)&v370->__shared_owners_;
    do
      v375 = __ldaxr(v374);
    while (__stlxr(v375 - 1, v374));
    if (!v375)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v370->__on_zero_shared)(v370, v373);
      std::__shared_weak_count::__release_weak(v370);
    }
  }
  v376 = *(md::SharedResource **)__p;
  if (*(_QWORD *)__p)
  {
    md::LayoutContext::frameState((md::LayoutContext *)a1[7]);
    md::SharedResource::addFrameRef(v376, *(_QWORD *)(v377 + 624));
    v8 = *((_QWORD *)v376 + 4);
  }
  v378 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v379 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v378->__on_zero_shared)(v378, v373);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v68 = 0;
  v69 = v398;
  if (v398)
  {
LABEL_119:
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
LABEL_123:
  if (v68)
    return;
LABEL_124:
  v72 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v7 + 1688));
  v73 = a1[11];
  v74 = *(_QWORD *)(v73 + 160);
  if (v74
    && (v75 = *(_QWORD *)(v73 + 8),
        v76 = *(_QWORD *)(v74 + 32),
        v77 = *(_QWORD *)(v75 + 96),
        v76 < (*(_QWORD *)(v75 + 104) - v77) >> 3))
  {
    v78 = 0;
    v79 = *(_QWORD *)(*(_QWORD *)(v77 + 8 * v76) + 16);
    v80 = v79 == 0;
    v81 = (_BYTE **)(a1 + 12);
    if (*(_BYTE *)a1[12] && v79)
    {
      v80 = 0;
      if (*(_BYTE *)a1[10])
        v78 = 1;
      else
        v78 = *(_BYTE *)a1[4] != 0;
    }
  }
  else
  {
    v79 = 0;
    v78 = 0;
    v81 = (_BYTE **)(a1 + 12);
    v80 = 1;
  }
  v384 = v78;
  HIBYTE(v381) = *(_BYTE *)a1[13];
  LOBYTE(v381) = 0;
  md::DaVinciPipelineStateManager<ggl::DaVinci::RibbonPipelineState,std::shared_ptr<ggl::DaVinciRibbonShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v412, v7 + 1168, *(unsigned __int8 *)(*a1 + 5), 0, 0, 0, *(unsigned __int8 *)(*a1 + 6), 0, v381, 0, v78, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    1u,
    0,
    0,
    0,
    0,
    0,
    0);
  v82 = *(_OWORD *)v412;
  if (*(_QWORD *)&v412[8])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v412[8] + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  if (!(_QWORD)v82 || **(_QWORD **)(v82 + 40) != v72[1])
  {
    v85 = (std::__shared_weak_count *)v72[3];
    v72[2] = 0;
    v72[3] = 0;
    if (!v85)
      goto LABEL_151;
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    goto LABEL_149;
  }
  v88 = v72[2];
  if (v88 && v88 != (_QWORD)v82)
    ggl::PipelineSetup::resetData((uint64_t)v72);
  if (*((_QWORD *)&v82 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  v85 = (std::__shared_weak_count *)v72[3];
  *((_OWORD *)v72 + 1) = v82;
  if (v85)
  {
    v91 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v91);
    while (__stlxr(v87 - 1, v91));
LABEL_149:
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_151:
  if (*((_QWORD *)&v82 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v82 + 1) + 16))(*((_QWORD *)&v82 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
    }
  }
  v94 = *(std::__shared_weak_count **)&v412[8];
  if (*(_QWORD *)&v412[8])
  {
    v95 = (unint64_t *)(*(_QWORD *)&v412[8] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v72[8];
  *(_QWORD *)(v97 + 96) = *(_QWORD *)(v7 + 2016);
  *(_QWORD *)(v97 + 104) = 0;
  v98 = v72[20];
  v99 = *(std::__shared_weak_count **)(v98 + 104);
  *(_QWORD *)(v98 + 96) = 0;
  *(_QWORD *)(v98 + 104) = 0;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v72[2];
  if (**v81)
    v103 = v102 == 0;
  else
    v103 = 1;
  if (!v103 && *(_BYTE *)(v102 + 315))
  {
    if ((_DWORD)v80)
    {
      v104 = *(uint64_t **)(v7 + 3128);
      v105 = *v104;
      v106 = (std::__shared_weak_count *)v104[1];
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
        *(_QWORD *)(v72[12] + 16) = v105;
        do
          v109 = __ldaxr(v107);
        while (__stlxr(v109 - 1, v107));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      else
      {
        *(_QWORD *)(v72[12] + 16) = v105;
      }
    }
    else
    {
      *(_QWORD *)(v72[12] + 16) = v79;
    }
  }
  v110 = *(_QWORD *)a1[14];
  v111 = (_QWORD *)v72[8];
  v111[1] = 0;
  v112 = *(_QWORD *)(v110 + 216);
  *v111 = v112;
  v113 = (_QWORD *)v72[20];
  v114 = *(_QWORD *)(v110 + 224);
  if (v114)
  {
    v115 = (unint64_t *)(v114 + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v117 = (std::__shared_weak_count *)v113[1];
  *v113 = v112;
  v113[1] = v114;
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = *(_QWORD *)a1[14];
  v121 = v72[8];
  *(_QWORD *)(v121 + 24) = 0;
  v122 = *(_QWORD *)(v120 + 232);
  *(_QWORD *)(v121 + 16) = v122;
  v123 = v72[20];
  v124 = *(_QWORD *)(v120 + 240);
  if (v124)
  {
    v125 = (unint64_t *)(v124 + 8);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v127 = *(std::__shared_weak_count **)(v123 + 24);
  *(_QWORD *)(v123 + 16) = v122;
  *(_QWORD *)(v123 + 24) = v124;
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = *(_QWORD *)a1[15];
  v131 = v72[8];
  *(_QWORD *)(v131 + 56) = 0;
  v132 = *(_QWORD *)(v130 + 16);
  *(_QWORD *)(v131 + 48) = v132;
  v133 = v72[20];
  v134 = *(_QWORD *)(v130 + 24);
  if (v134)
  {
    v135 = (unint64_t *)(v134 + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  v137 = *(std::__shared_weak_count **)(v133 + 56);
  *(_QWORD *)(v133 + 48) = v132;
  *(_QWORD *)(v133 + 56) = v134;
  if (v137)
  {
    v138 = (unint64_t *)&v137->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = *(_QWORD *)a1[14];
  v141 = v72[8];
  *(_QWORD *)(v141 + 40) = 0;
  v142 = *(_QWORD *)(v140 + 400);
  *(_QWORD *)(v141 + 32) = v142;
  v143 = v72[20];
  v144 = *(_QWORD *)(v140 + 408);
  if (v144)
  {
    v145 = (unint64_t *)(v144 + 8);
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
  }
  v147 = *(std::__shared_weak_count **)(v143 + 40);
  *(_QWORD *)(v143 + 32) = v142;
  *(_QWORD *)(v143 + 40) = v144;
  if (v147)
  {
    v148 = (unint64_t *)&v147->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v72[8];
  *(_QWORD *)(v150 + 88) = 0;
  v151 = *(_QWORD *)(v7 + 1816);
  *(_QWORD *)(v150 + 80) = v151;
  v152 = v72[20];
  v153 = *(_QWORD *)(v7 + 1824);
  if (v153)
  {
    v154 = (unint64_t *)(v153 + 8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = *(std::__shared_weak_count **)(v152 + 88);
  *(_QWORD *)(v152 + 80) = v151;
  *(_QWORD *)(v152 + 88) = v153;
  if (v156)
  {
    v157 = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v72[8];
  *(_QWORD *)(v159 + 136) = 0;
  v160 = *(_QWORD *)(v7 + 1896);
  *(_QWORD *)(v159 + 128) = v160;
  v161 = v72[20];
  v162 = *(_QWORD *)(v7 + 1904);
  if (v162)
  {
    v163 = (unint64_t *)(v162 + 8);
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  v165 = *(std::__shared_weak_count **)(v161 + 136);
  *(_QWORD *)(v161 + 128) = v160;
  *(_QWORD *)(v161 + 136) = v162;
  if (v165)
  {
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  *(_QWORD *)v72[12] = *(_QWORD *)(*a1 + 280);
  if (*(_BYTE *)(*a1 + 6))
  {
    v168 = a1[11];
    v169 = *(_QWORD *)(v168 + 96);
    if (v169
      && (v170 = *(_QWORD *)(v168 + 8),
          v171 = *(_QWORD *)(v169 + 32),
          v172 = *(_QWORD *)(v170 + 96),
          v171 < (*(_QWORD *)(v170 + 104) - v172) >> 3))
    {
      v173 = *(_QWORD *)(*(_QWORD *)(v172 + 8 * v171) + 16);
    }
    else
    {
      v173 = 0;
    }
    *(_QWORD *)(v72[12] + 8) = v173;
  }
  v174 = 1.0;
  v175 = 1.0;
  if (v8)
    v175 = (float)*(unsigned int *)(v8 + 80) / (float)*(unsigned int *)(v8 + 84);
  v176 = *(float *)(*(_QWORD *)a1[16] + 1168);
  if (v18 != 0.0)
    v174 = v175 / (float)(v176 * v18);
  v177 = v18 * 0.5;
  v178 = *(_QWORD **)a1[17];
  v179 = LODWORD(v177);
  if (v177 == 0.0)
    v179 = 0;
  v180 = LODWORD(v176) - 0x61C8864680B583EBLL;
  if (v176 == 0.0)
    v180 = 0x9E3779B97F4A7C15;
  v181 = (((((v179 >> 2) + (v179 << 6) + v180) ^ v179) << 6)
        + ((((v179 >> 2) + (v179 << 6) + v180) ^ v179) >> 2)
        - 0x61C8864680B583EBLL) ^ ((v179 >> 2) + (v179 << 6) + v180) ^ v179;
  v182 = LODWORD(v174) - 0x61C8864680B583EBLL;
  if (v174 == 0.0)
    v182 = 0x9E3779B97F4A7C15;
  v183 = (v182 + (v181 << 6) + (v181 >> 2)) ^ v181;
  v184 = (int8x8_t)v178[1];
  if (v184)
  {
    v185 = (uint8x8_t)vcnt_s8(v184);
    v185.i16[0] = vaddlv_u8(v185);
    if (v185.u32[0] > 1uLL)
    {
      v186 = v183;
      if (v183 >= *(_QWORD *)&v184)
        v186 = v183 % *(_QWORD *)&v184;
    }
    else
    {
      v186 = v183 & (*(_QWORD *)&v184 - 1);
    }
    v187 = *(float ***)(*v178 + 8 * v186);
    if (v187)
    {
      v188 = *v187;
      if (v188)
      {
        if (v185.u32[0] < 2uLL)
        {
          v189 = *(_QWORD *)&v184 - 1;
          while (1)
          {
            v191 = *((_QWORD *)v188 + 1);
            if (v191 == v183)
            {
              if (v188[4] == v177 && v188[5] == v176 && v188[6] == 0.0 && v188[7] == v174)
                goto LABEL_272;
            }
            else if ((v191 & v189) != v186)
            {
              goto LABEL_277;
            }
            v188 = *(float **)v188;
            if (!v188)
              goto LABEL_277;
          }
        }
        do
        {
          v190 = *((_QWORD *)v188 + 1);
          if (v190 == v183)
          {
            if (v188[4] == v177 && v188[5] == v176 && v188[6] == 0.0 && v188[7] == v174)
            {
LABEL_272:
              v192 = *((_QWORD *)v188 + 4);
              v193 = v72[8];
              *(_QWORD *)(v193 + 112) = v192;
              *(_QWORD *)(v193 + 120) = 0;
              v194 = v72[20];
              v195 = *(std::__shared_weak_count **)(v194 + 120);
              *(_QWORD *)(v194 + 112) = 0;
              *(_QWORD *)(v194 + 120) = 0;
              if (v195)
              {
                v196 = (unint64_t *)&v195->__shared_owners_;
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
              goto LABEL_445;
            }
          }
          else
          {
            if (v190 >= *(_QWORD *)&v184)
              v190 %= *(_QWORD *)&v184;
            if (v190 != v186)
              break;
          }
          v188 = *(float **)v188;
        }
        while (v188);
      }
    }
  }
LABEL_277:
  v198 = *(_QWORD *)(v7 + 1944);
  v199 = *(_QWORD *)(v198 + 8);
  if (v199 == *(_QWORD *)v198)
  {
    v210 = *(_QWORD *)(v198 + 88);
    if (!v210)
      goto LABEL_548;
    v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 48))(v210);
    v201 = *(uint64_t **)(v198 + 40);
    v211 = *(_QWORD *)(v198 + 48);
    if ((unint64_t)v201 >= v211)
    {
      v213 = *(_QWORD *)(v198 + 32);
      v214 = ((uint64_t)v201 - v213) >> 3;
      v215 = v214 + 1;
      if ((unint64_t)(v214 + 1) >> 61)
        abort();
      v216 = v211 - v213;
      if (v216 >> 2 > v215)
        v215 = v216 >> 2;
      if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v215;
      if (v80)
      {
        v217 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v198 + 56) + 16))(*(_QWORD *)(v198 + 56), 8 * v80, 8);
        v208 = (uint64_t *)(v217 + 8 * v214);
        v209 = v217 + 8 * v80;
        if (v217)
          *v208 = v200;
      }
      else
      {
        v209 = 0;
        v208 = (uint64_t *)(8 * v214);
      }
      v212 = v208 + 1;
      v227 = *(_QWORD *)(v198 + 32);
      v218 = *(_QWORD *)(v198 + 40);
      if (v218 == v227)
        goto LABEL_326;
      v228 = v218 - v227 - 8;
      if (v228 < 0x38)
      {
        v230 = *(_QWORD *)(v198 + 40);
      }
      else if ((unint64_t)(v218 - (_QWORD)v208) < 0x20)
      {
        v230 = *(_QWORD *)(v198 + 40);
      }
      else
      {
        v229 = (v228 >> 3) + 1;
        v230 = v218 - 8 * (v229 & 0x3FFFFFFFFFFFFFFCLL);
        v231 = v208 - 2;
        v232 = (__int128 *)(v218 - 16);
        v233 = v229 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v234 = *v232;
          *((_OWORD *)v231 - 1) = *(v232 - 1);
          *(_OWORD *)v231 = v234;
          v231 -= 4;
          v232 -= 2;
          v233 -= 4;
        }
        while (v233);
        v208 -= v229 & 0x3FFFFFFFFFFFFFFCLL;
        if (v229 == (v229 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_325;
      }
      do
      {
        v236 = *(_QWORD *)(v230 - 8);
        v230 -= 8;
        *--v208 = v236;
      }
      while (v230 != v227);
      goto LABEL_325;
    }
  }
  else
  {
    v200 = *(_QWORD *)(v199 - 8);
    *(_QWORD *)(v198 + 8) = v199 - 8;
    v201 = *(uint64_t **)(v198 + 40);
    v202 = *(_QWORD *)(v198 + 48);
    if ((unint64_t)v201 >= v202)
    {
      v203 = *(_QWORD *)(v198 + 32);
      v204 = ((uint64_t)v201 - v203) >> 3;
      v205 = v204 + 1;
      if ((unint64_t)(v204 + 1) >> 61)
        abort();
      v206 = v202 - v203;
      if (v206 >> 2 > v205)
        v205 = v206 >> 2;
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v205;
      if (v80)
      {
        v207 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v198 + 56) + 16))(*(_QWORD *)(v198 + 56), 8 * v80, 8);
        v208 = (uint64_t *)(v207 + 8 * v204);
        v209 = v207 + 8 * v80;
        if (v207)
          *v208 = v200;
      }
      else
      {
        v209 = 0;
        v208 = (uint64_t *)(8 * v204);
      }
      v212 = v208 + 1;
      v219 = *(_QWORD *)(v198 + 32);
      v218 = *(_QWORD *)(v198 + 40);
      if (v218 == v219)
        goto LABEL_326;
      v220 = v218 - v219 - 8;
      if (v220 < 0x38)
      {
        v222 = *(_QWORD *)(v198 + 40);
      }
      else if ((unint64_t)(v218 - (_QWORD)v208) < 0x20)
      {
        v222 = *(_QWORD *)(v198 + 40);
      }
      else
      {
        v221 = (v220 >> 3) + 1;
        v222 = v218 - 8 * (v221 & 0x3FFFFFFFFFFFFFFCLL);
        v223 = v208 - 2;
        v224 = (__int128 *)(v218 - 16);
        v225 = v221 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v226 = *v224;
          *((_OWORD *)v223 - 1) = *(v224 - 1);
          *(_OWORD *)v223 = v226;
          v223 -= 4;
          v224 -= 2;
          v225 -= 4;
        }
        while (v225);
        v208 -= v221 & 0x3FFFFFFFFFFFFFFCLL;
        if (v221 == (v221 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_325;
      }
      do
      {
        v235 = *(_QWORD *)(v222 - 8);
        v222 -= 8;
        *--v208 = v235;
      }
      while (v222 != v219);
LABEL_325:
      v218 = *(_QWORD *)(v198 + 32);
LABEL_326:
      *(_QWORD *)(v198 + 32) = v208;
      *(_QWORD *)(v198 + 40) = v212;
      v237 = *(_QWORD *)(v198 + 48);
      *(_QWORD *)(v198 + 48) = v209;
      if (v218)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v198 + 56) + 40))(*(_QWORD *)(v198 + 56), v218, v237 - v218);
      goto LABEL_328;
    }
  }
  if (v201)
    *v201 = v200;
  v212 = v201 + 1;
LABEL_328:
  *(_QWORD *)(v198 + 40) = v212;
  *(_QWORD *)v412 = v200;
  v238 = *(_QWORD *)(v198 + 120);
  if (!v238)
  {
LABEL_548:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v238 + 48))(v238, v412);
  memset(v412, 0, 24);
  *(_QWORD *)&v239 = 0;
  *((_QWORD *)&v239 + 1) = v200;
  v240 = *(_QWORD *)(v200 + 8);
  v241 = *(double *)(v200 + 72);
  *(_OWORD *)v412 = v239;
  *(_QWORD *)&v412[24] = v240;
  v413.f64[1] = v241;
  LOWORD(v413.f64[0]) = 1;
  **(float **)&v241 = v177;
  *(_QWORD *)&v239 = *(unsigned int *)(*(_QWORD *)a1[16] + 1168);
  *(_DWORD *)(*(_QWORD *)&v241 + 12) = 0;
  *(_DWORD *)(*(_QWORD *)&v241 + 4) = v239;
  *(float *)(*(_QWORD *)&v241 + 8) = v174;
  v242 = (float **)a1[17];
  v243 = *v242;
  v244 = *((_QWORD *)*v242 + 1);
  if (v244)
  {
    v245 = (uint8x8_t)vcnt_s8((int8x8_t)v244);
    v245.i16[0] = vaddlv_u8(v245);
    if (v245.u32[0] > 1uLL)
    {
      v80 = v183;
      if (v183 >= v244)
        v80 = v183 % v244;
    }
    else
    {
      v80 = v183 & (v244 - 1);
    }
    v246 = *(float ***)(*(_QWORD *)v243 + 8 * v80);
    if (v246)
    {
      v247 = *v246;
      if (v247)
      {
        if (v245.u32[0] < 2uLL)
        {
          while (1)
          {
            v249 = *((_QWORD *)v247 + 1);
            if (v249 == v183)
            {
              if (v247[4] == v177 && v247[5] == v176 && v247[6] == 0.0 && v247[7] == v174)
                goto LABEL_424;
            }
            else if ((v249 & (v244 - 1)) != v80)
            {
              goto LABEL_357;
            }
            v247 = *(float **)v247;
            if (!v247)
              goto LABEL_357;
          }
        }
        do
        {
          v248 = *((_QWORD *)v247 + 1);
          if (v248 == v183)
          {
            if (v247[4] == v177 && v247[5] == v176 && v247[6] == 0.0 && v247[7] == v174)
              goto LABEL_424;
          }
          else
          {
            if (v248 >= v244)
              v248 %= v244;
            if (v248 != v80)
              break;
          }
          v247 = *(float **)v247;
        }
        while (v247);
      }
    }
  }
LABEL_357:
  v250 = (float *)operator new(0x28uLL);
  *(_QWORD *)v250 = 0;
  *((_QWORD *)v250 + 1) = v183;
  v250[4] = v177;
  v250[5] = v176;
  v250[6] = 0.0;
  v250[7] = v174;
  *((_QWORD *)v250 + 4) = v200;
  v251 = (float)(unint64_t)(*((_QWORD *)v243 + 3) + 1);
  v252 = v243[8];
  if (!v244 || (float)(v252 * (float)v244) < v251)
  {
    v253 = 1;
    if (v244 >= 3)
      v253 = (v244 & (v244 - 1)) != 0;
    v254 = v253 | (2 * v244);
    v255 = vcvtps_u32_f32(v251 / v252);
    if (v254 <= v255)
      prime = v255;
    else
      prime = v254;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v244 = *((_QWORD *)v243 + 1);
    }
    if (prime <= v244)
    {
      if (prime >= v244)
        goto LABEL_409;
      v268 = vcvtps_u32_f32((float)*((unint64_t *)v243 + 3) / v243[8]);
      if (v244 < 3 || (v269 = (uint8x8_t)vcnt_s8((int8x8_t)v244), v269.i16[0] = vaddlv_u8(v269), v269.u32[0] > 1uLL))
      {
        v268 = std::__next_prime(v268);
      }
      else
      {
        v270 = 1 << -(char)__clz(v268 - 1);
        if (v268 >= 2)
          v268 = v270;
      }
      if (prime <= v268)
        prime = v268;
      if (prime >= v244)
        goto LABEL_409;
      if (!prime)
      {
        v274 = *(_QWORD **)v243;
        *(_QWORD *)v243 = 0;
        if (v274)
          operator delete(v274);
        *((_QWORD *)v243 + 1) = 0;
        goto LABEL_409;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v257 = operator new(8 * prime);
    v258 = *(_QWORD **)v243;
    *(_QWORD *)v243 = v257;
    if (v258)
      operator delete(v258);
    v259 = 0;
    *((_QWORD *)v243 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)v243 + 8 * v259++) = 0;
    while (prime != v259);
    v261 = (uint64_t *)(v243 + 4);
    v260 = (_QWORD *)*((_QWORD *)v243 + 2);
    if (!v260)
    {
LABEL_409:
      v244 = *((_QWORD *)v243 + 1);
      if ((v244 & (v244 - 1)) != 0)
      {
        if (v183 >= v244)
          v80 = v183 % v244;
        else
          v80 = v183;
      }
      else
      {
        v80 = (v244 - 1) & v183;
      }
      goto LABEL_414;
    }
    v262 = v260[1];
    v263 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v264 = v262 & v263;
      *(_QWORD *)(*(_QWORD *)v243 + 8 * v264) = v261;
      while (1)
      {
        v265 = (_QWORD *)*v260;
        if (!*v260)
          break;
        v266 = v265[1] & v263;
        if (v266 == v264)
        {
          v260 = (_QWORD *)*v260;
        }
        else if (*(_QWORD *)(*(_QWORD *)v243 + 8 * v266))
        {
          *v260 = *v265;
          v267 = 8 * v266;
          *v265 = **(_QWORD **)(*(_QWORD *)v243 + v267);
          **(_QWORD **)(*(_QWORD *)v243 + v267) = v265;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v243 + 8 * v266) = v260;
          v260 = v265;
          v264 = v266;
        }
      }
      goto LABEL_409;
    }
    if (v262 >= prime)
      v262 %= prime;
    *(_QWORD *)(*(_QWORD *)v243 + 8 * v262) = v261;
    v271 = (_QWORD *)*v260;
    if (!*v260)
      goto LABEL_409;
    while (1)
    {
      v273 = v271[1];
      if (v273 >= prime)
        v273 %= prime;
      if (v273 != v262)
      {
        if (!*(_QWORD *)(*(_QWORD *)v243 + 8 * v273))
        {
          *(_QWORD *)(*(_QWORD *)v243 + 8 * v273) = v260;
          goto LABEL_395;
        }
        *v260 = *v271;
        v272 = 8 * v273;
        *v271 = **(_QWORD **)(*(_QWORD *)v243 + v272);
        **(_QWORD **)(*(_QWORD *)v243 + v272) = v271;
        v271 = v260;
      }
      v273 = v262;
LABEL_395:
      v260 = v271;
      v271 = (_QWORD *)*v271;
      v262 = v273;
      if (!v271)
        goto LABEL_409;
    }
  }
LABEL_414:
  v275 = *(_QWORD **)v243;
  v276 = *(float ***)(*(_QWORD *)v243 + 8 * v80);
  if (v276)
  {
    *(_QWORD *)v250 = *v276;
  }
  else
  {
    *(_QWORD *)v250 = *((_QWORD *)v243 + 2);
    *((_QWORD *)v243 + 2) = v250;
    v275[v80] = v243 + 4;
    if (!*(_QWORD *)v250)
      goto LABEL_423;
    v277 = *(_QWORD *)(*(_QWORD *)v250 + 8);
    if ((v244 & (v244 - 1)) != 0)
    {
      if (v277 >= v244)
        v277 %= v244;
    }
    else
    {
      v277 &= v244 - 1;
    }
    v276 = (float **)(*(_QWORD *)v243 + 8 * v277);
  }
  *v276 = v250;
LABEL_423:
  ++*((_QWORD *)v243 + 3);
LABEL_424:
  v278 = v72[8];
  *(_QWORD *)(v278 + 112) = v200;
  *(_QWORD *)(v278 + 120) = 0;
  v279 = v72[20];
  v280 = *(std::__shared_weak_count **)(v279 + 120);
  *(_QWORD *)(v279 + 112) = 0;
  *(_QWORD *)(v279 + 120) = 0;
  if (v280)
  {
    v281 = (unint64_t *)&v280->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  if (*(_QWORD *)&v413.f64[1])
  {
    v283 = *(_OWORD *)&v412[16];
    if (*(_QWORD *)&v412[24] != *(_QWORD *)&v412[16])
    {
      v284 = *(_QWORD **)&v412[8];
      v285 = LOBYTE(v413.f64[0]);
      v286 = BYTE1(v413.f64[0]);
      if (*(_QWORD *)v412 && *(_BYTE *)(*(_QWORD *)&v412[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v412 + 64))();
      if (v285 && !v286)
      {
        v288 = v284[7];
        v287 = v284[8];
        if (v287 == v288)
          v288 = v284[10] - v284[9];
        if ((unint64_t)v283 < v288)
          v288 = v283;
        if (v287 <= *((_QWORD *)&v283 + 1))
          v287 = *((_QWORD *)&v283 + 1);
        if (v287 == v288)
          v287 = v288 + v284[10] - v284[9];
        v284[7] = v288;
        v284[8] = v287;
      }
    }
  }
LABEL_445:
  *(_QWORD *)(v72[12] + 24) = v8;
  v289 = *(_QWORD *)a1[14];
  v290 = *a1;
  _S8 = 1.0 / *(float *)(*a1 + 40);
  if (*(unsigned __int8 *)(v289 + 24) == 255)
  {
    if (*(_BYTE *)(v290 + 5) && *(_BYTE *)(v290 + 4))
    {
      v294 = *(double *)(v289 + 288);
      v295 = *(double *)(v289 + 296);
      v296 = *(double *)(v289 + 304);
      v297 = *(double *)(v289 + 312);
      v298 = v295 + v295;
      v299 = (v295 + v295) * v295;
      v300 = (v296 + v296) * v296;
      v301 = v294 + v294;
      v302 = (v294 + v294) * v295;
      v303 = (v296 + v296) * v297;
      v304 = v296 * (v294 + v294);
      v305 = 1.0 - (v294 + v294) * v294;
      v306 = v298 * v296;
      *(double *)__p = 1.0 - (v299 + v300);
      *(double *)&__p[8] = v303 + v302;
      *(double *)&__p[32] = v302 - v303;
      v401 = v305 - v300;
      v404 = v297 * v298 + v304;
      v405 = v306 - v297 * v301;
      *(double *)&__p[16] = v304 - v297 * v298;
      v402 = v297 * v301 + v306;
      v406 = v305 - v299;
      *(_QWORD *)&__p[24] = 0;
      v403 = 0;
      v407 = 0;
      v408 = 0;
      v410 = 0;
      v411 = 0x3FF0000000000000;
      v409 = 0;
      gm::Matrix<double,4,4>::inverted<int,void>((double *)v412, (double *)__p);
      v307 = *(double *)(v290 + 80);
      v308 = *(double *)(v290 + 88);
      v309 = *(double *)(v290 + 96);
      v310 = *(double *)(v290 + 104);
      _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v412, v307), v413, v308), v415, v309), v417, v310);
      _D1 = *(double *)&v412[16] * v307 + v414 * v308 + v416 * v309 + v418 * v310;
    }
    else
    {
      _Q0 = *(float64x2_t *)(v290 + 80);
      _D1 = *(double *)(v290 + 96);
    }
  }
  else
  {
    _Q0 = *(float64x2_t *)(v290 + 112);
    _D1 = *(double *)(v290 + 128);
  }
  __asm { FCVT            H9, D1 }
  _D1 = _Q0.f64[1];
  __asm
  {
    FCVT            H1, D1
    FCVT            H0, D0
  }
  WORD1(_Q0.f64[0]) = LOWORD(_D1);
  v383 = LODWORD(_Q0.f64[0]);
  *(_QWORD *)__p = vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]).u64[0];
  __asm { FCVT            S0, H9 }
  *(_DWORD *)&__p[8] = _S0;
  *(float *)&__p[12] = _S8;
  v317 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>((_QWORD *)(v7 + 368), (float *)__p);
  if (v317)
  {
    v318 = v317[4];
  }
  else
  {
    v319 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v7 + 1704));
    v318 = v319;
    *(_OWORD *)v412 = 0uLL;
    v320 = *(_QWORD *)(v319 + 8);
    *(_QWORD *)&v321 = 0;
    *((_QWORD *)&v321 + 1) = v319;
    if (v320)
      v322 = *(double *)(v319 + 72);
    else
      v322 = 0.0;
    v382 = v321;
    *(_OWORD *)v412 = v321;
    *(_QWORD *)&v412[16] = 0;
    *(_QWORD *)&v412[24] = v320;
    v413.f64[1] = v322;
    LOWORD(v413.f64[0]) = 1;
    __asm { FCVT            H0, S8 }
    **(_DWORD **)&v322 = v383;
    *(_WORD *)(*(_QWORD *)&v322 + 4) = _H9;
    *(_WORD *)(*(_QWORD *)&v322 + 6) = _H0;
    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>((float *)(v7 + 368), (float *)__p, __p, v319);
    if (v320)
    {
      if ((_QWORD)v382 && *(_BYTE *)(*((_QWORD *)&v382 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v382 + 64))();
      v324 = *(_QWORD *)(*((_QWORD *)&v382 + 1) + 64);
      if (v324 <= v320)
        v324 = v320;
      *(_QWORD *)(*((_QWORD *)&v382 + 1) + 56) = 0;
      *(_QWORD *)(*((_QWORD *)&v382 + 1) + 64) = v324;
    }
  }
  v325 = v72[8];
  *(_QWORD *)(v325 + 64) = v318;
  *(_QWORD *)(v325 + 72) = 0;
  v326 = v72[20];
  v327 = *(std::__shared_weak_count **)(v326 + 72);
  *(_QWORD *)(v326 + 64) = 0;
  *(_QWORD *)(v326 + 72) = 0;
  if (v327)
  {
    v328 = (unint64_t *)&v327->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  *(float32x4_t *)v412 = v388;
  v412[16] = 1;
  v330 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>((_QWORD *)(v7 + 448), (float *)v412);
  if (v330)
  {
    v331 = *(_QWORD *)(v330 + 40);
  }
  else
  {
    v332 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v7 + 1960));
    v331 = v332;
    v333 = *(_QWORD *)(v332 + 8);
    **(float16x4_t **)(v332 + 72) = vcvt_f16_f32(v388);
    if (*(_QWORD *)(v332 + 64) > v333)
      v333 = *(_QWORD *)(v332 + 64);
    *(_QWORD *)(v332 + 56) = 0;
    *(_QWORD *)(v332 + 64) = v333;
    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *&>((float *)(v7 + 448), (unsigned int *)v412, (uint64_t)v412, v332);
  }
  v334 = v72[8];
  *(_QWORD *)(v334 + 144) = v331;
  *(_QWORD *)(v334 + 152) = 0;
  v335 = v72[20];
  v336 = *(std::__shared_weak_count **)(v335 + 152);
  *(_QWORD *)(v335 + 144) = 0;
  *(_QWORD *)(v335 + 152) = 0;
  if (v336)
  {
    v337 = (unint64_t *)&v336->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = a1[10];
  if (!*(_BYTE *)v339)
  {
    v341 = a1[4];
    v342 = v384;
    if (!*(_BYTE *)v341)
      v342 = 0;
    if (!v342)
      goto LABEL_502;
    _Q1 = *(float32x4_t *)(v341 + 4);
    goto LABEL_485;
  }
  if (v384)
  {
    __asm { FMOV            V1.4S, #1.0 }
    _Q1.i64[0] = *(_QWORD *)(v339 + 4);
    _Q1.i32[2] = *(_DWORD *)(v339 + 12);
LABEL_485:
    v385 = _Q1;
    *(float32x4_t *)__p = _Q1;
    __p[16] = 1;
    v343 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>((_QWORD *)(v7 + 488), (float *)__p);
    if (v343)
    {
      v344 = *(_QWORD *)(v343 + 40);
    }
    else
    {
      v345 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v7 + 1920));
      v344 = v345;
      *(_OWORD *)v412 = 0uLL;
      v346 = *(_QWORD *)(v345 + 8);
      *(_QWORD *)&v347 = 0;
      *((_QWORD *)&v347 + 1) = v345;
      if (v346)
        v348 = *(float16x4_t **)(v345 + 72);
      else
        v348 = 0;
      v349 = v385;
      v386 = (float32x4_t)v347;
      *(_OWORD *)v412 = v347;
      *(_QWORD *)&v412[16] = 0;
      *(_QWORD *)&v412[24] = v346;
      *(_QWORD *)&v413.f64[1] = v348;
      LOWORD(v413.f64[0]) = 1;
      *v348 = vcvt_f16_f32(v349);
      std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *&>((float *)(v7 + 488), (unsigned int *)__p, (uint64_t)__p, v345);
      if (v346)
      {
        if (v386.i64[0] && *(_BYTE *)(v386.i64[1] + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v386.i64[0] + 64))();
        v350 = *(_QWORD *)(v386.i64[1] + 64);
        if (v350 <= v346)
          v350 = v346;
        *(_QWORD *)(v386.i64[1] + 56) = 0;
        *(_QWORD *)(v386.i64[1] + 64) = v350;
      }
    }
    v351 = v72[8];
    *(_QWORD *)(v351 + 160) = v344;
    *(_QWORD *)(v351 + 168) = 0;
    v352 = v72[20];
    v353 = *(std::__shared_weak_count **)(v352 + 168);
    *(_QWORD *)(v352 + 160) = 0;
    *(_QWORD *)(v352 + 168) = 0;
    if (v353)
    {
      v354 = (unint64_t *)&v353->__shared_owners_;
      do
        v355 = __ldaxr(v354);
      while (__stlxr(v355 - 1, v354));
      if (!v355)
      {
        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
        std::__shared_weak_count::__release_weak(v353);
      }
    }
  }
LABEL_502:
  memset(&__p[4], 0, 32);
  v356 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v7 + 2992), 3, v388.f32[3] >= 1.0, 1, 0, 1, *(unsigned __int8 *)a1[19], 3);
  v357 = *a1;
  v358 = *a2;
  v359 = *(_QWORD **)(*a2 + 96);
  v360 = (v359[6] - v359[5]) / v359[1];
  if (*(_BYTE *)(*a1 + 176))
  {
    v361 = vdupq_n_s64(1uLL);
    v361.i64[0] = (v359[6] - v359[5]) / v359[1];
    *(int64x2_t *)(v357 + 184) = vaddq_s64(*(int64x2_t *)(v357 + 184), v361);
    *(int64x2_t *)(v357 + 248) = vaddq_s64(*(int64x2_t *)(v357 + 248), v361);
  }
  v362 = *(_QWORD *)a1[20];
  *(_OWORD *)v412 = *(_OWORD *)__p;
  *(_OWORD *)&v412[16] = *(_OWORD *)&__p[16];
  LODWORD(v413.f64[0]) = *(_DWORD *)&__p[32];
  v363 = *(_QWORD **)(v7 + 3112);
  v364 = v363[1];
  if (v364 == *(_QWORD *)(v7 + 3120))
  {
    v363 = (_QWORD *)*v363;
    if (!v363)
    {
      v363 = malloc_type_malloc(120 * v364 + 16, 0xB644C221uLL);
      *v363 = 0;
      v363[1] = 0;
      **(_QWORD **)(v7 + 3112) = v363;
    }
    *(_QWORD *)(v7 + 3112) = v363;
    v364 = v363[1];
  }
  v365 = &v363[15 * v364];
  v363[1] = v364 + 1;
  v365[2] = &off_1E42B59B0;
  v365 += 2;
  v365[2] = "";
  v365[3] = v356;
  v365[4] = v72;
  *(_OWORD *)(v365 + 5) = xmmword_19FFB5EB0;
  *((_DWORD *)v365 + 14) = 1065353216;
  *((_DWORD *)v365 + 15) = *(_DWORD *)v412;
  *((int64x2_t *)v365 + 6) = vdupq_n_s64(1uLL);
  v365[14] = 0;
  v365[8] = v358;
  v365[9] = 0;
  v365[10] = v360;
  v365[11] = 0;
  v365[12] = 1;
  ggl::CommandBuffer::pushRenderItem(v362, (ggl::RenderItem *)v365);
}

void sub_19FE10C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_19FE10CF8()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x19FE10D90);
}

void sub_19FE10D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  v37 = *(std::__shared_weak_count **)(v35 - 232);
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(v35 - 248);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *&>(float *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  _QWORD *v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;

  if (!*((_BYTE *)a2 + 16))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_114;
  }
  v8 = *((float *)a2 + 1);
  v9 = *a2 - 0x61C8864680B583EBLL;
  if (*(float *)a2 == 0.0)
    v9 = 0x9E3779B97F4A7C15;
  v10 = LODWORD(v8) - 0x61C8864680B583EBLL;
  if (v8 == 0.0)
    v10 = 0x9E3779B97F4A7C15;
  v11 = *((float *)a2 + 2);
  v12 = *((float *)a2 + 3);
  v13 = ((v9 >> 2) + (v9 << 6) + v10) ^ v9;
  v14 = LODWORD(v11) - 0x61C8864680B583EBLL;
  if (v11 == 0.0)
    v14 = 0x9E3779B97F4A7C15;
  v15 = (v14 + (v13 << 6) + (v13 >> 2)) ^ v13;
  v16 = LODWORD(v12) - 0x61C8864680B583EBLL;
  if (v12 == 0.0)
    v16 = 0x9E3779B97F4A7C15;
  v17 = (v16 + (v15 << 6) + (v15 >> 2)) ^ v15;
  v18 = (((v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL) ^ v17) - 0x61C8864680B583EBLL;
  v19 = *((_QWORD *)a1 + 1);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v4 = (((v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL) ^ v17) - 0x61C8864680B583EBLL;
      if (v18 >= v19)
        v4 = v18 % v19;
    }
    else
    {
      v4 = v18 & (v19 - 1);
    }
    v21 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
      v22 = *v21;
      if (v22)
      {
        if (v20.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v22[1];
            if (v25 == v18)
            {
              if (*((_BYTE *)v22 + 32))
              {
                if (v22[2] == *(_QWORD *)a2 && v22[3] == *((_QWORD *)a2 + 1))
                  return;
              }
            }
            else if ((v25 & (v19 - 1)) != v4)
            {
              goto LABEL_42;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_42;
          }
        }
        do
        {
          v23 = v22[1];
          if (v23 == v18)
          {
            if (*((_BYTE *)v22 + 32))
            {
              if (v22[2] == *(_QWORD *)a2 && v22[3] == *((_QWORD *)a2 + 1))
                return;
            }
          }
          else
          {
            if (v23 >= v19)
              v23 %= v19;
            if (v23 != v4)
              break;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
  }
LABEL_42:
  v27 = operator new(0x30uLL);
  v28 = v27;
  *v27 = 0;
  v27[1] = v18;
  *((_BYTE *)v27 + 16) = 0;
  *((_BYTE *)v27 + 32) = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((_BYTE *)v27 + 32) = 1;
  }
  v27[5] = a4;
  v29 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v30 = a1[8];
  if (!v19 || (float)(v30 * (float)v19) < v29)
  {
    v31 = 1;
    if (v19 >= 3)
      v31 = (v19 & (v19 - 1)) != 0;
    v32 = v31 | (2 * v19);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v19 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v19)
    {
      if (prime >= v19)
        goto LABEL_81;
      v46 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v19 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v19)
      {
        v19 = *((_QWORD *)a1 + 1);
LABEL_81:
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v18 >= v19)
            v4 = v18 % v19;
          else
            v4 = v18;
        }
        else
        {
          v4 = (v19 - 1) & v18;
        }
        goto LABEL_94;
      }
      if (!prime)
      {
        v55 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v55)
          operator delete(v55);
        v19 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_81;
      }
    }
    if (!(prime >> 61))
    {
      v35 = operator new(8 * prime);
      v36 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v35;
      if (v36)
        operator delete(v36);
      v37 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v37++) = 0;
      while (prime != v37);
      v39 = (uint64_t *)(a1 + 4);
      v38 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v38)
        goto LABEL_80;
      v40 = v38[1];
      v41 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v42 = v40 & v41;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v39;
        for (i = (_QWORD *)*v38; *v38; i = (_QWORD *)*v38)
        {
          v44 = i[1] & v41;
          if (v44 == v42)
          {
            v38 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
          {
            *v38 = *i;
            v45 = 8 * v44;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v45);
            **(_QWORD **)(*(_QWORD *)a1 + v45) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v38;
            v38 = i;
            v42 = v44;
          }
        }
LABEL_80:
        v19 = prime;
        goto LABEL_81;
      }
      if (v40 >= prime)
        v40 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v39;
      v49 = (_QWORD *)*v38;
      if (!*v38)
        goto LABEL_80;
      while (1)
      {
        v51 = v49[1];
        if (v51 >= prime)
          v51 %= prime;
        if (v51 != v40)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v51))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v38;
            goto LABEL_85;
          }
          *v38 = *v49;
          v50 = 8 * v51;
          *v49 = **(_QWORD **)(*(_QWORD *)a1 + v50);
          **(_QWORD **)(*(_QWORD *)a1 + v50) = v49;
          v49 = v38;
        }
        v51 = v40;
LABEL_85:
        v38 = v49;
        v49 = (_QWORD *)*v49;
        v40 = v51;
        if (!v49)
          goto LABEL_80;
      }
    }
LABEL_114:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_94:
  v52 = *(_QWORD **)a1;
  v53 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v53)
  {
    *v28 = *v53;
LABEL_102:
    *v53 = v28;
    goto LABEL_103;
  }
  *v28 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v28;
  v52[v4] = a1 + 4;
  if (*v28)
  {
    v54 = *(_QWORD *)(*v28 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v54 >= v19)
        v54 %= v19;
    }
    else
    {
      v54 &= v19 - 1;
    }
    v53 = (_QWORD *)(*(_QWORD *)a1 + 8 * v54);
    goto LABEL_102;
  }
LABEL_103:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FE112F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setupDepthPipeline<ggl::DaVinci::LinearDepthPipelineSetup,ggl::DaVinci::LinearDepthPipelineState>(uint64_t a1, ggl::PipelineSetup *this, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10, char a11, _QWORD *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _BYTE *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  BOOL v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  float64x2_t v142[8];

  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = (std::__shared_weak_count *)a8[1];
  v138 = *a8;
  v139 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (a4)
  {
    v24 = (unint64_t *)&a4->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (a3 && **(_QWORD **)(a3 + 40) == *((_QWORD *)this + 1))
  {
    v29 = *((_QWORD *)this + 2);
    if (v29 && v29 != a3)
      ggl::PipelineSetup::resetData((uint64_t)this);
    if (a4)
    {
      v30 = (unint64_t *)&a4->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = a3;
    *((_QWORD *)this + 3) = a4;
    if (!v26)
      goto LABEL_26;
    v32 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v32);
    while (__stlxr(v28 - 1, v32));
  }
  else
  {
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (!v26)
      goto LABEL_26;
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
  }
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (!a4)
      goto LABEL_30;
    goto LABEL_27;
  }
LABEL_26:
  if (!a4)
    goto LABEL_30;
LABEL_27:
  v33 = (unint64_t *)&a4->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
    if (!a7)
      goto LABEL_47;
    goto LABEL_31;
  }
LABEL_30:
  if (!a7)
    goto LABEL_47;
LABEL_31:
  if (*(_BYTE *)(a3 + 316))
  {
    v35 = *(_QWORD **)(**(_QWORD **)(a7 + 216) + 120);
    if (!v35)
LABEL_38:
      abort();
    while (1)
    {
      while (1)
      {
        v36 = v35[4];
        if (v36 < 3)
          break;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_38;
      }
      if (v36 == 2)
        break;
      v35 = (_QWORD *)v35[1];
      if (!v35)
        goto LABEL_38;
    }
    v37 = *((_QWORD *)this + 4);
    *(_QWORD *)(v37 + 16) = v35[5];
    *(_QWORD *)(v37 + 24) = 0;
    v38 = *((_QWORD *)this + 16);
    v39 = *(std::__shared_weak_count **)(v38 + 24);
    *(_QWORD *)(v38 + 16) = 0;
    *(_QWORD *)(v38 + 24) = 0;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
LABEL_47:
  v42 = (_QWORD *)*((_QWORD *)this + 4);
  *v42 = v138;
  v42[1] = 0;
  v43 = (_QWORD *)*((_QWORD *)this + 16);
  if (v139)
  {
    v44 = (unint64_t *)&v139->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (std::__shared_weak_count *)v43[1];
  *v43 = v138;
  v43[1] = v139;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = a6 + 16 * a10;
  v50 = *((_QWORD *)this + 8);
  *(_QWORD *)(v50 + 40) = 0;
  v51 = *(_QWORD *)(v49 + 400);
  *(_QWORD *)(v50 + 32) = v51;
  v52 = *((_QWORD *)this + 20);
  v53 = *(_QWORD *)(v49 + 408);
  if (v53)
  {
    v54 = (unint64_t *)(v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = *(std::__shared_weak_count **)(v52 + 40);
  *(_QWORD *)(v52 + 32) = v51;
  *(_QWORD *)(v52 + 40) = v53;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (_QWORD *)*((_QWORD *)this + 8);
  v59[1] = 0;
  v60 = *(_QWORD *)(a6 + 216);
  *v59 = v60;
  v61 = (_QWORD *)*((_QWORD *)this + 20);
  v62 = *(_QWORD *)(a6 + 224);
  if (v62)
  {
    v63 = (unint64_t *)(v62 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = (std::__shared_weak_count *)v61[1];
  *v61 = v60;
  v61[1] = v62;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *((_QWORD *)this + 8);
  *(_QWORD *)(v68 + 24) = 0;
  v69 = *(_QWORD *)(a6 + 232);
  *(_QWORD *)(v68 + 16) = v69;
  v70 = *((_QWORD *)this + 20);
  v71 = *(_QWORD *)(a6 + 240);
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *(std::__shared_weak_count **)(v70 + 24);
  *(_QWORD *)(v70 + 16) = v69;
  *(_QWORD *)(v70 + 24) = v71;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (*(_BYTE *)(a3 + 336))
  {
    v77 = *((_QWORD *)this + 8);
    *(_QWORD *)(v77 + 88) = 0;
    v78 = *a9;
    *(_QWORD *)(v77 + 80) = *a9;
    v79 = *((_QWORD *)this + 20);
    v80 = a9[1];
    if (v80)
    {
      v81 = (unint64_t *)(v80 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v83 = *(std::__shared_weak_count **)(v79 + 88);
    *(_QWORD *)(v79 + 80) = v78;
    *(_QWORD *)(v79 + 88) = v80;
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
  }
  v86 = *(_QWORD **)(a6 + 432);
  v87 = v86[1];
  v88 = (float32x4_t *)v86[9];
  gm::operator*<double,4,4,4>(v142[0].f64, (double *)(a5 + 3160), (double *)(a6 + 88));
  v89 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v142[2]), v142[3]);
  v90 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v142[4]), v142[5]);
  v91 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v142[6]), v142[7]);
  *v88 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v142[0]), v142[1]);
  v88[1] = v89;
  v88[2] = v90;
  v88[3] = v91;
  v92 = 1.0 / *(double *)(a5 + 976);
  v88[4].f32[0] = v92;
  v93 = *((_QWORD *)this + 8);
  *(_QWORD *)(v93 + 64) = v86;
  *(_QWORD *)(v93 + 72) = 0;
  v94 = *((_QWORD *)this + 20);
  v95 = *(_QWORD *)(a6 + 440);
  if (v95)
  {
    v96 = (unint64_t *)(v95 + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  v98 = *(std::__shared_weak_count **)(v94 + 72);
  *(_QWORD *)(v94 + 64) = v86;
  *(_QWORD *)(v94 + 72) = v95;
  if (v98)
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v86[8];
  if (v101 <= v87)
    v101 = v87;
  v86[7] = 0;
  v86[8] = v101;
  if (a7)
  {
    v102 = *(_BYTE **)(a7 + 216);
    if (v102[61] == 1)
    {
      v104 = (_QWORD *)(*(_QWORD *)v102 + 120);
      v103 = (_QWORD *)*v104;
      if (!*v104)
        goto LABEL_111;
      v105 = v104;
      v106 = (_QWORD *)*v104;
      do
      {
        v107 = v106[4];
        v108 = v107 >= 2;
        if (v107 >= 2)
          v109 = v106;
        else
          v109 = v106 + 1;
        if (v108)
          v105 = v106;
        v106 = (_QWORD *)*v109;
      }
      while (*v109);
      if (v105 != v104 && v105[4] <= 2uLL)
      {
        while (1)
        {
          while (1)
          {
            v132 = v103[4];
            if (v132 < 3)
              break;
            v103 = (_QWORD *)*v103;
            if (!v103)
              goto LABEL_38;
          }
          if (v132 == 2)
            break;
          v103 = (_QWORD *)v103[1];
          if (!v103)
            goto LABEL_38;
        }
        v111 = v103[5];
        v110 = (std::__shared_weak_count *)v103[6];
        if (v110)
        {
          v136 = (unint64_t *)&v110->__shared_owners_;
          do
            v137 = __ldxr(v136);
          while (__stxr(v137 + 1, v136));
        }
      }
      else
      {
LABEL_111:
        v110 = 0;
        v111 = 0;
      }
      v112 = *((_QWORD *)this + 4);
      *(_QWORD *)(v112 + 16) = v111;
      *(_QWORD *)(v112 + 24) = 0;
      v113 = *((_QWORD *)this + 16);
      v114 = *(std::__shared_weak_count **)(v113 + 24);
      *(_QWORD *)(v113 + 16) = 0;
      *(_QWORD *)(v113 + 24) = 0;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      if (v110)
      {
        v117 = (unint64_t *)&v110->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
  }
  a12[4] = this;
  a12[6] = 768;
  a12[3] = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a1 + 2992), 3, 1, 1, 0, 0, 0, 3);
  if (!v139)
    goto LABEL_126;
  v119 = (unint64_t *)&v139->__shared_owners_;
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (!v120)
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
    v121 = a4;
    if (!a4)
      goto LABEL_130;
  }
  else
  {
LABEL_126:
    v121 = a4;
    if (!a4)
      goto LABEL_130;
  }
  v122 = (unint64_t *)&v121->__shared_owners_;
  do
    v123 = __ldaxr(v122);
  while (__stlxr(v123 - 1, v122));
  if (v123)
  {
LABEL_130:
    if ((a11 & 1) != 0)
      return;
    goto LABEL_131;
  }
  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
  std::__shared_weak_count::__release_weak(v121);
  if ((a11 & 1) != 0)
    return;
LABEL_131:
  if (!a7 || !*(_BYTE *)(a7 + 200))
  {
    v133 = *((_QWORD *)this + 8);
    *(_QWORD *)(v133 + 48) = *(_QWORD *)(a1 + 2016);
    *(_QWORD *)(v133 + 56) = 0;
    v134 = *((_QWORD *)this + 20);
    v129 = *(std::__shared_weak_count **)(v134 + 56);
    *(_QWORD *)(v134 + 48) = 0;
    *(_QWORD *)(v134 + 56) = 0;
    if (!v129)
      return;
    v135 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldaxr(v135);
    while (__stlxr(v131 - 1, v135));
    goto LABEL_147;
  }
  v124 = *(_DWORD *)(a7 + 196);
  v125 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1976));
  v126 = *(_QWORD *)(v125 + 8);
  **(_DWORD **)(v125 + 72) = v124;
  if (*(_QWORD *)(v125 + 64) > v126)
    v126 = *(_QWORD *)(v125 + 64);
  *(_QWORD *)(v125 + 56) = 0;
  *(_QWORD *)(v125 + 64) = v126;
  v127 = *((_QWORD *)this + 8);
  *(_QWORD *)(v127 + 48) = v125;
  *(_QWORD *)(v127 + 56) = 0;
  v128 = *((_QWORD *)this + 20);
  v129 = *(std::__shared_weak_count **)(v128 + 56);
  *(_QWORD *)(v128 + 48) = 0;
  *(_QWORD *)(v128 + 56) = 0;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
LABEL_147:
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
}

void sub_19FE11B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setupDepthPipeline<ggl::DaVinci::GroundShadowMapPipelineSetup,ggl::DaVinci::GroundShadowMapPipelineState>(uint64_t a1, ggl::PipelineSetup *this, uint64_t a3, std::__shared_weak_count *a4, _QWORD *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, char a10, _QWORD *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _BYTE *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  BOOL v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;

  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (std::__shared_weak_count *)a7[1];
  v122 = *a7;
  v123 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (a4)
  {
    v23 = (unint64_t *)&a4->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (a3 && **(_QWORD **)(a3 + 40) == *((_QWORD *)this + 1))
  {
    v28 = *((_QWORD *)this + 2);
    if (v28 && v28 != a3)
      ggl::PipelineSetup::resetData((uint64_t)this);
    if (a4)
    {
      v29 = (unint64_t *)&a4->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = a3;
    *((_QWORD *)this + 3) = a4;
    if (!v25)
      goto LABEL_26;
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v31);
    while (__stlxr(v27 - 1, v31));
  }
  else
  {
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (!v25)
      goto LABEL_26;
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
  }
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!a4)
      goto LABEL_30;
    goto LABEL_27;
  }
LABEL_26:
  if (!a4)
    goto LABEL_30;
LABEL_27:
  v32 = (unint64_t *)&a4->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
    if (!a6)
      goto LABEL_47;
    goto LABEL_31;
  }
LABEL_30:
  if (!a6)
    goto LABEL_47;
LABEL_31:
  if (*(_BYTE *)(a3 + 316))
  {
    v34 = *(_QWORD **)(**(_QWORD **)(a6 + 216) + 120);
    if (!v34)
LABEL_38:
      abort();
    while (1)
    {
      while (1)
      {
        v35 = v34[4];
        if (v35 < 3)
          break;
        v34 = (_QWORD *)*v34;
        if (!v34)
          goto LABEL_38;
      }
      if (v35 == 2)
        break;
      v34 = (_QWORD *)v34[1];
      if (!v34)
        goto LABEL_38;
    }
    v36 = *((_QWORD *)this + 4);
    *(_QWORD *)(v36 + 16) = v34[5];
    *(_QWORD *)(v36 + 24) = 0;
    v37 = *((_QWORD *)this + 16);
    v38 = *(std::__shared_weak_count **)(v37 + 24);
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = 0;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
LABEL_47:
  v41 = (_QWORD *)*((_QWORD *)this + 4);
  *v41 = v122;
  v41[1] = 0;
  v42 = (_QWORD *)*((_QWORD *)this + 16);
  if (v123)
  {
    v43 = (unint64_t *)&v123->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = (std::__shared_weak_count *)v42[1];
  *v42 = v122;
  v42[1] = v123;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = &a5[2 * a9];
  v49 = *((_QWORD *)this + 8);
  v50 = v48[50];
  v51 = v48[51];
  *(_QWORD *)(v49 + 32) = v50;
  *(_QWORD *)(v49 + 40) = 0;
  v52 = *((_QWORD *)this + 20);
  if (v51)
  {
    v53 = (unint64_t *)(v51 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = *(std::__shared_weak_count **)(v52 + 40);
  *(_QWORD *)(v52 + 32) = v50;
  *(_QWORD *)(v52 + 40) = v51;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (_QWORD *)*((_QWORD *)this + 8);
  v59 = a5[27];
  v60 = a5[28];
  *v58 = v59;
  v58[1] = 0;
  v61 = (_QWORD *)*((_QWORD *)this + 20);
  if (v60)
  {
    v62 = (unint64_t *)(v60 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = (std::__shared_weak_count *)v61[1];
  *v61 = v59;
  v61[1] = v60;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *((_QWORD *)this + 8);
  v68 = a5[29];
  v69 = a5[30];
  *(_QWORD *)(v67 + 16) = v68;
  *(_QWORD *)(v67 + 24) = 0;
  v70 = *((_QWORD *)this + 20);
  if (v69)
  {
    v71 = (unint64_t *)(v69 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *(std::__shared_weak_count **)(v70 + 24);
  *(_QWORD *)(v70 + 16) = v68;
  *(_QWORD *)(v70 + 24) = v69;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (!*(_BYTE *)(a3 + 336))
    goto LABEL_87;
  v76 = *((_QWORD *)this + 8);
  v77 = *a8;
  v78 = a8[1];
  *(_QWORD *)(v76 + 80) = *a8;
  *(_QWORD *)(v76 + 88) = 0;
  v79 = *((_QWORD *)this + 20);
  if (v78)
  {
    v80 = (unint64_t *)(v78 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = *(std::__shared_weak_count **)(v79 + 88);
  *(_QWORD *)(v79 + 80) = v77;
  *(_QWORD *)(v79 + 88) = v78;
  if (!v82)
    goto LABEL_87;
  v83 = (unint64_t *)&v82->__shared_owners_;
  do
    v84 = __ldaxr(v83);
  while (__stlxr(v84 - 1, v83));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if (!a6)
      goto LABEL_117;
  }
  else
  {
LABEL_87:
    if (!a6)
      goto LABEL_117;
  }
  v85 = *(_BYTE **)(a6 + 216);
  if (v85[61] == 1)
  {
    v87 = (_QWORD *)(*(_QWORD *)v85 + 120);
    v86 = (_QWORD *)*v87;
    if (!*v87)
      goto LABEL_100;
    v88 = v87;
    v89 = (_QWORD *)*v87;
    do
    {
      v90 = v89[4];
      v91 = v90 >= 2;
      if (v90 >= 2)
        v92 = v89;
      else
        v92 = v89 + 1;
      if (v91)
        v88 = v89;
      v89 = (_QWORD *)*v92;
    }
    while (*v92);
    if (v88 != v87 && v88[4] <= 2uLL)
    {
      while (1)
      {
        while (1)
        {
          v102 = v86[4];
          if (v102 < 3)
            break;
          v86 = (_QWORD *)*v86;
          if (!v86)
            goto LABEL_38;
        }
        if (v102 == 2)
          break;
        v86 = (_QWORD *)v86[1];
        if (!v86)
          goto LABEL_38;
      }
      v94 = v86[5];
      v93 = (std::__shared_weak_count *)v86[6];
      if (v93)
      {
        v120 = (unint64_t *)&v93->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
    }
    else
    {
LABEL_100:
      v93 = 0;
      v94 = 0;
    }
    v95 = *((_QWORD *)this + 4);
    *(_QWORD *)(v95 + 16) = v94;
    *(_QWORD *)(v95 + 24) = 0;
    v96 = *((_QWORD *)this + 16);
    v97 = *(std::__shared_weak_count **)(v96 + 24);
    *(_QWORD *)(v96 + 16) = 0;
    *(_QWORD *)(v96 + 24) = 0;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v93)
    {
      v100 = (unint64_t *)&v93->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }
LABEL_117:
  a11[4] = this;
  a11[6] = 768;
  a11[3] = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a1 + 2992), 3, 1, 1, 0, 0, 0, 3);
  if (!v123)
    goto LABEL_121;
  v103 = (unint64_t *)&v123->__shared_owners_;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    v105 = a4;
    if (!a4)
      goto LABEL_125;
  }
  else
  {
LABEL_121:
    v105 = a4;
    if (!a4)
      goto LABEL_125;
  }
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_125:
    if ((a10 & 1) != 0)
      return;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
  std::__shared_weak_count::__release_weak(v105);
  if ((a10 & 1) != 0)
    return;
LABEL_126:
  if (!a6 || !*(_BYTE *)(a6 + 200))
  {
    v117 = *((_QWORD *)this + 8);
    *(_QWORD *)(v117 + 48) = *(_QWORD *)(a1 + 2016);
    *(_QWORD *)(v117 + 56) = 0;
    v118 = *((_QWORD *)this + 20);
    v114 = *(std::__shared_weak_count **)(v118 + 56);
    *(_QWORD *)(v118 + 48) = 0;
    *(_QWORD *)(v118 + 56) = 0;
    if (!v114)
      return;
    v119 = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldaxr(v119);
    while (__stlxr(v116 - 1, v119));
    goto LABEL_137;
  }
  v108 = *(_DWORD *)(a6 + 196);
  v109 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1976));
  v110 = *(_QWORD *)(v109 + 64);
  **(_DWORD **)(v109 + 72) = v108;
  v111 = *(_QWORD *)(v109 + 8);
  if (v110 > v111)
    v111 = v110;
  *(_QWORD *)(v109 + 56) = 0;
  *(_QWORD *)(v109 + 64) = v111;
  v112 = *((_QWORD *)this + 8);
  *(_QWORD *)(v112 + 48) = v109;
  *(_QWORD *)(v112 + 56) = 0;
  v113 = *((_QWORD *)this + 20);
  v114 = *(std::__shared_weak_count **)(v113 + 56);
  *(_QWORD *)(v113 + 48) = 0;
  *(_QWORD *)(v113 + 56) = 0;
  if (v114)
  {
    v115 = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
LABEL_137:
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
}

void sub_19FE1224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(int8x16_t *a1, uint64_t *a2, _QWORD **a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  __int8 *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  uint64_t v85;

  if (a4 == 3)
  {
    v11 = &a1->i64[1];
    v12 = a1->i64[1];
    v13 = *(_QWORD *)(*a3[1] + 8 * v12);
    if (*(_BYTE *)*a3)
      v14 = *(unsigned __int8 *)(v13 + 145) == *((unsigned __int8 *)*a3 + 1);
    else
      v14 = 1;
    if (*(_BYTE *)(v13 + 147))
      v37 = !v14;
    else
      v37 = 1;
    if (v37)
    {
      a1->i64[1] = *a2;
      *a2 = v12;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
    }
    else
    {
      v38 = a1->i64[0];
      a1->i64[0] = v12;
      a1->i64[1] = v38;
      a1->i64[1] = *a2;
      *a2 = v38;
      return a2;
    }
    return v11;
  }
  if (a4 == 2)
  {
    v10 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v10;
    return a2;
  }
  v15 = (uint64_t *)a5;
  if (a6 >= a4)
  {
    v29 = &a1->i64[1];
    *(_QWORD *)a5 = a1->i64[0];
    v30 = (uint64_t *)(a5 + 8);
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
      v11 = a2;
    }
    else
    {
      v31 = *a3[1];
      if (*(_BYTE *)*a3)
      {
        v32 = *((unsigned __int8 *)*a3 + 1);
        v33 = (uint64_t *)a1;
        do
        {
          v34 = *v29;
          v35 = *(_QWORD *)(v31 + 8 * *v29);
          if (*(_BYTE *)(v35 + 147))
            v36 = *(unsigned __int8 *)(v35 + 145) == v32;
          else
            v36 = 0;
          if (v36)
            *v33++ = v34;
          else
            *v30++ = v34;
          ++v29;
        }
        while (v29 != a2);
      }
      else
      {
        v33 = (uint64_t *)a1;
        do
        {
          v41 = *v29;
          if (*(_BYTE *)(*(_QWORD *)(v31 + 8 * *v29) + 147))
            *v33++ = v41;
          else
            *v30++ = v41;
          ++v29;
        }
        while (v29 != a2);
      }
      *v33 = *a2;
      v11 = v33 + 1;
      if ((unint64_t)v30 <= a5)
        return v11;
    }
    v42 = (uint64_t *)(a5 + 8);
    if ((unint64_t)v30 > a5 + 8)
      v42 = v30;
    v43 = (unint64_t)v42 + ~a5;
    if (v43 < 0x18)
    {
      v44 = v11;
    }
    else
    {
      v44 = v11;
      if ((unint64_t)v11 - a5 >= 0x20)
      {
        v45 = 0;
        v46 = (v43 >> 3) + 1;
        v47 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = &v11[v45];
          v50 = *(_OWORD *)(a5 + v45 * 8 + 16);
          *(_OWORD *)v49 = *(_OWORD *)(a5 + v45 * 8);
          *((_OWORD *)v49 + 1) = v50;
          v45 += 4;
          v48 -= 4;
        }
        while (v48);
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
          return v11;
        v44 = &v11[v47];
        v15 = (uint64_t *)(a5 + v47 * 8);
      }
    }
    do
    {
      v51 = *v15++;
      *v44++ = v51;
    }
    while (v15 < v30);
    return v11;
  }
  if (a4 >= 0)
    v16 = a4;
  else
    v16 = a4 + 1;
  v17 = v16 >> 1;
  v18 = &a1->i64[v16 >> 1];
  v19 = *a3[1];
  if (!*(_BYTE *)*a3)
  {
    v21 = (__int8 *)(v18 - 1);
    if (!*(_BYTE *)(*(_QWORD *)(v19 + 8 * *(v18 - 1)) + 147))
    {
      v59 = 8 - 8 * v17;
      v60 = v17;
      while (v59)
      {
        v61 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 8 * a1[-1].i64[v60]) + 147);
        v59 += 8;
        --v60;
        if (v61)
        {
          v21 = &a1->i8[-v59];
          goto LABEL_41;
        }
      }
      v11 = a2 + 1;
      v40 = a4 - v17;
      v39 = (uint64_t *)a1;
      goto LABEL_79;
    }
LABEL_41:
    v39 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(a1, v21, a3);
    v19 = *a3[1];
    v11 = a2 + 1;
    v40 = a4 - v17;
    if (*(_BYTE *)*a3)
    {
      v20 = *((unsigned __int8 *)*a3 + 1);
      goto LABEL_62;
    }
LABEL_79:
    if (*(_BYTE *)(*(_QWORD *)(v19 + 8 * *v18) + 147))
    {
      v62 = &a1->i64[v17 + 1];
      while (v62 != a2)
      {
        --v40;
        v63 = *v62++;
        if (!*(_BYTE *)(*(_QWORD *)(v19 + 8 * v63) + 147))
        {
          v58 = v62 - 1;
          goto LABEL_85;
        }
      }
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  v20 = *((unsigned __int8 *)*a3 + 1);
  v21 = (__int8 *)(v18 - 1);
  v22 = *(_QWORD *)(v19 + 8 * *(v18 - 1));
  if (*(_BYTE *)(v22 + 147))
    v23 = *(unsigned __int8 *)(v22 + 145) == v20;
  else
    v23 = 0;
  if (v23)
    goto LABEL_41;
  v24 = 8 - 8 * v17;
  v25 = v17;
  while (v24)
  {
    v26 = v25 - 1;
    v27 = *(_QWORD *)(v19 + 8 * a1[-1].i64[v25]);
    v24 += 8;
    if (*(_BYTE *)(v27 + 147))
      v28 = *(unsigned __int8 *)(v27 + 145) == v20;
    else
      v28 = 0;
    v25 = v26;
    if (v28)
    {
      v21 = &a1->i8[-v24];
      goto LABEL_41;
    }
  }
  v11 = a2 + 1;
  v40 = a4 - v17;
  v39 = (uint64_t *)a1;
LABEL_62:
  v52 = *(_QWORD *)(v19 + 8 * *v18);
  if (*(_BYTE *)(v52 + 147))
    v53 = *(unsigned __int8 *)(v52 + 145) == v20;
  else
    v53 = 0;
  if (!v53)
  {
LABEL_84:
    v58 = v18;
LABEL_85:
    v11 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v58, a2, a3);
    goto LABEL_86;
  }
  v54 = &a1->i64[v17 + 1];
  while (v54 != a2)
  {
    --v40;
    v55 = *v54++;
    v56 = *(_QWORD *)(v19 + 8 * v55);
    if (*(_BYTE *)(v56 + 147))
      v57 = *(unsigned __int8 *)(v56 + 145) == v20;
    else
      v57 = 0;
    if (!v57)
    {
      v58 = v54 - 1;
      goto LABEL_85;
    }
  }
LABEL_86:
  if (v39 != v18)
  {
    if (v18 == v11)
    {
      return v39;
    }
    else if (v39 + 1 == v18)
    {
      v69 = *v39;
      v70 = (char *)v11 - (char *)v18;
      memmove(v39, v18, v70);
      v11 = (uint64_t *)((char *)v39 + v70);
      *v11 = v69;
    }
    else if (v18 + 1 == v11)
    {
      v71 = v11 - 1;
      v72 = *(v11 - 1);
      v11 = v39 + 1;
      if (v71 != v39)
        memmove(v39 + 1, v39, (char *)v71 - (char *)v39);
      *v39 = v72;
    }
    else
    {
      v64 = v18 - v39;
      v65 = v11 - v18;
      if (v64 == v65)
      {
        v66 = v39 + 1;
        v67 = (uint64_t)&a1->i64[v17 + 1];
        do
        {
          v68 = *(v66 - 1);
          *(v66 - 1) = *(_QWORD *)(v67 - 8);
          *(_QWORD *)(v67 - 8) = v68;
          if (v66 == v18)
            break;
          ++v66;
          v23 = v67 == (_QWORD)v11;
          v67 += 8;
        }
        while (!v23);
        return v18;
      }
      else
      {
        v73 = v11 - v18;
        v74 = v18 - v39;
        do
        {
          v75 = v74;
          v74 = v73;
          v73 = v75 % v73;
        }
        while (v73);
        if (v74)
        {
          v76 = &v39[v74];
          do
          {
            v78 = *--v76;
            v77 = v78;
            v79 = &v76[v64];
            v80 = v76;
            do
            {
              v81 = v79;
              *v80 = *v79;
              v82 = v11 - v79;
              v83 = __OFSUB__(v64, v82);
              v85 = v64 - v82;
              v84 = (v85 < 0) ^ v83;
              v79 = &v39[v85];
              if (v84)
                v79 = &v81[v64];
              v80 = v81;
            }
            while (v79 != v76);
            *v81 = v77;
          }
          while (v76 != v39);
        }
        return &v39[v65];
      }
    }
  }
  return v11;
}

void md::DaVinciGroundRenderLayer::layoutMaterialRenderables(uint64_t a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, uint64_t a9, char a10)
{
  uint64_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  VKDebugSettings *v65;
  void *v66;
  void *v67;
  void *v68;
  char v69;
  _BOOL4 v70;
  void *v71;
  void *v72;
  float v73;
  int v74;
  int v75;
  char v76;
  double v77;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  BOOL v86;
  unint64_t v87;
  unsigned __int8 v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v95;
  float *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int hasAlpha;
  __n128 v109;
  __n128 v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  md::SharedResource *v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  float64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  char v129;
  _BOOL4 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint32x2_t *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  md::SharedResource *v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  int8x8_t *v152;
  int8x8_t v153;
  uint8x8_t v154;
  unint64_t v155;
  uint64_t v156;
  float v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  float64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  NSObject *v169;
  float64x2_t *p_p;
  int v171;
  uint64_t ***v172;
  uint64_t **v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  _BOOL4 v177;
  int v178;
  uint64_t v179;
  float v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t *v184;
  md::SharedResource *v185;
  md::SharedResource *v186;
  unint64_t *v187;
  unint64_t v188;
  unsigned __int8 v189;
  int v190;
  BOOL v191;
  float v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  _BOOL4 v197;
  _BOOL4 v198;
  unsigned int v199;
  __int8 v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  unsigned __int8 v207;
  BOOL v209;
  int v210;
  int v211;
  float64x2_t v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  _BYTE *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  float64x2_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  float64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  int v236;
  _QWORD *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  unint64_t v251;
  uint64_t v252;
  __int16 v253;
  float64_t v255;
  float64_t v256;
  unint64_t *v257;
  unint64_t v258;
  float64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  int v268;
  uint64_t v269;
  unint64_t v270;
  float64_t v271;
  float64_t v272;
  std::__shared_weak_count *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  float64_t v278;
  float64_t v279;
  unint64_t *v280;
  float32x4_t v281;
  uint64_t *v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  float64_t v288;
  float64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  float64_t v296;
  uint64_t v297;
  float64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  float64_t v305;
  uint64_t v306;
  float64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  float64_t v318;
  float64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  int v326;
  float32x4_t v327;
  float v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  float v333;
  float32x4_t v334;
  unint64_t *v335;
  unint64_t v336;
  float64_t v337;
  float64_t v338;
  uint64_t v339;
  float64_t v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  float64_t v347;
  uint64_t v348;
  float64_t v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  float64_t v356;
  uint64_t v357;
  float64_t v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  float64_t v365;
  uint64_t v366;
  float64_t v367;
  uint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  float64_t v374;
  uint64_t v375;
  float64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  float64_t v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  float64_t v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  _QWORD *v395;
  _QWORD *v396;
  _QWORD *v397;
  uint64_t v398;
  BOOL v399;
  _QWORD *v400;
  _QWORD *f64;
  unint64_t v402;
  float v403;
  _QWORD *v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  _QWORD *v428;
  float32x4_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  float64_t v433;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  int v465;
  float32x4_t v466;
  float v467;
  std::__shared_weak_count *v468;
  uint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  int8x16_t v472;
  int8x16_t v473;
  float v474;
  float32x4_t v475;
  float32x4_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  _BYTE *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t *v529;
  unint64_t v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  uint64_t *v534;
  uint64_t *v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  std::__shared_weak_count *v594;
  uint64_t v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  std::__shared_weak_count *v603;
  uint64_t v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  unint64_t v612;
  _QWORD *v613;
  unint64_t v614;
  unint64_t v615;
  _QWORD *v616;
  float64_t v617;
  float64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  _QWORD *v622;
  int8x8_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  uint64_t v630;
  _QWORD *v631;
  _QWORD *v632;
  _QWORD *v633;
  _QWORD *v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  uint64_t v641;
  _QWORD *v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  unint64_t v647;
  _QWORD *v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  unint64_t v656;
  _QWORD *v657;
  unint64_t v658;
  uint8x8_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  uint64_t **v666;
  uint64_t *v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  float32x4_t *v671;
  uint64_t **v672;
  uint64_t *v673;
  unint64_t v674;
  unint64_t v675;
  uint64_t v676;
  uint64_t **v677;
  uint64_t *v678;
  uint64_t v679;
  unint64_t v680;
  uint64_t v681;
  _BOOL4 v682;
  int8x8_t *v683;
  float32x4_t v684;
  unint64_t *v685;
  unint64_t v686;
  std::__shared_weak_count *v687;
  unint64_t *v688;
  unint64_t v689;
  uint64_t v690;
  int8x8_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  float v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  unint64_t v699;
  float64x2_t *v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  uint64_t v704;
  float64_t v705;
  float64_t v706;
  unint64_t v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int v717;
  BOOL v718;
  uint64_t *v719;
  int8x8_t v720;
  uint64_t v721;
  uint64_t **v722;
  uint64_t *v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unsigned int v729;
  BOOL v730;
  uint64_t *v731;
  unint64_t *v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  unint64_t *v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t *v743;
  unint64_t v744;
  uint64_t v745;
  float64_t v746;
  float64_t v747;
  std::__shared_weak_count *v748;
  unint64_t *v749;
  unint64_t v750;
  unint64_t *v751;
  unint64_t v752;
  uint64_t v753;
  float64_t v754;
  uint64_t v755;
  float64_t v756;
  uint64_t v757;
  unint64_t *v758;
  unint64_t v759;
  std::__shared_weak_count *v760;
  unint64_t *v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v764;
  std::__shared_weak_count *v765;
  unint64_t *v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  std::__shared_weak_count *v770;
  unint64_t *v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t *v775;
  float v776;
  int v777;
  int v778;
  int v780;
  uint64_t *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t *v786;
  unint64_t v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  _QWORD *v791;
  unint64_t v793;
  _WORD *v794;
  float64_t v795;
  float64_t v796;
  std::__shared_weak_count *v797;
  unint64_t *v798;
  unint64_t v799;
  int8x16_t v800;
  _QWORD *v801;
  unint64_t v802;
  uint64_t v803;
  float16x4_t v804;
  uint64_t v805;
  uint64_t v806;
  std::__shared_weak_count *v807;
  unint64_t *v808;
  unint64_t v809;
  float *v812;
  _QWORD *v813;
  _QWORD *v814;
  unint64_t v815;
  _WORD *v816;
  uint64_t v819;
  uint64_t v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  __int128 v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unint64_t v828;
  float16x4_t *v829;
  float32x4_t v830;
  float64x2_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  std::__shared_weak_count *v841;
  unint64_t *v842;
  unint64_t v843;
  uint64_t v844;
  int8x8_t v845;
  uint8x8_t v846;
  unint64_t v847;
  uint64_t v848;
  unsigned int v849;
  uint64_t v850;
  float v851;
  std::__shared_weak_count *v852;
  unint64_t *v853;
  unint64_t v854;
  unint64_t v855;
  uint64_t v856;
  std::__shared_weak_count *v857;
  unint64_t *v858;
  uint64_t v859;
  float64_t v860;
  float64_t v861;
  unint64_t v862;
  std::__shared_weak_count *v863;
  unint64_t *v864;
  unint64_t v865;
  unint64_t v866;
  unint64_t v867;
  _QWORD *v868;
  int8x8_t v869;
  uint8x8_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t **v873;
  uint64_t *v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unsigned int v881;
  BOOL v882;
  uint64_t *v883;
  int8x8_t v884;
  uint8x8_t v885;
  uint64_t v886;
  uint64_t **v887;
  uint64_t *v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unsigned int v894;
  BOOL v895;
  uint64_t *v896;
  unint64_t *v897;
  unint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t *v909;
  unint64_t v910;
  uint64_t v911;
  float64_t v912;
  float64_t v913;
  std::__shared_weak_count *v914;
  unint64_t *v915;
  unint64_t v916;
  std::__shared_weak_count *v917;
  unint64_t *v918;
  unint64_t v919;
  uint64_t v920;
  float64_t v921;
  uint64_t v922;
  float64_t v923;
  uint64_t v924;
  unint64_t *v925;
  unint64_t v926;
  std::__shared_weak_count *v927;
  unint64_t *v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  std::__shared_weak_count *v932;
  unint64_t *v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t *v942;
  float v943;
  int v944;
  int v945;
  int v947;
  uint64_t *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t *v953;
  unint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  int8x16_t v958;
  int8x16_t v959;
  int8x16_t v960;
  _QWORD *v961;
  unint64_t v962;
  uint64_t v963;
  float16x4_t v964;
  uint64_t v965;
  uint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  float *v972;
  _QWORD *v973;
  _QWORD *v974;
  unint64_t v975;
  _WORD *v976;
  uint64_t v979;
  uint64_t v980;
  std::__shared_weak_count *v981;
  unint64_t *v982;
  unint64_t v983;
  __int128 v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  float16x4_t *v989;
  float32x4_t v990;
  float64x2_t v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  std::__shared_weak_count *v995;
  unint64_t *v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  std::__shared_weak_count *v1000;
  unint64_t *v1001;
  unint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  float16x4_t *v1005;
  float64x2_t v1006;
  uint32x2_t v1007;
  void *v1008;
  int32x2_t v1009;
  double v1010;
  double v1011;
  double v1012;
  float32x4_t v1013;
  float v1014;
  void *v1015;
  __int32 v1016;
  void *v1017;
  float v1018;
  float32x4_t v1019;
  unint64_t v1020;
  uint64_t v1021;
  std::__shared_weak_count *v1022;
  unint64_t *v1023;
  unint64_t v1024;
  int v1025;
  int v1026;
  int v1027;
  unint64_t *v1028;
  unint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  int v1032;
  uint64_t v1033;
  char v1034;
  BOOL v1035;
  int v1036;
  int v1037;
  int v1038;
  float64x2_t *v1039;
  float64x2_t v1040;
  unint64_t *v1041;
  unint64_t v1042;
  std::__shared_weak_count *v1043;
  unint64_t *v1044;
  unint64_t v1045;
  float64_t v1046;
  unint64_t *v1047;
  unint64_t v1048;
  unint64_t *v1049;
  unint64_t *v1050;
  unint64_t v1051;
  std::__shared_weak_count *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  uint64_t *v1055;
  float64_t v1056;
  uint64_t v1057;
  float64_t v1058;
  uint64_t v1059;
  unint64_t *v1060;
  unint64_t v1061;
  std::__shared_weak_count *v1062;
  unint64_t *v1063;
  unint64_t v1064;
  float64_t v1065;
  uint64_t v1066;
  float64_t v1067;
  uint64_t v1068;
  unint64_t *v1069;
  unint64_t v1070;
  std::__shared_weak_count *v1071;
  unint64_t *v1072;
  unint64_t v1073;
  float64_t v1074;
  uint64_t v1075;
  float64_t v1076;
  uint64_t v1077;
  unint64_t *v1078;
  unint64_t v1079;
  std::__shared_weak_count *v1080;
  unint64_t *v1081;
  unint64_t v1082;
  float64_t v1083;
  uint64_t v1084;
  std::__shared_weak_count *v1085;
  float64_t v1086;
  unint64_t *v1087;
  unint64_t v1088;
  std::__shared_weak_count *v1089;
  unint64_t *v1090;
  unint64_t v1091;
  uint64_t v1092;
  _QWORD *v1093;
  _QWORD *v1094;
  _QWORD *v1095;
  _QWORD *v1096;
  _QWORD *v1097;
  unint64_t v1098;
  BOOL v1099;
  _QWORD *v1100;
  unint64_t v1101;
  uint64_t v1102;
  std::__shared_weak_count *v1103;
  unint64_t *v1104;
  unint64_t v1105;
  unint64_t *v1106;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  _QWORD *v1110;
  uint64_t v1111;
  __int128 v1112;
  _QWORD *v1113;
  int v1114;
  float32x4_t v1115;
  int64x2_t v1116;
  uint64_t v1117;
  _QWORD *v1118;
  uint64_t v1119;
  uint64_t v1120;
  __int128 v1121;
  _QWORD *v1122;
  int v1123;
  float32x4_t v1124;
  std::__shared_weak_count *v1125;
  unint64_t *v1126;
  unint64_t v1127;
  int v1128;
  uint64_t v1129;
  unint64_t v1130;
  float64_t v1131;
  float64_t v1132;
  std::__shared_weak_count *v1133;
  unint64_t *v1134;
  unint64_t v1135;
  float64_t v1136;
  float64_t v1137;
  unint64_t *v1138;
  uint64_t **v1139;
  uint64_t *v1140;
  uint64_t v1141;
  unint64_t v1142;
  uint64_t v1143;
  uint64_t **v1144;
  uint64_t *v1145;
  uint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  __int16 v1149;
  __int16 v1150;
  __int16 v1151;
  unsigned __int16 v1152;
  unsigned __int16 v1153;
  unsigned __int16 v1154;
  unsigned __int16 v1155;
  unsigned __int16 v1156;
  unsigned __int16 v1157;
  unsigned __int16 v1158;
  float32x4_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  int8x8_t **v1162;
  int8x16_t v1163;
  float v1164;
  float32x4_t v1165;
  float *v1166;
  _BOOL4 v1167;
  float v1168;
  uint64_t v1169;
  float *v1170;
  float *v1171;
  float *v1172;
  char v1173;
  int v1174;
  md::SharedResource *v1175;
  unint64_t v1176;
  uint64_t *v1177;
  BOOL v1178;
  int v1179;
  uint64_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  int v1183;
  _QWORD *v1184;
  _QWORD *v1185;
  uint64_t v1186;
  uint64_t *v1187;
  BOOL v1188;
  float64x2_t v1189;
  int v1190;
  md::SharedResource *v1191;
  int v1192;
  unsigned __int8 v1193;
  uint64_t v1194;
  unsigned __int8 v1195;
  unsigned __int8 v1196;
  unsigned int v1197;
  int v1198;
  _BOOL4 v1199;
  unsigned int v1200;
  _BOOL4 updated;
  int v1202;
  float v1203;
  _BOOL4 v1204;
  __int32 v1205;
  _BOOL4 v1206;
  float64x2_t v1207;
  int v1208;
  int v1209;
  uint32x2_t *v1210;
  float v1211;
  uint64_t v1212;
  uint64_t v1213;
  int32x2_t v1214;
  uint64_t v1215;
  int v1216;
  int v1217;
  int v1218;
  float32x4_t v1219;
  const char *v1220;
  uint64_t v1222;
  uint64_t v1223;
  _QWORD *v1224;
  _QWORD *v1225;
  float64x2_t *v1226;
  float64x2_t *v1227;
  ggl::PipelineSetup *v1228[2];
  ggl::PipelineSetup *v1229[2];
  ggl::PipelineSetup *v1230[2];
  ggl::PipelineSetup *v1231[2];
  ggl::PipelineSetup *v1232[2];
  ggl::PipelineSetup *v1233[2];
  _QWORD *v1234;
  float *v1237;
  std::__shared_weak_count *v1239;
  std::__shared_weak_count *v1240;
  std::__shared_weak_count *v1241;
  uint64_t v1242;
  std::__shared_weak_count *v1243;
  uint64_t v1244;
  std::__shared_weak_count *v1245;
  float32x4_t v1246;
  float32x4_t v1247;
  uint64_t v1248;
  std::__shared_weak_count *v1249;
  uint64_t v1250;
  std::__shared_weak_count *v1251;
  uint64_t v1252;
  std::__shared_weak_count *v1253;
  float32x4_t v1254;
  __int8 v1255[4];
  uint64_t v1256;
  __int32 v1257;
  char v1258[4];
  uint64_t v1259;
  __int32 v1260;
  uint64_t v1261;
  unint64_t v1262;
  float32x4_t v1263;
  uint64_t v1264;
  std::__shared_weak_count *v1265;
  uint64_t v1266;
  std::__shared_weak_count *v1267;
  char v1268[4];
  __int128 v1269;
  char v1270[4];
  uint64_t v1271;
  unsigned int v1272;
  uint64_t v1273;
  unsigned __int32 v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  _BYTE v1279[2];
  uint64_t v1280;
  std::__shared_weak_count *v1281;
  unint64_t v1282;
  _QWORD v1283[2];
  _QWORD v1284[4];
  _QWORD v1285[4];
  char v1286;
  uint64_t v1287;
  unsigned __int16 v1288;
  unsigned __int8 v1289;
  unsigned __int8 v1290;
  unsigned __int8 v1291;
  uint64_t v1292;
  int8x16_t v1293;
  uint64_t v1294;
  float32x4_t v1295[3];
  _BYTE buf[40];
  double v1297;
  double v1298;
  uint64_t v1299;
  double v1300;
  double v1301;
  double v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  float64x2_t __p;
  float32x4_t v1309;
  float64x2_t v1310;
  double v1311;
  float64x2_t v1312;
  double v1313;
  float64x2_t v1314;
  double v1315;
  uint64_t v1316;

  v1316 = *MEMORY[0x1E0C80C00];
  v1224 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 24);
  v14 = (uint64_t *)*((_QWORD *)a2 + 1);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
  {
    v18 = 0;
    v19 = 0;
    v1212 = 0;
    v1222 = 0;
    v20 = 0;
    v1223 = 0;
    v1292 = 0;
    if (!MEMORY[0])
      return;
    goto LABEL_166;
  }
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v15 <= 0x1AF456233693CD46uLL)
      v17 = 0x1AF456233693CD46uLL % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0x1AF456233693CD46;
  }
  v21 = *v14;
  v22 = *(_QWORD **)(v21 + 8 * v17);
  if (!v22)
    goto LABEL_26;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_26;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v25 = v23[1];
      if (v25 == 0x1AF456233693CD46)
      {
        if (v23[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v25 & (*(_QWORD *)&v15 - 1)) != v17)
      {
        goto LABEL_26;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v24 = v23[1];
    if (v24 == 0x1AF456233693CD46)
      break;
    if (v24 >= *(_QWORD *)&v15)
      v24 %= *(_QWORD *)&v15;
    if (v24 != v17)
      goto LABEL_26;
LABEL_13:
    v23 = (_QWORD *)*v23;
    if (!v23)
      goto LABEL_26;
  }
  if (v23[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v26 = v23[5];
  if (*(_QWORD *)(v26 + 8) == 0x1AF456233693CD46)
  {
    v1212 = *(_QWORD *)(v26 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v1212 = 0;
LABEL_27:
  v1292 = 0;
  if (v16.u32[0] > 1uLL)
  {
    v27 = 0x1DCE255EA309B4ADLL;
    if (*(_QWORD *)&v15 <= 0x1DCE255EA309B4ADuLL)
      v27 = 0x1DCE255EA309B4ADuLL % *(_QWORD *)&v15;
  }
  else
  {
    v27 = (*(_QWORD *)&v15 - 1) & 0x1DCE255EA309B4ADLL;
  }
  v28 = *(_QWORD **)(v21 + 8 * v27);
  if (!v28)
    goto LABEL_49;
  v29 = (_QWORD *)*v28;
  if (!v29)
    goto LABEL_49;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v29[1];
      if (v31 == 0x1DCE255EA309B4ADLL)
      {
        if (v29[2] == 0x1DCE255EA309B4ADLL)
          goto LABEL_47;
      }
      else if ((v31 & (*(_QWORD *)&v15 - 1)) != v27)
      {
        goto LABEL_49;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_49;
    }
  }
  while (2)
  {
    v30 = v29[1];
    if (v30 != 0x1DCE255EA309B4ADLL)
    {
      if (v30 >= *(_QWORD *)&v15)
        v30 %= *(_QWORD *)&v15;
      if (v30 != v27)
        goto LABEL_49;
      goto LABEL_36;
    }
    if (v29[2] != 0x1DCE255EA309B4ADLL)
    {
LABEL_36:
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_49;
      continue;
    }
    break;
  }
LABEL_47:
  v32 = v29[5];
  if (*(_QWORD *)(v32 + 8) == 0x1DCE255EA309B4ADLL)
  {
    v33 = *(_QWORD *)(v32 + 32);
    goto LABEL_50;
  }
LABEL_49:
  v33 = 0;
LABEL_50:
  v1292 = v33;
  if (v16.u32[0] > 1uLL)
  {
    v34 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v15 <= 0x41E8D6E445F4145uLL)
      v34 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v15;
  }
  else
  {
    v34 = (*(_QWORD *)&v15 - 1) & 0x41E8D6E445F4145;
  }
  v35 = *(_QWORD **)(v21 + 8 * v34);
  if (!v35)
    goto LABEL_72;
  v36 = (_QWORD *)*v35;
  if (!v36)
    goto LABEL_72;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v38 = v36[1];
      if (v38 == 0x41E8D6E445F4145)
      {
        if (v36[2] == 0x41E8D6E445F4145)
          goto LABEL_70;
      }
      else if ((v38 & (*(_QWORD *)&v15 - 1)) != v34)
      {
        goto LABEL_72;
      }
      v36 = (_QWORD *)*v36;
      if (!v36)
        goto LABEL_72;
    }
  }
  while (2)
  {
    v37 = v36[1];
    if (v37 != 0x41E8D6E445F4145)
    {
      if (v37 >= *(_QWORD *)&v15)
        v37 %= *(_QWORD *)&v15;
      if (v37 != v34)
        goto LABEL_72;
      goto LABEL_59;
    }
    if (v36[2] != 0x41E8D6E445F4145)
    {
LABEL_59:
      v36 = (_QWORD *)*v36;
      if (!v36)
        goto LABEL_72;
      continue;
    }
    break;
  }
LABEL_70:
  v39 = v36[5];
  if (*(_QWORD *)(v39 + 8) == 0x41E8D6E445F4145)
  {
    v1222 = *(_QWORD *)(v39 + 32);
    goto LABEL_73;
  }
LABEL_72:
  v1222 = 0;
LABEL_73:
  if (v16.u32[0] > 1uLL)
  {
    v40 = 0xD2404CDD1F9A6950;
    if (*(_QWORD *)&v15 <= 0xD2404CDD1F9A6950)
      v40 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v15;
  }
  else
  {
    v40 = (*(_QWORD *)&v15 - 1) & 0xD2404CDD1F9A6950;
  }
  v41 = *(_QWORD **)(v21 + 8 * v40);
  if (!v41)
    goto LABEL_95;
  v42 = (_QWORD *)*v41;
  if (!v42)
    goto LABEL_95;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v44 = v42[1];
      if (v44 == 0xD2404CDD1F9A6950)
      {
        if (v42[2] == 0xD2404CDD1F9A6950)
          goto LABEL_93;
      }
      else if ((v44 & (*(_QWORD *)&v15 - 1)) != v40)
      {
        goto LABEL_95;
      }
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_95;
    }
  }
  while (2)
  {
    v43 = v42[1];
    if (v43 != 0xD2404CDD1F9A6950)
    {
      if (v43 >= *(_QWORD *)&v15)
        v43 %= *(_QWORD *)&v15;
      if (v43 != v40)
        goto LABEL_95;
      goto LABEL_82;
    }
    if (v42[2] != 0xD2404CDD1F9A6950)
    {
LABEL_82:
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_95;
      continue;
    }
    break;
  }
LABEL_93:
  v45 = v42[5];
  if (*(_QWORD *)(v45 + 8) == 0xD2404CDD1F9A6950)
  {
    v19 = *(int8x8_t ***)(v45 + 32);
    goto LABEL_96;
  }
LABEL_95:
  v19 = 0;
LABEL_96:
  if (v16.u32[0] > 1uLL)
  {
    v46 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v15 <= 0xDFC317497CF9A4BFLL)
      v46 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v15;
  }
  else
  {
    v46 = (*(_QWORD *)&v15 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v47 = *(_QWORD **)(v21 + 8 * v46);
  if (!v47)
    goto LABEL_118;
  v48 = (_QWORD *)*v47;
  if (!v48)
    goto LABEL_118;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v50 = v48[1];
      if (v50 == 0xDFC317497CF9A4BFLL)
      {
        if (v48[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_116;
      }
      else if ((v50 & (*(_QWORD *)&v15 - 1)) != v46)
      {
        goto LABEL_118;
      }
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_118;
    }
  }
  while (2)
  {
    v49 = v48[1];
    if (v49 != 0xDFC317497CF9A4BFLL)
    {
      if (v49 >= *(_QWORD *)&v15)
        v49 %= *(_QWORD *)&v15;
      if (v49 != v46)
        goto LABEL_118;
      goto LABEL_105;
    }
    if (v48[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_105:
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_118;
      continue;
    }
    break;
  }
LABEL_116:
  v51 = v48[5];
  if (*(_QWORD *)(v51 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v20 = *(_QWORD *)(v51 + 32);
    goto LABEL_119;
  }
LABEL_118:
  v20 = 0;
LABEL_119:
  if (v16.u32[0] > 1uLL)
  {
    v52 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v15 <= 0xE42D19AFCA302E68)
      v52 = 0xE42D19AFCA302E68 % *(_QWORD *)&v15;
  }
  else
  {
    v52 = (*(_QWORD *)&v15 - 1) & 0xE42D19AFCA302E68;
  }
  v53 = *(_QWORD **)(v21 + 8 * v52);
  if (!v53)
    goto LABEL_141;
  v54 = (_QWORD *)*v53;
  if (!v54)
    goto LABEL_141;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v56 = v54[1];
      if (v56 == 0xE42D19AFCA302E68)
      {
        if (v54[2] == 0xE42D19AFCA302E68)
          goto LABEL_139;
      }
      else if ((v56 & (*(_QWORD *)&v15 - 1)) != v52)
      {
        goto LABEL_141;
      }
      v54 = (_QWORD *)*v54;
      if (!v54)
        goto LABEL_141;
    }
  }
  while (2)
  {
    v55 = v54[1];
    if (v55 != 0xE42D19AFCA302E68)
    {
      if (v55 >= *(_QWORD *)&v15)
        v55 %= *(_QWORD *)&v15;
      if (v55 != v52)
        goto LABEL_141;
      goto LABEL_128;
    }
    if (v54[2] != 0xE42D19AFCA302E68)
    {
LABEL_128:
      v54 = (_QWORD *)*v54;
      if (!v54)
        goto LABEL_141;
      continue;
    }
    break;
  }
LABEL_139:
  v57 = v54[5];
  if (*(_QWORD *)(v57 + 8) == 0xE42D19AFCA302E68)
  {
    v18 = *(_QWORD *)(v57 + 32);
    goto LABEL_142;
  }
LABEL_141:
  v18 = 0;
LABEL_142:
  if (v16.u32[0] > 1uLL)
  {
    v58 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v15 <= 0x8BD499FBD96FBB9ELL)
      v58 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v15;
  }
  else
  {
    v58 = (*(_QWORD *)&v15 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v59 = *(_QWORD **)(v21 + 8 * v58);
  if (!v59)
    goto LABEL_165;
  v60 = (_QWORD *)*v59;
  if (!v60)
    goto LABEL_165;
  if (v16.u32[0] < 2uLL)
  {
    v61 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v63 = v60[1];
      if (v63 == 0x8BD499FBD96FBB9ELL)
      {
        if (v60[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_162;
      }
      else if ((v63 & v61) != v58)
      {
        goto LABEL_165;
      }
      v60 = (_QWORD *)*v60;
      if (!v60)
        goto LABEL_165;
    }
  }
  while (2)
  {
    v62 = v60[1];
    if (v62 != 0x8BD499FBD96FBB9ELL)
    {
      if (v62 >= *(_QWORD *)&v15)
        v62 %= *(_QWORD *)&v15;
      if (v62 != v58)
        goto LABEL_165;
      goto LABEL_151;
    }
    if (v60[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_151:
      v60 = (_QWORD *)*v60;
      if (!v60)
        goto LABEL_165;
      continue;
    }
    break;
  }
LABEL_162:
  v64 = v60[5];
  if (*(_QWORD *)(v64 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v1223 = *(_QWORD *)(v64 + 32);
    if (!*v19)
      return;
    goto LABEL_166;
  }
LABEL_165:
  v1223 = 0;
  if (!*v19)
    return;
LABEL_166:
  if (!*(_QWORD *)(a1 + 3144))
    return;
  v1186 = v18;
  v1162 = v19;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v65 = (VKDebugSettings *)objc_claimAutoreleasedReturnValue();
  md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)&v1288, v65);

  if (v20)
    v1167 = *(_BYTE *)(v20 + 64) != 0;
  else
    v1167 = 0;
  v1287 = *(_QWORD *)(a5 + 384);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v1174 = objc_msgSend(v66, "daVinciPlanarOverride");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v1183 = objc_msgSend(v67, "daVinciWaterEnabled");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = objc_msgSend(v68, "daVinciColorCorrectionOverride");

  v1286 = v69;
  v70 = *(_BYTE *)(a3 + 5) != 0;
  v1208 = *(unsigned __int8 *)(a5 + 24);
  v1196 = v1208 != 255;
  if (v1208 != 255)
    v70 = 0;
  v1197 = v70;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v1209 = objc_msgSend(v71, "enableTileClipping");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v1195 = objc_msgSend(v72, "enableTileClippingDebug");

  v74 = *(unsigned __int8 *)(v1222 + 224);
  v1285[0] = a1;
  v1285[1] = a4;
  v1285[2] = &v1292;
  v1285[3] = &v1287;
  v1284[0] = a1;
  v1284[1] = a4;
  v1284[2] = &v1286;
  v1237 = (float *)(a3 + 20);
  v1284[3] = a3 + 20;
  v1283[0] = a1;
  v1283[1] = a4;
  v75 = v1209;
  if (a6 == a7)
    return;
  v1161 = a1 + 568;
  if (v74)
    v76 = 2;
  else
    v76 = 1;
  v1225 = (_QWORD *)(a1 + 3440);
  v1171 = (float *)(a1 + 448);
  v1172 = (float *)(a1 + 368);
  v1187 = (uint64_t *)(a1 + 3248);
  v1170 = (float *)(a1 + 408);
  v1166 = (float *)(a1 + 488);
  v77 = 1.0;
  __asm { FMOV            V1.4S, #1.0 }
  v1163 = _Q1;
  v1164 = v73;
  v1168 = v73;
  v1184 = a7;
  v1185 = a8;
  v1173 = v76;
  while (2)
  {
    v81 = *(_QWORD *)(*a8 + 8 * *a6);
    if (*(_BYTE *)(v81 + 8) != 1 || (v76 & *(_BYTE *)(v81 + 376)) == 0)
      goto LABEL_177;
    v1282 = *(_QWORD *)(v81 + 240);
    if (v75)
    {
      v82 = *(_QWORD *)(a5 + 248);
      v83 = *(std::__shared_weak_count **)(a5 + 256);
      v1280 = v82;
      v1281 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(p_shared_owners);
        while (__stxr(v85 + 1, p_shared_owners));
      }
    }
    else
    {
      v83 = 0;
      v82 = 0;
      v1281 = 0;
      v1280 = 0;
    }
    v86 = v82 != 0;
    if (*(_BYTE *)(v81 + 64))
    {
      v87 = *(_QWORD *)(v81 + 48);
      v88 = *(_BYTE *)(v81 + 56);
      if (std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::find<md::UniqueRenderID>(v1225, v87, v88))
      {
        goto LABEL_197;
      }
      std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::__emplace_unique_key_args<md::UniqueRenderID,md::UniqueRenderID const&>((uint64_t)v1225, v87, v88, (_OWORD *)(v81 + 48));
      v1281 = 0;
      v1280 = 0;
      if (v83)
      {
        v89 = (unint64_t *)&v83->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = 0;
    }
    v91 = v81 + 224;
    (*(void (**)(_BYTE *__return_ptr, float))(**(_QWORD **)(v81 + 224) + 360))(v1279, *v1237);
    if (v1279[0] && !v1279[1])
      goto LABEL_196;
    if (*(_BYTE *)(v81 + 149)
      || (((*(void (**)(float64x2_t *__return_ptr, float))(**(_QWORD **)v91 + 848))(&__p, *v1237),
           LOBYTE(__p.f64[0]))
        ? (_ZF = BYTE1(__p.f64[0]) == 0)
        : (_ZF = 1),
          _ZF ? (v95 = 0) : (v95 = 1),
          v95))
    {
      if (a10 && *(_BYTE *)v1223 && !*(_BYTE *)(v81 + 147))
        goto LABEL_196;
    }
    (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v91 + 752))(&v1278, *v1237);
    (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v91 + 784))(&v1277, *v1237);
    (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v91 + 976))(&v1276, *v1237);
    (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v91 + 928))(&v1275, *v1237);
    if ((_BYTE)v1276)
    {
      LOBYTE(v1273) = 0;
      v96 = (float *)(a3 + 20);
    }
    else
    {
      v96 = (float *)(a3 + 20);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v91 + 232))(&v1273, *v1237);
    }
    (*(void (**)(char *__return_ptr, float))(**(_QWORD **)v91 + 1040))(v1270, *v96);
    if (v1270[0])
      v1268[0] = 0;
    else
      (*(void (**)(char *__return_ptr, float))(**(_QWORD **)v91 + 816))(v1268, *v1237);
    v1218 = *(unsigned __int8 *)(v81 + 368);
    if (*(_BYTE *)(v81 + 368))
    {
      v97 = *((_QWORD *)a2 + 4);
      v98 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
        v101 = *(unsigned __int8 *)(v97 + 20);
        do
          v102 = __ldaxr(v99);
        while (__stlxr(v102 - 1, v99));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
        if (!v101)
          goto LABEL_196;
      }
      else if (!*(_BYTE *)(v97 + 20))
      {
        goto LABEL_196;
      }
      v103 = *(_QWORD *)(v81 + 352);
      if ((*(_BYTE *)(v103 + 16) & 2) == 0)
      {
        v104 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v104 != -1)
        {
          *(_QWORD *)&__p.f64[0] = v1295;
          *(_QWORD *)buf = &__p;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      if (**(float **)(v103 + 72) <= 0.0)
        goto LABEL_196;
    }
    v1193 = v86;
    (*(void (**)(float64x2_t *__return_ptr, float))(**(_QWORD **)v91 + 888))(&__p, *v1237);
    v105 = LOBYTE(__p.f64[0]);
    v106 = BYTE1(__p.f64[0]);
    LOBYTE(__p.f64[0]) = 1;
    v107 = a3;
    hasAlpha = md::MaterialTextureManager::hasAlpha(v81 + 224, &__p, (int)*v1237);
    if (v105 && v106)
    {
      v111 = *(_QWORD *)(a1 + 3144);
      v112 = *(std::__shared_weak_count **)(v111 + 320);
      v1210 = *(uint32x2_t **)(v111 + 312);
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
        do
          v115 = __ldaxr(v113);
        while (__stlxr(v115 - 1, v113));
LABEL_254:
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
    }
    else
    {
      v116 = *(md::SharedResource **)(v81 + 256);
      if (v116)
      {
        md::LayoutContext::frameState(a2);
        md::SharedResource::addFrameRef(v116, *(_QWORD *)(v117 + 624));
        v1210 = (uint32x2_t *)*((_QWORD *)v116 + 4);
      }
      else
      {
        v118 = *(_QWORD *)(a1 + 3144);
        buf[0] = 1;
        v119 = *v1237;
        v120 = *(std::__shared_weak_count **)(a1 + 2104);
        v1266 = *(_QWORD *)(a1 + 2096);
        v1267 = v120;
        if (v120)
        {
          v121 = (unint64_t *)&v120->__shared_owners_;
          do
            v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
        }
        md::MaterialTextureManager::textureFromMaterial((__n128 *)&__p, v118, v81 + 224, &v1282, buf, (int)v119);
        v123 = __p.f64[0];
        md::LayoutContext::frameState(a2);
        md::SharedResource::addFrameRef(*(md::SharedResource **)&v123, *(_QWORD *)(v124 + 624));
        v1210 = *(uint32x2_t **)(*(_QWORD *)&v123 + 32);
        v125 = *(std::__shared_weak_count **)&__p.f64[1];
        if (*(_QWORD *)&__p.f64[1])
        {
          v126 = (unint64_t *)(*(_QWORD *)&__p.f64[1] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v112 = v1267;
        if (v1267)
        {
          v128 = (unint64_t *)&v1267->__shared_owners_;
          do
            v115 = __ldaxr(v128);
          while (__stlxr(v115 - 1, v128));
          goto LABEL_254;
        }
      }
    }
    if ((_BYTE)v1276)
      v129 = v1275;
    else
      v129 = v1273;
    v110.n128_u32[0] = v1274;
    v109.n128_u32[0] = HIDWORD(v1275);
    if ((_BYTE)v1276)
      v110.n128_f32[0] = *((float *)&v1275 + 1);
    if (v1218 && !*(_BYTE *)(v81 + 328))
    {
      v130 = 1;
    }
    else
    {
      if ((_BYTE)v1275)
      {
        v109.n128_f64[0] = *((float *)&v1275 + 1);
      }
      else
      {
        v109.n128_f64[0] = v110.n128_f32[0];
        if (!v129)
          v109.n128_f64[0] = v77;
      }
      v130 = v109.n128_f64[0] >= 0.999999;
    }
    v131 = *(_QWORD *)(a1 + 3144);
    v133 = *(uint32x2_t **)(v131 + 312);
    v132 = *(std::__shared_weak_count **)(v131 + 320);
    if (v132)
    {
      v134 = (unint64_t *)&v132->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
      do
        v136 = __ldaxr(v134);
      while (__stlxr(v136 - 1, v134));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *, __n128, __n128))v132->__on_zero_shared)(v132, v109, v110);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    if (v133 == v1210)
    {
      v138 = 0;
      v1206 = 0;
      v137 = v1186;
    }
    else
    {
      v137 = v1186;
      if ((_BYTE)v1278)
      {
        v138 = 1;
        v1206 = 1;
      }
      else
      {
        v1206 = (_BYTE)v1277 != 0;
        v138 = 1;
      }
    }
    v139 = v130 & ~v138;
    if (!hasAlpha)
      v139 = v130;
    v1216 = v139;
    v140 = *(md::SharedResource **)(v81 + 296);
    if (v140)
    {
      md::LayoutContext::frameState(a2);
      md::SharedResource::addFrameRef(v140, *(_QWORD *)(v141 + 624));
      v1194 = *((_QWORD *)v140 + 4);
    }
    else
    {
      v156 = *(_QWORD *)(a1 + 3144);
      buf[0] = 4;
      v157 = *v1237;
      v158 = *(std::__shared_weak_count **)(a1 + 2104);
      v1264 = *(_QWORD *)(a1 + 2096);
      v1265 = v158;
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      md::MaterialTextureManager::textureFromMaterial((__n128 *)&__p, v156, v81 + 224, &v1282, buf, (int)v157);
      v161 = __p.f64[0];
      md::LayoutContext::frameState(a2);
      md::SharedResource::addFrameRef(*(md::SharedResource **)&v161, *(_QWORD *)(v162 + 624));
      v1194 = *(_QWORD *)(*(_QWORD *)&v161 + 32);
      v163 = *(std::__shared_weak_count **)&__p.f64[1];
      if (*(_QWORD *)&__p.f64[1])
      {
        v164 = (unint64_t *)(*(_QWORD *)&__p.f64[1] + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = v1265;
      if (v1265)
      {
        v167 = (unint64_t *)&v1265->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
    }
    v142 = *(_QWORD *)(a1 + 3144);
    v143 = *(std::__shared_weak_count **)(v142 + 320);
    v1180 = *(_QWORD *)(v142 + 312);
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
      do
        v146 = __ldaxr(v144);
      while (__stlxr(v146 - 1, v144));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v1198 = *(unsigned __int8 *)(*(_QWORD *)(v81 + 216) + 61);
    v147 = *(std::__shared_weak_count **)(v81 + 232);
    v1263.i64[0] = *(_QWORD *)(v81 + 224);
    v1263.i64[1] = (uint64_t)v147;
    if (v147)
    {
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
    }
    v1262 = v1282;
    LODWORD(v150) = v1291;
    v151 = v1216;
    if (!v1291)
      goto LABEL_338;
    v150 = *(unsigned __int8 *)(v81 + 377);
    if (!*(_BYTE *)(v81 + 377))
      goto LABEL_338;
    v152 = *(int8x8_t **)(v1287 + 1304);
    if (v152)
    {
      v153 = v152[6];
      if (v153)
      {
        v154 = (uint8x8_t)vcnt_s8(v153);
        v154.i16[0] = vaddlv_u8(v154);
        if (v154.u32[0] > 1uLL)
        {
          v155 = *(unsigned __int8 *)(v81 + 377);
          if (*(_QWORD *)&v153 <= v150)
            v155 = v150 % *(_QWORD *)&v153;
        }
        else
        {
          v155 = (v153.i32[0] - 1) & v150;
        }
        v172 = *(uint64_t ****)(*(_QWORD *)&v152[5] + 8 * v155);
        if (v172)
        {
          v173 = *v172;
          if (v173)
          {
            if (v154.u32[0] < 2uLL)
            {
              v174 = *(_QWORD *)&v153 - 1;
              while (1)
              {
                v176 = v173[1];
                if (v176 == (uint64_t *)v150)
                {
                  if (*((unsigned __int8 *)v173 + 16) == (_DWORD)v150)
                    goto LABEL_948;
                }
                else if (((unint64_t)v176 & v174) != v155)
                {
                  goto LABEL_337;
                }
                v173 = (uint64_t **)*v173;
                if (!v173)
                  goto LABEL_337;
              }
            }
            do
            {
              v175 = (unint64_t)v173[1];
              if (v175 == v150)
              {
                if (*((unsigned __int8 *)v173 + 16) == (_DWORD)v150)
                {
LABEL_948:
                  v150 = (unint64_t)v173[3];
                  v1176 = v150;
                  if (v150)
                  {
                    v682 = 0;
                    buf[0] = 0;
                    buf[8] = 0;
                    if (v1289 | v1290)
                      v682 = v1288 == 0;
                    updated = md::MaterialRaster::updateStyleTextureIfNecessary(v150, *v1162, (uint64_t)buf, v682, *(unsigned __int8 *)(v137 + 72) == 1, *v1237);
                    if (!*(_BYTE *)(v1176 + 123))
                      v151 = 0;
                    v1216 = v151;
                    if (buf[8])
                    {
                      v1262 = *(_QWORD *)buf;
                      v683 = *v1162;
                      __p = (float64x2_t)*(unint64_t *)buf;
                      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(v1295, v683, (uint64_t *)&__p, 0);
                      v684 = v1295[0];
                      v1295[0] = 0uLL;
                      v1263 = v684;
                      if (v147)
                      {
                        v685 = (unint64_t *)&v147->__shared_owners_;
                        do
                          v686 = __ldaxr(v685);
                        while (__stlxr(v686 - 1, v685));
                        if (!v686)
                        {
                          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                          std::__shared_weak_count::__release_weak(v147);
                        }
                      }
                      v687 = (std::__shared_weak_count *)v1295[0].i64[1];
                      if (v1295[0].i64[1])
                      {
                        v688 = (unint64_t *)(v1295[0].i64[1] + 8);
                        do
                          v689 = __ldaxr(v688);
                        while (__stlxr(v689 - 1, v688));
                        if (!v689)
                        {
                          ((void (*)(std::__shared_weak_count *))v687->__on_zero_shared)(v687);
                          std::__shared_weak_count::__release_weak(v687);
                        }
                      }
                      v171 = v1183;
                    }
                    else
                    {
                      v171 = 0;
                    }
                    LODWORD(v150) = 1;
                    goto LABEL_339;
                  }
LABEL_338:
                  v1176 = 0;
                  updated = 0;
                  v171 = v1183;
                  goto LABEL_339;
                }
              }
              else
              {
                if (v175 >= *(_QWORD *)&v153)
                  v175 %= *(_QWORD *)&v153;
                if (v175 != v155)
                  break;
              }
              v173 = (uint64_t **)*v173;
            }
            while (v173);
          }
        }
      }
LABEL_337:
      LODWORD(v150) = 0;
      goto LABEL_338;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v169 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
    {
      gdc::LayerDataRequestKey::keysInt32Str((std::string *)&__p, (unsigned __int16 *)(v1287 + 16));
      p_p = &__p;
      if (v1309.i8[7] < 0)
        p_p = *(float64x2_t **)&__p.f64[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_impl(&dword_19F029000, v169, OS_LOG_TYPE_ERROR, "Tile:%s has renderables referencing a material raster but no raster set", buf, 0xCu);
      if (v1309.i8[7] < 0)
        operator delete(*(void **)&__p.f64[0]);
    }

    LODWORD(v150) = 0;
    v1176 = 0;
    updated = 0;
    v171 = v1183;
    v107 = a3;
    v137 = v1186;
LABEL_339:
    if (v1288)
      LODWORD(v150) = 1;
    v1202 = v150;
    (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)v91 + 456))(&v1261, *v1237);
    v1179 = v1261;
    (*(void (**)(char *__return_ptr, float))(**(_QWORD **)v91 + 1008))(v1258, *v1237);
    if (v1258[0])
    {
      v1255[0] = 0;
      v177 = 1;
    }
    else
    {
      (*(void (**)(__int8 *__return_ptr, float))(**(_QWORD **)v91 + 200))(v1255, *v1237);
      if (v1258[0])
        v177 = 1;
      else
        v177 = v1255[0] != 0;
    }
    v1204 = v177;
    if (v1198 == 1)
      v178 = v171;
    else
      v178 = 0;
    if (v178 == 1 && *(_BYTE *)(v1263.i64[0] + 8) == 5)
    {
      v179 = *(_QWORD *)(a1 + 3144);
      v180 = *v1237;
      v181 = (std::__shared_weak_count *)v1263.i64[1];
      v1254 = v1263;
      if (v1263.i64[1])
      {
        v182 = (unint64_t *)(v1263.i64[1] + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      v184 = md::MaterialTextureManager::colorRampTexturesFromMaterial(v179, (int)v180, (uint64_t *)&v1254);
      v186 = v185;
      if (v181)
      {
        v187 = (unint64_t *)&v181->__shared_owners_;
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
    }
    else
    {
      v184 = 0;
      v186 = 0;
    }
    v1200 = ((unint64_t)v184 | (unint64_t)v186) != 0;
    v189 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v137 + 32) + 254));
    v190 = v189 & (v184 != 0);
    if (!v186)
      v190 = 0;
    v1192 = v190;
    (*(void (**)(float64x2_t *__return_ptr, float))(**(_QWORD **)v91 + 1224))(&__p, *v1237);
    v191 = 0;
    if (LOBYTE(__p.f64[0]))
      _S8 = *((float *)__p.f64 + 1);
    else
      _S8 = 1.0;
    if (*(_BYTE *)(v107 + 7) && *(float *)(v107 + 68) >= 0.001)
    {
      v193 = fmax(*(double *)(v1212 + 32) * 0.5, 250.0)
           * (float)((float)(*(float *)(v107 + 64) * *(float *)(*(_QWORD *)(a5 + 8) + 624))
                   * fmaxf((float)(*(float *)(v107 + 20) * 0.125) + -0.875, 0.0));
      v191 = v193 >= 0.001;
    }
    v194 = v1224[20];
    if (!v194
      || (v195 = *(_QWORD *)(v194 + 32),
          v196 = *(_QWORD *)(v1224[1] + 96),
          v195 >= (*(_QWORD *)(v1224[1] + 104) - v196) >> 3))
    {
      v1169 = 0;
      goto LABEL_376;
    }
    v1169 = *(_QWORD *)(*(_QWORD *)(v196 + 8 * v195) + 16);
    v197 = v1167;
    if (!v1169)
      v197 = 0;
    if (!v197)
    {
LABEL_376:
      v1199 = 0;
      v199 = v1197;
      if ((v1216 & 1) == 0)
        goto LABEL_377;
      goto LABEL_378;
    }
    if (v1270[0])
      v198 = 1;
    else
      v198 = v1268[0] != 0;
    v1199 = v198;
    v199 = v1197;
    if ((v1216 & 1) == 0)
LABEL_377:
      v199 = *(_BYTE *)(v107 + 5) != 0;
LABEL_378:
    v1213 = v81;
    v1175 = v186;
    v1191 = (md::SharedResource *)v184;
    v200 = v138;
    if (*(_BYTE *)v1223)
    {
      v201 = v1213;
      v1178 = *(_BYTE *)(v1213 + 147) != 0;
    }
    else
    {
      v1178 = 1;
      v201 = v1213;
    }
    v202 = *(unsigned __int8 *)(*(_QWORD *)(v201 + 216) + 61);
    v1177 = (uint64_t *)v91;
    v203 = *(unsigned __int8 *)(*(_QWORD *)v91 + 8);
    v204 = *(unsigned __int8 *)(v107 + 6);
    v205 = v107;
    v206 = *(unsigned __int8 *)(v107 + 9);
    if (*(_BYTE *)(v107 + 7))
      v207 = v191;
    else
      v207 = 0;
    v209 = _S8 > 0.01 && *(_BYTE *)v107 != 0;
    v1188 = v209;
    v210 = *(unsigned __int8 *)(v107 + 4);
    v211 = *(unsigned __int8 *)(v205 + 16);
    if (v1208 == 255)
    {
      v1227 = (float64x2_t *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1648));
      if (v1216)
        v218 = a1 + 568;
      else
        v218 = a1 + 928;
      HIBYTE(v1158) = v1202;
      LOBYTE(v1158) = 0;
      HIBYTE(v1155) = v202 == 1;
      LOBYTE(v1155) = v1199;
      HIBYTE(v1153) = v1202;
      LOBYTE(v1153) = v1178;
      HIBYTE(v1150) = a10;
      LOBYTE(v1150) = v1192;
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&__p, v218, v199, v210 != 0, v203 == 3, v203 == 4, v204 != 0, v1200, v1150, v1153, v1155, v206 != 0, v1206, v1196, v207, v200, v1194 != v1180, v1218 != 0, v1188,
        v1179 != 0,
        v1204,
        v211 != 0,
        1u,
        v1193,
        v1195,
        updated,
        0,
        0,
        v1158);
      v219 = __p;
      __p = 0uLL;
      v220 = *(std::__shared_weak_count **)&v219.f64[1];
      v221 = (uint64_t)v1227;
      if (*(_QWORD *)&v219.f64[0] && **(_QWORD **)(*(_QWORD *)&v219.f64[0] + 40) == *(_QWORD *)&v1227->f64[1])
      {
        v259 = v1227[1].f64[0];
        v223 = v1213;
        if (v259 != 0.0 && *(_QWORD *)&v259 != *(_QWORD *)&v219.f64[0])
        {
          v1181 = v219;
          ggl::PipelineSetup::resetData((uint64_t)v1227);
          v219 = v1181;
        }
        if (v220)
        {
          v260 = (unint64_t *)&v220->__shared_owners_;
          do
            v261 = __ldxr(v260);
          while (__stxr(v261 + 1, v260));
        }
        v222 = *(std::__shared_weak_count **)&v1227[1].f64[1];
        v1227[1] = v219;
        if (!v222)
        {
LABEL_461:
          if (v220)
          {
            v263 = (unint64_t *)&v220->__shared_owners_;
            do
              v264 = __ldaxr(v263);
            while (__stlxr(v264 - 1, v263));
            if (!v264)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          v265 = *(std::__shared_weak_count **)&__p.f64[1];
          if (*(_QWORD *)&__p.f64[1])
          {
            v266 = (unint64_t *)(*(_QWORD *)&__p.f64[1] + 8);
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
          if (*(_BYTE *)(v223 + 200))
          {
            v268 = *(_DWORD *)(v223 + 196);
            v269 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1976));
            v270 = *(_QWORD *)(v269 + 8);
            **(_DWORD **)(v269 + 72) = v268;
            if (*(_QWORD *)(v269 + 64) > v270)
              v270 = *(_QWORD *)(v269 + 64);
            *(_QWORD *)(v269 + 56) = 0;
            *(_QWORD *)(v269 + 64) = v270;
            v221 = (uint64_t)v1227;
            v271 = v1227[4].f64[0];
            *(_QWORD *)(*(_QWORD *)&v271 + 144) = v269;
            *(_QWORD *)(*(_QWORD *)&v271 + 152) = 0;
            v272 = v1227[10].f64[0];
            v273 = *(std::__shared_weak_count **)(*(_QWORD *)&v272 + 152);
            *(_QWORD *)(*(_QWORD *)&v272 + 144) = 0;
            *(_QWORD *)(*(_QWORD *)&v272 + 152) = 0;
            v274 = a5;
            v275 = a3;
            if (!v273)
            {
LABEL_483:
              md::DaVinciGroundRenderLayer::setupStyleConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(a1, v221, v274, v275);
              a7 = v1184;
              a8 = v1185;
              v282 = v1177;
              v283 = v1213;
              if (v1206)
              {
                v284 = *(std::__shared_weak_count **)(v1213 + 232);
                v1252 = *(_QWORD *)(v1213 + 224);
                v1253 = v284;
                if (v284)
                {
                  v285 = (unint64_t *)&v284->__shared_owners_;
                  do
                    v286 = __ldxr(v285);
                  while (__stxr(v286 + 1, v285));
                }
                v287 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_2::operator()((uint64_t)v1284, (uint64_t)&v1252, &v1282);
                v288 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v288 + 240) = v287;
                *(_QWORD *)(*(_QWORD *)&v288 + 248) = 0;
                v289 = v1227[10].f64[0];
                v290 = *(std::__shared_weak_count **)(*(_QWORD *)&v289 + 248);
                *(_QWORD *)(*(_QWORD *)&v289 + 240) = 0;
                *(_QWORD *)(*(_QWORD *)&v289 + 248) = 0;
                if (v290)
                {
                  v291 = (unint64_t *)&v290->__shared_owners_;
                  do
                    v292 = __ldaxr(v291);
                  while (__stlxr(v292 - 1, v291));
                  if (!v292)
                  {
                    ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                    std::__shared_weak_count::__release_weak(v290);
                  }
                }
                v293 = v1253;
                if (v1253)
                {
                  v294 = (unint64_t *)&v1253->__shared_owners_;
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                    std::__shared_weak_count::__release_weak(v293);
                  }
                }
              }
              if (v1218)
              {
                *(_QWORD *)(*(_QWORD *)&v1227[6].f64[0] + 48) = *(_QWORD *)(v1213 + 312);
                v296 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v296 + 408) = 0;
                v297 = *(_QWORD *)(v1213 + 336);
                *(_QWORD *)(*(_QWORD *)&v296 + 400) = v297;
                v298 = v1227[10].f64[0];
                v299 = *(_QWORD *)(v1213 + 344);
                if (v299)
                {
                  v300 = (unint64_t *)(v299 + 8);
                  do
                    v301 = __ldxr(v300);
                  while (__stxr(v301 + 1, v300));
                }
                v302 = *(std::__shared_weak_count **)(*(_QWORD *)&v298 + 408);
                *(_QWORD *)(*(_QWORD *)&v298 + 400) = v297;
                *(_QWORD *)(*(_QWORD *)&v298 + 408) = v299;
                if (v302)
                {
                  v303 = (unint64_t *)&v302->__shared_owners_;
                  do
                    v304 = __ldaxr(v303);
                  while (__stlxr(v304 - 1, v303));
                  if (!v304)
                  {
                    ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                    std::__shared_weak_count::__release_weak(v302);
                  }
                }
                v305 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v305 + 424) = 0;
                v306 = *(_QWORD *)(v1213 + 352);
                *(_QWORD *)(*(_QWORD *)&v305 + 416) = v306;
                v307 = v1227[10].f64[0];
                v308 = *(_QWORD *)(v1213 + 360);
                if (v308)
                {
                  v309 = (unint64_t *)(v308 + 8);
                  do
                    v310 = __ldxr(v309);
                  while (__stxr(v310 + 1, v309));
                }
                v311 = *(std::__shared_weak_count **)(*(_QWORD *)&v307 + 424);
                *(_QWORD *)(*(_QWORD *)&v307 + 416) = v306;
                *(_QWORD *)(*(_QWORD *)&v307 + 424) = v308;
                if (v311)
                {
                  v312 = (unint64_t *)&v311->__shared_owners_;
                  do
                    v313 = __ldaxr(v312);
                  while (__stlxr(v313 - 1, v312));
                  if (!v313)
                  {
                    ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                    std::__shared_weak_count::__release_weak(v311);
                  }
                }
                v314 = *(std::__shared_weak_count **)(v1213 + 232);
                v1250 = *(_QWORD *)(v1213 + 224);
                v1251 = v314;
                if (v314)
                {
                  v315 = (unint64_t *)&v314->__shared_owners_;
                  do
                    v316 = __ldxr(v315);
                  while (__stxr(v316 + 1, v315));
                }
                v317 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_1::operator()(v1285, &v1282);
                v318 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v318 + 256) = v317;
                *(_QWORD *)(*(_QWORD *)&v318 + 264) = 0;
                v319 = v1227[10].f64[0];
                v320 = *(std::__shared_weak_count **)(*(_QWORD *)&v319 + 264);
                *(_QWORD *)(*(_QWORD *)&v319 + 256) = 0;
                *(_QWORD *)(*(_QWORD *)&v319 + 264) = 0;
                if (v320)
                {
                  v321 = (unint64_t *)&v320->__shared_owners_;
                  do
                    v322 = __ldaxr(v321);
                  while (__stlxr(v322 - 1, v321));
                  if (!v322)
                  {
                    ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                    std::__shared_weak_count::__release_weak(v320);
                  }
                }
                v323 = v1251;
                if (v1251)
                {
                  v324 = (unint64_t *)&v1251->__shared_owners_;
                  do
                    v325 = __ldaxr(v324);
                  while (__stlxr(v325 - 1, v324));
                  if (!v325)
                  {
                    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                    std::__shared_weak_count::__release_weak(v323);
                  }
                }
              }
              *(_QWORD *)(*(_QWORD *)&v1227[6].f64[0] + 16) = v1210;
              if (v1204)
                *(_QWORD *)(*(_QWORD *)&v1227[6].f64[0] + 40) = v1194;
              v326 = *(unsigned __int8 *)(v1213 + 396);
              if (*(_BYTE *)(v1213 + 396))
              {
                v281.i64[0] = *(_QWORD *)(v1213 + 380);
                v281.i32[2] = *(_DWORD *)(v1213 + 388);
                v1159 = v281;
                v1164 = *(float *)(v1213 + 392);
              }
              else
              {
                v327 = v1159;
                v327.i8[0] = 0;
                v1159 = v327;
              }
              v328 = *v1237;
              v330 = *(_QWORD *)(v1213 + 224);
              v329 = *(std::__shared_weak_count **)(v1213 + 232);
              v1248 = v330;
              v1249 = v329;
              if (v329)
              {
                v331 = (unint64_t *)&v329->__shared_owners_;
                do
                  v332 = __ldxr(v331);
                while (__stxr(v332 + 1, v331));
              }
              (*(void (**)(_BYTE *__return_ptr, uint64_t, float))(*(_QWORD *)v330 + 976))(buf, v330, v328);
              (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(_QWORD *)v330 + 928))(&v1294, v330, v328);
              if (buf[0])
              {
                LOBYTE(__p.f64[0]) = 0;
              }
              else
              {
                (*(void (**)(float64x2_t *__return_ptr, uint64_t, float))(*(_QWORD *)v330 + 232))(&__p, v330, v328);
                if (!buf[0])
                {
                  v1293 = v1163;
                  v671 = (float32x4_t *)((char *)__p.f64 + 4);
                  if (!LOBYTE(__p.f64[0]))
                    v671 = (float32x4_t *)&v1293;
                  v1295[0] = *v671;
                  if (v326)
                    goto LABEL_541;
                  goto LABEL_542;
                }
              }
              v333 = *((float *)&v1294 + 1);
              if (!(_BYTE)v1294)
                v333 = 1.0;
              v1295[0].i64[0] = *(_QWORD *)&buf[4];
              v1295[0].i64[1] = __PAIR64__(LODWORD(v333), *(unsigned int *)&buf[12]);
              if (v326)
              {
LABEL_541:
                v334 = vmlaq_n_f32(v1295[0], vsubq_f32(v1159, v1295[0]), v1164);
                v1295[0].i32[2] = v334.i32[2];
                v1295[0].i64[0] = v334.i64[0];
              }
LABEL_542:
              md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(a1, (uint64_t)v1227, v1295);
              if (v329)
              {
                v335 = (unint64_t *)&v329->__shared_owners_;
                do
                  v336 = __ldaxr(v335);
                while (__stlxr(v336 - 1, v335));
                if (!v336)
                {
                  ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                  std::__shared_weak_count::__release_weak(v329);
                }
              }
              v337 = v1227[1].f64[0];
              if (*(_BYTE *)(*(_QWORD *)&v337 + 317))
              {
                v338 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v338 + 232) = 0;
                v339 = v1224[42];
                *(_QWORD *)(*(_QWORD *)&v338 + 224) = v339;
                v340 = v1227[10].f64[0];
                v341 = v1224[43];
                if (v341)
                {
                  v342 = (unint64_t *)(v341 + 8);
                  do
                    v343 = __ldxr(v342);
                  while (__stxr(v343 + 1, v342));
                }
                v344 = *(std::__shared_weak_count **)(*(_QWORD *)&v340 + 232);
                *(_QWORD *)(*(_QWORD *)&v340 + 224) = v339;
                *(_QWORD *)(*(_QWORD *)&v340 + 232) = v341;
                if (v344)
                {
                  v345 = (unint64_t *)&v344->__shared_owners_;
                  do
                    v346 = __ldaxr(v345);
                  while (__stlxr(v346 - 1, v345));
                  if (!v346)
                  {
                    ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                    std::__shared_weak_count::__release_weak(v344);
                  }
                }
                v337 = v1227[1].f64[0];
              }
              if (*(_BYTE *)(*(_QWORD *)&v337 + 331))
              {
                v347 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v347 + 120) = 0;
                v348 = *(_QWORD *)(a1 + 1832);
                *(_QWORD *)(*(_QWORD *)&v347 + 112) = v348;
                v349 = v1227[10].f64[0];
                v350 = *(_QWORD *)(a1 + 1840);
                if (v350)
                {
                  v351 = (unint64_t *)(v350 + 8);
                  do
                    v352 = __ldxr(v351);
                  while (__stxr(v352 + 1, v351));
                }
                v353 = *(std::__shared_weak_count **)(*(_QWORD *)&v349 + 120);
                *(_QWORD *)(*(_QWORD *)&v349 + 112) = v348;
                *(_QWORD *)(*(_QWORD *)&v349 + 120) = v350;
                if (v353)
                {
                  v354 = (unint64_t *)&v353->__shared_owners_;
                  do
                    v355 = __ldaxr(v354);
                  while (__stlxr(v355 - 1, v354));
                  if (!v355)
                  {
                    ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                    std::__shared_weak_count::__release_weak(v353);
                  }
                }
                v337 = v1227[1].f64[0];
              }
              if (*(_BYTE *)(*(_QWORD *)&v337 + 330))
              {
                v356 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v356 + 104) = 0;
                v357 = *(_QWORD *)(a1 + 1816);
                *(_QWORD *)(*(_QWORD *)&v356 + 96) = v357;
                v358 = v1227[10].f64[0];
                v359 = *(_QWORD *)(a1 + 1824);
                if (v359)
                {
                  v360 = (unint64_t *)(v359 + 8);
                  do
                    v361 = __ldxr(v360);
                  while (__stxr(v361 + 1, v360));
                }
                v362 = *(std::__shared_weak_count **)(*(_QWORD *)&v358 + 104);
                *(_QWORD *)(*(_QWORD *)&v358 + 96) = v357;
                *(_QWORD *)(*(_QWORD *)&v358 + 104) = v359;
                if (v362)
                {
                  v363 = (unint64_t *)&v362->__shared_owners_;
                  do
                    v364 = __ldaxr(v363);
                  while (__stlxr(v364 - 1, v363));
                  if (!v364)
                  {
                    ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                    std::__shared_weak_count::__release_weak(v362);
                  }
                }
              }
              if (*(_BYTE *)(*(_QWORD *)&v1227[1].f64[0] + 326))
              {
                v365 = v1227[4].f64[0];
                *(_QWORD *)(*(_QWORD *)&v365 + 200) = 0;
                v366 = *(_QWORD *)(v1222 + 32);
                *(_QWORD *)(*(_QWORD *)&v365 + 192) = v366;
                v367 = v1227[10].f64[0];
                v368 = *(_QWORD *)(v1222 + 40);
                if (v368)
                {
                  v369 = (unint64_t *)(v368 + 8);
                  do
                    v370 = __ldxr(v369);
                  while (__stxr(v370 + 1, v369));
                }
                v371 = *(std::__shared_weak_count **)(*(_QWORD *)&v367 + 200);
                *(_QWORD *)(*(_QWORD *)&v367 + 192) = v366;
                *(_QWORD *)(*(_QWORD *)&v367 + 200) = v368;
                if (v371)
                {
                  v372 = (unint64_t *)&v371->__shared_owners_;
                  do
                    v373 = __ldaxr(v372);
                  while (__stlxr(v373 - 1, v372));
                  if (!v373)
                  {
                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                    std::__shared_weak_count::__release_weak(v371);
                  }
                }
              }
              v374 = v1227[4].f64[0];
              *(_QWORD *)(*(_QWORD *)&v374 + 56) = 0;
              v375 = *(_QWORD *)(v1222 + 16);
              *(_QWORD *)(*(_QWORD *)&v374 + 48) = v375;
              v376 = v1227[10].f64[0];
              v377 = *(_QWORD *)(v1222 + 24);
              if (v377)
              {
                v378 = (unint64_t *)(v377 + 8);
                do
                  v379 = __ldxr(v378);
                while (__stxr(v379 + 1, v378));
              }
              v380 = *(std::__shared_weak_count **)(*(_QWORD *)&v376 + 56);
              *(_QWORD *)(*(_QWORD *)&v376 + 48) = v375;
              *(_QWORD *)(*(_QWORD *)&v376 + 56) = v377;
              if (v380)
              {
                v381 = (unint64_t *)&v380->__shared_owners_;
                do
                  v382 = __ldaxr(v381);
                while (__stlxr(v382 - 1, v381));
                if (!v382)
                {
                  ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                  std::__shared_weak_count::__release_weak(v380);
                }
              }
              md::DaVinciGroundRenderLayer::setupCommonGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(v1227, (_QWORD *)a5, v1224, **(_QWORD **)(v1213 + 32), *(_QWORD *)(*(_QWORD *)(v1213 + 32) + 8), &v1280, a3);
              v383 = v1227[4].f64[0];
              v384 = v1280;
              v385 = v1281;
              *(_QWORD *)(*(_QWORD *)&v383 + 176) = v1280;
              *(_QWORD *)(*(_QWORD *)&v383 + 184) = 0;
              v386 = v1227[10].f64[0];
              if (v385)
              {
                v387 = (unint64_t *)&v385->__shared_owners_;
                do
                  v388 = __ldxr(v387);
                while (__stxr(v388 + 1, v387));
              }
              v389 = *(std::__shared_weak_count **)(*(_QWORD *)&v386 + 184);
              *(_QWORD *)(*(_QWORD *)&v386 + 176) = v384;
              *(_QWORD *)(*(_QWORD *)&v386 + 184) = v385;
              if (v389)
              {
                v390 = (unint64_t *)&v389->__shared_owners_;
                do
                  v391 = __ldaxr(v390);
                while (__stlxr(v391 - 1, v390));
                if (!v391)
                {
                  ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                  std::__shared_weak_count::__release_weak(v389);
                }
              }
              md::DaVinciGroundRenderLayer::setupSSAOGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(a1, v1222, v1227, v1224, v1188, _S8);
              v392 = **(_QWORD **)(v1213 + 216);
              v395 = *(_QWORD **)(v392 + 120);
              v394 = (_QWORD *)(v392 + 120);
              v393 = v395;
              if (v395)
              {
                v396 = v394;
                v397 = v393;
                do
                {
                  v398 = v397[4];
                  v399 = v398 == 0;
                  if (v398)
                    v400 = v397;
                  else
                    v400 = v397 + 1;
                  if (!v399)
                    v396 = v397;
                  v397 = (_QWORD *)*v400;
                }
                while (*v400);
                f64 = (_QWORD *)v1227->f64;
                if (v396 == v394 || v396[4] > 1uLL)
                {
                  v393 = 0;
                }
                else
                {
                  while (1)
                  {
                    while (1)
                    {
                      v402 = v393[4];
                      if (v402 < 2)
                        break;
                      v393 = (_QWORD *)*v393;
                      if (!v393)
                        goto LABEL_1661;
                    }
                    if (v402)
                      break;
                    v393 = (_QWORD *)v393[1];
                    if (!v393)
LABEL_1661:
                      abort();
                  }
                  v393 = (_QWORD *)v393[5];
                }
              }
              else
              {
                f64 = (_QWORD *)v1227->f64;
              }
              v625 = f64[4];
              *(_QWORD *)(v625 + 16) = v393;
              *(_QWORD *)(v625 + 24) = 0;
              v626 = f64[16];
              v627 = *(std::__shared_weak_count **)(v626 + 24);
              *(_QWORD *)(v626 + 16) = 0;
              *(_QWORD *)(v626 + 24) = 0;
              if (v627)
              {
                v628 = (unint64_t *)&v627->__shared_owners_;
                do
                  v629 = __ldaxr(v628);
                while (__stlxr(v629 - 1, v628));
                if (!v629)
                {
                  ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
                  std::__shared_weak_count::__release_weak(v627);
                }
              }
              v630 = **(_QWORD **)(v1213 + 216);
              v633 = *(_QWORD **)(v630 + 120);
              v632 = (_QWORD *)(v630 + 120);
              v631 = v633;
              if (v633)
              {
                v634 = v631;
                do
                {
                  v635 = v634;
                  v634 = (_QWORD *)*v634;
                }
                while (v634);
                if (v635 == v632 || v635[4])
                {
                  v631 = 0;
                }
                else
                {
                  while (v631[4])
                  {
                    v631 = (_QWORD *)*v631;
                    if (!v631)
                      goto LABEL_1661;
                  }
                  v631 = (_QWORD *)v631[5];
                }
              }
              v636 = f64[4];
              *(_QWORD *)(v636 + 32) = v631;
              *(_QWORD *)(v636 + 40) = 0;
              v637 = f64[16];
              v638 = *(std::__shared_weak_count **)(v637 + 40);
              *(_QWORD *)(v637 + 32) = 0;
              *(_QWORD *)(v637 + 40) = 0;
              if (v638)
              {
                v639 = (unint64_t *)&v638->__shared_owners_;
                do
                  v640 = __ldaxr(v639);
                while (__stlxr(v640 - 1, v639));
                if (!v640)
                {
                  ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
                  std::__shared_weak_count::__release_weak(v638);
                }
              }
              v641 = **(_QWORD **)(v1213 + 216);
              v644 = *(_QWORD **)(v641 + 120);
              v643 = (_QWORD *)(v641 + 120);
              v642 = v644;
              if (v644)
              {
                v645 = v643;
                v646 = v642;
                do
                {
                  v647 = v646[4];
                  _CF = v647 >= 2;
                  if (v647 >= 2)
                    v649 = v646;
                  else
                    v649 = v646 + 1;
                  if (_CF)
                    v645 = v646;
                  v646 = (_QWORD *)*v649;
                }
                while (*v649);
                if (v645 == v643 || v645[4] > 2uLL)
                {
                  v642 = 0;
                }
                else
                {
                  while (1)
                  {
                    while (1)
                    {
                      v650 = v642[4];
                      if (v650 < 3)
                        break;
                      v642 = (_QWORD *)*v642;
                      if (!v642)
                        goto LABEL_1661;
                    }
                    if (v650 == 2)
                      break;
                    v642 = (_QWORD *)v642[1];
                    if (!v642)
                      goto LABEL_1661;
                  }
                  v642 = (_QWORD *)v642[5];
                }
              }
              v651 = f64[4];
              *(_QWORD *)(v651 + 48) = v642;
              *(_QWORD *)(v651 + 56) = 0;
              v652 = f64[16];
              v653 = *(std::__shared_weak_count **)(v652 + 56);
              *(_QWORD *)(v652 + 48) = 0;
              *(_QWORD *)(v652 + 56) = 0;
              if (!v653)
                goto LABEL_875;
              v654 = (unint64_t *)&v653->__shared_owners_;
              do
                v655 = __ldaxr(v654);
              while (__stlxr(v655 - 1, v654));
              if (!v655)
              {
                ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                std::__shared_weak_count::__release_weak(v653);
                if (v1202)
                  goto LABEL_876;
              }
              else
              {
LABEL_875:
                if (v1202)
                {
LABEL_876:
                  v656 = v1288;
                  if (!v1288)
                    goto LABEL_1196;
                  v657 = *(_QWORD **)(v1287 + 1304);
                  v658 = v657[1];
                  if (!v658)
                    goto LABEL_1196;
                  v659 = (uint8x8_t)vcnt_s8((int8x8_t)v658);
                  v659.i16[0] = vaddlv_u8(v659);
                  if (v659.u32[0] > 1uLL)
                  {
                    v660 = v1288;
                    if (v658 <= v1288)
                      v660 = v1288 % v658;
                  }
                  else
                  {
                    v660 = (v658 - 1) & (unint64_t)v1288;
                  }
                  v672 = *(uint64_t ***)(*v657 + 8 * v660);
                  if (!v672)
                    goto LABEL_1196;
                  v673 = *v672;
                  if (!v673)
                    goto LABEL_1196;
                  if (v659.u32[0] < 2uLL)
                  {
                    v674 = v658 - 1;
                    while (1)
                    {
                      v676 = v673[1];
                      if (v676 == v1288)
                      {
                        if (*((_DWORD *)v673 + 4) == v1288)
                          goto LABEL_1192;
                      }
                      else if ((v676 & v674) != v660)
                      {
                        goto LABEL_1196;
                      }
                      v673 = (uint64_t *)*v673;
                      if (!v673)
                        goto LABEL_1196;
                    }
                  }
                  while (1)
                  {
                    v675 = v673[1];
                    if (v675 == v1288)
                    {
                      if (*((_DWORD *)v673 + 4) == v1288)
                      {
LABEL_1192:
                        if (v673[3])
                        {
                          v844 = md::DaVinciGroundRenderResources::debugTextureForAttribute(v1161, v1288);
                          v845 = (int8x8_t)v657[1];
                          if (v845)
                          {
                            v846 = (uint8x8_t)vcnt_s8(v845);
                            v846.i16[0] = vaddlv_u8(v846);
                            if (v846.u32[0] > 1uLL)
                            {
                              v847 = v656;
                              if (*(_QWORD *)&v845 <= v656)
                                v847 = v656 % *(_QWORD *)&v845;
                            }
                            else
                            {
                              v847 = (v845.i32[0] - 1) & v656;
                            }
                            v1144 = *(uint64_t ***)(*v657 + 8 * v847);
                            if (v1144)
                            {
                              v1145 = *v1144;
                              if (v1145)
                              {
                                if (v846.u32[0] < 2uLL)
                                {
                                  v1146 = *(_QWORD *)&v845 - 1;
                                  while (1)
                                  {
                                    v1148 = v1145[1];
                                    if (v1148 == v656)
                                    {
                                      if (*((_DWORD *)v1145 + 4) == (_DWORD)v656)
                                        goto LABEL_1659;
                                    }
                                    else if ((v1148 & v1146) != v847)
                                    {
                                      goto LABEL_1655;
                                    }
                                    v1145 = (uint64_t *)*v1145;
                                    if (!v1145)
                                      goto LABEL_1657;
                                  }
                                }
                                while (1)
                                {
                                  v1147 = v1145[1];
                                  if (v1147 == v656)
                                  {
                                    if (*((_DWORD *)v1145 + 4) == (_DWORD)v656)
                                    {
LABEL_1659:
                                      v850 = v1145[3];
                                      goto LABEL_1200;
                                    }
                                  }
                                  else
                                  {
                                    if (v1147 >= *(_QWORD *)&v845)
                                      v1147 %= *(_QWORD *)&v845;
                                    if (v1147 != v847)
                                      break;
                                  }
                                  v1145 = (uint64_t *)*v1145;
                                  if (!v1145)
                                  {
LABEL_1657:
                                    v851 = 255.0;
                                    v850 = 0;
                                    goto LABEL_1209;
                                  }
                                }
                              }
                            }
                          }
LABEL_1655:
                          v850 = 0;
LABEL_1200:
                          v851 = 255.0;
                          goto LABEL_1209;
                        }
LABEL_1196:
                        if (!v1176)
                        {
                          v850 = 0;
                          v844 = 0;
                          goto LABEL_1200;
                        }
                        if (*(_BYTE *)(v1176 + 122))
                        {
                          v848 = *(_QWORD *)(v1176 + 32);
                          md::StyleTexture<md::LowZoomClimateStyle>::_processStylePixelsIfNecessary(v848);
                        }
                        else
                        {
                          v848 = *(_QWORD *)(v1176 + 16);
                          md::StyleTexture<md::LowZoomStyle>::_processStylePixelsIfNecessary(v848);
                        }
                        v844 = *(_QWORD *)(v848 + 24);
                        v850 = *(_QWORD *)v1176;
                        v852 = *(std::__shared_weak_count **)(v1176 + 8);
                        if (v852)
                        {
                          v853 = (unint64_t *)&v852->__shared_owners_;
                          do
                            v854 = __ldxr(v853);
                          while (__stxr(v854 + 1, v853));
                          do
                            v855 = __ldaxr(v853);
                          while (__stlxr(v855 - 1, v853));
                          if (!v855)
                          {
                            ((void (*)(std::__shared_weak_count *))v852->__on_zero_shared)(v852);
                            std::__shared_weak_count::__release_weak(v852);
                          }
                        }
                        LOWORD(v849) = *(_WORD *)(v1176 + 120);
                        v851 = (float)v849;
LABEL_1209:
                        f64 = (_QWORD *)v1227->f64;
                        v856 = *(_QWORD *)(*(_QWORD *)&v1227[4].f64[0] + 272);
                        if (!v856)
                        {
                          v857 = (std::__shared_weak_count *)operator new(0xE8uLL);
                          v857->__shared_owners_ = 0;
                          v858 = (unint64_t *)&v857->__shared_owners_;
                          v857->__shared_weak_owners_ = 0;
                          v857->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29E8;
                          v859 = ggl::BufferData::BufferData((uint64_t)&v857[1], qword_1EE554618, 2, 1, 6, 1);
                          v857[9].__shared_owners_ = (uint64_t)ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
                          v857[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9C70;
                          v860 = v1227[4].f64[0];
                          *(_QWORD *)(*(_QWORD *)&v860 + 272) = v859;
                          *(_QWORD *)(*(_QWORD *)&v860 + 280) = 0;
                          v861 = v1227[10].f64[0];
                          do
                            v862 = __ldxr(v858);
                          while (__stxr(v862 + 1, v858));
                          v863 = *(std::__shared_weak_count **)(*(_QWORD *)&v861 + 280);
                          *(_QWORD *)(*(_QWORD *)&v861 + 272) = v859;
                          *(_QWORD *)(*(_QWORD *)&v861 + 280) = v857;
                          if (v863)
                          {
                            v864 = (unint64_t *)&v863->__shared_owners_;
                            do
                              v865 = __ldaxr(v864);
                            while (__stlxr(v865 - 1, v864));
                            if (!v865)
                            {
                              ((void (*)(std::__shared_weak_count *))v863->__on_zero_shared)(v863);
                              std::__shared_weak_count::__release_weak(v863);
                            }
                          }
                          do
                            v866 = __ldaxr(v858);
                          while (__stlxr(v866 - 1, v858));
                          if (!v866)
                          {
                            ((void (*)(std::__shared_weak_count *))v857->__on_zero_shared)(v857);
                            std::__shared_weak_count::__release_weak(v857);
                          }
                          f64 = (_QWORD *)v1227->f64;
                          v856 = *(_QWORD *)(*(_QWORD *)&v1227[4].f64[0] + 272);
                        }
                        v867 = *(_QWORD *)(v856 + 8);
                        **(float **)(v856 + 72) = v851;
                        *(_QWORD *)(f64[12] + 56) = v850;
                        *(_QWORD *)(f64[12] + 64) = v844;
                        if (*(_QWORD *)(v856 + 64) > v867)
                          v867 = *(_QWORD *)(v856 + 64);
                        *(_QWORD *)(v856 + 56) = 0;
                        *(_QWORD *)(v856 + 64) = v867;
LABEL_1224:
                        if (!updated)
                        {
                          v872 = 0;
                          *(_QWORD *)(f64[12] + 80) = 0;
                          goto LABEL_1297;
                        }
                        v868 = *(_QWORD **)(v1287 + 1304);
                        if (v1290)
                        {
                          v869 = (int8x8_t)v868[1];
                          if (v869)
                          {
                            v870 = (uint8x8_t)vcnt_s8(v869);
                            v870.i16[0] = vaddlv_u8(v870);
                            if (v870.u32[0] > 1uLL)
                              v871 = *(_QWORD *)&v869 <= 0x99uLL ? 0x99uLL % *(_QWORD *)&v869 : 153;
                            else
                              v871 = (v869.i32[0] - 1) & 0x99;
                            v873 = *(uint64_t ***)(*v868 + 8 * v871);
                            if (v873)
                            {
                              v874 = *v873;
                              if (v874)
                              {
                                if (v870.u32[0] < 2uLL)
                                {
                                  v875 = *(_QWORD *)&v869 - 1;
                                  while (1)
                                  {
                                    v877 = v874[1];
                                    if (v877 == 153)
                                    {
                                      if (*((_DWORD *)v874 + 4) == 153)
                                        goto LABEL_1249;
                                    }
                                    else if ((v877 & v875) != v871)
                                    {
                                      goto LABEL_1250;
                                    }
                                    v874 = (uint64_t *)*v874;
                                    if (!v874)
                                      goto LABEL_1250;
                                  }
                                }
                                do
                                {
                                  v876 = v874[1];
                                  if (v876 == 153)
                                  {
                                    if (*((_DWORD *)v874 + 4) == 153)
                                    {
LABEL_1249:
                                      v878 = v874[3];
                                      if (!v878)
                                        break;
LABEL_1261:
                                      *(_QWORD *)(f64[12] + 80) = v878;
                                      if (!v1289
                                        || (v884 = (int8x8_t)v868[1], !*(_QWORD *)&v884)
                                        || ((v885 = (uint8x8_t)vcnt_s8(v884),
                                             v885.i16[0] = vaddlv_u8(v885),
                                             v885.u32[0] > 1uLL)
                                          ? (*(_QWORD *)&v884 <= 0x9AuLL
                                           ? (v886 = 0x9AuLL % *(_QWORD *)&v884)
                                           : (v886 = 154))
                                          : (v886 = (v884.i32[0] - 1) & 0x9ALL),
                                            (v887 = *(uint64_t ***)(*v868 + 8 * v886)) == 0 || (v888 = *v887) == 0))
                                      {
LABEL_1286:
                                        v892 = a1 + 3248;
                                        v893 = *v1187;
                                        if (!*v1187)
                                          goto LABEL_1296;
                                        do
                                        {
                                          v894 = *(_DWORD *)(v893 + 32);
                                          v895 = v894 >= 0x9A;
                                          if (v894 >= 0x9A)
                                            v896 = (uint64_t *)v893;
                                          else
                                            v896 = (uint64_t *)(v893 + 8);
                                          if (v895)
                                            v892 = v893;
                                          v893 = *v896;
                                        }
                                        while (*v896);
                                        if ((uint64_t *)v892 != v1187 && *(_DWORD *)(v892 + 32) <= 0x9Au)
                                          v872 = *(_QWORD *)(v892 + 40);
                                        else
LABEL_1296:
                                          v872 = 0;
                                        goto LABEL_1297;
                                      }
                                      if (v885.u32[0] < 2uLL)
                                      {
                                        v889 = *(_QWORD *)&v884 - 1;
                                        while (1)
                                        {
                                          v891 = v888[1];
                                          if (v891 == 154)
                                          {
                                            if (*((_DWORD *)v888 + 4) == 154)
                                              goto LABEL_1285;
                                          }
                                          else if ((v891 & v889) != v886)
                                          {
                                            goto LABEL_1286;
                                          }
                                          v888 = (uint64_t *)*v888;
                                          if (!v888)
                                            goto LABEL_1286;
                                        }
                                      }
                                      while (1)
                                      {
                                        v890 = v888[1];
                                        if (v890 == 154)
                                        {
                                          if (*((_DWORD *)v888 + 4) == 154)
                                          {
LABEL_1285:
                                            v872 = v888[3];
                                            if (!v872)
                                              goto LABEL_1286;
LABEL_1297:
                                            *(_QWORD *)(f64[12] + 72) = v872;
                                            if (v1200)
                                            {
                                              v1247 = v1263;
                                              if (v1263.i64[1])
                                              {
                                                v897 = (unint64_t *)(v1263.i64[1] + 8);
                                                do
                                                  v898 = __ldxr(v897);
                                                while (__stxr(v898 + 1, v897));
                                              }
                                              v899 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_3::operator()(v1283, &v1262, (uint64_t)v1191);
                                              v900 = f64[8];
                                              *(_QWORD *)(v900 + 352) = v899;
                                              *(_QWORD *)(v900 + 360) = 0;
                                              v901 = f64[20];
                                              v902 = *(std::__shared_weak_count **)(v901 + 360);
                                              *(_QWORD *)(v901 + 352) = 0;
                                              *(_QWORD *)(v901 + 360) = 0;
                                              if (v902)
                                              {
                                                v903 = (unint64_t *)&v902->__shared_owners_;
                                                do
                                                  v904 = __ldaxr(v903);
                                                while (__stlxr(v904 - 1, v903));
                                                if (!v904)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
                                                  std::__shared_weak_count::__release_weak(v902);
                                                }
                                              }
                                              v905 = (std::__shared_weak_count *)v1247.i64[1];
                                              if (v1247.i64[1])
                                              {
                                                v906 = (unint64_t *)(v1247.i64[1] + 8);
                                                do
                                                  v907 = __ldaxr(v906);
                                                while (__stlxr(v907 - 1, v906));
                                                if (!v907)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
                                                  std::__shared_weak_count::__release_weak(v905);
                                                }
                                              }
                                              md::LayoutContext::frameState(a2);
                                              md::SharedResource::addFrameRef(v1191, *(_QWORD *)(v908 + 624));
                                              f64 = (_QWORD *)v1227->f64;
                                              *(_QWORD *)(*(_QWORD *)&v1227[6].f64[0] + 88) = *((_QWORD *)v1191 + 4);
                                              if (v1192)
                                              {
                                                v1246 = v1263;
                                                if (v1263.i64[1])
                                                {
                                                  v909 = (unint64_t *)(v1263.i64[1] + 8);
                                                  do
                                                    v910 = __ldxr(v909);
                                                  while (__stxr(v910 + 1, v909));
                                                }
                                                v911 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_3::operator()(v1283, &v1262, (uint64_t)v1175);
                                                v912 = v1227[4].f64[0];
                                                *(_QWORD *)(*(_QWORD *)&v912 + 368) = v911;
                                                *(_QWORD *)(*(_QWORD *)&v912 + 376) = 0;
                                                v913 = v1227[10].f64[0];
                                                v914 = *(std::__shared_weak_count **)(*(_QWORD *)&v913 + 376);
                                                *(_QWORD *)(*(_QWORD *)&v913 + 368) = 0;
                                                *(_QWORD *)(*(_QWORD *)&v913 + 376) = 0;
                                                if (v914)
                                                {
                                                  v915 = (unint64_t *)&v914->__shared_owners_;
                                                  do
                                                    v916 = __ldaxr(v915);
                                                  while (__stlxr(v916 - 1, v915));
                                                  if (!v916)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v914->__on_zero_shared)(v914);
                                                    std::__shared_weak_count::__release_weak(v914);
                                                  }
                                                }
                                                v917 = (std::__shared_weak_count *)v1246.i64[1];
                                                if (v1246.i64[1])
                                                {
                                                  v918 = (unint64_t *)(v1246.i64[1] + 8);
                                                  do
                                                    v919 = __ldaxr(v918);
                                                  while (__stlxr(v919 - 1, v918));
                                                  if (!v919)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v917->__on_zero_shared)(v917);
                                                    std::__shared_weak_count::__release_weak(v917);
                                                  }
                                                }
                                                md::LayoutContext::frameState(a2);
                                                md::SharedResource::addFrameRef(v1175, *(_QWORD *)(v920 + 624));
                                                f64 = (_QWORD *)v1227->f64;
                                                *(_QWORD *)(*(_QWORD *)&v1227[6].f64[0] + 96) = *((_QWORD *)v1175 + 4);
                                                v921 = v1227[4].f64[0];
                                                *(_QWORD *)(*(_QWORD *)&v921 + 392) = 0;
                                                v922 = *(_QWORD *)(a1 + 2032);
                                                *(_QWORD *)(*(_QWORD *)&v921 + 384) = v922;
                                                v923 = v1227[10].f64[0];
                                                v924 = *(_QWORD *)(a1 + 2040);
                                                if (v924)
                                                {
                                                  v925 = (unint64_t *)(v924 + 8);
                                                  do
                                                    v926 = __ldxr(v925);
                                                  while (__stxr(v926 + 1, v925));
                                                }
                                                v927 = *(std::__shared_weak_count **)(*(_QWORD *)&v923 + 392);
                                                *(_QWORD *)(*(_QWORD *)&v923 + 384) = v922;
                                                *(_QWORD *)(*(_QWORD *)&v923 + 392) = v924;
                                                if (v927)
                                                {
                                                  v928 = (unint64_t *)&v927->__shared_owners_;
                                                  do
                                                    v929 = __ldaxr(v928);
                                                  while (__stlxr(v929 - 1, v928));
LABEL_1345:
                                                  if (!v929)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v927->__on_zero_shared)(v927);
                                                    std::__shared_weak_count::__release_weak(v927);
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            {
                                              v930 = f64[8];
                                              *(_QWORD *)(v930 + 352) = 0;
                                              *(_QWORD *)(v930 + 360) = 0;
                                              v931 = f64[20];
                                              v932 = *(std::__shared_weak_count **)(v931 + 360);
                                              *(_QWORD *)(v931 + 352) = 0;
                                              *(_QWORD *)(v931 + 360) = 0;
                                              if (v932)
                                              {
                                                v933 = (unint64_t *)&v932->__shared_owners_;
                                                do
                                                  v934 = __ldaxr(v933);
                                                while (__stlxr(v934 - 1, v933));
                                                if (!v934)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v932->__on_zero_shared)(v932);
                                                  std::__shared_weak_count::__release_weak(v932);
                                                }
                                              }
                                              *(_QWORD *)(f64[12] + 88) = 0;
                                              v935 = f64[8];
                                              *(_QWORD *)(v935 + 368) = 0;
                                              *(_QWORD *)(v935 + 376) = 0;
                                              v936 = f64[20];
                                              v937 = *(std::__shared_weak_count **)(v936 + 376);
                                              *(_QWORD *)(v936 + 368) = 0;
                                              *(_QWORD *)(v936 + 376) = 0;
                                              if (v937)
                                              {
                                                v938 = (unint64_t *)&v937->__shared_owners_;
                                                do
                                                  v939 = __ldaxr(v938);
                                                while (__stlxr(v939 - 1, v938));
                                                if (!v939)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
                                                  std::__shared_weak_count::__release_weak(v937);
                                                }
                                              }
                                              *(_QWORD *)(f64[12] + 96) = 0;
                                              v940 = f64[8];
                                              *(_QWORD *)(v940 + 384) = 0;
                                              *(_QWORD *)(v940 + 392) = 0;
                                              v941 = f64[20];
                                              v927 = *(std::__shared_weak_count **)(v941 + 392);
                                              *(_QWORD *)(v941 + 384) = 0;
                                              *(_QWORD *)(v941 + 392) = 0;
                                              if (v927)
                                              {
                                                v942 = (unint64_t *)&v927->__shared_owners_;
                                                do
                                                  v929 = __ldaxr(v942);
                                                while (__stlxr(v929 - 1, v942));
                                                goto LABEL_1345;
                                              }
                                            }
                                            v943 = *(float *)(v1223 + 20);
                                            if (v943 < 0.25)
                                              v944 = 2;
                                            else
                                              v944 = 0;
                                            if (v943 < 0.25)
                                              v945 = 2;
                                            else
                                              v945 = 1;
                                            if (*(_BYTE *)(v1213 + 145) == 1 && *(_BYTE *)(a1 + 3560) == 1)
                                              v947 = v945;
                                            else
                                              v947 = v944;
                                            if (*(_BYTE *)(f64[2] + 309))
                                            {
                                              v948 = (uint64_t *)(a1 + 1848);
                                              if (v947)
                                              {
                                                if (v947 == 2)
                                                  v948 = (uint64_t *)(a1 + 1880);
                                                else
                                                  v948 = (uint64_t *)(a1 + 1864);
                                              }
                                              v949 = f64[8];
                                              *(_QWORD *)(v949 + 296) = 0;
                                              v950 = *v948;
                                              *(_QWORD *)(v949 + 288) = *v948;
                                              v951 = f64[20];
                                              v952 = v948[1];
                                              if (v952)
                                              {
                                                v953 = (unint64_t *)(v952 + 8);
                                                do
                                                  v954 = __ldxr(v953);
                                                while (__stxr(v954 + 1, v953));
                                              }
                                              v955 = *(std::__shared_weak_count **)(v951 + 296);
                                              *(_QWORD *)(v951 + 288) = v950;
                                              *(_QWORD *)(v951 + 296) = v952;
                                              if (v955)
                                              {
                                                v956 = (unint64_t *)&v955->__shared_owners_;
                                                do
                                                  v957 = __ldaxr(v956);
                                                while (__stlxr(v957 - 1, v956));
                                                if (!v957)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
                                                  std::__shared_weak_count::__release_weak(v955);
                                                }
                                              }
                                            }
                                            md::DaVinciGroundRenderLayer::setupStyleGroundOcclusionConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(a1, f64, v1212, a5, a3);
                                            if (v1258[0])
                                            {
                                              v958.i64[0] = v1259;
                                              v958.i32[2] = v1260;
                                            }
                                            else
                                            {
                                              v958.i32[0] = 0;
                                              v959.i8[0] = v1255[0];
                                              v960 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v959, v958), 0);
                                              v959.i64[0] = v1256;
                                              v959.i32[2] = v1257;
                                              v958 = vbslq_s8(v960, (int8x16_t)0, v959);
                                            }
                                            v616 = (_QWORD *)v1227->f64;
                                            if (*(_BYTE *)(*(_QWORD *)&v1227[1].f64[0] + 327))
                                            {
                                              *(int8x16_t *)v1231 = v958;
                                              v961 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1928));
                                              v962 = v961[1];
                                              v963 = v961[9];
                                              v964 = vcvt_f16_f32(*(float32x4_t *)v1231);
                                              *(_WORD *)(v963 + 4) = v964.i16[2];
                                              *(_DWORD *)v963 = v964.i32[0];
                                              if (v961[8] > v962)
                                                v962 = v961[8];
                                              v961[7] = 0;
                                              v961[8] = v962;
                                              v965 = v616[8];
                                              *(_QWORD *)(v965 + 304) = v961;
                                              *(_QWORD *)(v965 + 312) = 0;
                                              v966 = v616[20];
                                              v967 = *(std::__shared_weak_count **)(v966 + 312);
                                              *(_QWORD *)(v966 + 304) = 0;
                                              *(_QWORD *)(v966 + 312) = 0;
                                              if (v967)
                                              {
                                                v968 = (unint64_t *)&v967->__shared_owners_;
                                                do
                                                  v969 = __ldaxr(v968);
                                                while (__stlxr(v969 - 1, v968));
                                                if (!v969)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
                                                  std::__shared_weak_count::__release_weak(v967);
                                                }
                                              }
                                            }
                                            (*(void (**)(float32x4_t *__return_ptr, float))(*(_QWORD *)*v1177 + 504))(v1295, *v1237);
                                            if (v1295[0].i8[0])
                                              _S8 = v1295[0].f32[1];
                                            else
                                              _S8 = 1.0;
                                            if ((_BYTE)v1261)
                                              _S9 = *((float *)&v1261 + 1);
                                            else
                                              _S9 = 0.0;
                                            if (*(_BYTE *)(v616[2] + 326))
                                            {
                                              v972 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>(v1170, _S8, _S9);
                                              if (v972)
                                              {
                                                v973 = (_QWORD *)*((_QWORD *)v972 + 3);
                                              }
                                              else
                                              {
                                                v974 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1968));
                                                v973 = v974;
                                                v975 = v974[1];
                                                v976 = (_WORD *)v974[9];
                                                __asm
                                                {
                                                  FCVT            H0, S8
                                                  FCVT            H1, S9
                                                }
                                                *v976 = _H0;
                                                v976[1] = _H1;
                                                if (v974[8] > v975)
                                                  v975 = v974[8];
                                                v974[7] = 0;
                                                v974[8] = v975;
                                                std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,md::DaVinciGroundRenderLayer::ShinyStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *&>(v1170, LODWORD(_S8) | ((unint64_t)LODWORD(_S9) << 32), (uint64_t)v974, _S8, _S9);
                                              }
                                              v979 = v616[8];
                                              *(_QWORD *)(v979 + 336) = v973;
                                              *(_QWORD *)(v979 + 344) = 0;
                                              v980 = v616[20];
                                              v981 = *(std::__shared_weak_count **)(v980 + 344);
                                              *(_QWORD *)(v980 + 336) = 0;
                                              *(_QWORD *)(v980 + 344) = 0;
                                              if (v981)
                                              {
                                                v982 = (unint64_t *)&v981->__shared_owners_;
                                                do
                                                  v983 = __ldaxr(v982);
                                                while (__stlxr(v983 - 1, v982));
                                                if (!v983)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v981->__on_zero_shared)(v981);
                                                  std::__shared_weak_count::__release_weak(v981);
                                                }
                                              }
                                            }
                                            if (v1199)
                                            {
                                              *(_QWORD *)(v616[12] + 32) = v1169;
                                              if (v1270[0])
                                              {
                                                *(_QWORD *)&v984 = v1271;
                                                *((_QWORD *)&v984 + 1) = __PAIR64__(v1163.u32[3], v1272);
                                              }
                                              else
                                              {
                                                v984 = v1269;
                                              }
                                              *(_OWORD *)v1232 = v984;
                                              *(_OWORD *)buf = v984;
                                              buf[16] = 1;
                                              v985 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>(v1166, (float *)buf);
                                              if (v985)
                                              {
                                                v986 = *(_QWORD *)(v985 + 40);
                                              }
                                              else
                                              {
                                                v987 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1920));
                                                v986 = v987;
                                                __p = 0uLL;
                                                v988 = *(_QWORD *)(v987 + 8);
                                                if (v988)
                                                  v989 = *(float16x4_t **)(v987 + 72);
                                                else
                                                  v989 = 0;
                                                v990 = *(float32x4_t *)v1232;
                                                v991.f64[0] = 0.0;
                                                *(_QWORD *)&v991.f64[1] = v987;
                                                *(float64x2_t *)v1233 = v991;
                                                __p = v991;
                                                v1309.i64[0] = 0;
                                                v1309.i64[1] = v988;
                                                *(_QWORD *)&v1310.f64[1] = v989;
                                                LOWORD(v1310.f64[0]) = 1;
                                                *v989 = vcvt_f16_f32(v990);
                                                std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *&>(v1166, (unsigned int *)buf, (uint64_t)buf, v987);
                                                if (v988)
                                                {
                                                  if (v1233[0] && *((_BYTE *)v1233[1] + 17) != 2)
                                                    (*(void (**)(void))(*(_QWORD *)v1233[0] + 64))();
                                                  v992 = *((_QWORD *)v1233[1] + 8);
                                                  if (v992 <= v988)
                                                    v992 = v988;
                                                  *((_QWORD *)v1233[1] + 7) = 0;
                                                  *((_QWORD *)v1233[1] + 8) = v992;
                                                }
                                              }
                                              v993 = v616[8];
                                              *(_QWORD *)(v993 + 464) = v986;
                                              *(_QWORD *)(v993 + 472) = 0;
                                              v994 = v616[20];
                                              v995 = *(std::__shared_weak_count **)(v994 + 472);
                                              *(_QWORD *)(v994 + 464) = 0;
                                              *(_QWORD *)(v994 + 472) = 0;
                                              if (v995)
                                              {
                                                v996 = (unint64_t *)&v995->__shared_owners_;
                                                do
                                                  v997 = __ldaxr(v996);
                                                while (__stlxr(v997 - 1, v996));
                                                if (!v997)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v995->__on_zero_shared)(v995);
                                                  std::__shared_weak_count::__release_weak(v995);
                                                }
                                              }
                                            }
                                            if (*(unsigned __int8 *)(*v1177 + 8) - 3 <= 1
                                              && *(_BYTE *)(v616[2] + 329))
                                            {
                                              v838 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1952));
                                              v998 = v616[8];
                                              *(_QWORD *)(v998 + 64) = v838;
                                              *(_QWORD *)(v998 + 72) = 0;
                                              v999 = v616[20];
                                              v1000 = *(std::__shared_weak_count **)(v999 + 72);
                                              *(_QWORD *)(v999 + 64) = 0;
                                              *(_QWORD *)(v999 + 72) = 0;
                                              if (v1000)
                                              {
                                                v1001 = (unint64_t *)&v1000->__shared_owners_;
                                                do
                                                  v1002 = __ldaxr(v1001);
                                                while (__stlxr(v1002 - 1, v1001));
                                                if (!v1002)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v1000->__on_zero_shared)(v1000);
                                                  std::__shared_weak_count::__release_weak(v1000);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              v838 = 0;
                                            }
                                            v1220 = "standard material renderable - ground pipeline";
                                            if (!v838)
                                              goto LABEL_1456;
LABEL_1431:
                                            v1003 = *v282;
                                            if (*(unsigned __int8 *)(*v282 + 8) - 3 <= 1)
                                            {
                                              __p = 0uLL;
                                              v1004 = *(_QWORD *)(v838 + 8);
                                              if (v1004)
                                                v1005 = *(float16x4_t **)(v838 + 72);
                                              else
                                                v1005 = 0;
                                              v1006.f64[0] = 0.0;
                                              *(_QWORD *)&v1006.f64[1] = v838;
                                              v1207 = v1006;
                                              __p = v1006;
                                              v1309.i64[0] = 0;
                                              v1309.i64[1] = v1004;
                                              *(_QWORD *)&v1310.f64[1] = v1005;
                                              LOWORD(v1310.f64[0]) = 1;
                                              v1007 = v1210[10];
                                              if (v1174)
                                              {
                                                +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                                                v1008 = (void *)objc_claimAutoreleasedReturnValue();
                                                objc_msgSend(v1008, "daVinciPlanarPixelPerMeterOverride");
                                                v1214 = v1009;

                                                v1003 = *v282;
                                              }
                                              else
                                              {
                                                v1214 = (int32x2_t)0x4200000042000000;
                                              }
                                              v1211 = *(float *)(v1287 + 1168);
                                              (*(void (**)(_BYTE *__return_ptr, float))(*(_QWORD *)v1003
                                                                                                 + 392))(buf, *v1237);
                                              (*(void (**)(float32x4_t *__return_ptr, float))(*(_QWORD *)*v282 + 424))(v1295, *v1237);
                                              LODWORD(v1012) = *(_DWORD *)&buf[8];
                                              if (buf[0])
                                              {
                                                v1013.f32[0] = *(float *)&buf[4];
                                              }
                                              else
                                              {
                                                *(float *)&v1012 = 1.0;
                                                v1013.f32[0] = 1.0;
                                              }
                                              LODWORD(v1011) = v1295[0].i32[1];
                                              if (v1295[0].i8[0])
                                                v1014 = v1295[0].f32[2];
                                              else
                                                v1014 = 0.0;
                                              if (v1295[0].i8[0])
                                                *(float *)&v1010 = v1295[0].f32[1];
                                              else
                                                *(float *)&v1010 = 0.0;
                                              if (v1174)
                                              {
                                                +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v1012, v1010, v1011);
                                                v1015 = (void *)objc_claimAutoreleasedReturnValue();
                                                objc_msgSend(v1015, "daVinciPlanarTilingOverride");
                                                v1205 = v1016;

                                                +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                                                v1017 = (void *)objc_claimAutoreleasedReturnValue();
                                                objc_msgSend(v1017, "daVinciPlanarOffsetOverride");
                                                v1203 = v1018;

                                                v1014 = v1203;
                                                v1013.i32[0] = v1205;
                                                *(float *)&v1010 = v1203;
                                                LODWORD(v1012) = v1205;
                                              }
                                              *(float32x2_t *)v1019.f32 = vdiv_f32((float32x2_t)vdup_lane_s32(v1214, 0), vmul_n_f32(vcvt_f32_u32(v1007), v1211));
                                              v1019.i64[1] = v1019.i64[0];
                                              v1013.i32[1] = LODWORD(v1012);
                                              v1013.i64[1] = __PAIR64__(LODWORD(v1014), LODWORD(v1010));
                                              *v1005 = vcvt_f16_f32(vmulq_f32(v1013, v1019));
                                              if (v1004)
                                              {
                                                if (*(_QWORD *)&v1207.f64[0]
                                                  && *(_BYTE *)(*(_QWORD *)&v1207.f64[1] + 17) != 2)
                                                {
                                                  (*(void (**)(void))(**(_QWORD **)&v1207.f64[0] + 64))();
                                                }
                                                v1020 = *(_QWORD *)(*(_QWORD *)&v1207.f64[1] + 64);
                                                if (v1020 <= v1004)
                                                  v1020 = v1004;
                                                *(_QWORD *)(*(_QWORD *)&v1207.f64[1] + 56) = 0;
                                                *(_QWORD *)(*(_QWORD *)&v1207.f64[1] + 64) = v1020;
                                              }
                                            }
                                            goto LABEL_1456;
                                          }
                                        }
                                        else
                                        {
                                          if (v890 >= *(_QWORD *)&v884)
                                            v890 %= *(_QWORD *)&v884;
                                          if (v890 != v886)
                                            goto LABEL_1286;
                                        }
                                        v888 = (uint64_t *)*v888;
                                        if (!v888)
                                          goto LABEL_1286;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (v876 >= *(_QWORD *)&v869)
                                      v876 %= *(_QWORD *)&v869;
                                    if (v876 != v871)
                                      break;
                                  }
                                  v874 = (uint64_t *)*v874;
                                }
                                while (v874);
                              }
                            }
                          }
                        }
LABEL_1250:
                        v879 = a1 + 3248;
                        v880 = *v1187;
                        if (!*v1187)
                          goto LABEL_1260;
                        do
                        {
                          v881 = *(_DWORD *)(v880 + 32);
                          v882 = v881 >= 0x99;
                          if (v881 >= 0x99)
                            v883 = (uint64_t *)v880;
                          else
                            v883 = (uint64_t *)(v880 + 8);
                          if (v882)
                            v879 = v880;
                          v880 = *v883;
                        }
                        while (*v883);
                        if ((uint64_t *)v879 != v1187 && *(_DWORD *)(v879 + 32) <= 0x99u)
                          v878 = *(_QWORD *)(v879 + 40);
                        else
LABEL_1260:
                          v878 = 0;
                        goto LABEL_1261;
                      }
                    }
                    else
                    {
                      if (v675 >= v658)
                        v675 %= v658;
                      if (v675 != v660)
                        goto LABEL_1196;
                    }
                    v673 = (uint64_t *)*v673;
                    if (!v673)
                      goto LABEL_1196;
                  }
                }
              }
              *(_QWORD *)(f64[12] + 64) = 0;
              *(_QWORD *)(f64[12] + 56) = 0;
              v661 = f64[8];
              *(_QWORD *)(v661 + 272) = 0;
              *(_QWORD *)(v661 + 280) = 0;
              v662 = f64[20];
              v663 = *(std::__shared_weak_count **)(v662 + 280);
              *(_QWORD *)(v662 + 272) = 0;
              *(_QWORD *)(v662 + 280) = 0;
              if (v663)
              {
                v664 = (unint64_t *)&v663->__shared_owners_;
                do
                  v665 = __ldaxr(v664);
                while (__stlxr(v665 - 1, v664));
                if (!v665)
                {
                  ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                  std::__shared_weak_count::__release_weak(v663);
                }
              }
              goto LABEL_1224;
            }
            v276 = (unint64_t *)&v273->__shared_owners_;
            do
              v277 = __ldaxr(v276);
            while (__stlxr(v277 - 1, v276));
          }
          else
          {
            v278 = v1227[4].f64[0];
            *(_QWORD *)(*(_QWORD *)&v278 + 144) = *(_QWORD *)(a1 + 2016);
            *(_QWORD *)(*(_QWORD *)&v278 + 152) = 0;
            v279 = v1227[10].f64[0];
            v273 = *(std::__shared_weak_count **)(*(_QWORD *)&v279 + 152);
            *(_QWORD *)(*(_QWORD *)&v279 + 144) = 0;
            *(_QWORD *)(*(_QWORD *)&v279 + 152) = 0;
            v274 = a5;
            v275 = a3;
            if (!v273)
              goto LABEL_483;
            v280 = (unint64_t *)&v273->__shared_owners_;
            do
              v277 = __ldaxr(v280);
            while (__stlxr(v277 - 1, v280));
          }
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
          }
          goto LABEL_483;
        }
        v262 = (unint64_t *)&v222->__shared_owners_;
        do
          v225 = __ldaxr(v262);
        while (__stlxr(v225 - 1, v262));
      }
      else
      {
        v222 = *(std::__shared_weak_count **)&v1227[1].f64[1];
        v1227[1].f64[0] = 0.0;
        v1227[1].f64[1] = 0.0;
        v223 = v1213;
        if (!v222)
          goto LABEL_461;
        v224 = (unint64_t *)&v222->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
      }
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
      goto LABEL_461;
    }
    v1226 = (float64x2_t *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1664));
    HIBYTE(v1157) = v1202;
    LOBYTE(v1157) = 0;
    HIBYTE(v1154) = v202 == 1;
    LOBYTE(v1154) = v1199;
    HIBYTE(v1152) = v1202;
    LOBYTE(v1152) = v1178;
    HIBYTE(v1149) = a10;
    LOBYTE(v1149) = v1192;
    md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&__p, a1 + 688, v199, v210 != 0, v203 == 3, v203 == 4, v204 != 0, v1200, v1149, v1152, v1154, v206 != 0, v1206, v1196, v207, v200, v1194 != v1180, v1218 != 0, v1188,
      v1179 != 0,
      v1204,
      v211 != 0,
      0,
      v1193,
      v1195,
      updated,
      0,
      0,
      v1157);
    v212 = __p;
    __p = 0uLL;
    v213 = *(std::__shared_weak_count **)&v212.f64[1];
    if (*(_QWORD *)&v212.f64[0] && **(_QWORD **)(*(_QWORD *)&v212.f64[0] + 40) == *(_QWORD *)&v1226->f64[1])
    {
      v226 = v1226[1].f64[0];
      v215 = (_BYTE *)a3;
      if (v226 != 0.0 && *(_QWORD *)&v226 != *(_QWORD *)&v212.f64[0])
      {
        v1189 = v212;
        ggl::PipelineSetup::resetData((uint64_t)v1226);
        v212 = v1189;
      }
      if (v213)
      {
        v227 = (unint64_t *)&v213->__shared_owners_;
        do
          v228 = __ldxr(v227);
        while (__stxr(v228 + 1, v227));
      }
      v214 = *(std::__shared_weak_count **)&v1226[1].f64[1];
      v1226[1] = v212;
      if (v214)
      {
        v229 = (unint64_t *)&v214->__shared_owners_;
        do
          v217 = __ldaxr(v229);
        while (__stlxr(v217 - 1, v229));
        goto LABEL_415;
      }
    }
    else
    {
      v214 = *(std::__shared_weak_count **)&v1226[1].f64[1];
      v1226[1].f64[0] = 0.0;
      v1226[1].f64[1] = 0.0;
      v215 = (_BYTE *)a3;
      if (v214)
      {
        v216 = (unint64_t *)&v214->__shared_owners_;
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
LABEL_415:
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
    }
    if (v213)
    {
      v230 = (unint64_t *)&v213->__shared_owners_;
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
        v232 = *(std::__shared_weak_count **)&__p.f64[1];
        if (*(_QWORD *)&__p.f64[1])
          goto LABEL_422;
        goto LABEL_425;
      }
    }
    v232 = *(std::__shared_weak_count **)&__p.f64[1];
    if (!*(_QWORD *)&__p.f64[1])
      goto LABEL_425;
LABEL_422:
    v233 = (unint64_t *)&v232->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (v234)
    {
LABEL_425:
      if (*v215)
        goto LABEL_426;
LABEL_435:
      v242 = *(uint64_t **)(a1 + 3128);
      v243 = *v242;
      v244 = (std::__shared_weak_count *)v242[1];
      if (v244)
      {
        v245 = (unint64_t *)&v244->__shared_owners_;
        v246 = (uint64_t)v1226;
        v247 = v1213;
        do
          v248 = __ldxr(v245);
        while (__stxr(v248 + 1, v245));
        *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 24) = v243;
        do
          v249 = __ldaxr(v245);
        while (__stlxr(v249 - 1, v245));
        if (!v249)
          goto LABEL_449;
      }
      else
      {
        v246 = (uint64_t)v1226;
        *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 24) = v243;
        v247 = v1213;
      }
      goto LABEL_619;
    }
    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
    std::__shared_weak_count::__release_weak(v232);
    if (!*v215)
      goto LABEL_435;
LABEL_426:
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    v236 = objc_msgSend(v235, "daVinciSSAODepthAwareUpsampleEnabled");

    if (v236)
    {
      v237 = v1224;
      v238 = v1224[19];
      if (!v238)
        goto LABEL_443;
    }
    else
    {
      v237 = v1224;
      v238 = v1224[17];
      if (!v238)
        goto LABEL_443;
    }
    v239 = *(_QWORD *)(v238 + 32);
    v241 = (uint64_t *)(v237[1] + 96);
    v240 = *v241;
    if (v239 >= (v241[1] - *v241) >> 3)
      v238 = 0;
    else
      v238 = *(_QWORD *)(*(_QWORD *)(v240 + 8 * v239) + 16);
LABEL_443:
    *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 24) = v238;
    v250 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1936));
    v251 = v250[1];
    v252 = v250[9];
    v253 = *(_WORD *)(v1222 + 216);
    *(_DWORD *)v252 = *(_DWORD *)(v1222 + 212);
    *(_WORD *)(v252 + 4) = v253;
    __asm { FCVT            H0, S8 }
    *(_WORD *)(v252 + 8) = _H0;
    if (v250[8] > v251)
      v251 = v250[8];
    v250[7] = 0;
    v250[8] = v251;
    v246 = (uint64_t)v1226;
    v255 = v1226[4].f64[0];
    *(_QWORD *)(*(_QWORD *)&v255 + 432) = v250;
    *(_QWORD *)(*(_QWORD *)&v255 + 440) = 0;
    v256 = v1226[10].f64[0];
    v244 = *(std::__shared_weak_count **)(*(_QWORD *)&v256 + 440);
    *(_QWORD *)(*(_QWORD *)&v256 + 432) = 0;
    *(_QWORD *)(*(_QWORD *)&v256 + 440) = 0;
    v247 = v1213;
    if (v244)
    {
      v257 = (unint64_t *)&v244->__shared_owners_;
      do
        v258 = __ldaxr(v257);
      while (__stlxr(v258 - 1, v257));
      if (!v258)
      {
LABEL_449:
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
LABEL_619:
    md::DaVinciGroundRenderLayer::setupDaVinciGroundTileDataBindings<ggl::DaVinci::GroundNonCompressedPipelineSetup>(v246, v247);
    v403 = *(float *)(a3 + 40);
    if (*(unsigned __int8 *)(a5 + 24) == 255)
    {
      v406 = (_QWORD *)v1226->f64;
      if (*(_BYTE *)(a3 + 5) && *(_BYTE *)(a3 + 4))
      {
        v407 = *(double *)(a5 + 288);
        v408 = *(double *)(a5 + 296);
        v409 = *(double *)(a5 + 304);
        v410 = *(double *)(a5 + 312);
        v411 = v408 + v408;
        v412 = (v408 + v408) * v408;
        v413 = (v409 + v409) * v409;
        v414 = v407 + v407;
        v415 = (v407 + v407) * v408;
        v416 = (v409 + v409) * v410;
        v417 = v409 * (v407 + v407);
        v77 = 1.0;
        v418 = 1.0 - (v407 + v407) * v407;
        v419 = v411 * v409;
        *(double *)buf = 1.0 - (v412 + v413);
        *(double *)&buf[8] = v416 + v415;
        *(double *)&buf[32] = v415 - v416;
        v1297 = v418 - v413;
        v1300 = v410 * v411 + v417;
        v1301 = v419 - v410 * v414;
        *(double *)&buf[16] = v417 - v410 * v411;
        v1298 = v410 * v414 + v419;
        v1302 = v418 - v412;
        *(_QWORD *)&buf[24] = 0;
        v1299 = 0;
        v1303 = 0;
        v1307 = 0x3FF0000000000000;
        v1305 = 0;
        v1306 = 0;
        v1304 = 0;
        gm::Matrix<double,4,4>::inverted<int,void>(__p.f64, (double *)buf);
        v420 = *(double *)(a3 + 80);
        v421 = *(double *)(a3 + 88);
        v422 = *(double *)(a3 + 96);
        v423 = *(double *)(a3 + 104);
        _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(__p, v420), v1310, v421), v1312, v422), v1314, v423);
        _D1 = *(double *)v1309.i64 * v420 + v1311 * v421 + v1313 * v422 + v1315 * v423;
      }
      else
      {
        _Q0 = *(float64x2_t *)(a3 + 80);
        _D1 = *(double *)(a3 + 96);
      }
    }
    else
    {
      _Q0 = *(float64x2_t *)(a3 + 112);
      _D1 = *(double *)(a3 + 128);
      v406 = (_QWORD *)v1226->f64;
    }
    _S8 = 1.0 / v403;
    _D2 = _Q0.f64[1];
    __asm
    {
      FCVT            H2, D2
      FCVT            H0, D0
    }
    WORD1(_Q0.f64[0]) = LOWORD(_D2);
    __asm { FCVT            H9, D1 }
    v1190 = LODWORD(_Q0.f64[0]);
    *(_QWORD *)buf = vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]).u64[0];
    __asm { FCVT            S0, H9 }
    *(_DWORD *)&buf[8] = _S0;
    *(float *)&buf[12] = _S8;
    v428 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>(v1172, (float *)buf);
    if (v428)
    {
      v430 = v428[4];
      a7 = v1184;
      a8 = v1185;
      v282 = v1177;
      v283 = v1213;
    }
    else
    {
      v431 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1704));
      v430 = v431;
      __p = 0uLL;
      v432 = *(_QWORD *)(v431 + 8);
      if (v432)
        v433 = *(double *)(v431 + 72);
      else
        v433 = 0.0;
      v406 = (_QWORD *)v1226->f64;
      _Q0.f64[0] = 0.0;
      *(_QWORD *)&_Q0.f64[1] = v431;
      v1182 = _Q0;
      __p = _Q0;
      v1309.i64[0] = 0;
      v1309.i64[1] = v432;
      v1310.f64[1] = v433;
      LOWORD(v1310.f64[0]) = 1;
      __asm { FCVT            H0, S8 }
      **(_DWORD **)&v433 = v1190;
      *(_WORD *)(*(_QWORD *)&v433 + 4) = _H9;
      *(_WORD *)(*(_QWORD *)&v433 + 6) = LOWORD(_Q0.f64[0]);
      std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(v1172, (float *)buf, buf, v431);
      a7 = v1184;
      a8 = v1185;
      v282 = v1177;
      v283 = v1213;
      if (v432)
      {
        v429.i32[3] = HIDWORD(v1182.f64[1]);
        if (*(_QWORD *)&v1182.f64[0] && *(_BYTE *)(*(_QWORD *)&v1182.f64[1] + 17) != 2)
          (*(void (**)(void))(**(_QWORD **)&v1182.f64[0] + 64))();
        v435 = *(_QWORD *)(*(_QWORD *)&v1182.f64[1] + 64);
        if (v435 <= v432)
          v435 = v432;
        *(_QWORD *)(*(_QWORD *)&v1182.f64[1] + 56) = 0;
        *(_QWORD *)(*(_QWORD *)&v1182.f64[1] + 64) = v435;
      }
    }
    v436 = v406[8];
    *(_QWORD *)(v436 + 80) = v430;
    *(_QWORD *)(v436 + 88) = 0;
    v437 = v406[20];
    v438 = *(std::__shared_weak_count **)(v437 + 88);
    *(_QWORD *)(v437 + 80) = 0;
    *(_QWORD *)(v437 + 88) = 0;
    if (!v438)
      goto LABEL_641;
    v439 = (unint64_t *)&v438->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
      if (v1218)
      {
LABEL_642:
        v441 = *(std::__shared_weak_count **)(v283 + 232);
        v1244 = *(_QWORD *)(v283 + 224);
        v1245 = v441;
        if (v441)
        {
          v442 = (unint64_t *)&v441->__shared_owners_;
          do
            v443 = __ldxr(v442);
          while (__stxr(v443 + 1, v442));
        }
        v444 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_1::operator()(v1285, &v1282);
        v445 = v406[8];
        *(_QWORD *)(v445 + 256) = v444;
        *(_QWORD *)(v445 + 264) = 0;
        v446 = v406[20];
        v447 = *(std::__shared_weak_count **)(v446 + 264);
        *(_QWORD *)(v446 + 256) = 0;
        *(_QWORD *)(v446 + 264) = 0;
        if (v447)
        {
          v448 = (unint64_t *)&v447->__shared_owners_;
          do
            v449 = __ldaxr(v448);
          while (__stlxr(v449 - 1, v448));
          if (!v449)
          {
            ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
            std::__shared_weak_count::__release_weak(v447);
          }
        }
        v450 = v1245;
        if (v1245)
        {
          v451 = (unint64_t *)&v1245->__shared_owners_;
          do
            v452 = __ldaxr(v451);
          while (__stlxr(v452 - 1, v451));
          if (!v452)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
        }
      }
    }
    else
    {
LABEL_641:
      if (v1218)
        goto LABEL_642;
    }
    if (v1206)
    {
      v453 = *(std::__shared_weak_count **)(v283 + 232);
      v1242 = *(_QWORD *)(v283 + 224);
      v1243 = v453;
      if (v453)
      {
        v454 = (unint64_t *)&v453->__shared_owners_;
        do
          v455 = __ldxr(v454);
        while (__stxr(v455 + 1, v454));
      }
      v456 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_2::operator()((uint64_t)v1284, (uint64_t)&v1242, &v1282);
      v457 = v406[8];
      *(_QWORD *)(v457 + 240) = v456;
      *(_QWORD *)(v457 + 248) = 0;
      v458 = v406[20];
      v459 = *(std::__shared_weak_count **)(v458 + 248);
      *(_QWORD *)(v458 + 240) = 0;
      *(_QWORD *)(v458 + 248) = 0;
      if (v459)
      {
        v460 = (unint64_t *)&v459->__shared_owners_;
        do
          v461 = __ldaxr(v460);
        while (__stlxr(v461 - 1, v460));
        if (!v461)
        {
          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
          std::__shared_weak_count::__release_weak(v459);
        }
      }
      v462 = v1243;
      if (v1243)
      {
        v463 = (unint64_t *)&v1243->__shared_owners_;
        do
          v464 = __ldaxr(v463);
        while (__stlxr(v464 - 1, v463));
        if (!v464)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }
      }
    }
    *(_QWORD *)(v406[12] + 16) = v1210;
    if (v1204)
      *(_QWORD *)(v406[12] + 40) = v1194;
    v465 = *(unsigned __int8 *)(v283 + 396);
    if (*(_BYTE *)(v283 + 396))
    {
      v429.i64[0] = *(_QWORD *)(v283 + 380);
      v429.i32[2] = *(_DWORD *)(v283 + 388);
      v1165 = v429;
      v1168 = *(float *)(v283 + 392);
    }
    else
    {
      v466 = v1165;
      v466.i8[0] = 0;
      v1165 = v466;
    }
    v467 = *v1237;
    v469 = *(_QWORD *)(v283 + 224);
    v468 = *(std::__shared_weak_count **)(v283 + 232);
    v1241 = v468;
    if (v468)
    {
      v470 = (unint64_t *)&v468->__shared_owners_;
      do
        v471 = __ldxr(v470);
      while (__stxr(v471 + 1, v470));
    }
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, float))(*(_QWORD *)v469 + 976))(v1295, v469, v467);
    (*(void (**)(int8x16_t *__return_ptr, uint64_t, float))(*(_QWORD *)v469 + 928))(&v1293, v469, v467);
    if (v1295[0].i8[0])
    {
      buf[0] = 0;
      goto LABEL_681;
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, float))(*(_QWORD *)v469 + 232))(buf, v469, v467);
    if (v1295[0].i8[0])
    {
LABEL_681:
      v474 = *(float *)&v1293.i32[1];
      if (!v1293.i8[0])
        v474 = 1.0;
      v475.i64[0] = *(uint64_t *)((char *)v1295[0].i64 + 4);
      v475.i64[1] = __PAIR64__(LODWORD(v474), v1295[0].u32[3]);
      if (v465)
      {
LABEL_684:
        v476 = vmlaq_n_f32(v475, vsubq_f32(v1165, v475), v1168);
        v476.i32[3] = v475.i32[3];
        v475 = v476;
      }
    }
    else
    {
      v472.i32[0] = 0;
      v473.i8[0] = buf[0];
      v475 = (float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v473, v472), 0), v1163, *(int8x16_t *)&buf[4]);
      if (v465)
        goto LABEL_684;
    }
    v1219 = v475;
    __p = (float64x2_t)v475;
    v1309.i8[0] = 1;
    v477 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>(v1171, (float *)&__p);
    if (v477)
    {
      v478 = *(_QWORD *)(v477 + 40);
    }
    else
    {
      v479 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1960));
      v478 = v479;
      v480 = *(_QWORD *)(v479 + 8);
      **(float16x4_t **)(v479 + 72) = vcvt_f16_f32(v1219);
      if (*(_QWORD *)(v479 + 64) > v480)
        v480 = *(_QWORD *)(v479 + 64);
      *(_QWORD *)(v479 + 56) = 0;
      *(_QWORD *)(v479 + 64) = v480;
      std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *&>(v1171, (unsigned int *)&__p, (uint64_t)&__p, v479);
    }
    v481 = v406[8];
    *(_QWORD *)(v481 + 448) = v478;
    *(_QWORD *)(v481 + 456) = 0;
    v482 = v406[20];
    v483 = *(std::__shared_weak_count **)(v482 + 456);
    *(_QWORD *)(v482 + 448) = 0;
    *(_QWORD *)(v482 + 456) = 0;
    if (v483)
    {
      v484 = (unint64_t *)&v483->__shared_owners_;
      do
        v485 = __ldaxr(v484);
      while (__stlxr(v485 - 1, v484));
      if (!v485)
      {
        ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
        std::__shared_weak_count::__release_weak(v483);
      }
    }
    if (v1241)
    {
      v486 = (unint64_t *)&v1241->__shared_owners_;
      do
        v487 = __ldaxr(v486);
      while (__stlxr(v487 - 1, v486));
      if (!v487)
      {
        ((void (*)(std::__shared_weak_count *))v1241->__on_zero_shared)(v1241);
        std::__shared_weak_count::__release_weak(v1241);
      }
    }
    v488 = (_BYTE *)v406[2];
    if (v488[317])
    {
      v489 = v406[8];
      *(_QWORD *)(v489 + 232) = 0;
      v490 = v1224[42];
      *(_QWORD *)(v489 + 224) = v490;
      v491 = v406[20];
      v492 = v1224[43];
      if (v492)
      {
        v493 = (unint64_t *)(v492 + 8);
        do
          v494 = __ldxr(v493);
        while (__stxr(v494 + 1, v493));
      }
      v495 = *(std::__shared_weak_count **)(v491 + 232);
      *(_QWORD *)(v491 + 224) = v490;
      *(_QWORD *)(v491 + 232) = v492;
      if (v495)
      {
        v496 = (unint64_t *)&v495->__shared_owners_;
        do
          v497 = __ldaxr(v496);
        while (__stlxr(v497 - 1, v496));
        if (!v497)
        {
          ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
          std::__shared_weak_count::__release_weak(v495);
        }
      }
      v488 = (_BYTE *)v406[2];
    }
    if (v488[331])
    {
      v498 = v406[8];
      *(_QWORD *)(v498 + 120) = 0;
      v499 = *(_QWORD *)(a1 + 1832);
      *(_QWORD *)(v498 + 112) = v499;
      v500 = v406[20];
      v501 = *(_QWORD *)(a1 + 1840);
      if (v501)
      {
        v502 = (unint64_t *)(v501 + 8);
        do
          v503 = __ldxr(v502);
        while (__stxr(v503 + 1, v502));
      }
      v504 = *(std::__shared_weak_count **)(v500 + 120);
      *(_QWORD *)(v500 + 112) = v499;
      *(_QWORD *)(v500 + 120) = v501;
      if (v504)
      {
        v505 = (unint64_t *)&v504->__shared_owners_;
        do
          v506 = __ldaxr(v505);
        while (__stlxr(v506 - 1, v505));
        if (!v506)
        {
          ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
          std::__shared_weak_count::__release_weak(v504);
        }
      }
      v488 = (_BYTE *)v406[2];
    }
    if (v488[330])
    {
      v507 = v406[8];
      *(_QWORD *)(v507 + 104) = 0;
      v508 = *(_QWORD *)(a1 + 1816);
      *(_QWORD *)(v507 + 96) = v508;
      v509 = v406[20];
      v510 = *(_QWORD *)(a1 + 1824);
      if (v510)
      {
        v511 = (unint64_t *)(v510 + 8);
        do
          v512 = __ldxr(v511);
        while (__stxr(v512 + 1, v511));
      }
      v513 = *(std::__shared_weak_count **)(v509 + 104);
      *(_QWORD *)(v509 + 96) = v508;
      *(_QWORD *)(v509 + 104) = v510;
      if (v513)
      {
        v514 = (unint64_t *)&v513->__shared_owners_;
        do
          v515 = __ldaxr(v514);
        while (__stlxr(v515 - 1, v514));
        if (!v515)
        {
          ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
          std::__shared_weak_count::__release_weak(v513);
        }
      }
    }
    if (*(_BYTE *)(v406[2] + 326))
    {
      v516 = v406[8];
      *(_QWORD *)(v516 + 200) = 0;
      v517 = *(_QWORD *)(v1222 + 32);
      *(_QWORD *)(v516 + 192) = v517;
      v518 = v406[20];
      v519 = *(_QWORD *)(v1222 + 40);
      if (v519)
      {
        v520 = (unint64_t *)(v519 + 8);
        do
          v521 = __ldxr(v520);
        while (__stxr(v521 + 1, v520));
      }
      v522 = *(std::__shared_weak_count **)(v518 + 200);
      *(_QWORD *)(v518 + 192) = v517;
      *(_QWORD *)(v518 + 200) = v519;
      if (v522)
      {
        v523 = (unint64_t *)&v522->__shared_owners_;
        do
          v524 = __ldaxr(v523);
        while (__stlxr(v524 - 1, v523));
        if (!v524)
        {
          ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
          std::__shared_weak_count::__release_weak(v522);
        }
      }
    }
    v525 = v406[8];
    *(_QWORD *)(v525 + 56) = 0;
    v526 = *(_QWORD *)(v1222 + 16);
    *(_QWORD *)(v525 + 48) = v526;
    v527 = v406[20];
    v528 = *(_QWORD *)(v1222 + 24);
    if (v528)
    {
      v529 = (unint64_t *)(v528 + 8);
      do
        v530 = __ldxr(v529);
      while (__stxr(v530 + 1, v529));
    }
    v531 = *(std::__shared_weak_count **)(v527 + 56);
    *(_QWORD *)(v527 + 48) = v526;
    *(_QWORD *)(v527 + 56) = v528;
    if (v531)
    {
      v532 = (unint64_t *)&v531->__shared_owners_;
      do
        v533 = __ldaxr(v532);
      while (__stlxr(v533 - 1, v532));
      if (!v533)
      {
        ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
        std::__shared_weak_count::__release_weak(v531);
      }
    }
    v534 = *(uint64_t **)(v283 + 32);
    v535 = (uint64_t *)v406[4];
    v535[1] = 0;
    v536 = *v534;
    *v535 = *v534;
    v537 = (_QWORD *)v406[16];
    v538 = v534[1];
    if (v538)
    {
      v539 = (unint64_t *)(v538 + 8);
      do
        v540 = __ldxr(v539);
      while (__stxr(v540 + 1, v539));
    }
    v541 = (std::__shared_weak_count *)v537[1];
    *v537 = v536;
    v537[1] = v538;
    if (v541)
    {
      v542 = (unint64_t *)&v541->__shared_owners_;
      do
        v543 = __ldaxr(v542);
      while (__stlxr(v543 - 1, v542));
      if (!v543)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
      }
    }
    v544 = (_QWORD *)v406[8];
    v544[1] = 0;
    v545 = *(_QWORD *)(a5 + 216);
    *v544 = v545;
    v546 = (_QWORD *)v406[20];
    v547 = *(_QWORD *)(a5 + 224);
    if (v547)
    {
      v548 = (unint64_t *)(v547 + 8);
      do
        v549 = __ldxr(v548);
      while (__stxr(v549 + 1, v548));
    }
    v550 = (std::__shared_weak_count *)v546[1];
    *v546 = v545;
    v546[1] = v547;
    if (v550)
    {
      v551 = (unint64_t *)&v550->__shared_owners_;
      do
        v552 = __ldaxr(v551);
      while (__stlxr(v552 - 1, v551));
      if (!v552)
      {
        ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
        std::__shared_weak_count::__release_weak(v550);
      }
    }
    v553 = v406[8];
    *(_QWORD *)(v553 + 168) = 0;
    v554 = *(_QWORD *)(a5 + 448);
    *(_QWORD *)(v553 + 160) = v554;
    v555 = v406[20];
    v556 = *(_QWORD *)(a5 + 456);
    if (v556)
    {
      v557 = (unint64_t *)(v556 + 8);
      do
        v558 = __ldxr(v557);
      while (__stxr(v558 + 1, v557));
    }
    v559 = *(std::__shared_weak_count **)(v555 + 168);
    *(_QWORD *)(v555 + 160) = v554;
    *(_QWORD *)(v555 + 168) = v556;
    if (v559)
    {
      v560 = (unint64_t *)&v559->__shared_owners_;
      do
        v561 = __ldaxr(v560);
      while (__stlxr(v561 - 1, v560));
      if (!v561)
      {
        ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
        std::__shared_weak_count::__release_weak(v559);
      }
    }
    v562 = v406[8];
    *(_QWORD *)(v562 + 24) = 0;
    v563 = *(_QWORD *)(a5 + 232);
    *(_QWORD *)(v562 + 16) = v563;
    v564 = v406[20];
    v565 = *(_QWORD *)(a5 + 240);
    if (v565)
    {
      v566 = (unint64_t *)(v565 + 8);
      do
        v567 = __ldxr(v566);
      while (__stxr(v567 + 1, v566));
    }
    v568 = *(std::__shared_weak_count **)(v564 + 24);
    *(_QWORD *)(v564 + 16) = v563;
    *(_QWORD *)(v564 + 24) = v565;
    if (v568)
    {
      v569 = (unint64_t *)&v568->__shared_owners_;
      do
        v570 = __ldaxr(v569);
      while (__stlxr(v570 - 1, v569));
      if (!v570)
      {
        ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
        std::__shared_weak_count::__release_weak(v568);
      }
    }
    if (*(_BYTE *)(a3 + 6))
    {
      v571 = v406[8];
      *(_QWORD *)(v571 + 40) = 0;
      v572 = *(_QWORD *)(a5 + 400);
      *(_QWORD *)(v571 + 32) = v572;
      v573 = v406[20];
      v574 = *(_QWORD *)(a5 + 408);
      if (v574)
      {
        v575 = (unint64_t *)(v574 + 8);
        do
          v576 = __ldxr(v575);
        while (__stxr(v576 + 1, v575));
      }
      v577 = *(std::__shared_weak_count **)(v573 + 40);
      *(_QWORD *)(v573 + 32) = v572;
      *(_QWORD *)(v573 + 40) = v574;
      if (v577)
      {
        v578 = (unint64_t *)&v577->__shared_owners_;
        do
          v579 = __ldaxr(v578);
        while (__stlxr(v579 - 1, v578));
        if (!v579)
        {
          ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
          std::__shared_weak_count::__release_weak(v577);
        }
      }
      v580 = v1224[12];
      if (v580)
      {
        v581 = *(_QWORD *)(v580 + 32);
        v582 = *(_QWORD *)(v1224[1] + 96);
        if (v581 >= (*(_QWORD *)(v1224[1] + 104) - v582) >> 3)
          v580 = 0;
        else
          v580 = *(_QWORD *)(*(_QWORD *)(v582 + 8 * v581) + 16);
      }
      *(_QWORD *)(v406[12] + 8) = v580;
    }
    v583 = v406[8];
    *(_QWORD *)(v583 + 216) = 0;
    v584 = v1224[40];
    *(_QWORD *)(v583 + 208) = v584;
    v585 = v406[20];
    v586 = v1224[41];
    if (v586)
    {
      v587 = (unint64_t *)(v586 + 8);
      do
        v588 = __ldxr(v587);
      while (__stxr(v588 + 1, v587));
    }
    v589 = *(std::__shared_weak_count **)(v585 + 216);
    *(_QWORD *)(v585 + 208) = v584;
    *(_QWORD *)(v585 + 216) = v586;
    if (v589)
    {
      v590 = (unint64_t *)&v589->__shared_owners_;
      do
        v591 = __ldaxr(v590);
      while (__stlxr(v591 - 1, v590));
      if (!v591)
      {
        ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
        std::__shared_weak_count::__release_weak(v589);
      }
    }
    *(_QWORD *)v406[12] = *(_QWORD *)(a3 + 280);
    v592 = v406[8];
    v593 = v1280;
    v594 = v1281;
    *(_QWORD *)(v592 + 176) = v1280;
    *(_QWORD *)(v592 + 184) = 0;
    v595 = v406[20];
    if (v594)
    {
      v596 = (unint64_t *)&v594->__shared_owners_;
      do
        v597 = __ldxr(v596);
      while (__stxr(v597 + 1, v596));
    }
    v598 = *(std::__shared_weak_count **)(v595 + 184);
    *(_QWORD *)(v595 + 176) = v593;
    *(_QWORD *)(v595 + 184) = v594;
    if (v598)
    {
      v599 = (unint64_t *)&v598->__shared_owners_;
      do
        v600 = __ldaxr(v599);
      while (__stlxr(v600 - 1, v599));
      if (!v600)
      {
        ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
        std::__shared_weak_count::__release_weak(v598);
      }
    }
    v601 = v406[8];
    v602 = v1280;
    v603 = v1281;
    *(_QWORD *)(v601 + 176) = v1280;
    *(_QWORD *)(v601 + 184) = 0;
    v604 = v406[20];
    if (v603)
    {
      v605 = (unint64_t *)&v603->__shared_owners_;
      do
        v606 = __ldxr(v605);
      while (__stxr(v606 + 1, v605));
    }
    v607 = *(std::__shared_weak_count **)(v604 + 184);
    *(_QWORD *)(v604 + 176) = v602;
    *(_QWORD *)(v604 + 184) = v603;
    if (v607)
    {
      v608 = (unint64_t *)&v607->__shared_owners_;
      do
        v609 = __ldaxr(v608);
      while (__stlxr(v609 - 1, v608));
      if (!v609)
      {
        ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
        std::__shared_weak_count::__release_weak(v607);
      }
    }
    md::DaVinciGroundRenderLayer::setupDaVinciGroundTileDataBindings<ggl::DaVinci::GroundNonCompressedPipelineSetup>((uint64_t)v406, v283);
    if (!v1202)
    {
      v616 = (_QWORD *)v1226->f64;
      *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 64) = 0;
      *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 56) = 0;
      v617 = v1226[4].f64[0];
      *(_QWORD *)(*(_QWORD *)&v617 + 272) = 0;
      *(_QWORD *)(*(_QWORD *)&v617 + 280) = 0;
      v618 = v1226[10].f64[0];
      v619 = *(std::__shared_weak_count **)(*(_QWORD *)&v618 + 280);
      *(_QWORD *)(*(_QWORD *)&v618 + 272) = 0;
      *(_QWORD *)(*(_QWORD *)&v618 + 280) = 0;
      if (v619)
      {
        v620 = (unint64_t *)&v619->__shared_owners_;
        do
          v621 = __ldaxr(v620);
        while (__stlxr(v621 - 1, v620));
        if (!v621)
        {
          ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
          std::__shared_weak_count::__release_weak(v619);
        }
      }
      if (!updated)
        goto LABEL_997;
      goto LABEL_827;
    }
    v612 = v1288;
    if (!v1288)
      goto LABEL_969;
    v613 = *(_QWORD **)(v1287 + 1304);
    v614 = v613[1];
    if (!v614)
      goto LABEL_969;
    *(int8x8_t *)_Q0.i8 = vcnt_s8((int8x8_t)v614);
    _Q0.i16[0] = vaddlv_u8(*(uint8x8_t *)_Q0.i8);
    if (_Q0.u32[0] > 1uLL)
    {
      v615 = v1288;
      if (v614 <= v1288)
        v615 = v1288 % v614;
    }
    else
    {
      v615 = (v614 - 1) & (unint64_t)v1288;
    }
    v666 = *(uint64_t ***)(*v613 + 8 * v615);
    if (!v666)
      goto LABEL_969;
    v667 = *v666;
    if (!v667)
      goto LABEL_969;
    if (_Q0.u32[0] < 2uLL)
    {
      v668 = v614 - 1;
      while (1)
      {
        v669 = v667[1];
        if (v669 == v1288)
        {
          if (*((_DWORD *)v667 + 4) == v1288)
            goto LABEL_965;
        }
        else if ((v669 & v668) != v615)
        {
          goto LABEL_969;
        }
        v667 = (uint64_t *)*v667;
        if (!v667)
          goto LABEL_969;
      }
    }
    while (1)
    {
      v670 = v667[1];
      if (v670 == v1288)
        break;
      if (v670 >= v614)
        v670 %= v614;
      if (v670 != v615)
        goto LABEL_969;
LABEL_898:
      v667 = (uint64_t *)*v667;
      if (!v667)
        goto LABEL_969;
    }
    if (*((_DWORD *)v667 + 4) != v1288)
      goto LABEL_898;
LABEL_965:
    if (!v667[3])
    {
LABEL_969:
      if (!v1176)
      {
        v694 = 0;
        v690 = 0;
        goto LABEL_973;
      }
      if (*(_BYTE *)(v1176 + 122))
      {
        v693 = *(_QWORD *)(v1176 + 32);
        md::StyleTexture<md::LowZoomClimateStyle>::_processStylePixelsIfNecessary(v693);
      }
      else
      {
        v693 = *(_QWORD *)(v1176 + 16);
        md::StyleTexture<md::LowZoomStyle>::_processStylePixelsIfNecessary(v693);
      }
      v690 = *(_QWORD *)(v693 + 24);
      v694 = *(_QWORD *)v1176;
      v696 = *(std::__shared_weak_count **)(v1176 + 8);
      if (v696)
      {
        v697 = (unint64_t *)&v696->__shared_owners_;
        do
          v698 = __ldxr(v697);
        while (__stxr(v698 + 1, v697));
        do
          v699 = __ldaxr(v697);
        while (__stlxr(v699 - 1, v697));
        if (!v699)
        {
          ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
          std::__shared_weak_count::__release_weak(v696);
        }
      }
      _Q0.i16[0] = *(_WORD *)(v1176 + 120);
      v695 = (float)_Q0.u32[0];
      goto LABEL_982;
    }
    v690 = md::DaVinciGroundRenderResources::debugTextureForAttribute(v1161, v1288);
    v691 = (int8x8_t)v613[1];
    if (!*(_QWORD *)&v691)
      goto LABEL_1637;
    *(int8x8_t *)_Q0.i8 = vcnt_s8(v691);
    _Q0.i16[0] = vaddlv_u8(*(uint8x8_t *)_Q0.i8);
    if (_Q0.u32[0] > 1uLL)
    {
      v692 = v612;
      if (*(_QWORD *)&v691 <= v612)
        v692 = v612 % *(_QWORD *)&v691;
    }
    else
    {
      v692 = (v691.i32[0] - 1) & v612;
    }
    v1139 = *(uint64_t ***)(*v613 + 8 * v692);
    if (!v1139 || (v1140 = *v1139) == 0)
    {
LABEL_1637:
      v694 = 0;
      goto LABEL_973;
    }
    if (_Q0.u32[0] < 2uLL)
    {
      v1141 = *(_QWORD *)&v691 - 1;
      while (1)
      {
        v1143 = v1140[1];
        if (v1143 == v612)
        {
          if (*((_DWORD *)v1140 + 4) == (_DWORD)v612)
            goto LABEL_1658;
        }
        else if ((v1143 & v1141) != v692)
        {
          goto LABEL_1637;
        }
        v1140 = (uint64_t *)*v1140;
        if (!v1140)
          goto LABEL_1656;
      }
    }
    while (2)
    {
      v1142 = v1140[1];
      if (v1142 != v612)
      {
        if (v1142 >= *(_QWORD *)&v691)
          v1142 %= *(_QWORD *)&v691;
        if (v1142 != v692)
          goto LABEL_1637;
LABEL_1627:
        v1140 = (uint64_t *)*v1140;
        if (!v1140)
        {
LABEL_1656:
          v695 = 255.0;
          v694 = 0;
          goto LABEL_982;
        }
        continue;
      }
      break;
    }
    if (*((_DWORD *)v1140 + 4) != (_DWORD)v612)
      goto LABEL_1627;
LABEL_1658:
    v694 = v1140[3];
LABEL_973:
    v695 = 255.0;
LABEL_982:
    v700 = v1226;
    v701 = *(_QWORD *)(*(_QWORD *)&v1226[4].f64[0] + 272);
    if (!v701)
    {
      v702 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v702->__shared_owners_ = 0;
      v703 = (unint64_t *)&v702->__shared_owners_;
      v702->__shared_weak_owners_ = 0;
      v702->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29E8;
      v704 = ggl::BufferData::BufferData((uint64_t)&v702[1], qword_1EE554618, 2, 1, 6, 1);
      v702[9].__shared_owners_ = (uint64_t)ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
      v702[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9C70;
      v705 = v1226[4].f64[0];
      *(_QWORD *)(*(_QWORD *)&v705 + 272) = v704;
      *(_QWORD *)(*(_QWORD *)&v705 + 280) = 0;
      v706 = v1226[10].f64[0];
      do
        v707 = __ldxr(v703);
      while (__stxr(v707 + 1, v703));
      v708 = *(std::__shared_weak_count **)(*(_QWORD *)&v706 + 280);
      *(_QWORD *)(*(_QWORD *)&v706 + 272) = v704;
      *(_QWORD *)(*(_QWORD *)&v706 + 280) = v702;
      if (v708)
      {
        v709 = (unint64_t *)&v708->__shared_owners_;
        do
          v710 = __ldaxr(v709);
        while (__stlxr(v710 - 1, v709));
        if (!v710)
        {
          ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
          std::__shared_weak_count::__release_weak(v708);
        }
      }
      do
        v711 = __ldaxr(v703);
      while (__stlxr(v711 - 1, v703));
      if (!v711)
      {
        ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
        std::__shared_weak_count::__release_weak(v702);
      }
      v700 = v1226;
      v701 = *(_QWORD *)(*(_QWORD *)&v1226[4].f64[0] + 272);
    }
    v712 = *(_QWORD *)(v701 + 8);
    **(float **)(v701 + 72) = v695;
    *(_QWORD *)(*(_QWORD *)&v700[6].f64[0] + 56) = v694;
    *(_QWORD *)(*(_QWORD *)&v700[6].f64[0] + 64) = v690;
    if (*(_QWORD *)(v701 + 64) > v712)
      v712 = *(_QWORD *)(v701 + 64);
    *(_QWORD *)(v701 + 56) = 0;
    *(_QWORD *)(v701 + 64) = v712;
    v616 = (_QWORD *)v700->f64;
    if (!updated)
    {
LABEL_997:
      v713 = 0;
      *(_QWORD *)(v616[12] + 80) = 0;
      goto LABEL_1046;
    }
LABEL_827:
    v622 = *(_QWORD **)(v1287 + 1304);
    if (!v1290
      || (v623 = (int8x8_t)v622[1], !*(_QWORD *)&v623)
      || ((*(int8x8_t *)_Q0.i8 = vcnt_s8(v623), _Q0.i16[0] = vaddlv_u8(*(uint8x8_t *)_Q0.i8), _Q0.u32[0] > 1uLL)
        ? (*(_QWORD *)&v623 <= 0x99uLL
         ? (v624 = 0x99uLL % *(_QWORD *)&v623)
         : (v624 = 153))
        : (v624 = (v623.i32[0] - 1) & 0x99),
          (v677 = *(uint64_t ***)(*v622 + 8 * v624)) == 0 || (v678 = *v677) == 0))
    {
LABEL_999:
      v715 = a1 + 3248;
      v716 = *v1187;
      if (!*v1187)
        goto LABEL_1009;
      do
      {
        v717 = *(_DWORD *)(v716 + 32);
        v718 = v717 >= 0x99;
        if (v717 >= 0x99)
          v719 = (uint64_t *)v716;
        else
          v719 = (uint64_t *)(v716 + 8);
        if (v718)
          v715 = v716;
        v716 = *v719;
      }
      while (*v719);
      if ((uint64_t *)v715 != v1187 && *(_DWORD *)(v715 + 32) <= 0x99u)
        v714 = *(_QWORD *)(v715 + 40);
      else
LABEL_1009:
        v714 = 0;
      goto LABEL_1010;
    }
    if (_Q0.u32[0] < 2uLL)
    {
      v679 = *(_QWORD *)&v623 - 1;
      while (1)
      {
        v681 = v678[1];
        if (v681 == 153)
        {
          if (*((_DWORD *)v678 + 4) == 153)
            goto LABEL_998;
        }
        else if ((v681 & v679) != v624)
        {
          goto LABEL_999;
        }
        v678 = (uint64_t *)*v678;
        if (!v678)
          goto LABEL_999;
      }
    }
    while (2)
    {
      v680 = v678[1];
      if (v680 != 153)
      {
        if (v680 >= *(_QWORD *)&v623)
          v680 %= *(_QWORD *)&v623;
        if (v680 != v624)
          goto LABEL_999;
        goto LABEL_937;
      }
      if (*((_DWORD *)v678 + 4) != 153)
      {
LABEL_937:
        v678 = (uint64_t *)*v678;
        if (!v678)
          goto LABEL_999;
        continue;
      }
      break;
    }
LABEL_998:
    v714 = v678[3];
    if (!v714)
      goto LABEL_999;
LABEL_1010:
    *(_QWORD *)(v616[12] + 80) = v714;
    if (!v1289
      || (v720 = (int8x8_t)v622[1], !*(_QWORD *)&v720)
      || ((*(int8x8_t *)_Q0.i8 = vcnt_s8(v720), _Q0.i16[0] = vaddlv_u8(*(uint8x8_t *)_Q0.i8), _Q0.u32[0] > 1uLL)
        ? (*(_QWORD *)&v720 <= 0x9AuLL
         ? (v721 = 0x9AuLL % *(_QWORD *)&v720)
         : (v721 = 154))
        : (v721 = (v720.i32[0] - 1) & 0x9ALL),
          (v722 = *(uint64_t ***)(*v622 + 8 * v721)) == 0 || (v723 = *v722) == 0))
    {
LABEL_1035:
      v727 = a1 + 3248;
      v728 = *v1187;
      if (!*v1187)
        goto LABEL_1045;
      do
      {
        v729 = *(_DWORD *)(v728 + 32);
        v730 = v729 >= 0x9A;
        if (v729 >= 0x9A)
          v731 = (uint64_t *)v728;
        else
          v731 = (uint64_t *)(v728 + 8);
        if (v730)
          v727 = v728;
        v728 = *v731;
      }
      while (*v731);
      if ((uint64_t *)v727 != v1187 && *(_DWORD *)(v727 + 32) <= 0x9Au)
        v713 = *(_QWORD *)(v727 + 40);
      else
LABEL_1045:
        v713 = 0;
      goto LABEL_1046;
    }
    if (_Q0.u32[0] < 2uLL)
    {
      v724 = *(_QWORD *)&v720 - 1;
      while (1)
      {
        v726 = v723[1];
        if (v726 == 154)
        {
          if (*((_DWORD *)v723 + 4) == 154)
            goto LABEL_1034;
        }
        else if ((v726 & v724) != v721)
        {
          goto LABEL_1035;
        }
        v723 = (uint64_t *)*v723;
        if (!v723)
          goto LABEL_1035;
      }
    }
    while (2)
    {
      v725 = v723[1];
      if (v725 != 154)
      {
        if (v725 >= *(_QWORD *)&v720)
          v725 %= *(_QWORD *)&v720;
        if (v725 != v721)
          goto LABEL_1035;
        goto LABEL_1023;
      }
      if (*((_DWORD *)v723 + 4) != 154)
      {
LABEL_1023:
        v723 = (uint64_t *)*v723;
        if (!v723)
          goto LABEL_1035;
        continue;
      }
      break;
    }
LABEL_1034:
    v713 = v723[3];
    if (!v713)
      goto LABEL_1035;
LABEL_1046:
    *(_QWORD *)(v616[12] + 72) = v713;
    if (v1200)
    {
      v1240 = (std::__shared_weak_count *)v1263.i64[1];
      if (v1263.i64[1])
      {
        v732 = (unint64_t *)(v1263.i64[1] + 8);
        do
          v733 = __ldxr(v732);
        while (__stxr(v733 + 1, v732));
      }
      v734 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_3::operator()(v1283, &v1262, (uint64_t)v1191);
      v735 = v616[8];
      *(_QWORD *)(v735 + 352) = v734;
      *(_QWORD *)(v735 + 360) = 0;
      v736 = v616[20];
      v737 = *(std::__shared_weak_count **)(v736 + 360);
      *(_QWORD *)(v736 + 352) = 0;
      *(_QWORD *)(v736 + 360) = 0;
      if (v737)
      {
        v738 = (unint64_t *)&v737->__shared_owners_;
        do
          v739 = __ldaxr(v738);
        while (__stlxr(v739 - 1, v738));
        if (!v739)
        {
          ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
          std::__shared_weak_count::__release_weak(v737);
        }
      }
      if (v1240)
      {
        v740 = (unint64_t *)&v1240->__shared_owners_;
        do
          v741 = __ldaxr(v740);
        while (__stlxr(v741 - 1, v740));
        if (!v741)
        {
          ((void (*)(std::__shared_weak_count *))v1240->__on_zero_shared)(v1240);
          std::__shared_weak_count::__release_weak(v1240);
        }
      }
      md::LayoutContext::frameState(a2);
      md::SharedResource::addFrameRef(v1191, *(_QWORD *)(v742 + 624));
      v616 = (_QWORD *)v1226->f64;
      *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 88) = *((_QWORD *)v1191 + 4);
      if (v1192)
      {
        v1239 = (std::__shared_weak_count *)v1263.i64[1];
        if (v1263.i64[1])
        {
          v743 = (unint64_t *)(v1263.i64[1] + 8);
          do
            v744 = __ldxr(v743);
          while (__stxr(v744 + 1, v743));
        }
        v745 = md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_3::operator()(v1283, &v1262, (uint64_t)v1175);
        v746 = v1226[4].f64[0];
        *(_QWORD *)(*(_QWORD *)&v746 + 368) = v745;
        *(_QWORD *)(*(_QWORD *)&v746 + 376) = 0;
        v747 = v1226[10].f64[0];
        v748 = *(std::__shared_weak_count **)(*(_QWORD *)&v747 + 376);
        *(_QWORD *)(*(_QWORD *)&v747 + 368) = 0;
        *(_QWORD *)(*(_QWORD *)&v747 + 376) = 0;
        if (v748)
        {
          v749 = (unint64_t *)&v748->__shared_owners_;
          do
            v750 = __ldaxr(v749);
          while (__stlxr(v750 - 1, v749));
          if (!v750)
          {
            ((void (*)(std::__shared_weak_count *))v748->__on_zero_shared)(v748);
            std::__shared_weak_count::__release_weak(v748);
          }
        }
        if (v1239)
        {
          v751 = (unint64_t *)&v1239->__shared_owners_;
          do
            v752 = __ldaxr(v751);
          while (__stlxr(v752 - 1, v751));
          if (!v752)
          {
            ((void (*)(std::__shared_weak_count *))v1239->__on_zero_shared)(v1239);
            std::__shared_weak_count::__release_weak(v1239);
          }
        }
        md::LayoutContext::frameState(a2);
        md::SharedResource::addFrameRef(v1175, *(_QWORD *)(v753 + 624));
        v616 = (_QWORD *)v1226->f64;
        *(_QWORD *)(*(_QWORD *)&v1226[6].f64[0] + 96) = *((_QWORD *)v1175 + 4);
        v754 = v1226[4].f64[0];
        *(_QWORD *)(*(_QWORD *)&v754 + 392) = 0;
        v755 = *(_QWORD *)(a1 + 2032);
        *(_QWORD *)(*(_QWORD *)&v754 + 384) = v755;
        v756 = v1226[10].f64[0];
        v757 = *(_QWORD *)(a1 + 2040);
        if (v757)
        {
          v758 = (unint64_t *)(v757 + 8);
          do
            v759 = __ldxr(v758);
          while (__stxr(v759 + 1, v758));
        }
        v760 = *(std::__shared_weak_count **)(*(_QWORD *)&v756 + 392);
        *(_QWORD *)(*(_QWORD *)&v756 + 384) = v755;
        *(_QWORD *)(*(_QWORD *)&v756 + 392) = v757;
        if (v760)
        {
          v761 = (unint64_t *)&v760->__shared_owners_;
          do
            v762 = __ldaxr(v761);
          while (__stlxr(v762 - 1, v761));
LABEL_1094:
          if (!v762)
          {
            ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
            std::__shared_weak_count::__release_weak(v760);
          }
        }
      }
    }
    else
    {
      v763 = v616[8];
      *(_QWORD *)(v763 + 352) = 0;
      *(_QWORD *)(v763 + 360) = 0;
      v764 = v616[20];
      v765 = *(std::__shared_weak_count **)(v764 + 360);
      *(_QWORD *)(v764 + 352) = 0;
      *(_QWORD *)(v764 + 360) = 0;
      if (v765)
      {
        v766 = (unint64_t *)&v765->__shared_owners_;
        do
          v767 = __ldaxr(v766);
        while (__stlxr(v767 - 1, v766));
        if (!v767)
        {
          ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
          std::__shared_weak_count::__release_weak(v765);
        }
      }
      *(_QWORD *)(v616[12] + 88) = 0;
      v768 = v616[8];
      *(_QWORD *)(v768 + 368) = 0;
      *(_QWORD *)(v768 + 376) = 0;
      v769 = v616[20];
      v770 = *(std::__shared_weak_count **)(v769 + 376);
      *(_QWORD *)(v769 + 368) = 0;
      *(_QWORD *)(v769 + 376) = 0;
      if (v770)
      {
        v771 = (unint64_t *)&v770->__shared_owners_;
        do
          v772 = __ldaxr(v771);
        while (__stlxr(v772 - 1, v771));
        if (!v772)
        {
          ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
          std::__shared_weak_count::__release_weak(v770);
        }
      }
      *(_QWORD *)(v616[12] + 96) = 0;
      v773 = v616[8];
      *(_QWORD *)(v773 + 384) = 0;
      *(_QWORD *)(v773 + 392) = 0;
      v774 = v616[20];
      v760 = *(std::__shared_weak_count **)(v774 + 392);
      *(_QWORD *)(v774 + 384) = 0;
      *(_QWORD *)(v774 + 392) = 0;
      if (v760)
      {
        v775 = (unint64_t *)&v760->__shared_owners_;
        do
          v762 = __ldaxr(v775);
        while (__stlxr(v762 - 1, v775));
        goto LABEL_1094;
      }
    }
    v776 = *(float *)(v1223 + 20);
    if (v776 < 0.25)
      v777 = 2;
    else
      v777 = 0;
    if (v776 < 0.25)
      v778 = 2;
    else
      v778 = 1;
    if (*(_BYTE *)(v283 + 145) == 1 && *(_BYTE *)(a1 + 3560) == 1)
      v780 = v778;
    else
      v780 = v777;
    if (*(_BYTE *)(v616[2] + 309))
    {
      v781 = (uint64_t *)(a1 + 1848);
      if (v780)
      {
        if (v780 == 2)
          v781 = (uint64_t *)(a1 + 1880);
        else
          v781 = (uint64_t *)(a1 + 1864);
      }
      v782 = v616[8];
      *(_QWORD *)(v782 + 296) = 0;
      v783 = *v781;
      *(_QWORD *)(v782 + 288) = *v781;
      v784 = v616[20];
      v785 = v781[1];
      if (v785)
      {
        v786 = (unint64_t *)(v785 + 8);
        do
          v787 = __ldxr(v786);
        while (__stxr(v787 + 1, v786));
      }
      v788 = *(std::__shared_weak_count **)(v784 + 296);
      *(_QWORD *)(v784 + 288) = v783;
      *(_QWORD *)(v784 + 296) = v785;
      if (v788)
      {
        v789 = (unint64_t *)&v788->__shared_owners_;
        do
          v790 = __ldaxr(v789);
        while (__stlxr(v790 - 1, v789));
        if (!v790)
        {
          ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
          std::__shared_weak_count::__release_weak(v788);
        }
      }
    }
    if (*(_BYTE *)(v616[2] + 320))
    {
      v791 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1912));
      _S3 = *(_DWORD *)(a3 + 68);
      *(double *)_Q1.i64 = fmax(*(double *)(v1212 + 32) * 0.5, 250.0);
      v793 = v791[1];
      v794 = (_WORD *)v791[9];
      *(double *)_Q0.i64 = *(double *)_Q1.i64
                         * (float)((float)(*(float *)(a3 + 64) * *(float *)(*(_QWORD *)(a5 + 8) + 624))
                                 * fmaxf((float)(*(float *)(a3 + 20) * 0.125) + -0.875, 0.0));
      __asm
      {
        FCVT            H0, D0
        FCVT            H1, S3
      }
      if (!*(_BYTE *)(a3 + 7))
        *(float *)_Q1.i32 = 0.0;
      *v794 = _Q0.i16[0];
      v794[1] = _Q1.i16[0];
      if (v791[8] > v793)
        v793 = v791[8];
      v791[7] = 0;
      v791[8] = v793;
      v616 = (_QWORD *)v1226->f64;
      v795 = v1226[4].f64[0];
      *(_QWORD *)(*(_QWORD *)&v795 + 320) = v791;
      *(_QWORD *)(*(_QWORD *)&v795 + 328) = 0;
      v796 = v1226[10].f64[0];
      v797 = *(std::__shared_weak_count **)(*(_QWORD *)&v796 + 328);
      *(_QWORD *)(*(_QWORD *)&v796 + 320) = 0;
      *(_QWORD *)(*(_QWORD *)&v796 + 328) = 0;
      if (v797)
      {
        v798 = (unint64_t *)&v797->__shared_owners_;
        do
          v799 = __ldaxr(v798);
        while (__stlxr(v799 - 1, v798));
        if (!v799)
        {
          ((void (*)(std::__shared_weak_count *))v797->__on_zero_shared)(v797);
          std::__shared_weak_count::__release_weak(v797);
        }
      }
    }
    if (v1258[0])
    {
      _Q0.i64[0] = v1259;
      _Q0.i32[2] = v1260;
    }
    else
    {
      _Q0.i32[0] = 0;
      _Q1.i8[0] = v1255[0];
      v800 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(_Q1, _Q0), 0);
      _Q1.i64[0] = v1256;
      _Q1.i32[2] = v1257;
      _Q0 = vbslq_s8(v800, (int8x16_t)0, _Q1);
    }
    if (*(_BYTE *)(v616[2] + 327))
    {
      *(int8x16_t *)v1228 = _Q0;
      v801 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1928));
      v802 = v801[1];
      v803 = v801[9];
      v804 = vcvt_f16_f32(*(float32x4_t *)v1228);
      *(_WORD *)(v803 + 4) = v804.i16[2];
      *(_DWORD *)v803 = v804.i32[0];
      if (v801[8] > v802)
        v802 = v801[8];
      v801[7] = 0;
      v801[8] = v802;
      v805 = v616[8];
      *(_QWORD *)(v805 + 304) = v801;
      *(_QWORD *)(v805 + 312) = 0;
      v806 = v616[20];
      v807 = *(std::__shared_weak_count **)(v806 + 312);
      *(_QWORD *)(v806 + 304) = 0;
      *(_QWORD *)(v806 + 312) = 0;
      if (v807)
      {
        v808 = (unint64_t *)&v807->__shared_owners_;
        do
          v809 = __ldaxr(v808);
        while (__stlxr(v809 - 1, v808));
        if (!v809)
        {
          ((void (*)(std::__shared_weak_count *))v807->__on_zero_shared)(v807);
          std::__shared_weak_count::__release_weak(v807);
        }
      }
    }
    (*(void (**)(float32x4_t *__return_ptr, float))(*(_QWORD *)*v282 + 504))(v1295, *v1237);
    if (v1295[0].i8[0])
      _S8 = v1295[0].f32[1];
    else
      _S8 = 1.0;
    if ((_BYTE)v1261)
      _S9 = *((float *)&v1261 + 1);
    else
      _S9 = 0.0;
    if (!*(_BYTE *)(v616[2] + 326))
      goto LABEL_1158;
    v812 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>(v1170, _S8, _S9);
    if (v812)
    {
      v813 = (_QWORD *)*((_QWORD *)v812 + 3);
    }
    else
    {
      v814 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1968));
      v813 = v814;
      v815 = v814[1];
      v816 = (_WORD *)v814[9];
      __asm
      {
        FCVT            H0, S8
        FCVT            H1, S9
      }
      *v816 = _H0;
      v816[1] = _H1;
      if (v814[8] > v815)
        v815 = v814[8];
      v814[7] = 0;
      v814[8] = v815;
      std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,md::DaVinciGroundRenderLayer::ShinyStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *&>(v1170, LODWORD(_S8) | ((unint64_t)LODWORD(_S9) << 32), (uint64_t)v814, _S8, _S9);
    }
    v819 = v616[8];
    *(_QWORD *)(v819 + 336) = v813;
    *(_QWORD *)(v819 + 344) = 0;
    v820 = v616[20];
    v821 = *(std::__shared_weak_count **)(v820 + 344);
    *(_QWORD *)(v820 + 336) = 0;
    *(_QWORD *)(v820 + 344) = 0;
    if (!v821)
      goto LABEL_1158;
    v822 = (unint64_t *)&v821->__shared_owners_;
    do
      v823 = __ldaxr(v822);
    while (__stlxr(v823 - 1, v822));
    if (!v823)
    {
      ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
      std::__shared_weak_count::__release_weak(v821);
      if (v1199)
      {
LABEL_1159:
        *(_QWORD *)(v616[12] + 32) = v1169;
        if (v1270[0])
        {
          *(_QWORD *)&v824 = v1271;
          *((_QWORD *)&v824 + 1) = __PAIR64__(v1163.u32[3], v1272);
        }
        else
        {
          v824 = v1269;
        }
        *(_OWORD *)v1229 = v824;
        *(_OWORD *)buf = v824;
        buf[16] = 1;
        v825 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>(v1166, (float *)buf);
        if (v825)
        {
          v826 = *(_QWORD *)(v825 + 40);
        }
        else
        {
          v827 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1920));
          v826 = v827;
          __p = 0uLL;
          v828 = *(_QWORD *)(v827 + 8);
          if (v828)
            v829 = *(float16x4_t **)(v827 + 72);
          else
            v829 = 0;
          v830 = *(float32x4_t *)v1229;
          v831.f64[0] = 0.0;
          *(_QWORD *)&v831.f64[1] = v827;
          *(float64x2_t *)v1230 = v831;
          __p = v831;
          v1309.i64[0] = 0;
          v1309.i64[1] = v828;
          *(_QWORD *)&v1310.f64[1] = v829;
          LOWORD(v1310.f64[0]) = 1;
          *v829 = vcvt_f16_f32(v830);
          std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *&>(v1166, (unsigned int *)buf, (uint64_t)buf, v827);
          if (v828)
          {
            if (v1230[0] && *((_BYTE *)v1230[1] + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v1230[0] + 64))();
            v832 = *((_QWORD *)v1230[1] + 8);
            if (v832 <= v828)
              v832 = v828;
            *((_QWORD *)v1230[1] + 7) = 0;
            *((_QWORD *)v1230[1] + 8) = v832;
          }
        }
        v833 = v616[8];
        *(_QWORD *)(v833 + 464) = v826;
        *(_QWORD *)(v833 + 472) = 0;
        v834 = v616[20];
        v835 = *(std::__shared_weak_count **)(v834 + 472);
        *(_QWORD *)(v834 + 464) = 0;
        *(_QWORD *)(v834 + 472) = 0;
        if (v835)
        {
          v836 = (unint64_t *)&v835->__shared_owners_;
          do
            v837 = __ldaxr(v836);
          while (__stlxr(v837 - 1, v836));
          if (!v837)
          {
            ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
            std::__shared_weak_count::__release_weak(v835);
          }
        }
      }
    }
    else
    {
LABEL_1158:
      if (v1199)
        goto LABEL_1159;
    }
    if (*(unsigned __int8 *)(*v282 + 8) - 3 <= 1 && *(_BYTE *)(v616[2] + 329))
    {
      v838 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1952));
      v839 = v616[8];
      *(_QWORD *)(v839 + 64) = v838;
      *(_QWORD *)(v839 + 72) = 0;
      v840 = v616[20];
      v841 = *(std::__shared_weak_count **)(v840 + 72);
      *(_QWORD *)(v840 + 64) = 0;
      *(_QWORD *)(v840 + 72) = 0;
      if (v841)
      {
        v842 = (unint64_t *)&v841->__shared_owners_;
        do
          v843 = __ldaxr(v842);
        while (__stlxr(v843 - 1, v842));
        if (!v843)
        {
          ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
          std::__shared_weak_count::__release_weak(v841);
        }
      }
    }
    else
    {
      v838 = 0;
    }
    v1220 = "standard material renderable - ground non compressed";
    if (v838)
      goto LABEL_1431;
LABEL_1456:
    memset(&buf[4], 0, 32);
    v1234 = v616;
    if (*(_BYTE *)(v283 + 176) && (v1021 = *(_QWORD *)(v283 + 152)) != 0 && *(_BYTE *)(v283 + 145) == 4)
    {
      v1022 = *(std::__shared_weak_count **)(v283 + 160);
      if (v1022)
      {
        v1023 = (unint64_t *)&v1022->__shared_owners_;
        do
          v1024 = __ldxr(v1023);
        while (__stxr(v1024 + 1, v1023));
      }
      if (*(_BYTE *)(v283 + 193))
      {
        if (*(_DWORD *)(a1 + 3188) + *(unsigned __int8 *)(v283 + 192) >= 0xFF)
          v1025 = 255;
        else
          v1025 = *(_DWORD *)(a1 + 3188) + *(unsigned __int8 *)(v283 + 192);
        *(_BYTE *)(v1021 + 208) = 1;
        if (!v1022)
        {
LABEL_1478:
          v1026 = v1216;
          goto LABEL_1480;
        }
      }
      else
      {
        v1025 = 0;
        if (!v1022)
          goto LABEL_1478;
      }
      v1028 = (unint64_t *)&v1022->__shared_owners_;
      do
        v1029 = __ldaxr(v1028);
      while (__stlxr(v1029 - 1, v1028));
      if (v1029)
        goto LABEL_1478;
      ((void (*)(std::__shared_weak_count *))v1022->__on_zero_shared)(v1022);
      std::__shared_weak_count::__release_weak(v1022);
      v1026 = v1216;
    }
    else
    {
      v1026 = v1216;
      if (*(_BYTE *)(v283 + 145) == 3)
        v1027 = v1216;
      else
        v1027 = 1;
      if (v1027 == 1)
      {
        v1021 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(a1 + 2992), *(unsigned __int8 *)(*(_QWORD *)(v283 + 216) + 32), v1216, 1, 0, 1, (*(unsigned __int8 *)(v283 + 400) | *(unsigned __int8 *)(a3 + 1)) != 0, 3);
        v1025 = 0;
      }
      else
      {
        v1025 = 0;
        v1021 = a1 + 2776;
      }
    }
LABEL_1480:
    v1030 = *(unsigned int *)(*(_QWORD *)(v283 + 32) + 16);
    (*(void (**)(int8x16_t *__return_ptr, float))(**(_QWORD **)(v283 + 224) + 264))(&v1293, *v1237);
    if (*(_BYTE *)(v283 + 188))
    {
      if (!v1293.i8[0])
        v1293.i8[0] = 1;
      v1293.i32[1] = *(_DWORD *)(v283 + 184);
    }
    v1031 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v283 + 16))(v283);
    if (v1293.i8[0])
    {
      if (v1026)
        v1032 = 1;
      else
        v1032 = 2;
      v1033 = (v1032 + 2 * v1293.i32[1]);
    }
    else if (v1026)
    {
      v1033 = 0;
    }
    else
    {
      v1033 = 4294967294;
    }
    if (*(_BYTE *)(v283 + 145) == 3)
      v1034 = v1026;
    else
      v1034 = 1;
    if ((v1034 & 1) == 0)
    {
      memset(&v1295[0].i32[1], 0, 32);
      v1217 = v1025;
      v1215 = v1033;
      if (*(_BYTE *)v1223)
        v1035 = *(_BYTE *)(v283 + 147) != 0;
      else
        v1035 = 1;
      v1036 = *(unsigned __int8 *)(*v282 + 8);
      v1037 = *(unsigned __int8 *)(a3 + 6);
      v1038 = *(unsigned __int8 *)(a3 + 9);
      v1039 = (float64x2_t *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1672));
      HIBYTE(v1156) = v1198 == 1;
      LOBYTE(v1156) = 0;
      HIBYTE(v1151) = a10;
      LOBYTE(v1151) = 0;
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)&__p, a1 + 808, v1197, 0, v1036 == 3, v1036 == 4, v1037 != 0, 0, v1151, v1035, v1156, v1038 != 0, 0, v1196, 0, 1, 1u, 0, 0,
        0,
        0,
        0,
        v1208 == 255,
        v1193,
        v1195,
        0,
        0,
        0,
        0);
      v1040 = __p;
      if (*(_QWORD *)&__p.f64[1])
      {
        v1041 = (unint64_t *)(*(_QWORD *)&__p.f64[1] + 8);
        do
          v1042 = __ldxr(v1041);
        while (__stxr(v1042 + 1, v1041));
      }
      if (*(_QWORD *)&v1040.f64[0] && **(_QWORD **)(*(_QWORD *)&v1040.f64[0] + 40) == *(_QWORD *)&v1039->f64[1])
      {
        v1046 = v1039[1].f64[0];
        if (v1046 != 0.0 && *(_QWORD *)&v1046 != *(_QWORD *)&v1040.f64[0])
          ggl::PipelineSetup::resetData((uint64_t)v1039);
        if (*(_QWORD *)&v1040.f64[1])
        {
          v1047 = (unint64_t *)(*(_QWORD *)&v1040.f64[1] + 8);
          do
            v1048 = __ldxr(v1047);
          while (__stxr(v1048 + 1, v1047));
        }
        v1043 = *(std::__shared_weak_count **)&v1039[1].f64[1];
        v1039[1] = v1040;
        if (v1043)
        {
          v1049 = (unint64_t *)&v1043->__shared_owners_;
          do
            v1045 = __ldaxr(v1049);
          while (__stlxr(v1045 - 1, v1049));
          goto LABEL_1517;
        }
      }
      else
      {
        v1043 = *(std::__shared_weak_count **)&v1039[1].f64[1];
        v1039[1].f64[0] = 0.0;
        v1039[1].f64[1] = 0.0;
        if (v1043)
        {
          v1044 = (unint64_t *)&v1043->__shared_owners_;
          do
            v1045 = __ldaxr(v1044);
          while (__stlxr(v1045 - 1, v1044));
LABEL_1517:
          if (!v1045)
          {
            ((void (*)(std::__shared_weak_count *))v1043->__on_zero_shared)(v1043);
            std::__shared_weak_count::__release_weak(v1043);
          }
        }
      }
      if (*(_QWORD *)&v1040.f64[1])
      {
        v1050 = (unint64_t *)(*(_QWORD *)&v1040.f64[1] + 8);
        do
          v1051 = __ldaxr(v1050);
        while (__stlxr(v1051 - 1, v1050));
        if (!v1051)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&v1040.f64[1] + 16))(*(_QWORD *)&v1040.f64[1]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1040.f64[1]);
        }
      }
      v1052 = *(std::__shared_weak_count **)&__p.f64[1];
      if (*(_QWORD *)&__p.f64[1])
      {
        v1053 = (unint64_t *)(*(_QWORD *)&__p.f64[1] + 8);
        do
          v1054 = __ldaxr(v1053);
        while (__stlxr(v1054 - 1, v1053));
        if (!v1054)
        {
          ((void (*)(std::__shared_weak_count *))v1052->__on_zero_shared)(v1052);
          std::__shared_weak_count::__release_weak(v1052);
        }
      }
      v1055 = *(uint64_t **)(v283 + 32);
      v1056 = v1039[2].f64[0];
      *(_QWORD *)(*(_QWORD *)&v1056 + 8) = 0;
      v1057 = *v1055;
      **(_QWORD **)&v1056 = *v1055;
      v1058 = v1039[8].f64[0];
      v1059 = v1055[1];
      if (v1059)
      {
        v1060 = (unint64_t *)(v1059 + 8);
        do
          v1061 = __ldxr(v1060);
        while (__stxr(v1061 + 1, v1060));
      }
      v1062 = *(std::__shared_weak_count **)(*(_QWORD *)&v1058 + 8);
      **(_QWORD **)&v1058 = v1057;
      *(_QWORD *)(*(_QWORD *)&v1058 + 8) = v1059;
      if (v1062)
      {
        v1063 = (unint64_t *)&v1062->__shared_owners_;
        do
          v1064 = __ldaxr(v1063);
        while (__stlxr(v1064 - 1, v1063));
        if (!v1064)
        {
          ((void (*)(std::__shared_weak_count *))v1062->__on_zero_shared)(v1062);
          std::__shared_weak_count::__release_weak(v1062);
        }
      }
      v1065 = v1039[4].f64[0];
      *(_QWORD *)(*(_QWORD *)&v1065 + 8) = 0;
      v1066 = *(_QWORD *)(a5 + 216);
      **(_QWORD **)&v1065 = v1066;
      v1067 = v1039[10].f64[0];
      v1068 = *(_QWORD *)(a5 + 224);
      if (v1068)
      {
        v1069 = (unint64_t *)(v1068 + 8);
        do
          v1070 = __ldxr(v1069);
        while (__stxr(v1070 + 1, v1069));
      }
      v1071 = *(std::__shared_weak_count **)(*(_QWORD *)&v1067 + 8);
      **(_QWORD **)&v1067 = v1066;
      *(_QWORD *)(*(_QWORD *)&v1067 + 8) = v1068;
      if (v1071)
      {
        v1072 = (unint64_t *)&v1071->__shared_owners_;
        do
          v1073 = __ldaxr(v1072);
        while (__stlxr(v1073 - 1, v1072));
        if (!v1073)
        {
          ((void (*)(std::__shared_weak_count *))v1071->__on_zero_shared)(v1071);
          std::__shared_weak_count::__release_weak(v1071);
        }
      }
      v1074 = v1039[4].f64[0];
      *(_QWORD *)(*(_QWORD *)&v1074 + 24) = 0;
      v1075 = *(_QWORD *)(a5 + 232);
      *(_QWORD *)(*(_QWORD *)&v1074 + 16) = v1075;
      v1076 = v1039[10].f64[0];
      v1077 = *(_QWORD *)(a5 + 240);
      if (v1077)
      {
        v1078 = (unint64_t *)(v1077 + 8);
        do
          v1079 = __ldxr(v1078);
        while (__stxr(v1079 + 1, v1078));
      }
      v1080 = *(std::__shared_weak_count **)(*(_QWORD *)&v1076 + 24);
      *(_QWORD *)(*(_QWORD *)&v1076 + 16) = v1075;
      *(_QWORD *)(*(_QWORD *)&v1076 + 24) = v1077;
      if (v1080)
      {
        v1081 = (unint64_t *)&v1080->__shared_owners_;
        do
          v1082 = __ldaxr(v1081);
        while (__stlxr(v1082 - 1, v1081));
        if (!v1082)
        {
          ((void (*)(std::__shared_weak_count *))v1080->__on_zero_shared)(v1080);
          std::__shared_weak_count::__release_weak(v1080);
        }
      }
      v1083 = v1039[4].f64[0];
      v1084 = v1280;
      v1085 = v1281;
      *(_QWORD *)(*(_QWORD *)&v1083 + 48) = v1280;
      *(_QWORD *)(*(_QWORD *)&v1083 + 56) = 0;
      v1086 = v1039[10].f64[0];
      if (v1085)
      {
        v1087 = (unint64_t *)&v1085->__shared_owners_;
        do
          v1088 = __ldxr(v1087);
        while (__stxr(v1088 + 1, v1087));
      }
      v1089 = *(std::__shared_weak_count **)(*(_QWORD *)&v1086 + 56);
      *(_QWORD *)(*(_QWORD *)&v1086 + 48) = v1084;
      *(_QWORD *)(*(_QWORD *)&v1086 + 56) = v1085;
      if (v1089)
      {
        v1090 = (unint64_t *)&v1089->__shared_owners_;
        do
          v1091 = __ldaxr(v1090);
        while (__stlxr(v1091 - 1, v1090));
        if (!v1091)
        {
          ((void (*)(std::__shared_weak_count *))v1089->__on_zero_shared)(v1089);
          std::__shared_weak_count::__release_weak(v1089);
        }
      }
      if (v1198 == 1)
      {
        v1092 = **(_QWORD **)(v283 + 216);
        v1095 = *(_QWORD **)(v1092 + 120);
        v1094 = (_QWORD *)(v1092 + 120);
        v1093 = v1095;
        if (v1095)
        {
          v1096 = v1094;
          v1097 = v1093;
          do
          {
            v1098 = v1097[4];
            v1099 = v1098 >= 2;
            if (v1098 >= 2)
              v1100 = v1097;
            else
              v1100 = v1097 + 1;
            if (v1099)
              v1096 = v1097;
            v1097 = (_QWORD *)*v1100;
          }
          while (*v1100);
          if (v1096 != v1094 && v1096[4] <= 2uLL)
          {
            while (1)
            {
              while (1)
              {
                v1101 = v1093[4];
                if (v1101 < 3)
                  break;
                v1093 = (_QWORD *)*v1093;
                if (!v1093)
                  goto LABEL_1662;
              }
              if (v1101 == 2)
                break;
              v1093 = (_QWORD *)v1093[1];
              if (!v1093)
LABEL_1662:
                abort();
            }
            v1102 = v1093[5];
            v1103 = (std::__shared_weak_count *)v1093[6];
            if (v1103)
            {
              v1104 = (unint64_t *)&v1103->__shared_owners_;
              do
                v1105 = __ldxr(v1104);
              while (__stxr(v1105 + 1, v1104));
            }
            if (v1102)
              ggl::DaVinci::GroundDepthPipelineSetup::setElevationsDeviceData(*(_QWORD *)&v1039[2].f64[0], *(_QWORD *)&v1039[8].f64[0], v1102);
            if (v1103)
            {
              v1106 = (unint64_t *)&v1103->__shared_owners_;
              do
                v1107 = __ldaxr(v1106);
              while (__stlxr(v1107 - 1, v1106));
              if (!v1107)
              {
                ((void (*)(std::__shared_weak_count *))v1103->__on_zero_shared)(v1103);
                std::__shared_weak_count::__release_weak(v1103);
              }
            }
          }
        }
      }
      if (v1208 == 255)
      {
        if (*(_BYTE *)(v283 + 200))
        {
          v1128 = *(_DWORD *)(v283 + 196);
          v1129 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1976));
          v1130 = *(_QWORD *)(v1129 + 8);
          **(_DWORD **)(v1129 + 72) = v1128;
          if (*(_QWORD *)(v1129 + 64) > v1130)
            v1130 = *(_QWORD *)(v1129 + 64);
          *(_QWORD *)(v1129 + 56) = 0;
          *(_QWORD *)(v1129 + 64) = v1130;
          v1131 = v1039[4].f64[0];
          *(_QWORD *)(*(_QWORD *)&v1131 + 32) = v1129;
          *(_QWORD *)(*(_QWORD *)&v1131 + 40) = 0;
          v1132 = v1039[10].f64[0];
          v1133 = *(std::__shared_weak_count **)(*(_QWORD *)&v1132 + 40);
          *(_QWORD *)(*(_QWORD *)&v1132 + 32) = 0;
          *(_QWORD *)(*(_QWORD *)&v1132 + 40) = 0;
          if (!v1133)
            goto LABEL_1590;
          v1134 = (unint64_t *)&v1133->__shared_owners_;
          do
            v1135 = __ldaxr(v1134);
          while (__stlxr(v1135 - 1, v1134));
        }
        else
        {
          v1136 = v1039[4].f64[0];
          *(_QWORD *)(*(_QWORD *)&v1136 + 32) = *(_QWORD *)(a1 + 2016);
          *(_QWORD *)(*(_QWORD *)&v1136 + 40) = 0;
          v1137 = v1039[10].f64[0];
          v1133 = *(std::__shared_weak_count **)(*(_QWORD *)&v1137 + 40);
          *(_QWORD *)(*(_QWORD *)&v1137 + 32) = 0;
          *(_QWORD *)(*(_QWORD *)&v1137 + 40) = 0;
          if (!v1133)
            goto LABEL_1590;
          v1138 = (unint64_t *)&v1133->__shared_owners_;
          do
            v1135 = __ldaxr(v1138);
          while (__stlxr(v1135 - 1, v1138));
        }
        if (!v1135)
        {
          ((void (*)(std::__shared_weak_count *))v1133->__on_zero_shared)(v1133);
          std::__shared_weak_count::__release_weak(v1133);
        }
      }
LABEL_1590:
      v1108 = *(unsigned int *)(*(_QWORD *)(v283 + 32) + 16);
      v1109 = **(_QWORD **)(v283 + 216);
      __p = (float64x2_t)v1295[0];
      v1309 = v1295[1];
      LODWORD(v1310.f64[0]) = v1295[2].i32[0];
      v1110 = *(_QWORD **)(a1 + 3112);
      v1111 = v1110[1];
      if (v1111 == *(_QWORD *)(a1 + 3120))
      {
        v1110 = (_QWORD *)*v1110;
        if (!v1110)
        {
          v1110 = malloc_type_malloc(120 * v1111 + 16, 0xB644C221uLL);
          *v1110 = 0;
          v1110[1] = 0;
          **(_QWORD **)(a1 + 3112) = v1110;
        }
        *(_QWORD *)(a1 + 3112) = v1110;
        v1111 = v1110[1];
      }
      *(_QWORD *)&v1112 = vdupq_n_s64(1uLL).u64[0];
      *((_QWORD *)&v1112 + 1) = v1108;
      v1113 = &v1110[15 * v1111];
      v1110[1] = v1111 + 1;
      v1113[2] = &off_1E42B59B0;
      v1113 += 2;
      v1113[2] = v1220;
      v1113[3] = a1 + 2560;
      v1113[4] = v1039;
      v1113[5] = v1160 & 0xFFFFFFFF00000000;
      v1160 &= 0xFFFFFFFF00000000;
      v1113[6] = 0;
      *((_DWORD *)v1113 + 14) = 1065353216;
      v1114 = LODWORD(v1310.f64[0]);
      v1115 = v1309;
      *(float64x2_t *)((char *)v1113 + 60) = __p;
      *((_DWORD *)v1113 + 23) = v1114;
      *(float32x4_t *)((char *)v1113 + 76) = v1115;
      *((_OWORD *)v1113 + 6) = v1112;
      v1113[14] = 0;
      v1113[8] = v1109;
      *(_OWORD *)(v1113 + 9) = *(_OWORD *)(v283 + 16);
      v1113[11] = 0;
      v1113[12] = 1;
      ggl::CommandBuffer::pushRenderItem(a9, (ggl::RenderItem *)v1113);
      a7 = v1184;
      a8 = v1185;
      v1025 = v1217;
      v1033 = v1215;
    }
    if (*(_BYTE *)(a3 + 176))
    {
      v1116 = vdupq_n_s64(1uLL);
      v1116.i64[0] = (*(_QWORD *)(v283 + 24) - *(_QWORD *)(v283 + 16))
                   * *(unsigned int *)(*(_QWORD *)(v283 + 32) + 16);
      *(int64x2_t *)(a3 + 184) = vaddq_s64(v1116, *(int64x2_t *)(a3 + 184));
      *(int64x2_t *)(a3 + 200) = vaddq_s64(*(int64x2_t *)(a3 + 200), v1116);
    }
    v1117 = **(_QWORD **)(v283 + 216);
    __p = *(float64x2_t *)buf;
    v1309 = *(float32x4_t *)&buf[16];
    LODWORD(v1310.f64[0]) = *(_DWORD *)&buf[32];
    v1118 = *(_QWORD **)(a1 + 3112);
    v1119 = v1118[1];
    if (v1119 == *(_QWORD *)(a1 + 3120))
    {
      v1118 = (_QWORD *)*v1118;
      if (!v1118)
      {
        v1120 = v1033;
        v1118 = malloc_type_malloc(120 * v1119 + 16, 0xB644C221uLL);
        v1033 = v1120;
        *v1118 = 0;
        v1118[1] = 0;
        **(_QWORD **)(a1 + 3112) = v1118;
      }
      *(_QWORD *)(a1 + 3112) = v1118;
      v1119 = v1118[1];
    }
    *(_QWORD *)&v1121 = vdupq_n_s64(1uLL).u64[0];
    *((_QWORD *)&v1121 + 1) = v1030;
    v1122 = &v1118[15 * v1119];
    v1118[1] = v1119 + 1;
    v1122[2] = &off_1E42B59B0;
    v1122 += 2;
    v1122[2] = v1220;
    v1122[3] = v1021;
    v1122[4] = v1234;
    *((_DWORD *)v1122 + 10) = v1025;
    v1122[6] = (v1031 >> 4) | (unint64_t)(v1033 << 8);
    *((_DWORD *)v1122 + 14) = 1065353216;
    v1123 = LODWORD(v1310.f64[0]);
    v1124 = v1309;
    *(float64x2_t *)((char *)v1122 + 60) = __p;
    *((_DWORD *)v1122 + 23) = v1123;
    *(float32x4_t *)((char *)v1122 + 76) = v1124;
    *((_OWORD *)v1122 + 6) = v1121;
    v1122[14] = 0;
    v1122[8] = v1117;
    *(_OWORD *)(v1122 + 9) = *(_OWORD *)(v283 + 16);
    v1122[11] = 0;
    v1122[12] = 1;
    ggl::CommandBuffer::pushRenderItem(a9, (ggl::RenderItem *)v1122);
    v1125 = (std::__shared_weak_count *)v1263.i64[1];
    v75 = v1209;
    v76 = v1173;
    if (v1263.i64[1])
    {
      v1126 = (unint64_t *)(v1263.i64[1] + 8);
      do
        v1127 = __ldaxr(v1126);
      while (__stlxr(v1127 - 1, v1126));
      if (!v1127)
      {
        ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
        std::__shared_weak_count::__release_weak(v1125);
      }
    }
LABEL_196:
    v83 = v1281;
LABEL_197:
    if (v83)
    {
      v92 = (unint64_t *)&v83->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
LABEL_177:
    if (++a6 != a7)
      continue;
    break;
  }
}

void sub_19FE1871C(_Unwind_Exception *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::DecalPipelineSetup,ggl::DaVinci::DecalPipelineState>(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float32x4_t v16;
  char v17;

  v16 = *a3;
  v17 = 1;
  v6 = (float *)(a1 + 448);
  v7 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>((_QWORD *)(a1 + 448), v16.f32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 40);
  }
  else
  {
    v9 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1960));
    v8 = v9;
    v10 = *(_QWORD *)(v9 + 8);
    **(float16x4_t **)(v9 + 72) = vcvt_f16_f32(*a3);
    if (*(_QWORD *)(v9 + 64) > v10)
      v10 = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = v10;
    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *&>(v6, (unsigned int *)&v16, (uint64_t)&v16, v9);
  }
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v11 + 112) = v8;
  *(_QWORD *)(v11 + 120) = 0;
  v12 = *(_QWORD *)(a2 + 160);
  v13 = *(std::__shared_weak_count **)(v12 + 120);
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 120) = 0;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

uint64_t md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_2::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  int8x8_t *v6;
  uint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  float v18;
  float v19;
  void *v20;
  float v21;
  float v22;
  void *v23;
  float v24;
  float v25;
  void *v26;
  float v27;
  float v28;
  int8x8_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int8x8_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  _DWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  _BOOL8 v97;
  unint64_t v98;
  unint64_t v99;
  size_t prime;
  void *v101;
  void *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  size_t v106;
  size_t v107;
  size_t v108;
  _QWORD *v109;
  size_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  size_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint8x8_t v129;
  uint64_t **v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  float v135;
  float v136;
  _BOOL8 v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  size_t v146;
  size_t v147;
  size_t v148;
  _QWORD *v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint8x8_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  unint64_t v170;
  __int16 v171;
  _DWORD *v172;
  __int128 v173;

  v3 = (uint64_t)a3;
  v7 = *(_QWORD *)a1;
  v6 = *(int8x8_t **)(a1 + 8);
  v8 = v6[16];
  if (v8)
  {
    v9 = *a3;
    v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *a3;
      if (v9 >= *(_QWORD *)&v8)
        v11 = v9 % *(_QWORD *)&v8;
    }
    else
    {
      v11 = (*(_QWORD *)&v8 - 1) & v9;
    }
    v12 = *(_QWORD **)(*(_QWORD *)&v6[15] + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (v13[2] == v9)
                return v13[3];
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_21;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_21;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (v13[2] == v9)
              return v13[3];
          }
          else
          {
            if (v15 >= *(_QWORD *)&v8)
              v15 %= *(_QWORD *)&v8;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_21:
  if (**(_BYTE **)(a1 + 16))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "daVinciSaturationRangeMinOverride");
    v19 = v18;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "daVinciSaturationRangeMaxOverride");
    v22 = v21;

    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "daVinciBrightnessRangeMinOverride");
    v25 = v24;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "daVinciBrightnessRangeMaxOverride");
    v28 = v27;

  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, float))(**(_QWORD **)a2 + 752))(&v168, **(float **)(a1 + 24));
    (*(void (**)(__int128 *__return_ptr, float))(**(_QWORD **)a2 + 784))(&v173, **(float **)(a1 + 24));
    if ((_BYTE)v168)
      v22 = *((float *)&v168 + 2);
    else
      v22 = 1.0;
    if ((_BYTE)v168)
      v19 = *((float *)&v168 + 1);
    else
      v19 = 0.0;
    if ((_BYTE)v173)
      v28 = *((float *)&v173 + 2);
    else
      v28 = 1.0;
    if ((_BYTE)v173)
      v25 = *((float *)&v173 + 1);
    else
      v25 = 0.0;
  }
  *(_QWORD *)&v173 = __PAIR64__(LODWORD(v22), LODWORD(v19));
  *((_QWORD *)&v173 + 1) = __PAIR64__(LODWORD(v28), LODWORD(v25));
  v29 = *(int8x8_t **)(a1 + 8);
  if ((LODWORD(v19) & 0x7FFFFFFF) != 0)
    v30 = LODWORD(v19) - 0x61C8864680B583EBLL;
  else
    v30 = 0x9E3779B97F4A7C15;
  v31 = LODWORD(v22) - 0x61C8864680B583EBLL;
  if ((LODWORD(v22) & 0x7FFFFFFF) == 0)
    v31 = 0x9E3779B97F4A7C15;
  v32 = LODWORD(v25) - 0x61C8864680B583EBLL;
  if (v25 == 0.0)
    v32 = 0x9E3779B97F4A7C15;
  v33 = LODWORD(v28) - 0x61C8864680B583EBLL;
  if (v28 == 0.0)
    v33 = 0x9E3779B97F4A7C15;
  v34 = ((v32 >> 2) + (v32 << 6) + v33) ^ v32;
  v35 = v29[21];
  if (v35)
  {
    v36 = ((v30 >> 2) + (v30 << 6) + v31) ^ v30;
    v37 = ((v36 << 6) + (v36 >> 2) + v34 - 0x61C8864680B583EBLL) ^ v36;
    v38 = (uint8x8_t)vcnt_s8(v35);
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.u32[0] > 1uLL)
    {
      v39 = v37;
      if (v37 >= *(_QWORD *)&v35)
        v39 = v37 % *(_QWORD *)&v35;
    }
    else
    {
      v39 = v37 & (*(_QWORD *)&v35 - 1);
    }
    v40 = *(uint64_t ***)(*(_QWORD *)&v29[20] + 8 * v39);
    if (v40)
    {
      v41 = *v40;
      if (v41)
      {
        if (v38.u32[0] < 2uLL)
        {
          v42 = *(_QWORD *)&v35 - 1;
          while (1)
          {
            v44 = v41[1];
            if (v44 == v37)
            {
              if (*((_OWORD *)v41 + 1) == v173)
                return v41[4];
            }
            else if ((v44 & v42) != v39)
            {
              goto LABEL_65;
            }
            v41 = (uint64_t *)*v41;
            if (!v41)
              goto LABEL_65;
          }
        }
        do
        {
          v43 = v41[1];
          if (v43 == v37)
          {
            if (*((_OWORD *)v41 + 1) == v173)
              return v41[4];
          }
          else
          {
            if (v43 >= *(_QWORD *)&v35)
              v43 %= *(_QWORD *)&v35;
            if (v43 != v39)
              break;
          }
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
    }
  }
LABEL_65:
  v46 = *(_QWORD *)(v7 + 1720);
  v47 = *(_QWORD *)(v46 + 8);
  if (v47 == *(_QWORD *)v46)
  {
    v56 = *(_QWORD *)(v46 + 88);
    if (!v56)
    {
LABEL_310:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_311;
    }
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56);
    v48 = *(uint64_t **)(v46 + 40);
    v57 = *(_QWORD *)(v46 + 48);
    if ((unint64_t)v48 >= v57)
    {
      v59 = *(_QWORD *)(v46 + 32);
      v7 = ((uint64_t)v48 - v59) >> 3;
      v51 = v7 + 1;
      if (!((unint64_t)(v7 + 1) >> 61))
      {
        v60 = v57 - v59;
        if (v60 >> 2 > v51)
          v51 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        if (v51)
        {
          v61 = 8 * v51;
          v62 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v46 + 56) + 16))(*(_QWORD *)(v46 + 56), 8 * v51, 8);
          v55 = (uint64_t *)(v62 + 8 * v7);
          v51 = v62 + v61;
          if (v62)
            *v55 = v45;
        }
        else
        {
          v55 = (uint64_t *)(8 * v7);
        }
        v58 = v55 + 1;
        v72 = *(_QWORD *)(v46 + 32);
        v63 = *(_QWORD *)(v46 + 40);
        if (v63 == v72)
          goto LABEL_113;
        v73 = v63 - v72 - 8;
        if (v73 < 0x38)
        {
          v75 = *(_QWORD *)(v46 + 40);
        }
        else if ((unint64_t)(v63 - (_QWORD)v55) < 0x20)
        {
          v75 = *(_QWORD *)(v46 + 40);
        }
        else
        {
          v74 = (v73 >> 3) + 1;
          v75 = v63 - 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v76 = v55 - 2;
          v77 = (__int128 *)(v63 - 16);
          v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79 = *v77;
            *((_OWORD *)v76 - 1) = *(v77 - 1);
            *(_OWORD *)v76 = v79;
            v76 -= 4;
            v77 -= 2;
            v78 -= 4;
          }
          while (v78);
          v55 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_112;
        }
        do
        {
          v81 = *(_QWORD *)(v75 - 8);
          v75 -= 8;
          *--v55 = v81;
        }
        while (v75 != v72);
        goto LABEL_112;
      }
LABEL_312:
      abort();
    }
  }
  else
  {
    v45 = *(_QWORD *)(v47 - 8);
    *(_QWORD *)(v46 + 8) = v47 - 8;
    v48 = *(uint64_t **)(v46 + 40);
    v49 = *(_QWORD *)(v46 + 48);
    if ((unint64_t)v48 >= v49)
    {
      v50 = *(_QWORD *)(v46 + 32);
      v7 = ((uint64_t)v48 - v50) >> 3;
      v51 = v7 + 1;
      if (!((unint64_t)(v7 + 1) >> 61))
      {
        v52 = v49 - v50;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        if (v51)
        {
          v53 = 8 * v51;
          v54 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v46 + 56) + 16))(*(_QWORD *)(v46 + 56), 8 * v51, 8);
          v55 = (uint64_t *)(v54 + 8 * v7);
          v51 = v54 + v53;
          if (v54)
            *v55 = v45;
        }
        else
        {
          v55 = (uint64_t *)(8 * v7);
        }
        v58 = v55 + 1;
        v64 = *(_QWORD *)(v46 + 32);
        v63 = *(_QWORD *)(v46 + 40);
        if (v63 == v64)
          goto LABEL_113;
        v65 = v63 - v64 - 8;
        if (v65 < 0x38)
        {
          v67 = *(_QWORD *)(v46 + 40);
        }
        else if ((unint64_t)(v63 - (_QWORD)v55) < 0x20)
        {
          v67 = *(_QWORD *)(v46 + 40);
        }
        else
        {
          v66 = (v65 >> 3) + 1;
          v67 = v63 - 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
          v68 = v55 - 2;
          v69 = (__int128 *)(v63 - 16);
          v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v71 = *v69;
            *((_OWORD *)v68 - 1) = *(v69 - 1);
            *(_OWORD *)v68 = v71;
            v68 -= 4;
            v69 -= 2;
            v70 -= 4;
          }
          while (v70);
          v55 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
          if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_112;
        }
        do
        {
          v80 = *(_QWORD *)(v67 - 8);
          v67 -= 8;
          *--v55 = v80;
        }
        while (v67 != v64);
LABEL_112:
        v63 = *(_QWORD *)(v46 + 32);
LABEL_113:
        *(_QWORD *)(v46 + 32) = v55;
        *(_QWORD *)(v46 + 40) = v58;
        v82 = *(_QWORD *)(v46 + 48);
        *(_QWORD *)(v46 + 48) = v51;
        if (v63)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v46 + 56) + 40))(*(_QWORD *)(v46 + 56), v63, v82 - v63);
        goto LABEL_115;
      }
      goto LABEL_312;
    }
  }
  if (v48)
    *v48 = v45;
  v58 = v48 + 1;
LABEL_115:
  *(_QWORD *)(v46 + 40) = v58;
  *(_QWORD *)&v168 = v45;
  v83 = *(_QWORD *)(v46 + 120);
  if (!v83)
    goto LABEL_310;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v83 + 48))(v83, &v168);
  v168 = 0uLL;
  v84 = *(_QWORD *)(v45 + 8);
  *(_QWORD *)&v85 = 0;
  *((_QWORD *)&v85 + 1) = v45;
  v167 = v85;
  v166 = v34;
  if (v84)
    v86 = *(_DWORD **)(v45 + 72);
  else
    v86 = 0;
  v168 = v85;
  v169 = 0;
  v170 = v84;
  v172 = v86;
  v171 = 1;
  *v86 = LODWORD(v25);
  v86[1] = LODWORD(v28);
  v86[2] = LODWORD(v19);
  v86[3] = LODWORD(v22);
  v87 = *(_QWORD *)(a1 + 8);
  v88 = *(_QWORD *)v3;
  v89 = *(_QWORD *)(v87 + 128);
  if (v89)
  {
    v90 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
    v90.i16[0] = vaddlv_u8(v90);
    if (v90.u32[0] > 1uLL)
    {
      v7 = *(_QWORD *)v3;
      if (v88 >= v89)
        v7 = v88 % v89;
    }
    else
    {
      v7 = (v89 - 1) & v88;
    }
    v91 = *(_QWORD **)(*(_QWORD *)(v87 + 120) + 8 * v7);
    if (v91)
    {
      v92 = (_QWORD *)*v91;
      if (v92)
      {
        if (v90.u32[0] < 2uLL)
        {
          while (1)
          {
            v94 = v92[1];
            if (v94 == v88)
            {
              if (v92[2] == v88)
                goto LABEL_207;
            }
            else if ((v94 & (v89 - 1)) != v7)
            {
              goto LABEL_140;
            }
            v92 = (_QWORD *)*v92;
            if (!v92)
              goto LABEL_140;
          }
        }
        do
        {
          v93 = v92[1];
          if (v93 == v88)
          {
            if (v92[2] == v88)
              goto LABEL_207;
          }
          else
          {
            if (v93 >= v89)
              v93 %= v89;
            if (v93 != v7)
              break;
          }
          v92 = (_QWORD *)*v92;
        }
        while (v92);
      }
    }
  }
LABEL_140:
  v3 = (uint64_t)operator new(0x20uLL);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = v88;
  *(_QWORD *)(v3 + 16) = v88;
  *(_QWORD *)(v3 + 24) = v45;
  v95 = (float)(unint64_t)(*(_QWORD *)(v87 + 144) + 1);
  v96 = *(float *)(v87 + 152);
  if (!v89 || (float)(v96 * (float)v89) < v95)
  {
    v97 = 1;
    if (v89 >= 3)
      v97 = (v89 & (v89 - 1)) != 0;
    v98 = v97 | (2 * v89);
    v99 = vcvtps_u32_f32(v95 / v96);
    if (v98 <= v99)
      prime = v99;
    else
      prime = v98;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v89 = *(_QWORD *)(v87 + 128);
    }
    if (prime <= v89)
    {
      if (prime >= v89)
        goto LABEL_192;
      v113 = vcvtps_u32_f32((float)*(unint64_t *)(v87 + 144) / *(float *)(v87 + 152));
      if (v89 < 3 || (v114 = (uint8x8_t)vcnt_s8((int8x8_t)v89), v114.i16[0] = vaddlv_u8(v114), v114.u32[0] > 1uLL))
      {
        v113 = std::__next_prime(v113);
      }
      else
      {
        v115 = 1 << -(char)__clz(v113 - 1);
        if (v113 >= 2)
          v113 = v115;
      }
      if (prime <= v113)
        prime = v113;
      if (prime >= v89)
        goto LABEL_192;
      if (!prime)
      {
        v120 = *(void **)(v87 + 120);
        *(_QWORD *)(v87 + 120) = 0;
        if (v120)
          operator delete(v120);
        *(_QWORD *)(v87 + 128) = 0;
        goto LABEL_192;
      }
    }
    if (prime >> 61)
      goto LABEL_311;
    v101 = operator new(8 * prime);
    v102 = *(void **)(v87 + 120);
    *(_QWORD *)(v87 + 120) = v101;
    if (v102)
      operator delete(v102);
    v103 = 0;
    *(_QWORD *)(v87 + 128) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v87 + 120) + 8 * v103++) = 0;
    while (prime != v103);
    v105 = v87 + 136;
    v104 = *(_QWORD **)(v87 + 136);
    if (!v104)
      goto LABEL_192;
    v106 = v104[1];
    v107 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v108 = v106 & v107;
      *(_QWORD *)(*(_QWORD *)(v87 + 120) + 8 * v108) = v105;
      while (1)
      {
        v109 = (_QWORD *)*v104;
        if (!*v104)
          break;
        v110 = v109[1] & v107;
        if (v110 == v108)
        {
          v104 = (_QWORD *)*v104;
        }
        else
        {
          v111 = *(_QWORD *)(v87 + 120);
          if (*(_QWORD *)(v111 + 8 * v110))
          {
            *v104 = *v109;
            v112 = 8 * v110;
            *v109 = **(_QWORD **)(*(_QWORD *)(v87 + 120) + v112);
            **(_QWORD **)(*(_QWORD *)(v87 + 120) + v112) = v109;
          }
          else
          {
            *(_QWORD *)(v111 + 8 * v110) = v104;
            v104 = v109;
            v108 = v110;
          }
        }
      }
LABEL_192:
      v89 = *(_QWORD *)(v87 + 128);
      if ((v89 & (v89 - 1)) != 0)
      {
        if (v88 >= v89)
          v7 = v88 % v89;
        else
          v7 = v88;
      }
      else
      {
        v7 = (v89 - 1) & v88;
      }
      goto LABEL_197;
    }
    if (v106 >= prime)
      v106 %= prime;
    *(_QWORD *)(*(_QWORD *)(v87 + 120) + 8 * v106) = v105;
    v116 = (_QWORD *)*v104;
    if (!*v104)
      goto LABEL_192;
    while (1)
    {
      v118 = v116[1];
      if (v118 >= prime)
        v118 %= prime;
      if (v118 != v106)
      {
        v119 = *(_QWORD *)(v87 + 120);
        if (!*(_QWORD *)(v119 + 8 * v118))
        {
          *(_QWORD *)(v119 + 8 * v118) = v104;
          goto LABEL_178;
        }
        *v104 = *v116;
        v117 = 8 * v118;
        *v116 = **(_QWORD **)(*(_QWORD *)(v87 + 120) + v117);
        **(_QWORD **)(*(_QWORD *)(v87 + 120) + v117) = v116;
        v116 = v104;
      }
      v118 = v106;
LABEL_178:
      v104 = v116;
      v116 = (_QWORD *)*v116;
      v106 = v118;
      if (!v116)
        goto LABEL_192;
    }
  }
LABEL_197:
  v121 = *(_QWORD *)(v87 + 120);
  v122 = *(uint64_t **)(v121 + 8 * v7);
  if (v122)
  {
    *(_QWORD *)v3 = *v122;
LABEL_205:
    *v122 = v3;
    goto LABEL_206;
  }
  *(_QWORD *)v3 = *(_QWORD *)(v87 + 136);
  *(_QWORD *)(v87 + 136) = v3;
  *(_QWORD *)(v121 + 8 * v7) = v87 + 136;
  if (*(_QWORD *)v3)
  {
    v123 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if ((v89 & (v89 - 1)) != 0)
    {
      if (v123 >= v89)
        v123 %= v89;
    }
    else
    {
      v123 &= v89 - 1;
    }
    v122 = (uint64_t *)(*(_QWORD *)(v87 + 120) + 8 * v123);
    goto LABEL_205;
  }
LABEL_206:
  ++*(_QWORD *)(v87 + 144);
  v87 = *(_QWORD *)(a1 + 8);
LABEL_207:
  if ((v173 & 0x7FFFFFFF) != 0)
    v124 = v173 - 0x61C8864680B583EBLL;
  else
    v124 = 0x9E3779B97F4A7C15;
  if ((DWORD1(v173) & 0x7FFFFFFF) != 0)
    v125 = DWORD1(v173) - 0x61C8864680B583EBLL;
  else
    v125 = 0x9E3779B97F4A7C15;
  v126 = ((v124 >> 2) + (v124 << 6) + v125) ^ v124;
  v127 = ((v126 << 6) - 0x61C8864680B583EBLL + (v126 >> 2) + v166) ^ v126;
  v128 = *(_QWORD *)(v87 + 168);
  if (v128)
  {
    v129 = (uint8x8_t)vcnt_s8((int8x8_t)v128);
    v129.i16[0] = vaddlv_u8(v129);
    if (v129.u32[0] > 1uLL)
    {
      v3 = ((v126 << 6) - 0x61C8864680B583EBLL + (v126 >> 2) + v166) ^ v126;
      if (v127 >= v128)
        v3 = v127 % v128;
    }
    else
    {
      v3 = v127 & (v128 - 1);
    }
    v130 = *(uint64_t ***)(*(_QWORD *)(v87 + 160) + 8 * v3);
    if (v130)
    {
      v131 = *v130;
      if (v131)
      {
        if (v129.u32[0] < 2uLL)
        {
          while (1)
          {
            v133 = v131[1];
            if (v133 == v127)
            {
              if (*((_OWORD *)v131 + 1) == v173)
                goto LABEL_302;
            }
            else if ((v133 & (v128 - 1)) != v3)
            {
              goto LABEL_235;
            }
            v131 = (uint64_t *)*v131;
            if (!v131)
              goto LABEL_235;
          }
        }
        do
        {
          v132 = v131[1];
          if (v132 == v127)
          {
            if (*((_OWORD *)v131 + 1) == v173)
              goto LABEL_302;
          }
          else
          {
            if (v132 >= v128)
              v132 %= v128;
            if (v132 != v3)
              break;
          }
          v131 = (uint64_t *)*v131;
        }
        while (v131);
      }
    }
  }
LABEL_235:
  v134 = operator new(0x28uLL);
  *v134 = 0;
  v134[1] = v127;
  *((_OWORD *)v134 + 1) = v173;
  v134[4] = v45;
  v135 = (float)(unint64_t)(*(_QWORD *)(v87 + 184) + 1);
  v136 = *(float *)(v87 + 192);
  if (!v128 || (float)(v136 * (float)v128) < v135)
  {
    v137 = 1;
    if (v128 >= 3)
      v137 = (v128 & (v128 - 1)) != 0;
    v138 = v137 | (2 * v128);
    v139 = vcvtps_u32_f32(v135 / v136);
    if (v138 <= v139)
      v140 = v139;
    else
      v140 = v138;
    if (v140 == 1)
    {
      v140 = 2;
    }
    else if ((v140 & (v140 - 1)) != 0)
    {
      v140 = std::__next_prime(v140);
      v128 = *(_QWORD *)(v87 + 168);
    }
    if (v140 <= v128)
    {
      if (v140 >= v128)
        goto LABEL_287;
      v153 = vcvtps_u32_f32((float)*(unint64_t *)(v87 + 184) / *(float *)(v87 + 192));
      if (v128 < 3 || (v154 = (uint8x8_t)vcnt_s8((int8x8_t)v128), v154.i16[0] = vaddlv_u8(v154), v154.u32[0] > 1uLL))
      {
        v153 = std::__next_prime(v153);
      }
      else
      {
        v155 = 1 << -(char)__clz(v153 - 1);
        if (v153 >= 2)
          v153 = v155;
      }
      if (v140 <= v153)
        v140 = v153;
      if (v140 >= v128)
        goto LABEL_287;
      if (!v140)
      {
        v160 = *(void **)(v87 + 160);
        *(_QWORD *)(v87 + 160) = 0;
        if (v160)
          operator delete(v160);
        *(_QWORD *)(v87 + 168) = 0;
        goto LABEL_287;
      }
    }
    if (!(v140 >> 61))
    {
      v141 = operator new(8 * v140);
      v142 = *(void **)(v87 + 160);
      *(_QWORD *)(v87 + 160) = v141;
      if (v142)
        operator delete(v142);
      v143 = 0;
      *(_QWORD *)(v87 + 168) = v140;
      do
        *(_QWORD *)(*(_QWORD *)(v87 + 160) + 8 * v143++) = 0;
      while (v140 != v143);
      v145 = v87 + 176;
      v144 = *(_QWORD **)(v87 + 176);
      if (!v144)
        goto LABEL_287;
      v146 = v144[1];
      v147 = v140 - 1;
      if ((v140 & (v140 - 1)) == 0)
      {
        v148 = v146 & v147;
        *(_QWORD *)(*(_QWORD *)(v87 + 160) + 8 * v148) = v145;
        while (1)
        {
          v149 = (_QWORD *)*v144;
          if (!*v144)
            break;
          v150 = v149[1] & v147;
          if (v150 == v148)
          {
            v144 = (_QWORD *)*v144;
          }
          else
          {
            v151 = *(_QWORD *)(v87 + 160);
            if (*(_QWORD *)(v151 + 8 * v150))
            {
              *v144 = *v149;
              v152 = 8 * v150;
              *v149 = **(_QWORD **)(*(_QWORD *)(v87 + 160) + v152);
              **(_QWORD **)(*(_QWORD *)(v87 + 160) + v152) = v149;
            }
            else
            {
              *(_QWORD *)(v151 + 8 * v150) = v144;
              v144 = v149;
              v148 = v150;
            }
          }
        }
LABEL_287:
        v128 = *(_QWORD *)(v87 + 168);
        if ((v128 & (v128 - 1)) != 0)
        {
          if (v127 >= v128)
            v3 = v127 % v128;
          else
            v3 = v127;
        }
        else
        {
          v3 = (v128 - 1) & v127;
        }
        goto LABEL_292;
      }
      if (v146 >= v140)
        v146 %= v140;
      *(_QWORD *)(*(_QWORD *)(v87 + 160) + 8 * v146) = v145;
      v156 = (_QWORD *)*v144;
      if (!*v144)
        goto LABEL_287;
      while (1)
      {
        v158 = v156[1];
        if (v158 >= v140)
          v158 %= v140;
        if (v158 != v146)
        {
          v159 = *(_QWORD *)(v87 + 160);
          if (!*(_QWORD *)(v159 + 8 * v158))
          {
            *(_QWORD *)(v159 + 8 * v158) = v144;
            goto LABEL_273;
          }
          *v144 = *v156;
          v157 = 8 * v158;
          *v156 = **(_QWORD **)(*(_QWORD *)(v87 + 160) + v157);
          **(_QWORD **)(*(_QWORD *)(v87 + 160) + v157) = v156;
          v156 = v144;
        }
        v158 = v146;
LABEL_273:
        v144 = v156;
        v156 = (_QWORD *)*v156;
        v146 = v158;
        if (!v156)
          goto LABEL_287;
      }
    }
LABEL_311:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_292:
  v161 = *(_QWORD *)(v87 + 160);
  v162 = *(_QWORD **)(v161 + 8 * v3);
  if (v162)
  {
    *v134 = *v162;
  }
  else
  {
    *v134 = *(_QWORD *)(v87 + 176);
    *(_QWORD *)(v87 + 176) = v134;
    *(_QWORD *)(v161 + 8 * v3) = v87 + 176;
    if (!*v134)
      goto LABEL_301;
    v163 = *(_QWORD *)(*v134 + 8);
    if ((v128 & (v128 - 1)) != 0)
    {
      if (v163 >= v128)
        v163 %= v128;
    }
    else
    {
      v163 &= v128 - 1;
    }
    v162 = (_QWORD *)(*(_QWORD *)(v87 + 160) + 8 * v163);
  }
  *v162 = v134;
LABEL_301:
  ++*(_QWORD *)(v87 + 184);
LABEL_302:
  if (v84)
  {
    if ((_QWORD)v167 && *(_BYTE *)(*((_QWORD *)&v167 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v167 + 64))();
    v164 = *(_QWORD *)(*((_QWORD *)&v167 + 1) + 64);
    if (v164 <= v84)
      v164 = v84;
    *(_QWORD *)(*((_QWORD *)&v167 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v167 + 1) + 64) = v164;
  }
  return v45;
}

void sub_19FE19A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(v13);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a13);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_1::operator()(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  _QWORD *v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v103;

  v3 = (uint64_t)a2;
  v5 = (_QWORD *)a1[1];
  v6 = (int8x8_t)v5[11];
  if (v6)
  {
    v7 = *a2;
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 >= *(_QWORD *)&v6)
        v9 = v7 % *(_QWORD *)&v6;
    }
    else
    {
      v9 = (*(_QWORD *)&v6 - 1) & v7;
    }
    v10 = *(_QWORD **)(v5[10] + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == v7)
            {
              if (v11[2] == v7)
                return v11[3];
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_21;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == v7)
              return v11[3];
          }
          else
          {
            if (v13 >= *(_QWORD *)&v6)
              v13 %= *(_QWORD *)&v6;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_21:
  v15 = (int8x8_t)v5[6];
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = 0x6BCC390801A0D864;
      if (*(_QWORD *)&v15 <= 0x6BCC390801A0D864uLL)
        v17 = 0x6BCC390801A0D864uLL % *(_QWORD *)&v15;
    }
    else
    {
      v17 = (*(_QWORD *)&v15 - 1) & 0x6BCC390801A0D864;
    }
    v18 = *(uint64_t ***)(v5[5] + 8 * v17);
    if (v18)
    {
      v19 = *v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          v20 = *(_QWORD *)&v15 - 1;
          while (1)
          {
            v21 = v19[1];
            if (v21 == 0x6BCC390801A0D864)
            {
              if (*((float *)v19 + 4) == 1.0 && !*(uint64_t *)((char *)v19 + 20))
                return v19[4];
            }
            else if ((v21 & v20) != v17)
            {
              goto LABEL_45;
            }
            v19 = (uint64_t *)*v19;
            if (!v19)
              goto LABEL_45;
          }
        }
        do
        {
          v23 = v19[1];
          if (v23 == 0x6BCC390801A0D864)
          {
            if (*((float *)v19 + 4) == 1.0 && !*(uint64_t *)((char *)v19 + 20))
              return v19[4];
          }
          else
          {
            if (v23 >= *(_QWORD *)&v15)
              v23 %= *(_QWORD *)&v15;
            if (v23 != v17)
              break;
          }
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_45:
  v24 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a1 + 1712));
  v22 = v24;
  v25 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)&v26 = 0;
  *((_QWORD *)&v26 + 1) = v24;
  v103 = v26;
  if (v25)
    v27 = *(_QWORD *)(v24 + 72);
  else
    v27 = 0;
  *(_DWORD *)v27 = 1065353216;
  *(_QWORD *)(v27 + 8) = 0;
  v28 = a1[1];
  v29 = *(_QWORD *)v3;
  v30 = *(_QWORD *)(v28 + 88);
  if (v30)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v2 = *(_QWORD *)v3;
      if (v29 >= v30)
        v2 = v29 % v30;
    }
    else
    {
      v2 = (v30 - 1) & v29;
    }
    v32 = *(_QWORD **)(*(_QWORD *)(v28 + 80) + 8 * v2);
    if (v32)
    {
      v33 = (_QWORD *)*v32;
      if (v33)
      {
        if (v31.u32[0] < 2uLL)
        {
          while (1)
          {
            v35 = v33[1];
            if (v35 == v29)
            {
              if (v33[2] == v29)
                goto LABEL_137;
            }
            else if ((v35 & (v30 - 1)) != v2)
            {
              goto LABEL_69;
            }
            v33 = (_QWORD *)*v33;
            if (!v33)
              goto LABEL_69;
          }
        }
        do
        {
          v34 = v33[1];
          if (v34 == v29)
          {
            if (v33[2] == v29)
              goto LABEL_137;
          }
          else
          {
            if (v34 >= v30)
              v34 %= v30;
            if (v34 != v2)
              break;
          }
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
    }
  }
LABEL_69:
  v3 = (uint64_t)operator new(0x20uLL);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = v29;
  *(_QWORD *)(v3 + 16) = v29;
  *(_QWORD *)(v3 + 24) = v22;
  v36 = (float)(unint64_t)(*(_QWORD *)(v28 + 104) + 1);
  v37 = *(float *)(v28 + 112);
  if (!v30 || (float)(v37 * (float)v30) < v36)
  {
    v38 = 1;
    if (v30 >= 3)
      v38 = (v30 & (v30 - 1)) != 0;
    v39 = v38 | (2 * v30);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      prime = v40;
    else
      prime = v39;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v30 = *(_QWORD *)(v28 + 88);
    }
    if (prime <= v30)
    {
      if (prime >= v30)
        goto LABEL_122;
      v54 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 104) / *(float *)(v28 + 112));
      if (v30 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
      {
        v54 = std::__next_prime(v54);
      }
      else
      {
        v56 = 1 << -(char)__clz(v54 - 1);
        if (v54 >= 2)
          v54 = v56;
      }
      if (prime <= v54)
        prime = v54;
      if (prime >= v30)
        goto LABEL_122;
      if (!prime)
      {
        v61 = *(void **)(v28 + 80);
        *(_QWORD *)(v28 + 80) = 0;
        if (v61)
          operator delete(v61);
        *(_QWORD *)(v28 + 88) = 0;
        goto LABEL_122;
      }
    }
    if (prime >> 61)
      goto LABEL_237;
    v42 = operator new(8 * prime);
    v43 = *(void **)(v28 + 80);
    *(_QWORD *)(v28 + 80) = v42;
    if (v43)
      operator delete(v43);
    v44 = 0;
    *(_QWORD *)(v28 + 88) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v28 + 80) + 8 * v44++) = 0;
    while (prime != v44);
    v46 = v28 + 96;
    v45 = *(_QWORD **)(v28 + 96);
    if (!v45)
      goto LABEL_122;
    v47 = v45[1];
    v48 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v49 = v47 & v48;
      *(_QWORD *)(*(_QWORD *)(v28 + 80) + 8 * v49) = v46;
      while (1)
      {
        v50 = (_QWORD *)*v45;
        if (!*v45)
          break;
        v51 = v50[1] & v48;
        if (v51 == v49)
        {
          v45 = (_QWORD *)*v45;
        }
        else
        {
          v52 = *(_QWORD *)(v28 + 80);
          if (*(_QWORD *)(v52 + 8 * v51))
          {
            *v45 = *v50;
            v53 = 8 * v51;
            *v50 = **(_QWORD **)(*(_QWORD *)(v28 + 80) + v53);
            **(_QWORD **)(*(_QWORD *)(v28 + 80) + v53) = v50;
          }
          else
          {
            *(_QWORD *)(v52 + 8 * v51) = v45;
            v45 = v50;
            v49 = v51;
          }
        }
      }
LABEL_122:
      v30 = *(_QWORD *)(v28 + 88);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v29 >= v30)
          v2 = v29 % v30;
        else
          v2 = v29;
      }
      else
      {
        v2 = (v30 - 1) & v29;
      }
      goto LABEL_127;
    }
    if (v47 >= prime)
      v47 %= prime;
    *(_QWORD *)(*(_QWORD *)(v28 + 80) + 8 * v47) = v46;
    v57 = (_QWORD *)*v45;
    if (!*v45)
      goto LABEL_122;
    while (1)
    {
      v59 = v57[1];
      if (v59 >= prime)
        v59 %= prime;
      if (v59 != v47)
      {
        v60 = *(_QWORD *)(v28 + 80);
        if (!*(_QWORD *)(v60 + 8 * v59))
        {
          *(_QWORD *)(v60 + 8 * v59) = v45;
          goto LABEL_107;
        }
        *v45 = *v57;
        v58 = 8 * v59;
        *v57 = **(_QWORD **)(*(_QWORD *)(v28 + 80) + v58);
        **(_QWORD **)(*(_QWORD *)(v28 + 80) + v58) = v57;
        v57 = v45;
      }
      v59 = v47;
LABEL_107:
      v45 = v57;
      v57 = (_QWORD *)*v57;
      v47 = v59;
      if (!v57)
        goto LABEL_122;
    }
  }
LABEL_127:
  v62 = *(_QWORD *)(v28 + 80);
  v63 = *(uint64_t **)(v62 + 8 * v2);
  if (v63)
  {
    *(_QWORD *)v3 = *v63;
LABEL_135:
    *v63 = v3;
    goto LABEL_136;
  }
  *(_QWORD *)v3 = *(_QWORD *)(v28 + 96);
  *(_QWORD *)(v28 + 96) = v3;
  *(_QWORD *)(v62 + 8 * v2) = v28 + 96;
  if (*(_QWORD *)v3)
  {
    v64 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v64 >= v30)
        v64 %= v30;
    }
    else
    {
      v64 &= v30 - 1;
    }
    v63 = (uint64_t *)(*(_QWORD *)(v28 + 80) + 8 * v64);
    goto LABEL_135;
  }
LABEL_136:
  ++*(_QWORD *)(v28 + 104);
  v28 = a1[1];
LABEL_137:
  v65 = *(_QWORD *)(v28 + 48);
  if (v65)
  {
    v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v3 = 0x6BCC390801A0D864;
      if (v65 <= 0x6BCC390801A0D864)
        v3 = 0x6BCC390801A0D864 % v65;
    }
    else
    {
      v3 = (v65 - 1) & 0x6BCC390801A0D864;
    }
    v67 = *(uint64_t ***)(*(_QWORD *)(v28 + 40) + 8 * v3);
    if (v67)
    {
      v68 = *v67;
      if (v68)
      {
        if (v66.u32[0] < 2uLL)
        {
          while (1)
          {
            v69 = v68[1];
            if (v69 == 0x6BCC390801A0D864)
            {
              if (*((float *)v68 + 4) == 1.0 && !*(uint64_t *)((char *)v68 + 20))
                goto LABEL_229;
            }
            else if ((v69 & (v65 - 1)) != v3)
            {
              goto LABEL_162;
            }
            v68 = (uint64_t *)*v68;
            if (!v68)
              goto LABEL_162;
          }
        }
        do
        {
          v70 = v68[1];
          if (v70 == 0x6BCC390801A0D864)
          {
            if (*((float *)v68 + 4) == 1.0 && !*(uint64_t *)((char *)v68 + 20))
              goto LABEL_229;
          }
          else
          {
            if (v70 >= v65)
              v70 %= v65;
            if (v70 != v3)
              break;
          }
          v68 = (uint64_t *)*v68;
        }
        while (v68);
      }
    }
  }
LABEL_162:
  v71 = operator new(0x28uLL);
  *v71 = 0;
  v71[1] = 0x6BCC390801A0D864;
  *((_DWORD *)v71 + 6) = 0;
  v71[2] = 1065353216;
  v71[4] = v22;
  v72 = (float)(unint64_t)(*(_QWORD *)(v28 + 64) + 1);
  v73 = *(float *)(v28 + 72);
  if (v65 && (float)(v73 * (float)v65) >= v72)
    goto LABEL_219;
  v74 = 1;
  if (v65 >= 3)
    v74 = (v65 & (v65 - 1)) != 0;
  v75 = v74 | (2 * v65);
  v76 = vcvtps_u32_f32(v72 / v73);
  if (v75 <= v76)
    v77 = v76;
  else
    v77 = v75;
  if (v77 == 1)
  {
    v77 = 2;
  }
  else if ((v77 & (v77 - 1)) != 0)
  {
    v77 = std::__next_prime(v77);
    v65 = *(_QWORD *)(v28 + 48);
  }
  if (v77 <= v65)
  {
    if (v77 >= v65)
      goto LABEL_214;
    v90 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 64) / *(float *)(v28 + 72));
    if (v65 < 3 || (v91 = (uint8x8_t)vcnt_s8((int8x8_t)v65), v91.i16[0] = vaddlv_u8(v91), v91.u32[0] > 1uLL))
    {
      v90 = std::__next_prime(v90);
    }
    else
    {
      v92 = 1 << -(char)__clz(v90 - 1);
      if (v90 >= 2)
        v90 = v92;
    }
    if (v77 <= v90)
      v77 = v90;
    if (v77 >= v65)
      goto LABEL_214;
    if (!v77)
    {
      v97 = *(void **)(v28 + 40);
      *(_QWORD *)(v28 + 40) = 0;
      if (v97)
        operator delete(v97);
      v65 = 0;
      *(_QWORD *)(v28 + 48) = 0;
      goto LABEL_215;
    }
  }
  if (v77 >> 61)
LABEL_237:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v78 = operator new(8 * v77);
  v79 = *(void **)(v28 + 40);
  *(_QWORD *)(v28 + 40) = v78;
  if (v79)
    operator delete(v79);
  v80 = 0;
  *(_QWORD *)(v28 + 48) = v77;
  do
    *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8 * v80++) = 0;
  while (v77 != v80);
  v82 = v28 + 56;
  v81 = *(_QWORD **)(v28 + 56);
  if (!v81)
    goto LABEL_214;
  v83 = v81[1];
  v84 = v77 - 1;
  if ((v77 & (v77 - 1)) != 0)
  {
    if (v83 >= v77)
      v83 %= v77;
    *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8 * v83) = v82;
    v93 = (_QWORD *)*v81;
    if (!*v81)
      goto LABEL_214;
    while (1)
    {
      v95 = v93[1];
      if (v95 >= v77)
        v95 %= v77;
      if (v95 != v83)
      {
        v96 = *(_QWORD *)(v28 + 40);
        if (!*(_QWORD *)(v96 + 8 * v95))
        {
          *(_QWORD *)(v96 + 8 * v95) = v81;
          goto LABEL_200;
        }
        *v81 = *v93;
        v94 = 8 * v95;
        *v93 = **(_QWORD **)(*(_QWORD *)(v28 + 40) + v94);
        **(_QWORD **)(*(_QWORD *)(v28 + 40) + v94) = v93;
        v93 = v81;
      }
      v95 = v83;
LABEL_200:
      v81 = v93;
      v93 = (_QWORD *)*v93;
      v83 = v95;
      if (!v93)
        goto LABEL_214;
    }
  }
  v85 = v83 & v84;
  *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8 * v85) = v82;
  while (1)
  {
    v86 = (_QWORD *)*v81;
    if (!*v81)
      break;
    v87 = v86[1] & v84;
    if (v87 == v85)
    {
      v81 = (_QWORD *)*v81;
    }
    else
    {
      v88 = *(_QWORD *)(v28 + 40);
      if (*(_QWORD *)(v88 + 8 * v87))
      {
        *v81 = *v86;
        v89 = 8 * v87;
        *v86 = **(_QWORD **)(*(_QWORD *)(v28 + 40) + v89);
        **(_QWORD **)(*(_QWORD *)(v28 + 40) + v89) = v86;
      }
      else
      {
        *(_QWORD *)(v88 + 8 * v87) = v81;
        v81 = v86;
        v85 = v87;
      }
    }
  }
LABEL_214:
  v65 = *(_QWORD *)(v28 + 48);
  if ((v65 & (v65 - 1)) == 0)
  {
LABEL_215:
    v3 = (v65 - 1) & 0x6BCC390801A0D864;
    goto LABEL_219;
  }
  if (v65 <= 0x6BCC390801A0D864)
    v3 = 0x6BCC390801A0D864 % v65;
  else
    v3 = 0x6BCC390801A0D864;
LABEL_219:
  v98 = *(_QWORD *)(v28 + 40);
  v99 = *(_QWORD **)(v98 + 8 * v3);
  if (v99)
  {
    *v71 = *v99;
  }
  else
  {
    *v71 = *(_QWORD *)(v28 + 56);
    *(_QWORD *)(v28 + 56) = v71;
    *(_QWORD *)(v98 + 8 * v3) = v28 + 56;
    if (!*v71)
      goto LABEL_228;
    v100 = *(_QWORD *)(*v71 + 8);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v100 >= v65)
        v100 %= v65;
    }
    else
    {
      v100 &= v65 - 1;
    }
    v99 = (_QWORD *)(*(_QWORD *)(v28 + 40) + 8 * v100);
  }
  *v99 = v71;
LABEL_228:
  ++*(_QWORD *)(v28 + 64);
LABEL_229:
  if (v25)
  {
    if ((_QWORD)v103 && *(_BYTE *)(*((_QWORD *)&v103 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v103 + 64))();
    v101 = *(_QWORD *)(*((_QWORD *)&v103 + 1) + 64);
    if (v101 <= v25)
      v101 = v25;
    *(_QWORD *)(*((_QWORD *)&v103 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v103 + 1) + 64) = v101;
  }
  return v22;
}

void sub_19FE1A5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a11);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundRenderLayer::layoutMaterialRenderables(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderLayer::MaterialConstants &,md::DaVinciGroundRenderable *,geo::slice<std::__wrap_iter<unsigned long *>>,std::vector<md::MeshRenderable *> const&,ggl::CommandBuffer *,BOOL)::$_3::operator()(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  float *v59;
  float v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  float v70;
  float v71;
  _BOOL8 v72;
  unint64_t v73;
  unint64_t v74;
  size_t prime;
  void *v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  size_t v81;
  size_t v82;
  size_t v83;
  _QWORD *v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint8x8_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  __int16 v105;
  float *v106;

  v5 = (unint64_t)a1;
  v6 = (int8x8_t *)a1[1];
  v7 = v6[26];
  if (v7)
  {
    v8 = *a2;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *a2;
      if (v8 >= *(_QWORD *)&v7)
        v10 = v8 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)&v6[25] + 8 * v10);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (v12[2] == v8)
                return v12[3];
            }
            else if ((v15 & v13) != v10)
            {
              goto LABEL_21;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_21;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (v12[2] == v8)
              return v12[3];
          }
          else
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
            if (v14 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_21:
  v16 = *(_QWORD *)(*a1 + 1728);
  v17 = *(_QWORD *)(v16 + 8);
  if (v17 == *(_QWORD *)v16)
  {
    v28 = *(_QWORD *)(v16 + 88);
    if (!v28)
    {
LABEL_171:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_172:
      abort();
    }
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
    v19 = *(uint64_t **)(v16 + 40);
    v29 = *(_QWORD *)(v16 + 48);
    if ((unint64_t)v19 >= v29)
    {
      v31 = *(_QWORD *)(v16 + 32);
      v32 = ((uint64_t)v19 - v31) >> 3;
      v23 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        goto LABEL_172;
      v33 = v29 - v31;
      if (v33 >> 2 > v23)
        v23 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (v23)
      {
        v34 = 8 * v23;
        v35 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v16 + 56) + 16))(*(_QWORD *)(v16 + 56), 8 * v23, 8);
        v27 = (uint64_t *)(v35 + 8 * v32);
        v23 = v35 + v34;
        if (v35)
          *v27 = v18;
      }
      else
      {
        v27 = (uint64_t *)(8 * v32);
      }
      v30 = v27 + 1;
      v45 = *(_QWORD *)(v16 + 32);
      v36 = *(_QWORD *)(v16 + 40);
      if (v36 == v45)
        goto LABEL_69;
      v46 = v36 - v45 - 8;
      if (v46 < 0x38)
      {
        v48 = *(_QWORD *)(v16 + 40);
      }
      else if ((unint64_t)(v36 - (_QWORD)v27) < 0x20)
      {
        v48 = *(_QWORD *)(v16 + 40);
      }
      else
      {
        v47 = (v46 >> 3) + 1;
        v48 = v36 - 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        v49 = v27 - 2;
        v50 = (__int128 *)(v36 - 16);
        v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *v50;
          *((_OWORD *)v49 - 1) = *(v50 - 1);
          *(_OWORD *)v49 = v52;
          v49 -= 4;
          v50 -= 2;
          v51 -= 4;
        }
        while (v51);
        v27 -= v47 & 0x3FFFFFFFFFFFFFFCLL;
        if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_68;
      }
      do
      {
        v54 = *(_QWORD *)(v48 - 8);
        v48 -= 8;
        *--v27 = v54;
      }
      while (v48 != v45);
      goto LABEL_68;
    }
  }
  else
  {
    v18 = *(_QWORD *)(v17 - 8);
    *(_QWORD *)(v16 + 8) = v17 - 8;
    v19 = *(uint64_t **)(v16 + 40);
    v20 = *(_QWORD *)(v16 + 48);
    if ((unint64_t)v19 >= v20)
    {
      v21 = *(_QWORD *)(v16 + 32);
      v22 = ((uint64_t)v19 - v21) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_172;
      v24 = v20 - v21;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (v23)
      {
        v25 = 8 * v23;
        v26 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v16 + 56) + 16))(*(_QWORD *)(v16 + 56), 8 * v23, 8);
        v27 = (uint64_t *)(v26 + 8 * v22);
        v23 = v26 + v25;
        if (v26)
          *v27 = v18;
      }
      else
      {
        v27 = (uint64_t *)(8 * v22);
      }
      v30 = v27 + 1;
      v37 = *(_QWORD *)(v16 + 32);
      v36 = *(_QWORD *)(v16 + 40);
      if (v36 == v37)
        goto LABEL_69;
      v38 = v36 - v37 - 8;
      if (v38 < 0x38)
      {
        v40 = *(_QWORD *)(v16 + 40);
      }
      else if ((unint64_t)(v36 - (_QWORD)v27) < 0x20)
      {
        v40 = *(_QWORD *)(v16 + 40);
      }
      else
      {
        v39 = (v38 >> 3) + 1;
        v40 = v36 - 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = v27 - 2;
        v42 = (__int128 *)(v36 - 16);
        v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *v42;
          *((_OWORD *)v41 - 1) = *(v42 - 1);
          *(_OWORD *)v41 = v44;
          v41 -= 4;
          v42 -= 2;
          v43 -= 4;
        }
        while (v43);
        v27 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_68;
      }
      do
      {
        v53 = *(_QWORD *)(v40 - 8);
        v40 -= 8;
        *--v27 = v53;
      }
      while (v40 != v37);
LABEL_68:
      v36 = *(_QWORD *)(v16 + 32);
LABEL_69:
      *(_QWORD *)(v16 + 32) = v27;
      *(_QWORD *)(v16 + 40) = v30;
      v55 = *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 48) = v23;
      if (v36)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v16 + 56) + 40))(*(_QWORD *)(v16 + 56), v36, v55 - v36);
      goto LABEL_71;
    }
  }
  if (v19)
    *v19 = v18;
  v30 = v19 + 1;
LABEL_71:
  *(_QWORD *)(v16 + 40) = v30;
  *(_QWORD *)&v102 = v18;
  v56 = *(_QWORD *)(v16 + 120);
  if (!v56)
    goto LABEL_171;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v56 + 48))(v56, &v102);
  v102 = 0uLL;
  v57 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)&v58 = 0;
  *((_QWORD *)&v58 + 1) = v18;
  v101 = v58;
  if (v57)
    v59 = *(float **)(v18 + 72);
  else
    v59 = 0;
  v102 = v58;
  v103 = 0;
  v104 = v57;
  v106 = v59;
  v105 = 1;
  v60 = *(float *)(a3 + 48);
  v59[1] = -v60;
  *v59 = 1.0 / (float)(*(float *)(a3 + 52) - v60);
  v61 = *(_QWORD *)(v5 + 8);
  v62 = *a2;
  v63 = *(_QWORD *)(v61 + 208);
  if (v63)
  {
    v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v62 >= v63)
        v5 = v62 % v63;
    }
    else
    {
      v5 = (v63 - 1) & v62;
    }
    v65 = *(_QWORD **)(*(_QWORD *)(v61 + 200) + 8 * v5);
    if (v65)
    {
      v66 = (_QWORD *)*v65;
      if (v66)
      {
        if (v64.u32[0] < 2uLL)
        {
          while (1)
          {
            v68 = v66[1];
            if (v68 == v62)
            {
              if (v66[2] == v62)
                goto LABEL_163;
            }
            else if ((v68 & (v63 - 1)) != v5)
            {
              goto LABEL_96;
            }
            v66 = (_QWORD *)*v66;
            if (!v66)
              goto LABEL_96;
          }
        }
        do
        {
          v67 = v66[1];
          if (v67 == v62)
          {
            if (v66[2] == v62)
              goto LABEL_163;
          }
          else
          {
            if (v67 >= v63)
              v67 %= v63;
            if (v67 != v5)
              break;
          }
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
    }
  }
LABEL_96:
  v69 = operator new(0x20uLL);
  *v69 = 0;
  v69[1] = v62;
  v69[2] = v62;
  v69[3] = v18;
  v70 = (float)(unint64_t)(*(_QWORD *)(v61 + 224) + 1);
  v71 = *(float *)(v61 + 232);
  if (!v63 || (float)(v71 * (float)v63) < v70)
  {
    v72 = 1;
    if (v63 >= 3)
      v72 = (v63 & (v63 - 1)) != 0;
    v73 = v72 | (2 * v63);
    v74 = vcvtps_u32_f32(v70 / v71);
    if (v73 <= v74)
      prime = v74;
    else
      prime = v73;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v63 = *(_QWORD *)(v61 + 208);
    }
    if (prime <= v63)
    {
      if (prime >= v63)
        goto LABEL_148;
      v88 = vcvtps_u32_f32((float)*(unint64_t *)(v61 + 224) / *(float *)(v61 + 232));
      if (v63 < 3 || (v89 = (uint8x8_t)vcnt_s8((int8x8_t)v63), v89.i16[0] = vaddlv_u8(v89), v89.u32[0] > 1uLL))
      {
        v88 = std::__next_prime(v88);
      }
      else
      {
        v90 = 1 << -(char)__clz(v88 - 1);
        if (v88 >= 2)
          v88 = v90;
      }
      if (prime <= v88)
        prime = v88;
      if (prime >= v63)
        goto LABEL_148;
      if (!prime)
      {
        v95 = *(void **)(v61 + 200);
        *(_QWORD *)(v61 + 200) = 0;
        if (v95)
          operator delete(v95);
        *(_QWORD *)(v61 + 208) = 0;
        goto LABEL_148;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v76 = operator new(8 * prime);
    v77 = *(void **)(v61 + 200);
    *(_QWORD *)(v61 + 200) = v76;
    if (v77)
      operator delete(v77);
    v78 = 0;
    *(_QWORD *)(v61 + 208) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v61 + 200) + 8 * v78++) = 0;
    while (prime != v78);
    v80 = v61 + 216;
    v79 = *(_QWORD **)(v61 + 216);
    if (!v79)
    {
LABEL_148:
      v63 = *(_QWORD *)(v61 + 208);
      if ((v63 & (v63 - 1)) != 0)
      {
        if (v62 >= v63)
          v5 = v62 % v63;
        else
          v5 = v62;
      }
      else
      {
        v5 = (v63 - 1) & v62;
      }
      goto LABEL_153;
    }
    v81 = v79[1];
    v82 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v83 = v81 & v82;
      *(_QWORD *)(*(_QWORD *)(v61 + 200) + 8 * v83) = v80;
      while (1)
      {
        v84 = (_QWORD *)*v79;
        if (!*v79)
          break;
        v85 = v84[1] & v82;
        if (v85 == v83)
        {
          v79 = (_QWORD *)*v79;
        }
        else
        {
          v86 = *(_QWORD *)(v61 + 200);
          if (*(_QWORD *)(v86 + 8 * v85))
          {
            *v79 = *v84;
            v87 = 8 * v85;
            *v84 = **(_QWORD **)(*(_QWORD *)(v61 + 200) + v87);
            **(_QWORD **)(*(_QWORD *)(v61 + 200) + v87) = v84;
          }
          else
          {
            *(_QWORD *)(v86 + 8 * v85) = v79;
            v79 = v84;
            v83 = v85;
          }
        }
      }
      goto LABEL_148;
    }
    if (v81 >= prime)
      v81 %= prime;
    *(_QWORD *)(*(_QWORD *)(v61 + 200) + 8 * v81) = v80;
    v91 = (_QWORD *)*v79;
    if (!*v79)
      goto LABEL_148;
    while (1)
    {
      v93 = v91[1];
      if (v93 >= prime)
        v93 %= prime;
      if (v93 != v81)
      {
        v94 = *(_QWORD *)(v61 + 200);
        if (!*(_QWORD *)(v94 + 8 * v93))
        {
          *(_QWORD *)(v94 + 8 * v93) = v79;
          goto LABEL_134;
        }
        *v79 = *v91;
        v92 = 8 * v93;
        *v91 = **(_QWORD **)(*(_QWORD *)(v61 + 200) + v92);
        **(_QWORD **)(*(_QWORD *)(v61 + 200) + v92) = v91;
        v91 = v79;
      }
      v93 = v81;
LABEL_134:
      v79 = v91;
      v91 = (_QWORD *)*v91;
      v81 = v93;
      if (!v91)
        goto LABEL_148;
    }
  }
LABEL_153:
  v96 = *(_QWORD *)(v61 + 200);
  v97 = *(_QWORD **)(v96 + 8 * v5);
  if (v97)
  {
    *v69 = *v97;
  }
  else
  {
    *v69 = *(_QWORD *)(v61 + 216);
    *(_QWORD *)(v61 + 216) = v69;
    *(_QWORD *)(v96 + 8 * v5) = v61 + 216;
    if (!*v69)
      goto LABEL_162;
    v98 = *(_QWORD *)(*v69 + 8);
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v98 >= v63)
        v98 %= v63;
    }
    else
    {
      v98 &= v63 - 1;
    }
    v97 = (_QWORD *)(*(_QWORD *)(v61 + 200) + 8 * v98);
  }
  *v97 = v69;
LABEL_162:
  ++*(_QWORD *)(v61 + 224);
LABEL_163:
  if (v57)
  {
    if ((_QWORD)v101 && *(_BYTE *)(*((_QWORD *)&v101 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v101 + 64))();
    v99 = *(_QWORD *)(*((_QWORD *)&v101 + 1) + 64);
    if (v99 <= v57)
      v99 = v57;
    *(_QWORD *)(*((_QWORD *)&v101 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v101 + 1) + 64) = v99;
  }
  return v18;
}

void sub_19FE1AE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a11);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setupDaVinciGroundTileDataBindings<ggl::DaVinci::GroundNonCompressedPipelineSetup>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  v4 = **(_QWORD **)(a2 + 216);
  v7 = *(_QWORD **)(v4 + 120);
  v6 = (_QWORD *)(v4 + 120);
  v5 = v7;
  if (v7)
  {
    v8 = v6;
    v9 = v5;
    do
    {
      v10 = v9[4];
      v11 = v10 == 0;
      if (v10)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (!v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 == v6 || v8[4] > 1uLL)
    {
      v5 = 0;
    }
    else
    {
      while (1)
      {
        while (1)
        {
          v13 = v5[4];
          if (v13 < 2)
            break;
          v5 = (_QWORD *)*v5;
          if (!v5)
            goto LABEL_53;
        }
        if (v13)
          break;
        v5 = (_QWORD *)v5[1];
        if (!v5)
LABEL_53:
          abort();
      }
      v5 = (_QWORD *)v5[5];
    }
  }
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v14 + 16) = v5;
  *(_QWORD *)(v14 + 24) = 0;
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(std::__shared_weak_count **)(v15 + 24);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = **(_QWORD **)(a2 + 216);
  v22 = *(_QWORD **)(v19 + 120);
  v21 = (_QWORD *)(v19 + 120);
  v20 = v22;
  if (v22)
  {
    v23 = v20;
    do
    {
      v24 = v23;
      v23 = (_QWORD *)*v23;
    }
    while (v23);
    if (v24 == v21 || v24[4])
    {
      v20 = 0;
    }
    else
    {
      while (v20[4])
      {
        v20 = (_QWORD *)*v20;
        if (!v20)
          goto LABEL_53;
      }
      v20 = (_QWORD *)v20[5];
    }
  }
  v25 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v25 + 32) = v20;
  *(_QWORD *)(v25 + 40) = 0;
  v26 = *(_QWORD *)(a1 + 128);
  v27 = *(std::__shared_weak_count **)(v26 + 40);
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = **(_QWORD **)(a2 + 216);
  v33 = *(_QWORD **)(v30 + 120);
  v32 = (_QWORD *)(v30 + 120);
  v31 = v33;
  if (v33)
  {
    v34 = v32;
    v35 = v31;
    do
    {
      v36 = v35[4];
      v37 = v36 >= 2;
      if (v36 >= 2)
        v38 = v35;
      else
        v38 = v35 + 1;
      if (v37)
        v34 = v35;
      v35 = (_QWORD *)*v38;
    }
    while (*v38);
    if (v34 == v32 || v34[4] > 2uLL)
    {
      v31 = 0;
    }
    else
    {
      while (1)
      {
        while (1)
        {
          v39 = v31[4];
          if (v39 < 3)
            break;
          v31 = (_QWORD *)*v31;
          if (!v31)
            goto LABEL_53;
        }
        if (v39 == 2)
          break;
        v31 = (_QWORD *)v31[1];
        if (!v31)
          goto LABEL_53;
      }
      v31 = (_QWORD *)v31[5];
    }
  }
  v40 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v40 + 48) = v31;
  *(_QWORD *)(v40 + 56) = 0;
  v41 = *(_QWORD *)(a1 + 128);
  v42 = *(std::__shared_weak_count **)(v41 + 56);
  *(_QWORD *)(v41 + 48) = 0;
  *(_QWORD *)(v41 + 56) = 0;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

float *std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>(_QWORD *a1, float a2, float a3)
{
  unint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  float **v9;
  float *result;
  uint64_t v11;
  unint64_t v13;
  uint64_t v15;

  v3 = LODWORD(a2);
  if (a2 == 0.0)
    v3 = 0;
  v4 = 0x9E3779B97F4A7C15;
  if (a3 != 0.0)
    v4 = LODWORD(a3) - 0x61C8864680B583EBLL;
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = ((v3 >> 2) + (v3 << 6) + v4) ^ v3;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v5)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v5 - 1);
  }
  v9 = *(float ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v15 = *((_QWORD *)result + 1);
        if (v15 == v6)
        {
          if (result[4] == a2 && result[5] == a3)
            return result;
        }
        else if ((v15 & v11) != v8)
        {
          return 0;
        }
        result = *(float **)result;
        if (!result)
          return result;
      }
    }
    do
    {
      v13 = *((_QWORD *)result + 1);
      if (v13 == v6)
      {
        if (result[4] == a2 && result[5] == a3)
          return result;
      }
      else
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
        if (v13 != v8)
          return 0;
      }
      result = *(float **)result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,md::DaVinciGroundRenderLayer::ShinyStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *&>(float *a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  unint64_t v5;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  float **v14;
  float *v15;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;

  v9 = LODWORD(a4);
  if (a4 == 0.0)
    v9 = 0;
  v10 = LODWORD(a5) - 0x61C8864680B583EBLL;
  if (a5 == 0.0)
    v10 = 0x9E3779B97F4A7C15;
  v11 = ((v9 >> 2) + (v9 << 6) + v10) ^ v9;
  v12 = *((_QWORD *)a1 + 1);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v5 = ((v9 >> 2) + (v9 << 6) + v10) ^ v9;
      if (v11 >= v12)
        v5 = v11 % v12;
    }
    else
    {
      v5 = v11 & (v12 - 1);
    }
    v14 = *(float ***)(*(_QWORD *)a1 + 8 * v5);
    if (v14)
    {
      v15 = *v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v15 + 1);
            if (v19 == v11)
            {
              if (v15[4] == a4 && v15[5] == a5)
                return;
            }
            else if ((v19 & (v12 - 1)) != v5)
            {
              goto LABEL_32;
            }
            v15 = *(float **)v15;
            if (!v15)
              goto LABEL_32;
          }
        }
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          if (v17 == v11)
          {
            if (v15[4] == a4 && v15[5] == a5)
              return;
          }
          else
          {
            if (v17 >= v12)
              v17 %= v12;
            if (v17 != v5)
              break;
          }
          v15 = *(float **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_32:
  v20 = operator new(0x20uLL);
  *v20 = 0;
  v20[1] = v11;
  v20[2] = a2;
  v20[3] = a3;
  v21 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v22 = a1[8];
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_69;
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v12 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v12)
      {
        v12 = *((_QWORD *)a1 + 1);
LABEL_69:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v5 = v11 % v12;
          else
            v5 = v11;
        }
        else
        {
          v5 = (v12 - 1) & v11;
        }
        goto LABEL_82;
      }
      if (!prime)
      {
        v47 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v47)
          operator delete(v47);
        v12 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_69;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
    while (prime != v29);
    v31 = (uint64_t *)(a1 + 4);
    v30 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v30)
    {
LABEL_68:
      v12 = prime;
      goto LABEL_69;
    }
    v32 = v30[1];
    v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v34 = v32 & v33;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v31;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v36 = i[1] & v33;
        if (v36 == v34)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *v30 = *i;
          v37 = 8 * v36;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v37);
          **(_QWORD **)(*(_QWORD *)a1 + v37) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v30;
          v30 = i;
          v34 = v36;
        }
      }
      goto LABEL_68;
    }
    if (v32 >= prime)
      v32 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v31;
    v41 = (_QWORD *)*v30;
    if (!*v30)
      goto LABEL_68;
    while (1)
    {
      v43 = v41[1];
      if (v43 >= prime)
        v43 %= prime;
      if (v43 != v32)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v30;
          goto LABEL_73;
        }
        *v30 = *v41;
        v42 = 8 * v43;
        *v41 = **(_QWORD **)(*(_QWORD *)a1 + v42);
        **(_QWORD **)(*(_QWORD *)a1 + v42) = v41;
        v41 = v30;
      }
      v43 = v32;
LABEL_73:
      v30 = v41;
      v41 = (_QWORD *)*v41;
      v32 = v43;
      if (!v41)
        goto LABEL_68;
    }
  }
LABEL_82:
  v44 = *(_QWORD **)a1;
  v45 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v45)
  {
    *v20 = *v45;
LABEL_90:
    *v45 = v20;
    goto LABEL_91;
  }
  *v20 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v20;
  v44[v5] = a1 + 4;
  if (*v20)
  {
    v46 = *(_QWORD *)(*v20 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v46 >= v12)
        v46 %= v12;
    }
    else
    {
      v46 &= v12 - 1;
    }
    v45 = (_QWORD *)(*(_QWORD *)a1 + 8 * v46);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FE1B69C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::DaVinciGroundRenderLayer::DaVinciGroundRenderLayer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  id v7;

  v7 = a3;
  objc_msgSend(*(id *)(a2 + 104), "format");
  v7;
  __asm { BR              X10 }
}

uint64_t sub_19FE1B81C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  _WORD *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  VKSharedResources *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  md::CartographicTiledRenderResources *v57;
  id v58;
  std::__shared_weak_count *v59;
  char v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const ggl::StandardLibrary *v87;
  id v88;
  const RenderTargetFormat *v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  __int16 v92;
  unint64_t *v93;
  unint64_t v94;
  __int16 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  __int16 v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  __int16 v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  __int16 v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  __int16 v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  __int16 v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  __int16 v124;
  unint64_t *v125;
  unint64_t v126;
  int v127;
  _BYTE *v128;
  _BYTE *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  uint64_t v145;
  const RenderTargetFormat *v146;
  char v147;
  const void *v148;
  _WORD *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;

  v145 = v2;
  if (v3)
  {
    objc_msgSend(v3, "standardCommandBufferSelector");
    v144 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 4);
    objc_msgSend(v3, "standardCommandBufferSelector");
    v9 = 8 * v1;
    v10 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 128) + 8) + 2 * ((v4 >> (8 * v1)) & 0x77));
    objc_msgSend(v3, "standardCommandBufferSelector");
    v11 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 144) + 8) + 2 * ((v6 >> (8 * v1)) & 0x3F));
    objc_msgSend(v3, "standardCommandBufferSelector");
    v12 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 160) + 8) + 2 * ((v5 >> (8 * v1)) & 0x27));
    objc_msgSend(v3, "standardCommandBufferSelector");
    v143 = v10;
    v13 = 40;
    if (v1 == 2)
      v13 = 41;
    if (v1 == 3)
      v13 = 44;
    v14 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 176) + 8) + 2 * v13);
    objc_msgSend(v3, "standardCommandBufferSelector");
    v15 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 192) + 8) + 2 * ((v7 >> v9) & 0x43));
    objc_msgSend(v3, "standardCommandBufferSelector");
    v16 = *(_WORD *)(*(_QWORD *)(v158 + 8) + 2 * ((0x3E403F3E3EuLL >> v9) & 0x7F));
    if (v1 == 2)
      v17 = 50529024;
    else
      v17 = 33751552;
    if (v1 == 3)
      v18 = 67306496;
    else
      v18 = v17;
    objc_msgSend(v3, "standardCommandBufferSelector");
    v142 = v11;
    v19 = *(_WORD *)(*(_QWORD *)(v156 + 8) + 92);
    objc_msgSend(v3, "standardCommandBufferSelector");
    v20 = HIWORD(v18);
    v21 = *(_QWORD *)(v154 + 8);
  }
  else
  {
    *(_QWORD *)(v8 - 112) = 0;
    *(_QWORD *)(v8 - 104) = 0;
    v22 = MEMORY[8];
    v144 = *(_WORD *)(MEMORY[8] + 4);
    *(_QWORD *)(v8 - 128) = 0;
    *(_QWORD *)(v8 - 120) = 0;
    v23 = 8 * v1;
    v143 = *(_WORD *)(v22 + 2 * ((v4 >> (8 * v1)) & 0x77));
    *(_QWORD *)(v8 - 144) = 0;
    *(_QWORD *)(v8 - 136) = 0;
    v142 = *(_WORD *)(v22 + 2 * ((v6 >> (8 * v1)) & 0x3F));
    *(_QWORD *)(v8 - 160) = 0;
    *(_QWORD *)(v8 - 152) = 0;
    v12 = *(_WORD *)(v22 + 2 * ((v5 >> (8 * v1)) & 0x27));
    *(_QWORD *)(v8 - 176) = 0;
    *(_QWORD *)(v8 - 168) = 0;
    v24 = 40;
    if (v1 == 2)
    {
      v24 = 41;
      v25 = 50529024;
    }
    else
    {
      v25 = 33751552;
    }
    if (v1 == 3)
      v24 = 44;
    v14 = *(_WORD *)(v22 + 2 * v24);
    *(_QWORD *)(v8 - 192) = 0;
    *(_QWORD *)(v8 - 184) = 0;
    v15 = *(_WORD *)(v22 + 2 * ((v7 >> v23) & 0x43));
    v159 = 0;
    v16 = *(_WORD *)(v22 + 2 * ((0x3E403F3E3EuLL >> v23) & 0x7F));
    if (v1 == 3)
      v18 = 67306496;
    else
      v18 = v25;
    v20 = HIWORD(v18);
    v157 = 0;
    v21 = MEMORY[8];
    v19 = *(_WORD *)(MEMORY[8] + 92);
    v155 = 0;
  }
  v26 = *(_WORD *)(v21 + 140);
  v27 = operator new(0x16uLL);
  *v27 = v144;
  v27[1] = v143;
  v27[2] = v142;
  v27[3] = v12;
  v27[4] = v14;
  v27[5] = v15;
  v27[6] = v16;
  v27[7] = v18;
  v27[8] = v20;
  v27[9] = v19;
  v27[10] = v26;
  if (v155)
  {
    p_shared_owners = (unint64_t *)&v155->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  if (v157)
  {
    v30 = (unint64_t *)&v157->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (v159)
  {
    v32 = (unint64_t *)&v159->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v34 = *(std::__shared_weak_count **)(v8 - 184);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(std::__shared_weak_count **)(v8 - 168);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(v8 - 152);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(std::__shared_weak_count **)(v8 - 136);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(std::__shared_weak_count **)(v8 - 120);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(std::__shared_weak_count **)(v8 - 104);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

  v52 = v151;
  v53 = (char *)operator new(2 * v152);
  memcpy(v53, v148, 2 * v152);
  *(_QWORD *)v0 = off_1E428C468;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  if (v27 + 11 != v27)
  {
    v54 = (char *)operator new(0x16uLL);
    *(_QWORD *)(v0 + 8) = v54;
    v55 = v54 + 22;
    *(_QWORD *)(v0 + 24) = v54 + 22;
    memcpy(v54, v27, 0x16uLL);
    *(_QWORD *)(v0 + 16) = v55;
  }
  *(_QWORD *)&v56 = v53;
  *((_QWORD *)&v56 + 1) = &v53[2 * v152];
  *(_WORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 34) = v147;
  *(_QWORD *)(v0 + 40) = v145;
  *(_WORD *)(v0 + 48) = 0;
  *(_DWORD *)(v0 + 52) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  *(_DWORD *)(v0 + 120) = 1065353216;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 128) = v0 + 136;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = v0 + 160;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = v0 + 184;
  *(_QWORD *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = v0 + 208;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 224) = v0 + 232;
  *(_OWORD *)(v0 + 248) = xmmword_19FFB5430;
  *(_QWORD *)(v0 + 312) = 0;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 320) = v56;
  *(_QWORD *)(v0 + 336) = *((_QWORD *)&v56 + 1);
  *(_DWORD *)(v0 + 344) = 2 * (v153 != 3);
  *(_QWORD *)v0 = off_1E42A9F68;
  *(_QWORD *)(v0 + 352) = 0;
  v57 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v57, v52, v146);
  *(_QWORD *)(v0 + 352) = v57;

  operator delete(v27);
  *(_QWORD *)v0 = &off_1E42A05C0;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_DWORD *)(v0 + 400) = 1065353216;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_DWORD *)(v0 + 440) = 1065353216;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_DWORD *)(v0 + 480) = 1065353216;
  *(_OWORD *)(v0 + 488) = 0u;
  *(_OWORD *)(v0 + 504) = 0u;
  *(_DWORD *)(v0 + 520) = 1065353216;
  *(_OWORD *)(v0 + 528) = 0u;
  *(_OWORD *)(v0 + 544) = 0u;
  *(_DWORD *)(v0 + 560) = 1065353216;
  v58 = *(id *)(v145 + 104);
  md::DaVinciGroundRenderResources::DaVinciGroundRenderResources((md::DaVinciGroundRenderResources *)(v0 + 568), v52, (const RenderTargetFormat *)objc_msgSend(v58, "format"));

  *(_QWORD *)(v0 + 3344) = 0;
  *(_OWORD *)(v0 + 3328) = 0u;
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v59 = *(std::__shared_weak_count **)(v8 - 104);
  v60 = 8 * v153;
  *(_WORD *)(v0 + 3352) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8)
                                   + 2 * ((0x1D24231D1DuLL >> (8 * v153)) & 0x3F));
  if (v59)
  {
    v61 = (unint64_t *)&v59->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v63 = *(std::__shared_weak_count **)(v8 - 104);
  *(_WORD *)(v0 + 3354) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 2 * ((0x2527262525uLL >> v60) & 0x27));
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v66 = *(std::__shared_weak_count **)(v8 - 104);
  v67 = 40;
  if (v153 == 2)
    v67 = 41;
  if (v153 == 3)
    v67 = 44;
  *(_WORD *)(v0 + 3356) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 2 * v67);
  if (v66)
  {
    v68 = (unint64_t *)&v66->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  *(_BYTE *)(v0 + 3358) = 0;
  *(_BYTE *)(v0 + 3361) = 0;
  *(_BYTE *)(v0 + 3364) = 0;
  *(_BYTE *)(v0 + 3367) = 0;
  *(_BYTE *)(v0 + 3370) = 0;
  *(_BYTE *)(v0 + 3373) = 0;
  *(_BYTE *)(v0 + 3376) = 0;
  *(_BYTE *)(v0 + 3379) = 0;
  *(_BYTE *)(v0 + 3382) = 0;
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v70 = *(std::__shared_weak_count **)(v8 - 104);
  v149[13] = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 2 * ((0x3E403F3E3EuLL >> v60) & 0x7F));
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v73 = *(std::__shared_weak_count **)(v8 - 104);
  v149[14] = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 2 * ((0x4143424141uLL >> v60) & 0x43));
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v76 = *(std::__shared_weak_count **)(v8 - 104);
  v149[15] = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 2 * ((0x7377747373uLL >> v60) & 0x77));
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  *(_BYTE *)(v0 + 3391) = 0;
  *(_WORD *)(v0 + 3393) = 0;
  *(_BYTE *)(v0 + 3396) = 0;
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v79 = *(_QWORD *)(*(_QWORD *)(v8 - 128) + 8);
  *(_DWORD *)(v8 - 112) = 0;
  *(_WORD *)(v8 - 108) = *(_WORD *)(v79 + 92);
  -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
  v80 = *(_QWORD *)(*(_QWORD *)(v8 - 144) + 8);
  *(_DWORD *)(v8 - 104) = 1;
  *(_WORD *)(v8 - 100) = *(_WORD *)(v80 + 140);
  std::map<md::DrapedPolygonPlacement,md::CommandBufferLocation>::map[abi:nn180100]((uint64_t **)(v0 + 3400), (int *)(v8 - 112), 2);
  v81 = *(std::__shared_weak_count **)(v8 - 136);
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *(std::__shared_weak_count **)(v8 - 120);
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = -[VKSharedResources shaderLibrary](v52, "shaderLibrary");
  v88 = *(id *)(v145 + 104);
  v89 = (const RenderTargetFormat *)objc_msgSend(v88, "format");
  v90 = operator new(0x348uLL);
  v90[1] = 0;
  v90[2] = 0;
  *v90 = &off_1E42DDA48;
  *(_QWORD *)(v0 + 3424) = md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources((md::ElevatedPolygonRenderResources *)(v90 + 3), v87, v89);
  *(_QWORD *)(v0 + 3432) = v90;

  *(_OWORD *)(v0 + 3456) = 0u;
  *(_OWORD *)(v0 + 3440) = 0u;
  *(_DWORD *)(v0 + 3472) = 1065353216;
  *(_OWORD *)(v0 + 3480) = 0u;
  *(_OWORD *)(v0 + 3496) = 0u;
  *(_DWORD *)(v0 + 3512) = 1065353216;
  *(_OWORD *)(v0 + 3520) = 0u;
  *(_OWORD *)(v0 + 3536) = 0u;
  *(_DWORD *)(v0 + 3552) = 1065353216;
  *(_BYTE *)(v0 + 3560) = v153;
  *(_BYTE *)(v0 + 3608) = 0;
  *(_BYTE *)(v0 + 3616) = 0;
  *(_BYTE *)(v0 + 3632) = 0;
  *(_QWORD *)(v0 + 3640) = 0;
  *(_QWORD *)(v0 + 3656) = 0;
  *(_QWORD *)(v0 + 3648) = 0;
  *(_OWORD *)(v0 + 3568) = 0u;
  *(_OWORD *)(v0 + 3584) = 0u;
  *(_BYTE *)(v0 + 3600) = 0;
  if (v153 == 1)
  {
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v91 = *(std::__shared_weak_count **)(v8 - 104);
    v92 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 4);
    if (!v91)
      goto LABEL_193;
    v93 = (unint64_t *)&v91->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      if (*(_BYTE *)(v0 + 3358))
        goto LABEL_120;
    }
    else
    {
LABEL_193:
      if (*(_BYTE *)(v0 + 3358))
      {
LABEL_120:
        *v149 = v92;
        -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
        v95 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 92);
        if (!*(_BYTE *)(v0 + 3393))
          *(_BYTE *)(v0 + 3393) = 1;
        v149[16] = v95;
        v96 = *(std::__shared_weak_count **)(v8 - 104);
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
        v99 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 140);
        if (!*(_BYTE *)(v0 + 3396))
          *(_BYTE *)(v0 + 3396) = 1;
        *(_WORD *)(v0 + 3394) = v99;
        v100 = *(std::__shared_weak_count **)(v8 - 104);
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        goto LABEL_177;
      }
    }
    *(_BYTE *)(v0 + 3358) = 1;
    goto LABEL_120;
  }
  if (v153 == 2)
  {
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v103 = *(std::__shared_weak_count **)(v8 - 104);
    v104 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 176);
    if (v103)
    {
      v105 = (unint64_t *)&v103->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (!*(_BYTE *)(v0 + 3361))
      *(_BYTE *)(v0 + 3361) = 1;
    *(_WORD *)(v0 + 3362) = v104;
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v107 = *(std::__shared_weak_count **)(v8 - 104);
    v108 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 178);
    if (v107)
    {
      v109 = (unint64_t *)&v107->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    if (!*(_BYTE *)(v0 + 3364))
      *(_BYTE *)(v0 + 3364) = 1;
    v149[3] = v108;
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v111 = *(std::__shared_weak_count **)(v8 - 104);
    v112 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 180);
    if (v111)
    {
      v113 = (unint64_t *)&v111->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    if (!*(_BYTE *)(v0 + 3367))
      *(_BYTE *)(v0 + 3367) = 1;
    *(_WORD *)(v0 + 3368) = v112;
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v115 = *(std::__shared_weak_count **)(v8 - 104);
    v116 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 166);
    if (v115)
    {
      v117 = (unint64_t *)&v115->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    if (!*(_BYTE *)(v0 + 3370))
      *(_BYTE *)(v0 + 3370) = 1;
    v149[6] = v116;
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v119 = *(std::__shared_weak_count **)(v8 - 104);
    v120 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 168);
    if (v119)
    {
      v121 = (unint64_t *)&v119->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    if (!*(_BYTE *)(v0 + 3373))
      *(_BYTE *)(v0 + 3373) = 1;
    *(_WORD *)(v0 + 3374) = v120;
    -[VKSharedResources standardCommandBufferSelector](v52, "standardCommandBufferSelector");
    v123 = *(std::__shared_weak_count **)(v8 - 104);
    v124 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 - 112) + 8) + 170);
    if (v123)
    {
      v125 = (unint64_t *)&v123->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v127 = *(unsigned __int8 *)(v0 + 3376);
    v149[9] = v124;
    if (!v127)
      *(_BYTE *)(v0 + 3376) = 1;
  }
LABEL_177:
  v128 = *(_BYTE **)(v0 + 3328);
  if (*(_QWORD *)(v0 + 3344) - (_QWORD)v128 > 0x1FFuLL)
    goto LABEL_188;
  v129 = *(_BYTE **)(v0 + 3336);
  v130 = (char *)operator new(0x200uLL);
  v131 = v129 - v128;
  v132 = &v130[(v129 - v128) & 0xFFFFFFFFFFFFFFF8];
  v133 = v132;
  if (v129 != v128)
  {
    if ((unint64_t)(v131 - 8) < 0x58)
    {
      v133 = &v130[(v129 - v128) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_185:
        v140 = *((_QWORD *)v129 - 1);
        v129 -= 8;
        *((_QWORD *)v133 - 1) = v140;
        v133 -= 8;
      }
      while (v129 != v128);
      goto LABEL_186;
    }
    v133 = &v130[(v129 - v128) & 0xFFFFFFFFFFFFFFF8];
    if (v129 - v130 - (v131 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_185;
    v134 = v131 >> 3;
    v135 = ((unint64_t)(v131 - 8) >> 3) + 1;
    v136 = &v130[8 * v134 - 16];
    v137 = (__int128 *)(v129 - 16);
    v138 = v135 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v139 = *v137;
      *((_OWORD *)v136 - 1) = *(v137 - 1);
      *(_OWORD *)v136 = v139;
      v136 -= 32;
      v137 -= 2;
      v138 -= 4;
    }
    while (v138);
    v133 = &v132[-8 * (v135 & 0x3FFFFFFFFFFFFFFCLL)];
    v129 -= 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
    if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_185;
  }
LABEL_186:
  *(_QWORD *)(v0 + 3328) = v133;
  *(_QWORD *)(v0 + 3336) = v132;
  *(_QWORD *)(v0 + 3344) = v130 + 512;
  if (v128)
    operator delete(v128);
LABEL_188:

  return v0;
}

void sub_19FE1CE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, md::DaVinciGroundRenderResources *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34)
{
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  if (a28)
  {
    v38 = (unint64_t *)&a28->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
      std::__shared_weak_count::__release_weak(a28);
    }
  }
  if (a30)
  {
    v40 = (unint64_t *)&a30->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
      std::__shared_weak_count::__release_weak(a30);
    }
  }
  if (a32)
  {
    v42 = (unint64_t *)&a32->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
      std::__shared_weak_count::__release_weak(a32);
    }
  }
  if (a34)
  {
    v44 = (unint64_t *)&a34->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
      std::__shared_weak_count::__release_weak(a34);
    }
  }
  v46 = *(std::__shared_weak_count **)(v34 - 184);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(std::__shared_weak_count **)(v34 - 168);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(std::__shared_weak_count **)(v34 - 152);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *(std::__shared_weak_count **)(v34 - 136);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = *(std::__shared_weak_count **)(v34 - 120);
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = *(std::__shared_weak_count **)(v34 - 104);
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }

  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setSupportsVKM(md::DaVinciGroundRenderLayer *this, int a2)
{
  NSObject *v3;
  int v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 33) != a2)
  {
    *((_BYTE *)this + 33) = a2;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *((unsigned __int8 *)this + 3560);
      v5 = *((unsigned __int8 *)this + 33);
      v6[0] = 67109376;
      v6[1] = v4;
      v7 = 1024;
      v8 = v5;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_INFO, "[FeatureFlag]DaVinciGroundRenderLayer(%d):%d", (uint8_t *)v6, 0xEu);
    }

  }
}

void md::DaVinciGroundRenderLayer::resetRibbonECS(md::DaVinciGroundRenderLayer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t k;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t m;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t n;
  uint64_t v22;

  md::DaVinciGroundRenderResources::resetPools((md::DaVinciGroundRenderLayer *)((char *)this + 568));
  if (*((_QWORD *)this + 69))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 68);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *((_QWORD *)this + 68) = 0;
    v4 = *((_QWORD *)this + 67);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*((_QWORD *)this + 66) + 8 * i) = 0;
    }
    *((_QWORD *)this + 69) = 0;
  }
  if (*((_QWORD *)this + 59))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 58);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 58) = 0;
    v8 = *((_QWORD *)this + 57);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*((_QWORD *)this + 56) + 8 * j) = 0;
    }
    *((_QWORD *)this + 59) = 0;
  }
  if (*((_QWORD *)this + 54))
  {
    v10 = (_QWORD *)*((_QWORD *)this + 53);
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    *((_QWORD *)this + 53) = 0;
    v12 = *((_QWORD *)this + 52);
    if (v12)
    {
      for (k = 0; k != v12; ++k)
        *(_QWORD *)(*((_QWORD *)this + 51) + 8 * k) = 0;
    }
    *((_QWORD *)this + 54) = 0;
  }
  if (*((_QWORD *)this + 64))
  {
    v14 = (_QWORD *)*((_QWORD *)this + 63);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    *((_QWORD *)this + 63) = 0;
    v16 = *((_QWORD *)this + 62);
    if (v16)
    {
      for (m = 0; m != v16; ++m)
        *(_QWORD *)(*((_QWORD *)this + 61) + 8 * m) = 0;
    }
    *((_QWORD *)this + 64) = 0;
  }
  if (*((_QWORD *)this + 49))
  {
    v18 = (_QWORD *)*((_QWORD *)this + 48);
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    *((_QWORD *)this + 48) = 0;
    v20 = *((_QWORD *)this + 47);
    if (v20)
    {
      for (n = 0; n != v20; ++n)
        *(_QWORD *)(*((_QWORD *)this + 46) + 8 * n) = 0;
    }
    *((_QWORD *)this + 49) = 0;
  }
  md::ElevatedPolygonRenderResources::resetPools(*((void (****)(void))this + 428));
  v22 = *((_QWORD *)this + 428);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v22 + 792));
  *(_QWORD *)(v22 + 784) = v22 + 792;
  *(_QWORD *)(v22 + 800) = 0;
  *(_QWORD *)(v22 + 792) = 0;
}

void md::LabelMetrics::initialize(uint64_t a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  float v6;
  float v7;
  const char *v8;
  unint64_t v9;
  void **v10;
  NSObject *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  _BYTE *v19;
  size_t v20;
  char **v21;
  int v22;
  char *v23;
  size_t v24;
  size_t v25;
  int v26;
  int v27;
  char *v28;
  size_t v29;
  size_t v30;
  int v31;
  char *v32;
  char *v33;
  char v34;
  const char *v35;
  size_t v36;
  size_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  float v52;
  float v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  float v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  float v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t *v101;
  void *__b[2];
  unsigned __int8 v103;
  void (**v104)(md::StyleSettingsObjectNode *__hidden);
  char *v105[2];
  char v106;
  _BYTE __p[24];
  const char *v108;
  __int16 v109;
  int v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v4 = *(char **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v4) >> 2) <= 3)
  {
    v5 = (char *)operator new(0x90uLL);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v5 + 144;
    if (v4)
      operator delete(v4);
  }
  v6 = 1.3;
  v7 = 1.0;
  if (*(_BYTE *)(a1 + 25) == 4)
    v6 = 1.0;
  *(float *)(a1 + 28) = v6;
  v8 = "car";
  if (!*(_BYTE *)(a1 + 24))
  {
    memset_pattern16(__b, &unk_19FFB6370, 0x78uLL);
    md::LabelStyleContext::initialize((md::LabelStyleContext *)__b, a2);
    v7 = *((float *)__b + 5 * *(unsigned __int8 *)(a1 + 26));
    if (!*(_BYTE *)(a1 + 24))
      v8 = "default";
  }
  *(float *)(a1 + 32) = v7;
  *(_QWORD *)__p = operator new(0x4A8uLL);
  *(_OWORD *)&__p[8] = xmmword_19FFB5F00;
  strcpy(*(char **)__p, "\n{\n    default: {\n        search-result: {\n            icon: { size: [23, 23] },\n            text: { glyph-size: [6, 12], anchor: [0, 17] },\n        },\n        selected-search-result: {\n            icon: { size: [68, 87], anchor: [0, -45]  },\n            text: { glyph-size: [6, 12], anchor: [0, 11] },\n        },\n        waypoint: {\n            icon: { size: [42, 40], anchor: [0, -23] },\n            text: { glyph-size: [7, 14], anchor: [0, 10] },\n        },\n        anchorpoint: {\n            icon: { size: [27, 27] },\n            text: { glyph-size: [7, 14], anchor: [0, 17] },\n"
    "        },\n"
    "    },\n"
    "    car: {\n"
    "        search-result: {\n"
    "            icon: { size: [22, 22] },\n"
    "            text: { glyph-size: [6, 12], anchor: [0, 20] },\n"
    "        },\n"
    "        selected-search-result: {\n"
    "            icon: { size: [33, 36], anchor: [0, -20] },\n"
    "            text: { glyph-size: [6, 12], anchor: [0, 8] },\n"
    "        },\n"
    "        waypoint: {\n"
    "            icon: { size: [33, 36], anchor: [0, -20] },\n"
    "            text: { glyph-size: [6, 12], anchor: [0, 8] },\n"
    "        },\n"
    "        anchorpoint: {\n"
    "            icon: { size: [27, 27] },\n"
    "            text: { glyph-size: [7, 14], anchor: [0, 17] },\n"
    "        },\n"
    "    }\n"
    "}\n");
  md::StyleSettingsParser::StyleSettingsParser((uint64_t)__b, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v9 = v103;
  if ((v103 & 0x80u) == 0)
    v10 = __b;
  else
    v10 = (void **)__b[0];
  if ((v103 & 0x80u) != 0)
    v9 = (unint64_t)__b[1];
  *(_QWORD *)__p = v10;
  *(_QWORD *)&__p[8] = v9;
  md::StyleSettingsParser::parseNode((uint64_t)__b, (uint64_t)&v104, (unsigned __int8 **)__p);
  if (v106)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v11 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "\n"
                           "{\n"
                           "    default: {\n"
                           "        search-result: {\n"
                           "            icon: { size: [23, 23] },\n"
                           "            text: { glyph-size: [6, 12], anchor: [0, 17] },\n"
                           "        },\n"
                           "        selected-search-result: {\n"
                           "            icon: { size: [68, 87], anchor: [0, -45]  },\n"
                           "            text: { glyph-size: [6, 12], anchor: [0, 11] },\n"
                           "        },\n"
                           "        waypoint: {\n"
                           "            icon: { size: [42, 40], anchor: [0, -23] },\n"
                           "            text: { glyph-size: [7, 14], anchor: [0, 10] },\n"
                           "        },\n"
                           "        anchorpoint: {\n"
                           "            icon: { size: [27, 27] },\n"
                           "            text: { glyph-size: [7, 14], anchor: [0, 17] },\n"
                           "        },\n"
                           "    },\n"
                           "    car: {\n"
                           "        search-result: {\n"
                           "            icon: { size: [22, 22] },\n"
                           "            text: { glyph-size: [6, 12], anchor: [0, 20] },\n"
                           "        },\n"
                           "        selected-search-result: {\n"
                           "            icon: { size: [33, 36], anchor: [0, -20] },\n"
                           "            text: { glyph-size: [6, 12], anchor: [0, 8] },\n"
                           "        },\n"
                           "        waypoint: {\n"
                           "            icon: { size: [33, 36], anchor: [0, -20] },\n"
                           "            text: { glyph-size: [6, 12], anchor: [0, 8] },\n"
                           "        },\n"
                           "        anchorpoint: {\n"
                           "            icon: { size: [27, 27] },\n"
                           "            text: { glyph-size: [7, 14], anchor: [0, 17] },\n"
                           "        },\n"
                           "    }\n"
                           "}\n";
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = "false";
      *(_WORD *)&__p[22] = 2080;
      v108 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelMetrics.mm";
      v109 = 1024;
      v110 = 159;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "LabelMetrics: unable to parse LabelMetrics options: %s: Assertion with expression - %s : Failed in file - %s line - %i", __p, 0x26u);
    }

    goto LABEL_22;
  }
  v12 = strlen(v8);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&__p[8] = v13;
    *(_QWORD *)&__p[16] = v16 | 0x8000000000000000;
    *(_QWORD *)__p = v14;
  }
  else
  {
    __p[23] = v12;
    v14 = __p;
    if (!v12)
      goto LABEL_33;
  }
  memcpy(v14, v8, v13);
LABEL_33:
  v14[v13] = 0;
  v17 = v105[0];
  v18 = __p[23];
  if (!v105[0])
    goto LABEL_74;
  if (__p[23] >= 0)
    v19 = __p;
  else
    v19 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v20 = __p[23];
  else
    v20 = *(_QWORD *)&__p[8];
  v21 = v105;
  do
  {
    while (1)
    {
      v22 = v17[55];
      v23 = v22 >= 0 ? v17 + 32 : (char *)*((_QWORD *)v17 + 4);
      v24 = v22 >= 0 ? v17[55] : *((_QWORD *)v17 + 5);
      v25 = v20 >= v24 ? v24 : v20;
      v26 = memcmp(v23, v19, v25);
      if (v26)
        break;
      if (v24 >= v20)
        goto LABEL_55;
LABEL_41:
      v17 = (char *)*((_QWORD *)v17 + 1);
      if (!v17)
        goto LABEL_56;
    }
    if (v26 < 0)
      goto LABEL_41;
LABEL_55:
    v21 = (char **)v17;
    v17 = *(char **)v17;
  }
  while (v17);
LABEL_56:
  if (v21 == v105)
    goto LABEL_74;
  v27 = *((char *)v21 + 55);
  if (v27 >= 0)
    v28 = (char *)(v21 + 4);
  else
    v28 = v21[4];
  if (v27 >= 0)
    v29 = *((unsigned __int8 *)v21 + 55);
  else
    v29 = (size_t)v21[5];
  if (v29 >= v20)
    v30 = v20;
  else
    v30 = v29;
  v31 = memcmp(v19, v28, v30);
  if (v31)
  {
    if ((v31 & 0x80000000) == 0)
      goto LABEL_68;
LABEL_74:
    v32 = 0;
    if (v18 < 0)
      goto LABEL_75;
  }
  else
  {
    if (v20 < v29)
      goto LABEL_74;
LABEL_68:
    if (v21[7][8] == 1)
      v32 = v21[7];
    else
      v32 = 0;
    if (v18 < 0)
LABEL_75:
      operator delete(*(void **)__p);
  }
  if (v32)
  {
    v100 = (uint64_t)(v32 + 16);
    v101 = (uint64_t *)(v32 + 24);
    v33 = &metricInfos;
    while (1)
    {
      v34 = *v33;
      v35 = (const char *)*((_QWORD *)v33 + 1);
      v36 = strlen(v35);
      if (v36 > 0x7FFFFFFFFFFFFFF7)
LABEL_178:
        abort();
      v37 = v36;
      if (v36 >= 0x17)
        break;
      __p[23] = v36;
      v38 = __p;
      if (v36)
        goto LABEL_87;
LABEL_88:
      v38[v37] = 0;
      v41 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v100, (const void **)__p);
      if (v101 == v41)
      {
        v42 = 0;
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_93;
      }
      else
      {
        if (*(_BYTE *)(v41[7] + 8) == 1)
          v42 = v41[7];
        else
          v42 = 0;
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_93:
          if (!v42)
            goto LABEL_174;
          goto LABEL_97;
        }
      }
      operator delete(*(void **)__p);
      if (!v42)
        goto LABEL_174;
LABEL_97:
      __p[23] = 4;
      strcpy(__p, "icon");
      v43 = v42 + 16;
      v44 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v42 + 16, (const void **)__p);
      v45 = (uint64_t *)(v42 + 24);
      if ((uint64_t *)(v42 + 24) == v44 || (v46 = v44[7], *(_BYTE *)(v46 + 8) != 1))
      {
LABEL_174:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v99 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = v35;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = "false";
          *(_WORD *)&__p[22] = 2080;
          v108 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelMetrics.mm";
          v109 = 1024;
          v110 = 216;
          _os_log_impl(&dword_19F029000, v99, OS_LOG_TYPE_ERROR, "LabelMetrics: unable to parse LabelMetrics type: %s: Assertion with expression - %s : Failed in file - %s line - %i", __p, 0x26u);
        }

        goto LABEL_79;
      }
      __p[23] = 4;
      strcpy(__p, "size");
      v47 = v46 + 16;
      v48 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v46 + 16, (const void **)__p);
      v49 = (uint64_t *)(v46 + 24);
      if ((uint64_t *)(v46 + 24) == v48 || (v50 = v48[7], *(_BYTE *)(v50 + 8) != 2))
      {
        v52 = 0.0;
        v53 = 0.0;
      }
      else
      {
        v51 = *(_QWORD **)(v50 + 16);
        v52 = 0.0;
        v53 = 0.0;
        if (*(_QWORD *)(v50 + 24) - (_QWORD)v51 == 16)
        {
          if (*(_BYTE *)(*v51 + 8)
            || ((v54 = md::StyleSettingsValueNode::value_as<float>(*(void **)(*v51 + 16), *(_QWORD *)(*v51 + 24)),
                 v51 = *(_QWORD **)(v50 + 16),
                 HIDWORD(v54))
              ? (v53 = *(float *)&v54)
              : (v53 = 0.0),
                *(_QWORD *)(v50 + 24) - (_QWORD)v51 >= 9uLL))
          {
            v55 = v51[1];
            if (!*(_BYTE *)(v55 + 8))
            {
              v56 = md::StyleSettingsValueNode::value_as<float>(*(void **)(v55 + 16), *(_QWORD *)(v55 + 24));
              if ((v56 & 0xFF00000000) != 0)
                v52 = *(float *)&v56;
            }
          }
        }
      }
      __p[23] = 6;
      strcpy(__p, "anchor");
      v57 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v47, (const void **)__p);
      if (v49 != v57
        && (v58 = v57[7], *(_BYTE *)(v58 + 8) == 2)
        && (v59 = *(_QWORD **)(v58 + 16), *(_QWORD *)(v58 + 24) - (_QWORD)v59 == 16))
      {
        v60 = 0.0;
        if ((*(_BYTE *)(*v59 + 8)
           || ((v61 = md::StyleSettingsValueNode::value_as<float>(*(void **)(*v59 + 16), *(_QWORD *)(*v59 + 24)),
                v59 = *(_QWORD **)(v58 + 16),
                HIDWORD(v61))
             ? (v60 = *(float *)&v61)
             : (v60 = 0.0),
               *(_QWORD *)(v58 + 24) - (_QWORD)v59 >= 9uLL))
          && (v62 = v59[1], !*(_BYTE *)(v62 + 8))
          && (v96 = md::StyleSettingsValueNode::value_as<float>(*(void **)(v62 + 16), *(_QWORD *)(v62 + 24)),
              (v96 & 0xFF00000000) != 0))
        {
          v63 = v96;
        }
        else
        {
          v63 = 0;
        }
      }
      else
      {
        v63 = 0;
        v60 = 0.0;
      }
      __p[23] = 4;
      strcpy(__p, "text");
      v64 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v43, (const void **)__p);
      if (v45 == v64 || (v65 = v64[7], *(_BYTE *)(v65 + 8) != 1))
      {
        v75 = 0;
        v74 = 0;
        v76 = 0.0;
        v71 = 0.0;
        if (v53 <= 0.0)
          goto LABEL_174;
      }
      else
      {
        __p[23] = 10;
        strcpy(__p, "glyph-size");
        v66 = v65 + 16;
        v67 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v65 + 16, (const void **)__p);
        v68 = (uint64_t *)(v65 + 24);
        if ((uint64_t *)(v65 + 24) != v67
          && (v69 = v67[7], *(_BYTE *)(v69 + 8) == 2)
          && (v70 = *(_QWORD **)(v69 + 16), *(_QWORD *)(v69 + 24) - (_QWORD)v70 == 16))
        {
          v71 = 12.0;
          if ((*(_BYTE *)(*v70 + 8)
             || ((v72 = md::StyleSettingsValueNode::value_as<float>(*(void **)(*v70 + 16), *(_QWORD *)(*v70 + 24)),
                  v70 = *(_QWORD **)(v69 + 16),
                  HIDWORD(v72))
               ? (v71 = *(float *)&v72)
               : (v71 = 12.0),
                 *(_QWORD *)(v69 + 24) - (_QWORD)v70 >= 9uLL))
            && (v73 = v70[1], !*(_BYTE *)(v73 + 8))
            && (v97 = md::StyleSettingsValueNode::value_as<float>(*(void **)(v73 + 16), *(_QWORD *)(v73 + 24)),
                (v97 & 0xFF00000000) != 0))
          {
            v74 = v97;
          }
          else
          {
            v74 = 1094713344;
          }
        }
        else
        {
          v74 = 0;
          v71 = 0.0;
        }
        __p[23] = 6;
        strcpy(__p, "anchor");
        v77 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v66, (const void **)__p);
        if (v68 != v77
          && (v78 = v77[7], *(_BYTE *)(v78 + 8) == 2)
          && (v79 = *(_QWORD **)(v78 + 16), *(_QWORD *)(v78 + 24) - (_QWORD)v79 == 16))
        {
          v76 = 0.0;
          if ((*(_BYTE *)(*v79 + 8)
             || ((v80 = md::StyleSettingsValueNode::value_as<float>(*(void **)(*v79 + 16), *(_QWORD *)(*v79 + 24)),
                  v79 = *(_QWORD **)(v78 + 16),
                  HIDWORD(v80))
               ? (v76 = *(float *)&v80)
               : (v76 = 0.0),
                 *(_QWORD *)(v78 + 24) - (_QWORD)v79 >= 9uLL))
            && (v81 = v79[1], !*(_BYTE *)(v81 + 8))
            && (v98 = md::StyleSettingsValueNode::value_as<float>(*(void **)(v81 + 16), *(_QWORD *)(v81 + 24)),
                (v98 & 0xFF00000000) != 0))
          {
            v75 = v98;
            if (v53 <= 0.0)
              goto LABEL_174;
          }
          else
          {
            v75 = 0;
            if (v53 <= 0.0)
              goto LABEL_174;
          }
        }
        else
        {
          v75 = 0;
          v76 = 0.0;
          if (v53 <= 0.0)
            goto LABEL_174;
        }
      }
      if (v52 <= 0.0)
        goto LABEL_174;
      v83 = *(char **)(a1 + 8);
      v82 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v83 >= v82)
      {
        v84 = *(char **)a1;
        v85 = 0x8E38E38E38E38E39 * ((uint64_t)&v83[-*(_QWORD *)a1] >> 2);
        v86 = v85 + 1;
        if (v85 + 1 > 0x71C71C71C71C71CLL)
          goto LABEL_178;
        v87 = v63;
        v88 = 0x8E38E38E38E38E39 * ((uint64_t)(v82 - (_QWORD)v84) >> 2);
        if (2 * v88 > v86)
          v86 = 2 * v88;
        if (v88 >= 0x38E38E38E38E38ELL)
          v89 = 0x71C71C71C71C71CLL;
        else
          v89 = v86;
        if (v89)
        {
          if (v89 > 0x71C71C71C71C71CLL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v90 = (char *)operator new(36 * v89);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[36 * v85];
        *v91 = v34;
        *(_WORD *)(v91 + 1) = *(_WORD *)__p;
        v91[3] = __p[2];
        *((float *)v91 + 1) = v53;
        *((float *)v91 + 2) = v52;
        *((float *)v91 + 3) = v71;
        *((_DWORD *)v91 + 4) = v74;
        *((float *)v91 + 5) = v60;
        *((_DWORD *)v91 + 6) = v87;
        *((float *)v91 + 7) = v76;
        *((_DWORD *)v91 + 8) = v75;
        v92 = v91;
        if (v83 != v84)
        {
          do
          {
            v93 = *(_OWORD *)(v83 - 36);
            v94 = *(_OWORD *)(v83 - 20);
            *((_DWORD *)v92 - 1) = *((_DWORD *)v83 - 1);
            *(_OWORD *)(v92 - 20) = v94;
            *(_OWORD *)(v92 - 36) = v93;
            v92 -= 36;
            v83 -= 36;
          }
          while (v83 != v84);
          v83 = *(char **)a1;
        }
        v95 = v91 + 36;
        *(_QWORD *)a1 = v92;
        *(_QWORD *)(a1 + 8) = v91 + 36;
        *(_QWORD *)(a1 + 16) = &v90[36 * v89];
        if (v83)
          operator delete(v83);
        *(_QWORD *)(a1 + 8) = v95;
      }
      else
      {
        *v83 = v34;
        *(_WORD *)(v83 + 1) = *(_WORD *)__p;
        v83[3] = __p[2];
        *((float *)v83 + 1) = v53;
        *((float *)v83 + 2) = v52;
        *((float *)v83 + 3) = v71;
        *((_DWORD *)v83 + 4) = v74;
        *((float *)v83 + 5) = v60;
        *((_DWORD *)v83 + 6) = v63;
        *((float *)v83 + 7) = v76;
        *((_DWORD *)v83 + 8) = v75;
        *(_QWORD *)(a1 + 8) = v83 + 36;
      }
LABEL_79:
      v33 += 16;
      if (v33 == (char *)&__block_literal_global_34696)
        goto LABEL_22;
    }
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    *(_QWORD *)&__p[8] = v37;
    *(_QWORD *)&__p[16] = v40 | 0x8000000000000000;
    *(_QWORD *)__p = v38;
LABEL_87:
    memmove(v38, v35, v37);
    goto LABEL_88;
  }
LABEL_22:
  v104 = &off_1E429F8B0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(v105[0]);
  if ((char)v103 < 0)
    operator delete(__b[0]);
}

void sub_19FE1E7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(a23);
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::LabelMetrics::boundingRectForItem(uint64_t a1, unsigned __int8 **a2, int a3, __int128 *a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  void *v18;
  unint64_t v19;
  CGFont *v20;
  unsigned __int8 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned __int8 v30;
  uint64_t v31;
  int64x2_t *v32;
  unint64_t v33;
  int64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64x2_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  int64x2_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const double *v54;
  int8x16_t v55;
  int8x16_t v56;
  const double *v57;
  unsigned __int128 v58;
  unsigned __int128 v59;
  int8x16_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  BOOL v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86[3];
  char v87;
  int64x2_t *v88;
  uint64_t *v89;
  int64x2_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;

  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    while (*v6 != a3)
    {
      v6 += 36;
      if (v6 == v5)
        goto LABEL_4;
    }
    v10 = *((float *)a2 + 7);
    v11 = *((float *)v6 + 1);
    v12 = *((float *)v6 + 2);
    v13 = *((float *)v6 + 5);
    v14 = *((float *)v6 + 6);
    v15 = *((unsigned __int8 *)a4 + 23);
    if ((v15 & 0x80u) != 0)
      v15 = *((_QWORD *)a4 + 1);
    if (!v15 || (v92 = 0, !*(_QWORD *)(v6 + 12)))
    {
      v26 = -3.4028e38;
      v27 = 3.4028e38;
      v28 = 3.4028e38;
      v29 = -3.4028e38;
LABEL_66:
      *(float *)a1 = fminf(v27, -(float)(v13 - (float)((float)(v11 * v10) * -0.5)));
      *(float *)(a1 + 4) = fminf(v28, -(float)(v14 - (float)((float)(v12 * v10) * -0.5)));
      *(float *)(a1 + 8) = fmaxf((float)(v11 * v10) - (float)(v13 - (float)((float)(v11 * v10) * -0.5)), v26);
      *(float *)(a1 + 12) = fmaxf((float)(v12 * v10) - (float)(v14 - (float)((float)(v12 * v10) * -0.5)), v29);
      v9 = 1;
      goto LABEL_67;
    }
    v16 = (char *)operator new();
    md::TextDataStringInfo::TextDataStringInfo(v16, a4, a4 + 2, 0xFFFF);
    if (*((char *)a4 + 23) >= 0)
      v17 = (uint64_t *)a4;
    else
      v17 = *(uint64_t **)a4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "length");
    v20 = CGFontRetain(0);
    v92 = 0;
    v93 = 0;
    v94 = 0;
    {
      v78 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v78, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v95 = mdm::Allocator::instance(void)::alloc;
    if (v19)
    {
      v81 = v16;
      if (v19 >= 0xAAAAAAAAAAAAAABLL)
        abort();
      v22 = v18;
      v23 = 24 * v19;
      v24 = (*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
      v25 = v24 + 24 * v19;
      v92 = v24;
      v94 = v25;
      do
      {
        if (v24)
        {
          *(_WORD *)v24 = 0;
          *(_QWORD *)(v24 + 8) = CGFontRetain(v20);
          *(_DWORD *)(v24 + 16) = 0;
          *(_BYTE *)(v24 + 20) &= 0xC0u;
        }
        v24 += 24;
        v23 -= 24;
      }
      while (v23);
      v93 = v25;
      v16 = v81;
      v18 = v22;
    }
    v88 = 0;
    v89 = 0;
    v90 = 0;
    {
      v79 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v91 = mdm::Allocator::instance(void)::alloc;
    if (v19)
    {
      if (v19 >> 61)
        abort();
      v31 = 8 * v19;
      v32 = (int64x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
      v33 = 0;
      v34 = (int64x2_t *)((char *)v32 + 8 * v19);
      v88 = v32;
      v90 = v34;
      do
      {
        if (&v32->i8[v33])
          v32->i64[v33 / 8] = 0;
        v33 += 8;
      }
      while (v31 != v33);
      v89 = &v32->i64[(unint64_t)v31 / 8];
      v35 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v35 >= 3)
      {
        v37 = v35 + 1;
        v36 = (v35 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v38 = (int64x2_t)xmmword_19FFB2E40;
        v39 = v32 + 1;
        v40 = vdupq_n_s64(2uLL);
        v41 = vdupq_n_s64(4uLL);
        v42 = v36;
        do
        {
          v39[-1] = v38;
          *v39 = vaddq_s64(v38, v40);
          v38 = vaddq_s64(v38, v41);
          v39 += 2;
          v42 -= 4;
        }
        while (v42);
        if (v37 == v36)
          goto LABEL_35;
        v32 = (int64x2_t *)((char *)v32 + 8 * v36);
      }
      else
      {
        v36 = 0;
      }
      do
      {
        v32->i64[0] = v36;
        v32 = (int64x2_t *)((char *)v32 + 8);
        ++v36;
      }
      while (v32 != v34);
    }
LABEL_35:
    md::TextDataStringInfo::generateLineBreakInfo((uint64_t)v16, v18, &v88, &v92);
    v86[0] = 0;
    v86[1] = v19;
    v86[2] = 0;
    v87 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    {
      v80 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v80, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v85 = mdm::Allocator::instance(void)::alloc;
    md::HorizontalTextLabelPart::breakLine(0, 0x10uLL, &v92, v86, &v82);
    v45 = v82;
    v44 = v83;
    if (v82 == v83)
    {
      v49 = 0.0;
    }
    else
    {
      v46 = v83 - v82 - 32;
      if (v46 > 0x7F)
      {
        v50 = (v46 >> 5) + 1;
        v51 = v50 & 3;
        if ((v50 & 3) == 0)
          v51 = 4;
        v52 = v50 - v51;
        v53 = 32 * v52;
        v54 = (const double *)(v82 + 72);
        v55 = 0uLL;
        v56 = 0uLL;
        do
        {
          v57 = v54 - 8;
          v58 = (unsigned __int128)vld4q_f64(v57);
          v59 = (unsigned __int128)vld4q_f64(v54);
          v55 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v55, (uint64x2_t)v58), v55, (int8x16_t)v58);
          v56 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v56, (uint64x2_t)v59), v56, (int8x16_t)v59);
          v54 += 16;
          v52 -= 4;
        }
        while (v52);
        v48 = v82 + v53;
        v60 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v55, (uint64x2_t)v56), v55, v56);
        v61 = vextq_s8(v60, v60, 8uLL).u64[0];
        v47 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v60.u64[0], v61), *(int8x8_t *)v60.i8, (int8x8_t)v61);
      }
      else
      {
        v47 = 0;
        v48 = v82;
      }
      do
      {
        if (v47 <= *(_QWORD *)(v48 + 8))
          v47 = *(_QWORD *)(v48 + 8);
        v48 += 32;
      }
      while (v48 != v83);
      v49 = (float)v47;
    }
    if (v82)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 40))(v85, v82, v84 - v82);
    v62 = v44 - v45;
    if (v88)
      (*(void (**)(uint64_t, int64x2_t *, int64_t))(*(_QWORD *)v91 + 40))(v91, v88, (char *)v90 - (char *)v88);
    v63 = v62 >> 5;
    v64 = v92;
    if (v92)
    {
      v65 = v93;
      if (v93 != v92)
      {
        do
        {
          v66 = v65 - 24;
          CGFontRelease(*(CGFontRef *)(v65 - 16));
          v65 = v66;
        }
        while (v66 != v64);
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v95 + 40))(v95, v64, v94 - v64);
    }
    CGFontRelease(v20);

    std::default_delete<md::TextDataStringInfo>::operator()[abi:nn180100]((uint64_t)v16);
    v67 = *((float *)a2 + 8);
    v68 = (float)(*((float *)v6 + 3) * v49) * v67;
    v69 = (float)((float)(unint64_t)(v63 - 1) + (float)(*((float *)v6 + 4) * (float)(unint64_t)v63)) * v67;
    v70 = v69 * -0.5;
    v71 = *((float *)v6 + 7);
    if (v71 == 0.0)
    {
      v72 = v68 * -0.5;
      v73 = *((float *)v6 + 8);
      v74 = v73 == 0.0;
      v75 = v73 < 0.0;
      v76 = -v69;
      if (v75)
        v76 = 0.0;
      if (!v74)
        v70 = v76;
    }
    else
    {
      v72 = 0.0;
      if (v71 >= 0.0)
        v72 = -v68;
    }
    v77 = *((float *)a2 + 7);
    v27 = v72 - (float)(v77 * v71);
    v28 = v70 - (float)(v77 * *((float *)v6 + 8));
    v26 = v27 + v68;
    v29 = v28 + v69;
    goto LABEL_66;
  }
LABEL_4:
  v9 = 0;
  *(_BYTE *)a1 = 0;
LABEL_67:
  *(_BYTE *)(a1 + 16) = v9;
}

void sub_19FE1EE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  CGFont *v14;
  uint64_t v15;
  void *v16;
  va_list va;

  va_start(va, a14);
  if (a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a3, a5 - a3);
  if (a11)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);
  std::vector<md::FontGlyphInfo,geo::StdAllocator<md::FontGlyphInfo,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  CGFontRelease(v14);

  std::default_delete<md::TextDataStringInfo>::operator()[abi:nn180100](v15);
  _Unwind_Resume(a1);
}

void md::ARWalkingFaceAlignedManeuverLabelPart::~ARWalkingFaceAlignedManeuverLabelPart(md::ARWalkingFaceAlignedManeuverLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARWalkingFaceAlignedManeuverLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, this, 792);
}

uint64_t md::ARWalkingFaceAlignedManeuverLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;

  v6 = **(_QWORD **)(a1 + 576);
  v12 = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 80))(v6, a2, a3, &v12);
  if ((_DWORD)v7 == 37)
  {
    v8 = *(_OWORD **)(*(_QWORD *)(a1 + 576) + 8);
    v9 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 576) + 576)
                   + 8 * *(unsigned __int8 *)(**(_QWORD **)(a1 + 576) + 1224));
    if (v9)
      v10 = *(_OWORD *)(*(_QWORD *)(v9 + 24) + 72);
    else
      v10 = xmmword_19FFB2E30;
    v8[41] = v10;
    v12 = 0;
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 80))(v8, a2, a3, &v12);
    if (*(_BYTE *)(a1 + 566))
      md::ARWalkingFaceAlignedManeuverLabelPart::updateLocalState(a1, a1 + 632, *(float64x2_t **)(a2 + 432), (float64x2_t *)(*(_QWORD *)(a1 + 16) + 592), *(_QWORD *)(a1 + 16) + 616, (float64x2_t *)(*(_QWORD *)(a1 + 16) + 520), *(float *)(*(_QWORD *)(a1 + 32) + 24), *(float *)(*(_QWORD *)(a1 + 32) + 20));
  }
  return v7;
}

uint64_t md::ARWalkingFaceAlignedManeuverLabelPart::layoutForDisplay(_QWORD *a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4)
{
  __n128 v8;
  int8x16_t v9;
  float32x4_t v10;
  uint64_t v12;

  md::ARWalkingFaceAlignedManeuverLabelPart::updateLocalState((uint64_t)a1, (uint64_t)(a1 + 89), (float64x2_t *)(a2 + 440), (float64x2_t *)(a1[2] + 408), a1[2] + 960, (float64x2_t *)(a1[2] + 864), *(float *)(a1[4] + 72), *(float *)(a1[4] + 68));
  v12 = 0;
  return md::CompositeLabelPart::layoutForDisplay(a1, a2, a3, a4, &v12, v8, v9, v10);
}

uint64_t md::ARWalkingFaceAlignedManeuverLabelPart::stagingModelMatrix(md::ARWalkingFaceAlignedManeuverLabelPart *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 72) + 136))(**((_QWORD **)this + 72));
}

uint64_t md::ARWalkingFaceAlignedManeuverLabelPart::modelMatrix(md::ARWalkingFaceAlignedManeuverLabelPart *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 72) + 144))(**((_QWORD **)this + 72));
}

char *md::ARWalkingFaceAlignedManeuverLabelPart::debugCompositeClassName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3DF0;
  strcpy(result, "ARWalkingFaceAlignedManeuverLabelPart");
  return result;
}

uint64_t md::ARWalkingFaceAlignedManeuverLabelPart::updateLocalState(uint64_t result, uint64_t a2, float64x2_t *a3, float64x2_t *a4, uint64_t a5, float64x2_t *a6, double a7, double a8)
{
  float64x2_t v8;
  float64x2_t v9;
  int32x2_t v10;
  char v11;
  double v12;
  __int128 v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  double v27;
  uint64_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;

  v8 = *a4;
  v9 = *a6;
  v10 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3F1A36E2EB1C432DuLL), vabsq_f64(*a6)));
  v11 = v10.i8[0] & v10.i8[4];
  v12 = a6[1].f64[0];
  if ((v11 & 1) != 0 && fabs(v12 + -1.0) < 0.0001)
  {
    *(_QWORD *)&v13 = *(_QWORD *)(a5 + 16);
  }
  else
  {
    *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64((int64x2_t)v8, 1).u64[0];
    v14.f64[1] = a4[1].f64[0];
    v15 = vsubq_f64(v14, *(float64x2_t *)(a5 + 8));
    *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64((int64x2_t)v9, 1).u64[0];
    v14.f64[1] = a6[1].f64[0];
    v16 = vmulq_f64(v14, v15);
    v17 = vmlad_n_f64(v16.f64[0], v8.f64[0] - *(double *)a5, v9.f64[0]) + v16.f64[1];
    v8 = vmlsq_lane_f64(v8, v9, v17, 0);
    *(double *)&v13 = a4[1].f64[0] - v17 * v12;
  }
  v19 = a3[62];
  v18 = a3[63];
  v20 = a3[64];
  v21 = a3[65];
  v22 = a3[66].f64[0];
  v23 = vaddq_f64(v20, v19).f64[0];
  if (v23 + v22 <= 0.0)
  {
    if ((vmovn_s64(vcgtq_f64(v19, v20)).u8[0] & 1) != 0 && v19.f64[0] > v22)
    {
      v27 = sqrt(v19.f64[0] + 1.0 - (v20.f64[0] + v22));
      *(double *)&v28 = v27 + v27;
      v25 = v27 * 0.5;
      v29 = vsubq_f64(v20, v21);
      v21.f64[1] = a3[62].f64[1];
      v18 = vdivq_f64(vaddq_f64(v18, v21), (float64x2_t)vdupq_lane_s64(v28, 0));
      v26 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
      v18.f64[0] = v29.f64[1] / *(double *)&v28;
    }
    else if (v20.f64[0] <= v22)
    {
      v32 = sqrt(v22 + 1.0 - v23);
      v25 = vaddq_f64(v18, v21).f64[0] / (v32 + v32);
      v33 = (float64x2_t)vdupq_laneq_s64((int64x2_t)vaddq_f64(v20, v21), 1);
      __asm { FMOV            V17.2D, #0.5 }
      v39.f64[1] = _Q17.f64[1];
      v39.f64[0] = v32 + v32;
      *(_QWORD *)&v26.f64[0] = *(_OWORD *)&vdivq_f64(v33, v39);
      v33.f64[1] = v32;
      v26.f64[1] = vmulq_f64(v33, _Q17).f64[1];
      v18.f64[0] = COERCE_DOUBLE(*(_QWORD *)&vsubq_f64(v19, v18).f64[1]) / (v32 + v32);
    }
    else
    {
      v30 = sqrt(v20.f64[0] + 1.0 - (v19.f64[0] + v22));
      v31 = 1.0 / (v30 + v30);
      v25 = vmuld_lane_f64(v31, vaddq_f64(v19, v18), 1);
      v26.f64[0] = v30 * 0.5;
      v18.f64[0] = v31 * vsubq_f64(v21, v18).f64[0];
      v26.f64[1] = vmuld_lane_f64(v31, vaddq_f64(v20, v21), 1);
    }
  }
  else
  {
    v24 = 0.5 / sqrt(v23 + v22 + 1.0);
    v25 = vmuld_lane_f64(v24, vsubq_f64(v20, v21), 1);
    v21.f64[1] = a3[62].f64[1];
    v26 = vmulq_n_f64(vsubq_f64(v21, v18), v24);
    v18.f64[0] = 0.25 / v24;
  }
  *((double *)&v13 + 1) = v25;
  v18.f64[1] = a8 * a7 * a3[20].f64[0];
  *(float64x2_t *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v13;
  *(float64x2_t *)(a2 + 32) = v26;
  *(float64x2_t *)(a2 + 48) = v18;
  *(int64x2_t *)(a2 + 64) = vdupq_lane_s64(*(uint64_t *)&v18.f64[1], 0);
  v40 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(v40 + 164))
  {
    v41 = *(float *)(v40 + 152);
    v42 = *(float *)(v40 + 156);
    v43 = *(float *)(v40 + 160);
  }
  else
  {
    v41 = 1.0;
    v42 = 0.0;
    v43 = 0.0;
  }
  v44 = a6->f64[1];
  v45 = a6[1].f64[0];
  v46 = a6->f64[0];
  v47 = -(v45 * v42 - v44 * v43);
  v48 = -(a6->f64[0] * v43 - v45 * v41);
  v49 = -(v44 * v41 - a6->f64[0] * v42);
  v50 = v41 - (a6->f64[0] * v43 - v45 * v41);
  if (v50 + v45 <= 0.0)
  {
    if (v41 <= v48 || v41 <= v45)
    {
      v60 = v48 <= v45;
      v61 = sqrt(v45 + 1.0 - v50);
      v62 = 1.0 / (v61 + v61);
      v63 = (v46 + v43) * v62;
      v64 = v44 - (v44 * v41 - a6->f64[0] * v42);
      v65 = v64 * v62;
      v66 = v61 * 0.5;
      v67 = (v42 - v47) * v62;
      v68 = sqrt(1.0 - (v41 + v45) - (a6->f64[0] * v43 - v45 * v41));
      v69 = v47 + v42;
      v70 = 1.0 / (v68 + v68);
      v71 = v69 * v70;
      v53 = v68 * 0.5;
      v72 = v64 * v70;
      v73 = (v46 - v43) * v70;
      if (v60)
        v52 = v63;
      else
        v52 = v71;
      if (v60)
      {
        v53 = v65;
        v54 = v66;
      }
      else
      {
        v54 = v72;
      }
      if (v60)
        v55 = v67;
      else
        v55 = v73;
    }
    else
    {
      v56 = sqrt(v41 + 1.0 - (v45 - (a6->f64[0] * v43 - v45 * v41)));
      v57 = v56 + v56;
      v52 = v56 * 0.5;
      v58 = v47 + v42;
      v59 = 1.0 / v57;
      v53 = v58 * (1.0 / v57);
      v54 = (v46 + v43) * v59;
      v55 = (v49 - v44) * v59;
    }
  }
  else
  {
    v51 = 0.5 / sqrt(v50 + v45 + 1.0);
    v52 = v51 * (v49 - v44);
    v53 = v51 * (v46 - v43);
    v54 = v51 * (v42 - v47);
    v55 = 0.25 / v51;
  }
  *(double *)(a2 + 24) = v52;
  *(double *)(a2 + 32) = v53;
  *(double *)(a2 + 40) = v54;
  *(double *)(a2 + 48) = v55;
  return result;
}

uint64_t md::ARWalkingFaceAlignedManeuverLabelPart::createPart(md::LabelManager *a1, float *a2, uint64_t a3, uint64_t a4, int a5, __int128 *a6)
{
  unsigned __int8 v11;
  float v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  unsigned __int8 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  unsigned __int8 v21;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unsigned __int8 v32;
  md::LabelPart *v33;
  unsigned __int8 v34;
  uint64_t v35;
  md::LabelPart *v36;
  uint64_t v37;
  md::LabelPart *v38;
  unsigned __int8 v39;
  md::LabelPart *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  md::LabelPart *v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  _QWORD *i;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  geo::read_write_lock *v88;
  const char *v89;
  malloc_zone_t *v90;
  uint64_t v91;
  uint64_t v92;
  geo::read_write_lock *v93;
  const char *v94;
  malloc_zone_t *zone;
  uint64_t v96;
  geo::read_write_lock *v97;
  const char *v98;
  malloc_zone_t *v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  char *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  __int128 v121[3];
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  {
    v82 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v116 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v115) = 3;
  LODWORD(v114) = 9602786;
  v12 = a2[98];
  getTextDataString(&v112, a3, a4, a6);
  getTextDataString(&v110, a3, (uint64_t)&v114, a6);
  if (!v110)
  {
    v17 = 0;
    goto LABEL_77;
  }
  v13 = (char *)operator new(0x58uLL);
  v14 = 0;
  *(_QWORD *)v13 = &off_1E42DED18;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 3) = &off_1E42B63B0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_QWORD *)v13 + 4) = 0;
  *((_DWORD *)v13 + 14) = 0;
  *(_QWORD *)&v15 = 0x100000001;
  *((_QWORD *)&v15 + 1) = 0x100000001;
  *(_OWORD *)(v13 + 60) = v15;
  *(_QWORD *)(v13 + 76) = 0x100000001;
  *((_DWORD *)v13 + 21) = 0;
  v108 = v13 + 24;
  v109 = (std::__shared_weak_count *)v13;
  if (a5)
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 21) + 40) + 48))(*(_QWORD *)(*((_QWORD *)a1 + 21) + 40));
  {
    v83 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v83, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 792, 8);
  v18 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
  v106 = md::LabelText::LabelText((uint64_t)&v18[1], v110, (uint64_t)v111, (int)v12);
  v107 = v18;
  v102 = v112;
  if (v112)
  {
    v19 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v104 = md::LabelText::LabelText((uint64_t)&v19[1], v102, (uint64_t)v113, (int)v12);
    v105 = v19;
  }
  else
  {
    v19 = 0;
    v104 = 0;
    v105 = 0;
  }
  v101 = *(_DWORD *)(a3 + 168);
  *(_DWORD *)(v17 + 8) = 1065353216;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v17;
  v20 = 0uLL;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 88) = 1065353216;
  *(_DWORD *)(v17 + 96) = 1065353216;
  *(_OWORD *)(v17 + 100) = 0u;
  *(_DWORD *)(v17 + 116) = 0;
  *(_OWORD *)(v17 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(v17 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(v17 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(v17 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(v17 + 224) = 0;
  *(_OWORD *)(v17 + 184) = 0u;
  *(_BYTE *)(v17 + 200) = 0;
  *(_OWORD *)(v17 + 248) = 0u;
  *(_OWORD *)(v17 + 232) = 0u;
  *(_OWORD *)(v17 + 257) = 0u;
  *(_OWORD *)(v17 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(v17 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(v17 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(v17 + 328) = 1065353216;
  *(_DWORD *)(v17 + 336) = 1065353216;
  *(_DWORD *)(v17 + 356) = 0;
  *(_OWORD *)(v17 + 340) = 0u;
  *(_OWORD *)(v17 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(v17 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(v17 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(v17 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(v17 + 464) = 0;
  *(_OWORD *)(v17 + 424) = 0u;
  *(_BYTE *)(v17 + 440) = 0;
  *(_OWORD *)(v17 + 472) = 0u;
  *(_OWORD *)(v17 + 488) = 0u;
  *(_OWORD *)(v17 + 497) = 0u;
  *(_OWORD *)(v17 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(v17 + 536) = 1065353216;
  *(_OWORD *)(v17 + 540) = 0u;
  *(_WORD *)(v17 + 556) = 512;
  *(_BYTE *)(v17 + 562) = 0;
  *(_DWORD *)(v17 + 558) = 0;
  *(_WORD *)(v17 + 563) = -1;
  *(_DWORD *)(v17 + 565) = 0;
  *(_QWORD *)v17 = off_1E4294028;
  *(_OWORD *)(v17 + 576) = 0u;
  *(_QWORD *)(v17 + 592) = 0;
  if ((v21 & 1) == 0)
  {
    v20 = 0uLL;
    if (v84)
    {
      v85 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v85, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v17 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(v17 + 608) = 0;
  *(_BYTE *)(v17 + 616) = 0;
  *(_WORD *)(v17 + 628) = 1;
  *(_BYTE *)(v17 + 630) = 0;
  *(_QWORD *)v17 = off_1E42AAEC0;
  *(_OWORD *)(v17 + 632) = v20;
  *(_OWORD *)(v17 + 648) = v20;
  *(_OWORD *)(v17 + 664) = v20;
  *(_QWORD *)(v17 + 680) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v17 + 688) = _Q0;
  *(_QWORD *)(v17 + 704) = 0x3FF0000000000000;
  *(_OWORD *)(v17 + 712) = v20;
  *(_OWORD *)(v17 + 728) = v20;
  *(_OWORD *)(v17 + 744) = v20;
  *(_QWORD *)(v17 + 760) = 0x3FF0000000000000;
  v100 = _Q0;
  *(_OWORD *)(v17 + 768) = _Q0;
  *(_QWORD *)(v17 + 784) = 0x3FF0000000000000;
  {
    v86 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v86, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 1232, 8);
  v29 = v28;
  v119 = v104;
  v120 = v105;
  if (v105)
  {
    p_shared_owners = (unint64_t *)&v105->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  md::StackLabelPart::StackLabelPart(v28, 0);
  *(_QWORD *)v29 = off_1E42A2980;
  *(_QWORD *)(v29 + 952) = 0;
  *(_QWORD *)(v29 + 1216) = 0;
  *(_WORD *)(v29 + 1224) = 1280;
  if (v14)
  {
    {
      v92 = operator new();
      *(_QWORD *)(v92 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v92 + 24) = "VectorKitLabels";
      *(_OWORD *)(v92 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v92 = &off_1E42B5668;
      *(_QWORD *)(v92 + 8) = "VectorKitLabels";
      *(_OWORD *)(v92 + 72) = 0u;
      *(_OWORD *)(v92 + 88) = 0u;
      *(_OWORD *)(v92 + 104) = 0u;
      *(_OWORD *)(v92 + 120) = 0u;
      *(_OWORD *)(v92 + 136) = 0u;
      *(_OWORD *)(v92 + 152) = 0u;
      *(_OWORD *)(v92 + 168) = 0u;
      *(_OWORD *)(v92 + 184) = 0u;
      *(_OWORD *)(v92 + 200) = 0u;
      *(_OWORD *)(v92 + 216) = 0u;
      *(_OWORD *)(v92 + 232) = 0u;
      *(_QWORD *)(v92 + 248) = 0;
      *(_OWORD *)(v92 + 56) = 0u;
      v93 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v92 + 56), 0);
      if ((_DWORD)v93)
        geo::read_write_lock::logFailure(v93, (uint64_t)"initialization", v94);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v92 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v92 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v92;
    }
    v33 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 792, 8);
    md::AnimatedTextureLabelPart::AnimatedTextureLabelPart((uint64_t)v33, a1, (md::Label *)a2, v14);
  }
  else
  {
    v33 = 0;
  }
  {
    v87 = operator new();
    *(_QWORD *)(v87 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v87 + 24) = "VectorKitLabels";
    *(_OWORD *)(v87 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v87 = &off_1E42B5668;
    *(_QWORD *)(v87 + 8) = "VectorKitLabels";
    *(_OWORD *)(v87 + 72) = 0u;
    *(_OWORD *)(v87 + 88) = 0u;
    *(_OWORD *)(v87 + 104) = 0u;
    *(_OWORD *)(v87 + 120) = 0u;
    *(_OWORD *)(v87 + 136) = 0u;
    *(_OWORD *)(v87 + 152) = 0u;
    *(_OWORD *)(v87 + 168) = 0u;
    *(_OWORD *)(v87 + 184) = 0u;
    *(_OWORD *)(v87 + 200) = 0u;
    *(_OWORD *)(v87 + 216) = 0u;
    *(_OWORD *)(v87 + 232) = 0u;
    *(_QWORD *)(v87 + 248) = 0;
    *(_OWORD *)(v87 + 56) = 0u;
    v88 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v87 + 56), 0);
    if ((_DWORD)v88)
      geo::read_write_lock::logFailure(v88, (uint64_t)"initialization", v89);
    v90 = malloc_create_zone(0, 0);
    *(_QWORD *)(v87 + 48) = v90;
    malloc_set_zone_name(v90, "VectorKitLabels");
    *(_QWORD *)(v87 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v87;
  }
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 736, 8);
  v36 = (md::LabelPart *)v35;
  v37 = v119;
  if (v119)
    v38 = 0;
  else
    v38 = v33;
  md::ARWalkingManeuverArrowLabelPart::ARWalkingManeuverArrowLabelPart(v35, a1, (md::Label *)a2, &v106, v38, 0);
  md::CompositeLabelPart::addLabelPart(v29, v36);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v36 + 32))(v36, v29 + 824);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v36 + 40))(v36, v29 + 1088);
  if (v37)
  {
    {
      v96 = operator new();
      *(_QWORD *)(v96 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v96 + 24) = "VectorKitLabels";
      *(_OWORD *)(v96 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v96 = &off_1E42B5668;
      *(_QWORD *)(v96 + 8) = "VectorKitLabels";
      *(_OWORD *)(v96 + 72) = 0u;
      *(_OWORD *)(v96 + 88) = 0u;
      *(_OWORD *)(v96 + 104) = 0u;
      *(_OWORD *)(v96 + 120) = 0u;
      *(_OWORD *)(v96 + 136) = 0u;
      *(_OWORD *)(v96 + 152) = 0u;
      *(_OWORD *)(v96 + 168) = 0u;
      *(_OWORD *)(v96 + 184) = 0u;
      *(_OWORD *)(v96 + 200) = 0u;
      *(_OWORD *)(v96 + 216) = 0u;
      *(_OWORD *)(v96 + 232) = 0u;
      *(_QWORD *)(v96 + 248) = 0;
      *(_OWORD *)(v96 + 56) = 0u;
      v97 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v96 + 56), 0);
      if ((_DWORD)v97)
        geo::read_write_lock::logFailure(v97, (uint64_t)"initialization", v98);
      v99 = malloc_create_zone(0, 0);
      *(_QWORD *)(v96 + 48) = v99;
      malloc_set_zone_name(v99, "VectorKitLabels");
      *(_QWORD *)(v96 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v96;
    }
    v40 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 632, 8);
    md::ARWalkingManeuverTextLabelPart::ARWalkingManeuverTextLabelPart((uint64_t)v40, &v119, v33, 0);
    md::CompositeLabelPart::addLabelPart(v29, v40);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v40 + 32))(v40, v29 + 696);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v40 + 40))(v40, v29 + 960);
    if (v33)
    {
      (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v33 + 32))(v33, v29 + 824);
      (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v33 + 40))(v33, v29 + 1088);
    }
    *(_BYTE *)(v29 + 1224) = 1;
  }
  v41 = *(_QWORD **)(v29 + 576);
  v42 = *(_QWORD **)(v29 + 584);
  if (v41 == v42)
    goto LABEL_36;
  do
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v41 + 352))(*v41, 0, 0);
    ++v41;
  }
  while (v41 != v42);
  v43 = *(_QWORD **)(v29 + 576);
  v44 = *(_QWORD **)(v29 + 584);
  if (v43 == v44)
  {
LABEL_36:
    *(_WORD *)(v29 + 565) = 257;
    v47 = v120;
    if (!v120)
      goto LABEL_41;
    goto LABEL_37;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v43 + 352))(*v43, 1, 0);
    ++v43;
  }
  while (v43 != v44);
  v45 = *(_QWORD **)(v29 + 576);
  v46 = *(_QWORD **)(v29 + 584);
  for (*(_WORD *)(v29 + 565) = 257; v45 != v46; ++v45)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v45 + 64))(*v45, 1, 1);
  v47 = v120;
  if (v120)
  {
LABEL_37:
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_41:
  md::CompositeLabelPart::addLabelPart(v17, (md::LabelPart *)v29);
  v50 = (char *)operator new(0xD0uLL);
  v51 = (std::__shared_weak_count *)v50;
  *((_QWORD *)v50 + 1) = 0;
  v52 = (unint64_t *)(v50 + 8);
  *((_QWORD *)v50 + 2) = 0;
  *(_QWORD *)v50 = &off_1E42DDC78;
  *((_QWORD *)v50 + 3) = &off_1E42A0A00;
  v53 = v50 + 24;
  memset(v121, 0, sizeof(v121));
  do
  {
    v54 = __ldaxr(&md::LabelExternalMeshRequest::nextId(void)::next);
    v55 = v54 + 1;
  }
  while (__stlxr(v55, &md::LabelExternalMeshRequest::nextId(void)::next));
  *((_DWORD *)v50 + 8) = v55;
  v50[36] = 1;
  *(_OWORD *)(v50 + 40) = v121[0];
  *((_QWORD *)v50 + 7) = *(_QWORD *)&v121[1];
  *((_OWORD *)v50 + 4) = *(__int128 *)((char *)&v121[1] + 8);
  *((_QWORD *)v50 + 10) = *((_QWORD *)&v121[2] + 1);
  *(_OWORD *)(v50 + 88) = v100;
  *(_OWORD *)(v50 + 104) = v100;
  *((_QWORD *)v50 + 15) = 850045863;
  *((_OWORD *)v50 + 8) = 0u;
  *((_OWORD *)v50 + 9) = 0u;
  *((_OWORD *)v50 + 10) = 0u;
  *((_OWORD *)v50 + 11) = 0u;
  *((_QWORD *)v50 + 24) = 0;
  v50[200] = 1;
  *((_QWORD *)v50 + 3) = &off_1E42A9820;
  *(_DWORD *)(v50 + 201) = v101;
  v117 = v50 + 24;
  v118 = (std::__shared_weak_count *)v50;
  v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 21) + 64) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 21) + 64));
  *(_QWORD *)&v121[0] = v53;
  *((_QWORD *)&v121[0] + 1) = v51;
  do
    v57 = __ldxr(v52);
  while (__stxr(v57 + 1, v52));
  md::LabelExternalMeshModerator::requestExternalMesh(v56, v121);
  do
    v58 = __ldaxr(v52);
  while (__stlxr(v58 - 1, v52));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  {
    v91 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v91, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v60 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 952, 8);
  v61 = v118;
  md::ARFeatureShadowExternalMeshLabelPart::ARFeatureShadowExternalMeshLabelPart((uint64_t)v60, (uint64_t)v117, v118);
  md::CompositeLabelPart::addLabelPart(v17, v60);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v60 + 48))(v60, v17 + 632);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v60 + 56))(v60, v17 + 712);
  *(_WORD *)(v17 + 565) = 257;
  v62 = *(_QWORD **)(v17 + 576);
  for (i = *(_QWORD **)(v17 + 584); v62 != i; ++v62)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v62 + 64))(*v62, 1, 1);
  if (!v61)
    goto LABEL_56;
  v64 = (unint64_t *)&v61->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (v102)
    {
LABEL_57:
      if (v19)
      {
        v66 = (unint64_t *)&v19->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        goto LABEL_65;
      }
      goto LABEL_67;
    }
  }
  else
  {
LABEL_56:
    if (v102)
      goto LABEL_57;
  }
  if (v19)
  {
    v68 = (unint64_t *)&v19->__shared_owners_;
    do
      v67 = __ldaxr(v68);
    while (__stlxr(v67 - 1, v68));
LABEL_65:
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_67:
  v69 = v107;
  if (v107)
  {
    v70 = (unint64_t *)&v107->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v109;
  if (v109)
  {
    v73 = (unint64_t *)&v109->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
LABEL_77:
  v75 = v111;
  if (!v111)
    goto LABEL_81;
  v76 = (unint64_t *)&v111->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    v78 = v113;
    if (!v113)
      goto LABEL_85;
  }
  else
  {
LABEL_81:
    v78 = v113;
    if (!v113)
      goto LABEL_85;
  }
  v79 = (unint64_t *)&v78->__shared_owners_;
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (!v80)
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    if ((SHIBYTE(v115) & 0x80000000) == 0)
      return v17;
    goto LABEL_86;
  }
LABEL_85:
  if (SHIBYTE(v115) < 0)
LABEL_86:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 40))(v116, v114, v115 & 0x7FFFFFFFFFFFFFFFLL);
  return v17;
}

void sub_19FE20454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  md::CompositeLabelPart *v31;
  uint64_t v32;
  md::CompositeLabelPart *v33;
  unsigned __int8 v35;
  uint64_t v36;
  geo::read_write_lock *v37;
  const char *v38;
  malloc_zone_t *zone;
  mdm::Allocator *v40;
  uint64_t v41;
  mdm::Allocator *v42;
  uint64_t v43;

  {
    v36 = operator new();
    *(_QWORD *)(v36 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v36 + 24) = "VectorKitLabels";
    *(_OWORD *)(v36 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v36 = &off_1E42B5668;
    *(_QWORD *)(v36 + 8) = "VectorKitLabels";
    *(_OWORD *)(v36 + 72) = 0u;
    *(_OWORD *)(v36 + 88) = 0u;
    *(_OWORD *)(v36 + 104) = 0u;
    *(_OWORD *)(v36 + 120) = 0u;
    *(_OWORD *)(v36 + 136) = 0u;
    *(_OWORD *)(v36 + 152) = 0u;
    *(_OWORD *)(v36 + 168) = 0u;
    *(_OWORD *)(v36 + 184) = 0u;
    *(_OWORD *)(v36 + 200) = 0u;
    *(_OWORD *)(v36 + 216) = 0u;
    *(_OWORD *)(v36 + 232) = 0u;
    *(_QWORD *)(v36 + 248) = 0;
    *(_OWORD *)(v36 + 56) = 0u;
    v37 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v36 + 56), 0);
    if ((_DWORD)v37)
      geo::read_write_lock::logFailure(v37, (uint64_t)"initialization", v38);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v36 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v36 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v36;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v32, 632);
  md::CompositeLabelPart::~CompositeLabelPart(v33);
  v40 = (mdm::Allocator *)std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v41 = mdm::Allocator::instance(v40);
  (*(void (**)(uint64_t, md::CompositeLabelPart *, uint64_t))(*(_QWORD *)v41 + 40))(v41, v33, 1232);
  md::CompositeLabelPart::~CompositeLabelPart(v31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v42 = (mdm::Allocator *)std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  v43 = mdm::Allocator::instance(v42);
  (*(void (**)(uint64_t, md::CompositeLabelPart *, uint64_t))(*(_QWORD *)v43 + 40))(v43, v31, 792);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (SHIBYTE(a27) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a28 + 40))(a28, a25, a27 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(a1);
}

void getTextDataString(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    if ((v8 & 1) == 0)
    {
      v23 = a4;
      a4 = v23;
      if (v24)
      {
        v25 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
        a4 = v23;
      }
    }
    v29 = mdm::Allocator::instance(void)::alloc;
    v9 = md::TextDataStore::addString(&v26, (__int128 *)a3, a4, 0xFFFF);
    v10 = *(_QWORD *)(a2 + 280);
    if (v10)
    {
      if (vabds_f32(*(float *)(v10 + 8), *(float *)(a2 + 104)) >= 0.01)
      {
        md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a2, v10, 0);
        v10 = *(_QWORD *)(a2 + 280);
      }
    }
    else
    {
      v10 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a2, 0);
      *(_QWORD *)(a2 + 280) = v10;
    }
    md::TextDataStore::textDataForZoom(a1, v26, v27, v9, *(_QWORD *)v10 + 72);
    v11 = v26;
    if (v26)
    {
      v12 = v27;
      v13 = v26;
      if (v27 != v26)
      {
        do
        {
          v14 = *((_QWORD *)v12 - 4);
          if (v14)
          {
            v15 = *((_QWORD *)v12 - 3);
            v16 = *((_QWORD *)v12 - 4);
            if (v15 != v14)
            {
              do
              {
                v17 = *(std::__shared_weak_count **)(v15 - 8);
                if (v17)
                {
                  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
                  do
                    v19 = __ldaxr(p_shared_owners);
                  while (__stlxr(v19 - 1, p_shared_owners));
                  if (!v19)
                  {
                    ((void (*)(std::__shared_weak_count *, uint64_t))v17->__on_zero_shared)(v17, v16);
                    std::__shared_weak_count::__release_weak(v17);
                  }
                }
                v15 -= 16;
              }
              while (v15 != v14);
              v16 = *((_QWORD *)v12 - 4);
            }
            *((_QWORD *)v12 - 3) = v14;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 - 1) + 40))(*((_QWORD *)v12 - 1), v16, *((_QWORD *)v12 - 2) - v16);
          }
          v20 = (std::__shared_weak_count *)*((_QWORD *)v12 - 5);
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v20->__on_zero_shared)(v20, v13);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v12 -= 56;
        }
        while (v12 != v11);
        v13 = v26;
      }
      v27 = v11;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v29 + 40))(v29, v13, v28 - (_QWORD)v13);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

{
  uint64_t v5;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    if ((v8 & 1) == 0)
    {
      v23 = a4;
      a4 = v23;
      if (v24)
      {
        v25 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
        a4 = v23;
      }
    }
    v29 = mdm::Allocator::instance(void)::alloc;
    v9 = md::TextDataStore::addString(&v26, (__int128 *)a3, a4, 0xFFFF);
    v10 = *(_QWORD *)(a2 + 280);
    if (v10)
    {
      if (vabds_f32(*(float *)(v10 + 8), *(float *)(a2 + 104)) >= 0.01)
      {
        md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a2, v10, 0);
        v10 = *(_QWORD *)(a2 + 280);
      }
    }
    else
    {
      v10 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a2, 0);
      *(_QWORD *)(a2 + 280) = v10;
    }
    md::TextDataStore::textDataForZoom(a1, v26, v27, v9, *(_QWORD *)v10 + 72);
    v11 = v26;
    if (v26)
    {
      v12 = v27;
      v13 = v26;
      if (v27 != v26)
      {
        do
        {
          v14 = *((_QWORD *)v12 - 4);
          if (v14)
          {
            v15 = *((_QWORD *)v12 - 3);
            v16 = *((_QWORD *)v12 - 4);
            if (v15 != v14)
            {
              do
              {
                v17 = *(std::__shared_weak_count **)(v15 - 8);
                if (v17)
                {
                  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
                  do
                    v19 = __ldaxr(p_shared_owners);
                  while (__stlxr(v19 - 1, p_shared_owners));
                  if (!v19)
                  {
                    ((void (*)(std::__shared_weak_count *, uint64_t))v17->__on_zero_shared)(v17, v16);
                    std::__shared_weak_count::__release_weak(v17);
                  }
                }
                v15 -= 16;
              }
              while (v15 != v14);
              v16 = *((_QWORD *)v12 - 4);
            }
            *((_QWORD *)v12 - 3) = v14;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 - 1) + 40))(*((_QWORD *)v12 - 1), v16, *((_QWORD *)v12 - 2) - v16);
          }
          v20 = (std::__shared_weak_count *)*((_QWORD *)v12 - 5);
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v20->__on_zero_shared)(v20, v13);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v12 -= 56;
        }
        while (v12 != v11);
        v13 = v26;
      }
      v27 = v11;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v29 + 40))(v29, v13, v28 - (_QWORD)v13);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_19FE20B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::TextDataStore::~TextDataStore((md::TextDataStore *)&a9);
  _Unwind_Resume(a1);
}

void md::ARFeatureShadowExternalMeshRequest::~ARFeatureShadowExternalMeshRequest(md::ARFeatureShadowExternalMeshRequest *this)
{
  md::LabelExternalMeshRequest::~LabelExternalMeshRequest(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ARFeatureShadowExternalMeshRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARFeatureShadowExternalMeshRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARFeatureShadowExternalMeshRequest>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::ARLogic::~ARLogic(md::ARLogic *this)
{
  md::ARLogic::~ARLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E42AEFD0;
  *((_QWORD *)this + 15) = &unk_1E42AF0A0;
  objc_msgSend(*((id *)this + 24), "setSession:", 0);
  objc_msgSend(*((id *)this + 24), "setObserver:", 0);

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)this + 28);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v10)
    operator delete(v10);
  *((_QWORD *)this + 23) = &off_1E42B4DF0;

  *((_QWORD *)this + 19) = &off_1E42B54D0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::ARLogic::didBecomeActive(md::ARLogic *this)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)*((_QWORD *)this + 20);
  if (v1)
  {
    v2 = (void *)*((_QWORD *)this + 24);
    v3 = v1;
    objc_msgSend(v2, "setSession:");

  }
}

void sub_19FE20C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::ARLogic::didBecomeInactive(id *this)
{
  return objc_msgSend(this[24], "setSession:", 0);
}

void md::ARLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  const std::string::value_type *v5;
  unint64_t v6;
  const std::string::value_type *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  const std::string::value_type *v12;
  uint64_t v13;
  unint64_t v14;
  __CFString *v15;
  const std::string::value_type *v16;
  id v17;
  const std::string::value_type *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base *v22;
  char *v23;
  const char *v24;
  _QWORD *v25;
  size_t v26;
  __int128 *p_dst;
  uint64_t v28;
  const void **v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  const std::string::value_type *v39;
  void *v40;
  void *v41;
  id v42;
  const std::string::value_type *v43;
  void *v44;
  void *v45;
  id v46;
  const std::string::value_type *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  const std::string::value_type *v54;
  id v55;
  const std::string::value_type *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  const std::string::value_type *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  char *ChildNode;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85[16];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91[24];
  char v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98[16];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104[32];
  std::string v105;
  int v106;
  char v107[32];
  std::string v108;
  int v109;
  char v110[32];
  std::string v111;
  int v112;
  char v113[32];
  std::string v114;
  int v115;
  char v116[32];
  std::string v117;
  int v118;
  _BYTE v119[32];
  std::string v120;
  int v121;
  __int128 __dst;
  __int128 v123;
  __int128 v124;
  _BYTE v125[32];
  char v126;
  _BYTE v127[8];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  char v133[21];
  _BYTE v134[9];
  _BYTE v135[64];
  int v136;
  uint64_t v137[20];
  _BYTE v138[32];
  std::string v139;
  int v140;
  _BYTE v141[32];
  std::string v142;
  int v143;
  _BYTE v144[32];
  std::string __p;
  int v146;
  _BYTE v147[32];
  std::string v148;
  int v149;
  _BYTE v150[32];
  std::string v151;
  int v152;

  strcpy((char *)a2, "AR Logic");
  *(_WORD *)(a2 + 23) = 8;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v4 = *(unsigned __int8 *)(a1 + 257);
  v134[0] = 6;
  strcpy(v133, "ARMode");
  if (v4 > 3)
    v5 = "<Invalid>";
  else
    v5 = off_1E42F8750[v4];
  memset(&v151, 0, sizeof(v151));
  v152 = 4;
  std::string::__assign_external(&v151, v5);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v133, (uint64_t)v150);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v6 = *(unsigned __int8 *)(a1 + 256);
  v134[0] = 11;
  strcpy(v133, "ARSceneType");
  if (v6 > 2)
    v7 = "<Invalid>";
  else
    v7 = off_1E42F8770[v6];
  memset(&v148, 0, sizeof(v148));
  v149 = 4;
  std::string::__assign_external(&v148, v7);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v133, (uint64_t)v147);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  v8 = *(id *)(a1 + 160);
  v9 = v8;
  if (!v8)
    goto LABEL_127;
  v134[0] = 10;
  strcpy(v133, "Identifier");
  objc_msgSend(v8, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "UUIDString");
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v12 = (const std::string::value_type *)objc_msgSend(v11, "UTF8String");
  memset(&__p, 0, sizeof(__p));
  v146 = 4;
  if (v12)
  {
    std::string::__assign_external(&__p, v12);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&__p, "<null>");
  }
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v133, (uint64_t)v144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  v13 = *(_QWORD *)(a1 + 176);
  v134[0] = 20;
  strcpy(v133, "InterfaceOrientation");
  v14 = v13 - 1;
  if (v14 > 3)
    v15 = CFSTR("Unknown");
  else
    v15 = off_1E42F8788[v14];
  v16 = (const std::string::value_type *)-[__CFString UTF8String](v15, "UTF8String");
  memset(&v142, 0, sizeof(v142));
  v143 = 4;
  if (v16)
  {
    std::string::__assign_external(&v142, v16);
  }
  else
  {
    *((_BYTE *)&v142.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v142, "<null>");
  }
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v133, (uint64_t)v141);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  v134[0] = 12;
  strcpy(v133, "SessionState");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v9, "state"));
  v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v18 = (const std::string::value_type *)objc_msgSend(v17, "UTF8String");
  memset(&v139, 0, sizeof(v139));
  v140 = 4;
  if (v18)
  {
    std::string::__assign_external(&v139, v18);
  }
  else
  {
    *((_BYTE *)&v139.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v139, "<null>");
  }
  v79 = v9;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v133, (uint64_t)v138);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);

  v134[0] = 18;
  strcpy(v133, "FrameTimeHistogram");
  v78 = (_QWORD *)a2;
  v19 = 0;
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)v133);
  v20 = *MEMORY[0x1E0DE4F60];
  v21 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v84 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v80 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v83 = MEMORY[0x1E0DE4FE0] + 64;
  v82 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    v137[0] = v83;
    *(_QWORD *)v133 = v21;
    *(_QWORD *)&v133[*(_QWORD *)(v21 - 24)] = v84;
    v22 = (std::ios_base *)&v133[*(_QWORD *)(*(_QWORD *)v133 - 24)];
    std::ios_base::init(v22, &v133[8]);
    v22[1].__vftable = 0;
    v22[1].__fmtflags_ = -1;
    *(_QWORD *)v133 = MEMORY[0x1E0DE4FE0] + 24;
    v137[0] = MEMORY[0x1E0DE4FE0] + 64;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&v133[8] = v82;
    memset(&v135[32], 0, 32);
    v136 = 16;
    exp2((double)v19);
    if (v19)
    {
      if (v19 == 7)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v133, (uint64_t)">= ", 3);
        goto LABEL_38;
      }
      v23 = (char *)std::ostream::operator<<();
      v24 = " - ";
    }
    else
    {
      v23 = v133;
      v24 = "<= ";
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, 3);
LABEL_38:
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)" ms", 3);
    if ((v136 & 0x10) != 0)
    {
      v28 = *(_QWORD *)&v135[56];
      v29 = (const void **)&v135[8];
      if (*(_QWORD *)&v135[56] < *(_QWORD *)&v135[16])
      {
        *(_QWORD *)&v135[56] = *(_QWORD *)&v135[16];
        v28 = *(_QWORD *)&v135[16];
        v29 = (const void **)&v135[8];
      }
    }
    else
    {
      if ((v136 & 8) == 0)
      {
        v26 = 0;
        BYTE7(v123) = 0;
        p_dst = &__dst;
        goto LABEL_52;
      }
      v28 = *(_QWORD *)v135;
      v29 = (const void **)&v134[1];
    }
    v30 = *v29;
    v26 = v28 - (_QWORD)*v29;
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v26 >= 0x17)
    {
      v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v31 = v26 | 7;
      v32 = v31 + 1;
      p_dst = (__int128 *)operator new(v31 + 1);
      *(_QWORD *)&v123 = v32 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      *((_QWORD *)&__dst + 1) = v26;
LABEL_51:
      memmove(p_dst, v30, v26);
      goto LABEL_52;
    }
    BYTE7(v123) = v28 - *(_BYTE *)v29;
    p_dst = &__dst;
    if (v26)
      goto LABEL_51;
LABEL_52:
    *((_BYTE *)p_dst + v26) = 0;
    v33 = *(_QWORD *)(a1 + 272 + 8 * v19);
    v130 = 0;
    v131 = 0;
    v129 = 0;
    v132 = 1;
    v128 = v33;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&__dst, (uint64_t)v127);
    if (SBYTE7(v123) < 0)
      operator delete((void *)__dst);
    *(_QWORD *)v133 = v20;
    *(_QWORD *)&v133[*(_QWORD *)(v20 - 24)] = v80;
    *(_QWORD *)&v133[8] = MEMORY[0x1E0DE4FB8] + 16;
    if ((v135[55] & 0x80000000) != 0)
      operator delete(*(void **)&v135[32]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AF4D64](v137);
    ++v19;
  }
  while (v19 != 8);
  objc_msgSend(v79, "currentFrame");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v34;
  if (!v34)
    goto LABEL_126;
  *(_QWORD *)v133 = 0x656D617246;
  *(_WORD *)v134 = 5;
  memset(&v135[7], 0, 49);
  strcpy((char *)&__dst, "GeoTracking");
  *(_WORD *)((char *)&v123 + 7) = 11;
  v124 = 0u;
  memset(v125, 0, sizeof(v125));
  v126 = 0;
  v36 = (void *)MEMORY[0x1E0CB3940];
  v116[23] = 8;
  strcpy(v116, "Accuracy");
  objc_msgSend(v34, "geoTrackingStatus");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v37, "accuracy"));
  v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v39 = (const std::string::value_type *)objc_msgSend(v38, "UTF8String");
  memset(&v120, 0, sizeof(v120));
  v121 = 4;
  if (v39)
  {
    std::string::__assign_external(&v120, v39);
  }
  else
  {
    *((_BYTE *)&v120.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v120, "<null>");
  }
  gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v116, (uint64_t)v119);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);

  v40 = (void *)MEMORY[0x1E0CB3940];
  v113[23] = 5;
  strcpy(v113, "State");
  objc_msgSend(v35, "geoTrackingStatus");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v41, "state"));
  v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v43 = (const std::string::value_type *)objc_msgSend(v42, "UTF8String");
  memset(&v117, 0, sizeof(v117));
  v118 = 4;
  if (v43)
  {
    std::string::__assign_external(&v117, v43);
  }
  else
  {
    *((_BYTE *)&v117.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v117, "<null>");
  }
  gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v113, (uint64_t)v116);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);

  v44 = (void *)MEMORY[0x1E0CB3940];
  v110[23] = 11;
  strcpy(v110, "StateReason");
  objc_msgSend(v35, "geoTrackingStatus");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v45, "stateReason"));
  v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v47 = (const std::string::value_type *)objc_msgSend(v46, "UTF8String");
  memset(&v114, 0, sizeof(v114));
  v115 = 4;
  if (v47)
  {
    std::string::__assign_external(&v114, v47);
  }
  else
  {
    *((_BYTE *)&v114.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v114, "<null>");
  }
  gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v110, (uint64_t)v113);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);

  gdc::DebugTreeNode::addChildNode(v133, &__dst);
  v48 = *(_QWORD *)&v125[9];
  if (*(_QWORD *)&v125[9])
  {
    v49 = *(_QWORD *)&v125[17];
    v50 = *(void **)&v125[9];
    if (*(_QWORD *)&v125[17] != *(_QWORD *)&v125[9])
    {
      do
      {
        v49 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v49);
      }
      while (v49 != v48);
      v50 = *(void **)&v125[9];
    }
    *(_QWORD *)&v125[17] = v48;
    operator delete(v50);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v124 + 1));
  if ((char)v124 < 0)
    operator delete(*((void **)&v123 + 1));
  if (SBYTE7(v123) < 0)
    operator delete((void *)__dst);
  objc_msgSend(v35, "camera");
  v51 = (void *)objc_claimAutoreleasedReturnValue();

  if (v51)
  {
    objc_msgSend(v35, "camera");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    strcpy((char *)&__dst, "CameraTracking");
    *(_WORD *)((char *)&v123 + 7) = 14;
    v124 = 0u;
    memset(v125, 0, sizeof(v125));
    v126 = 0;
    v107[23] = 5;
    strcpy(v107, "State");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v52, "trackingState"));
    v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v54 = (const std::string::value_type *)objc_msgSend(v53, "UTF8String");
    memset(&v111, 0, sizeof(v111));
    v112 = 4;
    if (v54)
    {
      std::string::__assign_external(&v111, v54);
    }
    else
    {
      *((_BYTE *)&v111.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v111, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v107, (uint64_t)v110);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);

    v104[23] = 6;
    strcpy(v104, "Reason");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v52, "trackingStateReason"));
    v55 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v56 = (const std::string::value_type *)objc_msgSend(v55, "UTF8String");
    memset(&v108, 0, sizeof(v108));
    v109 = 4;
    if (v56)
    {
      std::string::__assign_external(&v108, v56);
    }
    else
    {
      *((_BYTE *)&v108.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v108, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v104, (uint64_t)v107);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);

    gdc::DebugTreeNode::addChildNode(v133, &__dst);
    v57 = *(_QWORD *)&v125[9];
    if (*(_QWORD *)&v125[9])
    {
      v58 = *(_QWORD *)&v125[17];
      v59 = *(void **)&v125[9];
      if (*(_QWORD *)&v125[17] != *(_QWORD *)&v125[9])
      {
        do
        {
          v58 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v58);
        }
        while (v58 != v57);
        v59 = *(void **)&v125[9];
      }
      *(_QWORD *)&v125[17] = v57;
      operator delete(v59);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v124 + 1));
    if ((char)v124 < 0)
    {
      operator delete(*((void **)&v123 + 1));
      if (SBYTE7(v123) < 0)
        goto LABEL_133;
    }
    else
    {
      if ((SBYTE7(v123) & 0x80000000) == 0)
        goto LABEL_99;
LABEL_133:
      operator delete((void *)__dst);
    }
LABEL_99:

  }
  objc_msgSend(v35, "location");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  if (v60)
  {

    goto LABEL_103;
  }
  objc_msgSend(v35, "rawLocation");
  v61 = (void *)objc_claimAutoreleasedReturnValue();

  if (v61)
  {
LABEL_103:
    objc_msgSend(v35, "location");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    if (v62)
      objc_msgSend(v35, "location");
    else
      objc_msgSend(v35, "rawLocation");
    v63 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v63, "coordinate");
    v65 = v64;
    objc_msgSend(v63, "coordinate");
    v67 = v66;
    objc_msgSend(v63, "altitude");
    v69 = v68;
    strcpy((char *)&__dst, "Location");
    *(_WORD *)((char *)&v123 + 7) = 8;
    v124 = 0u;
    memset(v125, 0, sizeof(v125));
    v126 = 0;
    HIBYTE(v99) = 13;
    strcpy(v98, "isRawLocation");
    objc_msgSend(v35, "rawLocation");
    v70 = (id)objc_claimAutoreleasedReturnValue();
    if (v63 == v70)
      v71 = "True";
    else
      v71 = "False";
    memset(&v105, 0, sizeof(v105));
    v106 = 4;
    std::string::__assign_external(&v105, v71);
    gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v98, (uint64_t)v104);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);

    HIBYTE(v93) = 9;
    strcpy(v92, "Latitutde");
    v101 = 0;
    v102 = 0;
    v100 = 0;
    v103 = 2;
    v99 = v65;
    gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v92, (uint64_t)v98);
    HIBYTE(v86) = 9;
    strcpy(v85, "Longitude");
    v95 = 0;
    v96 = 0;
    v94 = 0;
    v97 = 2;
    v93 = v67;
    gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v85, (uint64_t)v92);
    v91[23] = 8;
    strcpy(v91, "Altitude");
    v88 = 0;
    v89 = 0;
    v87 = 0;
    v90 = 2;
    v86 = v69;
    gdc::DebugTreeNode::addProperty((uint64_t)&__dst, (uint64_t)v91, (uint64_t)v85);
    gdc::DebugTreeNode::addChildNode(v133, &__dst);
    v72 = *(_QWORD *)&v125[9];
    if (*(_QWORD *)&v125[9])
    {
      v73 = *(_QWORD *)&v125[17];
      v74 = *(void **)&v125[9];
      if (*(_QWORD *)&v125[17] != *(_QWORD *)&v125[9])
      {
        do
        {
          v73 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v73);
        }
        while (v73 != v72);
        v74 = *(void **)&v125[9];
      }
      *(_QWORD *)&v125[17] = v72;
      operator delete(v74);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v124 + 1));
    if ((char)v124 < 0)
    {
      operator delete(*((void **)&v123 + 1));
      if (SBYTE7(v123) < 0)
        goto LABEL_131;
    }
    else
    {
      if ((SBYTE7(v123) & 0x80000000) == 0)
        goto LABEL_118;
LABEL_131:
      operator delete((void *)__dst);
    }
LABEL_118:

  }
  gdc::DebugTreeNode::addChildNode(v78, (__int128 *)v133);
  v75 = *(_QWORD *)&v135[32];
  if (*(_QWORD *)&v135[32])
  {
    v76 = *(_QWORD *)&v135[40];
    v77 = *(void **)&v135[32];
    if (*(_QWORD *)&v135[40] != *(_QWORD *)&v135[32])
    {
      do
      {
        v76 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v76);
      }
      while (v76 != v75);
      v77 = *(void **)&v135[32];
    }
    *(_QWORD *)&v135[40] = v75;
    operator delete(v77);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v135[8]);
  if ((v135[7] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v134[1]);
    if ((v134[0] & 0x80000000) != 0)
      goto LABEL_129;
  }
  else
  {
    if ((v134[0] & 0x80000000) == 0)
      goto LABEL_126;
LABEL_129:
    operator delete(*(void **)v133);
  }
LABEL_126:

  v9 = v79;
LABEL_127:

}

void sub_19FE21C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, gdc::DebugTreeNode *a11, void *a12)
{
  void *v12;
  void *v13;

  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&STACK[0x360]);
  gdc::DebugTreeNode::~DebugTreeNode(a11);
  _Unwind_Resume(a1);
}

void md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _BYTE v14[19];
  void *__p;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v4 = (_QWORD *)operator new();
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v14, a1);
  v5 = operator new();
  *(_OWORD *)v5 = *(_OWORD *)v14;
  *(_DWORD *)(v5 + 15) = *(_DWORD *)&v14[15];
  v6 = __p;
  v7 = v16;
  __p = 0;
  v16 = 0;
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 32) = v7;
  v8 = v17;
  v9 = v18;
  *(_QWORD *)(v5 + 40) = v17;
  *(_QWORD *)(v5 + 48) = v9;
  *(_DWORD *)(v5 + 56) = v19;
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    v8 = 0;
    v6[v10] = v5 + 40;
    v17 = 0;
    v18 = 0;
  }
  *(_OWORD *)(v5 + 64) = v20;
  v11 = v21;
  v21 = 0;
  *(_QWORD *)(v5 + 80) = v11;
  *(_OWORD *)(v5 + 88) = v22;
  v4[2] = "md::ARLogicContext]";
  v4[3] = 18;
  v4[4] = v5;
  *v4 = &off_1E42B0BE0;
  v4[1] = 0x37F8C546A65FE3EELL;
  *a2 = v4;
  if (v8)
  {
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  v13 = __p;
  __p = 0;
  if (v13)
    operator delete(v13);
}

void sub_19FE21F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::ARLogicContext::~ARLogicContext((id *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x37F8C546A65FE3EELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SettingsContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x37F8C546A65FE3EELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SettingsContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x37F8C546A65FE3EELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SettingsContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x37F8C546A65FE3EELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SettingsContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x37F8C546A65FE3EELL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SettingsContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 15) = 0;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_WORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 66) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return result;
}

uint64_t md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  NSObject *v18;
  void *v19;
  int v20;
  int v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  __CVBuffer *v27;
  __CVBuffer *v28;
  OSType PixelFormatType;
  IOSurfaceRef IOSurface;
  __IOSurface *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  int Width;
  int Height;
  signed int PixelFormat;
  size_t BytesPerElement;
  int v42;
  int v43;
  NSObject *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  unsigned __int8 v70;
  __int16 v71;
  unsigned __int8 v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  NSObject *v95;
  unint64_t v96;
  const char *v97;
  NSObject *v98;
  unint64_t v99;
  const char *v100;
  size_t v101;
  unint64_t v102;
  const char *v103;
  size_t v104;
  unint64_t v105;
  const char *v106;
  size_t v107;
  size_t v108;
  void **v109;
  unint64_t v110;
  const void **v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  char v118;
  id v119;
  uint64_t v120;
  char v121;
  unsigned __int8 v122;
  NSObject *v123;
  unint64_t v124;
  const char *v125;
  double v126;
  double v127;
  double v128;
  long double v129;
  double v130;
  long double v131;
  double v132;
  __double2 v133;
  double v134;
  double v135;
  __double2 v136;
  double v137;
  double v138;
  double v139;
  double v140;
  __double2 v141;
  double v142;
  __double2 v143;
  NSObject *v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  double v151;
  NSObject *v152;
  long double v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  unint64_t v159;
  __CFString *v160;
  uint64_t v161;
  md::LayoutContext *v162;
  int v163;
  uint64_t v164;
  id obj;
  void *v166;
  void *v167;
  void *v168;
  void *__dst[2];
  int64_t v170;
  uint8_t v171[4];
  void **v172;
  _BYTE buf[14];
  _BYTE v174[10];
  const char *v175;
  __int16 v176;
  _WORD v177[15];
  uint64_t v178;
  unint64_t v179;
  void *__p;
  char v181;
  unint64_t v182;
  int v183;
  _QWORD v184[22];

  v162 = a2;
  v184[20] = *MEMORY[0x1E0C80C00];
  v7 = a3[1];
  v8 = *(_BYTE **)v7;
  v9 = *(_BYTE **)(v7 + 8);
  v10 = v8;
  if (v8 != v9)
  {
    v10 = v8;
    while (*v10 != 26)
    {
      v10 += 16;
      if (v10 == v9)
        goto LABEL_8;
    }
  }
  if (v10 == v9)
LABEL_8:
    LOBYTE(v11) = 0;
  else
    v11 = *((_QWORD *)v10 + 1);
  *(_BYTE *)(a1 + 257) = v11;
  if (v8 != v9)
  {
    while (*v8 != 27)
    {
      v8 += 16;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9)
LABEL_15:
    v12 = 0;
  else
    v12 = v8[8];
  *(_BYTE *)(a1 + 256) = v12;
  v13 = (_QWORD *)gdc::Registry::storage<arComponents::Configuration>(*(_QWORD *)(a1 + 248));
  v14 = v13[7];
  v15 = v13[8];
  if (v14 == v15 || *(_BYTE *)(v13[10] + (((unint64_t)(v15 - v14 - 8) >> 2) & 0x3FFFFFFFFFFFFFFELL)))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v162);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "arEnableCameraFeed");

  }
  else
  {
    v17 = 0;
  }
  if (*(unsigned __int8 *)(a4 + 66) != v17)
  {
    *(_BYTE *)(a4 + 66) = v17;
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v18 = (id)GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "arEnableCameraFeed");
      v21 = *(unsigned __int8 *)(a4 + 66);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v21;
      _os_log_impl(&dword_19F029000, v18, OS_LOG_TYPE_INFO, "CameraFeedEnabledDidChange:(DebugToggleIs:%d)%d", buf, 0xEu);

    }
  }
  v164 = *a3;
  *(_QWORD *)(a4 + 72) = 0;
  v22 = *(void **)(a1 + 160);
  v23 = v22;
  v167 = v23;
  if (v23)
  {
    objc_msgSend(v23, "currentFrame");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v168 = 0;
  }
  obj = v22;
  v163 = *(unsigned __int8 *)(a1 + 257);
  objc_msgSend(*(id *)(a1 + 448), "setAlwaysUseGoodRouteMatch:", v163 != 0);
  v24 = v168;
  if (!*(_BYTE *)(a4 + 66))
    v24 = 0;
  v25 = v24;
  v26 = v25;
  if (v25)
  {
    v27 = (__CVBuffer *)objc_msgSend(v25, "capturedImage");
    v28 = v27;
    if (v27)
    {
      if (CVPixelBufferGetPlaneCount(v27) == 2)
      {
        PixelFormatType = CVPixelBufferGetPixelFormatType(v28);
        if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066)
        {
          IOSurface = CVPixelBufferGetIOSurface(v28);
          v31 = IOSurface;
          v32 = *(_QWORD *)(a1 + 432);
          if (v32 && *(IOSurfaceRef *)(v32 + 160) == IOSurface)
            goto LABEL_79;
          v33 = operator new(0xC8uLL);
          v33[1] = 0;
          v33[2] = 0;
          *v33 = &off_1E42E0BB8;
          v34 = *(_QWORD *)(a1 + 416);
          v35 = *(std::__shared_weak_count **)(a1 + 424);
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(p_shared_owners);
            while (__stxr(v37 + 1, p_shared_owners));
          }
          Width = IOSurfaceGetWidth(v31);
          Height = IOSurfaceGetHeight(v31);
          PixelFormat = IOSurfaceGetPixelFormat(v31);
          BytesPerElement = IOSurfaceGetBytesPerElement(v31);
          if (PixelFormat > 1111970368)
          {
            if (PixelFormat == 1380401729)
            {
              if (BytesPerElement == 4)
              {
                v42 = Height;
                v43 = 12;
                goto LABEL_63;
              }
            }
            else if (PixelFormat == 1111970369 && BytesPerElement == 4)
            {
              v42 = Height;
              v43 = 14;
              goto LABEL_63;
            }
          }
          else if (PixelFormat == 875704422)
          {
            if (BytesPerElement == 1)
            {
              v42 = Height;
              v43 = 42;
              goto LABEL_63;
            }
          }
          else if (PixelFormat == 875704438 && BytesPerElement == 1)
          {
            v42 = Height;
            v43 = 43;
LABEL_63:
            *((_DWORD *)v33 + 14) = 0;
            v33[5] = 0;
            v33[6] = 0;
            v33[10] = 0x200000001;
            *((_DWORD *)v33 + 22) = 0;
            *((_DWORD *)v33 + 23) = v43;
            *((_DWORD *)v33 + 24) = 1;
            *(_QWORD *)((char *)v33 + 100) = 0;
            *(_QWORD *)((char *)v33 + 116) = 0;
            *(_QWORD *)((char *)v33 + 124) = 0x100000000;
            *(_QWORD *)((char *)v33 + 108) = 0;
            v33[3] = &off_1E42BE438;
            v33[4] = 0;
            v33[8] = &unk_1E42BE458;
            v33[9] = "";
            v33[17] = 0;
            v33[18] = 0;
            *((_WORD *)v33 + 76) = 0;
            *((_BYTE *)v33 + 154) = 1;
            v33[20] = v34;
            v33[21] = v35;
            if (v35)
            {
              v48 = (unint64_t *)&v35->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            *((_DWORD *)v33 + 26) = Width;
            *((_DWORD *)v33 + 27) = v42;
            v33[3] = &off_1E42B8850;
            v33[8] = &unk_1E42B8870;
            v33[24] = 0;
            CFRetain(v31);
            v33[23] = v31;
            *((_DWORD *)v33 + 20) = 4;
            if (v35)
            {
              v50 = (unint64_t *)&v35->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v52 = *(std::__shared_weak_count **)(a1 + 440);
            *(_QWORD *)(a1 + 432) = v33 + 3;
            *(_QWORD *)(a1 + 440) = v33;
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            objc_msgSend(v26, "currentCaptureTimestamp", v162);
            v56 = vcvtmd_s64_f64(log((v55 - *(double *)a4) * 250.0));
            v57 = v56 & ~(v56 >> 63);
            if (v57 >= 7)
              v57 = 7;
            ++*(_QWORD *)(a1 + 8 * v57 + 272);
            objc_msgSend(v26, "currentCaptureTimestamp");
            *(_QWORD *)a4 = v58;
            goto LABEL_79;
          }
          v42 = Height;
          v43 = 0;
          goto LABEL_63;
        }
        LOBYTE(__dst[0]) = HIBYTE(PixelFormatType);
        BYTE1(__dst[0]) = BYTE2(PixelFormatType);
        BYTE2(__dst[0]) = BYTE1(PixelFormatType);
        *(_WORD *)((char *)__dst + 3) = PixelFormatType;
        if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
        v44 = GEOGetVectorKitARLogicLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = __dst;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)v174 = "false";
          *(_WORD *)&v174[8] = 2080;
          v175 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARLogic.mm";
          v176 = 1024;
          *(_DWORD *)v177 = 50;
          _os_log_impl(&dword_19F029000, v44, OS_LOG_TYPE_ERROR, "Unexpected pixel buffer format %s: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
        }
      }
    }
  }
  v45 = *(std::__shared_weak_count **)(a1 + 440);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_79:

  *(_QWORD *)(a4 + 72) = *(_QWORD *)(a1 + 432);
  v59 = v167;
  v166 = v59;
  if (!v167)
  {
    if (!v163)
    {

      *(_WORD *)(a4 + 64) = 0;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_BYTE *)(a4 + 88) = 0;
      *(_BYTE *)(a4 + 96) = 0;
      goto LABEL_207;
    }
    v71 = 0;
    v64 = 2;
    v70 = 3;
    v62 = 1;
    goto LABEL_99;
  }
  v60 = v59;
  objc_msgSend(v60, "currentFrame");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = objc_msgSend(v61, "renderFramesPerSecond");
  v63 = objc_msgSend(v60, "state");
  if (v63 < 3)
    v64 = v63 + 1;
  else
    v64 = 0;
  objc_msgSend(v61, "geoTrackingStatus", v162);
  v65 = (id)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend(v65, "state");
  v67 = objc_msgSend(v65, "stateReason");
  v68 = objc_msgSend(v65, "accuracy");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v65) = objc_msgSend(v69, "arDebugLockLocalizingState");

  if ((v65 & 1) != 0)
  {
    v70 = 0;
    v71 = 0;
    v72 = 2;
    goto LABEL_100;
  }
  if (v66 >= 4)
    v72 = 0;
  else
    v72 = v66;
  if ((unint64_t)(v67 - 1) >= 8)
    v71 = 0;
  else
    v71 = v67;
  if (v68 >= 4)
    v70 = 0;
  else
    v70 = v68;
  if (v163 && v64 == 2)
  {
    v71 = 0;
    v70 = 3;
LABEL_99:
    v72 = 3;
  }
LABEL_100:

  if (v62 != *(_QWORD *)(a1 + 408))
  {
    *(_QWORD *)(a1 + 408) = v62;
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v73 = GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v74 = *(_QWORD *)(a1 + 408);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v74;
      _os_log_impl(&dword_19F029000, v73, OS_LOG_TYPE_INFO, "ARRequestedFramesPerSecond:%d", buf, 8u);
    }
    v75 = *(uint64_t **)(a1 + 128);
    v76 = *(_QWORD *)(a1 + 408);
    v75[1] = v76;
    v77 = *v75;
    if (*v75 && !**(_BYTE **)(v77 + 1056))
      md::MapEngine::setDisplayRate(v77, v76);
  }
  v78 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  v79 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  v80 = *(void **)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v79;
  if (v80)
    operator delete(v80);
  v81 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v78;
  if (v81)
    operator delete(v81);
  v82 = *(_QWORD *)(a4 + 40);
  v83 = *(_QWORD *)(a4 + 32);
  v84 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v83;
  *(_QWORD *)(a4 + 40) = v84;
  *(_QWORD *)(a1 + 224) = v82;
  v85 = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v85;
  v86 = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = v86;
  if (*(_QWORD *)(a4 + 48))
  {
    v87 = *(_QWORD *)(a4 + 32);
    v88 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8);
    if ((v87 & (v87 - 1)) != 0)
    {
      if (v88 >= v87)
        v88 %= v87;
    }
    else
    {
      v88 &= v87 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v88) = a4 + 40;
  }
  if (v85)
  {
    v89 = *(_QWORD *)(a1 + 216);
    v90 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8);
    if ((v89 & (v89 - 1)) != 0)
    {
      if (v90 >= v89)
        v90 %= v89;
    }
    else
    {
      v90 &= v89 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v90) = a1 + 224;
    v91 = *(_QWORD **)(a1 + 224);
    if (v91)
    {
      do
      {
        v92 = (_QWORD *)*v91;
        operator delete(v91);
        v91 = v92;
      }
      while (v92);
    }
    *(_QWORD *)(a1 + 224) = 0;
    v93 = *(_QWORD *)(a1 + 216);
    if (v93)
    {
      for (i = 0; i != v93; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 232) = 0;
  }
  if (*(unsigned __int8 *)(a4 + 64) != v64)
  {
    *(_BYTE *)(a4 + 64) = v64;
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v95 = GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v96 = *(unsigned __int8 *)(a4 + 64);
      if (v96 > 3)
        v97 = "<Invalid>";
      else
        v97 = off_1E42F8718[v96];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v97;
      _os_log_impl(&dword_19F029000, v95, OS_LOG_TYPE_INFO, "SessionStateDidChange:%s", buf, 0xCu);
    }
  }
  if (*(unsigned __int8 *)(a4 + 16) == v72
    && *(unsigned __int8 *)(a4 + 17) == v71
    && *(unsigned __int8 *)(a4 + 18) == v70)
  {
    goto LABEL_179;
  }
  *(_BYTE *)(a4 + 18) = v70;
  *(_WORD *)(a4 + 16) = v72 | (unsigned __int16)(v71 << 8);
  if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
  v98 = (id)GEOGetVectorKitARLogicLog(void)::log;
  if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)buf);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v174[2], (uint64_t)"GeoTrackingStatus(state:", 24);
    v99 = *(unsigned __int8 *)(a4 + 16);
    if (v99 > 3)
      v100 = "<Invalid>";
    else
      v100 = off_1E42F6CD8[v99];
    v101 = strlen(v100);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v174[2], (uint64_t)v100, v101);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v174[2], (uint64_t)", reason:", 9);
    v102 = *(unsigned __int8 *)(a4 + 17);
    if (v102 > 8)
      v103 = "<Invalid>";
    else
      v103 = off_1E42F3620[v102];
    v104 = strlen(v103);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v174[2], (uint64_t)v103, v104);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v174[2], (uint64_t)", accuracy:", 11);
    v105 = *(unsigned __int8 *)(a4 + 18);
    if (v105 > 3)
      v106 = "<Invalid>";
    else
      v106 = off_1E42F3668[v105];
    v107 = strlen(v106);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v174[2], (uint64_t)v106, v107);
    if ((v183 & 0x10) != 0)
    {
      v110 = v182;
      if (v182 < v179)
      {
        v182 = v179;
        v110 = v179;
      }
      v111 = (const void **)&v178;
    }
    else
    {
      if ((v183 & 8) == 0)
      {
        v108 = 0;
        HIBYTE(v170) = 0;
        v109 = __dst;
        goto LABEL_168;
      }
      v111 = (const void **)&v177[3];
      v110 = *(_QWORD *)&v177[11];
    }
    v112 = *v111;
    v108 = v110 - (_QWORD)*v111;
    if (v108 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v108 >= 0x17)
    {
      v113 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v108 | 7) != 0x17)
        v113 = v108 | 7;
      v114 = v113 + 1;
      v109 = (void **)operator new(v113 + 1);
      __dst[1] = (void *)v108;
      v170 = v114 | 0x8000000000000000;
      __dst[0] = v109;
    }
    else
    {
      HIBYTE(v170) = v110 - *(_BYTE *)v111;
      v109 = __dst;
      if (!v108)
        goto LABEL_168;
    }
    memmove(v109, v112, v108);
LABEL_168:
    *((_BYTE *)v109 + v108) = 0;
    *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
    v115 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v174[2] = v115;
    v175 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v181 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AF4D64](v184);
    v116 = __dst;
    if (v170 < 0)
      v116 = (void **)__dst[0];
    *(_DWORD *)v171 = 136315138;
    v172 = v116;
    _os_log_impl(&dword_19F029000, v98, OS_LOG_TYPE_INFO, "GeoTrackingStateDidChange:%s", v171, 0xCu);
    if (SHIBYTE(v170) < 0)
      operator delete(__dst[0]);
  }

  if (*(_BYTE *)(a4 + 64) == 2 && *(_BYTE *)(a4 + 16) == 3)
  {
    md::LayoutContext::frameState(v162);
    *(_QWORD *)(a4 + 88) = *(_QWORD *)(v117 + 88);
    v118 = 1;
  }
  else
  {
    v118 = 0;
    *(_BYTE *)(a4 + 88) = 0;
  }
  *(_BYTE *)(a4 + 96) = v118;
LABEL_179:
  objc_storeStrong((id *)(a4 + 80), obj);
  objc_msgSend(v168, "camera");
  v119 = (id)objc_claimAutoreleasedReturnValue();
  v120 = objc_msgSend(v119, "trackingState");
  if (v120 == 1)
    v121 = 1;
  else
    v121 = 2;
  if (v120)
    v122 = v121;
  else
    v122 = 0;

  if (*(unsigned __int8 *)(a4 + 65) != v122)
  {
    *(_BYTE *)(a4 + 65) = v122;
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v123 = GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v124 = *(unsigned __int8 *)(a4 + 65);
      if (v124 > 2)
        v125 = "<Invalid>";
      else
        v125 = off_1E42F8738[v124];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v125;
      _os_log_impl(&dword_19F029000, v123, OS_LOG_TYPE_INFO, "TrackingStateDidChange:%s", buf, 0xCu);
    }
  }
  if (*(_BYTE *)(a4 + 16) == 3)
  {
    v126 = *(double *)(v164 + 4288);
    v127 = *(double *)(v164 + 4296);
    v128 = *(double *)(v164 + 4304);
    if (!*(_BYTE *)(v164 + 3776))
    {
      v129 = exp(v127 * 6.28318531 + -3.14159265);
      v130 = atan(v129) * 2.0 + -1.57079633;
      v131 = fmod(v126 * 6.28318531, 6.28318531);
      v132 = fmod(v131 + 6.28318531, 6.28318531) + -3.14159265;
      v133 = __sincos_stret(v130);
      v134 = 6378137.0 / sqrt(v133.__sinval * v133.__sinval * -0.00669437999 + 1.0);
      v135 = (v134 + v128 * 40075017.0) * v133.__cosval;
      v136 = __sincos_stret(v132);
      v126 = v135 * v136.__cosval;
      v127 = v135 * v136.__sinval;
      v128 = (v128 * 40075017.0 + v134 * 0.99330562) * v133.__sinval;
    }
    v137 = (*(double *)(a1 + 360) - v126) * (*(double *)(a1 + 360) - v126)
         + (*(double *)(a1 + 368) - v127) * (*(double *)(a1 + 368) - v127)
         + (*(double *)(a1 + 376) - v128) * (*(double *)(a1 + 376) - v128);
    if (v137 > 1.0)
    {
      v138 = sqrt(v126 * v126 + v127 * v127);
      v139 = atan2(v128, v138 * 0.996647189);
      v140 = atan2(v127, v126);
      v141 = __sincos_stret(v139);
      v142 = atan2(v128 + v141.__sinval * v141.__sinval * 42841.3115 * v141.__sinval, v138 + v141.__cosval * v141.__cosval * -42697.6727 * v141.__cosval);
      v143 = __sincos_stret(v142);
      *(double *)(a1 + 336) = v142 * 57.2957795;
      *(double *)(a1 + 344) = v140 * 57.2957795;
      *(double *)(a1 + 352) = v138 / v143.__cosval
                            + -6378137.0 / sqrt(v143.__sinval * v143.__sinval * -0.00669437999 + 1.0);
      *(double *)(a1 + 360) = v126;
      *(double *)(a1 + 368) = v127;
      *(double *)(a1 + 376) = v128;
      if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
      v144 = GEOGetVectorKitARLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_INFO))
      {
        v145 = *(_QWORD *)(a1 + 336);
        v146 = *(const char **)(a1 + 344);
        v147 = *(_QWORD *)(a1 + 352);
        *(_DWORD *)buf = 134218753;
        *(_QWORD *)&buf[4] = sqrt(v137);
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)v174 = v145;
        *(_WORD *)&v174[8] = 2049;
        v175 = v146;
        v176 = 2049;
        *(_QWORD *)v177 = v147;
        _os_log_impl(&dword_19F029000, v144, OS_LOG_TYPE_INFO, "Camera Position(%f):%{private}f,%{private}f,%{private}f", buf, 0x2Au);
      }
    }
  }
  if (*(_BYTE *)(a4 + 65) == 2)
  {
    v148 = *(double *)(v164 + 5208);
    v149 = *(double *)(v164 + 5216);
    v150 = *(double *)(v164 + 5224);
    v151 = *(double *)(a1 + 384) * v148 + *(double *)(a1 + 392) * v149 + *(double *)(a1 + 400) * v150;
    if (v151 < 0.97)
    {
      *(double *)(a1 + 384) = v148;
      *(double *)(a1 + 392) = v149;
      *(double *)(a1 + 400) = v150;
      if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
      v152 = GEOGetVectorKitARLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_INFO))
      {
        v153 = acos(v151);
        v154 = *(_QWORD *)(a1 + 384);
        v155 = *(const char **)(a1 + 392);
        v156 = *(_QWORD *)(a1 + 400);
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = v153 * 57.2957795;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)v174 = v154;
        *(_WORD *)&v174[8] = 2048;
        v175 = v155;
        v176 = 2048;
        *(_QWORD *)v177 = v156;
        _os_log_impl(&dword_19F029000, v152, OS_LOG_TYPE_INFO, "Camera Dir(%f):%f,%f,%f", buf, 0x2Au);
      }
    }
  }
LABEL_207:

  v157 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a4 + 8) != v157)
  {
    *(_QWORD *)(a4 + 8) = v157;
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v158 = (id)GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled(v158, OS_LOG_TYPE_INFO))
    {
      v159 = *(_QWORD *)(a4 + 8) - 1;
      if (v159 > 3)
        v160 = CFSTR("Unknown");
      else
        v160 = off_1E42F8788[v159];
      v161 = -[__CFString UTF8String](v160, "UTF8String", v162);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v161;
      _os_log_impl(&dword_19F029000, v158, OS_LOG_TYPE_INFO, "ARInterfaceOrientationDidChange:%s", buf, 0xCu);
    }

  }
}

void sub_19FE234C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  ggl::Texture2D *v21;
  void *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;

  ggl::Texture2D::~Texture2D(v21);
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v28);

  _Unwind_Resume(a1);
}

void md::Logic<md::ARLogic,md::ARLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::ARLogic::sessionDidUpdateFrame(md::ARLogic *this, ARSession *a2)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((ARSession **)this + 20) == a2)
  {
    v3 = **((_QWORD **)this + 16);
    if (v3)
    {
      LOBYTE(v4) = 8;
      md::MapEngine::setNeedsTick(v3, &v4);
    }
  }
  else
  {
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v2 = GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315650;
      v5 = "false";
      v6 = 2080;
      v7 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARLogic.mm";
      v8 = 1024;
      v9 = 186;
      _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_ERROR, "Observing incorrect sesesion: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

void md::ARLogic::sessionDidUpdateGeoTrackingStatus(md::ARLogic *this, ARSession *a2)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((ARSession **)this + 20) == a2)
  {
    std::__hash_table<md::ARLogicEvent,std::hash<md::ARLogicEvent>,std::equal_to<md::ARLogicEvent>,std::allocator<md::ARLogicEvent>>::__emplace_unique_key_args<md::ARLogicEvent,md::ARLogicEvent>((float *)this + 52, 0, 0);
  }
  else
  {
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v2 = GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315650;
      v4 = "false";
      v5 = 2080;
      v6 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARLogic.mm";
      v7 = 1024;
      v8 = 196;
      _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_ERROR, "Observing incorrect sesesion: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v3, 0x1Cu);
    }
  }
}

void md::ARLogic::sessionDidUpdateAnchors(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint32_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  BOOL v19;
  gdc::Registry *v20;
  unint64_t v21;
  uint64_t *updated;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void **v42;
  void **v43;
  void **v44;
  void *v45;
  void *v46;
  id *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id obj;
  id v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  uint8_t v61[128];
  _BYTE buf[22];
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*(_QWORD *)(a1 + 160) == a2)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "arEnableEnvironmentMap");

    if ((v12 & 1) != 0)
    {
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = v5;
      v50 = v5;
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
      if (v13)
      {
        v54 = *(_QWORD *)v56;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v56 != v54)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
            v16 = v15;
            v17 = v16;
            if (v16)
            {
              objc_msgSend(v16, "environmentTexture");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = v18 == 0;

              if (!v19)
              {
                v20 = *(gdc::Registry **)(a1 + 248);
                v53 = v17;
                v21 = gdc::Registry::create(v20);
                updated = (uint64_t *)gdc::Registry::storage<arComponents::UpdateEnvironentProbeTexture>((uint64_t)v20);
                v59 = v21;
                v23 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(updated + 4, (uint64_t)&v59);
                if ((v24 & 1) != 0)
                {
                  v31 = updated[11];
                  v30 = updated[12];
                  if (v31 >= v30)
                  {
                    v33 = updated[10];
                    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v33) >> 3);
                    v35 = v34 + 1;
                    if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
                      abort();
                    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v33) >> 3);
                    if (2 * v36 > v35)
                      v35 = 2 * v36;
                    if (v36 >= 0x555555555555555)
                      v37 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v37 = v35;
                    if (v37)
                    {
                      if (v37 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_57;
                      v38 = (char *)operator new(24 * v37);
                    }
                    else
                    {
                      v38 = 0;
                    }
                    v40 = &v38[24 * v34];
                    *(_QWORD *)v40 = &off_1E42B5070;
                    *((_QWORD *)v40 + 1) = 0;
                    objc_storeStrong((id *)v40 + 1, v15);
                    v41 = &v38[24 * v37];
                    v32 = (uint64_t)(v40 + 24);
                    v42 = (void **)updated[10];
                    v43 = (void **)updated[11];
                    if (v43 == v42)
                    {
                      updated[10] = (uint64_t)v40;
                      updated[11] = v32;
                      updated[12] = (uint64_t)v41;
                    }
                    else
                    {
                      v51 = (uint64_t)v41;
                      do
                      {
                        *((_QWORD *)v40 - 3) = &off_1E42B5070;
                        v40 -= 24;
                        *((_QWORD *)v40 + 1) = 0;
                        v45 = *(v43 - 2);
                        v44 = v43 - 2;
                        objc_storeStrong((id *)v40 + 1, v45);
                        v46 = *v44;
                        *v44 = 0;

                        v43 = v44 - 1;
                      }
                      while (v43 != v42);
                      v43 = (void **)updated[10];
                      v47 = (id *)updated[11];
                      updated[10] = (uint64_t)v40;
                      updated[11] = v32;
                      updated[12] = v51;
                      while (v47 != v43)
                      {
                        *(v47 - 3) = &off_1E42B5070;
                        v47 -= 3;

                      }
                    }
                    if (v43)
                      operator delete(v43);
                  }
                  else
                  {
                    *(_QWORD *)v31 = &off_1E42B5070;
                    *(_QWORD *)(v31 + 8) = 0;
                    objc_storeStrong((id *)(v31 + 8), v15);
                    v32 = v31 + 24;
                  }
                  updated[11] = v32;
                  v26 = updated[31];
                  v29 = v53;
                  v39 = (_QWORD *)updated[22];
                  if (v39)
                  {
LABEL_44:
                    do
                    {
                      *(_QWORD *)buf = &v59;
                      *(_QWORD *)&buf[8] = 1;
                      v60 = v26;
                      v48 = v39[6];
                      if (!v48)
                        goto LABEL_55;
                      (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v48 + 48))(v48, &v60, buf);
                      v39 = (_QWORD *)*v39;
                    }
                    while (v39);
                  }
                }
                else
                {
                  v25 = updated[10] + 24 * (((uint64_t)v23 - updated[7]) >> 3);
                  objc_storeStrong((id *)(v25 + 8), v15);

                  v26 = updated[31];
                  if (v25 == updated[11])
                  {
                    v29 = 0;
                    v39 = (_QWORD *)updated[22];
                    if (v39)
                      goto LABEL_44;
                  }
                  else
                  {
                    v27 = (_QWORD *)updated[16];
                    if (v27)
                    {
                      while (1)
                      {
                        *(_QWORD *)buf = &v59;
                        *(_QWORD *)&buf[8] = 1;
                        v60 = v26;
                        v28 = v27[6];
                        if (!v28)
                          break;
                        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v28 + 48))(v28, &v60, buf);
                        v27 = (_QWORD *)*v27;
                        if (!v27)
                          goto LABEL_19;
                      }
LABEL_55:
                      std::__throw_bad_function_call[abi:nn180100]();
                      __break(1u);
LABEL_57:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
LABEL_19:
                    v29 = 0;
                  }
                }

              }
            }

          }
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
        }
        while (v13);
      }

      std::__hash_table<md::ARLogicEvent,std::hash<md::ARLogicEvent>,std::equal_to<md::ARLogicEvent>,std::allocator<md::ARLogicEvent>>::__emplace_unique_key_args<md::ARLogicEvent,md::ARLogicEvent>((float *)(a1 + 208), 1u, 1);
      if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
      v5 = v50;
      v49 = GEOGetVectorKitARLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        v7 = "ARSession Anchors did update";
        v8 = v49;
        v9 = OS_LOG_TYPE_DEBUG;
        v10 = 2;
        goto LABEL_53;
      }
    }
  }
  else
  {
    if (GEOGetVectorKitARLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARLogicLog(void)::onceToken, &__block_literal_global_34696);
    v6 = GEOGetVectorKitARLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARLogicLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "false";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARLogic.mm";
      v63 = 1024;
      v64 = 206;
      v7 = "Observing incorrect sesesion: Assertion with expression - %s : Failed in file - %s line - %i";
      v8 = v6;
      v9 = OS_LOG_TYPE_ERROR;
      v10 = 28;
LABEL_53:
      _os_log_impl(&dword_19F029000, v8, v9, v7, buf, v10);
    }
  }

}

void sub_19FE23E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void `non-virtual thunk to'md::ARLogic::sessionDidUpdateFrame(md::ARLogic *this, ARSession *a2)
{
  md::ARLogic::sessionDidUpdateFrame((md::ARLogic *)((char *)this - 120), a2);
}

void `non-virtual thunk to'md::ARLogic::sessionDidUpdateGeoTrackingStatus(md::ARLogic *this, ARSession *a2)
{
  md::ARLogic::sessionDidUpdateGeoTrackingStatus((md::ARLogic *)((char *)this - 120), a2);
}

void `non-virtual thunk to'md::ARLogic::sessionDidUpdateAnchors(uint64_t a1, uint64_t a2, void *a3)
{
  md::ARLogic::sessionDidUpdateAnchors(a1 - 120, a2, a3);
}

void std::__hash_table<md::ARLogicEvent,std::hash<md::ARLogicEvent>,std::equal_to<md::ARLogicEvent>,std::allocator<md::ARLogicEvent>>::__emplace_unique_key_args<md::ARLogicEvent,md::ARLogicEvent>(float *a1, unsigned __int8 a2, char a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_BYTE *)v13 + 16) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FE2432C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZL25GEOGetVectorKitARLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARLogic");
  v1 = (void *)GEOGetVectorKitARLogicLog(void)::log;
  GEOGetVectorKitARLogicLog(void)::log = (uint64_t)v0;

}

uint64_t md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SettingsContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46)
      v3 = 0x1AF456233693CD46 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x1AF456233693CD46;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x1AF456233693CD46)
      {
        if (v6[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x1AF456233693CD46)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x1AF456233693CD46)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0xC97B9E962ADF4AD4;
    if (a2 <= 0xC97B9E962ADF4AD4)
      v11 = 0xC97B9E962ADF4AD4 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0xC97B9E962ADF4AD4;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0xC97B9E962ADF4AD4)
      {
        if (v13[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0xC97B9E962ADF4AD4)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0xC97B9E962ADF4AD4)
    return v10;
  return v10;
}

void md::ARLogicContext::~ARLogicContext(id *this)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;

  v2 = this[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = this[3];
  this[3] = 0;
  if (v4)
    operator delete(v4);
}

_QWORD *gdc::ManagedObjectHolder<md::ARLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *a1 = &off_1E42B0BE0;
  v2 = a1[4];
  if (v2)
  {

    v3 = *(_QWORD **)(v2 + 40);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40144CC075);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::ARLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_1E42B0BE0;
  v1 = a1[4];
  if (v1)
  {

    v2 = *(_QWORD **)(v1 + 40);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1A1AF4E00](v1, 0x10A0C40144CC075);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19FE24858(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 432);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 416);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 208);
  *(_QWORD *)(v1 + 184) = &off_1E42B4DF0;

  *(_QWORD *)(v1 + 152) = &off_1E42B54D0;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 128);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<MDARSessionObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4DF0;

  return a1;
}

void geo::_retain_ptr<MDARSessionObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4DF0;

  JUMPOUT(0x1A1AF4E00);
}

void md::ARLogic::setARSession(id *this, ARSession *a2)
{
  ARSession *v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  ARSession *v9;

  v4 = a2;
  v5 = this + 20;
  if (this[20] != v4)
  {
    v9 = v4;
    objc_msgSend(this[24], "setSession:", 0);
    if (v9)
    {
      objc_storeStrong(this + 20, a2);
    }
    else
    {
      v6 = *v5;
      if (*v5)
      {
        *v5 = 0;

      }
    }
    v7 = this[24];
    v8 = this[20];
    objc_msgSend(v7, "setSession:", v8);

    v4 = v9;
  }

}

void sub_19FE249EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::SelectedDaVinciRoadsLayerDataSource::~SelectedDaVinciRoadsLayerDataSource(md::SelectedDaVinciRoadsLayerDataSource *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42AAA00;
  v2 = (_QWORD *)*((_QWORD *)this + 106);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v4)
    operator delete(v4);
  md::DaVinciCenterLineRoadsLayerDataSource::~DaVinciCenterLineRoadsLayerDataSource(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42AAA00;
  v2 = (_QWORD *)*((_QWORD *)this + 106);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v4)
    operator delete(v4);
  md::DaVinciCenterLineRoadsLayerDataSource::~DaVinciCenterLineRoadsLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t `anonymous namespace'::shouldFilterFeature(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v4 = *(_QWORD *)(a2 + 40);
  if (a3 != 48)
    return v4 != v3;
  if (v4 == v3)
    return 0;
  if (!*(_BYTE *)(a2 + 74))
    return 1;
  v6 = *(_DWORD *)(a2 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 3528);
  v8 = *(unsigned __int8 *)(a2 + 74) - 1;
  do
  {
    v9 = *(_QWORD *)(v7 + 8 * v6);
    v11 = v8-- != 0;
    result = v9 != v3;
    if (v9 == v3)
      break;
    ++v6;
  }
  while (v11);
  return result;
}

void std::__function::__func<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType),std::allocator<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL ()(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType),std::allocator<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL ()(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42F87B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType),std::allocator<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL ()(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42F87B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType),std::allocator<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL ()(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a2, a3, *a4);
}

uint64_t md::SelectedDaVinciRoadsLayerDataSource::SelectedDaVinciRoadsLayerDataSource(uint64_t a1, __int16 a2, __int16 a3, gdc::LayerDataStore *a4, gdc::ResourceStatusContainer *a5, void *a6, geo::TaskQueue *a7)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17[0] = &off_1E42F87B8;
  v18 = v17;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource(a1, a2, a3, a4, a5, a6, a7, &v16, (uint64_t)v17);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *(std::__shared_weak_count **)(v10 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    MEMORY[0x1A1AF4E00](v10, 0x1020C40509EF904);
  }
  *(_QWORD *)a1 = &off_1E42AAA00;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_DWORD *)(a1 + 864) = 1065353216;
  return a1;
}

void sub_19FE24D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    v19 = *(_QWORD *)(a11 + 24);
    *(_QWORD *)(a11 + 24) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *(std::__shared_weak_count **)(a11 + 16);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    MEMORY[0x1A1AF4E00](a11, 0x1020C40509EF904);
  }
  _Unwind_Resume(exception_object);
}

void md::SatelliteMapEngineMode::~SatelliteMapEngineMode(md::SatelliteMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SatelliteMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v5;

  md::CartographicMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v5 = 23;
  md::MapEngineSettings::set((uint64_t)a4, &v5, 0);
}

void md::SatelliteMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;

  v4 = 23;
  md::MapEngineSettings::set(a4, &v4, (_QWORD *)1);
}

md::SatelliteMapEngineMode *md::SatelliteMapEngineMode::SatelliteMapEngineMode(md::SatelliteMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = md::CartographicMapEngineMode::CartographicMapEngineMode((uint64_t)this, 3);
  *(_QWORD *)v2 = &off_1E429DAE0;
  *(_QWORD *)(v2 + 536) = 100;
  *(_BYTE *)(v2 + 49) = 0;
  *(_DWORD *)(v2 + 52) = 18;
  LOWORD(v23) = 4608;
  *((_QWORD *)&v23 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v2 + 384), (unsigned __int8 *)&v23);
  LOWORD(v23) = 4608;
  *((_QWORD *)&v23 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v23);
  LOWORD(v23) = 4608;
  *((_QWORD *)&v23 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v23);
  *((_WORD *)this + 112) = 0;
  LOBYTE(v23) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v23)+ 17) = 0;
  LOBYTE(v23) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x33u, &v23)+ 17) = 0;
  LOBYTE(v23) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v23)+ 17) = 0;
  LOBYTE(v23) = 9;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 9u, &v23)+ 17) = 0;
  LOBYTE(v23) = 3;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v23)+ 17) = 0;
  LOBYTE(v23) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x28u, &v23)+ 17) = 1;
  LOBYTE(v23) = 18;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x12u, &v23)+ 17) = 1;
  LOBYTE(v23) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x29u, &v23)+ 17) = 2;
  LOBYTE(v23) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Au, &v23)+ 17) = 2;
  LODWORD(v23) = 40;
  v12 = (char *)this + 80;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x28u, &v23)+ 18) = 2;
  v20 = 0x4AC7AB7561675F6;
  v21 = "md::GridLogic]";
  v22 = 13;
  *(_QWORD *)&v17 = 0x336A901A15BB7353;
  *((_QWORD *)&v17 + 1) = "md::GridContext]";
  v18 = 15;
  v19 = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8C28;
  *(_QWORD *)&v25 = 21;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8B38;
  *(_QWORD *)&v15 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  v20 = 0x79FE0BD9535D5C4DLL;
  v21 = "md::AnchorLogic]";
  v22 = 15;
  *(_QWORD *)&v23 = &v24;
  *(_QWORD *)&v17 = 0x63B6FE00C0848868;
  *((_QWORD *)&v17 + 1) = "md::AnchorContext]";
  v18 = 17;
  v19 = 1;
  *((_QWORD *)&v23 + 1) = 2;
  v24 = xmmword_1E42F87F0;
  v25 = unk_1E42F8800;
  v26 = xmmword_1E42F8810;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8E88;
  *(_QWORD *)&v15 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v17 = 0x8E629317B3523E63;
  *((_QWORD *)&v17 + 1) = "md::CameraLogic]";
  v18 = 15;
  *(_QWORD *)&v13 = 0x1AF456233693CD46;
  *((_QWORD *)&v13 + 1) = "md::CameraContext]";
  *(_QWORD *)&v14 = 17;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8820;
  *(_QWORD *)&v25 = 20;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  *(_QWORD *)&v13 = 0xD2443A61CED86C69;
  *((_QWORD *)&v13 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v14 = 17;
  *(_QWORD *)&v23 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v23 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v24 = 19;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v13 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v13 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v14 = 14;
  *(_QWORD *)&v23 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v23 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v24 = 21;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  v20 = 0xBEC1A12372CEEC00;
  v21 = "md::NavigationLogic]";
  *(_QWORD *)&v17 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v17 + 1) = "md::NavigationContext]";
  v18 = 21;
  v19 = 1;
  v22 = 19;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 3;
  v26 = xmmword_1E42F8858;
  v27 = unk_1E42F8868;
  *(_QWORD *)&v28 = 17;
  v24 = xmmword_1E42F8838;
  v25 = unk_1E42F8848;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8880;
  *(_QWORD *)&v15 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v13 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v13 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v14 = 21;
  *(_QWORD *)&v23 = 0x13043386C0978CC2;
  *((_QWORD *)&v23 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v24 = 23;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v17 = 0xDAD5CEE0DC5FF509;
  *((_QWORD *)&v17 + 1) = "md::SkyLogic]";
  v18 = 12;
  *(_QWORD *)&v13 = 0x7C7EC6C7C111B0D0;
  *((_QWORD *)&v13 + 1) = "md::SkyLogicContext]";
  *(_QWORD *)&v14 = 19;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 2;
  v24 = xmmword_1E42F8898;
  v25 = unk_1E42F88A8;
  v26 = xmmword_1E42F88B8;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  v20 = 0x17767EADC5B287BLL;
  v21 = "md::ElevationLogic]";
  v22 = 18;
  *(_QWORD *)&v23 = &v24;
  *(_QWORD *)&v17 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v17 + 1) = "md::ElevationContext]";
  v18 = 20;
  v19 = 1;
  *((_QWORD *)&v23 + 1) = 2;
  v24 = xmmword_1E42F88C8;
  v25 = unk_1E42F88D8;
  v26 = xmmword_1E42F88E8;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F88F8;
  *(_QWORD *)&v15 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v17 = 0xDEBD99099DA2C65BLL;
  *((_QWORD *)&v17 + 1) = "md::RegistryLogic]";
  v18 = 17;
  *(_QWORD *)&v13 = 0xFBD83FDA8879FF7ELL;
  *((_QWORD *)&v13 + 1) = "md::RegistryContext]";
  *(_QWORD *)&v14 = 19;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8C58;
  *(_QWORD *)&v25 = 16;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  v20 = 0x7173CF8D2BE8FE53;
  v21 = "md::RouteLineLogic]";
  v22 = 18;
  *(_QWORD *)&v23 = &v24;
  *(_QWORD *)&v17 = 0x8E4587A431F9C696;
  *((_QWORD *)&v17 + 1) = "md::RouteLineContext]";
  v18 = 20;
  v19 = 1;
  *((_QWORD *)&v23 + 1) = 4;
  v26 = xmmword_1E42F8930;
  v27 = unk_1E42F8940;
  v28 = xmmword_1E42F8950;
  v29 = *(_OWORD *)&off_1E42F8960;
  v24 = xmmword_1E42F8910;
  v25 = unk_1E42F8920;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 2;
  v14 = xmmword_1E42F8970;
  v15 = unk_1E42F8980;
  v16 = xmmword_1E42F8990;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v17 = 0x33D44727E59BE9E9;
  *((_QWORD *)&v17 + 1) = "md::PuckLogic]";
  v18 = 13;
  *(_QWORD *)&v13 = 0x9AEE7E062376E454;
  *((_QWORD *)&v13 + 1) = "md::PuckContext]";
  *(_QWORD *)&v14 = 15;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 9;
  v34 = xmmword_1E42F8A40;
  v35 = *(_OWORD *)&off_1E42F8A50;
  v36 = xmmword_1E42F8A60;
  v37 = 24;
  v30 = xmmword_1E42F8A00;
  v31 = unk_1E42F8A10;
  v32 = xmmword_1E42F8A20;
  v33 = unk_1E42F8A30;
  v26 = xmmword_1E42F89C0;
  v27 = unk_1E42F89D0;
  v28 = xmmword_1E42F89E0;
  v29 = *(_OWORD *)&off_1E42F89F0;
  v24 = xmmword_1E42F89A0;
  v25 = unk_1E42F89B0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  v20 = 0x8B855FB229857EA1;
  v21 = "md::IdentifiedResourceLogic]";
  v22 = 27;
  *(_QWORD *)&v23 = &v24;
  *(_QWORD *)&v17 = 0x12B1E486D3040E2CLL;
  *((_QWORD *)&v17 + 1) = "md::IdentifiedResourceContext]";
  v18 = 29;
  v19 = 1;
  *((_QWORD *)&v23 + 1) = 4;
  v26 = xmmword_1E42F8A98;
  v27 = unk_1E42F8AA8;
  v28 = xmmword_1E42F8AB8;
  v29 = *(_OWORD *)&off_1E42F8AC8;
  v24 = xmmword_1E42F8A78;
  v25 = unk_1E42F8A88;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8AD8;
  *(_QWORD *)&v15 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v13 = 0x6139471CB89383CBLL;
  *((_QWORD *)&v13 + 1) = "md::NonTiledAssetLogic]";
  *(_QWORD *)&v14 = 22;
  *(_QWORD *)&v23 = 0x932EE29454ABDC4ELL;
  *((_QWORD *)&v23 + 1) = "md::NonTiledAssetContext]";
  *(_QWORD *)&v24 = 24;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v13 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v13 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v14 = 18;
  *(_QWORD *)&v23 = 0x7851AF310F49C988;
  *((_QWORD *)&v23 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v24 = 25;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v17 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v17 + 1) = "md::TileSelectionLogic]";
  v18 = 22;
  *(_QWORD *)&v13 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v13 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v14 = 24;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 3;
  v26 = xmmword_1E42F8B10;
  v27 = unk_1E42F8B20;
  *(_QWORD *)&v28 = 21;
  v24 = xmmword_1E42F8AF0;
  v25 = unk_1E42F8B00;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  v3 = 0xCBF29CE484222325;
  v4 = 0x26u;
  do
    v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_927[v4++]);
  while (v4 != 368);
  v20 = v3;
  v21 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v22 = 330;
  *(_QWORD *)&v17 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v17 + 1) = "md::ResolvedTileSelectionContext]";
  v18 = 32;
  v19 = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8B38;
  *(_QWORD *)&v25 = 24;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8B50;
  *(_QWORD *)&v15 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v17 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v17 + 1) = "md::PendingSceneLogic]";
  v18 = 21;
  *(_QWORD *)&v13 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v13 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v14 = 23;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 5;
  v28 = xmmword_1E42F8BA8;
  v29 = *(_OWORD *)&off_1E42F8BB8;
  v30 = xmmword_1E42F8BC8;
  *(_QWORD *)&v31 = 25;
  v24 = xmmword_1E42F8B68;
  v25 = unk_1E42F8B78;
  v26 = xmmword_1E42F8B88;
  v27 = unk_1E42F8B98;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  v20 = 0x2B7C4502BD3C99C6;
  v21 = "md::ResolvedSceneLogic]";
  v22 = 22;
  *(_QWORD *)&v17 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v17 + 1) = "md::SceneContext]";
  v18 = 16;
  v19 = 1;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8C10;
  *(_QWORD *)&v15 = 23;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 2;
  v24 = xmmword_1E42F8BE0;
  v25 = unk_1E42F8BF0;
  v26 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v13, (uint64_t)&v23);
  *(_QWORD *)&v17 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v17 + 1) = "md::PendingRegistryLogic]";
  v18 = 24;
  *(_QWORD *)&v13 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v13 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v14 = 26;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8C10;
  *(_QWORD *)&v25 = 23;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  v20 = 0x20A1ED17D78F322BLL;
  v21 = "md::LabelsLogic]";
  v22 = 15;
  *(_QWORD *)&v23 = &v24;
  *(_QWORD *)&v17 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v17 + 1) = "md::LabelsContext]";
  v18 = 17;
  v19 = 1;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8C28;
  *(_QWORD *)&v25 = 21;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8C40;
  *(_QWORD *)&v15 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  v20 = 0x653D1F33EF15EF04;
  v21 = "md::LoadingStatusLogic]";
  v22 = 22;
  *(_QWORD *)&v23 = &v24;
  *(_QWORD *)&v17 = 0x90B6813830DCB581;
  *((_QWORD *)&v17 + 1) = "md::LoadingStatusContext]";
  v18 = 24;
  v19 = 1;
  *((_QWORD *)&v23 + 1) = 1;
  v24 = xmmword_1E42F8C58;
  *(_QWORD *)&v25 = 16;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8C70;
  *(_QWORD *)&v15 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v20, &v17, 0, (uint64_t)&v23, (uint64_t)&v13);
  *(_QWORD *)&v17 = 0x87668FB4D087F775;
  *((_QWORD *)&v17 + 1) = "md::OverlaysLogic]";
  v18 = 17;
  *(_QWORD *)&v13 = 0xADE8F13E6C18D970;
  *((_QWORD *)&v13 + 1) = "md::OverlaysContext]";
  *(_QWORD *)&v14 = 19;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 4;
  v26 = xmmword_1E42F8CA8;
  v27 = unk_1E42F8CB8;
  v28 = xmmword_1E42F8CC8;
  v29 = *(_OWORD *)&off_1E42F8CD8;
  v24 = xmmword_1E42F8C88;
  v25 = unk_1E42F8C98;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  *(_QWORD *)&v13 = 0x701C95861FC50076;
  *((_QWORD *)&v13 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v14 = 17;
  *(_QWORD *)&v23 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v23 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v24 = 19;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v17 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v17 + 1) = "md::MapZoomLevelStyleLogic]";
  v18 = 26;
  *(_QWORD *)&v13 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v13 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v14 = 33;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 2;
  v24 = xmmword_1E42F8898;
  v25 = unk_1E42F88A8;
  v26 = xmmword_1E42F88B8;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 0, (uint64_t)&v23, (uint64_t)&v20);
  *(_QWORD *)&v13 = 0x3F812BA5755E8568;
  *((_QWORD *)&v13 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v14 = 24;
  *(_QWORD *)&v23 = 0xA60DDA5A69582425;
  *((_QWORD *)&v23 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v24 = 26;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v13 = 0x41948F4CADE567A1;
  *((_QWORD *)&v13 + 1) = "md::DebugDrawLogic]";
  *(_QWORD *)&v14 = 18;
  *(_QWORD *)&v23 = 0x3619066E3FB5F2CLL;
  *((_QWORD *)&v23 + 1) = "md::DebugDrawContext]";
  *(_QWORD *)&v24 = 20;
  BYTE8(v24) = 1;
  *(_QWORD *)&v17 = &v18;
  *((_QWORD *)&v17 + 1) = 0;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v13, &v23, 0, (uint64_t)&v17, (uint64_t)&v20);
  *(_QWORD *)&v17 = 0xEA624BC935BAF297;
  *((_QWORD *)&v17 + 1) = "md::mun::MuninLogic]";
  v18 = 19;
  *(_QWORD *)&v13 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v13 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v14 = 21;
  BYTE8(v14) = 1;
  *(_QWORD *)&v23 = &v24;
  *((_QWORD *)&v23 + 1) = 3;
  v26 = xmmword_1E42F8D08;
  v27 = unk_1E42F8D18;
  *(_QWORD *)&v28 = 20;
  v24 = xmmword_1E42F8CE8;
  v25 = unk_1E42F8CF8;
  v20 = (unint64_t)&v22;
  v21 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v17, &v13, 1, (uint64_t)&v23, (uint64_t)&v20);
  LODWORD(v23) = 10;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, 0xAu, &v23)+ 18) = 0;
  v23 = xmmword_19FFB5F10;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, 0x1Bu, &v23)+ 18) = 1;
  v5 = WORD3(v23);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, WORD2(v23), (_WORD *)&v23 + 2)+ 18) = (v5 << 16) | 1;
  v6 = WORD5(v23);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, WORD4(v23), (_WORD *)&v23 + 4)+ 18) = (v6 << 16) | 1;
  v7 = HIWORD(v23);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, WORD6(v23), (_WORD *)((unint64_t)&v23 | 0xC))+ 18) = (v7 << 16) | 1;
  v23 = xmmword_19FFB5F20;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, 0xBu, &v23)+ 18) = 131074;
  v8 = WORD3(v23);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, WORD2(v23), (_WORD *)&v23 + 2)+ 18) = (v8 << 16) | 2;
  v9 = WORD5(v23);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, WORD4(v23), (_WORD *)&v23 + 4)+ 18) = (v9 << 16) | 2;
  v10 = HIWORD(v23);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v12, WORD6(v23), (_WORD *)((unint64_t)&v23 | 0xC))+ 18) = (v10 << 16) | 2;
  return this;
}

void sub_19FE2624C(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  *(_QWORD *)v1 = &off_1E42A1BF8;
  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE26560(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2683C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE26B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE26DF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE270D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE273AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE27688(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;

  v4 = a1[1];
  if (*a1 == v4)
  {
    v7 = (-1431655765 * ((a1[7] - a1[6]) >> 3)) | 0x100000000;
    v9 = (uint64_t *)a1[4];
    v8 = a1[5];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (uint64_t *)a1[3];
      v12 = v9 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_78;
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_79;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v9 == v11)
      {
        v11 = v9;
      }
      else
      {
        v19 = (char *)v9 - (char *)v11 - 8;
        if (v19 < 0x58)
          goto LABEL_82;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_82;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v9 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v9 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          do
          {
            v25 = *--v9;
            *--v17 = v25;
          }
          while (v9 != v11);
          v11 = (uint64_t *)a1[3];
        }
      }
      a1[3] = v17;
      a1[4] = v10;
      a1[5] = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[4] = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    a1[1] = v4 - 8;
    *(_DWORD *)(a1[3] + 8 * v5) = -1431655765 * ((a1[7] - a1[6]) >> 3);
    *(_DWORD *)(a1[3] + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32) + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32);
  }
  v27 = (char *)a1[7];
  v26 = a1[8];
  if ((unint64_t)v27 >= v26)
  {
    v32 = (char *)a1[6];
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v32) >> 3) + 1;
    if (v33 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_78;
    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v32) >> 3);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0x555555555555555)
      v35 = 0xAAAAAAAAAAAAAAALL;
    else
      v35 = v33;
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_79;
    v36 = 24 * v35;
    v37 = (char *)operator new(24 * v35);
    v38 = &v37[8 * ((v27 - v32) >> 3)];
    *(_OWORD *)v38 = *(_OWORD *)a2;
    v39 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v38 + 2) = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v32 = (char *)a1[6];
      v27 = (char *)a1[7];
    }
    v42 = &v37[v36];
    v31 = v38 + 24;
    if (v27 == v32)
    {
      a1[6] = v38;
      a1[7] = v31;
      a1[8] = v42;
    }
    else
    {
      do
      {
        v43 = *(_OWORD *)(v27 - 24);
        v27 -= 24;
        *(_OWORD *)(v38 - 24) = v43;
        v38 -= 24;
        *((_QWORD *)v38 + 2) = *((_QWORD *)v27 + 2);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
      }
      while (v27 != v32);
      v32 = (char *)a1[6];
      v44 = (char *)a1[7];
      a1[6] = v38;
      a1[7] = v31;
      a1[8] = v42;
      while (v44 != v32)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v44 -= 24;
      }
    }
    if (v32)
      operator delete(v32);
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)a2;
    v28 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v27 + 2) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v27 + 24;
  }
  a1[7] = v31;
  v49 = (char *)a1[10];
  v48 = a1[11];
  if ((unint64_t)v49 < v48)
  {
    *(_QWORD *)v49 = v6;
    v50 = v49 + 8;
    goto LABEL_77;
  }
  v51 = (char *)a1[9];
  v52 = (v49 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_78:
    abort();
  v54 = v48 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (!(v55 >> 61))
    {
      v56 = operator new(8 * v55);
      goto LABEL_68;
    }
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v56 = 0;
LABEL_68:
  v57 = &v56[8 * v52];
  v58 = &v56[8 * v55];
  *v57 = v6;
  v50 = v57 + 1;
  if (v49 != v51)
  {
    v59 = v49 - v51 - 8;
    if (v59 < 0x58)
      goto LABEL_83;
    if ((unint64_t)(v51 - v56) < 0x20)
      goto LABEL_83;
    v60 = (v59 >> 3) + 1;
    v61 = &v56[8 * v52 - 16];
    v62 = v49 - 16;
    v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 4;
    }
    while (v63);
    v57 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
    v49 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v65 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *--v57 = v65;
      }
      while (v49 != v51);
    }
  }
  a1[9] = v57;
  a1[10] = v50;
  a1[11] = v58;
  if (v51)
    operator delete(v51);
LABEL_77:
  a1[10] = v50;
  return v6;
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,geo::handle<md::ConstantDataResource<ggl::Tile::View>> const&,md::Counter>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FE27DF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::View,md::VoidKeyType>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int64x2_t v18;
  char v19;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v15 = a2;
    v16 = a2;
    v17 = a3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v15 = a2;
    v16 = a2;
    v17 = 0;
  }
  v7 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back((_QWORD *)(a1 + 3488), (uint64_t)&v15);
  v18 = vdupq_n_s64(1uLL);
  v19 = 0;
  std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,geo::handle<md::ConstantDataResource<ggl::Tile::View>> const&,md::Counter>(a1 + 3448, v7, v7, (uint64_t)&v18);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return v7;
}

void sub_19FE27F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::LinearDepth,md::VoidKeyType>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t prime;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v92;
  std::__shared_weak_count *v93;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = a2;
    v93 = a3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = a2;
    v93 = 0;
  }
  v7 = *(_QWORD *)(a1 + 3672);
  if (*(_QWORD *)(a1 + 3664) == v7)
  {
    v10 = (-1431655765 * ((*(_QWORD *)(a1 + 3720) - *(_QWORD *)(a1 + 3712)) >> 3)) | 0x100000000;
    v11 = *(uint64_t **)(a1 + 3696);
    v12 = *(_QWORD *)(a1 + 3704);
    if ((unint64_t)v11 >= v12)
    {
      v14 = *(uint64_t **)(a1 + 3688);
      v15 = v11 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_154;
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          goto LABEL_155;
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v10;
      v13 = v20 + 1;
      if (v11 == v14)
      {
        v14 = v11;
      }
      else
      {
        v22 = (char *)v11 - (char *)v14 - 8;
        if (v22 < 0x58)
          goto LABEL_158;
        if ((unint64_t)((char *)v14 - v19) < 0x20)
          goto LABEL_158;
        v23 = (v22 >> 3) + 1;
        v24 = &v19[8 * v15 - 16];
        v25 = v11 - 2;
        v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 4;
          v26 -= 4;
        }
        while (v26);
        v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            v28 = *--v11;
            *--v20 = v28;
          }
          while (v11 != v14);
          v14 = *(uint64_t **)(a1 + 3688);
        }
      }
      *(_QWORD *)(a1 + 3688) = v20;
      *(_QWORD *)(a1 + 3696) = v13;
      *(_QWORD *)(a1 + 3704) = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v11 = v10;
      v13 = v11 + 1;
    }
    *(_QWORD *)(a1 + 3696) = v13;
    v9 = *(v13 - 1);
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 3672) = v7 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 8 * v8) = -1431655765
                                                 * ((*(_QWORD *)(a1 + 3720) - *(_QWORD *)(a1 + 3712)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 8 * v8 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 3688)
                                                                                           + 8 * v8
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v9 = v8 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 3688) + 8 * v8 + 4) << 32);
  }
  v29 = *(char **)(a1 + 3720);
  v30 = *(_QWORD *)(a1 + 3728);
  if ((unint64_t)v29 >= v30)
  {
    v34 = *(char **)(a1 + 3712);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v34) >> 3) + 1;
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_154;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v34) >> 3);
    if (2 * v36 > v35)
      v35 = 2 * v36;
    if (v36 >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v35;
    if (v37 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_155;
    v38 = (char *)operator new(24 * v37);
    v39 = &v38[8 * ((v29 - v34) >> 3)];
    *(_OWORD *)v39 = v92;
    *((_QWORD *)v39 + 2) = v93;
    if (v93)
    {
      v40 = (unint64_t *)&v93->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v29 = *(char **)(a1 + 3720);
      v34 = *(char **)(a1 + 3712);
    }
    v42 = &v38[24 * v37];
    v33 = v39 + 24;
    if (v29 == v34)
    {
      *(_QWORD *)(a1 + 3712) = v39;
      *(_QWORD *)(a1 + 3720) = v33;
      *(_QWORD *)(a1 + 3728) = v42;
    }
    else
    {
      do
      {
        v43 = *(_OWORD *)(v29 - 24);
        v29 -= 24;
        *(_OWORD *)(v39 - 24) = v43;
        v39 -= 24;
        *((_QWORD *)v39 + 2) = *((_QWORD *)v29 + 2);
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      while (v29 != v34);
      v34 = *(char **)(a1 + 3712);
      v44 = *(char **)(a1 + 3720);
      *(_QWORD *)(a1 + 3712) = v39;
      *(_QWORD *)(a1 + 3720) = v33;
      *(_QWORD *)(a1 + 3728) = v42;
      while (v44 != v34)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v44 -= 24;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v29 = v92;
    *((_QWORD *)v29 + 2) = v93;
    if (v93)
    {
      v31 = (unint64_t *)&v93->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = v29 + 24;
  }
  *(_QWORD *)(a1 + 3720) = v33;
  v48 = *(char **)(a1 + 3744);
  v49 = *(_QWORD *)(a1 + 3752);
  if ((unint64_t)v48 < v49)
  {
    *(_QWORD *)v48 = v9;
    v50 = (unint64_t)(v48 + 8);
    goto LABEL_84;
  }
  v51 = *(char **)(a1 + 3736);
  v52 = (v48 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_154:
    abort();
  v54 = v49 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (!(v55 >> 61))
    {
      v56 = operator new(8 * v55);
      goto LABEL_75;
    }
LABEL_155:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v56 = 0;
LABEL_75:
  v57 = &v56[8 * v52];
  v58 = &v56[8 * v55];
  *v57 = v9;
  v50 = (unint64_t)(v57 + 1);
  if (v48 != v51)
  {
    v59 = v48 - v51 - 8;
    if (v59 < 0x58)
      goto LABEL_159;
    if ((unint64_t)(v51 - v56) < 0x20)
      goto LABEL_159;
    v60 = (v59 >> 3) + 1;
    v61 = &v56[8 * v52 - 16];
    v62 = v48 - 16;
    v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 4;
    }
    while (v63);
    v57 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
    v48 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_159:
      do
      {
        v65 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v57 = v65;
      }
      while (v48 != v51);
    }
  }
  *(_QWORD *)(a1 + 3736) = v57;
  *(_QWORD *)(a1 + 3744) = v50;
  *(_QWORD *)(a1 + 3752) = v58;
  if (v51)
    operator delete(v51);
LABEL_84:
  *(_QWORD *)(a1 + 3744) = v50;
  v66 = (uint64_t *)(a1 + 3624);
  v67 = *(_QWORD *)(a1 + 3632);
  if (v67)
  {
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      v50 = v9;
      if (v9 >= v67)
        v50 = v9 % v67;
    }
    else
    {
      v50 = (v67 - 1) & v9;
    }
    v69 = *(_QWORD **)(*v66 + 8 * v50);
    if (v69)
    {
      v70 = (_QWORD *)*v69;
      if (v70)
      {
        if (v68.u32[0] < 2uLL)
        {
          while (1)
          {
            v72 = v70[1];
            if (v72 == v9)
            {
              if (v70[2] == v9)
                goto LABEL_143;
            }
            else if ((v72 & (v67 - 1)) != v50)
            {
              goto LABEL_105;
            }
            v70 = (_QWORD *)*v70;
            if (!v70)
              goto LABEL_105;
          }
        }
        do
        {
          v71 = v70[1];
          if (v71 == v9)
          {
            if (v70[2] == v9)
              goto LABEL_143;
          }
          else
          {
            if (v71 >= v67)
              v71 %= v67;
            if (v71 != v50)
              break;
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
    }
  }
LABEL_105:
  v73 = (char *)operator new(0x30uLL);
  *(_QWORD *)v73 = 0;
  *((_QWORD *)v73 + 1) = v9;
  *((_QWORD *)v73 + 2) = v9;
  *(int64x2_t *)(v73 + 24) = vdupq_n_s64(1uLL);
  v73[40] = 0;
  v74 = (float)(unint64_t)(*(_QWORD *)(a1 + 3648) + 1);
  v75 = *(float *)(a1 + 3656);
  if (!v67 || (float)(v75 * (float)v67) < v74)
  {
    v76 = 1;
    if (v67 >= 3)
      v76 = (v67 & (v67 - 1)) != 0;
    v77 = v76 | (2 * v67);
    v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78)
      prime = v78;
    else
      prime = v77;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v67 = *(_QWORD *)(a1 + 3632);
    }
    if (prime > v67)
      goto LABEL_117;
    if (prime < v67)
    {
      v80 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 3648) / *(float *)(a1 + 3656));
      if (v67 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (prime <= v80)
        prime = v80;
      if (prime < v67)
LABEL_117:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 3624, prime);
    }
    v67 = *(_QWORD *)(a1 + 3632);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v9 >= v67)
        v50 = v9 % v67;
      else
        v50 = v9;
    }
    else
    {
      v50 = (v67 - 1) & v9;
    }
  }
  v83 = *v66;
  v84 = *(_QWORD **)(*v66 + 8 * v50);
  if (v84)
  {
    *(_QWORD *)v73 = *v84;
LABEL_141:
    *v84 = v73;
    goto LABEL_142;
  }
  *(_QWORD *)v73 = *(_QWORD *)(a1 + 3640);
  *(_QWORD *)(a1 + 3640) = v73;
  *(_QWORD *)(v83 + 8 * v50) = a1 + 3640;
  if (*(_QWORD *)v73)
  {
    v85 = *(_QWORD *)(*(_QWORD *)v73 + 8);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v85 >= v67)
        v85 %= v67;
    }
    else
    {
      v85 &= v67 - 1;
    }
    v84 = (_QWORD *)(*v66 + 8 * v85);
    goto LABEL_141;
  }
LABEL_142:
  ++*(_QWORD *)(a1 + 3648);
LABEL_143:
  if (v93)
  {
    v86 = (unint64_t *)&v93->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (a3)
  {
    v88 = (unint64_t *)&a3->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return v9;
}

void sub_19FE28738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  md::components::Material::~Material((md::components::Material *)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&,md::Counter>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FE28A3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE28D18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Transform,md::VoidKeyType>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int64x2_t v18;
  char v19;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v15 = a2;
    v16 = a2;
    v17 = a3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v15 = a2;
    v16 = a2;
    v17 = 0;
  }
  v7 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back((_QWORD *)(a1 + 3312), (uint64_t)&v15);
  v18 = vdupq_n_s64(1uLL);
  v19 = 0;
  std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&,md::Counter>(a1 + 3272, v7, v7, (uint64_t)&v18);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return v7;
}

void sub_19FE28E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::Tile::Clipping,md::VoidKeyType>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint8x8_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  float v66;
  float v67;
  _BOOL8 v68;
  unint64_t v69;
  unint64_t v70;
  size_t prime;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;

  v2 = *(_QWORD *)(a1 + 3848);
  if (*(_QWORD *)(a1 + 3840) == v2)
  {
    v5 = (-1431655765 * ((*(_QWORD *)(a1 + 3896) - *(_QWORD *)(a1 + 3888)) >> 3)) | 0x100000000;
    v6 = *(uint64_t **)(a1 + 3872);
    v7 = *(_QWORD *)(a1 + 3880);
    if ((unint64_t)v6 >= v7)
    {
      v9 = *(uint64_t **)(a1 + 3864);
      v10 = v6 - v9;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_130;
      v12 = v7 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          goto LABEL_131;
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      if (v6 == v9)
      {
        v9 = v6;
      }
      else
      {
        v17 = (char *)v6 - (char *)v9 - 8;
        if (v17 < 0x58)
          goto LABEL_134;
        if ((unint64_t)((char *)v9 - v14) < 0x20)
          goto LABEL_134;
        v18 = (v17 >> 3) + 1;
        v19 = &v14[8 * v10 - 16];
        v20 = v6 - 2;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 4;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_134:
          do
          {
            v23 = *--v6;
            *--v15 = v23;
          }
          while (v6 != v9);
          v9 = *(uint64_t **)(a1 + 3864);
        }
      }
      *(_QWORD *)(a1 + 3864) = v15;
      *(_QWORD *)(a1 + 3872) = v8;
      *(_QWORD *)(a1 + 3880) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v5;
      v8 = v6 + 1;
    }
    *(_QWORD *)(a1 + 3872) = v8;
    v4 = *(v8 - 1);
  }
  else
  {
    v3 = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 3848) = v2 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 3864) + 8 * v3) = -1431655765
                                                 * ((*(_QWORD *)(a1 + 3896) - *(_QWORD *)(a1 + 3888)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 3864) + 8 * v3 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 3864)
                                                                                           + 8 * v3
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v4 = v3 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 3864) + 8 * v3 + 4) << 32);
  }
  v24 = *(_QWORD **)(a1 + 3896);
  v25 = *(_QWORD *)(a1 + 3904);
  if ((unint64_t)v24 >= v25)
  {
    v27 = *(_QWORD **)(a1 + 3888);
    v28 = 0xAAAAAAAAAAAAAAABLL * (v24 - v27) + 1;
    if (v28 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_130;
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v27) >> 3);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x555555555555555)
      v30 = 0xAAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_131;
    v31 = 24 * v30;
    v32 = (char *)operator new(24 * v30);
    v33 = &v32[8 * (v24 - v27)];
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = 0;
    v34 = &v32[v31];
    *(_QWORD *)v33 = 0;
    v26 = v33 + 24;
    if (v24 == v27)
    {
      *(_QWORD *)(a1 + 3888) = v33;
      *(_QWORD *)(a1 + 3896) = v26;
      *(_QWORD *)(a1 + 3904) = v34;
    }
    else
    {
      do
      {
        v35 = *(_OWORD *)(v24 - 3);
        v24 -= 3;
        *(_OWORD *)(v33 - 24) = v35;
        v33 -= 24;
        *((_QWORD *)v33 + 2) = v24[2];
        v24[1] = 0;
        v24[2] = 0;
      }
      while (v24 != v27);
      v24 = *(_QWORD **)(a1 + 3888);
      v36 = *(_QWORD **)(a1 + 3896);
      *(_QWORD *)(a1 + 3888) = v33;
      *(_QWORD *)(a1 + 3896) = v26;
      *(_QWORD *)(a1 + 3904) = v34;
      while (v36 != v24)
      {
        v37 = (std::__shared_weak_count *)*(v36 - 1);
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v36 -= 3;
      }
    }
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v24 = 0;
    v24[1] = 0;
    v26 = v24 + 3;
    v24[2] = 0;
  }
  *(_QWORD *)(a1 + 3896) = v26;
  v40 = *(char **)(a1 + 3920);
  v41 = *(_QWORD *)(a1 + 3928);
  if ((unint64_t)v40 < v41)
  {
    *(_QWORD *)v40 = v4;
    v42 = (unint64_t)(v40 + 8);
    goto LABEL_70;
  }
  v43 = *(char **)(a1 + 3912);
  v44 = (v40 - v43) >> 3;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 61)
LABEL_130:
    abort();
  v46 = v41 - (_QWORD)v43;
  if (v46 >> 2 > v45)
    v45 = v46 >> 2;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
    v47 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    if (!(v47 >> 61))
    {
      v48 = operator new(8 * v47);
      goto LABEL_61;
    }
LABEL_131:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v48 = 0;
LABEL_61:
  v49 = &v48[8 * v44];
  v50 = &v48[8 * v47];
  *v49 = v4;
  v42 = (unint64_t)(v49 + 1);
  if (v40 != v43)
  {
    v51 = v40 - v43 - 8;
    if (v51 < 0x58)
      goto LABEL_135;
    if ((unint64_t)(v43 - v48) < 0x20)
      goto LABEL_135;
    v52 = (v51 >> 3) + 1;
    v53 = &v48[8 * v44 - 16];
    v54 = v40 - 16;
    v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      *v53 = v56;
      v53 -= 2;
      v54 -= 32;
      v55 -= 4;
    }
    while (v55);
    v49 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
    v40 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_135:
      do
      {
        v57 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v49 = v57;
      }
      while (v40 != v43);
    }
  }
  *(_QWORD *)(a1 + 3912) = v49;
  *(_QWORD *)(a1 + 3920) = v42;
  *(_QWORD *)(a1 + 3928) = v50;
  if (v43)
    operator delete(v43);
LABEL_70:
  *(_QWORD *)(a1 + 3920) = v42;
  v58 = (uint64_t *)(a1 + 3800);
  v59 = *(_QWORD *)(a1 + 3808);
  if (v59)
  {
    v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
    v60.i16[0] = vaddlv_u8(v60);
    if (v60.u32[0] > 1uLL)
    {
      v42 = v4;
      if (v4 >= v59)
        v42 = v4 % v59;
    }
    else
    {
      v42 = (v59 - 1) & v4;
    }
    v61 = *(_QWORD **)(*v58 + 8 * v42);
    if (v61)
    {
      v62 = (_QWORD *)*v61;
      if (v62)
      {
        if (v60.u32[0] < 2uLL)
        {
          while (1)
          {
            v64 = v62[1];
            if (v64 == v4)
            {
              if (v62[2] == v4)
                return v4;
            }
            else if ((v64 & (v59 - 1)) != v42)
            {
              goto LABEL_91;
            }
            v62 = (_QWORD *)*v62;
            if (!v62)
              goto LABEL_91;
          }
        }
        do
        {
          v63 = v62[1];
          if (v63 == v4)
          {
            if (v62[2] == v4)
              return v4;
          }
          else
          {
            if (v63 >= v59)
              v63 %= v59;
            if (v63 != v42)
              break;
          }
          v62 = (_QWORD *)*v62;
        }
        while (v62);
      }
    }
  }
LABEL_91:
  v65 = (char *)operator new(0x30uLL);
  *(_QWORD *)v65 = 0;
  *((_QWORD *)v65 + 1) = v4;
  *((_QWORD *)v65 + 2) = v4;
  *(int64x2_t *)(v65 + 24) = vdupq_n_s64(1uLL);
  v65[40] = 0;
  v66 = (float)(unint64_t)(*(_QWORD *)(a1 + 3824) + 1);
  v67 = *(float *)(a1 + 3832);
  if (!v59 || (float)(v67 * (float)v59) < v66)
  {
    v68 = 1;
    if (v59 >= 3)
      v68 = (v59 & (v59 - 1)) != 0;
    v69 = v68 | (2 * v59);
    v70 = vcvtps_u32_f32(v66 / v67);
    if (v69 <= v70)
      prime = v70;
    else
      prime = v69;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v59 = *(_QWORD *)(a1 + 3808);
    }
    if (prime > v59)
      goto LABEL_103;
    if (prime < v59)
    {
      v72 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 3824) / *(float *)(a1 + 3832));
      if (v59 < 3 || (v73 = (uint8x8_t)vcnt_s8((int8x8_t)v59), v73.i16[0] = vaddlv_u8(v73), v73.u32[0] > 1uLL))
      {
        v72 = std::__next_prime(v72);
      }
      else
      {
        v74 = 1 << -(char)__clz(v72 - 1);
        if (v72 >= 2)
          v72 = v74;
      }
      if (prime <= v72)
        prime = v72;
      if (prime < v59)
LABEL_103:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 3800, prime);
    }
    v59 = *(_QWORD *)(a1 + 3808);
    if ((v59 & (v59 - 1)) != 0)
    {
      if (v4 >= v59)
        v42 = v4 % v59;
      else
        v42 = v4;
    }
    else
    {
      v42 = (v59 - 1) & v4;
    }
  }
  v75 = *v58;
  v76 = *(_QWORD **)(*v58 + 8 * v42);
  if (v76)
  {
    *(_QWORD *)v65 = *v76;
LABEL_127:
    *v76 = v65;
    goto LABEL_128;
  }
  *(_QWORD *)v65 = *(_QWORD *)(a1 + 3816);
  *(_QWORD *)(a1 + 3816) = v65;
  *(_QWORD *)(v75 + 8 * v42) = a1 + 3816;
  if (*(_QWORD *)v65)
  {
    v77 = *(_QWORD *)(*(_QWORD *)v65 + 8);
    if ((v59 & (v59 - 1)) != 0)
    {
      if (v77 >= v59)
        v77 %= v59;
    }
    else
    {
      v77 &= v59 - 1;
    }
    v76 = (_QWORD *)(*v58 + 8 * v77);
    goto LABEL_127;
  }
LABEL_128:
  ++*(_QWORD *)(a1 + 3824);
  return v4;
}

void sub_19FE29558(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE29834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&,md::Counter>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FE29B20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::Shadow,md::VoidKeyType>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t prime;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v92;
  std::__shared_weak_count *v93;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = a2;
    v93 = a3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = a2;
    v93 = 0;
  }
  v7 = *(_QWORD *)(a1 + 4024);
  if (*(_QWORD *)(a1 + 4016) == v7)
  {
    v10 = (-1431655765 * ((*(_QWORD *)(a1 + 4072) - *(_QWORD *)(a1 + 4064)) >> 3)) | 0x100000000;
    v11 = *(uint64_t **)(a1 + 4048);
    v12 = *(_QWORD *)(a1 + 4056);
    if ((unint64_t)v11 >= v12)
    {
      v14 = *(uint64_t **)(a1 + 4040);
      v15 = v11 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_154;
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          goto LABEL_155;
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v10;
      v13 = v20 + 1;
      if (v11 == v14)
      {
        v14 = v11;
      }
      else
      {
        v22 = (char *)v11 - (char *)v14 - 8;
        if (v22 < 0x58)
          goto LABEL_158;
        if ((unint64_t)((char *)v14 - v19) < 0x20)
          goto LABEL_158;
        v23 = (v22 >> 3) + 1;
        v24 = &v19[8 * v15 - 16];
        v25 = v11 - 2;
        v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 4;
          v26 -= 4;
        }
        while (v26);
        v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            v28 = *--v11;
            *--v20 = v28;
          }
          while (v11 != v14);
          v14 = *(uint64_t **)(a1 + 4040);
        }
      }
      *(_QWORD *)(a1 + 4040) = v20;
      *(_QWORD *)(a1 + 4048) = v13;
      *(_QWORD *)(a1 + 4056) = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v11 = v10;
      v13 = v11 + 1;
    }
    *(_QWORD *)(a1 + 4048) = v13;
    v9 = *(v13 - 1);
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 4024) = v7 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 4040) + 8 * v8) = -1431655765
                                                 * ((*(_QWORD *)(a1 + 4072) - *(_QWORD *)(a1 + 4064)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 4040) + 8 * v8 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 4040)
                                                                                           + 8 * v8
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v9 = v8 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 4040) + 8 * v8 + 4) << 32);
  }
  v29 = *(char **)(a1 + 4072);
  v30 = *(_QWORD *)(a1 + 4080);
  if ((unint64_t)v29 >= v30)
  {
    v34 = *(char **)(a1 + 4064);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v34) >> 3) + 1;
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_154;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v34) >> 3);
    if (2 * v36 > v35)
      v35 = 2 * v36;
    if (v36 >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v35;
    if (v37 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_155;
    v38 = (char *)operator new(24 * v37);
    v39 = &v38[8 * ((v29 - v34) >> 3)];
    *(_OWORD *)v39 = v92;
    *((_QWORD *)v39 + 2) = v93;
    if (v93)
    {
      v40 = (unint64_t *)&v93->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v29 = *(char **)(a1 + 4072);
      v34 = *(char **)(a1 + 4064);
    }
    v42 = &v38[24 * v37];
    v33 = v39 + 24;
    if (v29 == v34)
    {
      *(_QWORD *)(a1 + 4064) = v39;
      *(_QWORD *)(a1 + 4072) = v33;
      *(_QWORD *)(a1 + 4080) = v42;
    }
    else
    {
      do
      {
        v43 = *(_OWORD *)(v29 - 24);
        v29 -= 24;
        *(_OWORD *)(v39 - 24) = v43;
        v39 -= 24;
        *((_QWORD *)v39 + 2) = *((_QWORD *)v29 + 2);
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      while (v29 != v34);
      v34 = *(char **)(a1 + 4064);
      v44 = *(char **)(a1 + 4072);
      *(_QWORD *)(a1 + 4064) = v39;
      *(_QWORD *)(a1 + 4072) = v33;
      *(_QWORD *)(a1 + 4080) = v42;
      while (v44 != v34)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v44 -= 24;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v29 = v92;
    *((_QWORD *)v29 + 2) = v93;
    if (v93)
    {
      v31 = (unint64_t *)&v93->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = v29 + 24;
  }
  *(_QWORD *)(a1 + 4072) = v33;
  v48 = *(char **)(a1 + 4096);
  v49 = *(_QWORD *)(a1 + 4104);
  if ((unint64_t)v48 < v49)
  {
    *(_QWORD *)v48 = v9;
    v50 = (unint64_t)(v48 + 8);
    goto LABEL_84;
  }
  v51 = *(char **)(a1 + 4088);
  v52 = (v48 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_154:
    abort();
  v54 = v49 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (!(v55 >> 61))
    {
      v56 = operator new(8 * v55);
      goto LABEL_75;
    }
LABEL_155:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v56 = 0;
LABEL_75:
  v57 = &v56[8 * v52];
  v58 = &v56[8 * v55];
  *v57 = v9;
  v50 = (unint64_t)(v57 + 1);
  if (v48 != v51)
  {
    v59 = v48 - v51 - 8;
    if (v59 < 0x58)
      goto LABEL_159;
    if ((unint64_t)(v51 - v56) < 0x20)
      goto LABEL_159;
    v60 = (v59 >> 3) + 1;
    v61 = &v56[8 * v52 - 16];
    v62 = v48 - 16;
    v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 4;
    }
    while (v63);
    v57 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
    v48 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_159:
      do
      {
        v65 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v57 = v65;
      }
      while (v48 != v51);
    }
  }
  *(_QWORD *)(a1 + 4088) = v57;
  *(_QWORD *)(a1 + 4096) = v50;
  *(_QWORD *)(a1 + 4104) = v58;
  if (v51)
    operator delete(v51);
LABEL_84:
  *(_QWORD *)(a1 + 4096) = v50;
  v66 = (uint64_t *)(a1 + 3976);
  v67 = *(_QWORD *)(a1 + 3984);
  if (v67)
  {
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      v50 = v9;
      if (v9 >= v67)
        v50 = v9 % v67;
    }
    else
    {
      v50 = (v67 - 1) & v9;
    }
    v69 = *(_QWORD **)(*v66 + 8 * v50);
    if (v69)
    {
      v70 = (_QWORD *)*v69;
      if (v70)
      {
        if (v68.u32[0] < 2uLL)
        {
          while (1)
          {
            v72 = v70[1];
            if (v72 == v9)
            {
              if (v70[2] == v9)
                goto LABEL_143;
            }
            else if ((v72 & (v67 - 1)) != v50)
            {
              goto LABEL_105;
            }
            v70 = (_QWORD *)*v70;
            if (!v70)
              goto LABEL_105;
          }
        }
        do
        {
          v71 = v70[1];
          if (v71 == v9)
          {
            if (v70[2] == v9)
              goto LABEL_143;
          }
          else
          {
            if (v71 >= v67)
              v71 %= v67;
            if (v71 != v50)
              break;
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
    }
  }
LABEL_105:
  v73 = (char *)operator new(0x30uLL);
  *(_QWORD *)v73 = 0;
  *((_QWORD *)v73 + 1) = v9;
  *((_QWORD *)v73 + 2) = v9;
  *(int64x2_t *)(v73 + 24) = vdupq_n_s64(1uLL);
  v73[40] = 0;
  v74 = (float)(unint64_t)(*(_QWORD *)(a1 + 4000) + 1);
  v75 = *(float *)(a1 + 4008);
  if (!v67 || (float)(v75 * (float)v67) < v74)
  {
    v76 = 1;
    if (v67 >= 3)
      v76 = (v67 & (v67 - 1)) != 0;
    v77 = v76 | (2 * v67);
    v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78)
      prime = v78;
    else
      prime = v77;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v67 = *(_QWORD *)(a1 + 3984);
    }
    if (prime > v67)
      goto LABEL_117;
    if (prime < v67)
    {
      v80 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 4000) / *(float *)(a1 + 4008));
      if (v67 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (prime <= v80)
        prime = v80;
      if (prime < v67)
LABEL_117:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 3976, prime);
    }
    v67 = *(_QWORD *)(a1 + 3984);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v9 >= v67)
        v50 = v9 % v67;
      else
        v50 = v9;
    }
    else
    {
      v50 = (v67 - 1) & v9;
    }
  }
  v83 = *v66;
  v84 = *(_QWORD **)(*v66 + 8 * v50);
  if (v84)
  {
    *(_QWORD *)v73 = *v84;
LABEL_141:
    *v84 = v73;
    goto LABEL_142;
  }
  *(_QWORD *)v73 = *(_QWORD *)(a1 + 3992);
  *(_QWORD *)(a1 + 3992) = v73;
  *(_QWORD *)(v83 + 8 * v50) = a1 + 3992;
  if (*(_QWORD *)v73)
  {
    v85 = *(_QWORD *)(*(_QWORD *)v73 + 8);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v85 >= v67)
        v85 %= v67;
    }
    else
    {
      v85 &= v67 - 1;
    }
    v84 = (_QWORD *)(*v66 + 8 * v85);
    goto LABEL_141;
  }
LABEL_142:
  ++*(_QWORD *)(a1 + 4000);
LABEL_143:
  if (v93)
  {
    v86 = (unint64_t *)&v93->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (a3)
  {
    v88 = (unint64_t *)&a3->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return v9;
}

void sub_19FE2A338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  md::components::Material::~Material((md::components::Material *)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int8x8_t *md::VKMRenderResourcesStore::disconnect<ggl::DaVinci::Shadow>(int8x8_t *result, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[498];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD **)(*(_QWORD *)&result[497] + 8 * v4);
    if (v5)
    {
      v6 = (_QWORD *)*v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return result;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return result;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              v10 = v6[4];
              if (!v10 || (v11 = v10 - 1, (v6[4] = v11) == 0))
                v6[3] = 0;
              return result;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return result;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
  return result;
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::StyleCameraLighting,md::VoidKeyType>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t prime;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v92;
  std::__shared_weak_count *v93;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = a2;
    v93 = a3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = a2;
    v93 = 0;
  }
  v7 = *(_QWORD *)(a1 + 5496);
  if (*(_QWORD *)(a1 + 5488) == v7)
  {
    v10 = (-1431655765 * ((*(_QWORD *)(a1 + 5544) - *(_QWORD *)(a1 + 5536)) >> 3)) | 0x100000000;
    v11 = *(uint64_t **)(a1 + 5520);
    v12 = *(_QWORD *)(a1 + 5528);
    if ((unint64_t)v11 >= v12)
    {
      v14 = *(uint64_t **)(a1 + 5512);
      v15 = v11 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_154;
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          goto LABEL_155;
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v10;
      v13 = v20 + 1;
      if (v11 == v14)
      {
        v14 = v11;
      }
      else
      {
        v22 = (char *)v11 - (char *)v14 - 8;
        if (v22 < 0x58)
          goto LABEL_158;
        if ((unint64_t)((char *)v14 - v19) < 0x20)
          goto LABEL_158;
        v23 = (v22 >> 3) + 1;
        v24 = &v19[8 * v15 - 16];
        v25 = v11 - 2;
        v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 4;
          v26 -= 4;
        }
        while (v26);
        v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            v28 = *--v11;
            *--v20 = v28;
          }
          while (v11 != v14);
          v14 = *(uint64_t **)(a1 + 5512);
        }
      }
      *(_QWORD *)(a1 + 5512) = v20;
      *(_QWORD *)(a1 + 5520) = v13;
      *(_QWORD *)(a1 + 5528) = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v11 = v10;
      v13 = v11 + 1;
    }
    *(_QWORD *)(a1 + 5520) = v13;
    v9 = *(v13 - 1);
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 5496) = v7 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 5512) + 8 * v8) = -1431655765
                                                 * ((*(_QWORD *)(a1 + 5544) - *(_QWORD *)(a1 + 5536)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 5512) + 8 * v8 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 5512)
                                                                                           + 8 * v8
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v9 = v8 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 5512) + 8 * v8 + 4) << 32);
  }
  v29 = *(char **)(a1 + 5544);
  v30 = *(_QWORD *)(a1 + 5552);
  if ((unint64_t)v29 >= v30)
  {
    v34 = *(char **)(a1 + 5536);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v34) >> 3) + 1;
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_154;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v34) >> 3);
    if (2 * v36 > v35)
      v35 = 2 * v36;
    if (v36 >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v35;
    if (v37 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_155;
    v38 = (char *)operator new(24 * v37);
    v39 = &v38[8 * ((v29 - v34) >> 3)];
    *(_OWORD *)v39 = v92;
    *((_QWORD *)v39 + 2) = v93;
    if (v93)
    {
      v40 = (unint64_t *)&v93->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v29 = *(char **)(a1 + 5544);
      v34 = *(char **)(a1 + 5536);
    }
    v42 = &v38[24 * v37];
    v33 = v39 + 24;
    if (v29 == v34)
    {
      *(_QWORD *)(a1 + 5536) = v39;
      *(_QWORD *)(a1 + 5544) = v33;
      *(_QWORD *)(a1 + 5552) = v42;
    }
    else
    {
      do
      {
        v43 = *(_OWORD *)(v29 - 24);
        v29 -= 24;
        *(_OWORD *)(v39 - 24) = v43;
        v39 -= 24;
        *((_QWORD *)v39 + 2) = *((_QWORD *)v29 + 2);
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      while (v29 != v34);
      v34 = *(char **)(a1 + 5536);
      v44 = *(char **)(a1 + 5544);
      *(_QWORD *)(a1 + 5536) = v39;
      *(_QWORD *)(a1 + 5544) = v33;
      *(_QWORD *)(a1 + 5552) = v42;
      while (v44 != v34)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v44 -= 24;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v29 = v92;
    *((_QWORD *)v29 + 2) = v93;
    if (v93)
    {
      v31 = (unint64_t *)&v93->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = v29 + 24;
  }
  *(_QWORD *)(a1 + 5544) = v33;
  v48 = *(char **)(a1 + 5568);
  v49 = *(_QWORD *)(a1 + 5576);
  if ((unint64_t)v48 < v49)
  {
    *(_QWORD *)v48 = v9;
    v50 = (unint64_t)(v48 + 8);
    goto LABEL_84;
  }
  v51 = *(char **)(a1 + 5560);
  v52 = (v48 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_154:
    abort();
  v54 = v49 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (!(v55 >> 61))
    {
      v56 = operator new(8 * v55);
      goto LABEL_75;
    }
LABEL_155:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v56 = 0;
LABEL_75:
  v57 = &v56[8 * v52];
  v58 = &v56[8 * v55];
  *v57 = v9;
  v50 = (unint64_t)(v57 + 1);
  if (v48 != v51)
  {
    v59 = v48 - v51 - 8;
    if (v59 < 0x58)
      goto LABEL_159;
    if ((unint64_t)(v51 - v56) < 0x20)
      goto LABEL_159;
    v60 = (v59 >> 3) + 1;
    v61 = &v56[8 * v52 - 16];
    v62 = v48 - 16;
    v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 4;
    }
    while (v63);
    v57 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
    v48 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_159:
      do
      {
        v65 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v57 = v65;
      }
      while (v48 != v51);
    }
  }
  *(_QWORD *)(a1 + 5560) = v57;
  *(_QWORD *)(a1 + 5568) = v50;
  *(_QWORD *)(a1 + 5576) = v58;
  if (v51)
    operator delete(v51);
LABEL_84:
  *(_QWORD *)(a1 + 5568) = v50;
  v66 = (uint64_t *)(a1 + 5448);
  v67 = *(_QWORD *)(a1 + 5456);
  if (v67)
  {
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      v50 = v9;
      if (v9 >= v67)
        v50 = v9 % v67;
    }
    else
    {
      v50 = (v67 - 1) & v9;
    }
    v69 = *(_QWORD **)(*v66 + 8 * v50);
    if (v69)
    {
      v70 = (_QWORD *)*v69;
      if (v70)
      {
        if (v68.u32[0] < 2uLL)
        {
          while (1)
          {
            v72 = v70[1];
            if (v72 == v9)
            {
              if (v70[2] == v9)
                goto LABEL_143;
            }
            else if ((v72 & (v67 - 1)) != v50)
            {
              goto LABEL_105;
            }
            v70 = (_QWORD *)*v70;
            if (!v70)
              goto LABEL_105;
          }
        }
        do
        {
          v71 = v70[1];
          if (v71 == v9)
          {
            if (v70[2] == v9)
              goto LABEL_143;
          }
          else
          {
            if (v71 >= v67)
              v71 %= v67;
            if (v71 != v50)
              break;
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
    }
  }
LABEL_105:
  v73 = (char *)operator new(0x30uLL);
  *(_QWORD *)v73 = 0;
  *((_QWORD *)v73 + 1) = v9;
  *((_QWORD *)v73 + 2) = v9;
  *(int64x2_t *)(v73 + 24) = vdupq_n_s64(1uLL);
  v73[40] = 0;
  v74 = (float)(unint64_t)(*(_QWORD *)(a1 + 5472) + 1);
  v75 = *(float *)(a1 + 5480);
  if (!v67 || (float)(v75 * (float)v67) < v74)
  {
    v76 = 1;
    if (v67 >= 3)
      v76 = (v67 & (v67 - 1)) != 0;
    v77 = v76 | (2 * v67);
    v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78)
      prime = v78;
    else
      prime = v77;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v67 = *(_QWORD *)(a1 + 5456);
    }
    if (prime > v67)
      goto LABEL_117;
    if (prime < v67)
    {
      v80 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 5472) / *(float *)(a1 + 5480));
      if (v67 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (prime <= v80)
        prime = v80;
      if (prime < v67)
LABEL_117:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 5448, prime);
    }
    v67 = *(_QWORD *)(a1 + 5456);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v9 >= v67)
        v50 = v9 % v67;
      else
        v50 = v9;
    }
    else
    {
      v50 = (v67 - 1) & v9;
    }
  }
  v83 = *v66;
  v84 = *(_QWORD **)(*v66 + 8 * v50);
  if (v84)
  {
    *(_QWORD *)v73 = *v84;
LABEL_141:
    *v84 = v73;
    goto LABEL_142;
  }
  *(_QWORD *)v73 = *(_QWORD *)(a1 + 5464);
  *(_QWORD *)(a1 + 5464) = v73;
  *(_QWORD *)(v83 + 8 * v50) = a1 + 5464;
  if (*(_QWORD *)v73)
  {
    v85 = *(_QWORD *)(*(_QWORD *)v73 + 8);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v85 >= v67)
        v85 %= v67;
    }
    else
    {
      v85 &= v67 - 1;
    }
    v84 = (_QWORD *)(*v66 + 8 * v85);
    goto LABEL_141;
  }
LABEL_142:
  ++*(_QWORD *)(a1 + 5472);
LABEL_143:
  if (v93)
  {
    v86 = (unint64_t *)&v93->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (a3)
  {
    v88 = (unint64_t *)&a3->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return v9;
}

void sub_19FE2AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  md::components::Material::~Material((md::components::Material *)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2AF50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>(_QWORD *a1, uint64_t a2)
{
  float v2;
  float v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v23;

  if (*(_BYTE *)(a2 + 20))
  {
    v2 = *(float *)(a2 + 4);
    v3 = *(float *)(a2 + 8);
    if (v2 == 0.0)
      v4 = 0x9E3779B97F4A7C15;
    else
      v4 = LODWORD(v2) - 0x61C8864680B583EBLL;
    if (v3 == 0.0)
      v5 = 0x9E3779B97F4A7C15;
    else
      v5 = LODWORD(v3) - 0x61C8864680B583EBLL;
    v6 = *(float *)(a2 + 12);
    v7 = *(float *)(a2 + 16);
    if (v6 == 0.0)
      v8 = 0x9E3779B97F4A7C15;
    else
      v8 = LODWORD(v6) - 0x61C8864680B583EBLL;
    if (v7 == 0.0)
      v9 = 0x9E3779B97F4A7C15;
    else
      v9 = LODWORD(v7) - 0x61C8864680B583EBLL;
    v10 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v10)
      return 0;
    v11 = (v8 + ((((v4 >> 2) + (v4 << 6) + v5) ^ v4) << 6) + ((((v4 >> 2) + (v4 << 6) + v5) ^ v4) >> 2)) ^ ((v4 >> 2) + (v4 << 6) + v5) ^ v4;
    v12 = (v9 + (v11 << 6) + (v11 >> 2)) ^ v11;
    v13 = (((v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12) - 0x61C8864680B583EBLL;
    v14 = (uint8x8_t)vcnt_s8(v10);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = (((v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12) - 0x61C8864680B583EBLL;
      if (v13 >= *(_QWORD *)&v10)
        v15 = v13 % *(_QWORD *)&v10;
    }
    else
    {
      v15 = v13 & (*(_QWORD *)&v10 - 1);
    }
    v16 = *(uint64_t **)(*a1 + 8 * v15);
    if (v16)
    {
      result = *v16;
      if (*v16)
      {
        if (v14.u32[0] < 2uLL)
        {
          v18 = *(_QWORD *)&v10 - 1;
          while (1)
          {
            v21 = *(_QWORD *)(result + 8);
            if (v21 == v13)
            {
              if (*(_BYTE *)(result + 36))
              {
                if (*(_QWORD *)(result + 20) == *(_QWORD *)(a2 + 4) && *(_QWORD *)(result + 28) == *(_QWORD *)(a2 + 12))
                  return result;
              }
            }
            else if ((v21 & v18) != v15)
            {
              return 0;
            }
            result = *(_QWORD *)result;
            if (!result)
              return result;
          }
        }
        do
        {
          v19 = *(_QWORD *)(result + 8);
          if (v19 == v13)
          {
            if (*(_BYTE *)(result + 36))
            {
              if (*(_QWORD *)(result + 20) == *(_QWORD *)(a2 + 4) && *(_QWORD *)(result + 28) == *(_QWORD *)(a2 + 12))
                return result;
            }
          }
          else
          {
            if (v19 >= *(_QWORD *)&v10)
              v19 %= *(_QWORD *)&v10;
            if (v19 != v15)
              return 0;
          }
          result = *(_QWORD *)result;
        }
        while (result);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v23 = std::__throw_bad_optional_access[abi:nn180100]();
    return std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>> const&>,std::tuple<>>(v23);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2B3E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>(_QWORD *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  unint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)a2;
  v3 = *((unsigned int *)a2 + 1);
  v4 = v2 - 0x61C8864680B583EBLL;
  if ((v2 & 0x7FFFFFFF) == 0)
    v4 = 0x9E3779B97F4A7C15;
  if ((v3 & 0x7FFFFFFF) != 0)
    v5 = v3 - 0x61C8864680B583EBLL;
  else
    v5 = 0x9E3779B97F4A7C15;
  v6 = a2[2];
  v7 = a2[3];
  if (v6 == 0.0)
    v8 = 0x9E3779B97F4A7C15;
  else
    v8 = LODWORD(v6) - 0x61C8864680B583EBLL;
  if (v7 == 0.0)
    v9 = 0x9E3779B97F4A7C15;
  else
    v9 = LODWORD(v7) - 0x61C8864680B583EBLL;
  v10 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v10)
    return 0;
  v11 = ((v4 >> 2) + (v4 << 6) + v5) ^ v4;
  v12 = ((v11 << 6) + (v11 >> 2) + (((v8 >> 2) + (v8 << 6) + v9) ^ v8) - 0x61C8864680B583EBLL) ^ v11;
  v13 = (uint8x8_t)vcnt_s8(v10);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = ((v11 << 6) + (v11 >> 2) + (((v8 >> 2) + (v8 << 6) + v9) ^ v8) - 0x61C8864680B583EBLL) ^ v11;
    if (v12 >= *(_QWORD *)&v10)
      v14 = v12 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = v12 & (*(_QWORD *)&v10 - 1);
  }
  v15 = *(_QWORD **)(*a1 + 8 * v14);
  if (!v15)
    return 0;
  result = (_QWORD *)*v15;
  if (*v15)
  {
    if (v13.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v10 - 1;
      while (1)
      {
        v19 = result[1];
        if (v19 == v12)
        {
          if (result[2] == *(_QWORD *)a2 && result[3] == *((_QWORD *)a2 + 1))
            return result;
        }
        else if ((v19 & v17) != v14)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v18 = result[1];
      if (v18 == v12)
      {
        if (result[2] == *(_QWORD *)a2 && result[3] == *((_QWORD *)a2 + 1))
          return result;
      }
      else
      {
        if (v18 >= *(_QWORD *)&v10)
          v18 %= *(_QWORD *)&v10;
        if (v18 != v14)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2B84C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float *std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  float v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  float **v15;
  float *result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2 = a2[1];
  v3 = a2[2];
  v4 = LODWORD(v2) - 0x61C8864680B583EBLL;
  if (v2 == 0.0)
    v4 = 0x9E3779B97F4A7C15;
  v5 = LODWORD(v3) - 0x61C8864680B583EBLL;
  if (v3 == 0.0)
    v5 = 0x9E3779B97F4A7C15;
  v6 = a2[3];
  v7 = a2[4];
  v8 = LODWORD(v6) - 0x61C8864680B583EBLL;
  if (v6 == 0.0)
    v8 = 0x9E3779B97F4A7C15;
  v9 = LODWORD(v7) - 0x61C8864680B583EBLL;
  if (v7 == 0.0)
    v9 = 0x9E3779B97F4A7C15;
  v10 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v10)
    return 0;
  v11 = (v8 + ((((v4 >> 2) + (v4 << 6) + v5) ^ v4) << 6) + ((((v4 >> 2) + (v4 << 6) + v5) ^ v4) >> 2)) ^ ((v4 >> 2) + (v4 << 6) + v5) ^ v4;
  v12 = (v9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  v13 = (uint8x8_t)vcnt_s8(v10);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = v12;
    if (v12 >= *(_QWORD *)&v10)
      v14 = v12 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = v12 & (*(_QWORD *)&v10 - 1);
  }
  v15 = *(float ***)(*a1 + 8 * v14);
  if (!v15)
    return 0;
  result = *v15;
  if (*v15)
  {
    if (v13.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v10 - 1;
      while (1)
      {
        v18 = *((_QWORD *)result + 1);
        if (v18 == v12)
        {
          if (vabds_f32(result[5], v2) < 0.000001
            && vabds_f32(result[6], v3) < 0.000001
            && vabds_f32(result[7], v6) < 0.000001
            && vabds_f32(result[8], v7) < 0.000001)
          {
            return result;
          }
        }
        else if ((v18 & v17) != v14)
        {
          return 0;
        }
        result = *(float **)result;
        if (!result)
          return result;
      }
    }
    do
    {
      v19 = *((_QWORD *)result + 1);
      if (v19 == v12)
      {
        if (vabds_f32(result[5], v2) < 0.000001
          && vabds_f32(result[6], v3) < 0.000001
          && vabds_f32(result[7], v6) < 0.000001
          && vabds_f32(result[8], v7) < 0.000001)
        {
          return result;
        }
      }
      else
      {
        if (v19 >= *(_QWORD *)&v10)
          v19 %= *(_QWORD *)&v10;
        if (v19 != v14)
          return 0;
      }
      result = *(float **)result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2BD20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2BFFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  unint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v18;
  uint64_t v20;

  v2 = a2[1];
  if (*a2 == 0.0)
    v3 = 0x9E3779B97F4A7C15;
  else
    v3 = *(unsigned int *)a2 - 0x61C8864680B583EBLL;
  if (v2 == 0.0)
    v4 = 0x9E3779B97F4A7C15;
  else
    v4 = LODWORD(v2) - 0x61C8864680B583EBLL;
  v5 = a2[2];
  v6 = a2[3];
  if (v5 == 0.0)
    v7 = 0x9E3779B97F4A7C15;
  else
    v7 = LODWORD(v5) - 0x61C8864680B583EBLL;
  if (v6 == 0.0)
    v8 = 0x9E3779B97F4A7C15;
  else
    v8 = LODWORD(v6) - 0x61C8864680B583EBLL;
  v9 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v9)
    return 0;
  v10 = (v7 + ((((v3 >> 2) + (v3 << 6) + v4) ^ v3) << 6) + ((((v3 >> 2) + (v3 << 6) + v4) ^ v3) >> 2)) ^ ((v3 >> 2) + (v3 << 6) + v4) ^ v3;
  v11 = ((v8 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583EBLL;
  v12 = (uint8x8_t)vcnt_s8(v9);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = ((v8 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583EBLL;
    if (v11 >= *(_QWORD *)&v9)
      v13 = v11 % *(_QWORD *)&v9;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v9 - 1);
  }
  v14 = *(_QWORD **)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = (_QWORD *)*v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v9 - 1;
      while (1)
      {
        v20 = result[1];
        if (v20 == v11)
        {
          if (result[2] == *(_QWORD *)a2 && result[3] == *((_QWORD *)a2 + 1))
            return result;
        }
        else if ((v20 & v16) != v13)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v18 = result[1];
      if (v18 == v11)
      {
        if (result[2] == *(_QWORD *)a2 && result[3] == *((_QWORD *)a2 + 1))
          return result;
      }
      else
      {
        if (v18 >= *(_QWORD *)&v9)
          v18 %= *(_QWORD *)&v9;
        if (v18 != v13)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2C444(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  float v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *result;
  uint64_t v15;
  unint64_t v17;
  uint64_t v19;

  v2 = a2[2];
  v3 = a2[3];
  if (v2 == 0.0)
    v4 = 0x9E3779B97F4A7C15;
  else
    v4 = LODWORD(v2) - 0x61C8864680B583EBLL;
  if (v3 == 0.0)
    v5 = 0x9E3779B97F4A7C15;
  else
    v5 = LODWORD(v3) - 0x61C8864680B583EBLL;
  v6 = a2[4];
  if (v6 == 0.0)
    v7 = 0x9E3779B97F4A7C15;
  else
    v7 = LODWORD(v6) - 0x61C8864680B583EBLL;
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (v7 + ((((v4 >> 2) + (v4 << 6) + v5) ^ v4) << 6) + ((((v4 >> 2) + (v4 << 6) + v5) ^ v4) >> 2)) ^ ((v4 >> 2) + (v4 << 6) + v5) ^ v4;
  v10 = (((v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9) - 0x61C8864680B583EBLL;
  v11 = (uint8x8_t)vcnt_s8(v8);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = (((v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9) - 0x61C8864680B583EBLL;
    if (v10 >= *(_QWORD *)&v8)
      v12 = v10 % *(_QWORD *)&v8;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v8 - 1);
  }
  v13 = *(uint64_t ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  result = *v13;
  if (*v13)
  {
    if (v11.u32[0] < 2uLL)
    {
      v15 = *(_QWORD *)&v8 - 1;
      while (1)
      {
        v19 = result[1];
        if (v19 == v10)
        {
          if (result[3] == *((_QWORD *)a2 + 1)
            && *((_DWORD *)result + 8) == (unint64_t)*((unsigned int *)a2 + 4))
          {
            return result;
          }
        }
        else if ((v19 & v15) != v12)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = result[1];
      if (v17 == v10)
      {
        if (result[3] == *((_QWORD *)a2 + 1) && *((_DWORD *)result + 8) == (unint64_t)*((unsigned int *)a2 + 4))
          return result;
      }
      else
      {
        if (v17 >= *(_QWORD *)&v8)
          v17 %= *(_QWORD *)&v8;
        if (v17 != v12)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2C890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>(_QWORD *a1, int a2, int a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (((a2 - 0x61C8864680B583EBLL) << 6)
      + a3
      + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = (((a2 - 0x61C8864680B583EBLL) << 6)
        + a3
        + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
        - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v4)
        {
          if (*((_DWORD *)result + 4) == a2 && *((_DWORD *)result + 5) == a3)
            return result;
        }
        else if ((v13 & v9) != v6)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v4)
      {
        if (*((_DWORD *)result + 4) == a2 && *((_DWORD *)result + 5) == a3)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v3)
          v11 %= *(_QWORD *)&v3;
        if (v11 != v6)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2CC74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2CF50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::__unordered_map_hasher<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,md::StyleSSAOKeyHasher,std::equal_to<md::StyleSSAOKey>,true>,std::__unordered_map_equal<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<md::StyleSSAOKey>,md::StyleSSAOKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>>>::find<md::StyleSSAOKey>(_QWORD *a1, float *a2)
{
  float v2;
  float v3;
  unint64_t v4;
  float v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v3 = a2[5];
  v2 = a2[6];
  v4 = LODWORD(v2);
  if (v2 == 0.0)
    v4 = 0;
  v5 = a2[3];
  v6 = a2[4];
  if (v5 == 0.0)
    v7 = 0x9E3779B97F4A7C15;
  else
    v7 = LODWORD(v5) - 0x61C8864680B583EBLL;
  if (v6 == 0.0)
    v8 = 0x9E3779B97F4A7C15;
  else
    v8 = LODWORD(v6) - 0x61C8864680B583EBLL;
  if (v3 == 0.0)
    v9 = 0x9E3779B97F4A7C15;
  else
    v9 = LODWORD(v3) - 0x61C8864680B583EBLL;
  v10 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v10)
    return 0;
  v11 = ((v4 << 6)
       + (v4 >> 2)
       - 0x61C8864680B583EBLL
       + ((v9 + ((((v7 >> 2) + (v7 << 6) + v8) ^ v7) << 6) + ((((v7 >> 2) + (v7 << 6) + v8) ^ v7) >> 2)) ^ ((v7 >> 2) + (v7 << 6) + v8) ^ v7)) ^ v4;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = v11;
    if (v11 >= *(_QWORD *)&v10)
      v13 = v11 % *(_QWORD *)&v10;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v10 - 1);
  }
  v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v10 - 1;
      while (1)
      {
        v19 = result[1];
        if (v19 == v11)
        {
          if (*((float *)result + 10) == v2
            && *(uint64_t *)((char *)result + 28) == *(_QWORD *)(a2 + 3)
            && *((_DWORD *)result + 9) == (unint64_t)*((unsigned int *)a2 + 5))
          {
            return result;
          }
        }
        else if ((v19 & v16) != v13)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = result[1];
      if (v17 == v11)
      {
        if (*((float *)result + 10) == v2
          && *(uint64_t *)((char *)result + 28) == *(_QWORD *)(a2 + 3)
          && *((_DWORD *)result + 9) == (unint64_t)*((unsigned int *)a2 + 5))
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(_QWORD *)&v10)
          v17 %= *(_QWORD *)&v10;
        if (v17 != v13)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2D3C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2D6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  uint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(unsigned int *)a2;
  if (*a2 == 0.0)
    v4 = 0;
  if (v3 == 0.0)
    v5 = 0x9E3779B97F4A7C15;
  else
    v5 = LODWORD(v3) - 0x61C8864680B583EBLL;
  v6 = a2[2];
  if (v6 == 0.0)
    v7 = 0x9E3779B97F4A7C15;
  else
    v7 = LODWORD(v6) - 0x61C8864680B583EBLL;
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = ((v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL + (((v5 >> 2) + (v5 << 6) + v7) ^ v5)) ^ v4;
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v9;
    if (v9 >= *(_QWORD *)&v8)
      v11 = v9 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = v9 & (*(_QWORD *)&v8 - 1);
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v8 - 1;
      while (1)
      {
        v16 = result[1];
        if (v16 == v9)
        {
          if (*((float *)result + 4) == v2 && *(uint64_t *)((char *)result + 20) == *(_QWORD *)(a2 + 1))
            return result;
        }
        else if ((v16 & v14) != v11)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v15 = result[1];
      if (v15 == v9)
      {
        if (*((float *)result + 4) == v2 && *(uint64_t *)((char *)result + 20) == *(_QWORD *)(a2 + 1))
          return result;
      }
      else
      {
        if (v15 >= *(_QWORD *)&v8)
          v15 %= *(_QWORD *)&v8;
        if (v15 != v11)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2DAE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::ElevatedStroke,md::ElevatedStrokeCacheKey>(uint64_t a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint8x8_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t prime;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  float v76;
  float v77;
  unint64_t v78;
  unint64_t v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  void **v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  _BOOL8 v91;
  unint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  size_t v100;
  size_t v101;
  size_t v102;
  _QWORD *i;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint8x8_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  uint8x8_t v118;
  void **v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  float v123;
  float v124;
  _BOOL8 v125;
  unint64_t v126;
  unint64_t v127;
  size_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  size_t v134;
  size_t v135;
  size_t v136;
  _QWORD *j;
  size_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  size_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  void *v152;
  void *v153;

  v4 = *(_QWORD *)(a1 + 6656);
  if (*(_QWORD *)(a1 + 6648) == v4)
  {
    v7 = (-1431655765 * ((*(_QWORD *)(a1 + 6704) - *(_QWORD *)(a1 + 6696)) >> 3)) | 0x100000000;
    v8 = *(uint64_t **)(a1 + 6680);
    v9 = *(_QWORD *)(a1 + 6688);
    if ((unint64_t)v8 >= v9)
    {
      v11 = *(uint64_t **)(a1 + 6672);
      v12 = v8 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_320;
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_319;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      *v17 = v7;
      v10 = v17 + 1;
      if (v8 == v11)
      {
        v11 = v8;
      }
      else
      {
        v18 = (char *)v8 - (char *)v11 - 8;
        if (v18 < 0x58)
          goto LABEL_323;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_323;
        v19 = (v18 >> 3) + 1;
        v20 = &v16[(char *)v8 - (char *)v11 - 16];
        v21 = v8 - 2;
        v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 4;
          v22 -= 4;
        }
        while (v22);
        v17 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_323:
          do
          {
            v24 = *--v8;
            *--v17 = v24;
          }
          while (v8 != v11);
          v11 = *(uint64_t **)(a1 + 6672);
        }
      }
      *(_QWORD *)(a1 + 6672) = v17;
      *(_QWORD *)(a1 + 6680) = v10;
      *(_QWORD *)(a1 + 6688) = &v16[8 * v15];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    *(_QWORD *)(a1 + 6680) = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(a1 + 6656) = v4 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 6672) + 8 * v5) = -1431655765
                                                 * ((*(_QWORD *)(a1 + 6704) - *(_QWORD *)(a1 + 6696)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 6672) + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 6672)
                                                                                           + 8 * v5
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 6672) + 8 * v5 + 4) << 32);
  }
  v25 = *(char **)(a1 + 6704);
  v26 = *(_QWORD *)(a1 + 6712);
  if ((unint64_t)v25 >= v26)
  {
    v28 = *(char **)(a1 + 6696);
    v29 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v28) >> 3) + 1;
    if (v29 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_320;
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v28) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x555555555555555)
      v31 = 0xAAAAAAAAAAAAAAALL;
    else
      v31 = v29;
    if (v31 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_319;
    v32 = (char *)operator new(24 * v31);
    v33 = &v32[8 * ((v25 - v28) >> 3)];
    *(_OWORD *)v33 = 0uLL;
    *((_QWORD *)v33 + 2) = 0;
    v34 = &v32[24 * v31];
    v27 = v33 + 24;
    if (v25 == v28)
    {
      *(_QWORD *)(a1 + 6696) = v33;
      *(_QWORD *)(a1 + 6704) = v27;
      *(_QWORD *)(a1 + 6712) = v34;
    }
    else
    {
      do
      {
        v35 = *(_OWORD *)(v25 - 24);
        v25 -= 24;
        *(_OWORD *)(v33 - 24) = v35;
        v33 -= 24;
        *((_QWORD *)v33 + 2) = *((_QWORD *)v25 + 2);
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = 0;
      }
      while (v25 != v28);
      v28 = *(char **)(a1 + 6696);
      v36 = *(char **)(a1 + 6704);
      *(_QWORD *)(a1 + 6696) = v33;
      *(_QWORD *)(a1 + 6704) = v27;
      *(_QWORD *)(a1 + 6712) = v34;
      while (v36 != v28)
      {
        v37 = (std::__shared_weak_count *)*((_QWORD *)v36 - 1);
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v36 -= 24;
      }
    }
    if (v28)
      operator delete(v28);
  }
  else
  {
    *(_OWORD *)v25 = 0uLL;
    *((_QWORD *)v25 + 2) = 0;
    v27 = v25 + 24;
  }
  *(_QWORD *)(a1 + 6704) = v27;
  v40 = *(_QWORD *)(a1 + 6728);
  v41 = *(_QWORD *)(a1 + 6736);
  if (v40 < v41)
  {
    *(_QWORD *)v40 = v6;
    v40 += 8;
    v42 = v40;
    goto LABEL_70;
  }
  v43 = *(_BYTE **)(a1 + 6720);
  v44 = (uint64_t)(v40 - (_QWORD)v43) >> 3;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 61)
LABEL_320:
    abort();
  v46 = v41 - (_QWORD)v43;
  if (v46 >> 2 > v45)
    v45 = v46 >> 2;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
    v47 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    if (v47 >> 61)
      goto LABEL_319;
    v48 = operator new(8 * v47);
  }
  else
  {
    v48 = 0;
  }
  v49 = &v48[8 * v44];
  *v49 = v6;
  v42 = (unint64_t)(v49 + 1);
  if ((_BYTE *)v40 != v43)
  {
    v50 = v40 - (_QWORD)v43 - 8;
    if (v50 < 0x58)
      goto LABEL_324;
    if ((unint64_t)(v43 - v48) < 0x20)
      goto LABEL_324;
    v51 = (v50 >> 3) + 1;
    v52 = &v48[v40 - (_QWORD)v43 - 16];
    v53 = (__int128 *)(v40 - 16);
    v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *v53;
      *(v52 - 1) = *(v53 - 1);
      *v52 = v55;
      v52 -= 2;
      v53 -= 2;
      v54 -= 4;
    }
    while (v54);
    v49 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
    v40 -= 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
    if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_324:
      do
      {
        v56 = *(_QWORD *)(v40 - 8);
        v40 -= 8;
        *--v49 = v56;
      }
      while ((_BYTE *)v40 != v43);
    }
  }
  *(_QWORD *)(a1 + 6720) = v49;
  *(_QWORD *)(a1 + 6728) = v42;
  *(_QWORD *)(a1 + 6736) = &v48[8 * v47];
  if (v43)
    operator delete(v43);
LABEL_70:
  v57 = (uint64_t *)(a1 + 6568);
  *(_QWORD *)(a1 + 6728) = v42;
  v58 = *(_QWORD *)(a1 + 6576);
  if (v58)
  {
    v59 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
    v59.i16[0] = vaddlv_u8(v59);
    if (v59.u32[0] > 1uLL)
    {
      v42 = v6;
      if (v6 >= v58)
        v42 = v6 % v58;
    }
    else
    {
      v42 = (v58 - 1) & v6;
    }
    v60 = *(_QWORD **)(*v57 + 8 * v42);
    if (v60)
    {
      v61 = (_QWORD *)*v60;
      if (v61)
      {
        if (v59.u32[0] < 2uLL)
        {
          while (1)
          {
            v63 = v61[1];
            if (v63 == v6)
            {
              if (v61[2] == v6)
                goto LABEL_129;
            }
            else if ((v63 & (v58 - 1)) != v42)
            {
              goto LABEL_91;
            }
            v61 = (_QWORD *)*v61;
            if (!v61)
              goto LABEL_91;
          }
        }
        do
        {
          v62 = v61[1];
          if (v62 == v6)
          {
            if (v61[2] == v6)
              goto LABEL_129;
          }
          else
          {
            if (v62 >= v58)
              v62 %= v58;
            if (v62 != v42)
              break;
          }
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
    }
  }
LABEL_91:
  v40 = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = v6;
  *(_QWORD *)(v40 + 16) = v6;
  *(_OWORD *)(v40 + 24) = xmmword_19FFB3350;
  *(_BYTE *)(v40 + 40) = 0;
  v64 = (float)(unint64_t)(*(_QWORD *)(a1 + 6592) + 1);
  v65 = *(float *)(a1 + 6600);
  if (!v58 || (float)(v65 * (float)v58) < v64)
  {
    v66 = 1;
    if (v58 >= 3)
      v66 = (v58 & (v58 - 1)) != 0;
    v67 = v66 | (2 * v58);
    v68 = vcvtps_u32_f32(v64 / v65);
    if (v67 <= v68)
      prime = v68;
    else
      prime = v67;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v58 = *(_QWORD *)(a1 + 6576);
    }
    if (prime > v58)
      goto LABEL_103;
    if (prime < v58)
    {
      v70 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 6592) / *(float *)(a1 + 6600));
      if (v58 < 3 || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)v58), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
      {
        v70 = std::__next_prime(v70);
      }
      else
      {
        v72 = 1 << -(char)__clz(v70 - 1);
        if (v70 >= 2)
          v70 = v72;
      }
      if (prime <= v70)
        prime = v70;
      if (prime < v58)
LABEL_103:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 6568, prime);
    }
    v58 = *(_QWORD *)(a1 + 6576);
    if ((v58 & (v58 - 1)) != 0)
    {
      if (v6 >= v58)
        v42 = v6 % v58;
      else
        v42 = v6;
    }
    else
    {
      v42 = (v58 - 1) & v6;
    }
  }
  v73 = *v57;
  v74 = *(unint64_t **)(*v57 + 8 * v42);
  if (v74)
  {
    *(_QWORD *)v40 = *v74;
LABEL_127:
    *v74 = v40;
    goto LABEL_128;
  }
  *(_QWORD *)v40 = *(_QWORD *)(a1 + 6584);
  *(_QWORD *)(a1 + 6584) = v40;
  *(_QWORD *)(v73 + 8 * v42) = a1 + 6584;
  if (*(_QWORD *)v40)
  {
    v75 = *(_QWORD *)(*(_QWORD *)v40 + 8);
    if ((v58 & (v58 - 1)) != 0)
    {
      if (v75 >= v58)
        v75 %= v58;
    }
    else
    {
      v75 &= v58 - 1;
    }
    v74 = (unint64_t *)(*v57 + 8 * v75);
    goto LABEL_127;
  }
LABEL_128:
  ++*(_QWORD *)(a1 + 6592);
LABEL_129:
  v76 = *a2;
  v77 = a2[1];
  v78 = *(unsigned int *)a2;
  if (*a2 == 0.0)
    v78 = 0;
  v79 = LODWORD(v77) - 0x61C8864680B583EBLL;
  if (v77 == 0.0)
    v79 = 0x9E3779B97F4A7C15;
  v80 = a2[2];
  v81 = LODWORD(v80) - 0x61C8864680B583EBLL;
  if (v80 == 0.0)
    v81 = 0x9E3779B97F4A7C15;
  v82 = ((v78 << 6) + (v78 >> 2) - 0x61C8864680B583EBLL + (((v79 >> 2) + (v79 << 6) + v81) ^ v79)) ^ v78;
  v83 = *(_QWORD *)(a1 + 6792);
  if (v83)
  {
    v84 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
    v84.i16[0] = vaddlv_u8(v84);
    if (v84.u32[0] > 1uLL)
    {
      v40 = ((v78 << 6) + (v78 >> 2) - 0x61C8864680B583EBLL + (((v79 >> 2) + (v79 << 6) + v81) ^ v79)) ^ v78;
      if (v82 >= v83)
        v40 = v82 % v83;
    }
    else
    {
      v40 = v82 & (v83 - 1);
    }
    v85 = *(void ***)(*(_QWORD *)(a1 + 6784) + 8 * v40);
    if (v85)
    {
      v86 = *v85;
      if (*v85)
      {
        if (v84.u32[0] < 2uLL)
        {
          while (1)
          {
            v88 = v86[1];
            if (v88 == v82)
            {
              if (*((float *)v86 + 4) == v76 && *(_QWORD *)((char *)v86 + 20) == *(_QWORD *)(a2 + 1))
                goto LABEL_219;
            }
            else if ((v88 & (v83 - 1)) != v40)
            {
              goto LABEL_159;
            }
            v86 = (_QWORD *)*v86;
            if (!v86)
              goto LABEL_159;
          }
        }
        do
        {
          v87 = v86[1];
          if (v87 == v82)
          {
            if (*((float *)v86 + 4) == v76 && *(_QWORD *)((char *)v86 + 20) == *(_QWORD *)(a2 + 1))
              goto LABEL_219;
          }
          else
          {
            if (v87 >= v83)
              v87 %= v83;
            if (v87 != v40)
              break;
          }
          v86 = (_QWORD *)*v86;
        }
        while (v86);
      }
    }
  }
LABEL_159:
  v86 = operator new(0x28uLL);
  *v86 = 0;
  v86[1] = v82;
  v86[2] = *(_QWORD *)a2;
  *((float *)v86 + 6) = a2[2];
  v86[4] = 0;
  v89 = (float)(unint64_t)(*(_QWORD *)(a1 + 6808) + 1);
  v90 = *(float *)(a1 + 6816);
  if (!v83 || (float)(v90 * (float)v83) < v89)
  {
    v91 = 1;
    if (v83 >= 3)
      v91 = (v83 & (v83 - 1)) != 0;
    v92 = v91 | (2 * v83);
    v93 = vcvtps_u32_f32(v89 / v90);
    if (v92 <= v93)
      v94 = v93;
    else
      v94 = v92;
    if (v94 == 1)
    {
      v94 = 2;
    }
    else if ((v94 & (v94 - 1)) != 0)
    {
      v94 = std::__next_prime(v94);
      v83 = *(_QWORD *)(a1 + 6792);
    }
    if (v94 <= v83)
    {
      if (v94 >= v83)
        goto LABEL_196;
      v107 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 6808) / *(float *)(a1 + 6816));
      if (v83 < 3 || (v108 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v108.i16[0] = vaddlv_u8(v108), v108.u32[0] > 1uLL))
      {
        v107 = std::__next_prime(v107);
      }
      else
      {
        v109 = 1 << -(char)__clz(v107 - 1);
        if (v107 >= 2)
          v107 = v109;
      }
      if (v94 <= v107)
        v94 = v107;
      if (v94 >= v83)
      {
        v83 = *(_QWORD *)(a1 + 6792);
LABEL_196:
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v82 >= v83)
            v40 = v82 % v83;
          else
            v40 = v82;
        }
        else
        {
          v40 = (v83 - 1) & v82;
        }
        goto LABEL_209;
      }
      if (!v94)
      {
        v152 = *(void **)(a1 + 6784);
        *(_QWORD *)(a1 + 6784) = 0;
        if (v152)
          operator delete(v152);
        v83 = 0;
        *(_QWORD *)(a1 + 6792) = 0;
        goto LABEL_196;
      }
    }
    if (v94 >> 61)
      goto LABEL_319;
    v95 = operator new(8 * v94);
    v96 = *(void **)(a1 + 6784);
    *(_QWORD *)(a1 + 6784) = v95;
    if (v96)
      operator delete(v96);
    v97 = 0;
    *(_QWORD *)(a1 + 6792) = v94;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 6784) + 8 * v97++) = 0;
    while (v94 != v97);
    v98 = *(_QWORD **)(a1 + 6800);
    if (!v98)
    {
LABEL_195:
      v83 = v94;
      goto LABEL_196;
    }
    v99 = a1 + 6800;
    v100 = v98[1];
    v101 = v94 - 1;
    if ((v94 & (v94 - 1)) == 0)
    {
      v102 = v100 & v101;
      *(_QWORD *)(*(_QWORD *)(a1 + 6784) + 8 * v102) = v99;
      for (i = (_QWORD *)*v98; *v98; i = (_QWORD *)*v98)
      {
        v104 = i[1] & v101;
        if (v104 == v102)
        {
          v98 = i;
        }
        else
        {
          v105 = *(_QWORD *)(a1 + 6784);
          if (*(_QWORD *)(v105 + 8 * v104))
          {
            *v98 = *i;
            v106 = 8 * v104;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 6784) + v106);
            **(_QWORD **)(*(_QWORD *)(a1 + 6784) + v106) = i;
          }
          else
          {
            *(_QWORD *)(v105 + 8 * v104) = v98;
            v98 = i;
            v102 = v104;
          }
        }
      }
      goto LABEL_195;
    }
    if (v100 >= v94)
      v100 %= v94;
    *(_QWORD *)(*(_QWORD *)(a1 + 6784) + 8 * v100) = v99;
    v110 = (_QWORD *)*v98;
    if (!*v98)
      goto LABEL_195;
    while (1)
    {
      v112 = v110[1];
      if (v112 >= v94)
        v112 %= v94;
      if (v112 != v100)
      {
        v113 = *(_QWORD *)(a1 + 6784);
        if (!*(_QWORD *)(v113 + 8 * v112))
        {
          *(_QWORD *)(v113 + 8 * v112) = v98;
          goto LABEL_200;
        }
        *v98 = *v110;
        v111 = 8 * v112;
        *v110 = **(_QWORD **)(*(_QWORD *)(a1 + 6784) + v111);
        **(_QWORD **)(*(_QWORD *)(a1 + 6784) + v111) = v110;
        v110 = v98;
      }
      v112 = v100;
LABEL_200:
      v98 = v110;
      v110 = (_QWORD *)*v110;
      v100 = v112;
      if (!v110)
        goto LABEL_195;
    }
  }
LABEL_209:
  v114 = *(_QWORD *)(a1 + 6784);
  v115 = *(_QWORD **)(v114 + 8 * v40);
  if (v115)
  {
    *v86 = *v115;
LABEL_217:
    *v115 = v86;
    goto LABEL_218;
  }
  *v86 = *(_QWORD *)(a1 + 6800);
  *(_QWORD *)(a1 + 6800) = v86;
  *(_QWORD *)(v114 + 8 * v40) = a1 + 6800;
  if (*v86)
  {
    v116 = *(_QWORD *)(*v86 + 8);
    if ((v83 & (v83 - 1)) != 0)
    {
      if (v116 >= v83)
        v116 %= v83;
    }
    else
    {
      v116 &= v83 - 1;
    }
    v115 = (_QWORD *)(*(_QWORD *)(a1 + 6784) + 8 * v116);
    goto LABEL_217;
  }
LABEL_218:
  ++*(_QWORD *)(a1 + 6808);
LABEL_219:
  v86[4] = v6;
  v117 = *(_QWORD *)(a1 + 6832);
  if (v117)
  {
    v118 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
    v118.i16[0] = vaddlv_u8(v118);
    if (v118.u32[0] > 1uLL)
    {
      v40 = v6;
      if (v6 >= v117)
        v40 = v6 % v117;
    }
    else
    {
      v40 = (v117 - 1) & v6;
    }
    v119 = *(void ***)(*(_QWORD *)(a1 + 6824) + 8 * v40);
    if (v119)
    {
      v120 = *v119;
      if (*v119)
      {
        if (v118.u32[0] < 2uLL)
        {
          while (1)
          {
            v122 = v120[1];
            if (v122 == v6)
            {
              if (v120[2] == v6)
                goto LABEL_300;
            }
            else if ((v122 & (v117 - 1)) != v40)
            {
              goto LABEL_240;
            }
            v120 = (_QWORD *)*v120;
            if (!v120)
              goto LABEL_240;
          }
        }
        do
        {
          v121 = v120[1];
          if (v121 == v6)
          {
            if (v120[2] == v6)
              goto LABEL_300;
          }
          else
          {
            if (v121 >= v117)
              v121 %= v117;
            if (v121 != v40)
              break;
          }
          v120 = (_QWORD *)*v120;
        }
        while (v120);
      }
    }
  }
LABEL_240:
  v120 = operator new(0x28uLL);
  *v120 = 0;
  v120[1] = v6;
  v120[2] = v6;
  v120[3] = 0;
  *((_DWORD *)v120 + 8) = 0;
  v123 = (float)(unint64_t)(*(_QWORD *)(a1 + 6848) + 1);
  v124 = *(float *)(a1 + 6856);
  if (!v117 || (float)(v124 * (float)v117) < v123)
  {
    v125 = 1;
    if (v117 >= 3)
      v125 = (v117 & (v117 - 1)) != 0;
    v126 = v125 | (2 * v117);
    v127 = vcvtps_u32_f32(v123 / v124);
    if (v126 <= v127)
      v128 = v127;
    else
      v128 = v126;
    if (v128 == 1)
    {
      v128 = 2;
    }
    else if ((v128 & (v128 - 1)) != 0)
    {
      v128 = std::__next_prime(v128);
      v117 = *(_QWORD *)(a1 + 6832);
    }
    if (v128 <= v117)
    {
      if (v128 >= v117)
        goto LABEL_277;
      v141 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 6848) / *(float *)(a1 + 6856));
      if (v117 < 3 || (v142 = (uint8x8_t)vcnt_s8((int8x8_t)v117), v142.i16[0] = vaddlv_u8(v142), v142.u32[0] > 1uLL))
      {
        v141 = std::__next_prime(v141);
      }
      else
      {
        v143 = 1 << -(char)__clz(v141 - 1);
        if (v141 >= 2)
          v141 = v143;
      }
      if (v128 <= v141)
        v128 = v141;
      if (v128 >= v117)
      {
        v117 = *(_QWORD *)(a1 + 6832);
LABEL_277:
        if ((v117 & (v117 - 1)) != 0)
        {
          if (v6 >= v117)
            v40 = v6 % v117;
          else
            v40 = v6;
        }
        else
        {
          v40 = (v117 - 1) & v6;
        }
        goto LABEL_290;
      }
      if (!v128)
      {
        v153 = *(void **)(a1 + 6824);
        *(_QWORD *)(a1 + 6824) = 0;
        if (v153)
          operator delete(v153);
        v117 = 0;
        *(_QWORD *)(a1 + 6832) = 0;
        goto LABEL_277;
      }
    }
    if (!(v128 >> 61))
    {
      v129 = operator new(8 * v128);
      v130 = *(void **)(a1 + 6824);
      *(_QWORD *)(a1 + 6824) = v129;
      if (v130)
        operator delete(v130);
      v131 = 0;
      *(_QWORD *)(a1 + 6832) = v128;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 6824) + 8 * v131++) = 0;
      while (v128 != v131);
      v132 = *(_QWORD **)(a1 + 6840);
      if (!v132)
        goto LABEL_276;
      v133 = a1 + 6840;
      v134 = v132[1];
      v135 = v128 - 1;
      if ((v128 & (v128 - 1)) == 0)
      {
        v136 = v134 & v135;
        *(_QWORD *)(*(_QWORD *)(a1 + 6824) + 8 * v136) = v133;
        for (j = (_QWORD *)*v132; *v132; j = (_QWORD *)*v132)
        {
          v138 = j[1] & v135;
          if (v138 == v136)
          {
            v132 = j;
          }
          else
          {
            v139 = *(_QWORD *)(a1 + 6824);
            if (*(_QWORD *)(v139 + 8 * v138))
            {
              *v132 = *j;
              v140 = 8 * v138;
              *j = **(_QWORD **)(*(_QWORD *)(a1 + 6824) + v140);
              **(_QWORD **)(*(_QWORD *)(a1 + 6824) + v140) = j;
            }
            else
            {
              *(_QWORD *)(v139 + 8 * v138) = v132;
              v132 = j;
              v136 = v138;
            }
          }
        }
LABEL_276:
        v117 = v128;
        goto LABEL_277;
      }
      if (v134 >= v128)
        v134 %= v128;
      *(_QWORD *)(*(_QWORD *)(a1 + 6824) + 8 * v134) = v133;
      v144 = (_QWORD *)*v132;
      if (!*v132)
        goto LABEL_276;
      while (1)
      {
        v146 = v144[1];
        if (v146 >= v128)
          v146 %= v128;
        if (v146 != v134)
        {
          v147 = *(_QWORD *)(a1 + 6824);
          if (!*(_QWORD *)(v147 + 8 * v146))
          {
            *(_QWORD *)(v147 + 8 * v146) = v132;
            goto LABEL_281;
          }
          *v132 = *v144;
          v145 = 8 * v146;
          *v144 = **(_QWORD **)(*(_QWORD *)(a1 + 6824) + v145);
          **(_QWORD **)(*(_QWORD *)(a1 + 6824) + v145) = v144;
          v144 = v132;
        }
        v146 = v134;
LABEL_281:
        v132 = v144;
        v144 = (_QWORD *)*v144;
        v134 = v146;
        if (!v144)
          goto LABEL_276;
      }
    }
LABEL_319:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_290:
  v148 = *(_QWORD *)(a1 + 6824);
  v149 = *(_QWORD **)(v148 + 8 * v40);
  if (v149)
  {
    *v120 = *v149;
LABEL_298:
    *v149 = v120;
    goto LABEL_299;
  }
  *v120 = *(_QWORD *)(a1 + 6840);
  *(_QWORD *)(a1 + 6840) = v120;
  *(_QWORD *)(v148 + 8 * v40) = a1 + 6840;
  if (*v120)
  {
    v150 = *(_QWORD *)(*v120 + 8);
    if ((v117 & (v117 - 1)) != 0)
    {
      if (v150 >= v117)
        v150 %= v117;
    }
    else
    {
      v150 &= v117 - 1;
    }
    v149 = (_QWORD *)(*(_QWORD *)(a1 + 6824) + 8 * v150);
    goto LABEL_298;
  }
LABEL_299:
  ++*(_QWORD *)(a1 + 6848);
LABEL_300:
  *((float *)v120 + 6) = *a2;
  *((float *)v120 + 7) = a2[1];
  *((float *)v120 + 8) = a2[2];
  return v6;
}

void sub_19FE2EB7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19FE2EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::pop<ggl::DaVinci::ElevatedStroke>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  unint64_t v49;

  v49 = a2;
  v3 = *(_QWORD *)(a1 + 6672);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 6680) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 6696) + 24 * v4);
  if (v7 == *(uint64_t **)(a1 + 6704))
    return 0;
  v8 = operator new();
  v9 = (_QWORD *)ggl::BufferData::BufferData(v8, qword_1EE5548B0, 2, 0, 6, 1);
  v9[25] = ggl::DaVinci::ElevatedStroke::reflection(void)::reflection;
  *v9 = &off_1E42B9BB0;
  v10 = *(_QWORD *)(a1 + 6752);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v10 <= v5)
        v2 = v5 % v10;
    }
    else
    {
      v2 = (v10 - 1) & v5;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)(a1 + 6744) + 8 * v2);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v5)
            {
              if (v14[2] == v5)
                goto LABEL_88;
            }
            else if ((v16 & (v10 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_28;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v5)
          {
            if (v14[2] == v5)
              goto LABEL_88;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v2)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_28:
  v17 = (_QWORD *)(a1 + 6760);
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v5;
  v14[2] = v5;
  v14[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 6768) + 1);
  v19 = *(float *)(a1 + 6776);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v5 = v2;
    goto LABEL_78;
  }
  v20 = 1;
  if (v10 >= 3)
    v20 = (v10 & (v10 - 1)) != 0;
  v21 = v20 | (2 * v10);
  v22 = vcvtps_u32_f32(v18 / v19);
  if (v21 <= v22)
    prime = v22;
  else
    prime = v21;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v10 = *(_QWORD *)(a1 + 6752);
  }
  if (prime > v10)
  {
LABEL_41:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = operator new(8 * prime);
    v25 = *(void **)(a1 + 6744);
    *(_QWORD *)(a1 + 6744) = v24;
    if (v25)
      operator delete(v25);
    v26 = 0;
    *(_QWORD *)(a1 + 6752) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 6744) + 8 * v26++) = 0;
    while (prime != v26);
    v27 = (_QWORD *)*v17;
    if (!*v17)
      goto LABEL_65;
    v28 = v27[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)(a1 + 6744) + 8 * v30) = v17;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v27 = i;
        }
        else
        {
          v33 = *(_QWORD *)(a1 + 6744);
          if (*(_QWORD *)(v33 + 8 * v32))
          {
            *v27 = *i;
            v34 = 8 * v32;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 6744) + v34);
            **(_QWORD **)(*(_QWORD *)(a1 + 6744) + v34) = i;
          }
          else
          {
            *(_QWORD *)(v33 + 8 * v32) = v27;
            v27 = i;
            v30 = v32;
          }
        }
      }
LABEL_65:
      v10 = prime;
      goto LABEL_66;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 6744) + 8 * v28) = v17;
    v38 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_65;
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 != v28)
      {
        v41 = *(_QWORD *)(a1 + 6744);
        if (!*(_QWORD *)(v41 + 8 * v40))
        {
          *(_QWORD *)(v41 + 8 * v40) = v27;
          goto LABEL_70;
        }
        *v27 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*(_QWORD *)(a1 + 6744) + v39);
        **(_QWORD **)(*(_QWORD *)(a1 + 6744) + v39) = v38;
        v38 = v27;
      }
      v40 = v28;
LABEL_70:
      v27 = v38;
      v38 = (_QWORD *)*v38;
      v28 = v40;
      if (!v38)
        goto LABEL_65;
    }
  }
  if (prime >= v10)
    goto LABEL_66;
  v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 6768) / *(float *)(a1 + 6776));
  if (v10 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
  {
    v35 = std::__next_prime(v35);
  }
  else
  {
    v37 = 1 << -(char)__clz(v35 - 1);
    if (v35 >= 2)
      v35 = v37;
  }
  if (prime <= v35)
    prime = v35;
  if (prime < v10)
  {
    if (!prime)
    {
      v48 = *(void **)(a1 + 6744);
      *(_QWORD *)(a1 + 6744) = 0;
      if (v48)
        operator delete(v48);
      v10 = 0;
      *(_QWORD *)(a1 + 6752) = 0;
      goto LABEL_66;
    }
    goto LABEL_41;
  }
  v10 = *(_QWORD *)(a1 + 6752);
LABEL_66:
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v10 <= v5)
      v5 %= v10;
  }
  else
  {
    v5 &= v10 - 1;
  }
LABEL_78:
  v42 = *(_QWORD *)(a1 + 6744);
  v43 = *(_QWORD **)(v42 + 8 * v5);
  if (v43)
  {
    *v14 = *v43;
  }
  else
  {
    *v14 = *v17;
    *v17 = v14;
    *(_QWORD *)(v42 + 8 * v5) = v17;
    if (!*v14)
      goto LABEL_87;
    v44 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v44 >= v10)
        v44 %= v10;
    }
    else
    {
      v44 &= v10 - 1;
    }
    v43 = (_QWORD *)(*(_QWORD *)(a1 + 6744) + 8 * v44);
  }
  *v43 = v14;
LABEL_87:
  ++*(_QWORD *)(a1 + 6768);
LABEL_88:
  v45 = a1 + 6568;
  v46 = v14[3];
  v14[3] = v8;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>> const&>,std::tuple<>>(v45, v49, &v49);
  ++v47[3];
  *v7 = v8;
  return v8;
}

void sub_19FE2F0E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleCacheKey>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2F3DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::ColorStyleCacheKey>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2F6B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE2F994(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::getCachedHandle<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,unsigned long,md::CachedKey<md::StyleEmissiveColorCacheKey>,std::hash<unsigned long>>(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = a1[28];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*(_QWORD *)&a1[27] + 8 * v4);
  if (!v5)
    return 0;
  v6 = (_QWORD *)*v5;
  if (!*v5)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2)
          goto LABEL_22;
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return 0;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if (v6[2] != a2)
    goto LABEL_11;
LABEL_22:
  v10 = (uint64_t)&a1[5];
  v12 = v6[3];
  v11 = v6 + 3;
  if (std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>((uint64_t)&a1[5], v12, v11)[3]|| std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>(v10, *v11, v11)[4])
  {
    return *v11;
  }
  return 0;
}

unint64_t md::VKMRenderResourcesStore::addKey<md::StyleEmissiveColorCacheKey>(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  float v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  unint64_t v71;
  uint8x8_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  _QWORD **v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  float v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  size_t v96;
  size_t v97;
  _QWORD *i;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  size_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  _QWORD **v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  float v119;
  float v120;
  _BOOL8 v121;
  unint64_t v122;
  unint64_t v123;
  size_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  size_t v130;
  size_t v131;
  size_t v132;
  _QWORD *j;
  size_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint8x8_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  void *v148;
  void *v149;
  uint64_t v150;
  int v151;

  v5 = *a2;
  v150 = a2[1];
  v151 = *((_DWORD *)a2 + 4);
  v6 = *(_QWORD *)(a1 + 2728);
  if (*(_QWORD *)(a1 + 2720) == v6)
  {
    v9 = (-1431655765 * ((*(_QWORD *)(a1 + 2776) - *(_QWORD *)(a1 + 2768)) >> 3)) | 0x100000000;
    v10 = *(uint64_t **)(a1 + 2752);
    v11 = *(_QWORD *)(a1 + 2760);
    if ((unint64_t)v10 >= v11)
    {
      v13 = *(uint64_t **)(a1 + 2744);
      v14 = v10 - v13;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_306;
      v16 = v11 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          goto LABEL_305;
        v18 = operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = v19 + 1;
      if (v10 == v13)
      {
        v13 = v10;
      }
      else
      {
        v21 = (char *)v10 - (char *)v13 - 8;
        if (v21 < 0x58)
          goto LABEL_309;
        if ((unint64_t)((char *)v13 - v18) < 0x20)
          goto LABEL_309;
        v22 = (v21 >> 3) + 1;
        v23 = &v18[8 * v14 - 16];
        v24 = v10 - 2;
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 4;
          v25 -= 4;
        }
        while (v25);
        v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_309:
          do
          {
            v27 = *--v10;
            *--v19 = v27;
          }
          while (v10 != v13);
          v13 = *(uint64_t **)(a1 + 2744);
        }
      }
      *(_QWORD *)(a1 + 2744) = v19;
      *(_QWORD *)(a1 + 2752) = v12;
      *(_QWORD *)(a1 + 2760) = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v10 = v9;
      v12 = v10 + 1;
    }
    *(_QWORD *)(a1 + 2752) = v12;
    v8 = *(v12 - 1);
  }
  else
  {
    v7 = *(_QWORD *)(v6 - 8);
    *(_QWORD *)(a1 + 2728) = v6 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 2744) + 8 * v7) = -1431655765
                                                 * ((*(_QWORD *)(a1 + 2776) - *(_QWORD *)(a1 + 2768)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 2744) + 8 * v7 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 2744)
                                                                                           + 8 * v7
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v8 = v7 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 2744) + 8 * v7 + 4) << 32);
  }
  v28 = *(_QWORD **)(a1 + 2776);
  v29 = *(_QWORD *)(a1 + 2784);
  if ((unint64_t)v28 >= v29)
  {
    v31 = *(_QWORD **)(a1 + 2768);
    v32 = 0xAAAAAAAAAAAAAAABLL * (v28 - v31) + 1;
    if (v32 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_306;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v31) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_305;
      v35 = (char *)operator new(24 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[8 * (v28 - v31)];
    *(_QWORD *)v36 = v5;
    *((_QWORD *)v36 + 1) = v150;
    *((_DWORD *)v36 + 4) = v151;
    v30 = v36 + 24;
    if (v28 != v31)
    {
      do
      {
        v37 = *(v28 - 3);
        v28 -= 3;
        *((_QWORD *)v36 - 3) = v37;
        v36 -= 24;
        v38 = v28[1];
        *((_DWORD *)v36 + 4) = *((_DWORD *)v28 + 4);
        *((_QWORD *)v36 + 1) = v38;
      }
      while (v28 != v31);
      v28 = *(_QWORD **)(a1 + 2768);
    }
    *(_QWORD *)(a1 + 2768) = v36;
    *(_QWORD *)(a1 + 2776) = v30;
    *(_QWORD *)(a1 + 2784) = &v35[24 * v34];
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v28 = v5;
    v28[1] = v150;
    *((_DWORD *)v28 + 4) = v151;
    v30 = v28 + 3;
  }
  *(_QWORD *)(a1 + 2776) = v30;
  v39 = *(char **)(a1 + 2800);
  v40 = *(_QWORD *)(a1 + 2808);
  if ((unint64_t)v39 < v40)
  {
    *(_QWORD *)v39 = v8;
    v41 = (unint64_t)(v39 + 8);
    goto LABEL_65;
  }
  v42 = *(char **)(a1 + 2792);
  v43 = (v39 - v42) >> 3;
  v44 = v43 + 1;
  if ((unint64_t)(v43 + 1) >> 61)
LABEL_306:
    abort();
  v45 = v40 - (_QWORD)v42;
  if (v45 >> 2 > v44)
    v44 = v45 >> 2;
  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
    v46 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v46 = v44;
  if (v46)
  {
    if (v46 >> 61)
      goto LABEL_305;
    v47 = operator new(8 * v46);
  }
  else
  {
    v47 = 0;
  }
  v48 = &v47[8 * v43];
  v49 = &v47[8 * v46];
  *v48 = v8;
  v41 = (unint64_t)(v48 + 1);
  if (v39 != v42)
  {
    v50 = v39 - v42 - 8;
    if (v50 < 0x58)
      goto LABEL_310;
    if ((unint64_t)(v42 - v47) < 0x20)
      goto LABEL_310;
    v51 = (v50 >> 3) + 1;
    v52 = &v47[8 * v43 - 16];
    v53 = v39 - 16;
    v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    v48 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
    v39 -= 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
    if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_310:
      do
      {
        v56 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *--v48 = v56;
      }
      while (v39 != v42);
    }
  }
  *(_QWORD *)(a1 + 2792) = v48;
  *(_QWORD *)(a1 + 2800) = v41;
  *(_QWORD *)(a1 + 2808) = v49;
  if (v42)
    operator delete(v42);
LABEL_65:
  *(_QWORD *)(a1 + 2800) = v41;
  v57 = a1 + 2680;
  v58 = *(_QWORD *)(a1 + 2688);
  if (v58)
  {
    v59 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
    v59.i16[0] = vaddlv_u8(v59);
    if (v59.u32[0] > 1uLL)
    {
      v41 = v8;
      if (v8 >= v58)
        v41 = v8 % v58;
    }
    else
    {
      v41 = (v58 - 1) & v8;
    }
    v60 = *(_QWORD **)(*(_QWORD *)v57 + 8 * v41);
    if (v60)
    {
      v61 = (_QWORD *)*v60;
      if (v61)
      {
        if (v59.u32[0] < 2uLL)
        {
          while (1)
          {
            v63 = v61[1];
            if (v63 == v8)
            {
              if (v61[2] == v8)
                goto LABEL_124;
            }
            else if ((v63 & (v58 - 1)) != v41)
            {
              goto LABEL_86;
            }
            v61 = (_QWORD *)*v61;
            if (!v61)
              goto LABEL_86;
          }
        }
        do
        {
          v62 = v61[1];
          if (v62 == v8)
          {
            if (v61[2] == v8)
              goto LABEL_124;
          }
          else
          {
            if (v62 >= v58)
              v62 %= v58;
            if (v62 != v41)
              break;
          }
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
    }
  }
LABEL_86:
  v64 = (char *)operator new(0x30uLL);
  *(_QWORD *)v64 = 0;
  *((_QWORD *)v64 + 1) = v8;
  *((_QWORD *)v64 + 2) = v8;
  *(int64x2_t *)(v64 + 24) = vdupq_n_s64(1uLL);
  v64[40] = 0;
  v65 = (float)(unint64_t)(*(_QWORD *)(a1 + 2704) + 1);
  v66 = *(float *)(a1 + 2712);
  if (!v58 || (float)(v66 * (float)v58) < v65)
  {
    v67 = 1;
    if (v58 >= 3)
      v67 = (v58 & (v58 - 1)) != 0;
    v68 = v67 | (2 * v58);
    v69 = vcvtps_u32_f32(v65 / v66);
    if (v68 <= v69)
      prime = v69;
    else
      prime = v68;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v58 = *(_QWORD *)(a1 + 2688);
    }
    if (prime > v58)
      goto LABEL_98;
    if (prime < v58)
    {
      v71 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2704) / *(float *)(a1 + 2712));
      if (v58 < 3 || (v72 = (uint8x8_t)vcnt_s8((int8x8_t)v58), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
      {
        v71 = std::__next_prime(v71);
      }
      else
      {
        v73 = 1 << -(char)__clz(v71 - 1);
        if (v71 >= 2)
          v71 = v73;
      }
      if (prime <= v71)
        prime = v71;
      if (prime < v58)
LABEL_98:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 2680, prime);
    }
    v58 = *(_QWORD *)(a1 + 2688);
    if ((v58 & (v58 - 1)) != 0)
    {
      if (v8 >= v58)
        v41 = v8 % v58;
      else
        v41 = v8;
    }
    else
    {
      v41 = (v58 - 1) & v8;
    }
  }
  v74 = *(_QWORD *)v57;
  v75 = *(_QWORD **)(*(_QWORD *)v57 + 8 * v41);
  if (v75)
  {
    *(_QWORD *)v64 = *v75;
LABEL_122:
    *v75 = v64;
    goto LABEL_123;
  }
  *(_QWORD *)v64 = *(_QWORD *)(a1 + 2696);
  *(_QWORD *)(a1 + 2696) = v64;
  *(_QWORD *)(v74 + 8 * v41) = a1 + 2696;
  if (*(_QWORD *)v64)
  {
    v76 = *(_QWORD *)(*(_QWORD *)v64 + 8);
    if ((v58 & (v58 - 1)) != 0)
    {
      if (v76 >= v58)
        v76 %= v58;
    }
    else
    {
      v76 &= v58 - 1;
    }
    v75 = (_QWORD *)(*(_QWORD *)v57 + 8 * v76);
    goto LABEL_122;
  }
LABEL_123:
  ++*(_QWORD *)(a1 + 2704);
LABEL_124:
  v77 = *(_QWORD *)a3;
  v78 = *(_QWORD *)(a1 + 2864);
  if (v78)
  {
    v79 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
    v79.i16[0] = vaddlv_u8(v79);
    if (v79.u32[0] > 1uLL)
    {
      v57 = *(_QWORD *)a3;
      if (v77 >= v78)
        v57 = v77 % v78;
    }
    else
    {
      v57 = (v78 - 1) & v77;
    }
    v80 = *(_QWORD ***)(*(_QWORD *)(a1 + 2856) + 8 * v57);
    if (v80)
    {
      v81 = *v80;
      if (*v80)
      {
        if (v79.u32[0] < 2uLL)
        {
          while (1)
          {
            v83 = v81[1];
            if (v83 == v77)
            {
              if (v81[2] == v77)
                goto LABEL_205;
            }
            else if ((v83 & (v78 - 1)) != v57)
            {
              goto LABEL_145;
            }
            v81 = (_QWORD *)*v81;
            if (!v81)
              goto LABEL_145;
          }
        }
        do
        {
          v82 = v81[1];
          if (v82 == v77)
          {
            if (v81[2] == v77)
              goto LABEL_205;
          }
          else
          {
            if (v82 >= v78)
              v82 %= v78;
            if (v82 != v57)
              break;
          }
          v81 = (_QWORD *)*v81;
        }
        while (v81);
      }
    }
  }
LABEL_145:
  v81 = operator new(0x20uLL);
  *v81 = 0;
  v81[1] = v77;
  v81[2] = v77;
  v81[3] = 0;
  v84 = (float)(unint64_t)(*(_QWORD *)(a1 + 2880) + 1);
  v85 = *(float *)(a1 + 2888);
  if (!v78 || (float)(v85 * (float)v78) < v84)
  {
    v86 = 1;
    if (v78 >= 3)
      v86 = (v78 & (v78 - 1)) != 0;
    v87 = v86 | (2 * v78);
    v88 = vcvtps_u32_f32(v84 / v85);
    if (v87 <= v88)
      v89 = v88;
    else
      v89 = v87;
    if (v89 == 1)
    {
      v89 = 2;
    }
    else if ((v89 & (v89 - 1)) != 0)
    {
      v89 = std::__next_prime(v89);
      v78 = *(_QWORD *)(a1 + 2864);
    }
    if (v89 <= v78)
    {
      if (v89 >= v78)
        goto LABEL_182;
      v102 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2880) / *(float *)(a1 + 2888));
      if (v78 < 3 || (v103 = (uint8x8_t)vcnt_s8((int8x8_t)v78), v103.i16[0] = vaddlv_u8(v103), v103.u32[0] > 1uLL))
      {
        v102 = std::__next_prime(v102);
      }
      else
      {
        v104 = 1 << -(char)__clz(v102 - 1);
        if (v102 >= 2)
          v102 = v104;
      }
      if (v89 <= v102)
        v89 = v102;
      if (v89 >= v78)
      {
        v78 = *(_QWORD *)(a1 + 2864);
LABEL_182:
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v77 >= v78)
            v57 = v77 % v78;
          else
            v57 = v77;
        }
        else
        {
          v57 = (v78 - 1) & v77;
        }
        goto LABEL_195;
      }
      if (!v89)
      {
        v148 = *(void **)(a1 + 2856);
        *(_QWORD *)(a1 + 2856) = 0;
        if (v148)
          operator delete(v148);
        v78 = 0;
        *(_QWORD *)(a1 + 2864) = 0;
        goto LABEL_182;
      }
    }
    if (v89 >> 61)
      goto LABEL_305;
    v90 = operator new(8 * v89);
    v91 = *(void **)(a1 + 2856);
    *(_QWORD *)(a1 + 2856) = v90;
    if (v91)
      operator delete(v91);
    v92 = 0;
    *(_QWORD *)(a1 + 2864) = v89;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 2856) + 8 * v92++) = 0;
    while (v89 != v92);
    v93 = *(_QWORD **)(a1 + 2872);
    if (!v93)
    {
LABEL_181:
      v78 = v89;
      goto LABEL_182;
    }
    v94 = a1 + 2872;
    v95 = v93[1];
    v96 = v89 - 1;
    if ((v89 & (v89 - 1)) == 0)
    {
      v97 = v95 & v96;
      *(_QWORD *)(*(_QWORD *)(a1 + 2856) + 8 * v97) = v94;
      for (i = (_QWORD *)*v93; *v93; i = (_QWORD *)*v93)
      {
        v99 = i[1] & v96;
        if (v99 == v97)
        {
          v93 = i;
        }
        else
        {
          v100 = *(_QWORD *)(a1 + 2856);
          if (*(_QWORD *)(v100 + 8 * v99))
          {
            *v93 = *i;
            v101 = 8 * v99;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 2856) + v101);
            **(_QWORD **)(*(_QWORD *)(a1 + 2856) + v101) = i;
          }
          else
          {
            *(_QWORD *)(v100 + 8 * v99) = v93;
            v93 = i;
            v97 = v99;
          }
        }
      }
      goto LABEL_181;
    }
    if (v95 >= v89)
      v95 %= v89;
    *(_QWORD *)(*(_QWORD *)(a1 + 2856) + 8 * v95) = v94;
    v105 = (_QWORD *)*v93;
    if (!*v93)
      goto LABEL_181;
    while (1)
    {
      v107 = v105[1];
      if (v107 >= v89)
        v107 %= v89;
      if (v107 != v95)
      {
        v108 = *(_QWORD *)(a1 + 2856);
        if (!*(_QWORD *)(v108 + 8 * v107))
        {
          *(_QWORD *)(v108 + 8 * v107) = v93;
          goto LABEL_186;
        }
        *v93 = *v105;
        v106 = 8 * v107;
        *v105 = **(_QWORD **)(*(_QWORD *)(a1 + 2856) + v106);
        **(_QWORD **)(*(_QWORD *)(a1 + 2856) + v106) = v105;
        v105 = v93;
      }
      v107 = v95;
LABEL_186:
      v93 = v105;
      v105 = (_QWORD *)*v105;
      v95 = v107;
      if (!v105)
        goto LABEL_181;
    }
  }
LABEL_195:
  v109 = *(_QWORD *)(a1 + 2856);
  v110 = *(_QWORD **)(v109 + 8 * v57);
  if (v110)
  {
    *v81 = *v110;
LABEL_203:
    *v110 = v81;
    goto LABEL_204;
  }
  *v81 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v81;
  *(_QWORD *)(v109 + 8 * v57) = a1 + 2872;
  if (*v81)
  {
    v111 = *(_QWORD *)(*v81 + 8);
    if ((v78 & (v78 - 1)) != 0)
    {
      if (v111 >= v78)
        v111 %= v78;
    }
    else
    {
      v111 &= v78 - 1;
    }
    v110 = (_QWORD *)(*(_QWORD *)(a1 + 2856) + 8 * v111);
    goto LABEL_203;
  }
LABEL_204:
  ++*(_QWORD *)(a1 + 2880);
LABEL_205:
  v81[3] = v8;
  v112 = *(_QWORD *)a3;
  v113 = *(_QWORD *)(a1 + 2904);
  if (v113)
  {
    v114 = (uint8x8_t)vcnt_s8((int8x8_t)v113);
    v114.i16[0] = vaddlv_u8(v114);
    if (v114.u32[0] > 1uLL)
    {
      a3 = v8;
      if (v8 >= v113)
        a3 = v8 % v113;
    }
    else
    {
      a3 = (v113 - 1) & v8;
    }
    v115 = *(_QWORD ***)(*(_QWORD *)(a1 + 2896) + 8 * a3);
    if (v115)
    {
      v116 = *v115;
      if (*v115)
      {
        if (v114.u32[0] < 2uLL)
        {
          while (1)
          {
            v118 = v116[1];
            if (v118 == v8)
            {
              if (v116[2] == v8)
                goto LABEL_286;
            }
            else if ((v118 & (v113 - 1)) != a3)
            {
              goto LABEL_226;
            }
            v116 = (_QWORD *)*v116;
            if (!v116)
              goto LABEL_226;
          }
        }
        do
        {
          v117 = v116[1];
          if (v117 == v8)
          {
            if (v116[2] == v8)
              goto LABEL_286;
          }
          else
          {
            if (v117 >= v113)
              v117 %= v113;
            if (v117 != a3)
              break;
          }
          v116 = (_QWORD *)*v116;
        }
        while (v116);
      }
    }
  }
LABEL_226:
  v116 = operator new(0x20uLL);
  *v116 = 0;
  v116[1] = v8;
  v116[2] = v8;
  v116[3] = 0;
  v119 = (float)(unint64_t)(*(_QWORD *)(a1 + 2920) + 1);
  v120 = *(float *)(a1 + 2928);
  if (!v113 || (float)(v120 * (float)v113) < v119)
  {
    v121 = 1;
    if (v113 >= 3)
      v121 = (v113 & (v113 - 1)) != 0;
    v122 = v121 | (2 * v113);
    v123 = vcvtps_u32_f32(v119 / v120);
    if (v122 <= v123)
      v124 = v123;
    else
      v124 = v122;
    if (v124 == 1)
    {
      v124 = 2;
    }
    else if ((v124 & (v124 - 1)) != 0)
    {
      v124 = std::__next_prime(v124);
      v113 = *(_QWORD *)(a1 + 2904);
    }
    if (v124 <= v113)
    {
      if (v124 >= v113)
        goto LABEL_263;
      v137 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2920) / *(float *)(a1 + 2928));
      if (v113 < 3 || (v138 = (uint8x8_t)vcnt_s8((int8x8_t)v113), v138.i16[0] = vaddlv_u8(v138), v138.u32[0] > 1uLL))
      {
        v137 = std::__next_prime(v137);
      }
      else
      {
        v139 = 1 << -(char)__clz(v137 - 1);
        if (v137 >= 2)
          v137 = v139;
      }
      if (v124 <= v137)
        v124 = v137;
      if (v124 >= v113)
      {
        v113 = *(_QWORD *)(a1 + 2904);
LABEL_263:
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v8 >= v113)
            a3 = v8 % v113;
          else
            a3 = v8;
        }
        else
        {
          a3 = (v113 - 1) & v8;
        }
        goto LABEL_276;
      }
      if (!v124)
      {
        v149 = *(void **)(a1 + 2896);
        *(_QWORD *)(a1 + 2896) = 0;
        if (v149)
          operator delete(v149);
        v113 = 0;
        *(_QWORD *)(a1 + 2904) = 0;
        goto LABEL_263;
      }
    }
    if (!(v124 >> 61))
    {
      v125 = operator new(8 * v124);
      v126 = *(void **)(a1 + 2896);
      *(_QWORD *)(a1 + 2896) = v125;
      if (v126)
        operator delete(v126);
      v127 = 0;
      *(_QWORD *)(a1 + 2904) = v124;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 8 * v127++) = 0;
      while (v124 != v127);
      v128 = *(_QWORD **)(a1 + 2912);
      if (!v128)
        goto LABEL_262;
      v129 = a1 + 2912;
      v130 = v128[1];
      v131 = v124 - 1;
      if ((v124 & (v124 - 1)) == 0)
      {
        v132 = v130 & v131;
        *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 8 * v132) = v129;
        for (j = (_QWORD *)*v128; *v128; j = (_QWORD *)*v128)
        {
          v134 = j[1] & v131;
          if (v134 == v132)
          {
            v128 = j;
          }
          else
          {
            v135 = *(_QWORD *)(a1 + 2896);
            if (*(_QWORD *)(v135 + 8 * v134))
            {
              *v128 = *j;
              v136 = 8 * v134;
              *j = **(_QWORD **)(*(_QWORD *)(a1 + 2896) + v136);
              **(_QWORD **)(*(_QWORD *)(a1 + 2896) + v136) = j;
            }
            else
            {
              *(_QWORD *)(v135 + 8 * v134) = v128;
              v128 = j;
              v132 = v134;
            }
          }
        }
LABEL_262:
        v113 = v124;
        goto LABEL_263;
      }
      if (v130 >= v124)
        v130 %= v124;
      *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 8 * v130) = v129;
      v140 = (_QWORD *)*v128;
      if (!*v128)
        goto LABEL_262;
      while (1)
      {
        v142 = v140[1];
        if (v142 >= v124)
          v142 %= v124;
        if (v142 != v130)
        {
          v143 = *(_QWORD *)(a1 + 2896);
          if (!*(_QWORD *)(v143 + 8 * v142))
          {
            *(_QWORD *)(v143 + 8 * v142) = v128;
            goto LABEL_267;
          }
          *v128 = *v140;
          v141 = 8 * v142;
          *v140 = **(_QWORD **)(*(_QWORD *)(a1 + 2896) + v141);
          **(_QWORD **)(*(_QWORD *)(a1 + 2896) + v141) = v140;
          v140 = v128;
        }
        v142 = v130;
LABEL_267:
        v128 = v140;
        v140 = (_QWORD *)*v140;
        v130 = v142;
        if (!v140)
          goto LABEL_262;
      }
    }
LABEL_305:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_276:
  v144 = *(_QWORD *)(a1 + 2896);
  v145 = *(_QWORD **)(v144 + 8 * a3);
  if (v145)
  {
    *v116 = *v145;
LABEL_284:
    *v145 = v116;
    goto LABEL_285;
  }
  *v116 = *(_QWORD *)(a1 + 2912);
  *(_QWORD *)(a1 + 2912) = v116;
  *(_QWORD *)(v144 + 8 * a3) = a1 + 2912;
  if (*v116)
  {
    v146 = *(_QWORD *)(*v116 + 8);
    if ((v113 & (v113 - 1)) != 0)
    {
      if (v146 >= v113)
        v146 %= v113;
    }
    else
    {
      v146 &= v113 - 1;
    }
    v145 = (_QWORD *)(*(_QWORD *)(a1 + 2896) + 8 * v146);
    goto LABEL_284;
  }
LABEL_285:
  ++*(_QWORD *)(a1 + 2920);
LABEL_286:
  v116[3] = v112;
  return v8;
}

